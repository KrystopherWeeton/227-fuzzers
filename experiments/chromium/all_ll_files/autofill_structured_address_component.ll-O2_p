; ModuleID = '../../components/autofill/core/browser/data_model/autofill_structured_address_component.cc'
source_filename = "../../components/autofill/core/browser/data_model/autofill_structured_address_component.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.autofill::structured_address::AddressComponent" = type <{ i32 (...)**, %"class.absl::optional", i32, i32, %"class.std::__1::vector", %"class.absl::optional.7", %"class.autofill::structured_address::AddressComponent"*, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.0 }
%union.anon.0 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"**, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.autofill::structured_address::AddressComponent"** }
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { %"class.std::__1::vector.12" }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"*, %"class.std::__1::__compressed_pair.14" }
%"struct.autofill::structured_address::AddressToken" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.autofill::structured_address::AddressToken"* }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::basic_string.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.22 }
%union.anon.22 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string.19", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon.23 }
%struct.anon.23 = type { i8 }
%"class.autofill::DenseSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { [2 x i64] }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"class.std::__1::basic_string.19"* }
%"class.autofill::AutofillType" = type { i32, i32, i32 }
%"class.std::__1::vector.36" = type { %"class.std::__1::__vector_base.37" }
%"class.std::__1::__vector_base.37" = type { i32*, i32*, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i32* }
%"class.std::__1::vector.43" = type { %"class.std::__1::__vector_base.44" }
%"class.std::__1::__vector_base.44" = type { %"class.re2::RE2"**, %"class.re2::RE2"**, %"class.std::__1::__compressed_pair.46" }
%"class.re2::RE2" = type { %"class.std::__1::basic_string.19", %"class.re2::RE2::Options", %"class.re2::Regexp"*, %"class.std::__1::basic_string.19"*, i32, %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19", i8, %"class.re2::Regexp"*, %"class.re2::Prog"*, i32, i8, %"class.re2::Prog"*, %"class.std::__1::map"*, %"class.std::__1::map.45"*, %"struct.std::__1::once_flag", %"struct.std::__1::once_flag", %"struct.std::__1::once_flag" }
%"class.re2::RE2::Options" = type { i32, i8, i8, i8, i64, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.re2::Regexp" = type opaque
%"class.re2::Prog" = type opaque
%"class.std::__1::map" = type opaque
%"class.std::__1::map.45" = type opaque
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.re2::RE2"** }
%"class.std::__1::map.52" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.53", %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { i64 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type" }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair.62" }
%"struct.std::__1::pair.62" = type { %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19" }
%"class.std::__1::vector.63" = type { %"class.std::__1::__vector_base.64" }
%"class.std::__1::__vector_base.64" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.std::__1::basic_string"* }
%"class.base::BasicStringPiece.61" = type { i16*, i64 }
%"struct.autofill::structured_address::SortedTokenComparisonResult" = type { i32, %"class.std::__1::vector.12" }
%"class.std::__1::vector.80" = type { %"class.std::__1::__vector_base.81" }
%"class.std::__1::__vector_base.81" = type { i32*, i32*, %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { i32* }
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZN8autofill18structured_address16AddressComponent22MigrateLegacyStructureEb = comdat any

$_ZNK8autofill18structured_address16AddressComponent32GetAdditionalSupportedFieldTypesEPNS_8DenseSetINS_15ServerFieldTypeELS3_118EEE = comdat any

$_ZN8autofill18structured_address16AddressComponent22PostAssignSanitizationEv = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_ = comdat any

$_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs = comdat any

$_ZNSt3__16vectorIN8autofill18structured_address12AddressTokenENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_ = comdat any

$_ZN8autofill18structured_address12AddressTokenC2ERKS1_ = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_ = comdat any

$_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJN4base16BasicStringPieceIDsS3_EEEEEvDpOT_ = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_ = comdat any

@.str = private unnamed_addr constant [9 x i8] c"NoStatus\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"Parsed\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Formatted\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"Observed\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"ServerParsed\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"UserVerified\00", align 1
@_ZTVN8autofill18structured_address16AddressComponentE = hidden unnamed_addr constant { [27 x i8*] } { [27 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponentD2Ev to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponentD0Ev to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*, i1)* @_ZN8autofill18structured_address16AddressComponent22MigrateLegacyStructureEb to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)* @_ZN8autofill18structured_address16AddressComponent8SetValueENSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEENS0_18VerificationStatusE to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent10UnsetValueEv to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent23RecursivelyCompleteTreeEv to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent16CompleteFullTreeEv to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)* @_ZNK8autofill18structured_address16AddressComponent32GetAdditionalSupportedFieldTypesEPNS_8DenseSetINS_15ServerFieldTypeELS3_118EEE to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent24IsMergeableWithComponentERKS1_ to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent25MergeVerificationStatusesERKS1_ to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)* @_ZN8autofill18structured_address16AddressComponent18MergeWithComponentERKS1_b to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent20WipeInvalidStructureEv to i8*), i8* bitcast (i32 (%"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent29GetStructureVerificationScoreEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent19GetBestFormatStringEv to i8*), i8* bitcast (void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent37GetParseRegularExpressionsByRelevanceEv to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent40ParseValueAndAssignSubcomponentsByMethodEv to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent48ParseValueAndAssignSubcomponentsByFallbackMethodEv to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)* @_ZN8autofill18structured_address16AddressComponent44ConvertAndSetValueForAdditionalFieldTypeNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusE to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)* @_ZNK8autofill18structured_address16AddressComponent47ConvertAndGetTheValueForAdditionalFieldTypeNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEE to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)* @_ZN8autofill18structured_address16AddressComponent22ConsumeAdditionalTokenERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEE to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent12IsValueValidEv to i8*), i8* bitcast (void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponent22PostAssignSanitizationEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent15NormalizedValueEv to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent18ValueForComparisonEv to i8*), i8* bitcast (i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)* @_ZNK8autofill18structured_address16AddressComponent33HasNewerValuePrecendenceInMergingERKS1_ to i8*)] }, align 8
@.str.6 = private unnamed_addr constant [91 x i8] c"../../components/autofill/core/browser/data_model/autofill_structured_address_component.cc\00", align 1
@.str.7 = private unnamed_addr constant [53 x i8] c"other.subcomponents_.size() == subcomponents_.size()\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.9 = private unnamed_addr constant [2 x i16] [i16 32, i16 0], align 2
@.str.10 = private unnamed_addr constant [2 x i16] [i16 59, i16 0], align 2
@.str.11 = private unnamed_addr constant [1 x i16] zeroinitializer, align 2
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN8autofill18structured_address16AddressComponentC1ENS_15ServerFieldTypeEPS1_j = hidden unnamed_addr alias void (%"class.autofill::structured_address::AddressComponent"*, i32, %"class.autofill::structured_address::AddressComponent"*, i32), void (%"class.autofill::structured_address::AddressComponent"*, i32, %"class.autofill::structured_address::AddressComponent"*, i32)* @_ZN8autofill18structured_address16AddressComponentC2ENS_15ServerFieldTypeEPS1_j
@_ZN8autofill18structured_address16AddressComponentD1Ev = hidden unnamed_addr alias void (%"class.autofill::structured_address::AddressComponent"*), void (%"class.autofill::structured_address::AddressComponent"*)* @_ZN8autofill18structured_address16AddressComponentD2Ev

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address35IsLessSignificantVerificationStatusENS0_18VerificationStatusES1_(i32, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %0, 5
  %4 = add i32 %1, -3
  %5 = icmp ult i32 %4, 2
  %6 = and i1 %3, %5
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = icmp ne i32 %1, 5
  %9 = add i32 %0, -3
  %10 = icmp ugt i32 %9, 1
  %11 = icmp slt i32 %0, %1
  %12 = or i1 %10, %8
  %13 = and i1 %11, %12
  ret i1 %13

14:                                               ; preds = %2
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN8autofill18structured_address36GetMoreSignificantVerificationStatusENS0_18VerificationStatusES1_(i32, i32) local_unnamed_addr #0 {
  %3 = icmp eq i32 %0, 5
  %4 = add i32 %1, -3
  %5 = icmp ult i32 %4, 2
  %6 = and i1 %3, %5
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = icmp ne i32 %1, 5
  %9 = add i32 %0, -3
  %10 = icmp ugt i32 %9, 1
  %11 = icmp slt i32 %0, %1
  %12 = or i1 %10, %8
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %2, %7
  br label %15

15:                                               ; preds = %7, %14
  %16 = phi i32 [ %1, %14 ], [ %0, %7 ]
  ret i32 %16
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN8autofill18structured_addresslsERNSt3__113basic_ostreamIcNS1_11char_traitsIcEEEENS0_18VerificationStatusE(%"class.std::__1::basic_ostream"* returned dereferenceable(160), i32) local_unnamed_addr #1 {
  switch i32 %1, label %15 [
    i32 0, label %3
    i32 1, label %5
    i32 2, label %7
    i32 3, label %9
    i32 5, label %11
    i32 4, label %13
  ]

3:                                                ; preds = %2
  %4 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0), i64 8) #13
  br label %15

5:                                                ; preds = %2
  %6 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i64 6) #13
  br label %15

7:                                                ; preds = %2
  %8 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i64 9) #13
  br label %15

9:                                                ; preds = %2
  %10 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i64 8) #13
  br label %15

11:                                               ; preds = %2
  %12 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i64 12) #13
  br label %15

13:                                               ; preds = %2
  %14 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i64 12) #13
  br label %15

15:                                               ; preds = %2, %13, %11, %9, %7, %5, %3
  ret %"class.std::__1::basic_ostream"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponentC2ENS_15ServerFieldTypeEPS1_j(%"class.autofill::structured_address::AddressComponent"*, i32, %"class.autofill::structured_address::AddressComponent"*, i32) unnamed_addr #1 align 2 {
  %5 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [27 x i8*] }, { [27 x i8*] }* @_ZTVN8autofill18structured_address16AddressComponentE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 8
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %9 = bitcast %union.anon* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 28, i1 false)
  store i32 %1, i32* %8, align 4
  %10 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %11 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast %union.anon.11* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 24, i1 false) #13
  %13 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 6
  %14 = bitcast %"class.std::__1::vector"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 25, i1 false)
  store %"class.autofill::structured_address::AddressComponent"* %2, %"class.autofill::structured_address::AddressComponent"** %13, align 8
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 7
  store i32 %3, i32* %15, align 8
  %16 = icmp eq %"class.autofill::structured_address::AddressComponent"* %2, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %4
  tail call void @_ZN8autofill18structured_address16AddressComponent17RegisterChildNodeEPS1_(%"class.autofill::structured_address::AddressComponent"* nonnull %2, %"class.autofill::structured_address::AddressComponent"* %0)
  br label %18

18:                                               ; preds = %4, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent17RegisterChildNodeEPS1_(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %3 = ptrtoint %"class.autofill::structured_address::AddressComponent"* %1 to i64
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %5 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %6 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %5, align 8
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %8 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %7, align 8
  %9 = icmp eq %"class.autofill::structured_address::AddressComponent"** %6, %8
  %10 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %8 to i64
  br i1 %9, label %16, label %11

11:                                               ; preds = %2
  %12 = bitcast %"class.autofill::structured_address::AddressComponent"** %6 to i64*
  store i64 %3, i64* %12, align 8
  %13 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %6, i64 1
  %14 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %13 to i64
  %15 = bitcast %"class.autofill::structured_address::AddressComponent"*** %5 to i64*
  store i64 %14, i64* %15, align 8
  br label %73

16:                                               ; preds = %2
  %17 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %6 to i64
  %18 = bitcast %"class.autofill::structured_address::AddressComponent"*** %5 to i64*
  %19 = bitcast %"class.std::__1::vector"* %4 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 3
  %23 = add nsw i64 %22, 1
  %24 = icmp ugt i64 %23, 2305843009213693951
  br i1 %24, label %25, label %27

25:                                               ; preds = %16
  %26 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %26) #14
  unreachable

27:                                               ; preds = %16
  %28 = bitcast %"class.autofill::structured_address::AddressComponent"*** %7 to i64*
  %29 = sub i64 %10, %20
  %30 = ashr exact i64 %29, 3
  %31 = icmp ult i64 %30, 1152921504606846975
  br i1 %31, label %32, label %40

32:                                               ; preds = %27
  %33 = ashr exact i64 %29, 2
  %34 = icmp ult i64 %33, %23
  %35 = select i1 %34, i64 %23, i64 %33
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = icmp ugt i64 %35, 2305843009213693951
  br i1 %38, label %39, label %40

39:                                               ; preds = %37
  tail call void @abort() #14
  unreachable

40:                                               ; preds = %37, %27
  %41 = phi i64 [ %35, %37 ], [ 2305843009213693951, %27 ]
  %42 = shl i64 %41, 3
  %43 = tail call i8* @_Znwm(i64 %42) #15
  %44 = bitcast i8* %43 to %"class.autofill::structured_address::AddressComponent"**
  br label %45

45:                                               ; preds = %40, %32
  %46 = phi i64 [ %41, %40 ], [ 0, %32 ]
  %47 = phi %"class.autofill::structured_address::AddressComponent"** [ %44, %40 ], [ null, %32 ]
  %48 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %47, i64 %22
  %49 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %47, i64 %46
  %50 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %49 to i64
  %51 = bitcast %"class.autofill::structured_address::AddressComponent"** %48 to i64*
  store i64 %3, i64* %51, align 8
  %52 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %48, i64 1
  %53 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %55 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %54, align 8
  %56 = load i64, i64* %18, align 8
  %57 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 3
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %48, i64 %60
  %62 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %45
  %65 = bitcast %"class.autofill::structured_address::AddressComponent"** %61 to i8*
  %66 = bitcast %"class.autofill::structured_address::AddressComponent"** %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 %58, i1 false) #13
  %67 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %54, align 8
  br label %68

68:                                               ; preds = %64, %45
  %69 = phi %"class.autofill::structured_address::AddressComponent"** [ %55, %45 ], [ %67, %64 ]
  store i64 %62, i64* %19, align 8
  store i64 %53, i64* %18, align 8
  store i64 %50, i64* %28, align 8
  %70 = icmp eq %"class.autofill::structured_address::AddressComponent"** %69, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = bitcast %"class.autofill::structured_address::AddressComponent"** %69 to i8*
  tail call void @_ZdlPv(i8* %72) #15
  br label %73

73:                                               ; preds = %11, %68, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponentD2Ev(%"class.autofill::structured_address::AddressComponent"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [27 x i8*] }, { [27 x i8*] }* @_ZTVN8autofill18structured_address16AddressComponentE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %43, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %7, i64 0, i32 0, i32 0
  %9 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %8, align 8
  %10 = icmp eq %"struct.autofill::structured_address::AddressToken"* %9, null
  br i1 %10, label %42, label %11

11:                                               ; preds = %6
  %12 = bitcast %"struct.autofill::structured_address::AddressToken"* %9 to i8*
  %13 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %14 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %13, align 8
  %15 = icmp eq %"struct.autofill::structured_address::AddressToken"* %14, %9
  br i1 %15, label %40, label %16

16:                                               ; preds = %11, %35
  %17 = phi %"struct.autofill::structured_address::AddressToken"* [ %18, %35 ], [ %14, %11 ]
  %18 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %17, i64 -1
  %19 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %17, i64 -1, i32 1
  %20 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %20, i64 0, i32 1, i32 1
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %16
  %25 = bitcast %"class.std::__1::basic_string"* %19 to i8**
  %26 = load i8*, i8** %25, align 8
  tail call void @_ZdlPv(i8* %26) #15
  br label %27

27:                                               ; preds = %24, %16
  %28 = bitcast %"struct.autofill::structured_address::AddressToken"* %18 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %28, i64 0, i32 1, i32 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %27
  %33 = bitcast %"struct.autofill::structured_address::AddressToken"* %18 to i8**
  %34 = load i8*, i8** %33, align 8
  tail call void @_ZdlPv(i8* %34) #15
  br label %35

35:                                               ; preds = %32, %27
  %36 = icmp eq %"struct.autofill::structured_address::AddressToken"* %18, %9
  br i1 %36, label %37, label %16

37:                                               ; preds = %35
  %38 = bitcast %"class.std::__1::vector.12"* %7 to i8**
  %39 = load i8*, i8** %38, align 8
  br label %40

40:                                               ; preds = %37, %11
  %41 = phi i8* [ %39, %37 ], [ %12, %11 ]
  store %"struct.autofill::structured_address::AddressToken"* %9, %"struct.autofill::structured_address::AddressToken"** %13, align 8
  tail call void @_ZdlPv(i8* %41) #15
  br label %42

42:                                               ; preds = %40, %6
  store i8 0, i8* %3, align 8
  br label %43

43:                                               ; preds = %1, %42
  %44 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %45 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %44, align 8
  %46 = icmp eq %"class.autofill::structured_address::AddressComponent"** %45, null
  br i1 %46, label %52, label %47

47:                                               ; preds = %43
  %48 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %45 to i64
  %49 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %50 = bitcast %"class.autofill::structured_address::AddressComponent"*** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = bitcast %"class.autofill::structured_address::AddressComponent"** %45 to i8*
  tail call void @_ZdlPv(i8* %51) #15
  br label %52

52:                                               ; preds = %43, %47
  %53 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %54 = load i8, i8* %53, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  br i1 %55, label %66, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %58 = bitcast %"class.std::__1::basic_string"* %57 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %59 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %58, i64 0, i32 1, i32 1
  %60 = load i8, i8* %59, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %56
  %63 = bitcast %"class.std::__1::basic_string"* %57 to i8**
  %64 = load i8*, i8** %63, align 8
  tail call void @_ZdlPv(i8* %64) #15
  br label %65

65:                                               ; preds = %62, %56
  store i8 0, i8* %53, align 8
  br label %66

66:                                               ; preds = %52, %65
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponentD0Ev(%"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  tail call void @_ZN8autofill18structured_address16AddressComponentD2Ev(%"class.autofill::structured_address::AddressComponent"* %0) #13
  %2 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8autofill18structured_address16AddressComponent14GetStorageTypeEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv(%"class.std::__1::basic_string.19"* noalias sret, %"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  tail call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* sret %0, i32 %4) #13
  ret void
}

declare void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* sret, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq %"class.autofill::structured_address::AddressComponent"* %0, %1
  br i1 %4, label %352, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %300, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %13, label %17, label %15

15:                                               ; preds = %9
  %16 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %14, %"class.std::__1::basic_string"* dereferenceable(24) %10) #13
  br label %201

17:                                               ; preds = %9
  %18 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %17
  %23 = bitcast %"class.std::__1::basic_string"* %14 to i8*
  %24 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false) #13
  br label %200

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i16*, i16** %26, align 8
  %28 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp ult i64 %29, 11
  br i1 %30, label %31, label %36

31:                                               ; preds = %25
  %32 = bitcast %"class.std::__1::basic_string"* %14 to i16*
  %33 = trunc i64 %29 to i8
  %34 = bitcast %"class.std::__1::basic_string"* %14 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %34, i64 0, i32 1, i32 1
  store i8 %33, i8* %35, align 1
  br label %53

36:                                               ; preds = %25
  %37 = icmp ugt i64 %29, 9223372036854775791
  br i1 %37, label %38, label %40

38:                                               ; preds = %36
  %39 = bitcast %"class.std::__1::basic_string"* %14 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %39) #14
  unreachable

40:                                               ; preds = %36
  %41 = add nuw nsw i64 %29, 8
  %42 = and i64 %41, -8
  %43 = icmp slt i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  tail call void @abort() #14
  unreachable

45:                                               ; preds = %40
  %46 = shl i64 %42, 1
  %47 = tail call i8* @_Znwm(i64 %46) #15
  %48 = bitcast i8* %47 to i16*
  %49 = bitcast %"class.std::__1::basic_string"* %14 to i8**
  store i8* %47, i8** %49, align 8
  %50 = or i64 %42, -9223372036854775808
  %51 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %29, i64* %52, align 8
  br label %53

53:                                               ; preds = %45, %31
  %54 = phi i16* [ %32, %31 ], [ %48, %45 ]
  %55 = add nuw nsw i64 %29, 1
  %56 = add i64 %29, 1
  %57 = icmp ult i64 %56, 16
  br i1 %57, label %147, label %58

58:                                               ; preds = %53
  %59 = add i64 %29, 1
  %60 = getelementptr i16, i16* %54, i64 %59
  %61 = getelementptr i16, i16* %27, i64 %59
  %62 = icmp ult i16* %54, %61
  %63 = icmp ult i16* %27, %60
  %64 = and i1 %62, %63
  br i1 %64, label %147, label %65

65:                                               ; preds = %58
  %66 = and i64 %56, -16
  %67 = sub i64 %55, %66
  %68 = getelementptr i16, i16* %27, i64 %66
  %69 = getelementptr i16, i16* %54, i64 %66
  %70 = add i64 %66, -16
  %71 = lshr exact i64 %70, 4
  %72 = add nuw nsw i64 %71, 1
  %73 = and i64 %72, 3
  %74 = icmp ult i64 %70, 48
  br i1 %74, label %126, label %75

75:                                               ; preds = %65
  %76 = sub nsw i64 %72, %73
  br label %77

77:                                               ; preds = %77, %75
  %78 = phi i64 [ 0, %75 ], [ %123, %77 ]
  %79 = phi i64 [ %76, %75 ], [ %124, %77 ]
  %80 = getelementptr i16, i16* %27, i64 %78
  %81 = getelementptr i16, i16* %54, i64 %78
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !3
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !3
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !6, !noalias !3
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !6, !noalias !3
  %90 = or i64 %78, 16
  %91 = getelementptr i16, i16* %27, i64 %90
  %92 = getelementptr i16, i16* %54, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !3
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !3
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !6, !noalias !3
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !6, !noalias !3
  %101 = or i64 %78, 32
  %102 = getelementptr i16, i16* %27, i64 %101
  %103 = getelementptr i16, i16* %54, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !3
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !3
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !6, !noalias !3
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !6, !noalias !3
  %112 = or i64 %78, 48
  %113 = getelementptr i16, i16* %27, i64 %112
  %114 = getelementptr i16, i16* %54, i64 %112
  %115 = bitcast i16* %113 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !3
  %117 = getelementptr i16, i16* %113, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  %119 = load <8 x i16>, <8 x i16>* %118, align 2, !alias.scope !3
  %120 = bitcast i16* %114 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %120, align 2, !alias.scope !6, !noalias !3
  %121 = getelementptr i16, i16* %114, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %122, align 2, !alias.scope !6, !noalias !3
  %123 = add i64 %78, 64
  %124 = add i64 %79, -4
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %77, !llvm.loop !8

126:                                              ; preds = %77, %65
  %127 = phi i64 [ 0, %65 ], [ %123, %77 ]
  %128 = icmp eq i64 %73, 0
  br i1 %128, label %145, label %129

129:                                              ; preds = %126, %129
  %130 = phi i64 [ %142, %129 ], [ %127, %126 ]
  %131 = phi i64 [ %143, %129 ], [ %73, %126 ]
  %132 = getelementptr i16, i16* %27, i64 %130
  %133 = getelementptr i16, i16* %54, i64 %130
  %134 = bitcast i16* %132 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !3
  %136 = getelementptr i16, i16* %132, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !3
  %139 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %139, align 2, !alias.scope !6, !noalias !3
  %140 = getelementptr i16, i16* %133, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2, !alias.scope !6, !noalias !3
  %142 = add i64 %130, 16
  %143 = add i64 %131, -1
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %129, !llvm.loop !10

145:                                              ; preds = %129, %126
  %146 = icmp eq i64 %56, %66
  br i1 %146, label %200, label %147

147:                                              ; preds = %145, %58, %53
  %148 = phi i64 [ %55, %58 ], [ %55, %53 ], [ %67, %145 ]
  %149 = phi i16* [ %27, %58 ], [ %27, %53 ], [ %68, %145 ]
  %150 = phi i16* [ %54, %58 ], [ %54, %53 ], [ %69, %145 ]
  %151 = add i64 %148, -1
  %152 = and i64 %148, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %165, label %154

154:                                              ; preds = %147, %154
  %155 = phi i64 [ %160, %154 ], [ %148, %147 ]
  %156 = phi i16* [ %162, %154 ], [ %149, %147 ]
  %157 = phi i16* [ %161, %154 ], [ %150, %147 ]
  %158 = phi i64 [ %163, %154 ], [ %152, %147 ]
  %159 = load i16, i16* %156, align 2
  store i16 %159, i16* %157, align 2
  %160 = add i64 %155, -1
  %161 = getelementptr inbounds i16, i16* %157, i64 1
  %162 = getelementptr inbounds i16, i16* %156, i64 1
  %163 = add i64 %158, -1
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %154, !llvm.loop !12

165:                                              ; preds = %154, %147
  %166 = phi i64 [ %148, %147 ], [ %160, %154 ]
  %167 = phi i16* [ %149, %147 ], [ %162, %154 ]
  %168 = phi i16* [ %150, %147 ], [ %161, %154 ]
  %169 = icmp ult i64 %151, 7
  br i1 %169, label %200, label %170

170:                                              ; preds = %165, %170
  %171 = phi i64 [ %196, %170 ], [ %166, %165 ]
  %172 = phi i16* [ %198, %170 ], [ %167, %165 ]
  %173 = phi i16* [ %197, %170 ], [ %168, %165 ]
  %174 = load i16, i16* %172, align 2
  store i16 %174, i16* %173, align 2
  %175 = getelementptr inbounds i16, i16* %173, i64 1
  %176 = getelementptr inbounds i16, i16* %172, i64 1
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %173, i64 2
  %179 = getelementptr inbounds i16, i16* %172, i64 2
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = getelementptr inbounds i16, i16* %173, i64 3
  %182 = getelementptr inbounds i16, i16* %172, i64 3
  %183 = load i16, i16* %182, align 2
  store i16 %183, i16* %181, align 2
  %184 = getelementptr inbounds i16, i16* %173, i64 4
  %185 = getelementptr inbounds i16, i16* %172, i64 4
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %173, i64 5
  %188 = getelementptr inbounds i16, i16* %172, i64 5
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %173, i64 6
  %191 = getelementptr inbounds i16, i16* %172, i64 6
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds i16, i16* %173, i64 7
  %194 = getelementptr inbounds i16, i16* %172, i64 7
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = add i64 %171, -8
  %197 = getelementptr inbounds i16, i16* %173, i64 8
  %198 = getelementptr inbounds i16, i16* %172, i64 8
  %199 = icmp eq i64 %196, 0
  br i1 %199, label %200, label %170, !llvm.loop !13

200:                                              ; preds = %165, %170, %145, %22
  store i8 1, i8* %11, align 8
  br label %201

201:                                              ; preds = %15, %200
  %202 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %203 = load i32, i32* %202, align 8
  %204 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  store i32 %203, i32* %204, align 8
  %205 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5
  %206 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %207 = load i8, i8* %206, align 8, !range !2
  %208 = icmp eq i8 %207, 0
  br i1 %208, label %259, label %209

209:                                              ; preds = %201
  %210 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %211 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %205, i64 0, i32 0, i32 0, i32 0, i32 0
  %212 = load i8, i8* %211, align 8, !range !2
  %213 = icmp eq i8 %212, 0
  %214 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %213, label %220, label %215

215:                                              ; preds = %209
  %216 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %210, i64 0, i32 0, i32 0
  %217 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %216, align 8
  %218 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %219 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %218, align 8
  tail call void @_ZNSt3__16vectorIN8autofill18structured_address12AddressTokenENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.12"* %214, %"struct.autofill::structured_address::AddressToken"* %217, %"struct.autofill::structured_address::AddressToken"* %219) #13
  br label %305

220:                                              ; preds = %209
  %221 = bitcast %"class.std::__1::vector.12"* %214 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %221, i8 0, i64 24, i1 false) #13
  %222 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %223 = bitcast %"struct.autofill::structured_address::AddressToken"** %222 to i64*
  %224 = load i64, i64* %223, align 8
  %225 = bitcast %"class.std::__1::vector.12"* %210 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = sub i64 %224, %226
  %228 = sdiv exact i64 %227, 56
  %229 = icmp eq i64 %227, 0
  br i1 %229, label %258, label %230

230:                                              ; preds = %220
  %231 = icmp ugt i64 %228, 329406144173384850
  br i1 %231, label %232, label %234

232:                                              ; preds = %230
  %233 = bitcast %"class.std::__1::vector.12"* %214 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %233) #14
  unreachable

234:                                              ; preds = %230
  %235 = tail call i8* @_Znwm(i64 %227) #15
  %236 = bitcast i8* %235 to %"struct.autofill::structured_address::AddressToken"*
  %237 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %238 = bitcast %"struct.autofill::structured_address::AddressToken"** %237 to i8**
  store i8* %235, i8** %238, align 8
  %239 = bitcast %"class.std::__1::vector.12"* %214 to i8**
  store i8* %235, i8** %239, align 8
  %240 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %236, i64 %228
  %241 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.autofill::structured_address::AddressToken"* %240, %"struct.autofill::structured_address::AddressToken"** %241, align 8
  %242 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %210, i64 0, i32 0, i32 0
  %243 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %242, align 8
  %244 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %222, align 8
  %245 = bitcast %"struct.autofill::structured_address::AddressToken"** %237 to i64*
  %246 = ptrtoint i8* %235 to i64
  %247 = icmp eq %"struct.autofill::structured_address::AddressToken"* %243, %244
  br i1 %247, label %256, label %248

248:                                              ; preds = %234, %248
  %249 = phi %"struct.autofill::structured_address::AddressToken"* [ %252, %248 ], [ %236, %234 ]
  %250 = phi %"struct.autofill::structured_address::AddressToken"* [ %251, %248 ], [ %243, %234 ]
  tail call void @_ZN8autofill18structured_address12AddressTokenC2ERKS1_(%"struct.autofill::structured_address::AddressToken"* %249, %"struct.autofill::structured_address::AddressToken"* dereferenceable(56) %250) #13
  %251 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %250, i64 1
  %252 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %249, i64 1
  %253 = icmp eq %"struct.autofill::structured_address::AddressToken"* %251, %244
  br i1 %253, label %254, label %248

254:                                              ; preds = %248
  %255 = ptrtoint %"struct.autofill::structured_address::AddressToken"* %252 to i64
  br label %256

256:                                              ; preds = %254, %234
  %257 = phi i64 [ %246, %234 ], [ %255, %254 ]
  store i64 %257, i64* %245, align 8
  br label %258

258:                                              ; preds = %220, %256
  store i8 1, i8* %211, align 8
  br label %305

259:                                              ; preds = %201
  %260 = getelementptr inbounds %"class.absl::optional.7", %"class.absl::optional.7"* %205, i64 0, i32 0, i32 0, i32 0, i32 0
  %261 = load i8, i8* %260, align 8, !range !2
  %262 = icmp eq i8 %261, 0
  br i1 %262, label %305, label %263

263:                                              ; preds = %259
  %264 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %265 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %264, i64 0, i32 0, i32 0
  %266 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %265, align 8
  %267 = icmp eq %"struct.autofill::structured_address::AddressToken"* %266, null
  br i1 %267, label %299, label %268

268:                                              ; preds = %263
  %269 = bitcast %"struct.autofill::structured_address::AddressToken"* %266 to i8*
  %270 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %271 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %270, align 8
  %272 = icmp eq %"struct.autofill::structured_address::AddressToken"* %271, %266
  br i1 %272, label %297, label %273

273:                                              ; preds = %268, %292
  %274 = phi %"struct.autofill::structured_address::AddressToken"* [ %275, %292 ], [ %271, %268 ]
  %275 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %274, i64 -1
  %276 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %274, i64 -1, i32 1
  %277 = bitcast %"class.std::__1::basic_string"* %276 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %278 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %277, i64 0, i32 1, i32 1
  %279 = load i8, i8* %278, align 1
  %280 = icmp slt i8 %279, 0
  br i1 %280, label %281, label %284

281:                                              ; preds = %273
  %282 = bitcast %"class.std::__1::basic_string"* %276 to i8**
  %283 = load i8*, i8** %282, align 8
  tail call void @_ZdlPv(i8* %283) #15
  br label %284

284:                                              ; preds = %281, %273
  %285 = bitcast %"struct.autofill::structured_address::AddressToken"* %275 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %286 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %285, i64 0, i32 1, i32 1
  %287 = load i8, i8* %286, align 1
  %288 = icmp slt i8 %287, 0
  br i1 %288, label %289, label %292

289:                                              ; preds = %284
  %290 = bitcast %"struct.autofill::structured_address::AddressToken"* %275 to i8**
  %291 = load i8*, i8** %290, align 8
  tail call void @_ZdlPv(i8* %291) #15
  br label %292

292:                                              ; preds = %289, %284
  %293 = icmp eq %"struct.autofill::structured_address::AddressToken"* %275, %266
  br i1 %293, label %294, label %273

294:                                              ; preds = %292
  %295 = bitcast %"class.std::__1::vector.12"* %264 to i8**
  %296 = load i8*, i8** %295, align 8
  br label %297

297:                                              ; preds = %294, %268
  %298 = phi i8* [ %296, %294 ], [ %269, %268 ]
  store %"struct.autofill::structured_address::AddressToken"* %266, %"struct.autofill::structured_address::AddressToken"** %270, align 8
  tail call void @_ZdlPv(i8* %298) #15
  br label %299

299:                                              ; preds = %297, %263
  store i8 0, i8* %260, align 8
  br label %305

300:                                              ; preds = %5
  %301 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %302 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %301, align 8
  %303 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %302, i64 4
  %304 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %303, align 8
  tail call void %304(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br label %305

305:                                              ; preds = %258, %215, %259, %299, %300
  %306 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %307 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %308 = bitcast %"class.autofill::structured_address::AddressComponent"*** %307 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = bitcast %"class.std::__1::vector"* %306 to i64*
  %311 = load i64, i64* %310, align 8
  %312 = sub i64 %309, %311
  %313 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %314 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %315 = bitcast %"class.autofill::structured_address::AddressComponent"*** %314 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = bitcast %"class.std::__1::vector"* %313 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = sub i64 %316, %318
  %320 = icmp eq i64 %312, %319
  br i1 %320, label %326, label %321

321:                                              ; preds = %305
  %322 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %322) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.6, i64 0, i64 0), i32 119, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.7, i64 0, i64 0)) #13
  %323 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %322) #13
  %324 = load i64, i64* %308, align 8
  %325 = load i64, i64* %310, align 8
  br label %326

326:                                              ; preds = %305, %321
  %327 = phi i64 [ %311, %305 ], [ %325, %321 ]
  %328 = phi i64 [ %309, %305 ], [ %324, %321 ]
  %329 = icmp eq i64 %328, %327
  br i1 %329, label %332, label %330

330:                                              ; preds = %326
  %331 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %313, i64 0, i32 0, i32 0
  br label %337

332:                                              ; preds = %337, %326
  %333 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %334 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %333, align 8
  %335 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %334, i64 21
  %336 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %335, align 8
  call void %336(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br label %352

337:                                              ; preds = %330, %337
  %338 = phi i64 [ %327, %330 ], [ %348, %337 ]
  %339 = phi i64 [ 0, %330 ], [ %346, %337 ]
  %340 = inttoptr i64 %338 to %"class.autofill::structured_address::AddressComponent"**
  %341 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %331, align 8
  %342 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %341, i64 %339
  %343 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %342, align 8
  %344 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %340, i64 %339
  %345 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %344, align 8
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %343, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %345)
  %346 = add nuw i64 %339, 1
  %347 = load i64, i64* %308, align 8
  %348 = load i64, i64* %310, align 8
  %349 = sub i64 %347, %348
  %350 = ashr exact i64 %349, 3
  %351 = icmp ult i64 %346, %350
  br i1 %351, label %337, label %332

352:                                              ; preds = %2, %332
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent15IsValueAssignedEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent6SameAsERKS1_(%"class.autofill::structured_address::AddressComponent"* readonly, %"class.autofill::structured_address::AddressComponent"* readonly dereferenceable(120)) local_unnamed_addr #1 align 2 {
  %3 = icmp eq %"class.autofill::structured_address::AddressComponent"* %0, %1
  br i1 %3, label %102, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %10, label %102

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %18

16:                                               ; preds = %10
  %17 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %18

18:                                               ; preds = %14, %16
  %19 = phi %"class.std::__1::basic_string"* [ %15, %14 ], [ %17, %16 ]
  %20 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %21 = load i8, i8* %20, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %27

25:                                               ; preds = %18
  %26 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %27

27:                                               ; preds = %23, %25
  %28 = phi %"class.std::__1::basic_string"* [ %24, %23 ], [ %26, %25 ]
  %29 = bitcast %"class.std::__1::basic_string"* %19 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %29, i64 0, i32 1, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = zext i8 %31 to i64
  %36 = select i1 %32, i64 %34, i64 %35
  %37 = bitcast %"class.std::__1::basic_string"* %28 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = zext i8 %39 to i64
  %44 = select i1 %40, i64 %42, i64 %43
  %45 = icmp eq i64 %36, %44
  br i1 %45, label %46, label %102

46:                                               ; preds = %27
  %47 = icmp eq i64 %36, 0
  br i1 %47, label %69, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load i16*, i16** %49, align 8
  %51 = bitcast %"class.std::__1::basic_string"* %28 to i16*
  %52 = select i1 %40, i16* %50, i16* %51
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  %55 = bitcast %"class.std::__1::basic_string"* %19 to i16*
  %56 = select i1 %32, i16* %54, i16* %55
  br label %57

57:                                               ; preds = %64, %48
  %58 = phi i64 [ %65, %64 ], [ %36, %48 ]
  %59 = phi i16* [ %67, %64 ], [ %52, %48 ]
  %60 = phi i16* [ %66, %64 ], [ %56, %48 ]
  %61 = load i16, i16* %60, align 2
  %62 = load i16, i16* %59, align 2
  %63 = icmp eq i16 %62, %61
  br i1 %63, label %64, label %102

64:                                               ; preds = %57
  %65 = add i64 %58, -1
  %66 = getelementptr inbounds i16, i16* %60, i64 1
  %67 = getelementptr inbounds i16, i16* %59, i64 1
  %68 = icmp eq i64 %65, 0
  br i1 %68, label %69, label %57

69:                                               ; preds = %64, %46
  %70 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %73 = load i32, i32* %72, align 8
  %74 = icmp eq i32 %71, %73
  br i1 %74, label %75, label %102

75:                                               ; preds = %69
  %76 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %77 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %78 = bitcast %"class.autofill::structured_address::AddressComponent"*** %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.std::__1::vector"* %76 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %79, %81
  br i1 %82, label %102, label %83

83:                                               ; preds = %75
  %84 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  br label %91

85:                                               ; preds = %91
  %86 = load i64, i64* %78, align 8
  %87 = load i64, i64* %80, align 8
  %88 = sub i64 %86, %87
  %89 = ashr exact i64 %88, 3
  %90 = icmp ult i64 %101, %89
  br i1 %90, label %91, label %102

91:                                               ; preds = %83, %85
  %92 = phi i64 [ %81, %83 ], [ %87, %85 ]
  %93 = phi i64 [ 0, %83 ], [ %101, %85 ]
  %94 = inttoptr i64 %92 to %"class.autofill::structured_address::AddressComponent"**
  %95 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %84, align 8
  %96 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %95, i64 %93
  %97 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %96, align 8
  %98 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %94, i64 %93
  %99 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %98, align 8
  %100 = tail call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent6SameAsERKS1_(%"class.autofill::structured_address::AddressComponent"* %97, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %99)
  %101 = add nuw i64 %93, 1
  br i1 %100, label %85, label %102

102:                                              ; preds = %57, %91, %85, %75, %2, %4, %69, %27
  %103 = phi i1 [ true, %2 ], [ false, %4 ], [ false, %69 ], [ false, %27 ], [ true, %75 ], [ false, %91 ], [ true, %85 ], [ false, %57 ]
  ret i1 %103
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNK8autofill18structured_address16AddressComponent8GetValueEv(%"class.autofill::structured_address::AddressComponent"* readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %9

7:                                                ; preds = %1
  %8 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %9

9:                                                ; preds = %7, %5
  %10 = phi %"class.std::__1::basic_string"* [ %6, %5 ], [ %8, %7 ]
  ret %"class.std::__1::basic_string"* %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent8IsAtomicEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %2, align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"** %3, %5
  ret i1 %6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent12IsValueValidEv(%"class.autofill::structured_address::AddressComponent"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent19IsValueForTypeValidERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* nocapture readonly dereferenceable(24), i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #13
  store i8 -86, i8* %4, align 1
  %5 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent32GetIsValueForTypeValidIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, i8* nonnull %4, i1 zeroext %2)
  %6 = load i8, i8* %4, align 1
  %7 = icmp ne i8 %6, 0
  %8 = and i1 %5, %7
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #13
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent32GetIsValueForTypeValidIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPbb(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* nocapture readonly dereferenceable(24), i8* nocapture, i1 zeroext) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.std::__1::basic_string.19", align 8
  %6 = bitcast %"class.std::__1::basic_string.19"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #13
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !noalias !14
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %5, i32 %8) #13
  %9 = bitcast %"class.std::__1::basic_string.19"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = zext i8 %11 to i64
  %16 = select i1 %12, i64 %14, i64 %15
  %17 = bitcast %"class.std::__1::basic_string.19"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = zext i8 %19 to i64
  %24 = select i1 %20, i64 %22, i64 %23
  %25 = icmp eq i64 %16, %24
  br i1 %25, label %26, label %57

26:                                               ; preds = %4
  %27 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = bitcast %"class.std::__1::basic_string.19"* %1 to i8*
  %30 = select i1 %12, i8* %28, i8* %29
  %31 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = select i1 %20, i8* %32, i8* %6
  %34 = icmp eq i64 %16, 0
  br i1 %12, label %41, label %35

35:                                               ; preds = %26
  br i1 %34, label %57, label %36

36:                                               ; preds = %35
  %37 = ptrtoint i8* %28 to i64
  %38 = trunc i64 %37 to i8
  %39 = load i8, i8* %33, align 1
  %40 = icmp eq i8 %39, %38
  br i1 %40, label %45, label %57

41:                                               ; preds = %26
  br i1 %34, label %57, label %42

42:                                               ; preds = %41
  %43 = call i32 @bcmp(i8* %30, i8* %33, i64 %16) #13
  %44 = icmp eq i32 %43, 0
  br label %57

45:                                               ; preds = %36, %52
  %46 = phi i64 [ %49, %52 ], [ %15, %36 ]
  %47 = phi i8* [ %50, %52 ], [ %29, %36 ]
  %48 = phi i8* [ %53, %52 ], [ %33, %36 ]
  %49 = add i64 %46, -1
  %50 = getelementptr inbounds i8, i8* %47, i64 1
  %51 = icmp eq i64 %49, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %45
  %53 = getelementptr inbounds i8, i8* %48, i64 1
  %54 = load i8, i8* %50, align 1
  %55 = load i8, i8* %53, align 1
  %56 = icmp eq i8 %54, %55
  br i1 %56, label %45, label %57

57:                                               ; preds = %45, %52, %36, %4, %35, %41, %42
  %58 = phi i1 [ false, %4 ], [ %44, %42 ], [ true, %41 ], [ true, %35 ], [ false, %36 ], [ false, %52 ], [ true, %45 ]
  br i1 %20, label %59, label %62

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  call void @_ZdlPv(i8* %61) #15
  br label %62

62:                                               ; preds = %57, %59
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #13
  br i1 %58, label %63, label %77

63:                                               ; preds = %62
  %64 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*)***
  %65 = load i1 (%"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*)*** %64, align 8
  %66 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*)** %65, i64 20
  %67 = load i1 (%"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*)** %66, align 8
  %68 = call zeroext i1 %67(%"class.autofill::structured_address::AddressComponent"* %0) #13
  %69 = zext i1 %68 to i8
  store i8 %69, i8* %2, align 1
  %70 = xor i1 %3, true
  %71 = or i1 %68, %70
  br i1 %71, label %90, label %72

72:                                               ; preds = %63
  %73 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %74 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %74, i64 4
  %76 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %75, align 8
  call void %76(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br label %90

77:                                               ; preds = %62
  %78 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %79 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %78, align 8
  %80 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %81 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %80, align 8
  %82 = icmp eq %"class.autofill::structured_address::AddressComponent"** %79, %81
  br i1 %82, label %90, label %85

83:                                               ; preds = %85
  %84 = icmp eq %"class.autofill::structured_address::AddressComponent"** %89, %81
  br i1 %84, label %90, label %85

85:                                               ; preds = %77, %83
  %86 = phi %"class.autofill::structured_address::AddressComponent"** [ %89, %83 ], [ %79, %77 ]
  %87 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %86, align 8
  %88 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent32GetIsValueForTypeValidIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPbb(%"class.autofill::structured_address::AddressComponent"* %87, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, i8* %2, i1 zeroext %3)
  %89 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %86, i64 1
  br i1 %88, label %90, label %83

90:                                               ; preds = %83, %85, %77, %63, %72
  %91 = phi i1 [ true, %72 ], [ true, %63 ], [ false, %77 ], [ false, %83 ], [ true, %85 ]
  ret i1 %91
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent19IsValueForTypeValidENS_15ServerFieldTypeEb(%"class.autofill::structured_address::AddressComponent"*, i32, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = alloca i8, align 1
  %5 = alloca %"class.std::__1::basic_string.19", align 8
  %6 = bitcast %"class.std::__1::basic_string.19"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #13
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %5, i32 %1) #13
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #13
  store i8 -86, i8* %4, align 1
  %7 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent32GetIsValueForTypeValidIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %5, i8* nonnull %4, i1 zeroext %2) #13
  %8 = load i8, i8* %4, align 1
  %9 = icmp ne i8 %8, 0
  %10 = and i1 %7, %9
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #13
  %11 = bitcast %"class.std::__1::basic_string.19"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %17) #15
  br label %18

18:                                               ; preds = %3, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #13
  ret i1 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8autofill18structured_address16AddressComponent21GetVerificationStatusEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent8SetValueENSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEENS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* nocapture, %"class.std::__1::basic_string"* nocapture, i32) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br i1 %6, label %22, label %8

8:                                                ; preds = %3
  %9 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %9, i64 0, i32 1, i32 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %15 = load i8*, i8** %14, align 8
  tail call void @_ZdlPv(i8* %15) #15
  br label %16

16:                                               ; preds = %13, %8
  %17 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %18 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false) #13
  %19 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %19, i64 0, i32 1, i32 1
  store i8 0, i8* %20, align 1
  %21 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  store i16 0, i16* %21, align 2
  br label %25

22:                                               ; preds = %3
  %23 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %24 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %24, i8 0, i64 24, i1 false) #13
  store i8 1, i8* %4, align 8
  br label %25

25:                                               ; preds = %16, %22
  %26 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  store i32 %2, i32* %26, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent10UnsetValueEv(%"class.autofill::structured_address::AddressComponent"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %7 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %5
  %12 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %13 = load i8*, i8** %12, align 8
  tail call void @_ZdlPv(i8* %13) #15
  br label %14

14:                                               ; preds = %11, %5
  store i8 0, i8* %2, align 8
  br label %15

15:                                               ; preds = %1, %14
  %16 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %18 = load i8, i8* %17, align 8, !range !2
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %57, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %22 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %21, i64 0, i32 0, i32 0
  %23 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %22, align 8
  %24 = icmp eq %"struct.autofill::structured_address::AddressToken"* %23, null
  br i1 %24, label %56, label %25

25:                                               ; preds = %20
  %26 = bitcast %"struct.autofill::structured_address::AddressToken"* %23 to i8*
  %27 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %28 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %27, align 8
  %29 = icmp eq %"struct.autofill::structured_address::AddressToken"* %28, %23
  br i1 %29, label %54, label %30

30:                                               ; preds = %25, %49
  %31 = phi %"struct.autofill::structured_address::AddressToken"* [ %32, %49 ], [ %28, %25 ]
  %32 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %31, i64 -1
  %33 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %31, i64 -1, i32 1
  %34 = bitcast %"class.std::__1::basic_string"* %33 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %35 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %34, i64 0, i32 1, i32 1
  %36 = load i8, i8* %35, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %30
  %39 = bitcast %"class.std::__1::basic_string"* %33 to i8**
  %40 = load i8*, i8** %39, align 8
  tail call void @_ZdlPv(i8* %40) #15
  br label %41

41:                                               ; preds = %38, %30
  %42 = bitcast %"struct.autofill::structured_address::AddressToken"* %32 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %43 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %42, i64 0, i32 1, i32 1
  %44 = load i8, i8* %43, align 1
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %41
  %47 = bitcast %"struct.autofill::structured_address::AddressToken"* %32 to i8**
  %48 = load i8*, i8** %47, align 8
  tail call void @_ZdlPv(i8* %48) #15
  br label %49

49:                                               ; preds = %46, %41
  %50 = icmp eq %"struct.autofill::structured_address::AddressToken"* %32, %23
  br i1 %50, label %51, label %30

51:                                               ; preds = %49
  %52 = bitcast %"class.std::__1::vector.12"* %21 to i8**
  %53 = load i8*, i8** %52, align 8
  br label %54

54:                                               ; preds = %51, %25
  %55 = phi i8* [ %53, %51 ], [ %26, %25 ]
  store %"struct.autofill::structured_address::AddressToken"* %23, %"struct.autofill::structured_address::AddressToken"** %27, align 8
  tail call void @_ZdlPv(i8* %55) #15
  br label %56

56:                                               ; preds = %54, %20
  store i8 0, i8* %17, align 8
  br label %57

57:                                               ; preds = %15, %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent17GetSupportedTypesEPNS_8DenseSetINS_15ServerFieldTypeELS3_118EEE(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = zext i32 %4 to i64
  %6 = icmp ugt i32 %4, 118
  br i1 %6, label %7, label %8

7:                                                ; preds = %2
  tail call void @abort() #14, !noalias !17
  unreachable

8:                                                ; preds = %2
  %9 = lshr i64 %5, 6
  %10 = and i64 %5, 63
  %11 = shl i64 1, %10
  %12 = getelementptr inbounds %"class.autofill::DenseSet", %"class.autofill::DenseSet"* %1, i64 0, i32 0, i32 0, i32 0, i64 %9
  %13 = load i64, i64* %12, align 8, !noalias !17
  %14 = or i64 %13, %11
  store i64 %14, i64* %12, align 8, !noalias !17
  %15 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)***
  %16 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)** %16, i64 7
  %18 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*)** %17, align 8
  tail call void %18(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::DenseSet"* %1) #13
  %19 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %20 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %19, align 8
  %21 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %21, align 8
  %23 = icmp eq %"class.autofill::structured_address::AddressComponent"** %20, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %25, %8
  ret void

25:                                               ; preds = %8, %25
  %26 = phi %"class.autofill::structured_address::AddressComponent"** [ %28, %25 ], [ %20, %8 ]
  %27 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %26, align 8
  tail call void @_ZNK8autofill18structured_address16AddressComponent17GetSupportedTypesEPNS_8DenseSetINS_15ServerFieldTypeELS3_118EEE(%"class.autofill::structured_address::AddressComponent"* %27, %"class.autofill::DenseSet"* %1)
  %28 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %26, i64 1
  %29 = icmp eq %"class.autofill::structured_address::AddressComponent"** %28, %22
  br i1 %29, label %24, label %25
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent44ConvertAndSetValueForAdditionalFieldTypeNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* nocapture readnone, %"class.std::__1::basic_string.19"* nocapture readnone dereferenceable(24), %"class.std::__1::basic_string"* nocapture readnone dereferenceable(24), i32* nocapture readnone dereferenceable(4)) unnamed_addr #0 align 2 {
  ret i1 false
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent47ConvertAndGetTheValueForAdditionalFieldTypeNameERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEE(%"class.autofill::structured_address::AddressComponent"* nocapture readnone, %"class.std::__1::basic_string.19"* nocapture readnone dereferenceable(24), %"class.std::__1::basic_string"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent19GetBestFormatStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"* nocapture readonly) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string.19", align 8
  %4 = alloca %"class.std::__1::basic_string.19", align 8
  %5 = alloca %"class.std::__1::vector.29", align 8
  %6 = alloca %"class.std::__1::basic_string.19", align 8
  %7 = alloca %"class.std::__1::basic_string.19", align 8
  %8 = alloca %"class.autofill::AutofillType", align 4
  %9 = alloca %"class.std::__1::basic_string.19", align 8
  %10 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 0
  %11 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %10, align 8
  %12 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %13 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %12, align 8
  %14 = icmp eq %"class.autofill::structured_address::AddressComponent"** %11, %13
  br i1 %14, label %15, label %44

15:                                               ; preds = %2
  %16 = bitcast %"class.std::__1::basic_string.19"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #13
  %17 = bitcast %"class.std::__1::basic_string.19"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #13
  %18 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 3
  %19 = load i32, i32* %18, align 4, !noalias !20
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %4, i32 %19) #13
  call void @_ZN8autofill18structured_address19GetPlaceholderTokenERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.19"* nonnull sret %3, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %4) #13
  %20 = bitcast %"class.std::__1::basic_string.19"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = select i1 %23, i8* %25, i8* %16
  %27 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = zext i8 %22 to i64
  %30 = select i1 %23, i64 %28, i64 %29
  call void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret %0, i8* %26, i64 %30) #13
  %31 = load i8, i8* %21, align 1
  %32 = icmp slt i8 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %15
  %34 = load i8*, i8** %24, align 8
  call void @_ZdlPv(i8* %34) #15
  br label %35

35:                                               ; preds = %15, %33
  %36 = bitcast %"class.std::__1::basic_string.19"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  call void @_ZdlPv(i8* %42) #15
  br label %43

43:                                               ; preds = %35, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #13
  br label %132

44:                                               ; preds = %2
  %45 = bitcast %"class.std::__1::vector.29"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #13
  %46 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %5, i64 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %5, i64 0, i32 0, i32 1
  %48 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %45, i8 0, i64 24, i1 false) #13
  %49 = bitcast %"class.std::__1::basic_string.19"* %6 to i8*
  %50 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  %52 = bitcast %"class.autofill::AutofillType"* %8 to i8*
  %53 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %53, i64 0, i32 1, i32 0
  %55 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = bitcast %"class.std::__1::basic_string.19"** %47 to i64*
  %57 = bitcast %"class.std::__1::basic_string.19"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %59 = bitcast %"class.std::__1::basic_string.19"* %6 to i8*
  br label %107

60:                                               ; preds = %129
  %61 = bitcast %"class.std::__1::vector.29"* %5 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = load i64, i64* %56, align 8
  %64 = bitcast %"class.std::__1::basic_string.19"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %64) #13
  %65 = sub i64 %63, %62
  %66 = sdiv exact i64 %65, 24
  %67 = inttoptr i64 %62 to %"class.std::__1::basic_string.19"*
  call void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEELm18446744073709551615EEENS_16BasicStringPieceIcS4_EE(%"class.std::__1::basic_string.19"* nonnull sret %9, i64 %66, %"class.std::__1::basic_string.19"* %67, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0), i64 1) #13
  %68 = bitcast %"class.std::__1::basic_string.19"* %9 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  %72 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = select i1 %71, i8* %73, i8* %64
  %75 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = zext i8 %70 to i64
  %78 = select i1 %71, i64 %76, i64 %77
  call void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret %0, i8* %74, i64 %78) #13
  %79 = load i8, i8* %69, align 1
  %80 = icmp slt i8 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %60
  %82 = load i8*, i8** %72, align 8
  call void @_ZdlPv(i8* %82) #15
  br label %83

83:                                               ; preds = %60, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %64) #13
  %84 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %46, align 8
  %85 = icmp eq %"class.std::__1::basic_string.19"* %84, null
  br i1 %85, label %132, label %86

86:                                               ; preds = %83
  %87 = bitcast %"class.std::__1::basic_string.19"* %84 to i8*
  %88 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %47, align 8
  %89 = icmp eq %"class.std::__1::basic_string.19"* %88, %84
  br i1 %89, label %105, label %90

90:                                               ; preds = %86, %100
  %91 = phi %"class.std::__1::basic_string.19"* [ %92, %100 ], [ %88, %86 ]
  %92 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %91, i64 -1
  %93 = bitcast %"class.std::__1::basic_string.19"* %92 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %94 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %93, i64 0, i32 1, i32 0
  %95 = load i8, i8* %94, align 1
  %96 = icmp slt i8 %95, 0
  br i1 %96, label %97, label %100

97:                                               ; preds = %90
  %98 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @_ZdlPv(i8* %99) #15
  br label %100

100:                                              ; preds = %97, %90
  %101 = icmp eq %"class.std::__1::basic_string.19"* %92, %84
  br i1 %101, label %102, label %90

102:                                              ; preds = %100
  %103 = bitcast %"class.std::__1::vector.29"* %5 to i8**
  %104 = load i8*, i8** %103, align 8
  br label %105

105:                                              ; preds = %102, %86
  %106 = phi i8* [ %104, %102 ], [ %87, %86 ]
  store %"class.std::__1::basic_string.19"* %84, %"class.std::__1::basic_string.19"** %47, align 8
  call void @_ZdlPv(i8* %106) #15
  br label %132

107:                                              ; preds = %44, %129
  %108 = phi %"class.autofill::structured_address::AddressComponent"** [ %11, %44 ], [ %130, %129 ]
  %109 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %108, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %49) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51) #13
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %52) #13
  %110 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %109, i64 0, i32 3
  %111 = load i32, i32* %110, align 4
  call void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"* nonnull %8, i32 %111) #13
  call void @_ZNK8autofill12AutofillType8ToStringEv(%"class.std::__1::basic_string.19"* nonnull sret %7, %"class.autofill::AutofillType"* nonnull %8) #13
  call void @_ZN8autofill18structured_address19GetPlaceholderTokenERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.19"* nonnull sret %6, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %7) #13
  %112 = load i8, i8* %54, align 1
  %113 = icmp slt i8 %112, 0
  br i1 %113, label %114, label %116

114:                                              ; preds = %107
  %115 = load i8*, i8** %55, align 8
  call void @_ZdlPv(i8* %115) #15
  br label %116

116:                                              ; preds = %107, %114
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %52) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51) #13
  %117 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %47, align 8
  %118 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %48, align 8
  %119 = icmp ult %"class.std::__1::basic_string.19"* %117, %118
  br i1 %119, label %120, label %124

120:                                              ; preds = %116
  %121 = bitcast %"class.std::__1::basic_string.19"* %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* nonnull align 8 %49, i64 24, i1 false) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 24, i1 false) #13
  %122 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %117, i64 1
  %123 = ptrtoint %"class.std::__1::basic_string.19"* %122 to i64
  store i64 %123, i64* %56, align 8
  br label %129

124:                                              ; preds = %116
  call void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.29"* nonnull %5, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %6) #13
  %125 = load i8, i8* %58, align 1
  %126 = icmp slt i8 %125, 0
  br i1 %126, label %127, label %129

127:                                              ; preds = %124
  %128 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %128) #15
  br label %129

129:                                              ; preds = %120, %124, %127
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %49) #13
  %130 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %108, i64 1
  %131 = icmp eq %"class.autofill::structured_address::AddressComponent"** %130, %13
  br i1 %131, label %60, label %107

132:                                              ; preds = %105, %83, %43
  %133 = phi i8* [ %16, %43 ], [ %45, %83 ], [ %45, %105 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %133) #13
  ret void
}

declare void @_ZN4base12ASCIIToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #4

declare void @_ZN8autofill18structured_address19GetPlaceholderTokenERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string.19"* sret, %"class.std::__1::basic_string.19"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN8autofill12AutofillTypeC1ENS_15ServerFieldTypeE(%"class.autofill::AutofillType"*, i32) unnamed_addr #4

declare void @_ZNK8autofill12AutofillType8ToStringEv(%"class.std::__1::basic_string.19"* sret, %"class.autofill::AutofillType"*) local_unnamed_addr #4

declare void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEELm18446744073709551615EEENS_16BasicStringPieceIcS4_EE(%"class.std::__1::basic_string.19"* sret, i64, %"class.std::__1::basic_string.19"*, i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent20GetSubcomponentTypesEv(%"class.std::__1::vector.36"* noalias sret, %"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector.36"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #13
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %8 = bitcast %"class.autofill::structured_address::AddressComponent"*** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %6 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 3
  %14 = bitcast i32** %4 to i64*
  %15 = bitcast %"class.std::__1::vector.36"* %0 to i64*
  %16 = icmp eq i64 %12, 0
  %17 = inttoptr i64 %11 to %"class.autofill::structured_address::AddressComponent"**
  %18 = inttoptr i64 %9 to %"class.autofill::structured_address::AddressComponent"**
  br i1 %16, label %31, label %19

19:                                               ; preds = %2
  %20 = icmp ugt i64 %13, 4611686018427387903
  br i1 %20, label %21, label %22

21:                                               ; preds = %19
  tail call void @abort() #14
  unreachable

22:                                               ; preds = %19
  %23 = bitcast i32** %3 to i64*
  %24 = ashr exact i64 %12, 1
  %25 = tail call i8* @_Znwm(i64 %24) #15
  %26 = bitcast i8* %25 to i32*
  %27 = ptrtoint i8* %25 to i64
  %28 = getelementptr inbounds i32, i32* %26, i64 %13
  %29 = ptrtoint i32* %28 to i64
  %30 = ptrtoint i8* %25 to i64
  store i64 %30, i64* %15, align 8
  store i64 %27, i64* %23, align 8
  store i64 %29, i64* %14, align 8
  br label %31

31:                                               ; preds = %22, %2
  %32 = phi i64 [ 0, %2 ], [ %27, %22 ]
  %33 = phi i32* [ null, %2 ], [ %28, %22 ]
  %34 = phi i32* [ null, %2 ], [ %26, %22 ]
  %35 = icmp eq %"class.autofill::structured_address::AddressComponent"** %17, %18
  br i1 %35, label %38, label %36

36:                                               ; preds = %31
  %37 = bitcast i32** %3 to i64*
  br label %39

38:                                               ; preds = %99, %31
  ret void

39:                                               ; preds = %102, %36
  %40 = phi i64 [ %32, %36 ], [ %105, %102 ]
  %41 = phi i32* [ %33, %36 ], [ %104, %102 ]
  %42 = phi i32* [ %34, %36 ], [ %103, %102 ]
  %43 = phi %"class.autofill::structured_address::AddressComponent"** [ %17, %36 ], [ %100, %102 ]
  %44 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %43, align 8
  %45 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %44, i64 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = icmp ult i32* %42, %41
  %48 = ptrtoint i32* %41 to i64
  br i1 %47, label %49, label %52

49:                                               ; preds = %39
  store i32 %46, i32* %42, align 4
  %50 = getelementptr inbounds i32, i32* %42, i64 1
  %51 = ptrtoint i32* %50 to i64
  store i64 %51, i64* %37, align 8
  br label %99

52:                                               ; preds = %39
  %53 = ptrtoint i32* %42 to i64
  %54 = load i64, i64* %15, align 8
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 2
  %57 = add nsw i64 %56, 1
  %58 = icmp ugt i64 %57, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %52
  %60 = bitcast %"class.std::__1::vector.36"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #14
  unreachable

61:                                               ; preds = %52
  %62 = sub i64 %48, %54
  %63 = ashr exact i64 %62, 2
  %64 = icmp ult i64 %63, 2305843009213693951
  br i1 %64, label %65, label %73

65:                                               ; preds = %61
  %66 = ashr exact i64 %62, 1
  %67 = icmp ult i64 %66, %57
  %68 = select i1 %67, i64 %57, i64 %66
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %78, label %70

70:                                               ; preds = %65
  %71 = icmp ugt i64 %68, 4611686018427387903
  br i1 %71, label %72, label %73

72:                                               ; preds = %70
  tail call void @abort() #14
  unreachable

73:                                               ; preds = %70, %61
  %74 = phi i64 [ %68, %70 ], [ 4611686018427387903, %61 ]
  %75 = shl i64 %74, 2
  %76 = tail call i8* @_Znwm(i64 %75) #15
  %77 = bitcast i8* %76 to i32*
  br label %78

78:                                               ; preds = %73, %65
  %79 = phi i64 [ %74, %73 ], [ 0, %65 ]
  %80 = phi i32* [ %77, %73 ], [ null, %65 ]
  %81 = getelementptr inbounds i32, i32* %80, i64 %56
  %82 = getelementptr inbounds i32, i32* %80, i64 %79
  %83 = ptrtoint i32* %82 to i64
  store i32 %46, i32* %81, align 4
  %84 = getelementptr inbounds i32, i32* %81, i64 1
  %85 = ptrtoint i32* %84 to i64
  %86 = sub i64 %40, %54
  %87 = ashr exact i64 %86, 2
  %88 = sub nsw i64 0, %87
  %89 = getelementptr inbounds i32, i32* %81, i64 %88
  %90 = ptrtoint i32* %89 to i64
  %91 = icmp sgt i64 %86, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %78
  %93 = bitcast i32* %89 to i8*
  %94 = inttoptr i64 %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %94, i64 %86, i1 false) #13
  br label %95

95:                                               ; preds = %92, %78
  store i64 %90, i64* %15, align 8
  store i64 %85, i64* %37, align 8
  store i64 %83, i64* %14, align 8
  %96 = icmp eq i64 %54, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %95
  %98 = inttoptr i64 %54 to i8*
  tail call void @_ZdlPv(i8* %98) #15
  br label %99

99:                                               ; preds = %49, %95, %97
  %100 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %43, i64 1
  %101 = icmp eq %"class.autofill::structured_address::AddressComponent"** %100, %18
  br i1 %101, label %38, label %102

102:                                              ; preds = %99
  %103 = load i32*, i32** %3, align 8
  %104 = load i32*, i32** %4, align 8
  %105 = ptrtoint i32* %103 to i64
  br label %39
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNS_15ServerFieldTypeERKNSt3__112basic_stringIDsNS5_11char_traitsIDsEENS5_9allocatorIDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"*, i32* nocapture readonly dereferenceable(4), %"class.std::__1::basic_string"* dereferenceable(24), i32* dereferenceable(4), i1 zeroext, i1 zeroext) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::basic_string.19", align 8
  %8 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #13
  %9 = load i32, i32* %1, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %7, i32 %9) #13
  %10 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %7, %"class.std::__1::basic_string"* dereferenceable(24) %2, i32* dereferenceable(4) %3, i1 zeroext %4, i1 zeroext %5)
  %11 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @_ZdlPv(i8* %17) #15
  br label %18

18:                                               ; preds = %6, %15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #13
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), i32* dereferenceable(4), i1 zeroext, i1 zeroext) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::basic_string.19", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4, !noalias !23
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %7, i32 %11) #13
  %12 = bitcast %"class.std::__1::basic_string.19"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = zext i8 %14 to i64
  %19 = select i1 %15, i64 %17, i64 %18
  %20 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = zext i8 %22 to i64
  %27 = select i1 %23, i64 %25, i64 %26
  %28 = icmp eq i64 %19, %27
  br i1 %28, label %29, label %60

29:                                               ; preds = %6
  %30 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.std::__1::basic_string.19"* %1 to i8*
  %33 = select i1 %15, i8* %31, i8* %32
  %34 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = select i1 %23, i8* %35, i8* %9
  %37 = icmp eq i64 %19, 0
  br i1 %15, label %44, label %38

38:                                               ; preds = %29
  br i1 %37, label %60, label %39

39:                                               ; preds = %38
  %40 = ptrtoint i8* %31 to i64
  %41 = trunc i64 %40 to i8
  %42 = load i8, i8* %36, align 1
  %43 = icmp eq i8 %42, %41
  br i1 %43, label %48, label %60

44:                                               ; preds = %29
  br i1 %37, label %60, label %45

45:                                               ; preds = %44
  %46 = call i32 @bcmp(i8* %33, i8* %36, i64 %19) #13
  %47 = icmp eq i32 %46, 0
  br label %60

48:                                               ; preds = %39, %55
  %49 = phi i64 [ %52, %55 ], [ %18, %39 ]
  %50 = phi i8* [ %53, %55 ], [ %32, %39 ]
  %51 = phi i8* [ %56, %55 ], [ %36, %39 ]
  %52 = add i64 %49, -1
  %53 = getelementptr inbounds i8, i8* %50, i64 1
  %54 = icmp eq i64 %52, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %48
  %56 = getelementptr inbounds i8, i8* %51, i64 1
  %57 = load i8, i8* %53, align 1
  %58 = load i8, i8* %56, align 1
  %59 = icmp eq i8 %57, %58
  br i1 %59, label %48, label %60

60:                                               ; preds = %48, %55, %39, %6, %38, %44, %45
  %61 = phi i1 [ false, %6 ], [ %47, %45 ], [ true, %44 ], [ true, %38 ], [ false, %39 ], [ false, %55 ], [ true, %48 ]
  br i1 %23, label %62, label %65

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  call void @_ZdlPv(i8* %64) #15
  br label %65

65:                                               ; preds = %60, %62
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #13
  br i1 %61, label %66, label %262

66:                                               ; preds = %65
  %67 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %68 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %67, i64 0, i32 1, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = icmp slt i8 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %66
  %72 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %73 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* align 8 %73, i64 24, i1 false) #13
  br label %249

74:                                               ; preds = %66
  %75 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i16*, i16** %75, align 8
  %77 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp ult i64 %78, 11
  br i1 %79, label %80, label %85

80:                                               ; preds = %74
  %81 = bitcast %"class.std::__1::basic_string"* %8 to i16*
  %82 = trunc i64 %78 to i8
  %83 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %84 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %83, i64 0, i32 1, i32 1
  store i8 %82, i8* %84, align 1
  br label %102

85:                                               ; preds = %74
  %86 = icmp ugt i64 %78, 9223372036854775791
  br i1 %86, label %87, label %89

87:                                               ; preds = %85
  %88 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %88) #14
  unreachable

89:                                               ; preds = %85
  %90 = add nuw nsw i64 %78, 8
  %91 = and i64 %90, -8
  %92 = icmp slt i64 %91, 0
  br i1 %92, label %93, label %94

93:                                               ; preds = %89
  call void @abort() #14
  unreachable

94:                                               ; preds = %89
  %95 = shl i64 %91, 1
  %96 = call i8* @_Znwm(i64 %95) #15
  %97 = bitcast i8* %96 to i16*
  %98 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  store i8* %96, i8** %98, align 8
  %99 = or i64 %91, -9223372036854775808
  %100 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %78, i64* %101, align 8
  br label %102

102:                                              ; preds = %94, %80
  %103 = phi i16* [ %81, %80 ], [ %97, %94 ]
  %104 = add nuw nsw i64 %78, 1
  %105 = add i64 %78, 1
  %106 = icmp ult i64 %105, 16
  br i1 %106, label %196, label %107

107:                                              ; preds = %102
  %108 = add i64 %78, 1
  %109 = getelementptr i16, i16* %103, i64 %108
  %110 = getelementptr i16, i16* %76, i64 %108
  %111 = icmp ult i16* %103, %110
  %112 = icmp ult i16* %76, %109
  %113 = and i1 %111, %112
  br i1 %113, label %196, label %114

114:                                              ; preds = %107
  %115 = and i64 %105, -16
  %116 = sub i64 %104, %115
  %117 = getelementptr i16, i16* %76, i64 %115
  %118 = getelementptr i16, i16* %103, i64 %115
  %119 = add i64 %115, -16
  %120 = lshr exact i64 %119, 4
  %121 = add nuw nsw i64 %120, 1
  %122 = and i64 %121, 3
  %123 = icmp ult i64 %119, 48
  br i1 %123, label %175, label %124

124:                                              ; preds = %114
  %125 = sub nsw i64 %121, %122
  br label %126

126:                                              ; preds = %126, %124
  %127 = phi i64 [ 0, %124 ], [ %172, %126 ]
  %128 = phi i64 [ %125, %124 ], [ %173, %126 ]
  %129 = getelementptr i16, i16* %76, i64 %127
  %130 = getelementptr i16, i16* %103, i64 %127
  %131 = bitcast i16* %129 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 2, !alias.scope !26
  %133 = getelementptr i16, i16* %129, i64 8
  %134 = bitcast i16* %133 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !26
  %136 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %132, <8 x i16>* %136, align 2, !alias.scope !29, !noalias !26
  %137 = getelementptr i16, i16* %130, i64 8
  %138 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %138, align 2, !alias.scope !29, !noalias !26
  %139 = or i64 %127, 16
  %140 = getelementptr i16, i16* %76, i64 %139
  %141 = getelementptr i16, i16* %103, i64 %139
  %142 = bitcast i16* %140 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 2, !alias.scope !26
  %144 = getelementptr i16, i16* %140, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 2, !alias.scope !26
  %147 = bitcast i16* %141 to <8 x i16>*
  store <8 x i16> %143, <8 x i16>* %147, align 2, !alias.scope !29, !noalias !26
  %148 = getelementptr i16, i16* %141, i64 8
  %149 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %146, <8 x i16>* %149, align 2, !alias.scope !29, !noalias !26
  %150 = or i64 %127, 32
  %151 = getelementptr i16, i16* %76, i64 %150
  %152 = getelementptr i16, i16* %103, i64 %150
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !26
  %155 = getelementptr i16, i16* %151, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2, !alias.scope !26
  %158 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %158, align 2, !alias.scope !29, !noalias !26
  %159 = getelementptr i16, i16* %152, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %160, align 2, !alias.scope !29, !noalias !26
  %161 = or i64 %127, 48
  %162 = getelementptr i16, i16* %76, i64 %161
  %163 = getelementptr i16, i16* %103, i64 %161
  %164 = bitcast i16* %162 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2, !alias.scope !26
  %166 = getelementptr i16, i16* %162, i64 8
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2, !alias.scope !26
  %169 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %169, align 2, !alias.scope !29, !noalias !26
  %170 = getelementptr i16, i16* %163, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %171, align 2, !alias.scope !29, !noalias !26
  %172 = add i64 %127, 64
  %173 = add i64 %128, -4
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %175, label %126, !llvm.loop !31

175:                                              ; preds = %126, %114
  %176 = phi i64 [ 0, %114 ], [ %172, %126 ]
  %177 = icmp eq i64 %122, 0
  br i1 %177, label %194, label %178

178:                                              ; preds = %175, %178
  %179 = phi i64 [ %191, %178 ], [ %176, %175 ]
  %180 = phi i64 [ %192, %178 ], [ %122, %175 ]
  %181 = getelementptr i16, i16* %76, i64 %179
  %182 = getelementptr i16, i16* %103, i64 %179
  %183 = bitcast i16* %181 to <8 x i16>*
  %184 = load <8 x i16>, <8 x i16>* %183, align 2, !alias.scope !26
  %185 = getelementptr i16, i16* %181, i64 8
  %186 = bitcast i16* %185 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !26
  %188 = bitcast i16* %182 to <8 x i16>*
  store <8 x i16> %184, <8 x i16>* %188, align 2, !alias.scope !29, !noalias !26
  %189 = getelementptr i16, i16* %182, i64 8
  %190 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %190, align 2, !alias.scope !29, !noalias !26
  %191 = add i64 %179, 16
  %192 = add i64 %180, -1
  %193 = icmp eq i64 %192, 0
  br i1 %193, label %194, label %178, !llvm.loop !32

194:                                              ; preds = %178, %175
  %195 = icmp eq i64 %105, %115
  br i1 %195, label %249, label %196

196:                                              ; preds = %194, %107, %102
  %197 = phi i64 [ %104, %107 ], [ %104, %102 ], [ %116, %194 ]
  %198 = phi i16* [ %76, %107 ], [ %76, %102 ], [ %117, %194 ]
  %199 = phi i16* [ %103, %107 ], [ %103, %102 ], [ %118, %194 ]
  %200 = add i64 %197, -1
  %201 = and i64 %197, 7
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %214, label %203

203:                                              ; preds = %196, %203
  %204 = phi i64 [ %209, %203 ], [ %197, %196 ]
  %205 = phi i16* [ %211, %203 ], [ %198, %196 ]
  %206 = phi i16* [ %210, %203 ], [ %199, %196 ]
  %207 = phi i64 [ %212, %203 ], [ %201, %196 ]
  %208 = load i16, i16* %205, align 2
  store i16 %208, i16* %206, align 2
  %209 = add i64 %204, -1
  %210 = getelementptr inbounds i16, i16* %206, i64 1
  %211 = getelementptr inbounds i16, i16* %205, i64 1
  %212 = add i64 %207, -1
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %203, !llvm.loop !33

214:                                              ; preds = %203, %196
  %215 = phi i64 [ %197, %196 ], [ %209, %203 ]
  %216 = phi i16* [ %198, %196 ], [ %211, %203 ]
  %217 = phi i16* [ %199, %196 ], [ %210, %203 ]
  %218 = icmp ult i64 %200, 7
  br i1 %218, label %249, label %219

219:                                              ; preds = %214, %219
  %220 = phi i64 [ %245, %219 ], [ %215, %214 ]
  %221 = phi i16* [ %247, %219 ], [ %216, %214 ]
  %222 = phi i16* [ %246, %219 ], [ %217, %214 ]
  %223 = load i16, i16* %221, align 2
  store i16 %223, i16* %222, align 2
  %224 = getelementptr inbounds i16, i16* %222, i64 1
  %225 = getelementptr inbounds i16, i16* %221, i64 1
  %226 = load i16, i16* %225, align 2
  store i16 %226, i16* %224, align 2
  %227 = getelementptr inbounds i16, i16* %222, i64 2
  %228 = getelementptr inbounds i16, i16* %221, i64 2
  %229 = load i16, i16* %228, align 2
  store i16 %229, i16* %227, align 2
  %230 = getelementptr inbounds i16, i16* %222, i64 3
  %231 = getelementptr inbounds i16, i16* %221, i64 3
  %232 = load i16, i16* %231, align 2
  store i16 %232, i16* %230, align 2
  %233 = getelementptr inbounds i16, i16* %222, i64 4
  %234 = getelementptr inbounds i16, i16* %221, i64 4
  %235 = load i16, i16* %234, align 2
  store i16 %235, i16* %233, align 2
  %236 = getelementptr inbounds i16, i16* %222, i64 5
  %237 = getelementptr inbounds i16, i16* %221, i64 5
  %238 = load i16, i16* %237, align 2
  store i16 %238, i16* %236, align 2
  %239 = getelementptr inbounds i16, i16* %222, i64 6
  %240 = getelementptr inbounds i16, i16* %221, i64 6
  %241 = load i16, i16* %240, align 2
  store i16 %241, i16* %239, align 2
  %242 = getelementptr inbounds i16, i16* %222, i64 7
  %243 = getelementptr inbounds i16, i16* %221, i64 7
  %244 = load i16, i16* %243, align 2
  store i16 %244, i16* %242, align 2
  %245 = add i64 %220, -8
  %246 = getelementptr inbounds i16, i16* %222, i64 8
  %247 = getelementptr inbounds i16, i16* %221, i64 8
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %249, label %219, !llvm.loop !34

249:                                              ; preds = %214, %219, %194, %71
  %250 = load i32, i32* %3, align 4
  %251 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %252 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %251, align 8
  %253 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %252, i64 3
  %254 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %253, align 8
  call void %254(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %8, i32 %250) #13
  %255 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %256 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %255, i64 0, i32 1, i32 1
  %257 = load i8, i8* %256, align 1
  %258 = icmp slt i8 %257, 0
  br i1 %258, label %259, label %268

259:                                              ; preds = %249
  %260 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %261 = load i8*, i8** %260, align 8
  call void @_ZdlPv(i8* %261) #15
  br label %268

262:                                              ; preds = %65
  %263 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)***
  %264 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)*** %263, align 8
  %265 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)** %264, i64 17
  %266 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*, i32*)** %265, align 8
  %267 = call zeroext i1 %266(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, %"class.std::__1::basic_string"* dereferenceable(24) %2, i32* dereferenceable(4) %3) #13
  br i1 %267, label %268, label %270

268:                                              ; preds = %259, %249, %262
  br i1 %4, label %269, label %290

269:                                              ; preds = %268
  call void @_ZN8autofill18structured_address16AddressComponent18UnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %0)
  br label %290

270:                                              ; preds = %262
  %271 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %272 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %271, align 8
  %273 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %274 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %273, align 8
  %275 = icmp eq %"class.autofill::structured_address::AddressComponent"** %272, %274
  br i1 %275, label %290, label %278

276:                                              ; preds = %288
  %277 = icmp eq %"class.autofill::structured_address::AddressComponent"** %289, %274
  br i1 %277, label %290, label %278

278:                                              ; preds = %270, %276
  %279 = phi %"class.autofill::structured_address::AddressComponent"** [ %289, %276 ], [ %272, %270 ]
  %280 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %279, align 8
  %281 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %280, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, %"class.std::__1::basic_string"* dereferenceable(24) %2, i32* dereferenceable(4) %3, i1 zeroext %4, i1 zeroext %5)
  %282 = and i1 %281, %5
  br i1 %282, label %283, label %288

283:                                              ; preds = %278
  %284 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %285 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %284, align 8
  %286 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %285, i64 4
  %287 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %286, align 8
  call void %287(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br label %290

288:                                              ; preds = %278
  %289 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %279, i64 1
  br i1 %281, label %290, label %276

290:                                              ; preds = %276, %288, %270, %269, %268, %283
  %291 = phi i1 [ true, %283 ], [ true, %268 ], [ true, %269 ], [ false, %270 ], [ false, %276 ], [ true, %288 ]
  ret i1 %291
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNS_15ServerFieldTypeERKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"*, i32* nocapture readonly dereferenceable(4), %"class.std::__1::basic_string.19"* dereferenceable(24), i32* dereferenceable(4), i1 zeroext, i1 zeroext) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::basic_string.19", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #13
  %10 = bitcast %"class.std::__1::basic_string.19"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast %"class.std::__1::basic_string.19"* %2 to i8*
  %17 = select i1 %13, i8* %15, i8* %16
  %18 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = zext i8 %12 to i64
  %21 = select i1 %13, i64 %19, i64 %20
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %8, i8* %17, i64 %21) #13
  %22 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #13
  %23 = load i32, i32* %1, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %7, i32 %23) #13
  %24 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %7, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %8, i32* dereferenceable(4) %3, i1 zeroext %4, i1 zeroext %5) #13
  %25 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %6
  %30 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  call void @_ZdlPv(i8* %31) #15
  br label %32

32:                                               ; preds = %6, %29
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #13
  %33 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %33, i64 0, i32 1, i32 1
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  %38 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %39 = load i8*, i8** %38, align 8
  call void @_ZdlPv(i8* %39) #15
  br label %40

40:                                               ; preds = %32, %37
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #13
  ret i1 %24
}

declare void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* sret, i8*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent18UnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %2, align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"** %3, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %8, %1
  ret void

8:                                                ; preds = %1, %8
  %9 = phi %"class.autofill::structured_address::AddressComponent"** [ %15, %8 ], [ %3, %1 ]
  %10 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %9, align 8
  %11 = bitcast %"class.autofill::structured_address::AddressComponent"* %10 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %12 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %12, i64 4
  %14 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %13, align 8
  tail call void %14(%"class.autofill::structured_address::AddressComponent"* %10) #13
  tail call void @_ZN8autofill18structured_address16AddressComponent18UnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %10) #13
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %9, i64 1
  %16 = icmp eq %"class.autofill::structured_address::AddressComponent"** %15, %5
  br i1 %16, label %7, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_RKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* dereferenceable(24), %"class.std::__1::basic_string.19"* dereferenceable(24), i32* dereferenceable(4), i1 zeroext, i1 zeroext) local_unnamed_addr #1 align 2 {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #13
  %9 = bitcast %"class.std::__1::basic_string.19"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = bitcast %"class.std::__1::basic_string.19"* %2 to i8*
  %16 = select i1 %12, i8* %14, i8* %15
  %17 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = zext i8 %11 to i64
  %20 = select i1 %12, i64 %18, i64 %19
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %7, i8* %16, i64 %20) #13
  %21 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, i32* dereferenceable(4) %3, i1 zeroext %4, i1 zeroext %5)
  %22 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %22, i64 0, i32 1, i32 1
  %24 = load i8, i8* %23, align 1
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %6
  %27 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %28 = load i8*, i8** %27, align 8
  call void @_ZdlPv(i8* %28) #15
  br label %29

29:                                               ; preds = %6, %26
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #13
  ret i1 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent40UnsetAddressComponentAndItsSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %3 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %2, align 8
  %4 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %3, i64 4
  %5 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %4, align 8
  tail call void %5(%"class.autofill::structured_address::AddressComponent"* %0) #13
  tail call void @_ZN8autofill18structured_address16AddressComponent18UnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNS_15ServerFieldTypeEPNSt3__112basic_stringIDsNS5_11char_traitsIDsEENS5_9allocatorIDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"*, i32* nocapture readonly dereferenceable(4), %"class.std::__1::basic_string"*, i32*) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.std::__1::basic_string.19", align 8
  %6 = bitcast %"class.std::__1::basic_string.19"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #13
  %7 = load i32, i32* %1, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %5, i32 %7) #13
  %8 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %5, %"class.std::__1::basic_string"* %2, i32* %3)
  %9 = bitcast %"class.std::__1::basic_string.19"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %15) #15
  br label %16

16:                                               ; preds = %4, %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #13
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* dereferenceable(24), %"class.std::__1::basic_string"*, i32*) local_unnamed_addr #1 align 2 {
  %5 = alloca %"class.std::__1::basic_string.19", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca [15 x i8], align 8
  %8 = bitcast %"class.std::__1::basic_string.19"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #13
  %9 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 4, !noalias !35
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %5, i32 %10) #13
  %11 = bitcast %"class.std::__1::basic_string.19"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %11, i64 0, i32 1, i32 0
  %13 = load i8, i8* %12, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %13 to i64
  %18 = select i1 %14, i64 %16, i64 %17
  %19 = bitcast %"class.std::__1::basic_string.19"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = zext i8 %21 to i64
  %26 = select i1 %22, i64 %24, i64 %25
  %27 = icmp eq i64 %18, %26
  br i1 %27, label %28, label %59

28:                                               ; preds = %4
  %29 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = bitcast %"class.std::__1::basic_string.19"* %1 to i8*
  %32 = select i1 %14, i8* %30, i8* %31
  %33 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = select i1 %22, i8* %34, i8* %8
  %36 = icmp eq i64 %18, 0
  br i1 %14, label %43, label %37

37:                                               ; preds = %28
  br i1 %36, label %59, label %38

38:                                               ; preds = %37
  %39 = ptrtoint i8* %30 to i64
  %40 = trunc i64 %39 to i8
  %41 = load i8, i8* %35, align 1
  %42 = icmp eq i8 %41, %40
  br i1 %42, label %47, label %59

43:                                               ; preds = %28
  br i1 %36, label %59, label %44

44:                                               ; preds = %43
  %45 = call i32 @bcmp(i8* %32, i8* %35, i64 %18) #13
  %46 = icmp eq i32 %45, 0
  br label %59

47:                                               ; preds = %38, %54
  %48 = phi i64 [ %51, %54 ], [ %17, %38 ]
  %49 = phi i8* [ %52, %54 ], [ %31, %38 ]
  %50 = phi i8* [ %55, %54 ], [ %35, %38 ]
  %51 = add i64 %48, -1
  %52 = getelementptr inbounds i8, i8* %49, i64 1
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %47
  %55 = getelementptr inbounds i8, i8* %50, i64 1
  %56 = load i8, i8* %52, align 1
  %57 = load i8, i8* %55, align 1
  %58 = icmp eq i8 %56, %57
  br i1 %58, label %47, label %59

59:                                               ; preds = %47, %54, %38, %4, %37, %43, %44
  %60 = phi i1 [ false, %4 ], [ %46, %44 ], [ true, %43 ], [ true, %37 ], [ false, %38 ], [ false, %54 ], [ true, %47 ]
  br i1 %22, label %61, label %64

61:                                               ; preds = %59
  %62 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  call void @_ZdlPv(i8* %63) #15
  br label %64

64:                                               ; preds = %59, %61
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #13
  br i1 %60, label %65, label %276

65:                                               ; preds = %64
  %66 = icmp eq %"class.std::__1::basic_string"* %2, null
  br i1 %66, label %271, label %67

67:                                               ; preds = %65
  %68 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %68) #13
  %69 = getelementptr inbounds [15 x i8], [15 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 15, i8* nonnull %69)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 15, i1 false)
  %70 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %71 = load i8, i8* %70, align 8, !range !2, !noalias !38
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %256, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %75 = bitcast %"class.std::__1::basic_string"* %74 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %75, i64 0, i32 1, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %77, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %73
  %80 = bitcast %"class.std::__1::basic_string"* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %68, i8* align 8 %80, i64 24, i1 false) #13
  br label %261

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i16*, i16** %82, align 8
  %84 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = icmp ult i64 %85, 11
  br i1 %86, label %87, label %92

87:                                               ; preds = %81
  %88 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %89 = trunc i64 %85 to i8
  %90 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %90, i64 0, i32 1, i32 1
  store i8 %89, i8* %91, align 1
  br label %109

92:                                               ; preds = %81
  %93 = icmp ugt i64 %85, 9223372036854775791
  br i1 %93, label %94, label %96

94:                                               ; preds = %92
  %95 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %95) #14
  unreachable

96:                                               ; preds = %92
  %97 = add nuw nsw i64 %85, 8
  %98 = and i64 %97, -8
  %99 = icmp slt i64 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %96
  call void @abort() #14
  unreachable

101:                                              ; preds = %96
  %102 = shl i64 %98, 1
  %103 = call i8* @_Znwm(i64 %102) #15
  %104 = bitcast i8* %103 to i16*
  %105 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  store i8* %103, i8** %105, align 8
  %106 = or i64 %98, -9223372036854775808
  %107 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %85, i64* %108, align 8
  br label %109

109:                                              ; preds = %101, %87
  %110 = phi i16* [ %88, %87 ], [ %104, %101 ]
  %111 = add nuw nsw i64 %85, 1
  %112 = add i64 %85, 1
  %113 = icmp ult i64 %112, 16
  br i1 %113, label %203, label %114

114:                                              ; preds = %109
  %115 = add i64 %85, 1
  %116 = getelementptr i16, i16* %110, i64 %115
  %117 = getelementptr i16, i16* %83, i64 %115
  %118 = icmp ult i16* %110, %117
  %119 = icmp ult i16* %83, %116
  %120 = and i1 %118, %119
  br i1 %120, label %203, label %121

121:                                              ; preds = %114
  %122 = and i64 %112, -16
  %123 = sub i64 %111, %122
  %124 = getelementptr i16, i16* %83, i64 %122
  %125 = getelementptr i16, i16* %110, i64 %122
  %126 = add i64 %122, -16
  %127 = lshr exact i64 %126, 4
  %128 = add nuw nsw i64 %127, 1
  %129 = and i64 %128, 3
  %130 = icmp ult i64 %126, 48
  br i1 %130, label %182, label %131

131:                                              ; preds = %121
  %132 = sub nsw i64 %128, %129
  br label %133

133:                                              ; preds = %133, %131
  %134 = phi i64 [ 0, %131 ], [ %179, %133 ]
  %135 = phi i64 [ %132, %131 ], [ %180, %133 ]
  %136 = getelementptr i16, i16* %83, i64 %134
  %137 = getelementptr i16, i16* %110, i64 %134
  %138 = bitcast i16* %136 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 2, !alias.scope !41
  %140 = getelementptr i16, i16* %136, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  %142 = load <8 x i16>, <8 x i16>* %141, align 2, !alias.scope !41
  %143 = bitcast i16* %137 to <8 x i16>*
  store <8 x i16> %139, <8 x i16>* %143, align 2, !alias.scope !44, !noalias !41
  %144 = getelementptr i16, i16* %137, i64 8
  %145 = bitcast i16* %144 to <8 x i16>*
  store <8 x i16> %142, <8 x i16>* %145, align 2, !alias.scope !44, !noalias !41
  %146 = or i64 %134, 16
  %147 = getelementptr i16, i16* %83, i64 %146
  %148 = getelementptr i16, i16* %110, i64 %146
  %149 = bitcast i16* %147 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 2, !alias.scope !41
  %151 = getelementptr i16, i16* %147, i64 8
  %152 = bitcast i16* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 2, !alias.scope !41
  %154 = bitcast i16* %148 to <8 x i16>*
  store <8 x i16> %150, <8 x i16>* %154, align 2, !alias.scope !44, !noalias !41
  %155 = getelementptr i16, i16* %148, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %156, align 2, !alias.scope !44, !noalias !41
  %157 = or i64 %134, 32
  %158 = getelementptr i16, i16* %83, i64 %157
  %159 = getelementptr i16, i16* %110, i64 %157
  %160 = bitcast i16* %158 to <8 x i16>*
  %161 = load <8 x i16>, <8 x i16>* %160, align 2, !alias.scope !41
  %162 = getelementptr i16, i16* %158, i64 8
  %163 = bitcast i16* %162 to <8 x i16>*
  %164 = load <8 x i16>, <8 x i16>* %163, align 2, !alias.scope !41
  %165 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %161, <8 x i16>* %165, align 2, !alias.scope !44, !noalias !41
  %166 = getelementptr i16, i16* %159, i64 8
  %167 = bitcast i16* %166 to <8 x i16>*
  store <8 x i16> %164, <8 x i16>* %167, align 2, !alias.scope !44, !noalias !41
  %168 = or i64 %134, 48
  %169 = getelementptr i16, i16* %83, i64 %168
  %170 = getelementptr i16, i16* %110, i64 %168
  %171 = bitcast i16* %169 to <8 x i16>*
  %172 = load <8 x i16>, <8 x i16>* %171, align 2, !alias.scope !41
  %173 = getelementptr i16, i16* %169, i64 8
  %174 = bitcast i16* %173 to <8 x i16>*
  %175 = load <8 x i16>, <8 x i16>* %174, align 2, !alias.scope !41
  %176 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %172, <8 x i16>* %176, align 2, !alias.scope !44, !noalias !41
  %177 = getelementptr i16, i16* %170, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  store <8 x i16> %175, <8 x i16>* %178, align 2, !alias.scope !44, !noalias !41
  %179 = add i64 %134, 64
  %180 = add i64 %135, -4
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %133, !llvm.loop !46

182:                                              ; preds = %133, %121
  %183 = phi i64 [ 0, %121 ], [ %179, %133 ]
  %184 = icmp eq i64 %129, 0
  br i1 %184, label %201, label %185

185:                                              ; preds = %182, %185
  %186 = phi i64 [ %198, %185 ], [ %183, %182 ]
  %187 = phi i64 [ %199, %185 ], [ %129, %182 ]
  %188 = getelementptr i16, i16* %83, i64 %186
  %189 = getelementptr i16, i16* %110, i64 %186
  %190 = bitcast i16* %188 to <8 x i16>*
  %191 = load <8 x i16>, <8 x i16>* %190, align 2, !alias.scope !41
  %192 = getelementptr i16, i16* %188, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  %194 = load <8 x i16>, <8 x i16>* %193, align 2, !alias.scope !41
  %195 = bitcast i16* %189 to <8 x i16>*
  store <8 x i16> %191, <8 x i16>* %195, align 2, !alias.scope !44, !noalias !41
  %196 = getelementptr i16, i16* %189, i64 8
  %197 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %194, <8 x i16>* %197, align 2, !alias.scope !44, !noalias !41
  %198 = add i64 %186, 16
  %199 = add i64 %187, -1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %201, label %185, !llvm.loop !47

201:                                              ; preds = %185, %182
  %202 = icmp eq i64 %112, %122
  br i1 %202, label %261, label %203

203:                                              ; preds = %201, %114, %109
  %204 = phi i64 [ %111, %114 ], [ %111, %109 ], [ %123, %201 ]
  %205 = phi i16* [ %83, %114 ], [ %83, %109 ], [ %124, %201 ]
  %206 = phi i16* [ %110, %114 ], [ %110, %109 ], [ %125, %201 ]
  %207 = add i64 %204, -1
  %208 = and i64 %204, 7
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %221, label %210

210:                                              ; preds = %203, %210
  %211 = phi i64 [ %216, %210 ], [ %204, %203 ]
  %212 = phi i16* [ %218, %210 ], [ %205, %203 ]
  %213 = phi i16* [ %217, %210 ], [ %206, %203 ]
  %214 = phi i64 [ %219, %210 ], [ %208, %203 ]
  %215 = load i16, i16* %212, align 2
  store i16 %215, i16* %213, align 2
  %216 = add i64 %211, -1
  %217 = getelementptr inbounds i16, i16* %213, i64 1
  %218 = getelementptr inbounds i16, i16* %212, i64 1
  %219 = add i64 %214, -1
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %210, !llvm.loop !48

221:                                              ; preds = %210, %203
  %222 = phi i64 [ %204, %203 ], [ %216, %210 ]
  %223 = phi i16* [ %205, %203 ], [ %218, %210 ]
  %224 = phi i16* [ %206, %203 ], [ %217, %210 ]
  %225 = icmp ult i64 %207, 7
  br i1 %225, label %261, label %226

226:                                              ; preds = %221, %226
  %227 = phi i64 [ %252, %226 ], [ %222, %221 ]
  %228 = phi i16* [ %254, %226 ], [ %223, %221 ]
  %229 = phi i16* [ %253, %226 ], [ %224, %221 ]
  %230 = load i16, i16* %228, align 2
  store i16 %230, i16* %229, align 2
  %231 = getelementptr inbounds i16, i16* %229, i64 1
  %232 = getelementptr inbounds i16, i16* %228, i64 1
  %233 = load i16, i16* %232, align 2
  store i16 %233, i16* %231, align 2
  %234 = getelementptr inbounds i16, i16* %229, i64 2
  %235 = getelementptr inbounds i16, i16* %228, i64 2
  %236 = load i16, i16* %235, align 2
  store i16 %236, i16* %234, align 2
  %237 = getelementptr inbounds i16, i16* %229, i64 3
  %238 = getelementptr inbounds i16, i16* %228, i64 3
  %239 = load i16, i16* %238, align 2
  store i16 %239, i16* %237, align 2
  %240 = getelementptr inbounds i16, i16* %229, i64 4
  %241 = getelementptr inbounds i16, i16* %228, i64 4
  %242 = load i16, i16* %241, align 2
  store i16 %242, i16* %240, align 2
  %243 = getelementptr inbounds i16, i16* %229, i64 5
  %244 = getelementptr inbounds i16, i16* %228, i64 5
  %245 = load i16, i16* %244, align 2
  store i16 %245, i16* %243, align 2
  %246 = getelementptr inbounds i16, i16* %229, i64 6
  %247 = getelementptr inbounds i16, i16* %228, i64 6
  %248 = load i16, i16* %247, align 2
  store i16 %248, i16* %246, align 2
  %249 = getelementptr inbounds i16, i16* %229, i64 7
  %250 = getelementptr inbounds i16, i16* %228, i64 7
  %251 = load i16, i16* %250, align 2
  store i16 %251, i16* %249, align 2
  %252 = add i64 %227, -8
  %253 = getelementptr inbounds i16, i16* %229, i64 8
  %254 = getelementptr inbounds i16, i16* %228, i64 8
  %255 = icmp eq i64 %252, 0
  br i1 %255, label %261, label %226, !llvm.loop !49

256:                                              ; preds = %67
  %257 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  store i8* null, i8** %257, align 8
  %258 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %259 = bitcast i64* %258 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %259, i8* nonnull align 8 %69, i64 15, i1 false)
  %260 = getelementptr inbounds i8, i8* %68, i64 23
  store i8 0, i8* %260, align 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 15, i1 false), !noalias !38
  br label %261

261:                                              ; preds = %221, %226, %201, %79, %256
  %262 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %263 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %262, i64 0, i32 1, i32 1
  %264 = load i8, i8* %263, align 1
  %265 = icmp slt i8 %264, 0
  br i1 %265, label %266, label %269

266:                                              ; preds = %261
  %267 = bitcast %"class.std::__1::basic_string"* %2 to i8**
  %268 = load i8*, i8** %267, align 8
  call void @_ZdlPv(i8* %268) #15
  br label %269

269:                                              ; preds = %261, %266
  %270 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %270, i8* nonnull align 8 %68, i64 24, i1 false) #13
  call void @llvm.lifetime.end.p0i8(i64 15, i8* nonnull %69)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %68) #13
  br label %271

271:                                              ; preds = %65, %269
  %272 = icmp eq i32* %3, null
  br i1 %272, label %300, label %273

273:                                              ; preds = %271
  %274 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %275 = load i32, i32* %274, align 8
  store i32 %275, i32* %3, align 4
  br label %300

276:                                              ; preds = %64
  %277 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)***
  %278 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)*** %277, align 8
  %279 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)** %278, i64 18
  %280 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string"*)** %279, align 8
  %281 = call zeroext i1 %280(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, %"class.std::__1::basic_string"* %2) #13
  br i1 %281, label %282, label %287

282:                                              ; preds = %276
  %283 = icmp eq i32* %3, null
  br i1 %283, label %300, label %284

284:                                              ; preds = %282
  %285 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %286 = load i32, i32* %285, align 8
  store i32 %286, i32* %3, align 4
  br label %300

287:                                              ; preds = %276
  %288 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %289 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %288, align 8
  %290 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %291 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %290, align 8
  %292 = icmp eq %"class.autofill::structured_address::AddressComponent"** %289, %291
  br i1 %292, label %300, label %295

293:                                              ; preds = %295
  %294 = icmp eq %"class.autofill::structured_address::AddressComponent"** %299, %291
  br i1 %294, label %300, label %295

295:                                              ; preds = %287, %293
  %296 = phi %"class.autofill::structured_address::AddressComponent"** [ %299, %293 ], [ %289, %287 ]
  %297 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %296, align 8
  %298 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %297, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, %"class.std::__1::basic_string"* %2, i32* %3)
  %299 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %296, i64 1
  br i1 %298, label %300, label %293

300:                                              ; preds = %293, %295, %287, %271, %273, %282, %284
  %301 = phi i1 [ true, %284 ], [ true, %282 ], [ true, %273 ], [ true, %271 ], [ false, %287 ], [ false, %293 ], [ true, %295 ]
  ret i1 %301
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent15GetValueForTypeERKNS_15ServerFieldTypeE(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"*, i32* nocapture readonly dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string.19", align 8
  %5 = bitcast %"class.std::__1::basic_string.19"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #13
  %6 = load i32, i32* %2, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %4, i32 %6) #13
  %7 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #13, !alias.scope !50
  %8 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %1, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %4, %"class.std::__1::basic_string"* %0, i32* null) #13
  %9 = bitcast %"class.std::__1::basic_string.19"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp slt i8 %11, 0
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %15) #15
  br label %16

16:                                               ; preds = %3, %13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent15GetValueForTypeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %4 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #13
  %5 = tail call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %1, %"class.std::__1::basic_string.19"* dereferenceable(24) %2, %"class.std::__1::basic_string"* %0, i32* null)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8autofill18structured_address16AddressComponent28GetVerificationStatusForTypeERKNS_15ServerFieldTypeE(%"class.autofill::structured_address::AddressComponent"*, i32* nocapture readonly dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca %"class.std::__1::basic_string.19", align 8
  %5 = bitcast %"class.std::__1::basic_string.19"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #13
  %6 = load i32, i32* %1, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %4, i32 %6) #13
  %7 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #13
  store i32 0, i32* %3, align 4
  %8 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %4, %"class.std::__1::basic_string"* null, i32* nonnull %3) #13
  %9 = load i32, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #13
  %10 = bitcast %"class.std::__1::basic_string.19"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  call void @_ZdlPv(i8* %16) #15
  br label %17

17:                                               ; preds = %2, %14
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #13
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8autofill18structured_address16AddressComponent28GetVerificationStatusForTypeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string.19"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #13
  store i32 0, i32* %3, align 4
  %5 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* dereferenceable(24) %1, %"class.std::__1::basic_string"* null, i32* nonnull %3)
  %6 = load i32, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #13
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent28UnsetValueForTypeIfSupportedERKNS_15ServerFieldTypeE(%"class.autofill::structured_address::AddressComponent"*, i32* nocapture readonly dereferenceable(4)) local_unnamed_addr #1 align 2 {
  %3 = load i32, i32* %1, align 4
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %3, %5
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %9 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %9, i64 4
  %11 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %10, align 8
  tail call void %11(%"class.autofill::structured_address::AddressComponent"* %0) #13
  tail call void @_ZN8autofill18structured_address16AddressComponent18UnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %0) #13
  ret i1 true

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %14 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %13, align 8
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %16 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %15, align 8
  %17 = icmp eq %"class.autofill::structured_address::AddressComponent"** %14, %16
  br i1 %17, label %25, label %20

18:                                               ; preds = %20
  %19 = icmp eq %"class.autofill::structured_address::AddressComponent"** %24, %16
  br i1 %19, label %25, label %20

20:                                               ; preds = %12, %18
  %21 = phi %"class.autofill::structured_address::AddressComponent"** [ %24, %18 ], [ %14, %12 ]
  %22 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %21, align 8
  %23 = tail call zeroext i1 @_ZN8autofill18structured_address16AddressComponent28UnsetValueForTypeIfSupportedERKNS_15ServerFieldTypeE(%"class.autofill::structured_address::AddressComponent"* %22, i32* dereferenceable(4) %1)
  %24 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %21, i64 1
  br i1 %23, label %25, label %18

25:                                               ; preds = %18, %20, %12
  %26 = phi i1 [ false, %12 ], [ true, %20 ], [ false, %18 ]
  ret i1 %26
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent40ParseValueAndAssignSubcomponentsByMethodEv(%"class.autofill::structured_address::AddressComponent"* nocapture readnone) unnamed_addr #0 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent37GetParseRegularExpressionsByRelevanceEv(%"class.std::__1::vector.43"* noalias nocapture sret, %"class.autofill::structured_address::AddressComponent"* nocapture readnone) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.std::__1::vector.43"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent32ParseValueAndAssignSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::vector.43", align 8
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %7 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %6, align 8
  %8 = icmp eq %"class.autofill::structured_address::AddressComponent"** %5, %7
  br i1 %8, label %14, label %9

9:                                                ; preds = %1
  %10 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %11 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %12 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %11, i64 0, i32 1, i32 1
  %13 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  br label %20

14:                                               ; preds = %31, %1
  %15 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*)***
  %16 = load i1 (%"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*)*** %15, align 8
  %17 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*)** %16, i64 15
  %18 = load i1 (%"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*)** %17, align 8
  %19 = call zeroext i1 %18(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br i1 %19, label %81, label %34

20:                                               ; preds = %9, %31
  %21 = phi %"class.autofill::structured_address::AddressComponent"** [ %5, %9 ], [ %32, %31 ]
  %22 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %21, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 0, i64 24, i1 false) #13
  %23 = bitcast %"class.autofill::structured_address::AddressComponent"* %22 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %24 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %24, i64 3
  %26 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %25, align 8
  call void %26(%"class.autofill::structured_address::AddressComponent"* %22, %"class.std::__1::basic_string"* nonnull %3, i32 1) #13
  %27 = load i8, i8* %12, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %30) #15
  br label %31

31:                                               ; preds = %20, %29
  %32 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %21, i64 1
  %33 = icmp eq %"class.autofill::structured_address::AddressComponent"** %32, %7
  br i1 %33, label %14, label %20

34:                                               ; preds = %14
  %35 = bitcast %"class.std::__1::vector.43"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #13
  %36 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)***
  %37 = load void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)** %37, i64 14
  %39 = load void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)** %38, align 8
  call void %39(%"class.std::__1::vector.43"* nonnull sret %2, %"class.autofill::structured_address::AddressComponent"* %0) #13
  %40 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2, i64 0, i32 0, i32 0
  %41 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %40, align 8
  %42 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2, i64 0, i32 0, i32 1
  %43 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %42, align 8
  %44 = icmp eq %"class.re2::RE2"** %41, %43
  br i1 %44, label %66, label %45

45:                                               ; preds = %34
  %46 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %47 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %48

48:                                               ; preds = %60, %45
  %49 = phi %"class.re2::RE2"** [ %41, %45 ], [ %61, %60 ]
  %50 = load %"class.re2::RE2"*, %"class.re2::RE2"** %49, align 8
  %51 = icmp eq %"class.re2::RE2"* %50, null
  br i1 %51, label %60, label %52

52:                                               ; preds = %48
  %53 = load i8, i8* %46, align 8, !range !2
  %54 = icmp eq i8 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %52
  %56 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %57

57:                                               ; preds = %55, %52
  %58 = phi %"class.std::__1::basic_string"* [ %56, %55 ], [ %47, %52 ]
  %59 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent51ParseValueAndAssignSubcomponentsByRegularExpressionERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPKN3re23RE2E(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %58, %"class.re2::RE2"* nonnull %50) #13
  br i1 %59, label %63, label %60

60:                                               ; preds = %57, %48
  %61 = getelementptr inbounds %"class.re2::RE2"*, %"class.re2::RE2"** %49, i64 1
  %62 = icmp eq %"class.re2::RE2"** %61, %43
  br i1 %62, label %63, label %48

63:                                               ; preds = %60, %57
  %64 = phi i32 [ 1, %57 ], [ 2, %60 ]
  %65 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %40, align 8
  br label %66

66:                                               ; preds = %63, %34
  %67 = phi %"class.re2::RE2"** [ %41, %34 ], [ %65, %63 ]
  %68 = phi i32 [ 2, %34 ], [ %64, %63 ]
  %69 = icmp eq %"class.re2::RE2"** %67, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = ptrtoint %"class.re2::RE2"** %67 to i64
  %72 = bitcast %"class.re2::RE2"*** %42 to i64*
  store i64 %71, i64* %72, align 8
  %73 = bitcast %"class.re2::RE2"** %67 to i8*
  call void @_ZdlPv(i8* %73) #15
  br label %74

74:                                               ; preds = %66, %70
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #13
  %75 = icmp eq i32 %68, 2
  br i1 %75, label %76, label %81

76:                                               ; preds = %74
  %77 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %78 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %77, align 8
  %79 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %78, i64 16
  %80 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %79, align 8
  call void %80(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br label %81

81:                                               ; preds = %74, %14, %76
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent52ParseValueAndAssignSubcomponentsByRegularExpressionsEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::vector.43", align 8
  %3 = bitcast %"class.std::__1::vector.43"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #13
  %4 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)***
  %5 = load void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)** %5, i64 14
  %7 = load void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::vector.43"*, %"class.autofill::structured_address::AddressComponent"*)** %6, align 8
  call void %7(%"class.std::__1::vector.43"* nonnull sret %2, %"class.autofill::structured_address::AddressComponent"* %0) #13
  %8 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2, i64 0, i32 0, i32 0
  %9 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.43", %"class.std::__1::vector.43"* %2, i64 0, i32 0, i32 1
  %11 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %10, align 8
  %12 = icmp eq %"class.re2::RE2"** %9, %11
  br i1 %12, label %34, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %16

16:                                               ; preds = %13, %28
  %17 = phi %"class.re2::RE2"** [ %9, %13 ], [ %29, %28 ]
  %18 = load %"class.re2::RE2"*, %"class.re2::RE2"** %17, align 8
  %19 = icmp eq %"class.re2::RE2"* %18, null
  br i1 %19, label %28, label %20

20:                                               ; preds = %16
  %21 = load i8, i8* %14, align 8, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %20
  %24 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %25

25:                                               ; preds = %20, %23
  %26 = phi %"class.std::__1::basic_string"* [ %24, %23 ], [ %15, %20 ]
  %27 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent51ParseValueAndAssignSubcomponentsByRegularExpressionERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPKN3re23RE2E(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %26, %"class.re2::RE2"* nonnull %18)
  br i1 %27, label %31, label %28

28:                                               ; preds = %16, %25
  %29 = getelementptr inbounds %"class.re2::RE2"*, %"class.re2::RE2"** %17, i64 1
  %30 = icmp eq %"class.re2::RE2"** %29, %11
  br i1 %30, label %31, label %16

31:                                               ; preds = %28, %25
  %32 = phi i32 [ 1, %25 ], [ 2, %28 ]
  %33 = load %"class.re2::RE2"**, %"class.re2::RE2"*** %8, align 8
  br label %34

34:                                               ; preds = %31, %1
  %35 = phi %"class.re2::RE2"** [ %9, %1 ], [ %33, %31 ]
  %36 = phi i32 [ 2, %1 ], [ %32, %31 ]
  %37 = icmp eq %"class.re2::RE2"** %35, null
  br i1 %37, label %42, label %38

38:                                               ; preds = %34
  %39 = ptrtoint %"class.re2::RE2"** %35 to i64
  %40 = bitcast %"class.re2::RE2"*** %10 to i64*
  store i64 %39, i64* %40, align 8
  %41 = bitcast %"class.re2::RE2"** %35 to i8*
  call void @_ZdlPv(i8* %41) #15
  br label %42

42:                                               ; preds = %34, %38
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #13
  %43 = icmp ne i32 %36, 2
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent51ParseValueAndAssignSubcomponentsByRegularExpressionERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEEPKN3re23RE2E(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.re2::RE2"*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::map.52", align 8
  %5 = alloca %"class.std::__1::basic_string.19", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string.19", align 8
  %8 = alloca i32, align 4
  %9 = bitcast %"class.std::__1::map.52"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.std::__1::map.52", %"class.std::__1::map.52"* %4, i64 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::map.52", %"class.std::__1::map.52"* %4, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.std::__1::map.52", %"class.std::__1::map.52"* %4, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = bitcast %"class.std::__1::__tree_node_base"** %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %12, %"class.std::__1::__tree_end_node"** %10, align 8
  %14 = bitcast %"class.std::__1::basic_string.19"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #13
  %15 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  %21 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %22 = select i1 %18, i16* %20, i16* %21
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = zext i8 %17 to i64
  %26 = select i1 %18, i64 %24, i64 %25
  call void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.19"* nonnull sret %5, i16* %22, i64 %26) #13
  %27 = call zeroext i1 @_ZN8autofill18structured_address29ParseValueByRegularExpressionERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKN3re23RE2EPNS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIS8_S7_EEEEEE(%"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %5, %"class.re2::RE2"* %2, %"class.std::__1::map.52"* nonnull %4) #13
  %28 = bitcast %"class.std::__1::basic_string.19"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %28, i64 0, i32 1, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %34) #15
  br label %35

35:                                               ; preds = %3, %32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #13
  br i1 %27, label %36, label %163

36:                                               ; preds = %35
  %37 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %10, align 8
  %38 = icmp eq %"class.std::__1::__tree_end_node"* %37, %12
  br i1 %38, label %163, label %39

39:                                               ; preds = %36
  %40 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %41 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  %42 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 3
  %43 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %43, i64 0, i32 1, i32 0
  %45 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %46 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = bitcast i32* %8 to i8*
  %48 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %48, i64 0, i32 1, i32 1
  %50 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %51 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  br label %52

52:                                               ; preds = %39, %160
  %53 = phi %"class.std::__1::__tree_end_node"* [ %37, %39 ], [ %161, %160 ]
  %54 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 4
  %55 = bitcast %"class.std::__1::__tree_end_node"* %54 to %"class.std::__1::basic_string.19"*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %40) #13
  %56 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 7
  %57 = bitcast %"class.std::__1::__tree_end_node"* %56 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %51, i8 -86, i64 24, i1 false)
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  %61 = bitcast %"class.std::__1::__tree_end_node"* %56 to i8**
  %62 = load i8*, i8** %61, align 8
  %63 = bitcast %"class.std::__1::__tree_end_node"* %56 to i8*
  %64 = select i1 %60, i8* %62, i8* %63
  %65 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 8
  %66 = bitcast %"class.std::__1::__tree_end_node"* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = zext i8 %59 to i64
  %69 = select i1 %60, i64 %67, i64 %68
  call void @_ZN4base11UTF8ToUTF16ENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %6, i8* %64, i64 %69) #13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #13
  %70 = load i32, i32* %42, align 4, !noalias !53
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %7, i32 %70) #13
  %71 = bitcast %"class.std::__1::__tree_end_node"* %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %72 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %71, i64 0, i32 1, i32 0
  %73 = load i8, i8* %72, align 1
  %74 = icmp slt i8 %73, 0
  %75 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 5
  %76 = bitcast %"class.std::__1::__tree_end_node"* %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = zext i8 %73 to i64
  %79 = select i1 %74, i64 %77, i64 %78
  %80 = load i8, i8* %44, align 1
  %81 = icmp slt i8 %80, 0
  %82 = load i64, i64* %45, align 8
  %83 = zext i8 %80 to i64
  %84 = select i1 %81, i64 %82, i64 %83
  %85 = icmp eq i64 %79, %84
  br i1 %85, label %86, label %116

86:                                               ; preds = %52
  %87 = bitcast %"class.std::__1::__tree_end_node"* %54 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = bitcast %"class.std::__1::__tree_end_node"* %54 to i8*
  %90 = select i1 %74, i8* %88, i8* %89
  %91 = load i8*, i8** %46, align 8
  %92 = select i1 %81, i8* %91, i8* %41
  %93 = icmp eq i64 %79, 0
  br i1 %74, label %100, label %94

94:                                               ; preds = %86
  br i1 %93, label %116, label %95

95:                                               ; preds = %94
  %96 = ptrtoint i8* %88 to i64
  %97 = trunc i64 %96 to i8
  %98 = load i8, i8* %92, align 1
  %99 = icmp eq i8 %98, %97
  br i1 %99, label %104, label %116

100:                                              ; preds = %86
  br i1 %93, label %116, label %101

101:                                              ; preds = %100
  %102 = call i32 @bcmp(i8* %90, i8* %92, i64 %79) #13
  %103 = icmp eq i32 %102, 0
  br label %116

104:                                              ; preds = %95, %111
  %105 = phi i64 [ %108, %111 ], [ %78, %95 ]
  %106 = phi i8* [ %109, %111 ], [ %89, %95 ]
  %107 = phi i8* [ %112, %111 ], [ %92, %95 ]
  %108 = add i64 %105, -1
  %109 = getelementptr inbounds i8, i8* %106, i64 1
  %110 = icmp eq i64 %108, 0
  br i1 %110, label %116, label %111

111:                                              ; preds = %104
  %112 = getelementptr inbounds i8, i8* %107, i64 1
  %113 = load i8, i8* %109, align 1
  %114 = load i8, i8* %112, align 1
  %115 = icmp eq i8 %113, %114
  br i1 %115, label %104, label %116

116:                                              ; preds = %104, %111, %95, %52, %94, %100, %101
  %117 = phi i1 [ false, %52 ], [ %103, %101 ], [ true, %100 ], [ true, %94 ], [ false, %95 ], [ false, %111 ], [ true, %104 ]
  br i1 %81, label %118, label %120

118:                                              ; preds = %116
  %119 = load i8*, i8** %46, align 8
  call void @_ZdlPv(i8* %119) #15
  br label %120

120:                                              ; preds = %116, %118
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #13
  br i1 %117, label %127, label %121

121:                                              ; preds = %120
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #13
  store i32 1, i32* %8, align 4
  %122 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* dereferenceable(24) %55, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6, i32* nonnull dereferenceable(4) %8, i1 zeroext false, i1 zeroext false)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %47) #13
  %123 = load i8, i8* %49, align 1
  %124 = icmp slt i8 %123, 0
  br i1 %124, label %125, label %132

125:                                              ; preds = %121
  %126 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %126) #15
  br label %132

127:                                              ; preds = %120
  %128 = load i8, i8* %49, align 1
  %129 = icmp slt i8 %128, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %127
  %131 = load i8*, i8** %50, align 8
  call void @_ZdlPv(i8* %131) #15
  br label %132

132:                                              ; preds = %130, %127, %125, %121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %40) #13
  %133 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 1, i32 0
  %134 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %133, align 8
  %135 = icmp eq %"class.std::__1::__tree_node_base"* %134, null
  br i1 %135, label %136, label %144

136:                                              ; preds = %132
  %137 = bitcast %"class.std::__1::__tree_end_node"* %53 to %"class.std::__1::__tree_node_base"*
  %138 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %53, i64 2
  %139 = bitcast %"class.std::__1::__tree_end_node"* %138 to %"class.std::__1::__tree_end_node"**
  %140 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %139, align 8
  %141 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %140, i64 0, i32 0
  %142 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %141, align 8
  %143 = icmp eq %"class.std::__1::__tree_node_base"* %142, %137
  br i1 %143, label %160, label %151

144:                                              ; preds = %132, %144
  %145 = phi %"class.std::__1::__tree_node_base"* [ %147, %144 ], [ %134, %132 ]
  %146 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 0, i32 0
  %147 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %146, align 8
  %148 = icmp eq %"class.std::__1::__tree_node_base"* %147, null
  br i1 %148, label %149, label %144

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %145, i64 0, i32 0
  br label %160

151:                                              ; preds = %136, %151
  %152 = phi %"class.std::__1::__tree_end_node"** [ %155, %151 ], [ %139, %136 ]
  %153 = bitcast %"class.std::__1::__tree_end_node"** %152 to %"class.std::__1::__tree_node_base"**
  %154 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %153, align 8
  %155 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %154, i64 0, i32 2
  %156 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %155, align 8
  %157 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %156, i64 0, i32 0
  %158 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %157, align 8
  %159 = icmp eq %"class.std::__1::__tree_node_base"* %158, %154
  br i1 %159, label %160, label %151

160:                                              ; preds = %151, %136, %149
  %161 = phi %"class.std::__1::__tree_end_node"* [ %150, %149 ], [ %140, %136 ], [ %156, %151 ]
  %162 = icmp eq %"class.std::__1::__tree_end_node"* %161, %12
  br i1 %162, label %163, label %52

163:                                              ; preds = %160, %36, %35
  %164 = phi i1 [ false, %35 ], [ true, %36 ], [ true, %160 ]
  %165 = getelementptr inbounds %"class.std::__1::map.52", %"class.std::__1::map.52"* %4, i64 0, i32 0
  %166 = bitcast %"class.std::__1::__tree_end_node"* %12 to %"class.std::__1::__tree_node"**
  %167 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %166, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree"* nonnull %165, %"class.std::__1::__tree_node"* %167) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #13
  ret i1 %164
}

declare zeroext i1 @_ZN8autofill18structured_address29ParseValueByRegularExpressionERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEPKN3re23RE2EPNS1_3mapIS7_S7_NS1_4lessIS7_EENS5_INS1_4pairIS8_S7_EEEEEE(%"class.std::__1::basic_string.19"* dereferenceable(24), %"class.re2::RE2"*, %"class.std::__1::map.52"*) local_unnamed_addr #4

declare void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.19"* sret, i16*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent48ParseValueAndAssignSubcomponentsByFallbackMethodEv(%"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string.19", align 8
  %3 = alloca %"class.std::__1::basic_string.19", align 8
  %4 = alloca %"class.std::__1::vector.63", align 8
  %5 = alloca %"class.std::__1::vector.36", align 8
  %6 = alloca i32, align 4
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::vector.63", align 8
  %9 = alloca i32, align 4
  %10 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %11 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %10, align 8
  %12 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %13 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %12, align 8
  %14 = icmp eq %"class.autofill::structured_address::AddressComponent"** %11, %13
  br i1 %14, label %415, label %15

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %23

21:                                               ; preds = %15
  %22 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %23

23:                                               ; preds = %19, %21
  %24 = phi %"class.std::__1::basic_string"* [ %20, %19 ], [ %22, %21 ]
  %25 = bitcast %"class.std::__1::basic_string"* %24 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %25, i64 0, i32 1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %23
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  br label %34

32:                                               ; preds = %23
  %33 = zext i8 %27 to i64
  br label %34

34:                                               ; preds = %29, %32
  %35 = phi i64 [ %31, %29 ], [ %33, %32 ]
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %415, label %37

37:                                               ; preds = %34
  %38 = bitcast %"class.std::__1::vector.63"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %38) #13
  %39 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %4, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %4, i64 0, i32 0, i32 1
  %41 = bitcast %"class.std::__1::vector.63"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 -86, i64 24, i1 false)
  %42 = load i8, i8* %16, align 8, !range !2
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %37
  %45 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %48

46:                                               ; preds = %37
  %47 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %48

48:                                               ; preds = %44, %46
  %49 = phi %"class.std::__1::basic_string"* [ %45, %44 ], [ %47, %46 ]
  %50 = bitcast %"class.std::__1::basic_string"* %49 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %50, i64 0, i32 1, i32 1
  %52 = load i8, i8* %51, align 1
  %53 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i16*, i16** %53, align 8
  %55 = bitcast %"class.std::__1::basic_string"* %49 to i16*
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = zext i8 %52 to i64
  %59 = icmp slt i8 %52, 0
  %60 = select i1 %59, i16* %54, i16* %55
  %61 = select i1 %59, i64 %57, i64 %58
  call void @_ZN4base11SplitStringENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.63"* nonnull sret %4, i16* %60, i64 %61, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @.str.9, i64 0, i64 0), i64 1, i32 1, i32 0) #13
  %62 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %39, align 8
  %63 = bitcast %"class.std::__1::vector.36"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %63) #13
  %64 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %5, i64 0, i32 0, i32 0
  %65 = getelementptr inbounds %"class.std::__1::vector.36", %"class.std::__1::vector.36"* %5, i64 0, i32 0, i32 1
  %66 = bitcast %"class.std::__1::vector.36"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 -86, i64 24, i1 false)
  call void @_ZNK8autofill18structured_address16AddressComponent20GetSubcomponentTypesEv(%"class.std::__1::vector.36"* nonnull sret %5, %"class.autofill::structured_address::AddressComponent"* %0)
  %67 = bitcast i32** %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector.36"* %5 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = sub i64 %68, %70
  %72 = ashr exact i64 %71, 2
  %73 = icmp ugt i64 %72, 1
  br i1 %73, label %74, label %104

74:                                               ; preds = %48
  %75 = bitcast i32* %6 to i8*
  %76 = bitcast %"class.std::__1::basic_string.19"* %2 to i8*
  %77 = bitcast %"class.std::__1::basic_string.19"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %77, i64 0, i32 1, i32 0
  %79 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %80

80:                                               ; preds = %74, %96
  %81 = phi i64 [ %70, %74 ], [ %100, %96 ]
  %82 = phi i64 [ 1, %74 ], [ %98, %96 ]
  %83 = phi i64 [ 0, %74 ], [ %82, %96 ]
  %84 = phi %"class.std::__1::basic_string"* [ %62, %74 ], [ %97, %96 ]
  %85 = inttoptr i64 %81 to i32*
  %86 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %40, align 8
  %87 = icmp eq %"class.std::__1::basic_string"* %84, %86
  br i1 %87, label %382, label %88

88:                                               ; preds = %80
  %89 = getelementptr inbounds i32, i32* %85, i64 %83
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75) #13
  store i32 1, i32* %6, align 4
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #13
  %90 = load i32, i32* %89, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %2, i32 %90) #13
  %91 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %2, %"class.std::__1::basic_string"* dereferenceable(24) %84, i32* nonnull dereferenceable(4) %6, i1 zeroext false, i1 zeroext false) #13
  %92 = load i8, i8* %78, align 1
  %93 = icmp slt i8 %92, 0
  br i1 %93, label %94, label %96

94:                                               ; preds = %88
  %95 = load i8*, i8** %79, align 8
  call void @_ZdlPv(i8* %95) #15
  br label %96

96:                                               ; preds = %88, %94
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %76) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #13
  %97 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %84, i64 1
  %98 = add nuw i64 %82, 1
  %99 = load i64, i64* %67, align 8
  %100 = load i64, i64* %69, align 8
  %101 = sub i64 %99, %100
  %102 = ashr exact i64 %101, 2
  %103 = icmp ult i64 %98, %102
  br i1 %103, label %80, label %104

104:                                              ; preds = %96, %48
  %105 = phi %"class.std::__1::basic_string"* [ %62, %48 ], [ %97, %96 ]
  %106 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %106) #13
  %107 = bitcast %"class.std::__1::vector.63"* %8 to i8*
  %108 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %108, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %107) #13
  %109 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %40, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 0, i64 24, i1 false) #13
  %110 = ptrtoint %"class.std::__1::basic_string"* %105 to i64
  %111 = ptrtoint %"class.std::__1::basic_string"* %109 to i64
  %112 = sub i64 %111, %110
  %113 = sdiv exact i64 %112, 24
  %114 = icmp eq i64 %112, 0
  br i1 %114, label %327, label %115

115:                                              ; preds = %104
  %116 = icmp ugt i64 %113, 768614336404564650
  br i1 %116, label %117, label %119

117:                                              ; preds = %115
  %118 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %118) #14
  unreachable

119:                                              ; preds = %115
  %120 = call i8* @_Znwm(i64 %112) #15
  %121 = bitcast i8* %120 to %"class.std::__1::basic_string"*
  %122 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 1
  %123 = bitcast %"class.std::__1::basic_string"** %122 to i8**
  store i8* %120, i8** %123, align 8
  %124 = bitcast %"class.std::__1::vector.63"* %8 to i8**
  store i8* %120, i8** %124, align 8
  %125 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %121, i64 %113
  %126 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::basic_string"* %125, %"class.std::__1::basic_string"** %126, align 8
  %127 = bitcast %"class.std::__1::basic_string"** %122 to i64*
  %128 = ptrtoint i8* %120 to i64
  %129 = icmp eq %"class.std::__1::basic_string"* %105, %109
  br i1 %129, label %324, label %130

130:                                              ; preds = %119, %316
  %131 = phi %"class.std::__1::basic_string"* [ %318, %316 ], [ %121, %119 ]
  %132 = phi %"class.std::__1::basic_string"* [ %317, %316 ], [ %105, %119 ]
  %133 = bitcast %"class.std::__1::basic_string"* %132 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %134 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %133, i64 0, i32 1, i32 1
  %135 = load i8, i8* %134, align 1
  %136 = icmp slt i8 %135, 0
  br i1 %136, label %140, label %137

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::basic_string"* %131 to i8*
  %139 = bitcast %"class.std::__1::basic_string"* %132 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %138, i8* align 8 %139, i64 24, i1 false) #13
  br label %316

140:                                              ; preds = %130
  %141 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %132, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %142 = load i16*, i16** %141, align 8
  %143 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %132, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %144 = load i64, i64* %143, align 8
  %145 = icmp ult i64 %144, 11
  br i1 %145, label %146, label %151

146:                                              ; preds = %140
  %147 = bitcast %"class.std::__1::basic_string"* %131 to i16*
  %148 = trunc i64 %144 to i8
  %149 = bitcast %"class.std::__1::basic_string"* %131 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %150 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %149, i64 0, i32 1, i32 1
  store i8 %148, i8* %150, align 1
  br label %168

151:                                              ; preds = %140
  %152 = icmp ugt i64 %144, 9223372036854775791
  br i1 %152, label %153, label %155

153:                                              ; preds = %151
  %154 = bitcast %"class.std::__1::basic_string"* %131 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %154) #14
  unreachable

155:                                              ; preds = %151
  %156 = add nuw nsw i64 %144, 8
  %157 = and i64 %156, -8
  %158 = icmp slt i64 %157, 0
  br i1 %158, label %159, label %160

159:                                              ; preds = %155
  call void @abort() #14
  unreachable

160:                                              ; preds = %155
  %161 = shl i64 %157, 1
  %162 = call i8* @_Znwm(i64 %161) #15
  %163 = bitcast i8* %162 to i16*
  %164 = bitcast %"class.std::__1::basic_string"* %131 to i8**
  store i8* %162, i8** %164, align 8
  %165 = or i64 %157, -9223372036854775808
  %166 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %165, i64* %166, align 8
  %167 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %144, i64* %167, align 8
  br label %168

168:                                              ; preds = %160, %146
  %169 = phi i16* [ %147, %146 ], [ %163, %160 ]
  %170 = add nuw nsw i64 %144, 1
  %171 = add i64 %144, 1
  %172 = icmp ult i64 %171, 16
  br i1 %172, label %263, label %173

173:                                              ; preds = %168
  %174 = getelementptr i16, i16* %169, i64 1
  %175 = getelementptr i16, i16* %174, i64 %144
  %176 = getelementptr i16, i16* %142, i64 1
  %177 = getelementptr i16, i16* %176, i64 %144
  %178 = icmp ult i16* %169, %177
  %179 = icmp ult i16* %142, %175
  %180 = and i1 %178, %179
  br i1 %180, label %263, label %181

181:                                              ; preds = %173
  %182 = and i64 %171, -16
  %183 = sub i64 %170, %182
  %184 = getelementptr i16, i16* %142, i64 %182
  %185 = getelementptr i16, i16* %169, i64 %182
  %186 = add i64 %182, -16
  %187 = lshr exact i64 %186, 4
  %188 = add nuw nsw i64 %187, 1
  %189 = and i64 %188, 3
  %190 = icmp ult i64 %186, 48
  br i1 %190, label %242, label %191

191:                                              ; preds = %181
  %192 = sub nsw i64 %188, %189
  br label %193

193:                                              ; preds = %193, %191
  %194 = phi i64 [ 0, %191 ], [ %239, %193 ]
  %195 = phi i64 [ %192, %191 ], [ %240, %193 ]
  %196 = getelementptr i16, i16* %142, i64 %194
  %197 = getelementptr i16, i16* %169, i64 %194
  %198 = bitcast i16* %196 to <8 x i16>*
  %199 = load <8 x i16>, <8 x i16>* %198, align 2, !alias.scope !56
  %200 = getelementptr i16, i16* %196, i64 8
  %201 = bitcast i16* %200 to <8 x i16>*
  %202 = load <8 x i16>, <8 x i16>* %201, align 2, !alias.scope !56
  %203 = bitcast i16* %197 to <8 x i16>*
  store <8 x i16> %199, <8 x i16>* %203, align 2, !alias.scope !59, !noalias !56
  %204 = getelementptr i16, i16* %197, i64 8
  %205 = bitcast i16* %204 to <8 x i16>*
  store <8 x i16> %202, <8 x i16>* %205, align 2, !alias.scope !59, !noalias !56
  %206 = or i64 %194, 16
  %207 = getelementptr i16, i16* %142, i64 %206
  %208 = getelementptr i16, i16* %169, i64 %206
  %209 = bitcast i16* %207 to <8 x i16>*
  %210 = load <8 x i16>, <8 x i16>* %209, align 2, !alias.scope !56
  %211 = getelementptr i16, i16* %207, i64 8
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 2, !alias.scope !56
  %214 = bitcast i16* %208 to <8 x i16>*
  store <8 x i16> %210, <8 x i16>* %214, align 2, !alias.scope !59, !noalias !56
  %215 = getelementptr i16, i16* %208, i64 8
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %213, <8 x i16>* %216, align 2, !alias.scope !59, !noalias !56
  %217 = or i64 %194, 32
  %218 = getelementptr i16, i16* %142, i64 %217
  %219 = getelementptr i16, i16* %169, i64 %217
  %220 = bitcast i16* %218 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !56
  %222 = getelementptr i16, i16* %218, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  %224 = load <8 x i16>, <8 x i16>* %223, align 2, !alias.scope !56
  %225 = bitcast i16* %219 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %225, align 2, !alias.scope !59, !noalias !56
  %226 = getelementptr i16, i16* %219, i64 8
  %227 = bitcast i16* %226 to <8 x i16>*
  store <8 x i16> %224, <8 x i16>* %227, align 2, !alias.scope !59, !noalias !56
  %228 = or i64 %194, 48
  %229 = getelementptr i16, i16* %142, i64 %228
  %230 = getelementptr i16, i16* %169, i64 %228
  %231 = bitcast i16* %229 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !56
  %233 = getelementptr i16, i16* %229, i64 8
  %234 = bitcast i16* %233 to <8 x i16>*
  %235 = load <8 x i16>, <8 x i16>* %234, align 2, !alias.scope !56
  %236 = bitcast i16* %230 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %236, align 2, !alias.scope !59, !noalias !56
  %237 = getelementptr i16, i16* %230, i64 8
  %238 = bitcast i16* %237 to <8 x i16>*
  store <8 x i16> %235, <8 x i16>* %238, align 2, !alias.scope !59, !noalias !56
  %239 = add i64 %194, 64
  %240 = add i64 %195, -4
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %242, label %193, !llvm.loop !61

242:                                              ; preds = %193, %181
  %243 = phi i64 [ 0, %181 ], [ %239, %193 ]
  %244 = icmp eq i64 %189, 0
  br i1 %244, label %261, label %245

245:                                              ; preds = %242, %245
  %246 = phi i64 [ %258, %245 ], [ %243, %242 ]
  %247 = phi i64 [ %259, %245 ], [ %189, %242 ]
  %248 = getelementptr i16, i16* %142, i64 %246
  %249 = getelementptr i16, i16* %169, i64 %246
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !56
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !56
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !59, !noalias !56
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !59, !noalias !56
  %258 = add i64 %246, 16
  %259 = add i64 %247, -1
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %245, !llvm.loop !62

261:                                              ; preds = %245, %242
  %262 = icmp eq i64 %171, %182
  br i1 %262, label %316, label %263

263:                                              ; preds = %261, %173, %168
  %264 = phi i64 [ %170, %173 ], [ %170, %168 ], [ %183, %261 ]
  %265 = phi i16* [ %142, %173 ], [ %142, %168 ], [ %184, %261 ]
  %266 = phi i16* [ %169, %173 ], [ %169, %168 ], [ %185, %261 ]
  %267 = add i64 %264, -1
  %268 = and i64 %264, 7
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %281, label %270

270:                                              ; preds = %263, %270
  %271 = phi i64 [ %276, %270 ], [ %264, %263 ]
  %272 = phi i16* [ %278, %270 ], [ %265, %263 ]
  %273 = phi i16* [ %277, %270 ], [ %266, %263 ]
  %274 = phi i64 [ %279, %270 ], [ %268, %263 ]
  %275 = load i16, i16* %272, align 2
  store i16 %275, i16* %273, align 2
  %276 = add i64 %271, -1
  %277 = getelementptr inbounds i16, i16* %273, i64 1
  %278 = getelementptr inbounds i16, i16* %272, i64 1
  %279 = add i64 %274, -1
  %280 = icmp eq i64 %279, 0
  br i1 %280, label %281, label %270, !llvm.loop !63

281:                                              ; preds = %270, %263
  %282 = phi i64 [ %264, %263 ], [ %276, %270 ]
  %283 = phi i16* [ %265, %263 ], [ %278, %270 ]
  %284 = phi i16* [ %266, %263 ], [ %277, %270 ]
  %285 = icmp ult i64 %267, 7
  br i1 %285, label %316, label %286

286:                                              ; preds = %281, %286
  %287 = phi i64 [ %312, %286 ], [ %282, %281 ]
  %288 = phi i16* [ %314, %286 ], [ %283, %281 ]
  %289 = phi i16* [ %313, %286 ], [ %284, %281 ]
  %290 = load i16, i16* %288, align 2
  store i16 %290, i16* %289, align 2
  %291 = getelementptr inbounds i16, i16* %289, i64 1
  %292 = getelementptr inbounds i16, i16* %288, i64 1
  %293 = load i16, i16* %292, align 2
  store i16 %293, i16* %291, align 2
  %294 = getelementptr inbounds i16, i16* %289, i64 2
  %295 = getelementptr inbounds i16, i16* %288, i64 2
  %296 = load i16, i16* %295, align 2
  store i16 %296, i16* %294, align 2
  %297 = getelementptr inbounds i16, i16* %289, i64 3
  %298 = getelementptr inbounds i16, i16* %288, i64 3
  %299 = load i16, i16* %298, align 2
  store i16 %299, i16* %297, align 2
  %300 = getelementptr inbounds i16, i16* %289, i64 4
  %301 = getelementptr inbounds i16, i16* %288, i64 4
  %302 = load i16, i16* %301, align 2
  store i16 %302, i16* %300, align 2
  %303 = getelementptr inbounds i16, i16* %289, i64 5
  %304 = getelementptr inbounds i16, i16* %288, i64 5
  %305 = load i16, i16* %304, align 2
  store i16 %305, i16* %303, align 2
  %306 = getelementptr inbounds i16, i16* %289, i64 6
  %307 = getelementptr inbounds i16, i16* %288, i64 6
  %308 = load i16, i16* %307, align 2
  store i16 %308, i16* %306, align 2
  %309 = getelementptr inbounds i16, i16* %289, i64 7
  %310 = getelementptr inbounds i16, i16* %288, i64 7
  %311 = load i16, i16* %310, align 2
  store i16 %311, i16* %309, align 2
  %312 = add i64 %287, -8
  %313 = getelementptr inbounds i16, i16* %289, i64 8
  %314 = getelementptr inbounds i16, i16* %288, i64 8
  %315 = icmp eq i64 %312, 0
  br i1 %315, label %316, label %286, !llvm.loop !64

316:                                              ; preds = %281, %286, %261, %137
  %317 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %132, i64 1
  %318 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %131, i64 1
  %319 = icmp eq %"class.std::__1::basic_string"* %317, %109
  br i1 %319, label %320, label %130

320:                                              ; preds = %316
  %321 = ptrtoint %"class.std::__1::basic_string"* %318 to i64
  %322 = bitcast %"class.std::__1::vector.63"* %8 to i64*
  %323 = load i64, i64* %322, align 8
  br label %324

324:                                              ; preds = %119, %320
  %325 = phi i64 [ %323, %320 ], [ %128, %119 ]
  %326 = phi i64 [ %321, %320 ], [ %128, %119 ]
  store i64 %326, i64* %127, align 8
  br label %327

327:                                              ; preds = %104, %324
  %328 = phi i64 [ %326, %324 ], [ 0, %104 ]
  %329 = phi i64 [ %325, %324 ], [ 0, %104 ]
  %330 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 1
  %331 = sub i64 %328, %329
  %332 = sdiv exact i64 %331, 24
  %333 = inttoptr i64 %329 to %"class.std::__1::basic_string"*
  call void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEELm18446744073709551615EEENS_16BasicStringPieceIDsS4_EE(%"class.std::__1::basic_string"* nonnull sret %7, i64 %332, %"class.std::__1::basic_string"* %333, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @.str.9, i64 0, i64 0), i64 1) #13
  %334 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 0
  %335 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %334, align 8
  %336 = icmp eq %"class.std::__1::basic_string"* %335, null
  br i1 %336, label %358, label %337

337:                                              ; preds = %327
  %338 = bitcast %"class.std::__1::basic_string"* %335 to i8*
  %339 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %330, align 8
  %340 = icmp eq %"class.std::__1::basic_string"* %339, %335
  br i1 %340, label %356, label %341

341:                                              ; preds = %337, %351
  %342 = phi %"class.std::__1::basic_string"* [ %343, %351 ], [ %339, %337 ]
  %343 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %342, i64 -1
  %344 = bitcast %"class.std::__1::basic_string"* %343 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %345 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %344, i64 0, i32 1, i32 1
  %346 = load i8, i8* %345, align 1
  %347 = icmp slt i8 %346, 0
  br i1 %347, label %348, label %351

348:                                              ; preds = %341
  %349 = bitcast %"class.std::__1::basic_string"* %343 to i8**
  %350 = load i8*, i8** %349, align 8
  call void @_ZdlPv(i8* %350) #15
  br label %351

351:                                              ; preds = %348, %341
  %352 = icmp eq %"class.std::__1::basic_string"* %343, %335
  br i1 %352, label %353, label %341

353:                                              ; preds = %351
  %354 = bitcast %"class.std::__1::vector.63"* %8 to i8**
  %355 = load i8*, i8** %354, align 8
  br label %356

356:                                              ; preds = %353, %337
  %357 = phi i8* [ %355, %353 ], [ %338, %337 ]
  store %"class.std::__1::basic_string"* %335, %"class.std::__1::basic_string"** %330, align 8
  call void @_ZdlPv(i8* %357) #15
  br label %358

358:                                              ; preds = %327, %356
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %107) #13
  %359 = load i32*, i32** %65, align 8
  %360 = getelementptr inbounds i32, i32* %359, i64 -1
  %361 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %361) #13
  store i32 1, i32* %9, align 4
  %362 = bitcast %"class.std::__1::basic_string.19"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %362) #13
  %363 = load i32, i32* %360, align 4
  call void @_ZN8autofill12AutofillType23ServerFieldTypeToStringENS_15ServerFieldTypeE(%"class.std::__1::basic_string.19"* nonnull sret %3, i32 %363) #13
  %364 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent25SetValueForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERKNS3_IDsNS4_IDsEENS6_IDsEEEERKNS0_18VerificationStatusEbb(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %3, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, i32* nonnull dereferenceable(4) %9, i1 zeroext false, i1 zeroext false) #13
  %365 = bitcast %"class.std::__1::basic_string.19"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %366 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %365, i64 0, i32 1, i32 0
  %367 = load i8, i8* %366, align 1
  %368 = icmp slt i8 %367, 0
  br i1 %368, label %369, label %372

369:                                              ; preds = %358
  %370 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %371 = load i8*, i8** %370, align 8
  call void @_ZdlPv(i8* %371) #15
  br label %372

372:                                              ; preds = %358, %369
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %362) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %361) #13
  %373 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %374 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %373, i64 0, i32 1, i32 1
  %375 = load i8, i8* %374, align 1
  %376 = icmp slt i8 %375, 0
  br i1 %376, label %377, label %380

377:                                              ; preds = %372
  %378 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %379 = load i8*, i8** %378, align 8
  call void @_ZdlPv(i8* %379) #15
  br label %380

380:                                              ; preds = %372, %377
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %106) #13
  %381 = load i32*, i32** %64, align 8
  br label %384

382:                                              ; preds = %80
  %383 = inttoptr i64 %81 to i32*
  br label %384

384:                                              ; preds = %382, %380
  %385 = phi i32* [ %381, %380 ], [ %383, %382 ]
  %386 = icmp eq i32* %385, null
  br i1 %386, label %390, label %387

387:                                              ; preds = %384
  %388 = ptrtoint i32* %385 to i64
  store i64 %388, i64* %67, align 8
  %389 = bitcast i32* %385 to i8*
  call void @_ZdlPv(i8* %389) #15
  br label %390

390:                                              ; preds = %384, %387
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %63) #13
  %391 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %39, align 8
  %392 = icmp eq %"class.std::__1::basic_string"* %391, null
  br i1 %392, label %414, label %393

393:                                              ; preds = %390
  %394 = bitcast %"class.std::__1::basic_string"* %391 to i8*
  %395 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %40, align 8
  %396 = icmp eq %"class.std::__1::basic_string"* %395, %391
  br i1 %396, label %412, label %397

397:                                              ; preds = %393, %407
  %398 = phi %"class.std::__1::basic_string"* [ %399, %407 ], [ %395, %393 ]
  %399 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %398, i64 -1
  %400 = bitcast %"class.std::__1::basic_string"* %399 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %401 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %400, i64 0, i32 1, i32 1
  %402 = load i8, i8* %401, align 1
  %403 = icmp slt i8 %402, 0
  br i1 %403, label %404, label %407

404:                                              ; preds = %397
  %405 = bitcast %"class.std::__1::basic_string"* %399 to i8**
  %406 = load i8*, i8** %405, align 8
  call void @_ZdlPv(i8* %406) #15
  br label %407

407:                                              ; preds = %404, %397
  %408 = icmp eq %"class.std::__1::basic_string"* %399, %391
  br i1 %408, label %409, label %397

409:                                              ; preds = %407
  %410 = bitcast %"class.std::__1::vector.63"* %4 to i8**
  %411 = load i8*, i8** %410, align 8
  br label %412

412:                                              ; preds = %409, %393
  %413 = phi i8* [ %411, %409 ], [ %394, %393 ]
  store %"class.std::__1::basic_string"* %391, %"class.std::__1::basic_string"** %40, align 8
  call void @_ZdlPv(i8* %413) #15
  br label %414

414:                                              ; preds = %390, %412
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %38) #13
  br label %415

415:                                              ; preds = %34, %1, %414
  ret void
}

declare void @_ZN4base11SplitStringENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.63"* sret, i16*, i64, i16*, i64, i32, i32) local_unnamed_addr #4

declare void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEELm18446744073709551615EEENS_16BasicStringPieceIDsS4_EE(%"class.std::__1::basic_string"* sret, i64, %"class.std::__1::basic_string"*, i16*, i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent22AllDescendantsAreEmptyEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %2, align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"** %3, %5
  br i1 %6, label %13, label %9

7:                                                ; preds = %9
  %8 = icmp eq %"class.autofill::structured_address::AddressComponent"** %12, %5
  br i1 %8, label %13, label %9

9:                                                ; preds = %1, %7
  %10 = phi %"class.autofill::structured_address::AddressComponent"** [ %12, %7 ], [ %3, %1 ]
  %11 = tail call fastcc zeroext i1 @"_ZN4base8internal10InvokeImplIRZNK8autofill18structured_address16AddressComponent22AllDescendantsAreEmptyEvE3$_0JRKPS4_EEEDcOT_DpOT0_"(%"class.autofill::structured_address::AddressComponent"** dereferenceable(8) %10) #13
  %12 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %10, i64 1
  br i1 %11, label %7, label %13

13:                                               ; preds = %9, %7, %1
  %14 = phi i1 [ true, %1 ], [ true, %7 ], [ false, %9 ]
  ret i1 %14
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent16IsStructureValidEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %2, align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"** %3, %5
  br i1 %6, label %111, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %10

10:                                               ; preds = %108, %7
  %11 = phi %"class.autofill::structured_address::AddressComponent"** [ %3, %7 ], [ %109, %108 ]
  %12 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %11, align 8
  %13 = load i8, i8* %8, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %17

17:                                               ; preds = %15, %10
  %18 = phi %"class.std::__1::basic_string"* [ %16, %15 ], [ %9, %10 ]
  %19 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %12, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %17
  %23 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %12, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %26

24:                                               ; preds = %17
  %25 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %26

26:                                               ; preds = %24, %22
  %27 = phi %"class.std::__1::basic_string"* [ %23, %22 ], [ %25, %24 ]
  %28 = bitcast %"class.std::__1::basic_string"* %18 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %29 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %28, i64 0, i32 1, i32 1
  %30 = load i8, i8* %29, align 1
  %31 = icmp slt i8 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %26
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  br label %40

37:                                               ; preds = %26
  %38 = bitcast %"class.std::__1::basic_string"* %18 to i16*
  %39 = zext i8 %30 to i64
  br label %40

40:                                               ; preds = %37, %32
  %41 = phi i16* [ %34, %32 ], [ %38, %37 ]
  %42 = phi i64 [ %36, %32 ], [ %39, %37 ]
  %43 = bitcast %"class.std::__1::basic_string"* %27 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %44 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %43, i64 0, i32 1, i32 1
  %45 = load i8, i8* %44, align 1
  %46 = icmp slt i8 %45, 0
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i16*, i16** %47, align 8
  %49 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = bitcast %"class.std::__1::basic_string"* %27 to i16*
  %52 = zext i8 %45 to i64
  %53 = select i1 %46, i16* %48, i16* %51
  %54 = select i1 %46, i64 %50, i64 %52
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %108, label %56

56:                                               ; preds = %40
  %57 = getelementptr inbounds i16, i16* %41, i64 %42
  %58 = shl nuw i64 %54, 1
  %59 = ashr exact i64 %58, 1
  %60 = ptrtoint i16* %57 to i64
  %61 = ptrtoint i16* %41 to i64
  %62 = shl nuw i64 %42, 1
  %63 = ashr exact i64 %62, 1
  %64 = icmp slt i64 %63, %59
  br i1 %64, label %111, label %65

65:                                               ; preds = %56
  %66 = load i16, i16* %53, align 2
  br label %67

67:                                               ; preds = %96, %65
  %68 = phi i64 [ %63, %65 ], [ %100, %96 ]
  %69 = phi i16* [ %41, %65 ], [ %97, %96 ]
  %70 = sub nsw i64 %68, %59
  %71 = add nsw i64 %70, 1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %111, label %73

73:                                               ; preds = %67, %78
  %74 = phi i64 [ %80, %78 ], [ %71, %67 ]
  %75 = phi i16* [ %79, %78 ], [ %69, %67 ]
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, %66
  br i1 %77, label %82, label %78

78:                                               ; preds = %73
  %79 = getelementptr inbounds i16, i16* %75, i64 1
  %80 = add i64 %74, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %111, label %73

82:                                               ; preds = %73
  %83 = icmp eq i16* %75, null
  br i1 %83, label %111, label %84

84:                                               ; preds = %82, %91
  %85 = phi i16* [ %89, %91 ], [ %75, %82 ]
  %86 = phi i16* [ %92, %91 ], [ %53, %82 ]
  %87 = phi i64 [ %88, %91 ], [ %59, %82 ]
  %88 = add i64 %87, -1
  %89 = getelementptr inbounds i16, i16* %85, i64 1
  %90 = icmp eq i64 %88, 0
  br i1 %90, label %102, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds i16, i16* %86, i64 1
  %93 = load i16, i16* %89, align 2
  %94 = load i16, i16* %92, align 2
  %95 = icmp eq i16 %94, %93
  br i1 %95, label %84, label %96

96:                                               ; preds = %91
  %97 = getelementptr inbounds i16, i16* %75, i64 1
  %98 = ptrtoint i16* %97 to i64
  %99 = sub i64 %60, %98
  %100 = ashr exact i64 %99, 1
  %101 = icmp slt i64 %100, %59
  br i1 %101, label %111, label %67

102:                                              ; preds = %84
  %103 = ptrtoint i16* %75 to i64
  %104 = icmp ne i16* %75, %57
  %105 = sub i64 %103, %61
  %106 = icmp ne i64 %105, -2
  %107 = and i1 %104, %106
  br i1 %107, label %108, label %111

108:                                              ; preds = %102, %40
  %109 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %11, i64 1
  %110 = icmp eq %"class.autofill::structured_address::AddressComponent"** %109, %5
  br i1 %110, label %111, label %10

111:                                              ; preds = %108, %102, %56, %96, %82, %67, %78, %1
  %112 = phi i1 [ true, %1 ], [ false, %78 ], [ false, %67 ], [ false, %82 ], [ false, %96 ], [ false, %102 ], [ false, %56 ], [ true, %108 ]
  ret i1 %112
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent20WipeInvalidStructureEv(%"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  %2 = tail call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent16IsStructureValidEv(%"class.autofill::structured_address::AddressComponent"* %0)
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void @_ZN8autofill18structured_address16AddressComponent29RecursivelyUnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %0)
  br label %4

4:                                                ; preds = %1, %3
  %5 = phi i1 [ true, %3 ], [ false, %1 ]
  ret i1 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent29RecursivelyUnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %2, align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"** %3, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %8, %1
  ret void

8:                                                ; preds = %1, %8
  %9 = phi %"class.autofill::structured_address::AddressComponent"** [ %15, %8 ], [ %3, %1 ]
  %10 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %9, align 8
  %11 = bitcast %"class.autofill::structured_address::AddressComponent"* %10 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %12 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %12, i64 4
  %14 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %13, align 8
  tail call void %14(%"class.autofill::structured_address::AddressComponent"* %10) #13
  tail call void @_ZN8autofill18structured_address16AddressComponent29RecursivelyUnsetSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %10)
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %9, i64 1
  %16 = icmp eq %"class.autofill::structured_address::AddressComponent"** %15, %5
  br i1 %16, label %7, label %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent34GetFormattedValueFromSubcomponentsEv(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #13
  %6 = bitcast %"class.autofill::structured_address::AddressComponent"* %1 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %7 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 24, i1 false)
  %8 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %6, align 8
  %9 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %8, i64 13
  %10 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %9, align 8
  call void %10(%"class.std::__1::basic_string"* nonnull sret %3, %"class.autofill::structured_address::AddressComponent"* %1) #13
  %11 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #13
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 24, i1 false)
  call void @_ZNK8autofill18structured_address16AddressComponent33ReplacePlaceholderTypesWithValuesERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %4, %"class.autofill::structured_address::AddressComponent"* %1, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3)
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %15, i64 0, i32 1, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  %19 = load i16*, i16** %12, align 8
  %20 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %21 = select i1 %18, i16* %19, i16* %20
  %22 = load i64, i64* %13, align 8
  %23 = zext i8 %17 to i64
  %24 = select i1 %18, i64 %22, i64 %23
  call void @_ZN4base18CollapseWhitespaceENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEb(%"class.std::__1::basic_string"* sret %0, i16* %21, i64 %24, i1 zeroext false) #13
  %25 = load i8, i8* %16, align 1
  %26 = icmp slt i8 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %2
  %28 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %29 = load i8*, i8** %28, align 8
  call void @_ZdlPv(i8* %29) #15
  br label %30

30:                                               ; preds = %2, %27
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #13
  %31 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %32 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %31, i64 0, i32 1, i32 1
  %33 = load i8, i8* %32, align 1
  %34 = icmp slt i8 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %30
  %36 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %37 = load i8*, i8** %36, align 8
  call void @_ZdlPv(i8* %37) #15
  br label %38

38:                                               ; preds = %30, %35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent33ReplacePlaceholderTypesWithValuesERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEE(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::vector.63", align 8
  %5 = alloca %"class.base::BasicStringPiece.61", align 8
  %6 = alloca %"class.base::BasicStringPiece.61", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::vector.63", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = alloca %"class.std::__1::basic_string.19", align 8
  %14 = alloca %"class.base::BasicStringPiece.61", align 8
  %15 = alloca %"class.base::BasicStringPiece.61", align 8
  %16 = bitcast %"class.std::__1::vector.63"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #13
  %17 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %4, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %4, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %20 = bitcast %"class.std::__1::basic_string"** %19 to i64*
  %21 = bitcast %"class.std::__1::vector.63"* %4 to i64*
  %22 = tail call i8* @_Znwm(i64 480) #15
  %23 = ptrtoint i8* %22 to i64
  %24 = getelementptr inbounds i8, i8* %22, i64 480
  %25 = ptrtoint i8* %24 to i64
  %26 = bitcast %"class.std::__1::basic_string"** %18 to i64*
  store i64 %23, i64* %21, align 8
  store i64 %23, i64* %26, align 8
  store i64 %25, i64* %20, align 8
  %27 = bitcast %"class.base::BasicStringPiece.61"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #13
  %28 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %5, i64 0, i32 0
  %29 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %5, i64 0, i32 1
  %30 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %31 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %30, i64 0, i32 1, i32 1
  %32 = load i8, i8* %31, align 1
  %33 = icmp slt i8 %32, 0
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = load i16*, i16** %34, align 8
  %36 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  %37 = select i1 %33, i16* %35, i16* %36
  store i16* %37, i16** %28, align 8
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = zext i8 %32 to i64
  %41 = select i1 %33, i64 %39, i64 %40
  store i64 %41, i64* %29, align 8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %102, label %43

43:                                               ; preds = %3
  %44 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %48 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %49 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %50 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %49, i64 0, i32 1, i32 1
  %51 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %52 = bitcast %"class.std::__1::vector.63"* %8 to i8*
  %53 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 0
  %54 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %8, i64 0, i32 0, i32 1
  %55 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %56 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %59 = bitcast %"class.std::__1::basic_string"** %54 to i64*
  %60 = bitcast %"class.std::__1::vector.63"* %8 to i64*
  %61 = bitcast %"class.std::__1::basic_string"* %9 to i8**
  %62 = bitcast %"class.std::__1::basic_string"* %9 to i16*
  %63 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %63, i64 0, i32 1, i32 1
  %65 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %66 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %68 = bitcast %"class.std::__1::basic_string"* %10 to i8**
  %69 = bitcast %"class.std::__1::basic_string"* %10 to i16*
  %70 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %70, i64 0, i32 1, i32 1
  %72 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %74 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %75 = bitcast %"class.std::__1::basic_string"* %11 to i8**
  %76 = bitcast %"class.std::__1::basic_string"* %11 to i16*
  %77 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %78 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %77, i64 0, i32 1, i32 1
  %79 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  %80 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %81 = bitcast %"class.std::__1::basic_string.19"* %13 to i8*
  %82 = bitcast %"class.std::__1::basic_string.19"* %13 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %83 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %82, i64 0, i32 1, i32 0
  %84 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %85 = bitcast %"class.base::BasicStringPiece.61"* %14 to i8*
  %86 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %14, i64 0, i32 0
  %87 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %14, i64 0, i32 1
  %88 = bitcast %"class.std::__1::basic_string"** %18 to i64*
  %89 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %90 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %89, i64 0, i32 1, i32 1
  %91 = bitcast %"class.std::__1::basic_string"* %12 to i8**
  %92 = bitcast %"class.std::__1::vector.63"* %8 to i8**
  %93 = bitcast %"class.base::BasicStringPiece.61"* %6 to i8*
  %94 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %6, i64 0, i32 0
  %95 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %6, i64 0, i32 1
  %96 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %97 = bitcast %"class.std::__1::vector.63"* %8 to i8*
  %98 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %99 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %100 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %101 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  br label %321

102:                                              ; preds = %1566, %3
  %103 = phi i64 [ 0, %3 ], [ %1567, %1566 ]
  %104 = bitcast %"class.base::BasicStringPiece.61"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #13
  %105 = call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %103, i64 -1)
  %106 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %15, i64 0, i32 0
  %107 = extractvalue { i16*, i64 } %105, 0
  store i16* %107, i16** %106, align 8
  %108 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %15, i64 0, i32 1
  %109 = extractvalue { i16*, i64 } %105, 1
  store i64 %109, i64* %108, align 8
  %110 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %111 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %112 = icmp ult %"class.std::__1::basic_string"* %110, %111
  br i1 %112, label %113, label %288

113:                                              ; preds = %102
  %114 = icmp ugt i64 %109, 9223372036854775791
  br i1 %114, label %115, label %117

115:                                              ; preds = %113
  %116 = bitcast %"class.std::__1::basic_string"* %110 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %116) #14
  unreachable

117:                                              ; preds = %113
  %118 = icmp ult i64 %109, 11
  br i1 %118, label %132, label %119

119:                                              ; preds = %117
  %120 = add nuw nsw i64 %109, 8
  %121 = and i64 %120, -8
  %122 = icmp slt i64 %121, 0
  br i1 %122, label %123, label %124

123:                                              ; preds = %119
  call void @abort() #14
  unreachable

124:                                              ; preds = %119
  %125 = shl i64 %121, 1
  %126 = call i8* @_Znwm(i64 %125) #15
  %127 = bitcast i8* %126 to i16*
  %128 = bitcast %"class.std::__1::basic_string"* %110 to i8**
  store i8* %126, i8** %128, align 8, !alias.scope !65
  %129 = or i64 %121, -9223372036854775808
  %130 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %110, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %129, i64* %130, align 8, !alias.scope !65
  %131 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %110, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %109, i64* %131, align 8, !alias.scope !65
  br label %138

132:                                              ; preds = %117
  %133 = trunc i64 %109 to i8
  %134 = bitcast %"class.std::__1::basic_string"* %110 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %135 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %134, i64 0, i32 1, i32 1
  store i8 %133, i8* %135, align 1, !alias.scope !65
  %136 = bitcast %"class.std::__1::basic_string"* %110 to i16*
  %137 = icmp eq i64 %109, 0
  br i1 %137, label %282, label %138

138:                                              ; preds = %132, %124
  %139 = phi i16* [ %127, %124 ], [ %136, %132 ]
  %140 = icmp ult i64 %109, 16
  br i1 %140, label %229, label %141

141:                                              ; preds = %138
  %142 = getelementptr i16, i16* %139, i64 %109
  %143 = getelementptr i16, i16* %107, i64 %109
  %144 = icmp ult i16* %139, %143
  %145 = icmp ult i16* %107, %142
  %146 = and i1 %144, %145
  br i1 %146, label %229, label %147

147:                                              ; preds = %141
  %148 = and i64 %109, -16
  %149 = sub i64 %109, %148
  %150 = getelementptr i16, i16* %107, i64 %148
  %151 = getelementptr i16, i16* %139, i64 %148
  %152 = add i64 %148, -16
  %153 = lshr exact i64 %152, 4
  %154 = add nuw nsw i64 %153, 1
  %155 = and i64 %154, 3
  %156 = icmp ult i64 %152, 48
  br i1 %156, label %208, label %157

157:                                              ; preds = %147
  %158 = sub nsw i64 %154, %155
  br label %159

159:                                              ; preds = %159, %157
  %160 = phi i64 [ 0, %157 ], [ %205, %159 ]
  %161 = phi i64 [ %158, %157 ], [ %206, %159 ]
  %162 = getelementptr i16, i16* %107, i64 %160
  %163 = getelementptr i16, i16* %139, i64 %160
  %164 = bitcast i16* %162 to <8 x i16>*
  %165 = load <8 x i16>, <8 x i16>* %164, align 2, !alias.scope !68
  %166 = getelementptr i16, i16* %162, i64 8
  %167 = bitcast i16* %166 to <8 x i16>*
  %168 = load <8 x i16>, <8 x i16>* %167, align 2, !alias.scope !68
  %169 = bitcast i16* %163 to <8 x i16>*
  store <8 x i16> %165, <8 x i16>* %169, align 2, !alias.scope !71, !noalias !68
  %170 = getelementptr i16, i16* %163, i64 8
  %171 = bitcast i16* %170 to <8 x i16>*
  store <8 x i16> %168, <8 x i16>* %171, align 2, !alias.scope !71, !noalias !68
  %172 = or i64 %160, 16
  %173 = getelementptr i16, i16* %107, i64 %172
  %174 = getelementptr i16, i16* %139, i64 %172
  %175 = bitcast i16* %173 to <8 x i16>*
  %176 = load <8 x i16>, <8 x i16>* %175, align 2, !alias.scope !68
  %177 = getelementptr i16, i16* %173, i64 8
  %178 = bitcast i16* %177 to <8 x i16>*
  %179 = load <8 x i16>, <8 x i16>* %178, align 2, !alias.scope !68
  %180 = bitcast i16* %174 to <8 x i16>*
  store <8 x i16> %176, <8 x i16>* %180, align 2, !alias.scope !71, !noalias !68
  %181 = getelementptr i16, i16* %174, i64 8
  %182 = bitcast i16* %181 to <8 x i16>*
  store <8 x i16> %179, <8 x i16>* %182, align 2, !alias.scope !71, !noalias !68
  %183 = or i64 %160, 32
  %184 = getelementptr i16, i16* %107, i64 %183
  %185 = getelementptr i16, i16* %139, i64 %183
  %186 = bitcast i16* %184 to <8 x i16>*
  %187 = load <8 x i16>, <8 x i16>* %186, align 2, !alias.scope !68
  %188 = getelementptr i16, i16* %184, i64 8
  %189 = bitcast i16* %188 to <8 x i16>*
  %190 = load <8 x i16>, <8 x i16>* %189, align 2, !alias.scope !68
  %191 = bitcast i16* %185 to <8 x i16>*
  store <8 x i16> %187, <8 x i16>* %191, align 2, !alias.scope !71, !noalias !68
  %192 = getelementptr i16, i16* %185, i64 8
  %193 = bitcast i16* %192 to <8 x i16>*
  store <8 x i16> %190, <8 x i16>* %193, align 2, !alias.scope !71, !noalias !68
  %194 = or i64 %160, 48
  %195 = getelementptr i16, i16* %107, i64 %194
  %196 = getelementptr i16, i16* %139, i64 %194
  %197 = bitcast i16* %195 to <8 x i16>*
  %198 = load <8 x i16>, <8 x i16>* %197, align 2, !alias.scope !68
  %199 = getelementptr i16, i16* %195, i64 8
  %200 = bitcast i16* %199 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 2, !alias.scope !68
  %202 = bitcast i16* %196 to <8 x i16>*
  store <8 x i16> %198, <8 x i16>* %202, align 2, !alias.scope !71, !noalias !68
  %203 = getelementptr i16, i16* %196, i64 8
  %204 = bitcast i16* %203 to <8 x i16>*
  store <8 x i16> %201, <8 x i16>* %204, align 2, !alias.scope !71, !noalias !68
  %205 = add i64 %160, 64
  %206 = add i64 %161, -4
  %207 = icmp eq i64 %206, 0
  br i1 %207, label %208, label %159, !llvm.loop !73

208:                                              ; preds = %159, %147
  %209 = phi i64 [ 0, %147 ], [ %205, %159 ]
  %210 = icmp eq i64 %155, 0
  br i1 %210, label %227, label %211

211:                                              ; preds = %208, %211
  %212 = phi i64 [ %224, %211 ], [ %209, %208 ]
  %213 = phi i64 [ %225, %211 ], [ %155, %208 ]
  %214 = getelementptr i16, i16* %107, i64 %212
  %215 = getelementptr i16, i16* %139, i64 %212
  %216 = bitcast i16* %214 to <8 x i16>*
  %217 = load <8 x i16>, <8 x i16>* %216, align 2, !alias.scope !68
  %218 = getelementptr i16, i16* %214, i64 8
  %219 = bitcast i16* %218 to <8 x i16>*
  %220 = load <8 x i16>, <8 x i16>* %219, align 2, !alias.scope !68
  %221 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %217, <8 x i16>* %221, align 2, !alias.scope !71, !noalias !68
  %222 = getelementptr i16, i16* %215, i64 8
  %223 = bitcast i16* %222 to <8 x i16>*
  store <8 x i16> %220, <8 x i16>* %223, align 2, !alias.scope !71, !noalias !68
  %224 = add i64 %212, 16
  %225 = add i64 %213, -1
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %211, !llvm.loop !74

227:                                              ; preds = %211, %208
  %228 = icmp eq i64 %109, %148
  br i1 %228, label %282, label %229

229:                                              ; preds = %227, %141, %138
  %230 = phi i64 [ %109, %141 ], [ %109, %138 ], [ %149, %227 ]
  %231 = phi i16* [ %107, %141 ], [ %107, %138 ], [ %150, %227 ]
  %232 = phi i16* [ %139, %141 ], [ %139, %138 ], [ %151, %227 ]
  %233 = add i64 %230, -1
  %234 = and i64 %230, 7
  %235 = icmp eq i64 %234, 0
  br i1 %235, label %247, label %236

236:                                              ; preds = %229, %236
  %237 = phi i64 [ %242, %236 ], [ %230, %229 ]
  %238 = phi i16* [ %244, %236 ], [ %231, %229 ]
  %239 = phi i16* [ %243, %236 ], [ %232, %229 ]
  %240 = phi i64 [ %245, %236 ], [ %234, %229 ]
  %241 = load i16, i16* %238, align 2
  store i16 %241, i16* %239, align 2
  %242 = add i64 %237, -1
  %243 = getelementptr inbounds i16, i16* %239, i64 1
  %244 = getelementptr inbounds i16, i16* %238, i64 1
  %245 = add i64 %240, -1
  %246 = icmp eq i64 %245, 0
  br i1 %246, label %247, label %236, !llvm.loop !75

247:                                              ; preds = %236, %229
  %248 = phi i64 [ %230, %229 ], [ %242, %236 ]
  %249 = phi i16* [ %231, %229 ], [ %244, %236 ]
  %250 = phi i16* [ %232, %229 ], [ %243, %236 ]
  %251 = icmp ult i64 %233, 7
  br i1 %251, label %282, label %252

252:                                              ; preds = %247, %252
  %253 = phi i64 [ %278, %252 ], [ %248, %247 ]
  %254 = phi i16* [ %280, %252 ], [ %249, %247 ]
  %255 = phi i16* [ %279, %252 ], [ %250, %247 ]
  %256 = load i16, i16* %254, align 2
  store i16 %256, i16* %255, align 2
  %257 = getelementptr inbounds i16, i16* %255, i64 1
  %258 = getelementptr inbounds i16, i16* %254, i64 1
  %259 = load i16, i16* %258, align 2
  store i16 %259, i16* %257, align 2
  %260 = getelementptr inbounds i16, i16* %255, i64 2
  %261 = getelementptr inbounds i16, i16* %254, i64 2
  %262 = load i16, i16* %261, align 2
  store i16 %262, i16* %260, align 2
  %263 = getelementptr inbounds i16, i16* %255, i64 3
  %264 = getelementptr inbounds i16, i16* %254, i64 3
  %265 = load i16, i16* %264, align 2
  store i16 %265, i16* %263, align 2
  %266 = getelementptr inbounds i16, i16* %255, i64 4
  %267 = getelementptr inbounds i16, i16* %254, i64 4
  %268 = load i16, i16* %267, align 2
  store i16 %268, i16* %266, align 2
  %269 = getelementptr inbounds i16, i16* %255, i64 5
  %270 = getelementptr inbounds i16, i16* %254, i64 5
  %271 = load i16, i16* %270, align 2
  store i16 %271, i16* %269, align 2
  %272 = getelementptr inbounds i16, i16* %255, i64 6
  %273 = getelementptr inbounds i16, i16* %254, i64 6
  %274 = load i16, i16* %273, align 2
  store i16 %274, i16* %272, align 2
  %275 = getelementptr inbounds i16, i16* %255, i64 7
  %276 = getelementptr inbounds i16, i16* %254, i64 7
  %277 = load i16, i16* %276, align 2
  store i16 %277, i16* %275, align 2
  %278 = add i64 %253, -8
  %279 = getelementptr inbounds i16, i16* %255, i64 8
  %280 = getelementptr inbounds i16, i16* %254, i64 8
  %281 = icmp eq i64 %278, 0
  br i1 %281, label %282, label %252, !llvm.loop !76

282:                                              ; preds = %247, %252, %227, %132
  %283 = phi i16* [ %136, %132 ], [ %139, %227 ], [ %139, %252 ], [ %139, %247 ]
  %284 = getelementptr inbounds i16, i16* %283, i64 %109
  store i16 0, i16* %284, align 2
  %285 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %110, i64 1
  %286 = ptrtoint %"class.std::__1::basic_string"* %285 to i64
  %287 = bitcast %"class.std::__1::basic_string"** %18 to i64*
  store i64 %286, i64* %287, align 8
  br label %291

288:                                              ; preds = %102
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJN4base16BasicStringPieceIDsS3_EEEEEvDpOT_(%"class.std::__1::vector.63"* nonnull %4, %"class.base::BasicStringPiece.61"* nonnull dereferenceable(16) %15) #13
  %289 = bitcast %"class.std::__1::basic_string"** %18 to i64*
  %290 = load i64, i64* %289, align 8
  br label %291

291:                                              ; preds = %282, %288
  %292 = phi i64 [ %286, %282 ], [ %290, %288 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #13
  %293 = load i64, i64* %21, align 8
  %294 = sub i64 %292, %293
  %295 = sdiv exact i64 %294, 24
  %296 = inttoptr i64 %293 to %"class.std::__1::basic_string"*
  call void @_ZN4base10JoinStringENS_4spanIKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEELm18446744073709551615EEENS_16BasicStringPieceIDsS4_EE(%"class.std::__1::basic_string"* sret %0, i64 %295, %"class.std::__1::basic_string"* %296, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @.str.11, i64 0, i64 0), i64 0) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #13
  %297 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %17, align 8
  %298 = icmp eq %"class.std::__1::basic_string"* %297, null
  br i1 %298, label %320, label %299

299:                                              ; preds = %291
  %300 = bitcast %"class.std::__1::basic_string"* %297 to i8*
  %301 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %302 = icmp eq %"class.std::__1::basic_string"* %301, %297
  br i1 %302, label %318, label %303

303:                                              ; preds = %299, %313
  %304 = phi %"class.std::__1::basic_string"* [ %305, %313 ], [ %301, %299 ]
  %305 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %304, i64 -1
  %306 = bitcast %"class.std::__1::basic_string"* %305 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %307 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %306, i64 0, i32 1, i32 1
  %308 = load i8, i8* %307, align 1
  %309 = icmp slt i8 %308, 0
  br i1 %309, label %310, label %313

310:                                              ; preds = %303
  %311 = bitcast %"class.std::__1::basic_string"* %305 to i8**
  %312 = load i8*, i8** %311, align 8
  call void @_ZdlPv(i8* %312) #15
  br label %313

313:                                              ; preds = %310, %303
  %314 = icmp eq %"class.std::__1::basic_string"* %305, %297
  br i1 %314, label %315, label %303

315:                                              ; preds = %313
  %316 = bitcast %"class.std::__1::vector.63"* %4 to i8**
  %317 = load i8*, i8** %316, align 8
  br label %318

318:                                              ; preds = %315, %299
  %319 = phi i8* [ %317, %315 ], [ %300, %299 ]
  store %"class.std::__1::basic_string"* %297, %"class.std::__1::basic_string"** %18, align 8
  call void @_ZdlPv(i8* %319) #15
  br label %320

320:                                              ; preds = %318, %291
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #13
  ret void

321:                                              ; preds = %43, %1566
  %322 = phi i8 [ 0, %43 ], [ %1569, %1566 ]
  %323 = phi i64 [ 0, %43 ], [ %1570, %1566 ]
  %324 = phi i64 [ 0, %43 ], [ %1567, %1566 ]
  %325 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %323) #13
  %326 = load i16, i16* %325, align 2
  %327 = icmp eq i16 %326, 36
  br i1 %327, label %328, label %523

328:                                              ; preds = %321
  %329 = load i64, i64* %29, align 8
  %330 = add i64 %329, -1
  %331 = icmp ult i64 %323, %330
  br i1 %331, label %332, label %523

332:                                              ; preds = %328
  %333 = add nuw i64 %323, 1
  %334 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %333) #13
  %335 = load i16, i16* %334, align 2
  %336 = icmp eq i16 %335, 123
  br i1 %336, label %337, label %523

337:                                              ; preds = %332
  %338 = icmp eq i64 %323, 0
  br i1 %338, label %1566, label %339

339:                                              ; preds = %337
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %93) #13
  %340 = sub i64 %323, %324
  %341 = call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %324, i64 %340)
  %342 = extractvalue { i16*, i64 } %341, 0
  store i16* %342, i16** %94, align 8
  %343 = extractvalue { i16*, i64 } %341, 1
  store i64 %343, i64* %95, align 8
  %344 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %345 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %346 = icmp ult %"class.std::__1::basic_string"* %344, %345
  br i1 %346, label %347, label %521

347:                                              ; preds = %339
  %348 = icmp ugt i64 %343, 9223372036854775791
  br i1 %348, label %349, label %351

349:                                              ; preds = %347
  %350 = bitcast %"class.std::__1::basic_string"* %344 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %350) #14
  unreachable

351:                                              ; preds = %347
  %352 = icmp ult i64 %343, 11
  br i1 %352, label %366, label %353

353:                                              ; preds = %351
  %354 = add nuw nsw i64 %343, 8
  %355 = and i64 %354, -8
  %356 = icmp slt i64 %355, 0
  br i1 %356, label %357, label %358

357:                                              ; preds = %353
  call void @abort() #14
  unreachable

358:                                              ; preds = %353
  %359 = shl i64 %355, 1
  %360 = call i8* @_Znwm(i64 %359) #15
  %361 = bitcast i8* %360 to i16*
  %362 = bitcast %"class.std::__1::basic_string"* %344 to i8**
  store i8* %360, i8** %362, align 8, !alias.scope !77
  %363 = or i64 %355, -9223372036854775808
  %364 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %344, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %363, i64* %364, align 8, !alias.scope !77
  %365 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %344, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %343, i64* %365, align 8, !alias.scope !77
  br label %372

366:                                              ; preds = %351
  %367 = trunc i64 %343 to i8
  %368 = bitcast %"class.std::__1::basic_string"* %344 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %369 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %368, i64 0, i32 1, i32 1
  store i8 %367, i8* %369, align 1, !alias.scope !77
  %370 = bitcast %"class.std::__1::basic_string"* %344 to i16*
  %371 = icmp eq i64 %343, 0
  br i1 %371, label %516, label %372

372:                                              ; preds = %366, %358
  %373 = phi i16* [ %361, %358 ], [ %370, %366 ]
  %374 = icmp ult i64 %343, 16
  br i1 %374, label %463, label %375

375:                                              ; preds = %372
  %376 = getelementptr i16, i16* %373, i64 %343
  %377 = getelementptr i16, i16* %342, i64 %343
  %378 = icmp ult i16* %373, %377
  %379 = icmp ult i16* %342, %376
  %380 = and i1 %378, %379
  br i1 %380, label %463, label %381

381:                                              ; preds = %375
  %382 = and i64 %343, -16
  %383 = sub i64 %343, %382
  %384 = getelementptr i16, i16* %342, i64 %382
  %385 = getelementptr i16, i16* %373, i64 %382
  %386 = add i64 %382, -16
  %387 = lshr exact i64 %386, 4
  %388 = add nuw nsw i64 %387, 1
  %389 = and i64 %388, 3
  %390 = icmp ult i64 %386, 48
  br i1 %390, label %442, label %391

391:                                              ; preds = %381
  %392 = sub nsw i64 %388, %389
  br label %393

393:                                              ; preds = %393, %391
  %394 = phi i64 [ 0, %391 ], [ %439, %393 ]
  %395 = phi i64 [ %392, %391 ], [ %440, %393 ]
  %396 = getelementptr i16, i16* %342, i64 %394
  %397 = getelementptr i16, i16* %373, i64 %394
  %398 = bitcast i16* %396 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !80
  %400 = getelementptr i16, i16* %396, i64 8
  %401 = bitcast i16* %400 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 2, !alias.scope !80
  %403 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %403, align 2, !alias.scope !83, !noalias !80
  %404 = getelementptr i16, i16* %397, i64 8
  %405 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %402, <8 x i16>* %405, align 2, !alias.scope !83, !noalias !80
  %406 = or i64 %394, 16
  %407 = getelementptr i16, i16* %342, i64 %406
  %408 = getelementptr i16, i16* %373, i64 %406
  %409 = bitcast i16* %407 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !80
  %411 = getelementptr i16, i16* %407, i64 8
  %412 = bitcast i16* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 2, !alias.scope !80
  %414 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %414, align 2, !alias.scope !83, !noalias !80
  %415 = getelementptr i16, i16* %408, i64 8
  %416 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %413, <8 x i16>* %416, align 2, !alias.scope !83, !noalias !80
  %417 = or i64 %394, 32
  %418 = getelementptr i16, i16* %342, i64 %417
  %419 = getelementptr i16, i16* %373, i64 %417
  %420 = bitcast i16* %418 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !80
  %422 = getelementptr i16, i16* %418, i64 8
  %423 = bitcast i16* %422 to <8 x i16>*
  %424 = load <8 x i16>, <8 x i16>* %423, align 2, !alias.scope !80
  %425 = bitcast i16* %419 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %425, align 2, !alias.scope !83, !noalias !80
  %426 = getelementptr i16, i16* %419, i64 8
  %427 = bitcast i16* %426 to <8 x i16>*
  store <8 x i16> %424, <8 x i16>* %427, align 2, !alias.scope !83, !noalias !80
  %428 = or i64 %394, 48
  %429 = getelementptr i16, i16* %342, i64 %428
  %430 = getelementptr i16, i16* %373, i64 %428
  %431 = bitcast i16* %429 to <8 x i16>*
  %432 = load <8 x i16>, <8 x i16>* %431, align 2, !alias.scope !80
  %433 = getelementptr i16, i16* %429, i64 8
  %434 = bitcast i16* %433 to <8 x i16>*
  %435 = load <8 x i16>, <8 x i16>* %434, align 2, !alias.scope !80
  %436 = bitcast i16* %430 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %436, align 2, !alias.scope !83, !noalias !80
  %437 = getelementptr i16, i16* %430, i64 8
  %438 = bitcast i16* %437 to <8 x i16>*
  store <8 x i16> %435, <8 x i16>* %438, align 2, !alias.scope !83, !noalias !80
  %439 = add i64 %394, 64
  %440 = add i64 %395, -4
  %441 = icmp eq i64 %440, 0
  br i1 %441, label %442, label %393, !llvm.loop !85

442:                                              ; preds = %393, %381
  %443 = phi i64 [ 0, %381 ], [ %439, %393 ]
  %444 = icmp eq i64 %389, 0
  br i1 %444, label %461, label %445

445:                                              ; preds = %442, %445
  %446 = phi i64 [ %458, %445 ], [ %443, %442 ]
  %447 = phi i64 [ %459, %445 ], [ %389, %442 ]
  %448 = getelementptr i16, i16* %342, i64 %446
  %449 = getelementptr i16, i16* %373, i64 %446
  %450 = bitcast i16* %448 to <8 x i16>*
  %451 = load <8 x i16>, <8 x i16>* %450, align 2, !alias.scope !80
  %452 = getelementptr i16, i16* %448, i64 8
  %453 = bitcast i16* %452 to <8 x i16>*
  %454 = load <8 x i16>, <8 x i16>* %453, align 2, !alias.scope !80
  %455 = bitcast i16* %449 to <8 x i16>*
  store <8 x i16> %451, <8 x i16>* %455, align 2, !alias.scope !83, !noalias !80
  %456 = getelementptr i16, i16* %449, i64 8
  %457 = bitcast i16* %456 to <8 x i16>*
  store <8 x i16> %454, <8 x i16>* %457, align 2, !alias.scope !83, !noalias !80
  %458 = add i64 %446, 16
  %459 = add i64 %447, -1
  %460 = icmp eq i64 %459, 0
  br i1 %460, label %461, label %445, !llvm.loop !86

461:                                              ; preds = %445, %442
  %462 = icmp eq i64 %343, %382
  br i1 %462, label %516, label %463

463:                                              ; preds = %461, %375, %372
  %464 = phi i64 [ %343, %375 ], [ %343, %372 ], [ %383, %461 ]
  %465 = phi i16* [ %342, %375 ], [ %342, %372 ], [ %384, %461 ]
  %466 = phi i16* [ %373, %375 ], [ %373, %372 ], [ %385, %461 ]
  %467 = add i64 %464, -1
  %468 = and i64 %464, 7
  %469 = icmp eq i64 %468, 0
  br i1 %469, label %481, label %470

470:                                              ; preds = %463, %470
  %471 = phi i64 [ %476, %470 ], [ %464, %463 ]
  %472 = phi i16* [ %478, %470 ], [ %465, %463 ]
  %473 = phi i16* [ %477, %470 ], [ %466, %463 ]
  %474 = phi i64 [ %479, %470 ], [ %468, %463 ]
  %475 = load i16, i16* %472, align 2
  store i16 %475, i16* %473, align 2
  %476 = add i64 %471, -1
  %477 = getelementptr inbounds i16, i16* %473, i64 1
  %478 = getelementptr inbounds i16, i16* %472, i64 1
  %479 = add i64 %474, -1
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %481, label %470, !llvm.loop !87

481:                                              ; preds = %470, %463
  %482 = phi i64 [ %464, %463 ], [ %476, %470 ]
  %483 = phi i16* [ %465, %463 ], [ %478, %470 ]
  %484 = phi i16* [ %466, %463 ], [ %477, %470 ]
  %485 = icmp ult i64 %467, 7
  br i1 %485, label %516, label %486

486:                                              ; preds = %481, %486
  %487 = phi i64 [ %512, %486 ], [ %482, %481 ]
  %488 = phi i16* [ %514, %486 ], [ %483, %481 ]
  %489 = phi i16* [ %513, %486 ], [ %484, %481 ]
  %490 = load i16, i16* %488, align 2
  store i16 %490, i16* %489, align 2
  %491 = getelementptr inbounds i16, i16* %489, i64 1
  %492 = getelementptr inbounds i16, i16* %488, i64 1
  %493 = load i16, i16* %492, align 2
  store i16 %493, i16* %491, align 2
  %494 = getelementptr inbounds i16, i16* %489, i64 2
  %495 = getelementptr inbounds i16, i16* %488, i64 2
  %496 = load i16, i16* %495, align 2
  store i16 %496, i16* %494, align 2
  %497 = getelementptr inbounds i16, i16* %489, i64 3
  %498 = getelementptr inbounds i16, i16* %488, i64 3
  %499 = load i16, i16* %498, align 2
  store i16 %499, i16* %497, align 2
  %500 = getelementptr inbounds i16, i16* %489, i64 4
  %501 = getelementptr inbounds i16, i16* %488, i64 4
  %502 = load i16, i16* %501, align 2
  store i16 %502, i16* %500, align 2
  %503 = getelementptr inbounds i16, i16* %489, i64 5
  %504 = getelementptr inbounds i16, i16* %488, i64 5
  %505 = load i16, i16* %504, align 2
  store i16 %505, i16* %503, align 2
  %506 = getelementptr inbounds i16, i16* %489, i64 6
  %507 = getelementptr inbounds i16, i16* %488, i64 6
  %508 = load i16, i16* %507, align 2
  store i16 %508, i16* %506, align 2
  %509 = getelementptr inbounds i16, i16* %489, i64 7
  %510 = getelementptr inbounds i16, i16* %488, i64 7
  %511 = load i16, i16* %510, align 2
  store i16 %511, i16* %509, align 2
  %512 = add i64 %487, -8
  %513 = getelementptr inbounds i16, i16* %489, i64 8
  %514 = getelementptr inbounds i16, i16* %488, i64 8
  %515 = icmp eq i64 %512, 0
  br i1 %515, label %516, label %486, !llvm.loop !88

516:                                              ; preds = %481, %486, %461, %366
  %517 = phi i16* [ %370, %366 ], [ %373, %461 ], [ %373, %486 ], [ %373, %481 ]
  %518 = getelementptr inbounds i16, i16* %517, i64 %343
  store i16 0, i16* %518, align 2
  %519 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %344, i64 1
  %520 = ptrtoint %"class.std::__1::basic_string"* %519 to i64
  store i64 %520, i64* %88, align 8
  br label %522

521:                                              ; preds = %339
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJN4base16BasicStringPieceIDsS3_EEEEEvDpOT_(%"class.std::__1::vector.63"* nonnull %4, %"class.base::BasicStringPiece.61"* nonnull dereferenceable(16) %6) #13
  br label %522

522:                                              ; preds = %516, %521
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %93) #13
  br label %1566

523:                                              ; preds = %332, %328, %321
  %524 = and i8 %322, 1
  %525 = icmp eq i8 %524, 0
  br i1 %525, label %1566, label %526

526:                                              ; preds = %523
  %527 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %323) #13
  %528 = load i16, i16* %527, align 2
  %529 = icmp eq i16 %528, 125
  br i1 %529, label %530, label %1566

530:                                              ; preds = %526
  %531 = add i64 %324, 2
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #13
  %532 = sub i64 %323, %531
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %96, i8 -86, i64 24, i1 false)
  %533 = call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %531, i64 %532)
  %534 = extractvalue { i16*, i64 } %533, 0
  %535 = extractvalue { i16*, i64 } %533, 1
  %536 = icmp ugt i64 %535, 9223372036854775791
  br i1 %536, label %537, label %539

537:                                              ; preds = %530
  %538 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %538) #14
  unreachable

539:                                              ; preds = %530
  %540 = icmp ult i64 %535, 11
  br i1 %540, label %551, label %541

541:                                              ; preds = %539
  %542 = add nuw nsw i64 %535, 8
  %543 = and i64 %542, -8
  %544 = icmp slt i64 %543, 0
  br i1 %544, label %545, label %546

545:                                              ; preds = %541
  call void @abort() #14
  unreachable

546:                                              ; preds = %541
  %547 = shl i64 %543, 1
  %548 = call i8* @_Znwm(i64 %547) #15
  %549 = bitcast i8* %548 to i16*
  store i8* %548, i8** %48, align 8, !alias.scope !89
  %550 = or i64 %543, -9223372036854775808
  store i64 %550, i64* %47, align 8, !alias.scope !89
  store i64 %535, i64* %46, align 8, !alias.scope !89
  br label %554

551:                                              ; preds = %539
  %552 = trunc i64 %535 to i8
  store i8 %552, i8* %50, align 1, !alias.scope !89
  %553 = icmp eq i64 %535, 0
  br i1 %553, label %698, label %554

554:                                              ; preds = %551, %546
  %555 = phi i16* [ %549, %546 ], [ %51, %551 ]
  %556 = icmp ult i64 %535, 16
  br i1 %556, label %645, label %557

557:                                              ; preds = %554
  %558 = getelementptr i16, i16* %555, i64 %535
  %559 = getelementptr i16, i16* %534, i64 %535
  %560 = icmp ult i16* %555, %559
  %561 = icmp ult i16* %534, %558
  %562 = and i1 %560, %561
  br i1 %562, label %645, label %563

563:                                              ; preds = %557
  %564 = and i64 %535, -16
  %565 = sub i64 %535, %564
  %566 = getelementptr i16, i16* %534, i64 %564
  %567 = getelementptr i16, i16* %555, i64 %564
  %568 = add i64 %564, -16
  %569 = lshr exact i64 %568, 4
  %570 = add nuw nsw i64 %569, 1
  %571 = and i64 %570, 3
  %572 = icmp ult i64 %568, 48
  br i1 %572, label %624, label %573

573:                                              ; preds = %563
  %574 = sub nsw i64 %570, %571
  br label %575

575:                                              ; preds = %575, %573
  %576 = phi i64 [ 0, %573 ], [ %621, %575 ]
  %577 = phi i64 [ %574, %573 ], [ %622, %575 ]
  %578 = getelementptr i16, i16* %534, i64 %576
  %579 = getelementptr i16, i16* %555, i64 %576
  %580 = bitcast i16* %578 to <8 x i16>*
  %581 = load <8 x i16>, <8 x i16>* %580, align 2, !alias.scope !92
  %582 = getelementptr i16, i16* %578, i64 8
  %583 = bitcast i16* %582 to <8 x i16>*
  %584 = load <8 x i16>, <8 x i16>* %583, align 2, !alias.scope !92
  %585 = bitcast i16* %579 to <8 x i16>*
  store <8 x i16> %581, <8 x i16>* %585, align 2, !alias.scope !95, !noalias !92
  %586 = getelementptr i16, i16* %579, i64 8
  %587 = bitcast i16* %586 to <8 x i16>*
  store <8 x i16> %584, <8 x i16>* %587, align 2, !alias.scope !95, !noalias !92
  %588 = or i64 %576, 16
  %589 = getelementptr i16, i16* %534, i64 %588
  %590 = getelementptr i16, i16* %555, i64 %588
  %591 = bitcast i16* %589 to <8 x i16>*
  %592 = load <8 x i16>, <8 x i16>* %591, align 2, !alias.scope !92
  %593 = getelementptr i16, i16* %589, i64 8
  %594 = bitcast i16* %593 to <8 x i16>*
  %595 = load <8 x i16>, <8 x i16>* %594, align 2, !alias.scope !92
  %596 = bitcast i16* %590 to <8 x i16>*
  store <8 x i16> %592, <8 x i16>* %596, align 2, !alias.scope !95, !noalias !92
  %597 = getelementptr i16, i16* %590, i64 8
  %598 = bitcast i16* %597 to <8 x i16>*
  store <8 x i16> %595, <8 x i16>* %598, align 2, !alias.scope !95, !noalias !92
  %599 = or i64 %576, 32
  %600 = getelementptr i16, i16* %534, i64 %599
  %601 = getelementptr i16, i16* %555, i64 %599
  %602 = bitcast i16* %600 to <8 x i16>*
  %603 = load <8 x i16>, <8 x i16>* %602, align 2, !alias.scope !92
  %604 = getelementptr i16, i16* %600, i64 8
  %605 = bitcast i16* %604 to <8 x i16>*
  %606 = load <8 x i16>, <8 x i16>* %605, align 2, !alias.scope !92
  %607 = bitcast i16* %601 to <8 x i16>*
  store <8 x i16> %603, <8 x i16>* %607, align 2, !alias.scope !95, !noalias !92
  %608 = getelementptr i16, i16* %601, i64 8
  %609 = bitcast i16* %608 to <8 x i16>*
  store <8 x i16> %606, <8 x i16>* %609, align 2, !alias.scope !95, !noalias !92
  %610 = or i64 %576, 48
  %611 = getelementptr i16, i16* %534, i64 %610
  %612 = getelementptr i16, i16* %555, i64 %610
  %613 = bitcast i16* %611 to <8 x i16>*
  %614 = load <8 x i16>, <8 x i16>* %613, align 2, !alias.scope !92
  %615 = getelementptr i16, i16* %611, i64 8
  %616 = bitcast i16* %615 to <8 x i16>*
  %617 = load <8 x i16>, <8 x i16>* %616, align 2, !alias.scope !92
  %618 = bitcast i16* %612 to <8 x i16>*
  store <8 x i16> %614, <8 x i16>* %618, align 2, !alias.scope !95, !noalias !92
  %619 = getelementptr i16, i16* %612, i64 8
  %620 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> %617, <8 x i16>* %620, align 2, !alias.scope !95, !noalias !92
  %621 = add i64 %576, 64
  %622 = add i64 %577, -4
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %575, !llvm.loop !97

624:                                              ; preds = %575, %563
  %625 = phi i64 [ 0, %563 ], [ %621, %575 ]
  %626 = icmp eq i64 %571, 0
  br i1 %626, label %643, label %627

627:                                              ; preds = %624, %627
  %628 = phi i64 [ %640, %627 ], [ %625, %624 ]
  %629 = phi i64 [ %641, %627 ], [ %571, %624 ]
  %630 = getelementptr i16, i16* %534, i64 %628
  %631 = getelementptr i16, i16* %555, i64 %628
  %632 = bitcast i16* %630 to <8 x i16>*
  %633 = load <8 x i16>, <8 x i16>* %632, align 2, !alias.scope !92
  %634 = getelementptr i16, i16* %630, i64 8
  %635 = bitcast i16* %634 to <8 x i16>*
  %636 = load <8 x i16>, <8 x i16>* %635, align 2, !alias.scope !92
  %637 = bitcast i16* %631 to <8 x i16>*
  store <8 x i16> %633, <8 x i16>* %637, align 2, !alias.scope !95, !noalias !92
  %638 = getelementptr i16, i16* %631, i64 8
  %639 = bitcast i16* %638 to <8 x i16>*
  store <8 x i16> %636, <8 x i16>* %639, align 2, !alias.scope !95, !noalias !92
  %640 = add i64 %628, 16
  %641 = add i64 %629, -1
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %643, label %627, !llvm.loop !98

643:                                              ; preds = %627, %624
  %644 = icmp eq i64 %535, %564
  br i1 %644, label %698, label %645

645:                                              ; preds = %643, %557, %554
  %646 = phi i64 [ %535, %557 ], [ %535, %554 ], [ %565, %643 ]
  %647 = phi i16* [ %534, %557 ], [ %534, %554 ], [ %566, %643 ]
  %648 = phi i16* [ %555, %557 ], [ %555, %554 ], [ %567, %643 ]
  %649 = add i64 %646, -1
  %650 = and i64 %646, 7
  %651 = icmp eq i64 %650, 0
  br i1 %651, label %663, label %652

652:                                              ; preds = %645, %652
  %653 = phi i64 [ %658, %652 ], [ %646, %645 ]
  %654 = phi i16* [ %660, %652 ], [ %647, %645 ]
  %655 = phi i16* [ %659, %652 ], [ %648, %645 ]
  %656 = phi i64 [ %661, %652 ], [ %650, %645 ]
  %657 = load i16, i16* %654, align 2
  store i16 %657, i16* %655, align 2
  %658 = add i64 %653, -1
  %659 = getelementptr inbounds i16, i16* %655, i64 1
  %660 = getelementptr inbounds i16, i16* %654, i64 1
  %661 = add i64 %656, -1
  %662 = icmp eq i64 %661, 0
  br i1 %662, label %663, label %652, !llvm.loop !99

663:                                              ; preds = %652, %645
  %664 = phi i64 [ %646, %645 ], [ %658, %652 ]
  %665 = phi i16* [ %647, %645 ], [ %660, %652 ]
  %666 = phi i16* [ %648, %645 ], [ %659, %652 ]
  %667 = icmp ult i64 %649, 7
  br i1 %667, label %698, label %668

668:                                              ; preds = %663, %668
  %669 = phi i64 [ %694, %668 ], [ %664, %663 ]
  %670 = phi i16* [ %696, %668 ], [ %665, %663 ]
  %671 = phi i16* [ %695, %668 ], [ %666, %663 ]
  %672 = load i16, i16* %670, align 2
  store i16 %672, i16* %671, align 2
  %673 = getelementptr inbounds i16, i16* %671, i64 1
  %674 = getelementptr inbounds i16, i16* %670, i64 1
  %675 = load i16, i16* %674, align 2
  store i16 %675, i16* %673, align 2
  %676 = getelementptr inbounds i16, i16* %671, i64 2
  %677 = getelementptr inbounds i16, i16* %670, i64 2
  %678 = load i16, i16* %677, align 2
  store i16 %678, i16* %676, align 2
  %679 = getelementptr inbounds i16, i16* %671, i64 3
  %680 = getelementptr inbounds i16, i16* %670, i64 3
  %681 = load i16, i16* %680, align 2
  store i16 %681, i16* %679, align 2
  %682 = getelementptr inbounds i16, i16* %671, i64 4
  %683 = getelementptr inbounds i16, i16* %670, i64 4
  %684 = load i16, i16* %683, align 2
  store i16 %684, i16* %682, align 2
  %685 = getelementptr inbounds i16, i16* %671, i64 5
  %686 = getelementptr inbounds i16, i16* %670, i64 5
  %687 = load i16, i16* %686, align 2
  store i16 %687, i16* %685, align 2
  %688 = getelementptr inbounds i16, i16* %671, i64 6
  %689 = getelementptr inbounds i16, i16* %670, i64 6
  %690 = load i16, i16* %689, align 2
  store i16 %690, i16* %688, align 2
  %691 = getelementptr inbounds i16, i16* %671, i64 7
  %692 = getelementptr inbounds i16, i16* %670, i64 7
  %693 = load i16, i16* %692, align 2
  store i16 %693, i16* %691, align 2
  %694 = add i64 %669, -8
  %695 = getelementptr inbounds i16, i16* %671, i64 8
  %696 = getelementptr inbounds i16, i16* %670, i64 8
  %697 = icmp eq i64 %694, 0
  br i1 %697, label %698, label %668, !llvm.loop !100

698:                                              ; preds = %663, %668, %643, %551
  %699 = phi i16* [ %51, %551 ], [ %555, %643 ], [ %555, %668 ], [ %555, %663 ]
  %700 = getelementptr inbounds i16, i16* %699, i64 %535
  store i16 0, i16* %700, align 2
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %97, i8 -86, i64 24, i1 false)
  %701 = load i8, i8* %50, align 1
  %702 = load i16*, i16** %45, align 8
  %703 = load i64, i64* %46, align 8
  %704 = zext i8 %701 to i64
  %705 = icmp slt i8 %701, 0
  %706 = select i1 %705, i16* %702, i16* %51
  %707 = select i1 %705, i64 %703, i64 %704
  call void @_ZN4base11SplitStringENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.63"* nonnull sret %8, i16* %706, i64 %707, i16* getelementptr inbounds ([2 x i16], [2 x i16]* @.str.10, i64 0, i64 0), i64 1, i32 0, i32 0) #13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -86, i64 24, i1 false)
  %708 = load i64, i64* %59, align 8
  %709 = load i64, i64* %60, align 8
  %710 = icmp eq i64 %708, %709
  br i1 %710, label %711, label %713

711:                                              ; preds = %698
  %712 = bitcast %"class.std::__1::vector.63"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %712) #14
  unreachable

713:                                              ; preds = %698
  %714 = inttoptr i64 %709 to %"class.std::__1::basic_string"*
  %715 = inttoptr i64 %709 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %716 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %715, i64 0, i32 1, i32 1
  %717 = load i8, i8* %716, align 1
  %718 = icmp slt i8 %717, 0
  br i1 %718, label %721, label %719

719:                                              ; preds = %713
  %720 = inttoptr i64 %709 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %55, i8* align 8 %720, i64 24, i1 false) #13
  br label %894

721:                                              ; preds = %713
  %722 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %714, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %723 = load i16*, i16** %722, align 8
  %724 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %714, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %725 = load i64, i64* %724, align 8
  %726 = icmp ult i64 %725, 11
  br i1 %726, label %727, label %729

727:                                              ; preds = %721
  %728 = trunc i64 %725 to i8
  store i8 %728, i8* %64, align 1
  br label %743

729:                                              ; preds = %721
  %730 = icmp ugt i64 %725, 9223372036854775791
  br i1 %730, label %731, label %733

731:                                              ; preds = %729
  %732 = bitcast %"class.std::__1::basic_string"* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %732) #14
  unreachable

733:                                              ; preds = %729
  %734 = add nuw nsw i64 %725, 8
  %735 = and i64 %734, -8
  %736 = icmp slt i64 %735, 0
  br i1 %736, label %737, label %738

737:                                              ; preds = %733
  call void @abort() #14
  unreachable

738:                                              ; preds = %733
  %739 = shl i64 %735, 1
  %740 = call i8* @_Znwm(i64 %739) #15
  %741 = bitcast i8* %740 to i16*
  store i8* %740, i8** %61, align 8
  %742 = or i64 %735, -9223372036854775808
  store i64 %742, i64* %58, align 8
  store i64 %725, i64* %57, align 8
  br label %743

743:                                              ; preds = %738, %727
  %744 = phi i16* [ %62, %727 ], [ %741, %738 ]
  %745 = add nuw nsw i64 %725, 1
  %746 = add i64 %725, 1
  %747 = icmp ult i64 %746, 16
  br i1 %747, label %838, label %748

748:                                              ; preds = %743
  %749 = getelementptr i16, i16* %744, i64 1
  %750 = getelementptr i16, i16* %749, i64 %725
  %751 = getelementptr i16, i16* %723, i64 1
  %752 = getelementptr i16, i16* %751, i64 %725
  %753 = icmp ult i16* %744, %752
  %754 = icmp ult i16* %723, %750
  %755 = and i1 %753, %754
  br i1 %755, label %838, label %756

756:                                              ; preds = %748
  %757 = and i64 %746, -16
  %758 = sub i64 %745, %757
  %759 = getelementptr i16, i16* %723, i64 %757
  %760 = getelementptr i16, i16* %744, i64 %757
  %761 = add i64 %757, -16
  %762 = lshr exact i64 %761, 4
  %763 = add nuw nsw i64 %762, 1
  %764 = and i64 %763, 3
  %765 = icmp ult i64 %761, 48
  br i1 %765, label %817, label %766

766:                                              ; preds = %756
  %767 = sub nsw i64 %763, %764
  br label %768

768:                                              ; preds = %768, %766
  %769 = phi i64 [ 0, %766 ], [ %814, %768 ]
  %770 = phi i64 [ %767, %766 ], [ %815, %768 ]
  %771 = getelementptr i16, i16* %723, i64 %769
  %772 = getelementptr i16, i16* %744, i64 %769
  %773 = bitcast i16* %771 to <8 x i16>*
  %774 = load <8 x i16>, <8 x i16>* %773, align 2, !alias.scope !101
  %775 = getelementptr i16, i16* %771, i64 8
  %776 = bitcast i16* %775 to <8 x i16>*
  %777 = load <8 x i16>, <8 x i16>* %776, align 2, !alias.scope !101
  %778 = bitcast i16* %772 to <8 x i16>*
  store <8 x i16> %774, <8 x i16>* %778, align 2, !alias.scope !104, !noalias !101
  %779 = getelementptr i16, i16* %772, i64 8
  %780 = bitcast i16* %779 to <8 x i16>*
  store <8 x i16> %777, <8 x i16>* %780, align 2, !alias.scope !104, !noalias !101
  %781 = or i64 %769, 16
  %782 = getelementptr i16, i16* %723, i64 %781
  %783 = getelementptr i16, i16* %744, i64 %781
  %784 = bitcast i16* %782 to <8 x i16>*
  %785 = load <8 x i16>, <8 x i16>* %784, align 2, !alias.scope !101
  %786 = getelementptr i16, i16* %782, i64 8
  %787 = bitcast i16* %786 to <8 x i16>*
  %788 = load <8 x i16>, <8 x i16>* %787, align 2, !alias.scope !101
  %789 = bitcast i16* %783 to <8 x i16>*
  store <8 x i16> %785, <8 x i16>* %789, align 2, !alias.scope !104, !noalias !101
  %790 = getelementptr i16, i16* %783, i64 8
  %791 = bitcast i16* %790 to <8 x i16>*
  store <8 x i16> %788, <8 x i16>* %791, align 2, !alias.scope !104, !noalias !101
  %792 = or i64 %769, 32
  %793 = getelementptr i16, i16* %723, i64 %792
  %794 = getelementptr i16, i16* %744, i64 %792
  %795 = bitcast i16* %793 to <8 x i16>*
  %796 = load <8 x i16>, <8 x i16>* %795, align 2, !alias.scope !101
  %797 = getelementptr i16, i16* %793, i64 8
  %798 = bitcast i16* %797 to <8 x i16>*
  %799 = load <8 x i16>, <8 x i16>* %798, align 2, !alias.scope !101
  %800 = bitcast i16* %794 to <8 x i16>*
  store <8 x i16> %796, <8 x i16>* %800, align 2, !alias.scope !104, !noalias !101
  %801 = getelementptr i16, i16* %794, i64 8
  %802 = bitcast i16* %801 to <8 x i16>*
  store <8 x i16> %799, <8 x i16>* %802, align 2, !alias.scope !104, !noalias !101
  %803 = or i64 %769, 48
  %804 = getelementptr i16, i16* %723, i64 %803
  %805 = getelementptr i16, i16* %744, i64 %803
  %806 = bitcast i16* %804 to <8 x i16>*
  %807 = load <8 x i16>, <8 x i16>* %806, align 2, !alias.scope !101
  %808 = getelementptr i16, i16* %804, i64 8
  %809 = bitcast i16* %808 to <8 x i16>*
  %810 = load <8 x i16>, <8 x i16>* %809, align 2, !alias.scope !101
  %811 = bitcast i16* %805 to <8 x i16>*
  store <8 x i16> %807, <8 x i16>* %811, align 2, !alias.scope !104, !noalias !101
  %812 = getelementptr i16, i16* %805, i64 8
  %813 = bitcast i16* %812 to <8 x i16>*
  store <8 x i16> %810, <8 x i16>* %813, align 2, !alias.scope !104, !noalias !101
  %814 = add i64 %769, 64
  %815 = add i64 %770, -4
  %816 = icmp eq i64 %815, 0
  br i1 %816, label %817, label %768, !llvm.loop !106

817:                                              ; preds = %768, %756
  %818 = phi i64 [ 0, %756 ], [ %814, %768 ]
  %819 = icmp eq i64 %764, 0
  br i1 %819, label %836, label %820

820:                                              ; preds = %817, %820
  %821 = phi i64 [ %833, %820 ], [ %818, %817 ]
  %822 = phi i64 [ %834, %820 ], [ %764, %817 ]
  %823 = getelementptr i16, i16* %723, i64 %821
  %824 = getelementptr i16, i16* %744, i64 %821
  %825 = bitcast i16* %823 to <8 x i16>*
  %826 = load <8 x i16>, <8 x i16>* %825, align 2, !alias.scope !101
  %827 = getelementptr i16, i16* %823, i64 8
  %828 = bitcast i16* %827 to <8 x i16>*
  %829 = load <8 x i16>, <8 x i16>* %828, align 2, !alias.scope !101
  %830 = bitcast i16* %824 to <8 x i16>*
  store <8 x i16> %826, <8 x i16>* %830, align 2, !alias.scope !104, !noalias !101
  %831 = getelementptr i16, i16* %824, i64 8
  %832 = bitcast i16* %831 to <8 x i16>*
  store <8 x i16> %829, <8 x i16>* %832, align 2, !alias.scope !104, !noalias !101
  %833 = add i64 %821, 16
  %834 = add i64 %822, -1
  %835 = icmp eq i64 %834, 0
  br i1 %835, label %836, label %820, !llvm.loop !107

836:                                              ; preds = %820, %817
  %837 = icmp eq i64 %746, %757
  br i1 %837, label %891, label %838

838:                                              ; preds = %836, %748, %743
  %839 = phi i64 [ %745, %748 ], [ %745, %743 ], [ %758, %836 ]
  %840 = phi i16* [ %723, %748 ], [ %723, %743 ], [ %759, %836 ]
  %841 = phi i16* [ %744, %748 ], [ %744, %743 ], [ %760, %836 ]
  %842 = add i64 %839, -1
  %843 = and i64 %839, 7
  %844 = icmp eq i64 %843, 0
  br i1 %844, label %856, label %845

845:                                              ; preds = %838, %845
  %846 = phi i64 [ %851, %845 ], [ %839, %838 ]
  %847 = phi i16* [ %853, %845 ], [ %840, %838 ]
  %848 = phi i16* [ %852, %845 ], [ %841, %838 ]
  %849 = phi i64 [ %854, %845 ], [ %843, %838 ]
  %850 = load i16, i16* %847, align 2
  store i16 %850, i16* %848, align 2
  %851 = add i64 %846, -1
  %852 = getelementptr inbounds i16, i16* %848, i64 1
  %853 = getelementptr inbounds i16, i16* %847, i64 1
  %854 = add i64 %849, -1
  %855 = icmp eq i64 %854, 0
  br i1 %855, label %856, label %845, !llvm.loop !108

856:                                              ; preds = %845, %838
  %857 = phi i64 [ %839, %838 ], [ %851, %845 ]
  %858 = phi i16* [ %840, %838 ], [ %853, %845 ]
  %859 = phi i16* [ %841, %838 ], [ %852, %845 ]
  %860 = icmp ult i64 %842, 7
  br i1 %860, label %891, label %861

861:                                              ; preds = %856, %861
  %862 = phi i64 [ %887, %861 ], [ %857, %856 ]
  %863 = phi i16* [ %889, %861 ], [ %858, %856 ]
  %864 = phi i16* [ %888, %861 ], [ %859, %856 ]
  %865 = load i16, i16* %863, align 2
  store i16 %865, i16* %864, align 2
  %866 = getelementptr inbounds i16, i16* %864, i64 1
  %867 = getelementptr inbounds i16, i16* %863, i64 1
  %868 = load i16, i16* %867, align 2
  store i16 %868, i16* %866, align 2
  %869 = getelementptr inbounds i16, i16* %864, i64 2
  %870 = getelementptr inbounds i16, i16* %863, i64 2
  %871 = load i16, i16* %870, align 2
  store i16 %871, i16* %869, align 2
  %872 = getelementptr inbounds i16, i16* %864, i64 3
  %873 = getelementptr inbounds i16, i16* %863, i64 3
  %874 = load i16, i16* %873, align 2
  store i16 %874, i16* %872, align 2
  %875 = getelementptr inbounds i16, i16* %864, i64 4
  %876 = getelementptr inbounds i16, i16* %863, i64 4
  %877 = load i16, i16* %876, align 2
  store i16 %877, i16* %875, align 2
  %878 = getelementptr inbounds i16, i16* %864, i64 5
  %879 = getelementptr inbounds i16, i16* %863, i64 5
  %880 = load i16, i16* %879, align 2
  store i16 %880, i16* %878, align 2
  %881 = getelementptr inbounds i16, i16* %864, i64 6
  %882 = getelementptr inbounds i16, i16* %863, i64 6
  %883 = load i16, i16* %882, align 2
  store i16 %883, i16* %881, align 2
  %884 = getelementptr inbounds i16, i16* %864, i64 7
  %885 = getelementptr inbounds i16, i16* %863, i64 7
  %886 = load i16, i16* %885, align 2
  store i16 %886, i16* %884, align 2
  %887 = add i64 %862, -8
  %888 = getelementptr inbounds i16, i16* %864, i64 8
  %889 = getelementptr inbounds i16, i16* %863, i64 8
  %890 = icmp eq i64 %887, 0
  br i1 %890, label %891, label %861, !llvm.loop !109

891:                                              ; preds = %856, %861, %836
  %892 = load i64, i64* %59, align 8
  %893 = load i64, i64* %60, align 8
  br label %894

894:                                              ; preds = %891, %719
  %895 = phi i64 [ %893, %891 ], [ %709, %719 ]
  %896 = phi i64 [ %892, %891 ], [ %708, %719 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #13
  %897 = sub i64 %896, %895
  %898 = sdiv exact i64 %897, 24
  %899 = icmp ugt i64 %898, 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %99, i8 -86, i64 24, i1 false)
  br i1 %899, label %900, label %1079

900:                                              ; preds = %894
  %901 = inttoptr i64 %895 to %"class.std::__1::basic_string"*
  %902 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %901, i64 1
  %903 = bitcast %"class.std::__1::basic_string"* %902 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %904 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %903, i64 0, i32 1, i32 1
  %905 = load i8, i8* %904, align 1
  %906 = icmp slt i8 %905, 0
  br i1 %906, label %909, label %907

907:                                              ; preds = %900
  %908 = bitcast %"class.std::__1::basic_string"* %902 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %65, i8* align 8 %908, i64 24, i1 false) #13
  br label %1085

909:                                              ; preds = %900
  %910 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %902, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %911 = load i16*, i16** %910, align 8
  %912 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %901, i64 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %913 = load i64, i64* %912, align 8
  %914 = icmp ult i64 %913, 11
  br i1 %914, label %915, label %917

915:                                              ; preds = %909
  %916 = trunc i64 %913 to i8
  store i8 %916, i8* %71, align 1
  br label %931

917:                                              ; preds = %909
  %918 = icmp ugt i64 %913, 9223372036854775791
  br i1 %918, label %919, label %921

919:                                              ; preds = %917
  %920 = bitcast %"class.std::__1::basic_string"* %10 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %920) #14
  unreachable

921:                                              ; preds = %917
  %922 = add nuw nsw i64 %913, 8
  %923 = and i64 %922, -8
  %924 = icmp slt i64 %923, 0
  br i1 %924, label %925, label %926

925:                                              ; preds = %921
  call void @abort() #14
  unreachable

926:                                              ; preds = %921
  %927 = shl i64 %923, 1
  %928 = call i8* @_Znwm(i64 %927) #15
  %929 = bitcast i8* %928 to i16*
  store i8* %928, i8** %68, align 8
  %930 = or i64 %923, -9223372036854775808
  store i64 %930, i64* %67, align 8
  store i64 %913, i64* %66, align 8
  br label %931

931:                                              ; preds = %926, %915
  %932 = phi i16* [ %69, %915 ], [ %929, %926 ]
  %933 = add nuw nsw i64 %913, 1
  %934 = add i64 %913, 1
  %935 = icmp ult i64 %934, 16
  br i1 %935, label %1026, label %936

936:                                              ; preds = %931
  %937 = getelementptr i16, i16* %932, i64 1
  %938 = getelementptr i16, i16* %937, i64 %913
  %939 = getelementptr i16, i16* %911, i64 1
  %940 = getelementptr i16, i16* %939, i64 %913
  %941 = icmp ult i16* %932, %940
  %942 = icmp ult i16* %911, %938
  %943 = and i1 %941, %942
  br i1 %943, label %1026, label %944

944:                                              ; preds = %936
  %945 = and i64 %934, -16
  %946 = sub i64 %933, %945
  %947 = getelementptr i16, i16* %911, i64 %945
  %948 = getelementptr i16, i16* %932, i64 %945
  %949 = add i64 %945, -16
  %950 = lshr exact i64 %949, 4
  %951 = add nuw nsw i64 %950, 1
  %952 = and i64 %951, 3
  %953 = icmp ult i64 %949, 48
  br i1 %953, label %1005, label %954

954:                                              ; preds = %944
  %955 = sub nsw i64 %951, %952
  br label %956

956:                                              ; preds = %956, %954
  %957 = phi i64 [ 0, %954 ], [ %1002, %956 ]
  %958 = phi i64 [ %955, %954 ], [ %1003, %956 ]
  %959 = getelementptr i16, i16* %911, i64 %957
  %960 = getelementptr i16, i16* %932, i64 %957
  %961 = bitcast i16* %959 to <8 x i16>*
  %962 = load <8 x i16>, <8 x i16>* %961, align 2, !alias.scope !110
  %963 = getelementptr i16, i16* %959, i64 8
  %964 = bitcast i16* %963 to <8 x i16>*
  %965 = load <8 x i16>, <8 x i16>* %964, align 2, !alias.scope !110
  %966 = bitcast i16* %960 to <8 x i16>*
  store <8 x i16> %962, <8 x i16>* %966, align 2, !alias.scope !113, !noalias !110
  %967 = getelementptr i16, i16* %960, i64 8
  %968 = bitcast i16* %967 to <8 x i16>*
  store <8 x i16> %965, <8 x i16>* %968, align 2, !alias.scope !113, !noalias !110
  %969 = or i64 %957, 16
  %970 = getelementptr i16, i16* %911, i64 %969
  %971 = getelementptr i16, i16* %932, i64 %969
  %972 = bitcast i16* %970 to <8 x i16>*
  %973 = load <8 x i16>, <8 x i16>* %972, align 2, !alias.scope !110
  %974 = getelementptr i16, i16* %970, i64 8
  %975 = bitcast i16* %974 to <8 x i16>*
  %976 = load <8 x i16>, <8 x i16>* %975, align 2, !alias.scope !110
  %977 = bitcast i16* %971 to <8 x i16>*
  store <8 x i16> %973, <8 x i16>* %977, align 2, !alias.scope !113, !noalias !110
  %978 = getelementptr i16, i16* %971, i64 8
  %979 = bitcast i16* %978 to <8 x i16>*
  store <8 x i16> %976, <8 x i16>* %979, align 2, !alias.scope !113, !noalias !110
  %980 = or i64 %957, 32
  %981 = getelementptr i16, i16* %911, i64 %980
  %982 = getelementptr i16, i16* %932, i64 %980
  %983 = bitcast i16* %981 to <8 x i16>*
  %984 = load <8 x i16>, <8 x i16>* %983, align 2, !alias.scope !110
  %985 = getelementptr i16, i16* %981, i64 8
  %986 = bitcast i16* %985 to <8 x i16>*
  %987 = load <8 x i16>, <8 x i16>* %986, align 2, !alias.scope !110
  %988 = bitcast i16* %982 to <8 x i16>*
  store <8 x i16> %984, <8 x i16>* %988, align 2, !alias.scope !113, !noalias !110
  %989 = getelementptr i16, i16* %982, i64 8
  %990 = bitcast i16* %989 to <8 x i16>*
  store <8 x i16> %987, <8 x i16>* %990, align 2, !alias.scope !113, !noalias !110
  %991 = or i64 %957, 48
  %992 = getelementptr i16, i16* %911, i64 %991
  %993 = getelementptr i16, i16* %932, i64 %991
  %994 = bitcast i16* %992 to <8 x i16>*
  %995 = load <8 x i16>, <8 x i16>* %994, align 2, !alias.scope !110
  %996 = getelementptr i16, i16* %992, i64 8
  %997 = bitcast i16* %996 to <8 x i16>*
  %998 = load <8 x i16>, <8 x i16>* %997, align 2, !alias.scope !110
  %999 = bitcast i16* %993 to <8 x i16>*
  store <8 x i16> %995, <8 x i16>* %999, align 2, !alias.scope !113, !noalias !110
  %1000 = getelementptr i16, i16* %993, i64 8
  %1001 = bitcast i16* %1000 to <8 x i16>*
  store <8 x i16> %998, <8 x i16>* %1001, align 2, !alias.scope !113, !noalias !110
  %1002 = add i64 %957, 64
  %1003 = add i64 %958, -4
  %1004 = icmp eq i64 %1003, 0
  br i1 %1004, label %1005, label %956, !llvm.loop !115

1005:                                             ; preds = %956, %944
  %1006 = phi i64 [ 0, %944 ], [ %1002, %956 ]
  %1007 = icmp eq i64 %952, 0
  br i1 %1007, label %1024, label %1008

1008:                                             ; preds = %1005, %1008
  %1009 = phi i64 [ %1021, %1008 ], [ %1006, %1005 ]
  %1010 = phi i64 [ %1022, %1008 ], [ %952, %1005 ]
  %1011 = getelementptr i16, i16* %911, i64 %1009
  %1012 = getelementptr i16, i16* %932, i64 %1009
  %1013 = bitcast i16* %1011 to <8 x i16>*
  %1014 = load <8 x i16>, <8 x i16>* %1013, align 2, !alias.scope !110
  %1015 = getelementptr i16, i16* %1011, i64 8
  %1016 = bitcast i16* %1015 to <8 x i16>*
  %1017 = load <8 x i16>, <8 x i16>* %1016, align 2, !alias.scope !110
  %1018 = bitcast i16* %1012 to <8 x i16>*
  store <8 x i16> %1014, <8 x i16>* %1018, align 2, !alias.scope !113, !noalias !110
  %1019 = getelementptr i16, i16* %1012, i64 8
  %1020 = bitcast i16* %1019 to <8 x i16>*
  store <8 x i16> %1017, <8 x i16>* %1020, align 2, !alias.scope !113, !noalias !110
  %1021 = add i64 %1009, 16
  %1022 = add i64 %1010, -1
  %1023 = icmp eq i64 %1022, 0
  br i1 %1023, label %1024, label %1008, !llvm.loop !116

1024:                                             ; preds = %1008, %1005
  %1025 = icmp eq i64 %934, %945
  br i1 %1025, label %1080, label %1026

1026:                                             ; preds = %1024, %936, %931
  %1027 = phi i64 [ %933, %936 ], [ %933, %931 ], [ %946, %1024 ]
  %1028 = phi i16* [ %911, %936 ], [ %911, %931 ], [ %947, %1024 ]
  %1029 = phi i16* [ %932, %936 ], [ %932, %931 ], [ %948, %1024 ]
  %1030 = add i64 %1027, -1
  %1031 = and i64 %1027, 7
  %1032 = icmp eq i64 %1031, 0
  br i1 %1032, label %1044, label %1033

1033:                                             ; preds = %1026, %1033
  %1034 = phi i64 [ %1039, %1033 ], [ %1027, %1026 ]
  %1035 = phi i16* [ %1041, %1033 ], [ %1028, %1026 ]
  %1036 = phi i16* [ %1040, %1033 ], [ %1029, %1026 ]
  %1037 = phi i64 [ %1042, %1033 ], [ %1031, %1026 ]
  %1038 = load i16, i16* %1035, align 2
  store i16 %1038, i16* %1036, align 2
  %1039 = add i64 %1034, -1
  %1040 = getelementptr inbounds i16, i16* %1036, i64 1
  %1041 = getelementptr inbounds i16, i16* %1035, i64 1
  %1042 = add i64 %1037, -1
  %1043 = icmp eq i64 %1042, 0
  br i1 %1043, label %1044, label %1033, !llvm.loop !117

1044:                                             ; preds = %1033, %1026
  %1045 = phi i64 [ %1027, %1026 ], [ %1039, %1033 ]
  %1046 = phi i16* [ %1028, %1026 ], [ %1041, %1033 ]
  %1047 = phi i16* [ %1029, %1026 ], [ %1040, %1033 ]
  %1048 = icmp ult i64 %1030, 7
  br i1 %1048, label %1080, label %1049

1049:                                             ; preds = %1044, %1049
  %1050 = phi i64 [ %1075, %1049 ], [ %1045, %1044 ]
  %1051 = phi i16* [ %1077, %1049 ], [ %1046, %1044 ]
  %1052 = phi i16* [ %1076, %1049 ], [ %1047, %1044 ]
  %1053 = load i16, i16* %1051, align 2
  store i16 %1053, i16* %1052, align 2
  %1054 = getelementptr inbounds i16, i16* %1052, i64 1
  %1055 = getelementptr inbounds i16, i16* %1051, i64 1
  %1056 = load i16, i16* %1055, align 2
  store i16 %1056, i16* %1054, align 2
  %1057 = getelementptr inbounds i16, i16* %1052, i64 2
  %1058 = getelementptr inbounds i16, i16* %1051, i64 2
  %1059 = load i16, i16* %1058, align 2
  store i16 %1059, i16* %1057, align 2
  %1060 = getelementptr inbounds i16, i16* %1052, i64 3
  %1061 = getelementptr inbounds i16, i16* %1051, i64 3
  %1062 = load i16, i16* %1061, align 2
  store i16 %1062, i16* %1060, align 2
  %1063 = getelementptr inbounds i16, i16* %1052, i64 4
  %1064 = getelementptr inbounds i16, i16* %1051, i64 4
  %1065 = load i16, i16* %1064, align 2
  store i16 %1065, i16* %1063, align 2
  %1066 = getelementptr inbounds i16, i16* %1052, i64 5
  %1067 = getelementptr inbounds i16, i16* %1051, i64 5
  %1068 = load i16, i16* %1067, align 2
  store i16 %1068, i16* %1066, align 2
  %1069 = getelementptr inbounds i16, i16* %1052, i64 6
  %1070 = getelementptr inbounds i16, i16* %1051, i64 6
  %1071 = load i16, i16* %1070, align 2
  store i16 %1071, i16* %1069, align 2
  %1072 = getelementptr inbounds i16, i16* %1052, i64 7
  %1073 = getelementptr inbounds i16, i16* %1051, i64 7
  %1074 = load i16, i16* %1073, align 2
  store i16 %1074, i16* %1072, align 2
  %1075 = add i64 %1050, -8
  %1076 = getelementptr inbounds i16, i16* %1052, i64 8
  %1077 = getelementptr inbounds i16, i16* %1051, i64 8
  %1078 = icmp eq i64 %1075, 0
  br i1 %1078, label %1080, label %1049, !llvm.loop !118

1079:                                             ; preds = %894
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %100, i8 -86, i64 24, i1 false)
  br label %1268

1080:                                             ; preds = %1044, %1049, %1024
  %1081 = load i64, i64* %59, align 8
  %1082 = load i64, i64* %60, align 8
  %1083 = sub i64 %1081, %1082
  %1084 = sdiv exact i64 %1083, 24
  br label %1085

1085:                                             ; preds = %1080, %907
  %1086 = phi i64 [ %1084, %1080 ], [ %898, %907 ]
  %1087 = phi i64 [ %1082, %1080 ], [ %895, %907 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %72) #13
  %1088 = icmp ugt i64 %1086, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %101, i8 -86, i64 24, i1 false)
  br i1 %1088, label %1089, label %1268

1089:                                             ; preds = %1085
  %1090 = inttoptr i64 %1087 to %"class.std::__1::basic_string"*
  %1091 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1090, i64 2
  %1092 = bitcast %"class.std::__1::basic_string"* %1091 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1093 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1092, i64 0, i32 1, i32 1
  %1094 = load i8, i8* %1093, align 1
  %1095 = icmp slt i8 %1094, 0
  br i1 %1095, label %1098, label %1096

1096:                                             ; preds = %1089
  %1097 = bitcast %"class.std::__1::basic_string"* %1091 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %72, i8* align 8 %1097, i64 24, i1 false) #13
  br label %1269

1098:                                             ; preds = %1089
  %1099 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1091, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1100 = load i16*, i16** %1099, align 8
  %1101 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1090, i64 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1102 = load i64, i64* %1101, align 8
  %1103 = icmp ult i64 %1102, 11
  br i1 %1103, label %1104, label %1106

1104:                                             ; preds = %1098
  %1105 = trunc i64 %1102 to i8
  store i8 %1105, i8* %78, align 1
  br label %1120

1106:                                             ; preds = %1098
  %1107 = icmp ugt i64 %1102, 9223372036854775791
  br i1 %1107, label %1108, label %1110

1108:                                             ; preds = %1106
  %1109 = bitcast %"class.std::__1::basic_string"* %11 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %1109) #14
  unreachable

1110:                                             ; preds = %1106
  %1111 = add nuw nsw i64 %1102, 8
  %1112 = and i64 %1111, -8
  %1113 = icmp slt i64 %1112, 0
  br i1 %1113, label %1114, label %1115

1114:                                             ; preds = %1110
  call void @abort() #14
  unreachable

1115:                                             ; preds = %1110
  %1116 = shl i64 %1112, 1
  %1117 = call i8* @_Znwm(i64 %1116) #15
  %1118 = bitcast i8* %1117 to i16*
  store i8* %1117, i8** %75, align 8
  %1119 = or i64 %1112, -9223372036854775808
  store i64 %1119, i64* %74, align 8
  store i64 %1102, i64* %73, align 8
  br label %1120

1120:                                             ; preds = %1115, %1104
  %1121 = phi i16* [ %76, %1104 ], [ %1118, %1115 ]
  %1122 = add nuw nsw i64 %1102, 1
  %1123 = add i64 %1102, 1
  %1124 = icmp ult i64 %1123, 16
  br i1 %1124, label %1215, label %1125

1125:                                             ; preds = %1120
  %1126 = getelementptr i16, i16* %1121, i64 1
  %1127 = getelementptr i16, i16* %1126, i64 %1102
  %1128 = getelementptr i16, i16* %1100, i64 1
  %1129 = getelementptr i16, i16* %1128, i64 %1102
  %1130 = icmp ult i16* %1121, %1129
  %1131 = icmp ult i16* %1100, %1127
  %1132 = and i1 %1130, %1131
  br i1 %1132, label %1215, label %1133

1133:                                             ; preds = %1125
  %1134 = and i64 %1123, -16
  %1135 = sub i64 %1122, %1134
  %1136 = getelementptr i16, i16* %1100, i64 %1134
  %1137 = getelementptr i16, i16* %1121, i64 %1134
  %1138 = add i64 %1134, -16
  %1139 = lshr exact i64 %1138, 4
  %1140 = add nuw nsw i64 %1139, 1
  %1141 = and i64 %1140, 3
  %1142 = icmp ult i64 %1138, 48
  br i1 %1142, label %1194, label %1143

1143:                                             ; preds = %1133
  %1144 = sub nsw i64 %1140, %1141
  br label %1145

1145:                                             ; preds = %1145, %1143
  %1146 = phi i64 [ 0, %1143 ], [ %1191, %1145 ]
  %1147 = phi i64 [ %1144, %1143 ], [ %1192, %1145 ]
  %1148 = getelementptr i16, i16* %1100, i64 %1146
  %1149 = getelementptr i16, i16* %1121, i64 %1146
  %1150 = bitcast i16* %1148 to <8 x i16>*
  %1151 = load <8 x i16>, <8 x i16>* %1150, align 2, !alias.scope !119
  %1152 = getelementptr i16, i16* %1148, i64 8
  %1153 = bitcast i16* %1152 to <8 x i16>*
  %1154 = load <8 x i16>, <8 x i16>* %1153, align 2, !alias.scope !119
  %1155 = bitcast i16* %1149 to <8 x i16>*
  store <8 x i16> %1151, <8 x i16>* %1155, align 2, !alias.scope !122, !noalias !119
  %1156 = getelementptr i16, i16* %1149, i64 8
  %1157 = bitcast i16* %1156 to <8 x i16>*
  store <8 x i16> %1154, <8 x i16>* %1157, align 2, !alias.scope !122, !noalias !119
  %1158 = or i64 %1146, 16
  %1159 = getelementptr i16, i16* %1100, i64 %1158
  %1160 = getelementptr i16, i16* %1121, i64 %1158
  %1161 = bitcast i16* %1159 to <8 x i16>*
  %1162 = load <8 x i16>, <8 x i16>* %1161, align 2, !alias.scope !119
  %1163 = getelementptr i16, i16* %1159, i64 8
  %1164 = bitcast i16* %1163 to <8 x i16>*
  %1165 = load <8 x i16>, <8 x i16>* %1164, align 2, !alias.scope !119
  %1166 = bitcast i16* %1160 to <8 x i16>*
  store <8 x i16> %1162, <8 x i16>* %1166, align 2, !alias.scope !122, !noalias !119
  %1167 = getelementptr i16, i16* %1160, i64 8
  %1168 = bitcast i16* %1167 to <8 x i16>*
  store <8 x i16> %1165, <8 x i16>* %1168, align 2, !alias.scope !122, !noalias !119
  %1169 = or i64 %1146, 32
  %1170 = getelementptr i16, i16* %1100, i64 %1169
  %1171 = getelementptr i16, i16* %1121, i64 %1169
  %1172 = bitcast i16* %1170 to <8 x i16>*
  %1173 = load <8 x i16>, <8 x i16>* %1172, align 2, !alias.scope !119
  %1174 = getelementptr i16, i16* %1170, i64 8
  %1175 = bitcast i16* %1174 to <8 x i16>*
  %1176 = load <8 x i16>, <8 x i16>* %1175, align 2, !alias.scope !119
  %1177 = bitcast i16* %1171 to <8 x i16>*
  store <8 x i16> %1173, <8 x i16>* %1177, align 2, !alias.scope !122, !noalias !119
  %1178 = getelementptr i16, i16* %1171, i64 8
  %1179 = bitcast i16* %1178 to <8 x i16>*
  store <8 x i16> %1176, <8 x i16>* %1179, align 2, !alias.scope !122, !noalias !119
  %1180 = or i64 %1146, 48
  %1181 = getelementptr i16, i16* %1100, i64 %1180
  %1182 = getelementptr i16, i16* %1121, i64 %1180
  %1183 = bitcast i16* %1181 to <8 x i16>*
  %1184 = load <8 x i16>, <8 x i16>* %1183, align 2, !alias.scope !119
  %1185 = getelementptr i16, i16* %1181, i64 8
  %1186 = bitcast i16* %1185 to <8 x i16>*
  %1187 = load <8 x i16>, <8 x i16>* %1186, align 2, !alias.scope !119
  %1188 = bitcast i16* %1182 to <8 x i16>*
  store <8 x i16> %1184, <8 x i16>* %1188, align 2, !alias.scope !122, !noalias !119
  %1189 = getelementptr i16, i16* %1182, i64 8
  %1190 = bitcast i16* %1189 to <8 x i16>*
  store <8 x i16> %1187, <8 x i16>* %1190, align 2, !alias.scope !122, !noalias !119
  %1191 = add i64 %1146, 64
  %1192 = add i64 %1147, -4
  %1193 = icmp eq i64 %1192, 0
  br i1 %1193, label %1194, label %1145, !llvm.loop !124

1194:                                             ; preds = %1145, %1133
  %1195 = phi i64 [ 0, %1133 ], [ %1191, %1145 ]
  %1196 = icmp eq i64 %1141, 0
  br i1 %1196, label %1213, label %1197

1197:                                             ; preds = %1194, %1197
  %1198 = phi i64 [ %1210, %1197 ], [ %1195, %1194 ]
  %1199 = phi i64 [ %1211, %1197 ], [ %1141, %1194 ]
  %1200 = getelementptr i16, i16* %1100, i64 %1198
  %1201 = getelementptr i16, i16* %1121, i64 %1198
  %1202 = bitcast i16* %1200 to <8 x i16>*
  %1203 = load <8 x i16>, <8 x i16>* %1202, align 2, !alias.scope !119
  %1204 = getelementptr i16, i16* %1200, i64 8
  %1205 = bitcast i16* %1204 to <8 x i16>*
  %1206 = load <8 x i16>, <8 x i16>* %1205, align 2, !alias.scope !119
  %1207 = bitcast i16* %1201 to <8 x i16>*
  store <8 x i16> %1203, <8 x i16>* %1207, align 2, !alias.scope !122, !noalias !119
  %1208 = getelementptr i16, i16* %1201, i64 8
  %1209 = bitcast i16* %1208 to <8 x i16>*
  store <8 x i16> %1206, <8 x i16>* %1209, align 2, !alias.scope !122, !noalias !119
  %1210 = add i64 %1198, 16
  %1211 = add i64 %1199, -1
  %1212 = icmp eq i64 %1211, 0
  br i1 %1212, label %1213, label %1197, !llvm.loop !125

1213:                                             ; preds = %1197, %1194
  %1214 = icmp eq i64 %1123, %1134
  br i1 %1214, label %1269, label %1215

1215:                                             ; preds = %1213, %1125, %1120
  %1216 = phi i64 [ %1122, %1125 ], [ %1122, %1120 ], [ %1135, %1213 ]
  %1217 = phi i16* [ %1100, %1125 ], [ %1100, %1120 ], [ %1136, %1213 ]
  %1218 = phi i16* [ %1121, %1125 ], [ %1121, %1120 ], [ %1137, %1213 ]
  %1219 = add i64 %1216, -1
  %1220 = and i64 %1216, 7
  %1221 = icmp eq i64 %1220, 0
  br i1 %1221, label %1233, label %1222

1222:                                             ; preds = %1215, %1222
  %1223 = phi i64 [ %1228, %1222 ], [ %1216, %1215 ]
  %1224 = phi i16* [ %1230, %1222 ], [ %1217, %1215 ]
  %1225 = phi i16* [ %1229, %1222 ], [ %1218, %1215 ]
  %1226 = phi i64 [ %1231, %1222 ], [ %1220, %1215 ]
  %1227 = load i16, i16* %1224, align 2
  store i16 %1227, i16* %1225, align 2
  %1228 = add i64 %1223, -1
  %1229 = getelementptr inbounds i16, i16* %1225, i64 1
  %1230 = getelementptr inbounds i16, i16* %1224, i64 1
  %1231 = add i64 %1226, -1
  %1232 = icmp eq i64 %1231, 0
  br i1 %1232, label %1233, label %1222, !llvm.loop !126

1233:                                             ; preds = %1222, %1215
  %1234 = phi i64 [ %1216, %1215 ], [ %1228, %1222 ]
  %1235 = phi i16* [ %1217, %1215 ], [ %1230, %1222 ]
  %1236 = phi i16* [ %1218, %1215 ], [ %1229, %1222 ]
  %1237 = icmp ult i64 %1219, 7
  br i1 %1237, label %1269, label %1238

1238:                                             ; preds = %1233, %1238
  %1239 = phi i64 [ %1264, %1238 ], [ %1234, %1233 ]
  %1240 = phi i16* [ %1266, %1238 ], [ %1235, %1233 ]
  %1241 = phi i16* [ %1265, %1238 ], [ %1236, %1233 ]
  %1242 = load i16, i16* %1240, align 2
  store i16 %1242, i16* %1241, align 2
  %1243 = getelementptr inbounds i16, i16* %1241, i64 1
  %1244 = getelementptr inbounds i16, i16* %1240, i64 1
  %1245 = load i16, i16* %1244, align 2
  store i16 %1245, i16* %1243, align 2
  %1246 = getelementptr inbounds i16, i16* %1241, i64 2
  %1247 = getelementptr inbounds i16, i16* %1240, i64 2
  %1248 = load i16, i16* %1247, align 2
  store i16 %1248, i16* %1246, align 2
  %1249 = getelementptr inbounds i16, i16* %1241, i64 3
  %1250 = getelementptr inbounds i16, i16* %1240, i64 3
  %1251 = load i16, i16* %1250, align 2
  store i16 %1251, i16* %1249, align 2
  %1252 = getelementptr inbounds i16, i16* %1241, i64 4
  %1253 = getelementptr inbounds i16, i16* %1240, i64 4
  %1254 = load i16, i16* %1253, align 2
  store i16 %1254, i16* %1252, align 2
  %1255 = getelementptr inbounds i16, i16* %1241, i64 5
  %1256 = getelementptr inbounds i16, i16* %1240, i64 5
  %1257 = load i16, i16* %1256, align 2
  store i16 %1257, i16* %1255, align 2
  %1258 = getelementptr inbounds i16, i16* %1241, i64 6
  %1259 = getelementptr inbounds i16, i16* %1240, i64 6
  %1260 = load i16, i16* %1259, align 2
  store i16 %1260, i16* %1258, align 2
  %1261 = getelementptr inbounds i16, i16* %1241, i64 7
  %1262 = getelementptr inbounds i16, i16* %1240, i64 7
  %1263 = load i16, i16* %1262, align 2
  store i16 %1263, i16* %1261, align 2
  %1264 = add i64 %1239, -8
  %1265 = getelementptr inbounds i16, i16* %1241, i64 8
  %1266 = getelementptr inbounds i16, i16* %1240, i64 8
  %1267 = icmp eq i64 %1264, 0
  br i1 %1267, label %1269, label %1238, !llvm.loop !127

1268:                                             ; preds = %1079, %1085
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 24, i1 false) #13
  br label %1269

1269:                                             ; preds = %1233, %1238, %1213, %1096, %1268
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %79) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 24, i1 false) #13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %81) #13
  %1270 = load i8, i8* %64, align 1
  %1271 = icmp slt i8 %1270, 0
  %1272 = load i16*, i16** %56, align 8
  %1273 = select i1 %1271, i16* %1272, i16* %62
  %1274 = load i64, i64* %57, align 8
  %1275 = zext i8 %1270 to i64
  %1276 = select i1 %1271, i64 %1274, i64 %1275
  call void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.19"* nonnull sret %13, i16* %1273, i64 %1276) #13
  %1277 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent34GetValueAndStatusForTypeIfPossibleERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEPNS3_IDsNS4_IDsEENS6_IDsEEEEPNS0_18VerificationStatusE(%"class.autofill::structured_address::AddressComponent"* %1, %"class.std::__1::basic_string.19"* nonnull dereferenceable(24) %13, %"class.std::__1::basic_string"* nonnull %12, i32* null)
  %1278 = load i8, i8* %83, align 1
  %1279 = icmp slt i8 %1278, 0
  br i1 %1279, label %1280, label %1282

1280:                                             ; preds = %1269
  %1281 = load i8*, i8** %84, align 8
  call void @_ZdlPv(i8* %1281) #15
  br label %1282

1282:                                             ; preds = %1269, %1280
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %81) #13
  br i1 %1277, label %1283, label %1331

1283:                                             ; preds = %1282
  %1284 = load i8, i8* %90, align 1
  %1285 = icmp slt i8 %1284, 0
  %1286 = load i64, i64* %80, align 8
  %1287 = zext i8 %1284 to i64
  %1288 = select i1 %1285, i64 %1286, i64 %1287
  %1289 = icmp eq i64 %1288, 0
  br i1 %1289, label %1516, label %1290

1290:                                             ; preds = %1283
  %1291 = load i8, i8* %71, align 1
  %1292 = icmp slt i8 %1291, 0
  %1293 = load i64, i64* %66, align 8
  %1294 = zext i8 %1291 to i64
  %1295 = select i1 %1292, i64 %1293, i64 %1294
  %1296 = icmp eq i64 %1295, 0
  br i1 %1296, label %1306, label %1297

1297:                                             ; preds = %1290
  %1298 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %1299 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %1300 = icmp ult %"class.std::__1::basic_string"* %1298, %1299
  br i1 %1300, label %1301, label %1305

1301:                                             ; preds = %1297
  %1302 = bitcast %"class.std::__1::basic_string"* %1298 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1302, i8* nonnull align 8 %65, i64 24, i1 false) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %65, i8 0, i64 24, i1 false) #13
  %1303 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1298, i64 1
  %1304 = ptrtoint %"class.std::__1::basic_string"* %1303 to i64
  store i64 %1304, i64* %88, align 8
  br label %1306

1305:                                             ; preds = %1297
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.63"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %10) #13
  br label %1306

1306:                                             ; preds = %1305, %1301, %1290
  %1307 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %1308 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %1309 = icmp ult %"class.std::__1::basic_string"* %1307, %1308
  br i1 %1309, label %1310, label %1314

1310:                                             ; preds = %1306
  %1311 = bitcast %"class.std::__1::basic_string"* %1307 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1311, i8* nonnull align 8 %79, i64 24, i1 false) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 24, i1 false) #13
  %1312 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1307, i64 1
  %1313 = ptrtoint %"class.std::__1::basic_string"* %1312 to i64
  store i64 %1313, i64* %88, align 8
  br label %1315

1314:                                             ; preds = %1306
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.63"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %12) #13
  br label %1315

1315:                                             ; preds = %1310, %1314
  %1316 = load i8, i8* %78, align 1
  %1317 = icmp slt i8 %1316, 0
  %1318 = load i64, i64* %73, align 8
  %1319 = zext i8 %1316 to i64
  %1320 = select i1 %1317, i64 %1318, i64 %1319
  %1321 = icmp eq i64 %1320, 0
  br i1 %1321, label %1516, label %1322

1322:                                             ; preds = %1315
  %1323 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %1324 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %1325 = icmp ult %"class.std::__1::basic_string"* %1323, %1324
  br i1 %1325, label %1326, label %1330

1326:                                             ; preds = %1322
  %1327 = bitcast %"class.std::__1::basic_string"* %1323 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1327, i8* nonnull align 8 %72, i64 24, i1 false) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %72, i8 0, i64 24, i1 false) #13
  %1328 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1323, i64 1
  %1329 = ptrtoint %"class.std::__1::basic_string"* %1328 to i64
  store i64 %1329, i64* %88, align 8
  br label %1516

1330:                                             ; preds = %1322
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.63"* nonnull %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %11) #13
  br label %1516

1331:                                             ; preds = %1282
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %85) #13
  %1332 = add i64 %323, 1
  %1333 = sub i64 %1332, %324
  %1334 = call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.61"* nonnull %5, i64 %324, i64 %1333)
  %1335 = extractvalue { i16*, i64 } %1334, 0
  store i16* %1335, i16** %86, align 8
  %1336 = extractvalue { i16*, i64 } %1334, 1
  store i64 %1336, i64* %87, align 8
  %1337 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %1338 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %19, align 8
  %1339 = icmp ult %"class.std::__1::basic_string"* %1337, %1338
  br i1 %1339, label %1340, label %1514

1340:                                             ; preds = %1331
  %1341 = icmp ugt i64 %1336, 9223372036854775791
  br i1 %1341, label %1342, label %1344

1342:                                             ; preds = %1340
  %1343 = bitcast %"class.std::__1::basic_string"* %1337 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %1343) #14
  unreachable

1344:                                             ; preds = %1340
  %1345 = icmp ult i64 %1336, 11
  br i1 %1345, label %1359, label %1346

1346:                                             ; preds = %1344
  %1347 = add nuw nsw i64 %1336, 8
  %1348 = and i64 %1347, -8
  %1349 = icmp slt i64 %1348, 0
  br i1 %1349, label %1350, label %1351

1350:                                             ; preds = %1346
  call void @abort() #14
  unreachable

1351:                                             ; preds = %1346
  %1352 = shl i64 %1348, 1
  %1353 = call i8* @_Znwm(i64 %1352) #15
  %1354 = bitcast i8* %1353 to i16*
  %1355 = bitcast %"class.std::__1::basic_string"* %1337 to i8**
  store i8* %1353, i8** %1355, align 8, !alias.scope !128
  %1356 = or i64 %1348, -9223372036854775808
  %1357 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1337, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %1356, i64* %1357, align 8, !alias.scope !128
  %1358 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1337, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1336, i64* %1358, align 8, !alias.scope !128
  br label %1365

1359:                                             ; preds = %1344
  %1360 = trunc i64 %1336 to i8
  %1361 = bitcast %"class.std::__1::basic_string"* %1337 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1362 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1361, i64 0, i32 1, i32 1
  store i8 %1360, i8* %1362, align 1, !alias.scope !128
  %1363 = bitcast %"class.std::__1::basic_string"* %1337 to i16*
  %1364 = icmp eq i64 %1336, 0
  br i1 %1364, label %1509, label %1365

1365:                                             ; preds = %1359, %1351
  %1366 = phi i16* [ %1354, %1351 ], [ %1363, %1359 ]
  %1367 = icmp ult i64 %1336, 16
  br i1 %1367, label %1456, label %1368

1368:                                             ; preds = %1365
  %1369 = getelementptr i16, i16* %1366, i64 %1336
  %1370 = getelementptr i16, i16* %1335, i64 %1336
  %1371 = icmp ult i16* %1366, %1370
  %1372 = icmp ult i16* %1335, %1369
  %1373 = and i1 %1371, %1372
  br i1 %1373, label %1456, label %1374

1374:                                             ; preds = %1368
  %1375 = and i64 %1336, -16
  %1376 = sub i64 %1336, %1375
  %1377 = getelementptr i16, i16* %1335, i64 %1375
  %1378 = getelementptr i16, i16* %1366, i64 %1375
  %1379 = add i64 %1375, -16
  %1380 = lshr exact i64 %1379, 4
  %1381 = add nuw nsw i64 %1380, 1
  %1382 = and i64 %1381, 3
  %1383 = icmp ult i64 %1379, 48
  br i1 %1383, label %1435, label %1384

1384:                                             ; preds = %1374
  %1385 = sub nsw i64 %1381, %1382
  br label %1386

1386:                                             ; preds = %1386, %1384
  %1387 = phi i64 [ 0, %1384 ], [ %1432, %1386 ]
  %1388 = phi i64 [ %1385, %1384 ], [ %1433, %1386 ]
  %1389 = getelementptr i16, i16* %1335, i64 %1387
  %1390 = getelementptr i16, i16* %1366, i64 %1387
  %1391 = bitcast i16* %1389 to <8 x i16>*
  %1392 = load <8 x i16>, <8 x i16>* %1391, align 2, !alias.scope !131
  %1393 = getelementptr i16, i16* %1389, i64 8
  %1394 = bitcast i16* %1393 to <8 x i16>*
  %1395 = load <8 x i16>, <8 x i16>* %1394, align 2, !alias.scope !131
  %1396 = bitcast i16* %1390 to <8 x i16>*
  store <8 x i16> %1392, <8 x i16>* %1396, align 2, !alias.scope !134, !noalias !131
  %1397 = getelementptr i16, i16* %1390, i64 8
  %1398 = bitcast i16* %1397 to <8 x i16>*
  store <8 x i16> %1395, <8 x i16>* %1398, align 2, !alias.scope !134, !noalias !131
  %1399 = or i64 %1387, 16
  %1400 = getelementptr i16, i16* %1335, i64 %1399
  %1401 = getelementptr i16, i16* %1366, i64 %1399
  %1402 = bitcast i16* %1400 to <8 x i16>*
  %1403 = load <8 x i16>, <8 x i16>* %1402, align 2, !alias.scope !131
  %1404 = getelementptr i16, i16* %1400, i64 8
  %1405 = bitcast i16* %1404 to <8 x i16>*
  %1406 = load <8 x i16>, <8 x i16>* %1405, align 2, !alias.scope !131
  %1407 = bitcast i16* %1401 to <8 x i16>*
  store <8 x i16> %1403, <8 x i16>* %1407, align 2, !alias.scope !134, !noalias !131
  %1408 = getelementptr i16, i16* %1401, i64 8
  %1409 = bitcast i16* %1408 to <8 x i16>*
  store <8 x i16> %1406, <8 x i16>* %1409, align 2, !alias.scope !134, !noalias !131
  %1410 = or i64 %1387, 32
  %1411 = getelementptr i16, i16* %1335, i64 %1410
  %1412 = getelementptr i16, i16* %1366, i64 %1410
  %1413 = bitcast i16* %1411 to <8 x i16>*
  %1414 = load <8 x i16>, <8 x i16>* %1413, align 2, !alias.scope !131
  %1415 = getelementptr i16, i16* %1411, i64 8
  %1416 = bitcast i16* %1415 to <8 x i16>*
  %1417 = load <8 x i16>, <8 x i16>* %1416, align 2, !alias.scope !131
  %1418 = bitcast i16* %1412 to <8 x i16>*
  store <8 x i16> %1414, <8 x i16>* %1418, align 2, !alias.scope !134, !noalias !131
  %1419 = getelementptr i16, i16* %1412, i64 8
  %1420 = bitcast i16* %1419 to <8 x i16>*
  store <8 x i16> %1417, <8 x i16>* %1420, align 2, !alias.scope !134, !noalias !131
  %1421 = or i64 %1387, 48
  %1422 = getelementptr i16, i16* %1335, i64 %1421
  %1423 = getelementptr i16, i16* %1366, i64 %1421
  %1424 = bitcast i16* %1422 to <8 x i16>*
  %1425 = load <8 x i16>, <8 x i16>* %1424, align 2, !alias.scope !131
  %1426 = getelementptr i16, i16* %1422, i64 8
  %1427 = bitcast i16* %1426 to <8 x i16>*
  %1428 = load <8 x i16>, <8 x i16>* %1427, align 2, !alias.scope !131
  %1429 = bitcast i16* %1423 to <8 x i16>*
  store <8 x i16> %1425, <8 x i16>* %1429, align 2, !alias.scope !134, !noalias !131
  %1430 = getelementptr i16, i16* %1423, i64 8
  %1431 = bitcast i16* %1430 to <8 x i16>*
  store <8 x i16> %1428, <8 x i16>* %1431, align 2, !alias.scope !134, !noalias !131
  %1432 = add i64 %1387, 64
  %1433 = add i64 %1388, -4
  %1434 = icmp eq i64 %1433, 0
  br i1 %1434, label %1435, label %1386, !llvm.loop !136

1435:                                             ; preds = %1386, %1374
  %1436 = phi i64 [ 0, %1374 ], [ %1432, %1386 ]
  %1437 = icmp eq i64 %1382, 0
  br i1 %1437, label %1454, label %1438

1438:                                             ; preds = %1435, %1438
  %1439 = phi i64 [ %1451, %1438 ], [ %1436, %1435 ]
  %1440 = phi i64 [ %1452, %1438 ], [ %1382, %1435 ]
  %1441 = getelementptr i16, i16* %1335, i64 %1439
  %1442 = getelementptr i16, i16* %1366, i64 %1439
  %1443 = bitcast i16* %1441 to <8 x i16>*
  %1444 = load <8 x i16>, <8 x i16>* %1443, align 2, !alias.scope !131
  %1445 = getelementptr i16, i16* %1441, i64 8
  %1446 = bitcast i16* %1445 to <8 x i16>*
  %1447 = load <8 x i16>, <8 x i16>* %1446, align 2, !alias.scope !131
  %1448 = bitcast i16* %1442 to <8 x i16>*
  store <8 x i16> %1444, <8 x i16>* %1448, align 2, !alias.scope !134, !noalias !131
  %1449 = getelementptr i16, i16* %1442, i64 8
  %1450 = bitcast i16* %1449 to <8 x i16>*
  store <8 x i16> %1447, <8 x i16>* %1450, align 2, !alias.scope !134, !noalias !131
  %1451 = add i64 %1439, 16
  %1452 = add i64 %1440, -1
  %1453 = icmp eq i64 %1452, 0
  br i1 %1453, label %1454, label %1438, !llvm.loop !137

1454:                                             ; preds = %1438, %1435
  %1455 = icmp eq i64 %1336, %1375
  br i1 %1455, label %1509, label %1456

1456:                                             ; preds = %1454, %1368, %1365
  %1457 = phi i64 [ %1336, %1368 ], [ %1336, %1365 ], [ %1376, %1454 ]
  %1458 = phi i16* [ %1335, %1368 ], [ %1335, %1365 ], [ %1377, %1454 ]
  %1459 = phi i16* [ %1366, %1368 ], [ %1366, %1365 ], [ %1378, %1454 ]
  %1460 = add i64 %1457, -1
  %1461 = and i64 %1457, 7
  %1462 = icmp eq i64 %1461, 0
  br i1 %1462, label %1474, label %1463

1463:                                             ; preds = %1456, %1463
  %1464 = phi i64 [ %1469, %1463 ], [ %1457, %1456 ]
  %1465 = phi i16* [ %1471, %1463 ], [ %1458, %1456 ]
  %1466 = phi i16* [ %1470, %1463 ], [ %1459, %1456 ]
  %1467 = phi i64 [ %1472, %1463 ], [ %1461, %1456 ]
  %1468 = load i16, i16* %1465, align 2
  store i16 %1468, i16* %1466, align 2
  %1469 = add i64 %1464, -1
  %1470 = getelementptr inbounds i16, i16* %1466, i64 1
  %1471 = getelementptr inbounds i16, i16* %1465, i64 1
  %1472 = add i64 %1467, -1
  %1473 = icmp eq i64 %1472, 0
  br i1 %1473, label %1474, label %1463, !llvm.loop !138

1474:                                             ; preds = %1463, %1456
  %1475 = phi i64 [ %1457, %1456 ], [ %1469, %1463 ]
  %1476 = phi i16* [ %1458, %1456 ], [ %1471, %1463 ]
  %1477 = phi i16* [ %1459, %1456 ], [ %1470, %1463 ]
  %1478 = icmp ult i64 %1460, 7
  br i1 %1478, label %1509, label %1479

1479:                                             ; preds = %1474, %1479
  %1480 = phi i64 [ %1505, %1479 ], [ %1475, %1474 ]
  %1481 = phi i16* [ %1507, %1479 ], [ %1476, %1474 ]
  %1482 = phi i16* [ %1506, %1479 ], [ %1477, %1474 ]
  %1483 = load i16, i16* %1481, align 2
  store i16 %1483, i16* %1482, align 2
  %1484 = getelementptr inbounds i16, i16* %1482, i64 1
  %1485 = getelementptr inbounds i16, i16* %1481, i64 1
  %1486 = load i16, i16* %1485, align 2
  store i16 %1486, i16* %1484, align 2
  %1487 = getelementptr inbounds i16, i16* %1482, i64 2
  %1488 = getelementptr inbounds i16, i16* %1481, i64 2
  %1489 = load i16, i16* %1488, align 2
  store i16 %1489, i16* %1487, align 2
  %1490 = getelementptr inbounds i16, i16* %1482, i64 3
  %1491 = getelementptr inbounds i16, i16* %1481, i64 3
  %1492 = load i16, i16* %1491, align 2
  store i16 %1492, i16* %1490, align 2
  %1493 = getelementptr inbounds i16, i16* %1482, i64 4
  %1494 = getelementptr inbounds i16, i16* %1481, i64 4
  %1495 = load i16, i16* %1494, align 2
  store i16 %1495, i16* %1493, align 2
  %1496 = getelementptr inbounds i16, i16* %1482, i64 5
  %1497 = getelementptr inbounds i16, i16* %1481, i64 5
  %1498 = load i16, i16* %1497, align 2
  store i16 %1498, i16* %1496, align 2
  %1499 = getelementptr inbounds i16, i16* %1482, i64 6
  %1500 = getelementptr inbounds i16, i16* %1481, i64 6
  %1501 = load i16, i16* %1500, align 2
  store i16 %1501, i16* %1499, align 2
  %1502 = getelementptr inbounds i16, i16* %1482, i64 7
  %1503 = getelementptr inbounds i16, i16* %1481, i64 7
  %1504 = load i16, i16* %1503, align 2
  store i16 %1504, i16* %1502, align 2
  %1505 = add i64 %1480, -8
  %1506 = getelementptr inbounds i16, i16* %1482, i64 8
  %1507 = getelementptr inbounds i16, i16* %1481, i64 8
  %1508 = icmp eq i64 %1505, 0
  br i1 %1508, label %1509, label %1479, !llvm.loop !139

1509:                                             ; preds = %1474, %1479, %1454, %1359
  %1510 = phi i16* [ %1363, %1359 ], [ %1366, %1454 ], [ %1366, %1479 ], [ %1366, %1474 ]
  %1511 = getelementptr inbounds i16, i16* %1510, i64 %1336
  store i16 0, i16* %1511, align 2
  %1512 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1337, i64 1
  %1513 = ptrtoint %"class.std::__1::basic_string"* %1512 to i64
  store i64 %1513, i64* %88, align 8
  br label %1515

1514:                                             ; preds = %1331
  call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJN4base16BasicStringPieceIDsS3_EEEEEvDpOT_(%"class.std::__1::vector.63"* nonnull %4, %"class.base::BasicStringPiece.61"* nonnull dereferenceable(16) %14) #13
  br label %1515

1515:                                             ; preds = %1509, %1514
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %85) #13
  br label %1516

1516:                                             ; preds = %1330, %1326, %1283, %1315, %1515
  %1517 = add i64 %323, 1
  %1518 = load i8, i8* %90, align 1
  %1519 = icmp slt i8 %1518, 0
  br i1 %1519, label %1520, label %1522

1520:                                             ; preds = %1516
  %1521 = load i8*, i8** %91, align 8
  call void @_ZdlPv(i8* %1521) #15
  br label %1522

1522:                                             ; preds = %1516, %1520
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #13
  %1523 = load i8, i8* %78, align 1
  %1524 = icmp slt i8 %1523, 0
  br i1 %1524, label %1525, label %1527

1525:                                             ; preds = %1522
  %1526 = load i8*, i8** %75, align 8
  call void @_ZdlPv(i8* %1526) #15
  br label %1527

1527:                                             ; preds = %1522, %1525
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %72) #13
  %1528 = load i8, i8* %71, align 1
  %1529 = icmp slt i8 %1528, 0
  br i1 %1529, label %1530, label %1532

1530:                                             ; preds = %1527
  %1531 = load i8*, i8** %68, align 8
  call void @_ZdlPv(i8* %1531) #15
  br label %1532

1532:                                             ; preds = %1527, %1530
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #13
  %1533 = load i8, i8* %64, align 1
  %1534 = icmp slt i8 %1533, 0
  br i1 %1534, label %1535, label %1537

1535:                                             ; preds = %1532
  %1536 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %1536) #15
  br label %1537

1537:                                             ; preds = %1532, %1535
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #13
  %1538 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %53, align 8
  %1539 = icmp eq %"class.std::__1::basic_string"* %1538, null
  br i1 %1539, label %1560, label %1540

1540:                                             ; preds = %1537
  %1541 = bitcast %"class.std::__1::basic_string"* %1538 to i8*
  %1542 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %54, align 8
  %1543 = icmp eq %"class.std::__1::basic_string"* %1542, %1538
  br i1 %1543, label %1558, label %1544

1544:                                             ; preds = %1540, %1554
  %1545 = phi %"class.std::__1::basic_string"* [ %1546, %1554 ], [ %1542, %1540 ]
  %1546 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1545, i64 -1
  %1547 = bitcast %"class.std::__1::basic_string"* %1546 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1548 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1547, i64 0, i32 1, i32 1
  %1549 = load i8, i8* %1548, align 1
  %1550 = icmp slt i8 %1549, 0
  br i1 %1550, label %1551, label %1554

1551:                                             ; preds = %1544
  %1552 = bitcast %"class.std::__1::basic_string"* %1546 to i8**
  %1553 = load i8*, i8** %1552, align 8
  call void @_ZdlPv(i8* %1553) #15
  br label %1554

1554:                                             ; preds = %1551, %1544
  %1555 = icmp eq %"class.std::__1::basic_string"* %1546, %1538
  br i1 %1555, label %1556, label %1544

1556:                                             ; preds = %1554
  %1557 = load i8*, i8** %92, align 8
  br label %1558

1558:                                             ; preds = %1556, %1540
  %1559 = phi i8* [ %1557, %1556 ], [ %1541, %1540 ]
  store %"class.std::__1::basic_string"* %1538, %"class.std::__1::basic_string"** %54, align 8
  call void @_ZdlPv(i8* %1559) #15
  br label %1560

1560:                                             ; preds = %1537, %1558
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #13
  %1561 = load i8, i8* %50, align 1
  %1562 = icmp slt i8 %1561, 0
  br i1 %1562, label %1563, label %1565

1563:                                             ; preds = %1560
  %1564 = load i8*, i8** %48, align 8
  call void @_ZdlPv(i8* %1564) #15
  br label %1565

1565:                                             ; preds = %1560, %1563
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #13
  br label %1566

1566:                                             ; preds = %522, %337, %523, %1565, %526
  %1567 = phi i64 [ %1517, %1565 ], [ %324, %526 ], [ %324, %523 ], [ 0, %337 ], [ %323, %522 ]
  %1568 = phi i64 [ %323, %1565 ], [ %323, %526 ], [ %323, %523 ], [ 1, %337 ], [ %333, %522 ]
  %1569 = phi i8 [ 0, %1565 ], [ %322, %526 ], [ %322, %523 ], [ 1, %337 ], [ 1, %522 ]
  %1570 = add i64 %1568, 1
  %1571 = load i64, i64* %29, align 8
  %1572 = icmp ult i64 %1570, %1571
  br i1 %1572, label %321, label %102
}

declare void @_ZN4base18CollapseWhitespaceENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEb(%"class.std::__1::basic_string"* sret, i16*, i64, i1 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent28FormatValueFromSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  call void @_ZN8autofill18structured_address16AddressComponent34GetFormattedValueFromSubcomponentsEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.autofill::structured_address::AddressComponent"* %0)
  %3 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %4 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %4, i64 3
  %6 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %5, align 8
  call void %6(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %2, i32 2) #13
  %7 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %8 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %7, i64 0, i32 1, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp slt i8 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = bitcast %"class.std::__1::basic_string"* %2 to i8**
  %13 = load i8*, i8** %12, align 8
  call void @_ZdlPv(i8* %13) #15
  br label %14

14:                                               ; preds = %1, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
declare { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.61"*, i64, i64) local_unnamed_addr #1 align 2

declare void @_ZN4base12UTF16ToASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string.19"* sret, i16*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent16CompleteFullTreeEv(%"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi %"class.autofill::structured_address::AddressComponent"* [ %0, %1 ], [ %5, %2 ]
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %3, i64 0, i32 6
  %5 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"* %5, null
  br i1 %6, label %7, label %2

7:                                                ; preds = %2
  %8 = tail call i32 @_ZNK8autofill18structured_address16AddressComponent57MaximumNumberOfAssignedAddressComponentsOnNodeToLeafPathsEv(%"class.autofill::structured_address::AddressComponent"* %3)
  switch i32 %8, label %19 [
    i32 0, label %20
    i32 1, label %9
  ]

9:                                                ; preds = %7, %9
  %10 = phi %"class.autofill::structured_address::AddressComponent"* [ %12, %9 ], [ %0, %7 ]
  %11 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %10, i64 0, i32 6
  %12 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %11, align 8
  %13 = icmp eq %"class.autofill::structured_address::AddressComponent"* %12, null
  br i1 %13, label %14, label %9

14:                                               ; preds = %9
  %15 = bitcast %"class.autofill::structured_address::AddressComponent"* %10 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %16 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %16, i64 5
  %18 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %17, align 8
  tail call void %18(%"class.autofill::structured_address::AddressComponent"* %10) #13
  br label %20

19:                                               ; preds = %7
  br label %20

20:                                               ; preds = %7, %19, %14
  %21 = phi i1 [ false, %19 ], [ true, %14 ], [ true, %7 ]
  ret i1 %21
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden dereferenceable(120) %"class.autofill::structured_address::AddressComponent"* @_ZN8autofill18structured_address16AddressComponent11GetRootNodeEv(%"class.autofill::structured_address::AddressComponent"* readonly) local_unnamed_addr #7 align 2 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi %"class.autofill::structured_address::AddressComponent"* [ %0, %1 ], [ %5, %2 ]
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %3, i64 0, i32 6
  %5 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"* %5, null
  br i1 %6, label %7, label %2

7:                                                ; preds = %2
  ret %"class.autofill::structured_address::AddressComponent"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8autofill18structured_address16AddressComponent57MaximumNumberOfAssignedAddressComponentsOnNodeToLeafPathsEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %2, align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %5 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"** %3, %5
  br i1 %6, label %7, label %32

7:                                                ; preds = %32, %1
  %8 = phi i32 [ 0, %1 ], [ %38, %32 ]
  %9 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %16

14:                                               ; preds = %7
  %15 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi %"class.std::__1::basic_string"* [ %13, %12 ], [ %15, %14 ]
  %18 = bitcast %"class.std::__1::basic_string"* %17 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  br label %27

25:                                               ; preds = %16
  %26 = zext i8 %20 to i64
  br label %27

27:                                               ; preds = %22, %25
  %28 = phi i64 [ %24, %22 ], [ %26, %25 ]
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i32
  %31 = add nsw i32 %8, %30
  ret i32 %31

32:                                               ; preds = %1, %32
  %33 = phi i32 [ %38, %32 ], [ 0, %1 ]
  %34 = phi %"class.autofill::structured_address::AddressComponent"** [ %39, %32 ], [ %3, %1 ]
  %35 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %34, align 8
  %36 = tail call i32 @_ZNK8autofill18structured_address16AddressComponent57MaximumNumberOfAssignedAddressComponentsOnNodeToLeafPathsEv(%"class.autofill::structured_address::AddressComponent"* %35)
  %37 = icmp slt i32 %33, %36
  %38 = select i1 %37, i32 %36, i32 %33
  %39 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %34, i64 1
  %40 = icmp eq %"class.autofill::structured_address::AddressComponent"** %39, %5
  br i1 %40, label %7, label %32
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent23RecursivelyCompleteTreeEv(%"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %3, align 8
  %5 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %6 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %5, align 8
  %7 = icmp eq %"class.autofill::structured_address::AddressComponent"** %4, %6
  br i1 %7, label %82, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %10 = load i8, i8* %9, align 8, !range !2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %14, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %16

14:                                               ; preds = %8
  %15 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %16

16:                                               ; preds = %12, %14
  %17 = phi %"class.std::__1::basic_string"* [ %13, %12 ], [ %15, %14 ]
  %18 = bitcast %"class.std::__1::basic_string"* %17 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp slt i8 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  br label %27

25:                                               ; preds = %16
  %26 = zext i8 %20 to i64
  br label %27

27:                                               ; preds = %22, %25
  %28 = phi i64 [ %24, %22 ], [ %26, %25 ]
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %27
  %31 = tail call i32 @_ZNK8autofill18structured_address16AddressComponent57MaximumNumberOfAssignedAddressComponentsOnNodeToLeafPathsEv(%"class.autofill::structured_address::AddressComponent"* %0)
  %32 = icmp eq i32 %31, 1
  br i1 %32, label %33, label %34

33:                                               ; preds = %30
  tail call void @_ZN8autofill18structured_address16AddressComponent32ParseValueAndAssignSubcomponentsEv(%"class.autofill::structured_address::AddressComponent"* %0)
  br label %34

34:                                               ; preds = %33, %30, %27
  %35 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %3, align 8
  %36 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %5, align 8
  %37 = icmp eq %"class.autofill::structured_address::AddressComponent"** %35, %36
  br i1 %37, label %38, label %59

38:                                               ; preds = %59, %34
  %39 = load i8, i8* %9, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %45

43:                                               ; preds = %38
  %44 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %45

45:                                               ; preds = %41, %43
  %46 = phi %"class.std::__1::basic_string"* [ %42, %41 ], [ %44, %43 ]
  %47 = bitcast %"class.std::__1::basic_string"* %46 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %47, i64 0, i32 1, i32 1
  %49 = load i8, i8* %48, align 1
  %50 = icmp slt i8 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %45
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %46, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  br label %56

54:                                               ; preds = %45
  %55 = zext i8 %49 to i64
  br label %56

56:                                               ; preds = %51, %54
  %57 = phi i64 [ %53, %51 ], [ %55, %54 ]
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %68, label %82

59:                                               ; preds = %34, %59
  %60 = phi %"class.autofill::structured_address::AddressComponent"** [ %66, %59 ], [ %35, %34 ]
  %61 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %60, align 8
  %62 = bitcast %"class.autofill::structured_address::AddressComponent"* %61 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %63 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %62, align 8
  %64 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %63, i64 5
  %65 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %64, align 8
  tail call void %65(%"class.autofill::structured_address::AddressComponent"* %61) #13
  %66 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %60, i64 1
  %67 = icmp eq %"class.autofill::structured_address::AddressComponent"** %66, %36
  br i1 %67, label %38, label %59

68:                                               ; preds = %56
  %69 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69)
  call void @_ZN8autofill18structured_address16AddressComponent34GetFormattedValueFromSubcomponentsEv(%"class.std::__1::basic_string"* nonnull sret %2, %"class.autofill::structured_address::AddressComponent"* %0) #13
  %70 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %71 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %70, align 8
  %72 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %71, i64 3
  %73 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %72, align 8
  call void %73(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %2, i32 2) #13
  %74 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %74, i64 0, i32 1, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %68
  %79 = bitcast %"class.std::__1::basic_string"* %2 to i8**
  %80 = load i8*, i8** %79, align 8
  call void @_ZdlPv(i8* %80) #15
  br label %81

81:                                               ; preds = %68, %78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69)
  br label %82

82:                                               ; preds = %1, %81, %56
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent17IsTreeCompletableEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = tail call i32 @_ZNK8autofill18structured_address16AddressComponent57MaximumNumberOfAssignedAddressComponentsOnNodeToLeafPathsEv(%"class.autofill::structured_address::AddressComponent"* %0)
  %3 = icmp slt i32 %2, 2
  ret i1 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden dereferenceable(120) %"class.autofill::structured_address::AddressComponent"* @_ZNK8autofill18structured_address16AddressComponent11GetRootNodeEv(%"class.autofill::structured_address::AddressComponent"* readonly) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 6
  %3 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %2, align 8
  %4 = icmp eq %"class.autofill::structured_address::AddressComponent"* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = tail call dereferenceable(120) %"class.autofill::structured_address::AddressComponent"* @_ZN8autofill18structured_address16AddressComponent11GetRootNodeEv(%"class.autofill::structured_address::AddressComponent"* nonnull %3)
  br label %7

7:                                                ; preds = %1, %5
  %8 = phi %"class.autofill::structured_address::AddressComponent"* [ %6, %5 ], [ %0, %1 ]
  ret %"class.autofill::structured_address::AddressComponent"* %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent40RecursivelyUnsetParsedAndFormattedValuesEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 8, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = icmp ult i32 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %5
  %11 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*)***
  %12 = load void (%"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %12, i64 4
  %14 = load void (%"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*)** %13, align 8
  tail call void %14(%"class.autofill::structured_address::AddressComponent"* %0) #13
  br label %15

15:                                               ; preds = %1, %5, %10
  %16 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %17 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %16, align 8
  %18 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %19 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %18, align 8
  %20 = icmp eq %"class.autofill::structured_address::AddressComponent"** %17, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %22, %15
  ret void

22:                                               ; preds = %15, %22
  %23 = phi %"class.autofill::structured_address::AddressComponent"** [ %25, %22 ], [ %17, %15 ]
  %24 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %23, align 8
  tail call void @_ZN8autofill18structured_address16AddressComponent40RecursivelyUnsetParsedAndFormattedValuesEv(%"class.autofill::structured_address::AddressComponent"* %24)
  %25 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %23, i64 1
  %26 = icmp eq %"class.autofill::structured_address::AddressComponent"** %25, %19
  br i1 %26, label %21, label %22
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent41UnsetParsedAndFormattedValuesInEntireTreeEv(%"class.autofill::structured_address::AddressComponent"*) local_unnamed_addr #1 align 2 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi %"class.autofill::structured_address::AddressComponent"* [ %0, %1 ], [ %5, %2 ]
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %3, i64 0, i32 6
  %5 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %4, align 8
  %6 = icmp eq %"class.autofill::structured_address::AddressComponent"* %5, null
  br i1 %6, label %7, label %2

7:                                                ; preds = %2
  tail call void @_ZN8autofill18structured_address16AddressComponent40RecursivelyUnsetParsedAndFormattedValuesEv(%"class.autofill::structured_address::AddressComponent"* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent25MergeVerificationStatusesERKS1_(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %67, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %15

13:                                               ; preds = %6
  %14 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi %"class.std::__1::basic_string"* [ %12, %11 ], [ %14, %13 ]
  %17 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %17, i64 0, i32 1, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  %21 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = zext i8 %19 to i64
  %24 = select i1 %20, i64 %22, i64 %23
  %25 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %25, i64 0, i32 1, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = icmp slt i8 %27, 0
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = zext i8 %27 to i64
  %32 = select i1 %28, i64 %30, i64 %31
  %33 = icmp eq i64 %24, %32
  br i1 %33, label %34, label %67

34:                                               ; preds = %15
  %35 = icmp eq i64 %24, 0
  br i1 %35, label %57, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = load i16*, i16** %37, align 8
  %39 = bitcast %"class.std::__1::basic_string"* %16 to i16*
  %40 = select i1 %28, i16* %38, i16* %39
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load i16*, i16** %41, align 8
  %43 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %44 = select i1 %20, i16* %42, i16* %43
  br label %45

45:                                               ; preds = %52, %36
  %46 = phi i64 [ %53, %52 ], [ %24, %36 ]
  %47 = phi i16* [ %55, %52 ], [ %40, %36 ]
  %48 = phi i16* [ %54, %52 ], [ %44, %36 ]
  %49 = load i16, i16* %48, align 2
  %50 = load i16, i16* %47, align 2
  %51 = icmp eq i16 %50, %49
  br i1 %51, label %52, label %67

52:                                               ; preds = %45
  %53 = add i64 %46, -1
  %54 = getelementptr inbounds i16, i16* %48, i64 1
  %55 = getelementptr inbounds i16, i16* %47, i64 1
  %56 = icmp eq i64 %53, 0
  br i1 %56, label %57, label %45

57:                                               ; preds = %52, %34
  %58 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %59 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %58, align 8
  %60 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %59, i64 24
  %61 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %60, align 8
  %62 = tail call zeroext i1 %61(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1) #13
  br i1 %62, label %63, label %67

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  store i32 %65, i32* %66, align 8
  br label %67

67:                                               ; preds = %45, %2, %15, %63, %57
  %68 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %69 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %70 = bitcast %"class.autofill::structured_address::AddressComponent"*** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.std::__1::vector"* %68 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = icmp eq i64 %71, %73
  br i1 %74, label %77, label %75

75:                                               ; preds = %67
  %76 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  br label %78

77:                                               ; preds = %78, %67
  ret void

78:                                               ; preds = %75, %78
  %79 = phi i64 [ %73, %75 ], [ %93, %78 ]
  %80 = phi i64 [ 0, %75 ], [ %91, %78 ]
  %81 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %76, align 8
  %82 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %81, i64 %80
  %83 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %82, align 8
  %84 = inttoptr i64 %79 to %"class.autofill::structured_address::AddressComponent"**
  %85 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %84, i64 %80
  %86 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %85, align 8
  %87 = bitcast %"class.autofill::structured_address::AddressComponent"* %83 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %88 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %87, align 8
  %89 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %88, i64 9
  %90 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %89, align 8
  tail call void %90(%"class.autofill::structured_address::AddressComponent"* %83, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %86) #13
  %91 = add nuw i64 %80, 1
  %92 = load i64, i64* %70, align 8
  %93 = load i64, i64* %72, align 8
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 3
  %96 = icmp ult i64 %91, %95
  br i1 %96, label %78, label %77
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent15GetSortedTokensEv(%"class.std::__1::vector.12"* noalias sret, %"class.autofill::structured_address::AddressComponent"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %11

9:                                                ; preds = %2
  %10 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %11

11:                                               ; preds = %7, %9
  %12 = phi %"class.std::__1::basic_string"* [ %8, %7 ], [ %10, %9 ]
  %13 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %19 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* align 8 %19, i64 24, i1 false) #13
  br label %195

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %24, 11
  br i1 %25, label %26, label %31

26:                                               ; preds = %20
  %27 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %28 = trunc i64 %24 to i8
  %29 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %29, i64 0, i32 1, i32 1
  store i8 %28, i8* %30, align 1
  br label %48

31:                                               ; preds = %20
  %32 = icmp ugt i64 %24, 9223372036854775791
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %34) #14
  unreachable

35:                                               ; preds = %31
  %36 = add nuw nsw i64 %24, 8
  %37 = and i64 %36, -8
  %38 = icmp slt i64 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @abort() #14
  unreachable

40:                                               ; preds = %35
  %41 = shl i64 %37, 1
  %42 = tail call i8* @_Znwm(i64 %41) #15
  %43 = bitcast i8* %42 to i16*
  %44 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  store i8* %42, i8** %44, align 8
  %45 = or i64 %37, -9223372036854775808
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %24, i64* %47, align 8
  br label %48

48:                                               ; preds = %40, %26
  %49 = phi i16* [ %27, %26 ], [ %43, %40 ]
  %50 = add nuw nsw i64 %24, 1
  %51 = add i64 %24, 1
  %52 = icmp ult i64 %51, 16
  br i1 %52, label %142, label %53

53:                                               ; preds = %48
  %54 = add i64 %24, 1
  %55 = getelementptr i16, i16* %49, i64 %54
  %56 = getelementptr i16, i16* %22, i64 %54
  %57 = icmp ult i16* %49, %56
  %58 = icmp ult i16* %22, %55
  %59 = and i1 %57, %58
  br i1 %59, label %142, label %60

60:                                               ; preds = %53
  %61 = and i64 %51, -16
  %62 = sub i64 %50, %61
  %63 = getelementptr i16, i16* %22, i64 %61
  %64 = getelementptr i16, i16* %49, i64 %61
  %65 = add i64 %61, -16
  %66 = lshr exact i64 %65, 4
  %67 = add nuw nsw i64 %66, 1
  %68 = and i64 %67, 3
  %69 = icmp ult i64 %65, 48
  br i1 %69, label %121, label %70

70:                                               ; preds = %60
  %71 = sub nsw i64 %67, %68
  br label %72

72:                                               ; preds = %72, %70
  %73 = phi i64 [ 0, %70 ], [ %118, %72 ]
  %74 = phi i64 [ %71, %70 ], [ %119, %72 ]
  %75 = getelementptr i16, i16* %22, i64 %73
  %76 = getelementptr i16, i16* %49, i64 %73
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !140
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !140
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !143, !noalias !140
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !143, !noalias !140
  %85 = or i64 %73, 16
  %86 = getelementptr i16, i16* %22, i64 %85
  %87 = getelementptr i16, i16* %49, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !140
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !140
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !143, !noalias !140
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !143, !noalias !140
  %96 = or i64 %73, 32
  %97 = getelementptr i16, i16* %22, i64 %96
  %98 = getelementptr i16, i16* %49, i64 %96
  %99 = bitcast i16* %97 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !140
  %101 = getelementptr i16, i16* %97, i64 8
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !140
  %104 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %104, align 2, !alias.scope !143, !noalias !140
  %105 = getelementptr i16, i16* %98, i64 8
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %106, align 2, !alias.scope !143, !noalias !140
  %107 = or i64 %73, 48
  %108 = getelementptr i16, i16* %22, i64 %107
  %109 = getelementptr i16, i16* %49, i64 %107
  %110 = bitcast i16* %108 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !140
  %112 = getelementptr i16, i16* %108, i64 8
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !140
  %115 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %115, align 2, !alias.scope !143, !noalias !140
  %116 = getelementptr i16, i16* %109, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %117, align 2, !alias.scope !143, !noalias !140
  %118 = add i64 %73, 64
  %119 = add i64 %74, -4
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %72, !llvm.loop !145

121:                                              ; preds = %72, %60
  %122 = phi i64 [ 0, %60 ], [ %118, %72 ]
  %123 = icmp eq i64 %68, 0
  br i1 %123, label %140, label %124

124:                                              ; preds = %121, %124
  %125 = phi i64 [ %137, %124 ], [ %122, %121 ]
  %126 = phi i64 [ %138, %124 ], [ %68, %121 ]
  %127 = getelementptr i16, i16* %22, i64 %125
  %128 = getelementptr i16, i16* %49, i64 %125
  %129 = bitcast i16* %127 to <8 x i16>*
  %130 = load <8 x i16>, <8 x i16>* %129, align 2, !alias.scope !140
  %131 = getelementptr i16, i16* %127, i64 8
  %132 = bitcast i16* %131 to <8 x i16>*
  %133 = load <8 x i16>, <8 x i16>* %132, align 2, !alias.scope !140
  %134 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %130, <8 x i16>* %134, align 2, !alias.scope !143, !noalias !140
  %135 = getelementptr i16, i16* %128, i64 8
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> %133, <8 x i16>* %136, align 2, !alias.scope !143, !noalias !140
  %137 = add i64 %125, 16
  %138 = add i64 %126, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %124, !llvm.loop !146

140:                                              ; preds = %124, %121
  %141 = icmp eq i64 %51, %61
  br i1 %141, label %195, label %142

142:                                              ; preds = %140, %53, %48
  %143 = phi i64 [ %50, %53 ], [ %50, %48 ], [ %62, %140 ]
  %144 = phi i16* [ %22, %53 ], [ %22, %48 ], [ %63, %140 ]
  %145 = phi i16* [ %49, %53 ], [ %49, %48 ], [ %64, %140 ]
  %146 = add i64 %143, -1
  %147 = and i64 %143, 7
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %160, label %149

149:                                              ; preds = %142, %149
  %150 = phi i64 [ %155, %149 ], [ %143, %142 ]
  %151 = phi i16* [ %157, %149 ], [ %144, %142 ]
  %152 = phi i16* [ %156, %149 ], [ %145, %142 ]
  %153 = phi i64 [ %158, %149 ], [ %147, %142 ]
  %154 = load i16, i16* %151, align 2
  store i16 %154, i16* %152, align 2
  %155 = add i64 %150, -1
  %156 = getelementptr inbounds i16, i16* %152, i64 1
  %157 = getelementptr inbounds i16, i16* %151, i64 1
  %158 = add i64 %153, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %149, !llvm.loop !147

160:                                              ; preds = %149, %142
  %161 = phi i64 [ %143, %142 ], [ %155, %149 ]
  %162 = phi i16* [ %144, %142 ], [ %157, %149 ]
  %163 = phi i16* [ %145, %142 ], [ %156, %149 ]
  %164 = icmp ult i64 %146, 7
  br i1 %164, label %195, label %165

165:                                              ; preds = %160, %165
  %166 = phi i64 [ %191, %165 ], [ %161, %160 ]
  %167 = phi i16* [ %193, %165 ], [ %162, %160 ]
  %168 = phi i16* [ %192, %165 ], [ %163, %160 ]
  %169 = load i16, i16* %167, align 2
  store i16 %169, i16* %168, align 2
  %170 = getelementptr inbounds i16, i16* %168, i64 1
  %171 = getelementptr inbounds i16, i16* %167, i64 1
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %168, i64 2
  %174 = getelementptr inbounds i16, i16* %167, i64 2
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %168, i64 3
  %177 = getelementptr inbounds i16, i16* %167, i64 3
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %168, i64 4
  %180 = getelementptr inbounds i16, i16* %167, i64 4
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %168, i64 5
  %183 = getelementptr inbounds i16, i16* %167, i64 5
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = getelementptr inbounds i16, i16* %168, i64 6
  %186 = getelementptr inbounds i16, i16* %167, i64 6
  %187 = load i16, i16* %186, align 2
  store i16 %187, i16* %185, align 2
  %188 = getelementptr inbounds i16, i16* %168, i64 7
  %189 = getelementptr inbounds i16, i16* %167, i64 7
  %190 = load i16, i16* %189, align 2
  store i16 %190, i16* %188, align 2
  %191 = add i64 %166, -8
  %192 = getelementptr inbounds i16, i16* %168, i64 8
  %193 = getelementptr inbounds i16, i16* %167, i64 8
  %194 = icmp eq i64 %191, 0
  br i1 %194, label %195, label %165, !llvm.loop !148

195:                                              ; preds = %160, %165, %140, %17
  call void @_ZN8autofill18structured_address13TokenizeValueENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.std::__1::vector.12"* sret %0, %"class.std::__1::basic_string"* nonnull %3) #13
  %196 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %197 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %196, i64 0, i32 1, i32 1
  %198 = load i8, i8* %197, align 1
  %199 = icmp slt i8 %198, 0
  br i1 %199, label %200, label %203

200:                                              ; preds = %195
  %201 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %202 = load i8*, i8** %201, align 8
  call void @_ZdlPv(i8* %202) #15
  br label %203

203:                                              ; preds = %195, %200
  ret void
}

declare void @_ZN8autofill18structured_address13TokenizeValueENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.std::__1::vector.12"* sret, %"class.std::__1::basic_string"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent24IsMergeableWithComponentERKS1_(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120)) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"struct.autofill::structured_address::SortedTokenComparisonResult", align 8
  %8 = alloca %"struct.autofill::structured_address::SortedTokenComparisonResult", align 8
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %13 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 24, i1 false)
  %14 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %12, align 8
  %15 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %14, i64 23
  %16 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %15, align 8
  call void %16(%"class.std::__1::basic_string"* nonnull sret %3, %"class.autofill::structured_address::AddressComponent"* %0) #13
  %17 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #13
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.autofill::structured_address::AddressComponent"* %1 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %21 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 24, i1 false)
  %22 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %20, align 8
  %23 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %22, i64 23
  %24 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %23, align 8
  call void %24(%"class.std::__1::basic_string"* nonnull sret %4, %"class.autofill::structured_address::AddressComponent"* %1) #13
  %25 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent6SameAsERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br i1 %25, label %352, label %26

26:                                               ; preds = %2
  %27 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 7
  %28 = load i32, i32* %27, align 8
  %29 = and i32 %28, 544
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %352

31:                                               ; preds = %26
  %32 = and i32 %28, 1
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %52, label %34

34:                                               ; preds = %31
  %35 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %35, i64 0, i32 1, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  %39 = load i64, i64* %11, align 8
  %40 = zext i8 %37 to i64
  %41 = select i1 %38, i64 %39, i64 %40
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %352, label %43

43:                                               ; preds = %34
  %44 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %45 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %44, i64 0, i32 1, i32 1
  %46 = load i8, i8* %45, align 1
  %47 = icmp slt i8 %46, 0
  %48 = load i64, i64* %19, align 8
  %49 = zext i8 %46 to i64
  %50 = select i1 %47, i64 %48, i64 %49
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %352, label %52

52:                                               ; preds = %31, %43
  %53 = and i32 %28, 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %131, label %55

55:                                               ; preds = %52
  %56 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #13
  %57 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %58 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %57, i64 0, i32 1, i32 1
  %59 = load i8, i8* %58, align 1
  %60 = icmp slt i8 %59, 0
  %61 = load i16*, i16** %10, align 8
  %62 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %63 = select i1 %60, i16* %61, i16* %62
  %64 = load i64, i64* %11, align 8
  %65 = zext i8 %59 to i64
  %66 = select i1 %60, i64 %64, i64 %65
  call void @_ZN4base12ToUpperASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %5, i16* %63, i64 %66) #13
  %67 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %67) #13
  %68 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %68, i64 0, i32 1, i32 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  %72 = load i16*, i16** %18, align 8
  %73 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %74 = select i1 %71, i16* %72, i16* %73
  %75 = load i64, i64* %19, align 8
  %76 = zext i8 %70 to i64
  %77 = select i1 %71, i64 %75, i64 %76
  call void @_ZN4base12ToUpperASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %6, i16* %74, i64 %77) #13
  %78 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %79 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %78, i64 0, i32 1, i32 1
  %80 = load i8, i8* %79, align 1
  %81 = icmp slt i8 %80, 0
  %82 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = zext i8 %80 to i64
  %85 = select i1 %81, i64 %83, i64 %84
  %86 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %87 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %86, i64 0, i32 1, i32 1
  %88 = load i8, i8* %87, align 1
  %89 = icmp slt i8 %88, 0
  %90 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = zext i8 %88 to i64
  %93 = select i1 %89, i64 %91, i64 %92
  %94 = icmp eq i64 %85, %93
  br i1 %94, label %95, label %118

95:                                               ; preds = %55
  %96 = icmp eq i64 %85, 0
  br i1 %96, label %118, label %97

97:                                               ; preds = %95
  %98 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i16*, i16** %98, align 8
  %100 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %101 = select i1 %89, i16* %99, i16* %100
  %102 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load i16*, i16** %102, align 8
  %104 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %105 = select i1 %81, i16* %103, i16* %104
  br label %106

106:                                              ; preds = %113, %97
  %107 = phi i64 [ %114, %113 ], [ %85, %97 ]
  %108 = phi i16* [ %116, %113 ], [ %101, %97 ]
  %109 = phi i16* [ %115, %113 ], [ %105, %97 ]
  %110 = load i16, i16* %109, align 2
  %111 = load i16, i16* %108, align 2
  %112 = icmp eq i16 %111, %110
  br i1 %112, label %113, label %118

113:                                              ; preds = %106
  %114 = add i64 %107, -1
  %115 = getelementptr inbounds i16, i16* %109, i64 1
  %116 = getelementptr inbounds i16, i16* %108, i64 1
  %117 = icmp eq i64 %114, 0
  br i1 %117, label %118, label %106

118:                                              ; preds = %106, %113, %55, %95
  %119 = phi i1 [ false, %55 ], [ true, %95 ], [ true, %113 ], [ false, %106 ]
  br i1 %89, label %120, label %124

120:                                              ; preds = %118
  %121 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %122 = load i8*, i8** %121, align 8
  call void @_ZdlPv(i8* %122) #15
  %123 = load i8, i8* %79, align 1
  br label %124

124:                                              ; preds = %118, %120
  %125 = phi i8 [ %80, %118 ], [ %123, %120 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %67) #13
  %126 = icmp slt i8 %125, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %124
  %128 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %129 = load i8*, i8** %128, align 8
  call void @_ZdlPv(i8* %129) #15
  br label %130

130:                                              ; preds = %124, %127
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #13
  br i1 %119, label %352, label %131

131:                                              ; preds = %52, %130
  %132 = bitcast %"struct.autofill::structured_address::SortedTokenComparisonResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %132) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %132, i8 -86, i64 32, i1 false)
  call void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull sret %7, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %3, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #13
  %133 = load i32, i32* %27, align 8
  %134 = and i32 %133, 66
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %140, label %136

136:                                              ; preds = %131
  %137 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %7, i64 0, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %350, label %140

140:                                              ; preds = %131, %136
  %141 = and i32 %133, 24
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %151, label %143

143:                                              ; preds = %140
  %144 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult11OneIsSubsetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  br i1 %144, label %350, label %145

145:                                              ; preds = %143
  %146 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %7, i64 0, i32 0
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %147, 1
  br i1 %148, label %350, label %149

149:                                              ; preds = %145
  %150 = load i32, i32* %27, align 8
  br label %151

151:                                              ; preds = %149, %140
  %152 = phi i32 [ %150, %149 ], [ %133, %140 ]
  %153 = and i32 %152, 64
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %178, label %155

155:                                              ; preds = %151
  %156 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult21IsSingleTokenSupersetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  br i1 %156, label %157, label %178

157:                                              ; preds = %155
  %158 = bitcast %"struct.autofill::structured_address::SortedTokenComparisonResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %158) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %158, i8 -86, i64 32, i1 false)
  %159 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %160 = load i8, i8* %159, align 8, !range !2
  %161 = icmp eq i8 %160, 0
  br i1 %161, label %164, label %162

162:                                              ; preds = %157
  %163 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %166

164:                                              ; preds = %157
  %165 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %166

166:                                              ; preds = %162, %164
  %167 = phi %"class.std::__1::basic_string"* [ %163, %162 ], [ %165, %164 ]
  %168 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %169 = load i8, i8* %168, align 8, !range !2
  %170 = icmp eq i8 %169, 0
  br i1 %170, label %173, label %171

171:                                              ; preds = %166
  %172 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %175

173:                                              ; preds = %166
  %174 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %175

175:                                              ; preds = %171, %173
  %176 = phi %"class.std::__1::basic_string"* [ %172, %171 ], [ %174, %173 ]
  call void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull sret %8, %"class.std::__1::basic_string"* dereferenceable(24) %167, %"class.std::__1::basic_string"* dereferenceable(24) %176) #13
  %177 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult21IsSingleTokenSupersetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %8) #13
  call void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %158) #13
  br i1 %177, label %350, label %178

178:                                              ; preds = %175, %151, %155
  %179 = load i32, i32* %27, align 8
  %180 = trunc i32 %179 to i8
  %181 = icmp slt i8 %180, 0
  br i1 %181, label %182, label %308

182:                                              ; preds = %178
  %183 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %184 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %183, i64 0, i32 1, i32 1
  %185 = load i8, i8* %184, align 1
  %186 = icmp slt i8 %185, 0
  %187 = load i16*, i16** %10, align 8
  %188 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %189 = select i1 %186, i16* %187, i16* %188
  %190 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %191 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %190, i64 0, i32 1, i32 1
  %192 = load i8, i8* %191, align 1
  %193 = icmp slt i8 %192, 0
  %194 = load i16*, i16** %18, align 8
  %195 = load i64, i64* %19, align 8
  %196 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %197 = zext i8 %192 to i64
  %198 = select i1 %193, i16* %194, i16* %196
  %199 = select i1 %193, i64 %195, i64 %197
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %350, label %201

201:                                              ; preds = %182
  %202 = load i64, i64* %11, align 8
  %203 = zext i8 %185 to i64
  %204 = select i1 %186, i64 %202, i64 %203
  %205 = getelementptr inbounds i16, i16* %189, i64 %204
  %206 = shl nuw i64 %199, 1
  %207 = ashr exact i64 %206, 1
  %208 = ptrtoint i16* %205 to i64
  %209 = ptrtoint i16* %189 to i64
  %210 = shl nuw i64 %204, 1
  %211 = ashr exact i64 %210, 1
  %212 = icmp slt i64 %211, %207
  br i1 %212, label %258, label %213

213:                                              ; preds = %201
  %214 = load i16, i16* %198, align 2
  br label %215

215:                                              ; preds = %244, %213
  %216 = phi i64 [ %211, %213 ], [ %248, %244 ]
  %217 = phi i16* [ %189, %213 ], [ %245, %244 ]
  %218 = sub nsw i64 %216, %207
  %219 = add nsw i64 %218, 1
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %258, label %221

221:                                              ; preds = %215, %226
  %222 = phi i64 [ %228, %226 ], [ %219, %215 ]
  %223 = phi i16* [ %227, %226 ], [ %217, %215 ]
  %224 = load i16, i16* %223, align 2
  %225 = icmp eq i16 %224, %214
  br i1 %225, label %230, label %226

226:                                              ; preds = %221
  %227 = getelementptr inbounds i16, i16* %223, i64 1
  %228 = add i64 %222, -1
  %229 = icmp eq i64 %228, 0
  br i1 %229, label %258, label %221

230:                                              ; preds = %221
  %231 = icmp eq i16* %223, null
  br i1 %231, label %258, label %232

232:                                              ; preds = %230, %239
  %233 = phi i16* [ %237, %239 ], [ %223, %230 ]
  %234 = phi i16* [ %240, %239 ], [ %198, %230 ]
  %235 = phi i64 [ %236, %239 ], [ %207, %230 ]
  %236 = add i64 %235, -1
  %237 = getelementptr inbounds i16, i16* %233, i64 1
  %238 = icmp eq i64 %236, 0
  br i1 %238, label %250, label %239

239:                                              ; preds = %232
  %240 = getelementptr inbounds i16, i16* %234, i64 1
  %241 = load i16, i16* %237, align 2
  %242 = load i16, i16* %240, align 2
  %243 = icmp eq i16 %242, %241
  br i1 %243, label %232, label %244

244:                                              ; preds = %239
  %245 = getelementptr inbounds i16, i16* %223, i64 1
  %246 = ptrtoint i16* %245 to i64
  %247 = sub i64 %208, %246
  %248 = ashr exact i64 %247, 1
  %249 = icmp slt i64 %248, %207
  br i1 %249, label %258, label %215

250:                                              ; preds = %232
  %251 = ptrtoint i16* %223 to i64
  %252 = icmp ne i16* %223, %205
  %253 = sub i64 %251, %209
  %254 = icmp ne i64 %253, -2
  %255 = and i1 %254, %252
  %256 = icmp eq i64 %204, 0
  %257 = or i1 %255, %256
  br i1 %257, label %350, label %260

258:                                              ; preds = %244, %230, %215, %226, %201
  %259 = icmp eq i64 %204, 0
  br i1 %259, label %350, label %260

260:                                              ; preds = %250, %258
  %261 = getelementptr inbounds i16, i16* %198, i64 %199
  %262 = ptrtoint i16* %261 to i64
  %263 = ptrtoint i16* %198 to i64
  %264 = icmp slt i64 %207, %211
  br i1 %264, label %308, label %265

265:                                              ; preds = %260
  %266 = load i16, i16* %189, align 2
  br label %267

267:                                              ; preds = %296, %265
  %268 = phi i64 [ %207, %265 ], [ %300, %296 ]
  %269 = phi i16* [ %198, %265 ], [ %297, %296 ]
  %270 = sub nsw i64 %268, %211
  %271 = add nsw i64 %270, 1
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %308, label %273

273:                                              ; preds = %267, %278
  %274 = phi i64 [ %280, %278 ], [ %271, %267 ]
  %275 = phi i16* [ %279, %278 ], [ %269, %267 ]
  %276 = load i16, i16* %275, align 2
  %277 = icmp eq i16 %276, %266
  br i1 %277, label %282, label %278

278:                                              ; preds = %273
  %279 = getelementptr inbounds i16, i16* %275, i64 1
  %280 = add i64 %274, -1
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %308, label %273

282:                                              ; preds = %273
  %283 = icmp eq i16* %275, null
  br i1 %283, label %308, label %284

284:                                              ; preds = %282, %291
  %285 = phi i16* [ %289, %291 ], [ %275, %282 ]
  %286 = phi i16* [ %292, %291 ], [ %189, %282 ]
  %287 = phi i64 [ %288, %291 ], [ %211, %282 ]
  %288 = add i64 %287, -1
  %289 = getelementptr inbounds i16, i16* %285, i64 1
  %290 = icmp eq i64 %288, 0
  br i1 %290, label %302, label %291

291:                                              ; preds = %284
  %292 = getelementptr inbounds i16, i16* %286, i64 1
  %293 = load i16, i16* %289, align 2
  %294 = load i16, i16* %292, align 2
  %295 = icmp eq i16 %294, %293
  br i1 %295, label %284, label %296

296:                                              ; preds = %291
  %297 = getelementptr inbounds i16, i16* %275, i64 1
  %298 = ptrtoint i16* %297 to i64
  %299 = sub i64 %262, %298
  %300 = ashr exact i64 %299, 1
  %301 = icmp slt i64 %300, %211
  br i1 %301, label %308, label %267

302:                                              ; preds = %284
  %303 = ptrtoint i16* %275 to i64
  %304 = icmp eq i16* %275, %261
  %305 = sub i64 %303, %263
  %306 = icmp eq i64 %305, -2
  %307 = or i1 %304, %306
  br i1 %307, label %308, label %350

308:                                              ; preds = %296, %282, %267, %278, %260, %302, %178
  %309 = and i32 %179, 256
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %315, label %311

311:                                              ; preds = %308
  %312 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult16ContainEachOtherEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  br i1 %312, label %350, label %313

313:                                              ; preds = %311
  %314 = load i32, i32* %27, align 8
  br label %315

315:                                              ; preds = %313, %308
  %316 = phi i32 [ %314, %313 ], [ %179, %308 ]
  %317 = and i32 %316, 1024
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %350, label %319

319:                                              ; preds = %315
  %320 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %321 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %322 = bitcast %"class.autofill::structured_address::AddressComponent"*** %321 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = bitcast %"class.std::__1::vector"* %320 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = icmp eq i64 %323, %325
  br i1 %326, label %350, label %327

327:                                              ; preds = %319
  %328 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  br label %335

329:                                              ; preds = %335
  %330 = load i64, i64* %322, align 8
  %331 = load i64, i64* %324, align 8
  %332 = sub i64 %330, %331
  %333 = ashr exact i64 %332, 3
  %334 = icmp ult i64 %349, %333
  br i1 %334, label %335, label %350

335:                                              ; preds = %327, %329
  %336 = phi i64 [ %325, %327 ], [ %331, %329 ]
  %337 = phi i64 [ 0, %327 ], [ %349, %329 ]
  %338 = inttoptr i64 %336 to %"class.autofill::structured_address::AddressComponent"**
  %339 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %328, align 8
  %340 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %339, i64 %337
  %341 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %340, align 8
  %342 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %338, i64 %337
  %343 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %342, align 8
  %344 = bitcast %"class.autofill::structured_address::AddressComponent"* %341 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %345 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %344, align 8
  %346 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %345, i64 8
  %347 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %346, align 8
  %348 = call zeroext i1 %347(%"class.autofill::structured_address::AddressComponent"* %341, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %343) #13
  %349 = add nuw i64 %337, 1
  br i1 %348, label %329, label %350

350:                                              ; preds = %329, %335, %250, %319, %175, %302, %258, %182, %315, %311, %143, %145, %136
  %351 = phi i1 [ true, %175 ], [ true, %136 ], [ true, %145 ], [ true, %143 ], [ true, %311 ], [ false, %315 ], [ true, %182 ], [ true, %258 ], [ true, %250 ], [ true, %302 ], [ true, %319 ], [ true, %329 ], [ false, %335 ]
  call void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %132) #13
  br label %352

352:                                              ; preds = %130, %34, %43, %26, %2, %350
  %353 = phi i1 [ %351, %350 ], [ true, %2 ], [ true, %26 ], [ true, %43 ], [ true, %34 ], [ true, %130 ]
  %354 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %355 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %354, i64 0, i32 1, i32 1
  %356 = load i8, i8* %355, align 1
  %357 = icmp slt i8 %356, 0
  br i1 %357, label %358, label %361

358:                                              ; preds = %352
  %359 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %360 = load i8*, i8** %359, align 8
  call void @_ZdlPv(i8* %360) #15
  br label %361

361:                                              ; preds = %352, %358
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #13
  %362 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %363 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %362, i64 0, i32 1, i32 1
  %364 = load i8, i8* %363, align 1
  %365 = icmp slt i8 %364, 0
  br i1 %365, label %366, label %369

366:                                              ; preds = %361
  %367 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %368 = load i8*, i8** %367, align 8
  call void @_ZdlPv(i8* %368) #15
  br label %369

369:                                              ; preds = %361, %366
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #13
  ret i1 %353
}

declare void @_ZN4base12ToUpperASCIIENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret, i16*, i64) local_unnamed_addr #4

declare void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* sret, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4

declare zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult11OneIsSubsetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"*) local_unnamed_addr #4

declare zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult21IsSingleTokenSupersetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"*) unnamed_addr #6

declare zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult16ContainEachOtherEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent18MergeWithComponentERKS1_b(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120), i1 zeroext) unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"struct.autofill::structured_address::SortedTokenComparisonResult", align 8
  %7 = alloca %"struct.autofill::structured_address::SortedTokenComparisonResult", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::basic_string", align 8
  %10 = alloca %"class.std::__1::basic_string", align 8
  %11 = alloca %"class.std::__1::basic_string", align 8
  %12 = alloca %"class.std::__1::basic_string", align 8
  %13 = alloca %"class.std::__1::basic_string", align 8
  %14 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #13
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %18 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  %19 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %17, align 8
  %20 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %19, i64 23
  %21 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %20, align 8
  call void %21(%"class.std::__1::basic_string"* nonnull sret %4, %"class.autofill::structured_address::AddressComponent"* %0) #13
  %22 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #13
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = bitcast %"class.autofill::structured_address::AddressComponent"* %1 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %26 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false)
  %27 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %25, align 8
  %28 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %27, i64 23
  %29 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %28, align 8
  call void %29(%"class.std::__1::basic_string"* nonnull sret %5, %"class.autofill::structured_address::AddressComponent"* %1) #13
  %30 = call zeroext i1 @_ZNK8autofill18structured_address16AddressComponent6SameAsERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br i1 %30, label %1574, label %31

31:                                               ; preds = %3
  %32 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 7
  %33 = load i32, i32* %32, align 8
  %34 = and i32 %33, 1
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %59, label %36

36:                                               ; preds = %31
  %37 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  %41 = load i64, i64* %16, align 8
  %42 = zext i8 %39 to i64
  %43 = select i1 %40, i64 %41, i64 %42
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %50

45:                                               ; preds = %36
  %46 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 4
  br i1 %48, label %1574, label %49

49:                                               ; preds = %45
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1574

50:                                               ; preds = %36
  %51 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %52 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %51, i64 0, i32 1, i32 1
  %53 = load i8, i8* %52, align 1
  %54 = icmp slt i8 %53, 0
  %55 = load i64, i64* %24, align 8
  %56 = zext i8 %53 to i64
  %57 = select i1 %54, i64 %55, i64 %56
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %1574, label %59

59:                                               ; preds = %31, %50
  %60 = and i32 %33, 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %106, label %62

62:                                               ; preds = %59
  %63 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %64 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %63, i64 0, i32 1, i32 1
  %65 = load i8, i8* %64, align 1
  %66 = icmp slt i8 %65, 0
  %67 = load i64, i64* %16, align 8
  %68 = zext i8 %65 to i64
  %69 = select i1 %66, i64 %67, i64 %68
  %70 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %71 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %70, i64 0, i32 1, i32 1
  %72 = load i8, i8* %71, align 1
  %73 = icmp slt i8 %72, 0
  %74 = load i64, i64* %24, align 8
  %75 = zext i8 %72 to i64
  %76 = select i1 %73, i64 %74, i64 %75
  %77 = icmp eq i64 %69, %76
  br i1 %77, label %78, label %106

78:                                               ; preds = %62
  %79 = icmp eq i64 %69, 0
  br i1 %79, label %99, label %80

80:                                               ; preds = %78
  %81 = load i16*, i16** %23, align 8
  %82 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %83 = select i1 %73, i16* %81, i16* %82
  %84 = load i16*, i16** %15, align 8
  %85 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %86 = select i1 %66, i16* %84, i16* %85
  br label %87

87:                                               ; preds = %94, %80
  %88 = phi i64 [ %95, %94 ], [ %69, %80 ]
  %89 = phi i16* [ %97, %94 ], [ %83, %80 ]
  %90 = phi i16* [ %96, %94 ], [ %86, %80 ]
  %91 = load i16, i16* %90, align 2
  %92 = load i16, i16* %89, align 2
  %93 = icmp eq i16 %92, %91
  br i1 %93, label %94, label %106

94:                                               ; preds = %87
  %95 = add i64 %88, -1
  %96 = getelementptr inbounds i16, i16* %90, i64 1
  %97 = getelementptr inbounds i16, i16* %89, i64 1
  %98 = icmp eq i64 %95, 0
  br i1 %98, label %99, label %87

99:                                               ; preds = %94, %78
  %100 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %101 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %100, align 8
  %102 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %101, i64 24
  %103 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %102, align 8
  %104 = call zeroext i1 %103(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1) #13
  br i1 %104, label %105, label %1574

105:                                              ; preds = %99
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1574

106:                                              ; preds = %87, %62, %59
  %107 = bitcast %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %107) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %107, i8 -86, i64 32, i1 false)
  call void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull sret %6, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #13
  %108 = load i32, i32* %32, align 8
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %117, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6, i64 0, i32 0
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %113, 1
  br i1 %114, label %115, label %117

115:                                              ; preds = %111
  %116 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent29MergeTokenEquivalentComponentERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

117:                                              ; preds = %106, %111
  %118 = and i32 %108, 16
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %145, label %120

120:                                              ; preds = %117
  %121 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult11OneIsSubsetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  br i1 %121, label %124, label %122

122:                                              ; preds = %120
  %123 = load i32, i32* %32, align 8
  br label %145

124:                                              ; preds = %120
  %125 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6, i64 0, i32 0
  %126 = load i32, i32* %125, align 8
  %127 = icmp eq i32 %126, 2
  br i1 %127, label %128, label %1572

128:                                              ; preds = %124
  %129 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %130 = load i32, i32* %129, align 8
  %131 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %132 = load i32, i32* %131, align 8
  %133 = icmp eq i32 %130, 5
  %134 = add i32 %132, -3
  %135 = icmp ult i32 %134, 2
  %136 = and i1 %133, %135
  br i1 %136, label %1572, label %137

137:                                              ; preds = %128
  %138 = icmp ne i32 %132, 5
  %139 = add i32 %130, -3
  %140 = icmp ugt i32 %139, 1
  %141 = icmp slt i32 %130, %132
  %142 = or i1 %140, %138
  %143 = and i1 %141, %142
  br i1 %143, label %1572, label %144

144:                                              ; preds = %137
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

145:                                              ; preds = %122, %117
  %146 = phi i32 [ %123, %122 ], [ %108, %117 ]
  %147 = and i32 %146, 8
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %158, label %149

149:                                              ; preds = %145
  %150 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult11OneIsSubsetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  br i1 %150, label %153, label %151

151:                                              ; preds = %149
  %152 = load i32, i32* %32, align 8
  br label %158

153:                                              ; preds = %149
  %154 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6, i64 0, i32 0
  %155 = load i32, i32* %154, align 8
  %156 = icmp eq i32 %155, 3
  br i1 %156, label %157, label %1572

157:                                              ; preds = %153
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

158:                                              ; preds = %151, %145
  %159 = phi i32 [ %152, %151 ], [ %146, %145 ]
  %160 = and i32 %159, 24
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %184, label %162

162:                                              ; preds = %158
  %163 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6, i64 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = icmp eq i32 %164, 1
  br i1 %165, label %166, label %184

166:                                              ; preds = %162
  br i1 %2, label %167, label %1572

167:                                              ; preds = %166
  %168 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %169 = load i32, i32* %168, align 8
  %170 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %171 = load i32, i32* %170, align 8
  %172 = icmp eq i32 %169, 5
  %173 = add i32 %171, -3
  %174 = icmp ult i32 %173, 2
  %175 = and i1 %172, %174
  br i1 %175, label %1572, label %176

176:                                              ; preds = %167
  %177 = icmp ne i32 %171, 5
  %178 = add i32 %169, -3
  %179 = icmp ugt i32 %178, 1
  %180 = icmp slt i32 %169, %171
  %181 = or i1 %179, %177
  %182 = and i1 %180, %181
  br i1 %182, label %1572, label %183

183:                                              ; preds = %176
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

184:                                              ; preds = %158, %162
  %185 = and i32 %159, 64
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %213, label %187

187:                                              ; preds = %184
  %188 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult21IsSingleTokenSupersetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  br i1 %188, label %189, label %213

189:                                              ; preds = %187
  %190 = bitcast %"struct.autofill::structured_address::SortedTokenComparisonResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %190) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %190, i8 -86, i64 32, i1 false)
  %191 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %192 = load i8, i8* %191, align 8, !range !2
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %196, label %194

194:                                              ; preds = %189
  %195 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %198

196:                                              ; preds = %189
  %197 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %198

198:                                              ; preds = %194, %196
  %199 = phi %"class.std::__1::basic_string"* [ %195, %194 ], [ %197, %196 ]
  %200 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %201 = load i8, i8* %200, align 8, !range !2
  %202 = icmp eq i8 %201, 0
  br i1 %202, label %205, label %203

203:                                              ; preds = %198
  %204 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %207

205:                                              ; preds = %198
  %206 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %207

207:                                              ; preds = %203, %205
  %208 = phi %"class.std::__1::basic_string"* [ %204, %203 ], [ %206, %205 ]
  call void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull sret %7, %"class.std::__1::basic_string"* dereferenceable(24) %199, %"class.std::__1::basic_string"* dereferenceable(24) %208) #13
  %209 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult21IsSingleTokenSupersetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  br i1 %209, label %210, label %212

210:                                              ; preds = %207
  %211 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent20MergeSubsetComponentERKS1_RKNS0_27SortedTokenComparisonResultE(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1, %"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull dereferenceable(32) %7)
  call void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %190) #13
  br label %1572

212:                                              ; preds = %207
  call void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %190) #13
  br label %213

213:                                              ; preds = %212, %184, %187
  %214 = load i32, i32* %32, align 8
  %215 = and i32 %214, 32
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %218, label %217

217:                                              ; preds = %213
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

218:                                              ; preds = %213
  %219 = trunc i32 %214 to i8
  %220 = icmp slt i8 %219, 0
  br i1 %220, label %221, label %365

221:                                              ; preds = %218
  %222 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %223 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %222, i64 0, i32 1, i32 1
  %224 = load i8, i8* %223, align 1
  %225 = icmp slt i8 %224, 0
  %226 = load i16*, i16** %15, align 8
  %227 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %228 = select i1 %225, i16* %226, i16* %227
  %229 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %230 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %229, i64 0, i32 1, i32 1
  %231 = load i8, i8* %230, align 1
  %232 = icmp slt i8 %231, 0
  %233 = load i16*, i16** %23, align 8
  %234 = load i64, i64* %24, align 8
  %235 = bitcast %"class.std::__1::basic_string"* %5 to i16*
  %236 = zext i8 %231 to i64
  %237 = select i1 %232, i16* %233, i16* %235
  %238 = select i1 %232, i64 %234, i64 %236
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %347, label %240

240:                                              ; preds = %221
  %241 = load i64, i64* %16, align 8
  %242 = zext i8 %224 to i64
  %243 = select i1 %225, i64 %241, i64 %242
  %244 = getelementptr inbounds i16, i16* %228, i64 %243
  %245 = shl nuw i64 %238, 1
  %246 = ashr exact i64 %245, 1
  %247 = ptrtoint i16* %244 to i64
  %248 = ptrtoint i16* %228 to i64
  %249 = shl nuw i64 %243, 1
  %250 = ashr exact i64 %249, 1
  %251 = icmp slt i64 %250, %246
  br i1 %251, label %297, label %252

252:                                              ; preds = %240
  %253 = load i16, i16* %237, align 2
  br label %254

254:                                              ; preds = %283, %252
  %255 = phi i64 [ %250, %252 ], [ %287, %283 ]
  %256 = phi i16* [ %228, %252 ], [ %284, %283 ]
  %257 = sub nsw i64 %255, %246
  %258 = add nsw i64 %257, 1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %297, label %260

260:                                              ; preds = %254, %265
  %261 = phi i64 [ %267, %265 ], [ %258, %254 ]
  %262 = phi i16* [ %266, %265 ], [ %256, %254 ]
  %263 = load i16, i16* %262, align 2
  %264 = icmp eq i16 %263, %253
  br i1 %264, label %269, label %265

265:                                              ; preds = %260
  %266 = getelementptr inbounds i16, i16* %262, i64 1
  %267 = add i64 %261, -1
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %297, label %260

269:                                              ; preds = %260
  %270 = icmp eq i16* %262, null
  br i1 %270, label %297, label %271

271:                                              ; preds = %269, %278
  %272 = phi i16* [ %276, %278 ], [ %262, %269 ]
  %273 = phi i16* [ %279, %278 ], [ %237, %269 ]
  %274 = phi i64 [ %275, %278 ], [ %246, %269 ]
  %275 = add i64 %274, -1
  %276 = getelementptr inbounds i16, i16* %272, i64 1
  %277 = icmp eq i64 %275, 0
  br i1 %277, label %289, label %278

278:                                              ; preds = %271
  %279 = getelementptr inbounds i16, i16* %273, i64 1
  %280 = load i16, i16* %276, align 2
  %281 = load i16, i16* %279, align 2
  %282 = icmp eq i16 %281, %280
  br i1 %282, label %271, label %283

283:                                              ; preds = %278
  %284 = getelementptr inbounds i16, i16* %262, i64 1
  %285 = ptrtoint i16* %284 to i64
  %286 = sub i64 %247, %285
  %287 = ashr exact i64 %286, 1
  %288 = icmp slt i64 %287, %246
  br i1 %288, label %297, label %254

289:                                              ; preds = %271
  %290 = ptrtoint i16* %262 to i64
  %291 = icmp ne i16* %262, %244
  %292 = sub i64 %290, %248
  %293 = icmp ne i64 %292, -2
  %294 = and i1 %293, %291
  %295 = icmp eq i64 %243, 0
  %296 = or i1 %294, %295
  br i1 %296, label %347, label %299

297:                                              ; preds = %283, %269, %254, %265, %240
  %298 = icmp eq i64 %243, 0
  br i1 %298, label %347, label %299

299:                                              ; preds = %289, %297
  %300 = getelementptr inbounds i16, i16* %237, i64 %238
  %301 = ptrtoint i16* %300 to i64
  %302 = ptrtoint i16* %237 to i64
  %303 = icmp slt i64 %246, %250
  br i1 %303, label %365, label %304

304:                                              ; preds = %299
  %305 = load i16, i16* %228, align 2
  br label %306

306:                                              ; preds = %335, %304
  %307 = phi i64 [ %246, %304 ], [ %339, %335 ]
  %308 = phi i16* [ %237, %304 ], [ %336, %335 ]
  %309 = sub nsw i64 %307, %250
  %310 = add nsw i64 %309, 1
  %311 = icmp eq i64 %310, 0
  br i1 %311, label %365, label %312

312:                                              ; preds = %306, %317
  %313 = phi i64 [ %319, %317 ], [ %310, %306 ]
  %314 = phi i16* [ %318, %317 ], [ %308, %306 ]
  %315 = load i16, i16* %314, align 2
  %316 = icmp eq i16 %315, %305
  br i1 %316, label %321, label %317

317:                                              ; preds = %312
  %318 = getelementptr inbounds i16, i16* %314, i64 1
  %319 = add i64 %313, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %365, label %312

321:                                              ; preds = %312
  %322 = icmp eq i16* %314, null
  br i1 %322, label %365, label %323

323:                                              ; preds = %321, %330
  %324 = phi i16* [ %328, %330 ], [ %314, %321 ]
  %325 = phi i16* [ %331, %330 ], [ %228, %321 ]
  %326 = phi i64 [ %327, %330 ], [ %250, %321 ]
  %327 = add i64 %326, -1
  %328 = getelementptr inbounds i16, i16* %324, i64 1
  %329 = icmp eq i64 %327, 0
  br i1 %329, label %341, label %330

330:                                              ; preds = %323
  %331 = getelementptr inbounds i16, i16* %325, i64 1
  %332 = load i16, i16* %328, align 2
  %333 = load i16, i16* %331, align 2
  %334 = icmp eq i16 %333, %332
  br i1 %334, label %323, label %335

335:                                              ; preds = %330
  %336 = getelementptr inbounds i16, i16* %314, i64 1
  %337 = ptrtoint i16* %336 to i64
  %338 = sub i64 %301, %337
  %339 = ashr exact i64 %338, 1
  %340 = icmp slt i64 %339, %250
  br i1 %340, label %365, label %306

341:                                              ; preds = %323
  %342 = ptrtoint i16* %314 to i64
  %343 = icmp eq i16* %314, %300
  %344 = sub i64 %342, %302
  %345 = icmp eq i64 %344, -2
  %346 = or i1 %343, %345
  br i1 %346, label %365, label %347

347:                                              ; preds = %289, %341, %297, %221
  br i1 %2, label %348, label %1572

348:                                              ; preds = %347
  %349 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %350 = load i32, i32* %349, align 8
  %351 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %352 = load i32, i32* %351, align 8
  %353 = icmp eq i32 %350, 5
  %354 = add i32 %352, -3
  %355 = icmp ult i32 %354, 2
  %356 = and i1 %353, %355
  br i1 %356, label %1572, label %357

357:                                              ; preds = %348
  %358 = icmp ne i32 %352, 5
  %359 = add i32 %350, -3
  %360 = icmp ugt i32 %359, 1
  %361 = icmp slt i32 %350, %352
  %362 = or i1 %360, %358
  %363 = and i1 %361, %362
  br i1 %363, label %1572, label %364

364:                                              ; preds = %357
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

365:                                              ; preds = %335, %321, %306, %317, %299, %341, %218
  %366 = and i32 %214, 256
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %431, label %368

368:                                              ; preds = %365
  %369 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult16ContainEachOtherEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  br i1 %369, label %372, label %370

370:                                              ; preds = %368
  %371 = load i32, i32* %32, align 8
  br label %431

372:                                              ; preds = %368
  %373 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %374 = load i8, i8* %373, align 8, !range !2
  %375 = icmp eq i8 %374, 0
  br i1 %375, label %378, label %376

376:                                              ; preds = %372
  %377 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %380

378:                                              ; preds = %372
  %379 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %380

380:                                              ; preds = %376, %378
  %381 = phi %"class.std::__1::basic_string"* [ %377, %376 ], [ %379, %378 ]
  %382 = bitcast %"class.std::__1::basic_string"* %381 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %383 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %382, i64 0, i32 1, i32 1
  %384 = load i8, i8* %383, align 1
  %385 = icmp slt i8 %384, 0
  br i1 %385, label %386, label %389

386:                                              ; preds = %380
  %387 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %381, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %388 = load i64, i64* %387, align 8
  br label %391

389:                                              ; preds = %380
  %390 = zext i8 %384 to i64
  br label %391

391:                                              ; preds = %386, %389
  %392 = phi i64 [ %388, %386 ], [ %390, %389 ]
  %393 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %394 = load i8, i8* %393, align 8, !range !2
  %395 = icmp eq i8 %394, 0
  br i1 %395, label %398, label %396

396:                                              ; preds = %391
  %397 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %400

398:                                              ; preds = %391
  %399 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %400

400:                                              ; preds = %396, %398
  %401 = phi %"class.std::__1::basic_string"* [ %397, %396 ], [ %399, %398 ]
  %402 = bitcast %"class.std::__1::basic_string"* %401 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %403 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %402, i64 0, i32 1, i32 1
  %404 = load i8, i8* %403, align 1
  %405 = icmp slt i8 %404, 0
  br i1 %405, label %406, label %409

406:                                              ; preds = %400
  %407 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %401, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %408 = load i64, i64* %407, align 8
  br label %411

409:                                              ; preds = %400
  %410 = zext i8 %404 to i64
  br label %411

411:                                              ; preds = %406, %409
  %412 = phi i64 [ %408, %406 ], [ %410, %409 ]
  %413 = icmp ugt i64 %392, %412
  br i1 %413, label %1572, label %414

414:                                              ; preds = %411
  %415 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %416 = load i32, i32* %415, align 8
  %417 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %418 = load i32, i32* %417, align 8
  %419 = icmp eq i32 %416, 5
  %420 = add i32 %418, -3
  %421 = icmp ult i32 %420, 2
  %422 = and i1 %419, %421
  br i1 %422, label %1572, label %423

423:                                              ; preds = %414
  %424 = icmp ne i32 %418, 5
  %425 = add i32 %416, -3
  %426 = icmp ugt i32 %425, 1
  %427 = icmp slt i32 %416, %418
  %428 = or i1 %426, %424
  %429 = and i1 %427, %428
  br i1 %429, label %1572, label %430

430:                                              ; preds = %423
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1)
  br label %1572

431:                                              ; preds = %370, %365
  %432 = phi i32 [ %371, %370 ], [ %214, %365 ]
  %433 = and i32 %432, 512
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %647, label %435

435:                                              ; preds = %431
  %436 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %437 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %436, align 8
  %438 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %437, i64 24
  %439 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %438, align 8
  %440 = call zeroext i1 %439(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1) #13
  br i1 %440, label %441, label %1572

441:                                              ; preds = %435
  %442 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %443 = load i8, i8* %442, align 8, !range !2
  %444 = icmp eq i8 %443, 0
  br i1 %444, label %447, label %445

445:                                              ; preds = %441
  %446 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %449

447:                                              ; preds = %441
  %448 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %449

449:                                              ; preds = %445, %447
  %450 = phi %"class.std::__1::basic_string"* [ %446, %445 ], [ %448, %447 ]
  %451 = bitcast %"class.std::__1::basic_string"* %450 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %452 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %451, i64 0, i32 1, i32 1
  %453 = load i8, i8* %452, align 1
  %454 = icmp slt i8 %453, 0
  br i1 %454, label %458, label %455

455:                                              ; preds = %449
  %456 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %457 = bitcast %"class.std::__1::basic_string"* %450 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %456, i8* align 8 %457, i64 24, i1 false) #13
  br label %633

458:                                              ; preds = %449
  %459 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %450, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %460 = load i16*, i16** %459, align 8
  %461 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %450, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %462 = load i64, i64* %461, align 8
  %463 = icmp ult i64 %462, 11
  br i1 %463, label %464, label %469

464:                                              ; preds = %458
  %465 = bitcast %"class.std::__1::basic_string"* %8 to i16*
  %466 = trunc i64 %462 to i8
  %467 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %468 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %467, i64 0, i32 1, i32 1
  store i8 %466, i8* %468, align 1
  br label %486

469:                                              ; preds = %458
  %470 = icmp ugt i64 %462, 9223372036854775791
  br i1 %470, label %471, label %473

471:                                              ; preds = %469
  %472 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %472) #14
  unreachable

473:                                              ; preds = %469
  %474 = add nuw nsw i64 %462, 8
  %475 = and i64 %474, -8
  %476 = icmp slt i64 %475, 0
  br i1 %476, label %477, label %478

477:                                              ; preds = %473
  call void @abort() #14
  unreachable

478:                                              ; preds = %473
  %479 = shl i64 %475, 1
  %480 = call i8* @_Znwm(i64 %479) #15
  %481 = bitcast i8* %480 to i16*
  %482 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  store i8* %480, i8** %482, align 8
  %483 = or i64 %475, -9223372036854775808
  %484 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %483, i64* %484, align 8
  %485 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %462, i64* %485, align 8
  br label %486

486:                                              ; preds = %478, %464
  %487 = phi i16* [ %465, %464 ], [ %481, %478 ]
  %488 = add nuw nsw i64 %462, 1
  %489 = add i64 %462, 1
  %490 = icmp ult i64 %489, 16
  br i1 %490, label %580, label %491

491:                                              ; preds = %486
  %492 = add i64 %462, 1
  %493 = getelementptr i16, i16* %487, i64 %492
  %494 = getelementptr i16, i16* %460, i64 %492
  %495 = icmp ult i16* %487, %494
  %496 = icmp ult i16* %460, %493
  %497 = and i1 %495, %496
  br i1 %497, label %580, label %498

498:                                              ; preds = %491
  %499 = and i64 %489, -16
  %500 = sub i64 %488, %499
  %501 = getelementptr i16, i16* %460, i64 %499
  %502 = getelementptr i16, i16* %487, i64 %499
  %503 = add i64 %499, -16
  %504 = lshr exact i64 %503, 4
  %505 = add nuw nsw i64 %504, 1
  %506 = and i64 %505, 3
  %507 = icmp ult i64 %503, 48
  br i1 %507, label %559, label %508

508:                                              ; preds = %498
  %509 = sub nsw i64 %505, %506
  br label %510

510:                                              ; preds = %510, %508
  %511 = phi i64 [ 0, %508 ], [ %556, %510 ]
  %512 = phi i64 [ %509, %508 ], [ %557, %510 ]
  %513 = getelementptr i16, i16* %460, i64 %511
  %514 = getelementptr i16, i16* %487, i64 %511
  %515 = bitcast i16* %513 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 2, !alias.scope !149
  %517 = getelementptr i16, i16* %513, i64 8
  %518 = bitcast i16* %517 to <8 x i16>*
  %519 = load <8 x i16>, <8 x i16>* %518, align 2, !alias.scope !149
  %520 = bitcast i16* %514 to <8 x i16>*
  store <8 x i16> %516, <8 x i16>* %520, align 2, !alias.scope !152, !noalias !149
  %521 = getelementptr i16, i16* %514, i64 8
  %522 = bitcast i16* %521 to <8 x i16>*
  store <8 x i16> %519, <8 x i16>* %522, align 2, !alias.scope !152, !noalias !149
  %523 = or i64 %511, 16
  %524 = getelementptr i16, i16* %460, i64 %523
  %525 = getelementptr i16, i16* %487, i64 %523
  %526 = bitcast i16* %524 to <8 x i16>*
  %527 = load <8 x i16>, <8 x i16>* %526, align 2, !alias.scope !149
  %528 = getelementptr i16, i16* %524, i64 8
  %529 = bitcast i16* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 2, !alias.scope !149
  %531 = bitcast i16* %525 to <8 x i16>*
  store <8 x i16> %527, <8 x i16>* %531, align 2, !alias.scope !152, !noalias !149
  %532 = getelementptr i16, i16* %525, i64 8
  %533 = bitcast i16* %532 to <8 x i16>*
  store <8 x i16> %530, <8 x i16>* %533, align 2, !alias.scope !152, !noalias !149
  %534 = or i64 %511, 32
  %535 = getelementptr i16, i16* %460, i64 %534
  %536 = getelementptr i16, i16* %487, i64 %534
  %537 = bitcast i16* %535 to <8 x i16>*
  %538 = load <8 x i16>, <8 x i16>* %537, align 2, !alias.scope !149
  %539 = getelementptr i16, i16* %535, i64 8
  %540 = bitcast i16* %539 to <8 x i16>*
  %541 = load <8 x i16>, <8 x i16>* %540, align 2, !alias.scope !149
  %542 = bitcast i16* %536 to <8 x i16>*
  store <8 x i16> %538, <8 x i16>* %542, align 2, !alias.scope !152, !noalias !149
  %543 = getelementptr i16, i16* %536, i64 8
  %544 = bitcast i16* %543 to <8 x i16>*
  store <8 x i16> %541, <8 x i16>* %544, align 2, !alias.scope !152, !noalias !149
  %545 = or i64 %511, 48
  %546 = getelementptr i16, i16* %460, i64 %545
  %547 = getelementptr i16, i16* %487, i64 %545
  %548 = bitcast i16* %546 to <8 x i16>*
  %549 = load <8 x i16>, <8 x i16>* %548, align 2, !alias.scope !149
  %550 = getelementptr i16, i16* %546, i64 8
  %551 = bitcast i16* %550 to <8 x i16>*
  %552 = load <8 x i16>, <8 x i16>* %551, align 2, !alias.scope !149
  %553 = bitcast i16* %547 to <8 x i16>*
  store <8 x i16> %549, <8 x i16>* %553, align 2, !alias.scope !152, !noalias !149
  %554 = getelementptr i16, i16* %547, i64 8
  %555 = bitcast i16* %554 to <8 x i16>*
  store <8 x i16> %552, <8 x i16>* %555, align 2, !alias.scope !152, !noalias !149
  %556 = add i64 %511, 64
  %557 = add i64 %512, -4
  %558 = icmp eq i64 %557, 0
  br i1 %558, label %559, label %510, !llvm.loop !154

559:                                              ; preds = %510, %498
  %560 = phi i64 [ 0, %498 ], [ %556, %510 ]
  %561 = icmp eq i64 %506, 0
  br i1 %561, label %578, label %562

562:                                              ; preds = %559, %562
  %563 = phi i64 [ %575, %562 ], [ %560, %559 ]
  %564 = phi i64 [ %576, %562 ], [ %506, %559 ]
  %565 = getelementptr i16, i16* %460, i64 %563
  %566 = getelementptr i16, i16* %487, i64 %563
  %567 = bitcast i16* %565 to <8 x i16>*
  %568 = load <8 x i16>, <8 x i16>* %567, align 2, !alias.scope !149
  %569 = getelementptr i16, i16* %565, i64 8
  %570 = bitcast i16* %569 to <8 x i16>*
  %571 = load <8 x i16>, <8 x i16>* %570, align 2, !alias.scope !149
  %572 = bitcast i16* %566 to <8 x i16>*
  store <8 x i16> %568, <8 x i16>* %572, align 2, !alias.scope !152, !noalias !149
  %573 = getelementptr i16, i16* %566, i64 8
  %574 = bitcast i16* %573 to <8 x i16>*
  store <8 x i16> %571, <8 x i16>* %574, align 2, !alias.scope !152, !noalias !149
  %575 = add i64 %563, 16
  %576 = add i64 %564, -1
  %577 = icmp eq i64 %576, 0
  br i1 %577, label %578, label %562, !llvm.loop !155

578:                                              ; preds = %562, %559
  %579 = icmp eq i64 %489, %499
  br i1 %579, label %633, label %580

580:                                              ; preds = %578, %491, %486
  %581 = phi i64 [ %488, %491 ], [ %488, %486 ], [ %500, %578 ]
  %582 = phi i16* [ %460, %491 ], [ %460, %486 ], [ %501, %578 ]
  %583 = phi i16* [ %487, %491 ], [ %487, %486 ], [ %502, %578 ]
  %584 = add i64 %581, -1
  %585 = and i64 %581, 7
  %586 = icmp eq i64 %585, 0
  br i1 %586, label %598, label %587

587:                                              ; preds = %580, %587
  %588 = phi i64 [ %593, %587 ], [ %581, %580 ]
  %589 = phi i16* [ %595, %587 ], [ %582, %580 ]
  %590 = phi i16* [ %594, %587 ], [ %583, %580 ]
  %591 = phi i64 [ %596, %587 ], [ %585, %580 ]
  %592 = load i16, i16* %589, align 2
  store i16 %592, i16* %590, align 2
  %593 = add i64 %588, -1
  %594 = getelementptr inbounds i16, i16* %590, i64 1
  %595 = getelementptr inbounds i16, i16* %589, i64 1
  %596 = add i64 %591, -1
  %597 = icmp eq i64 %596, 0
  br i1 %597, label %598, label %587, !llvm.loop !156

598:                                              ; preds = %587, %580
  %599 = phi i64 [ %581, %580 ], [ %593, %587 ]
  %600 = phi i16* [ %582, %580 ], [ %595, %587 ]
  %601 = phi i16* [ %583, %580 ], [ %594, %587 ]
  %602 = icmp ult i64 %584, 7
  br i1 %602, label %633, label %603

603:                                              ; preds = %598, %603
  %604 = phi i64 [ %629, %603 ], [ %599, %598 ]
  %605 = phi i16* [ %631, %603 ], [ %600, %598 ]
  %606 = phi i16* [ %630, %603 ], [ %601, %598 ]
  %607 = load i16, i16* %605, align 2
  store i16 %607, i16* %606, align 2
  %608 = getelementptr inbounds i16, i16* %606, i64 1
  %609 = getelementptr inbounds i16, i16* %605, i64 1
  %610 = load i16, i16* %609, align 2
  store i16 %610, i16* %608, align 2
  %611 = getelementptr inbounds i16, i16* %606, i64 2
  %612 = getelementptr inbounds i16, i16* %605, i64 2
  %613 = load i16, i16* %612, align 2
  store i16 %613, i16* %611, align 2
  %614 = getelementptr inbounds i16, i16* %606, i64 3
  %615 = getelementptr inbounds i16, i16* %605, i64 3
  %616 = load i16, i16* %615, align 2
  store i16 %616, i16* %614, align 2
  %617 = getelementptr inbounds i16, i16* %606, i64 4
  %618 = getelementptr inbounds i16, i16* %605, i64 4
  %619 = load i16, i16* %618, align 2
  store i16 %619, i16* %617, align 2
  %620 = getelementptr inbounds i16, i16* %606, i64 5
  %621 = getelementptr inbounds i16, i16* %605, i64 5
  %622 = load i16, i16* %621, align 2
  store i16 %622, i16* %620, align 2
  %623 = getelementptr inbounds i16, i16* %606, i64 6
  %624 = getelementptr inbounds i16, i16* %605, i64 6
  %625 = load i16, i16* %624, align 2
  store i16 %625, i16* %623, align 2
  %626 = getelementptr inbounds i16, i16* %606, i64 7
  %627 = getelementptr inbounds i16, i16* %605, i64 7
  %628 = load i16, i16* %627, align 2
  store i16 %628, i16* %626, align 2
  %629 = add i64 %604, -8
  %630 = getelementptr inbounds i16, i16* %606, i64 8
  %631 = getelementptr inbounds i16, i16* %605, i64 8
  %632 = icmp eq i64 %629, 0
  br i1 %632, label %633, label %603, !llvm.loop !157

633:                                              ; preds = %598, %603, %578, %455
  %634 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %635 = load i32, i32* %634, align 8
  %636 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %637 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %636, align 8
  %638 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %637, i64 3
  %639 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %638, align 8
  call void %639(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %8, i32 %635) #13
  %640 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %641 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %640, i64 0, i32 1, i32 1
  %642 = load i8, i8* %641, align 1
  %643 = icmp slt i8 %642, 0
  br i1 %643, label %644, label %1572

644:                                              ; preds = %633
  %645 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %646 = load i8*, i8** %645, align 8
  call void @_ZdlPv(i8* %646) #15
  br label %1572

647:                                              ; preds = %431
  %648 = and i32 %432, 1024
  %649 = icmp eq i32 %648, 0
  br i1 %649, label %1572, label %650

650:                                              ; preds = %647
  %651 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %652 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %653 = bitcast %"class.autofill::structured_address::AddressComponent"*** %652 to i64*
  %654 = load i64, i64* %653, align 8
  %655 = bitcast %"class.std::__1::vector"* %651 to i64*
  %656 = load i64, i64* %655, align 8
  %657 = icmp eq i64 %654, %656
  br i1 %657, label %681, label %658

658:                                              ; preds = %650
  %659 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  br label %666

660:                                              ; preds = %666
  %661 = load i64, i64* %653, align 8
  %662 = load i64, i64* %655, align 8
  %663 = sub i64 %661, %662
  %664 = ashr exact i64 %663, 3
  %665 = icmp ult i64 %680, %664
  br i1 %665, label %666, label %681

666:                                              ; preds = %658, %660
  %667 = phi i64 [ %656, %658 ], [ %662, %660 ]
  %668 = phi i64 [ 0, %658 ], [ %680, %660 ]
  %669 = inttoptr i64 %667 to %"class.autofill::structured_address::AddressComponent"**
  %670 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %659, align 8
  %671 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %670, i64 %668
  %672 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %671, align 8
  %673 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %669, i64 %668
  %674 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %673, align 8
  %675 = bitcast %"class.autofill::structured_address::AddressComponent"* %672 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)***
  %676 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)*** %675, align 8
  %677 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)** %676, i64 10
  %678 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*, i1)** %677, align 8
  %679 = call zeroext i1 %678(%"class.autofill::structured_address::AddressComponent"* %672, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %674, i1 zeroext %2) #13
  %680 = add nuw i64 %668, 1
  br i1 %679, label %660, label %1572

681:                                              ; preds = %660, %650
  %682 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult11TokensMatchEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  br i1 %682, label %683, label %895

683:                                              ; preds = %681
  %684 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %685 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %684, align 8
  %686 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %685, i64 24
  %687 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %686, align 8
  %688 = call zeroext i1 %687(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1) #13
  br i1 %688, label %689, label %1572

689:                                              ; preds = %683
  %690 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %691 = load i8, i8* %690, align 8, !range !2
  %692 = icmp eq i8 %691, 0
  br i1 %692, label %695, label %693

693:                                              ; preds = %689
  %694 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %697

695:                                              ; preds = %689
  %696 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %697

697:                                              ; preds = %693, %695
  %698 = phi %"class.std::__1::basic_string"* [ %694, %693 ], [ %696, %695 ]
  %699 = bitcast %"class.std::__1::basic_string"* %698 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %700 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %699, i64 0, i32 1, i32 1
  %701 = load i8, i8* %700, align 1
  %702 = icmp slt i8 %701, 0
  br i1 %702, label %706, label %703

703:                                              ; preds = %697
  %704 = bitcast %"class.std::__1::basic_string"* %9 to i8*
  %705 = bitcast %"class.std::__1::basic_string"* %698 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %704, i8* align 8 %705, i64 24, i1 false) #13
  br label %881

706:                                              ; preds = %697
  %707 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %698, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %708 = load i16*, i16** %707, align 8
  %709 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %698, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %710 = load i64, i64* %709, align 8
  %711 = icmp ult i64 %710, 11
  br i1 %711, label %712, label %717

712:                                              ; preds = %706
  %713 = bitcast %"class.std::__1::basic_string"* %9 to i16*
  %714 = trunc i64 %710 to i8
  %715 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %716 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %715, i64 0, i32 1, i32 1
  store i8 %714, i8* %716, align 1
  br label %734

717:                                              ; preds = %706
  %718 = icmp ugt i64 %710, 9223372036854775791
  br i1 %718, label %719, label %721

719:                                              ; preds = %717
  %720 = bitcast %"class.std::__1::basic_string"* %9 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %720) #14
  unreachable

721:                                              ; preds = %717
  %722 = add nuw nsw i64 %710, 8
  %723 = and i64 %722, -8
  %724 = icmp slt i64 %723, 0
  br i1 %724, label %725, label %726

725:                                              ; preds = %721
  call void @abort() #14
  unreachable

726:                                              ; preds = %721
  %727 = shl i64 %723, 1
  %728 = call i8* @_Znwm(i64 %727) #15
  %729 = bitcast i8* %728 to i16*
  %730 = bitcast %"class.std::__1::basic_string"* %9 to i8**
  store i8* %728, i8** %730, align 8
  %731 = or i64 %723, -9223372036854775808
  %732 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %731, i64* %732, align 8
  %733 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %710, i64* %733, align 8
  br label %734

734:                                              ; preds = %726, %712
  %735 = phi i16* [ %713, %712 ], [ %729, %726 ]
  %736 = add nuw nsw i64 %710, 1
  %737 = add i64 %710, 1
  %738 = icmp ult i64 %737, 16
  br i1 %738, label %828, label %739

739:                                              ; preds = %734
  %740 = add i64 %710, 1
  %741 = getelementptr i16, i16* %735, i64 %740
  %742 = getelementptr i16, i16* %708, i64 %740
  %743 = icmp ult i16* %735, %742
  %744 = icmp ult i16* %708, %741
  %745 = and i1 %743, %744
  br i1 %745, label %828, label %746

746:                                              ; preds = %739
  %747 = and i64 %737, -16
  %748 = sub i64 %736, %747
  %749 = getelementptr i16, i16* %708, i64 %747
  %750 = getelementptr i16, i16* %735, i64 %747
  %751 = add i64 %747, -16
  %752 = lshr exact i64 %751, 4
  %753 = add nuw nsw i64 %752, 1
  %754 = and i64 %753, 3
  %755 = icmp ult i64 %751, 48
  br i1 %755, label %807, label %756

756:                                              ; preds = %746
  %757 = sub nsw i64 %753, %754
  br label %758

758:                                              ; preds = %758, %756
  %759 = phi i64 [ 0, %756 ], [ %804, %758 ]
  %760 = phi i64 [ %757, %756 ], [ %805, %758 ]
  %761 = getelementptr i16, i16* %708, i64 %759
  %762 = getelementptr i16, i16* %735, i64 %759
  %763 = bitcast i16* %761 to <8 x i16>*
  %764 = load <8 x i16>, <8 x i16>* %763, align 2, !alias.scope !158
  %765 = getelementptr i16, i16* %761, i64 8
  %766 = bitcast i16* %765 to <8 x i16>*
  %767 = load <8 x i16>, <8 x i16>* %766, align 2, !alias.scope !158
  %768 = bitcast i16* %762 to <8 x i16>*
  store <8 x i16> %764, <8 x i16>* %768, align 2, !alias.scope !161, !noalias !158
  %769 = getelementptr i16, i16* %762, i64 8
  %770 = bitcast i16* %769 to <8 x i16>*
  store <8 x i16> %767, <8 x i16>* %770, align 2, !alias.scope !161, !noalias !158
  %771 = or i64 %759, 16
  %772 = getelementptr i16, i16* %708, i64 %771
  %773 = getelementptr i16, i16* %735, i64 %771
  %774 = bitcast i16* %772 to <8 x i16>*
  %775 = load <8 x i16>, <8 x i16>* %774, align 2, !alias.scope !158
  %776 = getelementptr i16, i16* %772, i64 8
  %777 = bitcast i16* %776 to <8 x i16>*
  %778 = load <8 x i16>, <8 x i16>* %777, align 2, !alias.scope !158
  %779 = bitcast i16* %773 to <8 x i16>*
  store <8 x i16> %775, <8 x i16>* %779, align 2, !alias.scope !161, !noalias !158
  %780 = getelementptr i16, i16* %773, i64 8
  %781 = bitcast i16* %780 to <8 x i16>*
  store <8 x i16> %778, <8 x i16>* %781, align 2, !alias.scope !161, !noalias !158
  %782 = or i64 %759, 32
  %783 = getelementptr i16, i16* %708, i64 %782
  %784 = getelementptr i16, i16* %735, i64 %782
  %785 = bitcast i16* %783 to <8 x i16>*
  %786 = load <8 x i16>, <8 x i16>* %785, align 2, !alias.scope !158
  %787 = getelementptr i16, i16* %783, i64 8
  %788 = bitcast i16* %787 to <8 x i16>*
  %789 = load <8 x i16>, <8 x i16>* %788, align 2, !alias.scope !158
  %790 = bitcast i16* %784 to <8 x i16>*
  store <8 x i16> %786, <8 x i16>* %790, align 2, !alias.scope !161, !noalias !158
  %791 = getelementptr i16, i16* %784, i64 8
  %792 = bitcast i16* %791 to <8 x i16>*
  store <8 x i16> %789, <8 x i16>* %792, align 2, !alias.scope !161, !noalias !158
  %793 = or i64 %759, 48
  %794 = getelementptr i16, i16* %708, i64 %793
  %795 = getelementptr i16, i16* %735, i64 %793
  %796 = bitcast i16* %794 to <8 x i16>*
  %797 = load <8 x i16>, <8 x i16>* %796, align 2, !alias.scope !158
  %798 = getelementptr i16, i16* %794, i64 8
  %799 = bitcast i16* %798 to <8 x i16>*
  %800 = load <8 x i16>, <8 x i16>* %799, align 2, !alias.scope !158
  %801 = bitcast i16* %795 to <8 x i16>*
  store <8 x i16> %797, <8 x i16>* %801, align 2, !alias.scope !161, !noalias !158
  %802 = getelementptr i16, i16* %795, i64 8
  %803 = bitcast i16* %802 to <8 x i16>*
  store <8 x i16> %800, <8 x i16>* %803, align 2, !alias.scope !161, !noalias !158
  %804 = add i64 %759, 64
  %805 = add i64 %760, -4
  %806 = icmp eq i64 %805, 0
  br i1 %806, label %807, label %758, !llvm.loop !163

807:                                              ; preds = %758, %746
  %808 = phi i64 [ 0, %746 ], [ %804, %758 ]
  %809 = icmp eq i64 %754, 0
  br i1 %809, label %826, label %810

810:                                              ; preds = %807, %810
  %811 = phi i64 [ %823, %810 ], [ %808, %807 ]
  %812 = phi i64 [ %824, %810 ], [ %754, %807 ]
  %813 = getelementptr i16, i16* %708, i64 %811
  %814 = getelementptr i16, i16* %735, i64 %811
  %815 = bitcast i16* %813 to <8 x i16>*
  %816 = load <8 x i16>, <8 x i16>* %815, align 2, !alias.scope !158
  %817 = getelementptr i16, i16* %813, i64 8
  %818 = bitcast i16* %817 to <8 x i16>*
  %819 = load <8 x i16>, <8 x i16>* %818, align 2, !alias.scope !158
  %820 = bitcast i16* %814 to <8 x i16>*
  store <8 x i16> %816, <8 x i16>* %820, align 2, !alias.scope !161, !noalias !158
  %821 = getelementptr i16, i16* %814, i64 8
  %822 = bitcast i16* %821 to <8 x i16>*
  store <8 x i16> %819, <8 x i16>* %822, align 2, !alias.scope !161, !noalias !158
  %823 = add i64 %811, 16
  %824 = add i64 %812, -1
  %825 = icmp eq i64 %824, 0
  br i1 %825, label %826, label %810, !llvm.loop !164

826:                                              ; preds = %810, %807
  %827 = icmp eq i64 %737, %747
  br i1 %827, label %881, label %828

828:                                              ; preds = %826, %739, %734
  %829 = phi i64 [ %736, %739 ], [ %736, %734 ], [ %748, %826 ]
  %830 = phi i16* [ %708, %739 ], [ %708, %734 ], [ %749, %826 ]
  %831 = phi i16* [ %735, %739 ], [ %735, %734 ], [ %750, %826 ]
  %832 = add i64 %829, -1
  %833 = and i64 %829, 7
  %834 = icmp eq i64 %833, 0
  br i1 %834, label %846, label %835

835:                                              ; preds = %828, %835
  %836 = phi i64 [ %841, %835 ], [ %829, %828 ]
  %837 = phi i16* [ %843, %835 ], [ %830, %828 ]
  %838 = phi i16* [ %842, %835 ], [ %831, %828 ]
  %839 = phi i64 [ %844, %835 ], [ %833, %828 ]
  %840 = load i16, i16* %837, align 2
  store i16 %840, i16* %838, align 2
  %841 = add i64 %836, -1
  %842 = getelementptr inbounds i16, i16* %838, i64 1
  %843 = getelementptr inbounds i16, i16* %837, i64 1
  %844 = add i64 %839, -1
  %845 = icmp eq i64 %844, 0
  br i1 %845, label %846, label %835, !llvm.loop !165

846:                                              ; preds = %835, %828
  %847 = phi i64 [ %829, %828 ], [ %841, %835 ]
  %848 = phi i16* [ %830, %828 ], [ %843, %835 ]
  %849 = phi i16* [ %831, %828 ], [ %842, %835 ]
  %850 = icmp ult i64 %832, 7
  br i1 %850, label %881, label %851

851:                                              ; preds = %846, %851
  %852 = phi i64 [ %877, %851 ], [ %847, %846 ]
  %853 = phi i16* [ %879, %851 ], [ %848, %846 ]
  %854 = phi i16* [ %878, %851 ], [ %849, %846 ]
  %855 = load i16, i16* %853, align 2
  store i16 %855, i16* %854, align 2
  %856 = getelementptr inbounds i16, i16* %854, i64 1
  %857 = getelementptr inbounds i16, i16* %853, i64 1
  %858 = load i16, i16* %857, align 2
  store i16 %858, i16* %856, align 2
  %859 = getelementptr inbounds i16, i16* %854, i64 2
  %860 = getelementptr inbounds i16, i16* %853, i64 2
  %861 = load i16, i16* %860, align 2
  store i16 %861, i16* %859, align 2
  %862 = getelementptr inbounds i16, i16* %854, i64 3
  %863 = getelementptr inbounds i16, i16* %853, i64 3
  %864 = load i16, i16* %863, align 2
  store i16 %864, i16* %862, align 2
  %865 = getelementptr inbounds i16, i16* %854, i64 4
  %866 = getelementptr inbounds i16, i16* %853, i64 4
  %867 = load i16, i16* %866, align 2
  store i16 %867, i16* %865, align 2
  %868 = getelementptr inbounds i16, i16* %854, i64 5
  %869 = getelementptr inbounds i16, i16* %853, i64 5
  %870 = load i16, i16* %869, align 2
  store i16 %870, i16* %868, align 2
  %871 = getelementptr inbounds i16, i16* %854, i64 6
  %872 = getelementptr inbounds i16, i16* %853, i64 6
  %873 = load i16, i16* %872, align 2
  store i16 %873, i16* %871, align 2
  %874 = getelementptr inbounds i16, i16* %854, i64 7
  %875 = getelementptr inbounds i16, i16* %853, i64 7
  %876 = load i16, i16* %875, align 2
  store i16 %876, i16* %874, align 2
  %877 = add i64 %852, -8
  %878 = getelementptr inbounds i16, i16* %854, i64 8
  %879 = getelementptr inbounds i16, i16* %853, i64 8
  %880 = icmp eq i64 %877, 0
  br i1 %880, label %881, label %851, !llvm.loop !166

881:                                              ; preds = %846, %851, %826, %703
  %882 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %883 = load i32, i32* %882, align 8
  %884 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %885 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %884, align 8
  %886 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %885, i64 3
  %887 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %886, align 8
  call void %887(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %9, i32 %883) #13
  %888 = bitcast %"class.std::__1::basic_string"* %9 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %889 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %888, i64 0, i32 1, i32 1
  %890 = load i8, i8* %889, align 1
  %891 = icmp slt i8 %890, 0
  br i1 %891, label %892, label %1572

892:                                              ; preds = %881
  %893 = bitcast %"class.std::__1::basic_string"* %9 to i8**
  %894 = load i8*, i8** %893, align 8
  call void @_ZdlPv(i8* %894) #15
  br label %1572

895:                                              ; preds = %681
  %896 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %896) #13
  %897 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %898 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %899 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %899, i8 -86, i64 24, i1 false)
  call void @_ZN8autofill18structured_address16AddressComponent34GetFormattedValueFromSubcomponentsEv(%"class.std::__1::basic_string"* nonnull sret %10, %"class.autofill::structured_address::AddressComponent"* %0)
  %900 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %901 = load i8, i8* %900, align 8, !range !2
  %902 = icmp eq i8 %901, 0
  br i1 %902, label %905, label %903

903:                                              ; preds = %895
  %904 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %907

905:                                              ; preds = %895
  %906 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %907

907:                                              ; preds = %903, %905
  %908 = phi %"class.std::__1::basic_string"* [ %904, %903 ], [ %906, %905 ]
  %909 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %910 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %909, i64 0, i32 1, i32 1
  %911 = load i8, i8* %910, align 1
  %912 = icmp slt i8 %911, 0
  %913 = load i64, i64* %898, align 8
  %914 = zext i8 %911 to i64
  %915 = select i1 %912, i64 %913, i64 %914
  %916 = bitcast %"class.std::__1::basic_string"* %908 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %917 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %916, i64 0, i32 1, i32 1
  %918 = load i8, i8* %917, align 1
  %919 = icmp slt i8 %918, 0
  %920 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %908, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %921 = load i64, i64* %920, align 8
  %922 = zext i8 %918 to i64
  %923 = select i1 %919, i64 %921, i64 %922
  %924 = icmp eq i64 %915, %923
  br i1 %924, label %925, label %1138

925:                                              ; preds = %907
  %926 = icmp eq i64 %915, 0
  br i1 %926, label %947, label %927

927:                                              ; preds = %925
  %928 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %908, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %929 = load i16*, i16** %928, align 8
  %930 = bitcast %"class.std::__1::basic_string"* %908 to i16*
  %931 = select i1 %919, i16* %929, i16* %930
  %932 = load i16*, i16** %897, align 8
  %933 = bitcast %"class.std::__1::basic_string"* %10 to i16*
  %934 = select i1 %912, i16* %932, i16* %933
  br label %935

935:                                              ; preds = %942, %927
  %936 = phi i64 [ %943, %942 ], [ %915, %927 ]
  %937 = phi i16* [ %945, %942 ], [ %931, %927 ]
  %938 = phi i16* [ %944, %942 ], [ %934, %927 ]
  %939 = load i16, i16* %938, align 2
  %940 = load i16, i16* %937, align 2
  %941 = icmp eq i16 %940, %939
  br i1 %941, label %942, label %1138

942:                                              ; preds = %935
  %943 = add i64 %936, -1
  %944 = getelementptr inbounds i16, i16* %938, i64 1
  %945 = getelementptr inbounds i16, i16* %937, i64 1
  %946 = icmp eq i64 %943, 0
  br i1 %946, label %947, label %935

947:                                              ; preds = %942, %925
  br i1 %912, label %950, label %948

948:                                              ; preds = %947
  %949 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %949, i8* nonnull align 8 %896, i64 24, i1 false) #13
  br label %1122

950:                                              ; preds = %947
  %951 = load i16*, i16** %897, align 8
  %952 = icmp ult i64 %913, 11
  br i1 %952, label %953, label %958

953:                                              ; preds = %950
  %954 = bitcast %"class.std::__1::basic_string"* %11 to i16*
  %955 = trunc i64 %913 to i8
  %956 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %957 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %956, i64 0, i32 1, i32 1
  store i8 %955, i8* %957, align 1
  br label %975

958:                                              ; preds = %950
  %959 = icmp ugt i64 %913, 9223372036854775791
  br i1 %959, label %960, label %962

960:                                              ; preds = %958
  %961 = bitcast %"class.std::__1::basic_string"* %11 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %961) #14
  unreachable

962:                                              ; preds = %958
  %963 = add nuw nsw i64 %913, 8
  %964 = and i64 %963, -8
  %965 = icmp slt i64 %964, 0
  br i1 %965, label %966, label %967

966:                                              ; preds = %962
  call void @abort() #14
  unreachable

967:                                              ; preds = %962
  %968 = shl i64 %964, 1
  %969 = call i8* @_Znwm(i64 %968) #15
  %970 = bitcast i8* %969 to i16*
  %971 = bitcast %"class.std::__1::basic_string"* %11 to i8**
  store i8* %969, i8** %971, align 8
  %972 = or i64 %964, -9223372036854775808
  %973 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %972, i64* %973, align 8
  %974 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %913, i64* %974, align 8
  br label %975

975:                                              ; preds = %967, %953
  %976 = phi i16* [ %954, %953 ], [ %970, %967 ]
  %977 = add nuw nsw i64 %913, 1
  %978 = add i64 %913, 1
  %979 = icmp ult i64 %978, 16
  br i1 %979, label %1069, label %980

980:                                              ; preds = %975
  %981 = add i64 %913, 1
  %982 = getelementptr i16, i16* %976, i64 %981
  %983 = getelementptr i16, i16* %951, i64 %981
  %984 = icmp ult i16* %976, %983
  %985 = icmp ult i16* %951, %982
  %986 = and i1 %984, %985
  br i1 %986, label %1069, label %987

987:                                              ; preds = %980
  %988 = and i64 %978, -16
  %989 = sub i64 %977, %988
  %990 = getelementptr i16, i16* %951, i64 %988
  %991 = getelementptr i16, i16* %976, i64 %988
  %992 = add i64 %988, -16
  %993 = lshr exact i64 %992, 4
  %994 = add nuw nsw i64 %993, 1
  %995 = and i64 %994, 3
  %996 = icmp ult i64 %992, 48
  br i1 %996, label %1048, label %997

997:                                              ; preds = %987
  %998 = sub nsw i64 %994, %995
  br label %999

999:                                              ; preds = %999, %997
  %1000 = phi i64 [ 0, %997 ], [ %1045, %999 ]
  %1001 = phi i64 [ %998, %997 ], [ %1046, %999 ]
  %1002 = getelementptr i16, i16* %951, i64 %1000
  %1003 = getelementptr i16, i16* %976, i64 %1000
  %1004 = bitcast i16* %1002 to <8 x i16>*
  %1005 = load <8 x i16>, <8 x i16>* %1004, align 2, !alias.scope !167
  %1006 = getelementptr i16, i16* %1002, i64 8
  %1007 = bitcast i16* %1006 to <8 x i16>*
  %1008 = load <8 x i16>, <8 x i16>* %1007, align 2, !alias.scope !167
  %1009 = bitcast i16* %1003 to <8 x i16>*
  store <8 x i16> %1005, <8 x i16>* %1009, align 2, !alias.scope !170, !noalias !167
  %1010 = getelementptr i16, i16* %1003, i64 8
  %1011 = bitcast i16* %1010 to <8 x i16>*
  store <8 x i16> %1008, <8 x i16>* %1011, align 2, !alias.scope !170, !noalias !167
  %1012 = or i64 %1000, 16
  %1013 = getelementptr i16, i16* %951, i64 %1012
  %1014 = getelementptr i16, i16* %976, i64 %1012
  %1015 = bitcast i16* %1013 to <8 x i16>*
  %1016 = load <8 x i16>, <8 x i16>* %1015, align 2, !alias.scope !167
  %1017 = getelementptr i16, i16* %1013, i64 8
  %1018 = bitcast i16* %1017 to <8 x i16>*
  %1019 = load <8 x i16>, <8 x i16>* %1018, align 2, !alias.scope !167
  %1020 = bitcast i16* %1014 to <8 x i16>*
  store <8 x i16> %1016, <8 x i16>* %1020, align 2, !alias.scope !170, !noalias !167
  %1021 = getelementptr i16, i16* %1014, i64 8
  %1022 = bitcast i16* %1021 to <8 x i16>*
  store <8 x i16> %1019, <8 x i16>* %1022, align 2, !alias.scope !170, !noalias !167
  %1023 = or i64 %1000, 32
  %1024 = getelementptr i16, i16* %951, i64 %1023
  %1025 = getelementptr i16, i16* %976, i64 %1023
  %1026 = bitcast i16* %1024 to <8 x i16>*
  %1027 = load <8 x i16>, <8 x i16>* %1026, align 2, !alias.scope !167
  %1028 = getelementptr i16, i16* %1024, i64 8
  %1029 = bitcast i16* %1028 to <8 x i16>*
  %1030 = load <8 x i16>, <8 x i16>* %1029, align 2, !alias.scope !167
  %1031 = bitcast i16* %1025 to <8 x i16>*
  store <8 x i16> %1027, <8 x i16>* %1031, align 2, !alias.scope !170, !noalias !167
  %1032 = getelementptr i16, i16* %1025, i64 8
  %1033 = bitcast i16* %1032 to <8 x i16>*
  store <8 x i16> %1030, <8 x i16>* %1033, align 2, !alias.scope !170, !noalias !167
  %1034 = or i64 %1000, 48
  %1035 = getelementptr i16, i16* %951, i64 %1034
  %1036 = getelementptr i16, i16* %976, i64 %1034
  %1037 = bitcast i16* %1035 to <8 x i16>*
  %1038 = load <8 x i16>, <8 x i16>* %1037, align 2, !alias.scope !167
  %1039 = getelementptr i16, i16* %1035, i64 8
  %1040 = bitcast i16* %1039 to <8 x i16>*
  %1041 = load <8 x i16>, <8 x i16>* %1040, align 2, !alias.scope !167
  %1042 = bitcast i16* %1036 to <8 x i16>*
  store <8 x i16> %1038, <8 x i16>* %1042, align 2, !alias.scope !170, !noalias !167
  %1043 = getelementptr i16, i16* %1036, i64 8
  %1044 = bitcast i16* %1043 to <8 x i16>*
  store <8 x i16> %1041, <8 x i16>* %1044, align 2, !alias.scope !170, !noalias !167
  %1045 = add i64 %1000, 64
  %1046 = add i64 %1001, -4
  %1047 = icmp eq i64 %1046, 0
  br i1 %1047, label %1048, label %999, !llvm.loop !172

1048:                                             ; preds = %999, %987
  %1049 = phi i64 [ 0, %987 ], [ %1045, %999 ]
  %1050 = icmp eq i64 %995, 0
  br i1 %1050, label %1067, label %1051

1051:                                             ; preds = %1048, %1051
  %1052 = phi i64 [ %1064, %1051 ], [ %1049, %1048 ]
  %1053 = phi i64 [ %1065, %1051 ], [ %995, %1048 ]
  %1054 = getelementptr i16, i16* %951, i64 %1052
  %1055 = getelementptr i16, i16* %976, i64 %1052
  %1056 = bitcast i16* %1054 to <8 x i16>*
  %1057 = load <8 x i16>, <8 x i16>* %1056, align 2, !alias.scope !167
  %1058 = getelementptr i16, i16* %1054, i64 8
  %1059 = bitcast i16* %1058 to <8 x i16>*
  %1060 = load <8 x i16>, <8 x i16>* %1059, align 2, !alias.scope !167
  %1061 = bitcast i16* %1055 to <8 x i16>*
  store <8 x i16> %1057, <8 x i16>* %1061, align 2, !alias.scope !170, !noalias !167
  %1062 = getelementptr i16, i16* %1055, i64 8
  %1063 = bitcast i16* %1062 to <8 x i16>*
  store <8 x i16> %1060, <8 x i16>* %1063, align 2, !alias.scope !170, !noalias !167
  %1064 = add i64 %1052, 16
  %1065 = add i64 %1053, -1
  %1066 = icmp eq i64 %1065, 0
  br i1 %1066, label %1067, label %1051, !llvm.loop !173

1067:                                             ; preds = %1051, %1048
  %1068 = icmp eq i64 %978, %988
  br i1 %1068, label %1122, label %1069

1069:                                             ; preds = %1067, %980, %975
  %1070 = phi i64 [ %977, %980 ], [ %977, %975 ], [ %989, %1067 ]
  %1071 = phi i16* [ %951, %980 ], [ %951, %975 ], [ %990, %1067 ]
  %1072 = phi i16* [ %976, %980 ], [ %976, %975 ], [ %991, %1067 ]
  %1073 = add i64 %1070, -1
  %1074 = and i64 %1070, 7
  %1075 = icmp eq i64 %1074, 0
  br i1 %1075, label %1087, label %1076

1076:                                             ; preds = %1069, %1076
  %1077 = phi i64 [ %1082, %1076 ], [ %1070, %1069 ]
  %1078 = phi i16* [ %1084, %1076 ], [ %1071, %1069 ]
  %1079 = phi i16* [ %1083, %1076 ], [ %1072, %1069 ]
  %1080 = phi i64 [ %1085, %1076 ], [ %1074, %1069 ]
  %1081 = load i16, i16* %1078, align 2
  store i16 %1081, i16* %1079, align 2
  %1082 = add i64 %1077, -1
  %1083 = getelementptr inbounds i16, i16* %1079, i64 1
  %1084 = getelementptr inbounds i16, i16* %1078, i64 1
  %1085 = add i64 %1080, -1
  %1086 = icmp eq i64 %1085, 0
  br i1 %1086, label %1087, label %1076, !llvm.loop !174

1087:                                             ; preds = %1076, %1069
  %1088 = phi i64 [ %1070, %1069 ], [ %1082, %1076 ]
  %1089 = phi i16* [ %1071, %1069 ], [ %1084, %1076 ]
  %1090 = phi i16* [ %1072, %1069 ], [ %1083, %1076 ]
  %1091 = icmp ult i64 %1073, 7
  br i1 %1091, label %1122, label %1092

1092:                                             ; preds = %1087, %1092
  %1093 = phi i64 [ %1118, %1092 ], [ %1088, %1087 ]
  %1094 = phi i16* [ %1120, %1092 ], [ %1089, %1087 ]
  %1095 = phi i16* [ %1119, %1092 ], [ %1090, %1087 ]
  %1096 = load i16, i16* %1094, align 2
  store i16 %1096, i16* %1095, align 2
  %1097 = getelementptr inbounds i16, i16* %1095, i64 1
  %1098 = getelementptr inbounds i16, i16* %1094, i64 1
  %1099 = load i16, i16* %1098, align 2
  store i16 %1099, i16* %1097, align 2
  %1100 = getelementptr inbounds i16, i16* %1095, i64 2
  %1101 = getelementptr inbounds i16, i16* %1094, i64 2
  %1102 = load i16, i16* %1101, align 2
  store i16 %1102, i16* %1100, align 2
  %1103 = getelementptr inbounds i16, i16* %1095, i64 3
  %1104 = getelementptr inbounds i16, i16* %1094, i64 3
  %1105 = load i16, i16* %1104, align 2
  store i16 %1105, i16* %1103, align 2
  %1106 = getelementptr inbounds i16, i16* %1095, i64 4
  %1107 = getelementptr inbounds i16, i16* %1094, i64 4
  %1108 = load i16, i16* %1107, align 2
  store i16 %1108, i16* %1106, align 2
  %1109 = getelementptr inbounds i16, i16* %1095, i64 5
  %1110 = getelementptr inbounds i16, i16* %1094, i64 5
  %1111 = load i16, i16* %1110, align 2
  store i16 %1111, i16* %1109, align 2
  %1112 = getelementptr inbounds i16, i16* %1095, i64 6
  %1113 = getelementptr inbounds i16, i16* %1094, i64 6
  %1114 = load i16, i16* %1113, align 2
  store i16 %1114, i16* %1112, align 2
  %1115 = getelementptr inbounds i16, i16* %1095, i64 7
  %1116 = getelementptr inbounds i16, i16* %1094, i64 7
  %1117 = load i16, i16* %1116, align 2
  store i16 %1117, i16* %1115, align 2
  %1118 = add i64 %1093, -8
  %1119 = getelementptr inbounds i16, i16* %1095, i64 8
  %1120 = getelementptr inbounds i16, i16* %1094, i64 8
  %1121 = icmp eq i64 %1118, 0
  br i1 %1121, label %1122, label %1092, !llvm.loop !175

1122:                                             ; preds = %1087, %1092, %1067, %948
  %1123 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %1124 = load i32, i32* %1123, align 8
  %1125 = icmp sgt i32 %1124, 2
  %1126 = select i1 %1125, i32 %1124, i32 2
  %1127 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %1128 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %1127, align 8
  %1129 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %1128, i64 3
  %1130 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %1129, align 8
  call void %1130(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %11, i32 %1126) #13
  %1131 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1132 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1131, i64 0, i32 1, i32 1
  %1133 = load i8, i8* %1132, align 1
  %1134 = icmp slt i8 %1133, 0
  br i1 %1134, label %1135, label %1565

1135:                                             ; preds = %1122
  %1136 = bitcast %"class.std::__1::basic_string"* %11 to i8**
  %1137 = load i8*, i8** %1136, align 8
  call void @_ZdlPv(i8* %1137) #15
  br label %1565

1138:                                             ; preds = %935, %907
  %1139 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %1140 = load i8, i8* %1139, align 8, !range !2
  %1141 = icmp eq i8 %1140, 0
  br i1 %1141, label %1144, label %1142

1142:                                             ; preds = %1138
  %1143 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %1149

1144:                                             ; preds = %1138
  %1145 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  %1146 = load i8, i8* %910, align 1
  %1147 = load i64, i64* %898, align 8
  %1148 = zext i8 %1146 to i64
  br label %1149

1149:                                             ; preds = %1142, %1144
  %1150 = phi i64 [ %914, %1142 ], [ %1148, %1144 ]
  %1151 = phi i64 [ %913, %1142 ], [ %1147, %1144 ]
  %1152 = phi i8 [ %911, %1142 ], [ %1146, %1144 ]
  %1153 = phi %"class.std::__1::basic_string"* [ %1143, %1142 ], [ %1145, %1144 ]
  %1154 = icmp slt i8 %1152, 0
  %1155 = select i1 %1154, i64 %1151, i64 %1150
  %1156 = bitcast %"class.std::__1::basic_string"* %1153 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1157 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1156, i64 0, i32 1, i32 1
  %1158 = load i8, i8* %1157, align 1
  %1159 = icmp slt i8 %1158, 0
  %1160 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1153, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %1161 = load i64, i64* %1160, align 8
  %1162 = zext i8 %1158 to i64
  %1163 = select i1 %1159, i64 %1161, i64 %1162
  %1164 = icmp eq i64 %1155, %1163
  br i1 %1164, label %1165, label %1378

1165:                                             ; preds = %1149
  %1166 = icmp eq i64 %1155, 0
  br i1 %1166, label %1187, label %1167

1167:                                             ; preds = %1165
  %1168 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1153, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1169 = load i16*, i16** %1168, align 8
  %1170 = bitcast %"class.std::__1::basic_string"* %1153 to i16*
  %1171 = select i1 %1159, i16* %1169, i16* %1170
  %1172 = load i16*, i16** %897, align 8
  %1173 = bitcast %"class.std::__1::basic_string"* %10 to i16*
  %1174 = select i1 %1154, i16* %1172, i16* %1173
  br label %1175

1175:                                             ; preds = %1182, %1167
  %1176 = phi i64 [ %1183, %1182 ], [ %1155, %1167 ]
  %1177 = phi i16* [ %1185, %1182 ], [ %1171, %1167 ]
  %1178 = phi i16* [ %1184, %1182 ], [ %1174, %1167 ]
  %1179 = load i16, i16* %1178, align 2
  %1180 = load i16, i16* %1177, align 2
  %1181 = icmp eq i16 %1180, %1179
  br i1 %1181, label %1182, label %1378

1182:                                             ; preds = %1175
  %1183 = add i64 %1176, -1
  %1184 = getelementptr inbounds i16, i16* %1178, i64 1
  %1185 = getelementptr inbounds i16, i16* %1177, i64 1
  %1186 = icmp eq i64 %1183, 0
  br i1 %1186, label %1187, label %1175

1187:                                             ; preds = %1182, %1165
  br i1 %1154, label %1190, label %1188

1188:                                             ; preds = %1187
  %1189 = bitcast %"class.std::__1::basic_string"* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1189, i8* nonnull align 8 %896, i64 24, i1 false) #13
  br label %1362

1190:                                             ; preds = %1187
  %1191 = load i16*, i16** %897, align 8
  %1192 = icmp ult i64 %1151, 11
  br i1 %1192, label %1193, label %1198

1193:                                             ; preds = %1190
  %1194 = bitcast %"class.std::__1::basic_string"* %12 to i16*
  %1195 = trunc i64 %1151 to i8
  %1196 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1197 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1196, i64 0, i32 1, i32 1
  store i8 %1195, i8* %1197, align 1
  br label %1215

1198:                                             ; preds = %1190
  %1199 = icmp ugt i64 %1151, 9223372036854775791
  br i1 %1199, label %1200, label %1202

1200:                                             ; preds = %1198
  %1201 = bitcast %"class.std::__1::basic_string"* %12 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %1201) #14
  unreachable

1202:                                             ; preds = %1198
  %1203 = add nuw nsw i64 %1151, 8
  %1204 = and i64 %1203, -8
  %1205 = icmp slt i64 %1204, 0
  br i1 %1205, label %1206, label %1207

1206:                                             ; preds = %1202
  call void @abort() #14
  unreachable

1207:                                             ; preds = %1202
  %1208 = shl i64 %1204, 1
  %1209 = call i8* @_Znwm(i64 %1208) #15
  %1210 = bitcast i8* %1209 to i16*
  %1211 = bitcast %"class.std::__1::basic_string"* %12 to i8**
  store i8* %1209, i8** %1211, align 8
  %1212 = or i64 %1204, -9223372036854775808
  %1213 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %1212, i64* %1213, align 8
  %1214 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1151, i64* %1214, align 8
  br label %1215

1215:                                             ; preds = %1207, %1193
  %1216 = phi i16* [ %1194, %1193 ], [ %1210, %1207 ]
  %1217 = add nuw nsw i64 %1151, 1
  %1218 = add i64 %1151, 1
  %1219 = icmp ult i64 %1218, 16
  br i1 %1219, label %1309, label %1220

1220:                                             ; preds = %1215
  %1221 = add i64 %1151, 1
  %1222 = getelementptr i16, i16* %1216, i64 %1221
  %1223 = getelementptr i16, i16* %1191, i64 %1221
  %1224 = icmp ult i16* %1216, %1223
  %1225 = icmp ult i16* %1191, %1222
  %1226 = and i1 %1224, %1225
  br i1 %1226, label %1309, label %1227

1227:                                             ; preds = %1220
  %1228 = and i64 %1218, -16
  %1229 = sub i64 %1217, %1228
  %1230 = getelementptr i16, i16* %1191, i64 %1228
  %1231 = getelementptr i16, i16* %1216, i64 %1228
  %1232 = add i64 %1228, -16
  %1233 = lshr exact i64 %1232, 4
  %1234 = add nuw nsw i64 %1233, 1
  %1235 = and i64 %1234, 3
  %1236 = icmp ult i64 %1232, 48
  br i1 %1236, label %1288, label %1237

1237:                                             ; preds = %1227
  %1238 = sub nsw i64 %1234, %1235
  br label %1239

1239:                                             ; preds = %1239, %1237
  %1240 = phi i64 [ 0, %1237 ], [ %1285, %1239 ]
  %1241 = phi i64 [ %1238, %1237 ], [ %1286, %1239 ]
  %1242 = getelementptr i16, i16* %1191, i64 %1240
  %1243 = getelementptr i16, i16* %1216, i64 %1240
  %1244 = bitcast i16* %1242 to <8 x i16>*
  %1245 = load <8 x i16>, <8 x i16>* %1244, align 2, !alias.scope !176
  %1246 = getelementptr i16, i16* %1242, i64 8
  %1247 = bitcast i16* %1246 to <8 x i16>*
  %1248 = load <8 x i16>, <8 x i16>* %1247, align 2, !alias.scope !176
  %1249 = bitcast i16* %1243 to <8 x i16>*
  store <8 x i16> %1245, <8 x i16>* %1249, align 2, !alias.scope !179, !noalias !176
  %1250 = getelementptr i16, i16* %1243, i64 8
  %1251 = bitcast i16* %1250 to <8 x i16>*
  store <8 x i16> %1248, <8 x i16>* %1251, align 2, !alias.scope !179, !noalias !176
  %1252 = or i64 %1240, 16
  %1253 = getelementptr i16, i16* %1191, i64 %1252
  %1254 = getelementptr i16, i16* %1216, i64 %1252
  %1255 = bitcast i16* %1253 to <8 x i16>*
  %1256 = load <8 x i16>, <8 x i16>* %1255, align 2, !alias.scope !176
  %1257 = getelementptr i16, i16* %1253, i64 8
  %1258 = bitcast i16* %1257 to <8 x i16>*
  %1259 = load <8 x i16>, <8 x i16>* %1258, align 2, !alias.scope !176
  %1260 = bitcast i16* %1254 to <8 x i16>*
  store <8 x i16> %1256, <8 x i16>* %1260, align 2, !alias.scope !179, !noalias !176
  %1261 = getelementptr i16, i16* %1254, i64 8
  %1262 = bitcast i16* %1261 to <8 x i16>*
  store <8 x i16> %1259, <8 x i16>* %1262, align 2, !alias.scope !179, !noalias !176
  %1263 = or i64 %1240, 32
  %1264 = getelementptr i16, i16* %1191, i64 %1263
  %1265 = getelementptr i16, i16* %1216, i64 %1263
  %1266 = bitcast i16* %1264 to <8 x i16>*
  %1267 = load <8 x i16>, <8 x i16>* %1266, align 2, !alias.scope !176
  %1268 = getelementptr i16, i16* %1264, i64 8
  %1269 = bitcast i16* %1268 to <8 x i16>*
  %1270 = load <8 x i16>, <8 x i16>* %1269, align 2, !alias.scope !176
  %1271 = bitcast i16* %1265 to <8 x i16>*
  store <8 x i16> %1267, <8 x i16>* %1271, align 2, !alias.scope !179, !noalias !176
  %1272 = getelementptr i16, i16* %1265, i64 8
  %1273 = bitcast i16* %1272 to <8 x i16>*
  store <8 x i16> %1270, <8 x i16>* %1273, align 2, !alias.scope !179, !noalias !176
  %1274 = or i64 %1240, 48
  %1275 = getelementptr i16, i16* %1191, i64 %1274
  %1276 = getelementptr i16, i16* %1216, i64 %1274
  %1277 = bitcast i16* %1275 to <8 x i16>*
  %1278 = load <8 x i16>, <8 x i16>* %1277, align 2, !alias.scope !176
  %1279 = getelementptr i16, i16* %1275, i64 8
  %1280 = bitcast i16* %1279 to <8 x i16>*
  %1281 = load <8 x i16>, <8 x i16>* %1280, align 2, !alias.scope !176
  %1282 = bitcast i16* %1276 to <8 x i16>*
  store <8 x i16> %1278, <8 x i16>* %1282, align 2, !alias.scope !179, !noalias !176
  %1283 = getelementptr i16, i16* %1276, i64 8
  %1284 = bitcast i16* %1283 to <8 x i16>*
  store <8 x i16> %1281, <8 x i16>* %1284, align 2, !alias.scope !179, !noalias !176
  %1285 = add i64 %1240, 64
  %1286 = add i64 %1241, -4
  %1287 = icmp eq i64 %1286, 0
  br i1 %1287, label %1288, label %1239, !llvm.loop !181

1288:                                             ; preds = %1239, %1227
  %1289 = phi i64 [ 0, %1227 ], [ %1285, %1239 ]
  %1290 = icmp eq i64 %1235, 0
  br i1 %1290, label %1307, label %1291

1291:                                             ; preds = %1288, %1291
  %1292 = phi i64 [ %1304, %1291 ], [ %1289, %1288 ]
  %1293 = phi i64 [ %1305, %1291 ], [ %1235, %1288 ]
  %1294 = getelementptr i16, i16* %1191, i64 %1292
  %1295 = getelementptr i16, i16* %1216, i64 %1292
  %1296 = bitcast i16* %1294 to <8 x i16>*
  %1297 = load <8 x i16>, <8 x i16>* %1296, align 2, !alias.scope !176
  %1298 = getelementptr i16, i16* %1294, i64 8
  %1299 = bitcast i16* %1298 to <8 x i16>*
  %1300 = load <8 x i16>, <8 x i16>* %1299, align 2, !alias.scope !176
  %1301 = bitcast i16* %1295 to <8 x i16>*
  store <8 x i16> %1297, <8 x i16>* %1301, align 2, !alias.scope !179, !noalias !176
  %1302 = getelementptr i16, i16* %1295, i64 8
  %1303 = bitcast i16* %1302 to <8 x i16>*
  store <8 x i16> %1300, <8 x i16>* %1303, align 2, !alias.scope !179, !noalias !176
  %1304 = add i64 %1292, 16
  %1305 = add i64 %1293, -1
  %1306 = icmp eq i64 %1305, 0
  br i1 %1306, label %1307, label %1291, !llvm.loop !182

1307:                                             ; preds = %1291, %1288
  %1308 = icmp eq i64 %1218, %1228
  br i1 %1308, label %1362, label %1309

1309:                                             ; preds = %1307, %1220, %1215
  %1310 = phi i64 [ %1217, %1220 ], [ %1217, %1215 ], [ %1229, %1307 ]
  %1311 = phi i16* [ %1191, %1220 ], [ %1191, %1215 ], [ %1230, %1307 ]
  %1312 = phi i16* [ %1216, %1220 ], [ %1216, %1215 ], [ %1231, %1307 ]
  %1313 = add i64 %1310, -1
  %1314 = and i64 %1310, 7
  %1315 = icmp eq i64 %1314, 0
  br i1 %1315, label %1327, label %1316

1316:                                             ; preds = %1309, %1316
  %1317 = phi i64 [ %1322, %1316 ], [ %1310, %1309 ]
  %1318 = phi i16* [ %1324, %1316 ], [ %1311, %1309 ]
  %1319 = phi i16* [ %1323, %1316 ], [ %1312, %1309 ]
  %1320 = phi i64 [ %1325, %1316 ], [ %1314, %1309 ]
  %1321 = load i16, i16* %1318, align 2
  store i16 %1321, i16* %1319, align 2
  %1322 = add i64 %1317, -1
  %1323 = getelementptr inbounds i16, i16* %1319, i64 1
  %1324 = getelementptr inbounds i16, i16* %1318, i64 1
  %1325 = add i64 %1320, -1
  %1326 = icmp eq i64 %1325, 0
  br i1 %1326, label %1327, label %1316, !llvm.loop !183

1327:                                             ; preds = %1316, %1309
  %1328 = phi i64 [ %1310, %1309 ], [ %1322, %1316 ]
  %1329 = phi i16* [ %1311, %1309 ], [ %1324, %1316 ]
  %1330 = phi i16* [ %1312, %1309 ], [ %1323, %1316 ]
  %1331 = icmp ult i64 %1313, 7
  br i1 %1331, label %1362, label %1332

1332:                                             ; preds = %1327, %1332
  %1333 = phi i64 [ %1358, %1332 ], [ %1328, %1327 ]
  %1334 = phi i16* [ %1360, %1332 ], [ %1329, %1327 ]
  %1335 = phi i16* [ %1359, %1332 ], [ %1330, %1327 ]
  %1336 = load i16, i16* %1334, align 2
  store i16 %1336, i16* %1335, align 2
  %1337 = getelementptr inbounds i16, i16* %1335, i64 1
  %1338 = getelementptr inbounds i16, i16* %1334, i64 1
  %1339 = load i16, i16* %1338, align 2
  store i16 %1339, i16* %1337, align 2
  %1340 = getelementptr inbounds i16, i16* %1335, i64 2
  %1341 = getelementptr inbounds i16, i16* %1334, i64 2
  %1342 = load i16, i16* %1341, align 2
  store i16 %1342, i16* %1340, align 2
  %1343 = getelementptr inbounds i16, i16* %1335, i64 3
  %1344 = getelementptr inbounds i16, i16* %1334, i64 3
  %1345 = load i16, i16* %1344, align 2
  store i16 %1345, i16* %1343, align 2
  %1346 = getelementptr inbounds i16, i16* %1335, i64 4
  %1347 = getelementptr inbounds i16, i16* %1334, i64 4
  %1348 = load i16, i16* %1347, align 2
  store i16 %1348, i16* %1346, align 2
  %1349 = getelementptr inbounds i16, i16* %1335, i64 5
  %1350 = getelementptr inbounds i16, i16* %1334, i64 5
  %1351 = load i16, i16* %1350, align 2
  store i16 %1351, i16* %1349, align 2
  %1352 = getelementptr inbounds i16, i16* %1335, i64 6
  %1353 = getelementptr inbounds i16, i16* %1334, i64 6
  %1354 = load i16, i16* %1353, align 2
  store i16 %1354, i16* %1352, align 2
  %1355 = getelementptr inbounds i16, i16* %1335, i64 7
  %1356 = getelementptr inbounds i16, i16* %1334, i64 7
  %1357 = load i16, i16* %1356, align 2
  store i16 %1357, i16* %1355, align 2
  %1358 = add i64 %1333, -8
  %1359 = getelementptr inbounds i16, i16* %1335, i64 8
  %1360 = getelementptr inbounds i16, i16* %1334, i64 8
  %1361 = icmp eq i64 %1358, 0
  br i1 %1361, label %1362, label %1332, !llvm.loop !184

1362:                                             ; preds = %1327, %1332, %1307, %1188
  %1363 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %1364 = load i32, i32* %1363, align 8
  %1365 = icmp sgt i32 %1364, 2
  %1366 = select i1 %1365, i32 %1364, i32 2
  %1367 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %1368 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %1367, align 8
  %1369 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %1368, i64 3
  %1370 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %1369, align 8
  call void %1370(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %12, i32 %1366) #13
  %1371 = bitcast %"class.std::__1::basic_string"* %12 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1372 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1371, i64 0, i32 1, i32 1
  %1373 = load i8, i8* %1372, align 1
  %1374 = icmp slt i8 %1373, 0
  br i1 %1374, label %1375, label %1565

1375:                                             ; preds = %1362
  %1376 = bitcast %"class.std::__1::basic_string"* %12 to i8**
  %1377 = load i8*, i8** %1376, align 8
  call void @_ZdlPv(i8* %1377) #15
  br label %1565

1378:                                             ; preds = %1175, %1149
  br i1 %1154, label %1381, label %1379

1379:                                             ; preds = %1378
  %1380 = bitcast %"class.std::__1::basic_string"* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1380, i8* nonnull align 8 %896, i64 24, i1 false) #13
  br label %1553

1381:                                             ; preds = %1378
  %1382 = load i16*, i16** %897, align 8
  %1383 = icmp ult i64 %1151, 11
  br i1 %1383, label %1384, label %1389

1384:                                             ; preds = %1381
  %1385 = bitcast %"class.std::__1::basic_string"* %13 to i16*
  %1386 = trunc i64 %1151 to i8
  %1387 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1388 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1387, i64 0, i32 1, i32 1
  store i8 %1386, i8* %1388, align 1
  br label %1406

1389:                                             ; preds = %1381
  %1390 = icmp ugt i64 %1151, 9223372036854775791
  br i1 %1390, label %1391, label %1393

1391:                                             ; preds = %1389
  %1392 = bitcast %"class.std::__1::basic_string"* %13 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %1392) #14
  unreachable

1393:                                             ; preds = %1389
  %1394 = add nuw nsw i64 %1151, 8
  %1395 = and i64 %1394, -8
  %1396 = icmp slt i64 %1395, 0
  br i1 %1396, label %1397, label %1398

1397:                                             ; preds = %1393
  call void @abort() #14
  unreachable

1398:                                             ; preds = %1393
  %1399 = shl i64 %1395, 1
  %1400 = call i8* @_Znwm(i64 %1399) #15
  %1401 = bitcast i8* %1400 to i16*
  %1402 = bitcast %"class.std::__1::basic_string"* %13 to i8**
  store i8* %1400, i8** %1402, align 8
  %1403 = or i64 %1395, -9223372036854775808
  %1404 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %1403, i64* %1404, align 8
  %1405 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %1151, i64* %1405, align 8
  br label %1406

1406:                                             ; preds = %1398, %1384
  %1407 = phi i16* [ %1385, %1384 ], [ %1401, %1398 ]
  %1408 = add nuw nsw i64 %1151, 1
  %1409 = add i64 %1151, 1
  %1410 = icmp ult i64 %1409, 16
  br i1 %1410, label %1500, label %1411

1411:                                             ; preds = %1406
  %1412 = add i64 %1151, 1
  %1413 = getelementptr i16, i16* %1407, i64 %1412
  %1414 = getelementptr i16, i16* %1382, i64 %1412
  %1415 = icmp ult i16* %1407, %1414
  %1416 = icmp ult i16* %1382, %1413
  %1417 = and i1 %1415, %1416
  br i1 %1417, label %1500, label %1418

1418:                                             ; preds = %1411
  %1419 = and i64 %1409, -16
  %1420 = sub i64 %1408, %1419
  %1421 = getelementptr i16, i16* %1382, i64 %1419
  %1422 = getelementptr i16, i16* %1407, i64 %1419
  %1423 = add i64 %1419, -16
  %1424 = lshr exact i64 %1423, 4
  %1425 = add nuw nsw i64 %1424, 1
  %1426 = and i64 %1425, 3
  %1427 = icmp ult i64 %1423, 48
  br i1 %1427, label %1479, label %1428

1428:                                             ; preds = %1418
  %1429 = sub nsw i64 %1425, %1426
  br label %1430

1430:                                             ; preds = %1430, %1428
  %1431 = phi i64 [ 0, %1428 ], [ %1476, %1430 ]
  %1432 = phi i64 [ %1429, %1428 ], [ %1477, %1430 ]
  %1433 = getelementptr i16, i16* %1382, i64 %1431
  %1434 = getelementptr i16, i16* %1407, i64 %1431
  %1435 = bitcast i16* %1433 to <8 x i16>*
  %1436 = load <8 x i16>, <8 x i16>* %1435, align 2, !alias.scope !185
  %1437 = getelementptr i16, i16* %1433, i64 8
  %1438 = bitcast i16* %1437 to <8 x i16>*
  %1439 = load <8 x i16>, <8 x i16>* %1438, align 2, !alias.scope !185
  %1440 = bitcast i16* %1434 to <8 x i16>*
  store <8 x i16> %1436, <8 x i16>* %1440, align 2, !alias.scope !188, !noalias !185
  %1441 = getelementptr i16, i16* %1434, i64 8
  %1442 = bitcast i16* %1441 to <8 x i16>*
  store <8 x i16> %1439, <8 x i16>* %1442, align 2, !alias.scope !188, !noalias !185
  %1443 = or i64 %1431, 16
  %1444 = getelementptr i16, i16* %1382, i64 %1443
  %1445 = getelementptr i16, i16* %1407, i64 %1443
  %1446 = bitcast i16* %1444 to <8 x i16>*
  %1447 = load <8 x i16>, <8 x i16>* %1446, align 2, !alias.scope !185
  %1448 = getelementptr i16, i16* %1444, i64 8
  %1449 = bitcast i16* %1448 to <8 x i16>*
  %1450 = load <8 x i16>, <8 x i16>* %1449, align 2, !alias.scope !185
  %1451 = bitcast i16* %1445 to <8 x i16>*
  store <8 x i16> %1447, <8 x i16>* %1451, align 2, !alias.scope !188, !noalias !185
  %1452 = getelementptr i16, i16* %1445, i64 8
  %1453 = bitcast i16* %1452 to <8 x i16>*
  store <8 x i16> %1450, <8 x i16>* %1453, align 2, !alias.scope !188, !noalias !185
  %1454 = or i64 %1431, 32
  %1455 = getelementptr i16, i16* %1382, i64 %1454
  %1456 = getelementptr i16, i16* %1407, i64 %1454
  %1457 = bitcast i16* %1455 to <8 x i16>*
  %1458 = load <8 x i16>, <8 x i16>* %1457, align 2, !alias.scope !185
  %1459 = getelementptr i16, i16* %1455, i64 8
  %1460 = bitcast i16* %1459 to <8 x i16>*
  %1461 = load <8 x i16>, <8 x i16>* %1460, align 2, !alias.scope !185
  %1462 = bitcast i16* %1456 to <8 x i16>*
  store <8 x i16> %1458, <8 x i16>* %1462, align 2, !alias.scope !188, !noalias !185
  %1463 = getelementptr i16, i16* %1456, i64 8
  %1464 = bitcast i16* %1463 to <8 x i16>*
  store <8 x i16> %1461, <8 x i16>* %1464, align 2, !alias.scope !188, !noalias !185
  %1465 = or i64 %1431, 48
  %1466 = getelementptr i16, i16* %1382, i64 %1465
  %1467 = getelementptr i16, i16* %1407, i64 %1465
  %1468 = bitcast i16* %1466 to <8 x i16>*
  %1469 = load <8 x i16>, <8 x i16>* %1468, align 2, !alias.scope !185
  %1470 = getelementptr i16, i16* %1466, i64 8
  %1471 = bitcast i16* %1470 to <8 x i16>*
  %1472 = load <8 x i16>, <8 x i16>* %1471, align 2, !alias.scope !185
  %1473 = bitcast i16* %1467 to <8 x i16>*
  store <8 x i16> %1469, <8 x i16>* %1473, align 2, !alias.scope !188, !noalias !185
  %1474 = getelementptr i16, i16* %1467, i64 8
  %1475 = bitcast i16* %1474 to <8 x i16>*
  store <8 x i16> %1472, <8 x i16>* %1475, align 2, !alias.scope !188, !noalias !185
  %1476 = add i64 %1431, 64
  %1477 = add i64 %1432, -4
  %1478 = icmp eq i64 %1477, 0
  br i1 %1478, label %1479, label %1430, !llvm.loop !190

1479:                                             ; preds = %1430, %1418
  %1480 = phi i64 [ 0, %1418 ], [ %1476, %1430 ]
  %1481 = icmp eq i64 %1426, 0
  br i1 %1481, label %1498, label %1482

1482:                                             ; preds = %1479, %1482
  %1483 = phi i64 [ %1495, %1482 ], [ %1480, %1479 ]
  %1484 = phi i64 [ %1496, %1482 ], [ %1426, %1479 ]
  %1485 = getelementptr i16, i16* %1382, i64 %1483
  %1486 = getelementptr i16, i16* %1407, i64 %1483
  %1487 = bitcast i16* %1485 to <8 x i16>*
  %1488 = load <8 x i16>, <8 x i16>* %1487, align 2, !alias.scope !185
  %1489 = getelementptr i16, i16* %1485, i64 8
  %1490 = bitcast i16* %1489 to <8 x i16>*
  %1491 = load <8 x i16>, <8 x i16>* %1490, align 2, !alias.scope !185
  %1492 = bitcast i16* %1486 to <8 x i16>*
  store <8 x i16> %1488, <8 x i16>* %1492, align 2, !alias.scope !188, !noalias !185
  %1493 = getelementptr i16, i16* %1486, i64 8
  %1494 = bitcast i16* %1493 to <8 x i16>*
  store <8 x i16> %1491, <8 x i16>* %1494, align 2, !alias.scope !188, !noalias !185
  %1495 = add i64 %1483, 16
  %1496 = add i64 %1484, -1
  %1497 = icmp eq i64 %1496, 0
  br i1 %1497, label %1498, label %1482, !llvm.loop !191

1498:                                             ; preds = %1482, %1479
  %1499 = icmp eq i64 %1409, %1419
  br i1 %1499, label %1553, label %1500

1500:                                             ; preds = %1498, %1411, %1406
  %1501 = phi i64 [ %1408, %1411 ], [ %1408, %1406 ], [ %1420, %1498 ]
  %1502 = phi i16* [ %1382, %1411 ], [ %1382, %1406 ], [ %1421, %1498 ]
  %1503 = phi i16* [ %1407, %1411 ], [ %1407, %1406 ], [ %1422, %1498 ]
  %1504 = add i64 %1501, -1
  %1505 = and i64 %1501, 7
  %1506 = icmp eq i64 %1505, 0
  br i1 %1506, label %1518, label %1507

1507:                                             ; preds = %1500, %1507
  %1508 = phi i64 [ %1513, %1507 ], [ %1501, %1500 ]
  %1509 = phi i16* [ %1515, %1507 ], [ %1502, %1500 ]
  %1510 = phi i16* [ %1514, %1507 ], [ %1503, %1500 ]
  %1511 = phi i64 [ %1516, %1507 ], [ %1505, %1500 ]
  %1512 = load i16, i16* %1509, align 2
  store i16 %1512, i16* %1510, align 2
  %1513 = add i64 %1508, -1
  %1514 = getelementptr inbounds i16, i16* %1510, i64 1
  %1515 = getelementptr inbounds i16, i16* %1509, i64 1
  %1516 = add i64 %1511, -1
  %1517 = icmp eq i64 %1516, 0
  br i1 %1517, label %1518, label %1507, !llvm.loop !192

1518:                                             ; preds = %1507, %1500
  %1519 = phi i64 [ %1501, %1500 ], [ %1513, %1507 ]
  %1520 = phi i16* [ %1502, %1500 ], [ %1515, %1507 ]
  %1521 = phi i16* [ %1503, %1500 ], [ %1514, %1507 ]
  %1522 = icmp ult i64 %1504, 7
  br i1 %1522, label %1553, label %1523

1523:                                             ; preds = %1518, %1523
  %1524 = phi i64 [ %1549, %1523 ], [ %1519, %1518 ]
  %1525 = phi i16* [ %1551, %1523 ], [ %1520, %1518 ]
  %1526 = phi i16* [ %1550, %1523 ], [ %1521, %1518 ]
  %1527 = load i16, i16* %1525, align 2
  store i16 %1527, i16* %1526, align 2
  %1528 = getelementptr inbounds i16, i16* %1526, i64 1
  %1529 = getelementptr inbounds i16, i16* %1525, i64 1
  %1530 = load i16, i16* %1529, align 2
  store i16 %1530, i16* %1528, align 2
  %1531 = getelementptr inbounds i16, i16* %1526, i64 2
  %1532 = getelementptr inbounds i16, i16* %1525, i64 2
  %1533 = load i16, i16* %1532, align 2
  store i16 %1533, i16* %1531, align 2
  %1534 = getelementptr inbounds i16, i16* %1526, i64 3
  %1535 = getelementptr inbounds i16, i16* %1525, i64 3
  %1536 = load i16, i16* %1535, align 2
  store i16 %1536, i16* %1534, align 2
  %1537 = getelementptr inbounds i16, i16* %1526, i64 4
  %1538 = getelementptr inbounds i16, i16* %1525, i64 4
  %1539 = load i16, i16* %1538, align 2
  store i16 %1539, i16* %1537, align 2
  %1540 = getelementptr inbounds i16, i16* %1526, i64 5
  %1541 = getelementptr inbounds i16, i16* %1525, i64 5
  %1542 = load i16, i16* %1541, align 2
  store i16 %1542, i16* %1540, align 2
  %1543 = getelementptr inbounds i16, i16* %1526, i64 6
  %1544 = getelementptr inbounds i16, i16* %1525, i64 6
  %1545 = load i16, i16* %1544, align 2
  store i16 %1545, i16* %1543, align 2
  %1546 = getelementptr inbounds i16, i16* %1526, i64 7
  %1547 = getelementptr inbounds i16, i16* %1525, i64 7
  %1548 = load i16, i16* %1547, align 2
  store i16 %1548, i16* %1546, align 2
  %1549 = add i64 %1524, -8
  %1550 = getelementptr inbounds i16, i16* %1526, i64 8
  %1551 = getelementptr inbounds i16, i16* %1525, i64 8
  %1552 = icmp eq i64 %1549, 0
  br i1 %1552, label %1553, label %1523, !llvm.loop !193

1553:                                             ; preds = %1518, %1523, %1498, %1379
  %1554 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %1555 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %1554, align 8
  %1556 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %1555, i64 3
  %1557 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %1556, align 8
  call void %1557(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %13, i32 2) #13
  %1558 = bitcast %"class.std::__1::basic_string"* %13 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1559 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1558, i64 0, i32 1, i32 1
  %1560 = load i8, i8* %1559, align 1
  %1561 = icmp slt i8 %1560, 0
  br i1 %1561, label %1562, label %1565

1562:                                             ; preds = %1553
  %1563 = bitcast %"class.std::__1::basic_string"* %13 to i8**
  %1564 = load i8*, i8** %1563, align 8
  call void @_ZdlPv(i8* %1564) #15
  br label %1565

1565:                                             ; preds = %1562, %1553, %1375, %1362, %1135, %1122
  %1566 = load i8, i8* %910, align 1
  %1567 = icmp slt i8 %1566, 0
  br i1 %1567, label %1568, label %1571

1568:                                             ; preds = %1565
  %1569 = bitcast %"class.std::__1::basic_string"* %10 to i8**
  %1570 = load i8*, i8** %1569, align 8
  call void @_ZdlPv(i8* %1570) #15
  br label %1571

1571:                                             ; preds = %1565, %1568
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %896) #13
  br label %1572

1572:                                             ; preds = %666, %414, %348, %167, %128, %892, %881, %644, %633, %647, %1571, %683, %435, %423, %430, %411, %347, %357, %364, %210, %166, %176, %183, %153, %157, %124, %137, %144, %217, %115
  %1573 = phi i1 [ %116, %115 ], [ true, %217 ], [ true, %144 ], [ true, %137 ], [ true, %124 ], [ true, %157 ], [ true, %153 ], [ true, %183 ], [ true, %176 ], [ true, %166 ], [ true, %210 ], [ true, %364 ], [ true, %357 ], [ true, %347 ], [ true, %411 ], [ true, %430 ], [ true, %423 ], [ true, %435 ], [ true, %683 ], [ true, %1571 ], [ false, %647 ], [ true, %633 ], [ true, %644 ], [ true, %881 ], [ true, %892 ], [ true, %128 ], [ true, %167 ], [ true, %348 ], [ true, %414 ], [ false, %666 ]
  call void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %107) #13
  br label %1574

1574:                                             ; preds = %99, %105, %50, %49, %45, %3, %1572
  %1575 = phi i1 [ %1573, %1572 ], [ true, %3 ], [ true, %45 ], [ true, %49 ], [ true, %50 ], [ true, %105 ], [ true, %99 ]
  %1576 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1577 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1576, i64 0, i32 1, i32 1
  %1578 = load i8, i8* %1577, align 1
  %1579 = icmp slt i8 %1578, 0
  br i1 %1579, label %1580, label %1583

1580:                                             ; preds = %1574
  %1581 = bitcast %"class.std::__1::basic_string"* %5 to i8**
  %1582 = load i8*, i8** %1581, align 8
  call void @_ZdlPv(i8* %1582) #15
  br label %1583

1583:                                             ; preds = %1574, %1580
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #13
  %1584 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %1585 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %1584, i64 0, i32 1, i32 1
  %1586 = load i8, i8* %1585, align 1
  %1587 = icmp slt i8 %1586, 0
  br i1 %1587, label %1588, label %1591

1588:                                             ; preds = %1583
  %1589 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %1590 = load i8*, i8** %1589, align 8
  call void @_ZdlPv(i8* %1590) #15
  br label %1591

1591:                                             ; preds = %1583, %1588
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #13
  ret i1 %1575
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent29MergeTokenEquivalentComponentERKS1_(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::vector.12", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::vector.12", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"class.std::__1::vector.80", align 16
  %10 = bitcast %"class.std::__1::vector.12"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #13
  %11 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %12 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %12, i64 23
  %14 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %13, align 8
  call void %14(%"class.std::__1::basic_string"* nonnull sret %4, %"class.autofill::structured_address::AddressComponent"* %0) #13
  call void @_ZN8autofill18structured_address13TokenizeValueENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.std::__1::vector.12"* nonnull sret %3, %"class.std::__1::basic_string"* nonnull %4) #13
  %15 = bitcast %"class.std::__1::vector.12"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #13
  %16 = bitcast %"class.autofill::structured_address::AddressComponent"* %1 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %17 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %16, align 8
  %18 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %17, i64 23
  %19 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %18, align 8
  call void %19(%"class.std::__1::basic_string"* nonnull sret %6, %"class.autofill::structured_address::AddressComponent"* %1) #13
  call void @_ZN8autofill18structured_address13TokenizeValueENSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.std::__1::vector.12"* nonnull sret %5, %"class.std::__1::basic_string"* nonnull %6) #13
  %20 = call zeroext i1 @_ZN8autofill18structured_address20AreSortedTokensEqualERKNSt3__16vectorINS0_12AddressTokenENS1_9allocatorIS3_EEEES8_(%"class.std::__1::vector.12"* nonnull dereferenceable(24) %3, %"class.std::__1::vector.12"* nonnull dereferenceable(24) %5) #13
  %21 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 0
  %22 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %21, align 8
  %23 = icmp eq %"struct.autofill::structured_address::AddressToken"* %22, null
  br i1 %23, label %55, label %24

24:                                               ; preds = %2
  %25 = bitcast %"struct.autofill::structured_address::AddressToken"* %22 to i8*
  %26 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 1
  %27 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %26, align 8
  %28 = icmp eq %"struct.autofill::structured_address::AddressToken"* %27, %22
  br i1 %28, label %53, label %29

29:                                               ; preds = %24, %48
  %30 = phi %"struct.autofill::structured_address::AddressToken"* [ %31, %48 ], [ %27, %24 ]
  %31 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %30, i64 -1
  %32 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %30, i64 -1, i32 1
  %33 = bitcast %"class.std::__1::basic_string"* %32 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %34 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %33, i64 0, i32 1, i32 1
  %35 = load i8, i8* %34, align 1
  %36 = icmp slt i8 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %29
  %38 = bitcast %"class.std::__1::basic_string"* %32 to i8**
  %39 = load i8*, i8** %38, align 8
  call void @_ZdlPv(i8* %39) #15
  br label %40

40:                                               ; preds = %37, %29
  %41 = bitcast %"struct.autofill::structured_address::AddressToken"* %31 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %42 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %41, i64 0, i32 1, i32 1
  %43 = load i8, i8* %42, align 1
  %44 = icmp slt i8 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %40
  %46 = bitcast %"struct.autofill::structured_address::AddressToken"* %31 to i8**
  %47 = load i8*, i8** %46, align 8
  call void @_ZdlPv(i8* %47) #15
  br label %48

48:                                               ; preds = %45, %40
  %49 = icmp eq %"struct.autofill::structured_address::AddressToken"* %31, %22
  br i1 %49, label %50, label %29

50:                                               ; preds = %48
  %51 = bitcast %"class.std::__1::vector.12"* %5 to i8**
  %52 = load i8*, i8** %51, align 8
  br label %53

53:                                               ; preds = %50, %24
  %54 = phi i8* [ %52, %50 ], [ %25, %24 ]
  store %"struct.autofill::structured_address::AddressToken"* %22, %"struct.autofill::structured_address::AddressToken"** %26, align 8
  call void @_ZdlPv(i8* %54) #15
  br label %55

55:                                               ; preds = %2, %53
  %56 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %56, i64 0, i32 1, i32 1
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %55
  %61 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %62 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %62) #15
  br label %63

63:                                               ; preds = %55, %60
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #13
  %64 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %3, i64 0, i32 0, i32 0
  %65 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %64, align 8
  %66 = icmp eq %"struct.autofill::structured_address::AddressToken"* %65, null
  br i1 %66, label %98, label %67

67:                                               ; preds = %63
  %68 = bitcast %"struct.autofill::structured_address::AddressToken"* %65 to i8*
  %69 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %3, i64 0, i32 0, i32 1
  %70 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %69, align 8
  %71 = icmp eq %"struct.autofill::structured_address::AddressToken"* %70, %65
  br i1 %71, label %96, label %72

72:                                               ; preds = %67, %91
  %73 = phi %"struct.autofill::structured_address::AddressToken"* [ %74, %91 ], [ %70, %67 ]
  %74 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %73, i64 -1
  %75 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %73, i64 -1, i32 1
  %76 = bitcast %"class.std::__1::basic_string"* %75 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %76, i64 0, i32 1, i32 1
  %78 = load i8, i8* %77, align 1
  %79 = icmp slt i8 %78, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %72
  %81 = bitcast %"class.std::__1::basic_string"* %75 to i8**
  %82 = load i8*, i8** %81, align 8
  call void @_ZdlPv(i8* %82) #15
  br label %83

83:                                               ; preds = %80, %72
  %84 = bitcast %"struct.autofill::structured_address::AddressToken"* %74 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %85 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %84, i64 0, i32 1, i32 1
  %86 = load i8, i8* %85, align 1
  %87 = icmp slt i8 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %83
  %89 = bitcast %"struct.autofill::structured_address::AddressToken"* %74 to i8**
  %90 = load i8*, i8** %89, align 8
  call void @_ZdlPv(i8* %90) #15
  br label %91

91:                                               ; preds = %88, %83
  %92 = icmp eq %"struct.autofill::structured_address::AddressToken"* %74, %65
  br i1 %92, label %93, label %72

93:                                               ; preds = %91
  %94 = bitcast %"class.std::__1::vector.12"* %3 to i8**
  %95 = load i8*, i8** %94, align 8
  br label %96

96:                                               ; preds = %93, %67
  %97 = phi i8* [ %95, %93 ], [ %68, %67 ]
  store %"struct.autofill::structured_address::AddressToken"* %65, %"struct.autofill::structured_address::AddressToken"** %69, align 8
  call void @_ZdlPv(i8* %97) #15
  br label %98

98:                                               ; preds = %63, %96
  %99 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %100 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %99, i64 0, i32 1, i32 1
  %101 = load i8, i8* %100, align 1
  %102 = icmp slt i8 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %98
  %104 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %105 = load i8*, i8** %104, align 8
  call void @_ZdlPv(i8* %105) #15
  br label %106

106:                                              ; preds = %98, %103
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #13
  br i1 %20, label %107, label %607

107:                                              ; preds = %106
  %108 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %108) #13
  %109 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %110 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %111 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  %112 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %108, i8 0, i64 24, i1 false) #13
  %113 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %114 = bitcast %"class.autofill::structured_address::AddressComponent"*** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = bitcast %"class.std::__1::vector"* %112 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 %115, %117
  %119 = ashr exact i64 %118, 3
  %120 = icmp eq i64 %118, 0
  br i1 %120, label %141, label %121

121:                                              ; preds = %107
  %122 = icmp ugt i64 %119, 2305843009213693951
  br i1 %122, label %123, label %125

123:                                              ; preds = %121
  %124 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %124) #14
  unreachable

125:                                              ; preds = %121
  %126 = call i8* @_Znwm(i64 %118) #15
  %127 = bitcast i8* %126 to %"class.autofill::structured_address::AddressComponent"**
  %128 = bitcast %"class.autofill::structured_address::AddressComponent"*** %110 to i8**
  store i8* %126, i8** %128, align 8
  %129 = bitcast %"class.std::__1::vector"* %7 to i8**
  store i8* %126, i8** %129, align 8
  %130 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %127, i64 %119
  store %"class.autofill::structured_address::AddressComponent"** %130, %"class.autofill::structured_address::AddressComponent"*** %111, align 8
  %131 = bitcast %"class.autofill::structured_address::AddressComponent"*** %110 to i64*
  %132 = ptrtoint i8* %126 to i64
  %133 = icmp sgt i64 %118, 0
  br i1 %133, label %134, label %139

134:                                              ; preds = %125
  %135 = lshr exact i64 %118, 3
  %136 = inttoptr i64 %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %126, i8* align 8 %136, i64 %118, i1 false) #13
  %137 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %127, i64 %135
  %138 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %137 to i64
  br label %139

139:                                              ; preds = %134, %125
  %140 = phi i64 [ %138, %134 ], [ %132, %125 ]
  store i64 %140, i64* %131, align 8
  br label %141

141:                                              ; preds = %107, %139
  %142 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)***
  %143 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)**, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*** %142, align 8
  %144 = getelementptr inbounds i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %143, i64 24
  %145 = load i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)*, i1 (%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"*)** %144, align 8
  %146 = call zeroext i1 %145(%"class.autofill::structured_address::AddressComponent"* %0, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %1) #13
  br i1 %146, label %147, label %353

147:                                              ; preds = %141
  %148 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %149 = load i8, i8* %148, align 8, !range !2
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %153, label %151

151:                                              ; preds = %147
  %152 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %155

153:                                              ; preds = %147
  %154 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %155

155:                                              ; preds = %151, %153
  %156 = phi %"class.std::__1::basic_string"* [ %152, %151 ], [ %154, %153 ]
  %157 = bitcast %"class.std::__1::basic_string"* %156 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %158 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %157, i64 0, i32 1, i32 1
  %159 = load i8, i8* %158, align 1
  %160 = icmp slt i8 %159, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %155
  %162 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %163 = bitcast %"class.std::__1::basic_string"* %156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %162, i8* align 8 %163, i64 24, i1 false) #13
  br label %339

164:                                              ; preds = %155
  %165 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %166 = load i16*, i16** %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %156, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %168 = load i64, i64* %167, align 8
  %169 = icmp ult i64 %168, 11
  br i1 %169, label %170, label %175

170:                                              ; preds = %164
  %171 = bitcast %"class.std::__1::basic_string"* %8 to i16*
  %172 = trunc i64 %168 to i8
  %173 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %174 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %173, i64 0, i32 1, i32 1
  store i8 %172, i8* %174, align 1
  br label %192

175:                                              ; preds = %164
  %176 = icmp ugt i64 %168, 9223372036854775791
  br i1 %176, label %177, label %179

177:                                              ; preds = %175
  %178 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %178) #14
  unreachable

179:                                              ; preds = %175
  %180 = add nuw nsw i64 %168, 8
  %181 = and i64 %180, -8
  %182 = icmp slt i64 %181, 0
  br i1 %182, label %183, label %184

183:                                              ; preds = %179
  call void @abort() #14
  unreachable

184:                                              ; preds = %179
  %185 = shl i64 %181, 1
  %186 = call i8* @_Znwm(i64 %185) #15
  %187 = bitcast i8* %186 to i16*
  %188 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  store i8* %186, i8** %188, align 8
  %189 = or i64 %181, -9223372036854775808
  %190 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %189, i64* %190, align 8
  %191 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %168, i64* %191, align 8
  br label %192

192:                                              ; preds = %184, %170
  %193 = phi i16* [ %171, %170 ], [ %187, %184 ]
  %194 = add nuw nsw i64 %168, 1
  %195 = add i64 %168, 1
  %196 = icmp ult i64 %195, 16
  br i1 %196, label %286, label %197

197:                                              ; preds = %192
  %198 = add i64 %168, 1
  %199 = getelementptr i16, i16* %193, i64 %198
  %200 = getelementptr i16, i16* %166, i64 %198
  %201 = icmp ult i16* %193, %200
  %202 = icmp ult i16* %166, %199
  %203 = and i1 %201, %202
  br i1 %203, label %286, label %204

204:                                              ; preds = %197
  %205 = and i64 %195, -16
  %206 = sub i64 %194, %205
  %207 = getelementptr i16, i16* %166, i64 %205
  %208 = getelementptr i16, i16* %193, i64 %205
  %209 = add i64 %205, -16
  %210 = lshr exact i64 %209, 4
  %211 = add nuw nsw i64 %210, 1
  %212 = and i64 %211, 3
  %213 = icmp ult i64 %209, 48
  br i1 %213, label %265, label %214

214:                                              ; preds = %204
  %215 = sub nsw i64 %211, %212
  br label %216

216:                                              ; preds = %216, %214
  %217 = phi i64 [ 0, %214 ], [ %262, %216 ]
  %218 = phi i64 [ %215, %214 ], [ %263, %216 ]
  %219 = getelementptr i16, i16* %166, i64 %217
  %220 = getelementptr i16, i16* %193, i64 %217
  %221 = bitcast i16* %219 to <8 x i16>*
  %222 = load <8 x i16>, <8 x i16>* %221, align 2, !alias.scope !194
  %223 = getelementptr i16, i16* %219, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  %225 = load <8 x i16>, <8 x i16>* %224, align 2, !alias.scope !194
  %226 = bitcast i16* %220 to <8 x i16>*
  store <8 x i16> %222, <8 x i16>* %226, align 2, !alias.scope !197, !noalias !194
  %227 = getelementptr i16, i16* %220, i64 8
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %225, <8 x i16>* %228, align 2, !alias.scope !197, !noalias !194
  %229 = or i64 %217, 16
  %230 = getelementptr i16, i16* %166, i64 %229
  %231 = getelementptr i16, i16* %193, i64 %229
  %232 = bitcast i16* %230 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !194
  %234 = getelementptr i16, i16* %230, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  %236 = load <8 x i16>, <8 x i16>* %235, align 2, !alias.scope !194
  %237 = bitcast i16* %231 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %237, align 2, !alias.scope !197, !noalias !194
  %238 = getelementptr i16, i16* %231, i64 8
  %239 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %236, <8 x i16>* %239, align 2, !alias.scope !197, !noalias !194
  %240 = or i64 %217, 32
  %241 = getelementptr i16, i16* %166, i64 %240
  %242 = getelementptr i16, i16* %193, i64 %240
  %243 = bitcast i16* %241 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 2, !alias.scope !194
  %245 = getelementptr i16, i16* %241, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 2, !alias.scope !194
  %248 = bitcast i16* %242 to <8 x i16>*
  store <8 x i16> %244, <8 x i16>* %248, align 2, !alias.scope !197, !noalias !194
  %249 = getelementptr i16, i16* %242, i64 8
  %250 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %247, <8 x i16>* %250, align 2, !alias.scope !197, !noalias !194
  %251 = or i64 %217, 48
  %252 = getelementptr i16, i16* %166, i64 %251
  %253 = getelementptr i16, i16* %193, i64 %251
  %254 = bitcast i16* %252 to <8 x i16>*
  %255 = load <8 x i16>, <8 x i16>* %254, align 2, !alias.scope !194
  %256 = getelementptr i16, i16* %252, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 2, !alias.scope !194
  %259 = bitcast i16* %253 to <8 x i16>*
  store <8 x i16> %255, <8 x i16>* %259, align 2, !alias.scope !197, !noalias !194
  %260 = getelementptr i16, i16* %253, i64 8
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %258, <8 x i16>* %261, align 2, !alias.scope !197, !noalias !194
  %262 = add i64 %217, 64
  %263 = add i64 %218, -4
  %264 = icmp eq i64 %263, 0
  br i1 %264, label %265, label %216, !llvm.loop !199

265:                                              ; preds = %216, %204
  %266 = phi i64 [ 0, %204 ], [ %262, %216 ]
  %267 = icmp eq i64 %212, 0
  br i1 %267, label %284, label %268

268:                                              ; preds = %265, %268
  %269 = phi i64 [ %281, %268 ], [ %266, %265 ]
  %270 = phi i64 [ %282, %268 ], [ %212, %265 ]
  %271 = getelementptr i16, i16* %166, i64 %269
  %272 = getelementptr i16, i16* %193, i64 %269
  %273 = bitcast i16* %271 to <8 x i16>*
  %274 = load <8 x i16>, <8 x i16>* %273, align 2, !alias.scope !194
  %275 = getelementptr i16, i16* %271, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  %277 = load <8 x i16>, <8 x i16>* %276, align 2, !alias.scope !194
  %278 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %274, <8 x i16>* %278, align 2, !alias.scope !197, !noalias !194
  %279 = getelementptr i16, i16* %272, i64 8
  %280 = bitcast i16* %279 to <8 x i16>*
  store <8 x i16> %277, <8 x i16>* %280, align 2, !alias.scope !197, !noalias !194
  %281 = add i64 %269, 16
  %282 = add i64 %270, -1
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %268, !llvm.loop !200

284:                                              ; preds = %268, %265
  %285 = icmp eq i64 %195, %205
  br i1 %285, label %339, label %286

286:                                              ; preds = %284, %197, %192
  %287 = phi i64 [ %194, %197 ], [ %194, %192 ], [ %206, %284 ]
  %288 = phi i16* [ %166, %197 ], [ %166, %192 ], [ %207, %284 ]
  %289 = phi i16* [ %193, %197 ], [ %193, %192 ], [ %208, %284 ]
  %290 = add i64 %287, -1
  %291 = and i64 %287, 7
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %304, label %293

293:                                              ; preds = %286, %293
  %294 = phi i64 [ %299, %293 ], [ %287, %286 ]
  %295 = phi i16* [ %301, %293 ], [ %288, %286 ]
  %296 = phi i16* [ %300, %293 ], [ %289, %286 ]
  %297 = phi i64 [ %302, %293 ], [ %291, %286 ]
  %298 = load i16, i16* %295, align 2
  store i16 %298, i16* %296, align 2
  %299 = add i64 %294, -1
  %300 = getelementptr inbounds i16, i16* %296, i64 1
  %301 = getelementptr inbounds i16, i16* %295, i64 1
  %302 = add i64 %297, -1
  %303 = icmp eq i64 %302, 0
  br i1 %303, label %304, label %293, !llvm.loop !201

304:                                              ; preds = %293, %286
  %305 = phi i64 [ %287, %286 ], [ %299, %293 ]
  %306 = phi i16* [ %288, %286 ], [ %301, %293 ]
  %307 = phi i16* [ %289, %286 ], [ %300, %293 ]
  %308 = icmp ult i64 %290, 7
  br i1 %308, label %339, label %309

309:                                              ; preds = %304, %309
  %310 = phi i64 [ %335, %309 ], [ %305, %304 ]
  %311 = phi i16* [ %337, %309 ], [ %306, %304 ]
  %312 = phi i16* [ %336, %309 ], [ %307, %304 ]
  %313 = load i16, i16* %311, align 2
  store i16 %313, i16* %312, align 2
  %314 = getelementptr inbounds i16, i16* %312, i64 1
  %315 = getelementptr inbounds i16, i16* %311, i64 1
  %316 = load i16, i16* %315, align 2
  store i16 %316, i16* %314, align 2
  %317 = getelementptr inbounds i16, i16* %312, i64 2
  %318 = getelementptr inbounds i16, i16* %311, i64 2
  %319 = load i16, i16* %318, align 2
  store i16 %319, i16* %317, align 2
  %320 = getelementptr inbounds i16, i16* %312, i64 3
  %321 = getelementptr inbounds i16, i16* %311, i64 3
  %322 = load i16, i16* %321, align 2
  store i16 %322, i16* %320, align 2
  %323 = getelementptr inbounds i16, i16* %312, i64 4
  %324 = getelementptr inbounds i16, i16* %311, i64 4
  %325 = load i16, i16* %324, align 2
  store i16 %325, i16* %323, align 2
  %326 = getelementptr inbounds i16, i16* %312, i64 5
  %327 = getelementptr inbounds i16, i16* %311, i64 5
  %328 = load i16, i16* %327, align 2
  store i16 %328, i16* %326, align 2
  %329 = getelementptr inbounds i16, i16* %312, i64 6
  %330 = getelementptr inbounds i16, i16* %311, i64 6
  %331 = load i16, i16* %330, align 2
  store i16 %331, i16* %329, align 2
  %332 = getelementptr inbounds i16, i16* %312, i64 7
  %333 = getelementptr inbounds i16, i16* %311, i64 7
  %334 = load i16, i16* %333, align 2
  store i16 %334, i16* %332, align 2
  %335 = add i64 %310, -8
  %336 = getelementptr inbounds i16, i16* %312, i64 8
  %337 = getelementptr inbounds i16, i16* %311, i64 8
  %338 = icmp eq i64 %335, 0
  br i1 %338, label %339, label %309, !llvm.loop !202

339:                                              ; preds = %304, %309, %284, %161
  %340 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %341 = load i32, i32* %340, align 8
  %342 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %343 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %342, align 8
  %344 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %343, i64 3
  %345 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %344, align 8
  call void %345(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %8, i32 %341) #13
  %346 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %347 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %346, i64 0, i32 1, i32 1
  %348 = load i8, i8* %347, align 1
  %349 = icmp slt i8 %348, 0
  br i1 %349, label %350, label %353

350:                                              ; preds = %339
  %351 = bitcast %"class.std::__1::basic_string"* %8 to i8**
  %352 = load i8*, i8** %351, align 8
  call void @_ZdlPv(i8* %352) #15
  br label %353

353:                                              ; preds = %350, %339, %141
  %354 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %355 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %354, align 8
  %356 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %357 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %356, align 8
  %358 = icmp eq %"class.autofill::structured_address::AddressComponent"** %355, %357
  br i1 %358, label %599, label %359

359:                                              ; preds = %353
  %360 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 0
  %361 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %360, align 8
  %362 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %113, align 8
  %363 = icmp eq %"class.autofill::structured_address::AddressComponent"** %361, %362
  br i1 %363, label %599, label %366

364:                                              ; preds = %366
  %365 = icmp eq %"class.autofill::structured_address::AddressComponent"** %369, %362
  br i1 %365, label %599, label %366

366:                                              ; preds = %359, %364
  %367 = phi %"class.autofill::structured_address::AddressComponent"** [ %369, %364 ], [ %361, %359 ]
  %368 = call fastcc zeroext i1 @"_ZN4base8internal10InvokeImplIRZNK8autofill18structured_address16AddressComponent22AllDescendantsAreEmptyEvE3$_0JRKPS4_EEEDcOT_DpOT0_"(%"class.autofill::structured_address::AddressComponent"** dereferenceable(8) %367) #13
  %369 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %367, i64 1
  br i1 %368, label %364, label %370

370:                                              ; preds = %366
  %371 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %354, align 8
  %372 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %356, align 8
  %373 = icmp eq %"class.autofill::structured_address::AddressComponent"** %371, %372
  br i1 %373, label %374, label %380

374:                                              ; preds = %370
  %375 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %371 to i64
  %376 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %372 to i64
  %377 = bitcast %"class.autofill::structured_address::AddressComponent"*** %356 to i64*
  br label %391

378:                                              ; preds = %380
  %379 = icmp eq %"class.autofill::structured_address::AddressComponent"** %383, %372
  br i1 %379, label %384, label %380

380:                                              ; preds = %370, %378
  %381 = phi %"class.autofill::structured_address::AddressComponent"** [ %383, %378 ], [ %371, %370 ]
  %382 = call fastcc zeroext i1 @"_ZN4base8internal10InvokeImplIRZNK8autofill18structured_address16AddressComponent22AllDescendantsAreEmptyEvE3$_0JRKPS4_EEEDcOT_DpOT0_"(%"class.autofill::structured_address::AddressComponent"** dereferenceable(8) %381) #13
  %383 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %381, i64 1
  br i1 %382, label %378, label %414

384:                                              ; preds = %378
  %385 = bitcast %"class.autofill::structured_address::AddressComponent"*** %356 to i64*
  %386 = load i64, i64* %385, align 8
  %387 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %388 = bitcast %"class.std::__1::vector"* %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = inttoptr i64 %389 to %"class.autofill::structured_address::AddressComponent"**
  br label %391

391:                                              ; preds = %374, %384
  %392 = phi i64* [ %377, %374 ], [ %385, %384 ]
  %393 = phi %"class.autofill::structured_address::AddressComponent"** [ %371, %374 ], [ %390, %384 ]
  %394 = phi i64 [ %375, %374 ], [ %389, %384 ]
  %395 = phi i64 [ %376, %374 ], [ %386, %384 ]
  %396 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %397 = bitcast %"class.std::__1::vector"* %396 to i64*
  %398 = icmp eq i64 %395, %394
  br i1 %398, label %599, label %399

399:                                              ; preds = %391, %399
  %400 = phi %"class.autofill::structured_address::AddressComponent"** [ %413, %399 ], [ %393, %391 ]
  %401 = phi i64 [ %407, %399 ], [ 0, %391 ]
  %402 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %400, i64 %401
  %403 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %402, align 8
  %404 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %109, align 8
  %405 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %404, i64 %401
  %406 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %405, align 8
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %403, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %406)
  %407 = add nuw i64 %401, 1
  %408 = load i64, i64* %392, align 8
  %409 = load i64, i64* %397, align 8
  %410 = sub i64 %408, %409
  %411 = ashr exact i64 %410, 3
  %412 = icmp ult i64 %407, %411
  %413 = inttoptr i64 %409 to %"class.autofill::structured_address::AddressComponent"**
  br i1 %412, label %399, label %599

414:                                              ; preds = %380
  %415 = bitcast %"class.std::__1::vector.80"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %415) #13
  %416 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %9, i64 0, i32 0, i32 0
  %417 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %9, i64 0, i32 0, i32 1
  %418 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %415, i8 0, i64 24, i1 false) #13
  %419 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %420 = bitcast %"class.autofill::structured_address::AddressComponent"*** %356 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = bitcast %"class.std::__1::vector"* %419 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = sub i64 %421, %423
  %425 = ashr exact i64 %424, 3
  %426 = bitcast i32** %418 to i64*
  %427 = bitcast %"class.std::__1::vector.80"* %9 to i64*
  %428 = icmp eq i64 %424, 0
  %429 = inttoptr i64 %423 to %"class.autofill::structured_address::AddressComponent"**
  br i1 %428, label %443, label %430

430:                                              ; preds = %414
  %431 = icmp ugt i64 %425, 4611686018427387903
  br i1 %431, label %432, label %433

432:                                              ; preds = %430
  call void @abort() #14
  unreachable

433:                                              ; preds = %430
  %434 = ashr exact i64 %424, 1
  %435 = call i8* @_Znwm(i64 %434) #15
  %436 = bitcast i8* %435 to i32*
  %437 = getelementptr inbounds i32, i32* %436, i64 %425
  %438 = ptrtoint i32* %437 to i64
  %439 = insertelement <2 x i8*> undef, i8* %435, i32 0
  %440 = shufflevector <2 x i8*> %439, <2 x i8*> undef, <2 x i32> zeroinitializer
  %441 = ptrtoint <2 x i8*> %440 to <2 x i64>
  %442 = bitcast %"class.std::__1::vector.80"* %9 to <2 x i64>*
  store <2 x i64> %441, <2 x i64>* %442, align 16
  store i64 %438, i64* %426, align 16
  br label %443

443:                                              ; preds = %433, %414
  %444 = icmp eq i64 %421, %423
  br i1 %444, label %561, label %445

445:                                              ; preds = %443
  %446 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %419, i64 0, i32 0, i32 0
  %447 = bitcast %"class.autofill::structured_address::AddressComponent"*** %110 to i64*
  %448 = bitcast %"class.std::__1::vector"* %7 to i64*
  %449 = bitcast i32** %417 to i64*
  br label %453

450:                                              ; preds = %551
  %451 = inttoptr i64 %556 to %"class.autofill::structured_address::AddressComponent"**
  %452 = icmp slt i32 %553, %552
  br i1 %452, label %589, label %561

453:                                              ; preds = %445, %551
  %454 = phi %"class.autofill::structured_address::AddressComponent"** [ %429, %445 ], [ %560, %551 ]
  %455 = phi i32 [ 0, %445 ], [ %553, %551 ]
  %456 = phi i32 [ 0, %445 ], [ %552, %551 ]
  %457 = phi i64 [ 0, %445 ], [ %554, %551 ]
  %458 = load i64, i64* %447, align 8
  %459 = load i64, i64* %448, align 8
  %460 = sub i64 %458, %459
  %461 = ashr exact i64 %460, 3
  %462 = icmp ugt i64 %461, %457
  br i1 %462, label %465, label %463

463:                                              ; preds = %453
  %464 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %464) #14
  unreachable

465:                                              ; preds = %453
  %466 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %454, i64 %457
  %467 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %466, align 8
  %468 = inttoptr i64 %459 to %"class.autofill::structured_address::AddressComponent"**
  %469 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %468, i64 %457
  %470 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %469, align 8
  %471 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent29MergeTokenEquivalentComponentERKS1_(%"class.autofill::structured_address::AddressComponent"* %467, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %470)
  br i1 %471, label %551, label %472

472:                                              ; preds = %465
  %473 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %446, align 8
  %474 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %473, i64 %457
  %475 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %474, align 8
  %476 = bitcast %"class.autofill::structured_address::AddressComponent"* %475 to i32 (%"class.autofill::structured_address::AddressComponent"*)***
  %477 = load i32 (%"class.autofill::structured_address::AddressComponent"*)**, i32 (%"class.autofill::structured_address::AddressComponent"*)*** %476, align 8
  %478 = getelementptr inbounds i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %477, i64 12
  %479 = load i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %478, align 8
  %480 = call i32 %479(%"class.autofill::structured_address::AddressComponent"* %475) #13
  %481 = add nsw i32 %480, %456
  %482 = load i64, i64* %447, align 8
  %483 = load i64, i64* %448, align 8
  %484 = sub i64 %482, %483
  %485 = ashr exact i64 %484, 3
  %486 = icmp ugt i64 %485, %457
  br i1 %486, label %489, label %487

487:                                              ; preds = %472
  %488 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %488) #14
  unreachable

489:                                              ; preds = %472
  %490 = inttoptr i64 %483 to %"class.autofill::structured_address::AddressComponent"**
  %491 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %490, i64 %457
  %492 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %491, align 8
  %493 = bitcast %"class.autofill::structured_address::AddressComponent"* %492 to i32 (%"class.autofill::structured_address::AddressComponent"*)***
  %494 = load i32 (%"class.autofill::structured_address::AddressComponent"*)**, i32 (%"class.autofill::structured_address::AddressComponent"*)*** %493, align 8
  %495 = getelementptr inbounds i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %494, i64 12
  %496 = load i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %495, align 8
  %497 = call i32 %496(%"class.autofill::structured_address::AddressComponent"* %492) #13
  %498 = add nsw i32 %497, %455
  %499 = load i32*, i32** %417, align 8
  %500 = load i32*, i32** %418, align 16
  %501 = icmp ult i32* %499, %500
  %502 = ptrtoint i32* %500 to i64
  br i1 %501, label %503, label %507

503:                                              ; preds = %489
  %504 = trunc i64 %457 to i32
  store i32 %504, i32* %499, align 4
  %505 = getelementptr inbounds i32, i32* %499, i64 1
  %506 = ptrtoint i32* %505 to i64
  store i64 %506, i64* %449, align 8
  br label %551

507:                                              ; preds = %489
  %508 = ptrtoint i32* %499 to i64
  %509 = load i64, i64* %427, align 16
  %510 = sub i64 %508, %509
  %511 = ashr exact i64 %510, 2
  %512 = add nsw i64 %511, 1
  %513 = icmp ugt i64 %512, 4611686018427387903
  br i1 %513, label %514, label %516

514:                                              ; preds = %507
  %515 = bitcast %"class.std::__1::vector.80"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %515) #14
  unreachable

516:                                              ; preds = %507
  %517 = sub i64 %502, %509
  %518 = ashr exact i64 %517, 2
  %519 = icmp ult i64 %518, 2305843009213693951
  br i1 %519, label %520, label %528

520:                                              ; preds = %516
  %521 = ashr exact i64 %517, 1
  %522 = icmp ult i64 %521, %512
  %523 = select i1 %522, i64 %512, i64 %521
  %524 = icmp eq i64 %523, 0
  br i1 %524, label %533, label %525

525:                                              ; preds = %520
  %526 = icmp ugt i64 %523, 4611686018427387903
  br i1 %526, label %527, label %528

527:                                              ; preds = %525
  call void @abort() #14
  unreachable

528:                                              ; preds = %525, %516
  %529 = phi i64 [ %523, %525 ], [ 4611686018427387903, %516 ]
  %530 = shl i64 %529, 2
  %531 = call i8* @_Znwm(i64 %530) #15
  %532 = bitcast i8* %531 to i32*
  br label %533

533:                                              ; preds = %528, %520
  %534 = phi i64 [ %529, %528 ], [ 0, %520 ]
  %535 = phi i8* [ %531, %528 ], [ null, %520 ]
  %536 = phi i32* [ %532, %528 ], [ null, %520 ]
  %537 = getelementptr inbounds i32, i32* %536, i64 %511
  %538 = getelementptr inbounds i32, i32* %536, i64 %534
  %539 = ptrtoint i32* %538 to i64
  %540 = trunc i64 %457 to i32
  store i32 %540, i32* %537, align 4
  %541 = getelementptr inbounds i32, i32* %537, i64 1
  %542 = ptrtoint i32* %541 to i64
  %543 = ptrtoint i32* %536 to i64
  %544 = icmp sgt i64 %510, 0
  br i1 %544, label %545, label %547

545:                                              ; preds = %533
  %546 = inttoptr i64 %509 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %535, i8* align 4 %546, i64 %510, i1 false) #13
  br label %547

547:                                              ; preds = %545, %533
  store i64 %543, i64* %427, align 16
  store i64 %542, i64* %449, align 8
  store i64 %539, i64* %426, align 16
  %548 = icmp eq i64 %509, 0
  br i1 %548, label %551, label %549

549:                                              ; preds = %547
  %550 = inttoptr i64 %509 to i8*
  call void @_ZdlPv(i8* %550) #15
  br label %551

551:                                              ; preds = %549, %547, %503, %465
  %552 = phi i32 [ %456, %465 ], [ %481, %503 ], [ %481, %547 ], [ %481, %549 ]
  %553 = phi i32 [ %455, %465 ], [ %498, %503 ], [ %498, %547 ], [ %498, %549 ]
  %554 = add nuw i64 %457, 1
  %555 = load i64, i64* %420, align 8
  %556 = load i64, i64* %422, align 8
  %557 = sub i64 %555, %556
  %558 = ashr exact i64 %557, 3
  %559 = icmp ult i64 %554, %558
  %560 = inttoptr i64 %556 to %"class.autofill::structured_address::AddressComponent"**
  br i1 %559, label %453, label %450

561:                                              ; preds = %443, %450
  %562 = phi %"class.autofill::structured_address::AddressComponent"** [ %451, %450 ], [ %429, %443 ]
  %563 = load i32*, i32** %416, align 16
  %564 = load i32*, i32** %417, align 8
  %565 = icmp eq i32* %563, %564
  br i1 %565, label %591, label %566

566:                                              ; preds = %561
  %567 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %419, i64 0, i32 0, i32 0
  %568 = load i32, i32* %563, align 4
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %562, i64 %569
  %571 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %570, align 8
  %572 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %109, align 8
  %573 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %572, i64 %569
  %574 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %573, align 8
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %571, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %574)
  %575 = getelementptr inbounds i32, i32* %563, i64 1
  %576 = icmp eq i32* %575, %564
  br i1 %576, label %589, label %577

577:                                              ; preds = %566, %577
  %578 = phi i32* [ %587, %577 ], [ %575, %566 ]
  %579 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %567, align 8
  %580 = load i32, i32* %578, align 4
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %579, i64 %581
  %583 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %582, align 8
  %584 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %109, align 8
  %585 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %584, i64 %581
  %586 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %585, align 8
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %583, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %586)
  %587 = getelementptr inbounds i32, i32* %578, i64 1
  %588 = icmp eq i32* %587, %564
  br i1 %588, label %589, label %577

589:                                              ; preds = %577, %566, %450
  %590 = load i32*, i32** %416, align 16
  br label %591

591:                                              ; preds = %589, %561
  %592 = phi i32* [ %590, %589 ], [ %563, %561 ]
  %593 = icmp eq i32* %592, null
  br i1 %593, label %598, label %594

594:                                              ; preds = %591
  %595 = ptrtoint i32* %592 to i64
  %596 = bitcast i32** %417 to i64*
  store i64 %595, i64* %596, align 8
  %597 = bitcast i32* %592 to i8*
  call void @_ZdlPv(i8* %597) #15
  br label %598

598:                                              ; preds = %591, %594
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %415) #13
  br label %599

599:                                              ; preds = %364, %399, %391, %359, %353, %598
  %600 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %109, align 8
  %601 = icmp eq %"class.autofill::structured_address::AddressComponent"** %600, null
  br i1 %601, label %606, label %602

602:                                              ; preds = %599
  %603 = ptrtoint %"class.autofill::structured_address::AddressComponent"** %600 to i64
  %604 = bitcast %"class.autofill::structured_address::AddressComponent"*** %110 to i64*
  store i64 %603, i64* %604, align 8
  %605 = bitcast %"class.autofill::structured_address::AddressComponent"** %600 to i8*
  call void @_ZdlPv(i8* %605) #15
  br label %606

606:                                              ; preds = %599, %602
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %108) #13
  br label %607

607:                                              ; preds = %106, %606
  %608 = phi i1 [ true, %606 ], [ false, %106 ]
  ret i1 %608
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8autofill18structured_address16AddressComponent20MergeSubsetComponentERKS1_RKNS0_27SortedTokenComparisonResultE(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120), %"struct.autofill::structured_address::SortedTokenComparisonResult"* nocapture readonly dereferenceable(32)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::vector.80", align 8
  %6 = alloca %"struct.autofill::structured_address::SortedTokenComparisonResult", align 8
  %7 = alloca %"class.std::__1::vector.12", align 8
  %8 = alloca %"class.std::__1::vector.12", align 8
  %9 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %13 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %2, i64 0, i32 1, i32 0, i32 1
  %14 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 24, i1 false)
  %15 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %13, align 8
  %16 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %15, i64 -1, i32 0
  %17 = bitcast %"class.std::__1::basic_string"* %16 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %17, i64 0, i32 1, i32 1
  %19 = load i8, i8* %18, align 1
  %20 = icmp slt i8 %19, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %3
  %22 = bitcast %"class.std::__1::basic_string"* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* align 8 %22, i64 24, i1 false) #13
  br label %196

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load i16*, i16** %24, align 8
  %26 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %15, i64 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = icmp ult i64 %27, 11
  br i1 %28, label %29, label %34

29:                                               ; preds = %23
  %30 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %31 = trunc i64 %27 to i8
  %32 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %32, i64 0, i32 1, i32 1
  store i8 %31, i8* %33, align 1
  br label %49

34:                                               ; preds = %23
  %35 = icmp ugt i64 %27, 9223372036854775791
  br i1 %35, label %36, label %38

36:                                               ; preds = %34
  %37 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %37) #14
  unreachable

38:                                               ; preds = %34
  %39 = add nuw nsw i64 %27, 8
  %40 = and i64 %39, -8
  %41 = icmp slt i64 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %38
  tail call void @abort() #14
  unreachable

43:                                               ; preds = %38
  %44 = shl i64 %40, 1
  %45 = tail call i8* @_Znwm(i64 %44) #15
  %46 = bitcast i8* %45 to i16*
  %47 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  store i8* %45, i8** %47, align 8
  %48 = or i64 %40, -9223372036854775808
  store i64 %48, i64* %12, align 8
  store i64 %27, i64* %11, align 8
  br label %49

49:                                               ; preds = %43, %29
  %50 = phi i16* [ %30, %29 ], [ %46, %43 ]
  %51 = add nuw nsw i64 %27, 1
  %52 = add i64 %27, 1
  %53 = icmp ult i64 %52, 16
  br i1 %53, label %143, label %54

54:                                               ; preds = %49
  %55 = add i64 %27, 1
  %56 = getelementptr i16, i16* %50, i64 %55
  %57 = getelementptr i16, i16* %25, i64 %55
  %58 = icmp ult i16* %50, %57
  %59 = icmp ult i16* %25, %56
  %60 = and i1 %58, %59
  br i1 %60, label %143, label %61

61:                                               ; preds = %54
  %62 = and i64 %52, -16
  %63 = sub i64 %51, %62
  %64 = getelementptr i16, i16* %25, i64 %62
  %65 = getelementptr i16, i16* %50, i64 %62
  %66 = add i64 %62, -16
  %67 = lshr exact i64 %66, 4
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 48
  br i1 %70, label %122, label %71

71:                                               ; preds = %61
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = getelementptr i16, i16* %50, i64 %74
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !203
  %80 = getelementptr i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !203
  %83 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !206, !noalias !203
  %84 = getelementptr i16, i16* %77, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !206, !noalias !203
  %86 = or i64 %74, 16
  %87 = getelementptr i16, i16* %25, i64 %86
  %88 = getelementptr i16, i16* %50, i64 %86
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !203
  %91 = getelementptr i16, i16* %87, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !203
  %94 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !206, !noalias !203
  %95 = getelementptr i16, i16* %88, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !206, !noalias !203
  %97 = or i64 %74, 32
  %98 = getelementptr i16, i16* %25, i64 %97
  %99 = getelementptr i16, i16* %50, i64 %97
  %100 = bitcast i16* %98 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !203
  %102 = getelementptr i16, i16* %98, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !203
  %105 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !206, !noalias !203
  %106 = getelementptr i16, i16* %99, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !206, !noalias !203
  %108 = or i64 %74, 48
  %109 = getelementptr i16, i16* %25, i64 %108
  %110 = getelementptr i16, i16* %50, i64 %108
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !203
  %113 = getelementptr i16, i16* %109, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !203
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !206, !noalias !203
  %117 = getelementptr i16, i16* %110, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !206, !noalias !203
  %119 = add i64 %74, 64
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !208

122:                                              ; preds = %73, %61
  %123 = phi i64 [ 0, %61 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i16, i16* %25, i64 %126
  %129 = getelementptr i16, i16* %50, i64 %126
  %130 = bitcast i16* %128 to <8 x i16>*
  %131 = load <8 x i16>, <8 x i16>* %130, align 2, !alias.scope !203
  %132 = getelementptr i16, i16* %128, i64 8
  %133 = bitcast i16* %132 to <8 x i16>*
  %134 = load <8 x i16>, <8 x i16>* %133, align 2, !alias.scope !203
  %135 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %131, <8 x i16>* %135, align 2, !alias.scope !206, !noalias !203
  %136 = getelementptr i16, i16* %129, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %134, <8 x i16>* %137, align 2, !alias.scope !206, !noalias !203
  %138 = add i64 %126, 16
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !209

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %52, %62
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %54, %49
  %144 = phi i64 [ %51, %54 ], [ %51, %49 ], [ %63, %141 ]
  %145 = phi i16* [ %25, %54 ], [ %25, %49 ], [ %64, %141 ]
  %146 = phi i16* [ %50, %54 ], [ %50, %49 ], [ %65, %141 ]
  %147 = add i64 %144, -1
  %148 = and i64 %144, 7
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %161, label %150

150:                                              ; preds = %143, %150
  %151 = phi i64 [ %156, %150 ], [ %144, %143 ]
  %152 = phi i16* [ %158, %150 ], [ %145, %143 ]
  %153 = phi i16* [ %157, %150 ], [ %146, %143 ]
  %154 = phi i64 [ %159, %150 ], [ %148, %143 ]
  %155 = load i16, i16* %152, align 2
  store i16 %155, i16* %153, align 2
  %156 = add i64 %151, -1
  %157 = getelementptr inbounds i16, i16* %153, i64 1
  %158 = getelementptr inbounds i16, i16* %152, i64 1
  %159 = add i64 %154, -1
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %161, label %150, !llvm.loop !210

161:                                              ; preds = %150, %143
  %162 = phi i64 [ %144, %143 ], [ %156, %150 ]
  %163 = phi i16* [ %145, %143 ], [ %158, %150 ]
  %164 = phi i16* [ %146, %143 ], [ %157, %150 ]
  %165 = icmp ult i64 %147, 7
  br i1 %165, label %196, label %166

166:                                              ; preds = %161, %166
  %167 = phi i64 [ %192, %166 ], [ %162, %161 ]
  %168 = phi i16* [ %194, %166 ], [ %163, %161 ]
  %169 = phi i16* [ %193, %166 ], [ %164, %161 ]
  %170 = load i16, i16* %168, align 2
  store i16 %170, i16* %169, align 2
  %171 = getelementptr inbounds i16, i16* %169, i64 1
  %172 = getelementptr inbounds i16, i16* %168, i64 1
  %173 = load i16, i16* %172, align 2
  store i16 %173, i16* %171, align 2
  %174 = getelementptr inbounds i16, i16* %169, i64 2
  %175 = getelementptr inbounds i16, i16* %168, i64 2
  %176 = load i16, i16* %175, align 2
  store i16 %176, i16* %174, align 2
  %177 = getelementptr inbounds i16, i16* %169, i64 3
  %178 = getelementptr inbounds i16, i16* %168, i64 3
  %179 = load i16, i16* %178, align 2
  store i16 %179, i16* %177, align 2
  %180 = getelementptr inbounds i16, i16* %169, i64 4
  %181 = getelementptr inbounds i16, i16* %168, i64 4
  %182 = load i16, i16* %181, align 2
  store i16 %182, i16* %180, align 2
  %183 = getelementptr inbounds i16, i16* %169, i64 5
  %184 = getelementptr inbounds i16, i16* %168, i64 5
  %185 = load i16, i16* %184, align 2
  store i16 %185, i16* %183, align 2
  %186 = getelementptr inbounds i16, i16* %169, i64 6
  %187 = getelementptr inbounds i16, i16* %168, i64 6
  %188 = load i16, i16* %187, align 2
  store i16 %188, i16* %186, align 2
  %189 = getelementptr inbounds i16, i16* %169, i64 7
  %190 = getelementptr inbounds i16, i16* %168, i64 7
  %191 = load i16, i16* %190, align 2
  store i16 %191, i16* %189, align 2
  %192 = add i64 %167, -8
  %193 = getelementptr inbounds i16, i16* %169, i64 8
  %194 = getelementptr inbounds i16, i16* %168, i64 8
  %195 = icmp eq i64 %192, 0
  br i1 %195, label %196, label %166, !llvm.loop !211

196:                                              ; preds = %161, %166, %141, %21
  %197 = bitcast %"class.std::__1::vector.80"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %197) #13
  %198 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %5, i64 0, i32 0, i32 0
  %199 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %5, i64 0, i32 0, i32 1
  %200 = getelementptr inbounds %"class.std::__1::vector.80", %"class.std::__1::vector.80"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %197, i8 0, i64 24, i1 false) #13
  %201 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4
  %202 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %203 = bitcast %"class.autofill::structured_address::AddressComponent"*** %202 to i64*
  %204 = load i64, i64* %203, align 8
  %205 = bitcast %"class.std::__1::vector"* %201 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = sub i64 %204, %206
  %208 = ashr exact i64 %207, 3
  %209 = bitcast i32** %200 to i64*
  %210 = bitcast %"class.std::__1::vector.80"* %5 to i64*
  %211 = icmp eq i64 %207, 0
  %212 = inttoptr i64 %206 to %"class.autofill::structured_address::AddressComponent"**
  br i1 %211, label %225, label %213

213:                                              ; preds = %196
  %214 = icmp ugt i64 %208, 4611686018427387903
  br i1 %214, label %215, label %216

215:                                              ; preds = %213
  tail call void @abort() #14
  unreachable

216:                                              ; preds = %213
  %217 = bitcast i32** %199 to i64*
  %218 = ashr exact i64 %207, 1
  %219 = tail call i8* @_Znwm(i64 %218) #15
  %220 = bitcast i8* %219 to i32*
  %221 = ptrtoint i8* %219 to i64
  %222 = getelementptr inbounds i32, i32* %220, i64 %208
  %223 = ptrtoint i32* %222 to i64
  %224 = ptrtoint i8* %219 to i64
  store i64 %224, i64* %210, align 8
  store i64 %221, i64* %217, align 8
  store i64 %223, i64* %209, align 8
  br label %225

225:                                              ; preds = %216, %196
  %226 = phi i64 [ 0, %196 ], [ %221, %216 ]
  %227 = phi i64 [ 0, %196 ], [ %223, %216 ]
  %228 = phi i64 [ 0, %196 ], [ %224, %216 ]
  %229 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4
  %230 = sub i64 %227, %228
  %231 = ashr exact i64 %230, 2
  %232 = icmp ult i64 %231, %208
  br i1 %232, label %233, label %255

233:                                              ; preds = %225
  %234 = bitcast i32** %199 to i64*
  %235 = sub i64 %226, %228
  %236 = ashr exact i64 %235, 2
  %237 = ashr exact i64 %207, 1
  %238 = tail call i8* @_Znwm(i64 %237) #15
  %239 = bitcast i8* %238 to i32*
  %240 = getelementptr inbounds i32, i32* %239, i64 %236
  %241 = ptrtoint i32* %240 to i64
  %242 = getelementptr inbounds i32, i32* %239, i64 %208
  %243 = ptrtoint i32* %242 to i64
  %244 = ptrtoint i8* %238 to i64
  %245 = icmp sgt i64 %235, 0
  br i1 %245, label %246, label %248

246:                                              ; preds = %233
  %247 = inttoptr i64 %228 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %238, i8* align 4 %247, i64 %235, i1 false) #13
  br label %248

248:                                              ; preds = %246, %233
  store i64 %244, i64* %210, align 8
  store i64 %241, i64* %234, align 8
  store i64 %243, i64* %209, align 8
  %249 = icmp eq i64 %228, 0
  br i1 %249, label %255, label %250

250:                                              ; preds = %248
  %251 = inttoptr i64 %228 to i8*
  tail call void @_ZdlPv(i8* %251) #15
  %252 = load i64, i64* %203, align 8
  %253 = load i64, i64* %205, align 8
  %254 = inttoptr i64 %253 to %"class.autofill::structured_address::AddressComponent"**
  br label %255

255:                                              ; preds = %225, %248, %250
  %256 = phi %"class.autofill::structured_address::AddressComponent"** [ %212, %225 ], [ %212, %248 ], [ %254, %250 ]
  %257 = phi i64 [ %206, %225 ], [ %206, %248 ], [ %253, %250 ]
  %258 = phi i64 [ %204, %225 ], [ %204, %248 ], [ %252, %250 ]
  %259 = icmp eq i64 %258, %257
  br i1 %259, label %523, label %260

260:                                              ; preds = %255
  %261 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 4, i32 0, i32 1
  %262 = bitcast %"class.autofill::structured_address::AddressComponent"*** %261 to i64*
  %263 = bitcast %"class.std::__1::vector"* %229 to i64*
  %264 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %265 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %264, i64 0, i32 1, i32 1
  %266 = bitcast %"class.std::__1::basic_string"* %4 to i16*
  %267 = bitcast %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6 to i8*
  %268 = bitcast %"class.std::__1::vector.12"* %7 to i8*
  %269 = bitcast %"class.std::__1::vector.12"* %8 to i8*
  %270 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %8, i64 0, i32 0, i32 0
  %271 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %8, i64 0, i32 0, i32 1
  %272 = bitcast %"class.std::__1::vector.12"* %8 to i8**
  %273 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %7, i64 0, i32 0, i32 0
  %274 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %7, i64 0, i32 0, i32 1
  %275 = bitcast %"class.std::__1::vector.12"* %7 to i8**
  %276 = getelementptr inbounds %"struct.autofill::structured_address::SortedTokenComparisonResult", %"struct.autofill::structured_address::SortedTokenComparisonResult"* %6, i64 0, i32 0
  %277 = bitcast i32** %199 to i64*
  br label %281

278:                                              ; preds = %512
  %279 = inttoptr i64 %518 to %"class.autofill::structured_address::AddressComponent"**
  %280 = icmp slt i32 %514, %515
  br i1 %280, label %561, label %523

281:                                              ; preds = %260, %512
  %282 = phi %"class.autofill::structured_address::AddressComponent"** [ %256, %260 ], [ %522, %512 ]
  %283 = phi i32 [ 0, %260 ], [ %515, %512 ]
  %284 = phi i32 [ 0, %260 ], [ %514, %512 ]
  %285 = phi i8 [ 0, %260 ], [ %513, %512 ]
  %286 = phi i64 [ 0, %260 ], [ %516, %512 ]
  %287 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %282, i64 %286
  %288 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %287, align 8
  %289 = load i64, i64* %262, align 8
  %290 = load i64, i64* %263, align 8
  %291 = sub i64 %289, %290
  %292 = ashr exact i64 %291, 3
  %293 = icmp ugt i64 %292, %286
  br i1 %293, label %296, label %294

294:                                              ; preds = %281
  %295 = bitcast %"class.std::__1::vector"* %229 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %295) #14
  unreachable

296:                                              ; preds = %281
  %297 = inttoptr i64 %290 to %"class.autofill::structured_address::AddressComponent"**
  %298 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %297, i64 %286
  %299 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %298, align 8
  %300 = and i8 %285, 1
  %301 = icmp ne i8 %300, 0
  br i1 %301, label %369, label %302

302:                                              ; preds = %296
  %303 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %288, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %304 = load i8, i8* %303, align 8, !range !2
  %305 = icmp eq i8 %304, 0
  br i1 %305, label %308, label %306

306:                                              ; preds = %302
  %307 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %288, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %310

308:                                              ; preds = %302
  %309 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %310

310:                                              ; preds = %306, %308
  %311 = phi %"class.std::__1::basic_string"* [ %307, %306 ], [ %309, %308 ]
  %312 = bitcast %"class.std::__1::basic_string"* %311 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %313 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %312, i64 0, i32 1, i32 1
  %314 = load i8, i8* %313, align 1
  %315 = icmp slt i8 %314, 0
  %316 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %311, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %317 = load i64, i64* %316, align 8
  %318 = zext i8 %314 to i64
  %319 = select i1 %315, i64 %317, i64 %318
  %320 = load i8, i8* %265, align 1
  %321 = icmp slt i8 %320, 0
  %322 = load i64, i64* %11, align 8
  %323 = zext i8 %320 to i64
  %324 = select i1 %321, i64 %322, i64 %323
  %325 = icmp eq i64 %319, %324
  br i1 %325, label %326, label %369

326:                                              ; preds = %310
  %327 = icmp eq i64 %319, 0
  br i1 %327, label %347, label %328

328:                                              ; preds = %326
  %329 = load i16*, i16** %10, align 8
  %330 = select i1 %321, i16* %329, i16* %266
  %331 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %311, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %332 = load i16*, i16** %331, align 8
  %333 = bitcast %"class.std::__1::basic_string"* %311 to i16*
  %334 = select i1 %315, i16* %332, i16* %333
  br label %335

335:                                              ; preds = %342, %328
  %336 = phi i64 [ %343, %342 ], [ %319, %328 ]
  %337 = phi i16* [ %345, %342 ], [ %330, %328 ]
  %338 = phi i16* [ %344, %342 ], [ %334, %328 ]
  %339 = load i16, i16* %338, align 2
  %340 = load i16, i16* %337, align 2
  %341 = icmp eq i16 %340, %339
  br i1 %341, label %342, label %369

342:                                              ; preds = %335
  %343 = add i64 %336, -1
  %344 = getelementptr inbounds i16, i16* %338, i64 1
  %345 = getelementptr inbounds i16, i16* %337, i64 1
  %346 = icmp eq i64 %343, 0
  br i1 %346, label %347, label %335

347:                                              ; preds = %342, %326
  %348 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %299, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %349 = load i8, i8* %348, align 8, !range !2
  %350 = icmp eq i8 %349, 0
  br i1 %350, label %353, label %351

351:                                              ; preds = %347
  %352 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %299, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %355

353:                                              ; preds = %347
  %354 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %355

355:                                              ; preds = %351, %353
  %356 = phi %"class.std::__1::basic_string"* [ %352, %351 ], [ %354, %353 ]
  %357 = bitcast %"class.std::__1::basic_string"* %356 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %358 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %357, i64 0, i32 1, i32 1
  %359 = load i8, i8* %358, align 1
  %360 = icmp slt i8 %359, 0
  br i1 %360, label %361, label %364

361:                                              ; preds = %355
  %362 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %356, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %363 = load i64, i64* %362, align 8
  br label %366

364:                                              ; preds = %355
  %365 = zext i8 %359 to i64
  br label %366

366:                                              ; preds = %361, %364
  %367 = phi i64 [ %363, %361 ], [ %365, %364 ]
  %368 = icmp eq i64 %367, 0
  br i1 %368, label %512, label %369

369:                                              ; preds = %335, %310, %366, %296
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %267) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %267, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %268) #13
  call void @_ZNK8autofill18structured_address16AddressComponent15GetSortedTokensEv(%"class.std::__1::vector.12"* nonnull sret %7, %"class.autofill::structured_address::AddressComponent"* %288)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %269) #13
  call void @_ZNK8autofill18structured_address16AddressComponent15GetSortedTokensEv(%"class.std::__1::vector.12"* nonnull sret %8, %"class.autofill::structured_address::AddressComponent"* %299)
  call void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__16vectorINS0_12AddressTokenENS1_9allocatorIS3_EEEES8_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull sret %6, %"class.std::__1::vector.12"* nonnull dereferenceable(24) %7, %"class.std::__1::vector.12"* nonnull dereferenceable(24) %8) #13
  %370 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %270, align 8
  %371 = icmp eq %"struct.autofill::structured_address::AddressToken"* %370, null
  br i1 %371, label %401, label %372

372:                                              ; preds = %369
  %373 = bitcast %"struct.autofill::structured_address::AddressToken"* %370 to i8*
  %374 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %271, align 8
  %375 = icmp eq %"struct.autofill::structured_address::AddressToken"* %374, %370
  br i1 %375, label %399, label %376

376:                                              ; preds = %372, %395
  %377 = phi %"struct.autofill::structured_address::AddressToken"* [ %378, %395 ], [ %374, %372 ]
  %378 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %377, i64 -1
  %379 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %377, i64 -1, i32 1
  %380 = bitcast %"class.std::__1::basic_string"* %379 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %381 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %380, i64 0, i32 1, i32 1
  %382 = load i8, i8* %381, align 1
  %383 = icmp slt i8 %382, 0
  br i1 %383, label %384, label %387

384:                                              ; preds = %376
  %385 = bitcast %"class.std::__1::basic_string"* %379 to i8**
  %386 = load i8*, i8** %385, align 8
  call void @_ZdlPv(i8* %386) #15
  br label %387

387:                                              ; preds = %384, %376
  %388 = bitcast %"struct.autofill::structured_address::AddressToken"* %378 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %389 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %388, i64 0, i32 1, i32 1
  %390 = load i8, i8* %389, align 1
  %391 = icmp slt i8 %390, 0
  br i1 %391, label %392, label %395

392:                                              ; preds = %387
  %393 = bitcast %"struct.autofill::structured_address::AddressToken"* %378 to i8**
  %394 = load i8*, i8** %393, align 8
  call void @_ZdlPv(i8* %394) #15
  br label %395

395:                                              ; preds = %392, %387
  %396 = icmp eq %"struct.autofill::structured_address::AddressToken"* %378, %370
  br i1 %396, label %397, label %376

397:                                              ; preds = %395
  %398 = load i8*, i8** %272, align 8
  br label %399

399:                                              ; preds = %397, %372
  %400 = phi i8* [ %398, %397 ], [ %373, %372 ]
  store %"struct.autofill::structured_address::AddressToken"* %370, %"struct.autofill::structured_address::AddressToken"** %271, align 8
  call void @_ZdlPv(i8* %400) #15
  br label %401

401:                                              ; preds = %369, %399
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %269) #13
  %402 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %273, align 8
  %403 = icmp eq %"struct.autofill::structured_address::AddressToken"* %402, null
  br i1 %403, label %433, label %404

404:                                              ; preds = %401
  %405 = bitcast %"struct.autofill::structured_address::AddressToken"* %402 to i8*
  %406 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %274, align 8
  %407 = icmp eq %"struct.autofill::structured_address::AddressToken"* %406, %402
  br i1 %407, label %431, label %408

408:                                              ; preds = %404, %427
  %409 = phi %"struct.autofill::structured_address::AddressToken"* [ %410, %427 ], [ %406, %404 ]
  %410 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %409, i64 -1
  %411 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %409, i64 -1, i32 1
  %412 = bitcast %"class.std::__1::basic_string"* %411 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %413 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %412, i64 0, i32 1, i32 1
  %414 = load i8, i8* %413, align 1
  %415 = icmp slt i8 %414, 0
  br i1 %415, label %416, label %419

416:                                              ; preds = %408
  %417 = bitcast %"class.std::__1::basic_string"* %411 to i8**
  %418 = load i8*, i8** %417, align 8
  call void @_ZdlPv(i8* %418) #15
  br label %419

419:                                              ; preds = %416, %408
  %420 = bitcast %"struct.autofill::structured_address::AddressToken"* %410 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %421 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %420, i64 0, i32 1, i32 1
  %422 = load i8, i8* %421, align 1
  %423 = icmp slt i8 %422, 0
  br i1 %423, label %424, label %427

424:                                              ; preds = %419
  %425 = bitcast %"struct.autofill::structured_address::AddressToken"* %410 to i8**
  %426 = load i8*, i8** %425, align 8
  call void @_ZdlPv(i8* %426) #15
  br label %427

427:                                              ; preds = %424, %419
  %428 = icmp eq %"struct.autofill::structured_address::AddressToken"* %410, %402
  br i1 %428, label %429, label %408

429:                                              ; preds = %427
  %430 = load i8*, i8** %275, align 8
  br label %431

431:                                              ; preds = %429, %404
  %432 = phi i8* [ %430, %429 ], [ %405, %404 ]
  store %"struct.autofill::structured_address::AddressToken"* %402, %"struct.autofill::structured_address::AddressToken"** %274, align 8
  call void @_ZdlPv(i8* %432) #15
  br label %433

433:                                              ; preds = %401, %431
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %268) #13
  br i1 %301, label %438, label %434

434:                                              ; preds = %433
  %435 = call zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult21IsSingleTokenSupersetEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  br i1 %435, label %436, label %438

436:                                              ; preds = %434
  %437 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent20MergeSubsetComponentERKS1_RKNS0_27SortedTokenComparisonResultE(%"class.autofill::structured_address::AddressComponent"* %288, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %299, %"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull dereferenceable(32) %6)
  br label %508

438:                                              ; preds = %434, %433
  %439 = load i32, i32* %276, align 8
  %440 = icmp eq i32 %439, 1
  br i1 %440, label %441, label %443

441:                                              ; preds = %438
  %442 = call zeroext i1 @_ZN8autofill18structured_address16AddressComponent29MergeTokenEquivalentComponentERKS1_(%"class.autofill::structured_address::AddressComponent"* %288, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %299)
  br label %508

443:                                              ; preds = %438
  %444 = bitcast %"class.autofill::structured_address::AddressComponent"* %288 to i32 (%"class.autofill::structured_address::AddressComponent"*)***
  %445 = load i32 (%"class.autofill::structured_address::AddressComponent"*)**, i32 (%"class.autofill::structured_address::AddressComponent"*)*** %444, align 8
  %446 = getelementptr inbounds i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %445, i64 12
  %447 = load i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %446, align 8
  %448 = call i32 %447(%"class.autofill::structured_address::AddressComponent"* %288) #13
  %449 = add nsw i32 %448, %283
  %450 = bitcast %"class.autofill::structured_address::AddressComponent"* %299 to i32 (%"class.autofill::structured_address::AddressComponent"*)***
  %451 = load i32 (%"class.autofill::structured_address::AddressComponent"*)**, i32 (%"class.autofill::structured_address::AddressComponent"*)*** %450, align 8
  %452 = getelementptr inbounds i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %451, i64 12
  %453 = load i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %452, align 8
  %454 = call i32 %453(%"class.autofill::structured_address::AddressComponent"* %299) #13
  %455 = add nsw i32 %454, %284
  %456 = load i32*, i32** %199, align 8
  %457 = load i32*, i32** %200, align 8
  %458 = icmp ult i32* %456, %457
  %459 = ptrtoint i32* %457 to i64
  br i1 %458, label %460, label %464

460:                                              ; preds = %443
  %461 = trunc i64 %286 to i32
  store i32 %461, i32* %456, align 4
  %462 = getelementptr inbounds i32, i32* %456, i64 1
  %463 = ptrtoint i32* %462 to i64
  store i64 %463, i64* %277, align 8
  br label %508

464:                                              ; preds = %443
  %465 = ptrtoint i32* %456 to i64
  %466 = load i64, i64* %210, align 8
  %467 = sub i64 %465, %466
  %468 = ashr exact i64 %467, 2
  %469 = add nsw i64 %468, 1
  %470 = icmp ugt i64 %469, 4611686018427387903
  br i1 %470, label %471, label %473

471:                                              ; preds = %464
  %472 = bitcast %"class.std::__1::vector.80"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %472) #14
  unreachable

473:                                              ; preds = %464
  %474 = sub i64 %459, %466
  %475 = ashr exact i64 %474, 2
  %476 = icmp ult i64 %475, 2305843009213693951
  br i1 %476, label %477, label %485

477:                                              ; preds = %473
  %478 = ashr exact i64 %474, 1
  %479 = icmp ult i64 %478, %469
  %480 = select i1 %479, i64 %469, i64 %478
  %481 = icmp eq i64 %480, 0
  br i1 %481, label %490, label %482

482:                                              ; preds = %477
  %483 = icmp ugt i64 %480, 4611686018427387903
  br i1 %483, label %484, label %485

484:                                              ; preds = %482
  call void @abort() #14
  unreachable

485:                                              ; preds = %482, %473
  %486 = phi i64 [ %480, %482 ], [ 4611686018427387903, %473 ]
  %487 = shl i64 %486, 2
  %488 = call i8* @_Znwm(i64 %487) #15
  %489 = bitcast i8* %488 to i32*
  br label %490

490:                                              ; preds = %485, %477
  %491 = phi i64 [ %486, %485 ], [ 0, %477 ]
  %492 = phi i8* [ %488, %485 ], [ null, %477 ]
  %493 = phi i32* [ %489, %485 ], [ null, %477 ]
  %494 = getelementptr inbounds i32, i32* %493, i64 %468
  %495 = getelementptr inbounds i32, i32* %493, i64 %491
  %496 = ptrtoint i32* %495 to i64
  %497 = trunc i64 %286 to i32
  store i32 %497, i32* %494, align 4
  %498 = getelementptr inbounds i32, i32* %494, i64 1
  %499 = ptrtoint i32* %498 to i64
  %500 = ptrtoint i32* %493 to i64
  %501 = icmp sgt i64 %467, 0
  br i1 %501, label %502, label %504

502:                                              ; preds = %490
  %503 = inttoptr i64 %466 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %492, i8* align 4 %503, i64 %467, i1 false) #13
  br label %504

504:                                              ; preds = %502, %490
  store i64 %500, i64* %210, align 8
  store i64 %499, i64* %277, align 8
  store i64 %496, i64* %209, align 8
  %505 = icmp eq i64 %466, 0
  br i1 %505, label %508, label %506

506:                                              ; preds = %504
  %507 = inttoptr i64 %466 to i8*
  call void @_ZdlPv(i8* %507) #15
  br label %508

508:                                              ; preds = %506, %504, %460, %441, %436
  %509 = phi i8 [ %285, %441 ], [ 1, %436 ], [ %285, %460 ], [ %285, %504 ], [ %285, %506 ]
  %510 = phi i32 [ %284, %441 ], [ %284, %436 ], [ %455, %460 ], [ %455, %504 ], [ %455, %506 ]
  %511 = phi i32 [ %283, %441 ], [ %283, %436 ], [ %449, %460 ], [ %449, %504 ], [ %449, %506 ]
  call void @_ZN8autofill18structured_address27SortedTokenComparisonResultD1Ev(%"struct.autofill::structured_address::SortedTokenComparisonResult"* nonnull %6) #13
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %267) #13
  br label %512

512:                                              ; preds = %508, %366
  %513 = phi i8 [ %509, %508 ], [ 1, %366 ]
  %514 = phi i32 [ %510, %508 ], [ %284, %366 ]
  %515 = phi i32 [ %511, %508 ], [ %283, %366 ]
  %516 = add nuw i64 %286, 1
  %517 = load i64, i64* %203, align 8
  %518 = load i64, i64* %205, align 8
  %519 = sub i64 %517, %518
  %520 = ashr exact i64 %519, 3
  %521 = icmp ult i64 %516, %520
  %522 = inttoptr i64 %518 to %"class.autofill::structured_address::AddressComponent"**
  br i1 %521, label %281, label %278

523:                                              ; preds = %255, %278
  %524 = phi i8 [ %513, %278 ], [ 0, %255 ]
  %525 = phi %"class.autofill::structured_address::AddressComponent"** [ %279, %278 ], [ %256, %255 ]
  %526 = load i32*, i32** %198, align 8
  %527 = load i32*, i32** %199, align 8
  %528 = icmp eq i32* %526, %527
  br i1 %528, label %541, label %529

529:                                              ; preds = %523
  %530 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %201, i64 0, i32 0, i32 0
  %531 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %229, i64 0, i32 0, i32 0
  %532 = load i32, i32* %526, align 4
  %533 = sext i32 %532 to i64
  %534 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %525, i64 %533
  %535 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %534, align 8
  %536 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %531, align 8
  %537 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %536, i64 %533
  %538 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %537, align 8
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %535, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %538)
  %539 = getelementptr inbounds i32, i32* %526, i64 1
  %540 = icmp eq i32* %539, %527
  br i1 %540, label %541, label %544

541:                                              ; preds = %544, %529, %523
  %542 = and i8 %524, 1
  %543 = icmp eq i8 %542, 0
  br i1 %543, label %556, label %561

544:                                              ; preds = %529, %544
  %545 = phi i32* [ %554, %544 ], [ %539, %529 ]
  %546 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %530, align 8
  %547 = load i32, i32* %545, align 4
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %546, i64 %548
  %550 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %549, align 8
  %551 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %531, align 8
  %552 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %551, i64 %548
  %553 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %552, align 8
  call void @_ZN8autofill18structured_address16AddressComponent8CopyFromERKS1_(%"class.autofill::structured_address::AddressComponent"* %550, %"class.autofill::structured_address::AddressComponent"* dereferenceable(120) %553)
  %554 = getelementptr inbounds i32, i32* %545, i64 1
  %555 = icmp eq i32* %554, %527
  br i1 %555, label %541, label %544

556:                                              ; preds = %541
  %557 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)***
  %558 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)*** %557, align 8
  %559 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)** %558, i64 19
  %560 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*)** %559, align 8
  call void %560(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #13
  br label %561

561:                                              ; preds = %541, %278, %556
  %562 = load i32*, i32** %198, align 8
  %563 = icmp eq i32* %562, null
  br i1 %563, label %568, label %564

564:                                              ; preds = %561
  %565 = ptrtoint i32* %562 to i64
  %566 = bitcast i32** %199 to i64*
  store i64 %565, i64* %566, align 8
  %567 = bitcast i32* %562 to i8*
  call void @_ZdlPv(i8* %567) #15
  br label %568

568:                                              ; preds = %561, %564
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %197) #13
  %569 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %570 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %569, i64 0, i32 1, i32 1
  %571 = load i8, i8* %570, align 1
  %572 = icmp slt i8 %571, 0
  br i1 %572, label %573, label %576

573:                                              ; preds = %568
  %574 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %575 = load i8*, i8** %574, align 8
  call void @_ZdlPv(i8* %575) #15
  br label %576

576:                                              ; preds = %568, %573
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #13
  ret i1 true
}

declare zeroext i1 @_ZNK8autofill18structured_address27SortedTokenComparisonResult11TokensMatchEv(%"struct.autofill::structured_address::SortedTokenComparisonResult"*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8autofill18structured_address16AddressComponent33HasNewerValuePrecendenceInMergingERKS1_(%"class.autofill::structured_address::AddressComponent"* nocapture readonly, %"class.autofill::structured_address::AddressComponent"* nocapture readonly dereferenceable(120)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, 5
  %8 = add i32 %6, -3
  %9 = icmp ult i32 %8, 2
  %10 = and i1 %7, %9
  br i1 %10, label %19, label %11

11:                                               ; preds = %2
  %12 = icmp ne i32 %6, 5
  %13 = add i32 %4, -3
  %14 = icmp ugt i32 %13, 1
  %15 = icmp slt i32 %4, %6
  %16 = or i1 %14, %12
  %17 = and i1 %15, %16
  %18 = xor i1 %17, true
  br label %19

19:                                               ; preds = %2, %11
  %20 = phi i1 [ %18, %11 ], [ false, %2 ]
  ret i1 %20
}

declare zeroext i1 @_ZN8autofill18structured_address20AreSortedTokensEqualERKNSt3__16vectorINS0_12AddressTokenENS1_9allocatorIS3_EEEES8_(%"class.std::__1::vector.12"* dereferenceable(24), %"class.std::__1::vector.12"* dereferenceable(24)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN8autofill18structured_address16AddressComponent22ConsumeAdditionalTokenERKNSt3__112basic_stringIDsNS2_11char_traitsIDsEENS2_9allocatorIDsEEEE(%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca [3 x %"class.base::BasicStringPiece.61"], align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca [3 x %"class.base::BasicStringPiece.61"], align 8
  %9 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %10 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %9, align 8
  %11 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %12 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %11, align 8
  %13 = icmp eq %"class.autofill::structured_address::AddressComponent"** %10, %12
  br i1 %13, label %14, label %286

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %16 = load i8, i8* %15, align 8, !range !2
  %17 = icmp eq i8 %16, 0
  br i1 %17, label %20, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %22

20:                                               ; preds = %14
  %21 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %22

22:                                               ; preds = %18, %20
  %23 = phi %"class.std::__1::basic_string"* [ %19, %18 ], [ %21, %20 ]
  %24 = bitcast %"class.std::__1::basic_string"* %23 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %24, i64 0, i32 1, i32 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  br label %33

31:                                               ; preds = %22
  %32 = zext i8 %26 to i64
  br label %33

33:                                               ; preds = %28, %31
  %34 = phi i64 [ %30, %28 ], [ %32, %31 ]
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %36, label %231

36:                                               ; preds = %33
  %37 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %36
  %42 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  %43 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %42, i8* align 8 %43, i64 24, i1 false) #13
  br label %219

44:                                               ; preds = %36
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i16*, i16** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = icmp ult i64 %48, 11
  br i1 %49, label %50, label %55

50:                                               ; preds = %44
  %51 = bitcast %"class.std::__1::basic_string"* %3 to i16*
  %52 = trunc i64 %48 to i8
  %53 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %53, i64 0, i32 1, i32 1
  store i8 %52, i8* %54, align 1
  br label %72

55:                                               ; preds = %44
  %56 = icmp ugt i64 %48, 9223372036854775791
  br i1 %56, label %57, label %59

57:                                               ; preds = %55
  %58 = bitcast %"class.std::__1::basic_string"* %3 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %58) #14
  unreachable

59:                                               ; preds = %55
  %60 = add nuw nsw i64 %48, 8
  %61 = and i64 %60, -8
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  tail call void @abort() #14
  unreachable

64:                                               ; preds = %59
  %65 = shl i64 %61, 1
  %66 = tail call i8* @_Znwm(i64 %65) #15
  %67 = bitcast i8* %66 to i16*
  %68 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  store i8* %66, i8** %68, align 8
  %69 = or i64 %61, -9223372036854775808
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %48, i64* %71, align 8
  br label %72

72:                                               ; preds = %64, %50
  %73 = phi i16* [ %51, %50 ], [ %67, %64 ]
  %74 = add nuw nsw i64 %48, 1
  %75 = add i64 %48, 1
  %76 = icmp ult i64 %75, 16
  br i1 %76, label %166, label %77

77:                                               ; preds = %72
  %78 = add i64 %48, 1
  %79 = getelementptr i16, i16* %73, i64 %78
  %80 = getelementptr i16, i16* %46, i64 %78
  %81 = icmp ult i16* %73, %80
  %82 = icmp ult i16* %46, %79
  %83 = and i1 %81, %82
  br i1 %83, label %166, label %84

84:                                               ; preds = %77
  %85 = and i64 %75, -16
  %86 = sub i64 %74, %85
  %87 = getelementptr i16, i16* %46, i64 %85
  %88 = getelementptr i16, i16* %73, i64 %85
  %89 = add i64 %85, -16
  %90 = lshr exact i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 3
  %93 = icmp ult i64 %89, 48
  br i1 %93, label %145, label %94

94:                                               ; preds = %84
  %95 = sub nsw i64 %91, %92
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 0, %94 ], [ %142, %96 ]
  %98 = phi i64 [ %95, %94 ], [ %143, %96 ]
  %99 = getelementptr i16, i16* %46, i64 %97
  %100 = getelementptr i16, i16* %73, i64 %97
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !212
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !212
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !215, !noalias !212
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !215, !noalias !212
  %109 = or i64 %97, 16
  %110 = getelementptr i16, i16* %46, i64 %109
  %111 = getelementptr i16, i16* %73, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !212
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !212
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !215, !noalias !212
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !215, !noalias !212
  %120 = or i64 %97, 32
  %121 = getelementptr i16, i16* %46, i64 %120
  %122 = getelementptr i16, i16* %73, i64 %120
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !212
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !212
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !215, !noalias !212
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !215, !noalias !212
  %131 = or i64 %97, 48
  %132 = getelementptr i16, i16* %46, i64 %131
  %133 = getelementptr i16, i16* %73, i64 %131
  %134 = bitcast i16* %132 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !212
  %136 = getelementptr i16, i16* %132, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !212
  %139 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %139, align 2, !alias.scope !215, !noalias !212
  %140 = getelementptr i16, i16* %133, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2, !alias.scope !215, !noalias !212
  %142 = add i64 %97, 64
  %143 = add i64 %98, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %96, !llvm.loop !217

145:                                              ; preds = %96, %84
  %146 = phi i64 [ 0, %84 ], [ %142, %96 ]
  %147 = icmp eq i64 %92, 0
  br i1 %147, label %164, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %161, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %162, %148 ], [ %92, %145 ]
  %151 = getelementptr i16, i16* %46, i64 %149
  %152 = getelementptr i16, i16* %73, i64 %149
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !212
  %155 = getelementptr i16, i16* %151, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2, !alias.scope !212
  %158 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %158, align 2, !alias.scope !215, !noalias !212
  %159 = getelementptr i16, i16* %152, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %160, align 2, !alias.scope !215, !noalias !212
  %161 = add i64 %149, 16
  %162 = add i64 %150, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %148, !llvm.loop !218

164:                                              ; preds = %148, %145
  %165 = icmp eq i64 %75, %85
  br i1 %165, label %219, label %166

166:                                              ; preds = %164, %77, %72
  %167 = phi i64 [ %74, %77 ], [ %74, %72 ], [ %86, %164 ]
  %168 = phi i16* [ %46, %77 ], [ %46, %72 ], [ %87, %164 ]
  %169 = phi i16* [ %73, %77 ], [ %73, %72 ], [ %88, %164 ]
  %170 = add i64 %167, -1
  %171 = and i64 %167, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %166, %173
  %174 = phi i64 [ %179, %173 ], [ %167, %166 ]
  %175 = phi i16* [ %181, %173 ], [ %168, %166 ]
  %176 = phi i16* [ %180, %173 ], [ %169, %166 ]
  %177 = phi i64 [ %182, %173 ], [ %171, %166 ]
  %178 = load i16, i16* %175, align 2
  store i16 %178, i16* %176, align 2
  %179 = add i64 %174, -1
  %180 = getelementptr inbounds i16, i16* %176, i64 1
  %181 = getelementptr inbounds i16, i16* %175, i64 1
  %182 = add i64 %177, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !219

184:                                              ; preds = %173, %166
  %185 = phi i64 [ %167, %166 ], [ %179, %173 ]
  %186 = phi i16* [ %168, %166 ], [ %181, %173 ]
  %187 = phi i16* [ %169, %166 ], [ %180, %173 ]
  %188 = icmp ult i64 %170, 7
  br i1 %188, label %219, label %189

189:                                              ; preds = %184, %189
  %190 = phi i64 [ %215, %189 ], [ %185, %184 ]
  %191 = phi i16* [ %217, %189 ], [ %186, %184 ]
  %192 = phi i16* [ %216, %189 ], [ %187, %184 ]
  %193 = load i16, i16* %191, align 2
  store i16 %193, i16* %192, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 1
  %195 = getelementptr inbounds i16, i16* %191, i64 1
  %196 = load i16, i16* %195, align 2
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds i16, i16* %192, i64 2
  %198 = getelementptr inbounds i16, i16* %191, i64 2
  %199 = load i16, i16* %198, align 2
  store i16 %199, i16* %197, align 2
  %200 = getelementptr inbounds i16, i16* %192, i64 3
  %201 = getelementptr inbounds i16, i16* %191, i64 3
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %192, i64 4
  %204 = getelementptr inbounds i16, i16* %191, i64 4
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %192, i64 5
  %207 = getelementptr inbounds i16, i16* %191, i64 5
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = getelementptr inbounds i16, i16* %192, i64 6
  %210 = getelementptr inbounds i16, i16* %191, i64 6
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = getelementptr inbounds i16, i16* %192, i64 7
  %213 = getelementptr inbounds i16, i16* %191, i64 7
  %214 = load i16, i16* %213, align 2
  store i16 %214, i16* %212, align 2
  %215 = add i64 %190, -8
  %216 = getelementptr inbounds i16, i16* %192, i64 8
  %217 = getelementptr inbounds i16, i16* %191, i64 8
  %218 = icmp eq i64 %215, 0
  br i1 %218, label %219, label %189, !llvm.loop !220

219:                                              ; preds = %184, %189, %164, %41
  %220 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %221 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %220, align 8
  %222 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %221, i64 3
  %223 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %222, align 8
  call void %223(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %3, i32 1) #13
  %224 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %225 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %224, i64 0, i32 1, i32 1
  %226 = load i8, i8* %225, align 1
  %227 = icmp slt i8 %226, 0
  br i1 %227, label %228, label %562

228:                                              ; preds = %219
  %229 = bitcast %"class.std::__1::basic_string"* %3 to i8**
  %230 = load i8*, i8** %229, align 8
  call void @_ZdlPv(i8* %230) #15
  br label %562

231:                                              ; preds = %33
  %232 = bitcast [3 x %"class.base::BasicStringPiece.61"]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %232) #13
  %233 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 0
  %234 = load i8, i8* %15, align 8, !range !2
  %235 = icmp eq i8 %234, 0
  br i1 %235, label %238, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %240

238:                                              ; preds = %231
  %239 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %240

240:                                              ; preds = %236, %238
  %241 = phi %"class.std::__1::basic_string"* [ %237, %236 ], [ %239, %238 ]
  %242 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 0, i32 0
  %243 = bitcast %"class.std::__1::basic_string"* %241 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %244 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %243, i64 0, i32 1, i32 1
  %245 = load i8, i8* %244, align 1
  %246 = icmp slt i8 %245, 0
  %247 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %241, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %248 = load i16*, i16** %247, align 8
  %249 = bitcast %"class.std::__1::basic_string"* %241 to i16*
  %250 = select i1 %246, i16* %248, i16* %249
  store i16* %250, i16** %242, align 8
  %251 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 0, i32 1
  %252 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %241, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %253 = load i64, i64* %252, align 8
  %254 = zext i8 %245 to i64
  %255 = select i1 %246, i64 %253, i64 %254
  store i64 %255, i64* %251, align 8
  %256 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 1, i32 0
  store i16* getelementptr inbounds ([2 x i16], [2 x i16]* @.str.9, i64 0, i64 0), i16** %256, align 8
  %257 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 1, i32 1
  store i64 1, i64* %257, align 8
  %258 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 2, i32 0
  %259 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %260 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %259, i64 0, i32 1, i32 1
  %261 = load i8, i8* %260, align 1
  %262 = icmp slt i8 %261, 0
  %263 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %264 = load i16*, i16** %263, align 8
  %265 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %266 = select i1 %262, i16* %264, i16* %265
  store i16* %266, i16** %258, align 8
  %267 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %5, i64 0, i64 2, i32 1
  %268 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %269 = load i64, i64* %268, align 8
  %270 = zext i8 %261 to i64
  %271 = select i1 %262, i64 %269, i64 %270
  store i64 %271, i64* %267, align 8
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull sret %4, i64 3, %"class.base::BasicStringPiece.61"* nonnull %233) #13
  %272 = bitcast %"class.autofill::structured_address::AddressComponent"* %0 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %273 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %272, align 8
  %274 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %273, i64 3
  %275 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %274, align 8
  call void %275(%"class.autofill::structured_address::AddressComponent"* %0, %"class.std::__1::basic_string"* nonnull %4, i32 1) #13
  %276 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %277 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %276, i64 0, i32 1, i32 1
  %278 = load i8, i8* %277, align 1
  %279 = icmp slt i8 %278, 0
  br i1 %279, label %280, label %283

280:                                              ; preds = %240
  %281 = bitcast %"class.std::__1::basic_string"* %4 to i8**
  %282 = load i8*, i8** %281, align 8
  call void @_ZdlPv(i8* %282) #15
  br label %283

283:                                              ; preds = %240, %280
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %232) #13
  br label %562

284:                                              ; preds = %307
  %285 = icmp eq %"class.autofill::structured_address::AddressComponent"** %310, %12
  br i1 %285, label %506, label %286

286:                                              ; preds = %2, %284
  %287 = phi %"class.autofill::structured_address::AddressComponent"** [ %310, %284 ], [ %10, %2 ]
  %288 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %287, align 8
  %289 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %288, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %290 = load i8, i8* %289, align 8, !range !2
  %291 = icmp eq i8 %290, 0
  br i1 %291, label %294, label %292

292:                                              ; preds = %286
  %293 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %288, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %296

294:                                              ; preds = %286
  %295 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %296

296:                                              ; preds = %292, %294
  %297 = phi %"class.std::__1::basic_string"* [ %293, %292 ], [ %295, %294 ]
  %298 = bitcast %"class.std::__1::basic_string"* %297 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %299 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %298, i64 0, i32 1, i32 1
  %300 = load i8, i8* %299, align 1
  %301 = icmp slt i8 %300, 0
  br i1 %301, label %302, label %305

302:                                              ; preds = %296
  %303 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %297, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %304 = load i64, i64* %303, align 8
  br label %307

305:                                              ; preds = %296
  %306 = zext i8 %300 to i64
  br label %307

307:                                              ; preds = %302, %305
  %308 = phi i64 [ %304, %302 ], [ %306, %305 ]
  %309 = icmp eq i64 %308, 0
  %310 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %287, i64 1
  br i1 %309, label %311, label %284

311:                                              ; preds = %307
  %312 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %313 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %312, i64 0, i32 1, i32 1
  %314 = load i8, i8* %313, align 1
  %315 = icmp slt i8 %314, 0
  br i1 %315, label %319, label %316

316:                                              ; preds = %311
  %317 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  %318 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %317, i8* align 8 %318, i64 24, i1 false) #13
  br label %494

319:                                              ; preds = %311
  %320 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %321 = load i16*, i16** %320, align 8
  %322 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %323 = load i64, i64* %322, align 8
  %324 = icmp ult i64 %323, 11
  br i1 %324, label %325, label %330

325:                                              ; preds = %319
  %326 = bitcast %"class.std::__1::basic_string"* %6 to i16*
  %327 = trunc i64 %323 to i8
  %328 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %329 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %328, i64 0, i32 1, i32 1
  store i8 %327, i8* %329, align 1
  br label %347

330:                                              ; preds = %319
  %331 = icmp ugt i64 %323, 9223372036854775791
  br i1 %331, label %332, label %334

332:                                              ; preds = %330
  %333 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %333) #14
  unreachable

334:                                              ; preds = %330
  %335 = add nuw nsw i64 %323, 8
  %336 = and i64 %335, -8
  %337 = icmp slt i64 %336, 0
  br i1 %337, label %338, label %339

338:                                              ; preds = %334
  tail call void @abort() #14
  unreachable

339:                                              ; preds = %334
  %340 = shl i64 %336, 1
  %341 = tail call i8* @_Znwm(i64 %340) #15
  %342 = bitcast i8* %341 to i16*
  %343 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  store i8* %341, i8** %343, align 8
  %344 = or i64 %336, -9223372036854775808
  %345 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %344, i64* %345, align 8
  %346 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %323, i64* %346, align 8
  br label %347

347:                                              ; preds = %339, %325
  %348 = phi i16* [ %326, %325 ], [ %342, %339 ]
  %349 = add nuw nsw i64 %323, 1
  %350 = add i64 %323, 1
  %351 = icmp ult i64 %350, 16
  br i1 %351, label %441, label %352

352:                                              ; preds = %347
  %353 = add i64 %323, 1
  %354 = getelementptr i16, i16* %348, i64 %353
  %355 = getelementptr i16, i16* %321, i64 %353
  %356 = icmp ult i16* %348, %355
  %357 = icmp ult i16* %321, %354
  %358 = and i1 %356, %357
  br i1 %358, label %441, label %359

359:                                              ; preds = %352
  %360 = and i64 %350, -16
  %361 = sub i64 %349, %360
  %362 = getelementptr i16, i16* %321, i64 %360
  %363 = getelementptr i16, i16* %348, i64 %360
  %364 = add i64 %360, -16
  %365 = lshr exact i64 %364, 4
  %366 = add nuw nsw i64 %365, 1
  %367 = and i64 %366, 3
  %368 = icmp ult i64 %364, 48
  br i1 %368, label %420, label %369

369:                                              ; preds = %359
  %370 = sub nsw i64 %366, %367
  br label %371

371:                                              ; preds = %371, %369
  %372 = phi i64 [ 0, %369 ], [ %417, %371 ]
  %373 = phi i64 [ %370, %369 ], [ %418, %371 ]
  %374 = getelementptr i16, i16* %321, i64 %372
  %375 = getelementptr i16, i16* %348, i64 %372
  %376 = bitcast i16* %374 to <8 x i16>*
  %377 = load <8 x i16>, <8 x i16>* %376, align 2, !alias.scope !221
  %378 = getelementptr i16, i16* %374, i64 8
  %379 = bitcast i16* %378 to <8 x i16>*
  %380 = load <8 x i16>, <8 x i16>* %379, align 2, !alias.scope !221
  %381 = bitcast i16* %375 to <8 x i16>*
  store <8 x i16> %377, <8 x i16>* %381, align 2, !alias.scope !224, !noalias !221
  %382 = getelementptr i16, i16* %375, i64 8
  %383 = bitcast i16* %382 to <8 x i16>*
  store <8 x i16> %380, <8 x i16>* %383, align 2, !alias.scope !224, !noalias !221
  %384 = or i64 %372, 16
  %385 = getelementptr i16, i16* %321, i64 %384
  %386 = getelementptr i16, i16* %348, i64 %384
  %387 = bitcast i16* %385 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !221
  %389 = getelementptr i16, i16* %385, i64 8
  %390 = bitcast i16* %389 to <8 x i16>*
  %391 = load <8 x i16>, <8 x i16>* %390, align 2, !alias.scope !221
  %392 = bitcast i16* %386 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %392, align 2, !alias.scope !224, !noalias !221
  %393 = getelementptr i16, i16* %386, i64 8
  %394 = bitcast i16* %393 to <8 x i16>*
  store <8 x i16> %391, <8 x i16>* %394, align 2, !alias.scope !224, !noalias !221
  %395 = or i64 %372, 32
  %396 = getelementptr i16, i16* %321, i64 %395
  %397 = getelementptr i16, i16* %348, i64 %395
  %398 = bitcast i16* %396 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !221
  %400 = getelementptr i16, i16* %396, i64 8
  %401 = bitcast i16* %400 to <8 x i16>*
  %402 = load <8 x i16>, <8 x i16>* %401, align 2, !alias.scope !221
  %403 = bitcast i16* %397 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %403, align 2, !alias.scope !224, !noalias !221
  %404 = getelementptr i16, i16* %397, i64 8
  %405 = bitcast i16* %404 to <8 x i16>*
  store <8 x i16> %402, <8 x i16>* %405, align 2, !alias.scope !224, !noalias !221
  %406 = or i64 %372, 48
  %407 = getelementptr i16, i16* %321, i64 %406
  %408 = getelementptr i16, i16* %348, i64 %406
  %409 = bitcast i16* %407 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !221
  %411 = getelementptr i16, i16* %407, i64 8
  %412 = bitcast i16* %411 to <8 x i16>*
  %413 = load <8 x i16>, <8 x i16>* %412, align 2, !alias.scope !221
  %414 = bitcast i16* %408 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %414, align 2, !alias.scope !224, !noalias !221
  %415 = getelementptr i16, i16* %408, i64 8
  %416 = bitcast i16* %415 to <8 x i16>*
  store <8 x i16> %413, <8 x i16>* %416, align 2, !alias.scope !224, !noalias !221
  %417 = add i64 %372, 64
  %418 = add i64 %373, -4
  %419 = icmp eq i64 %418, 0
  br i1 %419, label %420, label %371, !llvm.loop !226

420:                                              ; preds = %371, %359
  %421 = phi i64 [ 0, %359 ], [ %417, %371 ]
  %422 = icmp eq i64 %367, 0
  br i1 %422, label %439, label %423

423:                                              ; preds = %420, %423
  %424 = phi i64 [ %436, %423 ], [ %421, %420 ]
  %425 = phi i64 [ %437, %423 ], [ %367, %420 ]
  %426 = getelementptr i16, i16* %321, i64 %424
  %427 = getelementptr i16, i16* %348, i64 %424
  %428 = bitcast i16* %426 to <8 x i16>*
  %429 = load <8 x i16>, <8 x i16>* %428, align 2, !alias.scope !221
  %430 = getelementptr i16, i16* %426, i64 8
  %431 = bitcast i16* %430 to <8 x i16>*
  %432 = load <8 x i16>, <8 x i16>* %431, align 2, !alias.scope !221
  %433 = bitcast i16* %427 to <8 x i16>*
  store <8 x i16> %429, <8 x i16>* %433, align 2, !alias.scope !224, !noalias !221
  %434 = getelementptr i16, i16* %427, i64 8
  %435 = bitcast i16* %434 to <8 x i16>*
  store <8 x i16> %432, <8 x i16>* %435, align 2, !alias.scope !224, !noalias !221
  %436 = add i64 %424, 16
  %437 = add i64 %425, -1
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %439, label %423, !llvm.loop !227

439:                                              ; preds = %423, %420
  %440 = icmp eq i64 %350, %360
  br i1 %440, label %494, label %441

441:                                              ; preds = %439, %352, %347
  %442 = phi i64 [ %349, %352 ], [ %349, %347 ], [ %361, %439 ]
  %443 = phi i16* [ %321, %352 ], [ %321, %347 ], [ %362, %439 ]
  %444 = phi i16* [ %348, %352 ], [ %348, %347 ], [ %363, %439 ]
  %445 = add i64 %442, -1
  %446 = and i64 %442, 7
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %459, label %448

448:                                              ; preds = %441, %448
  %449 = phi i64 [ %454, %448 ], [ %442, %441 ]
  %450 = phi i16* [ %456, %448 ], [ %443, %441 ]
  %451 = phi i16* [ %455, %448 ], [ %444, %441 ]
  %452 = phi i64 [ %457, %448 ], [ %446, %441 ]
  %453 = load i16, i16* %450, align 2
  store i16 %453, i16* %451, align 2
  %454 = add i64 %449, -1
  %455 = getelementptr inbounds i16, i16* %451, i64 1
  %456 = getelementptr inbounds i16, i16* %450, i64 1
  %457 = add i64 %452, -1
  %458 = icmp eq i64 %457, 0
  br i1 %458, label %459, label %448, !llvm.loop !228

459:                                              ; preds = %448, %441
  %460 = phi i64 [ %442, %441 ], [ %454, %448 ]
  %461 = phi i16* [ %443, %441 ], [ %456, %448 ]
  %462 = phi i16* [ %444, %441 ], [ %455, %448 ]
  %463 = icmp ult i64 %445, 7
  br i1 %463, label %494, label %464

464:                                              ; preds = %459, %464
  %465 = phi i64 [ %490, %464 ], [ %460, %459 ]
  %466 = phi i16* [ %492, %464 ], [ %461, %459 ]
  %467 = phi i16* [ %491, %464 ], [ %462, %459 ]
  %468 = load i16, i16* %466, align 2
  store i16 %468, i16* %467, align 2
  %469 = getelementptr inbounds i16, i16* %467, i64 1
  %470 = getelementptr inbounds i16, i16* %466, i64 1
  %471 = load i16, i16* %470, align 2
  store i16 %471, i16* %469, align 2
  %472 = getelementptr inbounds i16, i16* %467, i64 2
  %473 = getelementptr inbounds i16, i16* %466, i64 2
  %474 = load i16, i16* %473, align 2
  store i16 %474, i16* %472, align 2
  %475 = getelementptr inbounds i16, i16* %467, i64 3
  %476 = getelementptr inbounds i16, i16* %466, i64 3
  %477 = load i16, i16* %476, align 2
  store i16 %477, i16* %475, align 2
  %478 = getelementptr inbounds i16, i16* %467, i64 4
  %479 = getelementptr inbounds i16, i16* %466, i64 4
  %480 = load i16, i16* %479, align 2
  store i16 %480, i16* %478, align 2
  %481 = getelementptr inbounds i16, i16* %467, i64 5
  %482 = getelementptr inbounds i16, i16* %466, i64 5
  %483 = load i16, i16* %482, align 2
  store i16 %483, i16* %481, align 2
  %484 = getelementptr inbounds i16, i16* %467, i64 6
  %485 = getelementptr inbounds i16, i16* %466, i64 6
  %486 = load i16, i16* %485, align 2
  store i16 %486, i16* %484, align 2
  %487 = getelementptr inbounds i16, i16* %467, i64 7
  %488 = getelementptr inbounds i16, i16* %466, i64 7
  %489 = load i16, i16* %488, align 2
  store i16 %489, i16* %487, align 2
  %490 = add i64 %465, -8
  %491 = getelementptr inbounds i16, i16* %467, i64 8
  %492 = getelementptr inbounds i16, i16* %466, i64 8
  %493 = icmp eq i64 %490, 0
  br i1 %493, label %494, label %464, !llvm.loop !229

494:                                              ; preds = %459, %464, %439, %316
  %495 = bitcast %"class.autofill::structured_address::AddressComponent"* %288 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %496 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %495, align 8
  %497 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %496, i64 3
  %498 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %497, align 8
  call void %498(%"class.autofill::structured_address::AddressComponent"* %288, %"class.std::__1::basic_string"* nonnull %6, i32 1) #13
  %499 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %500 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %499, i64 0, i32 1, i32 1
  %501 = load i8, i8* %500, align 1
  %502 = icmp slt i8 %501, 0
  br i1 %502, label %503, label %562

503:                                              ; preds = %494
  %504 = bitcast %"class.std::__1::basic_string"* %6 to i8**
  %505 = load i8*, i8** %504, align 8
  call void @_ZdlPv(i8* %505) #15
  br label %562

506:                                              ; preds = %284
  %507 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %9, align 8
  %508 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %507, align 8
  %509 = bitcast [3 x %"class.base::BasicStringPiece.61"]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %509) #13
  %510 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 0
  %511 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %512 = load i8, i8* %511, align 8, !range !2
  %513 = icmp eq i8 %512, 0
  br i1 %513, label %516, label %514

514:                                              ; preds = %506
  %515 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %518

516:                                              ; preds = %506
  %517 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %518

518:                                              ; preds = %514, %516
  %519 = phi %"class.std::__1::basic_string"* [ %515, %514 ], [ %517, %516 ]
  %520 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 0, i32 0
  %521 = bitcast %"class.std::__1::basic_string"* %519 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %522 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %521, i64 0, i32 1, i32 1
  %523 = load i8, i8* %522, align 1
  %524 = icmp slt i8 %523, 0
  %525 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %519, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %526 = load i16*, i16** %525, align 8
  %527 = bitcast %"class.std::__1::basic_string"* %519 to i16*
  %528 = select i1 %524, i16* %526, i16* %527
  store i16* %528, i16** %520, align 8
  %529 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 0, i32 1
  %530 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %519, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %531 = load i64, i64* %530, align 8
  %532 = zext i8 %523 to i64
  %533 = select i1 %524, i64 %531, i64 %532
  store i64 %533, i64* %529, align 8
  %534 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 1, i32 0
  store i16* getelementptr inbounds ([2 x i16], [2 x i16]* @.str.9, i64 0, i64 0), i16** %534, align 8
  %535 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 1, i32 1
  store i64 1, i64* %535, align 8
  %536 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 2, i32 0
  %537 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %538 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %537, i64 0, i32 1, i32 1
  %539 = load i8, i8* %538, align 1
  %540 = icmp slt i8 %539, 0
  %541 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %542 = load i16*, i16** %541, align 8
  %543 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %544 = select i1 %540, i16* %542, i16* %543
  store i16* %544, i16** %536, align 8
  %545 = getelementptr inbounds [3 x %"class.base::BasicStringPiece.61"], [3 x %"class.base::BasicStringPiece.61"]* %8, i64 0, i64 2, i32 1
  %546 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %547 = load i64, i64* %546, align 8
  %548 = zext i8 %539 to i64
  %549 = select i1 %540, i64 %547, i64 %548
  store i64 %549, i64* %545, align 8
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull sret %7, i64 3, %"class.base::BasicStringPiece.61"* nonnull %510) #13
  %550 = bitcast %"class.autofill::structured_address::AddressComponent"* %508 to void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)***
  %551 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)**, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*** %550, align 8
  %552 = getelementptr inbounds void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %551, i64 3
  %553 = load void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)*, void (%"class.autofill::structured_address::AddressComponent"*, %"class.std::__1::basic_string"*, i32)** %552, align 8
  call void %553(%"class.autofill::structured_address::AddressComponent"* %508, %"class.std::__1::basic_string"* nonnull %7, i32 1) #13
  %554 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %555 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %554, i64 0, i32 1, i32 1
  %556 = load i8, i8* %555, align 1
  %557 = icmp slt i8 %556, 0
  br i1 %557, label %558, label %561

558:                                              ; preds = %518
  %559 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %560 = load i8*, i8** %559, align 8
  call void @_ZdlPv(i8* %560) #15
  br label %561

561:                                              ; preds = %518, %558
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %509) #13
  br label %562

562:                                              ; preds = %503, %494, %228, %219, %283, %561
  ret void
}

declare void @_ZN8autofill18structured_address19CompareSortedTokensERKNSt3__16vectorINS0_12AddressTokenENS1_9allocatorIS3_EEEES8_(%"struct.autofill::structured_address::SortedTokenComparisonResult"* sret, %"class.std::__1::vector.12"* dereferenceable(24), %"class.std::__1::vector.12"* dereferenceable(24)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK8autofill18structured_address16AddressComponent29GetStructureVerificationScoreEv(%"class.autofill::structured_address::AddressComponent"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 3
  %5 = zext i1 %4 to i32
  %6 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 0
  %7 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %6, align 8
  %8 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %0, i64 0, i32 4, i32 0, i32 1
  %9 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %8, align 8
  %10 = icmp eq %"class.autofill::structured_address::AddressComponent"** %7, %9
  br i1 %10, label %11, label %13

11:                                               ; preds = %13, %1
  %12 = phi i32 [ %5, %1 ], [ %22, %13 ]
  ret i32 %12

13:                                               ; preds = %1, %13
  %14 = phi i32 [ %22, %13 ], [ %5, %1 ]
  %15 = phi %"class.autofill::structured_address::AddressComponent"** [ %23, %13 ], [ %7, %1 ]
  %16 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %15, align 8
  %17 = bitcast %"class.autofill::structured_address::AddressComponent"* %16 to i32 (%"class.autofill::structured_address::AddressComponent"*)***
  %18 = load i32 (%"class.autofill::structured_address::AddressComponent"*)**, i32 (%"class.autofill::structured_address::AddressComponent"*)*** %17, align 8
  %19 = getelementptr inbounds i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %18, i64 12
  %20 = load i32 (%"class.autofill::structured_address::AddressComponent"*)*, i32 (%"class.autofill::structured_address::AddressComponent"*)** %19, align 8
  %21 = tail call i32 %20(%"class.autofill::structured_address::AddressComponent"* %16) #13
  %22 = add nsw i32 %21, %14
  %23 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %15, i64 1
  %24 = icmp eq %"class.autofill::structured_address::AddressComponent"** %23, %9
  br i1 %24, label %11, label %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent15NormalizedValueEv(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %10

8:                                                ; preds = %2
  %9 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %10

10:                                               ; preds = %6, %8
  %11 = phi %"class.std::__1::basic_string"* [ %7, %6 ], [ %9, %8 ]
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i16*, i16** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %11 to i16*
  %19 = select i1 %15, i16* %17, i16* %18
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %14 to i64
  %23 = select i1 %15, i64 %21, i64 %22
  tail call void @_ZN8autofill18structured_address14NormalizeValueEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEb(%"class.std::__1::basic_string"* sret %0, i16* %19, i64 %23, i1 zeroext true) #13
  ret void
}

declare void @_ZN8autofill18structured_address14NormalizeValueEN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEEb(%"class.std::__1::basic_string"* sret, i16*, i64, i1 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8autofill18structured_address16AddressComponent18ValueForComparisonEv(%"class.std::__1::basic_string"* noalias sret, %"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 align 2 {
  %3 = bitcast %"class.autofill::structured_address::AddressComponent"* %1 to void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)***
  %4 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)**, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %4, i64 22
  %6 = load void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)*, void (%"class.std::__1::basic_string"*, %"class.autofill::structured_address::AddressComponent"*)** %5, align 8
  tail call void %6(%"class.std::__1::basic_string"* sret %0, %"class.autofill::structured_address::AddressComponent"* %1) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill18structured_address16AddressComponent22MigrateLegacyStructureEb(%"class.autofill::structured_address::AddressComponent"*, i1 zeroext) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK8autofill18structured_address16AddressComponent32GetAdditionalSupportedFieldTypesEPNS_8DenseSetINS_15ServerFieldTypeELS3_118EEE(%"class.autofill::structured_address::AddressComponent"*, %"class.autofill::DenseSet"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill18structured_address16AddressComponent22PostAssignSanitizationEv(%"class.autofill::structured_address::AddressComponent"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %4 = icmp eq %"class.std::__1::basic_string"* %0, %1
  br i1 %4, label %510, label %5

5:                                                ; preds = %2
  %6 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %6, i64 0, i32 1, i32 1
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %10, i64 0, i32 1, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %9, label %341, label %14

14:                                               ; preds = %5
  br i1 %13, label %17, label %15

15:                                               ; preds = %14
  %16 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %16, i64 24, i1 false)
  br label %510

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = bitcast i16* %19 to i8*
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = icmp ult i64 %22, 11
  br i1 %23, label %24, label %175

24:                                               ; preds = %17
  %25 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  %26 = trunc i64 %22 to i8
  store i8 %26, i8* %7, align 1
  %27 = icmp eq i64 %22, 0
  br i1 %27, label %173, label %28

28:                                               ; preds = %24
  %29 = icmp ult i64 %22, 16
  br i1 %29, label %120, label %30

30:                                               ; preds = %28
  %31 = shl i64 %22, 1
  %32 = getelementptr i8, i8* %3, i64 %31
  %33 = getelementptr i16, i16* %19, i64 %22
  %34 = bitcast i16* %33 to %"class.std::__1::basic_string"*
  %35 = icmp ugt %"class.std::__1::basic_string"* %34, %0
  %36 = icmp ugt i8* %32, %20
  %37 = and i1 %35, %36
  br i1 %37, label %120, label %38

38:                                               ; preds = %30
  %39 = and i64 %22, -16
  %40 = sub i64 %22, %39
  %41 = getelementptr i16, i16* %19, i64 %39
  %42 = getelementptr i16, i16* %25, i64 %39
  %43 = add i64 %39, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 3
  %47 = icmp ult i64 %43, 48
  br i1 %47, label %99, label %48

48:                                               ; preds = %38
  %49 = sub nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %96, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %97, %50 ]
  %53 = getelementptr i16, i16* %19, i64 %51
  %54 = getelementptr i16, i16* %25, i64 %51
  %55 = bitcast i16* %53 to <8 x i16>*
  %56 = load <8 x i16>, <8 x i16>* %55, align 2, !alias.scope !230
  %57 = getelementptr i16, i16* %53, i64 8
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !alias.scope !230
  %60 = bitcast i16* %54 to <8 x i16>*
  store <8 x i16> %56, <8 x i16>* %60, align 2, !alias.scope !233, !noalias !230
  %61 = getelementptr i16, i16* %54, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> %59, <8 x i16>* %62, align 2, !alias.scope !233, !noalias !230
  %63 = or i64 %51, 16
  %64 = getelementptr i16, i16* %19, i64 %63
  %65 = getelementptr i16, i16* %25, i64 %63
  %66 = bitcast i16* %64 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !230
  %68 = getelementptr i16, i16* %64, i64 8
  %69 = bitcast i16* %68 to <8 x i16>*
  %70 = load <8 x i16>, <8 x i16>* %69, align 2, !alias.scope !230
  %71 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %71, align 2, !alias.scope !233, !noalias !230
  %72 = getelementptr i16, i16* %65, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %73, align 2, !alias.scope !233, !noalias !230
  %74 = or i64 %51, 32
  %75 = getelementptr i16, i16* %19, i64 %74
  %76 = getelementptr i16, i16* %25, i64 %74
  %77 = bitcast i16* %75 to <8 x i16>*
  %78 = load <8 x i16>, <8 x i16>* %77, align 2, !alias.scope !230
  %79 = getelementptr i16, i16* %75, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2, !alias.scope !230
  %82 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !alias.scope !233, !noalias !230
  %83 = getelementptr i16, i16* %76, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %84, align 2, !alias.scope !233, !noalias !230
  %85 = or i64 %51, 48
  %86 = getelementptr i16, i16* %19, i64 %85
  %87 = getelementptr i16, i16* %25, i64 %85
  %88 = bitcast i16* %86 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !230
  %90 = getelementptr i16, i16* %86, i64 8
  %91 = bitcast i16* %90 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !230
  %93 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %89, <8 x i16>* %93, align 2, !alias.scope !233, !noalias !230
  %94 = getelementptr i16, i16* %87, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %95, align 2, !alias.scope !233, !noalias !230
  %96 = add i64 %51, 64
  %97 = add i64 %52, -4
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %50, !llvm.loop !235

99:                                               ; preds = %50, %38
  %100 = phi i64 [ 0, %38 ], [ %96, %50 ]
  %101 = icmp eq i64 %46, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %99, %102
  %103 = phi i64 [ %115, %102 ], [ %100, %99 ]
  %104 = phi i64 [ %116, %102 ], [ %46, %99 ]
  %105 = getelementptr i16, i16* %19, i64 %103
  %106 = getelementptr i16, i16* %25, i64 %103
  %107 = bitcast i16* %105 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !230
  %109 = getelementptr i16, i16* %105, i64 8
  %110 = bitcast i16* %109 to <8 x i16>*
  %111 = load <8 x i16>, <8 x i16>* %110, align 2, !alias.scope !230
  %112 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %112, align 2, !alias.scope !233, !noalias !230
  %113 = getelementptr i16, i16* %106, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %114, align 2, !alias.scope !233, !noalias !230
  %115 = add i64 %103, 16
  %116 = add i64 %104, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %102, !llvm.loop !236

118:                                              ; preds = %102, %99
  %119 = icmp eq i64 %22, %39
  br i1 %119, label %173, label %120

120:                                              ; preds = %118, %30, %28
  %121 = phi i64 [ %22, %30 ], [ %22, %28 ], [ %40, %118 ]
  %122 = phi i16* [ %19, %30 ], [ %19, %28 ], [ %41, %118 ]
  %123 = phi i16* [ %25, %30 ], [ %25, %28 ], [ %42, %118 ]
  %124 = add i64 %121, -1
  %125 = and i64 %121, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %138, label %127

127:                                              ; preds = %120, %127
  %128 = phi i64 [ %133, %127 ], [ %121, %120 ]
  %129 = phi i16* [ %135, %127 ], [ %122, %120 ]
  %130 = phi i16* [ %134, %127 ], [ %123, %120 ]
  %131 = phi i64 [ %136, %127 ], [ %125, %120 ]
  %132 = load i16, i16* %129, align 2
  store i16 %132, i16* %130, align 2
  %133 = add i64 %128, -1
  %134 = getelementptr inbounds i16, i16* %130, i64 1
  %135 = getelementptr inbounds i16, i16* %129, i64 1
  %136 = add i64 %131, -1
  %137 = icmp eq i64 %136, 0
  br i1 %137, label %138, label %127, !llvm.loop !237

138:                                              ; preds = %127, %120
  %139 = phi i64 [ %121, %120 ], [ %133, %127 ]
  %140 = phi i16* [ %122, %120 ], [ %135, %127 ]
  %141 = phi i16* [ %123, %120 ], [ %134, %127 ]
  %142 = icmp ult i64 %124, 7
  br i1 %142, label %173, label %143

143:                                              ; preds = %138, %143
  %144 = phi i64 [ %169, %143 ], [ %139, %138 ]
  %145 = phi i16* [ %171, %143 ], [ %140, %138 ]
  %146 = phi i16* [ %170, %143 ], [ %141, %138 ]
  %147 = load i16, i16* %145, align 2
  store i16 %147, i16* %146, align 2
  %148 = getelementptr inbounds i16, i16* %146, i64 1
  %149 = getelementptr inbounds i16, i16* %145, i64 1
  %150 = load i16, i16* %149, align 2
  store i16 %150, i16* %148, align 2
  %151 = getelementptr inbounds i16, i16* %146, i64 2
  %152 = getelementptr inbounds i16, i16* %145, i64 2
  %153 = load i16, i16* %152, align 2
  store i16 %153, i16* %151, align 2
  %154 = getelementptr inbounds i16, i16* %146, i64 3
  %155 = getelementptr inbounds i16, i16* %145, i64 3
  %156 = load i16, i16* %155, align 2
  store i16 %156, i16* %154, align 2
  %157 = getelementptr inbounds i16, i16* %146, i64 4
  %158 = getelementptr inbounds i16, i16* %145, i64 4
  %159 = load i16, i16* %158, align 2
  store i16 %159, i16* %157, align 2
  %160 = getelementptr inbounds i16, i16* %146, i64 5
  %161 = getelementptr inbounds i16, i16* %145, i64 5
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %146, i64 6
  %164 = getelementptr inbounds i16, i16* %145, i64 6
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %146, i64 7
  %167 = getelementptr inbounds i16, i16* %145, i64 7
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %144, -8
  %170 = getelementptr inbounds i16, i16* %146, i64 8
  %171 = getelementptr inbounds i16, i16* %145, i64 8
  %172 = icmp eq i64 %169, 0
  br i1 %172, label %173, label %143, !llvm.loop !238

173:                                              ; preds = %138, %143, %118, %24
  %174 = getelementptr inbounds i16, i16* %25, i64 %22
  store i16 0, i16* %174, align 2
  br label %510

175:                                              ; preds = %17
  %176 = add i64 %22, -10
  %177 = icmp ugt i64 %176, 9223372036854775780
  br i1 %177, label %178, label %180

178:                                              ; preds = %175
  %179 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %179) #14
  unreachable

180:                                              ; preds = %175
  %181 = icmp ugt i64 %22, 20
  %182 = select i1 %181, i64 %22, i64 20
  %183 = add nuw nsw i64 %182, 8
  %184 = and i64 %183, -8
  %185 = icmp slt i64 %184, 0
  br i1 %185, label %186, label %187

186:                                              ; preds = %180
  tail call void @abort() #14
  unreachable

187:                                              ; preds = %180
  %188 = shl i64 %184, 1
  %189 = tail call i8* @_Znwm(i64 %188) #15
  %190 = bitcast i8* %189 to i16*
  %191 = icmp ult i64 %22, 16
  br i1 %191, label %282, label %192

192:                                              ; preds = %187
  %193 = shl i64 %22, 1
  %194 = getelementptr i8, i8* %189, i64 %193
  %195 = getelementptr i16, i16* %19, i64 %22
  %196 = bitcast i16* %195 to i8*
  %197 = icmp ult i8* %189, %196
  %198 = icmp ugt i8* %194, %20
  %199 = and i1 %197, %198
  br i1 %199, label %282, label %200

200:                                              ; preds = %192
  %201 = and i64 %22, -16
  %202 = sub i64 %22, %201
  %203 = getelementptr i16, i16* %19, i64 %201
  %204 = getelementptr i16, i16* %190, i64 %201
  %205 = add i64 %201, -16
  %206 = lshr exact i64 %205, 4
  %207 = add nuw nsw i64 %206, 1
  %208 = and i64 %207, 3
  %209 = icmp ult i64 %205, 48
  br i1 %209, label %261, label %210

210:                                              ; preds = %200
  %211 = sub nsw i64 %207, %208
  br label %212

212:                                              ; preds = %212, %210
  %213 = phi i64 [ 0, %210 ], [ %258, %212 ]
  %214 = phi i64 [ %211, %210 ], [ %259, %212 ]
  %215 = getelementptr i16, i16* %19, i64 %213
  %216 = getelementptr i16, i16* %190, i64 %213
  %217 = bitcast i16* %215 to <8 x i16>*
  %218 = load <8 x i16>, <8 x i16>* %217, align 2, !alias.scope !239
  %219 = getelementptr i16, i16* %215, i64 8
  %220 = bitcast i16* %219 to <8 x i16>*
  %221 = load <8 x i16>, <8 x i16>* %220, align 2, !alias.scope !239
  %222 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %218, <8 x i16>* %222, align 2, !alias.scope !242, !noalias !239
  %223 = getelementptr i16, i16* %216, i64 8
  %224 = bitcast i16* %223 to <8 x i16>*
  store <8 x i16> %221, <8 x i16>* %224, align 2, !alias.scope !242, !noalias !239
  %225 = or i64 %213, 16
  %226 = getelementptr i16, i16* %19, i64 %225
  %227 = getelementptr i16, i16* %190, i64 %225
  %228 = bitcast i16* %226 to <8 x i16>*
  %229 = load <8 x i16>, <8 x i16>* %228, align 2, !alias.scope !239
  %230 = getelementptr i16, i16* %226, i64 8
  %231 = bitcast i16* %230 to <8 x i16>*
  %232 = load <8 x i16>, <8 x i16>* %231, align 2, !alias.scope !239
  %233 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %229, <8 x i16>* %233, align 2, !alias.scope !242, !noalias !239
  %234 = getelementptr i16, i16* %227, i64 8
  %235 = bitcast i16* %234 to <8 x i16>*
  store <8 x i16> %232, <8 x i16>* %235, align 2, !alias.scope !242, !noalias !239
  %236 = or i64 %213, 32
  %237 = getelementptr i16, i16* %19, i64 %236
  %238 = getelementptr i16, i16* %190, i64 %236
  %239 = bitcast i16* %237 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 2, !alias.scope !239
  %241 = getelementptr i16, i16* %237, i64 8
  %242 = bitcast i16* %241 to <8 x i16>*
  %243 = load <8 x i16>, <8 x i16>* %242, align 2, !alias.scope !239
  %244 = bitcast i16* %238 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !alias.scope !242, !noalias !239
  %245 = getelementptr i16, i16* %238, i64 8
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %243, <8 x i16>* %246, align 2, !alias.scope !242, !noalias !239
  %247 = or i64 %213, 48
  %248 = getelementptr i16, i16* %19, i64 %247
  %249 = getelementptr i16, i16* %190, i64 %247
  %250 = bitcast i16* %248 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 2, !alias.scope !239
  %252 = getelementptr i16, i16* %248, i64 8
  %253 = bitcast i16* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 2, !alias.scope !239
  %255 = bitcast i16* %249 to <8 x i16>*
  store <8 x i16> %251, <8 x i16>* %255, align 2, !alias.scope !242, !noalias !239
  %256 = getelementptr i16, i16* %249, i64 8
  %257 = bitcast i16* %256 to <8 x i16>*
  store <8 x i16> %254, <8 x i16>* %257, align 2, !alias.scope !242, !noalias !239
  %258 = add i64 %213, 64
  %259 = add i64 %214, -4
  %260 = icmp eq i64 %259, 0
  br i1 %260, label %261, label %212, !llvm.loop !244

261:                                              ; preds = %212, %200
  %262 = phi i64 [ 0, %200 ], [ %258, %212 ]
  %263 = icmp eq i64 %208, 0
  br i1 %263, label %280, label %264

264:                                              ; preds = %261, %264
  %265 = phi i64 [ %277, %264 ], [ %262, %261 ]
  %266 = phi i64 [ %278, %264 ], [ %208, %261 ]
  %267 = getelementptr i16, i16* %19, i64 %265
  %268 = getelementptr i16, i16* %190, i64 %265
  %269 = bitcast i16* %267 to <8 x i16>*
  %270 = load <8 x i16>, <8 x i16>* %269, align 2, !alias.scope !239
  %271 = getelementptr i16, i16* %267, i64 8
  %272 = bitcast i16* %271 to <8 x i16>*
  %273 = load <8 x i16>, <8 x i16>* %272, align 2, !alias.scope !239
  %274 = bitcast i16* %268 to <8 x i16>*
  store <8 x i16> %270, <8 x i16>* %274, align 2, !alias.scope !242, !noalias !239
  %275 = getelementptr i16, i16* %268, i64 8
  %276 = bitcast i16* %275 to <8 x i16>*
  store <8 x i16> %273, <8 x i16>* %276, align 2, !alias.scope !242, !noalias !239
  %277 = add i64 %265, 16
  %278 = add i64 %266, -1
  %279 = icmp eq i64 %278, 0
  br i1 %279, label %280, label %264, !llvm.loop !245

280:                                              ; preds = %264, %261
  %281 = icmp eq i64 %22, %201
  br i1 %281, label %335, label %282

282:                                              ; preds = %280, %192, %187
  %283 = phi i64 [ %22, %192 ], [ %22, %187 ], [ %202, %280 ]
  %284 = phi i16* [ %19, %192 ], [ %19, %187 ], [ %203, %280 ]
  %285 = phi i16* [ %190, %192 ], [ %190, %187 ], [ %204, %280 ]
  %286 = add i64 %283, -1
  %287 = and i64 %283, 7
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %300, label %289

289:                                              ; preds = %282, %289
  %290 = phi i64 [ %295, %289 ], [ %283, %282 ]
  %291 = phi i16* [ %297, %289 ], [ %284, %282 ]
  %292 = phi i16* [ %296, %289 ], [ %285, %282 ]
  %293 = phi i64 [ %298, %289 ], [ %287, %282 ]
  %294 = load i16, i16* %291, align 2
  store i16 %294, i16* %292, align 2
  %295 = add i64 %290, -1
  %296 = getelementptr inbounds i16, i16* %292, i64 1
  %297 = getelementptr inbounds i16, i16* %291, i64 1
  %298 = add i64 %293, -1
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %300, label %289, !llvm.loop !246

300:                                              ; preds = %289, %282
  %301 = phi i64 [ %283, %282 ], [ %295, %289 ]
  %302 = phi i16* [ %284, %282 ], [ %297, %289 ]
  %303 = phi i16* [ %285, %282 ], [ %296, %289 ]
  %304 = icmp ult i64 %286, 7
  br i1 %304, label %335, label %305

305:                                              ; preds = %300, %305
  %306 = phi i64 [ %331, %305 ], [ %301, %300 ]
  %307 = phi i16* [ %333, %305 ], [ %302, %300 ]
  %308 = phi i16* [ %332, %305 ], [ %303, %300 ]
  %309 = load i16, i16* %307, align 2
  store i16 %309, i16* %308, align 2
  %310 = getelementptr inbounds i16, i16* %308, i64 1
  %311 = getelementptr inbounds i16, i16* %307, i64 1
  %312 = load i16, i16* %311, align 2
  store i16 %312, i16* %310, align 2
  %313 = getelementptr inbounds i16, i16* %308, i64 2
  %314 = getelementptr inbounds i16, i16* %307, i64 2
  %315 = load i16, i16* %314, align 2
  store i16 %315, i16* %313, align 2
  %316 = getelementptr inbounds i16, i16* %308, i64 3
  %317 = getelementptr inbounds i16, i16* %307, i64 3
  %318 = load i16, i16* %317, align 2
  store i16 %318, i16* %316, align 2
  %319 = getelementptr inbounds i16, i16* %308, i64 4
  %320 = getelementptr inbounds i16, i16* %307, i64 4
  %321 = load i16, i16* %320, align 2
  store i16 %321, i16* %319, align 2
  %322 = getelementptr inbounds i16, i16* %308, i64 5
  %323 = getelementptr inbounds i16, i16* %307, i64 5
  %324 = load i16, i16* %323, align 2
  store i16 %324, i16* %322, align 2
  %325 = getelementptr inbounds i16, i16* %308, i64 6
  %326 = getelementptr inbounds i16, i16* %307, i64 6
  %327 = load i16, i16* %326, align 2
  store i16 %327, i16* %325, align 2
  %328 = getelementptr inbounds i16, i16* %308, i64 7
  %329 = getelementptr inbounds i16, i16* %307, i64 7
  %330 = load i16, i16* %329, align 2
  store i16 %330, i16* %328, align 2
  %331 = add i64 %306, -8
  %332 = getelementptr inbounds i16, i16* %308, i64 8
  %333 = getelementptr inbounds i16, i16* %307, i64 8
  %334 = icmp eq i64 %331, 0
  br i1 %334, label %335, label %305, !llvm.loop !247

335:                                              ; preds = %300, %305, %280
  %336 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %189, i8** %336, align 8
  %337 = or i64 %184, -9223372036854775808
  %338 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %337, i64* %338, align 8
  %339 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %22, i64* %339, align 8
  %340 = getelementptr inbounds i16, i16* %190, i64 %22
  store i16 0, i16* %340, align 2
  br label %510

341:                                              ; preds = %5
  %342 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load i16*, i16** %342, align 8
  %344 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %347 = zext i8 %12 to i64
  %348 = select i1 %13, i16* %343, i16* %346
  %349 = select i1 %13, i64 %345, i64 %347
  %350 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %351 = load i64, i64* %350, align 8
  %352 = and i64 %351, 9223372036854775807
  %353 = icmp ugt i64 %352, %349
  br i1 %353, label %354, label %504

354:                                              ; preds = %341
  %355 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %356 = load i16*, i16** %355, align 8
  %357 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %349, i64* %357, align 8
  %358 = icmp eq i64 %349, 0
  br i1 %358, label %502, label %359

359:                                              ; preds = %354
  %360 = icmp ult i64 %349, 16
  br i1 %360, label %449, label %361

361:                                              ; preds = %359
  %362 = getelementptr i16, i16* %356, i64 %349
  %363 = getelementptr i16, i16* %348, i64 %349
  %364 = icmp ult i16* %356, %363
  %365 = icmp ult i16* %348, %362
  %366 = and i1 %364, %365
  br i1 %366, label %449, label %367

367:                                              ; preds = %361
  %368 = and i64 %349, -16
  %369 = sub i64 %349, %368
  %370 = getelementptr i16, i16* %348, i64 %368
  %371 = getelementptr i16, i16* %356, i64 %368
  %372 = add i64 %368, -16
  %373 = lshr exact i64 %372, 4
  %374 = add nuw nsw i64 %373, 1
  %375 = and i64 %374, 3
  %376 = icmp ult i64 %372, 48
  br i1 %376, label %428, label %377

377:                                              ; preds = %367
  %378 = sub nsw i64 %374, %375
  br label %379

379:                                              ; preds = %379, %377
  %380 = phi i64 [ 0, %377 ], [ %425, %379 ]
  %381 = phi i64 [ %378, %377 ], [ %426, %379 ]
  %382 = getelementptr i16, i16* %348, i64 %380
  %383 = getelementptr i16, i16* %356, i64 %380
  %384 = bitcast i16* %382 to <8 x i16>*
  %385 = load <8 x i16>, <8 x i16>* %384, align 2, !alias.scope !248
  %386 = getelementptr i16, i16* %382, i64 8
  %387 = bitcast i16* %386 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 2, !alias.scope !248
  %389 = bitcast i16* %383 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %389, align 2, !alias.scope !251, !noalias !248
  %390 = getelementptr i16, i16* %383, i64 8
  %391 = bitcast i16* %390 to <8 x i16>*
  store <8 x i16> %388, <8 x i16>* %391, align 2, !alias.scope !251, !noalias !248
  %392 = or i64 %380, 16
  %393 = getelementptr i16, i16* %348, i64 %392
  %394 = getelementptr i16, i16* %356, i64 %392
  %395 = bitcast i16* %393 to <8 x i16>*
  %396 = load <8 x i16>, <8 x i16>* %395, align 2, !alias.scope !248
  %397 = getelementptr i16, i16* %393, i64 8
  %398 = bitcast i16* %397 to <8 x i16>*
  %399 = load <8 x i16>, <8 x i16>* %398, align 2, !alias.scope !248
  %400 = bitcast i16* %394 to <8 x i16>*
  store <8 x i16> %396, <8 x i16>* %400, align 2, !alias.scope !251, !noalias !248
  %401 = getelementptr i16, i16* %394, i64 8
  %402 = bitcast i16* %401 to <8 x i16>*
  store <8 x i16> %399, <8 x i16>* %402, align 2, !alias.scope !251, !noalias !248
  %403 = or i64 %380, 32
  %404 = getelementptr i16, i16* %348, i64 %403
  %405 = getelementptr i16, i16* %356, i64 %403
  %406 = bitcast i16* %404 to <8 x i16>*
  %407 = load <8 x i16>, <8 x i16>* %406, align 2, !alias.scope !248
  %408 = getelementptr i16, i16* %404, i64 8
  %409 = bitcast i16* %408 to <8 x i16>*
  %410 = load <8 x i16>, <8 x i16>* %409, align 2, !alias.scope !248
  %411 = bitcast i16* %405 to <8 x i16>*
  store <8 x i16> %407, <8 x i16>* %411, align 2, !alias.scope !251, !noalias !248
  %412 = getelementptr i16, i16* %405, i64 8
  %413 = bitcast i16* %412 to <8 x i16>*
  store <8 x i16> %410, <8 x i16>* %413, align 2, !alias.scope !251, !noalias !248
  %414 = or i64 %380, 48
  %415 = getelementptr i16, i16* %348, i64 %414
  %416 = getelementptr i16, i16* %356, i64 %414
  %417 = bitcast i16* %415 to <8 x i16>*
  %418 = load <8 x i16>, <8 x i16>* %417, align 2, !alias.scope !248
  %419 = getelementptr i16, i16* %415, i64 8
  %420 = bitcast i16* %419 to <8 x i16>*
  %421 = load <8 x i16>, <8 x i16>* %420, align 2, !alias.scope !248
  %422 = bitcast i16* %416 to <8 x i16>*
  store <8 x i16> %418, <8 x i16>* %422, align 2, !alias.scope !251, !noalias !248
  %423 = getelementptr i16, i16* %416, i64 8
  %424 = bitcast i16* %423 to <8 x i16>*
  store <8 x i16> %421, <8 x i16>* %424, align 2, !alias.scope !251, !noalias !248
  %425 = add i64 %380, 64
  %426 = add i64 %381, -4
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %428, label %379, !llvm.loop !253

428:                                              ; preds = %379, %367
  %429 = phi i64 [ 0, %367 ], [ %425, %379 ]
  %430 = icmp eq i64 %375, 0
  br i1 %430, label %447, label %431

431:                                              ; preds = %428, %431
  %432 = phi i64 [ %444, %431 ], [ %429, %428 ]
  %433 = phi i64 [ %445, %431 ], [ %375, %428 ]
  %434 = getelementptr i16, i16* %348, i64 %432
  %435 = getelementptr i16, i16* %356, i64 %432
  %436 = bitcast i16* %434 to <8 x i16>*
  %437 = load <8 x i16>, <8 x i16>* %436, align 2, !alias.scope !248
  %438 = getelementptr i16, i16* %434, i64 8
  %439 = bitcast i16* %438 to <8 x i16>*
  %440 = load <8 x i16>, <8 x i16>* %439, align 2, !alias.scope !248
  %441 = bitcast i16* %435 to <8 x i16>*
  store <8 x i16> %437, <8 x i16>* %441, align 2, !alias.scope !251, !noalias !248
  %442 = getelementptr i16, i16* %435, i64 8
  %443 = bitcast i16* %442 to <8 x i16>*
  store <8 x i16> %440, <8 x i16>* %443, align 2, !alias.scope !251, !noalias !248
  %444 = add i64 %432, 16
  %445 = add i64 %433, -1
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %447, label %431, !llvm.loop !254

447:                                              ; preds = %431, %428
  %448 = icmp eq i64 %349, %368
  br i1 %448, label %502, label %449

449:                                              ; preds = %447, %361, %359
  %450 = phi i64 [ %349, %361 ], [ %349, %359 ], [ %369, %447 ]
  %451 = phi i16* [ %348, %361 ], [ %348, %359 ], [ %370, %447 ]
  %452 = phi i16* [ %356, %361 ], [ %356, %359 ], [ %371, %447 ]
  %453 = add i64 %450, -1
  %454 = and i64 %450, 7
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %467, label %456

456:                                              ; preds = %449, %456
  %457 = phi i64 [ %462, %456 ], [ %450, %449 ]
  %458 = phi i16* [ %464, %456 ], [ %451, %449 ]
  %459 = phi i16* [ %463, %456 ], [ %452, %449 ]
  %460 = phi i64 [ %465, %456 ], [ %454, %449 ]
  %461 = load i16, i16* %458, align 2
  store i16 %461, i16* %459, align 2
  %462 = add i64 %457, -1
  %463 = getelementptr inbounds i16, i16* %459, i64 1
  %464 = getelementptr inbounds i16, i16* %458, i64 1
  %465 = add i64 %460, -1
  %466 = icmp eq i64 %465, 0
  br i1 %466, label %467, label %456, !llvm.loop !255

467:                                              ; preds = %456, %449
  %468 = phi i64 [ %450, %449 ], [ %462, %456 ]
  %469 = phi i16* [ %451, %449 ], [ %464, %456 ]
  %470 = phi i16* [ %452, %449 ], [ %463, %456 ]
  %471 = icmp ult i64 %453, 7
  br i1 %471, label %502, label %472

472:                                              ; preds = %467, %472
  %473 = phi i64 [ %498, %472 ], [ %468, %467 ]
  %474 = phi i16* [ %500, %472 ], [ %469, %467 ]
  %475 = phi i16* [ %499, %472 ], [ %470, %467 ]
  %476 = load i16, i16* %474, align 2
  store i16 %476, i16* %475, align 2
  %477 = getelementptr inbounds i16, i16* %475, i64 1
  %478 = getelementptr inbounds i16, i16* %474, i64 1
  %479 = load i16, i16* %478, align 2
  store i16 %479, i16* %477, align 2
  %480 = getelementptr inbounds i16, i16* %475, i64 2
  %481 = getelementptr inbounds i16, i16* %474, i64 2
  %482 = load i16, i16* %481, align 2
  store i16 %482, i16* %480, align 2
  %483 = getelementptr inbounds i16, i16* %475, i64 3
  %484 = getelementptr inbounds i16, i16* %474, i64 3
  %485 = load i16, i16* %484, align 2
  store i16 %485, i16* %483, align 2
  %486 = getelementptr inbounds i16, i16* %475, i64 4
  %487 = getelementptr inbounds i16, i16* %474, i64 4
  %488 = load i16, i16* %487, align 2
  store i16 %488, i16* %486, align 2
  %489 = getelementptr inbounds i16, i16* %475, i64 5
  %490 = getelementptr inbounds i16, i16* %474, i64 5
  %491 = load i16, i16* %490, align 2
  store i16 %491, i16* %489, align 2
  %492 = getelementptr inbounds i16, i16* %475, i64 6
  %493 = getelementptr inbounds i16, i16* %474, i64 6
  %494 = load i16, i16* %493, align 2
  store i16 %494, i16* %492, align 2
  %495 = getelementptr inbounds i16, i16* %475, i64 7
  %496 = getelementptr inbounds i16, i16* %474, i64 7
  %497 = load i16, i16* %496, align 2
  store i16 %497, i16* %495, align 2
  %498 = add i64 %473, -8
  %499 = getelementptr inbounds i16, i16* %475, i64 8
  %500 = getelementptr inbounds i16, i16* %474, i64 8
  %501 = icmp eq i64 %498, 0
  br i1 %501, label %502, label %472, !llvm.loop !256

502:                                              ; preds = %467, %472, %447, %354
  %503 = getelementptr inbounds i16, i16* %356, i64 %349
  store i16 0, i16* %503, align 2
  br label %510

504:                                              ; preds = %341
  %505 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %506 = load i64, i64* %505, align 8
  %507 = add nsw i64 %352, -1
  %508 = add i64 %349, 1
  %509 = sub i64 %508, %352
  tail call void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"* %0, i64 %507, i64 %509, i64 %506, i64 0, i64 %506, i64 %349, i16* %348) #13
  br label %510

510:                                              ; preds = %504, %502, %335, %173, %15, %2
  ret %"class.std::__1::basic_string"* %0
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEE21__grow_by_and_replaceEmmmmmmPKDs(%"class.std::__1::basic_string"*, i64, i64, i64, i64, i64, i64, i16*) local_unnamed_addr #1 comdat align 2 {
  %9 = sub i64 9223372036854775790, %1
  %10 = icmp ult i64 %9, %2
  br i1 %10, label %11, label %13

11:                                               ; preds = %8
  %12 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %12) #14
  unreachable

13:                                               ; preds = %8
  %14 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load i16*, i16** %19, align 8
  br label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i16*
  br label %23

23:                                               ; preds = %18, %21
  %24 = phi i16* [ %20, %18 ], [ %22, %21 ]
  %25 = bitcast i16* %24 to i8*
  %26 = icmp ult i64 %1, 4611686018427387879
  br i1 %26, label %27, label %38

27:                                               ; preds = %23
  %28 = add i64 %2, %1
  %29 = shl i64 %1, 1
  %30 = icmp ult i64 %28, %29
  %31 = select i1 %30, i64 %29, i64 %28
  %32 = icmp ult i64 %31, 11
  br i1 %32, label %38, label %33

33:                                               ; preds = %27
  %34 = add i64 %31, 8
  %35 = and i64 %34, -8
  %36 = icmp slt i64 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %33
  tail call void @abort() #14
  unreachable

38:                                               ; preds = %23, %27, %33
  %39 = phi i64 [ %35, %33 ], [ 9223372036854775791, %23 ], [ 11, %27 ]
  %40 = shl i64 %39, 1
  %41 = tail call i8* @_Znwm(i64 %40) #15
  %42 = bitcast i8* %41 to i16*
  %43 = icmp eq i64 %4, 0
  br i1 %43, label %189, label %44

44:                                               ; preds = %38
  %45 = icmp ult i64 %4, 16
  br i1 %45, label %136, label %46

46:                                               ; preds = %44
  %47 = shl i64 %4, 1
  %48 = getelementptr i8, i8* %41, i64 %47
  %49 = getelementptr i16, i16* %24, i64 %4
  %50 = bitcast i16* %49 to i8*
  %51 = icmp ult i8* %41, %50
  %52 = icmp ugt i8* %48, %25
  %53 = and i1 %51, %52
  br i1 %53, label %136, label %54

54:                                               ; preds = %46
  %55 = and i64 %4, -16
  %56 = sub i64 %4, %55
  %57 = getelementptr i16, i16* %24, i64 %55
  %58 = getelementptr i16, i16* %42, i64 %55
  %59 = add i64 %55, -16
  %60 = lshr exact i64 %59, 4
  %61 = add nuw nsw i64 %60, 1
  %62 = and i64 %61, 3
  %63 = icmp ult i64 %59, 48
  br i1 %63, label %115, label %64

64:                                               ; preds = %54
  %65 = sub nsw i64 %61, %62
  br label %66

66:                                               ; preds = %66, %64
  %67 = phi i64 [ 0, %64 ], [ %112, %66 ]
  %68 = phi i64 [ %65, %64 ], [ %113, %66 ]
  %69 = getelementptr i16, i16* %24, i64 %67
  %70 = getelementptr i16, i16* %42, i64 %67
  %71 = bitcast i16* %69 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !257
  %73 = getelementptr i16, i16* %69, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !257
  %76 = bitcast i16* %70 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %76, align 2, !alias.scope !260, !noalias !257
  %77 = getelementptr i16, i16* %70, i64 8
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !260, !noalias !257
  %79 = or i64 %67, 16
  %80 = getelementptr i16, i16* %24, i64 %79
  %81 = getelementptr i16, i16* %42, i64 %79
  %82 = bitcast i16* %80 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !257
  %84 = getelementptr i16, i16* %80, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !257
  %87 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %87, align 2, !alias.scope !260, !noalias !257
  %88 = getelementptr i16, i16* %81, i64 8
  %89 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %86, <8 x i16>* %89, align 2, !alias.scope !260, !noalias !257
  %90 = or i64 %67, 32
  %91 = getelementptr i16, i16* %24, i64 %90
  %92 = getelementptr i16, i16* %42, i64 %90
  %93 = bitcast i16* %91 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !257
  %95 = getelementptr i16, i16* %91, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !alias.scope !257
  %98 = bitcast i16* %92 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %98, align 2, !alias.scope !260, !noalias !257
  %99 = getelementptr i16, i16* %92, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %97, <8 x i16>* %100, align 2, !alias.scope !260, !noalias !257
  %101 = or i64 %67, 48
  %102 = getelementptr i16, i16* %24, i64 %101
  %103 = getelementptr i16, i16* %42, i64 %101
  %104 = bitcast i16* %102 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !257
  %106 = getelementptr i16, i16* %102, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !257
  %109 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %109, align 2, !alias.scope !260, !noalias !257
  %110 = getelementptr i16, i16* %103, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %108, <8 x i16>* %111, align 2, !alias.scope !260, !noalias !257
  %112 = add i64 %67, 64
  %113 = add i64 %68, -4
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %66, !llvm.loop !262

115:                                              ; preds = %66, %54
  %116 = phi i64 [ 0, %54 ], [ %112, %66 ]
  %117 = icmp eq i64 %62, 0
  br i1 %117, label %134, label %118

118:                                              ; preds = %115, %118
  %119 = phi i64 [ %131, %118 ], [ %116, %115 ]
  %120 = phi i64 [ %132, %118 ], [ %62, %115 ]
  %121 = getelementptr i16, i16* %24, i64 %119
  %122 = getelementptr i16, i16* %42, i64 %119
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !257
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !257
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !260, !noalias !257
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !260, !noalias !257
  %131 = add i64 %119, 16
  %132 = add i64 %120, -1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %118, !llvm.loop !263

134:                                              ; preds = %118, %115
  %135 = icmp eq i64 %55, %4
  br i1 %135, label %189, label %136

136:                                              ; preds = %134, %46, %44
  %137 = phi i64 [ %4, %46 ], [ %4, %44 ], [ %56, %134 ]
  %138 = phi i16* [ %24, %46 ], [ %24, %44 ], [ %57, %134 ]
  %139 = phi i16* [ %42, %46 ], [ %42, %44 ], [ %58, %134 ]
  %140 = add i64 %137, -1
  %141 = and i64 %137, 7
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %154, label %143

143:                                              ; preds = %136, %143
  %144 = phi i64 [ %149, %143 ], [ %137, %136 ]
  %145 = phi i16* [ %151, %143 ], [ %138, %136 ]
  %146 = phi i16* [ %150, %143 ], [ %139, %136 ]
  %147 = phi i64 [ %152, %143 ], [ %141, %136 ]
  %148 = load i16, i16* %145, align 2
  store i16 %148, i16* %146, align 2
  %149 = add i64 %144, -1
  %150 = getelementptr inbounds i16, i16* %146, i64 1
  %151 = getelementptr inbounds i16, i16* %145, i64 1
  %152 = add i64 %147, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %143, !llvm.loop !264

154:                                              ; preds = %143, %136
  %155 = phi i64 [ %137, %136 ], [ %149, %143 ]
  %156 = phi i16* [ %138, %136 ], [ %151, %143 ]
  %157 = phi i16* [ %139, %136 ], [ %150, %143 ]
  %158 = icmp ult i64 %140, 7
  br i1 %158, label %189, label %159

159:                                              ; preds = %154, %159
  %160 = phi i64 [ %185, %159 ], [ %155, %154 ]
  %161 = phi i16* [ %187, %159 ], [ %156, %154 ]
  %162 = phi i16* [ %186, %159 ], [ %157, %154 ]
  %163 = load i16, i16* %161, align 2
  store i16 %163, i16* %162, align 2
  %164 = getelementptr inbounds i16, i16* %162, i64 1
  %165 = getelementptr inbounds i16, i16* %161, i64 1
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %162, i64 2
  %168 = getelementptr inbounds i16, i16* %161, i64 2
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %162, i64 3
  %171 = getelementptr inbounds i16, i16* %161, i64 3
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = getelementptr inbounds i16, i16* %162, i64 4
  %174 = getelementptr inbounds i16, i16* %161, i64 4
  %175 = load i16, i16* %174, align 2
  store i16 %175, i16* %173, align 2
  %176 = getelementptr inbounds i16, i16* %162, i64 5
  %177 = getelementptr inbounds i16, i16* %161, i64 5
  %178 = load i16, i16* %177, align 2
  store i16 %178, i16* %176, align 2
  %179 = getelementptr inbounds i16, i16* %162, i64 6
  %180 = getelementptr inbounds i16, i16* %161, i64 6
  %181 = load i16, i16* %180, align 2
  store i16 %181, i16* %179, align 2
  %182 = getelementptr inbounds i16, i16* %162, i64 7
  %183 = getelementptr inbounds i16, i16* %161, i64 7
  %184 = load i16, i16* %183, align 2
  store i16 %184, i16* %182, align 2
  %185 = add i64 %160, -8
  %186 = getelementptr inbounds i16, i16* %162, i64 8
  %187 = getelementptr inbounds i16, i16* %161, i64 8
  %188 = icmp eq i64 %185, 0
  br i1 %188, label %189, label %159, !llvm.loop !265

189:                                              ; preds = %154, %159, %134, %38
  %190 = icmp eq i64 %6, 0
  br i1 %190, label %289, label %191

191:                                              ; preds = %189
  %192 = getelementptr inbounds i16, i16* %42, i64 %4
  %193 = icmp ult i64 %6, 16
  br i1 %193, label %276, label %194

194:                                              ; preds = %191
  %195 = and i64 %6, -16
  %196 = sub i64 %6, %195
  %197 = getelementptr i16, i16* %7, i64 %195
  %198 = getelementptr i16, i16* %192, i64 %195
  %199 = add i64 %195, -16
  %200 = lshr exact i64 %199, 4
  %201 = add nuw nsw i64 %200, 1
  %202 = and i64 %201, 3
  %203 = icmp ult i64 %199, 48
  br i1 %203, label %255, label %204

204:                                              ; preds = %194
  %205 = sub nsw i64 %201, %202
  br label %206

206:                                              ; preds = %206, %204
  %207 = phi i64 [ 0, %204 ], [ %252, %206 ]
  %208 = phi i64 [ %205, %204 ], [ %253, %206 ]
  %209 = getelementptr i16, i16* %7, i64 %207
  %210 = getelementptr i16, i16* %192, i64 %207
  %211 = bitcast i16* %209 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 2
  %213 = getelementptr i16, i16* %209, i64 8
  %214 = bitcast i16* %213 to <8 x i16>*
  %215 = load <8 x i16>, <8 x i16>* %214, align 2
  %216 = bitcast i16* %210 to <8 x i16>*
  store <8 x i16> %212, <8 x i16>* %216, align 2
  %217 = getelementptr i16, i16* %210, i64 8
  %218 = bitcast i16* %217 to <8 x i16>*
  store <8 x i16> %215, <8 x i16>* %218, align 2
  %219 = or i64 %207, 16
  %220 = getelementptr i16, i16* %7, i64 %219
  %221 = getelementptr i16, i16* %192, i64 %219
  %222 = bitcast i16* %220 to <8 x i16>*
  %223 = load <8 x i16>, <8 x i16>* %222, align 2
  %224 = getelementptr i16, i16* %220, i64 8
  %225 = bitcast i16* %224 to <8 x i16>*
  %226 = load <8 x i16>, <8 x i16>* %225, align 2
  %227 = bitcast i16* %221 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %227, align 2
  %228 = getelementptr i16, i16* %221, i64 8
  %229 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %226, <8 x i16>* %229, align 2
  %230 = or i64 %207, 32
  %231 = getelementptr i16, i16* %7, i64 %230
  %232 = getelementptr i16, i16* %192, i64 %230
  %233 = bitcast i16* %231 to <8 x i16>*
  %234 = load <8 x i16>, <8 x i16>* %233, align 2
  %235 = getelementptr i16, i16* %231, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 2
  %238 = bitcast i16* %232 to <8 x i16>*
  store <8 x i16> %234, <8 x i16>* %238, align 2
  %239 = getelementptr i16, i16* %232, i64 8
  %240 = bitcast i16* %239 to <8 x i16>*
  store <8 x i16> %237, <8 x i16>* %240, align 2
  %241 = or i64 %207, 48
  %242 = getelementptr i16, i16* %7, i64 %241
  %243 = getelementptr i16, i16* %192, i64 %241
  %244 = bitcast i16* %242 to <8 x i16>*
  %245 = load <8 x i16>, <8 x i16>* %244, align 2
  %246 = getelementptr i16, i16* %242, i64 8
  %247 = bitcast i16* %246 to <8 x i16>*
  %248 = load <8 x i16>, <8 x i16>* %247, align 2
  %249 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %245, <8 x i16>* %249, align 2
  %250 = getelementptr i16, i16* %243, i64 8
  %251 = bitcast i16* %250 to <8 x i16>*
  store <8 x i16> %248, <8 x i16>* %251, align 2
  %252 = add i64 %207, 64
  %253 = add i64 %208, -4
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %255, label %206, !llvm.loop !266

255:                                              ; preds = %206, %194
  %256 = phi i64 [ 0, %194 ], [ %252, %206 ]
  %257 = icmp eq i64 %202, 0
  br i1 %257, label %274, label %258

258:                                              ; preds = %255, %258
  %259 = phi i64 [ %271, %258 ], [ %256, %255 ]
  %260 = phi i64 [ %272, %258 ], [ %202, %255 ]
  %261 = getelementptr i16, i16* %7, i64 %259
  %262 = getelementptr i16, i16* %192, i64 %259
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2
  %271 = add i64 %259, 16
  %272 = add i64 %260, -1
  %273 = icmp eq i64 %272, 0
  br i1 %273, label %274, label %258, !llvm.loop !267

274:                                              ; preds = %258, %255
  %275 = icmp eq i64 %195, %6
  br i1 %275, label %289, label %276

276:                                              ; preds = %274, %191
  %277 = phi i64 [ %6, %191 ], [ %196, %274 ]
  %278 = phi i16* [ %7, %191 ], [ %197, %274 ]
  %279 = phi i16* [ %192, %191 ], [ %198, %274 ]
  br label %280

280:                                              ; preds = %276, %280
  %281 = phi i64 [ %285, %280 ], [ %277, %276 ]
  %282 = phi i16* [ %287, %280 ], [ %278, %276 ]
  %283 = phi i16* [ %286, %280 ], [ %279, %276 ]
  %284 = load i16, i16* %282, align 2
  store i16 %284, i16* %283, align 2
  %285 = add i64 %281, -1
  %286 = getelementptr inbounds i16, i16* %283, i64 1
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  %288 = icmp eq i64 %285, 0
  br i1 %288, label %289, label %280, !llvm.loop !268

289:                                              ; preds = %280, %274, %189
  %290 = sub i64 %3, %5
  %291 = sub i64 %290, %4
  %292 = icmp eq i64 %291, 0
  br i1 %292, label %448, label %293

293:                                              ; preds = %289
  %294 = getelementptr inbounds i16, i16* %42, i64 %4
  %295 = getelementptr inbounds i16, i16* %294, i64 %6
  %296 = getelementptr inbounds i16, i16* %24, i64 %4
  %297 = getelementptr inbounds i16, i16* %296, i64 %5
  %298 = icmp ult i64 %291, 16
  br i1 %298, label %395, label %299

299:                                              ; preds = %293
  %300 = bitcast i16* %297 to i8*
  %301 = add i64 %6, %4
  %302 = shl i64 %301, 1
  %303 = getelementptr i8, i8* %41, i64 %302
  %304 = add i64 %6, %3
  %305 = sub i64 %304, %5
  %306 = shl i64 %305, 1
  %307 = getelementptr i8, i8* %41, i64 %306
  %308 = getelementptr i16, i16* %24, i64 %3
  %309 = bitcast i16* %308 to i8*
  %310 = icmp ult i8* %303, %309
  %311 = icmp ugt i8* %307, %300
  %312 = and i1 %310, %311
  br i1 %312, label %395, label %313

313:                                              ; preds = %299
  %314 = and i64 %291, -16
  %315 = sub i64 %291, %314
  %316 = getelementptr i16, i16* %297, i64 %314
  %317 = getelementptr i16, i16* %295, i64 %314
  %318 = add i64 %314, -16
  %319 = lshr exact i64 %318, 4
  %320 = add nuw nsw i64 %319, 1
  %321 = and i64 %320, 3
  %322 = icmp ult i64 %318, 48
  br i1 %322, label %374, label %323

323:                                              ; preds = %313
  %324 = sub nsw i64 %320, %321
  br label %325

325:                                              ; preds = %325, %323
  %326 = phi i64 [ 0, %323 ], [ %371, %325 ]
  %327 = phi i64 [ %324, %323 ], [ %372, %325 ]
  %328 = getelementptr i16, i16* %297, i64 %326
  %329 = getelementptr i16, i16* %295, i64 %326
  %330 = bitcast i16* %328 to <8 x i16>*
  %331 = load <8 x i16>, <8 x i16>* %330, align 2, !alias.scope !270
  %332 = getelementptr i16, i16* %328, i64 8
  %333 = bitcast i16* %332 to <8 x i16>*
  %334 = load <8 x i16>, <8 x i16>* %333, align 2, !alias.scope !270
  %335 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %331, <8 x i16>* %335, align 2, !alias.scope !273, !noalias !270
  %336 = getelementptr i16, i16* %329, i64 8
  %337 = bitcast i16* %336 to <8 x i16>*
  store <8 x i16> %334, <8 x i16>* %337, align 2, !alias.scope !273, !noalias !270
  %338 = or i64 %326, 16
  %339 = getelementptr i16, i16* %297, i64 %338
  %340 = getelementptr i16, i16* %295, i64 %338
  %341 = bitcast i16* %339 to <8 x i16>*
  %342 = load <8 x i16>, <8 x i16>* %341, align 2, !alias.scope !270
  %343 = getelementptr i16, i16* %339, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  %345 = load <8 x i16>, <8 x i16>* %344, align 2, !alias.scope !270
  %346 = bitcast i16* %340 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !273, !noalias !270
  %347 = getelementptr i16, i16* %340, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %348, align 2, !alias.scope !273, !noalias !270
  %349 = or i64 %326, 32
  %350 = getelementptr i16, i16* %297, i64 %349
  %351 = getelementptr i16, i16* %295, i64 %349
  %352 = bitcast i16* %350 to <8 x i16>*
  %353 = load <8 x i16>, <8 x i16>* %352, align 2, !alias.scope !270
  %354 = getelementptr i16, i16* %350, i64 8
  %355 = bitcast i16* %354 to <8 x i16>*
  %356 = load <8 x i16>, <8 x i16>* %355, align 2, !alias.scope !270
  %357 = bitcast i16* %351 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %357, align 2, !alias.scope !273, !noalias !270
  %358 = getelementptr i16, i16* %351, i64 8
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !273, !noalias !270
  %360 = or i64 %326, 48
  %361 = getelementptr i16, i16* %297, i64 %360
  %362 = getelementptr i16, i16* %295, i64 %360
  %363 = bitcast i16* %361 to <8 x i16>*
  %364 = load <8 x i16>, <8 x i16>* %363, align 2, !alias.scope !270
  %365 = getelementptr i16, i16* %361, i64 8
  %366 = bitcast i16* %365 to <8 x i16>*
  %367 = load <8 x i16>, <8 x i16>* %366, align 2, !alias.scope !270
  %368 = bitcast i16* %362 to <8 x i16>*
  store <8 x i16> %364, <8 x i16>* %368, align 2, !alias.scope !273, !noalias !270
  %369 = getelementptr i16, i16* %362, i64 8
  %370 = bitcast i16* %369 to <8 x i16>*
  store <8 x i16> %367, <8 x i16>* %370, align 2, !alias.scope !273, !noalias !270
  %371 = add i64 %326, 64
  %372 = add i64 %327, -4
  %373 = icmp eq i64 %372, 0
  br i1 %373, label %374, label %325, !llvm.loop !275

374:                                              ; preds = %325, %313
  %375 = phi i64 [ 0, %313 ], [ %371, %325 ]
  %376 = icmp eq i64 %321, 0
  br i1 %376, label %393, label %377

377:                                              ; preds = %374, %377
  %378 = phi i64 [ %390, %377 ], [ %375, %374 ]
  %379 = phi i64 [ %391, %377 ], [ %321, %374 ]
  %380 = getelementptr i16, i16* %297, i64 %378
  %381 = getelementptr i16, i16* %295, i64 %378
  %382 = bitcast i16* %380 to <8 x i16>*
  %383 = load <8 x i16>, <8 x i16>* %382, align 2, !alias.scope !270
  %384 = getelementptr i16, i16* %380, i64 8
  %385 = bitcast i16* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 2, !alias.scope !270
  %387 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %383, <8 x i16>* %387, align 2, !alias.scope !273, !noalias !270
  %388 = getelementptr i16, i16* %381, i64 8
  %389 = bitcast i16* %388 to <8 x i16>*
  store <8 x i16> %386, <8 x i16>* %389, align 2, !alias.scope !273, !noalias !270
  %390 = add i64 %378, 16
  %391 = add i64 %379, -1
  %392 = icmp eq i64 %391, 0
  br i1 %392, label %393, label %377, !llvm.loop !276

393:                                              ; preds = %377, %374
  %394 = icmp eq i64 %291, %314
  br i1 %394, label %448, label %395

395:                                              ; preds = %393, %299, %293
  %396 = phi i64 [ %291, %299 ], [ %291, %293 ], [ %315, %393 ]
  %397 = phi i16* [ %297, %299 ], [ %297, %293 ], [ %316, %393 ]
  %398 = phi i16* [ %295, %299 ], [ %295, %293 ], [ %317, %393 ]
  %399 = add i64 %396, -1
  %400 = and i64 %396, 7
  %401 = icmp eq i64 %400, 0
  br i1 %401, label %413, label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ %408, %402 ], [ %396, %395 ]
  %404 = phi i16* [ %410, %402 ], [ %397, %395 ]
  %405 = phi i16* [ %409, %402 ], [ %398, %395 ]
  %406 = phi i64 [ %411, %402 ], [ %400, %395 ]
  %407 = load i16, i16* %404, align 2
  store i16 %407, i16* %405, align 2
  %408 = add i64 %403, -1
  %409 = getelementptr inbounds i16, i16* %405, i64 1
  %410 = getelementptr inbounds i16, i16* %404, i64 1
  %411 = add i64 %406, -1
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %402, !llvm.loop !277

413:                                              ; preds = %402, %395
  %414 = phi i64 [ %396, %395 ], [ %408, %402 ]
  %415 = phi i16* [ %397, %395 ], [ %410, %402 ]
  %416 = phi i16* [ %398, %395 ], [ %409, %402 ]
  %417 = icmp ult i64 %399, 7
  br i1 %417, label %448, label %418

418:                                              ; preds = %413, %418
  %419 = phi i64 [ %444, %418 ], [ %414, %413 ]
  %420 = phi i16* [ %446, %418 ], [ %415, %413 ]
  %421 = phi i16* [ %445, %418 ], [ %416, %413 ]
  %422 = load i16, i16* %420, align 2
  store i16 %422, i16* %421, align 2
  %423 = getelementptr inbounds i16, i16* %421, i64 1
  %424 = getelementptr inbounds i16, i16* %420, i64 1
  %425 = load i16, i16* %424, align 2
  store i16 %425, i16* %423, align 2
  %426 = getelementptr inbounds i16, i16* %421, i64 2
  %427 = getelementptr inbounds i16, i16* %420, i64 2
  %428 = load i16, i16* %427, align 2
  store i16 %428, i16* %426, align 2
  %429 = getelementptr inbounds i16, i16* %421, i64 3
  %430 = getelementptr inbounds i16, i16* %420, i64 3
  %431 = load i16, i16* %430, align 2
  store i16 %431, i16* %429, align 2
  %432 = getelementptr inbounds i16, i16* %421, i64 4
  %433 = getelementptr inbounds i16, i16* %420, i64 4
  %434 = load i16, i16* %433, align 2
  store i16 %434, i16* %432, align 2
  %435 = getelementptr inbounds i16, i16* %421, i64 5
  %436 = getelementptr inbounds i16, i16* %420, i64 5
  %437 = load i16, i16* %436, align 2
  store i16 %437, i16* %435, align 2
  %438 = getelementptr inbounds i16, i16* %421, i64 6
  %439 = getelementptr inbounds i16, i16* %420, i64 6
  %440 = load i16, i16* %439, align 2
  store i16 %440, i16* %438, align 2
  %441 = getelementptr inbounds i16, i16* %421, i64 7
  %442 = getelementptr inbounds i16, i16* %420, i64 7
  %443 = load i16, i16* %442, align 2
  store i16 %443, i16* %441, align 2
  %444 = add i64 %419, -8
  %445 = getelementptr inbounds i16, i16* %421, i64 8
  %446 = getelementptr inbounds i16, i16* %420, i64 8
  %447 = icmp eq i64 %444, 0
  br i1 %447, label %448, label %418, !llvm.loop !278

448:                                              ; preds = %413, %418, %393, %289
  %449 = icmp eq i64 %1, 10
  br i1 %449, label %451, label %450

450:                                              ; preds = %448
  tail call void @_ZdlPv(i8* %25) #15
  br label %451

451:                                              ; preds = %448, %450
  %452 = bitcast %"class.std::__1::basic_string"* %0 to i8**
  store i8* %41, i8** %452, align 8
  %453 = or i64 %39, -9223372036854775808
  %454 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %453, i64* %454, align 8
  %455 = add i64 %290, %6
  %456 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %455, i64* %456, align 8
  %457 = getelementptr inbounds i16, i16* %42, i64 %455
  store i16 0, i16* %457, align 2
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN8autofill18structured_address12AddressTokenENS_9allocatorIS3_EEE6assignIPS3_EENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS3_NS_15iterator_traitsISA_E9referenceEEE5valueEvE4typeESA_SA_(%"class.std::__1::vector.12"*, %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"*) local_unnamed_addr #1 comdat align 2 {
  %4 = ptrtoint %"struct.autofill::structured_address::AddressToken"* %2 to i64
  %5 = ptrtoint %"struct.autofill::structured_address::AddressToken"* %1 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 56
  %8 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast %"struct.autofill::structured_address::AddressToken"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.12"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 56
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to %"struct.autofill::structured_address::AddressToken"*
  br i1 %15, label %84, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %19 = bitcast %"struct.autofill::structured_address::AddressToken"** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = sdiv exact i64 %21, 56
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %1, i64 %22
  %25 = select i1 %23, %"struct.autofill::structured_address::AddressToken"* %24, %"struct.autofill::structured_address::AddressToken"* %2
  %26 = icmp eq %"struct.autofill::structured_address::AddressToken"* %25, %1
  br i1 %26, label %42, label %27

27:                                               ; preds = %17, %27
  %28 = phi %"struct.autofill::structured_address::AddressToken"* [ %40, %27 ], [ %16, %17 ]
  %29 = phi %"struct.autofill::structured_address::AddressToken"* [ %39, %27 ], [ %1, %17 ]
  %30 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %28, i64 0, i32 0
  %31 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %29, i64 0, i32 0
  %32 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %30, %"class.std::__1::basic_string"* dereferenceable(24) %31) #13
  %33 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %28, i64 0, i32 1
  %34 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %29, i64 0, i32 1
  %35 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEaSERKS5_(%"class.std::__1::basic_string"* %33, %"class.std::__1::basic_string"* dereferenceable(24) %34) #13
  %36 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %29, i64 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %28, i64 0, i32 2
  store i32 %37, i32* %38, align 8
  %39 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %29, i64 1
  %40 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %28, i64 1
  %41 = icmp eq %"struct.autofill::structured_address::AddressToken"* %39, %25
  br i1 %41, label %42, label %27

42:                                               ; preds = %27, %17
  %43 = phi %"struct.autofill::structured_address::AddressToken"* [ %16, %17 ], [ %40, %27 ]
  br i1 %23, label %44, label %59

44:                                               ; preds = %42
  %45 = load i64, i64* %19, align 8
  %46 = icmp eq %"struct.autofill::structured_address::AddressToken"* %25, %2
  br i1 %46, label %57, label %47

47:                                               ; preds = %44
  %48 = inttoptr i64 %45 to %"struct.autofill::structured_address::AddressToken"*
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi %"struct.autofill::structured_address::AddressToken"* [ %53, %49 ], [ %48, %47 ]
  %51 = phi %"struct.autofill::structured_address::AddressToken"* [ %52, %49 ], [ %24, %47 ]
  tail call void @_ZN8autofill18structured_address12AddressTokenC2ERKS1_(%"struct.autofill::structured_address::AddressToken"* %50, %"struct.autofill::structured_address::AddressToken"* dereferenceable(56) %51) #13
  %52 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %51, i64 1
  %53 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %50, i64 1
  %54 = icmp eq %"struct.autofill::structured_address::AddressToken"* %52, %2
  br i1 %54, label %55, label %49

55:                                               ; preds = %49
  %56 = ptrtoint %"struct.autofill::structured_address::AddressToken"* %53 to i64
  br label %57

57:                                               ; preds = %44, %55
  %58 = phi i64 [ %45, %44 ], [ %56, %55 ]
  store i64 %58, i64* %19, align 8
  br label %152

59:                                               ; preds = %42
  %60 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %18, align 8
  %61 = icmp eq %"struct.autofill::structured_address::AddressToken"* %60, %43
  br i1 %61, label %83, label %62

62:                                               ; preds = %59, %81
  %63 = phi %"struct.autofill::structured_address::AddressToken"* [ %64, %81 ], [ %60, %59 ]
  %64 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %63, i64 -1
  %65 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %63, i64 -1, i32 1
  %66 = bitcast %"class.std::__1::basic_string"* %65 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %67 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %66, i64 0, i32 1, i32 1
  %68 = load i8, i8* %67, align 1
  %69 = icmp slt i8 %68, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %62
  %71 = bitcast %"class.std::__1::basic_string"* %65 to i8**
  %72 = load i8*, i8** %71, align 8
  tail call void @_ZdlPv(i8* %72) #15
  br label %73

73:                                               ; preds = %70, %62
  %74 = bitcast %"struct.autofill::structured_address::AddressToken"* %64 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %74, i64 0, i32 1, i32 1
  %76 = load i8, i8* %75, align 1
  %77 = icmp slt i8 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = bitcast %"struct.autofill::structured_address::AddressToken"* %64 to i8**
  %80 = load i8*, i8** %79, align 8
  tail call void @_ZdlPv(i8* %80) #15
  br label %81

81:                                               ; preds = %78, %73
  %82 = icmp eq %"struct.autofill::structured_address::AddressToken"* %64, %43
  br i1 %82, label %83, label %62

83:                                               ; preds = %81, %59
  store %"struct.autofill::structured_address::AddressToken"* %43, %"struct.autofill::structured_address::AddressToken"** %18, align 8
  br label %152

84:                                               ; preds = %3
  %85 = icmp eq i64 %12, 0
  br i1 %85, label %118, label %86

86:                                               ; preds = %84
  %87 = inttoptr i64 %12 to i8*
  %88 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %89 = load %"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"** %88, align 8
  %90 = icmp eq %"struct.autofill::structured_address::AddressToken"* %89, %16
  br i1 %90, label %115, label %91

91:                                               ; preds = %86, %110
  %92 = phi %"struct.autofill::structured_address::AddressToken"* [ %93, %110 ], [ %89, %86 ]
  %93 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %92, i64 -1
  %94 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %92, i64 -1, i32 1
  %95 = bitcast %"class.std::__1::basic_string"* %94 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %96 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %95, i64 0, i32 1, i32 1
  %97 = load i8, i8* %96, align 1
  %98 = icmp slt i8 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %91
  %100 = bitcast %"class.std::__1::basic_string"* %94 to i8**
  %101 = load i8*, i8** %100, align 8
  tail call void @_ZdlPv(i8* %101) #15
  br label %102

102:                                              ; preds = %99, %91
  %103 = bitcast %"struct.autofill::structured_address::AddressToken"* %93 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %104 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %103, i64 0, i32 1, i32 1
  %105 = load i8, i8* %104, align 1
  %106 = icmp slt i8 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %102
  %108 = bitcast %"struct.autofill::structured_address::AddressToken"* %93 to i8**
  %109 = load i8*, i8** %108, align 8
  tail call void @_ZdlPv(i8* %109) #15
  br label %110

110:                                              ; preds = %107, %102
  %111 = icmp eq %"struct.autofill::structured_address::AddressToken"* %93, %16
  br i1 %111, label %112, label %91

112:                                              ; preds = %110
  %113 = bitcast %"class.std::__1::vector.12"* %0 to i8**
  %114 = load i8*, i8** %113, align 8
  br label %115

115:                                              ; preds = %112, %86
  %116 = phi i8* [ %114, %112 ], [ %87, %86 ]
  store %"struct.autofill::structured_address::AddressToken"* %16, %"struct.autofill::structured_address::AddressToken"** %88, align 8
  tail call void @_ZdlPv(i8* %116) #15
  %117 = bitcast %"class.std::__1::vector.12"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %117, i8 0, i64 24, i1 false) #13
  br label %118

118:                                              ; preds = %84, %115
  %119 = phi i64 [ %10, %84 ], [ 0, %115 ]
  %120 = icmp ugt i64 %7, 329406144173384850
  br i1 %120, label %121, label %123

121:                                              ; preds = %118
  %122 = bitcast %"class.std::__1::vector.12"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %122) #14
  unreachable

123:                                              ; preds = %118
  %124 = sdiv exact i64 %119, 56
  %125 = icmp ult i64 %124, 164703072086692425
  br i1 %125, label %126, label %130

126:                                              ; preds = %123
  %127 = shl nsw i64 %124, 1
  %128 = icmp ult i64 %127, %7
  %129 = select i1 %128, i64 %7, i64 %127
  br label %130

130:                                              ; preds = %126, %123
  %131 = phi i64 [ %129, %126 ], [ 329406144173384850, %123 ]
  %132 = mul i64 %131, 56
  %133 = tail call i8* @_Znwm(i64 %132) #15
  %134 = bitcast i8* %133 to %"struct.autofill::structured_address::AddressToken"*
  %135 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %136 = bitcast %"struct.autofill::structured_address::AddressToken"** %135 to i8**
  store i8* %133, i8** %136, align 8
  %137 = bitcast %"class.std::__1::vector.12"* %0 to i8**
  store i8* %133, i8** %137, align 8
  %138 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %134, i64 %131
  store %"struct.autofill::structured_address::AddressToken"* %138, %"struct.autofill::structured_address::AddressToken"** %8, align 8
  %139 = bitcast %"struct.autofill::structured_address::AddressToken"** %135 to i64*
  %140 = ptrtoint i8* %133 to i64
  %141 = icmp eq %"struct.autofill::structured_address::AddressToken"* %1, %2
  br i1 %141, label %150, label %142

142:                                              ; preds = %130, %142
  %143 = phi %"struct.autofill::structured_address::AddressToken"* [ %146, %142 ], [ %134, %130 ]
  %144 = phi %"struct.autofill::structured_address::AddressToken"* [ %145, %142 ], [ %1, %130 ]
  tail call void @_ZN8autofill18structured_address12AddressTokenC2ERKS1_(%"struct.autofill::structured_address::AddressToken"* %143, %"struct.autofill::structured_address::AddressToken"* dereferenceable(56) %144) #13
  %145 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %144, i64 1
  %146 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %143, i64 1
  %147 = icmp eq %"struct.autofill::structured_address::AddressToken"* %145, %2
  br i1 %147, label %148, label %142

148:                                              ; preds = %142
  %149 = ptrtoint %"struct.autofill::structured_address::AddressToken"* %146 to i64
  br label %150

150:                                              ; preds = %130, %148
  %151 = phi i64 [ %140, %130 ], [ %149, %148 ]
  store i64 %151, i64* %139, align 8
  br label %152

152:                                              ; preds = %57, %83, %150
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8autofill18structured_address12AddressTokenC2ERKS1_(%"struct.autofill::structured_address::AddressToken"*, %"struct.autofill::structured_address::AddressToken"* dereferenceable(56)) unnamed_addr #11 comdat align 2 {
  %3 = bitcast %"struct.autofill::structured_address::AddressToken"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %3, i64 0, i32 1, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %2
  %8 = bitcast %"struct.autofill::structured_address::AddressToken"* %0 to i8*
  %9 = bitcast %"struct.autofill::structured_address::AddressToken"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false) #13
  br label %185

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %14, 11
  br i1 %15, label %16, label %21

16:                                               ; preds = %10
  %17 = bitcast %"struct.autofill::structured_address::AddressToken"* %0 to i16*
  %18 = trunc i64 %14 to i8
  %19 = bitcast %"struct.autofill::structured_address::AddressToken"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %19, i64 0, i32 1, i32 1
  store i8 %18, i8* %20, align 1
  br label %38

21:                                               ; preds = %10
  %22 = icmp ugt i64 %14, 9223372036854775791
  br i1 %22, label %23, label %25

23:                                               ; preds = %21
  %24 = bitcast %"struct.autofill::structured_address::AddressToken"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %24) #14
  unreachable

25:                                               ; preds = %21
  %26 = add nuw nsw i64 %14, 8
  %27 = and i64 %26, -8
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %25
  tail call void @abort() #14
  unreachable

30:                                               ; preds = %25
  %31 = shl i64 %27, 1
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to i16*
  %34 = bitcast %"struct.autofill::structured_address::AddressToken"* %0 to i8**
  store i8* %32, i8** %34, align 8
  %35 = or i64 %27, -9223372036854775808
  %36 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %14, i64* %37, align 8
  br label %38

38:                                               ; preds = %30, %16
  %39 = phi i16* [ %17, %16 ], [ %33, %30 ]
  %40 = add nuw nsw i64 %14, 1
  %41 = add i64 %14, 1
  %42 = icmp ult i64 %41, 16
  br i1 %42, label %132, label %43

43:                                               ; preds = %38
  %44 = add i64 %14, 1
  %45 = getelementptr i16, i16* %39, i64 %44
  %46 = getelementptr i16, i16* %12, i64 %44
  %47 = icmp ult i16* %39, %46
  %48 = icmp ult i16* %12, %45
  %49 = and i1 %47, %48
  br i1 %49, label %132, label %50

50:                                               ; preds = %43
  %51 = and i64 %41, -16
  %52 = sub i64 %40, %51
  %53 = getelementptr i16, i16* %12, i64 %51
  %54 = getelementptr i16, i16* %39, i64 %51
  %55 = add i64 %51, -16
  %56 = lshr exact i64 %55, 4
  %57 = add nuw nsw i64 %56, 1
  %58 = and i64 %57, 3
  %59 = icmp ult i64 %55, 48
  br i1 %59, label %111, label %60

60:                                               ; preds = %50
  %61 = sub nsw i64 %57, %58
  br label %62

62:                                               ; preds = %62, %60
  %63 = phi i64 [ 0, %60 ], [ %108, %62 ]
  %64 = phi i64 [ %61, %60 ], [ %109, %62 ]
  %65 = getelementptr i16, i16* %12, i64 %63
  %66 = getelementptr i16, i16* %39, i64 %63
  %67 = bitcast i16* %65 to <8 x i16>*
  %68 = load <8 x i16>, <8 x i16>* %67, align 2, !alias.scope !279
  %69 = getelementptr i16, i16* %65, i64 8
  %70 = bitcast i16* %69 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !279
  %72 = bitcast i16* %66 to <8 x i16>*
  store <8 x i16> %68, <8 x i16>* %72, align 2, !alias.scope !282, !noalias !279
  %73 = getelementptr i16, i16* %66, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %74, align 2, !alias.scope !282, !noalias !279
  %75 = or i64 %63, 16
  %76 = getelementptr i16, i16* %12, i64 %75
  %77 = getelementptr i16, i16* %39, i64 %75
  %78 = bitcast i16* %76 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2, !alias.scope !279
  %80 = getelementptr i16, i16* %76, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !279
  %83 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %79, <8 x i16>* %83, align 2, !alias.scope !282, !noalias !279
  %84 = getelementptr i16, i16* %77, i64 8
  %85 = bitcast i16* %84 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %85, align 2, !alias.scope !282, !noalias !279
  %86 = or i64 %63, 32
  %87 = getelementptr i16, i16* %12, i64 %86
  %88 = getelementptr i16, i16* %39, i64 %86
  %89 = bitcast i16* %87 to <8 x i16>*
  %90 = load <8 x i16>, <8 x i16>* %89, align 2, !alias.scope !279
  %91 = getelementptr i16, i16* %87, i64 8
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !279
  %94 = bitcast i16* %88 to <8 x i16>*
  store <8 x i16> %90, <8 x i16>* %94, align 2, !alias.scope !282, !noalias !279
  %95 = getelementptr i16, i16* %88, i64 8
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %96, align 2, !alias.scope !282, !noalias !279
  %97 = or i64 %63, 48
  %98 = getelementptr i16, i16* %12, i64 %97
  %99 = getelementptr i16, i16* %39, i64 %97
  %100 = bitcast i16* %98 to <8 x i16>*
  %101 = load <8 x i16>, <8 x i16>* %100, align 2, !alias.scope !279
  %102 = getelementptr i16, i16* %98, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2, !alias.scope !279
  %105 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %105, align 2, !alias.scope !282, !noalias !279
  %106 = getelementptr i16, i16* %99, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  store <8 x i16> %104, <8 x i16>* %107, align 2, !alias.scope !282, !noalias !279
  %108 = add i64 %63, 64
  %109 = add i64 %64, -4
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %62, !llvm.loop !284

111:                                              ; preds = %62, %50
  %112 = phi i64 [ 0, %50 ], [ %108, %62 ]
  %113 = icmp eq i64 %58, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %127, %114 ], [ %112, %111 ]
  %116 = phi i64 [ %128, %114 ], [ %58, %111 ]
  %117 = getelementptr i16, i16* %12, i64 %115
  %118 = getelementptr i16, i16* %39, i64 %115
  %119 = bitcast i16* %117 to <8 x i16>*
  %120 = load <8 x i16>, <8 x i16>* %119, align 2, !alias.scope !279
  %121 = getelementptr i16, i16* %117, i64 8
  %122 = bitcast i16* %121 to <8 x i16>*
  %123 = load <8 x i16>, <8 x i16>* %122, align 2, !alias.scope !279
  %124 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !282, !noalias !279
  %125 = getelementptr i16, i16* %118, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  store <8 x i16> %123, <8 x i16>* %126, align 2, !alias.scope !282, !noalias !279
  %127 = add i64 %115, 16
  %128 = add i64 %116, -1
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %130, label %114, !llvm.loop !285

130:                                              ; preds = %114, %111
  %131 = icmp eq i64 %41, %51
  br i1 %131, label %185, label %132

132:                                              ; preds = %130, %43, %38
  %133 = phi i64 [ %40, %43 ], [ %40, %38 ], [ %52, %130 ]
  %134 = phi i16* [ %12, %43 ], [ %12, %38 ], [ %53, %130 ]
  %135 = phi i16* [ %39, %43 ], [ %39, %38 ], [ %54, %130 ]
  %136 = add i64 %133, -1
  %137 = and i64 %133, 7
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %150, label %139

139:                                              ; preds = %132, %139
  %140 = phi i64 [ %145, %139 ], [ %133, %132 ]
  %141 = phi i16* [ %147, %139 ], [ %134, %132 ]
  %142 = phi i16* [ %146, %139 ], [ %135, %132 ]
  %143 = phi i64 [ %148, %139 ], [ %137, %132 ]
  %144 = load i16, i16* %141, align 2
  store i16 %144, i16* %142, align 2
  %145 = add i64 %140, -1
  %146 = getelementptr inbounds i16, i16* %142, i64 1
  %147 = getelementptr inbounds i16, i16* %141, i64 1
  %148 = add i64 %143, -1
  %149 = icmp eq i64 %148, 0
  br i1 %149, label %150, label %139, !llvm.loop !286

150:                                              ; preds = %139, %132
  %151 = phi i64 [ %133, %132 ], [ %145, %139 ]
  %152 = phi i16* [ %134, %132 ], [ %147, %139 ]
  %153 = phi i16* [ %135, %132 ], [ %146, %139 ]
  %154 = icmp ult i64 %136, 7
  br i1 %154, label %185, label %155

155:                                              ; preds = %150, %155
  %156 = phi i64 [ %181, %155 ], [ %151, %150 ]
  %157 = phi i16* [ %183, %155 ], [ %152, %150 ]
  %158 = phi i16* [ %182, %155 ], [ %153, %150 ]
  %159 = load i16, i16* %157, align 2
  store i16 %159, i16* %158, align 2
  %160 = getelementptr inbounds i16, i16* %158, i64 1
  %161 = getelementptr inbounds i16, i16* %157, i64 1
  %162 = load i16, i16* %161, align 2
  store i16 %162, i16* %160, align 2
  %163 = getelementptr inbounds i16, i16* %158, i64 2
  %164 = getelementptr inbounds i16, i16* %157, i64 2
  %165 = load i16, i16* %164, align 2
  store i16 %165, i16* %163, align 2
  %166 = getelementptr inbounds i16, i16* %158, i64 3
  %167 = getelementptr inbounds i16, i16* %157, i64 3
  %168 = load i16, i16* %167, align 2
  store i16 %168, i16* %166, align 2
  %169 = getelementptr inbounds i16, i16* %158, i64 4
  %170 = getelementptr inbounds i16, i16* %157, i64 4
  %171 = load i16, i16* %170, align 2
  store i16 %171, i16* %169, align 2
  %172 = getelementptr inbounds i16, i16* %158, i64 5
  %173 = getelementptr inbounds i16, i16* %157, i64 5
  %174 = load i16, i16* %173, align 2
  store i16 %174, i16* %172, align 2
  %175 = getelementptr inbounds i16, i16* %158, i64 6
  %176 = getelementptr inbounds i16, i16* %157, i64 6
  %177 = load i16, i16* %176, align 2
  store i16 %177, i16* %175, align 2
  %178 = getelementptr inbounds i16, i16* %158, i64 7
  %179 = getelementptr inbounds i16, i16* %157, i64 7
  %180 = load i16, i16* %179, align 2
  store i16 %180, i16* %178, align 2
  %181 = add i64 %156, -8
  %182 = getelementptr inbounds i16, i16* %158, i64 8
  %183 = getelementptr inbounds i16, i16* %157, i64 8
  %184 = icmp eq i64 %181, 0
  br i1 %184, label %185, label %155, !llvm.loop !287

185:                                              ; preds = %150, %155, %130, %7
  %186 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %0, i64 0, i32 1
  %187 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %1, i64 0, i32 1
  %188 = bitcast %"class.std::__1::basic_string"* %187 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %189 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %188, i64 0, i32 1, i32 1
  %190 = load i8, i8* %189, align 1
  %191 = icmp slt i8 %190, 0
  br i1 %191, label %195, label %192

192:                                              ; preds = %185
  %193 = bitcast %"class.std::__1::basic_string"* %186 to i8*
  %194 = bitcast %"class.std::__1::basic_string"* %187 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %193, i8* align 8 %194, i64 24, i1 false) #13
  br label %370

195:                                              ; preds = %185
  %196 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %187, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %197 = load i16*, i16** %196, align 8
  %198 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = icmp ult i64 %199, 11
  br i1 %200, label %201, label %206

201:                                              ; preds = %195
  %202 = bitcast %"class.std::__1::basic_string"* %186 to i16*
  %203 = trunc i64 %199 to i8
  %204 = bitcast %"class.std::__1::basic_string"* %186 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %205 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %204, i64 0, i32 1, i32 1
  store i8 %203, i8* %205, align 1
  br label %223

206:                                              ; preds = %195
  %207 = icmp ugt i64 %199, 9223372036854775791
  br i1 %207, label %208, label %210

208:                                              ; preds = %206
  %209 = bitcast %"class.std::__1::basic_string"* %186 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %209) #14
  unreachable

210:                                              ; preds = %206
  %211 = add nuw nsw i64 %199, 8
  %212 = and i64 %211, -8
  %213 = icmp slt i64 %212, 0
  br i1 %213, label %214, label %215

214:                                              ; preds = %210
  tail call void @abort() #14
  unreachable

215:                                              ; preds = %210
  %216 = shl i64 %212, 1
  %217 = tail call i8* @_Znwm(i64 %216) #15
  %218 = bitcast i8* %217 to i16*
  %219 = bitcast %"class.std::__1::basic_string"* %186 to i8**
  store i8* %217, i8** %219, align 8
  %220 = or i64 %212, -9223372036854775808
  %221 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %220, i64* %221, align 8
  %222 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %199, i64* %222, align 8
  br label %223

223:                                              ; preds = %215, %201
  %224 = phi i16* [ %202, %201 ], [ %218, %215 ]
  %225 = add nuw nsw i64 %199, 1
  %226 = add i64 %199, 1
  %227 = icmp ult i64 %226, 16
  br i1 %227, label %317, label %228

228:                                              ; preds = %223
  %229 = add i64 %199, 1
  %230 = getelementptr i16, i16* %224, i64 %229
  %231 = getelementptr i16, i16* %197, i64 %229
  %232 = icmp ult i16* %224, %231
  %233 = icmp ult i16* %197, %230
  %234 = and i1 %232, %233
  br i1 %234, label %317, label %235

235:                                              ; preds = %228
  %236 = and i64 %226, -16
  %237 = sub i64 %225, %236
  %238 = getelementptr i16, i16* %197, i64 %236
  %239 = getelementptr i16, i16* %224, i64 %236
  %240 = add i64 %236, -16
  %241 = lshr exact i64 %240, 4
  %242 = add nuw nsw i64 %241, 1
  %243 = and i64 %242, 3
  %244 = icmp ult i64 %240, 48
  br i1 %244, label %296, label %245

245:                                              ; preds = %235
  %246 = sub nsw i64 %242, %243
  br label %247

247:                                              ; preds = %247, %245
  %248 = phi i64 [ 0, %245 ], [ %293, %247 ]
  %249 = phi i64 [ %246, %245 ], [ %294, %247 ]
  %250 = getelementptr i16, i16* %197, i64 %248
  %251 = getelementptr i16, i16* %224, i64 %248
  %252 = bitcast i16* %250 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 2, !alias.scope !288
  %254 = getelementptr i16, i16* %250, i64 8
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !alias.scope !288
  %257 = bitcast i16* %251 to <8 x i16>*
  store <8 x i16> %253, <8 x i16>* %257, align 2, !alias.scope !291, !noalias !288
  %258 = getelementptr i16, i16* %251, i64 8
  %259 = bitcast i16* %258 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %259, align 2, !alias.scope !291, !noalias !288
  %260 = or i64 %248, 16
  %261 = getelementptr i16, i16* %197, i64 %260
  %262 = getelementptr i16, i16* %224, i64 %260
  %263 = bitcast i16* %261 to <8 x i16>*
  %264 = load <8 x i16>, <8 x i16>* %263, align 2, !alias.scope !288
  %265 = getelementptr i16, i16* %261, i64 8
  %266 = bitcast i16* %265 to <8 x i16>*
  %267 = load <8 x i16>, <8 x i16>* %266, align 2, !alias.scope !288
  %268 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %264, <8 x i16>* %268, align 2, !alias.scope !291, !noalias !288
  %269 = getelementptr i16, i16* %262, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  store <8 x i16> %267, <8 x i16>* %270, align 2, !alias.scope !291, !noalias !288
  %271 = or i64 %248, 32
  %272 = getelementptr i16, i16* %197, i64 %271
  %273 = getelementptr i16, i16* %224, i64 %271
  %274 = bitcast i16* %272 to <8 x i16>*
  %275 = load <8 x i16>, <8 x i16>* %274, align 2, !alias.scope !288
  %276 = getelementptr i16, i16* %272, i64 8
  %277 = bitcast i16* %276 to <8 x i16>*
  %278 = load <8 x i16>, <8 x i16>* %277, align 2, !alias.scope !288
  %279 = bitcast i16* %273 to <8 x i16>*
  store <8 x i16> %275, <8 x i16>* %279, align 2, !alias.scope !291, !noalias !288
  %280 = getelementptr i16, i16* %273, i64 8
  %281 = bitcast i16* %280 to <8 x i16>*
  store <8 x i16> %278, <8 x i16>* %281, align 2, !alias.scope !291, !noalias !288
  %282 = or i64 %248, 48
  %283 = getelementptr i16, i16* %197, i64 %282
  %284 = getelementptr i16, i16* %224, i64 %282
  %285 = bitcast i16* %283 to <8 x i16>*
  %286 = load <8 x i16>, <8 x i16>* %285, align 2, !alias.scope !288
  %287 = getelementptr i16, i16* %283, i64 8
  %288 = bitcast i16* %287 to <8 x i16>*
  %289 = load <8 x i16>, <8 x i16>* %288, align 2, !alias.scope !288
  %290 = bitcast i16* %284 to <8 x i16>*
  store <8 x i16> %286, <8 x i16>* %290, align 2, !alias.scope !291, !noalias !288
  %291 = getelementptr i16, i16* %284, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %289, <8 x i16>* %292, align 2, !alias.scope !291, !noalias !288
  %293 = add i64 %248, 64
  %294 = add i64 %249, -4
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %247, !llvm.loop !293

296:                                              ; preds = %247, %235
  %297 = phi i64 [ 0, %235 ], [ %293, %247 ]
  %298 = icmp eq i64 %243, 0
  br i1 %298, label %315, label %299

299:                                              ; preds = %296, %299
  %300 = phi i64 [ %312, %299 ], [ %297, %296 ]
  %301 = phi i64 [ %313, %299 ], [ %243, %296 ]
  %302 = getelementptr i16, i16* %197, i64 %300
  %303 = getelementptr i16, i16* %224, i64 %300
  %304 = bitcast i16* %302 to <8 x i16>*
  %305 = load <8 x i16>, <8 x i16>* %304, align 2, !alias.scope !288
  %306 = getelementptr i16, i16* %302, i64 8
  %307 = bitcast i16* %306 to <8 x i16>*
  %308 = load <8 x i16>, <8 x i16>* %307, align 2, !alias.scope !288
  %309 = bitcast i16* %303 to <8 x i16>*
  store <8 x i16> %305, <8 x i16>* %309, align 2, !alias.scope !291, !noalias !288
  %310 = getelementptr i16, i16* %303, i64 8
  %311 = bitcast i16* %310 to <8 x i16>*
  store <8 x i16> %308, <8 x i16>* %311, align 2, !alias.scope !291, !noalias !288
  %312 = add i64 %300, 16
  %313 = add i64 %301, -1
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %315, label %299, !llvm.loop !294

315:                                              ; preds = %299, %296
  %316 = icmp eq i64 %226, %236
  br i1 %316, label %370, label %317

317:                                              ; preds = %315, %228, %223
  %318 = phi i64 [ %225, %228 ], [ %225, %223 ], [ %237, %315 ]
  %319 = phi i16* [ %197, %228 ], [ %197, %223 ], [ %238, %315 ]
  %320 = phi i16* [ %224, %228 ], [ %224, %223 ], [ %239, %315 ]
  %321 = add i64 %318, -1
  %322 = and i64 %318, 7
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %335, label %324

324:                                              ; preds = %317, %324
  %325 = phi i64 [ %330, %324 ], [ %318, %317 ]
  %326 = phi i16* [ %332, %324 ], [ %319, %317 ]
  %327 = phi i16* [ %331, %324 ], [ %320, %317 ]
  %328 = phi i64 [ %333, %324 ], [ %322, %317 ]
  %329 = load i16, i16* %326, align 2
  store i16 %329, i16* %327, align 2
  %330 = add i64 %325, -1
  %331 = getelementptr inbounds i16, i16* %327, i64 1
  %332 = getelementptr inbounds i16, i16* %326, i64 1
  %333 = add i64 %328, -1
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %324, !llvm.loop !295

335:                                              ; preds = %324, %317
  %336 = phi i64 [ %318, %317 ], [ %330, %324 ]
  %337 = phi i16* [ %319, %317 ], [ %332, %324 ]
  %338 = phi i16* [ %320, %317 ], [ %331, %324 ]
  %339 = icmp ult i64 %321, 7
  br i1 %339, label %370, label %340

340:                                              ; preds = %335, %340
  %341 = phi i64 [ %366, %340 ], [ %336, %335 ]
  %342 = phi i16* [ %368, %340 ], [ %337, %335 ]
  %343 = phi i16* [ %367, %340 ], [ %338, %335 ]
  %344 = load i16, i16* %342, align 2
  store i16 %344, i16* %343, align 2
  %345 = getelementptr inbounds i16, i16* %343, i64 1
  %346 = getelementptr inbounds i16, i16* %342, i64 1
  %347 = load i16, i16* %346, align 2
  store i16 %347, i16* %345, align 2
  %348 = getelementptr inbounds i16, i16* %343, i64 2
  %349 = getelementptr inbounds i16, i16* %342, i64 2
  %350 = load i16, i16* %349, align 2
  store i16 %350, i16* %348, align 2
  %351 = getelementptr inbounds i16, i16* %343, i64 3
  %352 = getelementptr inbounds i16, i16* %342, i64 3
  %353 = load i16, i16* %352, align 2
  store i16 %353, i16* %351, align 2
  %354 = getelementptr inbounds i16, i16* %343, i64 4
  %355 = getelementptr inbounds i16, i16* %342, i64 4
  %356 = load i16, i16* %355, align 2
  store i16 %356, i16* %354, align 2
  %357 = getelementptr inbounds i16, i16* %343, i64 5
  %358 = getelementptr inbounds i16, i16* %342, i64 5
  %359 = load i16, i16* %358, align 2
  store i16 %359, i16* %357, align 2
  %360 = getelementptr inbounds i16, i16* %343, i64 6
  %361 = getelementptr inbounds i16, i16* %342, i64 6
  %362 = load i16, i16* %361, align 2
  store i16 %362, i16* %360, align 2
  %363 = getelementptr inbounds i16, i16* %343, i64 7
  %364 = getelementptr inbounds i16, i16* %342, i64 7
  %365 = load i16, i16* %364, align 2
  store i16 %365, i16* %363, align 2
  %366 = add i64 %341, -8
  %367 = getelementptr inbounds i16, i16* %343, i64 8
  %368 = getelementptr inbounds i16, i16* %342, i64 8
  %369 = icmp eq i64 %366, 0
  br i1 %369, label %370, label %340, !llvm.loop !296

370:                                              ; preds = %335, %340, %315, %192
  %371 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %0, i64 0, i32 2
  %372 = getelementptr inbounds %"struct.autofill::structured_address::AddressToken", %"struct.autofill::structured_address::AddressToken"* %1, i64 0, i32 2
  %373 = load i32, i32* %372, align 8
  store i32 %373, i32* %371, align 8
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZN4base8internal10InvokeImplIRZNK8autofill18structured_address16AddressComponent22AllDescendantsAreEmptyEvE3$_0JRKPS4_EEEDcOT_DpOT0_"(%"class.autofill::structured_address::AddressComponent"** nocapture readonly dereferenceable(8)) unnamed_addr #1 {
  %2 = load %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %0, align 8
  %3 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  br label %10

8:                                                ; preds = %1
  %9 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZN4base13EmptyString16Ev() #13
  br label %10

10:                                               ; preds = %8, %6
  %11 = phi %"class.std::__1::basic_string"* [ %7, %6 ], [ %9, %8 ]
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %12, i64 0, i32 1, i32 1
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  br label %21

19:                                               ; preds = %10
  %20 = zext i8 %14 to i64
  br label %21

21:                                               ; preds = %19, %16
  %22 = phi i64 [ %18, %16 ], [ %20, %19 ]
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %36

24:                                               ; preds = %21
  %25 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %2, i64 0, i32 4, i32 0, i32 0
  %26 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %25, align 8
  %27 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent", %"class.autofill::structured_address::AddressComponent"* %2, i64 0, i32 4, i32 0, i32 1
  %28 = load %"class.autofill::structured_address::AddressComponent"**, %"class.autofill::structured_address::AddressComponent"*** %27, align 8
  %29 = icmp eq %"class.autofill::structured_address::AddressComponent"** %26, %28
  br i1 %29, label %36, label %32

30:                                               ; preds = %32
  %31 = icmp eq %"class.autofill::structured_address::AddressComponent"** %35, %28
  br i1 %31, label %36, label %32

32:                                               ; preds = %24, %30
  %33 = phi %"class.autofill::structured_address::AddressComponent"** [ %35, %30 ], [ %26, %24 ]
  %34 = tail call fastcc zeroext i1 @"_ZN4base8internal10InvokeImplIRZNK8autofill18structured_address16AddressComponent22AllDescendantsAreEmptyEvE3$_0JRKPS4_EEEDcOT_DpOT0_"(%"class.autofill::structured_address::AddressComponent"** dereferenceable(8) %33) #13
  %35 = getelementptr inbounds %"class.autofill::structured_address::AddressComponent"*, %"class.autofill::structured_address::AddressComponent"** %33, i64 1
  br i1 %34, label %30, label %36

36:                                               ; preds = %32, %30, %24, %21
  %37 = phi i1 [ false, %21 ], [ true, %24 ], [ false, %32 ], [ true, %30 ]
  ret i1 %37
}

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.61"*, i64) local_unnamed_addr #1 align 2

declare void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece.61"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #1 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #13
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #13
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #13
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #13
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #13
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #13
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #13
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #1 comdat {
  %7 = alloca %"class.std::__1::basic_string.19", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #13
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #13
  %32 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string.19"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #15
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string.19"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #13
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #13
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #15
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #13
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #13
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #6

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #6

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #4

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.29"*, %"class.std::__1::basic_string.19"* dereferenceable(24)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string.19"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.29"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.29"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string.19"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #15
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string.19"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string.19"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string.19"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string.19"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string.19"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #13
  %39 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string.19"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.29", %"class.std::__1::vector.29"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %41, align 8
  %43 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string.19"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string.19"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string.19"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string.19"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string.19"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string.19"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #13
  %54 = icmp eq %"class.std::__1::basic_string.19"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string.19"*, %"class.std::__1::basic_string.19"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string.19"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string.19"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string.19"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string.19"*
  %64 = icmp eq %"class.std::__1::basic_string.19"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string.19"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string.19"* %67 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %67, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #15
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string.19"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #15
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #1 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #13
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #13
  %10 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1, i32 0
  %11 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 1, i32 0, i32 1
  %12 = bitcast %"class.std::__1::basic_string.19"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::basic_string.19", %"class.std::__1::basic_string.19"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  tail call void @_ZdlPv(i8* %18) #15
  br label %19

19:                                               ; preds = %16, %4
  %20 = bitcast %"struct.std::__1::pair.62"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  %22 = load i8, i8* %21, align 1
  %23 = icmp slt i8 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.std::__1::pair.62", %"struct.std::__1::pair.62"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  tail call void @_ZdlPv(i8* %26) #15
  br label %27

27:                                               ; preds = %19, %24
  %28 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %28) #15
  br label %29

29:                                               ; preds = %2, %27
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJN4base16BasicStringPieceIDsS3_EEEEEvDpOT_(%"class.std::__1::vector.63"*, %"class.base::BasicStringPiece.61"* dereferenceable(16)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.63"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.63"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #15
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %1, i64 0, i32 0
  %38 = load i16*, i16** %37, align 8, !noalias !297
  %39 = getelementptr inbounds %"class.base::BasicStringPiece.61", %"class.base::BasicStringPiece.61"* %1, i64 0, i32 1
  %40 = load i64, i64* %39, align 8, !noalias !297
  %41 = icmp ugt i64 %40, 9223372036854775791
  br i1 %41, label %42, label %44

42:                                               ; preds = %31
  %43 = bitcast %"class.std::__1::basic_string"* %34 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %43) #14
  unreachable

44:                                               ; preds = %31
  %45 = icmp ult i64 %40, 11
  br i1 %45, label %59, label %46

46:                                               ; preds = %44
  %47 = add nuw nsw i64 %40, 8
  %48 = and i64 %47, -8
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %46
  tail call void @abort() #14
  unreachable

51:                                               ; preds = %46
  %52 = shl i64 %48, 1
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to i16*
  %55 = bitcast %"class.std::__1::basic_string"* %34 to i8**
  store i8* %53, i8** %55, align 8, !alias.scope !297
  %56 = or i64 %48, -9223372036854775808
  %57 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %56, i64* %57, align 8, !alias.scope !297
  %58 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %40, i64* %58, align 8, !alias.scope !297
  br label %65

59:                                               ; preds = %44
  %60 = trunc i64 %40 to i8
  %61 = bitcast %"class.std::__1::basic_string"* %34 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %62 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %61, i64 0, i32 1, i32 1
  store i8 %60, i8* %62, align 1, !alias.scope !297
  %63 = bitcast %"class.std::__1::basic_string"* %34 to i16*
  %64 = icmp eq i64 %40, 0
  br i1 %64, label %209, label %65

65:                                               ; preds = %59, %51
  %66 = phi i16* [ %54, %51 ], [ %63, %59 ]
  %67 = icmp ult i64 %40, 16
  br i1 %67, label %156, label %68

68:                                               ; preds = %65
  %69 = getelementptr i16, i16* %66, i64 %40
  %70 = getelementptr i16, i16* %38, i64 %40
  %71 = icmp ult i16* %66, %70
  %72 = icmp ult i16* %38, %69
  %73 = and i1 %71, %72
  br i1 %73, label %156, label %74

74:                                               ; preds = %68
  %75 = and i64 %40, -16
  %76 = sub i64 %40, %75
  %77 = getelementptr i16, i16* %38, i64 %75
  %78 = getelementptr i16, i16* %66, i64 %75
  %79 = add i64 %75, -16
  %80 = lshr exact i64 %79, 4
  %81 = add nuw nsw i64 %80, 1
  %82 = and i64 %81, 3
  %83 = icmp ult i64 %79, 48
  br i1 %83, label %135, label %84

84:                                               ; preds = %74
  %85 = sub nsw i64 %81, %82
  br label %86

86:                                               ; preds = %86, %84
  %87 = phi i64 [ 0, %84 ], [ %132, %86 ]
  %88 = phi i64 [ %85, %84 ], [ %133, %86 ]
  %89 = getelementptr i16, i16* %38, i64 %87
  %90 = getelementptr i16, i16* %66, i64 %87
  %91 = bitcast i16* %89 to <8 x i16>*
  %92 = load <8 x i16>, <8 x i16>* %91, align 2, !alias.scope !300
  %93 = getelementptr i16, i16* %89, i64 8
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2, !alias.scope !300
  %96 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %92, <8 x i16>* %96, align 2, !alias.scope !303, !noalias !300
  %97 = getelementptr i16, i16* %90, i64 8
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %98, align 2, !alias.scope !303, !noalias !300
  %99 = or i64 %87, 16
  %100 = getelementptr i16, i16* %38, i64 %99
  %101 = getelementptr i16, i16* %66, i64 %99
  %102 = bitcast i16* %100 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2, !alias.scope !300
  %104 = getelementptr i16, i16* %100, i64 8
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !300
  %107 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %103, <8 x i16>* %107, align 2, !alias.scope !303, !noalias !300
  %108 = getelementptr i16, i16* %101, i64 8
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %106, <8 x i16>* %109, align 2, !alias.scope !303, !noalias !300
  %110 = or i64 %87, 32
  %111 = getelementptr i16, i16* %38, i64 %110
  %112 = getelementptr i16, i16* %66, i64 %110
  %113 = bitcast i16* %111 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2, !alias.scope !300
  %115 = getelementptr i16, i16* %111, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  %117 = load <8 x i16>, <8 x i16>* %116, align 2, !alias.scope !300
  %118 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %118, align 2, !alias.scope !303, !noalias !300
  %119 = getelementptr i16, i16* %112, i64 8
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> %117, <8 x i16>* %120, align 2, !alias.scope !303, !noalias !300
  %121 = or i64 %87, 48
  %122 = getelementptr i16, i16* %38, i64 %121
  %123 = getelementptr i16, i16* %66, i64 %121
  %124 = bitcast i16* %122 to <8 x i16>*
  %125 = load <8 x i16>, <8 x i16>* %124, align 2, !alias.scope !300
  %126 = getelementptr i16, i16* %122, i64 8
  %127 = bitcast i16* %126 to <8 x i16>*
  %128 = load <8 x i16>, <8 x i16>* %127, align 2, !alias.scope !300
  %129 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %125, <8 x i16>* %129, align 2, !alias.scope !303, !noalias !300
  %130 = getelementptr i16, i16* %123, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %128, <8 x i16>* %131, align 2, !alias.scope !303, !noalias !300
  %132 = add i64 %87, 64
  %133 = add i64 %88, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %86, !llvm.loop !305

135:                                              ; preds = %86, %74
  %136 = phi i64 [ 0, %74 ], [ %132, %86 ]
  %137 = icmp eq i64 %82, 0
  br i1 %137, label %154, label %138

138:                                              ; preds = %135, %138
  %139 = phi i64 [ %151, %138 ], [ %136, %135 ]
  %140 = phi i64 [ %152, %138 ], [ %82, %135 ]
  %141 = getelementptr i16, i16* %38, i64 %139
  %142 = getelementptr i16, i16* %66, i64 %139
  %143 = bitcast i16* %141 to <8 x i16>*
  %144 = load <8 x i16>, <8 x i16>* %143, align 2, !alias.scope !300
  %145 = getelementptr i16, i16* %141, i64 8
  %146 = bitcast i16* %145 to <8 x i16>*
  %147 = load <8 x i16>, <8 x i16>* %146, align 2, !alias.scope !300
  %148 = bitcast i16* %142 to <8 x i16>*
  store <8 x i16> %144, <8 x i16>* %148, align 2, !alias.scope !303, !noalias !300
  %149 = getelementptr i16, i16* %142, i64 8
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> %147, <8 x i16>* %150, align 2, !alias.scope !303, !noalias !300
  %151 = add i64 %139, 16
  %152 = add i64 %140, -1
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %138, !llvm.loop !306

154:                                              ; preds = %138, %135
  %155 = icmp eq i64 %40, %75
  br i1 %155, label %209, label %156

156:                                              ; preds = %154, %68, %65
  %157 = phi i64 [ %40, %68 ], [ %40, %65 ], [ %76, %154 ]
  %158 = phi i16* [ %38, %68 ], [ %38, %65 ], [ %77, %154 ]
  %159 = phi i16* [ %66, %68 ], [ %66, %65 ], [ %78, %154 ]
  %160 = add i64 %157, -1
  %161 = and i64 %157, 7
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %174, label %163

163:                                              ; preds = %156, %163
  %164 = phi i64 [ %169, %163 ], [ %157, %156 ]
  %165 = phi i16* [ %171, %163 ], [ %158, %156 ]
  %166 = phi i16* [ %170, %163 ], [ %159, %156 ]
  %167 = phi i64 [ %172, %163 ], [ %161, %156 ]
  %168 = load i16, i16* %165, align 2
  store i16 %168, i16* %166, align 2
  %169 = add i64 %164, -1
  %170 = getelementptr inbounds i16, i16* %166, i64 1
  %171 = getelementptr inbounds i16, i16* %165, i64 1
  %172 = add i64 %167, -1
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %174, label %163, !llvm.loop !307

174:                                              ; preds = %163, %156
  %175 = phi i64 [ %157, %156 ], [ %169, %163 ]
  %176 = phi i16* [ %158, %156 ], [ %171, %163 ]
  %177 = phi i16* [ %159, %156 ], [ %170, %163 ]
  %178 = icmp ult i64 %160, 7
  br i1 %178, label %209, label %179

179:                                              ; preds = %174, %179
  %180 = phi i64 [ %205, %179 ], [ %175, %174 ]
  %181 = phi i16* [ %207, %179 ], [ %176, %174 ]
  %182 = phi i16* [ %206, %179 ], [ %177, %174 ]
  %183 = load i16, i16* %181, align 2
  store i16 %183, i16* %182, align 2
  %184 = getelementptr inbounds i16, i16* %182, i64 1
  %185 = getelementptr inbounds i16, i16* %181, i64 1
  %186 = load i16, i16* %185, align 2
  store i16 %186, i16* %184, align 2
  %187 = getelementptr inbounds i16, i16* %182, i64 2
  %188 = getelementptr inbounds i16, i16* %181, i64 2
  %189 = load i16, i16* %188, align 2
  store i16 %189, i16* %187, align 2
  %190 = getelementptr inbounds i16, i16* %182, i64 3
  %191 = getelementptr inbounds i16, i16* %181, i64 3
  %192 = load i16, i16* %191, align 2
  store i16 %192, i16* %190, align 2
  %193 = getelementptr inbounds i16, i16* %182, i64 4
  %194 = getelementptr inbounds i16, i16* %181, i64 4
  %195 = load i16, i16* %194, align 2
  store i16 %195, i16* %193, align 2
  %196 = getelementptr inbounds i16, i16* %182, i64 5
  %197 = getelementptr inbounds i16, i16* %181, i64 5
  %198 = load i16, i16* %197, align 2
  store i16 %198, i16* %196, align 2
  %199 = getelementptr inbounds i16, i16* %182, i64 6
  %200 = getelementptr inbounds i16, i16* %181, i64 6
  %201 = load i16, i16* %200, align 2
  store i16 %201, i16* %199, align 2
  %202 = getelementptr inbounds i16, i16* %182, i64 7
  %203 = getelementptr inbounds i16, i16* %181, i64 7
  %204 = load i16, i16* %203, align 2
  store i16 %204, i16* %202, align 2
  %205 = add i64 %180, -8
  %206 = getelementptr inbounds i16, i16* %182, i64 8
  %207 = getelementptr inbounds i16, i16* %181, i64 8
  %208 = icmp eq i64 %205, 0
  br i1 %208, label %209, label %179, !llvm.loop !308

209:                                              ; preds = %174, %179, %154, %59
  %210 = phi i16* [ %63, %59 ], [ %66, %154 ], [ %66, %179 ], [ %66, %174 ]
  %211 = getelementptr inbounds i16, i16* %210, i64 %40
  store i16 0, i16* %211, align 2
  %212 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %213 = ptrtoint %"class.std::__1::basic_string"* %212 to i64
  %214 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 0
  %215 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %214, align 8
  %216 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %217 = icmp eq %"class.std::__1::basic_string"* %216, %215
  br i1 %217, label %218, label %220

218:                                              ; preds = %209
  %219 = ptrtoint %"class.std::__1::basic_string"* %215 to i64
  br label %231

220:                                              ; preds = %209, %220
  %221 = phi %"class.std::__1::basic_string"* [ %223, %220 ], [ %34, %209 ]
  %222 = phi %"class.std::__1::basic_string"* [ %224, %220 ], [ %216, %209 ]
  %223 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %221, i64 -1
  %224 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %222, i64 -1
  %225 = bitcast %"class.std::__1::basic_string"* %223 to i8*
  %226 = bitcast %"class.std::__1::basic_string"* %224 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %225, i8* align 8 %226, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %226, i8 0, i64 24, i1 false) #13
  %227 = icmp eq %"class.std::__1::basic_string"* %224, %215
  br i1 %227, label %228, label %220

228:                                              ; preds = %220
  %229 = load i64, i64* %6, align 8
  %230 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %231

231:                                              ; preds = %218, %228
  %232 = phi %"class.std::__1::basic_string"* [ %215, %218 ], [ %230, %228 ]
  %233 = phi %"class.std::__1::basic_string"* [ %34, %218 ], [ %223, %228 ]
  %234 = phi i64 [ %219, %218 ], [ %229, %228 ]
  %235 = ptrtoint %"class.std::__1::basic_string"* %233 to i64
  store i64 %235, i64* %6, align 8
  store i64 %213, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %236 = inttoptr i64 %234 to %"class.std::__1::basic_string"*
  %237 = icmp eq %"class.std::__1::basic_string"* %232, %236
  br i1 %237, label %250, label %238

238:                                              ; preds = %231, %248
  %239 = phi %"class.std::__1::basic_string"* [ %240, %248 ], [ %232, %231 ]
  %240 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %239, i64 -1
  %241 = bitcast %"class.std::__1::basic_string"* %240 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %242 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %241, i64 0, i32 1, i32 1
  %243 = load i8, i8* %242, align 1
  %244 = icmp slt i8 %243, 0
  br i1 %244, label %245, label %248

245:                                              ; preds = %238
  %246 = bitcast %"class.std::__1::basic_string"* %240 to i8**
  %247 = load i8*, i8** %246, align 8
  tail call void @_ZdlPv(i8* %247) #15
  br label %248

248:                                              ; preds = %245, %238
  %249 = icmp eq %"class.std::__1::basic_string"* %240, %236
  br i1 %249, label %250, label %238

250:                                              ; preds = %248, %231
  %251 = icmp eq i64 %234, 0
  br i1 %251, label %254, label %252

252:                                              ; preds = %250
  %253 = inttoptr i64 %234 to i8*
  tail call void @_ZdlPv(i8* %253) #15
  br label %254

254:                                              ; preds = %250, %252
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE24__emplace_back_slow_pathIJS6_EEEvDpOT_(%"class.std::__1::vector.63"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.63"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.63"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #15
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #13
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector.63", %"class.std::__1::vector.63"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %41, align 8
  %43 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #13
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #13
  %54 = icmp eq %"class.std::__1::basic_string"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string"*
  %64 = icmp eq %"class.std::__1::basic_string"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string"* %67 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %68, i64 0, i32 1, i32 1
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = bitcast %"class.std::__1::basic_string"* %67 to i8**
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #15
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #15
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #12

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readonly }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !9}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv: argument 0"}
!16 = distinct !{!16, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_: argument 0"}
!19 = distinct !{!19, !"_ZN8autofill8DenseSetINS_15ServerFieldTypeELS1_118EE6insertES1_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv: argument 0"}
!22 = distinct !{!22, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv: argument 0"}
!25 = distinct !{!25, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv"}
!26 = !{!27}
!27 = distinct !{!27, !28}
!28 = distinct !{!28, !"LVerDomain"}
!29 = !{!30}
!30 = distinct !{!30, !28}
!31 = distinct !{!31, !9}
!32 = distinct !{!32, !11}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !9}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv: argument 0"}
!37 = distinct !{!37, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNKR4absl8optionalINSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEE8value_orIS7_EES7_OT_: argument 0"}
!40 = distinct !{!40, !"_ZNKR4absl8optionalINSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEE8value_orIS7_EES7_OT_"}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !9}
!47 = distinct !{!47, !11}
!48 = distinct !{!48, !11}
!49 = distinct !{!49, !9}
!50 = !{!51}
!51 = distinct !{!51, !52, !"_ZNK8autofill18structured_address16AddressComponent15GetValueForTypeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE: argument 0"}
!52 = distinct !{!52, !"_ZNK8autofill18structured_address16AddressComponent15GetValueForTypeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv: argument 0"}
!55 = distinct !{!55, !"_ZNK8autofill18structured_address16AddressComponent18GetStorageTypeNameEv"}
!56 = !{!57}
!57 = distinct !{!57, !58}
!58 = distinct !{!58, !"LVerDomain"}
!59 = !{!60}
!60 = distinct !{!60, !58}
!61 = distinct !{!61, !9}
!62 = distinct !{!62, !11}
!63 = distinct !{!63, !11}
!64 = distinct !{!64, !9}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!67 = distinct !{!67, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !9}
!74 = distinct !{!74, !11}
!75 = distinct !{!75, !11}
!76 = distinct !{!76, !9}
!77 = !{!78}
!78 = distinct !{!78, !79, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!79 = distinct !{!79, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !9}
!86 = distinct !{!86, !11}
!87 = distinct !{!87, !11}
!88 = distinct !{!88, !9}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!91 = distinct !{!91, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!92 = !{!93}
!93 = distinct !{!93, !94}
!94 = distinct !{!94, !"LVerDomain"}
!95 = !{!96}
!96 = distinct !{!96, !94}
!97 = distinct !{!97, !9}
!98 = distinct !{!98, !11}
!99 = distinct !{!99, !11}
!100 = distinct !{!100, !9}
!101 = !{!102}
!102 = distinct !{!102, !103}
!103 = distinct !{!103, !"LVerDomain"}
!104 = !{!105}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !9}
!107 = distinct !{!107, !11}
!108 = distinct !{!108, !11}
!109 = distinct !{!109, !9}
!110 = !{!111}
!111 = distinct !{!111, !112}
!112 = distinct !{!112, !"LVerDomain"}
!113 = !{!114}
!114 = distinct !{!114, !112}
!115 = distinct !{!115, !9}
!116 = distinct !{!116, !11}
!117 = distinct !{!117, !11}
!118 = distinct !{!118, !9}
!119 = !{!120}
!120 = distinct !{!120, !121}
!121 = distinct !{!121, !"LVerDomain"}
!122 = !{!123}
!123 = distinct !{!123, !121}
!124 = distinct !{!124, !9}
!125 = distinct !{!125, !11}
!126 = distinct !{!126, !11}
!127 = distinct !{!127, !9}
!128 = !{!129}
!129 = distinct !{!129, !130, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!130 = distinct !{!130, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!131 = !{!132}
!132 = distinct !{!132, !133}
!133 = distinct !{!133, !"LVerDomain"}
!134 = !{!135}
!135 = distinct !{!135, !133}
!136 = distinct !{!136, !9}
!137 = distinct !{!137, !11}
!138 = distinct !{!138, !11}
!139 = distinct !{!139, !9}
!140 = !{!141}
!141 = distinct !{!141, !142}
!142 = distinct !{!142, !"LVerDomain"}
!143 = !{!144}
!144 = distinct !{!144, !142}
!145 = distinct !{!145, !9}
!146 = distinct !{!146, !11}
!147 = distinct !{!147, !11}
!148 = distinct !{!148, !9}
!149 = !{!150}
!150 = distinct !{!150, !151}
!151 = distinct !{!151, !"LVerDomain"}
!152 = !{!153}
!153 = distinct !{!153, !151}
!154 = distinct !{!154, !9}
!155 = distinct !{!155, !11}
!156 = distinct !{!156, !11}
!157 = distinct !{!157, !9}
!158 = !{!159}
!159 = distinct !{!159, !160}
!160 = distinct !{!160, !"LVerDomain"}
!161 = !{!162}
!162 = distinct !{!162, !160}
!163 = distinct !{!163, !9}
!164 = distinct !{!164, !11}
!165 = distinct !{!165, !11}
!166 = distinct !{!166, !9}
!167 = !{!168}
!168 = distinct !{!168, !169}
!169 = distinct !{!169, !"LVerDomain"}
!170 = !{!171}
!171 = distinct !{!171, !169}
!172 = distinct !{!172, !9}
!173 = distinct !{!173, !11}
!174 = distinct !{!174, !11}
!175 = distinct !{!175, !9}
!176 = !{!177}
!177 = distinct !{!177, !178}
!178 = distinct !{!178, !"LVerDomain"}
!179 = !{!180}
!180 = distinct !{!180, !178}
!181 = distinct !{!181, !9}
!182 = distinct !{!182, !11}
!183 = distinct !{!183, !11}
!184 = distinct !{!184, !9}
!185 = !{!186}
!186 = distinct !{!186, !187}
!187 = distinct !{!187, !"LVerDomain"}
!188 = !{!189}
!189 = distinct !{!189, !187}
!190 = distinct !{!190, !9}
!191 = distinct !{!191, !11}
!192 = distinct !{!192, !11}
!193 = distinct !{!193, !9}
!194 = !{!195}
!195 = distinct !{!195, !196}
!196 = distinct !{!196, !"LVerDomain"}
!197 = !{!198}
!198 = distinct !{!198, !196}
!199 = distinct !{!199, !9}
!200 = distinct !{!200, !11}
!201 = distinct !{!201, !11}
!202 = distinct !{!202, !9}
!203 = !{!204}
!204 = distinct !{!204, !205}
!205 = distinct !{!205, !"LVerDomain"}
!206 = !{!207}
!207 = distinct !{!207, !205}
!208 = distinct !{!208, !9}
!209 = distinct !{!209, !11}
!210 = distinct !{!210, !11}
!211 = distinct !{!211, !9}
!212 = !{!213}
!213 = distinct !{!213, !214}
!214 = distinct !{!214, !"LVerDomain"}
!215 = !{!216}
!216 = distinct !{!216, !214}
!217 = distinct !{!217, !9}
!218 = distinct !{!218, !11}
!219 = distinct !{!219, !11}
!220 = distinct !{!220, !9}
!221 = !{!222}
!222 = distinct !{!222, !223}
!223 = distinct !{!223, !"LVerDomain"}
!224 = !{!225}
!225 = distinct !{!225, !223}
!226 = distinct !{!226, !9}
!227 = distinct !{!227, !11}
!228 = distinct !{!228, !11}
!229 = distinct !{!229, !9}
!230 = !{!231}
!231 = distinct !{!231, !232}
!232 = distinct !{!232, !"LVerDomain"}
!233 = !{!234}
!234 = distinct !{!234, !232}
!235 = distinct !{!235, !9}
!236 = distinct !{!236, !11}
!237 = distinct !{!237, !11}
!238 = distinct !{!238, !9}
!239 = !{!240}
!240 = distinct !{!240, !241}
!241 = distinct !{!241, !"LVerDomain"}
!242 = !{!243}
!243 = distinct !{!243, !241}
!244 = distinct !{!244, !9}
!245 = distinct !{!245, !11}
!246 = distinct !{!246, !11}
!247 = distinct !{!247, !9}
!248 = !{!249}
!249 = distinct !{!249, !250}
!250 = distinct !{!250, !"LVerDomain"}
!251 = !{!252}
!252 = distinct !{!252, !250}
!253 = distinct !{!253, !9}
!254 = distinct !{!254, !11}
!255 = distinct !{!255, !11}
!256 = distinct !{!256, !9}
!257 = !{!258}
!258 = distinct !{!258, !259}
!259 = distinct !{!259, !"LVerDomain"}
!260 = !{!261}
!261 = distinct !{!261, !259}
!262 = distinct !{!262, !9}
!263 = distinct !{!263, !11}
!264 = distinct !{!264, !11}
!265 = distinct !{!265, !9}
!266 = distinct !{!266, !9}
!267 = distinct !{!267, !11}
!268 = distinct !{!268, !269, !9}
!269 = !{!"llvm.loop.unroll.runtime.disable"}
!270 = !{!271}
!271 = distinct !{!271, !272}
!272 = distinct !{!272, !"LVerDomain"}
!273 = !{!274}
!274 = distinct !{!274, !272}
!275 = distinct !{!275, !9}
!276 = distinct !{!276, !11}
!277 = distinct !{!277, !11}
!278 = distinct !{!278, !9}
!279 = !{!280}
!280 = distinct !{!280, !281}
!281 = distinct !{!281, !"LVerDomain"}
!282 = !{!283}
!283 = distinct !{!283, !281}
!284 = distinct !{!284, !9}
!285 = distinct !{!285, !11}
!286 = distinct !{!286, !11}
!287 = distinct !{!287, !9}
!288 = !{!289}
!289 = distinct !{!289, !290}
!290 = distinct !{!290, !"LVerDomain"}
!291 = !{!292}
!292 = distinct !{!292, !290}
!293 = distinct !{!293, !9}
!294 = distinct !{!294, !11}
!295 = distinct !{!295, !11}
!296 = distinct !{!296, !9}
!297 = !{!298}
!298 = distinct !{!298, !299, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv: argument 0"}
!299 = distinct !{!299, !"_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv"}
!300 = !{!301}
!301 = distinct !{!301, !302}
!302 = distinct !{!302, !"LVerDomain"}
!303 = !{!304}
!304 = distinct !{!304, !302}
!305 = distinct !{!305, !9}
!306 = distinct !{!306, !11}
!307 = distinct !{!307, !11}
!308 = distinct !{!308, !9}
