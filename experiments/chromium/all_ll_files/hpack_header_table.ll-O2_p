; ModuleID = '../../net/third_party/quiche/src/spdy/core/hpack/hpack_header_table.cc'
source_filename = "../../net/third_party/quiche/src/spdy/core/hpack/hpack_header_table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.spdy::HpackHeaderTable" = type { %"class.std::__1::vector"*, %"class.std::__1::deque", %"class.absl::flat_hash_map"*, %"class.absl::flat_hash_map.20"*, %"class.absl::flat_hash_map", %"class.absl::flat_hash_map.20", i64, i64, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"*, %"class.std::__1::__compressed_pair.1" }
%"class.spdy::HpackEntry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.spdy::HpackEntry"* }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.11" }
%"struct.std::__1::__split_buffer" = type { %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"**, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.spdy::HpackEntry"** }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i64 }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { %"struct.spdy::HpackLookupEntry", i64 }
%"struct.spdy::HpackLookupEntry" = type { %"class.absl::string_view", %"class.absl::string_view" }
%"class.absl::string_view" = type { i8*, i64 }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.absl::flat_hash_map.20" = type { %"class.absl::container_internal::raw_hash_map.21" }
%"class.absl::container_internal::raw_hash_map.21" = type { %"class.absl::container_internal::raw_hash_set.22" }
%"class.absl::container_internal::raw_hash_set.22" = type { i8*, %"union.absl::container_internal::map_slot_type.23"*, i64, i64, %"class.absl::container_internal::CompressedTuple.26" }
%"union.absl::container_internal::map_slot_type.23" = type { %"struct.std::__1::pair.24" }
%"struct.std::__1::pair.24" = type { %"class.absl::string_view", i64 }
%"class.absl::container_internal::CompressedTuple.26" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.27" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.27" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.spdy::HpackStaticTable" = type { %"class.std::__1::vector", %"class.absl::flat_hash_map", %"class.absl::flat_hash_map.20" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__deque_iterator" = type { %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"* }
%"struct.std::__1::pair.13" = type { %"struct.spdy::HpackLookupEntry", i64 }
%"struct.std::__1::pair.25" = type { %"class.absl::string_view", i64 }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_ = comdat any

$_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE8pop_backEv = comdat any

$_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv = comdat any

$_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m = comdat any

$_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE20__add_front_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

$_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_ = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm = comdat any

$_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv = comdat any

$_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = comdat any

@.str = private unnamed_addr constant [33 x i8] c"max_size <= settings_size_bound_\00", align 1
@.str.1 = private unnamed_addr constant [71 x i8] c"../../net/third_party/quiche/src/spdy/core/hpack/hpack_header_table.cc\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"size_ <= max_size_\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"!dynamic_entries_.empty()\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"insert_result.second\00", align 1
@_ZZN4absl18container_internal10EmptyGroupEvE11empty_group = linkonce_odr hidden constant [16 x i8] c"\FF\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", comdat, align 16
@_ZN4absl13hash_internal15MixingHashState5kSeedE = external local_unnamed_addr constant i8*, align 8

@_ZN4spdy16HpackHeaderTableC1Ev = hidden unnamed_addr alias void (%"class.spdy::HpackHeaderTable"*), void (%"class.spdy::HpackHeaderTable"*)* @_ZN4spdy16HpackHeaderTableC2Ev
@_ZN4spdy16HpackHeaderTableD1Ev = hidden unnamed_addr alias void (%"class.spdy::HpackHeaderTable"*), void (%"class.spdy::HpackHeaderTable"*)* @_ZN4spdy16HpackHeaderTableD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackHeaderTableC2Ev(%"class.spdy::HpackHeaderTable"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 0
  %3 = tail call dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4spdy22ObtainHpackStaticTableEv() #11
  %4 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %3, i64 0, i32 0
  store %"class.std::__1::vector"* %4, %"class.std::__1::vector"** %2, align 8
  %5 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1
  %6 = bitcast %"class.std::__1::deque"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 48, i1 false) #11
  %7 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 2
  %8 = tail call dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4spdy22ObtainHpackStaticTableEv() #11
  %9 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %8, i64 0, i32 1
  store %"class.absl::flat_hash_map"* %9, %"class.absl::flat_hash_map"** %7, align 8
  %10 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 3
  %11 = tail call dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4spdy22ObtainHpackStaticTableEv() #11
  %12 = getelementptr inbounds %"class.spdy::HpackStaticTable", %"class.spdy::HpackStaticTable"* %11, i64 0, i32 2
  store %"class.absl::flat_hash_map.20"* %12, %"class.absl::flat_hash_map.20"** %10, align 8
  %13 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %13, align 8
  %14 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %15 = bitcast %"union.absl::container_internal::map_slot_type"** %14 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 32, i1 false) #11
  %16 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %16, align 8
  %17 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %18 = bitcast %"union.absl::container_internal::map_slot_type.23"** %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false) #11
  %19 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 6
  %20 = bitcast i64* %19 to <2 x i64>*
  store <2 x i64> <i64 4096, i64 0>, <2 x i64>* %20, align 8
  %21 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 8
  %22 = bitcast i64* %21 to <2 x i64>*
  store <2 x i64> <i64 4096, i64 0>, <2 x i64>* %22, align 8
  ret void
}

declare dereferenceable(104) %"class.spdy::HpackStaticTable"* @_ZN4spdy22ObtainHpackStaticTableEv() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackHeaderTableD2Ev(%"class.spdy::HpackHeaderTable"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 3
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  tail call void @_ZdlPv(i8* %8) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %7, align 8
  %9 = bitcast %"union.absl::container_internal::map_slot_type.23"** %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false) #11
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %16 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  tail call void @_ZdlPv(i8* %17) #15
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN4absl18container_internal10EmptyGroupEvE11empty_group, i64 0, i64 0), i8** %16, align 8
  %18 = bitcast %"union.absl::container_internal::map_slot_type"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false) #11
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0
  tail call void @_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"* %20) #11
  %21 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %22 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %21, align 8
  %23 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %24 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %23, align 8
  %25 = icmp eq %"class.spdy::HpackEntry"** %22, %24
  br i1 %25, label %44, label %26

26:                                               ; preds = %19, %26
  %27 = phi %"class.spdy::HpackEntry"** [ %30, %26 ], [ %22, %19 ]
  %28 = bitcast %"class.spdy::HpackEntry"** %27 to i8**
  %29 = load i8*, i8** %28, align 8
  tail call void @_ZdlPv(i8* %29) #15
  %30 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %27, i64 1
  %31 = icmp eq %"class.spdy::HpackEntry"** %30, %24
  br i1 %31, label %32, label %26

32:                                               ; preds = %26
  %33 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %21, align 8
  %34 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %23, align 8
  %35 = icmp eq %"class.spdy::HpackEntry"** %34, %33
  br i1 %35, label %44, label %36

36:                                               ; preds = %32
  %37 = ptrtoint %"class.spdy::HpackEntry"** %33 to i64
  %38 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %34, i64 -1
  %39 = ptrtoint %"class.spdy::HpackEntry"** %38 to i64
  %40 = sub i64 %39, %37
  %41 = lshr i64 %40, 3
  %42 = xor i64 %41, -1
  %43 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %34, i64 %42
  store %"class.spdy::HpackEntry"** %43, %"class.spdy::HpackEntry"*** %23, align 8
  br label %44

44:                                               ; preds = %36, %32, %19
  %45 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %20, i64 0, i32 0, i32 0
  %46 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %45, align 8
  %47 = icmp eq %"class.spdy::HpackEntry"** %46, null
  br i1 %47, label %50, label %48

48:                                               ; preds = %44
  %49 = bitcast %"class.spdy::HpackEntry"** %46 to i8*
  tail call void @_ZdlPv(i8* %49) #15
  br label %50

50:                                               ; preds = %44, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4spdy16HpackHeaderTable9GetByNameEN4absl11string_viewE(%"class.spdy::HpackHeaderTable"*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.absl::string_view", align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %4, i64 0, i32 0
  store i8* %1, i8** %5, align 8
  %6 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %4, i64 0, i32 1
  store i64 %2, i64* %6, align 8
  %7 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 3
  %8 = bitcast %"class.absl::flat_hash_map.20"** %7 to %"class.absl::container_internal::raw_hash_set.22"**
  %9 = load %"class.absl::container_internal::raw_hash_set.22"*, %"class.absl::container_internal::raw_hash_set.22"** %8, align 8
  %10 = call { i8*, %"union.absl::container_internal::map_slot_type.23"* } @_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_(%"class.absl::container_internal::raw_hash_set.22"* %9, %"class.absl::string_view"* nonnull dereferenceable(16) %4)
  %11 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %10, 0
  %12 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %10, 1
  %13 = icmp eq i8* %11, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %3
  %15 = load i8, i8* %11, align 1
  %16 = icmp sgt i8 %15, -1
  br i1 %16, label %37, label %17, !prof !2

17:                                               ; preds = %14
  call void @llvm.trap() #11
  unreachable

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0
  %20 = call { i8*, %"union.absl::container_internal::map_slot_type.23"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_(%"class.absl::container_internal::raw_hash_set.22"* %19, %"class.absl::string_view"* nonnull dereferenceable(16) %4)
  %21 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %20, 0
  %22 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %20, 1
  %23 = icmp eq i8* %21, null
  br i1 %23, label %35, label %24

24:                                               ; preds = %18
  %25 = load i8, i8* %21, align 1
  %26 = icmp sgt i8 %25, -1
  br i1 %26, label %28, label %27, !prof !2

27:                                               ; preds = %24
  call void @llvm.trap() #11
  unreachable

28:                                               ; preds = %24
  %29 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 9
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %22, i64 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %30, 61
  %34 = sub i64 %33, %32
  br label %35

35:                                               ; preds = %18, %28
  %36 = phi i64 [ %34, %28 ], [ 0, %18 ]
  ret i64 %36

37:                                               ; preds = %14
  %38 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %12, i64 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = add i64 %39, 1
  ret i64 %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type.23"* } @_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_14const_iteratorERKT_(%"class.absl::container_internal::raw_hash_set.22"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #11
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %71, %2
  %32 = phi i64 [ %22, %2 ], [ %73, %71 ]
  %33 = phi i64 [ 0, %2 ], [ %72, %71 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %67, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %27, align 8
  br label %44

44:                                               ; preds = %60, %41
  %45 = phi i32 [ %42, %41 ], [ %62, %60 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #11, !range !3
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %43, i64 %49
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %43, i64 %49, i32 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, %29
  br i1 %55, label %56, label %60, !prof !4

56:                                               ; preds = %44
  br i1 %30, label %64, label %57

57:                                               ; preds = %56
  %58 = tail call i32 @bcmp(i8* %52, i8* %28, i64 %29) #11
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60, !prof !2

60:                                               ; preds = %57, %44
  %61 = add i32 %45, -1
  %62 = and i32 %61, %45
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %67, label %44

64:                                               ; preds = %57, %56
  %65 = getelementptr inbounds i8, i8* %16, i64 %49
  %66 = icmp ne i8* %65, null
  tail call void @llvm.assume(i1 %66) #11
  br label %74

67:                                               ; preds = %60, %31
  %68 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %71, label %74, !prof !5

71:                                               ; preds = %67
  %72 = add i64 %33, 16
  %73 = add i64 %72, %34
  br label %31

74:                                               ; preds = %67, %64
  %75 = phi %"union.absl::container_internal::map_slot_type.23"* [ %50, %64 ], [ undef, %67 ]
  %76 = phi i8* [ %65, %64 ], [ null, %67 ]
  %77 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } undef, i8* %76, 0
  %78 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %77, %"union.absl::container_internal::map_slot_type.23"* %75, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type.23"* } %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type.23"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_(%"class.absl::container_internal::raw_hash_set.22"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #11
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %71, %2
  %32 = phi i64 [ %22, %2 ], [ %73, %71 ]
  %33 = phi i64 [ 0, %2 ], [ %72, %71 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %67, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %27, align 8
  br label %44

44:                                               ; preds = %60, %41
  %45 = phi i32 [ %42, %41 ], [ %62, %60 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #11, !range !3
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %43, i64 %49
  %51 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %50, i64 0, i32 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %43, i64 %49, i32 0, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp eq i64 %54, %29
  br i1 %55, label %56, label %60, !prof !4

56:                                               ; preds = %44
  br i1 %30, label %64, label %57

57:                                               ; preds = %56
  %58 = tail call i32 @bcmp(i8* %52, i8* %28, i64 %29) #11
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60, !prof !2

60:                                               ; preds = %57, %44
  %61 = add i32 %45, -1
  %62 = and i32 %61, %45
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %67, label %44

64:                                               ; preds = %57, %56
  %65 = getelementptr inbounds i8, i8* %16, i64 %49
  %66 = icmp ne i8* %65, null
  tail call void @llvm.assume(i1 %66) #11
  br label %74

67:                                               ; preds = %60, %31
  %68 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %71, label %74, !prof !5

71:                                               ; preds = %67
  %72 = add i64 %33, 16
  %73 = add i64 %72, %34
  br label %31

74:                                               ; preds = %67, %64
  %75 = phi %"union.absl::container_internal::map_slot_type.23"* [ %50, %64 ], [ undef, %67 ]
  %76 = phi i8* [ %65, %64 ], [ null, %67 ]
  %77 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } undef, i8* %76, 0
  %78 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %77, %"union.absl::container_internal::map_slot_type.23"* %75, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type.23"* } %78
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4spdy16HpackHeaderTable17GetByNameAndValueEN4absl11string_viewES2_(%"class.spdy::HpackHeaderTable"*, i8*, i64, i8*, i64) local_unnamed_addr #0 align 2 {
  %6 = alloca %"struct.spdy::HpackLookupEntry", align 8
  %7 = bitcast %"struct.spdy::HpackLookupEntry"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #11
  %8 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %6, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %6, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %6, i64 0, i32 1, i32 0
  %11 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %6, i64 0, i32 1, i32 1
  store i8* %1, i8** %8, align 8
  store i64 %2, i64* %9, align 8
  store i8* %3, i8** %10, align 8
  store i64 %4, i64* %11, align 8
  %12 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 2
  %13 = bitcast %"class.absl::flat_hash_map"** %12 to %"class.absl::container_internal::raw_hash_set"**
  %14 = load %"class.absl::container_internal::raw_hash_set"*, %"class.absl::container_internal::raw_hash_set"** %13, align 8
  %15 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %16 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %15, i8* %1, i64 %2) #11
  %17 = add i64 %16, %2
  %18 = zext i64 %17 to i128
  %19 = mul nuw i128 %18, 11376068507788127593
  %20 = lshr i128 %19, 64
  %21 = xor i128 %20, %19
  %22 = trunc i128 %21 to i64
  %23 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %22, i8* %3, i64 %4) #11
  %24 = add i64 %23, %4
  %25 = zext i64 %24 to i128
  %26 = mul nuw i128 %25, 11376068507788127593
  %27 = lshr i128 %26, 64
  %28 = xor i128 %27, %26
  %29 = trunc i128 %28 to i64
  %30 = call { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"* %14, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %6, i64 %29) #11
  %31 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %30, 0
  %32 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %30, 1
  %33 = icmp eq i8* %31, null
  br i1 %33, label %42, label %34

34:                                               ; preds = %5
  %35 = load i8, i8* %31, align 1
  %36 = icmp sgt i8 %35, -1
  br i1 %36, label %38, label %37, !prof !2

37:                                               ; preds = %34
  call void @llvm.trap() #11
  unreachable

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %32, i64 0, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %40, 1
  br label %77

42:                                               ; preds = %5
  %43 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0
  %44 = load i8*, i8** %8, align 8
  %45 = load i64, i64* %9, align 8
  %46 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %15, i8* %44, i64 %45) #11
  %47 = add i64 %46, %45
  %48 = zext i64 %47 to i128
  %49 = mul nuw i128 %48, 11376068507788127593
  %50 = lshr i128 %49, 64
  %51 = xor i128 %50, %49
  %52 = trunc i128 %51 to i64
  %53 = load i8*, i8** %10, align 8
  %54 = load i64, i64* %11, align 8
  %55 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %52, i8* %53, i64 %54) #11
  %56 = add i64 %55, %54
  %57 = zext i64 %56 to i128
  %58 = mul nuw i128 %57, 11376068507788127593
  %59 = lshr i128 %58, 64
  %60 = xor i128 %59, %58
  %61 = trunc i128 %60 to i64
  %62 = call { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"* %43, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %6, i64 %61) #11
  %63 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %62, 0
  %64 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %62, 1
  %65 = icmp eq i8* %63, null
  br i1 %65, label %77, label %66

66:                                               ; preds = %42
  %67 = load i8, i8* %63, align 1
  %68 = icmp sgt i8 %67, -1
  br i1 %68, label %70, label %69, !prof !2

69:                                               ; preds = %66
  call void @llvm.trap() #11
  unreachable

70:                                               ; preds = %66
  %71 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 9
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %64, i64 0, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %72, 61
  %76 = sub i64 %75, %74
  br label %77

77:                                               ; preds = %70, %42, %38
  %78 = phi i64 [ %41, %38 ], [ %76, %70 ], [ 0, %42 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #11
  ret i64 %78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackHeaderTable10SetMaxSizeEm(%"class.spdy::HpackHeaderTable"*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #11
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 6
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = icmp ult i64 %12, %1
  br i1 %14, label %16, label %15

15:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* null, i8** %10, align 8
  br label %25

16:                                               ; preds = %2
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #11
  %18 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %12) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %17, i8* %18) #11
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store i8* %20, i8** %10, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 62, %"class.logging::CheckOpResult"* nonnull %5) #11
  %24 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #11
  br label %25

25:                                               ; preds = %15, %16, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #11
  %26 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 8
  store i64 %1, i64* %26, align 8
  %27 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 7
  %28 = load i64, i64* %27, align 8
  %29 = icmp ugt i64 %28, %1
  br i1 %29, label %30, label %116

30:                                               ; preds = %25
  %31 = sub i64 %28, %1
  %32 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %33 = load i64, i64* %32, align 8, !noalias !6
  %34 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 1
  %35 = load i64, i64* %34, align 8, !noalias !6
  %36 = add i64 %35, %33
  %37 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %38 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %37, align 8, !noalias !6
  %39 = udiv i64 %36, 85
  %40 = urem i64 %36, 85
  %41 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %38, i64 %39
  %42 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %43 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %42, align 8, !noalias !6
  %44 = icmp eq %"class.spdy::HpackEntry"** %43, %38
  br i1 %44, label %48, label %45

45:                                               ; preds = %30
  %46 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %41, align 8, !noalias !6
  %47 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %46, i64 %40
  br label %48

48:                                               ; preds = %45, %30
  %49 = phi %"class.spdy::HpackEntry"* [ null, %30 ], [ %47, %45 ]
  br label %50

50:                                               ; preds = %48, %90
  %51 = phi %"class.spdy::HpackEntry"** [ %97, %90 ], [ %43, %48 ]
  %52 = phi i64 [ %96, %90 ], [ %35, %48 ]
  %53 = phi %"class.spdy::HpackEntry"** [ %95, %90 ], [ %38, %48 ]
  %54 = phi %"class.spdy::HpackEntry"** [ %91, %90 ], [ %41, %48 ]
  %55 = phi %"class.spdy::HpackEntry"* [ %93, %90 ], [ %49, %48 ]
  %56 = phi i64 [ %83, %90 ], [ %31, %48 ]
  %57 = phi i64 [ %94, %90 ], [ 0, %48 ]
  %58 = icmp eq %"class.spdy::HpackEntry"** %51, %53
  br i1 %58, label %65, label %59

59:                                               ; preds = %50
  %60 = udiv i64 %52, 85
  %61 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 %60
  %62 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %61, align 8, !noalias !9
  %63 = urem i64 %52, 85
  %64 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %62, i64 %63
  br label %65

65:                                               ; preds = %59, %50
  %66 = phi %"class.spdy::HpackEntry"* [ %64, %59 ], [ null, %50 ]
  %67 = icmp ne %"class.spdy::HpackEntry"* %55, %66
  %68 = icmp ne i64 %56, 0
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %98

70:                                               ; preds = %65
  %71 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, align 8
  %72 = icmp eq %"class.spdy::HpackEntry"* %55, %71
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, i64 -1
  %75 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %74, align 8
  %76 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %75, i64 85
  br label %77

77:                                               ; preds = %73, %70
  %78 = phi %"class.spdy::HpackEntry"* [ %76, %73 ], [ %55, %70 ]
  %79 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %78, i64 -1
  %80 = call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %79) #11
  %81 = icmp ult i64 %80, %56
  %82 = select i1 %81, i64 %80, i64 %56
  %83 = sub i64 %56, %82
  %84 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, align 8
  %85 = icmp eq %"class.spdy::HpackEntry"* %55, %84
  br i1 %85, label %86, label %90

86:                                               ; preds = %77
  %87 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, i64 -1
  %88 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %87, align 8
  %89 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %88, i64 85
  br label %90

90:                                               ; preds = %86, %77
  %91 = phi %"class.spdy::HpackEntry"** [ %87, %86 ], [ %54, %77 ]
  %92 = phi %"class.spdy::HpackEntry"* [ %89, %86 ], [ %55, %77 ]
  %93 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %92, i64 -1
  %94 = add i64 %57, 1
  %95 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %37, align 8, !noalias !9
  %96 = load i64, i64* %34, align 8, !noalias !9
  %97 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %42, align 8, !noalias !9
  br label %50

98:                                               ; preds = %65
  call void @_ZN4spdy16HpackHeaderTable5EvictEm(%"class.spdy::HpackHeaderTable"* %0, i64 %57)
  %99 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #11
  %100 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %100, align 8
  %101 = load i64, i64* %27, align 8
  %102 = load i64, i64* %26, align 8
  %103 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103)
  %104 = icmp ugt i64 %101, %102
  br i1 %104, label %106, label %105

105:                                              ; preds = %98
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103)
  store i8* null, i8** %100, align 8
  br label %115

106:                                              ; preds = %98
  %107 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %101) #11
  %108 = call i8* @_ZN7logging15CheckOpValueStrEm(i64 %102) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %107, i8* %108) #11
  %109 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %110 = load i8*, i8** %109, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103)
  store i8* %110, i8** %100, align 8
  %111 = icmp eq i8* %110, null
  br i1 %111, label %115, label %112

112:                                              ; preds = %106
  %113 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %113) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 67, %"class.logging::CheckOpResult"* nonnull %7) #11
  %114 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %113) #11
  br label %115

115:                                              ; preds = %105, %106, %112
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #11
  br label %116

116:                                              ; preds = %115, %25
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackHeaderTable5EvictEm(%"class.spdy::HpackHeaderTable"*, i64) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"struct.spdy::HpackLookupEntry", align 8
  %5 = alloca %"class.absl::string_view", align 8
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %36, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  %11 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %13 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 9
  %14 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 7
  %15 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0
  %16 = bitcast %"struct.spdy::HpackLookupEntry"* %4 to i8*
  %17 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %4, i64 0, i32 0, i32 0
  %18 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %4, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %4, i64 0, i32 1, i32 0
  %20 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %4, i64 0, i32 1, i32 1
  %21 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %22 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %15, i64 0, i32 0
  %24 = bitcast %"class.absl::container_internal::raw_hash_set"* %15 to i64*
  %25 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %26 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %27 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0
  %28 = bitcast %"class.absl::string_view"* %5 to i8*
  %29 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 0
  %30 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %5, i64 0, i32 1
  %31 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %32 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %27, i64 0, i32 0
  %33 = bitcast %"class.absl::container_internal::raw_hash_set.22"* %27 to i64*
  %34 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 3
  %35 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  br label %37

36:                                               ; preds = %244, %2
  ret void

37:                                               ; preds = %7, %244
  %38 = phi i64 [ 0, %7 ], [ %245, %244 ]
  %39 = load i64, i64* %9, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %37
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 108, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0)) #11
  %42 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #11
  %43 = load i64, i64* %9, align 8
  br label %44

44:                                               ; preds = %37, %41
  %45 = phi i64 [ %39, %37 ], [ %43, %41 ]
  %46 = load i64, i64* %11, align 8
  %47 = add i64 %45, -1
  %48 = add i64 %47, %46
  %49 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %12, align 8
  %50 = udiv i64 %48, 85
  %51 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %49, i64 %50
  %52 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, align 8
  %53 = urem i64 %48, 85
  %54 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 %53
  %55 = load i64, i64* %13, align 8
  %56 = sub i64 %55, %45
  %57 = call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %54) #11
  %58 = load i64, i64* %14, align 8
  %59 = sub i64 %58, %57
  store i64 %59, i64* %14, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #11
  %60 = bitcast %"class.spdy::HpackEntry"* %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %60, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %44
  %65 = zext i8 %62 to i64
  %66 = ptrtoint %"class.spdy::HpackEntry"* %54 to i64
  br label %74

67:                                               ; preds = %44
  %68 = bitcast %"class.spdy::HpackEntry"* %54 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 %53, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = icmp sgt i64 %71, -1
  br i1 %72, label %74, label %73, !prof !2

73:                                               ; preds = %67
  call void @llvm.trap() #11
  unreachable

74:                                               ; preds = %64, %67
  %75 = phi i64 [ %69, %67 ], [ %66, %64 ]
  %76 = phi i64 [ %71, %67 ], [ %65, %64 ]
  %77 = inttoptr i64 %75 to i8*
  store i8* %77, i8** %17, align 8
  store i64 %76, i64* %18, align 8
  %78 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 %53, i32 1
  %79 = bitcast %"class.std::__1::basic_string"* %78 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %80 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %79, i64 0, i32 1, i32 0
  %81 = load i8, i8* %80, align 1
  %82 = icmp slt i8 %81, 0
  br i1 %82, label %86, label %83

83:                                               ; preds = %74
  %84 = zext i8 %81 to i64
  %85 = ptrtoint %"class.std::__1::basic_string"* %78 to i64
  br label %93

86:                                               ; preds = %74
  %87 = bitcast %"class.std::__1::basic_string"* %78 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 %53, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp sgt i64 %90, -1
  br i1 %91, label %93, label %92, !prof !2

92:                                               ; preds = %86
  call void @llvm.trap() #11
  unreachable

93:                                               ; preds = %83, %86
  %94 = phi i64 [ %88, %86 ], [ %85, %83 ]
  %95 = phi i64 [ %90, %86 ], [ %84, %83 ]
  %96 = inttoptr i64 %94 to i8*
  store i8* %96, i8** %19, align 8
  store i64 %95, i64* %20, align 8
  %97 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %21, i8* %77, i64 %76) #11
  %98 = add i64 %97, %76
  %99 = zext i64 %98 to i128
  %100 = mul nuw i128 %99, 11376068507788127593
  %101 = lshr i128 %100, 64
  %102 = xor i128 %101, %100
  %103 = trunc i128 %102 to i64
  %104 = load i8*, i8** %19, align 8
  %105 = load i64, i64* %20, align 8
  %106 = call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %103, i8* %104, i64 %105) #11
  %107 = add i64 %106, %105
  %108 = zext i64 %107 to i128
  %109 = mul nuw i128 %108, 11376068507788127593
  %110 = lshr i128 %109, 64
  %111 = xor i128 %110, %109
  %112 = trunc i128 %111 to i64
  %113 = call { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"* %15, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %4, i64 %112) #11
  %114 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %113, 0
  %115 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %113, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #11
  %116 = icmp eq i8* %114, null
  br i1 %116, label %120, label %117, !prof !5

117:                                              ; preds = %93
  %118 = load i8, i8* %114, align 1
  %119 = icmp sgt i8 %118, -1
  br i1 %119, label %121, label %120, !prof !2

120:                                              ; preds = %117, %93
  call void @llvm.trap() #11
  unreachable

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %115, i64 0, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = icmp eq i64 %123, %56
  br i1 %124, label %125, label %170

125:                                              ; preds = %121
  %126 = load i64, i64* %22, align 8
  %127 = add i64 %126, -1
  store i64 %127, i64* %22, align 8
  %128 = load i64, i64* %24, align 8
  %129 = ptrtoint i8* %114 to i64
  %130 = sub i64 %129, %128
  %131 = add i64 %130, -16
  %132 = load i64, i64* %25, align 8
  %133 = and i64 %131, %132
  %134 = bitcast i8* %114 to <16 x i8>*
  %135 = load <16 x i8>, <16 x i8>* %134, align 1
  %136 = icmp eq <16 x i8> %135, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %137 = bitcast <16 x i1> %136 to i16
  %138 = inttoptr i64 %128 to i8*
  %139 = getelementptr inbounds i8, i8* %138, i64 %133
  %140 = bitcast i8* %139 to <16 x i8>*
  %141 = load <16 x i8>, <16 x i8>* %140, align 1
  %142 = icmp eq <16 x i8> %141, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %143 = bitcast <16 x i1> %142 to i16
  %144 = icmp ne i16 %143, 0
  %145 = icmp ne i16 %137, 0
  %146 = and i1 %145, %144
  br i1 %146, label %147, label %157

147:                                              ; preds = %125
  %148 = zext i16 %137 to i32
  %149 = zext i16 %143 to i32
  %150 = call i32 @llvm.cttz.i32(i32 %148, i1 false) #11, !range !3
  %151 = shl nuw i32 %149, 16
  %152 = call i32 @llvm.ctlz.i32(i32 %151, i1 false) #11, !range !3
  %153 = add nuw nsw i32 %152, %150
  %154 = icmp ult i32 %153, 16
  %155 = zext i1 %154 to i64
  %156 = select i1 %154, i8 -128, i8 -2
  br label %157

157:                                              ; preds = %125, %147
  %158 = phi i64 [ 0, %125 ], [ %155, %147 ]
  %159 = phi i8 [ -2, %125 ], [ %156, %147 ]
  %160 = getelementptr inbounds i8, i8* %138, i64 %130
  store i8 %159, i8* %160, align 1
  %161 = load i8*, i8** %23, align 8
  %162 = add i64 %130, -15
  %163 = load i64, i64* %25, align 8
  %164 = and i64 %163, %162
  %165 = and i64 %163, 15
  %166 = add i64 %164, %165
  %167 = getelementptr inbounds i8, i8* %161, i64 %166
  store i8 %159, i8* %167, align 1
  %168 = load i64, i64* %26, align 8
  %169 = add i64 %168, %158
  store i64 %169, i64* %26, align 8
  br label %170

170:                                              ; preds = %157, %121
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %28) #11
  %171 = load i8, i8* %61, align 1
  %172 = icmp slt i8 %171, 0
  br i1 %172, label %176, label %173

173:                                              ; preds = %170
  %174 = zext i8 %171 to i64
  %175 = ptrtoint %"class.spdy::HpackEntry"* %54 to i64
  br label %183

176:                                              ; preds = %170
  %177 = bitcast %"class.spdy::HpackEntry"* %54 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 %53, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %180 = load i64, i64* %179, align 8
  %181 = icmp sgt i64 %180, -1
  br i1 %181, label %183, label %182, !prof !2

182:                                              ; preds = %176
  call void @llvm.trap() #11
  unreachable

183:                                              ; preds = %173, %176
  %184 = phi i64 [ %178, %176 ], [ %175, %173 ]
  %185 = phi i64 [ %180, %176 ], [ %174, %173 ]
  %186 = inttoptr i64 %184 to i8*
  store i8* %186, i8** %29, align 8
  store i64 %185, i64* %30, align 8
  %187 = call { i8*, %"union.absl::container_internal::map_slot_type.23"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE4findIS3_EENSE_8iteratorERKT_(%"class.absl::container_internal::raw_hash_set.22"* %27, %"class.absl::string_view"* nonnull dereferenceable(16) %5)
  %188 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %187, 0
  %189 = extractvalue { i8*, %"union.absl::container_internal::map_slot_type.23"* } %187, 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %28) #11
  %190 = icmp eq i8* %188, null
  br i1 %190, label %194, label %191, !prof !5

191:                                              ; preds = %183
  %192 = load i8, i8* %188, align 1
  %193 = icmp sgt i8 %192, -1
  br i1 %193, label %195, label %194, !prof !2

194:                                              ; preds = %191, %183
  call void @llvm.trap() #11
  unreachable

195:                                              ; preds = %191
  %196 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %189, i64 0, i32 0, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = icmp eq i64 %197, %56
  br i1 %198, label %199, label %244

199:                                              ; preds = %195
  %200 = load i64, i64* %31, align 8
  %201 = add i64 %200, -1
  store i64 %201, i64* %31, align 8
  %202 = load i64, i64* %33, align 8
  %203 = ptrtoint i8* %188 to i64
  %204 = sub i64 %203, %202
  %205 = add i64 %204, -16
  %206 = load i64, i64* %34, align 8
  %207 = and i64 %205, %206
  %208 = bitcast i8* %188 to <16 x i8>*
  %209 = load <16 x i8>, <16 x i8>* %208, align 1
  %210 = icmp eq <16 x i8> %209, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %211 = bitcast <16 x i1> %210 to i16
  %212 = inttoptr i64 %202 to i8*
  %213 = getelementptr inbounds i8, i8* %212, i64 %207
  %214 = bitcast i8* %213 to <16 x i8>*
  %215 = load <16 x i8>, <16 x i8>* %214, align 1
  %216 = icmp eq <16 x i8> %215, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %217 = bitcast <16 x i1> %216 to i16
  %218 = icmp ne i16 %217, 0
  %219 = icmp ne i16 %211, 0
  %220 = and i1 %219, %218
  br i1 %220, label %221, label %231

221:                                              ; preds = %199
  %222 = zext i16 %211 to i32
  %223 = zext i16 %217 to i32
  %224 = call i32 @llvm.cttz.i32(i32 %222, i1 false) #11, !range !3
  %225 = shl nuw i32 %223, 16
  %226 = call i32 @llvm.ctlz.i32(i32 %225, i1 false) #11, !range !3
  %227 = add nuw nsw i32 %226, %224
  %228 = icmp ult i32 %227, 16
  %229 = zext i1 %228 to i64
  %230 = select i1 %228, i8 -128, i8 -2
  br label %231

231:                                              ; preds = %199, %221
  %232 = phi i64 [ 0, %199 ], [ %229, %221 ]
  %233 = phi i8 [ -2, %199 ], [ %230, %221 ]
  %234 = getelementptr inbounds i8, i8* %212, i64 %204
  store i8 %233, i8* %234, align 1
  %235 = load i8*, i8** %32, align 8
  %236 = add i64 %204, -15
  %237 = load i64, i64* %34, align 8
  %238 = and i64 %237, %236
  %239 = and i64 %237, 15
  %240 = add i64 %238, %239
  %241 = getelementptr inbounds i8, i8* %235, i64 %240
  store i8 %233, i8* %241, align 1
  %242 = load i64, i64* %35, align 8
  %243 = add i64 %242, %232
  store i64 %243, i64* %35, align 8
  br label %244

244:                                              ; preds = %231, %195
  call void @_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE8pop_backEv(%"class.std::__1::deque"* %8)
  %245 = add nuw i64 %38, 1
  %246 = icmp eq i64 %245, %1
  br i1 %246, label %36, label %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4spdy16HpackHeaderTable22EvictionCountToReclaimEm(%"class.spdy::HpackHeaderTable"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !12
  %5 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = load i64, i64* %5, align 8, !noalias !12
  %7 = add i64 %6, %4
  %8 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %9 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %8, align 8, !noalias !12
  %10 = udiv i64 %7, 85
  %11 = urem i64 %7, 85
  %12 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %9, i64 %10
  %13 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %14 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %13, align 8, !noalias !12
  %15 = icmp eq %"class.spdy::HpackEntry"** %14, %9
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %12, align 8, !noalias !12
  %18 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %17, i64 %11
  br label %19

19:                                               ; preds = %2, %16
  %20 = phi %"class.spdy::HpackEntry"* [ %18, %16 ], [ null, %2 ]
  br label %21

21:                                               ; preds = %19, %62
  %22 = phi %"class.spdy::HpackEntry"** [ %69, %62 ], [ %14, %19 ]
  %23 = phi i64 [ %68, %62 ], [ %6, %19 ]
  %24 = phi %"class.spdy::HpackEntry"** [ %67, %62 ], [ %9, %19 ]
  %25 = phi %"class.spdy::HpackEntry"** [ %63, %62 ], [ %12, %19 ]
  %26 = phi %"class.spdy::HpackEntry"* [ %65, %62 ], [ %20, %19 ]
  %27 = phi i64 [ %55, %62 ], [ %1, %19 ]
  %28 = phi i64 [ %66, %62 ], [ 0, %19 ]
  %29 = icmp eq %"class.spdy::HpackEntry"** %22, %24
  br i1 %29, label %36, label %30

30:                                               ; preds = %21
  %31 = udiv i64 %23, 85
  %32 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %24, i64 %31
  %33 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %32, align 8, !noalias !15
  %34 = urem i64 %23, 85
  %35 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %33, i64 %34
  br label %36

36:                                               ; preds = %21, %30
  %37 = phi %"class.spdy::HpackEntry"* [ %35, %30 ], [ null, %21 ]
  %38 = icmp ne %"class.spdy::HpackEntry"* %26, %37
  %39 = icmp ne i64 %27, 0
  %40 = and i1 %39, %38
  br i1 %40, label %42, label %41

41:                                               ; preds = %36
  ret i64 %28

42:                                               ; preds = %36
  %43 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, align 8
  %44 = icmp eq %"class.spdy::HpackEntry"* %26, %43
  br i1 %44, label %45, label %49

45:                                               ; preds = %42
  %46 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, i64 -1
  %47 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %46, align 8
  %48 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %47, i64 85
  br label %49

49:                                               ; preds = %42, %45
  %50 = phi %"class.spdy::HpackEntry"* [ %48, %45 ], [ %26, %42 ]
  %51 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %50, i64 -1
  %52 = tail call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %51) #11
  %53 = icmp ult i64 %52, %27
  %54 = select i1 %53, i64 %52, i64 %27
  %55 = sub i64 %27, %54
  %56 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, align 8
  %57 = icmp eq %"class.spdy::HpackEntry"* %26, %56
  br i1 %57, label %58, label %62

58:                                               ; preds = %49
  %59 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, i64 -1
  %60 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %59, align 8
  %61 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %60, i64 85
  br label %62

62:                                               ; preds = %49, %58
  %63 = phi %"class.spdy::HpackEntry"** [ %59, %58 ], [ %25, %49 ]
  %64 = phi %"class.spdy::HpackEntry"* [ %61, %58 ], [ %26, %49 ]
  %65 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %64, i64 -1
  %66 = add i64 %28, 1
  %67 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %8, align 8, !noalias !15
  %68 = load i64, i64* %5, align 8, !noalias !15
  %69 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %13, align 8, !noalias !15
  br label %21
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackHeaderTable26SetSettingsHeaderTableSizeEm(%"class.spdy::HpackHeaderTable"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 6
  store i64 %1, i64* %3, align 8
  tail call void @_ZN4spdy16HpackHeaderTable10SetMaxSizeEm(%"class.spdy::HpackHeaderTable"* %0, i64 %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4spdy16HpackHeaderTable11EvictionSetEN4absl11string_viewES2_PNSt3__116__deque_iteratorINS_10HpackEntryEPS5_RS5_PS6_lLl0EEESA_(%"class.spdy::HpackHeaderTable"* nocapture readonly, i8*, i64, i8*, i64, %"class.std::__1::__deque_iterator"* nocapture, %"class.std::__1::__deque_iterator"* nocapture) local_unnamed_addr #0 align 2 {
  %8 = tail call i64 @_ZNK4spdy16HpackHeaderTable21EvictionCountForEntryEN4absl11string_viewES2_(%"class.spdy::HpackHeaderTable"* %0, i8* %1, i64 %2, i8* %3, i64 %4)
  %9 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = add i64 %12, %10
  %14 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %15 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %14, align 8
  %16 = udiv i64 %13, 85
  %17 = urem i64 %13, 85
  %18 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %15, i64 %16
  %19 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %20 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %19, align 8
  %21 = icmp eq %"class.spdy::HpackEntry"** %20, %15
  br i1 %21, label %26, label %22

22:                                               ; preds = %7
  %23 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %18, align 8
  %24 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %23, i64 %17
  %25 = ptrtoint %"class.spdy::HpackEntry"* %24 to i64
  br label %26

26:                                               ; preds = %7, %22
  %27 = phi i64 [ %25, %22 ], [ 0, %7 ]
  %28 = icmp eq i64 %8, 0
  br i1 %28, label %52, label %29

29:                                               ; preds = %26
  %30 = bitcast %"class.spdy::HpackEntry"** %18 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %27, %31
  %33 = sdiv exact i64 %32, 48
  %34 = sub i64 %33, %8
  %35 = icmp sgt i64 %34, 0
  br i1 %35, label %36, label %43

36:                                               ; preds = %29
  %37 = udiv i64 %34, 85
  %38 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %18, i64 %37
  %39 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %38, align 8
  %40 = urem i64 %34, 85
  %41 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %39, i64 %40
  %42 = ptrtoint %"class.spdy::HpackEntry"* %41 to i64
  br label %52

43:                                               ; preds = %29
  %44 = sub nsw i64 84, %34
  %45 = sdiv i64 %44, -85
  %46 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %18, i64 %45
  %47 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %46, align 8
  %48 = srem i64 %44, 85
  %49 = sub nsw i64 84, %48
  %50 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %47, i64 %49
  %51 = ptrtoint %"class.spdy::HpackEntry"* %50 to i64
  br label %52

52:                                               ; preds = %26, %36, %43
  %53 = phi i64 [ %27, %26 ], [ %42, %36 ], [ %51, %43 ]
  %54 = phi %"class.spdy::HpackEntry"** [ %18, %26 ], [ %38, %36 ], [ %46, %43 ]
  %55 = inttoptr i64 %53 to %"class.spdy::HpackEntry"*
  %56 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  store %"class.spdy::HpackEntry"** %54, %"class.spdy::HpackEntry"*** %56, align 8
  %57 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  store %"class.spdy::HpackEntry"* %55, %"class.spdy::HpackEntry"** %57, align 8
  %58 = load i64, i64* %9, align 8
  %59 = load i64, i64* %11, align 8
  %60 = add i64 %59, %58
  %61 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %14, align 8
  %62 = udiv i64 %60, 85
  %63 = urem i64 %60, 85
  %64 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %61, i64 %62
  %65 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %19, align 8
  %66 = icmp eq %"class.spdy::HpackEntry"** %65, %61
  br i1 %66, label %70, label %67

67:                                               ; preds = %52
  %68 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %64, align 8
  %69 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %68, i64 %63
  br label %70

70:                                               ; preds = %52, %67
  %71 = phi %"class.spdy::HpackEntry"* [ %69, %67 ], [ null, %52 ]
  %72 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 0
  store %"class.spdy::HpackEntry"** %64, %"class.spdy::HpackEntry"*** %72, align 8
  %73 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  store %"class.spdy::HpackEntry"* %71, %"class.spdy::HpackEntry"** %73, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK4spdy16HpackHeaderTable21EvictionCountForEntryEN4absl11string_viewES2_(%"class.spdy::HpackHeaderTable"* nocapture readonly, i8*, i64, i8*, i64) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 8
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = tail call i64 @_ZN4spdy10HpackEntry4SizeEN4absl11string_viewES2_(i8* %1, i64 %2, i8* %3, i64 %4) #11
  %12 = icmp ugt i64 %11, %10
  br i1 %12, label %13, label %81

13:                                               ; preds = %5
  %14 = sub i64 %11, %10
  %15 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %16 = load i64, i64* %15, align 8, !noalias !18
  %17 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 1
  %18 = load i64, i64* %17, align 8, !noalias !18
  %19 = add i64 %18, %16
  %20 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %21 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %20, align 8, !noalias !18
  %22 = udiv i64 %19, 85
  %23 = urem i64 %19, 85
  %24 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %21, i64 %22
  %25 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %26 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %25, align 8, !noalias !18
  %27 = icmp eq %"class.spdy::HpackEntry"** %26, %21
  br i1 %27, label %31, label %28

28:                                               ; preds = %13
  %29 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %24, align 8, !noalias !18
  %30 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %29, i64 %23
  br label %31

31:                                               ; preds = %28, %13
  %32 = phi %"class.spdy::HpackEntry"* [ null, %13 ], [ %30, %28 ]
  br label %33

33:                                               ; preds = %31, %73
  %34 = phi %"class.spdy::HpackEntry"** [ %80, %73 ], [ %26, %31 ]
  %35 = phi i64 [ %79, %73 ], [ %18, %31 ]
  %36 = phi %"class.spdy::HpackEntry"** [ %78, %73 ], [ %21, %31 ]
  %37 = phi %"class.spdy::HpackEntry"** [ %74, %73 ], [ %24, %31 ]
  %38 = phi %"class.spdy::HpackEntry"* [ %76, %73 ], [ %32, %31 ]
  %39 = phi i64 [ %66, %73 ], [ %14, %31 ]
  %40 = phi i64 [ %77, %73 ], [ 0, %31 ]
  %41 = icmp eq %"class.spdy::HpackEntry"** %34, %36
  br i1 %41, label %48, label %42

42:                                               ; preds = %33
  %43 = udiv i64 %35, 85
  %44 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %36, i64 %43
  %45 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %44, align 8, !noalias !21
  %46 = urem i64 %35, 85
  %47 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %45, i64 %46
  br label %48

48:                                               ; preds = %42, %33
  %49 = phi %"class.spdy::HpackEntry"* [ %47, %42 ], [ null, %33 ]
  %50 = icmp ne %"class.spdy::HpackEntry"* %38, %49
  %51 = icmp ne i64 %39, 0
  %52 = and i1 %51, %50
  br i1 %52, label %53, label %81

53:                                               ; preds = %48
  %54 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %37, align 8
  %55 = icmp eq %"class.spdy::HpackEntry"* %38, %54
  br i1 %55, label %56, label %60

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %37, i64 -1
  %58 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %57, align 8
  %59 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %58, i64 85
  br label %60

60:                                               ; preds = %56, %53
  %61 = phi %"class.spdy::HpackEntry"* [ %59, %56 ], [ %38, %53 ]
  %62 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %61, i64 -1
  %63 = tail call i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"* %62) #11
  %64 = icmp ult i64 %63, %39
  %65 = select i1 %64, i64 %63, i64 %39
  %66 = sub i64 %39, %65
  %67 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %37, align 8
  %68 = icmp eq %"class.spdy::HpackEntry"* %38, %67
  br i1 %68, label %69, label %73

69:                                               ; preds = %60
  %70 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %37, i64 -1
  %71 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %70, align 8
  %72 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %71, i64 85
  br label %73

73:                                               ; preds = %69, %60
  %74 = phi %"class.spdy::HpackEntry"** [ %70, %69 ], [ %37, %60 ]
  %75 = phi %"class.spdy::HpackEntry"* [ %72, %69 ], [ %38, %60 ]
  %76 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %75, i64 -1
  %77 = add i64 %40, 1
  %78 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %20, align 8, !noalias !21
  %79 = load i64, i64* %17, align 8, !noalias !21
  %80 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %25, align 8, !noalias !21
  br label %33

81:                                               ; preds = %48, %5
  %82 = phi i64 [ 0, %5 ], [ %40, %48 ]
  ret i64 %82
}

declare i64 @_ZN4spdy10HpackEntry4SizeEN4absl11string_viewES2_(i8*, i64, i8*, i64) local_unnamed_addr #1

declare i64 @_ZNK4spdy10HpackEntry4SizeEv(%"class.spdy::HpackEntry"*) local_unnamed_addr #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE8pop_backEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %3, -1
  %7 = add i64 %6, %5
  %8 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %9 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %8, align 8
  %10 = udiv i64 %7, 85
  %11 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %9, i64 %10
  %12 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %11, align 8
  %13 = urem i64 %7, 85
  %14 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %12, i64 %13
  %15 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %12, i64 %13, i32 1
  %16 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZdlPv(i8* %22) #15
  br label %23

23:                                               ; preds = %20, %1
  %24 = bitcast %"class.spdy::HpackEntry"* %14 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  tail call void @_ZdlPv(i8* %30) #15
  br label %31

31:                                               ; preds = %23, %28
  %32 = load i64, i64* %2, align 8
  %33 = add i64 %32, -1
  store i64 %33, i64* %2, align 8
  %34 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %35 = bitcast %"class.spdy::HpackEntry"*** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.spdy::HpackEntry"*** %8 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %36, %38
  %40 = ashr exact i64 %39, 3
  %41 = icmp eq i64 %39, 0
  %42 = mul i64 %40, 85
  %43 = add i64 %42, -1
  %44 = select i1 %41, i64 0, i64 %43
  %45 = load i64, i64* %4, align 8
  %46 = add i64 %33, %45
  %47 = sub i64 %44, %46
  %48 = icmp ult i64 %47, 170
  br i1 %48, label %56, label %49

49:                                               ; preds = %31
  %50 = inttoptr i64 %36 to %"class.spdy::HpackEntry"**
  %51 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %50, i64 -1
  %52 = bitcast %"class.spdy::HpackEntry"** %51 to i8**
  %53 = load i8*, i8** %52, align 8
  tail call void @_ZdlPv(i8* %53) #15
  %54 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %34, align 8
  %55 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %54, i64 -1
  store %"class.spdy::HpackEntry"** %55, %"class.spdy::HpackEntry"*** %34, align 8
  br label %56

56:                                               ; preds = %31, %49
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.spdy::HpackEntry"* @_ZN4spdy16HpackHeaderTable11TryAddEntryEN4absl11string_viewES2_(%"class.spdy::HpackHeaderTable"*, i8*, i64, i8*, i64) local_unnamed_addr #3 align 2 {
  %6 = alloca %"class.spdy::HpackEntry", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = alloca %"struct.std::__1::pair.13", align 8
  %10 = alloca %"struct.std::__1::pair.13", align 8
  %11 = alloca %"class.logging::CheckError", align 8
  %12 = alloca %"struct.std::__1::pair.25", align 8
  %13 = alloca %"struct.std::__1::pair.25", align 8
  %14 = alloca %"class.logging::CheckError", align 8
  %15 = tail call i64 @_ZNK4spdy16HpackHeaderTable21EvictionCountForEntryEN4absl11string_viewES2_(%"class.spdy::HpackHeaderTable"* %0, i8* %1, i64 %2, i8* %3, i64 %4)
  tail call void @_ZN4spdy16HpackHeaderTable5EvictEm(%"class.spdy::HpackHeaderTable"* %0, i64 %15)
  %16 = tail call i64 @_ZN4spdy10HpackEntry4SizeEN4absl11string_viewES2_(i8* %1, i64 %2, i8* %3, i64 %4) #11
  %17 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 8
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 7
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %18, %20
  %22 = icmp ugt i64 %16, %21
  br i1 %22, label %462, label %23

23:                                               ; preds = %5
  %24 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 9
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1
  %27 = bitcast %"class.spdy::HpackEntry"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %27) #11
  %28 = icmp eq i8* %1, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %30, i8 0, i64 24, i1 false) #11, !alias.scope !24
  br label %56

31:                                               ; preds = %23
  %32 = icmp ugt i64 %2, -17
  br i1 %32, label %33, label %35

33:                                               ; preds = %31
  %34 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %34) #16
  unreachable

35:                                               ; preds = %31
  %36 = icmp ult i64 %2, 23
  br i1 %36, label %45, label %37

37:                                               ; preds = %35
  %38 = add nuw i64 %2, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #15
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %40, i8** %41, align 8, !alias.scope !24
  %42 = or i64 %39, -9223372036854775808
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %42, i64* %43, align 8, !alias.scope !24
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %44, align 8, !alias.scope !24
  br label %51

45:                                               ; preds = %35
  %46 = trunc i64 %2 to i8
  %47 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %48 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %47, i64 0, i32 1, i32 0
  store i8 %46, i8* %48, align 1, !alias.scope !24
  %49 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  %50 = icmp eq i64 %2, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %45, %37
  %52 = phi i8* [ %40, %37 ], [ %49, %45 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %52, i8* nonnull align 1 %1, i64 %2, i1 false) #11
  br label %53

53:                                               ; preds = %51, %45
  %54 = phi i8* [ %49, %45 ], [ %52, %51 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %2
  store i8 0, i8* %55, align 1
  br label %56

56:                                               ; preds = %29, %53
  %57 = icmp eq i8* %3, null
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %59, i8 0, i64 24, i1 false) #11, !alias.scope !27
  br label %85

60:                                               ; preds = %56
  %61 = icmp ugt i64 %4, -17
  br i1 %61, label %62, label %64

62:                                               ; preds = %60
  %63 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %63) #16
  unreachable

64:                                               ; preds = %60
  %65 = icmp ult i64 %4, 23
  br i1 %65, label %74, label %66

66:                                               ; preds = %64
  %67 = add nuw i64 %4, 16
  %68 = and i64 %67, -16
  %69 = tail call i8* @_Znwm(i64 %68) #15
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %69, i8** %70, align 8, !alias.scope !27
  %71 = or i64 %68, -9223372036854775808
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %71, i64* %72, align 8, !alias.scope !27
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %4, i64* %73, align 8, !alias.scope !27
  br label %80

74:                                               ; preds = %64
  %75 = trunc i64 %4 to i8
  %76 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %77 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %76, i64 0, i32 1, i32 0
  store i8 %75, i8* %77, align 1, !alias.scope !27
  %78 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %79 = icmp eq i64 %4, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %74, %66
  %81 = phi i8* [ %69, %66 ], [ %78, %74 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %81, i8* nonnull align 1 %3, i64 %4, i1 false) #11
  br label %82

82:                                               ; preds = %80, %74
  %83 = phi i8* [ %78, %74 ], [ %81, %80 ]
  %84 = getelementptr inbounds i8, i8* %83, i64 %4
  store i8 0, i8* %84, align 1
  br label %85

85:                                               ; preds = %58, %82
  call void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"* nonnull %6, %"class.std::__1::basic_string"* nonnull %7, %"class.std::__1::basic_string"* nonnull %8) #11
  %86 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %85
  call void @_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE20__add_front_capacityEv(%"class.std::__1::deque"* %26) #11
  %90 = load i64, i64* %86, align 8
  br label %91

91:                                               ; preds = %89, %85
  %92 = phi i64 [ %90, %89 ], [ %87, %85 ]
  %93 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %94 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %93, align 8
  %95 = udiv i64 %92, 85
  %96 = urem i64 %92, 85
  %97 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %94, i64 %95
  %98 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %99 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %98, align 8
  %100 = icmp eq %"class.spdy::HpackEntry"** %99, %94
  %101 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %97, align 8
  %102 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %101, i64 %96
  %103 = select i1 %100, %"class.spdy::HpackEntry"* null, %"class.spdy::HpackEntry"* %102
  %104 = icmp eq %"class.spdy::HpackEntry"* %103, %101
  br i1 %104, label %105, label %109

105:                                              ; preds = %91
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %97, i64 -1
  %107 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %106, align 8
  %108 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %107, i64 85
  br label %109

109:                                              ; preds = %91, %105
  %110 = phi %"class.spdy::HpackEntry"* [ %108, %105 ], [ %103, %91 ]
  %111 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %110, i64 -1
  %112 = bitcast %"class.spdy::HpackEntry"* %111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* nonnull align 8 %27, i64 24, i1 false) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 0, i64 24, i1 false) #11
  %113 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %110, i64 -1, i32 1
  %114 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %6, i64 0, i32 1
  %115 = bitcast %"class.std::__1::basic_string"* %113 to i8*
  %116 = bitcast %"class.std::__1::basic_string"* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 24, i1 false) #11
  call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 24, i1 false) #11
  %117 = bitcast i64* %86 to <2 x i64>*
  %118 = load <2 x i64>, <2 x i64>* %117, align 8
  %119 = add <2 x i64> %118, <i64 -1, i64 1>
  %120 = bitcast i64* %86 to <2 x i64>*
  store <2 x i64> %119, <2 x i64>* %120, align 8
  %121 = bitcast %"class.spdy::HpackEntry"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %122 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %121, i64 0, i32 1, i32 0
  %123 = load i8, i8* %122, align 1
  %124 = icmp slt i8 %123, 0
  br i1 %124, label %125, label %128

125:                                              ; preds = %109
  %126 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %127 = load i8*, i8** %126, align 8
  call void @_ZdlPv(i8* %127) #15
  br label %128

128:                                              ; preds = %109, %125
  %129 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %130 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %129, i64 0, i32 1, i32 0
  %131 = load i8, i8* %130, align 1
  %132 = icmp slt i8 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load i8*, i8** %134, align 8
  call void @_ZdlPv(i8* %135) #15
  br label %136

136:                                              ; preds = %128, %133
  %137 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %138 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %137, i64 0, i32 1, i32 0
  %139 = load i8, i8* %138, align 1
  %140 = icmp slt i8 %139, 0
  br i1 %140, label %141, label %144

141:                                              ; preds = %136
  %142 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  call void @_ZdlPv(i8* %143) #15
  br label %144

144:                                              ; preds = %136, %141
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %27) #11
  %145 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %93, align 8
  %146 = load i64, i64* %86, align 8
  %147 = udiv i64 %146, 85
  %148 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %145, i64 %147
  %149 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %148, align 8
  %150 = urem i64 %146, 85
  %151 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150
  %152 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0
  %153 = bitcast %"struct.std::__1::pair.13"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %153) #11
  %154 = bitcast %"class.spdy::HpackEntry"* %151 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %155 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %154, i64 0, i32 1, i32 0
  %156 = load i8, i8* %155, align 1
  %157 = icmp slt i8 %156, 0
  br i1 %157, label %161, label %158

158:                                              ; preds = %144
  %159 = zext i8 %156 to i64
  %160 = ptrtoint %"class.spdy::HpackEntry"* %151 to i64
  br label %168

161:                                              ; preds = %144
  %162 = bitcast %"class.spdy::HpackEntry"* %151 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %165 = load i64, i64* %164, align 8
  %166 = icmp sgt i64 %165, -1
  br i1 %166, label %168, label %167, !prof !2

167:                                              ; preds = %161
  call void @llvm.trap() #11
  unreachable

168:                                              ; preds = %158, %161
  %169 = phi i64 [ %163, %161 ], [ %160, %158 ]
  %170 = phi i64 [ %165, %161 ], [ %159, %158 ]
  %171 = inttoptr i64 %169 to i8*
  %172 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 1
  %173 = bitcast %"class.std::__1::basic_string"* %172 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %174 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %173, i64 0, i32 1, i32 0
  %175 = load i8, i8* %174, align 1
  %176 = icmp slt i8 %175, 0
  br i1 %176, label %180, label %177

177:                                              ; preds = %168
  %178 = zext i8 %175 to i64
  %179 = ptrtoint %"class.std::__1::basic_string"* %172 to i64
  br label %187

180:                                              ; preds = %168
  %181 = bitcast %"class.std::__1::basic_string"* %172 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp sgt i64 %184, -1
  br i1 %185, label %187, label %186, !prof !2

186:                                              ; preds = %180
  call void @llvm.trap() #11
  unreachable

187:                                              ; preds = %177, %180
  %188 = phi i64 [ %182, %180 ], [ %179, %177 ]
  %189 = phi i64 [ %184, %180 ], [ %178, %177 ]
  %190 = inttoptr i64 %188 to i8*
  %191 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %9, i64 0, i32 0, i32 0, i32 0
  store i8* %171, i8** %191, align 8
  %192 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %9, i64 0, i32 0, i32 0, i32 1
  store i64 %170, i64* %192, align 8
  %193 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %9, i64 0, i32 0, i32 1, i32 0
  store i8* %190, i8** %193, align 8
  %194 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %9, i64 0, i32 0, i32 1, i32 1
  store i64 %189, i64* %194, align 8
  %195 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %9, i64 0, i32 1
  store i64 %25, i64* %195, align 8, !alias.scope !30
  %196 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %9, i64 0, i32 0
  %197 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"* %152, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %196) #11, !noalias !33
  %198 = extractvalue { i64, i8 } %197, 0
  %199 = extractvalue { i64, i8 } %197, 1
  %200 = and i8 %199, 1
  %201 = icmp eq i8 %200, 0
  br i1 %201, label %209, label %202

202:                                              ; preds = %187
  %203 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %204 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %203, align 8, !noalias !33
  %205 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %204, i64 %198
  %206 = bitcast %"union.absl::container_internal::map_slot_type"* %205 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* nonnull align 8 %153, i64 32, i1 false) #11, !noalias !33
  %207 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %204, i64 %198, i32 0, i32 1
  %208 = load i64, i64* %195, align 8, !noalias !33
  store i64 %208, i64* %207, align 8, !noalias !33
  br label %209

209:                                              ; preds = %187, %202
  %210 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %152, i64 0, i32 0
  %211 = load i8*, i8** %210, align 8, !noalias !33
  %212 = getelementptr inbounds i8, i8* %211, i64 %198
  %213 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %214 = icmp ne i8* %212, null
  call void @llvm.assume(i1 %214) #11, !noalias !33
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %153) #11
  %215 = icmp eq i8 %199, 0
  br i1 %215, label %216, label %321

216:                                              ; preds = %209
  %217 = load i8, i8* %212, align 1
  %218 = icmp sgt i8 %217, -1
  br i1 %218, label %220, label %219, !prof !2

219:                                              ; preds = %216
  call void @llvm.trap() #11
  unreachable

220:                                              ; preds = %216
  %221 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 2
  %222 = load i64, i64* %221, align 8
  %223 = add i64 %222, -1
  store i64 %223, i64* %221, align 8
  %224 = add i64 %198, -16
  %225 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 3
  %226 = load i64, i64* %225, align 8
  %227 = and i64 %224, %226
  %228 = bitcast i8* %212 to <16 x i8>*
  %229 = load <16 x i8>, <16 x i8>* %228, align 1
  %230 = icmp eq <16 x i8> %229, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %231 = bitcast <16 x i1> %230 to i16
  %232 = getelementptr inbounds i8, i8* %211, i64 %227
  %233 = bitcast i8* %232 to <16 x i8>*
  %234 = load <16 x i8>, <16 x i8>* %233, align 1
  %235 = icmp eq <16 x i8> %234, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %236 = bitcast <16 x i1> %235 to i16
  %237 = icmp ne i16 %236, 0
  %238 = icmp ne i16 %231, 0
  %239 = and i1 %238, %237
  br i1 %239, label %240, label %250

240:                                              ; preds = %220
  %241 = zext i16 %231 to i32
  %242 = zext i16 %236 to i32
  %243 = call i32 @llvm.cttz.i32(i32 %241, i1 false) #11, !range !3
  %244 = shl nuw i32 %242, 16
  %245 = call i32 @llvm.ctlz.i32(i32 %244, i1 false) #11, !range !3
  %246 = add nuw nsw i32 %245, %243
  %247 = icmp ult i32 %246, 16
  %248 = zext i1 %247 to i64
  %249 = select i1 %247, i8 -128, i8 -2
  br label %250

250:                                              ; preds = %220, %240
  %251 = phi i64 [ 0, %220 ], [ %248, %240 ]
  %252 = phi i8 [ -2, %220 ], [ %249, %240 ]
  store i8 %252, i8* %212, align 1
  %253 = load i8*, i8** %210, align 8
  %254 = add i64 %198, -15
  %255 = load i64, i64* %225, align 8
  %256 = and i64 %255, %254
  %257 = and i64 %255, 15
  %258 = add i64 %256, %257
  %259 = getelementptr inbounds i8, i8* %253, i64 %258
  store i8 %252, i8* %259, align 1
  %260 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %261 = load i64, i64* %260, align 8
  %262 = add i64 %261, %251
  store i64 %262, i64* %260, align 8
  %263 = bitcast %"struct.std::__1::pair.13"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %263) #11
  %264 = load i8, i8* %155, align 1
  %265 = icmp slt i8 %264, 0
  br i1 %265, label %269, label %266

266:                                              ; preds = %250
  %267 = zext i8 %264 to i64
  %268 = ptrtoint %"class.spdy::HpackEntry"* %151 to i64
  br label %276

269:                                              ; preds = %250
  %270 = bitcast %"class.spdy::HpackEntry"* %151 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %273 = load i64, i64* %272, align 8
  %274 = icmp sgt i64 %273, -1
  br i1 %274, label %276, label %275, !prof !2

275:                                              ; preds = %269
  call void @llvm.trap() #11
  unreachable

276:                                              ; preds = %266, %269
  %277 = phi i64 [ %271, %269 ], [ %268, %266 ]
  %278 = phi i64 [ %273, %269 ], [ %267, %266 ]
  %279 = inttoptr i64 %277 to i8*
  %280 = load i8, i8* %174, align 1
  %281 = icmp slt i8 %280, 0
  br i1 %281, label %285, label %282

282:                                              ; preds = %276
  %283 = zext i8 %280 to i64
  %284 = ptrtoint %"class.std::__1::basic_string"* %172 to i64
  br label %292

285:                                              ; preds = %276
  %286 = bitcast %"class.std::__1::basic_string"* %172 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %289 = load i64, i64* %288, align 8
  %290 = icmp sgt i64 %289, -1
  br i1 %290, label %292, label %291, !prof !2

291:                                              ; preds = %285
  call void @llvm.trap() #11
  unreachable

292:                                              ; preds = %282, %285
  %293 = phi i64 [ %287, %285 ], [ %284, %282 ]
  %294 = phi i64 [ %289, %285 ], [ %283, %282 ]
  %295 = inttoptr i64 %293 to i8*
  %296 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %10, i64 0, i32 0, i32 0, i32 0
  store i8* %279, i8** %296, align 8
  %297 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %10, i64 0, i32 0, i32 0, i32 1
  store i64 %278, i64* %297, align 8
  %298 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %10, i64 0, i32 0, i32 1, i32 0
  store i8* %295, i8** %298, align 8
  %299 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %10, i64 0, i32 0, i32 1, i32 1
  store i64 %294, i64* %299, align 8
  %300 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %10, i64 0, i32 1
  store i64 %25, i64* %300, align 8, !alias.scope !48
  %301 = getelementptr inbounds %"struct.std::__1::pair.13", %"struct.std::__1::pair.13"* %10, i64 0, i32 0
  %302 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"* %152, %"struct.spdy::HpackLookupEntry"* nonnull dereferenceable(32) %301) #11, !noalias !51
  %303 = extractvalue { i64, i8 } %302, 0
  %304 = extractvalue { i64, i8 } %302, 1
  %305 = and i8 %304, 1
  %306 = icmp eq i8 %305, 0
  br i1 %306, label %313, label %307

307:                                              ; preds = %292
  %308 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %213, align 8, !noalias !51
  %309 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %308, i64 %303
  %310 = bitcast %"union.absl::container_internal::map_slot_type"* %309 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %310, i8* nonnull align 8 %263, i64 32, i1 false) #11, !noalias !51
  %311 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %308, i64 %303, i32 0, i32 1
  %312 = load i64, i64* %300, align 8, !noalias !51
  store i64 %312, i64* %311, align 8, !noalias !51
  br label %313

313:                                              ; preds = %292, %307
  %314 = load i8*, i8** %210, align 8, !noalias !51
  %315 = getelementptr inbounds i8, i8* %314, i64 %303
  %316 = icmp ne i8* %315, null
  call void @llvm.assume(i1 %316) #11, !noalias !51
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %263) #11
  %317 = icmp eq i8 %304, 0
  br i1 %317, label %318, label %321

318:                                              ; preds = %313
  %319 = bitcast %"class.logging::CheckError"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %319) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %11, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 165, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0)) #11
  %320 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %11) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %11) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %319) #11
  br label %321

321:                                              ; preds = %318, %313, %209
  %322 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0
  %323 = bitcast %"struct.std::__1::pair.25"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %323) #11
  %324 = load i8, i8* %155, align 1
  %325 = icmp slt i8 %324, 0
  br i1 %325, label %329, label %326

326:                                              ; preds = %321
  %327 = zext i8 %324 to i64
  %328 = ptrtoint %"class.spdy::HpackEntry"* %151 to i64
  br label %336

329:                                              ; preds = %321
  %330 = bitcast %"class.spdy::HpackEntry"* %151 to i64*
  %331 = load i64, i64* %330, align 8
  %332 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %333 = load i64, i64* %332, align 8
  %334 = icmp sgt i64 %333, -1
  br i1 %334, label %336, label %335, !prof !2

335:                                              ; preds = %329
  call void @llvm.trap() #11
  unreachable

336:                                              ; preds = %326, %329
  %337 = phi i64 [ %331, %329 ], [ %328, %326 ]
  %338 = phi i64 [ %333, %329 ], [ %327, %326 ]
  %339 = inttoptr i64 %337 to i8*
  %340 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %12, i64 0, i32 0, i32 0
  store i8* %339, i8** %340, align 8
  %341 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %12, i64 0, i32 0, i32 1
  store i64 %338, i64* %341, align 8
  %342 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %12, i64 0, i32 1
  store i64 %25, i64* %342, align 8, !alias.scope !66
  %343 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %12, i64 0, i32 0
  %344 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.22"* %322, %"class.absl::string_view"* nonnull dereferenceable(16) %343) #11, !noalias !69
  %345 = extractvalue { i64, i8 } %344, 0
  %346 = extractvalue { i64, i8 } %344, 1
  %347 = and i8 %346, 1
  %348 = icmp eq i8 %347, 0
  br i1 %348, label %356, label %349

349:                                              ; preds = %336
  %350 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %351 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %350, align 8, !noalias !69
  %352 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %351, i64 %345
  %353 = bitcast %"union.absl::container_internal::map_slot_type.23"* %352 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %353, i8* nonnull align 8 %323, i64 16, i1 false) #11, !noalias !69
  %354 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %351, i64 %345, i32 0, i32 1
  %355 = load i64, i64* %342, align 8, !noalias !69
  store i64 %355, i64* %354, align 8, !noalias !69
  br label %356

356:                                              ; preds = %336, %349
  %357 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %322, i64 0, i32 0
  %358 = load i8*, i8** %357, align 8, !noalias !69
  %359 = getelementptr inbounds i8, i8* %358, i64 %345
  %360 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %361 = icmp ne i8* %359, null
  call void @llvm.assume(i1 %361) #11, !noalias !69
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %323) #11
  %362 = icmp eq i8 %346, 0
  br i1 %362, label %363, label %450

363:                                              ; preds = %356
  %364 = load i8, i8* %359, align 1
  %365 = icmp sgt i8 %364, -1
  br i1 %365, label %367, label %366, !prof !2

366:                                              ; preds = %363
  call void @llvm.trap() #11
  unreachable

367:                                              ; preds = %363
  %368 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 2
  %369 = load i64, i64* %368, align 8
  %370 = add i64 %369, -1
  store i64 %370, i64* %368, align 8
  %371 = add i64 %345, -16
  %372 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 3
  %373 = load i64, i64* %372, align 8
  %374 = and i64 %371, %373
  %375 = bitcast i8* %359 to <16 x i8>*
  %376 = load <16 x i8>, <16 x i8>* %375, align 1
  %377 = icmp eq <16 x i8> %376, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %378 = bitcast <16 x i1> %377 to i16
  %379 = getelementptr inbounds i8, i8* %358, i64 %374
  %380 = bitcast i8* %379 to <16 x i8>*
  %381 = load <16 x i8>, <16 x i8>* %380, align 1
  %382 = icmp eq <16 x i8> %381, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %383 = bitcast <16 x i1> %382 to i16
  %384 = icmp ne i16 %383, 0
  %385 = icmp ne i16 %378, 0
  %386 = and i1 %385, %384
  br i1 %386, label %387, label %397

387:                                              ; preds = %367
  %388 = zext i16 %378 to i32
  %389 = zext i16 %383 to i32
  %390 = call i32 @llvm.cttz.i32(i32 %388, i1 false) #11, !range !3
  %391 = shl nuw i32 %389, 16
  %392 = call i32 @llvm.ctlz.i32(i32 %391, i1 false) #11, !range !3
  %393 = add nuw nsw i32 %392, %390
  %394 = icmp ult i32 %393, 16
  %395 = zext i1 %394 to i64
  %396 = select i1 %394, i8 -128, i8 -2
  br label %397

397:                                              ; preds = %367, %387
  %398 = phi i64 [ 0, %367 ], [ %395, %387 ]
  %399 = phi i8 [ -2, %367 ], [ %396, %387 ]
  store i8 %399, i8* %359, align 1
  %400 = load i8*, i8** %357, align 8
  %401 = add i64 %345, -15
  %402 = load i64, i64* %372, align 8
  %403 = and i64 %402, %401
  %404 = and i64 %402, 15
  %405 = add i64 %403, %404
  %406 = getelementptr inbounds i8, i8* %400, i64 %405
  store i8 %399, i8* %406, align 1
  %407 = getelementptr inbounds %"class.spdy::HpackHeaderTable", %"class.spdy::HpackHeaderTable"* %0, i64 0, i32 5, i32 0, i32 0, i32 4, i32 0, i32 0, i32 0
  %408 = load i64, i64* %407, align 8
  %409 = add i64 %408, %398
  store i64 %409, i64* %407, align 8
  %410 = bitcast %"struct.std::__1::pair.25"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %410) #11
  %411 = load i8, i8* %155, align 1
  %412 = icmp slt i8 %411, 0
  br i1 %412, label %416, label %413

413:                                              ; preds = %397
  %414 = zext i8 %411 to i64
  %415 = ptrtoint %"class.spdy::HpackEntry"* %151 to i64
  br label %423

416:                                              ; preds = %397
  %417 = bitcast %"class.spdy::HpackEntry"* %151 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %149, i64 %150, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %420 = load i64, i64* %419, align 8
  %421 = icmp sgt i64 %420, -1
  br i1 %421, label %423, label %422, !prof !2

422:                                              ; preds = %416
  call void @llvm.trap() #11
  unreachable

423:                                              ; preds = %413, %416
  %424 = phi i64 [ %418, %416 ], [ %415, %413 ]
  %425 = phi i64 [ %420, %416 ], [ %414, %413 ]
  %426 = inttoptr i64 %424 to i8*
  %427 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %13, i64 0, i32 0, i32 0
  store i8* %426, i8** %427, align 8
  %428 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %13, i64 0, i32 0, i32 1
  store i64 %425, i64* %428, align 8
  %429 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %13, i64 0, i32 1
  store i64 %25, i64* %429, align 8, !alias.scope !84
  %430 = getelementptr inbounds %"struct.std::__1::pair.25", %"struct.std::__1::pair.25"* %13, i64 0, i32 0
  %431 = call { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.22"* %322, %"class.absl::string_view"* nonnull dereferenceable(16) %430) #11, !noalias !87
  %432 = extractvalue { i64, i8 } %431, 0
  %433 = extractvalue { i64, i8 } %431, 1
  %434 = and i8 %433, 1
  %435 = icmp eq i8 %434, 0
  br i1 %435, label %442, label %436

436:                                              ; preds = %423
  %437 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %360, align 8, !noalias !87
  %438 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %437, i64 %432
  %439 = bitcast %"union.absl::container_internal::map_slot_type.23"* %438 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %439, i8* nonnull align 8 %410, i64 16, i1 false) #11, !noalias !87
  %440 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %437, i64 %432, i32 0, i32 1
  %441 = load i64, i64* %429, align 8, !noalias !87
  store i64 %441, i64* %440, align 8, !noalias !87
  br label %442

442:                                              ; preds = %423, %436
  %443 = load i8*, i8** %357, align 8, !noalias !87
  %444 = getelementptr inbounds i8, i8* %443, i64 %432
  %445 = icmp ne i8* %444, null
  call void @llvm.assume(i1 %445) #11, !noalias !87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %410) #11
  %446 = icmp eq i8 %433, 0
  br i1 %446, label %447, label %450

447:                                              ; preds = %442
  %448 = bitcast %"class.logging::CheckError"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %448) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %14, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1, i64 0, i64 0), i32 180, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0)) #11
  %449 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %14) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %14) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %448) #11
  br label %450

450:                                              ; preds = %447, %442, %356
  %451 = load i64, i64* %19, align 8
  %452 = add i64 %451, %16
  store i64 %452, i64* %19, align 8
  %453 = load i64, i64* %24, align 8
  %454 = add i64 %453, 1
  store i64 %454, i64* %24, align 8
  %455 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %93, align 8
  %456 = load i64, i64* %86, align 8
  %457 = udiv i64 %456, 85
  %458 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %455, i64 %457
  %459 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %458, align 8
  %460 = urem i64 %456, 85
  %461 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %459, i64 %460
  br label %462

462:                                              ; preds = %5, %450
  %463 = phi %"class.spdy::HpackEntry"* [ %461, %450 ], [ null, %5 ]
  ret %"class.spdy::HpackEntry"* %463
}

declare void @_ZN4spdy10HpackEntryC1ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_(%"class.spdy::HpackEntry"*, %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*) unnamed_addr #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZNK4spdy16HpackHeaderTable19EstimateMemoryUsageEv(%"class.spdy::HpackHeaderTable"* nocapture readnone) local_unnamed_addr #5 align 2 {
  ret i64 0
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__112__deque_baseIN4spdy10HpackEntryENS_9allocatorIS2_EEE5clearEv(%"class.std::__1::__deque_base"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 1
  %3 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %4 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = udiv i64 %5, 85
  %7 = urem i64 %5, 85
  %8 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, i64 %6
  %9 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 0, i32 2
  %10 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %9, align 8
  %11 = icmp eq %"class.spdy::HpackEntry"** %10, %3
  %12 = ptrtoint %"class.spdy::HpackEntry"** %10 to i64
  %13 = ptrtoint %"class.spdy::HpackEntry"** %3 to i64
  %14 = bitcast %"class.spdy::HpackEntry"** %3 to i8**
  br i1 %11, label %15, label %17

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  br label %29

17:                                               ; preds = %1
  %18 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %8, align 8
  %19 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %18, i64 %7
  %20 = ptrtoint %"class.spdy::HpackEntry"* %19 to i64
  %21 = getelementptr inbounds %"class.std::__1::__deque_base", %"class.std::__1::__deque_base"* %0, i64 0, i32 2, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = add i64 %22, %5
  %24 = udiv i64 %23, 85
  %25 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %3, i64 %24
  %26 = load %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %25, align 8
  %27 = urem i64 %23, 85
  %28 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %26, i64 %27
  br label %29

29:                                               ; preds = %15, %17
  %30 = phi i64* [ %21, %17 ], [ %16, %15 ]
  %31 = phi i64 [ %20, %17 ], [ 0, %15 ]
  %32 = phi %"class.spdy::HpackEntry"* [ %28, %17 ], [ null, %15 ]
  %33 = inttoptr i64 %31 to %"class.spdy::HpackEntry"*
  %34 = icmp eq %"class.spdy::HpackEntry"* %32, %33
  br i1 %34, label %35, label %51

35:                                               ; preds = %29
  %36 = bitcast %"class.spdy::HpackEntry"*** %9 to i64*
  br label %43

37:                                               ; preds = %82
  %38 = bitcast %"class.spdy::HpackEntry"*** %9 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.spdy::HpackEntry"*** %2 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = inttoptr i64 %41 to i8**
  br label %43

43:                                               ; preds = %35, %37
  %44 = phi i64* [ %36, %35 ], [ %38, %37 ]
  %45 = phi i8** [ %14, %35 ], [ %42, %37 ]
  %46 = phi i64 [ %13, %35 ], [ %41, %37 ]
  %47 = phi i64 [ %12, %35 ], [ %39, %37 ]
  store i64 0, i64* %30, align 8
  %48 = sub i64 %47, %46
  %49 = ashr exact i64 %48, 3
  %50 = icmp ugt i64 %49, 2
  br i1 %50, label %87, label %98

51:                                               ; preds = %29, %82
  %52 = phi %"class.spdy::HpackEntry"* [ %85, %82 ], [ %33, %29 ]
  %53 = phi %"class.spdy::HpackEntry"** [ %84, %82 ], [ %8, %29 ]
  %54 = phi i64 [ %83, %82 ], [ %31, %29 ]
  %55 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 0, i32 1
  %56 = bitcast %"class.std::__1::basic_string"* %55 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %51
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  tail call void @_ZdlPv(i8* %62) #15
  br label %63

63:                                               ; preds = %60, %51
  %64 = inttoptr i64 %54 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %65 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %64, i64 0, i32 1, i32 0
  %66 = load i8, i8* %65, align 1
  %67 = icmp slt i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  tail call void @_ZdlPv(i8* %70) #15
  br label %71

71:                                               ; preds = %63, %68
  %72 = getelementptr inbounds %"class.spdy::HpackEntry", %"class.spdy::HpackEntry"* %52, i64 1
  %73 = ptrtoint %"class.spdy::HpackEntry"* %72 to i64
  %74 = bitcast %"class.spdy::HpackEntry"** %53 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sub i64 %73, %75
  %77 = icmp eq i64 %76, 4080
  br i1 %77, label %78, label %82

78:                                               ; preds = %71
  %79 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 1
  %80 = bitcast %"class.spdy::HpackEntry"** %79 to i64*
  %81 = load i64, i64* %80, align 8
  br label %82

82:                                               ; preds = %71, %78
  %83 = phi i64 [ %81, %78 ], [ %73, %71 ]
  %84 = phi %"class.spdy::HpackEntry"** [ %79, %78 ], [ %53, %71 ]
  %85 = inttoptr i64 %83 to %"class.spdy::HpackEntry"*
  %86 = icmp eq %"class.spdy::HpackEntry"* %32, %85
  br i1 %86, label %37, label %51

87:                                               ; preds = %43, %87
  %88 = phi i8** [ %97, %87 ], [ %45, %43 ]
  %89 = load i8*, i8** %88, align 8
  tail call void @_ZdlPv(i8* %89) #15
  %90 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %2, align 8
  %91 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 1
  store %"class.spdy::HpackEntry"** %91, %"class.spdy::HpackEntry"*** %2, align 8
  %92 = load i64, i64* %44, align 8
  %93 = ptrtoint %"class.spdy::HpackEntry"** %91 to i64
  %94 = sub i64 %92, %93
  %95 = ashr exact i64 %94, 3
  %96 = icmp ugt i64 %95, 2
  %97 = bitcast %"class.spdy::HpackEntry"** %91 to i8**
  br i1 %96, label %87, label %98

98:                                               ; preds = %87, %43
  %99 = phi i64 [ %49, %43 ], [ %95, %87 ]
  switch i64 %99, label %103 [
    i64 1, label %101
    i64 2, label %100
  ]

100:                                              ; preds = %98
  br label %101

101:                                              ; preds = %98, %100
  %102 = phi i64 [ 85, %100 ], [ 42, %98 ]
  store i64 %102, i64* %4, align 8
  br label %103

103:                                              ; preds = %101, %98
  ret void
}

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nounwind
declare void @llvm.assume(i1) #11

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = icmp ugt i64 %2, 16
  br i1 %4, label %5, label %11

5:                                                ; preds = %3
  %6 = icmp ugt i64 %2, 1024
  br i1 %6, label %7, label %9, !prof !5

7:                                                ; preds = %5
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64 %0, i8* %1, i64 %2) #11
  br label %75

9:                                                ; preds = %5
  %10 = tail call i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8* %1, i64 %2) #11
  br label %66

11:                                               ; preds = %3
  %12 = icmp ugt i64 %2, 8
  br i1 %12, label %13, label %29

13:                                               ; preds = %11
  %14 = bitcast i8* %1 to i64*
  %15 = load i64, i64* %14, align 1
  %16 = getelementptr inbounds i8, i8* %1, i64 %2
  %17 = getelementptr inbounds i8, i8* %16, i64 -8
  %18 = bitcast i8* %17 to i64*
  %19 = load i64, i64* %18, align 1
  %20 = shl i64 %2, 3
  %21 = sub nuw nsw i64 128, %20
  %22 = lshr i64 %19, %21
  %23 = add i64 %15, %0
  %24 = zext i64 %23 to i128
  %25 = mul nuw i128 %24, 11376068507788127593
  %26 = lshr i128 %25, 64
  %27 = xor i128 %26, %25
  %28 = trunc i128 %27 to i64
  br label %66

29:                                               ; preds = %11
  %30 = icmp ugt i64 %2, 3
  br i1 %30, label %31, label %44

31:                                               ; preds = %29
  %32 = bitcast i8* %1 to i32*
  %33 = load i32, i32* %32, align 1
  %34 = getelementptr inbounds i8, i8* %1, i64 %2
  %35 = getelementptr inbounds i8, i8* %34, i64 -4
  %36 = bitcast i8* %35 to i32*
  %37 = load i32, i32* %36, align 1
  %38 = zext i32 %37 to i64
  %39 = shl i64 %2, 3
  %40 = add nsw i64 %39, -32
  %41 = shl i64 %38, %40
  %42 = zext i32 %33 to i64
  %43 = or i64 %41, %42
  br label %66

44:                                               ; preds = %29
  %45 = icmp eq i64 %2, 0
  br i1 %45, label %75, label %46

46:                                               ; preds = %44
  %47 = load i8, i8* %1, align 1
  %48 = lshr i64 %2, 1
  %49 = getelementptr inbounds i8, i8* %1, i64 %48
  %50 = load i8, i8* %49, align 1
  %51 = add nsw i64 %2, -1
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %47 to i32
  %55 = zext i8 %50 to i32
  %56 = shl i64 %48, 3
  %57 = trunc i64 %56 to i32
  %58 = shl i32 %55, %57
  %59 = or i32 %58, %54
  %60 = zext i8 %53 to i32
  %61 = trunc i64 %51 to i32
  %62 = shl i32 %61, 3
  %63 = shl i32 %60, %62
  %64 = or i32 %59, %63
  %65 = zext i32 %64 to i64
  br label %66

66:                                               ; preds = %46, %31, %13, %9
  %67 = phi i64 [ %10, %9 ], [ %22, %13 ], [ %43, %31 ], [ %65, %46 ]
  %68 = phi i64 [ %0, %9 ], [ %28, %13 ], [ %0, %31 ], [ %0, %46 ]
  %69 = add i64 %68, %67
  %70 = zext i64 %69 to i128
  %71 = mul nuw i128 %70, 11376068507788127593
  %72 = lshr i128 %71, 64
  %73 = xor i128 %72, %71
  %74 = trunc i128 %73 to i64
  br label %75

75:                                               ; preds = %7, %44, %66
  %76 = phi i64 [ %8, %7 ], [ %74, %66 ], [ %0, %44 ]
  ret i64 %76
}

declare i64 @_ZN4absl13hash_internal15MixingHashState28CombineLargeContiguousImpl64EmPKhm(i64, i8*, i64) local_unnamed_addr #1

declare i64 @_ZN4absl13hash_internal15MixingHashState10WyhashImplEPKhm(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, %"union.absl::container_internal::map_slot_type"* } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE4findIS4_EENSH_8iteratorERSE_m(%"class.absl::container_internal::raw_hash_set"*, %"struct.spdy::HpackLookupEntry"* dereferenceable(32), i64) local_unnamed_addr #3 comdat align 2 {
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = lshr i64 %2, 7
  %9 = ptrtoint i8* %5 to i64
  %10 = lshr i64 %9, 12
  %11 = xor i64 %10, %8
  %12 = trunc i64 %2 to i8
  %13 = and i8 %12, 127
  %14 = insertelement <16 x i8> undef, i8 %13, i32 0
  %15 = shufflevector <16 x i8> %14, <16 x i8> undef, <16 x i32> zeroinitializer
  %16 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %20, 0
  %26 = icmp eq i64 %24, 0
  br label %27

27:                                               ; preds = %77, %3
  %28 = phi i64 [ %11, %3 ], [ %79, %77 ]
  %29 = phi i64 [ 0, %3 ], [ %78, %77 ]
  %30 = and i64 %28, %7
  %31 = getelementptr inbounds i8, i8* %5, i64 %30
  %32 = bitcast i8* %31 to <16 x i8>*
  %33 = load <16 x i8>, <16 x i8>* %32, align 1
  %34 = icmp eq <16 x i8> %15, %33
  %35 = bitcast <16 x i1> %34 to i16
  %36 = icmp eq i16 %35, 0
  br i1 %36, label %73, label %37

37:                                               ; preds = %27
  %38 = zext i16 %35 to i32
  %39 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %16, align 8
  br label %40

40:                                               ; preds = %37, %66
  %41 = phi i32 [ %38, %37 ], [ %68, %66 ]
  %42 = tail call i32 @llvm.cttz.i32(i32 %41, i1 false) #11, !range !3
  %43 = zext i32 %42 to i64
  %44 = add i64 %30, %43
  %45 = and i64 %44, %7
  %46 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45
  %47 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %46, i64 0, i32 0, i32 0, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45, i32 0, i32 0, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp eq i64 %50, %20
  br i1 %51, label %52, label %66, !prof !4

52:                                               ; preds = %40
  br i1 %25, label %56, label %53

53:                                               ; preds = %52
  %54 = tail call i32 @bcmp(i8* %48, i8* %18, i64 %20) #11
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %66, !prof !4

56:                                               ; preds = %53, %52
  %57 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45, i32 0, i32 0, i32 1, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %39, i64 %45, i32 0, i32 0, i32 1, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, %24
  br i1 %61, label %62, label %66, !prof !4

62:                                               ; preds = %56
  br i1 %26, label %70, label %63

63:                                               ; preds = %62
  %64 = tail call i32 @bcmp(i8* %58, i8* %22, i64 %24) #11
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %70, label %66, !prof !2

66:                                               ; preds = %40, %56, %53, %63
  %67 = add i32 %41, -1
  %68 = and i32 %67, %41
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %73, label %40

70:                                               ; preds = %62, %63
  %71 = getelementptr inbounds i8, i8* %5, i64 %45
  %72 = icmp ne i8* %71, null
  tail call void @llvm.assume(i1 %72) #11
  br label %80

73:                                               ; preds = %66, %27
  %74 = icmp eq <16 x i8> %33, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %75 = bitcast <16 x i1> %74 to i16
  %76 = icmp eq i16 %75, 0
  br i1 %76, label %77, label %80, !prof !5

77:                                               ; preds = %73
  %78 = add i64 %29, 16
  %79 = add i64 %78, %30
  br label %27

80:                                               ; preds = %73, %70
  %81 = phi %"union.absl::container_internal::map_slot_type"* [ %46, %70 ], [ undef, %73 ]
  %82 = phi i8* [ %71, %70 ], [ null, %73 ]
  %83 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type"* } undef, i8* %82, 0
  %84 = insertvalue { i8*, %"union.absl::container_internal::map_slot_type"* } %83, %"union.absl::container_internal::map_slot_type"* %81, 1
  ret { i8*, %"union.absl::container_internal::map_slot_type"* } %84
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE20__add_front_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.spdy::HpackEntry"*, align 8
  %3 = alloca %"class.spdy::HpackEntry"*, align 8
  %4 = alloca %"class.spdy::HpackEntry"*, align 8
  %5 = alloca %"class.spdy::HpackEntry"*, align 8
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = bitcast %"class.spdy::HpackEntry"*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.spdy::HpackEntry"*** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 3
  %14 = icmp eq i64 %12, 0
  %15 = mul i64 %13, 85
  %16 = add i64 %15, -1
  %17 = select i1 %14, i64 0, i64 %16
  %18 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, %19
  %23 = sub i64 %17, %22
  %24 = icmp ugt i64 %23, 84
  %25 = inttoptr i64 %11 to %"class.spdy::HpackEntry"**
  %26 = inttoptr i64 %8 to %"class.spdy::HpackEntry"**
  br i1 %24, label %27, label %35

27:                                               ; preds = %1
  %28 = add i64 %19, 85
  store i64 %28, i64* %18, align 8
  %29 = bitcast %"class.spdy::HpackEntry"** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #11
  store %"class.spdy::HpackEntry"* inttoptr (i64 -6148914691236517206 to %"class.spdy::HpackEntry"*), %"class.spdy::HpackEntry"** %2, align 8
  %30 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %31 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %26, i64 -1
  %32 = bitcast %"class.spdy::HpackEntry"** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %"class.spdy::HpackEntry"** %2 to i64*
  store i64 %33, i64* %34, align 8
  store %"class.spdy::HpackEntry"** %31, %"class.spdy::HpackEntry"*** %6, align 8
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer"* %30, %"class.spdy::HpackEntry"** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #11
  br label %283

35:                                               ; preds = %1
  %36 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %38 = bitcast %"class.spdy::HpackEntry"*** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.std::__1::deque"* %0 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = icmp ult i64 %12, %42
  br i1 %43, label %44, label %71

44:                                               ; preds = %35
  %45 = icmp eq i64 %11, %41
  br i1 %45, label %50, label %46

46:                                               ; preds = %44
  %47 = bitcast %"class.spdy::HpackEntry"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #11
  %48 = tail call i8* @_Znwm(i64 4080) #15
  %49 = bitcast %"class.spdy::HpackEntry"** %3 to i8**
  store i8* %48, i8** %49, align 8
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"* %36, %"class.spdy::HpackEntry"** nonnull dereferenceable(8) %3)
  br label %60

50:                                               ; preds = %44
  %51 = bitcast %"class.spdy::HpackEntry"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #11
  %52 = tail call i8* @_Znwm(i64 4080) #15
  %53 = bitcast %"class.spdy::HpackEntry"** %4 to i8**
  store i8* %52, i8** %53, align 8
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* %36, %"class.spdy::HpackEntry"** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #11
  %54 = bitcast %"class.spdy::HpackEntry"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #11
  store %"class.spdy::HpackEntry"* inttoptr (i64 -6148914691236517206 to %"class.spdy::HpackEntry"*), %"class.spdy::HpackEntry"** %5, align 8
  %55 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  %56 = getelementptr %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %55, i64 -1
  %57 = bitcast %"class.spdy::HpackEntry"** %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"class.spdy::HpackEntry"** %5 to i64*
  store i64 %58, i64* %59, align 8
  store %"class.spdy::HpackEntry"** %56, %"class.spdy::HpackEntry"*** %6, align 8
  call void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer"* %36, %"class.spdy::HpackEntry"** nonnull dereferenceable(8) %5)
  br label %60

60:                                               ; preds = %50, %46
  %61 = phi i8* [ %54, %50 ], [ %47, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #11
  %62 = load i64, i64* %7, align 8
  %63 = load i64, i64* %10, align 8
  %64 = sub i64 %62, %63
  %65 = icmp eq i64 %64, 8
  br i1 %65, label %69, label %66

66:                                               ; preds = %60
  %67 = load i64, i64* %18, align 8
  %68 = add i64 %67, 85
  br label %69

69:                                               ; preds = %60, %66
  %70 = phi i64 [ %68, %66 ], [ 42, %60 ]
  store i64 %70, i64* %18, align 8
  br label %283

71:                                               ; preds = %35
  %72 = ashr exact i64 %42, 2
  %73 = icmp eq i64 %42, 0
  %74 = select i1 %73, i64 1, i64 %72
  %75 = icmp ugt i64 %74, 2305843009213693951
  br i1 %75, label %76, label %77

76:                                               ; preds = %71
  tail call void @abort() #16
  unreachable

77:                                               ; preds = %71
  %78 = shl i64 %74, 3
  %79 = tail call i8* @_Znwm(i64 %78) #15
  %80 = bitcast i8* %79 to %"class.spdy::HpackEntry"**
  %81 = ptrtoint i8* %79 to i64
  %82 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %80, i64 %74
  %83 = ptrtoint %"class.spdy::HpackEntry"** %82 to i64
  %84 = tail call i8* @_Znwm(i64 4080) #15
  %85 = ptrtoint i8* %84 to i64
  %86 = icmp eq %"class.spdy::HpackEntry"** %82, %80
  %87 = bitcast i8* %79 to i64*
  br i1 %86, label %88, label %108

88:                                               ; preds = %77
  %89 = sub i64 %83, %81
  %90 = ashr exact i64 %89, 2
  %91 = icmp eq i64 %89, 0
  %92 = select i1 %91, i64 1, i64 %90
  %93 = icmp ugt i64 %92, 2305843009213693951
  br i1 %93, label %94, label %95

94:                                               ; preds = %88
  tail call void @abort() #16
  unreachable

95:                                               ; preds = %88
  %96 = lshr i64 %92, 2
  %97 = shl i64 %92, 3
  %98 = tail call i8* @_Znwm(i64 %97) #15
  %99 = bitcast i8* %98 to %"class.spdy::HpackEntry"**
  %100 = ptrtoint i8* %98 to i64
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 %96
  %102 = ptrtoint %"class.spdy::HpackEntry"** %101 to i64
  %103 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %99, i64 %92
  %104 = ptrtoint %"class.spdy::HpackEntry"** %103 to i64
  %105 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  tail call void @_ZdlPv(i8* nonnull %79) #15
  %106 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %9, align 8
  %107 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  br label %108

108:                                              ; preds = %77, %95
  %109 = phi %"class.spdy::HpackEntry"** [ %107, %95 ], [ %26, %77 ]
  %110 = phi %"class.spdy::HpackEntry"** [ %106, %95 ], [ %25, %77 ]
  %111 = phi i64 [ %104, %95 ], [ %83, %77 ]
  %112 = phi i64 [ %102, %95 ], [ %81, %77 ]
  %113 = phi i64 [ %100, %95 ], [ %81, %77 ]
  %114 = phi i64* [ %105, %95 ], [ %87, %77 ]
  store i64 %85, i64* %114, align 8
  %115 = inttoptr i64 %112 to %"class.spdy::HpackEntry"**
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %115, i64 1
  %117 = ptrtoint %"class.spdy::HpackEntry"** %116 to i64
  %118 = icmp eq %"class.spdy::HpackEntry"** %110, %109
  br i1 %118, label %121, label %130

119:                                              ; preds = %262
  %120 = ptrtoint %"class.spdy::HpackEntry"** %271 to i64
  br label %121

121:                                              ; preds = %119, %108
  %122 = phi i64 [ %111, %108 ], [ %263, %119 ]
  %123 = phi i64 [ %112, %108 ], [ %265, %119 ]
  %124 = phi i64 [ %113, %108 ], [ %266, %119 ]
  %125 = phi i64 [ %117, %108 ], [ %120, %119 ]
  %126 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %127 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %126, align 8
  store i64 %124, i64* %40, align 8
  store i64 %123, i64* %10, align 8
  store i64 %125, i64* %7, align 8
  store i64 %122, i64* %38, align 8
  %128 = sub i64 %125, %123
  %129 = icmp eq i64 %128, 8
  br i1 %129, label %278, label %275

130:                                              ; preds = %108, %262
  %131 = phi i64 [ %272, %262 ], [ %117, %108 ]
  %132 = phi %"class.spdy::HpackEntry"** [ %271, %262 ], [ %116, %108 ]
  %133 = phi %"class.spdy::HpackEntry"** [ %270, %262 ], [ %110, %108 ]
  %134 = phi i64 [ %266, %262 ], [ %113, %108 ]
  %135 = phi i64 [ %265, %262 ], [ %112, %108 ]
  %136 = phi i64 [ %263, %262 ], [ %111, %108 ]
  %137 = inttoptr i64 %136 to %"class.spdy::HpackEntry"**
  %138 = icmp eq %"class.spdy::HpackEntry"** %132, %137
  %139 = bitcast %"class.spdy::HpackEntry"** %132 to i64*
  br i1 %138, label %140, label %262

140:                                              ; preds = %130
  %141 = inttoptr i64 %135 to %"class.spdy::HpackEntry"**
  %142 = inttoptr i64 %134 to %"class.spdy::HpackEntry"**
  %143 = icmp ugt %"class.spdy::HpackEntry"** %141, %142
  br i1 %143, label %144, label %160

144:                                              ; preds = %140
  %145 = sub i64 %135, %134
  %146 = ashr exact i64 %145, 3
  %147 = add nsw i64 %146, 1
  %148 = sdiv i64 %147, -2
  %149 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %141, i64 %148
  %150 = sub i64 %131, %135
  %151 = ashr exact i64 %150, 3
  %152 = icmp eq i64 %150, 0
  br i1 %152, label %156, label %153

153:                                              ; preds = %144
  %154 = bitcast %"class.spdy::HpackEntry"** %149 to i8*
  %155 = inttoptr i64 %135 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %154, i8* align 8 %155, i64 %150, i1 false) #11
  br label %156

156:                                              ; preds = %153, %144
  %157 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %149, i64 %151
  %158 = ptrtoint %"class.spdy::HpackEntry"** %149 to i64
  %159 = bitcast %"class.spdy::HpackEntry"** %157 to i64*
  br label %262

160:                                              ; preds = %140
  %161 = sub i64 %136, %134
  %162 = ashr exact i64 %161, 2
  %163 = icmp eq i64 %161, 0
  %164 = select i1 %163, i64 1, i64 %162
  %165 = icmp ugt i64 %164, 2305843009213693951
  br i1 %165, label %166, label %167

166:                                              ; preds = %160
  tail call void @abort() #16
  unreachable

167:                                              ; preds = %160
  %168 = lshr i64 %164, 2
  %169 = shl i64 %164, 3
  %170 = tail call i8* @_Znwm(i64 %169) #15
  %171 = bitcast i8* %170 to %"class.spdy::HpackEntry"**
  %172 = ptrtoint i8* %170 to i64
  %173 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %171, i64 %168
  %174 = ptrtoint %"class.spdy::HpackEntry"** %173 to i64
  %175 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %171, i64 %164
  %176 = ptrtoint %"class.spdy::HpackEntry"** %175 to i64
  %177 = sub i64 %131, %135
  %178 = ashr exact i64 %177, 3
  %179 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %173, i64 %178
  %180 = icmp eq i64 %177, 0
  br i1 %180, label %255, label %181

181:                                              ; preds = %167
  %182 = add i64 %177, -8
  %183 = lshr i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 7
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %202, label %187

187:                                              ; preds = %181, %187
  %188 = phi %"class.spdy::HpackEntry"** [ %195, %187 ], [ %173, %181 ]
  %189 = phi i64 [ %196, %187 ], [ %174, %181 ]
  %190 = phi %"class.spdy::HpackEntry"** [ %197, %187 ], [ %141, %181 ]
  %191 = phi i64 [ %198, %187 ], [ %185, %181 ]
  %192 = bitcast %"class.spdy::HpackEntry"** %190 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = inttoptr i64 %189 to i64*
  store i64 %193, i64* %194, align 8
  %195 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %188, i64 1
  %196 = ptrtoint %"class.spdy::HpackEntry"** %195 to i64
  %197 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %190, i64 1
  %198 = add i64 %191, -1
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %187, !llvm.loop !102

200:                                              ; preds = %187
  %201 = ptrtoint %"class.spdy::HpackEntry"** %195 to i64
  br label %202

202:                                              ; preds = %181, %200
  %203 = phi %"class.spdy::HpackEntry"** [ %173, %181 ], [ %195, %200 ]
  %204 = phi i64 [ %174, %181 ], [ %201, %200 ]
  %205 = phi %"class.spdy::HpackEntry"** [ %141, %181 ], [ %197, %200 ]
  %206 = icmp ult i64 %182, 56
  br i1 %206, label %253, label %207

207:                                              ; preds = %202, %207
  %208 = phi %"class.spdy::HpackEntry"** [ %249, %207 ], [ %203, %202 ]
  %209 = phi i64 [ %250, %207 ], [ %204, %202 ]
  %210 = phi %"class.spdy::HpackEntry"** [ %251, %207 ], [ %205, %202 ]
  %211 = bitcast %"class.spdy::HpackEntry"** %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = inttoptr i64 %209 to i64*
  store i64 %212, i64* %213, align 8
  %214 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 1
  %215 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 1
  %216 = bitcast %"class.spdy::HpackEntry"** %215 to i64*
  %217 = load i64, i64* %216, align 8
  %218 = bitcast %"class.spdy::HpackEntry"** %214 to i64*
  store i64 %217, i64* %218, align 8
  %219 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 2
  %220 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 2
  %221 = bitcast %"class.spdy::HpackEntry"** %220 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = bitcast %"class.spdy::HpackEntry"** %219 to i64*
  store i64 %222, i64* %223, align 8
  %224 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 3
  %225 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 3
  %226 = bitcast %"class.spdy::HpackEntry"** %225 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = bitcast %"class.spdy::HpackEntry"** %224 to i64*
  store i64 %227, i64* %228, align 8
  %229 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 4
  %230 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 4
  %231 = bitcast %"class.spdy::HpackEntry"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.spdy::HpackEntry"** %229 to i64*
  store i64 %232, i64* %233, align 8
  %234 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 5
  %235 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 5
  %236 = bitcast %"class.spdy::HpackEntry"** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = bitcast %"class.spdy::HpackEntry"** %234 to i64*
  store i64 %237, i64* %238, align 8
  %239 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 6
  %240 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 6
  %241 = bitcast %"class.spdy::HpackEntry"** %240 to i64*
  %242 = load i64, i64* %241, align 8
  %243 = bitcast %"class.spdy::HpackEntry"** %239 to i64*
  store i64 %242, i64* %243, align 8
  %244 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 7
  %245 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 7
  %246 = bitcast %"class.spdy::HpackEntry"** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"class.spdy::HpackEntry"** %244 to i64*
  store i64 %247, i64* %248, align 8
  %249 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %208, i64 8
  %250 = ptrtoint %"class.spdy::HpackEntry"** %249 to i64
  %251 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %210, i64 8
  %252 = icmp eq %"class.spdy::HpackEntry"** %179, %249
  br i1 %252, label %253, label %207

253:                                              ; preds = %207, %202
  %254 = ptrtoint %"class.spdy::HpackEntry"** %179 to i64
  br label %255

255:                                              ; preds = %253, %167
  %256 = phi i64 [ %254, %253 ], [ %174, %167 ]
  %257 = inttoptr i64 %256 to %"class.spdy::HpackEntry"**
  %258 = icmp eq i64 %134, 0
  %259 = inttoptr i64 %256 to i64*
  br i1 %258, label %262, label %260

260:                                              ; preds = %255
  %261 = inttoptr i64 %134 to i8*
  tail call void @_ZdlPv(i8* %261) #15
  br label %262

262:                                              ; preds = %130, %156, %255, %260
  %263 = phi i64 [ %136, %156 ], [ %176, %255 ], [ %176, %260 ], [ %136, %130 ]
  %264 = phi %"class.spdy::HpackEntry"** [ %157, %156 ], [ %257, %255 ], [ %257, %260 ], [ %132, %130 ]
  %265 = phi i64 [ %158, %156 ], [ %174, %255 ], [ %174, %260 ], [ %135, %130 ]
  %266 = phi i64 [ %134, %156 ], [ %172, %255 ], [ %172, %260 ], [ %134, %130 ]
  %267 = phi i64* [ %159, %156 ], [ %259, %255 ], [ %259, %260 ], [ %139, %130 ]
  %268 = bitcast %"class.spdy::HpackEntry"** %133 to i64*
  %269 = load i64, i64* %268, align 8
  store i64 %269, i64* %267, align 8
  %270 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %133, i64 1
  %271 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %264, i64 1
  %272 = ptrtoint %"class.spdy::HpackEntry"** %271 to i64
  %273 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %6, align 8
  %274 = icmp eq %"class.spdy::HpackEntry"** %270, %273
  br i1 %274, label %119, label %130

275:                                              ; preds = %121
  %276 = load i64, i64* %18, align 8
  %277 = add i64 %276, 85
  br label %278

278:                                              ; preds = %275, %121
  %279 = phi i64 [ %277, %275 ], [ 42, %121 ]
  store i64 %279, i64* %18, align 8
  %280 = icmp eq %"class.spdy::HpackEntry"** %127, null
  br i1 %280, label %283, label %281

281:                                              ; preds = %278
  %282 = bitcast %"class.spdy::HpackEntry"** %127 to i8*
  tail call void @_ZdlPv(i8* %282) #15
  br label %283

283:                                              ; preds = %281, %278, %69, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer"*, %"class.spdy::HpackEntry"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = icmp eq %"class.spdy::HpackEntry"** %4, %6
  %8 = ptrtoint %"class.spdy::HpackEntry"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %12, align 8
  %14 = icmp ult %"class.spdy::HpackEntry"** %11, %13
  %15 = bitcast %"class.spdy::HpackEntry"*** %12 to i64*
  %16 = ptrtoint %"class.spdy::HpackEntry"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %11, i64 %22
  %24 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, i64 %29
  %31 = bitcast %"class.spdy::HpackEntry"** %30 to i8*
  %32 = bitcast %"class.spdy::HpackEntry"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.spdy::HpackEntry"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.spdy::HpackEntry"** [ %30, %27 ], [ %23, %17 ]
  store %"class.spdy::HpackEntry"** %36, %"class.spdy::HpackEntry"*** %3, align 8
  %37 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %35, i64 %22
  store %"class.spdy::HpackEntry"** %37, %"class.spdy::HpackEntry"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to %"class.spdy::HpackEntry"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %48
  %54 = ptrtoint %"class.spdy::HpackEntry"** %53 to i64
  %55 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %43
  %56 = ptrtoint %"class.spdy::HpackEntry"** %55 to i64
  %57 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %58 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.spdy::HpackEntry"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.spdy::HpackEntry"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.spdy::HpackEntry"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %70, i64 1
  %78 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  %79 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !104

82:                                               ; preds = %69
  %83 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.spdy::HpackEntry"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.spdy::HpackEntry"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.spdy::HpackEntry"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.spdy::HpackEntry"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.spdy::HpackEntry"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 1
  %97 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 1
  %98 = bitcast %"class.spdy::HpackEntry"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.spdy::HpackEntry"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 2
  %102 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 2
  %103 = bitcast %"class.spdy::HpackEntry"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 3
  %107 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 3
  %108 = bitcast %"class.spdy::HpackEntry"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 4
  %112 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 4
  %113 = bitcast %"class.spdy::HpackEntry"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 5
  %117 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 5
  %118 = bitcast %"class.spdy::HpackEntry"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 6
  %122 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 6
  %123 = bitcast %"class.spdy::HpackEntry"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 7
  %127 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 7
  %128 = bitcast %"class.spdy::HpackEntry"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 8
  %132 = ptrtoint %"class.spdy::HpackEntry"** %131 to i64
  %133 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 8
  %134 = icmp eq %"class.spdy::HpackEntry"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.spdy::HpackEntry"** %61 to i64
  %137 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.spdy::HpackEntry"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.spdy::HpackEntry"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.spdy::HpackEntry"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.spdy::HpackEntry"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.spdy::HpackEntry"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.spdy::HpackEntry"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %148, i64 -1
  %150 = bitcast %"class.spdy::HpackEntry"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.spdy::HpackEntry"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %154 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %153, i64 -1
  store %"class.spdy::HpackEntry"** %154, %"class.spdy::HpackEntry"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"*, %"class.spdy::HpackEntry"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = icmp eq %"class.spdy::HpackEntry"** %4, %6
  %8 = ptrtoint %"class.spdy::HpackEntry"** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %12, align 8
  %14 = icmp ult %"class.spdy::HpackEntry"** %11, %13
  %15 = bitcast %"class.spdy::HpackEntry"*** %12 to i64*
  %16 = ptrtoint %"class.spdy::HpackEntry"** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %11, i64 %22
  %24 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, i64 %29
  %31 = bitcast %"class.spdy::HpackEntry"** %30 to i8*
  %32 = bitcast %"class.spdy::HpackEntry"** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #11
  %33 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.spdy::HpackEntry"** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.spdy::HpackEntry"** [ %30, %27 ], [ %23, %17 ]
  store %"class.spdy::HpackEntry"** %36, %"class.spdy::HpackEntry"*** %3, align 8
  %37 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %35, i64 %22
  store %"class.spdy::HpackEntry"** %37, %"class.spdy::HpackEntry"*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to %"class.spdy::HpackEntry"**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %48
  %54 = ptrtoint %"class.spdy::HpackEntry"** %53 to i64
  %55 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %51, i64 %43
  %56 = ptrtoint %"class.spdy::HpackEntry"** %55 to i64
  %57 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %58 = ptrtoint %"class.spdy::HpackEntry"** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %"class.spdy::HpackEntry"** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %"class.spdy::HpackEntry"** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %"class.spdy::HpackEntry"** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %70, i64 1
  %78 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  %79 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !105

82:                                               ; preds = %69
  %83 = ptrtoint %"class.spdy::HpackEntry"** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %"class.spdy::HpackEntry"** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %"class.spdy::HpackEntry"** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %"class.spdy::HpackEntry"** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %"class.spdy::HpackEntry"** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %"class.spdy::HpackEntry"** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 1
  %97 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 1
  %98 = bitcast %"class.spdy::HpackEntry"** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.spdy::HpackEntry"** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 2
  %102 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 2
  %103 = bitcast %"class.spdy::HpackEntry"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 3
  %107 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 3
  %108 = bitcast %"class.spdy::HpackEntry"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 4
  %112 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 4
  %113 = bitcast %"class.spdy::HpackEntry"** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 5
  %117 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 5
  %118 = bitcast %"class.spdy::HpackEntry"** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 6
  %122 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 6
  %123 = bitcast %"class.spdy::HpackEntry"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 7
  %127 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 7
  %128 = bitcast %"class.spdy::HpackEntry"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %90, i64 8
  %132 = ptrtoint %"class.spdy::HpackEntry"** %131 to i64
  %133 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %92, i64 8
  %134 = icmp eq %"class.spdy::HpackEntry"** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %"class.spdy::HpackEntry"** %61 to i64
  %137 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %"class.spdy::HpackEntry"** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %"class.spdy::HpackEntry"*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %"class.spdy::HpackEntry"*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %"class.spdy::HpackEntry"** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %"class.spdy::HpackEntry"** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %"class.spdy::HpackEntry"** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %148, i64 -1
  %150 = bitcast %"class.spdy::HpackEntry"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %"class.spdy::HpackEntry"** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %154 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %153, i64 -1
  store %"class.spdy::HpackEntry"** %154, %"class.spdy::HpackEntry"*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN4spdy10HpackEntryENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, %"class.spdy::HpackEntry"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %5, align 8
  %7 = icmp eq %"class.spdy::HpackEntry"** %4, %6
  %8 = ptrtoint %"class.spdy::HpackEntry"** %6 to i64
  %9 = bitcast %"class.spdy::HpackEntry"** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %13, align 8
  %15 = icmp ugt %"class.spdy::HpackEntry"** %12, %14
  %16 = ptrtoint %"class.spdy::HpackEntry"** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.spdy::HpackEntry"** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %12, i64 %22
  %24 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.spdy::HpackEntry"** %23 to i8*
  %30 = bitcast %"class.spdy::HpackEntry"** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #11
  %31 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.spdy::HpackEntry"** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %23, i64 %26
  store %"class.spdy::HpackEntry"** %34, %"class.spdy::HpackEntry"*** %3, align 8
  %35 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %33, i64 %22
  store %"class.spdy::HpackEntry"** %35, %"class.spdy::HpackEntry"*** %11, align 8
  %36 = bitcast %"class.spdy::HpackEntry"** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %"class.spdy::HpackEntry"*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #15
  %50 = bitcast i8* %49 to %"class.spdy::HpackEntry"**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %50, i64 %47
  %53 = ptrtoint %"class.spdy::HpackEntry"** %52 to i64
  %54 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %50, i64 %43
  %55 = ptrtoint %"class.spdy::HpackEntry"** %54 to i64
  %56 = ptrtoint %"class.spdy::HpackEntry"** %12 to i64
  %57 = ptrtoint %"class.spdy::HpackEntry"** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %"class.spdy::HpackEntry"** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %"class.spdy::HpackEntry"** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %"class.spdy::HpackEntry"** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %69, i64 1
  %77 = ptrtoint %"class.spdy::HpackEntry"** %76 to i64
  %78 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !106

81:                                               ; preds = %68
  %82 = ptrtoint %"class.spdy::HpackEntry"** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %"class.spdy::HpackEntry"** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %"class.spdy::HpackEntry"** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %"class.spdy::HpackEntry"** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %"class.spdy::HpackEntry"** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %"class.spdy::HpackEntry"** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 1
  %96 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 1
  %97 = bitcast %"class.spdy::HpackEntry"** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.spdy::HpackEntry"** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 2
  %101 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 2
  %102 = bitcast %"class.spdy::HpackEntry"** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %"class.spdy::HpackEntry"** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 3
  %106 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 3
  %107 = bitcast %"class.spdy::HpackEntry"** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %"class.spdy::HpackEntry"** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 4
  %111 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 4
  %112 = bitcast %"class.spdy::HpackEntry"** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %"class.spdy::HpackEntry"** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 5
  %116 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 5
  %117 = bitcast %"class.spdy::HpackEntry"** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %"class.spdy::HpackEntry"** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 6
  %121 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 6
  %122 = bitcast %"class.spdy::HpackEntry"** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %"class.spdy::HpackEntry"** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 7
  %126 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 7
  %127 = bitcast %"class.spdy::HpackEntry"** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.spdy::HpackEntry"** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %89, i64 8
  %131 = ptrtoint %"class.spdy::HpackEntry"** %130 to i64
  %132 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %91, i64 8
  %133 = icmp eq %"class.spdy::HpackEntry"** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %"class.spdy::HpackEntry"** %60 to i64
  %136 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %"class.spdy::HpackEntry"** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %"class.spdy::HpackEntry"*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %"class.spdy::HpackEntry"*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %"class.spdy::HpackEntry"** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %"class.spdy::HpackEntry"** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = bitcast %"class.spdy::HpackEntry"*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %"class.spdy::HpackEntry"** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %"class.spdy::HpackEntry"**, %"class.spdy::HpackEntry"*** %3, align 8
  %153 = getelementptr inbounds %"class.spdy::HpackEntry"*, %"class.spdy::HpackEntry"** %152, i64 1
  store %"class.spdy::HpackEntry"** %153, %"class.spdy::HpackEntry"*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE22find_or_prepare_insertIS4_EENSD_ImbEERKT_(%"class.absl::container_internal::raw_hash_set"*, %"struct.spdy::HpackLookupEntry"* dereferenceable(32)) local_unnamed_addr #3 comdat align 2 {
  %3 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %4 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %3, i8* %5, i64 %7) #11
  %9 = add i64 %8, %7
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"struct.spdy::HpackLookupEntry", %"struct.spdy::HpackLookupEntry"* %1, i64 0, i32 1, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %14, i8* %16, i64 %18) #11
  %20 = add i64 %19, %18
  %21 = zext i64 %20 to i128
  %22 = mul nuw i128 %21, 11376068507788127593
  %23 = lshr i128 %22, 64
  %24 = xor i128 %23, %22
  %25 = trunc i128 %24 to i64
  %26 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %25, 7
  %31 = ptrtoint i8* %27 to i64
  %32 = lshr i64 %31, 12
  %33 = xor i64 %30, %32
  %34 = trunc i128 %24 to i8
  %35 = and i8 %34, 127
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %39 = load i8*, i8** %4, align 8
  %40 = load i64, i64* %6, align 8
  %41 = load i8*, i8** %15, align 8
  %42 = load i64, i64* %17, align 8
  %43 = icmp eq i64 %40, 0
  %44 = icmp eq i64 %42, 0
  br label %45

45:                                               ; preds = %91, %2
  %46 = phi i64 [ %33, %2 ], [ %93, %91 ]
  %47 = phi i64 [ 0, %2 ], [ %92, %91 ]
  %48 = and i64 %46, %29
  %49 = getelementptr inbounds i8, i8* %27, i64 %48
  %50 = bitcast i8* %49 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1
  %52 = icmp eq <16 x i8> %37, %51
  %53 = bitcast <16 x i1> %52 to i16
  %54 = icmp eq i16 %53, 0
  br i1 %54, label %87, label %55

55:                                               ; preds = %45
  %56 = zext i16 %53 to i32
  %57 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %38, align 8
  br label %58

58:                                               ; preds = %55, %83
  %59 = phi i32 [ %56, %55 ], [ %85, %83 ]
  %60 = tail call i32 @llvm.cttz.i32(i32 %59, i1 false) #11, !range !3
  %61 = zext i32 %60 to i64
  %62 = add i64 %48, %61
  %63 = and i64 %62, %29
  %64 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, %40
  br i1 %68, label %69, label %83, !prof !4

69:                                               ; preds = %58
  br i1 %43, label %73, label %70

70:                                               ; preds = %69
  %71 = tail call i32 @bcmp(i8* %65, i8* %39, i64 %40) #11
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %83, !prof !4

73:                                               ; preds = %70, %69
  %74 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 1, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %57, i64 %63, i32 0, i32 0, i32 1, i32 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, %42
  br i1 %78, label %79, label %83, !prof !4

79:                                               ; preds = %73
  br i1 %44, label %96, label %80

80:                                               ; preds = %79
  %81 = tail call i32 @bcmp(i8* %75, i8* %41, i64 %42) #11
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %96, label %83, !prof !2

83:                                               ; preds = %58, %73, %70, %80
  %84 = add i32 %59, -1
  %85 = and i32 %84, %59
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %58

87:                                               ; preds = %83, %45
  %88 = icmp eq <16 x i8> %51, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %89 = bitcast <16 x i1> %88 to i16
  %90 = icmp eq i16 %89, 0
  br i1 %90, label %91, label %94, !prof !5

91:                                               ; preds = %87
  %92 = add i64 %47, 16
  %93 = add i64 %92, %48
  br label %45

94:                                               ; preds = %87
  %95 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %25)
  br label %96

96:                                               ; preds = %80, %79, %94
  %97 = phi i64 [ %95, %94 ], [ %63, %79 ], [ %63, %80 ]
  %98 = phi i8 [ 1, %94 ], [ 0, %79 ], [ 0, %80 ]
  %99 = insertvalue { i64, i8 } undef, i64 %97, 0
  %100 = insertvalue { i64, i8 } %99, i8 %98, 1
  ret { i64, i8 } %100
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #13 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #11, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !2

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 1) #11
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"* %0) #11
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"* %0, i64 %58) #11
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #11, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 40
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #15
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #11
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %108, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %104
  br i1 %24, label %108, label %107

28:                                               ; preds = %25, %104
  %29 = phi i64 [ 0, %25 ], [ %105, %104 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %104

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %34, i64 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %36, i64 %38) #11
  %40 = add i64 %39, %38
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 1, i32 0
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %6, i64 %29, i32 0, i32 0, i32 1, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %45, i8* %47, i64 %49) #11
  %51 = add i64 %50, %49
  %52 = zext i64 %51 to i128
  %53 = mul nuw i128 %52, 11376068507788127593
  %54 = lshr i128 %53, 64
  %55 = xor i128 %54, %53
  %56 = trunc i128 %55 to i64
  %57 = load i8*, i8** %3, align 8
  %58 = load i64, i64* %7, align 8
  %59 = lshr i64 %56, 7
  %60 = ptrtoint i8* %57 to i64
  %61 = lshr i64 %60, 12
  %62 = xor i64 %59, %61
  %63 = and i64 %62, %58
  %64 = getelementptr inbounds i8, i8* %57, i64 %63
  %65 = bitcast i8* %64 to <16 x i8>*
  %66 = load <16 x i8>, <16 x i8>* %65, align 1
  %67 = icmp slt <16 x i8> %66, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %68 = bitcast <16 x i1> %67 to i16
  %69 = icmp eq i16 %68, 0
  br i1 %69, label %70, label %82

70:                                               ; preds = %33, %70
  %71 = phi i64 [ %75, %70 ], [ %63, %33 ]
  %72 = phi i64 [ %73, %70 ], [ 0, %33 ]
  %73 = add i64 %72, 16
  %74 = add i64 %73, %71
  %75 = and i64 %74, %58
  %76 = getelementptr inbounds i8, i8* %57, i64 %75
  %77 = bitcast i8* %76 to <16 x i8>*
  %78 = load <16 x i8>, <16 x i8>* %77, align 1
  %79 = icmp slt <16 x i8> %78, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %80 = bitcast <16 x i1> %79 to i16
  %81 = icmp eq i16 %80, 0
  br i1 %81, label %70, label %82

82:                                               ; preds = %70, %33
  %83 = phi i64 [ %63, %33 ], [ %75, %70 ]
  %84 = phi i16 [ %68, %33 ], [ %80, %70 ]
  %85 = zext i16 %84 to i32
  %86 = tail call i32 @llvm.cttz.i32(i32 %85, i1 false) #11, !range !3
  %87 = zext i32 %86 to i64
  %88 = add i64 %83, %87
  %89 = and i64 %88, %58
  %90 = trunc i128 %55 to i8
  %91 = and i8 %90, 127
  %92 = getelementptr inbounds i8, i8* %57, i64 %89
  store i8 %91, i8* %92, align 1
  %93 = load i8*, i8** %3, align 8
  %94 = add i64 %89, -15
  %95 = load i64, i64* %7, align 8
  %96 = and i64 %94, %95
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %91, i8* %99, align 1
  %100 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %5, align 8
  %101 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %100, i64 %89
  %102 = bitcast %"union.absl::container_internal::map_slot_type"* %101 to i8*
  %103 = bitcast %"union.absl::container_internal::map_slot_type"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 %103, i64 40, i1 false) #11
  br label %104

104:                                              ; preds = %28, %82
  %105 = add nuw i64 %29, 1
  %106 = icmp eq i64 %105, %8
  br i1 %106, label %27, label %28

107:                                              ; preds = %27
  tail call void @_ZdlPv(i8* %4) #15
  br label %108

108:                                              ; preds = %2, %27, %107
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set"*) local_unnamed_addr #13 comdat align 2 {
  %2 = alloca %"struct.std::__1::pair", align 8
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %4, i64 %6) #11
  %7 = bitcast %"struct.std::__1::pair"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 40, i1 false)
  %8 = load i64, i64* %5, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 1
  %12 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %21

13:                                               ; preds = %137, %1
  %14 = phi i64 [ 0, %1 ], [ %139, %137 ]
  %15 = lshr i64 %14, 3
  %16 = sub i64 %14, %15
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set", %"class.absl::container_internal::raw_hash_set"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %19, i64* %20, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7)
  ret void

21:                                               ; preds = %10, %137
  %22 = phi i64 [ 0, %10 ], [ %139, %137 ]
  %23 = load i8*, i8** %3, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 %22
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, -2
  br i1 %26, label %27, label %137

27:                                               ; preds = %21
  %28 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  %33 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %12, i8* %30, i64 %32) #11
  %34 = add i64 %33, %32
  %35 = zext i64 %34 to i128
  %36 = mul nuw i128 %35, 11376068507788127593
  %37 = lshr i128 %36, 64
  %38 = xor i128 %37, %36
  %39 = trunc i128 %38 to i64
  %40 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 1, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %28, i64 %22, i32 0, i32 0, i32 1, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %39, i8* %41, i64 %43) #11
  %45 = add i64 %44, %43
  %46 = zext i64 %45 to i128
  %47 = mul nuw i128 %46, 11376068507788127593
  %48 = lshr i128 %47, 64
  %49 = xor i128 %48, %47
  %50 = trunc i128 %49 to i64
  %51 = load i8*, i8** %3, align 8
  %52 = load i64, i64* %5, align 8
  %53 = lshr i64 %50, 7
  %54 = ptrtoint i8* %51 to i64
  %55 = lshr i64 %54, 12
  %56 = xor i64 %53, %55
  %57 = and i64 %56, %52
  %58 = getelementptr inbounds i8, i8* %51, i64 %57
  %59 = bitcast i8* %58 to <16 x i8>*
  %60 = load <16 x i8>, <16 x i8>* %59, align 1
  %61 = icmp slt <16 x i8> %60, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %62 = bitcast <16 x i1> %61 to i16
  %63 = icmp eq i16 %62, 0
  br i1 %63, label %64, label %76

64:                                               ; preds = %27, %64
  %65 = phi i64 [ %69, %64 ], [ %57, %27 ]
  %66 = phi i64 [ %67, %64 ], [ 0, %27 ]
  %67 = add i64 %66, 16
  %68 = add i64 %67, %65
  %69 = and i64 %68, %52
  %70 = getelementptr inbounds i8, i8* %51, i64 %69
  %71 = bitcast i8* %70 to <16 x i8>*
  %72 = load <16 x i8>, <16 x i8>* %71, align 1
  %73 = icmp slt <16 x i8> %72, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %74 = bitcast <16 x i1> %73 to i16
  %75 = icmp eq i16 %74, 0
  br i1 %75, label %64, label %76

76:                                               ; preds = %64, %27
  %77 = phi i64 [ %57, %27 ], [ %69, %64 ]
  %78 = phi i16 [ %62, %27 ], [ %74, %64 ]
  %79 = zext i16 %78 to i32
  %80 = tail call i32 @llvm.cttz.i32(i32 %79, i1 false) #11, !range !3
  %81 = zext i32 %80 to i64
  %82 = add i64 %77, %81
  %83 = and i64 %82, %52
  %84 = sub i64 %83, %57
  %85 = sub i64 %22, %57
  %86 = xor i64 %84, %85
  %87 = and i64 %86, %52
  %88 = icmp ult i64 %87, 16
  br i1 %88, label %89, label %100, !prof !2

89:                                               ; preds = %76
  %90 = trunc i128 %49 to i8
  %91 = and i8 %90, 127
  %92 = getelementptr inbounds i8, i8* %51, i64 %22
  store i8 %91, i8* %92, align 1
  %93 = load i8*, i8** %3, align 8
  %94 = add i64 %22, -15
  %95 = load i64, i64* %5, align 8
  %96 = and i64 %95, %94
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %91, i8* %99, align 1
  br label %137

100:                                              ; preds = %76
  %101 = getelementptr inbounds i8, i8* %51, i64 %83
  %102 = load i8, i8* %101, align 1
  %103 = icmp eq i8 %102, -128
  %104 = trunc i128 %49 to i8
  %105 = and i8 %104, 127
  store i8 %105, i8* %101, align 1
  %106 = load i8*, i8** %3, align 8
  %107 = add i64 %83, -15
  %108 = load i64, i64* %5, align 8
  %109 = and i64 %108, %107
  %110 = and i64 %108, 15
  %111 = add i64 %109, %110
  %112 = getelementptr inbounds i8, i8* %106, i64 %111
  store i8 %105, i8* %112, align 1
  %113 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  br i1 %103, label %114, label %128

114:                                              ; preds = %100
  %115 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %83
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %22
  %117 = bitcast %"union.absl::container_internal::map_slot_type"* %115 to i8*
  %118 = bitcast %"union.absl::container_internal::map_slot_type"* %116 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 40, i1 false) #11
  %119 = load i8*, i8** %3, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 %22
  store i8 -128, i8* %120, align 1
  %121 = load i8*, i8** %3, align 8
  %122 = add i64 %22, -15
  %123 = load i64, i64* %5, align 8
  %124 = and i64 %123, %122
  %125 = and i64 %123, 15
  %126 = add i64 %124, %125
  %127 = getelementptr inbounds i8, i8* %121, i64 %126
  store i8 -128, i8* %127, align 1
  br label %137

128:                                              ; preds = %100
  %129 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %22
  %130 = bitcast %"union.absl::container_internal::map_slot_type"* %129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* align 8 %130, i64 40, i1 false)
  %131 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %113, i64 %83
  %132 = bitcast %"union.absl::container_internal::map_slot_type"* %131 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %130, i8* align 8 %132, i64 40, i1 false) #11
  %133 = load %"union.absl::container_internal::map_slot_type"*, %"union.absl::container_internal::map_slot_type"** %11, align 8
  %134 = getelementptr inbounds %"union.absl::container_internal::map_slot_type", %"union.absl::container_internal::map_slot_type"* %133, i64 %83
  %135 = bitcast %"union.absl::container_internal::map_slot_type"* %134 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %135, i8* nonnull align 8 %7, i64 40, i1 false)
  %136 = add i64 %22, -1
  br label %137

137:                                              ; preds = %89, %128, %114, %21
  %138 = phi i64 [ %22, %21 ], [ %22, %89 ], [ %22, %114 ], [ %136, %128 ]
  %139 = add i64 %138, 1
  %140 = load i64, i64* %5, align 8
  %141 = icmp eq i64 %139, %140
  br i1 %141, label %13, label %21
}

declare void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i8 } @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE22find_or_prepare_insertIS3_EENSA_ImbEERKT_(%"class.absl::container_internal::raw_hash_set.22"*, %"class.absl::string_view"* dereferenceable(16)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::string_view", %"class.absl::string_view"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  %8 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %7, i8* %4, i64 %6) #11
  %9 = add i64 %8, %6
  %10 = zext i64 %9 to i128
  %11 = mul nuw i128 %10, 11376068507788127593
  %12 = lshr i128 %11, 64
  %13 = xor i128 %12, %11
  %14 = trunc i128 %13 to i64
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = lshr i64 %14, 7
  %20 = ptrtoint i8* %16 to i64
  %21 = lshr i64 %20, 12
  %22 = xor i64 %19, %21
  %23 = trunc i128 %13 to i8
  %24 = and i8 %23, 127
  %25 = insertelement <16 x i8> undef, i8 %24, i32 0
  %26 = shufflevector <16 x i8> %25, <16 x i8> undef, <16 x i32> zeroinitializer
  %27 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 1
  %28 = load i8*, i8** %3, align 8
  %29 = load i64, i64* %5, align 8
  %30 = icmp eq i64 %29, 0
  br label %31

31:                                               ; preds = %67, %2
  %32 = phi i64 [ %22, %2 ], [ %69, %67 ]
  %33 = phi i64 [ 0, %2 ], [ %68, %67 ]
  %34 = and i64 %32, %18
  %35 = getelementptr inbounds i8, i8* %16, i64 %34
  %36 = bitcast i8* %35 to <16 x i8>*
  %37 = load <16 x i8>, <16 x i8>* %36, align 1
  %38 = icmp eq <16 x i8> %26, %37
  %39 = bitcast <16 x i1> %38 to i16
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %63, label %41

41:                                               ; preds = %31
  %42 = zext i16 %39 to i32
  %43 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %27, align 8
  br label %44

44:                                               ; preds = %41, %59
  %45 = phi i32 [ %42, %41 ], [ %61, %59 ]
  %46 = tail call i32 @llvm.cttz.i32(i32 %45, i1 false) #11, !range !3
  %47 = zext i32 %46 to i64
  %48 = add i64 %34, %47
  %49 = and i64 %48, %18
  %50 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %43, i64 %49, i32 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %43, i64 %49, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, %29
  br i1 %54, label %55, label %59, !prof !4

55:                                               ; preds = %44
  br i1 %30, label %72, label %56

56:                                               ; preds = %55
  %57 = tail call i32 @bcmp(i8* %51, i8* %28, i64 %29) #11
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %72, label %59, !prof !2

59:                                               ; preds = %44, %56
  %60 = add i32 %45, -1
  %61 = and i32 %60, %45
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %44

63:                                               ; preds = %59, %31
  %64 = icmp eq <16 x i8> %37, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %65 = bitcast <16 x i1> %64 to i16
  %66 = icmp eq i16 %65, 0
  br i1 %66, label %67, label %70, !prof !5

67:                                               ; preds = %63
  %68 = add i64 %33, 16
  %69 = add i64 %68, %34
  br label %31

70:                                               ; preds = %63
  %71 = tail call i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.22"* %0, i64 %14)
  br label %72

72:                                               ; preds = %56, %55, %70
  %73 = phi i64 [ %71, %70 ], [ %49, %55 ], [ %49, %56 ]
  %74 = phi i8 [ 1, %70 ], [ 0, %55 ], [ 0, %56 ]
  %75 = insertvalue { i64, i8 } undef, i64 %73, 0
  %76 = insertvalue { i64, i8 } %75, i8 %74, 1
  ret { i64, i8 } %76
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE14prepare_insertEm(%"class.absl::container_internal::raw_hash_set.22"*, i64) local_unnamed_addr #13 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = lshr i64 %1, 7
  %8 = ptrtoint i8* %4 to i64
  %9 = lshr i64 %8, 12
  %10 = xor i64 %9, %7
  %11 = and i64 %10, %6
  %12 = getelementptr inbounds i8, i8* %4, i64 %11
  %13 = bitcast i8* %12 to <16 x i8>*
  %14 = load <16 x i8>, <16 x i8>* %13, align 1
  %15 = icmp slt <16 x i8> %14, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %16 = bitcast <16 x i1> %15 to i16
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %2, %18
  %19 = phi i64 [ %23, %18 ], [ %11, %2 ]
  %20 = phi i64 [ %21, %18 ], [ 0, %2 ]
  %21 = add i64 %20, 16
  %22 = add i64 %21, %19
  %23 = and i64 %22, %6
  %24 = getelementptr inbounds i8, i8* %4, i64 %23
  %25 = bitcast i8* %24 to <16 x i8>*
  %26 = load <16 x i8>, <16 x i8>* %25, align 1
  %27 = icmp slt <16 x i8> %26, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %28 = bitcast <16 x i1> %27 to i16
  %29 = icmp eq i16 %28, 0
  br i1 %29, label %18, label %30

30:                                               ; preds = %18, %2
  %31 = phi i64 [ %11, %2 ], [ %23, %18 ]
  %32 = phi i16 [ %16, %2 ], [ %28, %18 ]
  %33 = zext i16 %32 to i32
  %34 = tail call i32 @llvm.cttz.i32(i32 %33, i1 false) #11, !range !3
  %35 = zext i32 %34 to i64
  %36 = add i64 %31, %35
  %37 = and i64 %36, %6
  %38 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %41, label %93

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8, i8* %4, i64 %37
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, -2
  br i1 %44, label %93, label %45, !prof !2

45:                                               ; preds = %41
  %46 = icmp eq i64 %6, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %45
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.22"* %0, i64 1) #11
  br label %59

48:                                               ; preds = %45
  %49 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 2
  %50 = load i64, i64* %49, align 8
  %51 = lshr i64 %6, 3
  %52 = sub i64 %6, %51
  %53 = lshr i64 %52, 1
  %54 = icmp ugt i64 %50, %53
  br i1 %54, label %56, label %55

55:                                               ; preds = %48
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.22"* %0) #11
  br label %59

56:                                               ; preds = %48
  %57 = shl i64 %6, 1
  %58 = or i64 %57, 1
  tail call void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.22"* %0, i64 %58) #11
  br label %59

59:                                               ; preds = %47, %55, %56
  %60 = load i8*, i8** %3, align 8
  %61 = load i64, i64* %5, align 8
  %62 = ptrtoint i8* %60 to i64
  %63 = lshr i64 %62, 12
  %64 = xor i64 %63, %7
  %65 = and i64 %64, %61
  %66 = getelementptr inbounds i8, i8* %60, i64 %65
  %67 = bitcast i8* %66 to <16 x i8>*
  %68 = load <16 x i8>, <16 x i8>* %67, align 1
  %69 = icmp slt <16 x i8> %68, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %70 = bitcast <16 x i1> %69 to i16
  %71 = icmp eq i16 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %59, %72
  %73 = phi i64 [ %77, %72 ], [ %65, %59 ]
  %74 = phi i64 [ %75, %72 ], [ 0, %59 ]
  %75 = add i64 %74, 16
  %76 = add i64 %75, %73
  %77 = and i64 %76, %61
  %78 = getelementptr inbounds i8, i8* %60, i64 %77
  %79 = bitcast i8* %78 to <16 x i8>*
  %80 = load <16 x i8>, <16 x i8>* %79, align 1
  %81 = icmp slt <16 x i8> %80, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %82 = bitcast <16 x i1> %81 to i16
  %83 = icmp eq i16 %82, 0
  br i1 %83, label %72, label %84

84:                                               ; preds = %72, %59
  %85 = phi i64 [ %65, %59 ], [ %77, %72 ]
  %86 = phi i16 [ %70, %59 ], [ %82, %72 ]
  %87 = zext i16 %86 to i32
  %88 = tail call i32 @llvm.cttz.i32(i32 %87, i1 false) #11, !range !3
  %89 = zext i32 %88 to i64
  %90 = add i64 %85, %89
  %91 = and i64 %90, %61
  %92 = load i64, i64* %38, align 8
  br label %93

93:                                               ; preds = %41, %30, %84
  %94 = phi i64 [ %92, %84 ], [ 0, %41 ], [ %39, %30 ]
  %95 = phi i8* [ %60, %84 ], [ %4, %41 ], [ %4, %30 ]
  %96 = phi i64 [ %91, %84 ], [ %37, %41 ], [ %37, %30 ]
  %97 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 2
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %97, align 8
  %100 = getelementptr inbounds i8, i8* %95, i64 %96
  %101 = load i8, i8* %100, align 1
  %102 = icmp eq i8 %101, -128
  %103 = zext i1 %102 to i64
  %104 = sub i64 %94, %103
  store i64 %104, i64* %38, align 8
  %105 = trunc i64 %1 to i8
  %106 = and i8 %105, 127
  store i8 %106, i8* %100, align 1
  %107 = load i8*, i8** %3, align 8
  %108 = add i64 %96, -15
  %109 = load i64, i64* %5, align 8
  %110 = and i64 %109, %108
  %111 = and i64 %109, 15
  %112 = add i64 %110, %111
  %113 = getelementptr inbounds i8, i8* %107, i64 %112
  store i8 %106, i8* %113, align 1
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6resizeEm(%"class.absl::container_internal::raw_hash_set.22"*, i64) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 1
  %6 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %5, align 8
  %7 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 3
  %8 = load i64, i64* %7, align 8
  store i64 %1, i64* %7, align 8
  %9 = add i64 %1, 16
  %10 = add i64 %1, 23
  %11 = and i64 %10, -8
  %12 = mul i64 %1, 24
  %13 = add i64 %11, %12
  %14 = tail call i8* @_Znwm(i64 %13) #15
  store i8* %14, i8** %3, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 %11
  %16 = bitcast %"union.absl::container_internal::map_slot_type.23"** %5 to i8**
  store i8* %15, i8** %16, align 8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %14, i8 -128, i64 %9, i1 false) #11
  %17 = getelementptr inbounds i8, i8* %14, i64 %1
  store i8 -1, i8* %17, align 1
  %18 = lshr i64 %1, 3
  %19 = sub i64 %1, %18
  %20 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 2
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = icmp eq i64 %8, 0
  br i1 %24, label %97, label %25

25:                                               ; preds = %2
  %26 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %28

27:                                               ; preds = %93
  br i1 %24, label %97, label %96

28:                                               ; preds = %25, %93
  %29 = phi i64 [ 0, %25 ], [ %94, %93 ]
  %30 = getelementptr inbounds i8, i8* %4, i64 %29
  %31 = load i8, i8* %30, align 1
  %32 = icmp sgt i8 %31, -1
  br i1 %32, label %33, label %93

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %6, i64 %29
  %35 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %34, i64 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %6, i64 %29, i32 0, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %26, i8* %36, i64 %38) #11
  %40 = add i64 %39, %38
  %41 = zext i64 %40 to i128
  %42 = mul nuw i128 %41, 11376068507788127593
  %43 = lshr i128 %42, 64
  %44 = xor i128 %43, %42
  %45 = trunc i128 %44 to i64
  %46 = load i8*, i8** %3, align 8
  %47 = load i64, i64* %7, align 8
  %48 = lshr i64 %45, 7
  %49 = ptrtoint i8* %46 to i64
  %50 = lshr i64 %49, 12
  %51 = xor i64 %48, %50
  %52 = and i64 %51, %47
  %53 = getelementptr inbounds i8, i8* %46, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  %55 = load <16 x i8>, <16 x i8>* %54, align 1
  %56 = icmp slt <16 x i8> %55, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %57 = bitcast <16 x i1> %56 to i16
  %58 = icmp eq i16 %57, 0
  br i1 %58, label %59, label %71

59:                                               ; preds = %33, %59
  %60 = phi i64 [ %64, %59 ], [ %52, %33 ]
  %61 = phi i64 [ %62, %59 ], [ 0, %33 ]
  %62 = add i64 %61, 16
  %63 = add i64 %62, %60
  %64 = and i64 %63, %47
  %65 = getelementptr inbounds i8, i8* %46, i64 %64
  %66 = bitcast i8* %65 to <16 x i8>*
  %67 = load <16 x i8>, <16 x i8>* %66, align 1
  %68 = icmp slt <16 x i8> %67, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %69 = bitcast <16 x i1> %68 to i16
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %59, label %71

71:                                               ; preds = %59, %33
  %72 = phi i64 [ %52, %33 ], [ %64, %59 ]
  %73 = phi i16 [ %57, %33 ], [ %69, %59 ]
  %74 = zext i16 %73 to i32
  %75 = tail call i32 @llvm.cttz.i32(i32 %74, i1 false) #11, !range !3
  %76 = zext i32 %75 to i64
  %77 = add i64 %72, %76
  %78 = and i64 %77, %47
  %79 = trunc i128 %44 to i8
  %80 = and i8 %79, 127
  %81 = getelementptr inbounds i8, i8* %46, i64 %78
  store i8 %80, i8* %81, align 1
  %82 = load i8*, i8** %3, align 8
  %83 = add i64 %78, -15
  %84 = load i64, i64* %7, align 8
  %85 = and i64 %83, %84
  %86 = and i64 %84, 15
  %87 = add i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %82, i64 %87
  store i8 %80, i8* %88, align 1
  %89 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %5, align 8
  %90 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %89, i64 %78
  %91 = bitcast %"union.absl::container_internal::map_slot_type.23"* %90 to i8*
  %92 = bitcast %"union.absl::container_internal::map_slot_type.23"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 24, i1 false) #11
  br label %93

93:                                               ; preds = %28, %71
  %94 = add nuw i64 %29, 1
  %95 = icmp eq i64 %94, %8
  br i1 %95, label %27, label %28

96:                                               ; preds = %27
  tail call void @_ZdlPv(i8* %4) #15
  br label %97

97:                                               ; preds = %2, %27, %96
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE27drop_deletes_without_resizeEv(%"class.absl::container_internal::raw_hash_set.22"*) local_unnamed_addr #13 comdat align 2 {
  %2 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  tail call void @_ZN4absl18container_internal37ConvertDeletedToEmptyAndFullToDeletedEPam(i8* %3, i64 %5) #11
  %6 = load i64, i64* %4, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 1
  %10 = load i64, i64* bitcast (i8** @_ZN4absl13hash_internal15MixingHashState5kSeedE to i64*), align 8
  br label %19

11:                                               ; preds = %153, %1
  %12 = phi i64 [ 0, %1 ], [ %155, %153 ]
  %13 = lshr i64 %12, 3
  %14 = sub i64 %12, %13
  %15 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = getelementptr inbounds %"class.absl::container_internal::raw_hash_set.22", %"class.absl::container_internal::raw_hash_set.22"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store i64 %17, i64* %18, align 8
  ret void

19:                                               ; preds = %8, %153
  %20 = phi i64 [ 0, %8 ], [ %155, %153 ]
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 %20
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, -2
  br i1 %24, label %25, label %153

25:                                               ; preds = %19
  %26 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %9, align 8
  %27 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %26, i64 %20, i32 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %26, i64 %20, i32 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = tail call i64 @_ZN4absl13hash_internal15MixingHashState18combine_contiguousES1_PKhm(i64 %10, i8* %28, i64 %30) #11
  %32 = add i64 %31, %30
  %33 = zext i64 %32 to i128
  %34 = mul nuw i128 %33, 11376068507788127593
  %35 = lshr i128 %34, 64
  %36 = xor i128 %35, %34
  %37 = trunc i128 %36 to i64
  %38 = load i8*, i8** %2, align 8
  %39 = load i64, i64* %4, align 8
  %40 = lshr i64 %37, 7
  %41 = ptrtoint i8* %38 to i64
  %42 = lshr i64 %41, 12
  %43 = xor i64 %40, %42
  %44 = and i64 %43, %39
  %45 = getelementptr inbounds i8, i8* %38, i64 %44
  %46 = bitcast i8* %45 to <16 x i8>*
  %47 = load <16 x i8>, <16 x i8>* %46, align 1
  %48 = icmp slt <16 x i8> %47, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %49 = bitcast <16 x i1> %48 to i16
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %51, label %63

51:                                               ; preds = %25, %51
  %52 = phi i64 [ %56, %51 ], [ %44, %25 ]
  %53 = phi i64 [ %54, %51 ], [ 0, %25 ]
  %54 = add i64 %53, 16
  %55 = add i64 %54, %52
  %56 = and i64 %55, %39
  %57 = getelementptr inbounds i8, i8* %38, i64 %56
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1
  %60 = icmp slt <16 x i8> %59, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %61 = bitcast <16 x i1> %60 to i16
  %62 = icmp eq i16 %61, 0
  br i1 %62, label %51, label %63

63:                                               ; preds = %51, %25
  %64 = phi i64 [ %44, %25 ], [ %56, %51 ]
  %65 = phi i16 [ %49, %25 ], [ %61, %51 ]
  %66 = zext i16 %65 to i32
  %67 = tail call i32 @llvm.cttz.i32(i32 %66, i1 false) #11, !range !3
  %68 = zext i32 %67 to i64
  %69 = add i64 %64, %68
  %70 = and i64 %69, %39
  %71 = sub i64 %70, %44
  %72 = sub i64 %20, %44
  %73 = xor i64 %71, %72
  %74 = and i64 %73, %39
  %75 = icmp ult i64 %74, 16
  br i1 %75, label %76, label %87, !prof !2

76:                                               ; preds = %63
  %77 = trunc i128 %36 to i8
  %78 = and i8 %77, 127
  %79 = getelementptr inbounds i8, i8* %38, i64 %20
  store i8 %78, i8* %79, align 1
  %80 = load i8*, i8** %2, align 8
  %81 = add i64 %20, -15
  %82 = load i64, i64* %4, align 8
  %83 = and i64 %82, %81
  %84 = and i64 %82, 15
  %85 = add i64 %83, %84
  %86 = getelementptr inbounds i8, i8* %80, i64 %85
  store i8 %78, i8* %86, align 1
  br label %153

87:                                               ; preds = %63
  %88 = getelementptr inbounds i8, i8* %38, i64 %70
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, -128
  %91 = trunc i128 %36 to i8
  %92 = and i8 %91, 127
  store i8 %92, i8* %88, align 1
  %93 = load i8*, i8** %2, align 8
  %94 = add i64 %70, -15
  %95 = load i64, i64* %4, align 8
  %96 = and i64 %95, %94
  %97 = and i64 %95, 15
  %98 = add i64 %96, %97
  %99 = getelementptr inbounds i8, i8* %93, i64 %98
  store i8 %92, i8* %99, align 1
  %100 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %9, align 8
  br i1 %90, label %101, label %115

101:                                              ; preds = %87
  %102 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %100, i64 %70
  %103 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %100, i64 %20
  %104 = bitcast %"union.absl::container_internal::map_slot_type.23"* %102 to i8*
  %105 = bitcast %"union.absl::container_internal::map_slot_type.23"* %103 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 24, i1 false) #11
  %106 = load i8*, i8** %2, align 8
  %107 = getelementptr inbounds i8, i8* %106, i64 %20
  store i8 -128, i8* %107, align 1
  %108 = load i8*, i8** %2, align 8
  %109 = add i64 %20, -15
  %110 = load i64, i64* %4, align 8
  %111 = and i64 %110, %109
  %112 = and i64 %110, 15
  %113 = add i64 %111, %112
  %114 = getelementptr inbounds i8, i8* %108, i64 %113
  store i8 -128, i8* %114, align 1
  br label %153

115:                                              ; preds = %87
  %116 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %100, i64 %20
  %117 = bitcast %"union.absl::container_internal::map_slot_type.23"* %116 to i8*
  %118 = bitcast %"union.absl::container_internal::map_slot_type.23"* %116 to <16 x i8>*
  %119 = load <16 x i8>, <16 x i8>* %118, align 8
  %120 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %100, i64 %20, i32 0, i32 1
  %121 = bitcast i64* %120 to i8*
  %122 = load i8, i8* %121, align 8
  %123 = getelementptr inbounds i8, i8* %117, i64 17
  %124 = load i8, i8* %123, align 1
  %125 = getelementptr inbounds i8, i8* %117, i64 18
  %126 = load i8, i8* %125, align 2
  %127 = getelementptr inbounds i8, i8* %117, i64 19
  %128 = load i8, i8* %127, align 1
  %129 = getelementptr inbounds i8, i8* %117, i64 20
  %130 = load i8, i8* %129, align 4
  %131 = getelementptr inbounds i8, i8* %117, i64 21
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds i8, i8* %117, i64 22
  %134 = load i8, i8* %133, align 2
  %135 = getelementptr inbounds i8, i8* %117, i64 23
  %136 = load i8, i8* %135, align 1
  %137 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %100, i64 %70
  %138 = bitcast %"union.absl::container_internal::map_slot_type.23"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %138, i64 24, i1 false) #11
  %139 = load %"union.absl::container_internal::map_slot_type.23"*, %"union.absl::container_internal::map_slot_type.23"** %9, align 8
  %140 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %139, i64 %70
  %141 = bitcast %"union.absl::container_internal::map_slot_type.23"* %140 to i8*
  %142 = bitcast %"union.absl::container_internal::map_slot_type.23"* %140 to <16 x i8>*
  store <16 x i8> %119, <16 x i8>* %142, align 8
  %143 = getelementptr inbounds %"union.absl::container_internal::map_slot_type.23", %"union.absl::container_internal::map_slot_type.23"* %139, i64 %70, i32 0, i32 1
  %144 = bitcast i64* %143 to i8*
  store i8 %122, i8* %144, align 8
  %145 = getelementptr inbounds i8, i8* %141, i64 17
  store i8 %124, i8* %145, align 1
  %146 = getelementptr inbounds i8, i8* %141, i64 18
  store i8 %126, i8* %146, align 2
  %147 = getelementptr inbounds i8, i8* %141, i64 19
  store i8 %128, i8* %147, align 1
  %148 = getelementptr inbounds i8, i8* %141, i64 20
  store i8 %130, i8* %148, align 4
  %149 = getelementptr inbounds i8, i8* %141, i64 21
  store i8 %132, i8* %149, align 1
  %150 = getelementptr inbounds i8, i8* %141, i64 22
  store i8 %134, i8* %150, align 2
  %151 = getelementptr inbounds i8, i8* %141, i64 23
  store i8 %136, i8* %151, align 1
  %152 = add i64 %20, -1
  br label %153

153:                                              ; preds = %76, %115, %101, %19
  %154 = phi i64 [ %20, %19 ], [ %20, %76 ], [ %20, %101 ], [ %152, %115 ]
  %155 = add i64 %154, 1
  %156 = load i64, i64* %4, align 8
  %157 = icmp eq i64 %155, %156
  br i1 %157, label %11, label %19
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #14

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readnone speculatable }
attributes #13 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nofree nounwind readonly }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i32 0, i32 33}
!4 = !{!"branch_weights", i32 2146410443, i32 1073205}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE6rbeginEv: argument 0"}
!8 = distinct !{!8, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE6rbeginEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE4rendEv: argument 0"}
!11 = distinct !{!11, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE4rendEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE6rbeginEv: argument 0"}
!14 = distinct !{!14, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE6rbeginEv"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE4rendEv: argument 0"}
!17 = distinct !{!17, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE4rendEv"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE6rbeginEv: argument 0"}
!20 = distinct !{!20, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE6rbeginEv"}
!21 = !{!22}
!22 = distinct !{!22, !23, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE4rendEv: argument 0"}
!23 = distinct !{!23, !"_ZNKSt3__15dequeIN4spdy10HpackEntryENS_9allocatorIS2_EEE4rendEv"}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!26 = distinct !{!26, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv: argument 0"}
!29 = distinct !{!29, !"_ZNK4absl11string_viewcvNSt3__112basic_stringIcNS1_11char_traitsIcEET_EEINS1_9allocatorIcEEEEv"}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!32 = distinct !{!32, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!33 = !{!34, !36, !38, !40, !42, !44, !46}
!34 = distinct !{!34, !35, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_: argument 0"}
!35 = distinct !{!35, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_"}
!36 = distinct !{!36, !37, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE: argument 0"}
!37 = distinct !{!37, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE"}
!38 = distinct !{!38, !39, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_: argument 0"}
!39 = distinct !{!39, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_"}
!40 = distinct !{!40, !41, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_: argument 0"}
!41 = distinct !{!41, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_"}
!42 = distinct !{!42, !43, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_: argument 0"}
!43 = distinct !{!43, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_"}
!44 = distinct !{!44, !45, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_: argument 0"}
!45 = distinct !{!45, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_"}
!46 = distinct !{!46, !47, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE: argument 0"}
!47 = distinct !{!47, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE"}
!48 = !{!49}
!49 = distinct !{!49, !50, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!50 = distinct !{!50, !"_ZNSt3__19make_pairIN4spdy16HpackLookupEntryERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!51 = !{!52, !54, !56, !58, !60, !62, !64}
!52 = distinct !{!52, !53, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_: argument 0"}
!53 = distinct !{!53, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableclIS4_JRKNS9_21piecewise_construct_tENS9_5tupleIJOS4_EEENSN_IJOmEEEEEENSD_INSH_8iteratorEbEERKT_DpOT0_"}
!54 = distinct !{!54, !55, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE: argument 0"}
!55 = distinct !{!55, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS6_EENSt3__18equal_toIS6_EENSB_9allocatorINSB_4pairIKS6_mEEEEE19EmplaceDecomposableEOS6_NSB_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSB_L19piecewise_constructEEclsr3stdE7declvalINSM_IJSQ_EEEEEclsr3stdE7declvalIT1_EEEEOSP_NSF_IST_SU_EE"}
!56 = distinct !{!56, !57, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_: argument 0"}
!57 = distinct !{!57, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS5_EENSt3__18equal_toIS5_EENSA_9allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEJNSE_IS5_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSL_DpOSM_"}
!58 = distinct !{!58, !59, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_: argument 0"}
!59 = distinct !{!59, !"_ZN4absl18container_internal17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmE5applyINS0_12raw_hash_setIS4_NS_13hash_internal4HashIS3_EENSt3__18equal_toIS3_EENSA_9allocatorINSA_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSE_IS3_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSL_DpOSM_"}
!60 = distinct !{!60, !61, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_: argument 0"}
!61 = distinct !{!61, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEEvE5applyINS0_12raw_hash_setIS5_NS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENSC_9allocatorINSC_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSG_IS4_mEEES5_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSO_DpOSP_"}
!62 = distinct !{!62, !63, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_: argument 0"}
!63 = distinct !{!63, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE7emplaceIJNSD_IS4_mEEELi0EEENSD_INSH_8iteratorEbEEDpOT_"}
!64 = distinct !{!64, !65, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE: argument 0"}
!65 = distinct !{!65, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyIN4spdy16HpackLookupEntryEmEENS_13hash_internal4HashIS4_EENSt3__18equal_toIS4_EENS9_9allocatorINS9_4pairIKS4_mEEEEE6insertEONSD_IS4_mEE"}
!66 = !{!67}
!67 = distinct !{!67, !68, !"_ZNSt3__19make_pairIN4absl11string_viewERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!68 = distinct !{!68, !"_ZNSt3__19make_pairIN4absl11string_viewERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!69 = !{!70, !72, !74, !76, !78, !80, !82}
!70 = distinct !{!70, !71, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_: argument 0"}
!71 = distinct !{!71, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_"}
!72 = distinct !{!72, !73, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE: argument 0"}
!73 = distinct !{!73, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE"}
!74 = distinct !{!74, !75, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_: argument 0"}
!75 = distinct !{!75, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_"}
!76 = distinct !{!76, !77, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_: argument 0"}
!77 = distinct !{!77, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_"}
!78 = distinct !{!78, !79, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_: argument 0"}
!79 = distinct !{!79, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_"}
!80 = distinct !{!80, !81, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_: argument 0"}
!81 = distinct !{!81, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_"}
!82 = distinct !{!82, !83, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE: argument 0"}
!83 = distinct !{!83, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZNSt3__19make_pairIN4absl11string_viewERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_: argument 0"}
!86 = distinct !{!86, !"_ZNSt3__19make_pairIN4absl11string_viewERKmEENS_4pairINS_18__unwrap_ref_decayIT_E4typeENS6_IT0_E4typeEEEOS7_OSA_"}
!87 = !{!88, !90, !92, !94, !96, !98, !100}
!88 = distinct !{!88, !89, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_: argument 0"}
!89 = distinct !{!89, !"_ZNK4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE19EmplaceDecomposableclIS3_JRKNS8_21piecewise_construct_tENS8_5tupleIJOS3_EEENSK_IJOmEEEEEENSA_INSE_8iteratorEbEERKT_DpOT0_"}
!90 = distinct !{!90, !91, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE: argument 0"}
!91 = distinct !{!91, !"_ZN4absl18container_internal15memory_internal17DecomposePairImplINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSA_4pairIKS5_mEEEEE19EmplaceDecomposableEOS5_NSA_5tupleIJOmEEEEEDTclclsr3stdE7declvalIT_EEclsr3stdE7declvalIRKT0_EEL_ZNSA_L19piecewise_constructEEclsr3stdE7declvalINSJ_IJSN_EEEEEclsr3stdE7declvalIT1_EEEEOSM_NSC_ISQ_SR_EE"}
!92 = distinct !{!92, !93, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_: argument 0"}
!93 = distinct !{!93, !"_ZN4absl18container_internal13DecomposePairINS0_12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS4_mEEEEE19EmplaceDecomposableEJNSB_IS4_mEEEEEDTclsr15memory_internalE17DecomposePairImplclsr3stdE7forwardIT_Efp_Ecl8PairArgsspclsr3stdE7forwardIT0_Efp0_EEEEOSI_DpOSJ_"}
!94 = distinct !{!94, !95, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_: argument 0"}
!95 = distinct !{!95, !"_ZN4absl18container_internal17FlatHashMapPolicyINS_11string_viewEmE5applyINS0_12raw_hash_setIS3_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS9_4pairIKS2_mEEEEE19EmplaceDecomposableEJNSB_IS2_mEEEEEDTclsr4absl18container_internalE13DecomposePairclsr3stdE7declvalIT_EEspclsr3stdE7declvalIT0_EEEEOSI_DpOSJ_"}
!96 = distinct !{!96, !97, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_: argument 0"}
!97 = distinct !{!97, !"_ZN4absl18container_internal18hash_policy_traitsINS0_17FlatHashMapPolicyINS_11string_viewEmEEvE5applyINS0_12raw_hash_setIS4_NS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINSB_4pairIKS3_mEEEEE19EmplaceDecomposableEJNSD_IS3_mEEES4_EEDTclsrT1_5applyclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSL_DpOSM_"}
!98 = distinct !{!98, !99, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_: argument 0"}
!99 = distinct !{!99, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE7emplaceIJNSA_IS3_mEEELi0EEENSA_INSE_8iteratorEbEEDpOT_"}
!100 = distinct !{!100, !101, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE: argument 0"}
!101 = distinct !{!101, !"_ZN4absl18container_internal12raw_hash_setINS0_17FlatHashMapPolicyINS_11string_viewEmEENS0_10StringHashENS0_12StringHashEq2EqENSt3__19allocatorINS8_4pairIKS3_mEEEEE6insertEONSA_IS3_mEE"}
!102 = distinct !{!102, !103}
!103 = !{!"llvm.loop.unroll.disable"}
!104 = distinct !{!104, !103}
!105 = distinct !{!105, !103}
!106 = distinct !{!106, !103}
