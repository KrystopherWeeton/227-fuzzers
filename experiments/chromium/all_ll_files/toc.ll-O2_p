; ModuleID = '../../third_party/libjxl/src/lib/jxl/toc.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/toc.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.jxl::BitReader" = type { i64, i64, i8*, i8*, i8*, i64, i8, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN3jxl9BitReader19BoundsCheckedRefillEv = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3jxl7MaxBitsEm(i64) local_unnamed_addr #0 {
  %2 = tail call i64 @_ZN3jxl8U32Coder14MaxEncodedBitsENS_6U32EncE(i64 140793322930185, i64 578853414160072725) #8
  %3 = mul i64 %2, %0
  %4 = add i64 %3, 17
  ret i64 %4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @_ZN3jxl8U32Coder14MaxEncodedBitsENS_6U32EncE(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3jxl16ReadGroupOffsetsEmPNS_9BitReaderEPNSt3__16vectorImNS2_9allocatorImEEEEPNS3_IjNS4_IjEEEEPm(i64, %"class.jxl::BitReader"* noalias, %"class.std::__1::vector"* noalias, %"class.std::__1::vector.1"* noalias, i64*) local_unnamed_addr #0 {
  %6 = alloca %"class.std::__1::vector.1", align 8
  %7 = alloca %"class.std::__1::vector", align 16
  %8 = alloca %"class.std::__1::vector.1", align 16
  %9 = icmp ugt i64 %0, 65536
  br i1 %9, label %567, label %10

10:                                               ; preds = %5
  %11 = bitcast %"class.std::__1::vector.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #8
  %14 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 2
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 3
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ugt i8* %15, %17
  br i1 %18, label %19, label %24, !prof !2

19:                                               ; preds = %10
  tail call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #8
  %20 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  br label %37

24:                                               ; preds = %10
  %25 = bitcast i8* %15 to i64*
  %26 = load i64, i64* %25, align 1
  %27 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = shl i64 %26, %28
  %30 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = or i64 %31, %29
  store i64 %32, i64* %30, align 8
  %33 = sub i64 63, %28
  %34 = lshr i64 %33, 3
  %35 = getelementptr inbounds i8, i8* %15, i64 %34
  store i8* %35, i8** %14, align 8
  %36 = or i64 %28, 56
  store i64 %36, i64* %27, align 8
  br label %37

37:                                               ; preds = %19, %24
  %38 = phi i64 [ %23, %19 ], [ %36, %24 ]
  %39 = phi i64 [ %21, %19 ], [ %32, %24 ]
  %40 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 0
  %41 = and i64 %39, 1
  %42 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 1
  %43 = add i64 %38, -1
  store i64 %43, i64* %42, align 8
  %44 = lshr i64 %39, 1
  store i64 %44, i64* %40, align 8
  %45 = icmp ne i64 %41, 0
  %46 = icmp ne i64 %0, 0
  %47 = and i1 %46, %45
  br i1 %47, label %48, label %76

48:                                               ; preds = %37
  %49 = load i8*, i8** %16, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 8
  %51 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %52 = bitcast i8** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = ptrtoint i8* %50 to i64
  %55 = sub i64 %54, %53
  %56 = shl i64 %55, 3
  %57 = bitcast i8** %14 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = sub i64 %58, %53
  %60 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %61 = load i64, i64* %60, align 8
  %62 = add i64 %59, %61
  %63 = shl i64 %62, 3
  %64 = sub i64 %63, %43
  %65 = icmp ult i64 %56, %64
  br i1 %65, label %555, label %66

66:                                               ; preds = %48
  %67 = mul i64 %0, 12
  %68 = sub i64 %56, %64
  %69 = icmp ugt i64 %67, %68
  br i1 %69, label %555, label %70

70:                                               ; preds = %66
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.1"* nonnull %6, i64 %0) #8
  %71 = load i32*, i32** %12, align 8
  %72 = call i32 @_ZN3jxl17DecodePermutationEmmPjPNS_9BitReaderE(i64 0, i64 %0, i32* %71, %"class.jxl::BitReader"* %1) #8
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %555

74:                                               ; preds = %70
  %75 = load i64, i64* %42, align 8
  br label %76

76:                                               ; preds = %74, %37
  %77 = phi i64 [ %75, %74 ], [ %43, %37 ]
  %78 = sub i64 0, %77
  %79 = and i64 %78, 7
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %108, label %81

81:                                               ; preds = %76
  %82 = sub nuw nsw i64 8, %79
  %83 = load i8*, i8** %14, align 8
  %84 = load i8*, i8** %16, align 8
  %85 = icmp ugt i8* %83, %84
  br i1 %85, label %86, label %89, !prof !2

86:                                               ; preds = %81
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #8
  %87 = load i64, i64* %40, align 8
  %88 = load i64, i64* %42, align 8
  br label %99

89:                                               ; preds = %81
  %90 = bitcast i8* %83 to i64*
  %91 = load i64, i64* %90, align 1
  %92 = shl i64 %91, %77
  %93 = load i64, i64* %40, align 8
  %94 = or i64 %93, %92
  store i64 %94, i64* %40, align 8
  %95 = sub i64 63, %77
  %96 = lshr i64 %95, 3
  %97 = getelementptr inbounds i8, i8* %83, i64 %96
  store i8* %97, i8** %14, align 8
  %98 = or i64 %77, 56
  store i64 %98, i64* %42, align 8
  br label %99

99:                                               ; preds = %86, %89
  %100 = phi i64 [ %88, %86 ], [ %98, %89 ]
  %101 = phi i64 [ %87, %86 ], [ %94, %89 ]
  %102 = shl nsw i64 -1, %82
  %103 = xor i64 %102, -1
  %104 = and i64 %101, %103
  %105 = sub i64 %100, %82
  store i64 %105, i64* %42, align 8
  %106 = lshr i64 %101, %82
  store i64 %106, i64* %40, align 8
  %107 = icmp eq i64 %104, 0
  br i1 %107, label %108, label %555

108:                                              ; preds = %76, %99
  %109 = phi i64 [ %77, %76 ], [ %105, %99 ]
  %110 = load i8*, i8** %16, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 8
  %112 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 4
  %113 = bitcast i8** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = ptrtoint i8* %111 to i64
  %116 = sub i64 %115, %114
  %117 = shl i64 %116, 3
  %118 = bitcast i8** %14 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = sub i64 %119, %114
  %121 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %1, i64 0, i32 5
  %122 = load i64, i64* %121, align 8
  %123 = add i64 %120, %122
  %124 = shl i64 %123, 3
  %125 = sub i64 %124, %109
  %126 = icmp ult i64 %117, %125
  br i1 %126, label %555, label %127

127:                                              ; preds = %108
  %128 = mul i64 %0, 12
  %129 = sub i64 %117, %125
  %130 = icmp ugt i64 %128, %129
  br i1 %130, label %555, label %131

131:                                              ; preds = %127
  %132 = bitcast %"class.std::__1::vector.1"* %3 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 1
  %135 = bitcast i32** %134 to i64*
  store i64 %133, i64* %135, align 8
  %136 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %137 = bitcast i32** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %138, %133
  %140 = ashr exact i64 %139, 2
  %141 = icmp ult i64 %140, %0
  br i1 %141, label %142, label %152

142:                                              ; preds = %131
  %143 = shl i64 %0, 2
  %144 = call i8* @_Znwm(i64 %143) #9
  %145 = bitcast i8* %144 to i32*
  %146 = ptrtoint i8* %144 to i64
  %147 = getelementptr inbounds i32, i32* %145, i64 %0
  %148 = ptrtoint i32* %147 to i64
  store i64 %146, i64* %132, align 8
  store i64 %146, i64* %135, align 8
  store i64 %148, i64* %137, align 8
  %149 = icmp eq i64 %133, 0
  br i1 %149, label %154, label %150

150:                                              ; preds = %142
  %151 = inttoptr i64 %133 to i8*
  call void @_ZdlPv(i8* %151) #9
  br label %154

152:                                              ; preds = %131
  %153 = icmp eq i64 %0, 0
  br i1 %153, label %155, label %154

154:                                              ; preds = %150, %142, %152
  br label %188

155:                                              ; preds = %241, %152
  %156 = phi i1 [ true, %152 ], [ false, %241 ]
  %157 = load i64, i64* %42, align 8
  %158 = sub i64 0, %157
  %159 = and i64 %158, 7
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %244, label %161

161:                                              ; preds = %155
  %162 = sub nuw nsw i64 8, %159
  %163 = load i8*, i8** %14, align 8
  %164 = load i8*, i8** %16, align 8
  %165 = icmp ugt i8* %163, %164
  br i1 %165, label %166, label %169, !prof !2

166:                                              ; preds = %161
  call void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"* %1) #8
  %167 = load i64, i64* %40, align 8
  %168 = load i64, i64* %42, align 8
  br label %179

169:                                              ; preds = %161
  %170 = bitcast i8* %163 to i64*
  %171 = load i64, i64* %170, align 1
  %172 = shl i64 %171, %157
  %173 = load i64, i64* %40, align 8
  %174 = or i64 %173, %172
  store i64 %174, i64* %40, align 8
  %175 = sub i64 63, %157
  %176 = lshr i64 %175, 3
  %177 = getelementptr inbounds i8, i8* %163, i64 %176
  store i8* %177, i8** %14, align 8
  %178 = or i64 %157, 56
  store i64 %178, i64* %42, align 8
  br label %179

179:                                              ; preds = %166, %169
  %180 = phi i64 [ %168, %166 ], [ %178, %169 ]
  %181 = phi i64 [ %167, %166 ], [ %174, %169 ]
  %182 = shl nsw i64 -1, %162
  %183 = xor i64 %182, -1
  %184 = and i64 %181, %183
  %185 = sub i64 %180, %162
  store i64 %185, i64* %42, align 8
  %186 = lshr i64 %181, %162
  store i64 %186, i64* %40, align 8
  %187 = icmp eq i64 %184, 0
  br i1 %187, label %244, label %555

188:                                              ; preds = %154, %241
  %189 = phi i64 [ %242, %241 ], [ 0, %154 ]
  %190 = call i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64 140793322930185, i64 578853414160072725, %"class.jxl::BitReader"* %1) #8
  %191 = load i32*, i32** %134, align 8
  %192 = load i32*, i32** %136, align 8
  %193 = icmp ult i32* %191, %192
  %194 = ptrtoint i32* %192 to i64
  br i1 %193, label %195, label %198

195:                                              ; preds = %188
  store i32 %190, i32* %191, align 4
  %196 = getelementptr inbounds i32, i32* %191, i64 1
  %197 = ptrtoint i32* %196 to i64
  store i64 %197, i64* %135, align 8
  br label %241

198:                                              ; preds = %188
  %199 = ptrtoint i32* %191 to i64
  %200 = load i64, i64* %132, align 8
  %201 = sub i64 %199, %200
  %202 = ashr exact i64 %201, 2
  %203 = add nsw i64 %202, 1
  %204 = icmp ugt i64 %203, 4611686018427387903
  br i1 %204, label %205, label %207

205:                                              ; preds = %198
  %206 = bitcast %"class.std::__1::vector.1"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %206) #10
  unreachable

207:                                              ; preds = %198
  %208 = sub i64 %194, %200
  %209 = ashr exact i64 %208, 2
  %210 = icmp ult i64 %209, 2305843009213693951
  br i1 %210, label %211, label %219

211:                                              ; preds = %207
  %212 = ashr exact i64 %208, 1
  %213 = icmp ult i64 %212, %203
  %214 = select i1 %213, i64 %203, i64 %212
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %224, label %216

216:                                              ; preds = %211
  %217 = icmp ugt i64 %214, 4611686018427387903
  br i1 %217, label %218, label %219

218:                                              ; preds = %216
  call void @abort() #10
  unreachable

219:                                              ; preds = %216, %207
  %220 = phi i64 [ %214, %216 ], [ 4611686018427387903, %207 ]
  %221 = shl i64 %220, 2
  %222 = call i8* @_Znwm(i64 %221) #9
  %223 = bitcast i8* %222 to i32*
  br label %224

224:                                              ; preds = %219, %211
  %225 = phi i64 [ %220, %219 ], [ 0, %211 ]
  %226 = phi i8* [ %222, %219 ], [ null, %211 ]
  %227 = phi i32* [ %223, %219 ], [ null, %211 ]
  %228 = getelementptr inbounds i32, i32* %227, i64 %202
  %229 = getelementptr inbounds i32, i32* %227, i64 %225
  %230 = ptrtoint i32* %229 to i64
  store i32 %190, i32* %228, align 4
  %231 = getelementptr inbounds i32, i32* %228, i64 1
  %232 = ptrtoint i32* %231 to i64
  %233 = ptrtoint i32* %227 to i64
  %234 = icmp sgt i64 %201, 0
  br i1 %234, label %235, label %237

235:                                              ; preds = %224
  %236 = inttoptr i64 %200 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %226, i8* align 4 %236, i64 %201, i1 false) #8
  br label %237

237:                                              ; preds = %235, %224
  store i64 %233, i64* %132, align 8
  store i64 %232, i64* %135, align 8
  store i64 %230, i64* %137, align 8
  %238 = icmp eq i64 %200, 0
  br i1 %238, label %241, label %239

239:                                              ; preds = %237
  %240 = inttoptr i64 %200 to i8*
  call void @_ZdlPv(i8* %240) #9
  br label %241

241:                                              ; preds = %195, %237, %239
  %242 = add nuw i64 %189, 1
  %243 = icmp eq i64 %242, %0
  br i1 %243, label %155, label %188

244:                                              ; preds = %155, %179
  %245 = phi i64 [ %157, %155 ], [ %185, %179 ]
  %246 = load i8*, i8** %16, align 8
  %247 = getelementptr inbounds i8, i8* %246, i64 8
  %248 = load i64, i64* %113, align 8
  %249 = ptrtoint i8* %247 to i64
  %250 = sub i64 %249, %248
  %251 = shl i64 %250, 3
  %252 = load i64, i64* %118, align 8
  %253 = sub i64 %252, %248
  %254 = load i64, i64* %121, align 8
  %255 = add i64 %253, %254
  %256 = shl i64 %255, 3
  %257 = sub i64 %256, %245
  %258 = icmp ult i64 %251, %257
  br i1 %258, label %555, label %259

259:                                              ; preds = %244
  %260 = bitcast %"class.std::__1::vector"* %2 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %263 = bitcast i64** %262 to i64*
  store i64 %261, i64* %263, align 8
  %264 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %265 = bitcast i64** %264 to i64*
  %266 = load i64, i64* %265, align 8
  %267 = sub i64 %266, %261
  %268 = ashr exact i64 %267, 3
  %269 = icmp ult i64 %268, %0
  br i1 %269, label %270, label %283

270:                                              ; preds = %259
  %271 = icmp ugt i64 %0, 2305843009213693951
  br i1 %271, label %272, label %273

272:                                              ; preds = %270
  call void @abort() #10
  unreachable

273:                                              ; preds = %270
  %274 = shl i64 %0, 3
  %275 = call i8* @_Znwm(i64 %274) #9
  %276 = bitcast i8* %275 to i64*
  %277 = ptrtoint i8* %275 to i64
  %278 = getelementptr inbounds i64, i64* %276, i64 %0
  %279 = ptrtoint i64* %278 to i64
  store i64 %277, i64* %260, align 8
  store i64 %277, i64* %263, align 8
  store i64 %279, i64* %265, align 8
  %280 = icmp eq i64 %261, 0
  br i1 %280, label %283, label %281

281:                                              ; preds = %273
  %282 = inttoptr i64 %261 to i8*
  call void @_ZdlPv(i8* %282) #9
  br label %283

283:                                              ; preds = %259, %273, %281
  br i1 %156, label %355, label %284

284:                                              ; preds = %283
  %285 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 0
  %286 = load i32*, i32** %285, align 8
  br label %287

287:                                              ; preds = %347, %284
  %288 = phi i32* [ %286, %284 ], [ %348, %347 ]
  %289 = phi i64 [ 0, %284 ], [ %353, %347 ]
  %290 = phi i64 [ 0, %284 ], [ %352, %347 ]
  %291 = getelementptr inbounds i32, i32* %288, i64 %289
  %292 = load i32, i32* %291, align 4
  %293 = zext i32 %292 to i64
  %294 = xor i64 %290, -1
  %295 = icmp ult i64 %294, %293
  br i1 %295, label %555, label %296

296:                                              ; preds = %287
  %297 = load i64*, i64** %262, align 8
  %298 = load i64*, i64** %264, align 8
  %299 = icmp eq i64* %297, %298
  %300 = ptrtoint i64* %298 to i64
  br i1 %299, label %304, label %301

301:                                              ; preds = %296
  store i64 %290, i64* %297, align 8
  %302 = getelementptr inbounds i64, i64* %297, i64 1
  %303 = ptrtoint i64* %302 to i64
  store i64 %303, i64* %263, align 8
  br label %347

304:                                              ; preds = %296
  %305 = ptrtoint i64* %297 to i64
  %306 = load i64, i64* %260, align 8
  %307 = sub i64 %305, %306
  %308 = ashr exact i64 %307, 3
  %309 = add nsw i64 %308, 1
  %310 = icmp ugt i64 %309, 2305843009213693951
  br i1 %310, label %311, label %313

311:                                              ; preds = %304
  %312 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %312) #10
  unreachable

313:                                              ; preds = %304
  %314 = sub i64 %300, %306
  %315 = ashr exact i64 %314, 3
  %316 = icmp ult i64 %315, 1152921504606846975
  br i1 %316, label %317, label %325

317:                                              ; preds = %313
  %318 = ashr exact i64 %314, 2
  %319 = icmp ult i64 %318, %309
  %320 = select i1 %319, i64 %309, i64 %318
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %330, label %322

322:                                              ; preds = %317
  %323 = icmp ugt i64 %320, 2305843009213693951
  br i1 %323, label %324, label %325

324:                                              ; preds = %322
  call void @abort() #10
  unreachable

325:                                              ; preds = %322, %313
  %326 = phi i64 [ %320, %322 ], [ 2305843009213693951, %313 ]
  %327 = shl i64 %326, 3
  %328 = call i8* @_Znwm(i64 %327) #9
  %329 = bitcast i8* %328 to i64*
  br label %330

330:                                              ; preds = %325, %317
  %331 = phi i64 [ %326, %325 ], [ 0, %317 ]
  %332 = phi i8* [ %328, %325 ], [ null, %317 ]
  %333 = phi i64* [ %329, %325 ], [ null, %317 ]
  %334 = getelementptr inbounds i64, i64* %333, i64 %308
  %335 = getelementptr inbounds i64, i64* %333, i64 %331
  %336 = ptrtoint i64* %335 to i64
  store i64 %290, i64* %334, align 8
  %337 = getelementptr inbounds i64, i64* %334, i64 1
  %338 = ptrtoint i64* %337 to i64
  %339 = ptrtoint i64* %333 to i64
  %340 = icmp sgt i64 %307, 0
  br i1 %340, label %341, label %343

341:                                              ; preds = %330
  %342 = inttoptr i64 %306 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %332, i8* align 8 %342, i64 %307, i1 false) #8
  br label %343

343:                                              ; preds = %341, %330
  store i64 %339, i64* %260, align 8
  store i64 %338, i64* %263, align 8
  store i64 %336, i64* %265, align 8
  %344 = icmp eq i64 %306, 0
  br i1 %344, label %347, label %345

345:                                              ; preds = %343
  %346 = inttoptr i64 %306 to i8*
  call void @_ZdlPv(i8* %346) #9
  br label %347

347:                                              ; preds = %301, %343, %345
  %348 = load i32*, i32** %285, align 8
  %349 = getelementptr inbounds i32, i32* %348, i64 %289
  %350 = load i32, i32* %349, align 4
  %351 = zext i32 %350 to i64
  %352 = add i64 %290, %351
  %353 = add nuw i64 %289, 1
  %354 = icmp eq i64 %353, %0
  br i1 %354, label %355, label %287

355:                                              ; preds = %347, %283
  %356 = phi i64 [ 0, %283 ], [ %352, %347 ]
  %357 = icmp eq i64* %4, null
  br i1 %357, label %359, label %358

358:                                              ; preds = %355
  store i64 %356, i64* %4, align 8
  br label %359

359:                                              ; preds = %355, %358
  %360 = load i32*, i32** %12, align 8
  %361 = load i32*, i32** %13, align 8
  %362 = icmp eq i32* %360, %361
  br i1 %362, label %558, label %363

363:                                              ; preds = %359
  %364 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %364) #8
  %365 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %366 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  %367 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %364, i8 0, i64 24, i1 false) #8
  %368 = bitcast %"class.std::__1::vector.1"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %368) #8
  %369 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %8, i64 0, i32 0, i32 1
  %370 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %368, i8 0, i64 24, i1 false) #8
  %371 = bitcast i64** %367 to i64*
  %372 = bitcast %"class.std::__1::vector"* %7 to i64*
  %373 = icmp eq i64 %0, 0
  br i1 %373, label %377, label %374

374:                                              ; preds = %363
  %375 = icmp ugt i64 %0, 2305843009213693951
  br i1 %375, label %376, label %379

376:                                              ; preds = %374
  call void @abort() #10
  unreachable

377:                                              ; preds = %363
  %378 = bitcast i32** %370 to i64*
  br label %399

379:                                              ; preds = %374
  %380 = shl i64 %0, 3
  %381 = call i8* @_Znwm(i64 %380) #9
  %382 = bitcast i8* %381 to i64*
  %383 = getelementptr inbounds i64, i64* %382, i64 %0
  %384 = ptrtoint i64* %383 to i64
  %385 = insertelement <2 x i8*> undef, i8* %381, i32 0
  %386 = shufflevector <2 x i8*> %385, <2 x i8*> undef, <2 x i32> zeroinitializer
  %387 = ptrtoint <2 x i8*> %386 to <2 x i64>
  %388 = bitcast %"class.std::__1::vector"* %7 to <2 x i64>*
  store <2 x i64> %387, <2 x i64>* %388, align 16
  store i64 %384, i64* %371, align 16
  %389 = bitcast i32** %370 to i64*
  %390 = shl i64 %0, 2
  %391 = call i8* @_Znwm(i64 %390) #9
  %392 = bitcast i8* %391 to i32*
  %393 = getelementptr inbounds i32, i32* %392, i64 %0
  %394 = ptrtoint i32* %393 to i64
  %395 = insertelement <2 x i8*> undef, i8* %391, i32 0
  %396 = shufflevector <2 x i8*> %395, <2 x i8*> undef, <2 x i32> zeroinitializer
  %397 = ptrtoint <2 x i8*> %396 to <2 x i64>
  %398 = bitcast %"class.std::__1::vector.1"* %8 to <2 x i64>*
  store <2 x i64> %397, <2 x i64>* %398, align 16
  store i64 %394, i64* %389, align 16
  br label %399

399:                                              ; preds = %377, %379
  %400 = phi i64* [ %378, %377 ], [ %389, %379 ]
  %401 = phi i64* [ null, %377 ], [ %382, %379 ]
  %402 = phi i64* [ null, %377 ], [ %383, %379 ]
  %403 = bitcast %"class.std::__1::vector.1"* %8 to i64*
  %404 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %405 = bitcast i64** %366 to i64*
  %406 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %3, i64 0, i32 0, i32 0
  %407 = bitcast i32** %369 to i64*
  br label %436

408:                                              ; preds = %549
  %409 = bitcast %"class.std::__1::vector"* %7 to <2 x i64>*
  %410 = load <2 x i64>, <2 x i64>* %409, align 16
  %411 = load i64, i64* %371, align 16
  %412 = load i64, i64* %403, align 16
  %413 = load i64, i64* %407, align 8
  %414 = load i64, i64* %400, align 8
  %415 = bitcast %"class.std::__1::vector"* %2 to <2 x i64>*
  %416 = load <2 x i64>, <2 x i64>* %415, align 8
  %417 = bitcast %"class.std::__1::vector"* %2 to <2 x i64>*
  store <2 x i64> %410, <2 x i64>* %417, align 8
  %418 = bitcast %"class.std::__1::vector"* %7 to <2 x i64>*
  store <2 x i64> %416, <2 x i64>* %418, align 16
  %419 = load i64, i64* %265, align 8
  store i64 %411, i64* %265, align 8
  store i64 %419, i64* %371, align 16
  %420 = load i64, i64* %132, align 8
  store i64 %412, i64* %132, align 8
  store i64 %420, i64* %403, align 16
  %421 = load i64, i64* %135, align 8
  store i64 %413, i64* %135, align 8
  store i64 %421, i64* %407, align 8
  %422 = load i64, i64* %137, align 8
  store i64 %414, i64* %137, align 8
  store i64 %422, i64* %400, align 8
  %423 = icmp eq i64 %420, 0
  %424 = extractelement <2 x i64> %416, i32 0
  %425 = inttoptr i64 %424 to i64*
  br i1 %423, label %429, label %426

426:                                              ; preds = %408
  store i64 %420, i64* %407, align 8
  %427 = inttoptr i64 %420 to i8*
  call void @_ZdlPv(i8* %427) #9
  %428 = load i64*, i64** %365, align 16
  br label %429

429:                                              ; preds = %408, %426
  %430 = phi i64* [ %425, %408 ], [ %428, %426 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %368) #8
  %431 = icmp eq i64* %430, null
  br i1 %431, label %435, label %432

432:                                              ; preds = %429
  %433 = ptrtoint i64* %430 to i64
  store i64 %433, i64* %405, align 8
  %434 = bitcast i64* %430 to i8*
  call void @_ZdlPv(i8* %434) #9
  br label %435

435:                                              ; preds = %429, %432
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %364) #8
  br label %555

436:                                              ; preds = %552, %399
  %437 = phi i64* [ %402, %399 ], [ %554, %552 ]
  %438 = phi i64* [ %401, %399 ], [ %553, %552 ]
  %439 = phi i32* [ %360, %399 ], [ %550, %552 ]
  %440 = load i32, i32* %439, align 4
  %441 = zext i32 %440 to i64
  %442 = load i64*, i64** %404, align 8
  %443 = getelementptr inbounds i64, i64* %442, i64 %441
  %444 = icmp eq i64* %438, %437
  %445 = ptrtoint i64* %437 to i64
  br i1 %444, label %450, label %446

446:                                              ; preds = %436
  %447 = load i64, i64* %443, align 8
  store i64 %447, i64* %438, align 8
  %448 = getelementptr inbounds i64, i64* %438, i64 1
  %449 = ptrtoint i64* %448 to i64
  store i64 %449, i64* %405, align 8
  br label %494

450:                                              ; preds = %436
  %451 = ptrtoint i64* %438 to i64
  %452 = load i64, i64* %372, align 16
  %453 = sub i64 %451, %452
  %454 = ashr exact i64 %453, 3
  %455 = add nsw i64 %454, 1
  %456 = icmp ugt i64 %455, 2305843009213693951
  br i1 %456, label %457, label %459

457:                                              ; preds = %450
  %458 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %458) #10
  unreachable

459:                                              ; preds = %450
  %460 = sub i64 %445, %452
  %461 = ashr exact i64 %460, 3
  %462 = icmp ult i64 %461, 1152921504606846975
  br i1 %462, label %463, label %471

463:                                              ; preds = %459
  %464 = ashr exact i64 %460, 2
  %465 = icmp ult i64 %464, %455
  %466 = select i1 %465, i64 %455, i64 %464
  %467 = icmp eq i64 %466, 0
  br i1 %467, label %476, label %468

468:                                              ; preds = %463
  %469 = icmp ugt i64 %466, 2305843009213693951
  br i1 %469, label %470, label %471

470:                                              ; preds = %468
  call void @abort() #10
  unreachable

471:                                              ; preds = %468, %459
  %472 = phi i64 [ %466, %468 ], [ 2305843009213693951, %459 ]
  %473 = shl i64 %472, 3
  %474 = call i8* @_Znwm(i64 %473) #9
  %475 = bitcast i8* %474 to i64*
  br label %476

476:                                              ; preds = %471, %463
  %477 = phi i64 [ %472, %471 ], [ 0, %463 ]
  %478 = phi i8* [ %474, %471 ], [ null, %463 ]
  %479 = phi i64* [ %475, %471 ], [ null, %463 ]
  %480 = getelementptr inbounds i64, i64* %479, i64 %454
  %481 = getelementptr inbounds i64, i64* %479, i64 %477
  %482 = ptrtoint i64* %481 to i64
  %483 = load i64, i64* %443, align 8
  store i64 %483, i64* %480, align 8
  %484 = getelementptr inbounds i64, i64* %480, i64 1
  %485 = ptrtoint i64* %484 to i64
  %486 = ptrtoint i64* %479 to i64
  %487 = icmp sgt i64 %453, 0
  br i1 %487, label %488, label %490

488:                                              ; preds = %476
  %489 = inttoptr i64 %452 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %478, i8* align 8 %489, i64 %453, i1 false) #8
  br label %490

490:                                              ; preds = %488, %476
  store i64 %486, i64* %372, align 16
  store i64 %485, i64* %405, align 8
  store i64 %482, i64* %371, align 16
  %491 = icmp eq i64 %452, 0
  br i1 %491, label %494, label %492

492:                                              ; preds = %490
  %493 = inttoptr i64 %452 to i8*
  call void @_ZdlPv(i8* %493) #9
  br label %494

494:                                              ; preds = %446, %490, %492
  %495 = load i32*, i32** %406, align 8
  %496 = getelementptr inbounds i32, i32* %495, i64 %441
  %497 = load i32*, i32** %369, align 8
  %498 = load i32*, i32** %370, align 16
  %499 = icmp eq i32* %497, %498
  %500 = ptrtoint i32* %498 to i64
  br i1 %499, label %505, label %501

501:                                              ; preds = %494
  %502 = load i32, i32* %496, align 4
  store i32 %502, i32* %497, align 4
  %503 = getelementptr inbounds i32, i32* %497, i64 1
  %504 = ptrtoint i32* %503 to i64
  store i64 %504, i64* %407, align 8
  br label %549

505:                                              ; preds = %494
  %506 = ptrtoint i32* %497 to i64
  %507 = load i64, i64* %403, align 16
  %508 = sub i64 %506, %507
  %509 = ashr exact i64 %508, 2
  %510 = add nsw i64 %509, 1
  %511 = icmp ugt i64 %510, 4611686018427387903
  br i1 %511, label %512, label %514

512:                                              ; preds = %505
  %513 = bitcast %"class.std::__1::vector.1"* %8 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %513) #10
  unreachable

514:                                              ; preds = %505
  %515 = sub i64 %500, %507
  %516 = ashr exact i64 %515, 2
  %517 = icmp ult i64 %516, 2305843009213693951
  br i1 %517, label %518, label %526

518:                                              ; preds = %514
  %519 = ashr exact i64 %515, 1
  %520 = icmp ult i64 %519, %510
  %521 = select i1 %520, i64 %510, i64 %519
  %522 = icmp eq i64 %521, 0
  br i1 %522, label %531, label %523

523:                                              ; preds = %518
  %524 = icmp ugt i64 %521, 4611686018427387903
  br i1 %524, label %525, label %526

525:                                              ; preds = %523
  call void @abort() #10
  unreachable

526:                                              ; preds = %523, %514
  %527 = phi i64 [ %521, %523 ], [ 4611686018427387903, %514 ]
  %528 = shl i64 %527, 2
  %529 = call i8* @_Znwm(i64 %528) #9
  %530 = bitcast i8* %529 to i32*
  br label %531

531:                                              ; preds = %526, %518
  %532 = phi i64 [ %527, %526 ], [ 0, %518 ]
  %533 = phi i8* [ %529, %526 ], [ null, %518 ]
  %534 = phi i32* [ %530, %526 ], [ null, %518 ]
  %535 = getelementptr inbounds i32, i32* %534, i64 %509
  %536 = getelementptr inbounds i32, i32* %534, i64 %532
  %537 = ptrtoint i32* %536 to i64
  %538 = load i32, i32* %496, align 4
  store i32 %538, i32* %535, align 4
  %539 = getelementptr inbounds i32, i32* %535, i64 1
  %540 = ptrtoint i32* %539 to i64
  %541 = ptrtoint i32* %534 to i64
  %542 = icmp sgt i64 %508, 0
  br i1 %542, label %543, label %545

543:                                              ; preds = %531
  %544 = inttoptr i64 %507 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %533, i8* align 4 %544, i64 %508, i1 false) #8
  br label %545

545:                                              ; preds = %543, %531
  store i64 %541, i64* %403, align 16
  store i64 %540, i64* %407, align 8
  store i64 %537, i64* %400, align 8
  %546 = icmp eq i64 %507, 0
  br i1 %546, label %549, label %547

547:                                              ; preds = %545
  %548 = inttoptr i64 %507 to i8*
  call void @_ZdlPv(i8* %548) #9
  br label %549

549:                                              ; preds = %501, %545, %547
  %550 = getelementptr inbounds i32, i32* %439, i64 1
  %551 = icmp eq i32* %550, %361
  br i1 %551, label %408, label %552

552:                                              ; preds = %549
  %553 = load i64*, i64** %366, align 8
  %554 = load i64*, i64** %367, align 16
  br label %436

555:                                              ; preds = %287, %66, %48, %70, %99, %127, %108, %179, %244, %435
  %556 = phi i32 [ 0, %435 ], [ -1, %244 ], [ 1, %179 ], [ -1, %108 ], [ -1, %127 ], [ 1, %99 ], [ %72, %70 ], [ -1, %48 ], [ -1, %66 ], [ 1, %287 ]
  %557 = load i32*, i32** %12, align 8
  br label %558

558:                                              ; preds = %555, %359
  %559 = phi i32* [ %557, %555 ], [ %360, %359 ]
  %560 = phi i32 [ %556, %555 ], [ 0, %359 ]
  %561 = icmp eq i32* %559, null
  br i1 %561, label %566, label %562

562:                                              ; preds = %558
  %563 = ptrtoint i32* %559 to i64
  %564 = bitcast i32** %13 to i64*
  store i64 %563, i64* %564, align 8
  %565 = bitcast i32* %559 to i8*
  call void @_ZdlPv(i8* %565) #9
  br label %566

566:                                              ; preds = %558, %562
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  br label %567

567:                                              ; preds = %5, %566
  %568 = phi i32 [ %560, %566 ], [ 1, %5 ]
  ret i32 %568
}

declare i32 @_ZN3jxl17DecodePermutationEmmPjPNS_9BitReaderE(i64, i64, i32*, %"class.jxl::BitReader"*) local_unnamed_addr #2

declare i32 @_ZN3jxl8U32Coder4ReadENS_6U32EncEPNS_9BitReaderE(i64, i64, %"class.jxl::BitReader"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3jxl9BitReader19BoundsCheckedRefillEv(%"class.jxl::BitReader"*) local_unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = icmp ult i64 %7, 56
  br i1 %8, label %9, label %24

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 0
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %11, %4
  br i1 %12, label %13, label %24

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %11, i64 1
  store i8* %14, i8** %5, align 8
  %15 = load i8, i8* %11, align 1
  %16 = zext i8 %15 to i64
  %17 = shl i64 %16, %7
  %18 = load i64, i64* %10, align 8
  %19 = or i64 %17, %18
  store i64 %19, i64* %10, align 8
  %20 = add nuw nsw i64 %7, 8
  store i64 %20, i64* %6, align 8
  %21 = icmp ult i64 %20, 56
  %22 = icmp ult i8* %14, %4
  %23 = and i1 %21, %22
  br i1 %23, label %33, label %24

24:                                               ; preds = %13, %9, %33, %44, %55, %66, %77, %88, %1
  %25 = phi i64 [ %7, %1 ], [ %7, %9 ], [ %20, %13 ], [ %40, %33 ], [ %51, %44 ], [ %62, %55 ], [ %73, %66 ], [ %84, %77 ], [ %95, %88 ]
  %26 = sub i64 63, %25
  %27 = lshr i64 %26, 3
  %28 = getelementptr inbounds %"class.jxl::BitReader", %"class.jxl::BitReader"* %0, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = add i64 %29, %27
  store i64 %30, i64* %28, align 8
  %31 = and i64 %26, -8
  %32 = add i64 %31, %25
  store i64 %32, i64* %6, align 8
  ret void

33:                                               ; preds = %13
  %34 = getelementptr inbounds i8, i8* %11, i64 2
  store i8* %34, i8** %5, align 8
  %35 = load i8, i8* %14, align 1
  %36 = zext i8 %35 to i64
  %37 = shl i64 %36, %20
  %38 = load i64, i64* %10, align 8
  %39 = or i64 %37, %38
  store i64 %39, i64* %10, align 8
  %40 = add nuw nsw i64 %7, 16
  store i64 %40, i64* %6, align 8
  %41 = icmp ult i64 %40, 56
  %42 = icmp ult i8* %34, %4
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %24

44:                                               ; preds = %33
  %45 = getelementptr inbounds i8, i8* %11, i64 3
  store i8* %45, i8** %5, align 8
  %46 = load i8, i8* %34, align 1
  %47 = zext i8 %46 to i64
  %48 = shl i64 %47, %40
  %49 = load i64, i64* %10, align 8
  %50 = or i64 %48, %49
  store i64 %50, i64* %10, align 8
  %51 = add nuw nsw i64 %7, 24
  store i64 %51, i64* %6, align 8
  %52 = icmp ult i64 %51, 56
  %53 = icmp ult i8* %45, %4
  %54 = and i1 %52, %53
  br i1 %54, label %55, label %24

55:                                               ; preds = %44
  %56 = getelementptr inbounds i8, i8* %11, i64 4
  store i8* %56, i8** %5, align 8
  %57 = load i8, i8* %45, align 1
  %58 = zext i8 %57 to i64
  %59 = shl i64 %58, %51
  %60 = load i64, i64* %10, align 8
  %61 = or i64 %59, %60
  store i64 %61, i64* %10, align 8
  %62 = add nuw nsw i64 %7, 32
  store i64 %62, i64* %6, align 8
  %63 = icmp ult i64 %62, 56
  %64 = icmp ult i8* %56, %4
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %24

66:                                               ; preds = %55
  %67 = getelementptr inbounds i8, i8* %11, i64 5
  store i8* %67, i8** %5, align 8
  %68 = load i8, i8* %56, align 1
  %69 = zext i8 %68 to i64
  %70 = shl i64 %69, %62
  %71 = load i64, i64* %10, align 8
  %72 = or i64 %70, %71
  store i64 %72, i64* %10, align 8
  %73 = add nuw nsw i64 %7, 40
  store i64 %73, i64* %6, align 8
  %74 = icmp ult i64 %73, 56
  %75 = icmp ult i8* %67, %4
  %76 = and i1 %74, %75
  br i1 %76, label %77, label %24

77:                                               ; preds = %66
  %78 = getelementptr inbounds i8, i8* %11, i64 6
  store i8* %78, i8** %5, align 8
  %79 = load i8, i8* %67, align 1
  %80 = zext i8 %79 to i64
  %81 = shl i64 %80, %73
  %82 = load i64, i64* %10, align 8
  %83 = or i64 %81, %82
  store i64 %83, i64* %10, align 8
  %84 = add nuw nsw i64 %7, 48
  store i64 %84, i64* %6, align 8
  %85 = icmp ult i64 %84, 56
  %86 = icmp ult i8* %78, %4
  %87 = and i1 %85, %86
  br i1 %87, label %88, label %24

88:                                               ; preds = %77
  %89 = getelementptr inbounds i8, i8* %11, i64 7
  store i8* %89, i8** %5, align 8
  %90 = load i8, i8* %78, align 1
  %91 = zext i8 %90 to i64
  %92 = shl i64 %91, %84
  %93 = load i64, i64* %10, align 8
  %94 = or i64 %92, %93
  store i64 %94, i64* %10, align 8
  %95 = add nuw nsw i64 %7, 56
  store i64 %95, i64* %6, align 8
  br label %24
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #8
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #10
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #10
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #9
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #8
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #8
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #9
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
