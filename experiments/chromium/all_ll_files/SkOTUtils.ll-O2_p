; ModuleID = '../../third_party/skia/src/sfnt/SkOTUtils.cpp'
source_filename = "../../third_party/skia/src/sfnt/SkOTUtils.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkStreamAsset = type { %class.SkStreamSeekable }
%class.SkStreamSeekable = type { %class.SkStreamRewindable }
%class.SkStreamRewindable = type { %class.SkStream }
%class.SkStream = type { i32 (...)** }
%struct.SkSFNTHeader = type { i32, i16, i16, i16, i16 }
%"struct.SkSFNTHeader::TableDirectoryEntry" = type { i32, i32, i32, i32 }
%class.sk_sp = type { %class.SkData* }
%class.sk_sp.7 = type { %"class.SkOTUtils::LocalizedStrings_NameTable"* }
%"class.SkOTUtils::LocalizedStrings_NameTable" = type <{ %"class.SkTypeface::LocalizedStrings", i16*, i32, i32, %"class.std::__1::unique_ptr", %"class.SkOTTableName::Iterator", [4 x i8] }>
%"class.SkTypeface::LocalizedStrings" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.SkOTTableName::Iterator" = type <{ i8*, i64, i64, i32 }>
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%"struct.SkTypeface::LocalizedString" = type { %class.SkString, %class.SkString }
%class.SkString = type { %class.sk_sp.9 }
%class.sk_sp.9 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%"struct.SkOTTableName::Iterator::Record" = type <{ %class.SkString, %class.SkString, i16 }>
%struct.SkAdvancedTypefaceMetrics = type { %class.SkString, %class.SkString, i32, i8, i8, i16, i16, i16, i16, i16, %struct.SkIRect }
%struct.SkIRect = type { i32, i32, i32, i32 }

$_ZN9SkOTUtils26LocalizedStrings_NameTableD2Ev = comdat any

$_ZN9SkOTUtils26LocalizedStrings_NameTableD0Ev = comdat any

@SK_OT_GlyphData_NoOutline = hidden local_unnamed_addr constant [12 x i8] zeroinitializer, align 1
@_ZN9SkOTUtils26LocalizedStrings_NameTable15familyNameTypesE = hidden global [3 x i16] [i16 256, i16 4096, i16 5376], align 2
@_ZTVN9SkOTUtils26LocalizedStrings_NameTableE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.SkOTUtils::LocalizedStrings_NameTable"*)* @_ZN9SkOTUtils26LocalizedStrings_NameTableD2Ev to i8*), i8* bitcast (void (%"class.SkOTUtils::LocalizedStrings_NameTable"*)* @_ZN9SkOTUtils26LocalizedStrings_NameTableD0Ev to i8*), i8* bitcast (i1 (%"class.SkOTUtils::LocalizedStrings_NameTable"*, %"struct.SkTypeface::LocalizedString"*)* @_ZN9SkOTUtils26LocalizedStrings_NameTable4nextEPN10SkTypeface15LocalizedStringE to i8*)] }, align 8

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_ZN9SkOTUtils17CalcTableChecksumEPjm(i32* readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = add i64 %1, 3
  %4 = lshr i64 %3, 2
  %5 = getelementptr inbounds i32, i32* %0, i64 %4
  %6 = icmp eq i64 %4, 0
  br i1 %6, label %97, label %7

7:                                                ; preds = %2
  %8 = ptrtoint i32* %0 to i64
  %9 = getelementptr i32, i32* %0, i64 1
  %10 = icmp ugt i32* %5, %9
  %11 = select i1 %10, i32* %5, i32* %9
  %12 = bitcast i32* %11 to i8*
  %13 = xor i64 %8, -1
  %14 = getelementptr i8, i8* %12, i64 %13
  %15 = ptrtoint i8* %14 to i64
  %16 = lshr i64 %15, 2
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i64 %17, 8
  br i1 %18, label %86, label %19

19:                                               ; preds = %7
  %20 = and i64 %17, 9223372036854775800
  %21 = getelementptr i32, i32* %0, i64 %20
  %22 = add nsw i64 %20, -8
  %23 = lshr exact i64 %22, 3
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 1
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %58, label %27

27:                                               ; preds = %19
  %28 = sub nuw nsw i64 %24, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %55, %29 ]
  %31 = phi <4 x i32> [ zeroinitializer, %27 ], [ %53, %29 ]
  %32 = phi <4 x i32> [ zeroinitializer, %27 ], [ %54, %29 ]
  %33 = phi i64 [ %28, %27 ], [ %56, %29 ]
  %34 = getelementptr i32, i32* %0, i64 %30
  %35 = bitcast i32* %34 to <4 x i32>*
  %36 = load <4 x i32>, <4 x i32>* %35, align 4
  %37 = getelementptr i32, i32* %34, i64 4
  %38 = bitcast i32* %37 to <4 x i32>*
  %39 = load <4 x i32>, <4 x i32>* %38, align 4
  %40 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %36)
  %41 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %39)
  %42 = add <4 x i32> %40, %31
  %43 = add <4 x i32> %41, %32
  %44 = or i64 %30, 8
  %45 = getelementptr i32, i32* %0, i64 %44
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = getelementptr i32, i32* %45, i64 4
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 4
  %51 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %47)
  %52 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %50)
  %53 = add <4 x i32> %51, %42
  %54 = add <4 x i32> %52, %43
  %55 = add i64 %30, 16
  %56 = add i64 %33, -2
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %29, !llvm.loop !2

58:                                               ; preds = %29, %19
  %59 = phi <4 x i32> [ undef, %19 ], [ %53, %29 ]
  %60 = phi <4 x i32> [ undef, %19 ], [ %54, %29 ]
  %61 = phi i64 [ 0, %19 ], [ %55, %29 ]
  %62 = phi <4 x i32> [ zeroinitializer, %19 ], [ %53, %29 ]
  %63 = phi <4 x i32> [ zeroinitializer, %19 ], [ %54, %29 ]
  %64 = icmp eq i64 %25, 0
  br i1 %64, label %76, label %65

65:                                               ; preds = %58
  %66 = getelementptr i32, i32* %0, i64 %61
  %67 = getelementptr i32, i32* %66, i64 4
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %69)
  %71 = add <4 x i32> %70, %63
  %72 = bitcast i32* %66 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %73)
  %75 = add <4 x i32> %74, %62
  br label %76

76:                                               ; preds = %58, %65
  %77 = phi <4 x i32> [ %59, %58 ], [ %75, %65 ]
  %78 = phi <4 x i32> [ %60, %58 ], [ %71, %65 ]
  %79 = add <4 x i32> %78, %77
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %81 = add <4 x i32> %79, %80
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %83 = add <4 x i32> %81, %82
  %84 = extractelement <4 x i32> %83, i32 0
  %85 = icmp eq i64 %17, %20
  br i1 %85, label %97, label %86

86:                                               ; preds = %76, %7
  %87 = phi i32 [ 0, %7 ], [ %84, %76 ]
  %88 = phi i32* [ %0, %7 ], [ %21, %76 ]
  br label %89

89:                                               ; preds = %86, %89
  %90 = phi i32 [ %94, %89 ], [ %87, %86 ]
  %91 = phi i32* [ %95, %89 ], [ %88, %86 ]
  %92 = load i32, i32* %91, align 4
  %93 = tail call i32 @llvm.bswap.i32(i32 %92) #9
  %94 = add i32 %93, %90
  %95 = getelementptr inbounds i32, i32* %91, i64 1
  %96 = icmp ult i32* %95, %5
  br i1 %96, label %89, label %97, !llvm.loop !4

97:                                               ; preds = %89, %76, %2
  %98 = phi i32 [ 0, %2 ], [ %84, %76 ], [ %94, %89 ]
  ret i32 %98
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkData* @_ZN9SkOTUtils10RenameFontEP13SkStreamAssetPKci(%class.SkStreamAsset*, i8* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  %4 = alloca %struct.SkSFNTHeader, align 4
  %5 = alloca %"struct.SkSFNTHeader::TableDirectoryEntry", align 4
  %6 = alloca %class.sk_sp, align 8
  %7 = bitcast %struct.SkSFNTHeader* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %7) #9
  %8 = getelementptr inbounds %class.SkStreamAsset, %class.SkStreamAsset* %0, i64 0, i32 0, i32 0, i32 0
  %9 = bitcast %class.SkStreamAsset* %0 to i64 (%class.SkStream*, i8*, i64)***
  %10 = bitcast %struct.SkSFNTHeader* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %10, i8 -86, i64 12, i1 false)
  %11 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %12 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %11, i64 2
  %13 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %12, align 8
  %14 = call i64 %13(%class.SkStream* %8, i8* nonnull %7, i64 12) #9
  %15 = icmp ult i64 %14, 12
  br i1 %15, label %662, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.SkSFNTHeader, %struct.SkSFNTHeader* %4, i64 0, i32 1
  %18 = bitcast %"struct.SkSFNTHeader::TableDirectoryEntry"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #9
  %19 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %5, i64 0, i32 0
  %20 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %5, i64 0, i32 2
  %21 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %5, i64 0, i32 3
  %22 = bitcast %"struct.SkSFNTHeader::TableDirectoryEntry"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 -86, i64 16, i1 false)
  %23 = load i16, i16* %17, align 4
  %24 = call i16 @llvm.bswap.i16(i16 %23) #9
  %25 = zext i16 %24 to i32
  %26 = icmp eq i16 %23, 0
  br i1 %26, label %40, label %27

27:                                               ; preds = %16, %37
  %28 = phi i32 [ %38, %37 ], [ 0, %16 ]
  %29 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %30 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %29, i64 2
  %31 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %30, align 8
  %32 = call i64 %31(%class.SkStream* %8, i8* nonnull %18, i64 16) #9
  %33 = icmp ult i64 %32, 16
  br i1 %33, label %660, label %34

34:                                               ; preds = %27
  %35 = load i32, i32* %19, align 4
  %36 = icmp eq i32 %35, 1701667182
  br i1 %36, label %40, label %37

37:                                               ; preds = %34
  %38 = add nuw nsw i32 %28, 1
  %39 = icmp ult i32 %38, %25
  br i1 %39, label %27, label %40

40:                                               ; preds = %37, %34, %16
  %41 = phi i32 [ 0, %16 ], [ %28, %34 ], [ %38, %37 ]
  %42 = icmp eq i32 %41, %25
  br i1 %42, label %660, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %class.SkStreamAsset, %class.SkStreamAsset* %0, i64 0, i32 0, i32 0
  %45 = bitcast %class.SkStreamAsset* %0 to i1 (%class.SkStreamRewindable*)***
  %46 = load i1 (%class.SkStreamRewindable*)**, i1 (%class.SkStreamRewindable*)*** %45, align 8
  %47 = getelementptr inbounds i1 (%class.SkStreamRewindable*)*, i1 (%class.SkStreamRewindable*)** %46, i64 5
  %48 = load i1 (%class.SkStreamRewindable*)*, i1 (%class.SkStreamRewindable*)** %47, align 8
  %49 = call zeroext i1 %48(%class.SkStreamRewindable* %44) #9
  br i1 %49, label %50, label %660

50:                                               ; preds = %43
  %51 = sext i32 %2 to i64
  %52 = shl nsw i64 %51, 1
  %53 = add nsw i64 %52, 126
  %54 = add nsw i64 %52, 129
  %55 = and i64 %54, -4
  %56 = load i32, i32* %21, align 4
  %57 = call i32 @llvm.bswap.i32(i32 %56) #9
  %58 = add i32 %57, 3
  %59 = and i32 %58, -4
  %60 = zext i32 %59 to i64
  %61 = load i32, i32* %20, align 4
  %62 = call i32 @llvm.bswap.i32(i32 %61) #9
  %63 = zext i32 %62 to i64
  %64 = bitcast %class.SkStreamAsset* %0 to i64 (%class.SkStreamAsset*)***
  %65 = load i64 (%class.SkStreamAsset*)**, i64 (%class.SkStreamAsset*)*** %64, align 8
  %66 = getelementptr inbounds i64 (%class.SkStreamAsset*)*, i64 (%class.SkStreamAsset*)** %65, i64 11
  %67 = load i64 (%class.SkStreamAsset*)*, i64 (%class.SkStreamAsset*)** %66, align 8
  %68 = call i64 %67(%class.SkStreamAsset* %0) #9
  %69 = sub i64 %68, %60
  %70 = add i64 %69, %55
  %71 = bitcast %class.sk_sp* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %71) #9
  %72 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %72, align 8
  call void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp* nonnull sret %6, i64 %70) #9
  %73 = load %class.SkData*, %class.SkData** %72, align 8
  %74 = getelementptr inbounds %class.SkData, %class.SkData* %73, i64 0, i32 3
  %75 = load i8*, i8** %74, align 8
  %76 = ptrtoint i8* %75 to i64
  %77 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %78 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %77, i64 2
  %79 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %78, align 8
  %80 = call i64 %79(%class.SkStream* %8, i8* %75, i64 %63) #9
  %81 = icmp ult i64 %80, %63
  br i1 %81, label %649, label %82

82:                                               ; preds = %50
  %83 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %84 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %83, i64 2
  %85 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %84, align 8
  %86 = call i64 %85(%class.SkStream* %8, i8* null, i64 %60) #9
  %87 = icmp ult i64 %86, %60
  br i1 %87, label %649, label %88

88:                                               ; preds = %82
  %89 = getelementptr inbounds i8, i8* %75, i64 %63
  %90 = sub i64 %69, %63
  %91 = load i64 (%class.SkStream*, i8*, i64)**, i64 (%class.SkStream*, i8*, i64)*** %9, align 8
  %92 = getelementptr inbounds i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %91, i64 2
  %93 = load i64 (%class.SkStream*, i8*, i64)*, i64 (%class.SkStream*, i8*, i64)** %92, align 8
  %94 = call i64 %93(%class.SkStream* %8, i8* %89, i64 %90) #9
  %95 = icmp ult i64 %94, %90
  br i1 %95, label %649, label %96

96:                                               ; preds = %88
  %97 = getelementptr inbounds i8, i8* %75, i64 12
  %98 = bitcast i8* %97 to %"struct.SkSFNTHeader::TableDirectoryEntry"*
  %99 = zext i16 %24 to i64
  %100 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %98, i64 %99
  %101 = icmp ugt %"struct.SkSFNTHeader::TableDirectoryEntry"* %100, %98
  br i1 %101, label %102, label %148

102:                                              ; preds = %96
  %103 = shl nuw nsw i64 %99, 4
  %104 = add nsw i64 %103, -1
  %105 = and i64 %104, 16
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %123

107:                                              ; preds = %102
  %108 = getelementptr inbounds i8, i8* %75, i64 20
  %109 = bitcast i8* %108 to i32*
  %110 = load i32, i32* %109, align 1
  %111 = call i32 @llvm.bswap.i32(i32 %110) #9
  %112 = icmp ugt i32 %111, %62
  br i1 %112, label %113, label %116

113:                                              ; preds = %107
  %114 = sub i32 %111, %59
  %115 = call i32 @llvm.bswap.i32(i32 %114) #9
  store i32 %115, i32* %109, align 1
  br label %116

116:                                              ; preds = %113, %107
  %117 = bitcast i8* %97 to i32*
  %118 = load i32, i32* %117, align 1
  %119 = icmp eq i32 %118, 1684104552
  %120 = select i1 %119, %"struct.SkSFNTHeader::TableDirectoryEntry"* %98, %"struct.SkSFNTHeader::TableDirectoryEntry"* null
  %121 = getelementptr inbounds i8, i8* %75, i64 28
  %122 = bitcast i8* %121 to %"struct.SkSFNTHeader::TableDirectoryEntry"*
  br label %123

123:                                              ; preds = %116, %102
  %124 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ null, %102 ], [ %120, %116 ]
  %125 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ %98, %102 ], [ %122, %116 ]
  %126 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ undef, %102 ], [ %120, %116 ]
  %127 = icmp eq i64 %104, 15
  br i1 %127, label %148, label %128

128:                                              ; preds = %123, %667
  %129 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ %671, %667 ], [ %124, %123 ]
  %130 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ %672, %667 ], [ %125, %123 ]
  %131 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %130, i64 0, i32 2
  %132 = load i32, i32* %131, align 1
  %133 = call i32 @llvm.bswap.i32(i32 %132) #9
  %134 = icmp ugt i32 %133, %62
  br i1 %134, label %135, label %138

135:                                              ; preds = %128
  %136 = sub i32 %133, %59
  %137 = call i32 @llvm.bswap.i32(i32 %136) #9
  store i32 %137, i32* %131, align 1
  br label %138

138:                                              ; preds = %135, %128
  %139 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %130, i64 0, i32 0
  %140 = load i32, i32* %139, align 1
  %141 = icmp eq i32 %140, 1684104552
  %142 = select i1 %141, %"struct.SkSFNTHeader::TableDirectoryEntry"* %130, %"struct.SkSFNTHeader::TableDirectoryEntry"* %129
  %143 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %130, i64 1
  %144 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %130, i64 1, i32 2
  %145 = load i32, i32* %144, align 1
  %146 = call i32 @llvm.bswap.i32(i32 %145) #9
  %147 = icmp ugt i32 %146, %62
  br i1 %147, label %664, label %667

148:                                              ; preds = %123, %667, %96
  %149 = phi %"struct.SkSFNTHeader::TableDirectoryEntry"* [ null, %96 ], [ %126, %123 ], [ %671, %667 ]
  %150 = zext i32 %41 to i64
  %151 = trunc i64 %53 to i32
  %152 = call i32 @llvm.bswap.i32(i32 %151) #9
  %153 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %98, i64 %150, i32 3
  store i32 %152, i32* %153, align 1
  %154 = trunc i64 %69 to i32
  %155 = call i32 @llvm.bswap.i32(i32 %154) #9
  %156 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %98, i64 %150, i32 2
  store i32 %155, i32* %156, align 1
  %157 = getelementptr inbounds i8, i8* %75, i64 %69
  %158 = bitcast i8* %157 to i16*
  store i16 0, i16* %158, align 1
  %159 = getelementptr inbounds i8, i8* %157, i64 2
  %160 = bitcast i8* %159 to i16*
  store i16 2560, i16* %160, align 1
  %161 = getelementptr inbounds i8, i8* %157, i64 4
  %162 = bitcast i8* %161 to i16*
  store i16 32256, i16* %162, align 1
  %163 = getelementptr inbounds i8, i8* %157, i64 6
  %164 = trunc i64 %52 to i16
  %165 = call i16 @llvm.bswap.i16(i16 %164) #9
  %166 = bitcast i8* %163 to i16*
  store i16 768, i16* %166, align 1
  %167 = getelementptr inbounds i8, i8* %163, i64 2
  %168 = bitcast i8* %167 to i16*
  store i16 0, i16* %168, align 1
  %169 = getelementptr inbounds i8, i8* %163, i64 4
  %170 = bitcast i8* %169 to i16*
  store i16 2308, i16* %170, align 1
  %171 = getelementptr inbounds i8, i8* %163, i64 6
  %172 = bitcast i8* %171 to i16*
  store i16 256, i16* %172, align 1
  %173 = getelementptr inbounds i8, i8* %163, i64 10
  %174 = bitcast i8* %173 to i16*
  store i16 0, i16* %174, align 1
  %175 = getelementptr inbounds i8, i8* %163, i64 8
  %176 = bitcast i8* %175 to i16*
  store i16 %165, i16* %176, align 1
  %177 = getelementptr inbounds i8, i8* %163, i64 12
  %178 = bitcast i8* %177 to i16*
  store i16 768, i16* %178, align 1
  %179 = getelementptr inbounds i8, i8* %177, i64 2
  %180 = bitcast i8* %179 to i16*
  store i16 0, i16* %180, align 1
  %181 = getelementptr inbounds i8, i8* %177, i64 4
  %182 = bitcast i8* %181 to i16*
  store i16 2308, i16* %182, align 1
  %183 = getelementptr inbounds i8, i8* %177, i64 6
  %184 = bitcast i8* %183 to i16*
  store i16 512, i16* %184, align 1
  %185 = getelementptr inbounds i8, i8* %177, i64 10
  %186 = bitcast i8* %185 to i16*
  store i16 0, i16* %186, align 1
  %187 = getelementptr inbounds i8, i8* %177, i64 8
  %188 = bitcast i8* %187 to i16*
  store i16 %165, i16* %188, align 1
  %189 = getelementptr inbounds i8, i8* %177, i64 12
  %190 = bitcast i8* %189 to i16*
  store i16 768, i16* %190, align 1
  %191 = getelementptr inbounds i8, i8* %189, i64 2
  %192 = bitcast i8* %191 to i16*
  store i16 0, i16* %192, align 1
  %193 = getelementptr inbounds i8, i8* %189, i64 4
  %194 = bitcast i8* %193 to i16*
  store i16 2308, i16* %194, align 1
  %195 = getelementptr inbounds i8, i8* %189, i64 6
  %196 = bitcast i8* %195 to i16*
  store i16 768, i16* %196, align 1
  %197 = getelementptr inbounds i8, i8* %189, i64 10
  %198 = bitcast i8* %197 to i16*
  store i16 0, i16* %198, align 1
  %199 = getelementptr inbounds i8, i8* %189, i64 8
  %200 = bitcast i8* %199 to i16*
  store i16 %165, i16* %200, align 1
  %201 = getelementptr inbounds i8, i8* %189, i64 12
  %202 = bitcast i8* %201 to i16*
  store i16 768, i16* %202, align 1
  %203 = getelementptr inbounds i8, i8* %201, i64 2
  %204 = bitcast i8* %203 to i16*
  store i16 0, i16* %204, align 1
  %205 = getelementptr inbounds i8, i8* %201, i64 4
  %206 = bitcast i8* %205 to i16*
  store i16 2308, i16* %206, align 1
  %207 = getelementptr inbounds i8, i8* %201, i64 6
  %208 = bitcast i8* %207 to i16*
  store i16 1024, i16* %208, align 1
  %209 = getelementptr inbounds i8, i8* %201, i64 10
  %210 = bitcast i8* %209 to i16*
  store i16 0, i16* %210, align 1
  %211 = getelementptr inbounds i8, i8* %201, i64 8
  %212 = bitcast i8* %211 to i16*
  store i16 %165, i16* %212, align 1
  %213 = getelementptr inbounds i8, i8* %201, i64 12
  %214 = bitcast i8* %213 to i16*
  store i16 768, i16* %214, align 1
  %215 = getelementptr inbounds i8, i8* %213, i64 2
  %216 = bitcast i8* %215 to i16*
  store i16 0, i16* %216, align 1
  %217 = getelementptr inbounds i8, i8* %213, i64 4
  %218 = bitcast i8* %217 to i16*
  store i16 2308, i16* %218, align 1
  %219 = getelementptr inbounds i8, i8* %213, i64 6
  %220 = bitcast i8* %219 to i16*
  store i16 1536, i16* %220, align 1
  %221 = getelementptr inbounds i8, i8* %213, i64 10
  %222 = bitcast i8* %221 to i16*
  store i16 0, i16* %222, align 1
  %223 = getelementptr inbounds i8, i8* %213, i64 8
  %224 = bitcast i8* %223 to i16*
  store i16 %165, i16* %224, align 1
  %225 = getelementptr inbounds i8, i8* %213, i64 12
  %226 = bitcast i8* %225 to i16*
  store i16 768, i16* %226, align 1
  %227 = getelementptr inbounds i8, i8* %225, i64 2
  %228 = bitcast i8* %227 to i16*
  store i16 256, i16* %228, align 1
  %229 = getelementptr inbounds i8, i8* %225, i64 4
  %230 = bitcast i8* %229 to i16*
  store i16 2308, i16* %230, align 1
  %231 = getelementptr inbounds i8, i8* %225, i64 6
  %232 = bitcast i8* %231 to i16*
  store i16 256, i16* %232, align 1
  %233 = getelementptr inbounds i8, i8* %225, i64 10
  %234 = bitcast i8* %233 to i16*
  store i16 0, i16* %234, align 1
  %235 = getelementptr inbounds i8, i8* %225, i64 8
  %236 = bitcast i8* %235 to i16*
  store i16 %165, i16* %236, align 1
  %237 = getelementptr inbounds i8, i8* %225, i64 12
  %238 = bitcast i8* %237 to i16*
  store i16 768, i16* %238, align 1
  %239 = getelementptr inbounds i8, i8* %237, i64 2
  %240 = bitcast i8* %239 to i16*
  store i16 256, i16* %240, align 1
  %241 = getelementptr inbounds i8, i8* %237, i64 4
  %242 = bitcast i8* %241 to i16*
  store i16 2308, i16* %242, align 1
  %243 = getelementptr inbounds i8, i8* %237, i64 6
  %244 = bitcast i8* %243 to i16*
  store i16 512, i16* %244, align 1
  %245 = getelementptr inbounds i8, i8* %237, i64 10
  %246 = bitcast i8* %245 to i16*
  store i16 0, i16* %246, align 1
  %247 = getelementptr inbounds i8, i8* %237, i64 8
  %248 = bitcast i8* %247 to i16*
  store i16 %165, i16* %248, align 1
  %249 = getelementptr inbounds i8, i8* %237, i64 12
  %250 = bitcast i8* %249 to i16*
  store i16 768, i16* %250, align 1
  %251 = getelementptr inbounds i8, i8* %249, i64 2
  %252 = bitcast i8* %251 to i16*
  store i16 256, i16* %252, align 1
  %253 = getelementptr inbounds i8, i8* %249, i64 4
  %254 = bitcast i8* %253 to i16*
  store i16 2308, i16* %254, align 1
  %255 = getelementptr inbounds i8, i8* %249, i64 6
  %256 = bitcast i8* %255 to i16*
  store i16 768, i16* %256, align 1
  %257 = getelementptr inbounds i8, i8* %249, i64 10
  %258 = bitcast i8* %257 to i16*
  store i16 0, i16* %258, align 1
  %259 = getelementptr inbounds i8, i8* %249, i64 8
  %260 = bitcast i8* %259 to i16*
  store i16 %165, i16* %260, align 1
  %261 = getelementptr inbounds i8, i8* %249, i64 12
  %262 = bitcast i8* %261 to i16*
  store i16 768, i16* %262, align 1
  %263 = getelementptr inbounds i8, i8* %261, i64 2
  %264 = bitcast i8* %263 to i16*
  store i16 256, i16* %264, align 1
  %265 = getelementptr inbounds i8, i8* %261, i64 4
  %266 = bitcast i8* %265 to i16*
  store i16 2308, i16* %266, align 1
  %267 = getelementptr inbounds i8, i8* %261, i64 6
  %268 = bitcast i8* %267 to i16*
  store i16 1024, i16* %268, align 1
  %269 = getelementptr inbounds i8, i8* %261, i64 10
  %270 = bitcast i8* %269 to i16*
  store i16 0, i16* %270, align 1
  %271 = getelementptr inbounds i8, i8* %261, i64 8
  %272 = bitcast i8* %271 to i16*
  store i16 %165, i16* %272, align 1
  %273 = getelementptr inbounds i8, i8* %261, i64 12
  %274 = bitcast i8* %273 to i16*
  store i16 768, i16* %274, align 1
  %275 = getelementptr inbounds i8, i8* %273, i64 2
  %276 = bitcast i8* %275 to i16*
  store i16 256, i16* %276, align 1
  %277 = getelementptr inbounds i8, i8* %273, i64 4
  %278 = bitcast i8* %277 to i16*
  store i16 2308, i16* %278, align 1
  %279 = getelementptr inbounds i8, i8* %273, i64 6
  %280 = bitcast i8* %279 to i16*
  store i16 1536, i16* %280, align 1
  %281 = getelementptr inbounds i8, i8* %273, i64 10
  %282 = bitcast i8* %281 to i16*
  store i16 0, i16* %282, align 1
  %283 = getelementptr inbounds i8, i8* %273, i64 8
  %284 = bitcast i8* %283 to i16*
  store i16 %165, i16* %284, align 1
  %285 = getelementptr inbounds i8, i8* %157, i64 126
  %286 = bitcast i8* %285 to i16*
  %287 = icmp sgt i32 %2, 0
  br i1 %287, label %288, label %385

288:                                              ; preds = %148
  %289 = zext i32 %2 to i64
  %290 = icmp ult i32 %2, 16
  br i1 %290, label %291, label %311

291:                                              ; preds = %383, %311, %288
  %292 = phi i64 [ 0, %311 ], [ 0, %288 ], [ %322, %383 ]
  %293 = xor i64 %292, -1
  %294 = add nsw i64 %293, %289
  %295 = and i64 %289, 3
  %296 = icmp eq i64 %295, 0
  br i1 %296, label %308, label %297

297:                                              ; preds = %291, %297
  %298 = phi i64 [ %305, %297 ], [ %292, %291 ]
  %299 = phi i64 [ %306, %297 ], [ %295, %291 ]
  %300 = getelementptr inbounds i8, i8* %1, i64 %298
  %301 = load i8, i8* %300, align 1
  %302 = sext i8 %301 to i16
  %303 = call i16 @llvm.bswap.i16(i16 %302) #9
  %304 = getelementptr inbounds i16, i16* %286, i64 %298
  store i16 %303, i16* %304, align 2
  %305 = add nuw nsw i64 %298, 1
  %306 = add i64 %299, -1
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %297, !llvm.loop !6

308:                                              ; preds = %297, %291
  %309 = phi i64 [ %292, %291 ], [ %305, %297 ]
  %310 = icmp ult i64 %294, 3
  br i1 %310, label %385, label %402

311:                                              ; preds = %288
  %312 = shl nuw nsw i64 %289, 1
  %313 = add i64 %68, %312
  %314 = add i64 %313, 126
  %315 = sub i64 %314, %60
  %316 = getelementptr i8, i8* %75, i64 %315
  %317 = getelementptr i8, i8* %1, i64 %289
  %318 = icmp ult i8* %285, %317
  %319 = icmp ugt i8* %316, %1
  %320 = and i1 %318, %319
  br i1 %320, label %291, label %321

321:                                              ; preds = %311
  %322 = and i64 %289, 4294967280
  %323 = add nsw i64 %322, -16
  %324 = lshr exact i64 %323, 4
  %325 = add nuw nsw i64 %324, 1
  %326 = and i64 %325, 1
  %327 = icmp eq i64 %323, 0
  br i1 %327, label %365, label %328

328:                                              ; preds = %321
  %329 = sub nuw nsw i64 %325, %326
  br label %330

330:                                              ; preds = %330, %328
  %331 = phi i64 [ 0, %328 ], [ %362, %330 ]
  %332 = phi i64 [ %329, %328 ], [ %363, %330 ]
  %333 = getelementptr inbounds i8, i8* %1, i64 %331
  %334 = bitcast i8* %333 to <8 x i8>*
  %335 = load <8 x i8>, <8 x i8>* %334, align 1, !alias.scope !8
  %336 = getelementptr inbounds i8, i8* %333, i64 8
  %337 = bitcast i8* %336 to <8 x i8>*
  %338 = load <8 x i8>, <8 x i8>* %337, align 1, !alias.scope !8
  %339 = sext <8 x i8> %335 to <8 x i16>
  %340 = sext <8 x i8> %338 to <8 x i16>
  %341 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %339)
  %342 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %340)
  %343 = getelementptr inbounds i16, i16* %286, i64 %331
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %341, <8 x i16>* %344, align 2, !alias.scope !11, !noalias !8
  %345 = getelementptr inbounds i16, i16* %343, i64 8
  %346 = bitcast i16* %345 to <8 x i16>*
  store <8 x i16> %342, <8 x i16>* %346, align 2, !alias.scope !11, !noalias !8
  %347 = or i64 %331, 16
  %348 = getelementptr inbounds i8, i8* %1, i64 %347
  %349 = bitcast i8* %348 to <8 x i8>*
  %350 = load <8 x i8>, <8 x i8>* %349, align 1, !alias.scope !8
  %351 = getelementptr inbounds i8, i8* %348, i64 8
  %352 = bitcast i8* %351 to <8 x i8>*
  %353 = load <8 x i8>, <8 x i8>* %352, align 1, !alias.scope !8
  %354 = sext <8 x i8> %350 to <8 x i16>
  %355 = sext <8 x i8> %353 to <8 x i16>
  %356 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %354)
  %357 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %355)
  %358 = getelementptr inbounds i16, i16* %286, i64 %347
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %356, <8 x i16>* %359, align 2, !alias.scope !11, !noalias !8
  %360 = getelementptr inbounds i16, i16* %358, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %361, align 2, !alias.scope !11, !noalias !8
  %362 = add i64 %331, 32
  %363 = add i64 %332, -2
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %330, !llvm.loop !13

365:                                              ; preds = %330, %321
  %366 = phi i64 [ 0, %321 ], [ %362, %330 ]
  %367 = icmp eq i64 %326, 0
  br i1 %367, label %383, label %368

368:                                              ; preds = %365
  %369 = getelementptr inbounds i8, i8* %1, i64 %366
  %370 = bitcast i8* %369 to <8 x i8>*
  %371 = load <8 x i8>, <8 x i8>* %370, align 1, !alias.scope !8
  %372 = getelementptr inbounds i8, i8* %369, i64 8
  %373 = bitcast i8* %372 to <8 x i8>*
  %374 = load <8 x i8>, <8 x i8>* %373, align 1, !alias.scope !8
  %375 = sext <8 x i8> %371 to <8 x i16>
  %376 = sext <8 x i8> %374 to <8 x i16>
  %377 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %375)
  %378 = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %376)
  %379 = getelementptr inbounds i16, i16* %286, i64 %366
  %380 = bitcast i16* %379 to <8 x i16>*
  store <8 x i16> %377, <8 x i16>* %380, align 2, !alias.scope !11, !noalias !8
  %381 = getelementptr inbounds i16, i16* %379, i64 8
  %382 = bitcast i16* %381 to <8 x i16>*
  store <8 x i16> %378, <8 x i16>* %382, align 2, !alias.scope !11, !noalias !8
  br label %383

383:                                              ; preds = %365, %368
  %384 = icmp eq i64 %322, %289
  br i1 %384, label %385, label %291

385:                                              ; preds = %308, %402, %383, %148
  %386 = getelementptr inbounds i8, i8* %157, i64 %55
  %387 = icmp slt i64 %53, %55
  br i1 %387, label %388, label %429

388:                                              ; preds = %385
  %389 = getelementptr inbounds i8, i8* %157, i64 %53
  %390 = add i64 %68, %52
  %391 = add i64 %390, 127
  %392 = sub i64 %391, %60
  %393 = getelementptr i8, i8* %75, i64 %392
  %394 = icmp ugt i8* %393, %386
  %395 = select i1 %394, i8* %393, i8* %386
  %396 = add nsw i64 %60, -126
  %397 = sub i64 %396, %76
  %398 = sub i64 %397, %68
  %399 = sub i64 %398, %52
  %400 = getelementptr i8, i8* %395, i64 %399
  %401 = ptrtoint i8* %400 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %389, i8 0, i64 %401, i1 false)
  br label %429

402:                                              ; preds = %308, %402
  %403 = phi i64 [ %427, %402 ], [ %309, %308 ]
  %404 = getelementptr inbounds i8, i8* %1, i64 %403
  %405 = load i8, i8* %404, align 1
  %406 = sext i8 %405 to i16
  %407 = call i16 @llvm.bswap.i16(i16 %406) #9
  %408 = getelementptr inbounds i16, i16* %286, i64 %403
  store i16 %407, i16* %408, align 2
  %409 = add nuw nsw i64 %403, 1
  %410 = getelementptr inbounds i8, i8* %1, i64 %409
  %411 = load i8, i8* %410, align 1
  %412 = sext i8 %411 to i16
  %413 = call i16 @llvm.bswap.i16(i16 %412) #9
  %414 = getelementptr inbounds i16, i16* %286, i64 %409
  store i16 %413, i16* %414, align 2
  %415 = add nuw nsw i64 %403, 2
  %416 = getelementptr inbounds i8, i8* %1, i64 %415
  %417 = load i8, i8* %416, align 1
  %418 = sext i8 %417 to i16
  %419 = call i16 @llvm.bswap.i16(i16 %418) #9
  %420 = getelementptr inbounds i16, i16* %286, i64 %415
  store i16 %419, i16* %420, align 2
  %421 = add nuw nsw i64 %403, 3
  %422 = getelementptr inbounds i8, i8* %1, i64 %421
  %423 = load i8, i8* %422, align 1
  %424 = sext i8 %423 to i16
  %425 = call i16 @llvm.bswap.i16(i16 %424) #9
  %426 = getelementptr inbounds i16, i16* %286, i64 %421
  store i16 %425, i16* %426, align 2
  %427 = add nuw nsw i64 %403, 4
  %428 = icmp eq i64 %427, %289
  br i1 %428, label %385, label %402, !llvm.loop !14

429:                                              ; preds = %388, %385
  %430 = bitcast i8* %157 to i32*
  %431 = lshr i64 %54, 2
  %432 = getelementptr inbounds i32, i32* %430, i64 %431
  %433 = icmp eq i64 %431, 0
  br i1 %433, label %530, label %434

434:                                              ; preds = %429
  %435 = and i64 %54, -4
  %436 = add i64 %68, %435
  %437 = sub i64 %436, %60
  %438 = getelementptr i8, i8* %75, i64 %437
  %439 = add i64 %68, 4
  %440 = sub i64 %439, %60
  %441 = getelementptr i8, i8* %75, i64 %440
  %442 = icmp ugt i8* %438, %441
  %443 = select i1 %442, i8* %438, i8* %441
  %444 = xor i64 %76, -1
  %445 = add i64 %444, %60
  %446 = sub i64 %445, %68
  %447 = getelementptr i8, i8* %443, i64 %446
  %448 = ptrtoint i8* %447 to i64
  %449 = lshr i64 %448, 2
  %450 = add nuw nsw i64 %449, 1
  %451 = icmp ult i64 %450, 8
  br i1 %451, label %519, label %452

452:                                              ; preds = %434
  %453 = and i64 %450, 9223372036854775800
  %454 = getelementptr i32, i32* %430, i64 %453
  %455 = add nsw i64 %453, -8
  %456 = lshr exact i64 %455, 3
  %457 = add nuw nsw i64 %456, 1
  %458 = and i64 %457, 1
  %459 = icmp eq i64 %455, 0
  br i1 %459, label %491, label %460

460:                                              ; preds = %452
  %461 = sub nuw nsw i64 %457, %458
  br label %462

462:                                              ; preds = %462, %460
  %463 = phi i64 [ 0, %460 ], [ %488, %462 ]
  %464 = phi <4 x i32> [ zeroinitializer, %460 ], [ %486, %462 ]
  %465 = phi <4 x i32> [ zeroinitializer, %460 ], [ %487, %462 ]
  %466 = phi i64 [ %461, %460 ], [ %489, %462 ]
  %467 = getelementptr i32, i32* %430, i64 %463
  %468 = bitcast i32* %467 to <4 x i32>*
  %469 = load <4 x i32>, <4 x i32>* %468, align 4
  %470 = getelementptr i32, i32* %467, i64 4
  %471 = bitcast i32* %470 to <4 x i32>*
  %472 = load <4 x i32>, <4 x i32>* %471, align 4
  %473 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %469)
  %474 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %472)
  %475 = add <4 x i32> %473, %464
  %476 = add <4 x i32> %474, %465
  %477 = or i64 %463, 8
  %478 = getelementptr i32, i32* %430, i64 %477
  %479 = bitcast i32* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 4
  %481 = getelementptr i32, i32* %478, i64 4
  %482 = bitcast i32* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 4
  %484 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %480)
  %485 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %483)
  %486 = add <4 x i32> %484, %475
  %487 = add <4 x i32> %485, %476
  %488 = add i64 %463, 16
  %489 = add i64 %466, -2
  %490 = icmp eq i64 %489, 0
  br i1 %490, label %491, label %462, !llvm.loop !15

491:                                              ; preds = %462, %452
  %492 = phi <4 x i32> [ undef, %452 ], [ %486, %462 ]
  %493 = phi <4 x i32> [ undef, %452 ], [ %487, %462 ]
  %494 = phi i64 [ 0, %452 ], [ %488, %462 ]
  %495 = phi <4 x i32> [ zeroinitializer, %452 ], [ %486, %462 ]
  %496 = phi <4 x i32> [ zeroinitializer, %452 ], [ %487, %462 ]
  %497 = icmp eq i64 %458, 0
  br i1 %497, label %509, label %498

498:                                              ; preds = %491
  %499 = getelementptr i32, i32* %430, i64 %494
  %500 = getelementptr i32, i32* %499, i64 4
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %502)
  %504 = add <4 x i32> %503, %496
  %505 = bitcast i32* %499 to <4 x i32>*
  %506 = load <4 x i32>, <4 x i32>* %505, align 4
  %507 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %506)
  %508 = add <4 x i32> %507, %495
  br label %509

509:                                              ; preds = %491, %498
  %510 = phi <4 x i32> [ %492, %491 ], [ %508, %498 ]
  %511 = phi <4 x i32> [ %493, %491 ], [ %504, %498 ]
  %512 = add <4 x i32> %511, %510
  %513 = shufflevector <4 x i32> %512, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %514 = add <4 x i32> %512, %513
  %515 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %516 = add <4 x i32> %514, %515
  %517 = extractelement <4 x i32> %516, i32 0
  %518 = icmp eq i64 %450, %453
  br i1 %518, label %530, label %519

519:                                              ; preds = %509, %434
  %520 = phi i32 [ 0, %434 ], [ %517, %509 ]
  %521 = phi i32* [ %430, %434 ], [ %454, %509 ]
  br label %522

522:                                              ; preds = %519, %522
  %523 = phi i32 [ %527, %522 ], [ %520, %519 ]
  %524 = phi i32* [ %528, %522 ], [ %521, %519 ]
  %525 = load i32, i32* %524, align 4
  %526 = call i32 @llvm.bswap.i32(i32 %525) #9
  %527 = add i32 %526, %523
  %528 = getelementptr inbounds i32, i32* %524, i64 1
  %529 = icmp ult i32* %528, %432
  br i1 %529, label %522, label %530, !llvm.loop !16

530:                                              ; preds = %522, %509, %429
  %531 = phi i32 [ 0, %429 ], [ %517, %509 ], [ %527, %522 ]
  %532 = call i32 @llvm.bswap.i32(i32 %531) #9
  %533 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %98, i64 %150, i32 1
  store i32 %532, i32* %533, align 1
  %534 = icmp eq %"struct.SkSFNTHeader::TableDirectoryEntry"* %149, null
  br i1 %534, label %647, label %535

535:                                              ; preds = %530
  %536 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %149, i64 0, i32 2
  %537 = load i32, i32* %536, align 1
  %538 = call i32 @llvm.bswap.i32(i32 %537) #9
  %539 = zext i32 %538 to i64
  %540 = add nuw nsw i64 %539, 54
  %541 = icmp ult i64 %540, %69
  br i1 %541, label %542, label %647

542:                                              ; preds = %535
  %543 = getelementptr inbounds i8, i8* %75, i64 %539
  %544 = getelementptr inbounds i8, i8* %543, i64 8
  %545 = bitcast i8* %544 to i32*
  store i32 0, i32* %545, align 1
  %546 = bitcast i8* %75 to i32*
  %547 = add i64 %70, 3
  %548 = lshr i64 %547, 2
  %549 = getelementptr inbounds i32, i32* %546, i64 %548
  %550 = icmp eq i64 %548, 0
  br i1 %550, label %644, label %551

551:                                              ; preds = %542
  %552 = and i64 %547, -4
  %553 = getelementptr i8, i8* %75, i64 %552
  %554 = getelementptr i8, i8* %75, i64 4
  %555 = icmp ugt i8* %553, %554
  %556 = select i1 %555, i8* %553, i8* %554
  %557 = xor i64 %76, -1
  %558 = getelementptr i8, i8* %556, i64 %557
  %559 = ptrtoint i8* %558 to i64
  %560 = lshr i64 %559, 2
  %561 = add nuw nsw i64 %560, 1
  %562 = icmp ult i64 %561, 8
  br i1 %562, label %630, label %563

563:                                              ; preds = %551
  %564 = and i64 %561, 9223372036854775800
  %565 = getelementptr i32, i32* %546, i64 %564
  %566 = add nsw i64 %564, -8
  %567 = lshr exact i64 %566, 3
  %568 = add nuw nsw i64 %567, 1
  %569 = and i64 %568, 1
  %570 = icmp eq i64 %566, 0
  br i1 %570, label %602, label %571

571:                                              ; preds = %563
  %572 = sub nuw nsw i64 %568, %569
  br label %573

573:                                              ; preds = %573, %571
  %574 = phi i64 [ 0, %571 ], [ %599, %573 ]
  %575 = phi <4 x i32> [ zeroinitializer, %571 ], [ %597, %573 ]
  %576 = phi <4 x i32> [ zeroinitializer, %571 ], [ %598, %573 ]
  %577 = phi i64 [ %572, %571 ], [ %600, %573 ]
  %578 = getelementptr i32, i32* %546, i64 %574
  %579 = bitcast i32* %578 to <4 x i32>*
  %580 = load <4 x i32>, <4 x i32>* %579, align 4
  %581 = getelementptr i32, i32* %578, i64 4
  %582 = bitcast i32* %581 to <4 x i32>*
  %583 = load <4 x i32>, <4 x i32>* %582, align 4
  %584 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %580)
  %585 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %583)
  %586 = add <4 x i32> %584, %575
  %587 = add <4 x i32> %585, %576
  %588 = or i64 %574, 8
  %589 = getelementptr i32, i32* %546, i64 %588
  %590 = bitcast i32* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 4
  %592 = getelementptr i32, i32* %589, i64 4
  %593 = bitcast i32* %592 to <4 x i32>*
  %594 = load <4 x i32>, <4 x i32>* %593, align 4
  %595 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %591)
  %596 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %594)
  %597 = add <4 x i32> %595, %586
  %598 = add <4 x i32> %596, %587
  %599 = add i64 %574, 16
  %600 = add i64 %577, -2
  %601 = icmp eq i64 %600, 0
  br i1 %601, label %602, label %573, !llvm.loop !17

602:                                              ; preds = %573, %563
  %603 = phi <4 x i32> [ undef, %563 ], [ %597, %573 ]
  %604 = phi <4 x i32> [ undef, %563 ], [ %598, %573 ]
  %605 = phi i64 [ 0, %563 ], [ %599, %573 ]
  %606 = phi <4 x i32> [ zeroinitializer, %563 ], [ %597, %573 ]
  %607 = phi <4 x i32> [ zeroinitializer, %563 ], [ %598, %573 ]
  %608 = icmp eq i64 %569, 0
  br i1 %608, label %620, label %609

609:                                              ; preds = %602
  %610 = getelementptr i32, i32* %546, i64 %605
  %611 = getelementptr i32, i32* %610, i64 4
  %612 = bitcast i32* %611 to <4 x i32>*
  %613 = load <4 x i32>, <4 x i32>* %612, align 4
  %614 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %613)
  %615 = add <4 x i32> %614, %607
  %616 = bitcast i32* %610 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 4
  %618 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %617)
  %619 = add <4 x i32> %618, %606
  br label %620

620:                                              ; preds = %602, %609
  %621 = phi <4 x i32> [ %603, %602 ], [ %619, %609 ]
  %622 = phi <4 x i32> [ %604, %602 ], [ %615, %609 ]
  %623 = add <4 x i32> %622, %621
  %624 = shufflevector <4 x i32> %623, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %625 = add <4 x i32> %623, %624
  %626 = shufflevector <4 x i32> %625, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %627 = add <4 x i32> %625, %626
  %628 = extractelement <4 x i32> %627, i32 0
  %629 = icmp eq i64 %561, %564
  br i1 %629, label %641, label %630

630:                                              ; preds = %620, %551
  %631 = phi i32 [ 0, %551 ], [ %628, %620 ]
  %632 = phi i32* [ %546, %551 ], [ %565, %620 ]
  br label %633

633:                                              ; preds = %630, %633
  %634 = phi i32 [ %638, %633 ], [ %631, %630 ]
  %635 = phi i32* [ %639, %633 ], [ %632, %630 ]
  %636 = load i32, i32* %635, align 4
  %637 = call i32 @llvm.bswap.i32(i32 %636) #9
  %638 = add i32 %637, %634
  %639 = getelementptr inbounds i32, i32* %635, i64 1
  %640 = icmp ult i32* %639, %549
  br i1 %640, label %633, label %641, !llvm.loop !18

641:                                              ; preds = %633, %620
  %642 = phi i32 [ %628, %620 ], [ %638, %633 ]
  %643 = sub i32 -1313820742, %642
  br label %644

644:                                              ; preds = %641, %542
  %645 = phi i32 [ -1313820742, %542 ], [ %643, %641 ]
  %646 = call i32 @llvm.bswap.i32(i32 %645) #9
  store i32 %646, i32* %545, align 1
  br label %647

647:                                              ; preds = %530, %644, %535
  %648 = load %class.SkData*, %class.SkData** %72, align 8
  store %class.SkData* null, %class.SkData** %72, align 8
  br label %658

649:                                              ; preds = %88, %82, %50
  %650 = load %class.SkData*, %class.SkData** %72, align 8
  %651 = icmp eq %class.SkData* %650, null
  br i1 %651, label %658, label %652

652:                                              ; preds = %649
  %653 = getelementptr inbounds %class.SkData, %class.SkData* %650, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %654 = atomicrmw add i32* %653, i32 -1 acq_rel
  %655 = icmp eq i32 %654, 1
  br i1 %655, label %656, label %658

656:                                              ; preds = %652
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %650) #9
  %657 = bitcast %class.SkData* %650 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %657) #9
  br label %658

658:                                              ; preds = %647, %649, %652, %656
  %659 = phi %class.SkData* [ %648, %647 ], [ null, %649 ], [ null, %652 ], [ null, %656 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %71) #9
  br label %660

660:                                              ; preds = %27, %43, %40, %658
  %661 = phi %class.SkData* [ %659, %658 ], [ null, %40 ], [ null, %43 ], [ null, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #9
  br label %662

662:                                              ; preds = %3, %660
  %663 = phi %class.SkData* [ %661, %660 ], [ null, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %7) #9
  ret %class.SkData* %663

664:                                              ; preds = %138
  %665 = sub i32 %146, %59
  %666 = call i32 @llvm.bswap.i32(i32 %665) #9
  store i32 %666, i32* %144, align 1
  br label %667

667:                                              ; preds = %664, %138
  %668 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %143, i64 0, i32 0
  %669 = load i32, i32* %668, align 1
  %670 = icmp eq i32 %669, 1684104552
  %671 = select i1 %670, %"struct.SkSFNTHeader::TableDirectoryEntry"* %143, %"struct.SkSFNTHeader::TableDirectoryEntry"* %142
  %672 = getelementptr inbounds %"struct.SkSFNTHeader::TableDirectoryEntry", %"struct.SkSFNTHeader::TableDirectoryEntry"* %130, i64 2
  %673 = icmp ult %"struct.SkSFNTHeader::TableDirectoryEntry"* %672, %100
  br i1 %673, label %128, label %148
}

declare void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp* sret, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTable4MakeERK10SkTypefacePti(%class.sk_sp.7* noalias nocapture sret, %class.SkTypeface* dereferenceable(48), i16*, i32) local_unnamed_addr #2 align 2 {
  %5 = tail call i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface* %1, i32 1851878757) #9
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %4
  %8 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %0, i64 0, i32 0
  store %"class.SkOTUtils::LocalizedStrings_NameTable"* null, %"class.SkOTUtils::LocalizedStrings_NameTable"** %8, align 8
  br label %38

9:                                                ; preds = %4
  %10 = tail call i8* @_Znam(i64 %5) #10
  %11 = ptrtoint i8* %10 to i64
  %12 = tail call i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface* %1, i32 1851878757, i64 0, i64 %5, i8* nonnull %10) #9
  %13 = icmp eq i64 %12, %5
  br i1 %13, label %14, label %36

14:                                               ; preds = %9
  %15 = tail call i8* @_Znwm(i64 64) #10
  %16 = bitcast i8* %15 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9SkOTUtils26LocalizedStrings_NameTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds i8, i8* %15, i64 8
  %18 = bitcast i8* %17 to i16**
  store i16* %2, i16** %18, align 8
  %19 = getelementptr inbounds i8, i8* %15, i64 16
  %20 = bitcast i8* %19 to i32*
  store i32 %3, i32* %20, align 8
  %21 = getelementptr inbounds i8, i8* %15, i64 20
  %22 = bitcast i8* %21 to i32*
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds i8, i8* %15, i64 24
  %24 = bitcast i8* %23 to i64*
  store i64 %11, i64* %24, align 8
  %25 = getelementptr inbounds i8, i8* %15, i64 32
  %26 = load i16, i16* %2, align 2
  %27 = bitcast i8* %25 to i64*
  store i64 %11, i64* %27, align 1
  %28 = getelementptr inbounds i8, i8* %15, i64 40
  %29 = bitcast i8* %28 to i64*
  store i64 %5, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %15, i64 48
  %31 = bitcast i8* %30 to i64*
  store i64 0, i64* %31, align 1
  %32 = getelementptr inbounds i8, i8* %15, i64 56
  %33 = bitcast i8* %32 to i32*
  %34 = zext i16 %26 to i32
  store i32 %34, i32* %33, align 1
  %35 = bitcast %class.sk_sp.7* %0 to i8**
  store i8* %15, i8** %35, align 8
  br label %38

36:                                               ; preds = %9
  %37 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %0, i64 0, i32 0
  store %"class.SkOTUtils::LocalizedStrings_NameTable"* null, %"class.SkOTUtils::LocalizedStrings_NameTable"** %37, align 8
  tail call void @_ZdaPv(i8* nonnull %10) #10
  br label %38

38:                                               ; preds = %36, %14, %7
  ret void
}

declare i64 @_ZNK10SkTypeface12getTableSizeEj(%class.SkTypeface*, i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

declare i64 @_ZNK10SkTypeface12getTableDataEjmmPv(%class.SkTypeface*, i32, i64, i64, i8*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTable18MakeForFamilyNamesERK10SkTypeface(%class.sk_sp.7* noalias nocapture sret, %class.SkTypeface* dereferenceable(48)) local_unnamed_addr #2 align 2 {
  tail call void @_ZN9SkOTUtils26LocalizedStrings_NameTable4MakeERK10SkTypefacePti(%class.sk_sp.7* sret %0, %class.SkTypeface* dereferenceable(48) %1, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @_ZN9SkOTUtils26LocalizedStrings_NameTable15familyNameTypesE, i64 0, i64 0), i32 3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN9SkOTUtils26LocalizedStrings_NameTable4nextEPN10SkTypeface15LocalizedStringE(%"class.SkOTUtils::LocalizedStrings_NameTable"*, %"struct.SkTypeface::LocalizedString"*) unnamed_addr #2 align 2 {
  %3 = alloca %"struct.SkOTTableName::Iterator::Record", align 8
  %4 = bitcast %"struct.SkOTTableName::Iterator::Record"* %3 to i8*
  %5 = getelementptr inbounds %"struct.SkOTTableName::Iterator::Record", %"struct.SkOTTableName::Iterator::Record"* %3, i64 0, i32 1
  %6 = getelementptr inbounds %"struct.SkOTTableName::Iterator::Record", %"struct.SkOTTableName::Iterator::Record"* %3, i64 0, i32 0
  %7 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 5
  %8 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 3
  %10 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 5, i32 2
  %12 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 5, i32 3
  %13 = getelementptr inbounds %"struct.SkTypeface::LocalizedString", %"struct.SkTypeface::LocalizedString"* %1, i64 0, i32 0
  %14 = getelementptr inbounds %"struct.SkTypeface::LocalizedString", %"struct.SkTypeface::LocalizedString"* %1, i64 0, i32 1
  %15 = bitcast %"struct.SkOTTableName::Iterator::Record"* %3 to i8*
  br label %16

16:                                               ; preds = %33, %2
  %17 = phi i1 [ undef, %2 ], [ %34, %33 ]
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %4) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 18, i1 false)
  call void @_ZN8SkStringC1Ev(%class.SkString* nonnull %6) #9
  call void @_ZN8SkStringC1Ev(%class.SkString* %5) #9
  %18 = call zeroext i1 @_ZN13SkOTTableName8Iterator4nextERNS0_6RecordE(%"class.SkOTTableName::Iterator"* %7, %"struct.SkOTTableName::Iterator::Record"* nonnull dereferenceable(18) %3) #9
  br i1 %18, label %19, label %22

19:                                               ; preds = %16
  %20 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSERKS_(%class.SkString* %13, %class.SkString* nonnull dereferenceable(8) %6) #9
  %21 = call dereferenceable(8) %class.SkString* @_ZN8SkStringaSERKS_(%class.SkString* %14, %class.SkString* dereferenceable(8) %5) #9
  br label %33

22:                                               ; preds = %16
  %23 = load i32, i32* %8, align 8
  %24 = load i32, i32* %9, align 4
  %25 = add nsw i32 %24, 1
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %33, label %27

27:                                               ; preds = %22
  store i32 %25, i32* %9, align 4
  %28 = load i16*, i16** %10, align 8
  %29 = sext i32 %25 to i64
  %30 = getelementptr inbounds i16, i16* %28, i64 %29
  %31 = load i16, i16* %30, align 2
  store i64 0, i64* %11, align 1
  %32 = zext i16 %31 to i32
  store i32 %32, i32* %12, align 1
  br label %33

33:                                               ; preds = %22, %27, %19
  %34 = phi i1 [ true, %19 ], [ %17, %27 ], [ false, %22 ]
  %35 = phi i1 [ false, %19 ], [ true, %27 ], [ false, %22 ]
  call void @_ZN8SkStringD1Ev(%class.SkString* %5) #9
  call void @_ZN8SkStringD1Ev(%class.SkString* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %4) #9
  br i1 %35, label %16, label %36

36:                                               ; preds = %33
  ret i1 %34
}

declare zeroext i1 @_ZN13SkOTTableName8Iterator4nextERNS0_6RecordE(%"class.SkOTTableName::Iterator"*, %"struct.SkOTTableName::Iterator::Record"* dereferenceable(18)) local_unnamed_addr #3

declare dereferenceable(8) %class.SkString* @_ZN8SkStringaSERKS_(%class.SkString*, %class.SkString* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9SkOTUtils24SetAdvancedTypefaceFlagsEN15SkOTTableOS2_V44TypeEP25SkAdvancedTypefaceMetrics(i16, %struct.SkAdvancedTypefaceMetrics* nocapture) local_unnamed_addr #2 align 2 {
  %3 = icmp eq i16 %0, 0
  br i1 %3, label %18, label %4

4:                                                ; preds = %2
  %5 = and i16 %0, 514
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %4
  %8 = getelementptr inbounds %struct.SkAdvancedTypefaceMetrics, %struct.SkAdvancedTypefaceMetrics* %1, i64 0, i32 4
  %9 = load i8, i8* %8, align 1
  %10 = or i8 %9, 2
  store i8 %10, i8* %8, align 1
  br label %11

11:                                               ; preds = %4, %7
  %12 = and i16 %0, 1
  %13 = icmp eq i16 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds %struct.SkAdvancedTypefaceMetrics, %struct.SkAdvancedTypefaceMetrics* %1, i64 0, i32 4
  %16 = load i8, i8* %15, align 1
  %17 = or i8 %16, 4
  store i8 %17, i8* %15, align 1
  br label %18

18:                                               ; preds = %11, %2, %14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTableD2Ev(%"class.SkOTUtils::LocalizedStrings_NameTable"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9SkOTUtils26LocalizedStrings_NameTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN9SkOTUtils26LocalizedStrings_NameTableD0Ev(%"class.SkOTUtils::LocalizedStrings_NameTable"*) unnamed_addr #5 comdat align 2 {
  %2 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN9SkOTUtils26LocalizedStrings_NameTableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.SkOTUtils::LocalizedStrings_NameTable", %"class.SkOTUtils::LocalizedStrings_NameTable"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load i8*, i8** %3, align 8
  store i8* null, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  br i1 %5, label %7, label %6

6:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %4) #10
  br label %7

7:                                                ; preds = %1, %6
  %8 = bitcast %"class.SkOTUtils::LocalizedStrings_NameTable"* %0 to i8*
  tail call void @_ZdlPv(i8* %8) #10
  ret void
}

declare void @_ZN8SkStringC1Ev(%class.SkString*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN8SkStringD1Ev(%class.SkString*) unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #6

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #8

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>) #8

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.unroll.disable"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !5, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !5, !3}
