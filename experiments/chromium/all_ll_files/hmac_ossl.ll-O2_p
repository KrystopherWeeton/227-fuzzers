; ModuleID = '../../third_party/libsrtp/crypto/hash/hmac_ossl.c'
source_filename = "../../third_party/libsrtp/crypto/hash/hmac_ossl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.srtp_debug_module_t = type { i32, i8* }
%struct.srtp_auth_test_case_t = type { i32, i8*, i32, i8*, i32, i8*, %struct.srtp_auth_test_case_t* }
%struct.srtp_auth_t = type { %struct.srtp_auth_type_t*, i8*, i32, i32, i32 }
%struct.srtp_auth_type_t = type { {}*, i32 (%struct.srtp_auth_t*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i8*, %struct.srtp_auth_test_case_t*, i32 }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%struct.env_md_st = type opaque
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%struct.engine_st = type opaque

@.str = private unnamed_addr constant [19 x i8] c"hmac sha-1 openssl\00", align 1
@srtp_mod_hmac = hidden local_unnamed_addr global %struct.srtp_debug_module_t { i32 0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i32 0, i32 0) }, align 8
@srtp_hmac_description = internal constant [35 x i8] c"hmac sha-1 authentication function\00", align 16
@srtp_hmac_test_case_0 = internal constant %struct.srtp_auth_test_case_t { i32 20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @srtp_hmac_test_case_0_key, i32 0, i32 0), i32 8, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @srtp_hmac_test_case_0_data, i32 0, i32 0), i32 20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @srtp_hmac_test_case_0_tag, i32 0, i32 0), %struct.srtp_auth_test_case_t* null }, align 8
@srtp_hmac = hidden constant { i32 (%struct.srtp_auth_t**, i32, i32)*, i32 (%struct.srtp_auth_t*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i8*, %struct.srtp_auth_test_case_t*, i32 } { i32 (%struct.srtp_auth_t**, i32, i32)* @srtp_hmac_alloc, i32 (%struct.srtp_auth_t*)* @srtp_hmac_dealloc, i32 (i8*, i8*, i32)* @srtp_hmac_init, i32 (i8*, i8*, i32, i32, i8*)* @srtp_hmac_compute, i32 (i8*, i8*, i32)* @srtp_hmac_update, i32 (i8*)* @srtp_hmac_start, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @srtp_hmac_description, i32 0, i32 0), %struct.srtp_auth_test_case_t* @srtp_hmac_test_case_0, i32 3 }, align 8
@.str.1 = private unnamed_addr constant [45 x i8] c"%s: allocating auth func with key length %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"%s:                           tag length %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"%s: output: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"%s: input: %s\0A\00", align 1
@srtp_hmac_test_case_0_key = internal constant [20 x i8] c"\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B\0B", align 16
@srtp_hmac_test_case_0_data = internal constant [8 x i8] c"Hi There", align 1
@srtp_hmac_test_case_0_tag = internal constant [20 x i8] c"\B6\171\86U\05rd\E2\8B\C0\B6\FB7\8C\8E\F1F\BE\00", align 16

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_hmac_alloc(%struct.srtp_auth_t** nocapture, i32, i32) #0 {
  %4 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 0), align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1, i64 0, i64 0), i8* %7, i32 %1) #3
  %8 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 0), align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %6
  %11 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 1), align 8
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0), i8* %11, i32 %2) #3
  br label %12

12:                                               ; preds = %3, %6, %10
  %13 = icmp sgt i32 %2, 20
  br i1 %13, label %37, label %14

14:                                               ; preds = %12
  %15 = tail call i8* @srtp_crypto_alloc(i64 32) #3
  %16 = bitcast %struct.srtp_auth_t** %0 to i8**
  store i8* %15, i8** %16, align 8
  %17 = icmp eq i8* %15, null
  br i1 %17, label %37, label %18

18:                                               ; preds = %14
  %19 = tail call %struct.hmac_ctx_st* @HMAC_CTX_new() #3
  %20 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %21 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %20, i64 0, i32 1
  %22 = bitcast i8** %21 to %struct.hmac_ctx_st**
  store %struct.hmac_ctx_st* %19, %struct.hmac_ctx_st** %22, align 8
  %23 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %24 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %23, i64 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %28 = bitcast %struct.srtp_auth_t* %23 to i8*
  tail call void @srtp_crypto_free(i8* %28) #3
  store %struct.srtp_auth_t* null, %struct.srtp_auth_t** %0, align 8
  br label %37

29:                                               ; preds = %18
  %30 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %23, i64 0, i32 0
  store %struct.srtp_auth_type_t* bitcast ({ i32 (%struct.srtp_auth_t**, i32, i32)*, i32 (%struct.srtp_auth_t*)*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32, i32, i8*)*, i32 (i8*, i8*, i32)*, i32 (i8*)*, i8*, %struct.srtp_auth_test_case_t*, i32 }* @srtp_hmac to %struct.srtp_auth_type_t*), %struct.srtp_auth_type_t** %30, align 8
  %31 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %32 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %31, i64 0, i32 2
  store i32 %2, i32* %32, align 8
  %33 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %34 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %33, i64 0, i32 3
  store i32 %1, i32* %34, align 4
  %35 = load %struct.srtp_auth_t*, %struct.srtp_auth_t** %0, align 8
  %36 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %35, i64 0, i32 4
  store i32 0, i32* %36, align 8
  br label %37

37:                                               ; preds = %14, %12, %29, %27
  %38 = phi i32 [ 3, %27 ], [ 0, %29 ], [ 2, %12 ], [ 3, %14 ]
  ret i32 %38
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_hmac_dealloc(%struct.srtp_auth_t*) #0 {
  %2 = getelementptr inbounds %struct.srtp_auth_t, %struct.srtp_auth_t* %0, i64 0, i32 1
  %3 = bitcast i8** %2 to %struct.hmac_ctx_st**
  %4 = load %struct.hmac_ctx_st*, %struct.hmac_ctx_st** %3, align 8
  tail call void @HMAC_CTX_free(%struct.hmac_ctx_st* %4) #3
  %5 = bitcast %struct.srtp_auth_t* %0 to i8*
  tail call void @octet_string_set_to_zero(i8* %5, i64 32) #3
  tail call void @srtp_crypto_free(i8* %5) #3
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_hmac_init(i8*, i8*, i32) #0 {
  %4 = bitcast i8* %0 to %struct.hmac_ctx_st*
  %5 = sext i32 %2 to i64
  %6 = tail call %struct.env_md_st* @EVP_sha1() #3
  %7 = tail call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %4, i8* %1, i64 %5, %struct.env_md_st* %6, %struct.engine_st* null) #3
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 7, i32 0
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_hmac_compute(i8*, i8*, i32, i32, i8* nocapture) #0 {
  %6 = alloca [20 x i8], align 16
  %7 = getelementptr inbounds [20 x i8], [20 x i8]* %6, i64 0, i64 0
  %8 = alloca i32, align 4
  %9 = bitcast i8* %0 to %struct.hmac_ctx_st*
  %10 = getelementptr inbounds [20 x i8], [20 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %10) #3
  %11 = bitcast i32* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 20, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #3
  store i32 -1431655766, i32* %8, align 4
  %12 = icmp sgt i32 %3, 20
  br i1 %12, label %33, label %13

13:                                               ; preds = %5
  %14 = sext i32 %2 to i64
  %15 = tail call i32 @HMAC_Update(%struct.hmac_ctx_st* %9, i8* %1, i64 %14) #3
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %33, label %17

17:                                               ; preds = %13
  %18 = call i32 @HMAC_Final(%struct.hmac_ctx_st* %9, i8* nonnull %10, i32* nonnull %8) #3
  %19 = icmp eq i32 %18, 0
  %20 = load i32, i32* %8, align 4
  %21 = icmp ult i32 %20, %3
  %22 = or i1 %19, %21
  br i1 %22, label %33, label %23

23:                                               ; preds = %17
  %24 = icmp sgt i32 %3, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %23
  %26 = zext i32 %3 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* nonnull align 16 %7, i64 %26, i1 false)
  br label %27

27:                                               ; preds = %25, %23
  %28 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 0), align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %27
  %31 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 1), align 8
  %32 = call i8* @srtp_octet_string_hex_string(i8* nonnull %10, i32 %3) #3
  call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i8* %31, i8* %32) #3
  br label %33

33:                                               ; preds = %30, %27, %17, %13, %5
  %34 = phi i32 [ 2, %5 ], [ 7, %13 ], [ 7, %17 ], [ 0, %27 ], [ 0, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #3
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %10) #3
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_hmac_update(i8*, i8*, i32) #0 {
  %4 = bitcast i8* %0 to %struct.hmac_ctx_st*
  %5 = load i32, i32* getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 0), align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %10, label %7

7:                                                ; preds = %3
  %8 = load i8*, i8** getelementptr inbounds (%struct.srtp_debug_module_t, %struct.srtp_debug_module_t* @srtp_mod_hmac, i64 0, i32 1), align 8
  %9 = tail call i8* @srtp_octet_string_hex_string(i8* %1, i32 %2) #3
  tail call void (i32, i8*, ...) @srtp_err_report(i32 3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0), i8* %8, i8* %9) #3
  br label %10

10:                                               ; preds = %3, %7
  %11 = sext i32 %2 to i64
  %12 = tail call i32 @HMAC_Update(%struct.hmac_ctx_st* %4, i8* %1, i64 %11) #3
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i32 7, i32 0
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @srtp_hmac_start(i8*) #0 {
  %2 = bitcast i8* %0 to %struct.hmac_ctx_st*
  %3 = tail call i32 @HMAC_Init_ex(%struct.hmac_ctx_st* %2, i8* null, i64 0, %struct.env_md_st* null, %struct.engine_st* null) #3
  %4 = icmp eq i32 %3, 0
  %5 = select i1 %4, i32 7, i32 0
  ret i32 %5
}

declare void @srtp_err_report(i32, i8*, ...) local_unnamed_addr #1

declare i8* @srtp_crypto_alloc(i64) local_unnamed_addr #1

declare %struct.hmac_ctx_st* @HMAC_CTX_new() local_unnamed_addr #1

declare void @srtp_crypto_free(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare void @HMAC_CTX_free(%struct.hmac_ctx_st*) local_unnamed_addr #1

declare void @octet_string_set_to_zero(i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @HMAC_Init_ex(%struct.hmac_ctx_st*, i8*, i64, %struct.env_md_st*, %struct.engine_st*) local_unnamed_addr #1

declare %struct.env_md_st* @EVP_sha1() local_unnamed_addr #1

declare i32 @HMAC_Update(%struct.hmac_ctx_st*, i8*, i64) local_unnamed_addr #1

declare i32 @HMAC_Final(%struct.hmac_ctx_st*, i8*, i32*) local_unnamed_addr #1

declare i8* @srtp_octet_string_hex_string(i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
