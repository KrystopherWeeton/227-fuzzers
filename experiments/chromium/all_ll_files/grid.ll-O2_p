; ModuleID = '../../third_party/blink/renderer/core/layout/grid.cc'
source_filename = "../../third_party/blink/renderer/core/layout/grid.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<const WTF::Vector<blink::LayoutBox *, 1, WTF::PartitionAllocator> >::InstanceStorage" }
%"class.WTF::StaticSingleton<const WTF::Vector<blink::LayoutBox *, 1, WTF::PartitionAllocator> >::InstanceStorage" = type { [24 x i8] }
%"class.blink::ListGrid::GridTrack" = type { %"class.WTF::DoublyLinkedList.1362", i64, i32, %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"* }
%"class.WTF::DoublyLinkedList.1362" = type { %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"* }
%"class.blink::ListGrid::GridCell" = type { %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"*, i32, %"class.WTF::Vector.1365", i64, i64 }
%"class.WTF::Vector.1365" = type { %"class.WTF::VectorBuffer.1366" }
%"class.WTF::VectorBuffer.1366" = type { %"class.WTF::VectorBufferBase.1367", [8 x i8] }
%"class.WTF::VectorBufferBase.1367" = type { %"class.blink::LayoutBox"**, i32, i32 }
%"class.blink::LayoutBox" = type { %"class.blink::LayoutBoxModelObject", %"class.blink::LayoutRectOutsets", %"class.blink::LayoutRect", %"class.blink::LayoutSize", %"class.blink::LayoutUnit", %"struct.blink::MinMaxSizes", %"class.blink::LayoutUnit", %class.scoped_refptr.849, %"class.WTF::Vector.850", %"class.std::__1::unique_ptr.855", %"struct.blink::BoxLayoutExtraInput"*, %union.anon.880, %"class.blink::Persistent.881" }
%"class.blink::LayoutBoxModelObject" = type { %"class.blink::LayoutObject" }
%"class.blink::LayoutObject" = type { %"class.blink::ImageResourceObserver", %"class.blink::DisplayItemClient.base", i8, [2 x i8], %"class.blink::LayoutObject::LayoutObjectBitfields", %class.scoped_refptr, %"class.blink::UntracedMember", %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"*, %"class.blink::FragmentData" }
%"class.blink::ImageResourceObserver" = type { i32 (...)** }
%"class.blink::DisplayItemClient.base" = type <{ i32 (...)**, i8 }>
%"class.blink::LayoutObject::LayoutObjectBitfields" = type { [12 x i8] }
%class.scoped_refptr = type { %"class.blink::ComputedStyle"* }
%"class.blink::ComputedStyle" = type { %"class.blink::ComputedStyleBase.base", %"class.WTF::RefCounted.683", %"class.std::__1::unique_ptr.685" }
%"class.blink::ComputedStyleBase.base" = type <{ %"class.blink::DataRef", %"class.blink::DataRef.247", %"class.blink::DataRef.395", %"class.blink::DataRef.399", %"class.blink::DataRef.599", %"class.blink::DataRef.666", %"class.blink::DataRef.670", %"class.blink::DataRef.674", %"class.blink::DataRef.678", [20 x i8] }>
%"class.blink::DataRef" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.blink::ComputedStyleBase::StyleInheritedData"* }
%"class.blink::ComputedStyleBase::StyleInheritedData" = type { %"class.WTF::RefCounted", %"class.blink::DataRef.1", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i16, i16 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::DataRef.1" = type { %class.scoped_refptr.2 }
%class.scoped_refptr.2 = type { %"class.blink::ComputedStyleBase::StyleFontData"* }
%"class.blink::ComputedStyleBase::StyleFontData" = type { %"class.WTF::RefCounted.3", %"class.blink::Font" }
%"class.WTF::RefCounted.3" = type { %"class.base::RefCounted.4" }
%"class.base::RefCounted.4" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Font" = type { %"class.blink::FontDescription", %class.scoped_refptr.31 }
%"class.blink::FontDescription" = type { %"class.blink::FontFamily", %class.scoped_refptr.8, %class.scoped_refptr.11, %class.scoped_refptr.21, float, float, float, float, float, float, %"struct.blink::FontSelectionRequest", %"class.blink::FontSelectionValue", %union.anon.30 }
%"class.blink::FontFamily" = type { %"class.WTF::AtomicString", %class.scoped_refptr.7 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.5 }
%class.scoped_refptr.5 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.scoped_refptr.7 = type { %"class.blink::SharedFontFamily"* }
%"class.blink::SharedFontFamily" = type <{ %"class.blink::FontFamily", %"class.WTF::RefCounted.1306", [4 x i8] }>
%"class.WTF::RefCounted.1306" = type { %"class.base::RefCounted.1307" }
%"class.base::RefCounted.1307" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.8 = type { %"class.blink::FontFeatureSettings"* }
%"class.blink::FontFeatureSettings" = type <{ %"class.blink::FontSettings", %"class.WTF::RefCounted.9", [4 x i8] }>
%"class.blink::FontSettings" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::FontTagValuePair"*, i32, i32 }
%"class.blink::FontTagValuePair" = type { i32, i32 }
%"class.WTF::RefCounted.9" = type { %"class.base::RefCounted.10" }
%"class.base::RefCounted.10" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.11 = type { %"class.blink::FontVariationSettings"* }
%"class.blink::FontVariationSettings" = type <{ %"class.blink::FontSettings.12", %"class.WTF::RefCounted.19", [4 x i8] }>
%"class.blink::FontSettings.12" = type { %"class.WTF::Vector.13" }
%"class.WTF::Vector.13" = type { %"class.WTF::VectorBuffer.14" }
%"class.WTF::VectorBuffer.14" = type { %"class.WTF::VectorBufferBase.15" }
%"class.WTF::VectorBufferBase.15" = type { %"class.blink::FontTagValuePair.16"*, i32, i32 }
%"class.blink::FontTagValuePair.16" = type { i32, float }
%"class.WTF::RefCounted.19" = type { %"class.base::RefCounted.20" }
%"class.base::RefCounted.20" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.21 = type { %"class.blink::LayoutLocale"* }
%"class.blink::LayoutLocale" = type <{ %"class.WTF::RefCounted.22", [4 x i8], %"class.WTF::AtomicString", %"class.std::__1::basic_string", %"class.WTF::CaseMap::Locale", %class.scoped_refptr.27, %struct.hb_language_impl_t*, i32, i32, i8, [7 x i8] }>
%"class.WTF::RefCounted.22" = type { %"class.base::RefCounted.23" }
%"class.base::RefCounted.23" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.WTF::CaseMap::Locale" = type { i8* }
%class.scoped_refptr.27 = type { %"class.blink::Hyphenation"* }
%"class.blink::Hyphenation" = type <{ i32 (...)**, %"class.WTF::RefCounted.28", [4 x i8] }>
%"class.WTF::RefCounted.28" = type { %"class.base::RefCounted.29" }
%"class.base::RefCounted.29" = type { %"class.base::subtle::RefCountedBase" }
%struct.hb_language_impl_t = type opaque
%"struct.blink::FontSelectionRequest" = type { %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue", %"class.blink::FontSelectionValue" }
%"class.blink::FontSelectionValue" = type { i16 }
%union.anon.30 = type { %"struct.blink::FontDescription::BitFields" }
%"struct.blink::FontDescription::BitFields" = type { i56 }
%class.scoped_refptr.31 = type { %"class.blink::FontFallbackList"* }
%"class.blink::FontFallbackList" = type { %"class.WTF::RefCounted.32", %"class.WTF::Vector.34", %"class.blink::SimpleFontData"*, %"class.blink::WeakPersistent", i32, i16, i8, %"class.base::WeakPtr" }
%"class.WTF::RefCounted.32" = type { %"class.base::RefCounted.33" }
%"class.base::RefCounted.33" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.34" = type { %"class.WTF::VectorBuffer.35" }
%"class.WTF::VectorBuffer.35" = type { %"class.WTF::VectorBufferBase.36", [8 x i8] }
%"class.WTF::VectorBufferBase.36" = type { %class.scoped_refptr.37*, i32, i32 }
%class.scoped_refptr.37 = type { %"class.blink::FontData"* }
%"class.blink::FontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.38", [4 x i8] }>
%"class.WTF::RefCounted.38" = type { %"class.base::RefCounted.39" }
%"class.base::RefCounted.39" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::SimpleFontData" = type { %"class.blink::FontData.base", %"class.blink::FontMetrics", float, float, [4 x i8], %"class.blink::FontPlatformData", %class.SkFont, i16, float, i16, %"class.std::__1::unique_ptr.54", %class.scoped_refptr.59, i32, i32, %"struct.blink::FontHeight" }
%"class.blink::FontData.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.38" }>
%"class.blink::FontMetrics" = type <{ i32, float, float, float, float, float, float, %"class.absl::optional", %"class.absl::optional", i32, i32, i8, i8, [2 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.42 }
%union.anon.42 = type { float }
%"class.blink::FontPlatformData" = type <{ %class.sk_sp, %"class.std::__1::basic_string", float, i8, i8, i8, i8, i32, %"struct.blink::WebFontRenderStyle", [5 x i8], %class.scoped_refptr.53, i8, [7 x i8] }>
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.43" }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic.43" }>
%"struct.std::__1::atomic.43" = type { %"struct.std::__1::__atomic_base.44" }
%"struct.std::__1::__atomic_base.44" = type { %"struct.std::__1::__atomic_base.45" }
%"struct.std::__1::__atomic_base.45" = type { %"struct.std::__1::__cxx_atomic_impl.46" }
%"struct.std::__1::__cxx_atomic_impl.46" = type { %"struct.std::__1::__cxx_atomic_base_impl.47" }
%"struct.std::__1::__cxx_atomic_base_impl.47" = type { i32 }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkOnce = type { %"struct.std::__1::atomic.48" }
%"struct.std::__1::atomic.48" = type { %"struct.std::__1::__atomic_base.49" }
%"struct.std::__1::__atomic_base.49" = type { %"struct.std::__1::__atomic_base.50" }
%"struct.std::__1::__atomic_base.50" = type { %"struct.std::__1::__cxx_atomic_impl.51" }
%"struct.std::__1::__cxx_atomic_impl.51" = type { %"struct.std::__1::__cxx_atomic_base_impl.52" }
%"struct.std::__1::__cxx_atomic_base_impl.52" = type { i8 }
%"struct.blink::WebFontRenderStyle" = type { i8, i8, i8, i8, i8, i8, i8 }
%class.scoped_refptr.53 = type { %"class.blink::HarfBuzzFace"* }
%"class.blink::HarfBuzzFace" = type opaque
%class.SkFont = type <{ %class.sk_sp, float, float, float, i8, i8, i8, i8 }>
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.blink::SimpleFontData::DerivedFontData"* }
%"struct.blink::SimpleFontData::DerivedFontData" = type { %class.scoped_refptr.57, %class.scoped_refptr.57 }
%class.scoped_refptr.57 = type { %"class.blink::SimpleFontData"* }
%class.scoped_refptr.59 = type { %"class.blink::CustomFontData"* }
%"class.blink::CustomFontData" = type <{ i32 (...)**, %"class.WTF::RefCounted.60", [4 x i8] }>
%"class.WTF::RefCounted.60" = type { %"class.base::RefCounted.61" }
%"class.base::RefCounted.61" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::FontHeight" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::WeakPersistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::FontFallbackMap"*, %"class.blink::PersistentNodePtr" }
%"class.blink::FontFallbackMap" = type opaque
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.62", i32, [4 x i8], %"class.std::__1::unique_ptr.200", %"class.std::__1::unique_ptr.200", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.210", %"class.std::__1::unique_ptr.216", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.228", %"class.std::__1::unique_ptr.234", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.241", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.71", %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.83", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.95", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.180", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.83" = type { %"class.std::__1::__compressed_pair.84" }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.98" = type { %"struct.std::__1::__atomic_base.99" }
%"struct.std::__1::__atomic_base.99" = type { %"struct.std::__1::__atomic_base.100" }
%"struct.std::__1::__atomic_base.100" = type { %"struct.std::__1::__cxx_atomic_impl.101" }
%"struct.std::__1::__cxx_atomic_impl.101" = type { %"struct.std::__1::__cxx_atomic_base_impl.102" }
%"struct.std::__1::__cxx_atomic_base_impl.102" = type { i64 }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.blink::Worklist.109"* }
%"class.blink::Worklist.109" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.blink::Worklist.116"* }
%"class.blink::Worklist.116" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::Worklist.151"* }
%"class.blink::Worklist.151" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.98" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.158", %"class.std::__1::__compressed_pair.167", %"class.std::__1::__compressed_pair.172", %"class.std::__1::__compressed_pair.174", [4 x i8] }>
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160", %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.162" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"struct.std::__1::__compressed_pair_elem.163" = type { i64 }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { float }
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.183", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.192" }
%"class.WTF::Vector.192" = type { %"class.WTF::VectorBuffer.193" }
%"class.WTF::VectorBuffer.193" = type { %"class.WTF::VectorBufferBase.194" }
%"class.WTF::VectorBufferBase.194" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.200" = type { %"class.std::__1::__compressed_pair.201" }
%"class.std::__1::__compressed_pair.201" = type { %"struct.std::__1::__compressed_pair_elem.202" }
%"struct.std::__1::__compressed_pair_elem.202" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.208" }
%"class.WTF::VectorBuffer.208" = type { %"class.WTF::VectorBufferBase.209" }
%"class.WTF::VectorBufferBase.209" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.210" = type { %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.216" = type { %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.222" }
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.109"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.116"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.137"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector.1299", i64 }
%"class.std::__1::vector.1299" = type { %"class.std::__1::__vector_base.1300" }
%"class.std::__1::__vector_base.1300" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.1301" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.1301" = type { %"struct.std::__1::__compressed_pair_elem.1302" }
%"struct.std::__1::__compressed_pair_elem.1302" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.240 }
%class.scoped_refptr.240 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.241" = type { %"struct.std::__1::__atomic_base.242" }
%"struct.std::__1::__atomic_base.242" = type { %"struct.std::__1::__cxx_atomic_impl.243" }
%"struct.std::__1::__cxx_atomic_impl.243" = type { %"struct.std::__1::__cxx_atomic_base_impl.244" }
%"struct.std::__1::__cxx_atomic_base_impl.244" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.245 }
%class.scoped_refptr.245 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.43" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.48" }
%"class.blink::Length" = type <{ %union.anon.246, i8, i8, i8, i8 }>
%union.anon.246 = type { i32 }
%"class.blink::StyleColor" = type { %"class.blink::Color", i32 }
%"class.blink::Color" = type { i32 }
%"class.blink::DataRef.247" = type { %class.scoped_refptr.248 }
%class.scoped_refptr.248 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentData" = type <{ %"class.WTF::RefCounted.249", [4 x i8], %"class.blink::DataRef.251", %"class.blink::DataRef.283", %"class.WTF::Vector.287", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %class.scoped_refptr.292, %class.scoped_refptr.301, %"class.blink::Persistent.309", %"class.blink::Persistent.311", %"class.blink::TextDecorationThickness", %"class.blink::Length", %"class.blink::Length", %"class.blink::TextSizeAdjust", %"struct.blink::TabSize", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", i16, i16, [5 x i8], [3 x i8] }>
%"class.WTF::RefCounted.249" = type { %"class.base::RefCounted.250" }
%"class.base::RefCounted.250" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.251" = type { %class.scoped_refptr.252 }
%class.scoped_refptr.252 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan64PercentSubData" = type <{ %"class.WTF::RefCounted.253", [4 x i8], %"class.WTF::AtomicString", %class.scoped_refptr.255, %class.scoped_refptr.262, %"class.blink::Persistent.273", float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleAutoColor", %"class.blink::StyleAutoColor", i16, i16, i16, i8, i8, i16, [2 x i8] }>
%"class.WTF::RefCounted.253" = type { %"class.base::RefCounted.254" }
%"class.base::RefCounted.254" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.255 = type { %"class.base::RefCountedData"* }
%"class.base::RefCountedData" = type { %"class.base::RefCountedThreadSafe.256", %"class.WTF::Vector.257" }
%"class.base::RefCountedThreadSafe.256" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.257" = type { %"class.WTF::VectorBuffer.258" }
%"class.WTF::VectorBuffer.258" = type { %"class.WTF::VectorBufferBase.259" }
%"class.WTF::VectorBufferBase.259" = type { %"class.blink::AppliedTextDecoration"*, i32, i32 }
%"class.blink::AppliedTextDecoration" = type { i8, %"class.blink::Color", %"class.blink::TextDecorationThickness", %"class.blink::Length" }
%class.scoped_refptr.262 = type { %"class.blink::StyleInitialData"* }
%"class.blink::StyleInitialData" = type { %"class.WTF::RefCounted.263", %"class.blink::StyleVariables" }
%"class.WTF::RefCounted.263" = type { %"class.base::RefCounted.264" }
%"class.base::RefCounted.264" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleVariables" = type { %"class.WTF::HashMap", %"class.blink::Persistent" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %class.scoped_refptr.1424 }
%class.scoped_refptr.1424 = type { %"class.blink::CSSVariableData"* }
%"class.blink::CSSVariableData" = type { %"class.WTF::RefCounted.1425", %"class.WTF::Vector.582", %"class.WTF::Vector.1427", %"class.WTF::String", i8, i8, i8, i8, %"class.WTF::String", %"class.WTF::TextEncoding" }
%"class.WTF::RefCounted.1425" = type { %"class.base::RefCounted.1426" }
%"class.base::RefCounted.1426" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.582" = type { %"class.WTF::VectorBuffer.583" }
%"class.WTF::VectorBuffer.583" = type { %"class.WTF::VectorBufferBase.584" }
%"class.WTF::VectorBufferBase.584" = type { %"class.WTF::String"*, i32, i32 }
%"class.WTF::Vector.1427" = type { %"class.WTF::VectorBuffer.1428" }
%"class.WTF::VectorBuffer.1428" = type { %"class.WTF::VectorBufferBase.1429" }
%"class.WTF::VectorBufferBase.1429" = type { %"class.blink::CSSParserToken"*, i32, i32 }
%"class.blink::CSSParserToken" = type { i24, i32, i8*, %union.anon.1430 }
%union.anon.1430 = type { double }
%"class.WTF::TextEncoding" = type { i8* }
%"class.blink::Persistent" = type { %"class.blink::PersistentBase.267" }
%"class.blink::PersistentBase.267" = type { %"class.blink::HeapHashMap"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.268" }
%"class.WTF::HashMap.268" = type { %"class.WTF::HashTable.269" }
%"class.WTF::HashTable.269" = type <{ %"struct.WTF::KeyValuePair.271"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.271" = type opaque
%"class.blink::PersistentNodePtr.272" = type { %"class.blink::PersistentNode"* }
%"class.blink::Persistent.273" = type { %"class.blink::PersistentBase.274" }
%"class.blink::PersistentBase.274" = type { %"class.blink::HeapVector"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.277" }
%"class.WTF::Vector.277" = type { %"class.WTF::VectorBuffer.278" }
%"class.WTF::VectorBuffer.278" = type { %"class.WTF::VectorBufferBase.279" }
%"class.WTF::VectorBufferBase.279" = type { %"class.blink::CursorData"*, i32, i32 }
%"class.blink::CursorData" = type <{ %"class.blink::Member", i8, [3 x i8], %"class.blink::IntPoint", [4 x i8] }>
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::StyleImage"* }
%"class.blink::StyleImage" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::DataRef.283" = type { %class.scoped_refptr.284 }
%class.scoped_refptr.284 = type { %"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareInheritedUsageLessThan100PercentData" = type <{ %"class.WTF::RefCounted.285", %"class.blink::StyleColor", i16, i8, i8 }>
%"class.WTF::RefCounted.285" = type { %"class.base::RefCounted.286" }
%"class.base::RefCounted.286" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.287" = type { %"class.WTF::VectorBuffer.288" }
%"class.WTF::VectorBuffer.288" = type { %"class.WTF::VectorBufferBase.289" }
%"class.WTF::VectorBufferBase.289" = type { %"class.WTF::AtomicString"*, i32, i32 }
%class.scoped_refptr.292 = type { %"class.blink::QuotesData"* }
%"class.blink::QuotesData" = type { %"class.WTF::RefCounted.293", %"class.WTF::Vector.295" }
%"class.WTF::RefCounted.293" = type { %"class.base::RefCounted.294" }
%"class.base::RefCounted.294" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.295" = type { %"class.WTF::VectorBuffer.296" }
%"class.WTF::VectorBuffer.296" = type { %"class.WTF::VectorBufferBase.297" }
%"class.WTF::VectorBufferBase.297" = type { %"struct.std::__1::pair.298"*, i32, i32 }
%"struct.std::__1::pair.298" = type { %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.301 = type { %"class.blink::ShadowList"* }
%"class.blink::ShadowList" = type { %"class.WTF::RefCounted.302", [4 x i8], %"class.WTF::Vector.304" }
%"class.WTF::RefCounted.302" = type { %"class.base::RefCounted.303" }
%"class.base::RefCounted.303" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.304" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase.306", [28 x i8] }>
%"class.WTF::VectorBufferBase.306" = type { %"class.blink::ShadowData"*, i32, i32 }
%"class.blink::ShadowData" = type { %"class.blink::FloatPoint", float, float, %"class.blink::StyleColor", i32 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::Persistent.309" = type { %"class.blink::PersistentBase.310" }
%"class.blink::PersistentBase.310" = type { %"class.blink::StyleImage"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::Persistent.311" = type { %"class.blink::PersistentBase.312" }
%"class.blink::PersistentBase.312" = type { %"class.blink::ListStyleTypeData"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::ListStyleTypeData" = type { i32, %"class.WTF::AtomicString", %"class.blink::Member.315", %"class.blink::Member.393" }
%"class.blink::Member.315" = type { %"class.blink::MemberBase.316" }
%"class.blink::MemberBase.316" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.317", %"class.blink::Member.329", %"class.blink::Member.323", %"class.blink::Member.331", %"class.blink::Member.331", %"class.blink::Member.373", %"class.blink::Member.375", %"class.blink::Member.377", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.382", %"class.blink::HeapVector.384" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.317" = type { %"class.blink::MemberBase.318" }
%"class.blink::MemberBase.318" = type { %"class.blink::ContainerNode"* }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.321", %"class.blink::Member.321" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.321", %"class.blink::Member.323", %"class.blink::Member.321", %"class.blink::Member.321", %"class.blink::Member.325" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.325" = type { %"class.blink::MemberBase.326" }
%"class.blink::MemberBase.326" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.321" = type { %"class.blink::MemberBase.322" }
%"class.blink::MemberBase.322" = type { %"class.blink::Node"* }
%"class.blink::Member.329" = type { %"class.blink::MemberBase.330" }
%"class.blink::MemberBase.330" = type { %"class.blink::Document"* }
%"class.blink::Document" = type { %"class.blink::ContainerNode", %"class.blink::TreeScope", %"class.blink::UseCounter", %"class.blink::Supplementable", i32, %"class.blink::DocumentLifecycle", i8, i8, %"class.WTF::Vector.942", %"class.WTF::Vector.942", i8, i32, %"class.blink::Member.949", %"class.blink::Member.951", %"class.blink::Member.953", %"class.blink::Member.955", %"class.blink::Member.957", %"class.blink::Member.959", i8, %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.blink::KURL", %"class.std::__1::unique_ptr.967", %"class.blink::KURL", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.blink::Member.973", %"class.blink::Member.975", %"class.blink::Member.390", i32, i32, i32, i8, %"class.blink::TaskHandle", %"class.blink::TaskHandle", %"class.WTF::Vector.978", i8, i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapVector.366", %"class.blink::Member.346", %"class.blink::Member.1002", %"class.blink::Member.346", %"class.blink::Member.346", %"class.blink::Member.346", %"class.blink::UserActionElementSet", %"class.blink::Member.1011", double, double, i64, i64, %"class.blink::HeapHashSet", %"class.blink::HeapHashSet.1019", i16, i8, %"class.blink::Member.1026", %"class.blink::Member.1028", %"class.blink::Member.1030", %"class.blink::Member.1032", %"class.blink::TextLinkColors", %"class.blink::Member.1034", i8, [7 x i8], %"class.blink::HeapHashMap.1036", i32, i32, i8, i8, i8, i32, i32, i32, i8, %"class.WTF::String", %"class.WTF::String", %"class.blink::Member.346", %"class.WTF::Vector.1043", %"class.blink::Member.1048", %"class.blink::Member.1050", i8, %"class.blink::Member.346", i8, i32, i8, %"class.base::ElapsedTimer", %"class.blink::Member.1052", %"class.blink::HeapVector.1054", %"class.std::__1::unique_ptr.1062", %"class.WTF::String", %"class.WTF::String", i8, %"class.WTF::AtomicString", %"class.blink::DocumentEncodingData", i8, i8, [6 x i8], %"class.blink::HeapHashSet.1068", %"class.blink::LiveNodeListRegistry", %"class.blink::Member.1081", %"class.WTF::Vector.1083", i8, i8, %"class.std::__1::unique_ptr.1088", %"class.blink::NthIndexCache"*, i8, i8, i8, i8, i8, i8, %"class.blink::LayoutView"*, %"class.blink::HeapVector.366", %"class.blink::HeapVector.1094", i32, i8, %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapTaskRunnerTimer", %"class.blink::DocumentTiming", %"class.blink::Member.1102", i8, i32, %"class.blink::Member.1104", %"class.blink::Member.1106", %"class.blink::Member.1108", %"class.blink::HeapTaskRunnerTimer", %"class.blink::Member.1110", %"class.WTF::HashMap.1112", %"class.blink::Member.1117", %"class.blink::Member.1119", %"class.blink::Member.1121", %"class.blink::Member.1123", %"class.blink::Member.329", %"class.blink::Member.329", %"class.blink::HeapTaskRunnerTimer", %"class.blink::HeapHashSet.1125", i8, i32, %"class.blink::Member.1132", %"class.blink::Member.1134", i32, %"class.blink::Member.1136", %"class.blink::Member.1138", %"class.blink::Member.1140", %"class.std::__1::unique_ptr.1142", i64, %"class.std::__1::unique_ptr.1148", i32, i32, %"class.blink::Member.1163", %"class.blink::Member.1165", %"class.blink::Member.1167", i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, %"class.blink::Member.1169", %"class.WTF::Vector.1171", %"class.WTF::AtomicString", %"class.blink::HeapHashMap.1176", %"class.blink::Member.1183", %"class.std::__1::unique_ptr.1185", %"class.blink::Member.1191", i8, i8, %"class.WTF::String", %"class.blink::Member.1193", i8, [7 x i8], %"class.blink::HeapHashMap.1195", %"class.blink::HeapObserverSet", %"class.blink::Member.1209", i8, i8, i8, i8, i8, i8, i8, %"class.blink::Member.1211", i32, i8, i8, %"class.blink::WeakMember.1213", %"class.blink::Member.1214" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.935" }
%"class.blink::HeapHashMap.935" = type { %"class.WTF::HashMap.938" }
%"class.WTF::HashMap.938" = type { %"class.WTF::HashTable.939" }
%"class.WTF::HashTable.939" = type <{ %"struct.WTF::KeyValuePair.941"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.941" = type opaque
%"class.blink::DocumentLifecycle" = type <{ i32, i32, i32, i8, i8, [2 x i8] }>
%"class.WTF::Vector.942" = type { %"class.WTF::VectorBuffer.943" }
%"class.WTF::VectorBuffer.943" = type { %"class.WTF::VectorBufferBase.944" }
%"class.WTF::VectorBufferBase.944" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.945 }
%class.scoped_refptr.945 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.946", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.946" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.blink::Member.949" = type { %"class.blink::MemberBase.950" }
%"class.blink::MemberBase.950" = type { %"class.blink::LocalDOMWindow"* }
%"class.blink::LocalDOMWindow" = type opaque
%"class.blink::Member.951" = type { %"class.blink::MemberBase.952" }
%"class.blink::MemberBase.952" = type { %"class.blink::ExecutionContext"* }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable.1227", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.1268", i32, i8, [3 x i8], %"class.blink::HeapVector.1270", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.1278", %"class.blink::Member.1280", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.1289", %"class.blink::Member.1295", %"class.blink::Member.1297", i8, [7 x i8] }>
%"class.blink::Supplementable.1227" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1228" }
%"class.blink::HeapHashMap.1228" = type { %"class.WTF::HashMap.1231" }
%"class.WTF::HashMap.1231" = type { %"class.WTF::HashTable.1232" }
%"class.WTF::HashTable.1232" = type <{ %"struct.WTF::KeyValuePair.1234"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1234" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.1243" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet.1235" }
%"class.blink::HeapObserverSet.1235" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1236" }
%"class.blink::HeapHashSet.1236" = type { %"class.WTF::HashSet.1239" }
%"class.WTF::HashSet.1239" = type { %"class.WTF::HashTable.1240" }
%"class.WTF::HashTable.1240" = type <{ %"class.blink::WeakMember.1242"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1242" = type opaque
%"class.blink::Supplementable.1243" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.1244" }
%"class.blink::HeapHashMap.1244" = type { %"class.WTF::HashMap.1247" }
%"class.WTF::HashMap.1247" = type { %"class.WTF::HashTable.1248" }
%"class.WTF::HashTable.1248" = type <{ %"struct.WTF::KeyValuePair.1250"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1250" = type { i8*, %"class.blink::Member.1415" }
%"class.blink::Member.1415" = type { %"class.blink::MemberBase.1416" }
%"class.blink::MemberBase.1416" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.1417" }
%"class.blink::Member.1417" = type { %"class.blink::MemberBase.1418" }
%"class.blink::MemberBase.1418" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.1251, %"class.std::__1::unique_ptr.1252", %"class.std::__1::unique_ptr.1252", %"class.std::__1::unique_ptr.1258", %"class.std::__1::unique_ptr.1258", %"class.blink::Member.951", i32, [4 x i8], %"class.WTF::HashSet.1264", i32, i32 }
%class.scoped_refptr.1251 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.1252" = type { %"class.std::__1::__compressed_pair.1253" }
%"class.std::__1::__compressed_pair.1253" = type { %"struct.std::__1::__compressed_pair_elem.1254" }
%"struct.std::__1::__compressed_pair_elem.1254" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.1258" = type { %"class.std::__1::__compressed_pair.1259" }
%"class.std::__1::__compressed_pair.1259" = type { %"struct.std::__1::__compressed_pair_elem.1260" }
%"struct.std::__1::__compressed_pair_elem.1260" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.WTF::HashSet.1264" = type { %"class.WTF::HashTable.1265" }
%"class.WTF::HashTable.1265" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1268" = type { %"class.blink::MemberBase.1269" }
%"class.blink::MemberBase.1269" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector.1270" = type { %"class.WTF::Vector.1273" }
%"class.WTF::Vector.1273" = type { %"class.WTF::VectorBuffer.1274" }
%"class.WTF::VectorBuffer.1274" = type { %"class.WTF::VectorBufferBase.1275" }
%"class.WTF::VectorBufferBase.1275" = type { %"class.blink::Member.1276"*, i32, i32 }
%"class.blink::Member.1276" = type opaque
%"class.blink::Member.1278" = type { %"class.blink::MemberBase.1279" }
%"class.blink::MemberBase.1279" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.1280" = type { %"class.blink::MemberBase.1281" }
%"class.blink::MemberBase.1281" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.1282", i32, i32 }
%"class.blink::HeapHashMap.1282" = type { %"class.WTF::HashMap.1285" }
%"class.WTF::HashMap.1285" = type { %"class.WTF::HashTable.1286" }
%"class.WTF::HashTable.1286" = type <{ %"struct.WTF::KeyValuePair.1288"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1288" = type opaque
%"class.std::__1::unique_ptr.1289" = type { %"class.std::__1::__compressed_pair.1290" }
%"class.std::__1::__compressed_pair.1290" = type { %"struct.std::__1::__compressed_pair_elem.1291" }
%"struct.std::__1::__compressed_pair_elem.1291" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.1295" = type { %"class.blink::MemberBase.1296" }
%"class.blink::MemberBase.1296" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.1297" = type { %"class.blink::MemberBase.1298" }
%"class.blink::MemberBase.1298" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::Member.953" = type { %"class.blink::MemberBase.954" }
%"class.blink::MemberBase.954" = type { %"class.blink::ResourceFetcher"* }
%"class.blink::ResourceFetcher" = type opaque
%"class.blink::Member.955" = type { %"class.blink::MemberBase.956" }
%"class.blink::MemberBase.956" = type { %"class.blink::DocumentParser"* }
%"class.blink::DocumentParser" = type opaque
%"class.blink::Member.957" = type { %"class.blink::MemberBase.958" }
%"class.blink::MemberBase.958" = type { %"class.blink::ContextFeatures"* }
%"class.blink::ContextFeatures" = type opaque
%"class.blink::Member.959" = type { %"class.blink::MemberBase.960" }
%"class.blink::MemberBase.960" = type { %"class.blink::HttpRefreshScheduler"* }
%"class.blink::HttpRefreshScheduler" = type opaque
%"class.std::__1::unique_ptr.967" = type { %"class.std::__1::__compressed_pair.968" }
%"class.std::__1::__compressed_pair.968" = type { %"struct.std::__1::__compressed_pair_elem.969" }
%"struct.std::__1::__compressed_pair_elem.969" = type { %"class.blink::OriginAccessEntry"* }
%"class.blink::OriginAccessEntry" = type opaque
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr.961" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.961" = type { %"class.std::__1::__compressed_pair.962" }
%"class.std::__1::__compressed_pair.962" = type { %"struct.std::__1::__compressed_pair_elem.963" }
%"struct.std::__1::__compressed_pair_elem.963" = type { %"class.blink::KURL"* }
%"class.blink::Member.973" = type { %"class.blink::MemberBase.974" }
%"class.blink::MemberBase.974" = type { %"class.blink::DocumentType"* }
%"class.blink::DocumentType" = type opaque
%"class.blink::Member.975" = type { %"class.blink::MemberBase.976" }
%"class.blink::MemberBase.976" = type { %"class.blink::DOMImplementation"* }
%"class.blink::DOMImplementation" = type opaque
%"class.blink::Member.390" = type { %"class.blink::MemberBase.391" }
%"class.blink::MemberBase.391" = type { %"class.blink::CSSStyleSheet"* }
%"class.blink::CSSStyleSheet" = type opaque
%"class.blink::TaskHandle" = type { %class.scoped_refptr.977 }
%class.scoped_refptr.977 = type { %"class.blink::TaskHandle::Runner"* }
%"class.blink::TaskHandle::Runner" = type opaque
%"class.WTF::Vector.978" = type { %"class.WTF::VectorBuffer.979" }
%"class.WTF::VectorBuffer.979" = type { %"class.WTF::VectorBufferBase.980" }
%"class.WTF::VectorBufferBase.980" = type { %"struct.blink::Document::PendingJavascriptUrl"*, i32, i32 }
%"struct.blink::Document::PendingJavascriptUrl" = type { %"class.blink::KURL", %class.scoped_refptr.981 }
%class.scoped_refptr.981 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.982", i32, i32, %"class.blink::Persistent.984" }
%"class.WTF::RefCounted.982" = type { %"class.base::RefCounted.983" }
%"class.base::RefCounted.983" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.984" = type { %"class.blink::PersistentBase.985" }
%"class.blink::PersistentBase.985" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap.988" }
%"class.blink::HeapHashMap.988" = type { %"class.WTF::HashMap.991" }
%"class.WTF::HashMap.991" = type { %"class.WTF::HashTable.992" }
%"class.WTF::HashTable.992" = type <{ %"struct.WTF::KeyValuePair.994"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.994" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.995" }
%"class.blink::MemberBase.995" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::Member.1002" = type { %"class.blink::MemberBase.1003" }
%"class.blink::MemberBase.1003" = type { %"class.blink::Range"* }
%"class.blink::Range" = type opaque
%"class.blink::UserActionElementSet" = type { %"class.blink::HeapHashMap.1004" }
%"class.blink::HeapHashMap.1004" = type { %"class.WTF::HashMap.1007" }
%"class.WTF::HashMap.1007" = type { %"class.WTF::HashTable.1008" }
%"class.WTF::HashTable.1008" = type <{ %"struct.WTF::KeyValuePair.1010"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1010" = type opaque
%"class.blink::Member.1011" = type { %"class.blink::MemberBase.1012" }
%"class.blink::MemberBase.1012" = type { %"class.blink::RootScrollerController"* }
%"class.blink::RootScrollerController" = type opaque
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet.1015" }
%"class.WTF::HashSet.1015" = type { %"class.WTF::HashTable.1016" }
%"class.WTF::HashTable.1016" = type <{ %"class.blink::WeakMember.1018"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1018" = type opaque
%"class.blink::HeapHashSet.1019" = type { %"class.WTF::HashSet.1022" }
%"class.WTF::HashSet.1022" = type { %"class.WTF::HashTable.1023" }
%"class.WTF::HashTable.1023" = type <{ %"class.blink::WeakMember.1025"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1025" = type opaque
%"class.blink::Member.1026" = type { %"class.blink::MemberBase.1027" }
%"class.blink::MemberBase.1027" = type { %"class.blink::ElementIntersectionObserverData"* }
%"class.blink::ElementIntersectionObserverData" = type opaque
%"class.blink::Member.1028" = type { %"class.blink::MemberBase.1029" }
%"class.blink::MemberBase.1029" = type { %"class.blink::StyleEngine"* }
%"class.blink::StyleEngine" = type opaque
%"class.blink::Member.1030" = type { %"class.blink::MemberBase.1031" }
%"class.blink::MemberBase.1031" = type { %"class.blink::StyleSheetList"* }
%"class.blink::StyleSheetList" = type opaque
%"class.blink::Member.1032" = type { %"class.blink::MemberBase.1033" }
%"class.blink::MemberBase.1033" = type { %"class.blink::FormController"* }
%"class.blink::FormController" = type opaque
%"class.blink::TextLinkColors" = type { %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", %"class.blink::Color", i8, i8, i8, i8 }
%"class.blink::Member.1034" = type { %"class.blink::MemberBase.1035" }
%"class.blink::MemberBase.1035" = type { %"class.blink::VisitedLinkState"* }
%"class.blink::VisitedLinkState" = type opaque
%"class.blink::HeapHashMap.1036" = type { %"class.WTF::HashMap.1039" }
%"class.WTF::HashMap.1039" = type { %"class.WTF::HashTable.1040" }
%"class.WTF::HashTable.1040" = type <{ %"struct.WTF::KeyValuePair.1042"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1042" = type opaque
%"class.WTF::Vector.1043" = type { %"class.WTF::VectorBuffer.1044" }
%"class.WTF::VectorBuffer.1044" = type { %"class.WTF::VectorBufferBase.1045" }
%"class.WTF::VectorBufferBase.1045" = type { %"class.blink::AXContext"**, i32, i32 }
%"class.blink::AXContext" = type opaque
%"class.blink::Member.1048" = type { %"class.blink::MemberBase.1049" }
%"class.blink::MemberBase.1049" = type { %"class.blink::AXObjectCache"* }
%"class.blink::AXObjectCache" = type opaque
%"class.blink::Member.1050" = type { %"class.blink::MemberBase.1051" }
%"class.blink::MemberBase.1051" = type { %"class.blink::DocumentMarkerController"* }
%"class.blink::DocumentMarkerController" = type opaque
%"class.blink::Member.346" = type { %"class.blink::MemberBase.347" }
%"class.blink::MemberBase.347" = type { %"class.blink::Element"* }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.351" }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.348 }
%class.scoped_refptr.348 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted.349", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.349" = type { %"class.base::RefCounted.350" }
%"class.base::RefCounted.350" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Member.351" = type { %"class.blink::MemberBase.352" }
%"class.blink::MemberBase.352" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.355", %"class.blink::Member.357", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.355" = type { %"class.WTF::SingleThreadedBitField.356" }
%"class.WTF::SingleThreadedBitField.356" = type { i32 }
%"class.blink::Member.357" = type { %"class.blink::MemberBase.358" }
%"class.blink::MemberBase.358" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.359 }
%class.scoped_refptr.359 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.360", %"class.WTF::AtomicString", %"class.WTF::Vector.362" }
%"class.WTF::RefCounted.360" = type { %"class.base::RefCounted.361" }
%"class.base::RefCounted.361" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.362" = type { %"class.WTF::VectorBuffer.363" }
%"class.WTF::VectorBuffer.363" = type { %"class.WTF::VectorBufferBase.289", [32 x i8] }
%"class.base::ElapsedTimer" = type { %"class.base::TimeTicks" }
%"class.blink::Member.1052" = type { %"class.blink::MemberBase.1053" }
%"class.blink::MemberBase.1053" = type { %"class.blink::ScriptRunner"* }
%"class.blink::ScriptRunner" = type opaque
%"class.blink::HeapVector.1054" = type { %"class.WTF::Vector.1057" }
%"class.WTF::Vector.1057" = type { %"class.WTF::VectorBuffer.1058" }
%"class.WTF::VectorBuffer.1058" = type { %"class.WTF::VectorBufferBase.1059" }
%"class.WTF::VectorBufferBase.1059" = type { %"class.blink::Member.1060"*, i32, i32 }
%"class.blink::Member.1060" = type opaque
%"class.std::__1::unique_ptr.1062" = type { %"class.std::__1::__compressed_pair.1063" }
%"class.std::__1::__compressed_pair.1063" = type { %"struct.std::__1::__compressed_pair_elem.1064" }
%"struct.std::__1::__compressed_pair_elem.1064" = type { %"class.blink::TransformSource"* }
%"class.blink::TransformSource" = type opaque
%"class.blink::DocumentEncodingData" = type <{ %"class.WTF::TextEncoding", i8, i8, [6 x i8] }>
%"class.blink::HeapHashSet.1068" = type { %"class.WTF::HashSet.1071" }
%"class.WTF::HashSet.1071" = type { %"class.WTF::HashTable.1072" }
%"class.WTF::HashTable.1072" = type <{ %"class.blink::WeakMember.1074"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1074" = type opaque
%"class.blink::LiveNodeListRegistry" = type <{ %"class.WTF::Vector.1075", i32, [4 x i8] }>
%"class.WTF::Vector.1075" = type { %"class.WTF::VectorBuffer.1076" }
%"class.WTF::VectorBuffer.1076" = type { %"class.WTF::VectorBufferBase.1077" }
%"class.WTF::VectorBufferBase.1077" = type { %"struct.std::__1::pair.1078"*, i32, i32 }
%"struct.std::__1::pair.1078" = type opaque
%"class.blink::Member.1081" = type { %"class.blink::MemberBase.1082" }
%"class.blink::MemberBase.1082" = type { %"class.blink::SVGDocumentExtensions"* }
%"class.blink::SVGDocumentExtensions" = type opaque
%"class.WTF::Vector.1083" = type { %"class.WTF::VectorBuffer.1084" }
%"class.WTF::VectorBuffer.1084" = type { %"class.WTF::VectorBufferBase.1085" }
%"class.WTF::VectorBufferBase.1085" = type { %"struct.blink::AnnotatedRegionValue"*, i32, i32 }
%"struct.blink::AnnotatedRegionValue" = type <{ %"struct.blink::PhysicalRect", i8, [3 x i8] }>
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.std::__1::unique_ptr.1088" = type { %"class.std::__1::__compressed_pair.1089" }
%"class.std::__1::__compressed_pair.1089" = type { %"struct.std::__1::__compressed_pair_elem.1090" }
%"struct.std::__1::__compressed_pair_elem.1090" = type { %"class.blink::SelectorQueryCache"* }
%"class.blink::SelectorQueryCache" = type opaque
%"class.blink::NthIndexCache" = type opaque
%"class.blink::LayoutView" = type opaque
%"class.blink::HeapVector.366" = type { %"class.WTF::Vector.369" }
%"class.WTF::Vector.369" = type { %"class.WTF::VectorBuffer.370" }
%"class.WTF::VectorBuffer.370" = type { %"class.WTF::VectorBufferBase.371" }
%"class.WTF::VectorBufferBase.371" = type { %"class.blink::Member.346"*, i32, i32 }
%"class.blink::HeapVector.1094" = type { %"class.WTF::Vector.1097" }
%"class.WTF::Vector.1097" = type { %"class.WTF::VectorBuffer.1098" }
%"class.WTF::VectorBuffer.1098" = type { %"class.WTF::VectorBufferBase.1099" }
%"class.WTF::VectorBufferBase.1099" = type { %"class.blink::Member.1100"*, i32, i32 }
%"class.blink::Member.1100" = type opaque
%"class.blink::DocumentTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.blink::Member.329" }
%"class.blink::Member.1102" = type { %"class.blink::MemberBase.1103" }
%"class.blink::MemberBase.1103" = type { %"class.blink::MediaQueryMatcher"* }
%"class.blink::MediaQueryMatcher" = type opaque
%"class.blink::Member.1104" = type { %"class.blink::MemberBase.1105" }
%"class.blink::MemberBase.1105" = type { %"class.blink::ScriptedAnimationController"* }
%"class.blink::ScriptedAnimationController" = type opaque
%"class.blink::Member.1106" = type { %"class.blink::MemberBase.1107" }
%"class.blink::MemberBase.1107" = type { %"class.blink::ScriptedIdleTaskController"* }
%"class.blink::ScriptedIdleTaskController" = type opaque
%"class.blink::Member.1108" = type { %"class.blink::MemberBase.1109" }
%"class.blink::MemberBase.1109" = type { %"class.blink::TextAutosizer"* }
%"class.blink::TextAutosizer" = type opaque
%"class.blink::Member.1110" = type { %"class.blink::MemberBase.1111" }
%"class.blink::MemberBase.1111" = type { %"class.blink::ElementDataCache"* }
%"class.blink::ElementDataCache" = type opaque
%"class.WTF::HashMap.1112" = type { %"class.WTF::HashTable.1113" }
%"class.WTF::HashTable.1113" = type <{ %"struct.WTF::KeyValuePair.1116"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1116" = type opaque
%"class.blink::Member.1117" = type { %"class.blink::MemberBase.1118" }
%"class.blink::MemberBase.1118" = type { %"class.blink::DocumentAnimations"* }
%"class.blink::DocumentAnimations" = type opaque
%"class.blink::Member.1119" = type { %"class.blink::MemberBase.1120" }
%"class.blink::MemberBase.1120" = type { %"class.blink::DocumentTimeline"* }
%"class.blink::DocumentTimeline" = type opaque
%"class.blink::Member.1121" = type { %"class.blink::MemberBase.1122" }
%"class.blink::MemberBase.1122" = type { %"class.blink::PendingAnimations"* }
%"class.blink::PendingAnimations" = type opaque
%"class.blink::Member.1123" = type { %"class.blink::MemberBase.1124" }
%"class.blink::MemberBase.1124" = type { %"class.blink::WorkletAnimationController"* }
%"class.blink::WorkletAnimationController" = type opaque
%"class.blink::HeapTaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1001", { i64, i64 } }
%"class.blink::TimerBase" = type { i32 (...)**, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::Location", %class.scoped_refptr.998, %"class.base::WeakPtrFactory" }
%"class.base::TimeDelta" = type { i64 }
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%class.scoped_refptr.998 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.999" }>
%"class.base::RefCountedThreadSafe.999" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.1000 }
%class.scoped_refptr.1000 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.blink::WeakMember.1001" = type { %"class.blink::MemberBase.330" }
%"class.blink::HeapHashSet.1125" = type { %"class.WTF::HashSet.1128" }
%"class.WTF::HashSet.1128" = type { %"class.WTF::HashTable.1129" }
%"class.WTF::HashTable.1129" = type <{ %"class.blink::Member.1131"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1131" = type opaque
%"class.blink::Member.1132" = type { %"class.blink::MemberBase.1133" }
%"class.blink::MemberBase.1133" = type { %"class.blink::CanvasFontCache"* }
%"class.blink::CanvasFontCache" = type opaque
%"class.blink::Member.1134" = type { %"class.blink::MemberBase.1135" }
%"class.blink::MemberBase.1135" = type { %"class.blink::IntersectionObserverController"* }
%"class.blink::IntersectionObserverController" = type opaque
%"class.blink::Member.1136" = type { %"class.blink::MemberBase.1137" }
%"class.blink::MemberBase.1137" = type { %"class.blink::SnapCoordinator"* }
%"class.blink::SnapCoordinator" = type opaque
%"class.blink::Member.1138" = type { %"class.blink::MemberBase.1139" }
%"class.blink::MemberBase.1139" = type { %"class.blink::PropertyRegistry"* }
%"class.blink::PropertyRegistry" = type opaque
%"class.blink::Member.1140" = type { %"class.blink::MemberBase.1141" }
%"class.blink::MemberBase.1141" = type { %"class.blink::Document::NetworkStateObserver"* }
%"class.blink::Document::NetworkStateObserver" = type opaque
%"class.std::__1::unique_ptr.1142" = type { %"class.std::__1::__compressed_pair.1143" }
%"class.std::__1::__compressed_pair.1143" = type { %"struct.std::__1::__compressed_pair_elem.1144" }
%"struct.std::__1::__compressed_pair_elem.1144" = type { %"class.ukm::UkmRecorder"* }
%"class.ukm::UkmRecorder" = type opaque
%"class.std::__1::unique_ptr.1148" = type { %"class.std::__1::__compressed_pair.1149" }
%"class.std::__1::__compressed_pair.1149" = type { %"struct.std::__1::__compressed_pair_elem.1150" }
%"struct.std::__1::__compressed_pair_elem.1150" = type { %"class.blink::FontMatchingMetrics"* }
%"class.blink::FontMatchingMetrics" = type { %"class.WTF::HashSet.1151", %"class.WTF::HashSet.1151", %"class.WTF::HashSet.1151", %"class.WTF::HashSet.1151", %"class.WTF::HashSet.1151", %"class.WTF::HashSet.1151", i32, [4 x i8], %"class.WTF::HashMap.1155", %"class.WTF::HashMap.1155", %"class.WTF::HashMap.1155", %"class.WTF::HashMap.1155", %"class.WTF::HashMap.1155", %"class.WTF::HashMap.1155", %"class.WTF::HashMap.1155", i64, i64, %"class.ukm::UkmRecorder"*, i64, %"class.blink::TaskRunnerTimer" }
%"class.WTF::HashSet.1151" = type { %"class.WTF::HashTable.1152" }
%"class.WTF::HashTable.1152" = type <{ %"class.WTF::AtomicString"*, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashMap.1155" = type { %"class.WTF::HashTable.1156" }
%"class.WTF::HashTable.1156" = type <{ %"struct.WTF::KeyValuePair.1159"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1159" = type opaque
%"class.blink::TaskRunnerTimer" = type { %"class.blink::TimerBase", %"class.blink::FontMatchingMetrics"*, { i64, i64 } }
%"class.blink::Member.1163" = type { %"class.blink::MemberBase.1164" }
%"class.blink::MemberBase.1164" = type { %"class.blink::DOMFeaturePolicy"* }
%"class.blink::DOMFeaturePolicy" = type opaque
%"class.blink::Member.1165" = type { %"class.blink::MemberBase.1166" }
%"class.blink::MemberBase.1166" = type { %"class.blink::SlotAssignmentEngine"* }
%"class.blink::SlotAssignmentEngine" = type opaque
%"class.blink::Member.1167" = type { %"class.blink::MemberBase.1168" }
%"class.blink::MemberBase.1168" = type { %"class.blink::ViewportData"* }
%"class.blink::ViewportData" = type opaque
%"class.blink::Member.1169" = type { %"class.blink::MemberBase.1170" }
%"class.blink::MemberBase.1170" = type { %"class.blink::LazyLoadImageObserver"* }
%"class.blink::LazyLoadImageObserver" = type opaque
%"class.WTF::Vector.1171" = type { %"class.WTF::VectorBuffer.1172" }
%"class.WTF::VectorBuffer.1172" = type { %"class.WTF::VectorBufferBase.1173" }
%"class.WTF::VectorBufferBase.1173" = type { i8*, i32, i32 }
%"class.blink::HeapHashMap.1176" = type { %"class.WTF::HashMap.1179" }
%"class.WTF::HashMap.1179" = type { %"class.WTF::HashTable.1180" }
%"class.WTF::HashTable.1180" = type <{ %"struct.WTF::KeyValuePair.1182"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1182" = type opaque
%"class.blink::Member.1183" = type { %"class.blink::MemberBase.1184" }
%"class.blink::MemberBase.1184" = type { %"class.blink::BeforeUnloadEventListener"* }
%"class.blink::BeforeUnloadEventListener" = type opaque
%"class.std::__1::unique_ptr.1185" = type { %"class.std::__1::__compressed_pair.1186" }
%"class.std::__1::__compressed_pair.1186" = type { %"struct.std::__1::__compressed_pair_elem.1187" }
%"struct.std::__1::__compressed_pair_elem.1187" = type { %"class.blink::DocumentResourceCoordinator"* }
%"class.blink::DocumentResourceCoordinator" = type opaque
%"class.blink::Member.1191" = type { %"class.blink::MemberBase.1192" }
%"class.blink::MemberBase.1192" = type { %"class.blink::CookieJar"* }
%"class.blink::CookieJar" = type opaque
%"class.blink::Member.1193" = type { %"class.blink::MemberBase.1194" }
%"class.blink::MemberBase.1194" = type { %"class.blink::FragmentDirective"* }
%"class.blink::FragmentDirective" = type { %"class.blink::ScriptWrappable" }
%"class.blink::HeapHashMap.1195" = type { %"class.WTF::HashMap.1198" }
%"class.WTF::HashMap.1198" = type { %"class.WTF::HashTable.1199" }
%"class.WTF::HashTable.1199" = type <{ %"struct.WTF::KeyValuePair.1201"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1201" = type opaque
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet.1202" }
%"class.blink::HeapHashSet.1202" = type { %"class.WTF::HashSet.1205" }
%"class.WTF::HashSet.1205" = type { %"class.WTF::HashTable.1206" }
%"class.WTF::HashTable.1206" = type <{ %"class.blink::WeakMember.1208"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember.1208" = type opaque
%"class.blink::Member.1209" = type { %"class.blink::MemberBase.1210" }
%"class.blink::MemberBase.1210" = type { %"class.blink::DisplayLockDocumentState"* }
%"class.blink::DisplayLockDocumentState" = type opaque
%"class.blink::Member.1211" = type { %"class.blink::MemberBase.1212" }
%"class.blink::MemberBase.1212" = type { %"class.blink::FontPreloadManager"* }
%"class.blink::FontPreloadManager" = type <{ %"class.blink::Member.329", %"class.blink::HeapHashSet.1218", i32, [4 x i8], %"class.blink::HeapTaskRunnerTimer.1225", %"class.base::TimeDelta", i32, [4 x i8] }>
%"class.blink::HeapHashSet.1218" = type { %"class.WTF::HashSet.1221" }
%"class.WTF::HashSet.1221" = type { %"class.WTF::HashTable.1222" }
%"class.WTF::HashTable.1222" = type <{ %"class.blink::Member.1224"*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.1224" = type opaque
%"class.blink::HeapTaskRunnerTimer.1225" = type { %"class.blink::TimerBase", %"class.blink::WeakMember.1226", { i64, i64 } }
%"class.blink::WeakMember.1226" = type { %"class.blink::MemberBase.1212" }
%"class.blink::WeakMember.1213" = type { %"class.blink::MemberBase.322" }
%"class.blink::Member.1214" = type { %"class.blink::MemberBase.1215" }
%"class.blink::MemberBase.1215" = type { %"class.blink::DocumentData"* }
%"class.blink::DocumentData" = type opaque
%"class.blink::Member.323" = type { %"class.blink::MemberBase.324" }
%"class.blink::MemberBase.324" = type { %"class.blink::TreeScope"* }
%"class.blink::Member.331" = type { %"class.blink::MemberBase.332" }
%"class.blink::MemberBase.332" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.335" }
%"class.blink::HeapHashMap.335" = type { %"class.WTF::HashMap.338" }
%"class.WTF::HashMap.338" = type { %"class.WTF::HashTable.339" }
%"class.WTF::HashTable.339" = type <{ %"struct.WTF::KeyValuePair.341"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.341" = type { %"class.WTF::AtomicString", %"class.blink::Member.342" }
%"class.blink::Member.342" = type { %"class.blink::MemberBase.343" }
%"class.blink::MemberBase.343" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.346", i32, %"class.blink::HeapVector.366" }
%"class.blink::Member.373" = type { %"class.blink::MemberBase.374" }
%"class.blink::MemberBase.374" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.375" = type { %"class.blink::MemberBase.376" }
%"class.blink::MemberBase.376" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.377" = type { %"class.blink::MemberBase.378" }
%"class.blink::MemberBase.378" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.379" }
%"class.blink::Member.379" = type { %"class.blink::MemberBase.380" }
%"class.blink::MemberBase.380" = type { %"class.blink::HeapHashMap.381"* }
%"class.blink::HeapHashMap.381" = type opaque
%"class.blink::Member.382" = type { %"class.blink::MemberBase.383" }
%"class.blink::MemberBase.383" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.384" = type { %"class.WTF::Vector.387" }
%"class.WTF::Vector.387" = type { %"class.WTF::VectorBuffer.388" }
%"class.WTF::VectorBuffer.388" = type { %"class.WTF::VectorBufferBase.389" }
%"class.WTF::VectorBufferBase.389" = type { %"class.blink::Member.390"*, i32, i32 }
%"class.blink::Member.393" = type { %"class.blink::MemberBase.394" }
%"class.blink::MemberBase.394" = type { %"class.blink::CounterStyle"* }
%"class.blink::CounterStyle" = type opaque
%"class.blink::TextDecorationThickness" = type { %"class.blink::Length", i8, [3 x i8] }
%"class.blink::TextSizeAdjust" = type { float }
%"struct.blink::TabSize" = type <{ float, i8, [3 x i8] }>
%"class.blink::StyleAutoColor" = type { %"class.blink::StyleColor" }
%"class.blink::DataRef.395" = type { %class.scoped_refptr.396 }
%class.scoped_refptr.396 = type { %"class.blink::ComputedStyleBase::StyleVisualData"* }
%"class.blink::ComputedStyleBase::StyleVisualData" = type <{ %"class.WTF::RefCounted.397", %"class.blink::LengthBox", float, i8, [3 x i8] }>
%"class.WTF::RefCounted.397" = type { %"class.base::RefCounted.398" }
%"class.base::RefCounted.398" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::LengthBox" = type { %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.blink::DataRef.399" = type { %class.scoped_refptr.400 }
%class.scoped_refptr.400 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentData" = type <{ %"class.WTF::RefCounted.401", [4 x i8], %"class.blink::DataRef.403", %"class.blink::DataRef.469", %"class.blink::TransformOperations", %class.scoped_refptr.301, %"class.blink::Persistent.593", %"class.blink::TransformOrigin", float, float, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", i16, [2 x i8] }>
%"class.WTF::RefCounted.401" = type { %"class.base::RefCounted.402" }
%"class.base::RefCounted.402" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.403" = type { %class.scoped_refptr.404 }
%class.scoped_refptr.404 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan22PercentData" = type <{ %"class.WTF::RefCounted.405", [4 x i8], %"class.blink::DataRef.407", %"class.blink::Persistent.445", %"class.blink::Length", float, float, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, i32, %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleContentAlignmentData", [3 x i8], [5 x i8] }>
%"class.WTF::RefCounted.405" = type { %"class.base::RefCounted.406" }
%"class.base::RefCounted.406" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.407" = type { %class.scoped_refptr.408 }
%class.scoped_refptr.408 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan100PercentData" = type { %"class.WTF::RefCounted.409", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridTrackList", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.blink::GridPosition", %"class.WTF::AtomicString", %class.scoped_refptr.427, %class.scoped_refptr.430, %class.scoped_refptr.433, %class.scoped_refptr.436, %class.scoped_refptr.437, %class.scoped_refptr.438, %"class.blink::Persistent.445", %"class.blink::Persistent.460", %"class.absl::optional.464", %"class.absl::optional.464", %"struct.blink::StyleOffsetRotation", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"struct.blink::LengthPoint", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, %"struct.cc::ScrollSnapType", %"struct.cc::ScrollSnapAlign", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32, i16, [2 x i8], %"class.blink::StyleSelfAlignmentData", %"class.blink::StyleSelfAlignmentData", i32 }
%"class.WTF::RefCounted.409" = type { %"class.base::RefCounted.410" }
%"class.base::RefCounted.410" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::GridTrackList" = type { %"class.WTF::Vector.411", %"class.std::__1::unique_ptr.416" }
%"class.WTF::Vector.411" = type { %"class.WTF::VectorBuffer.412" }
%"class.WTF::VectorBuffer.412" = type { %"class.WTF::VectorBufferBase.413" }
%"class.WTF::VectorBufferBase.413" = type { %"class.blink::GridTrackSize"*, i32, i32 }
%"class.blink::GridTrackSize" = type <{ i32, [4 x i8], %"class.blink::GridLength", %"class.blink::GridLength", %"class.blink::GridLength", i16, [6 x i8] }>
%"class.blink::GridLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.416" = type { %"class.std::__1::__compressed_pair.417" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"class.blink::NGGridTrackList"* }
%"class.blink::NGGridTrackList" = type { %"class.WTF::Vector.419", %"class.WTF::Vector.411", i32, i32 }
%"class.WTF::Vector.419" = type { %"class.WTF::VectorBuffer.420" }
%"class.WTF::VectorBuffer.420" = type { %"class.WTF::VectorBufferBase.421" }
%"class.WTF::VectorBufferBase.421" = type { %"struct.blink::NGGridTrackRepeater"*, i32, i32 }
%"struct.blink::NGGridTrackRepeater" = type { i32, i32, i32, i32 }
%"class.blink::GridPosition" = type { i32, i32, %"class.WTF::AtomicString" }
%class.scoped_refptr.427 = type { %"class.blink::ClipPathOperation"* }
%"class.blink::ClipPathOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.428", [4 x i8] }>
%"class.WTF::RefCounted.428" = type { %"class.base::RefCounted.429" }
%"class.base::RefCounted.429" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.430 = type { %"class.blink::BasicShape"* }
%"class.blink::BasicShape" = type <{ i32 (...)**, %"class.WTF::RefCounted.431", [4 x i8] }>
%"class.WTF::RefCounted.431" = type { %"class.base::RefCounted.432" }
%"class.base::RefCounted.432" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.433 = type { %"class.blink::RotateTransformOperation"* }
%"class.blink::RotateTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], %"struct.blink::Rotation", i32, [4 x i8] }>
%"class.blink::TransformOperation.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.434" }>
%"class.WTF::RefCounted.434" = type { %"class.base::RefCounted.435" }
%"class.base::RefCounted.435" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::Rotation" = type { %"class.blink::FloatPoint3D", double }
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.436 = type { %"class.blink::ScaleTransformOperation"* }
%"class.blink::ScaleTransformOperation" = type <{ %"class.blink::TransformOperation.base", [4 x i8], double, double, double, i32, [4 x i8] }>
%class.scoped_refptr.437 = type { %"class.blink::TranslateTransformOperation"* }
%"class.blink::TranslateTransformOperation" = type <{ %"class.blink::TransformOperation.base", %"class.blink::Length", %"class.blink::Length", [4 x i8], double, i32, [4 x i8] }>
%class.scoped_refptr.438 = type { %"class.blink::StyleReflection"* }
%"class.blink::StyleReflection" = type { %"class.WTF::RefCounted.439", i32, %"class.blink::Length", %"class.blink::NinePieceImage" }
%"class.WTF::RefCounted.439" = type { %"class.base::RefCounted.440" }
%"class.base::RefCounted.440" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::NinePieceImage" = type { %"class.blink::DataRef.441" }
%"class.blink::DataRef.441" = type { %class.scoped_refptr.442 }
%class.scoped_refptr.442 = type { %"class.blink::NinePieceImageData"* }
%"class.blink::NinePieceImageData" = type { %"class.WTF::RefCountedCopyable", i8, %"class.blink::Persistent.309", %"class.blink::LengthBox", %"class.blink::BorderImageLengthBox", %"class.blink::BorderImageLengthBox" }
%"class.WTF::RefCountedCopyable" = type { %"class.WTF::RefCounted.443" }
%"class.WTF::RefCounted.443" = type { %"class.base::RefCounted.444" }
%"class.base::RefCounted.444" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::BorderImageLengthBox" = type { %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength", %"class.blink::BorderImageLength" }
%"class.blink::BorderImageLength" = type <{ %"class.blink::Length", double, i32, [4 x i8] }>
%"class.blink::Persistent.460" = type { %"class.blink::PersistentBase.461" }
%"class.blink::PersistentBase.461" = type { %"class.blink::ShapeValue"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::ShapeValue" = type <{ i32 (...)**, i32, [4 x i8], %class.scoped_refptr.430, %"class.blink::Member", i32, [4 x i8] }>
%"class.absl::optional.464" = type { %"class.absl::optional_internal::optional_data.465" }
%"class.absl::optional_internal::optional_data.465" = type { %"class.absl::optional_internal::optional_data_base.466" }
%"class.absl::optional_internal::optional_data_base.466" = type { %"class.absl::optional_internal::optional_data_dtor_base.467" }
%"class.absl::optional_internal::optional_data_dtor_base.467" = type { i8, [3 x i8], %union.anon.468 }
%union.anon.468 = type { %"class.blink::Length" }
%"struct.blink::StyleOffsetRotation" = type { float, i32 }
%"struct.blink::LengthPoint" = type { %"class.blink::Length", %"class.blink::Length" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.blink::Persistent.445" = type { %"class.blink::PersistentBase.446" }
%"class.blink::PersistentBase.446" = type { %"class.blink::StyleFilterData"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::StyleFilterData" = type { %"class.blink::FilterOperations" }
%"class.blink::FilterOperations" = type { %"class.blink::HeapVector.449" }
%"class.blink::HeapVector.449" = type { %"class.WTF::Vector.452" }
%"class.WTF::Vector.452" = type { %"class.WTF::VectorBuffer.453" }
%"class.WTF::VectorBuffer.453" = type { %"class.WTF::VectorBufferBase.454" }
%"class.WTF::VectorBufferBase.454" = type { %"class.blink::Member.455"*, i32, i32 }
%"class.blink::Member.455" = type { %"class.blink::MemberBase.456" }
%"class.blink::MemberBase.456" = type { %"class.blink::FilterOperation"* }
%"class.blink::FilterOperation" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.blink::DataRef.469" = type { %class.scoped_refptr.470 }
%class.scoped_refptr.470 = type { %"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData"* }
%"class.blink::ComputedStyleBase::StyleRareNonInheritedUsageLessThan14PercentSubData" = type { %"class.WTF::RefCounted.471", %"class.blink::DataRef.473", %"class.blink::DataRef.477", %"class.blink::DataRef.486", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.std::__1::unique_ptr.505", %"class.std::__1::unique_ptr.516", %"class.std::__1::unique_ptr.554", %"class.std::__1::unique_ptr.565", %"class.std::__1::unique_ptr.576", %"class.WTF::Vector.582", %"class.blink::FillLayer", %"class.blink::NinePieceImage", %"class.blink::FloatSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", float, float, float, float, %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", i32 }
%"class.WTF::RefCounted.471" = type { %"class.base::RefCounted.472" }
%"class.base::RefCounted.472" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.473" = type { %class.scoped_refptr.474 }
%class.scoped_refptr.474 = type { %"class.blink::ComputedStyleBase::StyleMultiColData"* }
%"class.blink::ComputedStyleBase::StyleMultiColData" = type <{ %"class.WTF::RefCounted.475", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.475" = type { %"class.base::RefCounted.476" }
%"class.base::RefCounted.476" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.477" = type { %class.scoped_refptr.478 }
%class.scoped_refptr.478 = type { %"class.blink::ComputedStyleBase::StyleWillChangeData"* }
%"class.blink::ComputedStyleBase::StyleWillChangeData" = type <{ %"class.WTF::RefCounted.479", [4 x i8], %"class.WTF::Vector.481", i8, [7 x i8] }>
%"class.WTF::RefCounted.479" = type { %"class.base::RefCounted.480" }
%"class.base::RefCounted.480" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.481" = type { %"class.WTF::VectorBuffer.482" }
%"class.WTF::VectorBuffer.482" = type { %"class.WTF::VectorBufferBase.483" }
%"class.WTF::VectorBufferBase.483" = type { i32*, i32, i32 }
%"class.blink::DataRef.486" = type { %class.scoped_refptr.487 }
%class.scoped_refptr.487 = type { %"class.blink::ComputedStyleBase::StyleGridData"* }
%"class.blink::ComputedStyleBase::StyleGridData" = type <{ %"class.WTF::RefCounted.488", [4 x i8], %"class.WTF::HashMap.490", %"class.WTF::HashMap.490", %"class.WTF::HashMap.490", %"class.WTF::HashMap.490", %"class.WTF::HashMap.490", %"class.WTF::HashMap.490", %"class.WTF::HashMap.495", %"class.WTF::HashMap.495", %"class.WTF::HashMap.495", %"class.WTF::HashMap.495", %"class.WTF::HashMap.500", %"class.WTF::Vector.411", %"class.WTF::Vector.411", i64, i64, i64, i64, i8, [7 x i8] }>
%"class.WTF::RefCounted.488" = type { %"class.base::RefCounted.489" }
%"class.base::RefCounted.489" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::HashMap.490" = type { %"class.WTF::HashTable.491" }
%"class.WTF::HashTable.491" = type <{ %"struct.WTF::KeyValuePair.494"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.494" = type { %"class.WTF::String", %"class.WTF::Vector.1323" }
%"class.WTF::Vector.1323" = type { %"class.WTF::VectorBuffer.1324" }
%"class.WTF::VectorBuffer.1324" = type { %"class.WTF::VectorBufferBase.1325" }
%"class.WTF::VectorBufferBase.1325" = type { i64*, i32, i32 }
%"class.WTF::HashMap.495" = type { %"class.WTF::HashTable.496" }
%"class.WTF::HashTable.496" = type <{ %"struct.WTF::KeyValuePair.499"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.499" = type { i64, %"class.WTF::Vector.582" }
%"class.WTF::HashMap.500" = type { %"class.WTF::HashTable.501" }
%"class.WTF::HashTable.501" = type <{ %"struct.WTF::KeyValuePair.504"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.504" = type { %"class.WTF::String", %"struct.blink::GridArea" }
%"struct.blink::GridArea" = type { %"struct.blink::GridSpan", %"struct.blink::GridSpan" }
%"struct.blink::GridSpan" = type { i32, i32, i32 }
%"class.std::__1::unique_ptr.505" = type { %"class.std::__1::__compressed_pair.506" }
%"class.std::__1::__compressed_pair.506" = type { %"struct.std::__1::__compressed_pair_elem.507" }
%"struct.std::__1::__compressed_pair_elem.507" = type { %"class.blink::CounterDirectiveMap"* }
%"class.blink::CounterDirectiveMap" = type { %"class.WTF::HashMap.508" }
%"class.WTF::HashMap.508" = type { %"class.WTF::HashTable.509" }
%"class.WTF::HashTable.509" = type <{ %"struct.WTF::KeyValuePair.512"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.512" = type { %"class.WTF::AtomicString", %"class.blink::CounterDirectives" }
%"class.blink::CounterDirectives" = type { %"class.absl::optional.1419", %"class.absl::optional.1419", %"class.absl::optional.1419" }
%"class.absl::optional.1419" = type { %"class.absl::optional_internal::optional_data.1420" }
%"class.absl::optional_internal::optional_data.1420" = type { %"class.absl::optional_internal::optional_data_base.1421" }
%"class.absl::optional_internal::optional_data_base.1421" = type { %"class.absl::optional_internal::optional_data_dtor_base.1422" }
%"class.absl::optional_internal::optional_data_dtor_base.1422" = type { i8, %union.anon.1423 }
%union.anon.1423 = type { i32 }
%"class.std::__1::unique_ptr.516" = type { %"class.std::__1::__compressed_pair.517" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.518" }
%"struct.std::__1::__compressed_pair_elem.518" = type { %"class.blink::CSSAnimationData"* }
%"class.blink::CSSAnimationData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.287", %"class.WTF::Vector.531", %"class.WTF::Vector.519", %"class.WTF::Vector.536", %"class.WTF::Vector.541", %"class.WTF::Vector.546" }
%"class.blink::CSSTimingData" = type { %"class.WTF::Vector.519", %"class.WTF::Vector.519", %"class.WTF::Vector.524" }
%"class.WTF::Vector.524" = type { %"class.WTF::VectorBuffer.525" }
%"class.WTF::VectorBuffer.525" = type { %"class.WTF::VectorBufferBase.526" }
%"class.WTF::VectorBufferBase.526" = type { %class.scoped_refptr.527*, i32, i32 }
%class.scoped_refptr.527 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe.528" }
%"class.base::RefCountedThreadSafe.528" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.531" = type { %"class.WTF::VectorBuffer.532" }
%"class.WTF::VectorBuffer.532" = type { %"class.WTF::VectorBufferBase.533" }
%"class.WTF::VectorBufferBase.533" = type { %"class.blink::StyleNameOrKeyword"*, i32, i32 }
%"class.blink::StyleNameOrKeyword" = type { i32, %"class.blink::StyleName" }
%"class.blink::StyleName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector.519" = type { %"class.WTF::VectorBuffer.520" }
%"class.WTF::VectorBuffer.520" = type { %"class.WTF::VectorBufferBase.521" }
%"class.WTF::VectorBufferBase.521" = type { double*, i32, i32 }
%"class.WTF::Vector.536" = type { %"class.WTF::VectorBuffer.537" }
%"class.WTF::VectorBuffer.537" = type { %"class.WTF::VectorBufferBase.538" }
%"class.WTF::VectorBufferBase.538" = type { i32*, i32, i32 }
%"class.WTF::Vector.541" = type { %"class.WTF::VectorBuffer.542" }
%"class.WTF::VectorBuffer.542" = type { %"class.WTF::VectorBufferBase.543" }
%"class.WTF::VectorBufferBase.543" = type { i32*, i32, i32 }
%"class.WTF::Vector.546" = type { %"class.WTF::VectorBuffer.547" }
%"class.WTF::VectorBuffer.547" = type { %"class.WTF::VectorBufferBase.548" }
%"class.WTF::VectorBufferBase.548" = type { i32*, i32, i32 }
%"class.std::__1::unique_ptr.554" = type { %"class.std::__1::__compressed_pair.555" }
%"class.std::__1::__compressed_pair.555" = type { %"struct.std::__1::__compressed_pair_elem.556" }
%"struct.std::__1::__compressed_pair_elem.556" = type { %"class.blink::CSSTransitionData"* }
%"class.blink::CSSTransitionData" = type { %"class.blink::CSSTimingData", %"class.WTF::Vector.557" }
%"class.WTF::Vector.557" = type { %"class.WTF::VectorBuffer.558" }
%"class.WTF::VectorBuffer.558" = type { %"class.WTF::VectorBufferBase.559" }
%"class.WTF::VectorBufferBase.559" = type { %"struct.blink::CSSTransitionData::TransitionProperty"*, i32, i32 }
%"struct.blink::CSSTransitionData::TransitionProperty" = type { i32, i32, %"class.WTF::AtomicString" }
%"class.std::__1::unique_ptr.565" = type { %"class.std::__1::__compressed_pair.566" }
%"class.std::__1::__compressed_pair.566" = type { %"struct.std::__1::__compressed_pair_elem.567" }
%"struct.std::__1::__compressed_pair_elem.567" = type { %"class.blink::PaintImages"* }
%"class.blink::PaintImages" = type { %"class.WTF::Vector.568" }
%"class.WTF::Vector.568" = type { %"class.WTF::VectorBuffer.569" }
%"class.WTF::VectorBuffer.569" = type { %"class.WTF::VectorBufferBase.570" }
%"class.WTF::VectorBufferBase.570" = type { %"class.blink::Persistent.309"*, i32, i32 }
%"class.std::__1::unique_ptr.576" = type { %"class.std::__1::__compressed_pair.577" }
%"class.std::__1::__compressed_pair.577" = type { %"struct.std::__1::__compressed_pair_elem.578" }
%"struct.std::__1::__compressed_pair_elem.578" = type { %"class.blink::StyleNonInheritedVariables"* }
%"class.blink::StyleNonInheritedVariables" = type { %"class.blink::StyleVariables" }
%"class.blink::FillLayer" = type <{ %"class.blink::FillLayer"*, %"class.blink::Persistent.309", %"class.blink::Length", %"class.blink::Length", %"class.blink::LengthSize", [7 x i8], i8 }>
%"class.blink::LengthSize" = type { %"class.blink::Length", %"class.blink::Length" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::TransformOperations" = type { %"class.WTF::Vector.587" }
%"class.WTF::Vector.587" = type { %"class.WTF::VectorBuffer.588" }
%"class.WTF::VectorBuffer.588" = type { %"class.WTF::VectorBufferBase.589" }
%"class.WTF::VectorBufferBase.589" = type { %class.scoped_refptr.590*, i32, i32 }
%class.scoped_refptr.590 = type { %"class.blink::TransformOperation"* }
%"class.blink::TransformOperation" = type <{ i32 (...)**, %"class.WTF::RefCounted.434", [4 x i8] }>
%"class.blink::Persistent.593" = type { %"class.blink::PersistentBase.594" }
%"class.blink::PersistentBase.594" = type { %"class.blink::ContentData"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::ContentData" = type { i32 (...)**, %"class.blink::Member.597" }
%"class.blink::Member.597" = type { %"class.blink::MemberBase.598" }
%"class.blink::MemberBase.598" = type { %"class.blink::ContentData"* }
%"class.blink::TransformOrigin" = type { %"class.blink::Length", %"class.blink::Length", float }
%"class.blink::StyleSelfAlignmentData" = type { i8, [3 x i8] }
%"class.blink::StyleContentAlignmentData" = type { i16, [2 x i8] }
%"class.blink::DataRef.599" = type { %class.scoped_refptr.600 }
%class.scoped_refptr.600 = type { %"class.blink::ComputedStyleBase::StyleSVGData"* }
%"class.blink::ComputedStyleBase::StyleSVGData" = type <{ %"class.WTF::RefCounted.601", [4 x i8], %"class.blink::DataRef.603", %"class.blink::DataRef.607", %"class.blink::DataRef.628", %"class.blink::DataRef.646", %"class.blink::DataRef.658", %"class.blink::DataRef.662", %class.scoped_refptr.632, i32, [4 x i8] }>
%"class.WTF::RefCounted.601" = type { %"class.base::RefCounted.602" }
%"class.base::RefCounted.602" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.603" = type { %class.scoped_refptr.604 }
%class.scoped_refptr.604 = type { %"class.blink::ComputedStyleBase::StyleMiscData"* }
%"class.blink::ComputedStyleBase::StyleMiscData" = type <{ %"class.WTF::RefCounted.605", %"class.blink::Length", float, %"class.blink::StyleColor", %"class.blink::StyleColor", i8, [3 x i8] }>
%"class.WTF::RefCounted.605" = type { %"class.base::RefCounted.606" }
%"class.base::RefCounted.606" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.607" = type { %class.scoped_refptr.608 }
%class.scoped_refptr.608 = type { %"class.blink::ComputedStyleBase::StyleGeometryData"* }
%"class.blink::ComputedStyleBase::StyleGeometryData" = type { %"class.WTF::RefCounted.609", %class.scoped_refptr.611, %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length" }
%"class.WTF::RefCounted.609" = type { %"class.base::RefCounted.610" }
%"class.base::RefCounted.610" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.611 = type { %"class.blink::StylePath"* }
%"class.blink::StylePath" = type { %"class.blink::BasicShape.base", %"class.std::__1::unique_ptr.612", %"class.std::__1::unique_ptr.618", float, i32 }
%"class.blink::BasicShape.base" = type <{ i32 (...)**, %"class.WTF::RefCounted.431" }>
%"class.std::__1::unique_ptr.612" = type { %"class.std::__1::__compressed_pair.613" }
%"class.std::__1::__compressed_pair.613" = type { %"struct.std::__1::__compressed_pair_elem.614" }
%"struct.std::__1::__compressed_pair_elem.614" = type { %"class.blink::SVGPathByteStream"* }
%"class.blink::SVGPathByteStream" = type opaque
%"class.std::__1::unique_ptr.618" = type { %"class.std::__1::__compressed_pair.619" }
%"class.std::__1::__compressed_pair.619" = type { %"struct.std::__1::__compressed_pair_elem.620" }
%"struct.std::__1::__compressed_pair_elem.620" = type { %"class.blink::Path"* }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.621, i32, %"struct.std::__1::atomic.48", %"struct.std::__1::atomic.48", i8, i8 }>
%class.sk_sp.621 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.622, %class.SkTDArray.623, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic.43" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.622 = type { i8*, i32, i32 }
%class.SkTDArray.623 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.624 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic.43", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.624 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.241", [3 x i8] }
%"class.blink::DataRef.628" = type { %class.scoped_refptr.629 }
%class.scoped_refptr.629 = type { %"class.blink::ComputedStyleBase::StyleFillData"* }
%"class.blink::ComputedStyleBase::StyleFillData" = type { %"class.WTF::RefCounted.630", [4 x i8], %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", float, [4 x i8] }
%"class.WTF::RefCounted.630" = type { %"class.base::RefCounted.631" }
%"class.base::RefCounted.631" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::SVGPaint" = type <{ %class.scoped_refptr.632, %"class.blink::StyleColor", i32, [4 x i8] }>
%"class.blink::DataRef.646" = type { %class.scoped_refptr.647 }
%class.scoped_refptr.647 = type { %"class.blink::ComputedStyleBase::StyleStrokeData"* }
%"class.blink::ComputedStyleBase::StyleStrokeData" = type <{ %"class.WTF::RefCounted.648", [4 x i8], %class.scoped_refptr.650, %"struct.blink::SVGPaint", %"struct.blink::SVGPaint", %"class.blink::Length", %"class.blink::UnzoomedLength", float, float, i8, [7 x i8] }>
%"class.WTF::RefCounted.648" = type { %"class.base::RefCounted.649" }
%"class.base::RefCounted.649" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.650 = type { %"class.base::RefCountedData.651"* }
%"class.base::RefCountedData.651" = type { %"class.base::RefCountedThreadSafe.652", %"class.WTF::Vector.653" }
%"class.base::RefCountedThreadSafe.652" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.WTF::Vector.653" = type { %"class.WTF::VectorBuffer.654" }
%"class.WTF::VectorBuffer.654" = type { %"class.WTF::VectorBufferBase.655" }
%"class.WTF::VectorBufferBase.655" = type { %"class.blink::Length"*, i32, i32 }
%"class.blink::UnzoomedLength" = type { %"class.blink::Length" }
%"class.blink::DataRef.658" = type { %class.scoped_refptr.659 }
%class.scoped_refptr.659 = type { %"class.blink::ComputedStyleBase::StyleInheritedResourcesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedResourcesData" = type { %"class.WTF::RefCounted.660", %class.scoped_refptr.632, %class.scoped_refptr.632, %class.scoped_refptr.632 }
%"class.WTF::RefCounted.660" = type { %"class.base::RefCounted.661" }
%"class.base::RefCounted.661" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.662" = type { %class.scoped_refptr.663 }
%class.scoped_refptr.663 = type { %"class.blink::ComputedStyleBase::StyleStopData"* }
%"class.blink::ComputedStyleBase::StyleStopData" = type { %"class.WTF::RefCounted.664", float, %"class.blink::StyleColor" }
%"class.WTF::RefCounted.664" = type { %"class.base::RefCounted.665" }
%"class.base::RefCounted.665" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.632 = type { %"class.blink::StyleSVGResource"* }
%"class.blink::StyleSVGResource" = type { %"class.WTF::RefCounted.633", %"class.blink::Persistent.635", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted.633" = type { %"class.base::RefCounted.634" }
%"class.base::RefCounted.634" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.635" = type { %"class.blink::PersistentBase.636" }
%"class.blink::PersistentBase.636" = type { %"class.blink::SVGResource"*, %"class.blink::PersistentNodePtr.272" }
%"class.blink::SVGResource" = type { i32 (...)**, %"class.blink::Member.346", %"class.blink::HeapHashMap.639" }
%"class.blink::HeapHashMap.639" = type { %"class.WTF::HashMap.642" }
%"class.WTF::HashMap.642" = type { %"class.WTF::HashTable.643" }
%"class.WTF::HashTable.643" = type <{ %"struct.WTF::KeyValuePair.645"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.645" = type opaque
%"class.blink::DataRef.666" = type { %class.scoped_refptr.667 }
%class.scoped_refptr.667 = type { %"class.blink::ComputedStyleBase::StyleBoxData"* }
%"class.blink::ComputedStyleBase::StyleBoxData" = type <{ %"class.WTF::RefCounted.668", %"class.blink::StyleAspectRatio", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", i32, i8, [3 x i8] }>
%"class.WTF::RefCounted.668" = type { %"class.base::RefCounted.669" }
%"class.base::RefCounted.669" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::StyleAspectRatio" = type { i8, %"class.blink::FloatSize" }
%"class.blink::DataRef.670" = type { %class.scoped_refptr.671 }
%class.scoped_refptr.671 = type { %"class.blink::ComputedStyleBase::StyleBackgroundData"* }
%"class.blink::ComputedStyleBase::StyleBackgroundData" = type { %"class.WTF::RefCounted.672", [4 x i8], %"class.blink::FillLayer", %"class.blink::StyleColor" }
%"class.WTF::RefCounted.672" = type { %"class.base::RefCounted.673" }
%"class.base::RefCounted.673" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.674" = type { %class.scoped_refptr.675 }
%class.scoped_refptr.675 = type { %"class.blink::ComputedStyleBase::StyleSurroundData"* }
%"class.blink::ComputedStyleBase::StyleSurroundData" = type <{ %"class.WTF::RefCounted.676", [4 x i8], %"class.blink::NinePieceImage", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::LengthSize", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::Length", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::StyleColor", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i16, [6 x i8] }>
%"class.WTF::RefCounted.676" = type { %"class.base::RefCounted.677" }
%"class.base::RefCounted.677" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::DataRef.678" = type { %class.scoped_refptr.679 }
%class.scoped_refptr.679 = type { %"class.blink::ComputedStyleBase::StyleInheritedVariablesData"* }
%"class.blink::ComputedStyleBase::StyleInheritedVariablesData" = type { %"class.WTF::RefCounted.680", %class.scoped_refptr.682 }
%"class.WTF::RefCounted.680" = type { %"class.base::RefCounted.681" }
%"class.base::RefCounted.681" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.682 = type { %"class.blink::StyleInheritedVariables"* }
%"class.blink::StyleInheritedVariables" = type { %"class.WTF::RefCounted.933", %"class.blink::StyleVariables", %class.scoped_refptr.682 }
%"class.WTF::RefCounted.933" = type { %"class.base::RefCounted.934" }
%"class.base::RefCounted.934" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::RefCounted.683" = type { %"class.base::RefCounted.684" }
%"class.base::RefCounted.684" = type { %"class.base::subtle::RefCountedBase" }
%"class.std::__1::unique_ptr.685" = type { %"class.std::__1::__compressed_pair.686" }
%"class.std::__1::__compressed_pair.686" = type { %"struct.std::__1::__compressed_pair_elem.687" }
%"struct.std::__1::__compressed_pair_elem.687" = type { %"class.blink::StyleCachedData"* }
%"class.blink::StyleCachedData" = type { %"class.std::__1::unique_ptr.688" }
%"class.std::__1::unique_ptr.688" = type { %"class.std::__1::__compressed_pair.689" }
%"class.std::__1::__compressed_pair.689" = type { %"struct.std::__1::__compressed_pair_elem.690" }
%"struct.std::__1::__compressed_pair_elem.690" = type { %"class.WTF::Vector.691"* }
%"class.WTF::Vector.691" = type { %"class.WTF::VectorBuffer.1434" }
%"class.WTF::VectorBuffer.1434" = type { %"class.WTF::VectorBufferBase.1435", [32 x i8] }
%"class.WTF::VectorBufferBase.1435" = type { %class.scoped_refptr*, i32, i32 }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.698" }
%"class.blink::MemberBase.698" = type { %"class.blink::Node"* }
%"class.blink::FragmentData" = type { %"struct.blink::PhysicalOffset", %"class.std::__1::unique_ptr.699" }
%"class.std::__1::unique_ptr.699" = type { %"class.std::__1::__compressed_pair.700" }
%"class.std::__1::__compressed_pair.700" = type { %"struct.std::__1::__compressed_pair_elem.701" }
%"struct.std::__1::__compressed_pair_elem.701" = type { %"struct.blink::FragmentData::RareData"* }
%"struct.blink::FragmentData::RareData" = type { %"class.std::__1::unique_ptr.702", i64, %"struct.blink::PhysicalOffset", %"class.blink::LayoutUnit", %"class.std::__1::unique_ptr.708", %"class.std::__1::unique_ptr.829", i8, %"class.absl::optional.835", %class.scoped_refptr.811, %"class.blink::CullRect", %"class.blink::CullRect", %"class.std::__1::unique_ptr.840" }
%"class.std::__1::unique_ptr.702" = type { %"class.std::__1::__compressed_pair.703" }
%"class.std::__1::__compressed_pair.703" = type { %"struct.std::__1::__compressed_pair_elem.704" }
%"struct.std::__1::__compressed_pair_elem.704" = type { %"class.blink::PaintLayer"* }
%"class.blink::PaintLayer" = type opaque
%"class.std::__1::unique_ptr.708" = type { %"class.std::__1::__compressed_pair.709" }
%"class.std::__1::__compressed_pair.709" = type { %"struct.std::__1::__compressed_pair_elem.710" }
%"struct.std::__1::__compressed_pair_elem.710" = type { %"class.blink::ObjectPaintProperties"* }
%"class.blink::ObjectPaintProperties" = type { %class.scoped_refptr.711, %class.scoped_refptr.711, %class.scoped_refptr.711, %class.scoped_refptr.711, %class.scoped_refptr.711, %class.scoped_refptr.711, %class.scoped_refptr.746, %class.scoped_refptr.760, %class.scoped_refptr.761, %class.scoped_refptr.761, %class.scoped_refptr.761, %class.scoped_refptr.761, %class.scoped_refptr.761, %class.scoped_refptr.761, %class.scoped_refptr.801, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.802, %class.scoped_refptr.825 }
%class.scoped_refptr.711 = type { %"class.blink::TransformPaintPropertyNode"* }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.728" }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted.712", i8, i8, %class.scoped_refptr.714, i32, i32 }
%"class.WTF::RefCounted.712" = type { %"class.base::RefCounted.713" }
%"class.base::RefCounted.713" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.714 = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.721, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.722", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.715" }
%"class.std::__1::unique_ptr.715" = type { %"class.std::__1::__compressed_pair.716" }
%"class.std::__1::__compressed_pair.716" = type { %"struct.std::__1::__compressed_pair_elem.717" }
%"struct.std::__1::__compressed_pair_elem.717" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%class.scoped_refptr.721 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.747", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.747" = type { %"class.WTF::RefCounted.748", i8, i8, %class.scoped_refptr.721, i32, i32 }
%"class.WTF::RefCounted.748" = type { %"class.base::RefCounted.749" }
%"class.base::RefCounted.749" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.750" }
%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntSize" = type { i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.750" = type { %"class.absl::optional_internal::optional_data.751" }
%"class.absl::optional_internal::optional_data.751" = type { %"class.absl::optional_internal::optional_data_base.752" }
%"class.absl::optional_internal::optional_data_base.752" = type { %"class.absl::optional_internal::optional_data_dtor_base.753" }
%"class.absl::optional_internal::optional_data_dtor_base.753" = type { i8, %union.anon.754 }
%union.anon.754 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector", %"struct.cc::TargetSnapAreaElementIds" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.755" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.756" }
%"struct.std::__1::__compressed_pair_elem.756" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.722" = type { %"class.std::__1::__compressed_pair.723" }
%"class.std::__1::__compressed_pair.723" = type { %"struct.std::__1::__compressed_pair_elem.724" }
%"struct.std::__1::__compressed_pair_elem.724" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.728" = type { %"class.std::__1::__compressed_pair.729" }
%"class.std::__1::__compressed_pair.729" = type { %"struct.std::__1::__compressed_pair_elem.730" }
%"struct.std::__1::__compressed_pair_elem.730" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.731", %"class.std::__1::unique_ptr.737", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.731" = type { %"class.std::__1::__compressed_pair.732" }
%"class.std::__1::__compressed_pair.732" = type { %"struct.std::__1::__compressed_pair_elem.733" }
%"struct.std::__1::__compressed_pair_elem.733" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.737" = type { %"class.std::__1::__compressed_pair.738" }
%"class.std::__1::__compressed_pair.738" = type { %"struct.std::__1::__compressed_pair_elem.739" }
%"struct.std::__1::__compressed_pair_elem.739" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%class.scoped_refptr.746 = type { %"class.blink::ScrollPaintPropertyNode"* }
%class.scoped_refptr.760 = type { %"class.blink::TransformPaintPropertyNodeAlias"* }
%"class.blink::TransformPaintPropertyNodeAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias" }
%class.scoped_refptr.761 = type { %"class.blink::EffectPaintPropertyNode"* }
%"class.blink::EffectPaintPropertyNode" = type { %"class.blink::EffectPaintPropertyNodeOrAlias", %"struct.blink::EffectPaintPropertyNode::State" }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.762" }
%"class.blink::PaintPropertyNode.762" = type { %"class.WTF::RefCounted.763", i8, i8, %class.scoped_refptr.765, i32, i32 }
%"class.WTF::RefCounted.763" = type { %"class.base::RefCounted.764" }
%"class.base::RefCounted.764" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.765 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"struct.blink::EffectPaintPropertyNode::State" = type <{ %class.scoped_refptr.714, %class.scoped_refptr.766, %"class.blink::CompositorFilterOperations", %"class.std::__1::unique_ptr.788", float, i32, i64, %"struct.cc::ElementId", %"class.cc::DocumentTransitionSharedElementId", i8, i8, i8, [5 x i8] }>
%class.scoped_refptr.766 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.803" }
%"class.blink::PaintPropertyNode.803" = type { %"class.WTF::RefCounted.804", i8, i8, %class.scoped_refptr.766, i32, i32 }
%"class.WTF::RefCounted.804" = type { %"class.base::RefCounted.805" }
%"class.base::RefCounted.805" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.767" }
%"class.std::__1::vector.767" = type { %"class.std::__1::__vector_base.768" }
%"class.std::__1::__vector_base.768" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.783" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp.769, [20 x float], i32, [4 x i8], %"class.std::__1::vector.776", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp.769 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.770, i32, %"class.absl::optional.771", i8, i32 }
%class.sk_sp.770 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.771" = type { %"class.absl::optional_internal::optional_data.772" }
%"class.absl::optional_internal::optional_data.772" = type { %"class.absl::optional_internal::optional_data_base.773" }
%"class.absl::optional_internal::optional_data_base.773" = type { %"class.absl::optional_internal::optional_data_dtor_base.774" }
%"class.absl::optional_internal::optional_data_dtor_base.774" = type { i8, %union.anon.775 }
%union.anon.775 = type { %struct.SkRect }
%"class.std::__1::vector.776" = type { %"class.std::__1::__vector_base.777" }
%"class.std::__1::__vector_base.777" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.778" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.778" = type { %"struct.std::__1::__compressed_pair_elem.779" }
%"struct.std::__1::__compressed_pair_elem.779" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.783" = type { %"struct.std::__1::__compressed_pair_elem.784" }
%"struct.std::__1::__compressed_pair_elem.784" = type { %"class.cc::FilterOperation"* }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.788" = type { %"class.std::__1::__compressed_pair.789" }
%"class.std::__1::__compressed_pair.789" = type { %"struct.std::__1::__compressed_pair_elem.790" }
%"struct.std::__1::__compressed_pair_elem.790" = type { %"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo"* }
%"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo" = type { %"class.blink::CompositorFilterOperations", %"class.gfx::RRectF", %"struct.cc::ElementId" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.794" }
%"class.std::__1::vector.794" = type { %"class.std::__1::__vector_base.795" }
%"class.std::__1::__vector_base.795" = type { i32*, i32*, %"class.std::__1::__compressed_pair.796" }
%"class.std::__1::__compressed_pair.796" = type { %"struct.std::__1::__compressed_pair_elem.797" }
%"struct.std::__1::__compressed_pair_elem.797" = type { i32* }
%class.scoped_refptr.801 = type { %"class.blink::EffectPaintPropertyNodeAlias"* }
%"class.blink::EffectPaintPropertyNodeAlias" = type { %"class.blink::EffectPaintPropertyNodeOrAlias" }
%class.scoped_refptr.802 = type { %"class.blink::ClipPaintPropertyNode"* }
%"class.blink::ClipPaintPropertyNode" = type { %"class.blink::ClipPaintPropertyNodeOrAlias", %"struct.blink::ClipPaintPropertyNode::State", %"class.std::__1::unique_ptr.814" }
%"struct.blink::ClipPaintPropertyNode::State" = type { %class.scoped_refptr.714, %"class.absl::optional.806", %class.scoped_refptr.811, %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect" }
%"class.absl::optional.806" = type { %"class.absl::optional_internal::optional_data.807" }
%"class.absl::optional_internal::optional_data.807" = type { %"class.absl::optional_internal::optional_data_base.808" }
%"class.absl::optional_internal::optional_data_base.808" = type { %"class.absl::optional_internal::optional_data_dtor_base.809" }
%"class.absl::optional_internal::optional_data_dtor_base.809" = type { i8, [3 x i8], %union.anon.810 }
%union.anon.810 = type { %"class.blink::FloatClipRect" }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.814" = type { %"class.std::__1::__compressed_pair.815" }
%"class.std::__1::__compressed_pair.815" = type { %"struct.std::__1::__compressed_pair_elem.816" }
%"struct.std::__1::__compressed_pair_elem.816" = type { %"class.blink::GeometryMapperClipCache"* }
%"class.blink::GeometryMapperClipCache" = type <{ %"class.WTF::Vector.817", i32, [4 x i8] }>
%"class.WTF::Vector.817" = type { %"class.WTF::VectorBuffer.818" }
%"class.WTF::VectorBuffer.818" = type { %"class.WTF::VectorBufferBase.819" }
%"class.WTF::VectorBufferBase.819" = type { %"struct.blink::GeometryMapperClipCache::ClipCacheEntry"*, i32, i32 }
%"struct.blink::GeometryMapperClipCache::ClipCacheEntry" = type { %"struct.blink::GeometryMapperClipCache::ClipAndTransform", %"class.blink::FloatClipRect", i8, [3 x i8] }
%"struct.blink::GeometryMapperClipCache::ClipAndTransform" = type <{ %"class.blink::ClipPaintPropertyNode"*, %"class.blink::TransformPaintPropertyNode"*, i32, [4 x i8] }>
%class.scoped_refptr.825 = type { %"class.blink::ClipPaintPropertyNodeAlias"* }
%"class.blink::ClipPaintPropertyNodeAlias" = type { %"class.blink::ClipPaintPropertyNodeOrAlias" }
%"class.std::__1::unique_ptr.829" = type { %"class.std::__1::__compressed_pair.830" }
%"class.std::__1::__compressed_pair.830" = type { %"struct.std::__1::__compressed_pair_elem.831" }
%"struct.std::__1::__compressed_pair_elem.831" = type { %"class.blink::RefCountedPropertyTreeState"* }
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr.714, %class.scoped_refptr.766, %class.scoped_refptr.765 }
%"class.absl::optional.835" = type { %"class.absl::optional_internal::optional_data.836" }
%"class.absl::optional_internal::optional_data.836" = type { %"class.absl::optional_internal::optional_data_base.837" }
%"class.absl::optional_internal::optional_data_base.837" = type { %"class.absl::optional_internal::optional_data_dtor_base.838" }
%"class.absl::optional_internal::optional_data_dtor_base.838" = type { i8, %union.anon.839 }
%union.anon.839 = type { %"class.blink::IntRect" }
%class.scoped_refptr.811 = type { %"class.blink::RefCountedPath"* }
%"class.blink::RefCountedPath" = type { %"class.blink::Path", %"class.WTF::RefCounted.812", [4 x i8] }
%"class.WTF::RefCounted.812" = type { %"class.base::RefCounted.813" }
%"class.base::RefCounted.813" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::CullRect" = type { %"class.blink::IntRect" }
%"class.std::__1::unique_ptr.840" = type { %"class.std::__1::__compressed_pair.841" }
%"class.std::__1::__compressed_pair.841" = type { %"struct.std::__1::__compressed_pair_elem.842" }
%"struct.std::__1::__compressed_pair_elem.842" = type { %"class.blink::FragmentData"* }
%"class.blink::LayoutRectOutsets" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutRect" = type { %"class.blink::LayoutPoint", %"class.blink::LayoutSize" }
%"class.blink::LayoutPoint" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"struct.blink::MinMaxSizes" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%class.scoped_refptr.849 = type { %"class.blink::NGLayoutResult"* }
%"class.blink::NGLayoutResult" = type opaque
%"class.WTF::Vector.850" = type { %"class.WTF::VectorBuffer.851" }
%"class.WTF::VectorBuffer.851" = type { %"class.WTF::VectorBufferBase.852", [8 x i8] }
%"class.WTF::VectorBufferBase.852" = type { %class.scoped_refptr.849*, i32, i32 }
%"class.std::__1::unique_ptr.855" = type { %"class.std::__1::__compressed_pair.856" }
%"class.std::__1::__compressed_pair.856" = type { %"struct.std::__1::__compressed_pair_elem.857" }
%"struct.std::__1::__compressed_pair_elem.857" = type { %"struct.blink::BoxOverflowModel"* }
%"struct.blink::BoxOverflowModel" = type { %"class.absl::optional.858", %"class.absl::optional.867", %"class.absl::optional.872" }
%"class.absl::optional.858" = type { %"class.absl::optional_internal::optional_data.859" }
%"class.absl::optional_internal::optional_data.859" = type { %"class.absl::optional_internal::optional_data_base.860" }
%"class.absl::optional_internal::optional_data_base.860" = type { %"class.absl::optional_internal::optional_data_dtor_base.861" }
%"class.absl::optional_internal::optional_data_dtor_base.861" = type { i8, %union.anon.862 }
%union.anon.862 = type { %"class.blink::BoxLayoutOverflowModel" }
%"class.blink::BoxLayoutOverflowModel" = type { %"class.blink::LayoutRect", %"class.blink::LayoutUnit" }
%"class.absl::optional.867" = type { %"class.absl::optional_internal::optional_data.868" }
%"class.absl::optional_internal::optional_data.868" = type { %"class.absl::optional_internal::optional_data_base.869" }
%"class.absl::optional_internal::optional_data_base.869" = type { %"class.absl::optional_internal::optional_data_dtor_base.870" }
%"class.absl::optional_internal::optional_data_dtor_base.870" = type { i8, [3 x i8], %union.anon.871 }
%union.anon.871 = type { %"class.blink::BoxVisualOverflowModel" }
%"class.blink::BoxVisualOverflowModel" = type <{ %"class.blink::LayoutRect", %"class.blink::LayoutRect", i8, [3 x i8] }>
%"class.absl::optional.872" = type { %"class.absl::optional_internal::optional_data.873" }
%"class.absl::optional_internal::optional_data.873" = type { %"class.absl::optional_internal::optional_data_base.874" }
%"class.absl::optional_internal::optional_data_base.874" = type { %"class.absl::optional_internal::optional_data_dtor_base.875" }
%"class.absl::optional_internal::optional_data_dtor_base.875" = type { i8, %union.anon.876 }
%union.anon.876 = type { %"struct.blink::BoxOverflowModel::PreviousOverflowData" }
%"struct.blink::BoxOverflowModel::PreviousOverflowData" = type { %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect", %"struct.blink::PhysicalRect" }
%"struct.blink::BoxLayoutExtraInput" = type opaque
%union.anon.880 = type { %"class.blink::InlineBox"* }
%"class.blink::InlineBox" = type opaque
%"class.blink::Persistent.881" = type { %"class.blink::PersistentBase.882" }
%"class.blink::PersistentBase.882" = type { %"struct.blink::LayoutBoxRareData"*, %"class.blink::PersistentNodePtr.272" }
%"struct.blink::LayoutBoxRareData" = type { %"class.blink::LayoutMultiColumnSpannerPlaceholder"*, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i8, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutBlock"*, %"class.blink::LayoutBox"*, %"class.std::__1::unique_ptr.885", %"struct.blink::PhysicalRect", %"class.blink::Member.894" }
%"class.blink::LayoutMultiColumnSpannerPlaceholder" = type opaque
%"class.blink::LayoutBlock" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16, [6 x i8] }>
%"class.blink::LayoutObjectChildList" = type { %"class.blink::LayoutObject"*, %"class.blink::LayoutObject"* }
%"class.std::__1::unique_ptr.885" = type { %"class.std::__1::__compressed_pair.886" }
%"class.std::__1::__compressed_pair.886" = type { %"struct.std::__1::__compressed_pair_elem.887" }
%"struct.std::__1::__compressed_pair_elem.887" = type { %"class.WTF::HashSet"* }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.888" }
%"class.WTF::HashTable.888" = type <{ %"class.blink::LayoutBox"**, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.894" = type { %"class.blink::MemberBase.895" }
%"class.blink::MemberBase.895" = type { %"class.blink::CustomLayoutChild"* }
%"class.blink::CustomLayoutChild" = type opaque
%"class.blink::ListGrid" = type { %"class.blink::Grid", i64, i64, %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList" }
%"class.blink::Grid" = type { i32 (...)**, %"class.blink::OrderIterator", i64, i64, i64, i64, i8, [7 x i8], %"class.WTF::HashMap.904", %"class.WTF::HashMap.909", %"class.std::__1::unique_ptr.914", %"class.std::__1::unique_ptr.914" }
%"class.blink::OrderIterator" = type <{ %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"*, %"class.std::__1::set", %"class.std::__1::__tree_const_iterator", i8, [7 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.896", %"class.std::__1::__compressed_pair.901" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.896" = type { %"struct.std::__1::__compressed_pair_elem.897" }
%"struct.std::__1::__compressed_pair_elem.897" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.901" = type { %"struct.std::__1::__compressed_pair_elem.163" }
%"class.std::__1::__tree_const_iterator" = type { %"class.std::__1::__tree_end_node"* }
%"class.WTF::HashMap.904" = type { %"class.WTF::HashTable.905" }
%"class.WTF::HashTable.905" = type <{ %"struct.WTF::KeyValuePair.908"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.908" = type { %"class.blink::LayoutBox"*, %"struct.blink::GridArea" }
%"class.WTF::HashMap.909" = type { %"class.WTF::HashTable.910" }
%"class.WTF::HashTable.910" = type <{ %"struct.WTF::KeyValuePair.913"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.913" = type { %"class.blink::LayoutBox"*, i64 }
%"class.std::__1::unique_ptr.914" = type { %"class.std::__1::__compressed_pair.915" }
%"class.std::__1::__compressed_pair.915" = type { %"struct.std::__1::__compressed_pair_elem.916" }
%"struct.std::__1::__compressed_pair_elem.916" = type { %"class.WTF::LinkedHashSet"* }
%"class.WTF::LinkedHashSet" = type { %"class.WTF::HashMap.917", %"class.WTF::VectorBackedLinkedList" }
%"class.WTF::HashMap.917" = type { %"class.WTF::HashTable.918" }
%"class.WTF::HashTable.918" = type <{ %"struct.WTF::KeyValuePair.921"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.921" = type <{ i64, i32, [4 x i8] }>
%"class.WTF::VectorBackedLinkedList" = type { %"class.WTF::Vector.922", i32, i32 }
%"class.WTF::Vector.922" = type { %"class.WTF::VectorBuffer.923" }
%"class.WTF::VectorBuffer.923" = type { %"class.WTF::VectorBufferBase.924" }
%"class.WTF::VectorBufferBase.924" = type { %"class.WTF::VectorBackedLinkedListNode"*, i32, i32 }
%"class.WTF::VectorBackedLinkedListNode" = type { i32, i32, i64 }
%"class.WTF::DoublyLinkedList" = type { %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"* }
%"class.blink::ListGridIterator" = type { %"class.blink::Grid::GridIterator", %"class.blink::ListGrid"*, %"class.blink::ListGrid::GridCell"* }
%"class.blink::Grid::GridIterator" = type { i32 (...)**, i32, i64, i64, i64 }
%"class.blink::LayoutGrid" = type <{ %"class.blink::LayoutBlock.base", [6 x i8], %"class.blink::LayoutNGGridInterface", %"class.std::__1::unique_ptr", %"class.blink::GridTrackSizingAlgorithm", %"class.WTF::Vector.1344", %"class.WTF::Vector.1344", %"struct.blink::ContentAlignmentData", %"struct.blink::ContentAlignmentData", %"class.WTF::HashMap.1349", %"class.WTF::HashMap.1349", i8, i8, %"class.absl::optional.1354", [4 x i8] }>
%"class.blink::LayoutBlock.base" = type <{ %"class.blink::LayoutBox", %"class.blink::LayoutObjectChildList", i16 }>
%"class.blink::LayoutNGGridInterface" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::Grid"* }
%"class.blink::GridTrackSizingAlgorithm" = type { i8, i8, %"class.absl::optional.1308", %"class.absl::optional.1308", %"class.absl::optional.1308", %"class.absl::optional.1308", %"class.WTF::Vector.1313", %"class.WTF::Vector.1313", %"class.WTF::Vector.1323", %"class.WTF::Vector.1323", %"class.WTF::Vector.1323", i32, %"class.blink::Grid"*, %"class.blink::LayoutGrid"*, %"class.std::__1::unique_ptr.1328", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", i32, [4 x i8], %"class.blink::GridBaselineAlignment", %"class.WTF::HashMap.1339", %"class.WTF::HashMap.1339" }
%"class.absl::optional.1308" = type { %"class.absl::optional_internal::optional_data.1309" }
%"class.absl::optional_internal::optional_data.1309" = type { %"class.absl::optional_internal::optional_data_base.1310" }
%"class.absl::optional_internal::optional_data_base.1310" = type { %"class.absl::optional_internal::optional_data_dtor_base.1311" }
%"class.absl::optional_internal::optional_data_dtor_base.1311" = type { i8, %union.anon.1312 }
%union.anon.1312 = type { %"class.blink::LayoutUnit" }
%"class.WTF::Vector.1313" = type { %"class.WTF::VectorBuffer.1314" }
%"class.WTF::VectorBuffer.1314" = type { %"class.WTF::VectorBufferBase.1315" }
%"class.WTF::VectorBufferBase.1315" = type { %"class.blink::GridTrack"*, i32, i32 }
%"class.blink::GridTrack" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.absl::optional.1308", i8, [7 x i8], %"class.absl::optional.1316" }
%"class.absl::optional.1316" = type { %"class.absl::optional_internal::optional_data.1317" }
%"class.absl::optional_internal::optional_data.1317" = type { %"class.absl::optional_internal::optional_data_base.1318" }
%"class.absl::optional_internal::optional_data_base.1318" = type { %"class.absl::optional_internal::optional_data_dtor_base.1319" }
%"class.absl::optional_internal::optional_data_dtor_base.1319" = type { i8, [7 x i8], %union.anon.1320 }
%union.anon.1320 = type { %"class.blink::GridTrackSize" }
%"class.std::__1::unique_ptr.1328" = type { %"class.std::__1::__compressed_pair.1329" }
%"class.std::__1::__compressed_pair.1329" = type { %"struct.std::__1::__compressed_pair_elem.1330" }
%"struct.std::__1::__compressed_pair_elem.1330" = type { %"class.blink::GridTrackSizingAlgorithmStrategy"* }
%"class.blink::GridTrackSizingAlgorithmStrategy" = type { i32 (...)**, %"class.blink::GridTrackSizingAlgorithm"* }
%"class.blink::GridBaselineAlignment" = type { i8, [7 x i8], %"class.WTF::HashMap.1334", %"class.WTF::HashMap.1334" }
%"class.WTF::HashMap.1334" = type { %"class.WTF::HashTable.1335" }
%"class.WTF::HashTable.1335" = type <{ %"struct.WTF::KeyValuePair.1338"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1338" = type { i32, %"class.std::__1::unique_ptr.1438" }
%"class.std::__1::unique_ptr.1438" = type { %"class.std::__1::__compressed_pair.1439" }
%"class.std::__1::__compressed_pair.1439" = type { %"struct.std::__1::__compressed_pair_elem.1440" }
%"struct.std::__1::__compressed_pair_elem.1440" = type { %"class.blink::BaselineContext"* }
%"class.blink::BaselineContext" = type { %"class.WTF::Vector.1441" }
%"class.WTF::Vector.1441" = type { %"class.WTF::VectorBuffer.1442" }
%"class.WTF::VectorBuffer.1442" = type { %"class.WTF::VectorBufferBase.1443" }
%"class.WTF::VectorBufferBase.1443" = type { %"class.blink::BaselineGroup"*, i32, i32 }
%"class.blink::BaselineGroup" = type { i8, i32, %"class.blink::LayoutUnit", %"class.blink::LayoutUnit", %"class.WTF::HashSet.1444" }
%"class.WTF::HashSet.1444" = type { %"class.WTF::HashTable.1445" }
%"class.WTF::HashTable.1445" = type <{ %"class.blink::LayoutBox"**, i32, i32, i32, [4 x i8] }>
%"class.WTF::HashMap.1339" = type { %"class.WTF::HashTable.1340" }
%"class.WTF::HashTable.1340" = type <{ %"struct.WTF::KeyValuePair.1343"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1343" = type <{ %"class.blink::LayoutBox"*, i8, [7 x i8] }>
%"class.WTF::Vector.1344" = type { %"class.WTF::VectorBuffer.1345" }
%"class.WTF::VectorBuffer.1345" = type { %"class.WTF::VectorBufferBase.1346" }
%"class.WTF::VectorBufferBase.1346" = type { %"class.blink::LayoutUnit"*, i32, i32 }
%"struct.blink::ContentAlignmentData" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.WTF::HashMap.1349" = type { %"class.WTF::HashTable.1350" }
%"class.WTF::HashTable.1350" = type <{ %"struct.WTF::KeyValuePair.1353"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.1353" = type opaque
%"class.absl::optional.1354" = type { %"class.absl::optional_internal::optional_data.1355" }
%"class.absl::optional_internal::optional_data.1355" = type { %"class.absl::optional_internal::optional_data_base.1356" }
%"class.absl::optional_internal::optional_data_base.1356" = type { %"class.absl::optional_internal::optional_data_dtor_base.1357" }
%"class.absl::optional_internal::optional_data_dtor_base.1357" = type { i8, %union.anon.1358 }
%union.anon.1358 = type { i8 }
%"class.WTF::DoublyLinkedListNode.1363" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", i32 }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK5blink8ListGrid9NumTracksENS_24GridTrackSizingDirectionE = comdat any

$_ZN5blink8ListGrid28ConsolidateGridDataStructureEv = comdat any

$_ZN5blink4Grid12GridIteratorD2Ev = comdat any

$_ZN5blink16ListGridIteratorD0Ev = comdat any

$_ZN5blink4GridD2Ev = comdat any

$_ZN5blink4GridD0Ev = comdat any

$_ZN5blink4Grid12GridIteratorD0Ev = comdat any

$_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9LayoutBoxEEEmm = comdat any

$_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_ = comdat any

$_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EES4_RS6_EENS_18HashTableAddResultISH_S7_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS7_jSI_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE16LookupForWritingERKS4_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISE_S9_SF_EES4_RmEENS_18HashTableAddResultISG_S6_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6ExpandEPS6_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE8RehashToEPS6_jSH_ = comdat any

$_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE16LookupForWritingERKS4_ = comdat any

$_ZNK3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZTVN5blink4GridE = comdat any

$_ZTVN5blink4Grid12GridIteratorE = comdat any

@_ZTVN5blink4GridE = linkonce_odr hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.blink::Grid"*)* @_ZN5blink4GridD2Ev to i8*), i8* bitcast (void (%"class.blink::Grid"*)* @_ZN5blink4GridD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTVN5blink4Grid12GridIteratorE = linkonce_odr hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void (%"class.blink::Grid::GridIterator"*)* @_ZN5blink4Grid12GridIteratorD2Ev to i8*), i8* bitcast (void (%"class.blink::Grid::GridIterator"*)* @_ZN5blink4Grid12GridIteratorD0Ev to i8*)] }, comdat, align 8
@_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZNK5blink8ListGrid4CellEmmE14s_empty_vector = internal global i64 0, align 8
@_ZTVN5blink8ListGridE = hidden unnamed_addr constant { [11 x i8*] } { [11 x i8*] [i8* null, i8* null, i8* bitcast (i64 (%"class.blink::ListGrid"*, i32)* @_ZNK5blink8ListGrid9NumTracksENS_24GridTrackSizingDirectionE to i8*), i8* bitcast (void (%"class.blink::ListGrid"*, i64, i64)* @_ZN5blink8ListGrid14EnsureGridSizeEmm to i8*), i8* bitcast (void (%"class.blink::ListGrid"*, %"class.blink::LayoutBox"*, %"struct.blink::GridArea"*)* @_ZN5blink8ListGrid6InsertERNS_9LayoutBoxERKNS_8GridAreaE to i8*), i8* bitcast (%"class.WTF::Vector.1365"* (%"class.blink::ListGrid"*, i64, i64)* @_ZNK5blink8ListGrid4CellEmm to i8*), i8* bitcast (void (%"class.blink::ListGrid"*)* @_ZN5blink8ListGridD2Ev to i8*), i8* bitcast (void (%"class.blink::ListGrid"*)* @_ZN5blink8ListGridD0Ev to i8*), i8* bitcast (%"class.blink::Grid::GridIterator"* (%"class.blink::ListGrid"*, i32, i64, i64)* @_ZNK5blink8ListGrid14CreateIteratorENS_24GridTrackSizingDirectionEmm to i8*), i8* bitcast (void (%"class.blink::ListGrid"*)* @_ZN5blink8ListGrid22ClearGridDataStructureEv to i8*), i8* bitcast (void (%"class.blink::ListGrid"*)* @_ZN5blink8ListGrid28ConsolidateGridDataStructureEv to i8*)] }, align 8
@_ZTVN5blink16ListGridIteratorE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (%"class.blink::LayoutBox"* (%"class.blink::ListGridIterator"*)* @_ZN5blink16ListGridIterator12NextGridItemEv to i8*), i8* bitcast (%"struct.blink::GridArea"* (%"class.blink::ListGridIterator"*, i64, i64)* @_ZN5blink16ListGridIterator17NextEmptyGridAreaEmm to i8*), i8* bitcast (void (%"class.blink::Grid::GridIterator"*)* @_ZN5blink4Grid12GridIteratorD2Ev to i8*), i8* bitcast (void (%"class.blink::ListGridIterator"*)* @_ZN5blink16ListGridIteratorD0Ev to i8*)] }, align 8
@.str = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink9LayoutBoxEEEPKcv = private unnamed_addr constant [66 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::LayoutBox *]\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.6 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink9LayoutBoxENS2_8GridAreaEEEEEPKcv = private unnamed_addr constant [108 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<const blink::LayoutBox *, blink::GridArea>]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink9LayoutBoxEmEEEEPKcv = private unnamed_addr constant [106 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<const blink::LayoutBox *, unsigned long>]\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink8ListGrid9GridTrackD1Ev = hidden unnamed_addr alias void (%"class.blink::ListGrid::GridTrack"*), void (%"class.blink::ListGrid::GridTrack"*)* @_ZN5blink8ListGrid9GridTrackD2Ev
@_ZN5blink8ListGridD1Ev = hidden unnamed_addr alias void (%"class.blink::ListGrid"*), void (%"class.blink::ListGrid"*)* @_ZN5blink8ListGridD2Ev
@_ZN5blink16ListGridIteratorC1ERKNS_8ListGridENS_24GridTrackSizingDirectionEmm = hidden unnamed_addr alias void (%"class.blink::ListGridIterator"*, %"class.blink::ListGrid"*, i32, i64, i64), void (%"class.blink::ListGridIterator"*, %"class.blink::ListGrid"*, i32, i64, i64)* @_ZN5blink16ListGridIteratorC2ERKNS_8ListGridENS_24GridTrackSizingDirectionEmm

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Grid"* @_ZN5blink4Grid6CreateEPKNS_10LayoutGridE(%"class.blink::LayoutGrid"*) local_unnamed_addr #0 align 2 {
  %2 = tail call noalias i8* @malloc(i64 216) #15
  %3 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink4GridE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to %"class.blink::OrderIterator"*
  %6 = getelementptr inbounds %"class.blink::LayoutGrid", %"class.blink::LayoutGrid"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink13OrderIteratorC1EPKNS_9LayoutBoxE(%"class.blink::OrderIterator"* %5, %"class.blink::LayoutBox"* %6) #15
  %7 = getelementptr inbounds i8, i8* %2, i64 64
  %8 = getelementptr inbounds i8, i8* %2, i64 96
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 32, i1 false) #15
  store i8 1, i8* %8, align 8
  %9 = getelementptr inbounds i8, i8* %2, i64 104
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 20, i1 false) #15
  %10 = getelementptr inbounds i8, i8* %2, i64 128
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 20, i1 false) #15
  %11 = getelementptr inbounds i8, i8* %2, i64 152
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #15
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8ListGridE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %12 = getelementptr inbounds i8, i8* %2, i64 168
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 48, i1 false) #15
  %13 = bitcast i8* %2 to %"class.blink::Grid"*
  ret %"class.blink::Grid"* %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink4GridC2EPKNS_10LayoutGridE(%"class.blink::Grid"*, %"class.blink::LayoutGrid"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink4GridE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.blink::LayoutGrid", %"class.blink::LayoutGrid"* %1, i64 0, i32 0, i32 0
  tail call void @_ZN5blink13OrderIteratorC1EPKNS_9LayoutBoxE(%"class.blink::OrderIterator"* %4, %"class.blink::LayoutBox"* %5) #15
  %6 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 2
  %7 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 6
  %8 = bitcast i64* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false)
  store i8 1, i8* %7, align 8
  %9 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8
  %10 = bitcast %"class.WTF::HashMap.904"* %9 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 20, i1 false) #15
  %11 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9
  %12 = bitcast %"class.WTF::HashMap.909"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 20, i1 false) #15
  %13 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10
  %14 = bitcast %"class.std::__1::unique_ptr.914"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 16, i1 false)
  ret void
}

declare void @_ZN5blink13OrderIteratorC1EPKNS_9LayoutBoxE(%"class.blink::OrderIterator"*, %"class.blink::LayoutBox"*) unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink4Grid20SetExplicitGridStartEmm(%"class.blink::Grid"* nocapture, i64, i64) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 3
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 2
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink4Grid17ExplicitGridStartENS_24GridTrackSizingDirectionE(%"class.blink::Grid"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 1
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 3
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 2
  %6 = select i1 %3, i64* %4, i64* %5
  %7 = load i64, i64* %6, align 8
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink4Grid12GridItemAreaERKNS_9LayoutBoxE(%"struct.blink::GridArea"* noalias nocapture sret, %"class.blink::Grid"* nocapture readonly, %"class.blink::LayoutBox"* dereferenceable(216)) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.blink::LayoutBox"* %2 to i64
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %1, i64 0, i32 8, i32 0, i32 0
  %6 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %5, align 8
  %7 = icmp eq %"struct.WTF::KeyValuePair.908"* %6, null
  br i1 %7, label %69, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %1, i64 0, i32 8, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = zext i32 %11 to i64
  %13 = shl i64 %4, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %14, %4
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %11, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %6, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %34, i64 0, i32 0
  %36 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %35, align 8
  %37 = icmp eq %"class.blink::LayoutBox"* %36, %2
  br i1 %37, label %66, label %38

38:                                               ; preds = %8
  %39 = xor i32 %31, -1
  %40 = lshr i32 %31, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %52

52:                                               ; preds = %57, %38
  %53 = phi %"class.blink::LayoutBox"* [ %36, %38 ], [ %64, %57 ]
  %54 = phi i64 [ %33, %38 ], [ %61, %57 ]
  %55 = phi i64 [ 0, %38 ], [ %59, %57 ]
  %56 = icmp eq %"class.blink::LayoutBox"* %53, null
  br i1 %56, label %69, label %57

57:                                               ; preds = %52
  %58 = icmp eq i64 %55, 0
  %59 = select i1 %58, i64 %51, i64 %55
  %60 = add i64 %59, %54
  %61 = and i64 %60, %12
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %6, i64 %61
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %62, i64 0, i32 0
  %64 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %63, align 8
  %65 = icmp eq %"class.blink::LayoutBox"* %64, %2
  br i1 %65, label %66, label %52

66:                                               ; preds = %57, %8
  %67 = phi %"struct.WTF::KeyValuePair.908"* [ %34, %8 ], [ %62, %57 ]
  %68 = icmp eq %"struct.WTF::KeyValuePair.908"* %67, null
  br i1 %68, label %69, label %75

69:                                               ; preds = %52, %3, %66
  %70 = bitcast %"struct.blink::GridArea"* %0 to i64*
  store i64 4294967296, i64* %70, align 4, !alias.scope !2
  %71 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %0, i64 0, i32 0, i32 2
  store i32 2, i32* %71, align 4, !alias.scope !2
  %72 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %0, i64 0, i32 1
  %73 = bitcast %"struct.blink::GridSpan"* %72 to i64*
  store i64 4294967296, i64* %73, align 4, !alias.scope !2
  %74 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %0, i64 0, i32 1, i32 2
  store i32 2, i32* %74, align 4, !alias.scope !2
  br label %79

75:                                               ; preds = %66
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %67, i64 0, i32 1
  %77 = bitcast %"struct.blink::GridArea"* %0 to i8*
  %78 = bitcast %"struct.blink::GridArea"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 24, i1 false) #15
  br label %79

79:                                               ; preds = %69, %75
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink4Grid15SetGridItemAreaERKNS_9LayoutBoxENS_8GridAreaE(%"class.blink::Grid"*, %"class.blink::LayoutBox"* dereferenceable(216), %"struct.blink::GridArea"* byval(%"struct.blink::GridArea") align 8) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::LayoutBox"*, align 8
  %5 = bitcast %"class.blink::LayoutBox"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #15
  store %"class.blink::LayoutBox"* %1, %"class.blink::LayoutBox"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8, i32 0
  %7 = call { %"struct.WTF::KeyValuePair.908"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EES4_RS6_EENS_18HashTableAddResultISH_S7_EEOT0_OT1_(%"class.WTF::HashTable.905"* %6, %"class.blink::LayoutBox"** nonnull dereferenceable(8) %4, %"struct.blink::GridArea"* nonnull dereferenceable(24) %2) #15
  %8 = extractvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %7, 1
  %9 = and i8 %8, 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %3
  %12 = extractvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %7, 0
  %13 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %12, i64 0, i32 1
  %14 = bitcast %"struct.blink::GridArea"* %13 to i8*
  %15 = bitcast %"struct.blink::GridArea"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* nonnull align 8 %15, i64 24, i1 false) #15
  br label %16

16:                                               ; preds = %3, %11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #15
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink4Grid18GridItemPaintOrderERKNS_9LayoutBoxE(%"class.blink::Grid"* nocapture readonly, %"class.blink::LayoutBox"* dereferenceable(216)) local_unnamed_addr #5 align 2 {
  %3 = ptrtoint %"class.blink::LayoutBox"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9, i32 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.913"* %5, null
  br i1 %6, label %71, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = add i32 %9, -1
  %11 = zext i32 %10 to i64
  %12 = shl i64 %3, 32
  %13 = xor i64 %12, -1
  %14 = add i64 %13, %3
  %15 = lshr i64 %14, 22
  %16 = xor i64 %15, %14
  %17 = shl i64 %16, 13
  %18 = xor i64 %17, -1
  %19 = add i64 %16, %18
  %20 = lshr i64 %19, 8
  %21 = xor i64 %20, %19
  %22 = mul i64 %21, 9
  %23 = lshr i64 %22, 15
  %24 = xor i64 %23, %22
  %25 = shl i64 %24, 27
  %26 = xor i64 %25, -1
  %27 = add i64 %24, %26
  %28 = lshr i64 %27, 31
  %29 = xor i64 %28, %27
  %30 = trunc i64 %29 to i32
  %31 = and i32 %10, %30
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %5, i64 %32
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %33, i64 0, i32 0
  %35 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %34, align 8
  %36 = icmp eq %"class.blink::LayoutBox"* %35, %1
  br i1 %36, label %65, label %37

37:                                               ; preds = %7
  %38 = xor i32 %30, -1
  %39 = lshr i32 %30, 23
  %40 = add i32 %39, %38
  %41 = shl i32 %40, 12
  %42 = xor i32 %41, %40
  %43 = lshr i32 %42, 7
  %44 = xor i32 %43, %42
  %45 = shl i32 %44, 2
  %46 = xor i32 %45, %44
  %47 = lshr i32 %46, 20
  %48 = xor i32 %47, %46
  %49 = or i32 %48, 1
  %50 = zext i32 %49 to i64
  br label %51

51:                                               ; preds = %56, %37
  %52 = phi %"class.blink::LayoutBox"* [ %35, %37 ], [ %63, %56 ]
  %53 = phi i64 [ %32, %37 ], [ %60, %56 ]
  %54 = phi i64 [ 0, %37 ], [ %58, %56 ]
  %55 = icmp eq %"class.blink::LayoutBox"* %52, null
  br i1 %55, label %71, label %56

56:                                               ; preds = %51
  %57 = icmp eq i64 %54, 0
  %58 = select i1 %57, i64 %50, i64 %54
  %59 = add i64 %58, %53
  %60 = and i64 %59, %11
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %5, i64 %60
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %61, i64 0, i32 0
  %63 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %62, align 8
  %64 = icmp eq %"class.blink::LayoutBox"* %63, %1
  br i1 %64, label %65, label %51

65:                                               ; preds = %56, %7
  %66 = phi %"struct.WTF::KeyValuePair.913"* [ %33, %7 ], [ %61, %56 ]
  %67 = icmp eq %"struct.WTF::KeyValuePair.913"* %66, null
  br i1 %67, label %71, label %68

68:                                               ; preds = %65
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %66, i64 0, i32 1
  %70 = load i64, i64* %69, align 8
  br label %71

71:                                               ; preds = %51, %2, %65, %68
  %72 = phi i64 [ %70, %68 ], [ 0, %65 ], [ 0, %2 ], [ 0, %51 ]
  ret i64 %72
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink4Grid21SetGridItemPaintOrderERKNS_9LayoutBoxEm(%"class.blink::Grid"*, %"class.blink::LayoutBox"* dereferenceable(216), i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca %"class.blink::LayoutBox"*, align 8
  store i64 %2, i64* %4, align 8
  %6 = bitcast %"class.blink::LayoutBox"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15
  store %"class.blink::LayoutBox"* %1, %"class.blink::LayoutBox"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9, i32 0
  %8 = call { %"struct.WTF::KeyValuePair.913"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISE_S9_SF_EES4_RmEENS_18HashTableAddResultISG_S6_EEOT0_OT1_(%"class.WTF::HashTable.910"* %7, %"class.blink::LayoutBox"** nonnull dereferenceable(8) %5, i64* nonnull dereferenceable(8) %4) #15
  %9 = extractvalue { %"struct.WTF::KeyValuePair.913"*, i8 } %8, 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %12, label %16

12:                                               ; preds = %3
  %13 = extractvalue { %"struct.WTF::KeyValuePair.913"*, i8 } %8, 0
  %14 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %13, i64 0, i32 1
  %15 = load i64, i64* %4, align 8
  store i64 %15, i64* %14, align 8
  br label %16

16:                                               ; preds = %3, %12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink4Grid19SetAutoRepeatTracksEmm(%"class.blink::Grid"* nocapture, i64, i64) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 5
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 4
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK5blink4Grid16AutoRepeatTracksENS_24GridTrackSizingDirectionE(%"class.blink::Grid"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 1
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 5
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 4
  %6 = select i1 %3, i64* %4, i64* %5
  %7 = load i64, i64* %6, align 8
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink4Grid25SetAutoRepeatEmptyColumnsENSt3__110unique_ptrIN3WTF13LinkedHashSetImNS_30OrderedTrackIndexSetHashTraitsENS3_18PartitionAllocatorEEENS1_14default_deleteIS7_EEEE(%"class.blink::Grid"* nocapture, %"class.WTF::LinkedHashSet"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.WTF::LinkedHashSet"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr.914", %"class.std::__1::unique_ptr.914"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %5, align 8
  %7 = bitcast %"class.std::__1::unique_ptr.914"* %4 to i64*
  store i64 %3, i64* %7, align 8
  %8 = icmp eq %"class.WTF::LinkedHashSet"* %6, null
  br i1 %8, label %28, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::VectorBackedLinkedListNode"*, %"class.WTF::VectorBackedLinkedListNode"** %10, align 8
  %12 = icmp eq %"class.WTF::VectorBackedLinkedListNode"* %11, null
  %13 = bitcast %"class.WTF::VectorBackedLinkedListNode"* %11 to i8*
  br i1 %12, label %20, label %14, !prof !5

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %19, label %18, !prof !6

18:                                               ; preds = %14
  store i32 0, i32* %15, align 4
  br label %19

19:                                               ; preds = %18, %14
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %13) #15
  store %"class.WTF::VectorBackedLinkedListNode"* null, %"class.WTF::VectorBackedLinkedListNode"** %10, align 8
  br label %20

20:                                               ; preds = %19, %9
  %21 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %6, i64 0, i32 0, i32 0, i32 0
  %22 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %21, align 8
  %23 = icmp eq %"struct.WTF::KeyValuePair.921"* %22, null
  br i1 %23, label %26, label %24, !prof !5

24:                                               ; preds = %20
  %25 = bitcast %"struct.WTF::KeyValuePair.921"* %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %25) #15
  store %"struct.WTF::KeyValuePair.921"* null, %"struct.WTF::KeyValuePair.921"** %21, align 8
  br label %26

26:                                               ; preds = %24, %20
  %27 = bitcast %"class.WTF::LinkedHashSet"* %6 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %27) #15
  br label %28

28:                                               ; preds = %26, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink4Grid22SetAutoRepeatEmptyRowsENSt3__110unique_ptrIN3WTF13LinkedHashSetImNS_30OrderedTrackIndexSetHashTraitsENS3_18PartitionAllocatorEEENS1_14default_deleteIS7_EEEE(%"class.blink::Grid"* nocapture, %"class.WTF::LinkedHashSet"*) local_unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.WTF::LinkedHashSet"* %1 to i64
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 11
  %5 = getelementptr inbounds %"class.std::__1::unique_ptr.914", %"class.std::__1::unique_ptr.914"* %4, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %5, align 8
  %7 = bitcast %"class.std::__1::unique_ptr.914"* %4 to i64*
  store i64 %3, i64* %7, align 8
  %8 = icmp eq %"class.WTF::LinkedHashSet"* %6, null
  br i1 %8, label %28, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::VectorBackedLinkedListNode"*, %"class.WTF::VectorBackedLinkedListNode"** %10, align 8
  %12 = icmp eq %"class.WTF::VectorBackedLinkedListNode"* %11, null
  %13 = bitcast %"class.WTF::VectorBackedLinkedListNode"* %11 to i8*
  br i1 %12, label %20, label %14, !prof !5

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %6, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %19, label %18, !prof !6

18:                                               ; preds = %14
  store i32 0, i32* %15, align 4
  br label %19

19:                                               ; preds = %18, %14
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %13) #15
  store %"class.WTF::VectorBackedLinkedListNode"* null, %"class.WTF::VectorBackedLinkedListNode"** %10, align 8
  br label %20

20:                                               ; preds = %19, %9
  %21 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %6, i64 0, i32 0, i32 0, i32 0
  %22 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %21, align 8
  %23 = icmp eq %"struct.WTF::KeyValuePair.921"* %22, null
  br i1 %23, label %26, label %24, !prof !5

24:                                               ; preds = %20
  %25 = bitcast %"struct.WTF::KeyValuePair.921"* %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %25) #15
  store %"struct.WTF::KeyValuePair.921"* null, %"struct.WTF::KeyValuePair.921"** %21, align 8
  br label %26

26:                                               ; preds = %24, %20
  %27 = bitcast %"class.WTF::LinkedHashSet"* %6 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %27) #15
  br label %28

28:                                               ; preds = %26, %2
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink4Grid24HasAutoRepeatEmptyTracksENS_24GridTrackSizingDirectionE(%"class.blink::Grid"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %6 = select i1 %3, %"class.WTF::LinkedHashSet"** %4, %"class.WTF::LinkedHashSet"** %5
  %7 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %6, align 8
  %8 = icmp ne %"class.WTF::LinkedHashSet"* %7, null
  ret i1 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink4Grid22IsEmptyAutoRepeatTrackENS_24GridTrackSizingDirectionEm(%"class.blink::Grid"* nocapture readonly, i32, i64) local_unnamed_addr #4 align 2 {
  %4 = icmp eq i32 %1, 0
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %7 = select i1 %4, %"class.WTF::LinkedHashSet"** %5, %"class.WTF::LinkedHashSet"** %6
  %8 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %8, i64 0, i32 0, i32 0, i32 0
  %10 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %9, align 8
  %11 = icmp eq %"struct.WTF::KeyValuePair.921"* %10, null
  br i1 %11, label %70, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %8, i64 0, i32 0, i32 0, i32 1
  %14 = load i32, i32* %13, align 8
  %15 = add i32 %14, -1
  %16 = zext i32 %15 to i64
  %17 = shl i64 %2, 32
  %18 = xor i64 %17, -1
  %19 = add i64 %18, %2
  %20 = lshr i64 %19, 22
  %21 = xor i64 %20, %19
  %22 = shl i64 %21, 13
  %23 = xor i64 %22, -1
  %24 = add i64 %21, %23
  %25 = lshr i64 %24, 8
  %26 = xor i64 %25, %24
  %27 = mul i64 %26, 9
  %28 = lshr i64 %27, 15
  %29 = xor i64 %28, %27
  %30 = shl i64 %29, 27
  %31 = xor i64 %30, -1
  %32 = add i64 %29, %31
  %33 = lshr i64 %32, 31
  %34 = xor i64 %33, %32
  %35 = trunc i64 %34 to i32
  %36 = and i32 %15, %35
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair.921", %"struct.WTF::KeyValuePair.921"* %10, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.921", %"struct.WTF::KeyValuePair.921"* %38, i64 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, %2
  br i1 %41, label %70, label %42

42:                                               ; preds = %12
  %43 = xor i32 %35, -1
  %44 = lshr i32 %35, 23
  %45 = add i32 %44, %43
  %46 = shl i32 %45, 12
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 7
  %49 = xor i32 %48, %47
  %50 = shl i32 %49, 2
  %51 = xor i32 %50, %49
  %52 = lshr i32 %51, 20
  %53 = xor i32 %52, %51
  %54 = or i32 %53, 1
  %55 = zext i32 %54 to i64
  br label %56

56:                                               ; preds = %61, %42
  %57 = phi i64 [ %40, %42 ], [ %68, %61 ]
  %58 = phi i64 [ %37, %42 ], [ %65, %61 ]
  %59 = phi i64 [ 0, %42 ], [ %63, %61 ]
  %60 = icmp eq i64 %57, 4294967295
  br i1 %60, label %70, label %61

61:                                               ; preds = %56
  %62 = icmp eq i64 %59, 0
  %63 = select i1 %62, i64 %55, i64 %59
  %64 = add i64 %63, %58
  %65 = and i64 %64, %16
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.921", %"struct.WTF::KeyValuePair.921"* %10, i64 %65
  %67 = getelementptr inbounds %"struct.WTF::KeyValuePair.921", %"struct.WTF::KeyValuePair.921"* %66, i64 0, i32 0
  %68 = load i64, i64* %67, align 8
  %69 = icmp eq i64 %68, %2
  br i1 %69, label %70, label %56

70:                                               ; preds = %56, %61, %3, %12
  %71 = phi %"struct.WTF::KeyValuePair.921"* [ null, %3 ], [ %38, %12 ], [ null, %56 ], [ %66, %61 ]
  %72 = icmp ne %"struct.WTF::KeyValuePair.921"* %71, null
  ret i1 %72
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.WTF::LinkedHashSet"* @_ZNK5blink4Grid21AutoRepeatEmptyTracksENS_24GridTrackSizingDirectionE(%"class.blink::Grid"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = icmp eq i32 %1, 0
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %6 = select i1 %3, %"class.WTF::LinkedHashSet"** %4, %"class.WTF::LinkedHashSet"** %5
  %7 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %6, align 8
  ret %"class.WTF::LinkedHashSet"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i32 } @_ZNK5blink4Grid12GridItemSpanERKNS_9LayoutBoxENS_24GridTrackSizingDirectionE(%"class.blink::Grid"* nocapture readonly, %"class.blink::LayoutBox"* dereferenceable(216), i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.blink::GridArea", align 8
  %5 = bitcast %"struct.blink::GridArea"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %4, i64 0, i32 0
  %7 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %4, i64 0, i32 0, i32 2
  %8 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %4, i64 0, i32 1, i32 2
  %10 = ptrtoint %"class.blink::LayoutBox"* %1 to i64
  %11 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8, i32 0, i32 0
  %12 = bitcast %"struct.blink::GridArea"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  %13 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %11, align 8, !noalias !7
  %14 = icmp eq %"struct.WTF::KeyValuePair.908"* %13, null
  br i1 %14, label %76, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8, i32 0, i32 1
  %17 = load i32, i32* %16, align 8, !noalias !7
  %18 = add i32 %17, -1
  %19 = zext i32 %18 to i64
  %20 = shl i64 %10, 32
  %21 = xor i64 %20, -1
  %22 = add i64 %21, %10
  %23 = lshr i64 %22, 22
  %24 = xor i64 %23, %22
  %25 = shl i64 %24, 13
  %26 = xor i64 %25, -1
  %27 = add i64 %24, %26
  %28 = lshr i64 %27, 8
  %29 = xor i64 %28, %27
  %30 = mul i64 %29, 9
  %31 = lshr i64 %30, 15
  %32 = xor i64 %31, %30
  %33 = shl i64 %32, 27
  %34 = xor i64 %33, -1
  %35 = add i64 %32, %34
  %36 = lshr i64 %35, 31
  %37 = xor i64 %36, %35
  %38 = trunc i64 %37 to i32
  %39 = and i32 %18, %38
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %13, i64 %40
  %42 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %41, i64 0, i32 0
  %43 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %42, align 8, !noalias !7
  %44 = icmp eq %"class.blink::LayoutBox"* %43, %1
  br i1 %44, label %73, label %45

45:                                               ; preds = %15
  %46 = xor i32 %38, -1
  %47 = lshr i32 %38, 23
  %48 = add i32 %47, %46
  %49 = shl i32 %48, 12
  %50 = xor i32 %49, %48
  %51 = lshr i32 %50, 7
  %52 = xor i32 %51, %50
  %53 = shl i32 %52, 2
  %54 = xor i32 %53, %52
  %55 = lshr i32 %54, 20
  %56 = xor i32 %55, %54
  %57 = or i32 %56, 1
  %58 = zext i32 %57 to i64
  br label %59

59:                                               ; preds = %64, %45
  %60 = phi %"class.blink::LayoutBox"* [ %43, %45 ], [ %71, %64 ]
  %61 = phi i64 [ %40, %45 ], [ %68, %64 ]
  %62 = phi i64 [ 0, %45 ], [ %66, %64 ]
  %63 = icmp eq %"class.blink::LayoutBox"* %60, null
  br i1 %63, label %76, label %64

64:                                               ; preds = %59
  %65 = icmp eq i64 %62, 0
  %66 = select i1 %65, i64 %58, i64 %62
  %67 = add i64 %66, %61
  %68 = and i64 %67, %19
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %13, i64 %68
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %69, i64 0, i32 0
  %71 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %70, align 8, !noalias !7
  %72 = icmp eq %"class.blink::LayoutBox"* %71, %1
  br i1 %72, label %73, label %59

73:                                               ; preds = %64, %15
  %74 = phi %"struct.WTF::KeyValuePair.908"* [ %41, %15 ], [ %69, %64 ]
  %75 = icmp eq %"struct.WTF::KeyValuePair.908"* %74, null
  br i1 %75, label %76, label %79

76:                                               ; preds = %59, %73, %3
  %77 = bitcast %"struct.blink::GridArea"* %4 to i64*
  store i64 4294967296, i64* %77, align 8, !alias.scope !10
  store i32 2, i32* %7, align 8, !alias.scope !10
  %78 = bitcast %"struct.blink::GridSpan"* %8 to i64*
  store i64 4294967296, i64* %78, align 4, !alias.scope !10
  store i32 2, i32* %9, align 4, !alias.scope !10
  br label %82

79:                                               ; preds = %73
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %74, i64 0, i32 1
  %81 = bitcast %"struct.blink::GridArea"* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 4 %81, i64 24, i1 false) #15
  br label %82

82:                                               ; preds = %76, %79
  %83 = icmp eq i32 %2, 0
  %84 = select i1 %83, %"struct.blink::GridSpan"* %6, %"struct.blink::GridSpan"* %8
  %85 = bitcast %"struct.blink::GridSpan"* %84 to i64*
  %86 = load i64, i64* %85, align 4
  %87 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %84, i64 0, i32 2
  %88 = load i32, i32* %87, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #15
  %89 = insertvalue { i64, i32 } undef, i64 %86, 0
  %90 = insertvalue { i64, i32 } %89, i32 %88, 1
  ret { i64, i32 } %90
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink4Grid22SetNeedsItemsPlacementEb(%"class.blink::Grid"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 6
  store i8 %3, i8* %4, align 8
  %5 = bitcast %"class.blink::Grid"* %0 to void (%"class.blink::Grid"*)***
  %6 = load void (%"class.blink::Grid"*)**, void (%"class.blink::Grid"*)*** %5, align 8
  br i1 %1, label %10, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds void (%"class.blink::Grid"*)*, void (%"class.blink::Grid"*)** %6, i64 8
  %9 = load void (%"class.blink::Grid"*)*, void (%"class.blink::Grid"*)** %8, align 8
  tail call void %9(%"class.blink::Grid"* %0) #15
  br label %80

10:                                               ; preds = %2
  %11 = getelementptr inbounds void (%"class.blink::Grid"*)*, void (%"class.blink::Grid"*)** %6, i64 7
  %12 = load void (%"class.blink::Grid"*)*, void (%"class.blink::Grid"*)** %11, align 8
  tail call void %12(%"class.blink::Grid"* %0) #15
  %13 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8
  %14 = getelementptr inbounds %"class.WTF::HashMap.904", %"class.WTF::HashMap.904"* %13, i64 0, i32 0, i32 0
  %15 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %14, align 8
  %16 = icmp eq %"struct.WTF::KeyValuePair.908"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8, i32 0, i32 1
  %19 = bitcast %"struct.WTF::KeyValuePair.908"* %15 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %19) #15
  %20 = bitcast %"class.WTF::HashMap.904"* %13 to i64*
  store atomic i64 0, i64* %20 monotonic, align 8
  store i32 0, i32* %18, align 8
  %21 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8, i32 0, i32 2
  store i32 0, i32* %21, align 4
  br label %22

22:                                               ; preds = %10, %17
  %23 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9
  %24 = getelementptr inbounds %"class.WTF::HashMap.909", %"class.WTF::HashMap.909"* %23, i64 0, i32 0, i32 0
  %25 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %24, align 8
  %26 = icmp eq %"struct.WTF::KeyValuePair.913"* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9, i32 0, i32 1
  %29 = bitcast %"struct.WTF::KeyValuePair.913"* %25 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %29) #15
  %30 = bitcast %"class.WTF::HashMap.909"* %23 to i64*
  store atomic i64 0, i64* %30 monotonic, align 8
  store i32 0, i32* %28, align 8
  %31 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9, i32 0, i32 2
  store i32 0, i32* %31, align 4
  br label %32

32:                                               ; preds = %22, %27
  %33 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 2
  %34 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %35 = bitcast i64* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 32, i1 false)
  %36 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %34, align 8
  store %"class.WTF::LinkedHashSet"* null, %"class.WTF::LinkedHashSet"** %34, align 8
  %37 = icmp eq %"class.WTF::LinkedHashSet"* %36, null
  br i1 %37, label %57, label %38

38:                                               ; preds = %32
  %39 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %36, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %40 = load %"class.WTF::VectorBackedLinkedListNode"*, %"class.WTF::VectorBackedLinkedListNode"** %39, align 8
  %41 = icmp eq %"class.WTF::VectorBackedLinkedListNode"* %40, null
  %42 = bitcast %"class.WTF::VectorBackedLinkedListNode"* %40 to i8*
  br i1 %41, label %49, label %43, !prof !5

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %36, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %48, label %47, !prof !6

47:                                               ; preds = %43
  store i32 0, i32* %44, align 4
  br label %48

48:                                               ; preds = %47, %43
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %42) #15
  store %"class.WTF::VectorBackedLinkedListNode"* null, %"class.WTF::VectorBackedLinkedListNode"** %39, align 8
  br label %49

49:                                               ; preds = %48, %38
  %50 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %36, i64 0, i32 0, i32 0, i32 0
  %51 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %50, align 8
  %52 = icmp eq %"struct.WTF::KeyValuePair.921"* %51, null
  br i1 %52, label %55, label %53, !prof !5

53:                                               ; preds = %49
  %54 = bitcast %"struct.WTF::KeyValuePair.921"* %51 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %54) #15
  store %"struct.WTF::KeyValuePair.921"* null, %"struct.WTF::KeyValuePair.921"** %50, align 8
  br label %55

55:                                               ; preds = %53, %49
  %56 = bitcast %"class.WTF::LinkedHashSet"* %36 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %56) #15
  br label %57

57:                                               ; preds = %32, %55
  %58 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %59 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %58, align 8
  store %"class.WTF::LinkedHashSet"* null, %"class.WTF::LinkedHashSet"** %58, align 8
  %60 = icmp eq %"class.WTF::LinkedHashSet"* %59, null
  br i1 %60, label %80, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %59, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %63 = load %"class.WTF::VectorBackedLinkedListNode"*, %"class.WTF::VectorBackedLinkedListNode"** %62, align 8
  %64 = icmp eq %"class.WTF::VectorBackedLinkedListNode"* %63, null
  %65 = bitcast %"class.WTF::VectorBackedLinkedListNode"* %63 to i8*
  br i1 %64, label %72, label %66, !prof !5

66:                                               ; preds = %61
  %67 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %59, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %71, label %70, !prof !6

70:                                               ; preds = %66
  store i32 0, i32* %67, align 4
  br label %71

71:                                               ; preds = %70, %66
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %65) #15
  store %"class.WTF::VectorBackedLinkedListNode"* null, %"class.WTF::VectorBackedLinkedListNode"** %62, align 8
  br label %72

72:                                               ; preds = %71, %61
  %73 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %59, i64 0, i32 0, i32 0, i32 0
  %74 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %73, align 8
  %75 = icmp eq %"struct.WTF::KeyValuePair.921"* %74, null
  br i1 %75, label %78, label %76, !prof !5

76:                                               ; preds = %72
  %77 = bitcast %"struct.WTF::KeyValuePair.921"* %74 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %77) #15
  store %"struct.WTF::KeyValuePair.921"* null, %"struct.WTF::KeyValuePair.921"** %73, align 8
  br label %78

78:                                               ; preds = %76, %72
  %79 = bitcast %"class.WTF::LinkedHashSet"* %59 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %79) #15
  br label %80

80:                                               ; preds = %78, %57, %7
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink4Grid12GridIteratorC2ENS_24GridTrackSizingDirectionEmm(%"class.blink::Grid::GridIterator"* nocapture, i32, i64, i64) unnamed_addr #3 align 2 {
  %5 = getelementptr inbounds %"class.blink::Grid::GridIterator", %"class.blink::Grid::GridIterator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink4Grid12GridIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.blink::Grid::GridIterator", %"class.blink::Grid::GridIterator"* %0, i64 0, i32 1
  store i32 %1, i32* %6, align 8
  %7 = getelementptr inbounds %"class.blink::Grid::GridIterator", %"class.blink::Grid::GridIterator"* %0, i64 0, i32 2
  %8 = icmp eq i32 %1, 0
  %9 = select i1 %8, i64 %3, i64 %2
  store i64 %9, i64* %7, align 8
  %10 = getelementptr inbounds %"class.blink::Grid::GridIterator", %"class.blink::Grid::GridIterator"* %0, i64 0, i32 3
  %11 = select i1 %8, i64 %2, i64 %3
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"class.blink::Grid::GridIterator", %"class.blink::Grid::GridIterator"* %0, i64 0, i32 4
  store i64 0, i64* %12, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::ListGrid::GridCell"* @_ZNK5blink8ListGrid9GridTrack4FindEm(%"class.blink::ListGrid::GridTrack"* nocapture readonly, i64) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 1
  %6 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %6, align 8
  %8 = icmp eq %"class.blink::ListGrid::GridCell"* %7, null
  br i1 %8, label %27, label %9

9:                                                ; preds = %2, %18
  %10 = phi %"class.blink::ListGrid::GridCell"* [ %25, %18 ], [ %7, %2 ]
  %11 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %10, i64 0, i32 6
  %12 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %10, i64 0, i32 7
  %13 = select i1 %5, i64* %12, i64* %11
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, %1
  br i1 %15, label %27, label %16

16:                                               ; preds = %9
  %17 = icmp ugt i64 %14, %1
  br i1 %17, label %27, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %10, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, %4
  %22 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %10, i64 0, i32 1
  %23 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %10, i64 0, i32 3
  %24 = select i1 %21, %"class.blink::ListGrid::GridCell"** %22, %"class.blink::ListGrid::GridCell"** %23
  %25 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %24, align 8
  %26 = icmp eq %"class.blink::ListGrid::GridCell"* %25, null
  br i1 %26, label %27, label %9

27:                                               ; preds = %9, %18, %16, %2
  %28 = phi %"class.blink::ListGrid::GridCell"* [ null, %2 ], [ null, %16 ], [ null, %18 ], [ %10, %9 ]
  ret %"class.blink::ListGrid::GridCell"* %28
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.blink::ListGrid::GridCell"* @_ZNK5blink8ListGrid8GridCell15NextInDirectionENS_24GridTrackSizingDirectionE(%"class.blink::ListGrid::GridCell"* nocapture readonly, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  %6 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %0, i64 0, i32 3
  %8 = select i1 %5, %"class.blink::ListGrid::GridCell"** %6, %"class.blink::ListGrid::GridCell"** %7
  %9 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %8, align 8
  ret %"class.blink::ListGrid::GridCell"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack6InsertEPNS0_8GridCellE(%"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridCell"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, %4
  br i1 %7, label %16, label %8

8:                                                ; preds = %2
  store i32 %4, i32* %5, align 8
  %9 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 2
  %10 = bitcast %"class.blink::ListGrid::GridCell"** %9 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 8
  %12 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 8
  %14 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %14, align 8
  %15 = bitcast %"class.blink::ListGrid::GridCell"** %9 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %15, align 8
  br label %16

16:                                               ; preds = %2, %8
  %17 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 0
  %18 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %17, align 8
  %19 = icmp eq %"class.blink::ListGrid::GridCell"* %18, null
  br i1 %19, label %107, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 2
  %22 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 6
  %23 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 7
  %24 = load i32, i32* %3, align 8
  %25 = bitcast %"class.blink::ListGrid::GridCell"** %21 to <2 x i64>*
  %26 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  %27 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  %28 = bitcast %"class.blink::ListGrid::GridCell"** %21 to <2 x i64>*
  br label %29

29:                                               ; preds = %68, %20
  %30 = phi i32 [ %24, %20 ], [ %57, %68 ]
  %31 = phi i32 [ %4, %20 ], [ %50, %68 ]
  %32 = phi i32 [ %24, %20 ], [ %58, %68 ]
  %33 = phi %"class.blink::ListGrid::GridCell"* [ %18, %20 ], [ %70, %68 ]
  %34 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 4
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, %32
  br i1 %36, label %47, label %37

37:                                               ; preds = %29
  store i32 %32, i32* %34, align 8
  %38 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 2
  %39 = bitcast %"class.blink::ListGrid::GridCell"** %38 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 8
  %41 = bitcast %"class.blink::ListGrid::GridCell"* %33 to <2 x i64>*
  %42 = load <2 x i64>, <2 x i64>* %41, align 8
  %43 = bitcast %"class.blink::ListGrid::GridCell"* %33 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %43, align 8
  %44 = bitcast %"class.blink::ListGrid::GridCell"** %38 to <2 x i64>*
  store <2 x i64> %42, <2 x i64>* %44, align 8
  %45 = load i32, i32* %3, align 8
  %46 = load i32, i32* %5, align 8
  br label %47

47:                                               ; preds = %37, %29
  %48 = phi i32 [ %30, %29 ], [ %45, %37 ]
  %49 = phi i32 [ %31, %29 ], [ %46, %37 ]
  %50 = phi i32 [ %32, %29 ], [ %45, %37 ]
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %56, label %52

52:                                               ; preds = %47
  store i32 %50, i32* %5, align 8
  %53 = load <2 x i64>, <2 x i64>* %25, align 8
  %54 = load <2 x i64>, <2 x i64>* %26, align 8
  store <2 x i64> %53, <2 x i64>* %27, align 8
  store <2 x i64> %54, <2 x i64>* %28, align 8
  %55 = load i32, i32* %3, align 8
  br label %56

56:                                               ; preds = %52, %47
  %57 = phi i32 [ %48, %47 ], [ %55, %52 ]
  %58 = phi i32 [ %50, %47 ], [ %55, %52 ]
  %59 = phi i32 [ %49, %47 ], [ %55, %52 ]
  %60 = icmp ne i32 %59, 1
  %61 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 6
  %62 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 7
  %63 = select i1 %60, i64* %61, i64* %62
  %64 = load i64, i64* %63, align 8
  %65 = select i1 %60, i64* %22, i64* %23
  %66 = load i64, i64* %65, align 8
  %67 = icmp ult i64 %64, %66
  br i1 %67, label %68, label %72

68:                                               ; preds = %56
  %69 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 1
  %70 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %69, align 8
  %71 = icmp eq %"class.blink::ListGrid::GridCell"* %70, null
  br i1 %71, label %107, label %29

72:                                               ; preds = %56
  %73 = load i32, i32* %34, align 8
  %74 = icmp eq i32 %73, %57
  br i1 %74, label %85, label %75

75:                                               ; preds = %72
  store i32 %57, i32* %34, align 8
  %76 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 2
  %77 = bitcast %"class.blink::ListGrid::GridCell"** %76 to <2 x i64>*
  %78 = load <2 x i64>, <2 x i64>* %77, align 8
  %79 = bitcast %"class.blink::ListGrid::GridCell"* %33 to <2 x i64>*
  %80 = load <2 x i64>, <2 x i64>* %79, align 8
  %81 = bitcast %"class.blink::ListGrid::GridCell"* %33 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %81, align 8
  %82 = bitcast %"class.blink::ListGrid::GridCell"** %76 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %82, align 8
  %83 = load i32, i32* %3, align 8
  %84 = load i32, i32* %5, align 8
  br label %85

85:                                               ; preds = %75, %72
  %86 = phi i32 [ %50, %72 ], [ %84, %75 ]
  %87 = phi i32 [ %57, %72 ], [ %83, %75 ]
  %88 = icmp eq i32 %86, %87
  br i1 %88, label %97, label %89

89:                                               ; preds = %85
  store i32 %87, i32* %5, align 8
  %90 = bitcast %"class.blink::ListGrid::GridCell"** %21 to <2 x i64>*
  %91 = load <2 x i64>, <2 x i64>* %90, align 8
  %92 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  %93 = load <2 x i64>, <2 x i64>* %92, align 8
  %94 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  store <2 x i64> %91, <2 x i64>* %94, align 8
  %95 = bitcast %"class.blink::ListGrid::GridCell"** %21 to <2 x i64>*
  store <2 x i64> %93, <2 x i64>* %95, align 8
  %96 = load i32, i32* %3, align 8
  br label %97

97:                                               ; preds = %89, %85
  %98 = phi i32 [ %86, %85 ], [ %96, %89 ]
  %99 = icmp ne i32 %98, 1
  %100 = select i1 %99, i64* %61, i64* %62
  %101 = load i64, i64* %100, align 8
  %102 = select i1 %99, i64* %22, i64* %23
  %103 = load i64, i64* %102, align 8
  %104 = icmp eq i64 %101, %103
  br i1 %104, label %143, label %105

105:                                              ; preds = %97
  %106 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 0
  br label %109

107:                                              ; preds = %68, %16
  %108 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  br label %109

109:                                              ; preds = %107, %105
  %110 = phi %"class.blink::ListGrid::GridCell"** [ %106, %105 ], [ %108, %107 ]
  %111 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %110, align 8
  %112 = icmp eq %"class.blink::ListGrid::GridCell"* %111, null
  br i1 %112, label %113, label %127

113:                                              ; preds = %109
  %114 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %17, align 8
  %115 = icmp eq %"class.blink::ListGrid::GridCell"* %114, null
  br i1 %115, label %116, label %120

116:                                              ; preds = %113
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %17, align 8
  %117 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %117, align 8
  %118 = bitcast %"class.blink::ListGrid::GridCell"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 16, i1 false) #15
  %119 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %17, align 8
  br label %143

120:                                              ; preds = %113
  %121 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %114, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %121, align 8
  %122 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 1
  %125 = bitcast %"class.blink::ListGrid::GridCell"** %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* null, %"class.blink::ListGrid::GridCell"** %126, align 8
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %17, align 8
  br label %143

127:                                              ; preds = %109
  %128 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %111, i64 0, i32 1
  %129 = bitcast %"class.blink::ListGrid::GridCell"** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 1
  %132 = bitcast %"class.blink::ListGrid::GridCell"** %131 to i64*
  store i64 %130, i64* %132, align 8
  %133 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %128, align 8
  %134 = icmp eq %"class.blink::ListGrid::GridCell"* %133, null
  br i1 %134, label %137, label %135

135:                                              ; preds = %127
  %136 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %133, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %136, align 8
  br label %137

137:                                              ; preds = %135, %127
  %138 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* %111, %"class.blink::ListGrid::GridCell"** %138, align 8
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %128, align 8
  %139 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  %140 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %139, align 8
  %141 = icmp eq %"class.blink::ListGrid::GridCell"* %140, %111
  br i1 %141, label %142, label %143

142:                                              ; preds = %137
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %139, align 8
  br label %143

143:                                              ; preds = %97, %116, %120, %137, %142
  %144 = phi %"class.blink::ListGrid::GridCell"* [ %33, %97 ], [ %1, %142 ], [ %1, %137 ], [ %119, %116 ], [ %1, %120 ]
  %145 = phi i8 [ 0, %97 ], [ 1, %142 ], [ 1, %137 ], [ 1, %116 ], [ 1, %120 ]
  %146 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } undef, %"class.blink::ListGrid::GridCell"* %144, 0
  %147 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } %146, i8 %145, 1
  ret { %"class.blink::ListGrid::GridCell"*, i8 } %147
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink8ListGrid8GridCell16SetTraversalModeENS_24GridTrackSizingDirectionE(%"class.blink::ListGrid::GridCell"* nocapture, i32) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, %1
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  store i32 %1, i32* %3, align 8
  %7 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %0, i64 0, i32 2
  %8 = bitcast %"class.blink::ListGrid::GridCell"** %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 8
  %10 = bitcast %"class.blink::ListGrid::GridCell"* %0 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 8
  %12 = bitcast %"class.blink::ListGrid::GridCell"* %0 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %12, align 8
  %13 = bitcast %"class.blink::ListGrid::GridCell"** %7 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %13, align 8
  br label %14

14:                                               ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack6InsertERNS_9LayoutBoxERKNS_8GridSpanE(%"class.blink::ListGrid::GridTrack"*, %"class.blink::LayoutBox"* dereferenceable(216), %"struct.blink::GridSpan"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::LayoutBox"*, align 8
  %5 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %2, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  br label %20

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %2, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 1
  %19 = load i64, i64* %18, align 8
  br label %20

20:                                               ; preds = %14, %8
  %21 = phi i64 [ %10, %8 ], [ %17, %14 ]
  %22 = phi i64 [ %13, %8 ], [ %19, %14 ]
  %23 = tail call noalias i8* @malloc(i64 80) #15
  %24 = bitcast i8* %23 to %"class.blink::ListGrid::GridCell"*
  %25 = getelementptr inbounds i8, i8* %23, i64 40
  %26 = getelementptr inbounds i8, i8* %23, i64 56
  %27 = bitcast i8* %25 to i8**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 36, i1 false) #15
  store i8* %26, i8** %27, align 8
  %28 = getelementptr inbounds i8, i8* %23, i64 48
  %29 = bitcast i8* %28 to i32*
  store i32 1, i32* %29, align 8
  %30 = getelementptr inbounds i8, i8* %23, i64 52
  %31 = bitcast i8* %30 to i32*
  store i32 0, i32* %31, align 4
  %32 = getelementptr inbounds i8, i8* %23, i64 64
  %33 = bitcast i8* %32 to i64*
  store i64 %22, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %23, i64 72
  %35 = bitcast i8* %34 to i64*
  store i64 %21, i64* %35, align 8
  %36 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 0
  %37 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %36, align 8
  %38 = icmp eq %"class.blink::ListGrid::GridCell"* %37, null
  br i1 %38, label %122, label %39

39:                                               ; preds = %20
  %40 = getelementptr inbounds i8, i8* %23, i64 32
  %41 = bitcast i8* %40 to i32*
  %42 = getelementptr inbounds i8, i8* %23, i64 16
  %43 = bitcast i8* %42 to <2 x i64>*
  %44 = bitcast i8* %23 to <2 x i64>*
  %45 = bitcast i8* %23 to <2 x i64>*
  %46 = bitcast i8* %42 to <2 x i64>*
  br label %47

47:                                               ; preds = %84, %39
  %48 = phi i32 [ %6, %39 ], [ %66, %84 ]
  %49 = phi i32 [ 0, %39 ], [ %68, %84 ]
  %50 = phi i32 [ %6, %39 ], [ %74, %84 ]
  %51 = phi %"class.blink::ListGrid::GridCell"* [ %37, %39 ], [ %86, %84 ]
  %52 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %53, %50
  br i1 %54, label %65, label %55

55:                                               ; preds = %47
  store i32 %50, i32* %52, align 8
  %56 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 2
  %57 = bitcast %"class.blink::ListGrid::GridCell"** %56 to <2 x i64>*
  %58 = load <2 x i64>, <2 x i64>* %57, align 8
  %59 = bitcast %"class.blink::ListGrid::GridCell"* %51 to <2 x i64>*
  %60 = load <2 x i64>, <2 x i64>* %59, align 8
  %61 = bitcast %"class.blink::ListGrid::GridCell"* %51 to <2 x i64>*
  store <2 x i64> %58, <2 x i64>* %61, align 8
  %62 = bitcast %"class.blink::ListGrid::GridCell"** %56 to <2 x i64>*
  store <2 x i64> %60, <2 x i64>* %62, align 8
  %63 = load i32, i32* %5, align 8
  %64 = load i32, i32* %41, align 8
  br label %65

65:                                               ; preds = %55, %47
  %66 = phi i32 [ %48, %47 ], [ %63, %55 ]
  %67 = phi i32 [ %49, %47 ], [ %64, %55 ]
  %68 = phi i32 [ %50, %47 ], [ %63, %55 ]
  %69 = icmp eq i32 %67, %68
  br i1 %69, label %73, label %70

70:                                               ; preds = %65
  store i32 %68, i32* %41, align 8
  %71 = load <2 x i64>, <2 x i64>* %43, align 8
  %72 = load <2 x i64>, <2 x i64>* %44, align 8
  store <2 x i64> %71, <2 x i64>* %45, align 8
  store <2 x i64> %72, <2 x i64>* %46, align 8
  br label %73

73:                                               ; preds = %70, %65
  %74 = phi i32 [ %68, %65 ], [ %66, %70 ]
  %75 = phi i32 [ %67, %65 ], [ %66, %70 ]
  %76 = icmp ne i32 %75, 1
  %77 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 6
  %78 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 7
  %79 = select i1 %76, i64* %77, i64* %78
  %80 = load i64, i64* %79, align 8
  %81 = select i1 %76, i64* %33, i64* %35
  %82 = load i64, i64* %81, align 8
  %83 = icmp ult i64 %80, %82
  br i1 %83, label %84, label %88

84:                                               ; preds = %73
  %85 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 1
  %86 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %85, align 8
  %87 = icmp eq %"class.blink::ListGrid::GridCell"* %86, null
  br i1 %87, label %122, label %47

88:                                               ; preds = %73
  %89 = load i32, i32* %52, align 8
  %90 = icmp eq i32 %89, %66
  br i1 %90, label %101, label %91

91:                                               ; preds = %88
  store i32 %66, i32* %52, align 8
  %92 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 2
  %93 = bitcast %"class.blink::ListGrid::GridCell"** %92 to <2 x i64>*
  %94 = load <2 x i64>, <2 x i64>* %93, align 8
  %95 = bitcast %"class.blink::ListGrid::GridCell"* %51 to <2 x i64>*
  %96 = load <2 x i64>, <2 x i64>* %95, align 8
  %97 = bitcast %"class.blink::ListGrid::GridCell"* %51 to <2 x i64>*
  store <2 x i64> %94, <2 x i64>* %97, align 8
  %98 = bitcast %"class.blink::ListGrid::GridCell"** %92 to <2 x i64>*
  store <2 x i64> %96, <2 x i64>* %98, align 8
  %99 = load i32, i32* %5, align 8
  %100 = load i32, i32* %41, align 8
  br label %101

101:                                              ; preds = %91, %88
  %102 = phi i32 [ %66, %88 ], [ %99, %91 ]
  %103 = phi i32 [ %68, %88 ], [ %100, %91 ]
  %104 = icmp eq i32 %103, %102
  br i1 %104, label %112, label %105

105:                                              ; preds = %101
  store i32 %102, i32* %41, align 8
  %106 = bitcast i8* %42 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 8
  %108 = bitcast i8* %23 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 8
  %110 = bitcast i8* %23 to <2 x i64>*
  store <2 x i64> %107, <2 x i64>* %110, align 8
  %111 = bitcast i8* %42 to <2 x i64>*
  store <2 x i64> %109, <2 x i64>* %111, align 8
  br label %112

112:                                              ; preds = %105, %101
  %113 = phi i32 [ %103, %101 ], [ %102, %105 ]
  %114 = icmp ne i32 %113, 1
  %115 = select i1 %114, i64* %77, i64* %78
  %116 = load i64, i64* %115, align 8
  %117 = select i1 %114, i64* %33, i64* %35
  %118 = load i64, i64* %117, align 8
  %119 = icmp eq i64 %116, %118
  br i1 %119, label %164, label %120

120:                                              ; preds = %112
  %121 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %51, i64 0, i32 0
  br label %124

122:                                              ; preds = %84, %20
  %123 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  br label %124

124:                                              ; preds = %122, %120
  %125 = phi %"class.blink::ListGrid::GridCell"** [ %121, %120 ], [ %123, %122 ]
  %126 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %125, align 8
  %127 = icmp eq %"class.blink::ListGrid::GridCell"* %126, null
  br i1 %127, label %128, label %143

128:                                              ; preds = %124
  %129 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %36, align 8
  %130 = icmp eq %"class.blink::ListGrid::GridCell"* %129, null
  br i1 %130, label %131, label %135

131:                                              ; preds = %128
  %132 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i8**
  store i8* %23, i8** %132, align 8
  %133 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  %134 = bitcast %"class.blink::ListGrid::GridCell"** %133 to i8**
  store i8* %23, i8** %134, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #15
  br label %161

135:                                              ; preds = %128
  %136 = bitcast %"class.blink::ListGrid::GridCell"* %129 to i8**
  store i8* %23, i8** %136, align 8
  %137 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds i8, i8* %23, i64 8
  %140 = bitcast i8* %139 to i64*
  store i64 %138, i64* %140, align 8
  %141 = bitcast i8* %23 to %"class.blink::ListGrid::GridCell"**
  store %"class.blink::ListGrid::GridCell"* null, %"class.blink::ListGrid::GridCell"** %141, align 8
  %142 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i8**
  store i8* %23, i8** %142, align 8
  br label %161

143:                                              ; preds = %124
  %144 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %126, i64 0, i32 1
  %145 = bitcast %"class.blink::ListGrid::GridCell"** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds i8, i8* %23, i64 8
  %148 = bitcast i8* %147 to i64*
  store i64 %146, i64* %148, align 8
  %149 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %144, align 8
  %150 = icmp eq %"class.blink::ListGrid::GridCell"* %149, null
  br i1 %150, label %153, label %151

151:                                              ; preds = %143
  %152 = bitcast %"class.blink::ListGrid::GridCell"* %149 to i8**
  store i8* %23, i8** %152, align 8
  br label %153

153:                                              ; preds = %151, %143
  %154 = bitcast i8* %23 to %"class.blink::ListGrid::GridCell"**
  store %"class.blink::ListGrid::GridCell"* %126, %"class.blink::ListGrid::GridCell"** %154, align 8
  %155 = bitcast %"class.blink::ListGrid::GridCell"** %144 to i8**
  store i8* %23, i8** %155, align 8
  %156 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  %157 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %156, align 8
  %158 = icmp eq %"class.blink::ListGrid::GridCell"* %157, %126
  br i1 %158, label %159, label %161

159:                                              ; preds = %153
  %160 = bitcast %"class.blink::ListGrid::GridCell"** %156 to i8**
  store i8* %23, i8** %160, align 8
  br label %161

161:                                              ; preds = %159, %153, %135, %131
  %162 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } undef, %"class.blink::ListGrid::GridCell"* %24, 0
  %163 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } %162, i8 1, 1
  br label %180

164:                                              ; preds = %112
  %165 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } undef, %"class.blink::ListGrid::GridCell"* %51, 0
  %166 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } %165, i8 0, 1
  %167 = icmp eq i8* %23, null
  br i1 %167, label %180, label %168

168:                                              ; preds = %164
  %169 = load i32, i32* %31, align 4
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %172, label %171, !prof !6

171:                                              ; preds = %168
  store i32 0, i32* %31, align 4
  br label %172

172:                                              ; preds = %171, %168
  %173 = bitcast i8* %25 to %"class.blink::LayoutBox"***
  %174 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %173, align 8
  %175 = bitcast i8* %26 to %"class.blink::LayoutBox"**
  %176 = icmp eq %"class.blink::LayoutBox"** %174, %175
  br i1 %176, label %179, label %177, !prof !5

177:                                              ; preds = %172
  %178 = bitcast i8* %25 to %"class.WTF::VectorBuffer.1366"*
  tail call void @_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1366"* %178, %"class.blink::LayoutBox"** %174) #15
  br label %179

179:                                              ; preds = %177, %172
  tail call void @free(i8* nonnull %23) #15
  br label %180

180:                                              ; preds = %161, %164, %179
  %181 = phi { %"class.blink::ListGrid::GridCell"*, i8 } [ %163, %161 ], [ %166, %164 ], [ %166, %179 ]
  %182 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %2, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  %184 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %2, i64 0, i32 1
  %185 = load i32, i32* %184, align 4
  %186 = sext i32 %185 to i64
  %187 = icmp eq i32 %183, %185
  br i1 %187, label %295, label %188

188:                                              ; preds = %180
  %189 = sext i32 %183 to i64
  %190 = extractvalue { %"class.blink::ListGrid::GridCell"*, i8 } %181, 0
  %191 = bitcast %"class.blink::LayoutBox"** %4 to i8*
  %192 = ptrtoint %"class.blink::LayoutBox"* %1 to i64
  %193 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 1
  br label %194

194:                                              ; preds = %188, %291
  %195 = phi %"class.blink::ListGrid::GridCell"* [ %190, %188 ], [ %292, %291 ]
  %196 = phi i64 [ %189, %188 ], [ %293, %291 ]
  %197 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 5
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %191) #15
  store %"class.blink::LayoutBox"* %1, %"class.blink::LayoutBox"** %4, align 8
  %198 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 5, i32 0, i32 0, i32 2
  %199 = load i32, i32* %198, align 4
  %200 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 5, i32 0, i32 0, i32 1
  %201 = load i32, i32* %200, align 8
  %202 = icmp eq i32 %199, %201
  br i1 %202, label %211, label %203, !prof !6

203:                                              ; preds = %194
  %204 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %197, i64 0, i32 0, i32 0, i32 0
  %205 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %204, align 8
  %206 = zext i32 %199 to i64
  %207 = getelementptr inbounds %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %205, i64 %206
  %208 = bitcast %"class.blink::LayoutBox"** %207 to i64*
  store i64 %192, i64* %208, align 8
  %209 = load i32, i32* %198, align 4
  %210 = add i32 %209, 1
  store i32 %210, i32* %198, align 4
  br label %212

211:                                              ; preds = %194
  call void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.1365"* %197, %"class.blink::LayoutBox"** nonnull dereferenceable(8) %4) #15
  br label %212

212:                                              ; preds = %203, %211
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %191) #15
  %213 = load i32, i32* %184, align 4
  %214 = sext i32 %213 to i64
  %215 = add nsw i64 %214, -1
  %216 = icmp eq i64 %196, %215
  br i1 %216, label %295, label %217

217:                                              ; preds = %212
  %218 = load i32, i32* %5, align 8
  %219 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 4
  %220 = load i32, i32* %219, align 8
  %221 = icmp eq i32 %220, %218
  br i1 %221, label %222, label %225

222:                                              ; preds = %217
  %223 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 1
  %224 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %223, align 8
  br label %236

225:                                              ; preds = %217
  store i32 %218, i32* %219, align 8
  %226 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 2
  %227 = bitcast %"class.blink::ListGrid::GridCell"** %226 to <2 x i64>*
  %228 = load <2 x i64>, <2 x i64>* %227, align 8
  %229 = bitcast %"class.blink::ListGrid::GridCell"* %195 to <2 x i64>*
  %230 = load <2 x i64>, <2 x i64>* %229, align 8
  %231 = bitcast %"class.blink::ListGrid::GridCell"* %195 to <2 x i64>*
  store <2 x i64> %228, <2 x i64>* %231, align 8
  %232 = bitcast %"class.blink::ListGrid::GridCell"** %226 to <2 x i64>*
  store <2 x i64> %230, <2 x i64>* %232, align 8
  %233 = load i32, i32* %5, align 8
  %234 = extractelement <2 x i64> %228, i32 1
  %235 = inttoptr i64 %234 to %"class.blink::ListGrid::GridCell"*
  br label %236

236:                                              ; preds = %222, %225
  %237 = phi %"class.blink::ListGrid::GridCell"* [ %224, %222 ], [ %235, %225 ]
  %238 = phi i32 [ %218, %222 ], [ %233, %225 ]
  %239 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %195, i64 0, i32 1
  %240 = icmp eq %"class.blink::ListGrid::GridCell"* %237, null
  br i1 %240, label %249, label %241

241:                                              ; preds = %236
  %242 = icmp eq i32 %238, 1
  %243 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %237, i64 0, i32 6
  %244 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %237, i64 0, i32 7
  %245 = select i1 %242, i64* %244, i64* %243
  %246 = load i64, i64* %245, align 8
  %247 = add i64 %196, 1
  %248 = icmp eq i64 %246, %247
  br i1 %248, label %291, label %249

249:                                              ; preds = %241, %236
  %250 = icmp eq i32 %238, 0
  br i1 %250, label %251, label %254

251:                                              ; preds = %249
  %252 = load i64, i64* %193, align 8
  %253 = add i64 %196, 1
  br label %257

254:                                              ; preds = %249
  %255 = add i64 %196, 1
  %256 = load i64, i64* %193, align 8
  br label %257

257:                                              ; preds = %254, %251
  %258 = phi i64 [ %252, %251 ], [ %255, %254 ]
  %259 = phi i64 [ %253, %251 ], [ %256, %254 ]
  %260 = call noalias i8* @malloc(i64 80) #15
  %261 = bitcast i8* %260 to %"class.blink::ListGrid::GridCell"*
  %262 = getelementptr inbounds i8, i8* %260, i64 40
  %263 = getelementptr inbounds i8, i8* %260, i64 56
  %264 = bitcast i8* %262 to i8**
  call void @llvm.memset.p0i8.i64(i8* align 8 %260, i8 0, i64 36, i1 false) #15
  store i8* %263, i8** %264, align 8
  %265 = getelementptr inbounds i8, i8* %260, i64 48
  %266 = bitcast i8* %265 to i32*
  store i32 1, i32* %266, align 8
  %267 = getelementptr inbounds i8, i8* %260, i64 52
  %268 = bitcast i8* %267 to i32*
  store i32 0, i32* %268, align 4
  %269 = getelementptr inbounds i8, i8* %260, i64 64
  %270 = bitcast i8* %269 to i64*
  store i64 %259, i64* %270, align 8
  %271 = getelementptr inbounds i8, i8* %260, i64 72
  %272 = bitcast i8* %271 to i64*
  store i64 %258, i64* %272, align 8
  %273 = call { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack11InsertAfterEPNS0_8GridCellES3_(%"class.blink::ListGrid::GridTrack"* %0, %"class.blink::ListGrid::GridCell"* %261, %"class.blink::ListGrid::GridCell"* %195)
  %274 = extractvalue { %"class.blink::ListGrid::GridCell"*, i8 } %273, 1
  %275 = and i8 %274, 1
  %276 = icmp ne i8 %275, 0
  %277 = icmp eq i8* %260, null
  %278 = or i1 %277, %276
  br i1 %278, label %291, label %279

279:                                              ; preds = %257
  %280 = load i32, i32* %268, align 4
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %283, label %282, !prof !6

282:                                              ; preds = %279
  store i32 0, i32* %268, align 4
  br label %283

283:                                              ; preds = %282, %279
  %284 = bitcast i8* %262 to %"class.blink::LayoutBox"***
  %285 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %284, align 8
  %286 = bitcast i8* %263 to %"class.blink::LayoutBox"**
  %287 = icmp eq %"class.blink::LayoutBox"** %285, %286
  br i1 %287, label %290, label %288, !prof !5

288:                                              ; preds = %283
  %289 = bitcast i8* %262 to %"class.WTF::VectorBuffer.1366"*
  call void @_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1366"* %289, %"class.blink::LayoutBox"** %285) #15
  br label %290

290:                                              ; preds = %288, %283
  call void @free(i8* nonnull %260) #15
  br label %291

291:                                              ; preds = %257, %241, %290
  %292 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %239, align 8
  %293 = add i64 %196, 1
  %294 = icmp eq i64 %293, %186
  br i1 %294, label %295, label %194

295:                                              ; preds = %212, %291, %180
  ret { %"class.blink::ListGrid::GridCell"*, i8 } %181
}

; Function Attrs: nounwind ssp uwtable
define hidden { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack11InsertAfterEPNS0_8GridCellES3_(%"class.blink::ListGrid::GridTrack"* nocapture, %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %2, i64 0, i32 4
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, %5
  br i1 %8, label %18, label %9

9:                                                ; preds = %3
  store i32 %5, i32* %6, align 8
  %10 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %2, i64 0, i32 2
  %11 = bitcast %"class.blink::ListGrid::GridCell"** %10 to <2 x i64>*
  %12 = load <2 x i64>, <2 x i64>* %11, align 8
  %13 = bitcast %"class.blink::ListGrid::GridCell"* %2 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8
  %15 = bitcast %"class.blink::ListGrid::GridCell"* %2 to <2 x i64>*
  store <2 x i64> %12, <2 x i64>* %15, align 8
  %16 = bitcast %"class.blink::ListGrid::GridCell"** %10 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %16, align 8
  %17 = load i32, i32* %4, align 8
  br label %18

18:                                               ; preds = %3, %9
  %19 = phi i32 [ %5, %3 ], [ %17, %9 ]
  %20 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 4
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, %19
  br i1 %22, label %31, label %23

23:                                               ; preds = %18
  store i32 %19, i32* %20, align 8
  %24 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 2
  %25 = bitcast %"class.blink::ListGrid::GridCell"** %24 to <2 x i64>*
  %26 = load <2 x i64>, <2 x i64>* %25, align 8
  %27 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 8
  %29 = bitcast %"class.blink::ListGrid::GridCell"* %1 to <2 x i64>*
  store <2 x i64> %26, <2 x i64>* %29, align 8
  %30 = bitcast %"class.blink::ListGrid::GridCell"** %24 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %30, align 8
  br label %31

31:                                               ; preds = %18, %23
  %32 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %2, i64 0, i32 1
  %33 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %32, align 8
  %34 = icmp eq %"class.blink::ListGrid::GridCell"* %33, null
  br i1 %34, label %50, label %35

35:                                               ; preds = %31
  %36 = icmp eq %"class.blink::ListGrid::GridCell"* %33, %1
  br i1 %36, label %82, label %37

37:                                               ; preds = %35
  %38 = load i32, i32* %4, align 8
  %39 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 4
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, %38
  br i1 %41, label %50, label %42

42:                                               ; preds = %37
  store i32 %38, i32* %39, align 8
  %43 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %33, i64 0, i32 2
  %44 = bitcast %"class.blink::ListGrid::GridCell"** %43 to <2 x i64>*
  %45 = load <2 x i64>, <2 x i64>* %44, align 8
  %46 = bitcast %"class.blink::ListGrid::GridCell"* %33 to <2 x i64>*
  %47 = load <2 x i64>, <2 x i64>* %46, align 8
  %48 = bitcast %"class.blink::ListGrid::GridCell"* %33 to <2 x i64>*
  store <2 x i64> %45, <2 x i64>* %48, align 8
  %49 = bitcast %"class.blink::ListGrid::GridCell"** %43 to <2 x i64>*
  store <2 x i64> %47, <2 x i64>* %49, align 8
  br label %50

50:                                               ; preds = %42, %37, %31
  %51 = icmp eq %"class.blink::ListGrid::GridCell"* %2, null
  br i1 %51, label %52, label %67

52:                                               ; preds = %50
  %53 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 0
  %54 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %53, align 8
  %55 = icmp eq %"class.blink::ListGrid::GridCell"* %54, null
  br i1 %55, label %56, label %60

56:                                               ; preds = %52
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %53, align 8
  %57 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %57, align 8
  %58 = bitcast %"class.blink::ListGrid::GridCell"* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 16, i1 false) #15
  %59 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %53, align 8
  br label %82

60:                                               ; preds = %52
  %61 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %54, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %61, align 8
  %62 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 1
  %65 = bitcast %"class.blink::ListGrid::GridCell"** %64 to i64*
  store i64 %63, i64* %65, align 8
  %66 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* null, %"class.blink::ListGrid::GridCell"** %66, align 8
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %53, align 8
  br label %82

67:                                               ; preds = %50
  %68 = bitcast %"class.blink::ListGrid::GridCell"** %32 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 1
  %71 = bitcast %"class.blink::ListGrid::GridCell"** %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %32, align 8
  %73 = icmp eq %"class.blink::ListGrid::GridCell"* %72, null
  br i1 %73, label %76, label %74

74:                                               ; preds = %67
  %75 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %72, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %75, align 8
  br label %76

76:                                               ; preds = %74, %67
  %77 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %1, i64 0, i32 0
  store %"class.blink::ListGrid::GridCell"* %2, %"class.blink::ListGrid::GridCell"** %77, align 8
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %32, align 8
  %78 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  %79 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %78, align 8
  %80 = icmp eq %"class.blink::ListGrid::GridCell"* %79, %2
  br i1 %80, label %81, label %82

81:                                               ; preds = %76
  store %"class.blink::ListGrid::GridCell"* %1, %"class.blink::ListGrid::GridCell"** %78, align 8
  br label %82

82:                                               ; preds = %81, %76, %60, %56, %35
  %83 = phi %"class.blink::ListGrid::GridCell"* [ %1, %35 ], [ %1, %81 ], [ %1, %76 ], [ %59, %56 ], [ %1, %60 ]
  %84 = phi i8 [ 0, %35 ], [ 1, %81 ], [ 1, %76 ], [ 1, %56 ], [ 1, %60 ]
  %85 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } undef, %"class.blink::ListGrid::GridCell"* %83, 0
  %86 = insertvalue { %"class.blink::ListGrid::GridCell"*, i8 } %85, i8 %84, 1
  ret { %"class.blink::ListGrid::GridCell"*, i8 } %86
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ListGrid9GridTrackD2Ev(%"class.blink::ListGrid::GridTrack"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %14, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 0
  %7 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %6, align 8
  %8 = icmp eq %"class.blink::ListGrid::GridCell"* %7, null
  br i1 %8, label %90, label %9

9:                                                ; preds = %5
  %10 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to %"class.WTF::DoublyLinkedListNode.1363"**
  %11 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i64*
  %12 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %0, i64 0, i32 0, i32 1
  %13 = bitcast %"class.blink::ListGrid::GridCell"** %12 to i64*
  br label %16

14:                                               ; preds = %1
  %15 = bitcast %"class.blink::ListGrid::GridTrack"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 16, i1 false) #15
  br label %90

16:                                               ; preds = %9, %87
  %17 = phi %"class.blink::ListGrid::GridCell"* [ %7, %9 ], [ %88, %87 ]
  %18 = bitcast %"class.blink::ListGrid::GridCell"* %17 to %"class.WTF::DoublyLinkedListNode.1363"*
  %19 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %17, i64 0, i32 4
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %16
  store i32 0, i32* %19, align 8
  %23 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %17, i64 0, i32 2
  %24 = bitcast %"class.blink::ListGrid::GridCell"** %23 to <2 x i64>*
  %25 = load <2 x i64>, <2 x i64>* %24, align 8
  %26 = bitcast %"class.blink::ListGrid::GridCell"* %17 to <2 x i64>*
  %27 = load <2 x i64>, <2 x i64>* %26, align 8
  %28 = bitcast %"class.blink::ListGrid::GridCell"* %17 to <2 x i64>*
  store <2 x i64> %25, <2 x i64>* %28, align 8
  %29 = bitcast %"class.blink::ListGrid::GridCell"** %23 to <2 x i64>*
  store <2 x i64> %27, <2 x i64>* %29, align 8
  %30 = load %"class.WTF::DoublyLinkedListNode.1363"*, %"class.WTF::DoublyLinkedListNode.1363"** %10, align 8
  %31 = bitcast %"class.WTF::DoublyLinkedListNode.1363"* %30 to %"class.blink::ListGrid::GridCell"*
  br label %32

32:                                               ; preds = %16, %22
  %33 = phi %"class.blink::ListGrid::GridCell"* [ %17, %16 ], [ %31, %22 ]
  %34 = phi %"class.WTF::DoublyLinkedListNode.1363"* [ %18, %16 ], [ %30, %22 ]
  %35 = getelementptr inbounds %"class.WTF::DoublyLinkedListNode.1363", %"class.WTF::DoublyLinkedListNode.1363"* %34, i64 8
  %36 = bitcast %"class.WTF::DoublyLinkedListNode.1363"* %35 to %"class.blink::ListGrid::GridCell"**
  %37 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %36, align 8
  %38 = icmp eq %"class.blink::ListGrid::GridCell"* %37, null
  br i1 %38, label %52, label %39

39:                                               ; preds = %32
  %40 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %37, i64 0, i32 4
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %39
  store i32 0, i32* %40, align 8
  %44 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %37, i64 0, i32 2
  %45 = bitcast %"class.blink::ListGrid::GridCell"** %44 to <2 x i64>*
  %46 = load <2 x i64>, <2 x i64>* %45, align 8
  %47 = bitcast %"class.blink::ListGrid::GridCell"* %37 to <2 x i64>*
  %48 = load <2 x i64>, <2 x i64>* %47, align 8
  %49 = bitcast %"class.blink::ListGrid::GridCell"* %37 to <2 x i64>*
  store <2 x i64> %46, <2 x i64>* %49, align 8
  %50 = bitcast %"class.blink::ListGrid::GridCell"** %44 to <2 x i64>*
  store <2 x i64> %48, <2 x i64>* %50, align 8
  %51 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %6, align 8
  br label %52

52:                                               ; preds = %43, %39, %32
  %53 = phi %"class.blink::ListGrid::GridCell"* [ %51, %43 ], [ %33, %39 ], [ %33, %32 ]
  %54 = icmp eq %"class.blink::ListGrid::GridCell"* %53, null
  br i1 %54, label %87, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %53, i64 0, i32 0
  %57 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %56, align 8
  %58 = icmp eq %"class.blink::ListGrid::GridCell"* %57, null
  %59 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %53, i64 0, i32 1
  %60 = bitcast %"class.blink::ListGrid::GridCell"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %57, i64 0, i32 1
  %63 = bitcast %"class.blink::ListGrid::GridCell"** %62 to i64*
  %64 = select i1 %58, i64* %11, i64* %63
  store i64 %61, i64* %64, align 8
  %65 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %59, align 8
  %66 = icmp eq %"class.blink::ListGrid::GridCell"* %65, null
  %67 = bitcast %"class.blink::ListGrid::GridCell"* %53 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.blink::ListGrid::GridCell"* %65 to i64*
  %70 = select i1 %66, i64* %13, i64* %69
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %53, i64 0, i32 5
  %72 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %53, i64 0, i32 5, i32 0, i32 0, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %76, label %75, !prof !6

75:                                               ; preds = %55
  store i32 0, i32* %72, align 4
  br label %76

76:                                               ; preds = %75, %55
  %77 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %71, i64 0, i32 0, i32 0, i32 0
  %78 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %77, align 8
  %79 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %53, i64 0, i32 5, i32 0, i32 1, i64 0
  %80 = bitcast i8* %79 to %"class.blink::LayoutBox"**
  %81 = icmp eq %"class.blink::LayoutBox"** %78, %80
  br i1 %81, label %84, label %82, !prof !5

82:                                               ; preds = %76
  %83 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %71, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1366"* %83, %"class.blink::LayoutBox"** %78) #15
  br label %84

84:                                               ; preds = %76, %82
  %85 = bitcast %"class.blink::ListGrid::GridCell"* %53 to i8*
  tail call void @free(i8* %85) #15
  %86 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %6, align 8
  br label %87

87:                                               ; preds = %52, %84
  %88 = phi %"class.blink::ListGrid::GridCell"* [ %53, %52 ], [ %86, %84 ]
  %89 = icmp eq %"class.blink::ListGrid::GridCell"* %88, null
  br i1 %89, label %90, label %16

90:                                               ; preds = %87, %5, %14
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden dereferenceable(24) %"class.WTF::Vector.1365"* @_ZNK5blink8ListGrid4CellEmm(%"class.blink::ListGrid"* nocapture readonly, i64, i64) unnamed_addr #7 align 2 {
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZNK5blink8ListGrid4CellEmmE14s_empty_vector to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %10, !prof !13

6:                                                ; preds = %3
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZNK5blink8ListGrid4CellEmmE14s_empty_vector) #15
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6
  store i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector, i64 0, i32 0, i32 0, i64 16), i8** bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to i8**), align 8
  store i32 1, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector, i64 0, i32 0, i32 0, i64 8) to i32*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.WTF::StaticSingleton", %"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector, i64 0, i32 0, i32 0, i64 12) to i32*), align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZNK5blink8ListGrid4CellEmmE14s_empty_vector) #15
  br label %10

10:                                               ; preds = %6, %9, %3
  %11 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 4, i32 0
  %12 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %11, align 8
  %13 = icmp eq %"class.blink::ListGrid::GridTrack"* %12, null
  br i1 %13, label %52, label %14

14:                                               ; preds = %10, %48
  %15 = phi %"class.blink::ListGrid::GridTrack"* [ %50, %48 ], [ %12, %10 ]
  %16 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %15, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, %1
  br i1 %18, label %19, label %46

19:                                               ; preds = %14
  %20 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %15, i64 0, i32 2
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 1
  %23 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %15, i64 0, i32 0, i32 0
  %24 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %23, align 8
  %25 = icmp eq %"class.blink::ListGrid::GridCell"* %24, null
  br i1 %25, label %52, label %26

26:                                               ; preds = %19, %35
  %27 = phi %"class.blink::ListGrid::GridCell"* [ %42, %35 ], [ %24, %19 ]
  %28 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %27, i64 0, i32 6
  %29 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %27, i64 0, i32 7
  %30 = select i1 %22, i64* %29, i64* %28
  %31 = load i64, i64* %30, align 8
  %32 = icmp eq i64 %31, %2
  br i1 %32, label %44, label %33

33:                                               ; preds = %26
  %34 = icmp ugt i64 %31, %2
  br i1 %34, label %52, label %35

35:                                               ; preds = %33
  %36 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %27, i64 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, %21
  %39 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %27, i64 0, i32 1
  %40 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %27, i64 0, i32 3
  %41 = select i1 %38, %"class.blink::ListGrid::GridCell"** %39, %"class.blink::ListGrid::GridCell"** %40
  %42 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %41, align 8
  %43 = icmp eq %"class.blink::ListGrid::GridCell"* %42, null
  br i1 %43, label %52, label %26

44:                                               ; preds = %26
  %45 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %27, i64 0, i32 5
  br label %52

46:                                               ; preds = %14
  %47 = icmp ugt i64 %17, %1
  br i1 %47, label %52, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %15, i64 0, i32 4
  %50 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %49, align 8
  %51 = icmp eq %"class.blink::ListGrid::GridTrack"* %50, null
  br i1 %51, label %52, label %14

52:                                               ; preds = %48, %46, %35, %33, %10, %19, %44
  %53 = phi %"class.WTF::Vector.1365"* [ %45, %44 ], [ bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to %"class.WTF::Vector.1365"*), %19 ], [ bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to %"class.WTF::Vector.1365"*), %10 ], [ bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to %"class.WTF::Vector.1365"*), %33 ], [ bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to %"class.WTF::Vector.1365"*), %35 ], [ bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to %"class.WTF::Vector.1365"*), %46 ], [ bitcast (%"class.WTF::StaticSingleton"* @_ZZNK5blink8ListGrid4CellEmmE14s_empty_vector to %"class.WTF::Vector.1365"*), %48 ]
  ret %"class.WTF::Vector.1365"* %53
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ListGrid::GridTrack"* @_ZN5blink8ListGrid12InsertTracksERN3WTF16DoublyLinkedListINS0_9GridTrackEPS3_EERKNS_8GridSpanENS_24GridTrackSizingDirectionE(%"class.blink::ListGrid"* nocapture readnone, %"class.WTF::DoublyLinkedList"* nocapture dereferenceable(16), %"struct.blink::GridSpan"* nocapture readonly dereferenceable(12), i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %2, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %2, i64 0, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = sext i32 %9 to i64
  %11 = tail call noalias i8* @malloc(i64 48) #15
  %12 = bitcast i8* %11 to %"class.blink::ListGrid::GridTrack"*
  %13 = getelementptr inbounds i8, i8* %11, i64 32
  %14 = bitcast i8* %13 to %"class.blink::ListGrid::GridTrack"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 16, i1 false) #15
  %15 = getelementptr inbounds i8, i8* %11, i64 16
  %16 = bitcast i8* %15 to i64*
  store i64 %7, i64* %16, align 8
  %17 = getelementptr inbounds i8, i8* %11, i64 24
  %18 = bitcast i8* %17 to i32*
  store i32 %3, i32* %18, align 8
  %19 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %1, i64 0, i32 0
  %20 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %19, align 8
  %21 = icmp eq %"class.blink::ListGrid::GridTrack"* %20, null
  br i1 %21, label %35, label %22

22:                                               ; preds = %4, %27
  %23 = phi %"class.blink::ListGrid::GridTrack"* [ %29, %27 ], [ %20, %4 ]
  %24 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %23, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp ult i64 %25, %7
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  %28 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %23, i64 0, i32 4
  %29 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %28, align 8
  %30 = icmp eq %"class.blink::ListGrid::GridTrack"* %29, null
  br i1 %30, label %35, label %22

31:                                               ; preds = %22
  %32 = icmp eq i64 %25, %7
  br i1 %32, label %72, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %23, i64 0, i32 3
  br label %37

35:                                               ; preds = %27, %4
  %36 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %1, i64 0, i32 1
  br label %37

37:                                               ; preds = %35, %33
  %38 = phi %"class.blink::ListGrid::GridTrack"** [ %34, %33 ], [ %36, %35 ]
  %39 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %38, align 8
  %40 = icmp eq %"class.blink::ListGrid::GridTrack"* %39, null
  br i1 %40, label %41, label %54

41:                                               ; preds = %37
  br i1 %21, label %42, label %46

42:                                               ; preds = %41
  %43 = bitcast %"class.WTF::DoublyLinkedList"* %1 to i8**
  store i8* %11, i8** %43, align 8
  %44 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %1, i64 0, i32 1
  %45 = bitcast %"class.blink::ListGrid::GridTrack"** %44 to i8**
  store i8* %11, i8** %45, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #15
  br label %75

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %20, i64 0, i32 3
  %48 = bitcast %"class.blink::ListGrid::GridTrack"** %47 to i8**
  store i8* %11, i8** %48, align 8
  %49 = bitcast %"class.WTF::DoublyLinkedList"* %1 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds i8, i8* %11, i64 40
  %52 = bitcast i8* %51 to i64*
  store i64 %50, i64* %52, align 8
  store %"class.blink::ListGrid::GridTrack"* null, %"class.blink::ListGrid::GridTrack"** %14, align 8
  %53 = bitcast %"class.WTF::DoublyLinkedList"* %1 to i8**
  store i8* %11, i8** %53, align 8
  br label %75

54:                                               ; preds = %37
  %55 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %39, i64 0, i32 4
  %56 = bitcast %"class.blink::ListGrid::GridTrack"** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds i8, i8* %11, i64 40
  %59 = bitcast i8* %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %55, align 8
  %61 = icmp eq %"class.blink::ListGrid::GridTrack"* %60, null
  br i1 %61, label %65, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %60, i64 0, i32 3
  %64 = bitcast %"class.blink::ListGrid::GridTrack"** %63 to i8**
  store i8* %11, i8** %64, align 8
  br label %65

65:                                               ; preds = %62, %54
  store %"class.blink::ListGrid::GridTrack"* %39, %"class.blink::ListGrid::GridTrack"** %14, align 8
  %66 = bitcast %"class.blink::ListGrid::GridTrack"** %55 to i8**
  store i8* %11, i8** %66, align 8
  %67 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %1, i64 0, i32 1
  %68 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %67, align 8
  %69 = icmp eq %"class.blink::ListGrid::GridTrack"* %68, %39
  br i1 %69, label %70, label %75

70:                                               ; preds = %65
  %71 = bitcast %"class.blink::ListGrid::GridTrack"** %67 to i8**
  store i8* %11, i8** %71, align 8
  br label %75

72:                                               ; preds = %31
  %73 = icmp eq i8* %11, null
  br i1 %73, label %75, label %74

74:                                               ; preds = %72
  tail call void @_ZN5blink8ListGrid9GridTrackD2Ev(%"class.blink::ListGrid::GridTrack"* nonnull %12) #15
  tail call void @free(i8* nonnull %11) #15
  br label %75

75:                                               ; preds = %42, %46, %65, %70, %72, %74
  %76 = phi %"class.blink::ListGrid::GridTrack"* [ %23, %72 ], [ %23, %74 ], [ %12, %70 ], [ %12, %65 ], [ %12, %42 ], [ %12, %46 ]
  %77 = add nsw i64 %7, 1
  %78 = icmp ne %"class.blink::ListGrid::GridTrack"* %76, null
  %79 = icmp ult i64 %77, %10
  %80 = and i1 %78, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %75
  %82 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %1, i64 0, i32 1
  %83 = bitcast %"class.blink::ListGrid::GridTrack"** %82 to i8**
  br label %85

84:                                               ; preds = %119, %75
  ret %"class.blink::ListGrid::GridTrack"* %76

85:                                               ; preds = %81, %119
  %86 = phi i64 [ %77, %81 ], [ %121, %119 ]
  %87 = phi %"class.blink::ListGrid::GridTrack"* [ %76, %81 ], [ %120, %119 ]
  %88 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %87, i64 0, i32 4
  %89 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %88, align 8
  %90 = icmp eq %"class.blink::ListGrid::GridTrack"* %89, null
  br i1 %90, label %95, label %91

91:                                               ; preds = %85
  %92 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %89, i64 0, i32 1
  %93 = load i64, i64* %92, align 8
  %94 = icmp ult i64 %86, %93
  br i1 %94, label %95, label %119

95:                                               ; preds = %91, %85
  %96 = tail call noalias i8* @malloc(i64 48) #15
  %97 = getelementptr inbounds i8, i8* %96, i64 32
  %98 = bitcast i8* %97 to %"class.blink::ListGrid::GridTrack"**
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 16, i1 false) #15
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 16, i1 false) #15
  %99 = getelementptr inbounds i8, i8* %96, i64 16
  %100 = bitcast i8* %99 to i64*
  store i64 %86, i64* %100, align 8
  %101 = getelementptr inbounds i8, i8* %96, i64 24
  %102 = bitcast i8* %101 to i32*
  store i32 %3, i32* %102, align 8
  %103 = bitcast %"class.blink::ListGrid::GridTrack"** %88 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds i8, i8* %96, i64 40
  %106 = bitcast i8* %105 to i64*
  store i64 %104, i64* %106, align 8
  %107 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %88, align 8
  %108 = icmp eq %"class.blink::ListGrid::GridTrack"* %107, null
  br i1 %108, label %112, label %109

109:                                              ; preds = %95
  %110 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %107, i64 0, i32 3
  %111 = bitcast %"class.blink::ListGrid::GridTrack"** %110 to i8**
  store i8* %96, i8** %111, align 8
  br label %112

112:                                              ; preds = %109, %95
  store %"class.blink::ListGrid::GridTrack"* %87, %"class.blink::ListGrid::GridTrack"** %98, align 8
  %113 = bitcast %"class.blink::ListGrid::GridTrack"** %88 to i8**
  store i8* %96, i8** %113, align 8
  %114 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %82, align 8
  %115 = icmp eq %"class.blink::ListGrid::GridTrack"* %114, %87
  %116 = bitcast i8* %96 to %"class.blink::ListGrid::GridTrack"*
  br i1 %115, label %117, label %119

117:                                              ; preds = %112
  store i8* %96, i8** %83, align 8
  %118 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %88, align 8
  br label %119

119:                                              ; preds = %117, %112, %91
  %120 = phi %"class.blink::ListGrid::GridTrack"* [ %118, %117 ], [ %116, %112 ], [ %89, %91 ]
  %121 = add nuw i64 %86, 1
  %122 = icmp ne %"class.blink::ListGrid::GridTrack"* %120, null
  %123 = icmp ult i64 %121, %10
  %124 = and i1 %122, %123
  br i1 %124, label %85, label %84
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ListGrid6InsertERNS_9LayoutBoxERKNS_8GridAreaE(%"class.blink::ListGrid"*, %"class.blink::LayoutBox"* dereferenceable(216), %"struct.blink::GridArea"* nocapture readonly dereferenceable(24)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::LayoutBox"*, align 8
  %5 = alloca %"struct.blink::GridArea", align 8
  %6 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %2, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %2, i64 0, i32 1, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %2, i64 0, i32 0
  %11 = getelementptr inbounds %"struct.blink::GridArea", %"struct.blink::GridArea"* %2, i64 0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = icmp ult i64 %15, %9
  %17 = select i1 %16, i64 %9, i64 %15
  store i64 %17, i64* %14, align 8
  %18 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 2
  %19 = load i64, i64* %18, align 8
  %20 = icmp ult i64 %19, %13
  %21 = select i1 %20, i64 %13, i64 %19
  store i64 %21, i64* %18, align 8
  %22 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 4
  %23 = tail call %"class.blink::ListGrid::GridTrack"* @_ZN5blink8ListGrid12InsertTracksERN3WTF16DoublyLinkedListINS0_9GridTrackEPS3_EERKNS_8GridSpanENS_24GridTrackSizingDirectionE(%"class.blink::ListGrid"* undef, %"class.WTF::DoublyLinkedList"* dereferenceable(16) %22, %"struct.blink::GridSpan"* dereferenceable(12) %6, i32 1)
  %24 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 3
  %25 = tail call %"class.blink::ListGrid::GridTrack"* @_ZN5blink8ListGrid12InsertTracksERN3WTF16DoublyLinkedListINS0_9GridTrackEPS3_EERKNS_8GridSpanENS_24GridTrackSizingDirectionE(%"class.blink::ListGrid"* undef, %"class.WTF::DoublyLinkedList"* dereferenceable(16) %24, %"struct.blink::GridSpan"* dereferenceable(12) %10, i32 0)
  %26 = getelementptr inbounds %"struct.blink::GridSpan", %"struct.blink::GridSpan"* %6, i64 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = load i32, i32* %7, align 4
  %29 = sext i32 %28 to i64
  %30 = icmp eq i32 %27, %28
  br i1 %30, label %34, label %31

31:                                               ; preds = %3
  %32 = sext i32 %27 to i64
  %33 = icmp eq %"class.blink::ListGrid::GridTrack"* %25, null
  br label %48

34:                                               ; preds = %90, %3
  %35 = bitcast %"struct.blink::GridArea"* %2 to i8*
  %36 = bitcast %"struct.blink::GridArea"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %36, i8* align 4 %35, i64 24, i1 false)
  %37 = bitcast %"class.blink::LayoutBox"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #15
  store %"class.blink::LayoutBox"* %1, %"class.blink::LayoutBox"** %4, align 8
  %38 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 0, i32 8, i32 0
  %39 = call { %"struct.WTF::KeyValuePair.908"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EES4_RS6_EENS_18HashTableAddResultISH_S7_EEOT0_OT1_(%"class.WTF::HashTable.905"* %38, %"class.blink::LayoutBox"** nonnull dereferenceable(8) %4, %"struct.blink::GridArea"* nonnull dereferenceable(24) %5) #15
  %40 = extractvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %39, 1
  %41 = and i8 %40, 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = extractvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %39, 0
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %44, i64 0, i32 1
  %46 = bitcast %"struct.blink::GridArea"* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* nonnull align 8 %36, i64 24, i1 false) #15
  br label %47

47:                                               ; preds = %34, %43
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #15
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36)
  ret void

48:                                               ; preds = %31, %90
  %49 = phi %"class.blink::ListGrid::GridCell"* [ null, %31 ], [ %53, %90 ]
  %50 = phi %"class.blink::ListGrid::GridTrack"* [ %23, %31 ], [ %92, %90 ]
  %51 = phi i64 [ %32, %31 ], [ %93, %90 ]
  %52 = tail call { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack6InsertERNS_9LayoutBoxERKNS_8GridSpanE(%"class.blink::ListGrid::GridTrack"* %50, %"class.blink::LayoutBox"* dereferenceable(216) %1, %"struct.blink::GridSpan"* dereferenceable(12) %10)
  %53 = extractvalue { %"class.blink::ListGrid::GridCell"*, i8 } %52, 0
  br i1 %33, label %90, label %54

54:                                               ; preds = %48, %78
  %55 = phi %"class.blink::ListGrid::GridCell"* [ %79, %78 ], [ %49, %48 ]
  %56 = phi %"class.blink::ListGrid::GridTrack"* [ %88, %78 ], [ %25, %48 ]
  %57 = phi %"class.blink::ListGrid::GridCell"* [ %86, %78 ], [ %53, %48 ]
  %58 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %56, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = load i32, i32* %11, align 4
  %61 = sext i32 %60 to i64
  %62 = icmp ult i64 %59, %61
  br i1 %62, label %63, label %90

63:                                               ; preds = %54
  %64 = load i32, i32* %26, align 4
  %65 = sext i32 %64 to i64
  %66 = icmp eq i64 %51, %65
  br i1 %66, label %67, label %69

67:                                               ; preds = %63
  %68 = tail call { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack6InsertEPNS0_8GridCellE(%"class.blink::ListGrid::GridTrack"* nonnull %56, %"class.blink::ListGrid::GridCell"* %57)
  br label %78

69:                                               ; preds = %63
  %70 = tail call { %"class.blink::ListGrid::GridCell"*, i8 } @_ZN5blink8ListGrid9GridTrack11InsertAfterEPNS0_8GridCellES3_(%"class.blink::ListGrid::GridTrack"* nonnull %56, %"class.blink::ListGrid::GridCell"* %57, %"class.blink::ListGrid::GridCell"* %55)
  %71 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %55, i64 0, i32 4
  %72 = load i32, i32* %71, align 8
  %73 = icmp eq i32 %72, 1
  %74 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %55, i64 0, i32 1
  %75 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %55, i64 0, i32 3
  %76 = select i1 %73, %"class.blink::ListGrid::GridCell"** %74, %"class.blink::ListGrid::GridCell"** %75
  %77 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %76, align 8
  br label %78

78:                                               ; preds = %69, %67
  %79 = phi %"class.blink::ListGrid::GridCell"* [ %55, %67 ], [ %77, %69 ]
  %80 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %57, i64 0, i32 4
  %81 = load i32, i32* %80, align 8
  %82 = icmp eq i32 %81, 1
  %83 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %57, i64 0, i32 1
  %84 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %57, i64 0, i32 3
  %85 = select i1 %82, %"class.blink::ListGrid::GridCell"** %83, %"class.blink::ListGrid::GridCell"** %84
  %86 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %85, align 8
  %87 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %56, i64 0, i32 4
  %88 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %87, align 8
  %89 = icmp eq %"class.blink::ListGrid::GridTrack"* %88, null
  br i1 %89, label %90, label %54

90:                                               ; preds = %54, %78, %48
  %91 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %50, i64 0, i32 4
  %92 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %91, align 8
  %93 = add i64 %51, 1
  %94 = icmp eq i64 %93, %29
  br i1 %94, label %34, label %48
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink8ListGrid14EnsureGridSizeEmm(%"class.blink::ListGrid"* nocapture, i64, i64) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, %1
  %7 = select i1 %6, i64 %1, i64 %5
  store i64 %7, i64* %4, align 8
  %8 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 2
  %9 = load i64, i64* %8, align 8
  %10 = icmp ult i64 %9, %2
  %11 = select i1 %10, i64 %2, i64 %9
  store i64 %11, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ListGrid22ClearGridDataStructureEv(%"class.blink::ListGrid"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 4
  %4 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %3, i64 0, i32 0
  %5 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %4, align 8
  %7 = icmp eq %"class.blink::ListGrid::GridTrack"* %6, null
  br i1 %7, label %11, label %8

8:                                                ; preds = %1
  %9 = bitcast %"class.WTF::DoublyLinkedList"* %3 to i64*
  %10 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 4, i32 1
  br label %19

11:                                               ; preds = %19, %1
  %12 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 3
  %13 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %12, i64 0, i32 0
  %14 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %13, align 8
  %15 = icmp eq %"class.blink::ListGrid::GridTrack"* %14, null
  br i1 %15, label %61, label %16

16:                                               ; preds = %11
  %17 = bitcast %"class.WTF::DoublyLinkedList"* %12 to i64*
  %18 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 3, i32 1
  br label %40

19:                                               ; preds = %8, %19
  %20 = phi %"class.blink::ListGrid::GridTrack"* [ %6, %8 ], [ %38, %19 ]
  %21 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %20, i64 0, i32 3
  %22 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %21, align 8
  %23 = icmp eq %"class.blink::ListGrid::GridTrack"* %22, null
  %24 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %20, i64 0, i32 4
  %25 = bitcast %"class.blink::ListGrid::GridTrack"** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %22, i64 0, i32 4
  %28 = bitcast %"class.blink::ListGrid::GridTrack"** %27 to i64*
  %29 = select i1 %23, i64* %9, i64* %28
  store i64 %26, i64* %29, align 8
  %30 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %24, align 8
  %31 = icmp eq %"class.blink::ListGrid::GridTrack"* %30, null
  %32 = bitcast %"class.blink::ListGrid::GridTrack"** %21 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %30, i64 0, i32 3
  %35 = select i1 %31, %"class.blink::ListGrid::GridTrack"** %10, %"class.blink::ListGrid::GridTrack"** %34
  %36 = bitcast %"class.blink::ListGrid::GridTrack"** %35 to i64*
  store i64 %33, i64* %36, align 8
  tail call void @_ZN5blink8ListGrid9GridTrackD2Ev(%"class.blink::ListGrid::GridTrack"* nonnull %20) #15
  %37 = bitcast %"class.blink::ListGrid::GridTrack"* %20 to i8*
  tail call void @free(i8* %37) #15
  %38 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %4, align 8
  %39 = icmp eq %"class.blink::ListGrid::GridTrack"* %38, null
  br i1 %39, label %11, label %19

40:                                               ; preds = %16, %40
  %41 = phi %"class.blink::ListGrid::GridTrack"* [ %14, %16 ], [ %59, %40 ]
  %42 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %41, i64 0, i32 3
  %43 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %42, align 8
  %44 = icmp eq %"class.blink::ListGrid::GridTrack"* %43, null
  %45 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %41, i64 0, i32 4
  %46 = bitcast %"class.blink::ListGrid::GridTrack"** %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %43, i64 0, i32 4
  %49 = bitcast %"class.blink::ListGrid::GridTrack"** %48 to i64*
  %50 = select i1 %44, i64* %17, i64* %49
  store i64 %47, i64* %50, align 8
  %51 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %45, align 8
  %52 = icmp eq %"class.blink::ListGrid::GridTrack"* %51, null
  %53 = bitcast %"class.blink::ListGrid::GridTrack"** %42 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %51, i64 0, i32 3
  %56 = select i1 %52, %"class.blink::ListGrid::GridTrack"** %18, %"class.blink::ListGrid::GridTrack"** %55
  %57 = bitcast %"class.blink::ListGrid::GridTrack"** %56 to i64*
  store i64 %54, i64* %57, align 8
  tail call void @_ZN5blink8ListGrid9GridTrackD2Ev(%"class.blink::ListGrid::GridTrack"* nonnull %41) #15
  %58 = bitcast %"class.blink::ListGrid::GridTrack"* %41 to i8*
  tail call void @free(i8* %58) #15
  %59 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %13, align 8
  %60 = icmp eq %"class.blink::ListGrid::GridTrack"* %59, null
  br i1 %60, label %61, label %40

61:                                               ; preds = %40, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ListGridD2Ev(%"class.blink::ListGrid"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8ListGridE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  tail call void @_ZN5blink8ListGrid22ClearGridDataStructureEv(%"class.blink::ListGrid"* %0)
  %3 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 0
  tail call void @_ZN5blink4GridD2Ev(%"class.blink::Grid"* %3) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink8ListGridD0Ev(%"class.blink::ListGrid"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink8ListGridE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  tail call void @_ZN5blink8ListGrid22ClearGridDataStructureEv(%"class.blink::ListGrid"* %0) #15
  %3 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 0
  tail call void @_ZN5blink4GridD2Ev(%"class.blink::Grid"* %3) #15
  %4 = bitcast %"class.blink::ListGrid"* %0 to i8*
  tail call void @free(i8* %4) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::Grid::GridIterator"* @_ZNK5blink8ListGrid14CreateIteratorENS_24GridTrackSizingDirectionEmm(%"class.blink::ListGrid"*, i32, i64, i64) unnamed_addr #0 align 2 {
  %5 = tail call noalias i8* @malloc(i64 56) #15
  %6 = bitcast i8* %5 to i32 (...)***
  %7 = getelementptr inbounds i8, i8* %5, i64 8
  %8 = bitcast i8* %7 to i32*
  store i32 %1, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %5, i64 16
  %10 = bitcast i8* %9 to i64*
  %11 = icmp eq i32 %1, 0
  %12 = select i1 %11, i64 %3, i64 %2
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 24
  %14 = bitcast i8* %13 to i64*
  %15 = select i1 %11, i64 %2, i64 %3
  store i64 %15, i64* %14, align 8
  %16 = getelementptr inbounds i8, i8* %5, i64 32
  %17 = bitcast i8* %16 to i64*
  store i64 0, i64* %17, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16ListGridIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %18 = getelementptr inbounds i8, i8* %5, i64 40
  %19 = bitcast i8* %18 to %"class.blink::ListGrid"**
  store %"class.blink::ListGrid"* %0, %"class.blink::ListGrid"** %19, align 8
  %20 = getelementptr inbounds i8, i8* %5, i64 48
  %21 = bitcast i8* %20 to %"class.blink::ListGrid::GridCell"**
  store %"class.blink::ListGrid::GridCell"* null, %"class.blink::ListGrid::GridCell"** %21, align 8
  %22 = bitcast i8* %5 to %"class.blink::Grid::GridIterator"*
  ret %"class.blink::Grid::GridIterator"* %22
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink16ListGridIteratorC2ERKNS_8ListGridENS_24GridTrackSizingDirectionEmm(%"class.blink::ListGridIterator"* nocapture, %"class.blink::ListGrid"* dereferenceable(216), i32, i64, i64) unnamed_addr #3 align 2 {
  %6 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 1
  store i32 %2, i32* %7, align 8
  %8 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 2
  %9 = icmp eq i32 %2, 0
  %10 = select i1 %9, i64 %4, i64 %3
  store i64 %10, i64* %8, align 8
  %11 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 3
  %12 = select i1 %9, i64 %3, i64 %4
  store i64 %12, i64* %11, align 8
  %13 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 4
  store i64 0, i64* %13, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN5blink16ListGridIteratorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8
  %14 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 1
  store %"class.blink::ListGrid"* %1, %"class.blink::ListGrid"** %14, align 8
  %15 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 2
  store %"class.blink::ListGrid::GridCell"* null, %"class.blink::ListGrid::GridCell"** %15, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::LayoutBox"* @_ZN5blink16ListGridIterator12NextGridItemEv(%"class.blink::ListGridIterator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 1
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  %5 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 2
  %6 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %5, align 8
  %7 = icmp eq %"class.blink::ListGrid::GridCell"* %6, null
  br i1 %7, label %8, label %36

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 1
  %10 = load %"class.blink::ListGrid"*, %"class.blink::ListGrid"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %10, i64 0, i32 3, i32 0
  %12 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %10, i64 0, i32 4, i32 0
  %13 = select i1 %4, %"class.blink::ListGrid::GridTrack"** %11, %"class.blink::ListGrid::GridTrack"** %12
  %14 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 3
  %15 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 2
  %16 = select i1 %4, i64* %14, i64* %15
  %17 = load i64, i64* %16, align 8
  %18 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %13, align 8
  %19 = icmp eq %"class.blink::ListGrid::GridTrack"* %18, null
  br i1 %19, label %80, label %20

20:                                               ; preds = %8, %25
  %21 = phi %"class.blink::ListGrid::GridTrack"* [ %27, %25 ], [ %18, %8 ]
  %22 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %21, i64 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, %17
  br i1 %24, label %29, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %21, i64 0, i32 4
  %27 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %26, align 8
  %28 = icmp eq %"class.blink::ListGrid::GridTrack"* %27, null
  br i1 %28, label %80, label %20

29:                                               ; preds = %20
  %30 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 4
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %21, i64 0, i32 0, i32 0
  %32 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %31, align 8
  store %"class.blink::ListGrid::GridCell"* %32, %"class.blink::ListGrid::GridCell"** %5, align 8
  %33 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %32, i64 0, i32 5
  store i64 1, i64* %30, align 8
  %34 = tail call dereferenceable(8) %"class.blink::LayoutBox"** @_ZNK3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1365"* %33, i32 0) #15
  %35 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %34, align 8
  br label %80

36:                                               ; preds = %1
  %37 = zext i1 %4 to i32
  %38 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 4
  %39 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 1
  %40 = bitcast %"class.blink::ListGrid"** %39 to %"class.blink::Grid"**
  br label %41

41:                                               ; preds = %66, %36
  %42 = phi %"class.blink::ListGrid::GridCell"* [ %74, %66 ], [ %6, %36 ]
  %43 = load i64, i64* %38, align 8
  %44 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %42, i64 0, i32 5, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = zext i32 %45 to i64
  %47 = icmp ult i64 %43, %46
  br i1 %47, label %48, label %53

48:                                               ; preds = %41
  %49 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %42, i64 0, i32 5
  %50 = add nuw i64 %43, 1
  store i64 %50, i64* %38, align 8
  %51 = trunc i64 %43 to i32
  %52 = tail call dereferenceable(8) %"class.blink::LayoutBox"** @_ZNK3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1365"* %49, i32 %51) #15
  br label %66

53:                                               ; preds = %41
  store i64 0, i64* %38, align 8
  %54 = load i32, i32* %2, align 8
  %55 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %42, i64 0, i32 4
  %56 = load i32, i32* %55, align 8
  %57 = icmp eq i32 %56, %54
  %58 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %42, i64 0, i32 1
  %59 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %42, i64 0, i32 3
  %60 = select i1 %57, %"class.blink::ListGrid::GridCell"** %58, %"class.blink::ListGrid::GridCell"** %59
  %61 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %60, align 8
  store %"class.blink::ListGrid::GridCell"* %61, %"class.blink::ListGrid::GridCell"** %5, align 8
  %62 = icmp eq %"class.blink::ListGrid::GridCell"* %61, null
  br i1 %62, label %80, label %63

63:                                               ; preds = %53
  %64 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %61, i64 0, i32 5
  store i64 1, i64* %38, align 8
  %65 = tail call dereferenceable(8) %"class.blink::LayoutBox"** @_ZNK3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1365"* %64, i32 0) #15
  br label %66

66:                                               ; preds = %63, %48
  %67 = phi %"class.blink::LayoutBox"** [ %52, %48 ], [ %65, %63 ]
  %68 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %67, align 8
  %69 = load %"class.blink::Grid"*, %"class.blink::Grid"** %40, align 8
  %70 = tail call { i64, i32 } @_ZNK5blink4Grid12GridItemSpanERKNS_9LayoutBoxENS_24GridTrackSizingDirectionE(%"class.blink::Grid"* %69, %"class.blink::LayoutBox"* dereferenceable(216) %68, i32 %37)
  %71 = extractvalue { i64, i32 } %70, 0
  %72 = shl i64 %71, 32
  %73 = ashr exact i64 %72, 32
  %74 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %5, align 8
  %75 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %74, i64 0, i32 6
  %76 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %74, i64 0, i32 7
  %77 = select i1 %4, i64* %75, i64* %76
  %78 = load i64, i64* %77, align 8
  %79 = icmp eq i64 %73, %78
  br i1 %79, label %80, label %41

80:                                               ; preds = %66, %53, %25, %8, %29
  %81 = phi %"class.blink::LayoutBox"* [ %35, %29 ], [ null, %8 ], [ null, %25 ], [ %68, %66 ], [ null, %53 ]
  ret %"class.blink::LayoutBox"* %81
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias %"struct.blink::GridArea"* @_ZN5blink16ListGridIterator17NextEmptyGridAreaEmm(%"class.blink::ListGridIterator"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp ne i32 %5, 1
  %7 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 1
  %8 = load %"class.blink::ListGrid"*, %"class.blink::ListGrid"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %8, i64 0, i32 4
  %10 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %8, i64 0, i32 3
  %11 = select i1 %6, %"class.WTF::DoublyLinkedList"* %9, %"class.WTF::DoublyLinkedList"* %10
  %12 = icmp eq i32 %5, 0
  %13 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 2
  %14 = getelementptr inbounds %"class.blink::ListGridIterator", %"class.blink::ListGridIterator"* %0, i64 0, i32 0, i32 3
  %15 = select i1 %12, i64* %13, i64* %14
  %16 = select i1 %12, i64* %14, i64* %13
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %1, -1
  %19 = add i64 %18, %17
  %20 = getelementptr inbounds %"class.WTF::DoublyLinkedList", %"class.WTF::DoublyLinkedList"* %11, i64 0, i32 0
  %21 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %20, align 8
  %22 = icmp eq %"class.blink::ListGrid::GridTrack"* %21, null
  br i1 %22, label %94, label %23

23:                                               ; preds = %3
  %24 = load i64, i64* %15, align 8
  br label %25

25:                                               ; preds = %23, %30
  %26 = phi %"class.blink::ListGrid::GridTrack"* [ %21, %23 ], [ %32, %30 ]
  %27 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %26, i64 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %28, %24
  br i1 %29, label %30, label %34

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %26, i64 0, i32 4
  %32 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %31, align 8
  %33 = icmp eq %"class.blink::ListGrid::GridTrack"* %32, null
  br i1 %33, label %94, label %25

34:                                               ; preds = %25
  %35 = zext i1 %6 to i32
  %36 = icmp eq i32 %5, 1
  %37 = load i64, i64* %15, align 8
  br label %38

38:                                               ; preds = %34, %89
  %39 = phi i64 [ %37, %34 ], [ %90, %89 ]
  %40 = phi %"class.blink::ListGrid::GridTrack"* [ %26, %34 ], [ %92, %89 ]
  %41 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %40, i64 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %42, %39
  %44 = icmp ult i64 %43, %2
  br i1 %44, label %65, label %45

45:                                               ; preds = %38
  %46 = select i1 %12, i64 %2, i64 %1
  %47 = select i1 %12, i64 %1, i64 %2
  %48 = load i64, i64* %13, align 8
  %49 = add i64 %46, %48
  %50 = icmp ult i64 %48, 999
  %51 = select i1 %50, i64 %48, i64 999
  %52 = icmp ult i64 %49, 1000
  %53 = select i1 %52, i64 %49, i64 1000
  %54 = shl nuw nsw i64 %53, 32
  %55 = or i64 %54, %51
  %56 = load i64, i64* %14, align 8
  %57 = add i64 %56, %47
  %58 = icmp ult i64 %56, 999
  %59 = select i1 %58, i64 %56, i64 999
  %60 = icmp ult i64 %57, 1000
  %61 = select i1 %60, i64 %57, i64 1000
  %62 = shl nuw nsw i64 %61, 32
  %63 = or i64 %62, %59
  %64 = tail call noalias i8* @malloc(i64 24) #15
  br label %114

65:                                               ; preds = %38
  %66 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %40, i64 0, i32 0, i32 0
  %67 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %66, align 8
  %68 = icmp eq %"class.blink::ListGrid::GridCell"* %67, null
  br i1 %68, label %89, label %69

69:                                               ; preds = %65, %76
  %70 = phi %"class.blink::ListGrid::GridCell"* [ %83, %76 ], [ %67, %65 ]
  %71 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %70, i64 0, i32 6
  %72 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %70, i64 0, i32 7
  %73 = select i1 %36, i64* %71, i64* %72
  %74 = load i64, i64* %73, align 8
  %75 = icmp ult i64 %74, %17
  br i1 %75, label %76, label %85

76:                                               ; preds = %69
  %77 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %70, i64 0, i32 4
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, %35
  %80 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %70, i64 0, i32 1
  %81 = getelementptr inbounds %"class.blink::ListGrid::GridCell", %"class.blink::ListGrid::GridCell"* %70, i64 0, i32 3
  %82 = select i1 %79, %"class.blink::ListGrid::GridCell"** %80, %"class.blink::ListGrid::GridCell"** %81
  %83 = load %"class.blink::ListGrid::GridCell"*, %"class.blink::ListGrid::GridCell"** %82, align 8
  %84 = icmp eq %"class.blink::ListGrid::GridCell"* %83, null
  br i1 %84, label %89, label %69

85:                                               ; preds = %69
  %86 = icmp ugt i64 %74, %19
  br i1 %86, label %89, label %87

87:                                               ; preds = %85
  %88 = add i64 %42, 1
  store i64 %88, i64* %15, align 8
  br label %89

89:                                               ; preds = %76, %85, %65, %87
  %90 = phi i64 [ %39, %65 ], [ %88, %87 ], [ %39, %85 ], [ %39, %76 ]
  %91 = getelementptr inbounds %"class.blink::ListGrid::GridTrack", %"class.blink::ListGrid::GridTrack"* %40, i64 0, i32 4
  %92 = load %"class.blink::ListGrid::GridTrack"*, %"class.blink::ListGrid::GridTrack"** %91, align 8
  %93 = icmp eq %"class.blink::ListGrid::GridTrack"* %92, null
  br i1 %93, label %94, label %38

94:                                               ; preds = %30, %89, %3
  %95 = select i1 %12, i64 %2, i64 %1
  %96 = select i1 %12, i64 %1, i64 %2
  %97 = load i64, i64* %13, align 8
  %98 = add i64 %95, %97
  %99 = icmp ult i64 %97, 999
  %100 = select i1 %99, i64 %97, i64 999
  %101 = icmp ult i64 %98, 1000
  %102 = select i1 %101, i64 %98, i64 1000
  %103 = shl nuw nsw i64 %102, 32
  %104 = or i64 %103, %100
  %105 = load i64, i64* %14, align 8
  %106 = add i64 %105, %96
  %107 = icmp ult i64 %105, 999
  %108 = select i1 %107, i64 %105, i64 999
  %109 = icmp ult i64 %106, 1000
  %110 = select i1 %109, i64 %106, i64 1000
  %111 = shl nuw nsw i64 %110, 32
  %112 = or i64 %111, %108
  %113 = tail call noalias i8* @malloc(i64 24) #15
  br label %114

114:                                              ; preds = %94, %45
  %115 = phi i8* [ %113, %94 ], [ %64, %45 ]
  %116 = phi i64 [ %112, %94 ], [ %63, %45 ]
  %117 = phi i64 [ %104, %94 ], [ %55, %45 ]
  %118 = bitcast i8* %115 to i64*
  store i64 %116, i64* %118, align 4
  %119 = getelementptr inbounds i8, i8* %115, i64 8
  %120 = bitcast i8* %119 to i32*
  store i32 1, i32* %120, align 4
  %121 = getelementptr inbounds i8, i8* %115, i64 12
  %122 = bitcast i8* %121 to i64*
  store i64 %117, i64* %122, align 4
  %123 = getelementptr inbounds i8, i8* %115, i64 20
  %124 = bitcast i8* %123 to i32*
  store i32 1, i32* %124, align 4
  %125 = bitcast i8* %115 to %"struct.blink::GridArea"*
  ret %"struct.blink::GridArea"* %125
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink8ListGrid9NumTracksENS_24GridTrackSizingDirectionE(%"class.blink::ListGrid"*, i32) unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 1
  %4 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.blink::ListGrid", %"class.blink::ListGrid"* %0, i64 0, i32 2
  %6 = select i1 %3, i64* %4, i64* %5
  %7 = load i64, i64* %6, align 8
  ret i64 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8ListGrid28ConsolidateGridDataStructureEv(%"class.blink::ListGrid"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Grid12GridIteratorD2Ev(%"class.blink::Grid::GridIterator"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16ListGridIteratorD0Ev(%"class.blink::ListGridIterator"*) unnamed_addr #9 comdat align 2 {
  %2 = bitcast %"class.blink::ListGridIterator"* %0 to i8*
  tail call void @free(i8* %2) #15
  ret void
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4GridD2Ev(%"class.blink::Grid"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [11 x i8*] }, { [11 x i8*] }* @_ZTVN5blink4GridE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %3, align 8
  store %"class.WTF::LinkedHashSet"* null, %"class.WTF::LinkedHashSet"** %3, align 8
  %5 = icmp eq %"class.WTF::LinkedHashSet"* %4, null
  br i1 %5, label %25, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.WTF::VectorBackedLinkedListNode"*, %"class.WTF::VectorBackedLinkedListNode"** %7, align 8
  %9 = icmp eq %"class.WTF::VectorBackedLinkedListNode"* %8, null
  %10 = bitcast %"class.WTF::VectorBackedLinkedListNode"* %8 to i8*
  br i1 %9, label %17, label %11, !prof !5

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %4, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15, !prof !6

15:                                               ; preds = %11
  store i32 0, i32* %12, align 4
  br label %16

16:                                               ; preds = %15, %11
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %10) #15
  store %"class.WTF::VectorBackedLinkedListNode"* null, %"class.WTF::VectorBackedLinkedListNode"** %7, align 8
  br label %17

17:                                               ; preds = %16, %6
  %18 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %4, i64 0, i32 0, i32 0, i32 0
  %19 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %18, align 8
  %20 = icmp eq %"struct.WTF::KeyValuePair.921"* %19, null
  br i1 %20, label %23, label %21, !prof !5

21:                                               ; preds = %17
  %22 = bitcast %"struct.WTF::KeyValuePair.921"* %19 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %22) #15
  store %"struct.WTF::KeyValuePair.921"* null, %"struct.WTF::KeyValuePair.921"** %18, align 8
  br label %23

23:                                               ; preds = %21, %17
  %24 = bitcast %"class.WTF::LinkedHashSet"* %4 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %24) #15
  br label %25

25:                                               ; preds = %1, %23
  %26 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 10, i32 0, i32 0, i32 0
  %27 = load %"class.WTF::LinkedHashSet"*, %"class.WTF::LinkedHashSet"** %26, align 8
  store %"class.WTF::LinkedHashSet"* null, %"class.WTF::LinkedHashSet"** %26, align 8
  %28 = icmp eq %"class.WTF::LinkedHashSet"* %27, null
  br i1 %28, label %48, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %27, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %31 = load %"class.WTF::VectorBackedLinkedListNode"*, %"class.WTF::VectorBackedLinkedListNode"** %30, align 8
  %32 = icmp eq %"class.WTF::VectorBackedLinkedListNode"* %31, null
  %33 = bitcast %"class.WTF::VectorBackedLinkedListNode"* %31 to i8*
  br i1 %32, label %40, label %34, !prof !5

34:                                               ; preds = %29
  %35 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %27, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %39, label %38, !prof !6

38:                                               ; preds = %34
  store i32 0, i32* %35, align 4
  br label %39

39:                                               ; preds = %38, %34
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %33) #15
  store %"class.WTF::VectorBackedLinkedListNode"* null, %"class.WTF::VectorBackedLinkedListNode"** %30, align 8
  br label %40

40:                                               ; preds = %39, %29
  %41 = getelementptr inbounds %"class.WTF::LinkedHashSet", %"class.WTF::LinkedHashSet"* %27, i64 0, i32 0, i32 0, i32 0
  %42 = load %"struct.WTF::KeyValuePair.921"*, %"struct.WTF::KeyValuePair.921"** %41, align 8
  %43 = icmp eq %"struct.WTF::KeyValuePair.921"* %42, null
  br i1 %43, label %46, label %44, !prof !5

44:                                               ; preds = %40
  %45 = bitcast %"struct.WTF::KeyValuePair.921"* %42 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %45) #15
  store %"struct.WTF::KeyValuePair.921"* null, %"struct.WTF::KeyValuePair.921"** %41, align 8
  br label %46

46:                                               ; preds = %44, %40
  %47 = bitcast %"class.WTF::LinkedHashSet"* %27 to i8*
  tail call void @_ZN3WTF10Partitions8FastFreeEPv(i8* nonnull %47) #15
  br label %48

48:                                               ; preds = %25, %46
  %49 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 9, i32 0, i32 0
  %50 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %49, align 8
  %51 = icmp eq %"struct.WTF::KeyValuePair.913"* %50, null
  br i1 %51, label %54, label %52, !prof !5

52:                                               ; preds = %48
  %53 = bitcast %"struct.WTF::KeyValuePair.913"* %50 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %53) #15
  store %"struct.WTF::KeyValuePair.913"* null, %"struct.WTF::KeyValuePair.913"** %49, align 8
  br label %54

54:                                               ; preds = %48, %52
  %55 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 8, i32 0, i32 0
  %56 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %55, align 8
  %57 = icmp eq %"struct.WTF::KeyValuePair.908"* %56, null
  br i1 %57, label %60, label %58, !prof !5

58:                                               ; preds = %54
  %59 = bitcast %"struct.WTF::KeyValuePair.908"* %56 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %59) #15
  store %"struct.WTF::KeyValuePair.908"* null, %"struct.WTF::KeyValuePair.908"** %55, align 8
  br label %60

60:                                               ; preds = %54, %58
  %61 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 1, i32 2, i32 0
  %62 = getelementptr inbounds %"class.blink::Grid", %"class.blink::Grid"* %0, i64 0, i32 1, i32 2, i32 0, i32 1, i32 0, i32 0
  %63 = bitcast %"class.std::__1::__tree_end_node"* %62 to %"class.std::__1::__tree_node"**
  %64 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %63, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %61, %"class.std::__1::__tree_node"* %64) #15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4GridD0Ev(%"class.blink::Grid"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink4Grid12GridIteratorD0Ev(%"class.blink::Grid::GridIterator"*) unnamed_addr #0 comdat align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #10

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector.1365"*, %"class.blink::LayoutBox"** dereferenceable(8)) local_unnamed_addr #11 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %6, align 8
  %8 = icmp ugt %"class.blink::LayoutBox"** %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %7, i64 %10
  %12 = icmp ugt %"class.blink::LayoutBox"** %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1365"* %0, i32 %5) #15
  %14 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint %"class.blink::LayoutBox"** %1 to i64
  %17 = ptrtoint %"class.blink::LayoutBox"** %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 3
  tail call void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1365"* %0, i32 %5) #15
  %20 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %6, align 8
  %21 = getelementptr inbounds %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi %"class.blink::LayoutBox"** [ %14, %13 ], [ %20, %15 ]
  %24 = phi %"class.blink::LayoutBox"** [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %23, i64 %26
  %28 = bitcast %"class.blink::LayoutBox"** %24 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.blink::LayoutBox"** %27 to i64*
  store i64 %29, i64* %30, align 8
  %31 = load i32, i32* %3, align 4
  %32 = add i32 %31, 1
  store i32 %32, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1365"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #15
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #15
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #15
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #15
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #15
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #15
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !5

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %31, align 8
  %33 = icmp eq %"class.blink::LayoutBox"** %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 1
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9LayoutBoxEEEmm(i64 %37) #15
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink9LayoutBoxEEEPKcv, i64 0, i64 0)) #15
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.1365"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 3
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.1365"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 1, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1365"* %0, i32 %27) #15
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #12

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1365"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 2
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %5, align 8
  %7 = icmp eq %"class.blink::LayoutBox"** %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to %"class.blink::LayoutBox"**
  %10 = icmp eq %"class.blink::LayoutBox"** %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.1365"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.1365"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 1, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !6

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast %"class.blink::LayoutBox"** %6 to i8*
  %27 = shl nuw nsw i64 %25, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %26, i64 %27, i1 false) #15
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1366"* %19, %"class.blink::LayoutBox"** nonnull %6) #15
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9LayoutBoxEEEmm(i64 %30) #15
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink9LayoutBoxEEEPKcv, i64 0, i64 0)) #15
  %33 = lshr i64 %31, 3
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne %"class.blink::LayoutBox"** %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !5

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast %"class.blink::LayoutBox"** %36 to i8*
  %45 = shl nuw nsw i64 %43, 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %44, i64 %45, i1 false) #15
  %46 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi %"class.blink::LayoutBox"** [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to %"class.blink::LayoutBox"**
  %51 = icmp eq %"class.blink::LayoutBox"** %48, %50
  br i1 %51, label %54, label %52, !prof !5

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1366"* %53, %"class.blink::LayoutBox"** %48) #15
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.1365"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIPN5blink9LayoutBoxEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #15
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 268173312
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #15
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 268173312) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #15
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #15
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #15
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #15
  %20 = shl i64 %0, 3
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #15
  ret i64 %21
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS3_(%"class.WTF::VectorBuffer.1366"*, %"class.blink::LayoutBox"**) local_unnamed_addr #11 comdat align 2 {
  %3 = bitcast %"class.blink::LayoutBox"** %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #15
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #15
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeIiNS_4lessIiEENS_9allocatorIiEEE7destroyEPNS_11__tree_nodeIiPvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #15
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #17
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #13

declare void @_ZN3WTF10Partitions8FastFreeEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.908"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISF_SA_SG_EES4_RS6_EENS_18HashTableAddResultISH_S7_EEOT0_OT1_(%"class.WTF::HashTable.905"*, %"class.blink::LayoutBox"** dereferenceable(8), %"struct.blink::GridArea"* dereferenceable(24)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.908"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.908"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable.905"* %0, %"struct.WTF::KeyValuePair.908"* null)
  %9 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.908"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::LayoutBox"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %11, i64 %38
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %39, i64 0, i32 0
  %41 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %40, align 8
  %42 = icmp eq %"class.blink::LayoutBox"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::LayoutBox"*
  br i1 %42, label %91, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::LayoutBox"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"struct.WTF::KeyValuePair.908"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"struct.WTF::KeyValuePair.908"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::LayoutBox"* %59, %43
  br i1 %64, label %109, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::LayoutBox"* %59, inttoptr (i64 -1 to %"class.blink::LayoutBox"*)
  %67 = select i1 %66, %"struct.WTF::KeyValuePair.908"* %60, %"struct.WTF::KeyValuePair.908"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %11, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %72, i64 0, i32 0
  %74 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %73, align 8
  %75 = icmp eq %"class.blink::LayoutBox"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"struct.WTF::KeyValuePair.908"* %67, null
  br i1 %77, label %91, label %78

78:                                               ; preds = %76
  %79 = bitcast %"struct.WTF::KeyValuePair.908"* %67 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967296>, <2 x i64>* %79, align 8
  %80 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %67, i64 0, i32 1, i32 0, i32 2
  store i32 2, i32* %80, align 8
  %81 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %67, i64 0, i32 1, i32 1
  %82 = bitcast %"struct.blink::GridSpan"* %81 to i64*
  store i64 4294967296, i64* %82, align 4
  %83 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %67, i64 0, i32 1, i32 1, i32 2
  store i32 2, i32* %83, align 4
  %84 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 3
  %85 = load i32, i32* %84, align 8
  %86 = add i32 %85, 2147483647
  %87 = and i32 %86, 2147483647
  %88 = and i32 %85, -2147483648
  %89 = or i32 %87, %88
  store i32 %89, i32* %84, align 8
  %90 = load i64, i64* %16, align 8
  br label %91

91:                                               ; preds = %76, %10, %78
  %92 = phi %"struct.WTF::KeyValuePair.908"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %93 = phi i64 [ %90, %78 ], [ %17, %10 ], [ %17, %76 ]
  %94 = bitcast %"struct.WTF::KeyValuePair.908"* %92 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %92, i64 0, i32 1
  %96 = bitcast %"struct.blink::GridArea"* %95 to i8*
  %97 = bitcast %"struct.blink::GridArea"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %96, i8* align 4 %97, i64 24, i1 false) #15
  %98 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = add i32 %99, 1
  store i32 %100, i32* %98, align 4
  %101 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 3
  %102 = load i32, i32* %101, align 8
  %103 = add i32 %102, %100
  %104 = shl i32 %103, 1
  %105 = load i32, i32* %12, align 8
  %106 = icmp ult i32 %104, %105
  br i1 %106, label %109, label %107

107:                                              ; preds = %91
  %108 = tail call %"struct.WTF::KeyValuePair.908"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable.905"* %0, %"struct.WTF::KeyValuePair.908"* %92)
  br label %109

109:                                              ; preds = %58, %91, %107
  %110 = phi i8 [ 1, %91 ], [ 1, %107 ], [ 0, %58 ]
  %111 = phi %"struct.WTF::KeyValuePair.908"* [ %92, %91 ], [ %108, %107 ], [ %60, %58 ]
  %112 = insertvalue { %"struct.WTF::KeyValuePair.908"*, i8 } undef, %"struct.WTF::KeyValuePair.908"* %111, 0
  %113 = insertvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %112, i8 %110, 1
  ret { %"struct.WTF::KeyValuePair.908"*, i8 } %113
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.908"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE6ExpandEPS7_(%"class.WTF::HashTable.905"*, %"struct.WTF::KeyValuePair.908"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #15
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #15
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %22, i8* %23) #15
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #15
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #15
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #15
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 5
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink9LayoutBoxENS2_8GridAreaEEEEEPKcv, i64 0, i64 0)) #15
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.908"*
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %31
  %39 = and i64 %33, 1
  %40 = icmp eq i32 %32, 1
  br i1 %40, label %62, label %41

41:                                               ; preds = %38
  %42 = sub nsw i64 %33, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %59, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %60, %43 ]
  %46 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %44
  %47 = bitcast %"struct.WTF::KeyValuePair.908"* %46 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967296>, <2 x i64>* %47, align 8
  %48 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %44, i32 1, i32 0, i32 2
  store i32 2, i32* %48, align 8
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %44, i32 1, i32 1
  %50 = bitcast %"struct.blink::GridSpan"* %49 to i64*
  store i64 4294967296, i64* %50, align 4
  %51 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %44, i32 1, i32 1, i32 2
  store i32 2, i32* %51, align 4
  %52 = or i64 %44, 1
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %52
  %54 = bitcast %"struct.WTF::KeyValuePair.908"* %53 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967296>, <2 x i64>* %54, align 8
  %55 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %52, i32 1, i32 0, i32 2
  store i32 2, i32* %55, align 8
  %56 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %52, i32 1, i32 1
  %57 = bitcast %"struct.blink::GridSpan"* %56 to i64*
  store i64 4294967296, i64* %57, align 4
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %52, i32 1, i32 1, i32 2
  store i32 2, i32* %58, align 4
  %59 = add nuw nsw i64 %44, 2
  %60 = add i64 %45, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %43

62:                                               ; preds = %43, %38
  %63 = phi i64 [ 0, %38 ], [ %59, %43 ]
  %64 = icmp eq i64 %39, 0
  br i1 %64, label %72, label %65

65:                                               ; preds = %62
  %66 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %63
  %67 = bitcast %"struct.WTF::KeyValuePair.908"* %66 to <2 x i64>*
  store <2 x i64> <i64 0, i64 4294967296>, <2 x i64>* %67, align 8
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %63, i32 1, i32 0, i32 2
  store i32 2, i32* %68, align 8
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %63, i32 1, i32 1
  %70 = bitcast %"struct.blink::GridSpan"* %69 to i64*
  store i64 4294967296, i64* %70, align 4
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %36, i64 %63, i32 1, i32 1, i32 2
  store i32 2, i32* %71, align 4
  br label %72

72:                                               ; preds = %65, %62, %31
  %73 = call %"struct.WTF::KeyValuePair.908"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS7_jSI_(%"class.WTF::HashTable.905"* %0, %"struct.WTF::KeyValuePair.908"* %36, i32 %32, %"struct.WTF::KeyValuePair.908"* %1) #15
  ret %"struct.WTF::KeyValuePair.908"* %73
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.908"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE8RehashToEPS7_jSI_(%"class.WTF::HashTable.905"*, %"struct.WTF::KeyValuePair.908"*, i32, %"struct.WTF::KeyValuePair.908"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.905", align 8
  %6 = bitcast %"class.WTF::HashTable.905"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #15
  %7 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.905"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.908"* %1, %"struct.WTF::KeyValuePair.908"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.908"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.905"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.905"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.908"* %22 to i64
  br label %42

24:                                               ; preds = %64
  %25 = bitcast %"class.WTF::HashTable.905"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.905"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %65, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.908"* [ null, %16 ], [ %68, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %66, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #15
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #15
  ret %"struct.WTF::KeyValuePair.908"* %33

42:                                               ; preds = %21, %64
  %43 = phi i64 [ %65, %64 ], [ %23, %21 ]
  %44 = phi i32 [ %66, %64 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair.908"* [ %67, %64 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair.908"* [ %68, %64 ], [ null, %21 ]
  %47 = phi i32 [ %69, %64 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair.908"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %64
    i64 0, label %64
  ]

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %49, i64 0, i32 0
  %54 = call { %"struct.WTF::KeyValuePair.908"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE16LookupForWritingERKS4_(%"class.WTF::HashTable.905"* nonnull %5, %"class.blink::LayoutBox"** dereferenceable(8) %53) #15
  %55 = extractvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %54, 0
  %56 = bitcast %"struct.WTF::KeyValuePair.908"* %55 to i8*
  %57 = bitcast %"struct.WTF::KeyValuePair.908"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 32, i1 false) #15
  %58 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %15, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %58, i64 %48
  %60 = icmp eq %"struct.WTF::KeyValuePair.908"* %59, %3
  %61 = select i1 %60, %"struct.WTF::KeyValuePair.908"* %55, %"struct.WTF::KeyValuePair.908"* %46
  %62 = load i32, i32* %12, align 8
  %63 = ptrtoint %"struct.WTF::KeyValuePair.908"* %58 to i64
  br label %64

64:                                               ; preds = %42, %42, %52
  %65 = phi i64 [ %43, %42 ], [ %63, %52 ], [ %43, %42 ]
  %66 = phi i32 [ %44, %42 ], [ %62, %52 ], [ %44, %42 ]
  %67 = phi %"struct.WTF::KeyValuePair.908"* [ %45, %42 ], [ %58, %52 ], [ %45, %42 ]
  %68 = phi %"struct.WTF::KeyValuePair.908"* [ %46, %42 ], [ %61, %52 ], [ %46, %42 ]
  %69 = add i32 %47, 1
  %70 = icmp eq i32 %69, %66
  br i1 %70, label %24, label %42
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #14

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.908"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_NS1_8GridAreaEEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSC_IS6_EEEESD_NS_18PartitionAllocatorEE16LookupForWritingERKS4_(%"class.WTF::HashTable.905"*, %"class.blink::LayoutBox"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.908"*, %"struct.WTF::KeyValuePair.908"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.905", %"class.WTF::HashTable.905"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = bitcast %"class.blink::LayoutBox"** %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 32
  %12 = xor i64 %11, -1
  %13 = add i64 %10, %12
  %14 = lshr i64 %13, 22
  %15 = xor i64 %14, %13
  %16 = shl i64 %15, 13
  %17 = xor i64 %16, -1
  %18 = add i64 %15, %17
  %19 = lshr i64 %18, 8
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, 9
  %22 = lshr i64 %21, 15
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 27
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 31
  %28 = xor i64 %27, %26
  %29 = trunc i64 %28 to i32
  %30 = and i32 %7, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %4, i64 %31
  %33 = ptrtoint %"struct.WTF::KeyValuePair.908"* %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %32, i64 0, i32 0
  %35 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %34, align 8
  %36 = icmp eq %"class.blink::LayoutBox"* %35, null
  %37 = inttoptr i64 %10 to %"class.blink::LayoutBox"*
  br i1 %36, label %55, label %38

38:                                               ; preds = %2
  %39 = xor i32 %29, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %61

52:                                               ; preds = %68
  %53 = ptrtoint %"struct.WTF::KeyValuePair.908"* %75 to i64
  %54 = inttoptr i64 %70 to %"struct.WTF::KeyValuePair.908"*
  br label %55

55:                                               ; preds = %52, %2
  %56 = phi i64 [ %53, %52 ], [ %33, %2 ]
  %57 = phi %"struct.WTF::KeyValuePair.908"* [ %54, %52 ], [ null, %2 ]
  %58 = icmp eq %"struct.WTF::KeyValuePair.908"* %57, null
  %59 = ptrtoint %"struct.WTF::KeyValuePair.908"* %57 to i64
  %60 = select i1 %58, i64 %56, i64 %59
  br label %80

61:                                               ; preds = %68, %38
  %62 = phi i64 [ 0, %38 ], [ %70, %68 ]
  %63 = phi %"class.blink::LayoutBox"* [ %35, %38 ], [ %78, %68 ]
  %64 = phi i64 [ %33, %38 ], [ %76, %68 ]
  %65 = phi i64 [ %31, %38 ], [ %74, %68 ]
  %66 = phi i64 [ 0, %38 ], [ %72, %68 ]
  %67 = icmp eq %"class.blink::LayoutBox"* %63, %37
  br i1 %67, label %80, label %68

68:                                               ; preds = %61
  %69 = icmp eq %"class.blink::LayoutBox"* %63, inttoptr (i64 -1 to %"class.blink::LayoutBox"*)
  %70 = select i1 %69, i64 %64, i64 %62
  %71 = icmp eq i64 %66, 0
  %72 = select i1 %71, i64 %51, i64 %66
  %73 = add i64 %72, %65
  %74 = and i64 %73, %8
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %4, i64 %74
  %76 = ptrtoint %"struct.WTF::KeyValuePair.908"* %75 to i64
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.908", %"struct.WTF::KeyValuePair.908"* %75, i64 0, i32 0
  %78 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %77, align 8
  %79 = icmp eq %"class.blink::LayoutBox"* %78, null
  br i1 %79, label %52, label %61

80:                                               ; preds = %61, %55
  %81 = phi i64 [ %60, %55 ], [ %64, %61 ]
  %82 = phi i8 [ 0, %55 ], [ 1, %61 ]
  %83 = inttoptr i64 %81 to %"struct.WTF::KeyValuePair.908"*
  %84 = insertvalue { %"struct.WTF::KeyValuePair.908"*, i8 } undef, %"struct.WTF::KeyValuePair.908"* %83, 0
  %85 = insertvalue { %"struct.WTF::KeyValuePair.908"*, i8 } %84, i8 %82, 1
  ret { %"struct.WTF::KeyValuePair.908"*, i8 } %85
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.913"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISE_S9_SF_EES4_RmEENS_18HashTableAddResultISG_S6_EEOT0_OT1_(%"class.WTF::HashTable.910"*, %"class.blink::LayoutBox"** dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.913"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.913"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6ExpandEPS6_(%"class.WTF::HashTable.910"* %0, %"struct.WTF::KeyValuePair.913"* null)
  %9 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.913"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::LayoutBox"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %11, i64 %38
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %39, i64 0, i32 0
  %41 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %40, align 8
  %42 = icmp eq %"class.blink::LayoutBox"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::LayoutBox"*
  br i1 %42, label %87, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::LayoutBox"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"struct.WTF::KeyValuePair.913"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"struct.WTF::KeyValuePair.913"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::LayoutBox"* %59, %43
  br i1 %64, label %104, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::LayoutBox"* %59, inttoptr (i64 -1 to %"class.blink::LayoutBox"*)
  %67 = select i1 %66, %"struct.WTF::KeyValuePair.913"* %60, %"struct.WTF::KeyValuePair.913"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %11, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %72, i64 0, i32 0
  %74 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %73, align 8
  %75 = icmp eq %"class.blink::LayoutBox"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"struct.WTF::KeyValuePair.913"* %67, null
  br i1 %77, label %87, label %78

78:                                               ; preds = %76
  %79 = bitcast %"struct.WTF::KeyValuePair.913"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 16, i1 false) #15
  %80 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 2147483647
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  %86 = load i64, i64* %16, align 8
  br label %87

87:                                               ; preds = %10, %76, %78
  %88 = phi i64 [ %86, %78 ], [ %17, %76 ], [ %17, %10 ]
  %89 = phi %"struct.WTF::KeyValuePair.913"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %90 = bitcast %"struct.WTF::KeyValuePair.913"* %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %89, i64 0, i32 1
  %92 = load i64, i64* %2, align 8
  store i64 %92, i64* %91, align 8
  %93 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = add i32 %94, 1
  store i32 %95, i32* %93, align 4
  %96 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 3
  %97 = load i32, i32* %96, align 8
  %98 = add i32 %97, %95
  %99 = shl i32 %98, 1
  %100 = load i32, i32* %12, align 8
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %104, label %102

102:                                              ; preds = %87
  %103 = tail call %"struct.WTF::KeyValuePair.913"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6ExpandEPS6_(%"class.WTF::HashTable.910"* %0, %"struct.WTF::KeyValuePair.913"* %89)
  br label %104

104:                                              ; preds = %58, %87, %102
  %105 = phi i8 [ 1, %87 ], [ 1, %102 ], [ 0, %58 ]
  %106 = phi %"struct.WTF::KeyValuePair.913"* [ %89, %87 ], [ %103, %102 ], [ %60, %58 ]
  %107 = insertvalue { %"struct.WTF::KeyValuePair.913"*, i8 } undef, %"struct.WTF::KeyValuePair.913"* %106, 0
  %108 = insertvalue { %"struct.WTF::KeyValuePair.913"*, i8 } %107, i8 %105, 1
  ret { %"struct.WTF::KeyValuePair.913"*, i8 } %108
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.913"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE6ExpandEPS6_(%"class.WTF::HashTable.910"*, %"struct.WTF::KeyValuePair.913"*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #15
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #15
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %22, i8* %23) #15
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.6, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #15
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #15
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #15
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPKN5blink9LayoutBoxEmEEEEPKcv, i64 0, i64 0)) #15
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #15
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.913"*
  %37 = call %"struct.WTF::KeyValuePair.913"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE8RehashToEPS6_jSH_(%"class.WTF::HashTable.910"* %0, %"struct.WTF::KeyValuePair.913"* %36, i32 %32, %"struct.WTF::KeyValuePair.913"* %1) #15
  ret %"struct.WTF::KeyValuePair.913"* %37
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.913"* @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE8RehashToEPS6_jSH_(%"class.WTF::HashTable.910"*, %"struct.WTF::KeyValuePair.913"*, i32, %"struct.WTF::KeyValuePair.913"*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.910", align 8
  %6 = bitcast %"class.WTF::HashTable.910"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #15
  %7 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.910"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.913"* %1, %"struct.WTF::KeyValuePair.913"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.913"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.910"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.910"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.913"* %22 to i64
  br label %42

24:                                               ; preds = %64
  %25 = bitcast %"class.WTF::HashTable.910"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.910"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %65, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.913"* [ null, %16 ], [ %68, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %66, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #15
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #15
  ret %"struct.WTF::KeyValuePair.913"* %33

42:                                               ; preds = %21, %64
  %43 = phi i64 [ %65, %64 ], [ %23, %21 ]
  %44 = phi i32 [ %66, %64 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair.913"* [ %67, %64 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair.913"* [ %68, %64 ], [ null, %21 ]
  %47 = phi i32 [ %69, %64 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair.913"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %64
    i64 0, label %64
  ]

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %49, i64 0, i32 0
  %54 = call { %"struct.WTF::KeyValuePair.913"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE16LookupForWritingERKS4_(%"class.WTF::HashTable.910"* nonnull %5, %"class.blink::LayoutBox"** dereferenceable(8) %53) #15
  %55 = extractvalue { %"struct.WTF::KeyValuePair.913"*, i8 } %54, 0
  %56 = bitcast %"struct.WTF::KeyValuePair.913"* %55 to i8*
  %57 = bitcast %"struct.WTF::KeyValuePair.913"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #15
  %58 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %15, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %58, i64 %48
  %60 = icmp eq %"struct.WTF::KeyValuePair.913"* %59, %3
  %61 = select i1 %60, %"struct.WTF::KeyValuePair.913"* %55, %"struct.WTF::KeyValuePair.913"* %46
  %62 = load i32, i32* %12, align 8
  %63 = ptrtoint %"struct.WTF::KeyValuePair.913"* %58 to i64
  br label %64

64:                                               ; preds = %42, %42, %52
  %65 = phi i64 [ %43, %42 ], [ %63, %52 ], [ %43, %42 ]
  %66 = phi i32 [ %44, %42 ], [ %62, %52 ], [ %44, %42 ]
  %67 = phi %"struct.WTF::KeyValuePair.913"* [ %45, %42 ], [ %58, %52 ], [ %45, %42 ]
  %68 = phi %"struct.WTF::KeyValuePair.913"* [ %46, %42 ], [ %61, %52 ], [ %46, %42 ]
  %69 = add i32 %47, 1
  %70 = icmp eq i32 %69, %66
  br i1 %70, label %24, label %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.913"*, i8 } @_ZN3WTF9HashTableIPKN5blink9LayoutBoxENS_12KeyValuePairIS4_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS3_EENS_18HashMapValueTraitsINS_10HashTraitsIS4_EENSB_ImEEEESC_NS_18PartitionAllocatorEE16LookupForWritingERKS4_(%"class.WTF::HashTable.910"*, %"class.blink::LayoutBox"** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.913"*, %"struct.WTF::KeyValuePair.913"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.910", %"class.WTF::HashTable.910"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = bitcast %"class.blink::LayoutBox"** %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 32
  %12 = xor i64 %11, -1
  %13 = add i64 %10, %12
  %14 = lshr i64 %13, 22
  %15 = xor i64 %14, %13
  %16 = shl i64 %15, 13
  %17 = xor i64 %16, -1
  %18 = add i64 %15, %17
  %19 = lshr i64 %18, 8
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, 9
  %22 = lshr i64 %21, 15
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 27
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 31
  %28 = xor i64 %27, %26
  %29 = trunc i64 %28 to i32
  %30 = and i32 %7, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %4, i64 %31
  %33 = ptrtoint %"struct.WTF::KeyValuePair.913"* %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %32, i64 0, i32 0
  %35 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %34, align 8
  %36 = icmp eq %"class.blink::LayoutBox"* %35, null
  %37 = inttoptr i64 %10 to %"class.blink::LayoutBox"*
  br i1 %36, label %55, label %38

38:                                               ; preds = %2
  %39 = xor i32 %29, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %61

52:                                               ; preds = %68
  %53 = ptrtoint %"struct.WTF::KeyValuePair.913"* %75 to i64
  %54 = inttoptr i64 %70 to %"struct.WTF::KeyValuePair.913"*
  br label %55

55:                                               ; preds = %52, %2
  %56 = phi i64 [ %53, %52 ], [ %33, %2 ]
  %57 = phi %"struct.WTF::KeyValuePair.913"* [ %54, %52 ], [ null, %2 ]
  %58 = icmp eq %"struct.WTF::KeyValuePair.913"* %57, null
  %59 = ptrtoint %"struct.WTF::KeyValuePair.913"* %57 to i64
  %60 = select i1 %58, i64 %56, i64 %59
  br label %80

61:                                               ; preds = %68, %38
  %62 = phi i64 [ 0, %38 ], [ %70, %68 ]
  %63 = phi %"class.blink::LayoutBox"* [ %35, %38 ], [ %78, %68 ]
  %64 = phi i64 [ %33, %38 ], [ %76, %68 ]
  %65 = phi i64 [ %31, %38 ], [ %74, %68 ]
  %66 = phi i64 [ 0, %38 ], [ %72, %68 ]
  %67 = icmp eq %"class.blink::LayoutBox"* %63, %37
  br i1 %67, label %80, label %68

68:                                               ; preds = %61
  %69 = icmp eq %"class.blink::LayoutBox"* %63, inttoptr (i64 -1 to %"class.blink::LayoutBox"*)
  %70 = select i1 %69, i64 %64, i64 %62
  %71 = icmp eq i64 %66, 0
  %72 = select i1 %71, i64 %51, i64 %66
  %73 = add i64 %72, %65
  %74 = and i64 %73, %8
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %4, i64 %74
  %76 = ptrtoint %"struct.WTF::KeyValuePair.913"* %75 to i64
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.913", %"struct.WTF::KeyValuePair.913"* %75, i64 0, i32 0
  %78 = load %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %77, align 8
  %79 = icmp eq %"class.blink::LayoutBox"* %78, null
  br i1 %79, label %52, label %61

80:                                               ; preds = %61, %55
  %81 = phi i64 [ %60, %55 ], [ %64, %61 ]
  %82 = phi i8 [ 0, %55 ], [ 1, %61 ]
  %83 = inttoptr i64 %81 to %"struct.WTF::KeyValuePair.913"*
  %84 = insertvalue { %"struct.WTF::KeyValuePair.913"*, i8 } undef, %"struct.WTF::KeyValuePair.913"* %83, 0
  %85 = insertvalue { %"struct.WTF::KeyValuePair.913"*, i8 } %84, i8 %82, 1
  ret { %"struct.WTF::KeyValuePair.913"*, i8 } %85
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::LayoutBox"** @_ZNK3WTF6VectorIPN5blink9LayoutBoxELj1ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.1365"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #15
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #15
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #15
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i8* %14, i8* %15) #15
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #15
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #15
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #15
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #15
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #15
  %23 = getelementptr inbounds %"class.WTF::Vector.1365", %"class.WTF::Vector.1365"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::LayoutBox"**, %"class.blink::LayoutBox"*** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::LayoutBox"*, %"class.blink::LayoutBox"** %24, i64 %25
  ret %"class.blink::LayoutBox"** %26
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind }
attributes #9 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { cold noreturn nounwind }
attributes #15 = { nounwind }
attributes #16 = { noreturn nounwind }
attributes #17 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK3WTF7HashMapIPKN5blink9LayoutBoxENS1_8GridAreaENS_7PtrHashIS3_EENS_10HashTraitsIS4_EENS8_IS5_EENS_18PartitionAllocatorEE2atERKS4_: argument 0"}
!4 = distinct !{!4, !"_ZNK3WTF7HashMapIPKN5blink9LayoutBoxENS1_8GridAreaENS_7PtrHashIS3_EENS_10HashTraitsIS4_EENS8_IS5_EENS_18PartitionAllocatorEE2atERKS4_"}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{!"branch_weights", i32 1, i32 2000}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZNK5blink4Grid12GridItemAreaERKNS_9LayoutBoxE: argument 0"}
!9 = distinct !{!9, !"_ZNK5blink4Grid12GridItemAreaERKNS_9LayoutBoxE"}
!10 = !{!11, !8}
!11 = distinct !{!11, !12, !"_ZNK3WTF7HashMapIPKN5blink9LayoutBoxENS1_8GridAreaENS_7PtrHashIS3_EENS_10HashTraitsIS4_EENS8_IS5_EENS_18PartitionAllocatorEE2atERKS4_: argument 0"}
!12 = distinct !{!12, !"_ZNK3WTF7HashMapIPKN5blink9LayoutBoxENS1_8GridAreaENS_7PtrHashIS3_EENS_10HashTraitsIS4_EENS8_IS5_EENS_18PartitionAllocatorEE2atERKS4_"}
!13 = !{!"branch_weights", i32 1, i32 1048575}
