; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGTransform.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGTransform.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkM44 = type { [16 x float] }
%"class.sksg::TransformEffect" = type { %"class.sksg::EffectNode", %class.sk_sp }
%"class.sksg::EffectNode" = type { %"class.sksg::RenderNode.base", %class.sk_sp.4 }
%"class.sksg::RenderNode.base" = type { %"class.sksg::Node.base" }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.4 = type { %"class.sksg::RenderNode"* }
%"class.sksg::RenderNode" = type { %"class.sksg::Node.base", [6 x i8] }
%class.sk_sp = type { %"class.sksg::Transform"* }
%"class.sksg::Transform" = type { %"class.sksg::Node.base", [6 x i8] }
%class.SkMatrix = type { [9 x float], i32 }
%"class.sksg::Matrix" = type { %"class.sksg::Transform.base", %class.SkMatrix, [4 x i8] }
%"class.sksg::Transform.base" = type { %"class.sksg::Node.base" }
%"class.sksg::Matrix.1" = type { %"class.sksg::Transform.base", %class.SkM44, [4 x i8] }
%class.sk_sp.5 = type { %"class.sksg::Node"* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkCanvas = type { i32 (...)**, %class.SkDeque, %"class.SkCanvas::MCRec"*, %class.sk_sp.6, [384 x i64], %class.sk_sp.7, %class.SkSurfaceProps, i32, %"class.std::__1::unique_ptr", %class.SkSurface_Base*, %struct.SkIRect, %struct.SkRect, %"class.std::__1::unique_ptr.9" }
%class.SkDeque = type { i8*, i8*, %"struct.SkDeque::Block"*, %"struct.SkDeque::Block"*, i64, i8*, i32, i32 }
%"struct.SkDeque::Block" = type opaque
%"class.SkCanvas::MCRec" = type opaque
%class.sk_sp.6 = type { %class.SkMarkerStack* }
%class.SkMarkerStack = type opaque
%class.sk_sp.7 = type { %class.SkBaseDevice* }
%class.SkBaseDevice = type opaque
%class.SkSurfaceProps = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.SkRasterHandleAllocator* }
%class.SkRasterHandleAllocator = type { i32 (...)** }
%class.SkSurface_Base = type opaque
%struct.SkIRect = type { i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.SkGlyphRunBuilder* }
%class.SkGlyphRunBuilder = type opaque
%"struct.sksg::RenderNode::RenderContext" = type { %class.sk_sp.15, %class.sk_sp.16, %class.sk_sp.16, %class.SkMatrix, %class.SkMatrix, float, i32 }
%class.sk_sp.15 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.sk_sp.16 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkPoint = type { float, float }
%"class.sksg::InvalidationController" = type opaque
%"class.sksg::(anonymous namespace)::Concat" = type { %"class.sksg::Transform.base", %class.sk_sp, %class.sk_sp, %class.SkM44 }
%"class.sksg::(anonymous namespace)::Concat.2" = type { %"class.sksg::Transform.base", %class.sk_sp, %class.sk_sp, %class.SkMatrix }
%"class.sksg::(anonymous namespace)::Inverse" = type { %"class.sksg::Transform.base", %class.sk_sp, %class.SkM44 }
%"class.sksg::(anonymous namespace)::Inverse.3" = type { %"class.sksg::Transform.base", %class.sk_sp, %class.SkMatrix }

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN4sksg9TransformD0Ev = comdat any

$_ZTVN4sksg9TransformE = comdat any

@_ZTVN4sksg9TransformE = linkonce_odr hidden unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::Transform"*)* @_ZN4sksg9TransformD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@_ZTVN4sksg15TransformEffectE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::TransformEffect"*)* @_ZN4sksg15TransformEffectD2Ev to i8*), i8* bitcast (void (%"class.sksg::TransformEffect"*)* @_ZN4sksg15TransformEffectD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::TransformEffect"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg15TransformEffect12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::TransformEffect"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*)* @_ZNK4sksg15TransformEffect8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE to i8*), i8* bitcast (%"class.sksg::RenderNode"* (%"class.sksg::TransformEffect"*, %struct.SkPoint*)* @_ZNK4sksg15TransformEffect8onNodeAtERK7SkPoint to i8*)] }, align 8
@_ZTVN4sksg12_GLOBAL__N_16ConcatI5SkM44EE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::(anonymous namespace)::Concat"*)* @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44ED2Ev to i8*), i8* bitcast (void (%"class.sksg::(anonymous namespace)::Concat"*)* @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44ED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::(anonymous namespace)::Concat"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44E12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (i1 (%"class.sksg::(anonymous namespace)::Concat"*)* @_ZNK4sksg12_GLOBAL__N_16ConcatI5SkM44E4is44Ev to i8*), i8* bitcast (void (%class.SkMatrix*, %"class.sksg::(anonymous namespace)::Concat"*)* @_ZNK4sksg12_GLOBAL__N_16ConcatI5SkM44E8asMatrixEv to i8*), i8* bitcast (void (%class.SkM44*, %"class.sksg::(anonymous namespace)::Concat"*)* @_ZNK4sksg12_GLOBAL__N_16ConcatI5SkM44E5asM44Ev to i8*)] }, align 8
@constinit = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00], align 4
@_ZTVN4sksg12_GLOBAL__N_16ConcatI8SkMatrixEE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::(anonymous namespace)::Concat.2"*)* @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixED2Ev to i8*), i8* bitcast (void (%"class.sksg::(anonymous namespace)::Concat.2"*)* @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::(anonymous namespace)::Concat.2"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixE12onRevalidateEPNS_22InvalidationControllerERKS2_ to i8*), i8* bitcast (i1 (%"class.sksg::(anonymous namespace)::Concat.2"*)* @_ZNK4sksg12_GLOBAL__N_16ConcatI8SkMatrixE4is44Ev to i8*), i8* bitcast (void (%class.SkMatrix*, %"class.sksg::(anonymous namespace)::Concat.2"*)* @_ZNK4sksg12_GLOBAL__N_16ConcatI8SkMatrixE8asMatrixEv to i8*), i8* bitcast (void (%class.SkM44*, %"class.sksg::(anonymous namespace)::Concat.2"*)* @_ZNK4sksg12_GLOBAL__N_16ConcatI8SkMatrixE5asM44Ev to i8*)] }, align 8
@_ZTVN4sksg12_GLOBAL__N_17InverseI5SkM44EE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::(anonymous namespace)::Inverse"*)* @_ZN4sksg12_GLOBAL__N_17InverseI5SkM44ED2Ev to i8*), i8* bitcast (void (%"class.sksg::(anonymous namespace)::Inverse"*)* @_ZN4sksg12_GLOBAL__N_17InverseI5SkM44ED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::(anonymous namespace)::Inverse"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg12_GLOBAL__N_17InverseI5SkM44E12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (i1 (%"class.sksg::(anonymous namespace)::Inverse"*)* @_ZNK4sksg12_GLOBAL__N_17InverseI5SkM44E4is44Ev to i8*), i8* bitcast (void (%class.SkMatrix*, %"class.sksg::(anonymous namespace)::Inverse"*)* @_ZNK4sksg12_GLOBAL__N_17InverseI5SkM44E8asMatrixEv to i8*), i8* bitcast (void (%class.SkM44*, %"class.sksg::(anonymous namespace)::Inverse"*)* @_ZNK4sksg12_GLOBAL__N_17InverseI5SkM44E5asM44Ev to i8*)] }, align 8
@.ref.tmp = private unnamed_addr constant %class.SkM44 { [16 x float] [float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00] }, align 4
@_ZTVN4sksg12_GLOBAL__N_17InverseI8SkMatrixEE = internal unnamed_addr constant { [9 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::(anonymous namespace)::Inverse.3"*)* @_ZN4sksg12_GLOBAL__N_17InverseI8SkMatrixED2Ev to i8*), i8* bitcast (void (%"class.sksg::(anonymous namespace)::Inverse.3"*)* @_ZN4sksg12_GLOBAL__N_17InverseI8SkMatrixED0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::(anonymous namespace)::Inverse.3"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg12_GLOBAL__N_17InverseI8SkMatrixE12onRevalidateEPNS_22InvalidationControllerERKS2_ to i8*), i8* bitcast (i1 (%"class.sksg::(anonymous namespace)::Inverse.3"*)* @_ZNK4sksg12_GLOBAL__N_17InverseI8SkMatrixE4is44Ev to i8*), i8* bitcast (void (%class.SkMatrix*, %"class.sksg::(anonymous namespace)::Inverse.3"*)* @_ZNK4sksg12_GLOBAL__N_17InverseI8SkMatrixE8asMatrixEv to i8*), i8* bitcast (void (%class.SkM44*, %"class.sksg::(anonymous namespace)::Inverse.3"*)* @_ZNK4sksg12_GLOBAL__N_17InverseI8SkMatrixE5asM44Ev to i8*)] }, align 8

@_ZN4sksg15TransformEffectC1E5sk_spINS_10RenderNodeEES1_INS_9TransformEE = hidden unnamed_addr alias void (%"class.sksg::TransformEffect"*, %class.sk_sp.4*, %class.sk_sp*), void (%"class.sksg::TransformEffect"*, %class.sk_sp.4*, %class.sk_sp*)* @_ZN4sksg15TransformEffectC2E5sk_spINS_10RenderNodeEES1_INS_9TransformEE
@_ZN4sksg15TransformEffectD1Ev = hidden unnamed_addr alias void (%"class.sksg::TransformEffect"*), void (%"class.sksg::TransformEffect"*)* @_ZN4sksg15TransformEffectD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg6MatrixI8SkMatrixE8asMatrixEv(%class.SkMatrix* noalias nocapture sret, %"class.sksg::Matrix"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1
  %4 = bitcast %class.SkMatrix* %0 to i8*
  %5 = bitcast %class.SkMatrix* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 40, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK4sksg6MatrixI8SkMatrixE5asM44Ev(%class.SkM44* noalias nocapture sret, %"class.sksg::Matrix"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1
  %4 = bitcast %class.SkMatrix* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 2
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 3
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 4
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 5
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 6
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.sksg::Matrix", %"class.sksg::Matrix"* %1, i64 0, i32 1, i32 0, i64 8
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = bitcast %class.SkM44* %0 to i32*
  store i32 %5, i32* %30, align 4
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %14, i32* %32, align 4
  %33 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %33, align 4
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %35 = bitcast float* %34 to i32*
  store i32 %23, i32* %35, align 4
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %37 = bitcast float* %36 to i32*
  store i32 %8, i32* %37, align 4
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %39 = bitcast float* %38 to i32*
  store i32 %17, i32* %39, align 4
  %40 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %40, align 4
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %42 = bitcast float* %41 to i32*
  store i32 %26, i32* %42, align 4
  %43 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %44 = bitcast float* %43 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %44, align 4
  %45 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %46 = bitcast float* %45 to i32*
  store i32 %11, i32* %46, align 4
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %48 = bitcast float* %47 to i32*
  store i32 %20, i32* %48, align 4
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  store float 0.000000e+00, float* %49, align 4
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %51 = bitcast float* %50 to i32*
  store i32 %29, i32* %51, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK4sksg6MatrixI5SkM44E8asMatrixEv(%class.SkMatrix* noalias nocapture sret, %"class.sksg::Matrix.1"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1
  %4 = bitcast %class.SkM44* %3 to i32*
  %5 = load i32, i32* %4, align 4, !noalias !2
  %6 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 4
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !2
  %9 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 12
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4, !noalias !2
  %12 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 1
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !2
  %15 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 5
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !2
  %18 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 13
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !2
  %21 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 3
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4, !noalias !2
  %24 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4, !noalias !2
  %27 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1, i32 0, i64 15
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4, !noalias !2
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %39 = bitcast %class.SkMatrix* %0 to i32*
  store i32 %5, i32* %39, align 4, !alias.scope !5
  %40 = bitcast float* %31 to i32*
  store i32 %8, i32* %40, align 4, !alias.scope !5
  %41 = bitcast float* %32 to i32*
  store i32 %11, i32* %41, align 4, !alias.scope !5
  %42 = bitcast float* %33 to i32*
  store i32 %14, i32* %42, align 4, !alias.scope !5
  %43 = bitcast float* %34 to i32*
  store i32 %17, i32* %43, align 4, !alias.scope !5
  %44 = bitcast float* %35 to i32*
  store i32 %20, i32* %44, align 4, !alias.scope !5
  %45 = bitcast float* %36 to i32*
  store i32 %23, i32* %45, align 4, !alias.scope !5
  %46 = bitcast float* %37 to i32*
  store i32 %26, i32* %46, align 4, !alias.scope !5
  %47 = bitcast float* %38 to i32*
  store i32 %29, i32* %47, align 4, !alias.scope !5
  store i32 128, i32* %30, align 4, !alias.scope !5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg6MatrixI5SkM44E5asM44Ev(%class.SkM44* noalias nocapture sret, %"class.sksg::Matrix.1"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Matrix.1", %"class.sksg::Matrix.1"* %1, i64 0, i32 1
  %4 = bitcast %class.SkM44* %0 to i8*
  %5 = bitcast %class.SkM44* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg9TransformC2Ev(%"class.sksg::Transform"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sksg::Transform"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* %2, i32 1) #10
  %3 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg9TransformE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

declare void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"*, i32) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg9Transform10MakeConcatE5sk_spIS0_ES2_(%class.sk_sp* noalias nocapture sret, %class.sk_sp* nocapture, %class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.sk_sp.5, align 8
  %5 = alloca %class.sk_sp.5, align 8
  %6 = alloca %class.sk_sp.5, align 8
  %7 = alloca %class.sk_sp.5, align 8
  %8 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %9 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %8, align 8
  %10 = icmp eq %"class.sksg::Transform"* %9, null
  %11 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %12 = ptrtoint %"class.sksg::Transform"* %9 to i64
  br i1 %10, label %13, label %17

13:                                               ; preds = %3
  %14 = bitcast %class.sk_sp* %2 to i64*
  %15 = load i64, i64* %14, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %11, align 8
  %16 = bitcast %class.sk_sp* %0 to i64*
  store i64 %15, i64* %16, align 8
  br label %160

17:                                               ; preds = %3
  %18 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %11, align 8
  %19 = icmp eq %"class.sksg::Transform"* %18, null
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %8, align 8
  %21 = bitcast %class.sk_sp* %0 to i64*
  store i64 %12, i64* %21, align 8
  br label %160

22:                                               ; preds = %17
  %23 = bitcast %"class.sksg::Transform"* %9 to i1 (%"class.sksg::Transform"*)***
  %24 = load i1 (%"class.sksg::Transform"*)**, i1 (%"class.sksg::Transform"*)*** %23, align 8
  %25 = getelementptr inbounds i1 (%"class.sksg::Transform"*)*, i1 (%"class.sksg::Transform"*)** %24, i64 4
  %26 = load i1 (%"class.sksg::Transform"*)*, i1 (%"class.sksg::Transform"*)** %25, align 8
  %27 = tail call zeroext i1 %26(%"class.sksg::Transform"* nonnull %9) #10
  br i1 %27, label %35, label %28

28:                                               ; preds = %22
  %29 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %11, align 8
  %30 = bitcast %"class.sksg::Transform"* %29 to i1 (%"class.sksg::Transform"*)***
  %31 = load i1 (%"class.sksg::Transform"*)**, i1 (%"class.sksg::Transform"*)*** %30, align 8
  %32 = getelementptr inbounds i1 (%"class.sksg::Transform"*)*, i1 (%"class.sksg::Transform"*)** %31, i64 4
  %33 = load i1 (%"class.sksg::Transform"*)*, i1 (%"class.sksg::Transform"*)** %32, align 8
  %34 = tail call zeroext i1 %33(%"class.sksg::Transform"* %29) #10
  br i1 %34, label %35, label %92

35:                                               ; preds = %28, %22
  %36 = tail call i8* @_Znwm(i64 128) #11
  %37 = bitcast %class.sk_sp* %1 to i64*
  %38 = load i64, i64* %37, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %8, align 8
  %39 = bitcast %class.sk_sp* %2 to i64*
  %40 = load i64, i64* %39, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %11, align 8
  %41 = bitcast i8* %36 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nonnull %41, i32 1) #10
  %42 = bitcast i8* %36 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_16ConcatI5SkM44EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8
  %43 = getelementptr inbounds i8, i8* %36, i64 48
  %44 = bitcast i8* %43 to i64*
  store i64 %38, i64* %44, align 8
  %45 = getelementptr inbounds i8, i8* %36, i64 56
  %46 = bitcast i8* %45 to i64*
  store i64 %40, i64* %46, align 8
  %47 = getelementptr inbounds i8, i8* %36, i64 64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #10
  %48 = bitcast %class.sk_sp.5* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #10
  %49 = inttoptr i64 %38 to %"class.sksg::Transform"*
  %50 = icmp eq i64 %38, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %35
  %52 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %49, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = atomicrmw add i32* %52, i32 1 monotonic
  br label %54

54:                                               ; preds = %51, %35
  %55 = bitcast %class.sk_sp.5* %4 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %49, %"class.sksg::Transform"** %55, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %41, %class.sk_sp.5* nonnull dereferenceable(8) %4) #10
  %56 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %4, i64 0, i32 0
  %57 = load %"class.sksg::Node"*, %"class.sksg::Node"** %56, align 8
  %58 = icmp eq %"class.sksg::Node"* %57, null
  br i1 %58, label %69, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %57, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %61 = atomicrmw add i32* %60, i32 -1 acq_rel
  %62 = icmp eq i32 %61, 1
  br i1 %62, label %63, label %69

63:                                               ; preds = %59
  %64 = bitcast %"class.sksg::Node"* %57 to %class.SkRefCntBase*
  %65 = bitcast %"class.sksg::Node"* %57 to void (%class.SkRefCntBase*)***
  %66 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %65, align 8
  %67 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %66, i64 2
  %68 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %67, align 8
  call void %68(%class.SkRefCntBase* nonnull %64) #10
  br label %69

69:                                               ; preds = %63, %59, %54
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #10
  %70 = bitcast %class.sk_sp.5* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %70) #10
  %71 = bitcast i8* %45 to %"class.sksg::Transform"**
  %72 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %71, align 8
  %73 = icmp eq %"class.sksg::Transform"* %72, null
  br i1 %73, label %77, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %72, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = atomicrmw add i32* %75, i32 1 monotonic
  br label %77

77:                                               ; preds = %74, %69
  %78 = bitcast %class.sk_sp.5* %5 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %72, %"class.sksg::Transform"** %78, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %41, %class.sk_sp.5* nonnull dereferenceable(8) %5) #10
  %79 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %5, i64 0, i32 0
  %80 = load %"class.sksg::Node"*, %"class.sksg::Node"** %79, align 8
  %81 = icmp eq %"class.sksg::Node"* %80, null
  br i1 %81, label %158, label %82

82:                                               ; preds = %77
  %83 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %80, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = atomicrmw add i32* %83, i32 -1 acq_rel
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %158

86:                                               ; preds = %82
  %87 = bitcast %"class.sksg::Node"* %80 to %class.SkRefCntBase*
  %88 = bitcast %"class.sksg::Node"* %80 to void (%class.SkRefCntBase*)***
  %89 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %88, align 8
  %90 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %89, i64 2
  %91 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %90, align 8
  call void %91(%class.SkRefCntBase* nonnull %87) #10
  br label %158

92:                                               ; preds = %28
  %93 = tail call i8* @_Znwm(i64 104) #11
  %94 = bitcast %class.sk_sp* %1 to i64*
  %95 = load i64, i64* %94, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %8, align 8
  %96 = bitcast %class.sk_sp* %2 to i64*
  %97 = load i64, i64* %96, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %11, align 8
  %98 = bitcast i8* %93 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nonnull %98, i32 1) #10
  %99 = bitcast i8* %93 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_16ConcatI8SkMatrixEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %99, align 8
  %100 = getelementptr inbounds i8, i8* %93, i64 48
  %101 = bitcast i8* %100 to i64*
  store i64 %95, i64* %101, align 8
  %102 = getelementptr inbounds i8, i8* %93, i64 56
  %103 = bitcast i8* %102 to i64*
  store i64 %97, i64* %103, align 8
  %104 = getelementptr inbounds i8, i8* %93, i64 64
  %105 = bitcast i8* %104 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %105, align 4
  %106 = getelementptr inbounds i8, i8* %93, i64 80
  %107 = bitcast i8* %106 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %107, align 4
  %108 = getelementptr inbounds i8, i8* %93, i64 96
  %109 = bitcast i8* %108 to float*
  store float 1.000000e+00, float* %109, align 4
  %110 = getelementptr inbounds i8, i8* %93, i64 100
  %111 = bitcast i8* %110 to i32*
  store i32 16, i32* %111, align 4
  %112 = bitcast %class.sk_sp.5* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #10
  %113 = inttoptr i64 %95 to %"class.sksg::Transform"*
  %114 = icmp eq i64 %95, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %92
  %116 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %113, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = atomicrmw add i32* %116, i32 1 monotonic
  br label %118

118:                                              ; preds = %115, %92
  %119 = bitcast %class.sk_sp.5* %6 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %113, %"class.sksg::Transform"** %119, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %98, %class.sk_sp.5* nonnull dereferenceable(8) %6) #10
  %120 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %6, i64 0, i32 0
  %121 = load %"class.sksg::Node"*, %"class.sksg::Node"** %120, align 8
  %122 = icmp eq %"class.sksg::Node"* %121, null
  br i1 %122, label %133, label %123

123:                                              ; preds = %118
  %124 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %121, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = atomicrmw add i32* %124, i32 -1 acq_rel
  %126 = icmp eq i32 %125, 1
  br i1 %126, label %127, label %133

127:                                              ; preds = %123
  %128 = bitcast %"class.sksg::Node"* %121 to %class.SkRefCntBase*
  %129 = bitcast %"class.sksg::Node"* %121 to void (%class.SkRefCntBase*)***
  %130 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %129, align 8
  %131 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %130, i64 2
  %132 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %131, align 8
  call void %132(%class.SkRefCntBase* nonnull %128) #10
  br label %133

133:                                              ; preds = %127, %123, %118
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #10
  %134 = bitcast %class.sk_sp.5* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %134) #10
  %135 = bitcast i8* %102 to %"class.sksg::Transform"**
  %136 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %135, align 8
  %137 = icmp eq %"class.sksg::Transform"* %136, null
  br i1 %137, label %141, label %138

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %136, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = atomicrmw add i32* %139, i32 1 monotonic
  br label %141

141:                                              ; preds = %138, %133
  %142 = bitcast %class.sk_sp.5* %7 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %136, %"class.sksg::Transform"** %142, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %98, %class.sk_sp.5* nonnull dereferenceable(8) %7) #10
  %143 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %7, i64 0, i32 0
  %144 = load %"class.sksg::Node"*, %"class.sksg::Node"** %143, align 8
  %145 = icmp eq %"class.sksg::Node"* %144, null
  br i1 %145, label %156, label %146

146:                                              ; preds = %141
  %147 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %144, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = atomicrmw add i32* %147, i32 -1 acq_rel
  %149 = icmp eq i32 %148, 1
  br i1 %149, label %150, label %156

150:                                              ; preds = %146
  %151 = bitcast %"class.sksg::Node"* %144 to %class.SkRefCntBase*
  %152 = bitcast %"class.sksg::Node"* %144 to void (%class.SkRefCntBase*)***
  %153 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %152, align 8
  %154 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %153, i64 2
  %155 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %154, align 8
  call void %155(%class.SkRefCntBase* nonnull %151) #10
  br label %156

156:                                              ; preds = %141, %146, %150
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %134) #10
  %157 = bitcast %class.sk_sp* %0 to i8**
  store i8* %93, i8** %157, align 8
  br label %160

158:                                              ; preds = %77, %82, %86
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %70) #10
  %159 = bitcast %class.sk_sp* %0 to i8**
  store i8* %36, i8** %159, align 8
  br label %160

160:                                              ; preds = %156, %158, %20, %13
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg9Transform11MakeInverseE5sk_spIS0_E(%class.sk_sp* noalias nocapture sret, %class.sk_sp* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.5, align 8
  %4 = alloca %class.sk_sp.5, align 8
  %5 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %6 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %5, align 8
  %7 = icmp eq %"class.sksg::Transform"* %6, null
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %0, i64 0, i32 0
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %9, align 8
  br label %87

10:                                               ; preds = %2
  %11 = bitcast %"class.sksg::Transform"* %6 to i1 (%"class.sksg::Transform"*)***
  %12 = load i1 (%"class.sksg::Transform"*)**, i1 (%"class.sksg::Transform"*)*** %11, align 8
  %13 = getelementptr inbounds i1 (%"class.sksg::Transform"*)*, i1 (%"class.sksg::Transform"*)** %12, i64 4
  %14 = load i1 (%"class.sksg::Transform"*)*, i1 (%"class.sksg::Transform"*)** %13, align 8
  %15 = tail call zeroext i1 %14(%"class.sksg::Transform"* nonnull %6) #10
  br i1 %15, label %16, label %46

16:                                               ; preds = %10
  %17 = tail call i8* @_Znwm(i64 120) #11
  %18 = bitcast %class.sk_sp* %1 to i64*
  %19 = load i64, i64* %18, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %5, align 8
  %20 = bitcast i8* %17 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nonnull %20, i32 1) #10
  %21 = bitcast i8* %17 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_17InverseI5SkM44EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %21, align 8
  %22 = getelementptr inbounds i8, i8* %17, i64 48
  %23 = bitcast i8* %22 to i64*
  store i64 %19, i64* %23, align 8
  %24 = getelementptr inbounds i8, i8* %17, i64 56
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* align 4 bitcast ([16 x float]* @constinit to i8*), i64 64, i1 false) #10
  %25 = bitcast %class.sk_sp.5* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #10
  %26 = inttoptr i64 %19 to %"class.sksg::Transform"*
  %27 = icmp eq i64 %19, 0
  br i1 %27, label %31, label %28

28:                                               ; preds = %16
  %29 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %26, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = atomicrmw add i32* %29, i32 1 monotonic
  br label %31

31:                                               ; preds = %28, %16
  %32 = bitcast %class.sk_sp.5* %3 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %26, %"class.sksg::Transform"** %32, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %20, %class.sk_sp.5* nonnull dereferenceable(8) %3) #10
  %33 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %3, i64 0, i32 0
  %34 = load %"class.sksg::Node"*, %"class.sksg::Node"** %33, align 8
  %35 = icmp eq %"class.sksg::Node"* %34, null
  br i1 %35, label %85, label %36

36:                                               ; preds = %31
  %37 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %34, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %38 = atomicrmw add i32* %37, i32 -1 acq_rel
  %39 = icmp eq i32 %38, 1
  br i1 %39, label %40, label %85

40:                                               ; preds = %36
  %41 = bitcast %"class.sksg::Node"* %34 to %class.SkRefCntBase*
  %42 = bitcast %"class.sksg::Node"* %34 to void (%class.SkRefCntBase*)***
  %43 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %42, align 8
  %44 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %43, i64 2
  %45 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %44, align 8
  call void %45(%class.SkRefCntBase* nonnull %41) #10
  br label %85

46:                                               ; preds = %10
  %47 = tail call i8* @_Znwm(i64 96) #11
  %48 = bitcast %class.sk_sp* %1 to i64*
  %49 = load i64, i64* %48, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %5, align 8
  %50 = bitcast i8* %47 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nonnull %50, i32 1) #10
  %51 = bitcast i8* %47 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_17InverseI8SkMatrixEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %51, align 8
  %52 = getelementptr inbounds i8, i8* %47, i64 48
  %53 = bitcast i8* %52 to i64*
  store i64 %49, i64* %53, align 8
  %54 = getelementptr inbounds i8, i8* %47, i64 56
  %55 = bitcast i8* %54 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %55, align 4
  %56 = getelementptr inbounds i8, i8* %47, i64 72
  %57 = bitcast i8* %56 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %57, align 4
  %58 = getelementptr inbounds i8, i8* %47, i64 88
  %59 = bitcast i8* %58 to float*
  store float 1.000000e+00, float* %59, align 4
  %60 = getelementptr inbounds i8, i8* %47, i64 92
  %61 = bitcast i8* %60 to i32*
  store i32 16, i32* %61, align 4
  %62 = bitcast %class.sk_sp.5* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #10
  %63 = inttoptr i64 %49 to %"class.sksg::Transform"*
  %64 = icmp eq i64 %49, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %46
  %66 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %63, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %67 = atomicrmw add i32* %66, i32 1 monotonic
  br label %68

68:                                               ; preds = %65, %46
  %69 = bitcast %class.sk_sp.5* %4 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %63, %"class.sksg::Transform"** %69, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %50, %class.sk_sp.5* nonnull dereferenceable(8) %4) #10
  %70 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %4, i64 0, i32 0
  %71 = load %"class.sksg::Node"*, %"class.sksg::Node"** %70, align 8
  %72 = icmp eq %"class.sksg::Node"* %71, null
  br i1 %72, label %83, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %71, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = atomicrmw add i32* %74, i32 -1 acq_rel
  %76 = icmp eq i32 %75, 1
  br i1 %76, label %77, label %83

77:                                               ; preds = %73
  %78 = bitcast %"class.sksg::Node"* %71 to %class.SkRefCntBase*
  %79 = bitcast %"class.sksg::Node"* %71 to void (%class.SkRefCntBase*)***
  %80 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %79, align 8
  %81 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %80, i64 2
  %82 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %81, align 8
  call void %82(%class.SkRefCntBase* nonnull %78) #10
  br label %83

83:                                               ; preds = %77, %73, %68
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #10
  %84 = bitcast %class.sk_sp* %0 to i8**
  store i8* %47, i8** %84, align 8
  br label %87

85:                                               ; preds = %40, %36, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #10
  %86 = bitcast %class.sk_sp* %0 to i8**
  store i8* %17, i8** %86, align 8
  br label %87

87:                                               ; preds = %83, %85, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg15TransformEffectC2E5sk_spINS_10RenderNodeEES1_INS_9TransformEE(%"class.sksg::TransformEffect"*, %class.sk_sp.4* nocapture, %class.sk_sp* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %class.sk_sp.4, align 8
  %5 = alloca %class.sk_sp.5, align 8
  %6 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.sk_sp.4, %class.sk_sp.4* %1, i64 0, i32 0
  %8 = bitcast %class.sk_sp.4* %1 to i64*
  %9 = load i64, i64* %8, align 8
  store %"class.sksg::RenderNode"* null, %"class.sksg::RenderNode"** %7, align 8
  %10 = bitcast %class.sk_sp.4* %4 to i64*
  store i64 %9, i64* %10, align 8
  call void @_ZN4sksg10EffectNodeC2E5sk_spINS_10RenderNodeEEj(%"class.sksg::EffectNode"* %6, %class.sk_sp.4* nonnull %4, i32 0) #10
  %11 = getelementptr inbounds %class.sk_sp.4, %class.sk_sp.4* %4, i64 0, i32 0
  %12 = load %"class.sksg::RenderNode"*, %"class.sksg::RenderNode"** %11, align 8
  %13 = icmp eq %"class.sksg::RenderNode"* %12, null
  br i1 %13, label %24, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.sksg::RenderNode", %"class.sksg::RenderNode"* %12, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw add i32* %15, i32 -1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %24

18:                                               ; preds = %14
  %19 = bitcast %"class.sksg::RenderNode"* %12 to %class.SkRefCntBase*
  %20 = bitcast %"class.sksg::RenderNode"* %12 to void (%class.SkRefCntBase*)***
  %21 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %20, align 8
  %22 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %21, i64 2
  %23 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, align 8
  call void %23(%class.SkRefCntBase* nonnull %19) #10
  br label %24

24:                                               ; preds = %3, %14, %18
  %25 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg15TransformEffectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8
  %26 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 1
  %27 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %2, i64 0, i32 0
  %28 = bitcast %class.sk_sp* %2 to i64*
  %29 = load i64, i64* %28, align 8
  store %"class.sksg::Transform"* null, %"class.sksg::Transform"** %27, align 8
  %30 = bitcast %class.sk_sp* %26 to i64*
  store i64 %29, i64* %30, align 8
  %31 = bitcast %"class.sksg::TransformEffect"* %0 to %"class.sksg::Node"*
  %32 = bitcast %class.sk_sp.5* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #10
  %33 = inttoptr i64 %29 to %"class.sksg::Transform"*
  %34 = icmp eq i64 %29, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %24
  %36 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %33, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = atomicrmw add i32* %36, i32 1 monotonic
  br label %38

38:                                               ; preds = %24, %35
  %39 = bitcast %class.sk_sp.5* %5 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %33, %"class.sksg::Transform"** %39, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* %31, %class.sk_sp.5* nonnull dereferenceable(8) %5) #10
  %40 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %5, i64 0, i32 0
  %41 = load %"class.sksg::Node"*, %"class.sksg::Node"** %40, align 8
  %42 = icmp eq %"class.sksg::Node"* %41, null
  br i1 %42, label %53, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %41, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = atomicrmw add i32* %44, i32 -1 acq_rel
  %46 = icmp eq i32 %45, 1
  br i1 %46, label %47, label %53

47:                                               ; preds = %43
  %48 = bitcast %"class.sksg::Node"* %41 to %class.SkRefCntBase*
  %49 = bitcast %"class.sksg::Node"* %41 to void (%class.SkRefCntBase*)***
  %50 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %49, align 8
  %51 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %50, i64 2
  %52 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %51, align 8
  call void %52(%class.SkRefCntBase* nonnull %48) #10
  br label %53

53:                                               ; preds = %38, %43, %47
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #10
  ret void
}

declare void @_ZN4sksg10EffectNodeC2E5sk_spINS_10RenderNodeEEj(%"class.sksg::EffectNode"*, %class.sk_sp.4*, i32) unnamed_addr #3

declare void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp.5* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg15TransformEffectD2Ev(%"class.sksg::TransformEffect"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg15TransformEffectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::TransformEffect"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %8 = icmp eq %"class.sksg::Transform"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %1, %9
  %13 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %7, %"class.sksg::Transform"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %12, %17, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %29 = icmp eq %"class.sksg::Transform"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Transform"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Transform"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  %41 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0
  call void @_ZN4sksg10EffectNodeD2Ev(%"class.sksg::EffectNode"* %41) #10
  ret void
}

declare void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp.5* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN4sksg10EffectNodeD2Ev(%"class.sksg::EffectNode"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg15TransformEffectD0Ev(%"class.sksg::TransformEffect"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4sksg15TransformEffectE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::TransformEffect"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %8 = icmp eq %"class.sksg::Transform"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %9, %1
  %13 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %7, %"class.sksg::Transform"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %21, %17, %12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %29 = icmp eq %"class.sksg::Transform"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Transform"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Transform"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  %41 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0
  call void @_ZN4sksg10EffectNodeD2Ev(%"class.sksg::EffectNode"* %41) #10
  %42 = bitcast %"class.sksg::TransformEffect"* %0 to i8*
  call void @_ZdlPv(i8* %42) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg15TransformEffect8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE(%"class.sksg::TransformEffect"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkM44, align 4
  %5 = icmp eq %class.SkCanvas* %1, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas* nonnull %1) #10
  %8 = tail call i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas* nonnull %1) #10
  br label %9

9:                                                ; preds = %3, %6
  %10 = phi i32 [ 0, %3 ], [ %7, %6 ]
  %11 = bitcast %class.SkM44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %11) #10
  %12 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 1, i32 0
  %13 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %12, align 8, !noalias !8
  %14 = bitcast %"class.sksg::Transform"* %13 to void (%class.SkM44*, %"class.sksg::Transform"*)***
  %15 = load void (%class.SkM44*, %"class.sksg::Transform"*)**, void (%class.SkM44*, %"class.sksg::Transform"*)*** %14, align 8, !noalias !8
  %16 = getelementptr inbounds void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %15, i64 6
  %17 = load void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %16, align 8, !noalias !8
  call void %17(%class.SkM44* nonnull sret %4, %"class.sksg::Transform"* %13) #10
  call void @_ZN8SkCanvas6concatERK5SkM44(%class.SkCanvas* %1, %class.SkM44* nonnull dereferenceable(64) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %11) #10
  %18 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0
  call void @_ZNK4sksg10EffectNode8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE(%"class.sksg::EffectNode"* %18, %class.SkCanvas* %1, %"struct.sksg::RenderNode::RenderContext"* %2) #10
  br i1 %5, label %20, label %19

19:                                               ; preds = %9
  call void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas* nonnull %1, i32 %10) #10
  br label %20

20:                                               ; preds = %9, %19
  ret void
}

declare void @_ZN8SkCanvas6concatERK5SkM44(%class.SkCanvas*, %class.SkM44* dereferenceable(64)) local_unnamed_addr #3

declare void @_ZNK4sksg10EffectNode8onRenderEP8SkCanvasPKNS_10RenderNode13RenderContextE(%"class.sksg::EffectNode"*, %class.SkCanvas*, %"struct.sksg::RenderNode::RenderContext"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.sksg::RenderNode"* @_ZNK4sksg15TransformEffect8onNodeAtERK7SkPoint(%"class.sksg::TransformEffect"*, %struct.SkPoint* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = alloca %class.SkM44, align 4
  %4 = alloca %struct.SkPoint, align 4
  %5 = bitcast %class.SkM44* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8, !noalias !11
  %8 = bitcast %"class.sksg::Transform"* %7 to void (%class.SkM44*, %"class.sksg::Transform"*)***
  %9 = load void (%class.SkM44*, %"class.sksg::Transform"*)**, void (%class.SkM44*, %"class.sksg::Transform"*)*** %8, align 8, !noalias !11
  %10 = getelementptr inbounds void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %9, i64 6
  %11 = load void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %10, align 8, !noalias !11
  call void %11(%class.SkM44* nonnull sret %3, %"class.sksg::Transform"* %7) #10
  %12 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = call { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44* nonnull %3, float %13, float %15, float 0.000000e+00, float 0.000000e+00) #10
  %17 = extractvalue { <2 x float>, <2 x float> } %16, 0
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #10
  %18 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0
  %19 = bitcast %struct.SkPoint* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %4, i64 0, i32 0
  %21 = extractelement <2 x float> %17, i32 0
  store float %21, float* %20, align 4
  %22 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %4, i64 0, i32 1
  %23 = extractelement <2 x float> %17, i32 1
  store float %23, float* %22, align 4
  %24 = call %"class.sksg::RenderNode"* @_ZNK4sksg10EffectNode8onNodeAtERK7SkPoint(%"class.sksg::EffectNode"* %18, %struct.SkPoint* nonnull dereferenceable(8) %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  ret %"class.sksg::RenderNode"* %24
}

declare { <2 x float>, <2 x float> } @_ZNK5SkM443mapEffff(%class.SkM44*, float, float, float, float) local_unnamed_addr #3

declare %"class.sksg::RenderNode"* @_ZNK4sksg10EffectNode8onNodeAtERK7SkPoint(%"class.sksg::EffectNode"*, %struct.SkPoint* dereferenceable(8)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg15TransformEffect12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::TransformEffect"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca { <2 x float>, <2 x float> }, align 8
  %5 = bitcast { <2 x float>, <2 x float> }* %4 to %struct.SkRect*
  %6 = alloca %class.SkMatrix, align 4
  %7 = alloca %class.SkMatrix, align 16
  %8 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 1, i32 0
  %9 = bitcast %"class.sksg::Transform"** %8 to %"class.sksg::Node"**
  %10 = load %"class.sksg::Node"*, %"class.sksg::Node"** %9, align 8
  %11 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %10, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %12 = bitcast %class.SkMatrix* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %12, i8 -1, i64 36, i1 false)
  %13 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %6, i64 0, i32 1
  store i32 -1431655766, i32* %13, align 4
  %14 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %8, align 8, !noalias !14
  %15 = bitcast %"class.sksg::Transform"* %14 to void (%class.SkMatrix*, %"class.sksg::Transform"*)***
  %16 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)**, void (%class.SkMatrix*, %"class.sksg::Transform"*)*** %15, align 8, !noalias !14
  %17 = getelementptr inbounds void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %16, i64 5
  %18 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %17, align 8, !noalias !14
  call void %18(%class.SkMatrix* nonnull sret %6, %"class.sksg::Transform"* %14) #10
  %19 = getelementptr inbounds %"class.sksg::TransformEffect", %"class.sksg::TransformEffect"* %0, i64 0, i32 0
  %20 = bitcast %class.SkMatrix* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %20) #10
  %21 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 1
  %22 = bitcast %class.SkMatrix* %7 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %22, align 16, !alias.scope !17
  %23 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 4
  %24 = bitcast float* %23 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, <4 x float>* %24, align 16, !alias.scope !17
  %25 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %7, i64 0, i32 0, i64 8
  store float 1.000000e+00, float* %25, align 16, !alias.scope !17
  store i32 16, i32* %21, align 4, !alias.scope !17
  %26 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* nonnull %7, %class.SkMatrix* dereferenceable(40) %2, %class.SkMatrix* nonnull dereferenceable(40) %6) #10
  %27 = call { <2 x float>, <2 x float> } @_ZN4sksg10EffectNode12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::EffectNode"* %19, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* nonnull dereferenceable(40) %7) #10
  %28 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 0
  %29 = extractvalue { <2 x float>, <2 x float> } %27, 0
  store <2 x float> %29, <2 x float>* %28, align 8
  %30 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %4, i64 0, i32 1
  %31 = extractvalue { <2 x float>, <2 x float> } %27, 1
  store <2 x float> %31, <2 x float>* %30, align 8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %20) #10
  %32 = call zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix* nonnull %6, %struct.SkRect* nonnull %5, %struct.SkRect* nonnull dereferenceable(16) %5, i32 1) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #10
  %33 = load <2 x float>, <2 x float>* %28, align 8
  %34 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %33, 0
  %35 = load <2 x float>, <2 x float>* %30, align 8
  %36 = insertvalue { <2 x float>, <2 x float> } %34, <2 x float> %35, 1
  ret { <2 x float>, <2 x float> } %36
}

declare dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare { <2 x float>, <2 x float> } @_ZN4sksg10EffectNode12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::EffectNode"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg9TransformD0Ev(%"class.sksg::Transform"*) unnamed_addr #7 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare i32 @_ZNK8SkCanvas12getSaveCountEv(%class.SkCanvas*) local_unnamed_addr #3

declare i32 @_ZN8SkCanvas4saveEv(%class.SkCanvas*) local_unnamed_addr #3

declare void @_ZN8SkCanvas14restoreToCountEi(%class.SkCanvas*, i32) local_unnamed_addr #3

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix*, %class.SkMatrix* dereferenceable(40), %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #3

declare zeroext i1 @_ZNK8SkMatrix7mapRectEP6SkRectRKS0_22SkApplyPerspectiveClip(%class.SkMatrix*, %struct.SkRect*, %struct.SkRect* dereferenceable(16), i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44ED2Ev(%"class.sksg::(anonymous namespace)::Concat"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = alloca %class.sk_sp.5, align 8
  %4 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_16ConcatI5SkM44EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = bitcast %"class.sksg::(anonymous namespace)::Concat"* %0 to %"class.sksg::Node"*
  %6 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %0, i64 0, i32 1, i32 0
  %8 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %7, align 8
  %9 = icmp eq %"class.sksg::Transform"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %1, %10
  %14 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %8, %"class.sksg::Transform"** %14, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %5, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %15 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %16 = load %"class.sksg::Node"*, %"class.sksg::Node"** %15, align 8
  %17 = icmp eq %"class.sksg::Node"* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %16, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 -1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = bitcast %"class.sksg::Node"* %16 to %class.SkRefCntBase*
  %24 = bitcast %"class.sksg::Node"* %16 to void (%class.SkRefCntBase*)***
  %25 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %24, align 8
  %26 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, i64 2
  %27 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %26, align 8
  call void %27(%class.SkRefCntBase* nonnull %23) #10
  br label %28

28:                                               ; preds = %13, %18, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %29 = bitcast %class.sk_sp.5* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  %30 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %0, i64 0, i32 2, i32 0
  %31 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %30, align 8
  %32 = icmp eq %"class.sksg::Transform"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %31, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %28, %33
  %37 = bitcast %class.sk_sp.5* %3 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %31, %"class.sksg::Transform"** %37, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %5, %class.sk_sp.5* nonnull dereferenceable(8) %3) #10
  %38 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %3, i64 0, i32 0
  %39 = load %"class.sksg::Node"*, %"class.sksg::Node"** %38, align 8
  %40 = icmp eq %"class.sksg::Node"* %39, null
  br i1 %40, label %51, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %39, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 -1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = bitcast %"class.sksg::Node"* %39 to %class.SkRefCntBase*
  %47 = bitcast %"class.sksg::Node"* %39 to void (%class.SkRefCntBase*)***
  %48 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %47, align 8
  %49 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %48, i64 2
  %50 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %49, align 8
  call void %50(%class.SkRefCntBase* nonnull %46) #10
  br label %51

51:                                               ; preds = %36, %41, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  %52 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %30, align 8
  %53 = icmp eq %"class.sksg::Transform"* %52, null
  br i1 %53, label %64, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %52, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 -1 acq_rel
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = bitcast %"class.sksg::Transform"* %52 to %class.SkRefCntBase*
  %60 = bitcast %"class.sksg::Transform"* %52 to void (%class.SkRefCntBase*)***
  %61 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %60, align 8
  %62 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %61, i64 2
  %63 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %62, align 8
  call void %63(%class.SkRefCntBase* nonnull %59) #10
  br label %64

64:                                               ; preds = %51, %54, %58
  %65 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %7, align 8
  %66 = icmp eq %"class.sksg::Transform"* %65, null
  br i1 %66, label %77, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %65, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw add i32* %68, i32 -1 acq_rel
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = bitcast %"class.sksg::Transform"* %65 to %class.SkRefCntBase*
  %73 = bitcast %"class.sksg::Transform"* %65 to void (%class.SkRefCntBase*)***
  %74 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %73, align 8
  %75 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %74, i64 2
  %76 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %75, align 8
  call void %76(%class.SkRefCntBase* nonnull %72) #10
  br label %77

77:                                               ; preds = %64, %67, %71
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44ED0Ev(%"class.sksg::(anonymous namespace)::Concat"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44ED2Ev(%"class.sksg::(anonymous namespace)::Concat"* %0) #10
  %2 = bitcast %"class.sksg::(anonymous namespace)::Concat"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal { <2 x float>, <2 x float> } @_ZN4sksg12_GLOBAL__N_16ConcatI5SkM44E12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::(anonymous namespace)::Concat"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkM44, align 4
  %5 = alloca %class.SkM44, align 4
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %0, i64 0, i32 1, i32 0
  %7 = bitcast %"class.sksg::Transform"** %6 to %"class.sksg::Node"**
  %8 = load %"class.sksg::Node"*, %"class.sksg::Node"** %7, align 8
  %9 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %8, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %10 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %0, i64 0, i32 2, i32 0
  %11 = bitcast %"class.sksg::Transform"** %10 to %"class.sksg::Node"**
  %12 = load %"class.sksg::Node"*, %"class.sksg::Node"** %11, align 8
  %13 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %12, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %14 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %0, i64 0, i32 3
  %15 = bitcast %class.SkM44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #10
  %16 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8, !noalias !20
  %17 = bitcast %"class.sksg::Transform"* %16 to void (%class.SkM44*, %"class.sksg::Transform"*)***
  %18 = load void (%class.SkM44*, %"class.sksg::Transform"*)**, void (%class.SkM44*, %"class.sksg::Transform"*)*** %17, align 8, !noalias !20
  %19 = getelementptr inbounds void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %18, i64 6
  %20 = load void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %19, align 8, !noalias !20
  call void %20(%class.SkM44* nonnull sret %4, %"class.sksg::Transform"* %16) #10
  %21 = bitcast %class.SkM44* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %21) #10
  %22 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %10, align 8, !noalias !23
  %23 = bitcast %"class.sksg::Transform"* %22 to void (%class.SkM44*, %"class.sksg::Transform"*)***
  %24 = load void (%class.SkM44*, %"class.sksg::Transform"*)**, void (%class.SkM44*, %"class.sksg::Transform"*)*** %23, align 8, !noalias !23
  %25 = getelementptr inbounds void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %24, i64 6
  %26 = load void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %25, align 8, !noalias !23
  call void %26(%class.SkM44* nonnull sret %5, %"class.sksg::Transform"* %22) #10
  %27 = call dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44* %14, %class.SkM44* nonnull dereferenceable(64) %4, %class.SkM44* nonnull dereferenceable(64) %5) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #10
  ret { <2 x float>, <2 x float> } zeroinitializer
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK4sksg12_GLOBAL__N_16ConcatI5SkM44E4is44Ev(%"class.sksg::(anonymous namespace)::Concat"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_16ConcatI5SkM44E8asMatrixEv(%class.SkMatrix* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Concat"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3
  %4 = bitcast %class.SkM44* %3 to i32*
  %5 = load i32, i32* %4, align 4, !noalias !26
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 4
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !26
  %9 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 12
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4, !noalias !26
  %12 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 1
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !26
  %15 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 5
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !26
  %18 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 13
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !26
  %21 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 3
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4, !noalias !26
  %24 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4, !noalias !26
  %27 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3, i32 0, i64 15
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4, !noalias !26
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %39 = bitcast %class.SkMatrix* %0 to i32*
  store i32 %5, i32* %39, align 4, !alias.scope !31
  %40 = bitcast float* %31 to i32*
  store i32 %8, i32* %40, align 4, !alias.scope !31
  %41 = bitcast float* %32 to i32*
  store i32 %11, i32* %41, align 4, !alias.scope !31
  %42 = bitcast float* %33 to i32*
  store i32 %14, i32* %42, align 4, !alias.scope !31
  %43 = bitcast float* %34 to i32*
  store i32 %17, i32* %43, align 4, !alias.scope !31
  %44 = bitcast float* %35 to i32*
  store i32 %20, i32* %44, align 4, !alias.scope !31
  %45 = bitcast float* %36 to i32*
  store i32 %23, i32* %45, align 4, !alias.scope !31
  %46 = bitcast float* %37 to i32*
  store i32 %26, i32* %46, align 4, !alias.scope !31
  %47 = bitcast float* %38 to i32*
  store i32 %29, i32* %47, align 4, !alias.scope !31
  store i32 128, i32* %30, align 4, !alias.scope !31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_16ConcatI5SkM44E5asM44Ev(%class.SkM44* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Concat"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat", %"class.sksg::(anonymous namespace)::Concat"* %1, i64 0, i32 3
  %4 = bitcast %class.SkM44* %0 to i8*
  %5 = bitcast %class.SkM44* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 64, i1 false) #10
  ret void
}

declare dereferenceable(64) %class.SkM44* @_ZN5SkM449setConcatERKS_S1_(%class.SkM44*, %class.SkM44* dereferenceable(64), %class.SkM44* dereferenceable(64)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixED2Ev(%"class.sksg::(anonymous namespace)::Concat.2"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = alloca %class.sk_sp.5, align 8
  %4 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_16ConcatI8SkMatrixEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = bitcast %"class.sksg::(anonymous namespace)::Concat.2"* %0 to %"class.sksg::Node"*
  %6 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %0, i64 0, i32 1, i32 0
  %8 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %7, align 8
  %9 = icmp eq %"class.sksg::Transform"* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %1, %10
  %14 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %8, %"class.sksg::Transform"** %14, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %5, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %15 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %16 = load %"class.sksg::Node"*, %"class.sksg::Node"** %15, align 8
  %17 = icmp eq %"class.sksg::Node"* %16, null
  br i1 %17, label %28, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %16, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = atomicrmw add i32* %19, i32 -1 acq_rel
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  %23 = bitcast %"class.sksg::Node"* %16 to %class.SkRefCntBase*
  %24 = bitcast %"class.sksg::Node"* %16 to void (%class.SkRefCntBase*)***
  %25 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %24, align 8
  %26 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, i64 2
  %27 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %26, align 8
  call void %27(%class.SkRefCntBase* nonnull %23) #10
  br label %28

28:                                               ; preds = %13, %18, %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #10
  %29 = bitcast %class.sk_sp.5* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  %30 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %0, i64 0, i32 2, i32 0
  %31 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %30, align 8
  %32 = icmp eq %"class.sksg::Transform"* %31, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %28
  %34 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %31, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 1 monotonic
  br label %36

36:                                               ; preds = %28, %33
  %37 = bitcast %class.sk_sp.5* %3 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %31, %"class.sksg::Transform"** %37, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %5, %class.sk_sp.5* nonnull dereferenceable(8) %3) #10
  %38 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %3, i64 0, i32 0
  %39 = load %"class.sksg::Node"*, %"class.sksg::Node"** %38, align 8
  %40 = icmp eq %"class.sksg::Node"* %39, null
  br i1 %40, label %51, label %41

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %39, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = atomicrmw add i32* %42, i32 -1 acq_rel
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %45, label %51

45:                                               ; preds = %41
  %46 = bitcast %"class.sksg::Node"* %39 to %class.SkRefCntBase*
  %47 = bitcast %"class.sksg::Node"* %39 to void (%class.SkRefCntBase*)***
  %48 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %47, align 8
  %49 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %48, i64 2
  %50 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %49, align 8
  call void %50(%class.SkRefCntBase* nonnull %46) #10
  br label %51

51:                                               ; preds = %36, %41, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  %52 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %30, align 8
  %53 = icmp eq %"class.sksg::Transform"* %52, null
  br i1 %53, label %64, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %52, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 -1 acq_rel
  %57 = icmp eq i32 %56, 1
  br i1 %57, label %58, label %64

58:                                               ; preds = %54
  %59 = bitcast %"class.sksg::Transform"* %52 to %class.SkRefCntBase*
  %60 = bitcast %"class.sksg::Transform"* %52 to void (%class.SkRefCntBase*)***
  %61 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %60, align 8
  %62 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %61, i64 2
  %63 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %62, align 8
  call void %63(%class.SkRefCntBase* nonnull %59) #10
  br label %64

64:                                               ; preds = %51, %54, %58
  %65 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %7, align 8
  %66 = icmp eq %"class.sksg::Transform"* %65, null
  br i1 %66, label %77, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %65, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = atomicrmw add i32* %68, i32 -1 acq_rel
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %77

71:                                               ; preds = %67
  %72 = bitcast %"class.sksg::Transform"* %65 to %class.SkRefCntBase*
  %73 = bitcast %"class.sksg::Transform"* %65 to void (%class.SkRefCntBase*)***
  %74 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %73, align 8
  %75 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %74, i64 2
  %76 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %75, align 8
  call void %76(%class.SkRefCntBase* nonnull %72) #10
  br label %77

77:                                               ; preds = %64, %67, %71
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixED0Ev(%"class.sksg::(anonymous namespace)::Concat.2"*) unnamed_addr #0 align 2 {
  tail call void @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixED2Ev(%"class.sksg::(anonymous namespace)::Concat.2"* %0) #10
  %2 = bitcast %"class.sksg::(anonymous namespace)::Concat.2"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal { <2 x float>, <2 x float> } @_ZN4sksg12_GLOBAL__N_16ConcatI8SkMatrixE12onRevalidateEPNS_22InvalidationControllerERKS2_(%"class.sksg::(anonymous namespace)::Concat.2"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = alloca %class.SkMatrix, align 4
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %0, i64 0, i32 1, i32 0
  %7 = bitcast %"class.sksg::Transform"** %6 to %"class.sksg::Node"**
  %8 = load %"class.sksg::Node"*, %"class.sksg::Node"** %7, align 8
  %9 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %8, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %10 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %0, i64 0, i32 2, i32 0
  %11 = bitcast %"class.sksg::Transform"** %10 to %"class.sksg::Node"**
  %12 = load %"class.sksg::Node"*, %"class.sksg::Node"** %11, align 8
  %13 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %12, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %14 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %0, i64 0, i32 3
  %15 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #10
  %16 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8, !noalias !34
  %17 = bitcast %"class.sksg::Transform"* %16 to void (%class.SkMatrix*, %"class.sksg::Transform"*)***
  %18 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)**, void (%class.SkMatrix*, %"class.sksg::Transform"*)*** %17, align 8, !noalias !34
  %19 = getelementptr inbounds void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %18, i64 5
  %20 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %19, align 8, !noalias !34
  call void %20(%class.SkMatrix* nonnull sret %4, %"class.sksg::Transform"* %16) #10
  %21 = bitcast %class.SkMatrix* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #10
  %22 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %10, align 8, !noalias !37
  %23 = bitcast %"class.sksg::Transform"* %22 to void (%class.SkMatrix*, %"class.sksg::Transform"*)***
  %24 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)**, void (%class.SkMatrix*, %"class.sksg::Transform"*)*** %23, align 8, !noalias !37
  %25 = getelementptr inbounds void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %24, i64 5
  %26 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %25, align 8, !noalias !37
  call void %26(%class.SkMatrix* nonnull sret %5, %"class.sksg::Transform"* %22) #10
  %27 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix9setConcatERKS_S1_(%class.SkMatrix* %14, %class.SkMatrix* nonnull dereferenceable(40) %4, %class.SkMatrix* nonnull dereferenceable(40) %5) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %15) #10
  ret { <2 x float>, <2 x float> } zeroinitializer
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK4sksg12_GLOBAL__N_16ConcatI8SkMatrixE4is44Ev(%"class.sksg::(anonymous namespace)::Concat.2"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_16ConcatI8SkMatrixE8asMatrixEv(%class.SkMatrix* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Concat.2"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3
  %4 = bitcast %class.SkMatrix* %0 to i8*
  %5 = bitcast %class.SkMatrix* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 40, i1 false) #10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_16ConcatI8SkMatrixE5asM44Ev(%class.SkM44* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Concat.2"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3
  %4 = bitcast %class.SkMatrix* %3 to i32*
  %5 = load i32, i32* %4, align 4, !noalias !40
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !40
  %9 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 2
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4, !noalias !40
  %12 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 3
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !40
  %15 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 4
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !40
  %18 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 5
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !40
  %21 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 6
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4, !noalias !40
  %24 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4, !noalias !40
  %27 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Concat.2", %"class.sksg::(anonymous namespace)::Concat.2"* %1, i64 0, i32 3, i32 0, i64 8
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4, !noalias !40
  %30 = bitcast %class.SkM44* %0 to i32*
  store i32 %5, i32* %30, align 4, !alias.scope !40
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %14, i32* %32, align 4, !alias.scope !40
  %33 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %33, align 4, !alias.scope !40
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %35 = bitcast float* %34 to i32*
  store i32 %23, i32* %35, align 4, !alias.scope !40
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %37 = bitcast float* %36 to i32*
  store i32 %8, i32* %37, align 4, !alias.scope !40
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %39 = bitcast float* %38 to i32*
  store i32 %17, i32* %39, align 4, !alias.scope !40
  %40 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %40, align 4, !alias.scope !40
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %42 = bitcast float* %41 to i32*
  store i32 %26, i32* %42, align 4, !alias.scope !40
  %43 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %44 = bitcast float* %43 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %44, align 4, !alias.scope !40
  %45 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %46 = bitcast float* %45 to i32*
  store i32 %11, i32* %46, align 4, !alias.scope !40
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %48 = bitcast float* %47 to i32*
  store i32 %20, i32* %48, align 4, !alias.scope !40
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  store float 0.000000e+00, float* %49, align 4, !alias.scope !40
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %51 = bitcast float* %50 to i32*
  store i32 %29, i32* %51, align 4, !alias.scope !40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_17InverseI5SkM44ED2Ev(%"class.sksg::(anonymous namespace)::Inverse"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_17InverseI5SkM44EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::(anonymous namespace)::Inverse"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %8 = icmp eq %"class.sksg::Transform"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %1, %9
  %13 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %7, %"class.sksg::Transform"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %12, %17, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %29 = icmp eq %"class.sksg::Transform"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Transform"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Transform"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_17InverseI5SkM44ED0Ev(%"class.sksg::(anonymous namespace)::Inverse"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_17InverseI5SkM44EE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::(anonymous namespace)::Inverse"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %8 = icmp eq %"class.sksg::Transform"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %9, %1
  %13 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %7, %"class.sksg::Transform"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %21, %17, %12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %29 = icmp eq %"class.sksg::Transform"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Transform"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Transform"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #10
  %41 = bitcast %"class.sksg::(anonymous namespace)::Inverse"* %0 to i8*
  call void @_ZdlPv(i8* %41) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal { <2 x float>, <2 x float> } @_ZN4sksg12_GLOBAL__N_17InverseI5SkM44E12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::(anonymous namespace)::Inverse"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkM44, align 4
  %5 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %0, i64 0, i32 1, i32 0
  %6 = bitcast %"class.sksg::Transform"** %5 to %"class.sksg::Node"**
  %7 = load %"class.sksg::Node"*, %"class.sksg::Node"** %6, align 8
  %8 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %7, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %9 = bitcast %class.SkM44* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #10
  %10 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %5, align 8, !noalias !43
  %11 = bitcast %"class.sksg::Transform"* %10 to void (%class.SkM44*, %"class.sksg::Transform"*)***
  %12 = load void (%class.SkM44*, %"class.sksg::Transform"*)**, void (%class.SkM44*, %"class.sksg::Transform"*)*** %11, align 8, !noalias !43
  %13 = getelementptr inbounds void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %12, i64 6
  %14 = load void (%class.SkM44*, %"class.sksg::Transform"*)*, void (%class.SkM44*, %"class.sksg::Transform"*)** %13, align 8, !noalias !43
  call void %14(%class.SkM44* nonnull sret %4, %"class.sksg::Transform"* %10) #10
  %15 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %0, i64 0, i32 2
  %16 = call zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44* nonnull %4, %class.SkM44* %15) #10
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #10
  br i1 %16, label %19, label %17

17:                                               ; preds = %3
  %18 = bitcast %class.SkM44* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 4 bitcast (%class.SkM44* @.ref.tmp to i8*), i64 64, i1 false) #10
  br label %19

19:                                               ; preds = %3, %17
  ret { <2 x float>, <2 x float> } zeroinitializer
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK4sksg12_GLOBAL__N_17InverseI5SkM44E4is44Ev(%"class.sksg::(anonymous namespace)::Inverse"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i1 true
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_17InverseI5SkM44E8asMatrixEv(%class.SkMatrix* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Inverse"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2
  %4 = bitcast %class.SkM44* %3 to i32*
  %5 = load i32, i32* %4, align 4, !noalias !46
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 4
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !46
  %9 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 12
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4, !noalias !46
  %12 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 1
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !46
  %15 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 5
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !46
  %18 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 13
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !46
  %21 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 3
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4, !noalias !46
  %24 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4, !noalias !46
  %27 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2, i32 0, i64 15
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4, !noalias !46
  %30 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 1
  %31 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 1
  %32 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 2
  %33 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 3
  %34 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 4
  %35 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 5
  %36 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 6
  %37 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 7
  %38 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %0, i64 0, i32 0, i64 8
  %39 = bitcast %class.SkMatrix* %0 to i32*
  store i32 %5, i32* %39, align 4, !alias.scope !51
  %40 = bitcast float* %31 to i32*
  store i32 %8, i32* %40, align 4, !alias.scope !51
  %41 = bitcast float* %32 to i32*
  store i32 %11, i32* %41, align 4, !alias.scope !51
  %42 = bitcast float* %33 to i32*
  store i32 %14, i32* %42, align 4, !alias.scope !51
  %43 = bitcast float* %34 to i32*
  store i32 %17, i32* %43, align 4, !alias.scope !51
  %44 = bitcast float* %35 to i32*
  store i32 %20, i32* %44, align 4, !alias.scope !51
  %45 = bitcast float* %36 to i32*
  store i32 %23, i32* %45, align 4, !alias.scope !51
  %46 = bitcast float* %37 to i32*
  store i32 %26, i32* %46, align 4, !alias.scope !51
  %47 = bitcast float* %38 to i32*
  store i32 %29, i32* %47, align 4, !alias.scope !51
  store i32 128, i32* %30, align 4, !alias.scope !51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_17InverseI5SkM44E5asM44Ev(%class.SkM44* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Inverse"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse", %"class.sksg::(anonymous namespace)::Inverse"* %1, i64 0, i32 2
  %4 = bitcast %class.SkM44* %0 to i8*
  %5 = bitcast %class.SkM44* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 64, i1 false) #10
  ret void
}

declare zeroext i1 @_ZNK5SkM446invertEPS_(%class.SkM44*, %class.SkM44*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_17InverseI8SkMatrixED2Ev(%"class.sksg::(anonymous namespace)::Inverse.3"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_17InverseI8SkMatrixEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::(anonymous namespace)::Inverse.3"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %8 = icmp eq %"class.sksg::Transform"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %1, %9
  %13 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %7, %"class.sksg::Transform"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %12, %17, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %29 = icmp eq %"class.sksg::Transform"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Transform"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Transform"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4sksg12_GLOBAL__N_17InverseI8SkMatrixED0Ev(%"class.sksg::(anonymous namespace)::Inverse.3"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.5, align 8
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*] }, { [9 x i8*] }* @_ZTVN4sksg12_GLOBAL__N_17InverseI8SkMatrixEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::(anonymous namespace)::Inverse.3"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.5* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %8 = icmp eq %"class.sksg::Transform"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %9, %1
  %13 = bitcast %class.sk_sp.5* %2 to %"class.sksg::Transform"**
  store %"class.sksg::Transform"* %7, %"class.sksg::Transform"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.5* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.5, %class.sk_sp.5* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %21, %17, %12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %6, align 8
  %29 = icmp eq %"class.sksg::Transform"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Transform", %"class.sksg::Transform"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Transform"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Transform"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #10
  %41 = bitcast %"class.sksg::(anonymous namespace)::Inverse.3"* %0 to i8*
  call void @_ZdlPv(i8* %41) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal { <2 x float>, <2 x float> } @_ZN4sksg12_GLOBAL__N_17InverseI8SkMatrixE12onRevalidateEPNS_22InvalidationControllerERKS2_(%"class.sksg::(anonymous namespace)::Inverse.3"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = alloca %class.SkMatrix, align 4
  %5 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %0, i64 0, i32 1, i32 0
  %6 = bitcast %"class.sksg::Transform"** %5 to %"class.sksg::Node"**
  %7 = load %"class.sksg::Node"*, %"class.sksg::Node"** %6, align 8
  %8 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %7, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %9 = bitcast %class.SkMatrix* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %9) #10
  %10 = load %"class.sksg::Transform"*, %"class.sksg::Transform"** %5, align 8, !noalias !54
  %11 = bitcast %"class.sksg::Transform"* %10 to void (%class.SkMatrix*, %"class.sksg::Transform"*)***
  %12 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)**, void (%class.SkMatrix*, %"class.sksg::Transform"*)*** %11, align 8, !noalias !54
  %13 = getelementptr inbounds void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %12, i64 5
  %14 = load void (%class.SkMatrix*, %"class.sksg::Transform"*)*, void (%class.SkMatrix*, %"class.sksg::Transform"*)** %13, align 8, !noalias !54
  call void %14(%class.SkMatrix* nonnull sret %4, %"class.sksg::Transform"* %10) #10
  %15 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %4, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = trunc i32 %17 to i8
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %3
  %21 = call zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix* nonnull %4) #10
  %22 = zext i8 %21 to i32
  store i32 %22, i32* %16, align 4
  br label %23

23:                                               ; preds = %20, %3
  %24 = phi i32 [ %22, %20 ], [ %17, %3 ]
  %25 = and i32 %24, 15
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = icmp eq %class.SkMatrix* %15, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %27
  %30 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* nonnull %15) #10
  br label %31

31:                                               ; preds = %27, %29
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #10
  br label %36

32:                                               ; preds = %23
  %33 = call zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix* nonnull %4, %class.SkMatrix* %15) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %9) #10
  br i1 %33, label %36, label %34

34:                                               ; preds = %32
  %35 = call dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix* %15) #10
  br label %36

36:                                               ; preds = %31, %32, %34
  ret { <2 x float>, <2 x float> } zeroinitializer
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal zeroext i1 @_ZNK4sksg12_GLOBAL__N_17InverseI8SkMatrixE4is44Ev(%"class.sksg::(anonymous namespace)::Inverse.3"* nocapture readnone) unnamed_addr #8 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_17InverseI8SkMatrixE8asMatrixEv(%class.SkMatrix* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Inverse.3"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2
  %4 = bitcast %class.SkMatrix* %0 to i8*
  %5 = bitcast %class.SkMatrix* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 40, i1 false) #10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZNK4sksg12_GLOBAL__N_17InverseI8SkMatrixE5asM44Ev(%class.SkM44* noalias nocapture sret, %"class.sksg::(anonymous namespace)::Inverse.3"* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2
  %4 = bitcast %class.SkMatrix* %3 to i32*
  %5 = load i32, i32* %4, align 4, !noalias !57
  %6 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4, !noalias !57
  %9 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 2
  %10 = bitcast float* %9 to i32*
  %11 = load i32, i32* %10, align 4, !noalias !57
  %12 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 3
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4, !noalias !57
  %15 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 4
  %16 = bitcast float* %15 to i32*
  %17 = load i32, i32* %16, align 4, !noalias !57
  %18 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 5
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4, !noalias !57
  %21 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 6
  %22 = bitcast float* %21 to i32*
  %23 = load i32, i32* %22, align 4, !noalias !57
  %24 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 7
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4, !noalias !57
  %27 = getelementptr inbounds %"class.sksg::(anonymous namespace)::Inverse.3", %"class.sksg::(anonymous namespace)::Inverse.3"* %1, i64 0, i32 2, i32 0, i64 8
  %28 = bitcast float* %27 to i32*
  %29 = load i32, i32* %28, align 4, !noalias !57
  %30 = bitcast %class.SkM44* %0 to i32*
  store i32 %5, i32* %30, align 4, !alias.scope !57
  %31 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 1
  %32 = bitcast float* %31 to i32*
  store i32 %14, i32* %32, align 4, !alias.scope !57
  %33 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 2
  store float 0.000000e+00, float* %33, align 4, !alias.scope !57
  %34 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 3
  %35 = bitcast float* %34 to i32*
  store i32 %23, i32* %35, align 4, !alias.scope !57
  %36 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 4
  %37 = bitcast float* %36 to i32*
  store i32 %8, i32* %37, align 4, !alias.scope !57
  %38 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 5
  %39 = bitcast float* %38 to i32*
  store i32 %17, i32* %39, align 4, !alias.scope !57
  %40 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 6
  store float 0.000000e+00, float* %40, align 4, !alias.scope !57
  %41 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 7
  %42 = bitcast float* %41 to i32*
  store i32 %26, i32* %42, align 4, !alias.scope !57
  %43 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 8
  %44 = bitcast float* %43 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %44, align 4, !alias.scope !57
  %45 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 12
  %46 = bitcast float* %45 to i32*
  store i32 %11, i32* %46, align 4, !alias.scope !57
  %47 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 13
  %48 = bitcast float* %47 to i32*
  store i32 %20, i32* %48, align 4, !alias.scope !57
  %49 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 14
  store float 0.000000e+00, float* %49, align 4, !alias.scope !57
  %50 = getelementptr inbounds %class.SkM44, %class.SkM44* %0, i64 0, i32 0, i64 15
  %51 = bitcast float* %50 to i32*
  store i32 %29, i32* %51, align 4, !alias.scope !57
  ret void
}

declare dereferenceable(40) %class.SkMatrix* @_ZN8SkMatrix5resetEv(%class.SkMatrix*) local_unnamed_addr #3

declare zeroext i1 @_ZNK8SkMatrix17invertNonIdentityEPS_(%class.SkMatrix*, %class.SkMatrix*) local_unnamed_addr #3

declare zeroext i8 @_ZNK8SkMatrix15computeTypeMaskEv(%class.SkMatrix*) local_unnamed_addr #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5SkM445asM33Ev: argument 0"}
!4 = distinct !{!4, !"_ZNK5SkM445asM33Ev"}
!5 = !{!6, !3}
!6 = distinct !{!6, !7, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!7 = distinct !{!7, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!10 = distinct !{!10, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!13 = distinct !{!13, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!16 = distinct !{!16, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN8SkMatrix6ConcatERKS_S1_: argument 0"}
!19 = distinct !{!19, !"_ZN8SkMatrix6ConcatERKS_S1_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!22 = distinct !{!22, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!25 = distinct !{!25, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!26 = !{!27, !29}
!27 = distinct !{!27, !28, !"_ZNK5SkM445asM33Ev: argument 0"}
!28 = distinct !{!28, !"_ZNK5SkM445asM33Ev"}
!29 = distinct !{!29, !30, !"_ZN4sksg12_GLOBAL__N_110AsSkMatrixI5SkM44EE8SkMatrixRKT_: argument 0"}
!30 = distinct !{!30, !"_ZN4sksg12_GLOBAL__N_110AsSkMatrixI5SkM44EE8SkMatrixRKT_"}
!31 = !{!32, !27, !29}
!32 = distinct !{!32, !33, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!33 = distinct !{!33, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!36 = distinct !{!36, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!39 = distinct !{!39, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZN4sksg12_GLOBAL__N_17AsSkM44I8SkMatrixEE5SkM44RKT_: argument 0"}
!42 = distinct !{!42, !"_ZN4sksg12_GLOBAL__N_17AsSkM44I8SkMatrixEE5SkM44RKT_"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!45 = distinct !{!45, !"_ZN4sksg13TransformPriv2AsI5SkM44NSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!46 = !{!47, !49}
!47 = distinct !{!47, !48, !"_ZNK5SkM445asM33Ev: argument 0"}
!48 = distinct !{!48, !"_ZNK5SkM445asM33Ev"}
!49 = distinct !{!49, !50, !"_ZN4sksg12_GLOBAL__N_110AsSkMatrixI5SkM44EE8SkMatrixRKT_: argument 0"}
!50 = distinct !{!50, !"_ZN4sksg12_GLOBAL__N_110AsSkMatrixI5SkM44EE8SkMatrixRKT_"}
!51 = !{!52, !47, !49}
!52 = distinct !{!52, !53, !"_ZN8SkMatrix7MakeAllEfffffffff: argument 0"}
!53 = distinct !{!53, !"_ZN8SkMatrix7MakeAllEfffffffff"}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE: argument 0"}
!56 = distinct !{!56, !"_ZN4sksg13TransformPriv2AsI8SkMatrixNSt3__19enable_ifILb1EvEEEET_RK5sk_spINS_9TransformEE"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZN4sksg12_GLOBAL__N_17AsSkM44I8SkMatrixEE5SkM44RKT_: argument 0"}
!59 = distinct !{!59, !"_ZN4sksg12_GLOBAL__N_17AsSkM44I8SkMatrixEE5SkM44RKT_"}
