; ModuleID = '../../third_party/libaom/source/libaom/av1/encoder/av1_noise_estimate.c'
source_filename = "../../third_party/libaom/source/libaom/av1/encoder/av1_noise_estimate.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1_COMP = type { %struct.AV1_PRIMARY*, [8 x i8], %struct.EncQuantDequantParams, %struct.ThreadData, %struct.FRAME_COUNTS, %struct.MBMIExtFrameBufferInfo, %struct.CB_COEFF_BUFFER*, %struct.CoeffBufferPool, %struct.AV1Common, %struct.AV1EncoderConfig, i32, [8 x i8], %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, %struct.TemporalFilterCtx, i32, %struct.ForceIntegerMVInfo, [7 x %struct.RefCntBuffer*], %struct.RefCntBuffer*, %struct.RefreshFrameFlagsInfo, [8 x i32], %struct.ExternalFlags, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i64, %struct.RD_OPT, %struct.CODING_CONTEXT, %struct.GlobalMotionInfo, %struct.WinnerModeParams, %struct.TimeStamps, %struct.RATE_CONTROL, double, i32, i32, %struct.SPEED_FEATURES, %struct.MotionVectorSearchParams, i32, %struct.EncSegmentationInfo, %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i8, %struct.RefBufferStack, i32, i32, %struct.FRAME_INFO, %struct.FRAME_INDEX_SET, %struct.InitialDimensions, i32, %struct.ResizePendingParams, %struct.TileDataEnc*, i32, %struct.TokenInfo, i32, %struct.VarBasedPartitionInfo, %struct.FrameProbInfo, %struct.MultiThreadInfo, i32, i32, i32, %struct.AV1LrStruct, %struct.aom_film_grain_table_t*, %struct.aom_denoise_and_model_t*, %struct.InterpSearchFlags, i32, i32, i32, i32, %struct.RefFrameDistanceInfo, double*, %struct.SVC, i8, %struct.MV_STATS, i8, i32, i32, %struct.FirstPassData, %struct.noise_estimate, %struct.av1_denoiser, i8*, i8, i32, i64, [8 x i8] }
%struct.AV1_PRIMARY = type { %struct.AV1_COMP*, %struct.AV1_COMP*, %struct.lookahead_ctx*, i32, %struct.aom_codec_pkt_list*, i32, %struct.GF_GROUP, %struct.GF_STATE, i32, %struct.AV1LevelParams, i32, i32, %struct.TWO_PASS, %struct.PRIMARY_RATE_CONTROL, %struct.yv12_buffer_config, %struct.SequenceHeader, i32, i8, i32, i32, %struct.aom_internal_error_info, [22 x %struct.aom_variance_vtable], double*, double*, %struct.TplParams }
%struct.lookahead_ctx = type { i32, i32, [2 x %struct.read_ctx], %struct.lookahead_entry*, i32, i8 }
%struct.read_ctx = type { i32, i32, i32, i32 }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.aom_codec_pkt_list = type { i32, i32, [1 x %struct.aom_codec_cx_pkt] }
%struct.aom_codec_cx_pkt = type { i32, %union.anon.10 }
%union.anon.10 = type { %struct.aom_psnr_pkt }
%struct.aom_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double], [4 x i32], [4 x i64], [4 x double] }
%struct.GF_GROUP = type { [250 x i8], [250 x i8], [250 x i8], [250 x i32], [250 x i32], i32, i32, [250 x i8], [250 x i32], [250 x i8], [250 x i8], i32, i32 }
%struct.GF_STATE = type { i32 }
%struct.AV1LevelParams = type { [32 x i8], i32, [32 x %struct.AV1LevelInfo*] }
%struct.AV1LevelInfo = type { %struct.AV1LevelStats, %struct.AV1LevelSpec, %struct.FrameWindowBuffer, [24 x %struct.DECODER_MODEL] }
%struct.AV1LevelStats = type { i32, i32, i32, i32, i32, i32, i32, i32, double, double, double }
%struct.AV1LevelSpec = type { i8, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double, double, double }
%struct.FrameWindowBuffer = type { [256 x %struct.FrameRecord], i32, i32 }
%struct.FrameRecord = type { i64, i64, i64, i32, i32, i32, i32, i32 }
%struct.DECODER_MODEL = type { i8, i8, i8, i8, i32, i32, i32, i32, i64, double, double, double, double, i32, i32, i32, [8 x i32], [10 x %struct.FRAME_BUFFER], %struct.DFG_INTERVAL_QUEUE, double, double, i64, double, double, i32, i32, double, double }
%struct.FRAME_BUFFER = type { i32, i32, i32, i8, double }
%struct.DFG_INTERVAL_QUEUE = type { i32, i32, double, [64 x %struct.DFG_INTERVAL] }
%struct.DFG_INTERVAL = type { double, double, double }
%struct.TWO_PASS = type { i32, [36 x %struct.FIRSTPASS_STATS*], i32, %struct.FIRSTPASS_STATS*, %struct.STATS_BUFFER_CTX*, i32, i64, double, double, double, double, double, i8, i64, i64, double, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64, double, double }
%struct.STATS_BUFFER_CTX = type { %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS* }
%struct.PRIMARY_RATE_CONTROL = type { i64, i32, i32, [15 x i32], i32, i32, [150 x %struct.regions], i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.regions = type { i32, i32, double, double, double, double, double, i32 }
%struct.SequenceHeader = type { i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, %struct.OrderHintInfo, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i8, i8, i32, [32 x i32], i32, %struct.aom_timing, i8, %struct.aom_dec_model_info, i8, [32 x i8], [32 x i8], [33 x %struct.aom_dec_model_op_parameters] }
%struct.OrderHintInfo = type { i32, i32, i32, i32 }
%struct.aom_timing = type { i32, i32, i32, i32 }
%struct.aom_dec_model_info = type { i32, i32, i32, i32 }
%struct.aom_dec_model_op_parameters = type { i32, i64, i64, i32, i32, i32, i32, i32 }
%struct.aom_internal_error_info = type { i32, i32, [200 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.aom_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, i32 (i8*, i32, i8*, i32, i8*, i8*, i32, i32)*, i32 (i8*, i32, i32, i32, i8*, i32, i8*, i8*, i32, i32, i32*)*, i32 (i8*, i32, i32*, i32*)*, i32 (i8*, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i32, i32, i32*, i32*, i32*)*, i32 (i8*, i32, i8*, i32, i8*, %struct.dist_wtd_comp_params*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*, %struct.dist_wtd_comp_params*)* }
%struct.dist_wtd_comp_params = type { i32, i32, i32 }
%struct.TplParams = type { i8, i8, [79 x %struct.TplDepFrame], [35 x %struct.TplDepStats*], [35 x %struct.yv12_buffer_config], %struct.TplDepFrame*, %struct.scale_factors, i32, [7 x %struct.yv12_buffer_config*], [7 x %struct.yv12_buffer_config*], %struct.AV1TplRowMultiThreadSync, i32 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, [8 x i32], i32, i32, i32, i32, i32, i32, i32, [256 x double], [256 x double], i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, [2 x i64], i64, i64, [2 x i64], i64, i64, [7 x %union.int_mv], [2 x i32], [7 x i64] }
%union.int_mv = type { i32 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)* }
%struct.AV1TplRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.12, %union.anon.14, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.12 = type { i64 }
%union.anon.14 = type { i64 }
%struct.EncQuantDequantParams = type { %struct.QUANTS, %struct.Dequants }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.Dequants = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PC_TREE_SHARED_BUFFERS, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.SIMPLE_MOTION_DATA_TREE*, %struct.inter_modes_info*, [2 x [2 x i32*]], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, [2 x i8*], i32, i32, i32, i32, [4 x i32], %struct.frame_contexts*, %struct.VP64x64*, i32, %struct.PICK_MODE_CONTEXT*, %struct.TemporalFilterData, %struct.TplTxfmStats, %struct.PixelLevelGradientInfo*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], [8 x i8], %struct.macroblockd, %struct.MB_MODE_INFO_EXT, %struct.MB_MODE_INFO_EXT_FRAME*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CB_COEFF_BUFFER*, [2 x i16], %struct.OBMCBuffer, %struct.PALETTE_BUFFER*, %struct.CompoundTypeRdBuffers, i16*, %struct.aom_internal_error_info*, [2 x i8*], i32, i32, i32, i32, i32, %struct.ModeCosts, %struct.MvCosts*, %struct.IntraBCMVCosts*, %struct.CoeffCosts, i32, i32, i32, i32, i32, i32, %struct.SuperBlockEnc, %struct.CONTENT_STATE_SB, [8 x i32], i32, [8 x i8], [8 x %struct.WARP_SAMPLE_INFO], [1024 x i32], i32, %struct.PartitionSearchInfo, i32, i32, [22 x [169 x i32]], %struct.WinnerModeStats*, i32, i8, %struct.inter_modes_info*, i8, [64 x %struct.COMP_RD_STATS], i32, i32, %struct.intrabc_hash_info, i32, %struct.MB_MODE_INFO*, %struct.PixelLevelGradientInfo*, [2 x i8], [8 x i32], %struct.FullMvLimits, %struct.TxfmSearchParams, %struct.TxfmSearchInfo, [2 x i8], i32, [8 x i32] }
%struct.macroblock_plane = type { i16*, i32*, i32*, i32*, i16*, i8*, %struct.buf_2d, i16*, i16*, i16*, i16*, i16*, i16*, i16* }
%struct.buf_2d = type { i8*, i8*, i32, i32, i32 }
%struct.macroblockd = type { i32, i32, i32, i8, [3 x %struct.macroblockd_plane], %struct.TileInfo, %struct.MB_MODE_INFO**, i8, i8, i8, i8, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, %struct.MB_MODE_INFO*, i8*, i32, i32, i32, i32, i32, [2 x %struct.scale_factors*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [32 x i8]], i8*, [32 x i8], i8*, i8*, [32 x i8], [3 x %struct.WienerInfo], [3 x %struct.SgrprojInfo], i8, i8, [29 x [8 x %struct.candidate_mv]], [29 x [8 x i16]], i8, i8, [8 x i8], %struct.frame_contexts*, i32, [8 x i32], [8 x i32], i32, i32, %struct.aom_internal_error_info*, %struct.WarpedMotionParams*, i8, [4 x i8], [4 x i8], i8*, %struct.cfl_ctx, [2 x i16], i16*, [2 x i8*], [8 x i8] }
%struct.macroblockd_plane = type { i8, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i8*, i8, i8, [8 x [19 x i8*]], [8 x [19 x i8*]] }
%struct.TileInfo = type { i32, i32, i32, i32, i32, i32 }
%struct.WienerInfo = type { [8 x i16], [8 x i16] }
%struct.SgrprojInfo = type { i32, [2 x i32] }
%struct.candidate_mv = type { %union.int_mv, %union.int_mv }
%struct.WarpedMotionParams = type { [8 x i32], i16, i16, i16, i16, i8, i8 }
%struct.cfl_ctx = type { [1024 x i16], [1024 x i16], [2 x i32], i32, [2 x [32 x i16]], i32, i32, i32, i32, i32, i32 }
%struct.MB_MODE_INFO_EXT = type { [29 x [4 x %struct.candidate_mv]], [29 x [4 x i16]], [29 x i8], [8 x %union.int_mv], [29 x i16] }
%struct.MB_MODE_INFO_EXT_FRAME = type { [4 x %struct.candidate_mv], [4 x i16], i8, [8 x %union.int_mv], i16, [2 x i16] }
%struct.ModeCosts = type { [20 x [10 x i32]], [4 x [13 x i32]], [13 x [13 x [13 x i32]]], [2 x [13 x [14 x i32]]], [22 x [2 x i32]], [5 x i32], [8 x [7 x i32]], [8 x [2 x [16 x i32]]], [2 x i32], [7 x [7 x i32]], [7 x [7 x i32]], [7 x [5 x [8 x i32]]], [7 x [5 x [8 x i32]]], [7 x [3 x [2 x i32]]], [2 x [2 x i32]], [3 x [2 x i32]], [6 x [2 x i32]], [2 x [2 x i32]], [6 x [2 x i32]], [3 x [2 x i32]], [3 x [6 x [2 x i32]]], [5 x [2 x i32]], [5 x [3 x i32]], [3 x [3 x [3 x i32]]], [3 x [3 x [2 x i32]]], [3 x [2 x [2 x i32]]], [4 x [2 x i32]], [8 x [8 x i32]], [22 x [2 x i32]], [22 x [16 x i32]], [4 x [2 x i32]], [22 x [2 x i32]], [4 x [4 x i32]], [6 x [2 x i32]], [6 x [2 x i32]], [22 x [3 x i32]], [22 x [2 x i32]], [16 x [3 x i32]], [3 x [2 x i32]], [4 x [3 x [5 x i32]]], [21 x [2 x i32]], [4 x [4 x [16 x i32]]], [3 x [4 x [13 x [16 x i32]]]], [3 x i32], [2 x i32], [2 x i32] }
%struct.MvCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [2 x i32*], [2 x i32*], i32** }
%struct.IntraBCMVCosts = type { [4 x i32], [2 x [32767 x i32]], [2 x i32*] }
%struct.CoeffCosts = type { [5 x [2 x %struct.LV_MAP_COEFF_COST]], [7 x [2 x %struct.LV_MAP_EOB_COST]] }
%struct.LV_MAP_COEFF_COST = type { [13 x [2 x i32]], [4 x [3 x i32]], [42 x [8 x i32]], [9 x [2 x i32]], [3 x [2 x i32]], [21 x [26 x i32]] }
%struct.LV_MAP_EOB_COST = type { [2 x [11 x i32]] }
%struct.SuperBlockEnc = type { i8, i8, i32, [64 x i64], [64 x i64], [64 x [7 x %union.int_mv]], i32 }
%struct.CONTENT_STATE_SB = type { i32, i32, i32 }
%struct.WARP_SAMPLE_INFO = type { i32, [16 x i32], [16 x i32] }
%struct.PartitionSearchInfo = type { [105 x i8] }
%struct.WinnerModeStats = type { %struct.MB_MODE_INFO, %struct.RD_STATS, i64, i32, i32, [16384 x i8], i8 }
%struct.MB_MODE_INFO = type <{ i8, i8, i8, i8, i32, [2 x %union.int_mv], [2 x i8], [2 x i8], %union.int_interpfilters, i8, i8, i8, i8, %struct.WarpedMotionParams, i8, i8, [6 x i8], %struct.INTERINTER_COMPOUND_DATA, [2 x i8], %struct.FILTER_INTRA_MODE_INFO, i8, i8, %struct.PALETTE_MODE_INFO, i8, i8, [16 x i8], i8, [4 x i8], i16, [7 x i8] }>
%union.int_interpfilters = type { i32 }
%struct.INTERINTER_COMPOUND_DATA = type { i8*, i8, i8, i8, i8 }
%struct.FILTER_INTRA_MODE_INFO = type { i8, i8 }
%struct.PALETTE_MODE_INFO = type { [24 x i16], [2 x i8] }
%struct.RD_STATS = type { i32, i64, i64, i64, i32, i32 }
%struct.COMP_RD_STATS = type { [4 x i32], [4 x i64], [4 x i32], [4 x i64], [4 x i32], [2 x %union.int_mv], [2 x i8], i8, %union.int_interpfilters, i32, [2 x i32], %struct.INTERINTER_COMPOUND_DATA }
%struct.intrabc_hash_info = type { [2 x [2 x i32*]], %struct._hash_table, %struct._crc_calculator, %struct._crc_calculator, i32 }
%struct._hash_table = type { %struct.Vector** }
%struct.Vector = type { i64, i64, i64, i8* }
%struct._crc_calculator = type { i32, i32, i32, [256 x i32], i32 }
%struct.FullMvLimits = type { i32, i32, i32, i32 }
%struct.TxfmSearchParams = type { i32, i32, i32, [2 x i32], i32, i8, i32, i32, i8, i32 }
%struct.TxfmSearchInfo = type { i32, [1024 x i8], [1024 x i8], %struct.TxbRdRecords*, i32 }
%struct.TxbRdRecords = type { %struct.MB_RD_RECORD, [256 x %struct.TXB_RD_RECORD], [64 x %struct.TXB_RD_RECORD], [16 x %struct.TXB_RD_RECORD], [4 x %struct.TXB_RD_RECORD], %struct.TXB_RD_RECORD }
%struct.MB_RD_RECORD = type { [8 x %struct.MB_RD_INFO], i32, i32, %struct._CRC32C }
%struct.MB_RD_INFO = type { i8, [16 x i8], [1024 x i8], [1024 x i8], %struct.RD_STATS, i32 }
%struct._CRC32C = type { [8 x [256 x i32]] }
%struct.TXB_RD_RECORD = type { [256 x i32], [256 x %struct.TXB_RD_INFO], i32, i32 }
%struct.TXB_RD_INFO = type { i64, i64, i32, i16, i8, i16, i8, i8, i8, i8 }
%struct.RD_COUNTS = type { [3 x i64], i32, i32, [19 x [16 x i32]], [22 x [2 x i32]], [2 x i32] }
%struct.PC_TREE_SHARED_BUFFERS = type { [3 x i32*], [3 x i32*], [3 x i32*] }
%struct.SIMPLE_MOTION_DATA_TREE = type { i8, i8, [4 x %struct.SIMPLE_MOTION_DATA_TREE*], [8 x %struct.fullpel_mv], [2 x i32], [8 x i32], i32, i32 }
%struct.fullpel_mv = type { i16, i16 }
%struct.inter_modes_info = type { i32, [4 x i8], [1024 x %struct.MB_MODE_INFO], [1024 x i32], [1024 x i64], [1024 x i64], [1024 x %struct.RdIdxPair], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS], [1024 x %struct.RD_STATS] }
%struct.RdIdxPair = type { i32, i64 }
%struct.OBMCBuffer = type { i32*, i32*, i8*, i8* }
%struct.PALETTE_BUFFER = type { [4096 x i8], [8192 x i32] }
%struct.CompoundTypeRdBuffers = type { i8*, i8*, i16*, i16*, i8* }
%struct.frame_contexts = type { [5 x [13 x [3 x i16]]], [5 x [2 x [9 x [3 x i16]]]], [2 x [3 x [3 x i16]]], [2 x [2 x [6 x i16]]], [2 x [2 x [7 x i16]]], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [2 x [2 x [10 x i16]]], [2 x [2 x [11 x i16]]], [2 x [2 x [12 x i16]]], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [5 x [2 x [21 x [5 x i16]]]], [6 x [3 x i16]], [2 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [8 x [9 x i16]], [22 x [3 x i16]], [22 x [17 x i16]], [4 x [3 x i16]], [22 x [3 x i16]], [4 x [5 x i16]], [22 x [4 x i16]], [22 x [3 x i16]], [7 x [8 x i16]], [7 x [8 x i16]], [7 x [5 x [9 x i16]]], [7 x [5 x [9 x i16]]], [7 x [3 x [3 x i16]]], [2 x [3 x i16]], [5 x [3 x i16]], [3 x [6 x [3 x i16]]], [5 x [3 x i16]], [3 x [3 x [3 x i16]]], [3 x [3 x [3 x i16]]], [3 x [2 x [3 x i16]]], [21 x [3 x i16]], [6 x [3 x i16]], [6 x [3 x i16]], [3 x [3 x i16]], [3 x [3 x i16]], [4 x [3 x i16]], %struct.nmv_context, %struct.nmv_context, [3 x i16], %struct.segmentation_probs, [22 x [3 x i16]], [6 x i16], [4 x i16], [3 x i16], [3 x i16], [4 x [14 x i16]], [2 x [13 x [15 x i16]]], [20 x [11 x i16]], [16 x [4 x i16]], [5 x [5 x [14 x i16]]], [8 x [8 x i16]], [4 x [3 x [4 x i16]]], [5 x i16], [4 x [5 x i16]], [5 x i16], [3 x [4 x [13 x [17 x i16]]]], [4 x [4 x [17 x i16]]], [9 x i16], [6 x [17 x i16]], i32 }
%struct.nmv_context = type { [5 x i16], [2 x %struct.nmv_component] }
%struct.nmv_component = type { [12 x i16], [2 x [5 x i16]], [5 x i16], [3 x i16], [3 x i16], [3 x i16], [3 x i16], [10 x [3 x i16]] }
%struct.segmentation_probs = type { [9 x i16], [3 x [3 x i16]], [3 x [9 x i16]] }
%struct.VP64x64 = type { %struct.VPVariance, [4 x %struct.VP32x32] }
%struct.VPVariance = type { %struct.VPartVar, [2 x %struct.VPartVar], [2 x %struct.VPartVar] }
%struct.VPartVar = type { i32, i32, i32, i32 }
%struct.VP32x32 = type { %struct.VPVariance, [4 x %struct.VP16x16] }
%struct.VP16x16 = type { %struct.VPVariance, [4 x %struct.VP8x8] }
%struct.VP8x8 = type { %struct.VPVariance, [4 x %struct.VP4x4] }
%struct.VP4x4 = type { %struct.VPVariance, [4 x %struct.VPartVar] }
%struct.PICK_MODE_CONTEXT = type { %struct.MB_MODE_INFO, %struct.MB_MODE_INFO_EXT_FRAME, [2 x i8*], i8*, [3 x i32*], [3 x i32*], [3 x i32*], [3 x i16*], [3 x i8*], i8*, i32, i32, i32, i32, i32, %struct.RD_STATS, i32, i64, i64, i64, i8, %union.int_mv, i8, i8, i32 }
%struct.TemporalFilterData = type { %struct.FRAME_DIFF, %struct.MB_MODE_INFO*, i32*, i16*, i8* }
%struct.FRAME_DIFF = type { i64, i64 }
%struct.TplTxfmStats = type { [256 x double], i32 }
%struct.PixelLevelGradientInfo = type { i16, i8, i8 }
%struct.FRAME_COUNTS = type { [16 x [3 x i32]] }
%struct.MBMIExtFrameBufferInfo = type { %struct.MB_MODE_INFO_EXT_FRAME*, i32, i32 }
%struct.CB_COEFF_BUFFER = type { [3 x i32*], [3 x i16*], [3 x i8*] }
%struct.CoeffBufferPool = type { i32*, i16*, i8* }
%struct.AV1Common = type { %struct.CurrentFrame, %struct.aom_internal_error_info*, i32, i32, i32, i32, i32, i32, i8, [33 x i32], i32, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], %struct.scale_factors, [8 x %struct.scale_factors], [8 x %struct.RefCntBuffer*], i32, i32, i32, %struct.FeatureFlags, %struct.CommonModeInfoParams, %struct.CommonQuantParams, %struct.segmentation, i8*, %struct.loop_filter_info_n, %struct.loopfilter, [3 x %struct.RestorationInfo], i32*, %struct.RestorationLineBuffers*, %struct.yv12_buffer_config, %struct.CdefInfo, %struct.aom_film_grain_t, %struct.DeltaQInfo, [8 x %struct.WarpedMotionParams], %struct.SequenceHeader*, %struct.frame_contexts*, %struct.frame_contexts*, %struct.CommonTileParams, %struct.BufferPool*, %struct.CommonContexts, i32, [8 x i32], %struct.TPL_MV_REF*, i32, [8 x i32], [8 x i8], i32, i32 }
%struct.CurrentFrame = type { i8, i8, i32, i32, i32, %struct.SkipModeInfo, i32, i32 }
%struct.SkipModeInfo = type { i32, i32, i32, i32 }
%struct.FeatureFlags = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i8 }
%struct.CommonModeInfoParams = type { i32, i32, i32, i32, i32, %struct.MB_MODE_INFO*, i32, i32, i8, %struct.MB_MODE_INFO**, i32, i32, i8*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*)*, void (%struct.CommonModeInfoParams*, i32, i32)* }
%struct.CommonQuantParams = type { i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], [8 x [2 x i16]], [16 x [3 x [19 x i8*]]], [16 x [3 x [19 x i8*]]], [8 x [19 x i8*]], [8 x [19 x i8*]], [8 x [19 x i8*]], i8, i32, i32, i32 }
%struct.segmentation = type { i8, i8, i8, i8, [8 x [8 x i16]], [8 x i32], i32, i8 }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [3 x [8 x [2 x [8 x [2 x i8]]]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { [2 x i32], i32, i32, i32, i8, i8, [8 x i8], [2 x i8], i32 }
%struct.RestorationInfo = type { i32, i32, i32, i32, i32, %struct.RestorationUnitInfo*, %struct.RestorationStripeBoundaries, i32 }
%struct.RestorationUnitInfo = type { i32, [12 x i8], %struct.WienerInfo, %struct.SgrprojInfo, [4 x i8] }
%struct.RestorationStripeBoundaries = type { i8*, i8*, i32, i32 }
%struct.RestorationLineBuffers = type { [3 x [392 x i16]], [3 x [392 x i16]] }
%struct.CdefInfo = type { [3 x i16*], [3 x i16*], i16*, [3 x i64], [3 x i64], i64, i32, i32, [16 x i32], [16 x i32], i32, i32, i32 }
%struct.aom_film_grain_t = type { i32, i32, [14 x [2 x i32]], i32, [10 x [2 x i32]], i32, [10 x [2 x i32]], i32, i32, i32, [24 x i32], [25 x i32], [25 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16 }
%struct.DeltaQInfo = type { i32, i32, i32, i32, i32 }
%struct.CommonTileParams = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32 }
%struct.BufferPool = type { %union.pthread_mutex_t, i8*, i32 (i8*, i64, %struct.aom_codec_frame_buffer*)*, i32 (i8*, %struct.aom_codec_frame_buffer*)*, [16 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.aom_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefCntBuffer = type { i32, i32, [7 x i32], i32, [7 x i32], %struct.MV_REF*, i8*, %struct.segmentation, i32, i32, i32, i32, [8 x %struct.WarpedMotionParams], i32, i8, %struct.aom_film_grain_t, %struct.aom_codec_frame_buffer, %struct.yv12_buffer_config, i8, [4 x i32], [8 x i8], [2 x i8], %struct.frame_contexts }
%struct.MV_REF = type { %union.int_mv, i8 }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.CommonContexts = type { i8**, [3 x i8**], i8**, i32, i32, i32 }
%struct.TPL_MV_REF = type { %union.int_mv, i8 }
%struct.AV1EncoderConfig = type { %struct.InputCfg, %struct.FrameDimensionCfg, %struct.AlgoCfg, %struct.KeyFrameCfg, %struct.RateControlCfg, %struct.QuantizationCfg, %struct.ResizeCfg, %struct.SuperResCfg, %struct.aom_fixed_buf, %struct.ToolCfg, %struct.GFConfig, %struct.TileConfig, %struct.TuneCfg, %struct.ColorCfg, %struct.DecoderModelCfg, %struct.RefFrameCfg, %struct.UnitTestCfg, %struct.MotionModeCfg, %struct.IntraModeCfg, %struct.TxfmSizeTypeCfg, %struct.CompoundTypeCfg, %struct.PartitionCfg, %struct.CostUpdateFreq, float, i32, i32, i32, i32, i32, i32, i32, [32 x i8], i8, i32, i8, i8, i8, i8, i8* }
%struct.InputCfg = type { double, i32, i32, i32, i32 }
%struct.FrameDimensionCfg = type { i32, i32, i32, i32, i32, i32 }
%struct.AlgoCfg = type { i32, i32, i32, i32, i8, i8, i8 }
%struct.KeyFrameCfg = type { i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.RateControlCfg = type { i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QuantizationCfg = type { [5 x double], i32, i32, i32, i32, i8, i8, i8, i8 }
%struct.ResizeCfg = type { i8, i8, i8 }
%struct.SuperResCfg = type { i32, i32, i8, i8, i32, i8 }
%struct.aom_fixed_buf = type { i8*, i64 }
%struct.ToolCfg = type { i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.GFConfig = type { i32, i32, i32, i32, i32, i8, i8 }
%struct.TileConfig = type { i32, i32, i32, i32, i32, i32, [64 x i32], [64 x i32], i8, i8, i8 }
%struct.TuneCfg = type { i8*, i8*, i32, i32, i32 }
%struct.ColorCfg = type { i32, i32, i32, i32, i32 }
%struct.DecoderModelCfg = type { %struct.aom_timing, i32, i8, i8, i8 }
%struct.RefFrameCfg = type { i32, i8, i8 }
%struct.UnitTestCfg = type { i32, i32 }
%struct.MotionModeCfg = type { i8, i8, i8 }
%struct.IntraModeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.TxfmSizeTypeCfg = type { i8, i8, i8, i8, i8, i8, i8 }
%struct.CompoundTypeCfg = type { i8, i8, i8, i8, i8, i8 }
%struct.PartitionCfg = type { i8, i8, i8, i8, i8 }
%struct.CostUpdateFreq = type { i32, i32, i32, i32 }
%struct.TemporalFilterCtx = type { [35 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors, [3 x double], i32, i32, i32, i32, i32 }
%struct.ForceIntegerMVInfo = type { [32 x double], i32, i32 }
%struct.RefreshFrameFlagsInfo = type { i8, i8, i8 }
%struct.ExternalFlags = type { i32, %struct.ExtRefreshFrameFlagsInfo, i8, i8, i8, i8, i8, i8 }
%struct.ExtRefreshFrameFlagsInfo = type { i8, i8, i8, i8, i8, i8 }
%struct.yv12_buffer_config = type { %union.anon, %union.anon.0, %union.anon.2, %union.anon.4, %union.anon.6, %union.anon.8, i32, [3 x i8*], i8*, i32, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, %struct.aom_metadata_array* }
%union.anon = type { %struct.anon }
%struct.anon = type { i32, i32 }
%union.anon.0 = type { %struct.anon.1 }
%struct.anon.1 = type { i32, i32 }
%union.anon.2 = type { %struct.anon.3 }
%struct.anon.3 = type { i32, i32 }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { i32, i32 }
%union.anon.6 = type { %struct.anon.7 }
%struct.anon.7 = type { i32, i32 }
%union.anon.8 = type { %struct.anon.9 }
%struct.anon.9 = type { i8*, i8*, i8* }
%struct.aom_metadata_array = type { i64, %struct.aom_metadata** }
%struct.aom_metadata = type { i32, i8*, i64, i32 }
%struct.RD_OPT = type { [169 x i32], [8 x [22 x [169 x i32]]], i32, double }
%struct.CODING_CONTEXT = type { %struct.loopfilter, %struct.CdefInfo, %struct.yv12_buffer_config, %struct.RATE_CONTROL, %struct.MV_STATS }
%struct.GlobalMotionInfo = type { i8, [8 x %struct.yv12_buffer_config*], i8*, [2 x i32], [2 x [7 x %struct.FrameDistPair]], i32, i32, i32, [8192 x i32] }
%struct.FrameDistPair = type { i32, i8 }
%struct.WinnerModeParams = type { [3 x [2 x i32]], [3 x i8], [3 x i32], [3 x i32], [3 x i32], [3 x i32] }
%struct.TimeStamps = type { i64, i64, i64 }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, i32, [4 x i32], i32, [4 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [4 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, [7 x i32], i32, i32, i32, i32, i32 }
%struct.SPEED_FEATURES = type { %struct.HIGH_LEVEL_SPEED_FEATURES, %struct.FIRST_PASS_SPEED_FEATURES, %struct.TPL_SPEED_FEATURES, %struct.GLOBAL_MOTION_SPEED_FEATURES, %struct.PARTITION_SPEED_FEATURES, %struct.MV_SPEED_FEATURES, %struct.INTER_MODE_SPEED_FEATURES, %struct.INTERP_FILTER_SPEED_FEATURES, %struct.INTRA_MODE_SPEED_FEATURES, %struct.TX_SPEED_FEATURES, %struct.RD_CALC_SPEED_FEATURES, %struct.WINNER_MODE_SPEED_FEATURES, %struct.LOOP_FILTER_SPEED_FEATURES, %struct.REAL_TIME_SPEED_FEATURES }
%struct.HIGH_LEVEL_SPEED_FEATURES = type { i32, i8, i32, i8, i32, i8, i32, i32 }
%struct.FIRST_PASS_SPEED_FEATURES = type { i32, i32 }
%struct.TPL_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32 }
%struct.GLOBAL_MOTION_SPEED_FEATURES = type { i8, i32, i32 }
%struct.PARTITION_SPEED_FEATURES = type { i8, i8, i32, i32, i32, i32, i32, i8, i8, i8, i8, i32, i64, i32, [5 x i32], i32, i32, i32, i32, i32, i32, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i8, i32, i32, i8, i32, i8, i8, i8, i32, [4 x %struct.MESH_PATTERN], [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.INTER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.INTERP_FILTER_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32 }
%struct.INTRA_MODE_SPEED_FEATURES = type { [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_SPEED_FEATURES = type { i32, i32, i32, i32, i32, %struct.TX_TYPE_SEARCH, i32, i32, i32, i32, i32, i32, i32 }
%struct.TX_TYPE_SEARCH = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.RD_CALC_SPEED_FEATURES = type { i32, i32, i32, i8, i32, i32 }
%struct.WINNER_MODE_SPEED_FEATURES = type { i32, i32, i32, i32, i8, i32, i32 }
%struct.LOOP_FILTER_SPEED_FEATURES = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.REAL_TIME_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, [16 x i32], i32 }
%struct.MotionVectorSearchParams = type { i32, i32, i32 (%struct.macroblockd*, %struct.AV1Common*, %struct.SUBPEL_MOTION_SEARCH_PARAMS*, i32, %struct.mv*, i32*, i32*, %union.int_mv*)*, [3 x [7 x %struct.search_site_config]] }
%struct.SUBPEL_MOTION_SEARCH_PARAMS = type { i32, i32*, i8, i32, %struct.SubpelMvLimits, %struct.MV_COST_PARAMS, %struct.SUBPEL_SEARCH_VAR_PARAMS }
%struct.SubpelMvLimits = type { i32, i32, i32, i32 }
%struct.MV_COST_PARAMS = type { %struct.mv*, %struct.fullpel_mv, i8, i32*, [2 x i32*], i32, i32 }
%struct.SUBPEL_SEARCH_VAR_PARAMS = type { %struct.aom_variance_vtable*, i8, %struct.MSBuffers, i32, i32 }
%struct.MSBuffers = type { %struct.buf_2d*, %struct.buf_2d*, i8*, i8*, i32, i32, i32*, i32* }
%struct.mv = type { i16, i16 }
%struct.search_site_config = type { [22 x [17 x %struct.search_site]], i32, [22 x i32], [22 x i32], i32 }
%struct.search_site = type { %struct.fullpel_mv, i32 }
%struct.EncSegmentationInfo = type { i8*, i8 }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, [3 x i32], double, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.RefBufferStack = type { [16 x i32], i32, [16 x i32], i32, [16 x i32], i32 }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FRAME_INDEX_SET = type { i32 }
%struct.InitialDimensions = type { i32, i32 }
%struct.ResizePendingParams = type { i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [8 x i8], %struct.frame_contexts, %struct.frame_contexts*, i8, [22 x %struct.InterModeRdModel], %struct.AV1EncRowMultiThreadSync, %struct.mv }
%struct.InterModeRdModel = type { i32, double, double, double, double, double, double, double, i32, double, double, double, double, double }
%struct.AV1EncRowMultiThreadSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, i32, i32 }
%struct.TokenInfo = type { [64 x [64 x %struct.TokenExtra*]], [64 x [64 x %struct.TokenList*]] }
%struct.TokenExtra = type { i8 }
%struct.TokenList = type { %struct.TokenExtra*, i32 }
%struct.VarBasedPartitionInfo = type { [5 x i64], i64 }
%struct.FrameProbInfo = type { [7 x [22 x i32]], [7 x i32], [7 x [19 x [16 x i32]]], [7 x [16 x [3 x i32]]] }
%struct.MultiThreadInfo = type { i32, [10 x i32], i32, i32, %struct.AVxWorker*, %struct.EncWorkerData*, i8, %struct.AV1EncRowMultiThreadInfo, %struct.AV1TplRowMultiThreadInfo, %struct.AV1LfSyncData, %struct.AV1LrSyncData, %struct.AV1EncPackBSSync, %struct.AV1GlobalMotionSync, %struct.AV1TemporalFilterSync, %struct.AV1CdefSyncData, %struct.AV1CdefWorker* }
%struct.AVxWorker = type { %struct.AVxWorkerImpl*, i32, i8*, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.AVxWorkerImpl = type opaque
%struct.EncWorkerData = type opaque
%struct.AV1EncRowMultiThreadInfo = type { i32, i32, i32, i32, [64 x i32], %union.pthread_mutex_t*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32)*, void (%struct.AV1EncRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1TplRowMultiThreadInfo = type { void (%struct.AV1TplRowMultiThreadSync*, i32, i32)*, void (%struct.AV1TplRowMultiThreadSync*, i32, i32, i32)* }
%struct.AV1LfSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, %struct.LoopFilterWorkerData*, i32, %union.pthread_mutex_t*, %struct.AV1LfMTInfo*, i32, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.AV1Common*, [3 x %struct.macroblockd_plane], %struct.macroblockd* }
%struct.AV1LfMTInfo = type { i32, i32, i32 }
%struct.AV1LrSyncData = type { [3 x %union.pthread_mutex_t*], [3 x %union.pthread_cond_t*], [3 x i32*], i32, i32, i32, i32, %union.pthread_mutex_t*, %struct.LoopRestorationWorkerData*, %struct.AV1LrMTInfo*, i32, i32 }
%struct.LoopRestorationWorkerData = type { i32*, i8*, i8* }
%struct.AV1LrMTInfo = type { i32, i32, i32, i32, i32, i32, i32 }
%struct.AV1EncPackBSSync = type { %union.pthread_mutex_t*, [512 x %struct.PackBSTileOrder], i32 }
%struct.PackBSTileOrder = type { i16, i32 }
%struct.AV1GlobalMotionSync = type { %struct.JobInfo, %struct.GlobalMotionThreadData*, %union.pthread_mutex_t*, i32, i32, i8 }
%struct.JobInfo = type { [64 x i8], [2 x i8], [2 x i8] }
%struct.GlobalMotionThreadData = type { [1 x %struct.MotionModel], i8* }
%struct.MotionModel = type { [8 x double], i32*, i32 }
%struct.AV1TemporalFilterSync = type { %union.pthread_mutex_t*, i32 }
%struct.AV1CdefSyncData = type { %union.pthread_mutex_t*, %struct.AV1CdefRowSync*, i32, i32, i32 }
%struct.AV1CdefRowSync = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32 }
%struct.AV1CdefWorker = type { %struct.AV1Common*, %struct.macroblockd*, [3 x i16*], i16*, [3 x i16*], void (%struct.AV1Common*, %struct.macroblockd*, %struct.CdefBlockInfo*, i16**, i16*, %struct.AV1CdefSyncData*, i32)* }
%struct.CdefBlockInfo = type { i16*, [3 x i16*], [3 x i16*], i8*, [256 x %struct.cdef_list], i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, [16 x [16 x i32]], [16 x [16 x i32]], i32, i32, i32 }
%struct.cdef_list = type { i8, i8 }
%struct.AV1LrStruct = type { void (%struct.RestorationTileLimits*, %struct.AV1PixelRect*, i32, i8*, i32*, %struct.RestorationLineBuffers*)*, [3 x %struct.FilterFrameCtxt], %struct.yv12_buffer_config*, %struct.yv12_buffer_config* }
%struct.RestorationTileLimits = type { i32, i32, i32, i32 }
%struct.AV1PixelRect = type { i32, i32, i32, i32 }
%struct.FilterFrameCtxt = type { %struct.RestorationInfo*, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, %struct.AV1PixelRect }
%struct.aom_film_grain_table_t = type { %struct.aom_film_grain_table_entry_t*, %struct.aom_film_grain_table_entry_t* }
%struct.aom_film_grain_table_entry_t = type { %struct.aom_film_grain_t, i64, i64, %struct.aom_film_grain_table_entry_t* }
%struct.aom_denoise_and_model_t = type opaque
%struct.InterpSearchFlags = type { i32, i16 }
%struct.RefFrameDistanceInfo = type { [7 x i32], i8, i8 }
%struct.SVC = type { i32, i32, i32, i32, i32, i32, i32, i32, [7 x i32], [7 x i32], [8 x i32], double, i32, [8 x i32], [8 x i8], i32, i32, [8 x i32], [8 x i32], i32, i32, [32 x %struct.LAYER_CONTEXT], [4 x i8], [4 x i32], i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, %struct.PRIMARY_RATE_CONTROL, i32, i64, i32, i32, i64, i64, double, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i8, i8, i32, i32 }
%struct.MV_STATS = type { i32, i32, i32, i32, i32, i32, [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.FirstPassData = type { %struct.FRAME_STATS*, i32* }
%struct.FRAME_STATS = type { i64, i64, i64, i64, i64, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, double, double }
%struct.av1_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @av1_noise_estimate_init(%struct.noise_estimate* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = mul nsw i32 %2, %1
  %6 = icmp sgt i32 %5, 921599
  %7 = zext i1 %6 to i32
  %8 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 1
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 2
  store i32 0, i32* %9, align 4
  %10 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 5
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 3
  store i32 90, i32* %11, align 4
  %12 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 6
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 7
  store i32 0, i32* %13, align 4
  %14 = icmp sgt i32 %5, 2073599
  %15 = select i1 %14, i32 200, i32 140
  %16 = select i1 %14, i32 300, i32 210
  br i1 %6, label %19, label %17

17:                                               ; preds = %3
  %18 = icmp sgt i32 %5, 230399
  br i1 %18, label %19, label %22

19:                                               ; preds = %3, %17
  %20 = phi i32 [ %15, %3 ], [ 115, %17 ]
  %21 = phi i32 [ %16, %3 ], [ 172, %17 ]
  store i32 %20, i32* %11, align 4
  br label %22

22:                                               ; preds = %19, %17
  %23 = phi i32 [ 135, %17 ], [ %21, %19 ]
  %24 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 8
  store i32 15, i32* %24, align 4
  %25 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 4
  store i32 %23, i32* %25, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @av1_noise_estimate_extract_level(%struct.noise_estimate* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.noise_estimate, %struct.noise_estimate* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = shl i32 %5, 1
  %7 = icmp sgt i32 %3, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = icmp sgt i32 %3, %5
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = ashr i32 %5, 1
  %12 = icmp sgt i32 %3, %11
  %13 = zext i1 %12 to i32
  br label %14

14:                                               ; preds = %10, %8, %1
  %15 = phi i32 [ 3, %1 ], [ 2, %8 ], [ %13, %10 ]
  ret i32 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @av1_update_noise_estimate(%struct.AV1_COMP*) local_unnamed_addr #3 {
  %2 = alloca [20 x i32], align 16
  %3 = alloca [20 x i32], align 16
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 2
  %6 = load i32, i32* %5, align 16
  %7 = icmp slt i32 %6, 353
  br i1 %7, label %8, label %13

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 288
  %12 = select i1 %11, i32 40, i32 60
  br label %13

13:                                               ; preds = %8, %1
  %14 = phi i32 [ 40, %1 ], [ %12, %8 ]
  %15 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 0, i32 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 13
  %18 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %17, align 16
  %19 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 26
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, 0
  br i1 %21, label %22, label %39

22:                                               ; preds = %13
  %23 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %24 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %23, align 16
  %25 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %24, i64 0, i32 16
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2
  br label %39

30:                                               ; preds = %22
  %31 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %32 = load i32, i32* %31, align 16
  %33 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %34, -1
  %36 = icmp eq i32 %32, %35
  %37 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2
  %38 = select i1 %36, %struct.yv12_buffer_config* %37, %struct.yv12_buffer_config* %18
  br label %39

39:                                               ; preds = %30, %28, %13
  %40 = phi %struct.yv12_buffer_config* [ %18, %13 ], [ %29, %28 ], [ %38, %30 ]
  %41 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %55, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 54, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %55, label %48

48:                                               ; preds = %44
  %49 = icmp eq i32 %6, %42
  br i1 %49, label %50, label %55

50:                                               ; preds = %48
  %51 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %52 = load i32, i32* %51, align 4
  %53 = icmp ne i32 %52, %46
  %54 = zext i1 %53 to i32
  br label %55

55:                                               ; preds = %50, %48, %44, %39
  %56 = phi i32 [ 0, %44 ], [ 0, %39 ], [ 1, %48 ], [ %54, %50 ]
  br i1 %21, label %57, label %78

57:                                               ; preds = %55
  %58 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %59 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %58, align 16
  %60 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %59, i64 0, i32 16
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %72, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %65 = load i32, i32* %64, align 16
  %66 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %67 = load i32, i32* %66, align 8
  %68 = add nsw i32 %67, -1
  %69 = icmp eq i32 %65, %68
  %70 = icmp sgt i32 %6, 319
  %71 = and i1 %70, %69
  br i1 %71, label %74, label %78

72:                                               ; preds = %57
  %73 = icmp sgt i32 %6, 319
  br i1 %73, label %74, label %78

74:                                               ; preds = %63, %72
  %75 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %76 = load i32, i32* %75, align 4
  %77 = icmp sgt i32 %76, 179
  br i1 %77, label %112, label %78

78:                                               ; preds = %74, %72, %63, %55
  %79 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 33
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %82, label %111

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 4, i32 15
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 1
  br i1 %85, label %86, label %111

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 5, i32 5
  %88 = load i8, i8* %87, align 8
  %89 = icmp eq i8 %88, 3
  br i1 %89, label %90, label %111

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 30
  %92 = load i32, i32* %91, align 4
  %93 = icmp sgt i32 %92, 4
  %94 = icmp eq i32 %56, 0
  %95 = and i1 %94, %93
  br i1 %95, label %96, label %111

96:                                               ; preds = %90
  %97 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %98 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %97, align 16
  %99 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %98, i64 0, i32 16
  %100 = load i32, i32* %99, align 8
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %111

102:                                              ; preds = %96
  %103 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 9, i32 12, i32 3
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %104, 1
  br i1 %105, label %111, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %108 = load i32, i32* %107, align 4
  %109 = mul nsw i32 %108, %6
  %110 = icmp sgt i32 %109, 230399
  br i1 %110, label %112, label %111

111:                                              ; preds = %106, %102, %96, %90, %86, %82, %78
  br label %112

112:                                              ; preds = %74, %106, %111
  %113 = phi i32 [ 0, %111 ], [ 1, %74 ], [ 1, %106 ]
  %114 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 0
  store i32 %113, i32* %114, align 4
  %115 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 2
  %116 = load i32, i32* %115, align 8
  %117 = icmp sgt i32 %116, 1
  br i1 %117, label %118, label %121

118:                                              ; preds = %112
  %119 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %120 = load i32, i32* %119, align 16
  br label %121

121:                                              ; preds = %118, %112
  %122 = phi i32 [ %120, %118 ], [ %16, %112 ]
  %123 = icmp eq i32 %113, 0
  br i1 %123, label %141, label %124

124:                                              ; preds = %121
  %125 = and i32 %122, 7
  %126 = icmp ne i32 %125, 0
  %127 = icmp eq %struct.yv12_buffer_config* %40, null
  %128 = or i1 %127, %126
  br i1 %128, label %141, label %129

129:                                              ; preds = %124
  %130 = icmp eq i32 %116, 1
  br i1 %130, label %131, label %190

131:                                              ; preds = %129
  %132 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 6
  %133 = load i32, i32* %132, align 4
  %134 = icmp eq i32 %133, %6
  br i1 %134, label %135, label %141

135:                                              ; preds = %131
  %136 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 7
  %137 = load i32, i32* %136, align 4
  %138 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %137, %139
  br i1 %140, label %190, label %141

141:                                              ; preds = %135, %131, %121, %124
  br i1 %21, label %142, label %182

142:                                              ; preds = %141
  %143 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %144 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %143, align 16
  %145 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %144, i64 0, i32 16
  %146 = load i32, i32* %145, align 8
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %153, label %148

148:                                              ; preds = %142
  %149 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %150 = load i32, i32* %149, align 16
  %151 = add nsw i32 %116, -1
  %152 = icmp eq i32 %150, %151
  br i1 %152, label %153, label %182

153:                                              ; preds = %148, %142
  %154 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %155 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %154, align 8
  %156 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 1, i32 0, i32 0
  %157 = load i32, i32* %156, align 8
  %158 = icmp sgt i32 %157, 0
  br i1 %158, label %159, label %182

159:                                              ; preds = %153
  %160 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 5, i32 0, i32 0
  %161 = load i8*, i8** %160, align 8
  %162 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %155, i64 0, i32 5, i32 0, i32 0
  %163 = load i8*, i8** %162, align 8
  %164 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 0, i32 0, i32 0
  %165 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 4, i32 0, i32 0
  %166 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %155, i64 0, i32 4, i32 0, i32 0
  br label %167

167:                                              ; preds = %167, %159
  %168 = phi i32 [ 0, %159 ], [ %179, %167 ]
  %169 = phi i8* [ %161, %159 ], [ %175, %167 ]
  %170 = phi i8* [ %163, %159 ], [ %178, %167 ]
  %171 = load i32, i32* %164, align 8
  %172 = sext i32 %171 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %169, i8* align 1 %170, i64 %172, i1 false) #5
  %173 = load i32, i32* %165, align 8
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %169, i64 %174
  %176 = load i32, i32* %166, align 8
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %170, i64 %177
  %179 = add nuw nsw i32 %168, 1
  %180 = load i32, i32* %156, align 8
  %181 = icmp slt i32 %179, %180
  br i1 %181, label %167, label %182

182:                                              ; preds = %167, %148, %153, %141
  %183 = icmp eq %struct.yv12_buffer_config* %40, null
  br i1 %183, label %691, label %184

184:                                              ; preds = %182
  %185 = load i32, i32* %5, align 16
  %186 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 6
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 7
  store i32 %188, i32* %189, align 4
  br label %691

190:                                              ; preds = %135, %129
  %191 = icmp sgt i32 %122, 60
  br i1 %191, label %192, label %246

192:                                              ; preds = %190
  %193 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 19
  %194 = load i32, i32* %193, align 4
  %195 = icmp sgt i32 %194, 1
  br i1 %195, label %196, label %246

196:                                              ; preds = %192
  %197 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 15
  %198 = load i32, i32* %197, align 4
  %199 = icmp sgt i32 %198, %116
  br i1 %199, label %200, label %246

200:                                              ; preds = %196
  %201 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %202 = load i32, i32* %201, align 16
  %203 = add nsw i32 %116, -1
  %204 = icmp eq i32 %202, %203
  br i1 %204, label %205, label %246

205:                                              ; preds = %200
  %206 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 50
  %207 = load i32, i32* %206, align 8
  %208 = icmp slt i32 %207, %14
  br i1 %208, label %209, label %246

209:                                              ; preds = %205
  %210 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 1
  store i32 0, i32* %210, align 4
  %211 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 5
  store i32 0, i32* %211, align 4
  %212 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 8
  store i32 10, i32* %212, align 4
  br i1 %21, label %213, label %691

213:                                              ; preds = %209
  %214 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 12
  %215 = load i32, i32* %214, align 16
  %216 = icmp ugt i32 %215, 1
  br i1 %216, label %217, label %691

217:                                              ; preds = %213
  tail call void @av1_denoiser_set_noise_level(%struct.AV1_COMP* %0, i32 0) #5
  %218 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %219 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %218, align 8
  %220 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 1, i32 0, i32 0
  %221 = load i32, i32* %220, align 8
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %223, label %691

223:                                              ; preds = %217
  %224 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 5, i32 0, i32 0
  %225 = load i8*, i8** %224, align 8
  %226 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %219, i64 0, i32 5, i32 0, i32 0
  %227 = load i8*, i8** %226, align 8
  %228 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 0, i32 0, i32 0
  %229 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 4, i32 0, i32 0
  %230 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %219, i64 0, i32 4, i32 0, i32 0
  br label %231

231:                                              ; preds = %231, %223
  %232 = phi i32 [ 0, %223 ], [ %243, %231 ]
  %233 = phi i8* [ %225, %223 ], [ %239, %231 ]
  %234 = phi i8* [ %227, %223 ], [ %242, %231 ]
  %235 = load i32, i32* %228, align 8
  %236 = sext i32 %235 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %233, i8* align 1 %234, i64 %236, i1 false) #5
  %237 = load i32, i32* %229, align 8
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %233, i64 %238
  %240 = load i32, i32* %230, align 8
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i8, i8* %234, i64 %241
  %243 = add nuw nsw i32 %232, 1
  %244 = load i32, i32* %220, align 8
  %245 = icmp slt i32 %243, %244
  br i1 %245, label %231, label %691

246:                                              ; preds = %205, %200, %196, %192, %190
  %247 = bitcast [20 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %247) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %247, i8 0, i64 80, i1 false)
  %248 = bitcast [20 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %248) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %248, i8 -86, i64 80, i1 false)
  %249 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 12
  %250 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %249, align 8
  %251 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %250, i64 0, i32 5, i32 0, i32 0
  %252 = load i8*, i8** %251, align 8
  %253 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %250, i64 0, i32 4, i32 0, i32 0
  %254 = load i32, i32* %253, align 8
  %255 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 0, i32 5, i32 0, i32 0
  %256 = load i8*, i8** %255, align 8
  %257 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %40, i64 0, i32 4, i32 0, i32 0
  %258 = load i32, i32* %257, align 8
  %259 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 3
  %260 = load i32, i32* %259, align 4
  %261 = icmp sgt i32 %260, 0
  br i1 %261, label %262, label %505

262:                                              ; preds = %246
  %263 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %264 = load i32, i32* %263, align 8
  %265 = icmp sgt i32 %264, 0
  %266 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 84
  %267 = ashr i32 %264, 1
  %268 = add i32 %264, -1
  %269 = lshr i32 %268, 1
  %270 = add nuw i32 %269, 1
  %271 = add nsw i32 %269, -7
  %272 = lshr i32 %271, 3
  %273 = add nuw nsw i32 %272, 1
  %274 = icmp ult i32 %270, 8
  %275 = and i32 %270, -8
  %276 = shl i32 %275, 1
  %277 = and i32 %273, 1
  %278 = icmp eq i32 %272, 0
  %279 = sub nuw nsw i32 %273, %277
  %280 = icmp eq i32 %277, 0
  %281 = icmp eq i32 %270, %275
  br label %282

282:                                              ; preds = %262, %382
  %283 = phi i32 [ 0, %262 ], [ %386, %382 ]
  %284 = phi i32 [ 0, %262 ], [ %383, %382 ]
  %285 = phi i32 [ 0, %262 ], [ %384, %382 ]
  %286 = mul i32 %267, %283
  br i1 %265, label %287, label %382

287:                                              ; preds = %282
  %288 = lshr exact i32 %285, 1
  %289 = load i8*, i8** %266, align 16
  %290 = mul nsw i32 %267, %288
  %291 = add i32 %286, %269
  %292 = icmp slt i32 %291, %286
  %293 = or i1 %274, %292
  br i1 %293, label %366, label %294

294:                                              ; preds = %287
  %295 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %284, i32 0
  br i1 %278, label %335, label %296

296:                                              ; preds = %294, %296
  %297 = phi i32 [ %332, %296 ], [ 0, %294 ]
  %298 = phi <4 x i32> [ %330, %296 ], [ %295, %294 ]
  %299 = phi <4 x i32> [ %331, %296 ], [ zeroinitializer, %294 ]
  %300 = phi i32 [ %333, %296 ], [ %279, %294 ]
  %301 = and i32 %297, 2147483632
  %302 = add nsw i32 %290, %301
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i8, i8* %289, i64 %303
  %305 = bitcast i8* %304 to <4 x i8>*
  %306 = load <4 x i8>, <4 x i8>* %305, align 1
  %307 = getelementptr inbounds i8, i8* %304, i64 4
  %308 = bitcast i8* %307 to <4 x i8>*
  %309 = load <4 x i8>, <4 x i8>* %308, align 1
  %310 = icmp ugt <4 x i8> %306, <i8 2, i8 2, i8 2, i8 2>
  %311 = icmp ugt <4 x i8> %309, <i8 2, i8 2, i8 2, i8 2>
  %312 = zext <4 x i1> %310 to <4 x i32>
  %313 = zext <4 x i1> %311 to <4 x i32>
  %314 = add nsw <4 x i32> %298, %312
  %315 = add nuw nsw <4 x i32> %299, %313
  %316 = and i32 %297, 2147483632
  %317 = or i32 %316, 8
  %318 = add nsw i32 %290, %317
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i8, i8* %289, i64 %319
  %321 = bitcast i8* %320 to <4 x i8>*
  %322 = load <4 x i8>, <4 x i8>* %321, align 1
  %323 = getelementptr inbounds i8, i8* %320, i64 4
  %324 = bitcast i8* %323 to <4 x i8>*
  %325 = load <4 x i8>, <4 x i8>* %324, align 1
  %326 = icmp ugt <4 x i8> %322, <i8 2, i8 2, i8 2, i8 2>
  %327 = icmp ugt <4 x i8> %325, <i8 2, i8 2, i8 2, i8 2>
  %328 = zext <4 x i1> %326 to <4 x i32>
  %329 = zext <4 x i1> %327 to <4 x i32>
  %330 = add nsw <4 x i32> %314, %328
  %331 = add nuw nsw <4 x i32> %315, %329
  %332 = add i32 %297, 16
  %333 = add i32 %300, -2
  %334 = icmp eq i32 %333, 0
  br i1 %334, label %335, label %296, !llvm.loop !2

335:                                              ; preds = %296, %294
  %336 = phi <4 x i32> [ undef, %294 ], [ %330, %296 ]
  %337 = phi <4 x i32> [ undef, %294 ], [ %331, %296 ]
  %338 = phi i32 [ 0, %294 ], [ %332, %296 ]
  %339 = phi <4 x i32> [ %295, %294 ], [ %330, %296 ]
  %340 = phi <4 x i32> [ zeroinitializer, %294 ], [ %331, %296 ]
  br i1 %280, label %357, label %341

341:                                              ; preds = %335
  %342 = and i32 %338, 2147483640
  %343 = add nsw i32 %290, %342
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %289, i64 %344
  %346 = getelementptr inbounds i8, i8* %345, i64 4
  %347 = bitcast i8* %346 to <4 x i8>*
  %348 = load <4 x i8>, <4 x i8>* %347, align 1
  %349 = icmp ugt <4 x i8> %348, <i8 2, i8 2, i8 2, i8 2>
  %350 = zext <4 x i1> %349 to <4 x i32>
  %351 = add nuw nsw <4 x i32> %340, %350
  %352 = bitcast i8* %345 to <4 x i8>*
  %353 = load <4 x i8>, <4 x i8>* %352, align 1
  %354 = icmp ugt <4 x i8> %353, <i8 2, i8 2, i8 2, i8 2>
  %355 = zext <4 x i1> %354 to <4 x i32>
  %356 = add nsw <4 x i32> %339, %355
  br label %357

357:                                              ; preds = %335, %341
  %358 = phi <4 x i32> [ %336, %335 ], [ %356, %341 ]
  %359 = phi <4 x i32> [ %337, %335 ], [ %351, %341 ]
  %360 = add <4 x i32> %359, %358
  %361 = shufflevector <4 x i32> %360, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %362 = add <4 x i32> %360, %361
  %363 = shufflevector <4 x i32> %362, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %364 = add <4 x i32> %362, %363
  %365 = extractelement <4 x i32> %364, i32 0
  br i1 %281, label %382, label %366

366:                                              ; preds = %357, %287
  %367 = phi i32 [ %284, %287 ], [ %365, %357 ]
  %368 = phi i32 [ 0, %287 ], [ %276, %357 ]
  br label %369

369:                                              ; preds = %366, %369
  %370 = phi i32 [ %379, %369 ], [ %367, %366 ]
  %371 = phi i32 [ %380, %369 ], [ %368, %366 ]
  %372 = lshr exact i32 %371, 1
  %373 = add nsw i32 %290, %372
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds i8, i8* %289, i64 %374
  %376 = load i8, i8* %375, align 1
  %377 = icmp ugt i8 %376, 2
  %378 = zext i1 %377 to i32
  %379 = add nsw i32 %370, %378
  %380 = add nuw nsw i32 %371, 2
  %381 = icmp slt i32 %380, %264
  br i1 %381, label %369, label %382, !llvm.loop !4

382:                                              ; preds = %369, %357, %282
  %383 = phi i32 [ %284, %282 ], [ %365, %357 ], [ %379, %369 ]
  %384 = add nuw nsw i32 %285, 2
  %385 = icmp slt i32 %384, %260
  %386 = add i32 %283, 1
  br i1 %385, label %282, label %387

387:                                              ; preds = %382
  %388 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 21, i32 4
  %389 = mul i32 %260, 3
  %390 = mul i32 %389, %264
  %391 = ashr i32 %390, 5
  %392 = icmp sge i32 %383, %391
  br i1 %261, label %393, label %505

393:                                              ; preds = %387
  %394 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 84
  %395 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 36, i32 18
  %396 = bitcast i32* %4 to i8*
  %397 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %398 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 19
  %399 = shl i32 %254, 2
  %400 = shl i32 %258, 2
  br label %401

401:                                              ; preds = %393, %486
  %402 = phi i32 [ %260, %393 ], [ %487, %486 ]
  %403 = phi i32 [ %264, %393 ], [ %488, %486 ]
  %404 = phi i32 [ %264, %393 ], [ %489, %486 ]
  %405 = phi i32 [ 0, %393 ], [ %499, %486 ]
  %406 = phi i8* [ %256, %393 ], [ %498, %486 ]
  %407 = phi i8* [ %252, %393 ], [ %495, %486 ]
  %408 = icmp sgt i32 %404, 0
  br i1 %408, label %409, label %486

409:                                              ; preds = %401
  %410 = lshr i32 %405, 1
  br label %411

411:                                              ; preds = %409, %478
  %412 = phi i32 [ %403, %409 ], [ %479, %478 ]
  %413 = phi i32 [ %404, %409 ], [ %479, %478 ]
  %414 = phi i32 [ 0, %409 ], [ %482, %478 ]
  %415 = phi i8* [ %406, %409 ], [ %481, %478 ]
  %416 = phi i8* [ %407, %409 ], [ %480, %478 ]
  %417 = or i32 %414, %405
  %418 = and i32 %417, 7
  %419 = icmp eq i32 %418, 0
  br i1 %419, label %420, label %478

420:                                              ; preds = %411
  %421 = load i32, i32* %259, align 4
  %422 = add nsw i32 %421, -3
  %423 = icmp slt i32 %405, %422
  %424 = add nsw i32 %413, -3
  %425 = icmp slt i32 %414, %424
  %426 = and i1 %425, %423
  br i1 %426, label %427, label %478

427:                                              ; preds = %420
  %428 = ashr i32 %413, 1
  %429 = mul nsw i32 %428, %410
  %430 = lshr i32 %414, 1
  %431 = add nsw i32 %429, %430
  %432 = add nsw i32 %431, 1
  %433 = add nsw i32 %431, %428
  %434 = add nsw i32 %433, 1
  %435 = load i8*, i8** %394, align 16
  %436 = sext i32 %431 to i64
  %437 = getelementptr inbounds i8, i8* %435, i64 %436
  %438 = load i8, i8* %437, align 1
  %439 = sext i32 %432 to i64
  %440 = getelementptr inbounds i8, i8* %435, i64 %439
  %441 = load i8, i8* %440, align 1
  %442 = sext i32 %433 to i64
  %443 = getelementptr inbounds i8, i8* %435, i64 %442
  %444 = load i8, i8* %443, align 1
  %445 = sext i32 %434 to i64
  %446 = getelementptr inbounds i8, i8* %435, i64 %445
  %447 = load i8, i8* %446, align 1
  %448 = icmp ult i8 %444, %447
  %449 = select i1 %448, i8 %444, i8 %447
  %450 = icmp ult i8 %441, %449
  %451 = select i1 %450, i8 %441, i8 %449
  %452 = icmp ult i8 %438, %451
  %453 = select i1 %452, i8 %438, i8 %451
  %454 = icmp ugt i8 %453, 2
  %455 = and i1 %392, %454
  br i1 %455, label %456, label %478

456:                                              ; preds = %427
  %457 = load i32, i32* %395, align 16
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %478

459:                                              ; preds = %456
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %396) #5
  store i32 -1431655766, i32* %4, align 4
  %460 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %397, align 16
  %461 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %460, i64 0, i32 21, i64 6, i32 3
  %462 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %461, align 8
  %463 = call i32 %462(i8* %416, i32 %254, i8* %415, i32 %258, i32* nonnull %4) #5
  %464 = icmp ult i32 %463, 2000
  br i1 %464, label %465, label %470

465:                                              ; preds = %459
  %466 = trunc i32 %463 to i16
  %467 = udiv i16 %466, 100
  %468 = zext i16 %467 to i64
  %469 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %468
  br label %472

470:                                              ; preds = %459
  %471 = icmp ult i32 %463, 3000
  br i1 %471, label %472, label %476

472:                                              ; preds = %470, %465
  %473 = phi i32* [ %469, %465 ], [ %398, %470 ]
  %474 = load i32, i32* %473, align 4
  %475 = add i32 %474, 1
  store i32 %475, i32* %473, align 4
  br label %476

476:                                              ; preds = %472, %470
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %396) #5
  %477 = load i32, i32* %388, align 8
  br label %478

478:                                              ; preds = %476, %456, %427, %420, %411
  %479 = phi i32 [ %477, %476 ], [ %412, %456 ], [ %412, %427 ], [ %412, %420 ], [ %412, %411 ]
  %480 = getelementptr inbounds i8, i8* %416, i64 4
  %481 = getelementptr inbounds i8, i8* %415, i64 4
  %482 = add nuw nsw i32 %414, 1
  %483 = icmp slt i32 %482, %479
  br i1 %483, label %411, label %484

484:                                              ; preds = %478
  %485 = load i32, i32* %259, align 4
  br label %486

486:                                              ; preds = %484, %401
  %487 = phi i32 [ %402, %401 ], [ %485, %484 ]
  %488 = phi i32 [ %403, %401 ], [ %479, %484 ]
  %489 = phi i32 [ %404, %401 ], [ %479, %484 ]
  %490 = phi i8* [ %407, %401 ], [ %480, %484 ]
  %491 = phi i8* [ %406, %401 ], [ %481, %484 ]
  %492 = shl i32 %489, 2
  %493 = sub nsw i32 %399, %492
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds i8, i8* %490, i64 %494
  %496 = sub nsw i32 %400, %492
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds i8, i8* %491, i64 %497
  %499 = add nuw nsw i32 %405, 1
  %500 = icmp slt i32 %499, %487
  br i1 %500, label %401, label %501

501:                                              ; preds = %486
  %502 = load i32, i32* %5, align 16
  %503 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 0
  %504 = load i32, i32* %503, align 16
  br label %505

505:                                              ; preds = %246, %501, %387
  %506 = phi i32 [ %504, %501 ], [ 0, %387 ], [ 0, %246 ]
  %507 = phi i32 [ %502, %501 ], [ %6, %387 ], [ %6, %246 ]
  %508 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 6
  store i32 %507, i32* %508, align 4
  %509 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 8, i32 3
  %510 = load i32, i32* %509, align 4
  %511 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 7
  store i32 %510, i32* %511, align 4
  %512 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 0
  %513 = icmp ugt i32 %506, 10
  %514 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 19
  %515 = load i32, i32* %514, align 4
  %516 = lshr i32 %506, 2
  %517 = icmp ugt i32 %515, %516
  %518 = and i1 %513, %517
  br i1 %518, label %519, label %540

519:                                              ; preds = %505
  store i32 0, i32* %512, align 16
  %520 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 1
  %521 = load i32, i32* %520, align 4
  %522 = lshr i32 %521, 2
  store i32 %522, i32* %520, align 4
  %523 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 2
  %524 = load i32, i32* %523, align 8
  %525 = lshr i32 %524, 2
  store i32 %525, i32* %523, align 8
  %526 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 3
  %527 = load i32, i32* %526, align 4
  %528 = lshr i32 %527, 2
  store i32 %528, i32* %526, align 4
  %529 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 4
  %530 = load i32, i32* %529, align 16
  %531 = lshr i32 %530, 1
  store i32 %531, i32* %529, align 16
  %532 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 5
  %533 = load i32, i32* %532, align 4
  %534 = lshr i32 %533, 1
  store i32 %534, i32* %532, align 4
  %535 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 6
  %536 = load i32, i32* %535, align 8
  %537 = mul i32 %536, 3
  %538 = lshr i32 %537, 1
  store i32 %538, i32* %535, align 8
  %539 = lshr i32 %515, 1
  store i32 %539, i32* %514, align 4
  br label %540

540:                                              ; preds = %505, %519
  %541 = phi i32 [ %539, %519 ], [ %515, %505 ]
  %542 = lshr i32 %541, 2
  %543 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 19
  %544 = load i32, i32* %512, align 16
  %545 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 1
  %546 = load i32, i32* %545, align 4
  %547 = add i32 %546, %544
  %548 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 2
  %549 = load i32, i32* %548, align 8
  %550 = add i32 %547, %549
  %551 = udiv i32 %550, 3
  %552 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 0
  %553 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 18
  br label %554

554:                                              ; preds = %584, %540
  %555 = phi i64 [ 0, %540 ], [ %590, %584 ]
  %556 = phi i32 [ 0, %540 ], [ %589, %584 ]
  %557 = phi i32 [ 0, %540 ], [ %588, %584 ]
  %558 = trunc i64 %555 to i32
  switch i32 %558, label %561 [
    i32 0, label %559
    i32 19, label %560
  ]

559:                                              ; preds = %554
  store i32 %551, i32* %552, align 16
  br label %584

560:                                              ; preds = %554
  store i32 %542, i32* %543, align 4
  br label %584

561:                                              ; preds = %554
  %562 = icmp eq i64 %555, 18
  %563 = add nuw i64 %555, 4294967295
  %564 = and i64 %563, 4294967295
  %565 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %564
  %566 = load i32, i32* %565, align 4
  %567 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %555
  %568 = load i32, i32* %567, align 4
  %569 = shl i32 %568, 1
  %570 = add i32 %569, %566
  %571 = add nuw nsw i64 %555, 1
  %572 = getelementptr inbounds [20 x i32], [20 x i32]* %2, i64 0, i64 %571
  %573 = load i32, i32* %572, align 4
  br i1 %562, label %574, label %579

574:                                              ; preds = %561
  %575 = lshr i32 %573, 1
  %576 = add i32 %570, 2
  %577 = add i32 %576, %575
  %578 = lshr i32 %577, 2
  store i32 %578, i32* %553, align 8
  br label %584

579:                                              ; preds = %561
  %580 = add i32 %570, 2
  %581 = add i32 %580, %573
  %582 = lshr i32 %581, 2
  %583 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %555
  store i32 %582, i32* %583, align 4
  br label %584

584:                                              ; preds = %560, %579, %574, %559
  %585 = getelementptr inbounds [20 x i32], [20 x i32]* %3, i64 0, i64 %555
  %586 = load i32, i32* %585, align 4
  %587 = icmp ugt i32 %586, %556
  %588 = select i1 %587, i32 %558, i32 %557
  %589 = select i1 %587, i32 %586, i32 %556
  %590 = add nuw nsw i64 %555, 1
  %591 = icmp eq i64 %590, 20
  br i1 %591, label %592, label %554

592:                                              ; preds = %584
  %593 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 2
  %594 = load i32, i32* %593, align 4
  %595 = mul nsw i32 %594, 3
  %596 = mul i32 %588, 40
  %597 = add i32 %595, %596
  %598 = lshr i32 %597, 2
  store i32 %598, i32* %593, align 4
  %599 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 1
  %600 = load i32, i32* %599, align 4
  %601 = icmp ult i32 %600, 2
  br i1 %601, label %602, label %610

602:                                              ; preds = %592
  %603 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 4
  %604 = load i32, i32* %603, align 4
  %605 = icmp sgt i32 %598, %604
  br i1 %605, label %606, label %610

606:                                              ; preds = %602
  %607 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 8
  %608 = load i32, i32* %607, align 4
  %609 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 5
  store i32 %608, i32* %609, align 4
  br label %617

610:                                              ; preds = %592, %602
  %611 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 5
  %612 = load i32, i32* %611, align 4
  %613 = add nsw i32 %612, 1
  store i32 %613, i32* %611, align 4
  %614 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 8
  %615 = load i32, i32* %614, align 4
  %616 = icmp eq i32 %613, %615
  br i1 %616, label %617, label %648

617:                                              ; preds = %606, %610
  %618 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 8
  %619 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 5
  store i32 30, i32* %618, align 4
  store i32 0, i32* %619, align 4
  %620 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 82, i32 3
  %621 = load i32, i32* %620, align 4
  %622 = shl i32 %621, 1
  %623 = icmp sgt i32 %598, %622
  br i1 %623, label %630, label %624

624:                                              ; preds = %617
  %625 = icmp sgt i32 %598, %621
  br i1 %625, label %630, label %626

626:                                              ; preds = %624
  %627 = ashr i32 %621, 1
  %628 = icmp sgt i32 %598, %627
  %629 = zext i1 %628 to i32
  br label %630

630:                                              ; preds = %617, %624, %626
  %631 = phi i32 [ 3, %617 ], [ 2, %624 ], [ %629, %626 ]
  store i32 %631, i32* %599, align 4
  %632 = load i32, i32* %19, align 4
  %633 = icmp sgt i32 %632, 0
  br i1 %633, label %635, label %634

634:                                              ; preds = %630
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %248) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %247) #5
  br label %691

635:                                              ; preds = %630
  %636 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %637 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %636, align 16
  %638 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %637, i64 0, i32 16
  %639 = load i32, i32* %638, align 8
  %640 = icmp eq i32 %639, 0
  br i1 %640, label %647, label %641

641:                                              ; preds = %635
  %642 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %643 = load i32, i32* %642, align 16
  %644 = load i32, i32* %115, align 8
  %645 = add nsw i32 %644, -1
  %646 = icmp eq i32 %643, %645
  br i1 %646, label %647, label %648

647:                                              ; preds = %641, %635
  call void @av1_denoiser_set_noise_level(%struct.AV1_COMP* %0, i32 %631) #5
  br label %648

648:                                              ; preds = %641, %647, %610
  %649 = load i32, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %248) #5
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %247) #5
  %650 = icmp sgt i32 %649, 0
  br i1 %650, label %651, label %691

651:                                              ; preds = %648
  %652 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 0
  %653 = load %struct.AV1_PRIMARY*, %struct.AV1_PRIMARY** %652, align 16
  %654 = getelementptr inbounds %struct.AV1_PRIMARY, %struct.AV1_PRIMARY* %653, i64 0, i32 16
  %655 = load i32, i32* %654, align 8
  %656 = icmp eq i32 %655, 0
  br i1 %656, label %663, label %657

657:                                              ; preds = %651
  %658 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 75, i32 0
  %659 = load i32, i32* %658, align 16
  %660 = load i32, i32* %115, align 8
  %661 = add nsw i32 %660, -1
  %662 = icmp eq i32 %659, %661
  br i1 %662, label %663, label %691

663:                                              ; preds = %657, %651
  %664 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %249, align 8
  %665 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 1, i32 0, i32 0
  %666 = load i32, i32* %665, align 8
  %667 = icmp sgt i32 %666, 0
  br i1 %667, label %668, label %691

668:                                              ; preds = %663
  %669 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 5, i32 0, i32 0
  %670 = load i8*, i8** %669, align 8
  %671 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %664, i64 0, i32 5, i32 0, i32 0
  %672 = load i8*, i8** %671, align 8
  %673 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 0, i32 0, i32 0
  %674 = getelementptr inbounds %struct.AV1_COMP, %struct.AV1_COMP* %0, i64 0, i32 83, i32 2, i32 4, i32 0, i32 0
  %675 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %664, i64 0, i32 4, i32 0, i32 0
  br label %676

676:                                              ; preds = %676, %668
  %677 = phi i32 [ 0, %668 ], [ %688, %676 ]
  %678 = phi i8* [ %670, %668 ], [ %684, %676 ]
  %679 = phi i8* [ %672, %668 ], [ %687, %676 ]
  %680 = load i32, i32* %673, align 8
  %681 = sext i32 %680 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %678, i8* align 1 %679, i64 %681, i1 false) #5
  %682 = load i32, i32* %674, align 8
  %683 = sext i32 %682 to i64
  %684 = getelementptr inbounds i8, i8* %678, i64 %683
  %685 = load i32, i32* %675, align 8
  %686 = sext i32 %685 to i64
  %687 = getelementptr inbounds i8, i8* %679, i64 %686
  %688 = add nuw nsw i32 %677, 1
  %689 = load i32, i32* %665, align 8
  %690 = icmp slt i32 %688, %689
  br i1 %690, label %676, label %691

691:                                              ; preds = %676, %231, %657, %663, %634, %217, %648, %209, %213, %184, %182
  ret void
}

declare void @av1_denoiser_set_noise_level(%struct.AV1_COMP*, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
