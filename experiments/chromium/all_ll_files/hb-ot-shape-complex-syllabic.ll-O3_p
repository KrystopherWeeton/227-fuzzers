; ModuleID = '../../third_party/harfbuzz-ng/src/src/hb-ot-shape-complex-syllabic.cc'
source_filename = "../../third_party/harfbuzz-ng/src/src/hb-ot-shape-complex-syllabic.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.hb_font_t = type { %struct.hb_object_header_t, %struct.hb_font_t*, %struct.hb_face_t*, i32, i32, i64, i64, i32, i32, float, i32, i32*, float*, %struct.hb_font_funcs_t*, i8*, void (i8*)*, %struct.hb_shaper_object_dataset_t.139 }
%struct.hb_object_header_t = type { %struct.hb_reference_count_t, %struct.hb_atomic_int_t, %struct.hb_atomic_ptr_t }
%struct.hb_reference_count_t = type { %struct.hb_atomic_int_t }
%struct.hb_atomic_int_t = type { i32 }
%struct.hb_atomic_ptr_t = type { %struct.hb_user_data_array_t* }
%struct.hb_user_data_array_t = type { %struct.hb_mutex_t, %struct.hb_lockable_set_t }
%struct.hb_mutex_t = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.hb_lockable_set_t = type { %struct.hb_vector_t }
%struct.hb_vector_t = type { i32, i32, %"struct.hb_user_data_array_t::hb_user_data_item_t"* }
%"struct.hb_user_data_array_t::hb_user_data_item_t" = type { %struct.hb_user_data_key_t*, i8*, void (i8*)* }
%struct.hb_user_data_key_t = type { i8 }
%struct.hb_face_t = type { %struct.hb_object_header_t, %struct.hb_blob_t* (%struct.hb_face_t*, i32, i8*)*, i8*, void (i8*)*, i32, %struct.hb_atomic_int_t, %struct.hb_atomic_int_t, %struct.hb_shaper_object_dataset_t, %struct.hb_ot_face_t, %struct.hb_atomic_ptr_t.126 }
%struct.hb_blob_t = type { %struct.hb_object_header_t, i8*, i32, i32, i8*, void (i8*)* }
%struct.hb_shaper_object_dataset_t = type { %struct.hb_face_t*, %struct.hb_shaper_lazy_loader_t }
%struct.hb_shaper_lazy_loader_t = type { %struct.hb_lazy_loader_t }
%struct.hb_lazy_loader_t = type { %struct.hb_atomic_ptr_t.0 }
%struct.hb_atomic_ptr_t.0 = type { %struct.hb_ot_face_data_t* }
%struct.hb_ot_face_data_t = type opaque
%struct.hb_ot_face_t = type { %struct.hb_face_t*, %struct.hb_table_lazy_loader_t, %struct.hb_face_lazy_loader_t, %struct.hb_table_lazy_loader_t.6, %struct.hb_face_lazy_loader_t.9, %struct.hb_table_lazy_loader_t.13, %struct.hb_face_lazy_loader_t.16, %struct.hb_face_lazy_loader_t.20, %struct.hb_table_lazy_loader_t.24, %struct.hb_face_lazy_loader_t.27, %struct.hb_table_lazy_loader_t.31, %struct.hb_face_lazy_loader_t.34, %struct.hb_face_lazy_loader_t.38, %struct.hb_face_lazy_loader_t.42, %struct.hb_face_lazy_loader_t.46, %struct.hb_table_lazy_loader_t.50, %struct.hb_table_lazy_loader_t.53, %struct.hb_table_lazy_loader_t.56, %struct.hb_face_lazy_loader_t.59, %struct.hb_table_lazy_loader_t.63, %struct.hb_table_lazy_loader_t.66, %struct.hb_face_lazy_loader_t.69, %struct.hb_face_lazy_loader_t.73, %struct.hb_face_lazy_loader_t.77, %struct.hb_table_lazy_loader_t.81, %struct.hb_table_lazy_loader_t.84, %struct.hb_table_lazy_loader_t.87, %struct.hb_table_lazy_loader_t.90, %struct.hb_table_lazy_loader_t.93, %struct.hb_table_lazy_loader_t.96, %struct.hb_table_lazy_loader_t.99, %struct.hb_table_lazy_loader_t.102, %struct.hb_table_lazy_loader_t.105, %struct.hb_table_lazy_loader_t.108, %struct.hb_face_lazy_loader_t.111, %struct.hb_face_lazy_loader_t.115, %struct.hb_face_lazy_loader_t.119, %struct.hb_table_lazy_loader_t.123 }
%struct.hb_table_lazy_loader_t = type { %struct.hb_lazy_loader_t.1 }
%struct.hb_lazy_loader_t.1 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.2 = type { %struct.hb_blob_t* }
%struct.hb_face_lazy_loader_t = type { %struct.hb_lazy_loader_t.3 }
%struct.hb_lazy_loader_t.3 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_atomic_ptr_t.5 = type { %"struct.OT::cmap_accelerator_t"* }
%"struct.OT::cmap_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.6 = type { %struct.hb_lazy_loader_t.7 }
%struct.hb_lazy_loader_t.7 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.9 = type { %struct.hb_lazy_loader_t.10 }
%struct.hb_lazy_loader_t.10 = type { %struct.hb_atomic_ptr_t.12 }
%struct.hb_atomic_ptr_t.12 = type { %"struct.OT::hmtx_accelerator_t"* }
%"struct.OT::hmtx_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.13 = type { %struct.hb_lazy_loader_t.14 }
%struct.hb_lazy_loader_t.14 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.16 = type { %struct.hb_lazy_loader_t.17 }
%struct.hb_lazy_loader_t.17 = type { %struct.hb_atomic_ptr_t.19 }
%struct.hb_atomic_ptr_t.19 = type { %"struct.OT::post_accelerator_t"* }
%"struct.OT::post_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.20 = type { %struct.hb_lazy_loader_t.21 }
%struct.hb_lazy_loader_t.21 = type { %struct.hb_atomic_ptr_t.23 }
%struct.hb_atomic_ptr_t.23 = type { %"struct.OT::name_accelerator_t"* }
%"struct.OT::name_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.24 = type { %struct.hb_lazy_loader_t.25 }
%struct.hb_lazy_loader_t.25 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.27 = type { %struct.hb_lazy_loader_t.28 }
%struct.hb_lazy_loader_t.28 = type { %struct.hb_atomic_ptr_t.30 }
%struct.hb_atomic_ptr_t.30 = type { %"struct.OT::meta_accelerator_t"* }
%"struct.OT::meta_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.31 = type { %struct.hb_lazy_loader_t.32 }
%struct.hb_lazy_loader_t.32 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.34 = type { %struct.hb_lazy_loader_t.35 }
%struct.hb_lazy_loader_t.35 = type { %struct.hb_atomic_ptr_t.37 }
%struct.hb_atomic_ptr_t.37 = type { %"struct.OT::vmtx_accelerator_t"* }
%"struct.OT::vmtx_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.38 = type { %struct.hb_lazy_loader_t.39 }
%struct.hb_lazy_loader_t.39 = type { %struct.hb_atomic_ptr_t.41 }
%struct.hb_atomic_ptr_t.41 = type { %"struct.OT::glyf_accelerator_t"* }
%"struct.OT::glyf_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.42 = type { %struct.hb_lazy_loader_t.43 }
%struct.hb_lazy_loader_t.43 = type { %struct.hb_atomic_ptr_t.45 }
%struct.hb_atomic_ptr_t.45 = type { %"struct.OT::cff1_accelerator_t"* }
%"struct.OT::cff1_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.46 = type { %struct.hb_lazy_loader_t.47 }
%struct.hb_lazy_loader_t.47 = type { %struct.hb_atomic_ptr_t.49 }
%struct.hb_atomic_ptr_t.49 = type { %"struct.OT::cff2_accelerator_t"* }
%"struct.OT::cff2_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.50 = type { %struct.hb_lazy_loader_t.51 }
%struct.hb_lazy_loader_t.51 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.53 = type { %struct.hb_lazy_loader_t.54 }
%struct.hb_lazy_loader_t.54 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.56 = type { %struct.hb_lazy_loader_t.57 }
%struct.hb_lazy_loader_t.57 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.59 = type { %struct.hb_lazy_loader_t.60 }
%struct.hb_lazy_loader_t.60 = type { %struct.hb_atomic_ptr_t.62 }
%struct.hb_atomic_ptr_t.62 = type { %"struct.OT::gvar_accelerator_t"* }
%"struct.OT::gvar_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.63 = type { %struct.hb_lazy_loader_t.64 }
%struct.hb_lazy_loader_t.64 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.66 = type { %struct.hb_lazy_loader_t.67 }
%struct.hb_lazy_loader_t.67 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.69 = type { %struct.hb_lazy_loader_t.70 }
%struct.hb_lazy_loader_t.70 = type { %struct.hb_atomic_ptr_t.72 }
%struct.hb_atomic_ptr_t.72 = type { %"struct.OT::GDEF_accelerator_t"* }
%"struct.OT::GDEF_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.73 = type { %struct.hb_lazy_loader_t.74 }
%struct.hb_lazy_loader_t.74 = type { %struct.hb_atomic_ptr_t.76 }
%struct.hb_atomic_ptr_t.76 = type { %"struct.OT::GSUB_accelerator_t"* }
%"struct.OT::GSUB_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.77 = type { %struct.hb_lazy_loader_t.78 }
%struct.hb_lazy_loader_t.78 = type { %struct.hb_atomic_ptr_t.80 }
%struct.hb_atomic_ptr_t.80 = type { %"struct.OT::GPOS_accelerator_t"* }
%"struct.OT::GPOS_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.81 = type { %struct.hb_lazy_loader_t.82 }
%struct.hb_lazy_loader_t.82 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.84 = type { %struct.hb_lazy_loader_t.85 }
%struct.hb_lazy_loader_t.85 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.87 = type { %struct.hb_lazy_loader_t.88 }
%struct.hb_lazy_loader_t.88 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.90 = type { %struct.hb_lazy_loader_t.91 }
%struct.hb_lazy_loader_t.91 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.93 = type { %struct.hb_lazy_loader_t.94 }
%struct.hb_lazy_loader_t.94 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.96 = type { %struct.hb_lazy_loader_t.97 }
%struct.hb_lazy_loader_t.97 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.99 = type { %struct.hb_lazy_loader_t.100 }
%struct.hb_lazy_loader_t.100 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.102 = type { %struct.hb_lazy_loader_t.103 }
%struct.hb_lazy_loader_t.103 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.105 = type { %struct.hb_lazy_loader_t.106 }
%struct.hb_lazy_loader_t.106 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.108 = type { %struct.hb_lazy_loader_t.109 }
%struct.hb_lazy_loader_t.109 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.111 = type { %struct.hb_lazy_loader_t.112 }
%struct.hb_lazy_loader_t.112 = type { %struct.hb_atomic_ptr_t.114 }
%struct.hb_atomic_ptr_t.114 = type { %"struct.OT::CBDT_accelerator_t"* }
%"struct.OT::CBDT_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.115 = type { %struct.hb_lazy_loader_t.116 }
%struct.hb_lazy_loader_t.116 = type { %struct.hb_atomic_ptr_t.118 }
%struct.hb_atomic_ptr_t.118 = type { %"struct.OT::sbix_accelerator_t"* }
%"struct.OT::sbix_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.119 = type { %struct.hb_lazy_loader_t.120 }
%struct.hb_lazy_loader_t.120 = type { %struct.hb_atomic_ptr_t.122 }
%struct.hb_atomic_ptr_t.122 = type { %"struct.OT::SVG_accelerator_t"* }
%"struct.OT::SVG_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.123 = type { %struct.hb_lazy_loader_t.124 }
%struct.hb_lazy_loader_t.124 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.126 = type { %"struct.hb_face_t::plan_node_t"* }
%"struct.hb_face_t::plan_node_t" = type { %struct.hb_shape_plan_t*, %"struct.hb_face_t::plan_node_t"* }
%struct.hb_shape_plan_t = type { %struct.hb_object_header_t, %struct.hb_face_t*, %struct.hb_shape_plan_key_t, %struct.hb_ot_shape_plan_t }
%struct.hb_shape_plan_key_t = type { %struct.hb_segment_properties_t, %struct.hb_feature_t*, i32, %struct.hb_ot_shape_plan_key_t, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i8* }
%struct.hb_segment_properties_t = type { i32, i32, %struct.hb_language_impl_t*, i8*, i8* }
%struct.hb_language_impl_t = type opaque
%struct.hb_feature_t = type { i32, i32, i32, i32 }
%struct.hb_ot_shape_plan_key_t = type { [2 x i32] }
%struct.hb_ot_shape_plan_t = type <{ %struct.hb_segment_properties_t, %struct.hb_ot_complex_shaper_t*, %struct.hb_ot_map_t, %struct.hb_aat_map_t, i8*, i32, i32, i32, i32, i32, i32, i16, [6 x i8] }>
%struct.hb_ot_complex_shaper_t = type { void (%struct.hb_ot_shape_planner_t*)*, void (%struct.hb_ot_shape_planner_t*)*, i8* (%struct.hb_ot_shape_plan_t*)*, void (i8*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, i32, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32*, i32*)*, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32, i32*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, i32, i32)*, i32, i8 }
%struct.hb_ot_shape_planner_t = type { %struct.hb_face_t*, %struct.hb_segment_properties_t, %struct.hb_ot_map_builder_t, %struct.hb_aat_map_builder_t, i8, %struct.hb_ot_complex_shaper_t* }
%struct.hb_ot_map_builder_t = type { %struct.hb_face_t*, %struct.hb_segment_properties_t, [2 x i32], [2 x i8], [2 x i32], [2 x i32], [2 x i32], %struct.hb_vector_t.129, [2 x %struct.hb_vector_t.130] }
%struct.hb_vector_t.129 = type { i32, i32, %"struct.hb_ot_map_builder_t::feature_info_t"* }
%"struct.hb_ot_map_builder_t::feature_info_t" = type { i32, i32, i32, i32, i32, [2 x i32] }
%struct.hb_vector_t.130 = type { i32, i32, %"struct.hb_ot_map_builder_t::stage_info_t"* }
%"struct.hb_ot_map_builder_t::stage_info_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_builder_t = type { %struct.hb_face_t*, %struct.hb_sorted_vector_t }
%struct.hb_sorted_vector_t = type { %struct.hb_vector_t.131 }
%struct.hb_vector_t.131 = type { i32, i32, %"struct.hb_aat_map_builder_t::feature_info_t"* }
%"struct.hb_aat_map_builder_t::feature_info_t" = type { i32, i32, i8, i32 }
%struct.hb_ot_shape_normalize_context_t = type { %struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*, %struct.hb_unicode_funcs_t*, {}*, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32, i32*)* }
%struct.hb_unicode_funcs_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, %struct.anon, %struct.anon.127, %struct.anon.128 }
%struct.anon = type { i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i8*)* }
%struct.anon.127 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.128 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%struct.hb_ot_map_t = type { [2 x i32], [2 x i8], i32, %struct.hb_sorted_vector_t.132, [2 x %struct.hb_vector_t.134], [2 x %struct.hb_vector_t.135] }
%struct.hb_sorted_vector_t.132 = type { %struct.hb_vector_t.133 }
%struct.hb_vector_t.133 = type { i32, i32, %"struct.hb_ot_map_t::feature_map_t"* }
%"struct.hb_ot_map_t::feature_map_t" = type { i32, [2 x i32], [2 x i32], i32, i32, i32, i8 }
%struct.hb_vector_t.134 = type { i32, i32, %"struct.hb_ot_map_t::lookup_map_t"* }
%"struct.hb_ot_map_t::lookup_map_t" = type { i16, i8, i32 }
%struct.hb_vector_t.135 = type { i32, i32, %"struct.hb_ot_map_t::stage_map_t"* }
%"struct.hb_ot_map_t::stage_map_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_t = type { %struct.hb_vector_t.136 }
%struct.hb_vector_t.136 = type { i32, i32, i32* }
%struct.hb_font_funcs_t = type { %struct.hb_object_header_t, %struct.anon.137, %struct.anon.138, %"union.hb_font_funcs_t::get_t" }
%struct.anon.137 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.138 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%"union.hb_font_funcs_t::get_t" = type { %"struct.hb_font_funcs_t::get_t::get_funcs_t" }
%"struct.hb_font_funcs_t::get_t::get_funcs_t" = type { i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, %struct.hb_glyph_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i8*, i32, i32*, i8*)* }
%struct.hb_font_extents_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hb_glyph_extents_t = type { i32, i32, i32, i32 }
%struct.hb_shaper_object_dataset_t.139 = type { %struct.hb_font_t*, %struct.hb_shaper_lazy_loader_t.140 }
%struct.hb_shaper_lazy_loader_t.140 = type { %struct.hb_lazy_loader_t.141 }
%struct.hb_lazy_loader_t.141 = type { %struct.hb_atomic_ptr_t.143 }
%struct.hb_atomic_ptr_t.143 = type { %struct.hb_ot_font_data_t* }
%struct.hb_ot_font_data_t = type opaque
%struct.hb_buffer_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.hb_segment_properties_t, i8, i8, i8, i32, i32, i32, i32, %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t*, %struct.hb_glyph_position_t*, i32, [2 x [5 x i32]], [2 x i32], i32 (%struct.hb_buffer_t*, %struct.hb_font_t*, i8*, i8*)*, i8*, void (i8*)* }
%struct.hb_glyph_info_t = type { i32, i32, i32, %union._hb_var_int_t, %union._hb_var_int_t }
%union._hb_var_int_t = type { i32 }
%struct.hb_glyph_position_t = type { i32, i32, i32, i32, %union._hb_var_int_t }

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z33hb_syllabic_insert_dotted_circlesP9hb_font_tP11hb_buffer_tjji(%struct.hb_font_t*, %struct.hb_buffer_t*, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, 16
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %189, !prof !2

11:                                               ; preds = %5
  %12 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 15
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 18
  %15 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %14, align 8
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %189, label %17

17:                                               ; preds = %11
  %18 = zext i32 %13 to i64
  br label %21

19:                                               ; preds = %21
  %20 = icmp eq i64 %30, %18
  br i1 %20, label %189, label %21

21:                                               ; preds = %19, %17
  %22 = phi i64 [ 0, %17 ], [ %30, %19 ]
  %23 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %15, i64 %22, i32 3
  %24 = bitcast %union._hb_var_int_t* %23 to [4 x i8]*
  %25 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 3
  %26 = load i8, i8* %25, align 1
  %27 = and i8 %26, 15
  %28 = zext i8 %27 to i32
  %29 = icmp eq i32 %28, %2
  %30 = add nuw nsw i64 %22, 1
  br i1 %29, label %31, label %19

31:                                               ; preds = %21
  %32 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #3
  store i32 0, i32* %6, align 4
  %33 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 13
  %34 = load %struct.hb_font_funcs_t*, %struct.hb_font_funcs_t** %33, align 8
  %35 = getelementptr inbounds %struct.hb_font_funcs_t, %struct.hb_font_funcs_t* %34, i64 0, i32 3, i32 0, i32 2
  %36 = load i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)** %35, align 8
  %37 = getelementptr inbounds %struct.hb_font_t, %struct.hb_font_t* %0, i64 0, i32 14
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds %struct.hb_font_funcs_t, %struct.hb_font_funcs_t* %34, i64 0, i32 1, i32 2
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 %36(%struct.hb_font_t* %0, i8* %38, i32 9676, i32* nonnull %6, i8* %40) #3
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %188, label %43

43:                                               ; preds = %31
  %44 = load i32, i32* %6, align 4
  call void @_ZN11hb_buffer_t12clear_outputEv(%struct.hb_buffer_t* %1) #3
  %45 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 14
  store i32 0, i32* %45, align 4
  %46 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 11
  %47 = load i32, i32* %12, align 8
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %187, label %49

49:                                               ; preds = %43
  %50 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 12
  %51 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 19
  %52 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 16
  %53 = shl i32 %3, 16
  %54 = and i32 %53, 16711680
  %55 = icmp ne i32 %4, -1
  br label %56

56:                                               ; preds = %49, %182
  %57 = phi i32 [ %47, %49 ], [ %185, %182 ]
  %58 = phi i32 [ 0, %49 ], [ %184, %182 ]
  %59 = phi i32 [ 0, %49 ], [ %183, %182 ]
  %60 = load i8, i8* %46, align 8, !range !3
  %61 = icmp eq i8 %60, 0
  br i1 %61, label %187, label %62

62:                                               ; preds = %56
  %63 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %14, align 8
  %64 = zext i32 %58 to i64
  %65 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %63, i64 %64, i32 3
  %66 = bitcast %union._hb_var_int_t* %65 to [4 x i8]*
  %67 = getelementptr inbounds [4 x i8], [4 x i8]* %66, i64 0, i64 3
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = icmp ne i32 %59, %69
  %71 = and i32 %69, 15
  %72 = icmp eq i32 %71, %2
  %73 = and i1 %70, %72
  br i1 %73, label %74, label %151, !prof !4

74:                                               ; preds = %62
  %75 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %63, i64 %64, i32 2
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %63, i64 %64, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = icmp ult i32 %58, %57
  %80 = and i1 %55, %79
  br i1 %80, label %81, label %137

81:                                               ; preds = %74, %134
  %82 = phi i32 [ %131, %134 ], [ %58, %74 ]
  %83 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %14, align 8
  %84 = zext i32 %82 to i64
  %85 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %83, i64 %84, i32 3
  %86 = bitcast %union._hb_var_int_t* %85 to [4 x i8]*
  %87 = getelementptr inbounds [4 x i8], [4 x i8]* %86, i64 0, i64 3
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %68, %88
  br i1 %89, label %90, label %137

90:                                               ; preds = %81
  %91 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %83, i64 %84, i32 4
  %92 = bitcast %union._hb_var_int_t* %91 to [4 x i8]*
  %93 = getelementptr inbounds [4 x i8], [4 x i8]* %92, i64 0, i64 2
  %94 = load i8, i8* %93, align 2
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %95, %4
  br i1 %96, label %97, label %137

97:                                               ; preds = %90
  %98 = load i8, i8* %50, align 1, !range !3
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %127, label %100

100:                                              ; preds = %97
  %101 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %51, align 8
  %102 = icmp eq %struct.hb_glyph_info_t* %101, %83
  br i1 %102, label %103, label %106

103:                                              ; preds = %100
  %104 = load i32, i32* %52, align 4
  %105 = icmp eq i32 %104, %82
  br i1 %105, label %123, label %106

106:                                              ; preds = %103, %100
  %107 = call zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t* %1, i32 1, i32 1) #3
  br i1 %107, label %110, label %108, !prof !2

108:                                              ; preds = %106
  %109 = load i32, i32* %45, align 4
  br label %130

110:                                              ; preds = %106
  %111 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %14, align 8
  %112 = load i32, i32* %45, align 4
  %113 = zext i32 %112 to i64
  %114 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %111, i64 %113
  %115 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %51, align 8
  %116 = load i32, i32* %52, align 4
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %115, i64 %117
  %119 = bitcast %struct.hb_glyph_info_t* %118 to i8*
  %120 = bitcast %struct.hb_glyph_info_t* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %120, i64 20, i1 false) #3
  %121 = load i32, i32* %52, align 4
  %122 = load i32, i32* %45, align 4
  br label %123

123:                                              ; preds = %110, %103
  %124 = phi i32 [ %82, %103 ], [ %122, %110 ]
  %125 = phi i32 [ %82, %103 ], [ %121, %110 ]
  %126 = add i32 %125, 1
  store i32 %126, i32* %52, align 4
  br label %127

127:                                              ; preds = %123, %97
  %128 = phi i32 [ %124, %123 ], [ %82, %97 ]
  %129 = add i32 %128, 1
  store i32 %129, i32* %45, align 4
  br label %130

130:                                              ; preds = %108, %127
  %131 = phi i32 [ %109, %108 ], [ %129, %127 ]
  %132 = load i32, i32* %12, align 8
  %133 = icmp ult i32 %131, %132
  br i1 %133, label %134, label %137

134:                                              ; preds = %130
  %135 = load i8, i8* %46, align 8, !range !3
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %137, label %81

137:                                              ; preds = %130, %81, %90, %134, %74
  %138 = call zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t* %1, i32 0, i32 1) #3
  br i1 %138, label %139, label %182, !prof !2

139:                                              ; preds = %137
  %140 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %51, align 8
  %141 = load i32, i32* %52, align 4
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %140, i64 %142, i32 0
  store i32 %44, i32* %143, align 4
  %144 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %140, i64 %142, i32 1
  store i32 %78, i32* %144, align 4
  %145 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %140, i64 %142, i32 2
  store i32 %76, i32* %145, align 4
  %146 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %140, i64 %142, i32 3, i32 0
  %147 = shl nuw i32 %69, 24
  store i32 %147, i32* %146, align 4
  %148 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %140, i64 %142, i32 4, i32 0
  store i32 %54, i32* %148, align 4
  %149 = load i32, i32* %52, align 4
  %150 = add i32 %149, 1
  store i32 %150, i32* %52, align 4
  br label %182

151:                                              ; preds = %62
  %152 = load i8, i8* %50, align 1, !range !3
  %153 = icmp eq i8 %152, 0
  br i1 %153, label %179, label %154

154:                                              ; preds = %151
  %155 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %51, align 8
  %156 = icmp eq %struct.hb_glyph_info_t* %155, %63
  br i1 %156, label %157, label %160

157:                                              ; preds = %154
  %158 = load i32, i32* %52, align 4
  %159 = icmp eq i32 %158, %58
  br i1 %159, label %175, label %160

160:                                              ; preds = %157, %154
  %161 = call zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t* %1, i32 1, i32 1) #3
  br i1 %161, label %162, label %182, !prof !2

162:                                              ; preds = %160
  %163 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %14, align 8
  %164 = load i32, i32* %45, align 4
  %165 = zext i32 %164 to i64
  %166 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %163, i64 %165
  %167 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %51, align 8
  %168 = load i32, i32* %52, align 4
  %169 = zext i32 %168 to i64
  %170 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %167, i64 %169
  %171 = bitcast %struct.hb_glyph_info_t* %170 to i8*
  %172 = bitcast %struct.hb_glyph_info_t* %166 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %171, i8* align 4 %172, i64 20, i1 false) #3
  %173 = load i32, i32* %52, align 4
  %174 = load i32, i32* %45, align 4
  br label %175

175:                                              ; preds = %162, %157
  %176 = phi i32 [ %58, %157 ], [ %174, %162 ]
  %177 = phi i32 [ %58, %157 ], [ %173, %162 ]
  %178 = add i32 %177, 1
  store i32 %178, i32* %52, align 4
  br label %179

179:                                              ; preds = %175, %151
  %180 = phi i32 [ %176, %175 ], [ %58, %151 ]
  %181 = add i32 %180, 1
  store i32 %181, i32* %45, align 4
  br label %182

182:                                              ; preds = %179, %160, %139, %137
  %183 = phi i32 [ %69, %137 ], [ %69, %139 ], [ %59, %160 ], [ %59, %179 ]
  %184 = load i32, i32* %45, align 4
  %185 = load i32, i32* %12, align 8
  %186 = icmp ult i32 %184, %185
  br i1 %186, label %56, label %187

187:                                              ; preds = %182, %56, %43
  call void @_ZN11hb_buffer_t12swap_buffersEv(%struct.hb_buffer_t* %1) #3
  br label %188

188:                                              ; preds = %31, %187
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #3
  br label %189

189:                                              ; preds = %19, %11, %188, %5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare hidden void @_ZN11hb_buffer_t12clear_outputEv(%struct.hb_buffer_t*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare hidden void @_ZN11hb_buffer_t12swap_buffersEv(%struct.hb_buffer_t*) local_unnamed_addr #2

declare hidden zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
