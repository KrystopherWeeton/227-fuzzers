; ModuleID = '../../third_party/boringssl/src/ssl/ssl_versions.cc'
source_filename = "../../third_party/boringssl/src/ssl/ssl_versions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { i16, i32 }
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.84", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.51", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.105", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.23", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.9", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.23", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, %"class.bssl::Array.49", %"class.std::__1::unique_ptr.12", %"class.bssl::Array", %"class.bssl::GrowableArray.75", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.49", %"class.std::__1::unique_ptr.77", i8, i16, [5 x i8] }>
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.3", i8* }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.bssl::CERT"* }
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.17", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.49", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", i8, [32 x i8], %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.12", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.22 }
%union.anon.22 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%union.crypto_mutex_st = type { double, [48 x i8] }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.17", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.33, i16, [2 x i8], %"class.std::__1::unique_ptr.34", [2 x %"class.std::__1::unique_ptr.39"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.49", %"class.bssl::Array.49", %"class.bssl::Array.49", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.50", %"class.bssl::Array", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.56", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.63", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.33 = type { i32 }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.44", %"class.bssl::internal::StackAllocated" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %struct.buf_mem_st* }
%"class.bssl::internal::StackAllocated" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.50" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.59" }
%"class.bssl::Array.59" = type { %"class.std::__1::unique_ptr.60"*, i64 }
%"class.std::__1::unique_ptr.60" = type opaque
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.0", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.9", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.108", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.23", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.77", %"class.bssl::GrowableArray.113", %"class.bssl::Array.49", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.56", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.49", i16, [6 x i8] }>
%struct.lhash_st_SSL_SESSION = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.bssl::GrowableArray.113" = type { i64, %"class.bssl::Array.114" }
%"class.bssl::Array.114" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.28", i16, %"class.std::__1::unique_ptr.12" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %struct.evp_pkey_st* }
%"class.bssl::GrowableArray.75" = type { i64, %"class.bssl::Array.76" }
%"class.bssl::Array.76" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.bssl::Array" = type { i8*, i64 }
%"class.bssl::Array.49" = type { i16*, i64 }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.34", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.95", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.51", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.23", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.bssl::Span" = type { i8*, i64 }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.bssl::SSLAEADContext"* }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated.92", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%"class.bssl::internal::StackAllocated.92" = type { %struct.evp_aead_ctx_st }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%struct.srtp_protection_profile_st = type { i8*, i64 }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr.89", [7 x %"class.std::__1::unique_ptr.100"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %struct.ssl_ctx_st* }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i8* }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }

@.str = private unnamed_addr constant [52 x i8] c"../../third_party/boringssl/src/ssl/ssl_versions.cc\00", align 1
@_ZN4bsslL17kProtocolVersionsE = internal unnamed_addr constant [4 x %struct.anon] [%struct.anon { i16 769, i32 67108864 }, %struct.anon { i16 770, i32 268435456 }, %struct.anon { i16 771, i32 134217728 }, %struct.anon { i16 772, i32 536870912 }], align 16
@_ZN4bsslL13kDTLSVersionsE = internal constant [2 x i16] [i16 -259, i16 -257], align 2
@_ZN4bsslL12kTLSVersionsE = internal constant [4 x i16] [i16 772, i16 771, i16 770, i16 769], align 2
@.str.1 = private unnamed_addr constant [8 x i8] c"TLSv1.3\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"TLSv1.2\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"TLSv1.1\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"TLSv1\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"DTLSv1\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"DTLSv1.2\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden zeroext i1 @_ZN4bssl30ssl_protocol_version_from_wireEPtt(i16* nocapture, i16 zeroext) local_unnamed_addr #0 {
  switch i16 %1, label %7 [
    i16 769, label %5
    i16 770, label %5
    i16 771, label %5
    i16 772, label %5
    i16 -257, label %3
    i16 -259, label %4
  ]

3:                                                ; preds = %2
  br label %5

4:                                                ; preds = %2
  br label %5

5:                                                ; preds = %2, %2, %2, %2, %3, %4
  %6 = phi i16 [ 771, %4 ], [ 770, %3 ], [ %1, %2 ], [ %1, %2 ], [ %1, %2 ], [ %1, %2 ]
  store i16 %6, i16* %0, align 2
  br label %7

7:                                                ; preds = %5, %2
  %8 = phi i1 [ false, %2 ], [ true, %5 ]
  ret i1 %8
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4bssl27ssl_method_supports_versionEPKNS_19SSL_PROTOCOL_METHODEt(%"struct.bssl::SSL_PROTOCOL_METHOD"* nocapture readonly, i16 zeroext) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %0, i64 0, i32 0
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  %6 = select i1 %5, i64 4, i64 2
  %7 = select i1 %5, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %8 = getelementptr inbounds i16, i16* %7, i64 %6
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i16* %15, %8
  br i1 %10, label %16, label %11

11:                                               ; preds = %2, %9
  %12 = phi i16* [ %15, %9 ], [ %7, %2 ]
  %13 = load i16, i16* %12, align 2
  %14 = icmp eq i16 %13, %1
  %15 = getelementptr inbounds i16, i16* %12, i64 1
  br i1 %14, label %16, label %9

16:                                               ; preds = %9, %11
  %17 = phi i1 [ false, %9 ], [ true, %11 ]
  ret i1 %17
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl21ssl_get_version_rangeEPKNS_13SSL_HANDSHAKEEPtS3_(%"struct.bssl::SSL_HANDSHAKE"* nocapture readonly, i16* nocapture, i16* nocapture) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %5 = load %struct.ssl_st*, %struct.ssl_st** %4, align 8
  %6 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %5, i64 0, i32 19
  %7 = load i32, i32* %6, align 8
  %8 = tail call i32 @SSL_is_dtls(%struct.ssl_st* %5) #6
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %16, label %10

10:                                               ; preds = %3
  %11 = and i32 %7, -268435457
  %12 = and i32 %7, 67108864
  %13 = icmp eq i32 %12, 0
  %14 = or i32 %7, 268435456
  %15 = select i1 %13, i32 %11, i32 %14
  br label %16

16:                                               ; preds = %10, %3
  %17 = phi i32 [ %7, %3 ], [ %15, %10 ]
  %18 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 1
  %19 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %18, align 8
  %20 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %19, i64 0, i32 2
  %21 = load i16, i16* %20, align 2
  switch i16 %21, label %30 [
    i16 769, label %24
    i16 770, label %24
    i16 771, label %24
    i16 772, label %24
    i16 -257, label %22
    i16 -259, label %23
  ]

22:                                               ; preds = %16
  br label %24

23:                                               ; preds = %16
  br label %24

24:                                               ; preds = %16, %16, %16, %16, %23, %22
  %25 = phi i16 [ 770, %22 ], [ 771, %23 ], [ %21, %16 ], [ %21, %16 ], [ %21, %16 ], [ %21, %16 ]
  %26 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %19, i64 0, i32 1
  %27 = load i16, i16* %26, align 8
  switch i16 %27, label %30 [
    i16 769, label %31
    i16 770, label %31
    i16 771, label %31
    i16 772, label %31
    i16 -257, label %28
    i16 -259, label %29
  ]

28:                                               ; preds = %24
  br label %31

29:                                               ; preds = %24
  br label %31

30:                                               ; preds = %24, %16
  tail call void @ERR_put_error(i32 16, i32 0, i32 68, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 187) #6
  br label %62

31:                                               ; preds = %24, %24, %24, %24, %29, %28
  %32 = phi i16 [ 770, %28 ], [ 771, %29 ], [ %27, %24 ], [ %27, %24 ], [ %27, %24 ], [ %27, %24 ]
  %33 = load %struct.ssl_st*, %struct.ssl_st** %4, align 8
  %34 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %33, i64 0, i32 24
  %35 = load %struct.ssl_quic_method_st*, %struct.ssl_quic_method_st** %34, align 8
  %36 = icmp ne %struct.ssl_quic_method_st* %35, null
  %37 = icmp ult i16 %25, 772
  %38 = and i1 %37, %36
  %39 = select i1 %38, i16 772, i16 %25
  %40 = icmp ugt i16 %39, 769
  br i1 %40, label %52, label %41

41:                                               ; preds = %31
  %42 = lshr i32 %17, 26
  %43 = trunc i32 %42 to i8
  %44 = and i8 %43, 1
  %45 = xor i8 %44, 1
  br label %64

46:                                               ; preds = %98, %85, %72
  %47 = phi i64 [ 0, %72 ], [ 1, %85 ], [ 2, %98 ]
  %48 = phi i8 [ 1, %72 ], [ %78, %85 ], [ %91, %98 ]
  %49 = phi i16 [ %66, %72 ], [ %79, %85 ], [ %90, %98 ]
  %50 = getelementptr inbounds [4 x %struct.anon], [4 x %struct.anon]* @_ZN4bsslL17kProtocolVersionsE, i64 0, i64 %47, i32 0
  %51 = load i16, i16* %50, align 8
  br label %54

52:                                               ; preds = %31
  %53 = icmp eq i16 %39, 770
  br i1 %53, label %64, label %75

54:                                               ; preds = %98, %99, %64, %77, %89, %46
  %55 = phi i16 [ %49, %46 ], [ %66, %64 ], [ %79, %77 ], [ %90, %89 ], [ %90, %98 ], [ %100, %99 ]
  %56 = phi i8 [ %48, %46 ], [ %65, %64 ], [ %78, %77 ], [ %91, %89 ], [ %91, %98 ], [ %101, %99 ]
  %57 = phi i16 [ %51, %46 ], [ 769, %64 ], [ %32, %77 ], [ %32, %89 ], [ 772, %98 ], [ 772, %99 ]
  %58 = and i8 %56, 1
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %54
  tail call void @ERR_put_error(i32 16, i32 0, i32 280, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 234) #6
  br label %62

61:                                               ; preds = %54
  store i16 %55, i16* %1, align 2
  store i16 %57, i16* %2, align 2
  br label %62

62:                                               ; preds = %60, %61, %30
  %63 = phi i1 [ false, %30 ], [ true, %61 ], [ false, %60 ]
  ret i1 %63

64:                                               ; preds = %52, %41
  %65 = phi i8 [ 0, %52 ], [ %45, %41 ]
  %66 = phi i16 [ 770, %52 ], [ 769, %41 ]
  %67 = icmp ult i16 %32, 770
  br i1 %67, label %54, label %68

68:                                               ; preds = %64
  %69 = and i32 %17, 268435456
  %70 = icmp eq i32 %69, 0
  %71 = icmp ne i8 %65, 0
  br i1 %70, label %73, label %72

72:                                               ; preds = %68
  br i1 %71, label %46, label %77

73:                                               ; preds = %68
  %74 = select i1 %71, i16 %66, i16 770
  br label %77

75:                                               ; preds = %52
  %76 = icmp ugt i16 %39, 771
  br i1 %76, label %89, label %77

77:                                               ; preds = %73, %72, %75
  %78 = phi i8 [ 0, %75 ], [ 1, %73 ], [ 0, %72 ]
  %79 = phi i16 [ 771, %75 ], [ %74, %73 ], [ %66, %72 ]
  %80 = icmp ult i16 %32, 771
  br i1 %80, label %54, label %81

81:                                               ; preds = %77
  %82 = and i32 %17, 134217728
  %83 = icmp eq i32 %82, 0
  %84 = icmp ne i8 %78, 0
  br i1 %83, label %86, label %85

85:                                               ; preds = %81
  br i1 %84, label %46, label %89

86:                                               ; preds = %81
  %87 = select i1 %84, i16 %79, i16 771
  %88 = select i1 %84, i8 %78, i8 1
  br label %89

89:                                               ; preds = %75, %85, %86
  %90 = phi i16 [ 772, %75 ], [ %79, %85 ], [ %87, %86 ]
  %91 = phi i8 [ 0, %75 ], [ %78, %85 ], [ %88, %86 ]
  %92 = icmp ult i16 %32, 772
  br i1 %92, label %54, label %93

93:                                               ; preds = %89
  %94 = and i32 %17, 536870912
  %95 = icmp eq i32 %94, 0
  %96 = and i8 %91, 1
  %97 = icmp ne i8 %96, 0
  br i1 %95, label %99, label %98

98:                                               ; preds = %93
  br i1 %97, label %46, label %54

99:                                               ; preds = %93
  %100 = select i1 %97, i16 %90, i16 772
  %101 = select i1 %97, i8 %91, i8 1
  br label %54
}

declare i32 @SSL_is_dtls(%struct.ssl_st*) local_unnamed_addr #4

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZN4bssl20ssl_protocol_versionEPK6ssl_st(%struct.ssl_st* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 2
  %3 = load i16, i16* %2, align 8
  switch i16 %3, label %7 [
    i16 769, label %4
    i16 770, label %4
    i16 771, label %4
    i16 772, label %4
    i16 -257, label %5
    i16 -259, label %6
  ]

4:                                                ; preds = %1, %1, %1, %1
  br label %7

5:                                                ; preds = %1
  br label %7

6:                                                ; preds = %1
  br label %7

7:                                                ; preds = %4, %5, %6, %1
  %8 = phi i16 [ 0, %1 ], [ %3, %4 ], [ 770, %5 ], [ 771, %6 ]
  ret i16 %8
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4bssl20ssl_supports_versionEPNS_13SSL_HANDSHAKEEt(%"struct.bssl::SSL_HANDSHAKE"* nocapture readonly, i16 zeroext) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %4 = load %struct.ssl_st*, %struct.ssl_st** %3, align 8
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %4, i64 0, i32 0
  %6 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %5, align 8
  %7 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i64 4, i64 2
  %11 = select i1 %9, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %12 = getelementptr inbounds i16, i16* %11, i64 %10
  br label %15

13:                                               ; preds = %15
  %14 = icmp eq i16* %19, %12
  br i1 %14, label %32, label %15

15:                                               ; preds = %13, %2
  %16 = phi i16* [ %19, %13 ], [ %11, %2 ]
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, %1
  %19 = getelementptr inbounds i16, i16* %16, i64 1
  br i1 %18, label %20, label %13

20:                                               ; preds = %15
  switch i16 %1, label %32 [
    i16 769, label %23
    i16 770, label %23
    i16 771, label %23
    i16 772, label %23
    i16 -257, label %21
    i16 -259, label %22
  ]

21:                                               ; preds = %20
  br label %23

22:                                               ; preds = %20
  br label %23

23:                                               ; preds = %20, %20, %20, %20, %22, %21
  %24 = phi i16 [ 770, %21 ], [ 771, %22 ], [ %1, %20 ], [ %1, %20 ], [ %1, %20 ], [ %1, %20 ]
  %25 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 5
  %26 = load i16, i16* %25, align 4
  %27 = icmp ugt i16 %26, %24
  br i1 %27, label %32, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 6
  %30 = load i16, i16* %29, align 2
  %31 = icmp ule i16 %24, %30
  br label %32

32:                                               ; preds = %13, %20, %28, %23
  %33 = phi i1 [ false, %23 ], [ %31, %28 ], [ false, %20 ], [ false, %13 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl26ssl_add_supported_versionsEPNS_13SSL_HANDSHAKEEP6cbb_st(%"struct.bssl::SSL_HANDSHAKE"* nocapture readonly, %struct.cbb_st*) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %4 = load %struct.ssl_st*, %struct.ssl_st** %3, align 8
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %4, i64 0, i32 0
  %6 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %5, align 8
  %7 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %6, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i64 4, i64 2
  %11 = select i1 %9, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %12 = getelementptr inbounds i16, i16* %11, i64 %10
  %13 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 5
  %14 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 6
  br label %15

15:                                               ; preds = %46, %2
  %16 = phi i8 [ %8, %2 ], [ %51, %46 ]
  %17 = phi i16* [ %11, %2 ], [ %44, %46 ]
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i8 %16, 0
  %20 = select i1 %19, i64 4, i64 2
  %21 = select i1 %19, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %22 = getelementptr inbounds i16, i16* %21, i64 %20
  br label %25

23:                                               ; preds = %25
  %24 = icmp eq i16* %29, %22
  br i1 %24, label %43, label %25

25:                                               ; preds = %23, %15
  %26 = phi i16* [ %29, %23 ], [ %21, %15 ]
  %27 = load i16, i16* %26, align 2
  %28 = icmp eq i16 %27, %18
  %29 = getelementptr inbounds i16, i16* %26, i64 1
  br i1 %28, label %30, label %23

30:                                               ; preds = %25
  switch i16 %18, label %43 [
    i16 769, label %33
    i16 770, label %33
    i16 771, label %33
    i16 772, label %33
    i16 -257, label %31
    i16 -259, label %32
  ]

31:                                               ; preds = %30
  br label %33

32:                                               ; preds = %30
  br label %33

33:                                               ; preds = %32, %31, %30, %30, %30, %30
  %34 = phi i16 [ 770, %31 ], [ 771, %32 ], [ %18, %30 ], [ %18, %30 ], [ %18, %30 ], [ %18, %30 ]
  %35 = load i16, i16* %13, align 4
  %36 = icmp ugt i16 %35, %34
  br i1 %36, label %43, label %37

37:                                               ; preds = %33
  %38 = load i16, i16* %14, align 2
  %39 = icmp ugt i16 %34, %38
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = tail call i32 @CBB_add_u16(%struct.cbb_st* %1, i16 zeroext %18) #6
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %23, %37, %30, %33, %40
  %44 = getelementptr inbounds i16, i16* %17, i64 1
  %45 = icmp eq i16* %44, %12
  br i1 %45, label %52, label %46

46:                                               ; preds = %43
  %47 = load %struct.ssl_st*, %struct.ssl_st** %3, align 8
  %48 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %47, i64 0, i32 0
  %49 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %48, align 8
  %50 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %49, i64 0, i32 0
  %51 = load i8, i8* %50, align 8, !range !2
  br label %15

52:                                               ; preds = %40, %43
  %53 = phi i1 [ false, %40 ], [ true, %43 ]
  ret i1 %53
}

declare i32 @CBB_add_u16(%struct.cbb_st*, i16 zeroext) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4bssl21ssl_negotiate_versionEPNS_13SSL_HANDSHAKEEPhPtPK6cbs_st(%"struct.bssl::SSL_HANDSHAKE"* nocapture readonly, i8* nocapture, i16* nocapture, %struct.cbs_st* nocapture readonly) local_unnamed_addr #3 {
  %5 = alloca %struct.cbs_st, align 8
  %6 = alloca i16, align 2
  %7 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 0
  %8 = load %struct.ssl_st*, %struct.ssl_st** %7, align 8
  %9 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %8, i64 0, i32 0
  %10 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %9, align 8
  %11 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %10, i64 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i64 4, i64 2
  %15 = select i1 %13, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %16 = getelementptr inbounds i16, i16* %15, i64 %14
  %17 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 5
  %18 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 6
  %19 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %0, i64 0, i32 46
  %20 = bitcast %struct.cbs_st* %5 to i8*
  %21 = bitcast %struct.cbs_st* %3 to i8*
  %22 = bitcast i16* %6 to i8*
  br label %23

23:                                               ; preds = %72, %4
  %24 = phi i8 [ %12, %4 ], [ %77, %72 ]
  %25 = phi i16* [ %15, %4 ], [ %70, %72 ]
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i8 %24, 0
  %28 = select i1 %27, i64 4, i64 2
  %29 = select i1 %27, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %30 = getelementptr inbounds i16, i16* %29, i64 %28
  br label %33

31:                                               ; preds = %33
  %32 = icmp eq i16* %37, %30
  br i1 %32, label %69, label %33

33:                                               ; preds = %31, %23
  %34 = phi i16* [ %37, %31 ], [ %29, %23 ]
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, %26
  %37 = getelementptr inbounds i16, i16* %34, i64 1
  br i1 %36, label %38, label %31

38:                                               ; preds = %33
  switch i16 %26, label %69 [
    i16 769, label %41
    i16 770, label %41
    i16 771, label %41
    i16 772, label %41
    i16 -257, label %39
    i16 -259, label %40
  ]

39:                                               ; preds = %38
  br label %41

40:                                               ; preds = %38
  br label %41

41:                                               ; preds = %40, %39, %38, %38, %38, %38
  %42 = phi i16 [ 770, %39 ], [ 771, %40 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ], [ %26, %38 ]
  %43 = load i16, i16* %17, align 4
  %44 = icmp ugt i16 %43, %42
  br i1 %44, label %69, label %45

45:                                               ; preds = %41
  %46 = load i16, i16* %18, align 2
  %47 = icmp ugt i16 %42, %46
  br i1 %47, label %69, label %48

48:                                               ; preds = %45
  %49 = icmp eq i16 %26, 772
  br i1 %49, label %50, label %54

50:                                               ; preds = %48
  %51 = load i32, i32* %19, align 8
  %52 = and i32 %51, 33554432
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %69

54:                                               ; preds = %50, %48
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #6
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %20, i8* align 8 %21, i64 16, i1 false)
  %55 = call i64 @CBS_len(%struct.cbs_st* nonnull %5) #6
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %68, label %57

57:                                               ; preds = %54, %65
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %22) #6
  store i16 -21846, i16* %6, align 2
  %58 = call i32 @CBS_get_u16(%struct.cbs_st* nonnull %5, i16* nonnull %6) #6
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  call void @ERR_put_error(i32 16, i32 0, i32 137, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 309) #6
  store i8 50, i8* %1, align 1
  br label %78

61:                                               ; preds = %57
  %62 = load i16, i16* %6, align 2
  %63 = icmp eq i16 %62, %26
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i16 %26, i16* %2, align 2
  br label %78

65:                                               ; preds = %61
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %22) #6
  %66 = call i64 @CBS_len(%struct.cbs_st* nonnull %5) #6
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %57

68:                                               ; preds = %65, %54
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #6
  br label %69

69:                                               ; preds = %31, %45, %38, %41, %50, %68
  %70 = getelementptr inbounds i16, i16* %25, i64 1
  %71 = icmp eq i16* %70, %16
  br i1 %71, label %80, label %72

72:                                               ; preds = %69
  %73 = load %struct.ssl_st*, %struct.ssl_st** %7, align 8
  %74 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %73, i64 0, i32 0
  %75 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %74, align 8
  %76 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %75, i64 0, i32 0
  %77 = load i8, i8* %76, align 8, !range !2
  br label %23

78:                                               ; preds = %64, %60
  %79 = phi i1 [ false, %60 ], [ true, %64 ]
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #6
  br label %81

80:                                               ; preds = %69
  call void @ERR_put_error(i32 16, i32 0, i32 240, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 321) #6
  store i8 70, i8* %1, align 1
  br label %81

81:                                               ; preds = %78, %80
  %82 = phi i1 [ false, %80 ], [ %79, %78 ]
  ret i1 %82
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #4

declare i32 @CBS_get_u16(%struct.cbs_st*, i16*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_min_proto_version(%struct.ssl_ctx_st* nocapture, i16 zeroext) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 0
  %4 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %3, align 8
  %5 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 4
  switch i16 %1, label %25 [
    i16 0, label %6
    i16 769, label %11
    i16 770, label %11
    i16 771, label %11
    i16 772, label %11
    i16 -257, label %11
    i16 -259, label %11
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %4, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i16 769, i16 -257
  store i16 %10, i16* %5, align 2
  br label %27

11:                                               ; preds = %2, %2, %2, %2, %2, %2
  %12 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %4, i64 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 4, i64 2
  %16 = select i1 %14, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %17 = getelementptr inbounds i16, i16* %16, i64 %15
  br label %20

18:                                               ; preds = %20
  %19 = icmp eq i16* %24, %17
  br i1 %19, label %25, label %20

20:                                               ; preds = %18, %11
  %21 = phi i16* [ %24, %18 ], [ %16, %11 ]
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %22, %1
  %24 = getelementptr inbounds i16, i16* %21, i64 1
  br i1 %23, label %26, label %18

25:                                               ; preds = %18, %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 234, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 130) #6
  br label %27

26:                                               ; preds = %20
  store i16 %1, i16* %5, align 2
  br label %27

27:                                               ; preds = %6, %25, %26
  %28 = phi i32 [ 1, %6 ], [ 1, %26 ], [ 0, %25 ]
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_max_proto_version(%struct.ssl_ctx_st* nocapture, i16 zeroext) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 0
  %4 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %3, align 8
  %5 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 3
  switch i16 %1, label %25 [
    i16 0, label %6
    i16 769, label %11
    i16 770, label %11
    i16 771, label %11
    i16 772, label %11
    i16 -257, label %11
    i16 -259, label %11
  ]

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %4, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = select i1 %9, i16 772, i16 -259
  store i16 %10, i16* %5, align 2
  br label %27

11:                                               ; preds = %2, %2, %2, %2, %2, %2
  %12 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %4, i64 0, i32 0
  %13 = load i8, i8* %12, align 8, !range !2
  %14 = icmp eq i8 %13, 0
  %15 = select i1 %14, i64 4, i64 2
  %16 = select i1 %14, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %17 = getelementptr inbounds i16, i16* %16, i64 %15
  br label %20

18:                                               ; preds = %20
  %19 = icmp eq i16* %24, %17
  br i1 %19, label %25, label %20

20:                                               ; preds = %18, %11
  %21 = phi i16* [ %24, %18 ], [ %16, %11 ]
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %22, %1
  %24 = getelementptr inbounds i16, i16* %21, i64 1
  br i1 %23, label %26, label %18

25:                                               ; preds = %18, %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 234, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 130) #6
  br label %27

26:                                               ; preds = %20
  store i16 %1, i16* %5, align 2
  br label %27

27:                                               ; preds = %6, %25, %26
  %28 = phi i32 [ 1, %6 ], [ 1, %26 ], [ 0, %25 ]
  ret i32 %28
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @SSL_CTX_get_min_proto_version(%struct.ssl_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 4
  %3 = load i16, i16* %2, align 2
  ret i16 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @SSL_CTX_get_max_proto_version(%struct.ssl_ctx_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 3
  %3 = load i16, i16* %2, align 8
  ret i16 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_min_proto_version(%struct.ssl_st* nocapture readonly, i16 zeroext) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %3, align 8
  %5 = icmp eq %"struct.bssl::SSL_CONFIG"* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 0
  %8 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %4, i64 0, i32 2
  switch i16 %1, label %29 [
    i16 0, label %10
    i16 769, label %15
    i16 770, label %15
    i16 771, label %15
    i16 772, label %15
    i16 -257, label %15
    i16 -259, label %15
  ]

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %8, i64 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i16 769, i16 -257
  store i16 %14, i16* %9, align 2
  br label %31

15:                                               ; preds = %6, %6, %6, %6, %6, %6
  %16 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %8, i64 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %18, i64 4, i64 2
  %20 = select i1 %18, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %24

22:                                               ; preds = %24
  %23 = icmp eq i16* %28, %21
  br i1 %23, label %29, label %24

24:                                               ; preds = %22, %15
  %25 = phi i16* [ %28, %22 ], [ %20, %15 ]
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %26, %1
  %28 = getelementptr inbounds i16, i16* %25, i64 1
  br i1 %27, label %30, label %22

29:                                               ; preds = %22, %6
  tail call void @ERR_put_error(i32 16, i32 0, i32 234, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 130) #6
  br label %31

30:                                               ; preds = %24
  store i16 %1, i16* %9, align 2
  br label %31

31:                                               ; preds = %30, %29, %10, %2
  %32 = phi i32 [ 0, %2 ], [ 1, %10 ], [ 1, %30 ], [ 0, %29 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_max_proto_version(%struct.ssl_st* nocapture readonly, i16 zeroext) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %3, align 8
  %5 = icmp eq %"struct.bssl::SSL_CONFIG"* %4, null
  br i1 %5, label %31, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 0
  %8 = load %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_PROTOCOL_METHOD"** %7, align 8
  %9 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %4, i64 0, i32 1
  switch i16 %1, label %29 [
    i16 0, label %10
    i16 769, label %15
    i16 770, label %15
    i16 771, label %15
    i16 772, label %15
    i16 -257, label %15
    i16 -259, label %15
  ]

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %8, i64 0, i32 0
  %12 = load i8, i8* %11, align 8, !range !2
  %13 = icmp eq i8 %12, 0
  %14 = select i1 %13, i16 772, i16 -259
  store i16 %14, i16* %9, align 2
  br label %31

15:                                               ; preds = %6, %6, %6, %6, %6, %6
  %16 = getelementptr inbounds %"struct.bssl::SSL_PROTOCOL_METHOD", %"struct.bssl::SSL_PROTOCOL_METHOD"* %8, i64 0, i32 0
  %17 = load i8, i8* %16, align 8, !range !2
  %18 = icmp eq i8 %17, 0
  %19 = select i1 %18, i64 4, i64 2
  %20 = select i1 %18, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @_ZN4bsslL12kTLSVersionsE, i64 0, i64 0), i16* getelementptr inbounds ([2 x i16], [2 x i16]* @_ZN4bsslL13kDTLSVersionsE, i64 0, i64 0)
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %24

22:                                               ; preds = %24
  %23 = icmp eq i16* %28, %21
  br i1 %23, label %29, label %24

24:                                               ; preds = %22, %15
  %25 = phi i16* [ %28, %22 ], [ %20, %15 ]
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %26, %1
  %28 = getelementptr inbounds i16, i16* %25, i64 1
  br i1 %27, label %30, label %22

29:                                               ; preds = %22, %6
  tail call void @ERR_put_error(i32 16, i32 0, i32 234, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0), i32 130) #6
  br label %31

30:                                               ; preds = %24
  store i16 %1, i16* %9, align 2
  br label %31

31:                                               ; preds = %30, %29, %10, %2
  %32 = phi i32 [ 0, %2 ], [ 1, %10 ], [ 1, %30 ], [ 0, %29 ]
  ret i32 %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @SSL_get_min_proto_version(%struct.ssl_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %2, align 8
  %4 = icmp eq %"struct.bssl::SSL_CONFIG"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %3, i64 0, i32 2
  %7 = load i16, i16* %6, align 2
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i16 [ %7, %5 ], [ 0, %1 ]
  ret i16 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @SSL_get_max_proto_version(%struct.ssl_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %2, align 8
  %4 = icmp eq %"struct.bssl::SSL_CONFIG"* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %3, i64 0, i32 1
  %7 = load i16, i16* %6, align 8
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i16 [ %7, %5 ], [ 0, %1 ]
  ret i16 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_version(%struct.ssl_st*) local_unnamed_addr #3 {
  %2 = tail call i32 @SSL_in_early_data(%struct.ssl_st* %0) #6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %17, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 26
  %6 = load i8, i8* %5, align 4
  %7 = and i8 %6, 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %11 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %10, align 8
  %12 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %11, i64 0, i32 34, i32 0, i32 0, i32 0
  %13 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %12, align 8
  %14 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %13, i64 0, i32 41, i32 0, i32 0, i32 0
  %15 = load %struct.ssl_session_st*, %struct.ssl_session_st** %14, align 8
  %16 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %15, i64 0, i32 1
  br label %19

17:                                               ; preds = %4, %1
  %18 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 2
  br label %19

19:                                               ; preds = %9, %17
  %20 = phi i16* [ %18, %17 ], [ %16, %9 ]
  %21 = load i16, i16* %20, align 4
  %22 = zext i16 %21 to i32
  ret i32 %22
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @SSL_get_version(%struct.ssl_st*) local_unnamed_addr #3 {
  %2 = tail call i32 @SSL_in_early_data(%struct.ssl_st* %0) #6
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %17, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 26
  %6 = load i8, i8* %5, align 4
  %7 = and i8 %6, 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %11 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %10, align 8
  %12 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %11, i64 0, i32 34, i32 0, i32 0, i32 0
  %13 = load %"struct.bssl::SSL_HANDSHAKE"*, %"struct.bssl::SSL_HANDSHAKE"** %12, align 8
  %14 = getelementptr inbounds %"struct.bssl::SSL_HANDSHAKE", %"struct.bssl::SSL_HANDSHAKE"* %13, i64 0, i32 41, i32 0, i32 0, i32 0
  %15 = load %struct.ssl_session_st*, %struct.ssl_session_st** %14, align 8
  %16 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %15, i64 0, i32 1
  br label %19

17:                                               ; preds = %4, %1
  %18 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 2
  br label %19

19:                                               ; preds = %9, %17
  %20 = phi i16* [ %18, %17 ], [ %16, %9 ]
  %21 = load i16, i16* %20, align 4
  switch i16 %21, label %27 [
    i16 772, label %28
    i16 771, label %22
    i16 770, label %23
    i16 769, label %24
    i16 -257, label %25
    i16 -259, label %26
  ]

22:                                               ; preds = %19
  br label %28

23:                                               ; preds = %19
  br label %28

24:                                               ; preds = %19
  br label %28

25:                                               ; preds = %19
  br label %28

26:                                               ; preds = %19
  br label %28

27:                                               ; preds = %19
  br label %28

28:                                               ; preds = %19, %22, %23, %24, %25, %26, %27
  %29 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), %27 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %26 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), %25 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), %24 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), %23 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), %22 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), %19 ]
  ret i8* %29
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @SSL_SESSION_get_version(%struct.ssl_session_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %0, i64 0, i32 1
  %3 = load i16, i16* %2, align 4
  switch i16 %3, label %9 [
    i16 772, label %10
    i16 771, label %4
    i16 770, label %5
    i16 769, label %6
    i16 -257, label %7
    i16 -259, label %8
  ]

4:                                                ; preds = %1
  br label %10

5:                                                ; preds = %1
  br label %10

6:                                                ; preds = %1
  br label %10

7:                                                ; preds = %1
  br label %10

8:                                                ; preds = %1
  br label %10

9:                                                ; preds = %1
  br label %10

10:                                               ; preds = %1, %4, %5, %6, %7, %8, %9
  %11 = phi i8* [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), %9 ], [ getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), %8 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), %7 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), %6 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), %5 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), %4 ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), %1 ]
  ret i8* %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @SSL_SESSION_get_protocol_version(%struct.ssl_session_st* nocapture readonly) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %0, i64 0, i32 1
  %3 = load i16, i16* %2, align 4
  ret i16 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @SSL_SESSION_set_protocol_version(%struct.ssl_session_st* nocapture, i16 zeroext) local_unnamed_addr #0 {
  switch i16 %1, label %5 [
    i16 769, label %3
    i16 770, label %3
    i16 771, label %3
    i16 772, label %3
    i16 -257, label %3
    i16 -259, label %3
  ]

3:                                                ; preds = %2, %2, %2, %2, %2, %2
  %4 = getelementptr inbounds %struct.ssl_session_st, %struct.ssl_session_st* %0, i64 0, i32 1
  store i16 %1, i16* %4, align 2
  br label %5

5:                                                ; preds = %2, %3
  %6 = phi i32 [ 1, %3 ], [ 0, %2 ]
  ret i32 %6
}

declare i32 @SSL_in_early_data(%struct.ssl_st*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
