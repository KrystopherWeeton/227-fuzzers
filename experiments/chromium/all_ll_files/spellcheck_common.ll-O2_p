; ModuleID = '../../components/spellcheck/common/spellcheck_common.cc'
source_filename = "../../components/spellcheck/common/spellcheck_common.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.spellcheck::LanguageRegion" = type { i8*, i8* }
%"struct.spellcheck::LanguageVersion" = type { i8*, i8* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.base::FilePath" = type { %"class.std::__1::basic_string" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.std::__1::vector.8"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"*, %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::basic_string.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.13 }
%union.anon.13 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"class.std::__1::basic_string.10"* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.14 }
%struct.anon.14 = type { %"struct.std::__1::__padding.15", i8 }
%"struct.std::__1::__padding.15" = type { [1 x i8] }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_ = comdat any

$_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_ = comdat any

@_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE = internal constant [55 x %"struct.spellcheck::LanguageRegion"] [%"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.26, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.44, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.46, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.59, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.63, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.67, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.71, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.72, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.76, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.80, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.81, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0) }, %"struct.spellcheck::LanguageRegion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0) }], align 16
@_ZZN10spellcheck20GetVersionedFileNameEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEERKNS0_8FilePathEE21kSpecialVersionString = internal constant [13 x %"struct.spellcheck::LanguageVersion"] [%"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0) }, %"struct.spellcheck::LanguageVersion" { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i32 0, i32 0) }], align 16
@.str = private unnamed_addr constant [6 x i8] c"tr-TR\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"-4-0\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"tg-TG\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"-5-0\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"cy-GB\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"-1-0\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"hy\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"sh\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"sr\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"en-AU\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"-9-0\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"en-CA\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"en-GB\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"en-US\00", align 1
@.str.14 = private unnamed_addr constant [6 x i8] c"fa-IR\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"uk-UA\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"en-GB-oxendict\00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c".bdic\00", align 1
@__const._ZN10spellcheck35GetISOLanguageCountryCodeFromLocaleERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPS6_S9_.language = private unnamed_addr constant <{ i8, i8, [10 x i8] }> <{ i8 101, i8 110, [10 x i8] zeroinitializer }>, align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"USA\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"af\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"af-ZA\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"bg\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"bg-BG\00", align 1
@.str.23 = private unnamed_addr constant [3 x i8] c"ca\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"ca-ES\00", align 1
@.str.25 = private unnamed_addr constant [3 x i8] c"cs\00", align 1
@.str.26 = private unnamed_addr constant [6 x i8] c"cs-CZ\00", align 1
@.str.27 = private unnamed_addr constant [3 x i8] c"cy\00", align 1
@.str.28 = private unnamed_addr constant [3 x i8] c"da\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"da-DK\00", align 1
@.str.30 = private unnamed_addr constant [3 x i8] c"de\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"de-DE\00", align 1
@.str.32 = private unnamed_addr constant [3 x i8] c"el\00", align 1
@.str.33 = private unnamed_addr constant [6 x i8] c"el-GR\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"es\00", align 1
@.str.35 = private unnamed_addr constant [6 x i8] c"es-ES\00", align 1
@.str.36 = private unnamed_addr constant [7 x i8] c"es-419\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"es-AR\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"es-MX\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"es-US\00", align 1
@.str.40 = private unnamed_addr constant [3 x i8] c"et\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"et-EE\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"fa\00", align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"fo\00", align 1
@.str.44 = private unnamed_addr constant [6 x i8] c"fo-FO\00", align 1
@.str.45 = private unnamed_addr constant [3 x i8] c"fr\00", align 1
@.str.46 = private unnamed_addr constant [6 x i8] c"fr-FR\00", align 1
@.str.47 = private unnamed_addr constant [3 x i8] c"he\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"he-IL\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@.str.50 = private unnamed_addr constant [6 x i8] c"hi-IN\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"hr\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"hr-HR\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"hu\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"hu-HU\00", align 1
@.str.55 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.56 = private unnamed_addr constant [6 x i8] c"id-ID\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"it\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"it-IT\00", align 1
@.str.59 = private unnamed_addr constant [3 x i8] c"ko\00", align 1
@.str.60 = private unnamed_addr constant [3 x i8] c"lt\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"lt-LT\00", align 1
@.str.62 = private unnamed_addr constant [3 x i8] c"lv\00", align 1
@.str.63 = private unnamed_addr constant [6 x i8] c"lv-LV\00", align 1
@.str.64 = private unnamed_addr constant [3 x i8] c"nb\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"nb-NO\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"nl\00", align 1
@.str.67 = private unnamed_addr constant [6 x i8] c"nl-NL\00", align 1
@.str.68 = private unnamed_addr constant [3 x i8] c"pl\00", align 1
@.str.69 = private unnamed_addr constant [6 x i8] c"pl-PL\00", align 1
@.str.70 = private unnamed_addr constant [3 x i8] c"pt\00", align 1
@.str.71 = private unnamed_addr constant [6 x i8] c"pt-BR\00", align 1
@.str.72 = private unnamed_addr constant [6 x i8] c"pt-PT\00", align 1
@.str.73 = private unnamed_addr constant [3 x i8] c"ro\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"ro-RO\00", align 1
@.str.75 = private unnamed_addr constant [3 x i8] c"ru\00", align 1
@.str.76 = private unnamed_addr constant [6 x i8] c"ru-RU\00", align 1
@.str.77 = private unnamed_addr constant [3 x i8] c"sk\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"sk-SK\00", align 1
@.str.79 = private unnamed_addr constant [3 x i8] c"sl\00", align 1
@.str.80 = private unnamed_addr constant [6 x i8] c"sl-SI\00", align 1
@.str.81 = private unnamed_addr constant [3 x i8] c"sq\00", align 1
@.str.82 = private unnamed_addr constant [3 x i8] c"sv\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c"sv-SE\00", align 1
@.str.84 = private unnamed_addr constant [3 x i8] c"ta\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"ta-IN\00", align 1
@.str.86 = private unnamed_addr constant [3 x i8] c"tg\00", align 1
@.str.87 = private unnamed_addr constant [3 x i8] c"tr\00", align 1
@.str.88 = private unnamed_addr constant [3 x i8] c"uk\00", align 1
@.str.89 = private unnamed_addr constant [3 x i8] c"vi\00", align 1
@.str.90 = private unnamed_addr constant [6 x i8] c"vi-VN\00", align 1
@.str.91 = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.92 = private unnamed_addr constant [2 x i8] c"s\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN10spellcheck13IsValidRegionERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 {
  %2 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %3 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %2, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  br label %5

5:                                                ; preds = %1, %19
  %6 = phi %"struct.spellcheck::LanguageRegion"* [ getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 0, i64 0), %1 ], [ %20, %19 ]
  %7 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %6, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = tail call i64 @strlen(i8* %8) #12
  %10 = load i8, i8* %3, align 1
  %11 = icmp slt i8 %10, 0
  %12 = load i64, i64* %4, align 8
  %13 = zext i8 %10 to i64
  %14 = select i1 %11, i64 %12, i64 %13
  %15 = icmp eq i64 %9, %14
  br i1 %15, label %16, label %19

16:                                               ; preds = %5
  %17 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* %8, i64 %9) #12
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %22, label %19

19:                                               ; preds = %5, %16
  %20 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %6, i64 1
  %21 = icmp eq %"struct.spellcheck::LanguageRegion"* %20, getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 1, i64 0)
  br i1 %21, label %22, label %5

22:                                               ; preds = %19, %16
  %23 = phi i1 [ true, %16 ], [ false, %19 ]
  ret i1 %23
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10spellcheck27GetSpellCheckLanguageRegionEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* noalias sret, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckError"* %4 to i8*
  br label %6

6:                                                ; preds = %3, %46
  %7 = phi %"struct.spellcheck::LanguageRegion"* [ getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 0, i64 0), %3 ], [ %47, %46 ]
  %8 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %7, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = call i64 @strlen(i8* nonnull %9) #12
  br label %15

13:                                               ; preds = %6
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.91, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i64 0, i64 0)) #12
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #12
  br label %15

15:                                               ; preds = %11, %13
  %16 = phi i64 [ 0, %13 ], [ %12, %11 ]
  %17 = icmp eq i64 %16, %2
  br i1 %17, label %18, label %46

18:                                               ; preds = %15
  %19 = call i32 @bcmp(i8* %9, i8* %1, i64 %2) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %46

21:                                               ; preds = %18
  %22 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %7, i64 0, i32 1
  %23 = load i8*, i8** %22, align 8
  %24 = call i64 @strlen(i8* %23) #12
  %25 = icmp ugt i64 %24, -17
  br i1 %25, label %26, label %28

26:                                               ; preds = %21
  %27 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %27) #13
  unreachable

28:                                               ; preds = %21
  %29 = icmp ult i64 %24, 23
  br i1 %29, label %38, label %30

30:                                               ; preds = %28
  %31 = add nuw i64 %24, 16
  %32 = and i64 %31, -16
  %33 = call i8* @_Znwm(i64 %32) #14
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %33, i8** %34, align 8
  %35 = or i64 %32, -9223372036854775808
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %35, i64* %36, align 8
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %24, i64* %37, align 8
  br label %44

38:                                               ; preds = %28
  %39 = trunc i64 %24 to i8
  %40 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %41 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %40, i64 0, i32 1, i32 0
  store i8 %39, i8* %41, align 1
  %42 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %43 = icmp eq i64 %24, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %38, %30
  %45 = phi i8* [ %33, %30 ], [ %42, %38 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %23, i64 %24, i1 false) #12
  br label %49

46:                                               ; preds = %15, %18
  %47 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %7, i64 1
  %48 = icmp eq %"struct.spellcheck::LanguageRegion"* %47, getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 1, i64 0)
  br i1 %48, label %52, label %6

49:                                               ; preds = %38, %44
  %50 = phi i8* [ %42, %38 ], [ %45, %44 ]
  %51 = getelementptr inbounds i8, i8* %50, i64 %24
  br label %77

52:                                               ; preds = %46
  %53 = icmp ugt i64 %2, -17
  br i1 %53, label %54, label %56

54:                                               ; preds = %52
  %55 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %55) #13
  unreachable

56:                                               ; preds = %52
  %57 = icmp ult i64 %2, 23
  br i1 %57, label %66, label %58

58:                                               ; preds = %56
  %59 = add nuw i64 %2, 16
  %60 = and i64 %59, -16
  %61 = call i8* @_Znwm(i64 %60) #14
  %62 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %61, i8** %62, align 8, !alias.scope !2
  %63 = or i64 %60, -9223372036854775808
  %64 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %63, i64* %64, align 8, !alias.scope !2
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %65, align 8, !alias.scope !2
  br label %72

66:                                               ; preds = %56
  %67 = trunc i64 %2 to i8
  %68 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  store i8 %67, i8* %69, align 1, !alias.scope !2
  %70 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %71 = icmp eq i64 %2, 0
  br i1 %71, label %74, label %72

72:                                               ; preds = %66, %58
  %73 = phi i8* [ %61, %58 ], [ %70, %66 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %1, i64 %2, i1 false) #12
  br label %74

74:                                               ; preds = %66, %72
  %75 = phi i8* [ %70, %66 ], [ %73, %72 ]
  %76 = getelementptr inbounds i8, i8* %75, i64 %2
  br label %77

77:                                               ; preds = %49, %74
  %78 = phi i8* [ %51, %49 ], [ %76, %74 ]
  store i8 0, i8* %78, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10spellcheck20GetVersionedFileNameEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEERKNS0_8FilePathE(%"class.base::FilePath"* noalias sret, i8*, i64, %"class.base::FilePath"* dereferenceable(24)) local_unnamed_addr #0 {
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %12 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 24, i1 false)
  call void @_ZN10spellcheck27GetSpellCheckLanguageRegionEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* nonnull sret %5, i8* %1, i64 %2)
  %13 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  store i8 4, i8* %17, align 1
  %19 = bitcast %"class.std::__1::basic_string"* %6 to i32*
  store i32 808268589, i32* %19, align 8
  %20 = getelementptr inbounds i8, i8* %13, i64 4
  store i8 0, i8* %20, align 4
  %21 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  br label %23

23:                                               ; preds = %4, %62
  %24 = phi %"struct.spellcheck::LanguageVersion"* [ getelementptr inbounds ([13 x %"struct.spellcheck::LanguageVersion"], [13 x %"struct.spellcheck::LanguageVersion"]* @_ZZN10spellcheck20GetVersionedFileNameEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEERKNS0_8FilePathEE21kSpecialVersionString, i64 0, i64 0), %4 ], [ %63, %62 ]
  %25 = getelementptr inbounds %"struct.spellcheck::LanguageVersion", %"struct.spellcheck::LanguageVersion"* %24, i64 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i64 @strlen(i8* %26) #12
  %28 = load i8, i8* %22, align 1
  %29 = icmp slt i8 %28, 0
  %30 = load i64, i64* %11, align 8
  %31 = zext i8 %28 to i64
  %32 = select i1 %29, i64 %30, i64 %31
  %33 = icmp eq i64 %27, %32
  br i1 %33, label %34, label %62

34:                                               ; preds = %23
  %35 = call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* nonnull %5, i64 0, i64 -1, i8* %26, i64 %27) #12
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %62

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"struct.spellcheck::LanguageVersion", %"struct.spellcheck::LanguageVersion"* %24, i64 0, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = load i8, i8* %39, align 1
  %41 = call i1 @llvm.is.constant.i8(i8 %40) #12
  br i1 %41, label %42, label %60

42:                                               ; preds = %37
  %43 = call i64 @strlen(i8* %39) #12
  %44 = icmp ult i64 %43, 23
  br i1 %44, label %45, label %58

45:                                               ; preds = %42
  %46 = load i8, i8* %17, align 1
  %47 = icmp slt i8 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %45
  store i64 %43, i64* %15, align 8
  %49 = load i8*, i8** %14, align 8
  br label %52

50:                                               ; preds = %45
  %51 = trunc i64 %43 to i8
  store i8 %51, i8* %17, align 1
  br label %52

52:                                               ; preds = %50, %48
  %53 = phi i8* [ %49, %48 ], [ %13, %50 ]
  %54 = icmp eq i64 %43, 0
  br i1 %54, label %56, label %55

55:                                               ; preds = %52
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %53, i8* align 1 %39, i64 %43, i1 false) #12
  br label %56

56:                                               ; preds = %55, %52
  %57 = getelementptr inbounds i8, i8* %53, i64 %43
  store i8 0, i8* %57, align 1
  br label %65

58:                                               ; preds = %42
  %59 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* %39, i64 %43) #12
  br label %65

60:                                               ; preds = %37
  %61 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* %39) #12
  br label %65

62:                                               ; preds = %23, %34
  %63 = getelementptr inbounds %"struct.spellcheck::LanguageVersion", %"struct.spellcheck::LanguageVersion"* %24, i64 1
  %64 = icmp eq %"struct.spellcheck::LanguageVersion"* %63, getelementptr inbounds ([13 x %"struct.spellcheck::LanguageVersion"], [13 x %"struct.spellcheck::LanguageVersion"]* @_ZZN10spellcheck20GetVersionedFileNameEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEERKNS0_8FilePathEE21kSpecialVersionString, i64 1, i64 0)
  br i1 %64, label %65, label %23

65:                                               ; preds = %62, %60, %58, %56
  %66 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %66) #12
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %69 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %70 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %69) #12
  %71 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %69, i8 0, i64 24, i1 false) #12, !alias.scope !5
  %74 = load i8, i8* %22, align 1, !noalias !5
  %75 = icmp slt i8 %74, 0
  %76 = load i64, i64* %11, align 8, !noalias !5
  %77 = zext i8 %74 to i64
  %78 = select i1 %75, i64 %76, i64 %77
  %79 = load i8, i8* %17, align 1, !noalias !5
  %80 = icmp slt i8 %79, 0
  %81 = load i64, i64* %15, align 8, !noalias !5
  %82 = zext i8 %79 to i64
  %83 = select i1 %80, i64 %81, i64 %82
  %84 = load i8*, i8** %10, align 8, !noalias !5
  %85 = select i1 %75, i8* %84, i8* %9
  %86 = add i64 %83, %78
  %87 = icmp ugt i64 %86, -17
  br i1 %87, label %88, label %90

88:                                               ; preds = %65
  %89 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %89) #13
  unreachable

90:                                               ; preds = %65
  %91 = icmp ult i64 %86, 23
  br i1 %91, label %92, label %96

92:                                               ; preds = %90
  %93 = trunc i64 %78 to i8
  %94 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %95 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %94, i64 0, i32 1, i32 0
  store i8 %93, i8* %95, align 1, !alias.scope !5
  br label %101

96:                                               ; preds = %90
  %97 = add nuw i64 %86, 16
  %98 = and i64 %97, -16
  %99 = call i8* @_Znwm(i64 %98) #14
  store i8* %99, i8** %71, align 8, !alias.scope !5
  %100 = or i64 %98, -9223372036854775808
  store i64 %100, i64* %73, align 8, !alias.scope !5
  store i64 %78, i64* %72, align 8, !alias.scope !5
  br label %101

101:                                              ; preds = %96, %92
  %102 = phi i8* [ %69, %92 ], [ %99, %96 ]
  %103 = icmp eq i64 %78, 0
  br i1 %103, label %105, label %104

104:                                              ; preds = %101
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %102, i8* align 1 %85, i64 %78, i1 false) #12
  br label %105

105:                                              ; preds = %101, %104
  %106 = getelementptr inbounds i8, i8* %102, i64 %78
  store i8 0, i8* %106, align 1
  %107 = load i8*, i8** %14, align 8, !noalias !5
  %108 = select i1 %80, i8* %107, i8* %13
  %109 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %8, i8* %108, i64 %83) #12
  %110 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0)) #12, !noalias !8
  %111 = bitcast %"class.std::__1::basic_string"* %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %66, i8* align 8 %111, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 24, i1 false) #12, !noalias !8
  %112 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %113 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %112, i64 0, i32 1, i32 0
  %114 = load i8, i8* %113, align 1
  %115 = icmp slt i8 %114, 0
  br i1 %115, label %116, label %118

116:                                              ; preds = %105
  %117 = load i8*, i8** %71, align 8
  call void @_ZdlPv(i8* %117) #14
  br label %118

118:                                              ; preds = %105, %116
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %69) #12
  %119 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %120 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %119, i64 0, i32 1, i32 0
  %121 = load i8, i8* %120, align 1
  %122 = icmp slt i8 %121, 0
  %123 = load i8*, i8** %67, align 8
  %124 = select i1 %122, i8* %123, i8* %66
  %125 = load i64, i64* %68, align 8
  %126 = zext i8 %121 to i64
  %127 = select i1 %122, i64 %125, i64 %126
  call void @_ZNK4base8FilePath11AppendASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::FilePath"* sret %0, %"class.base::FilePath"* %3, i8* %124, i64 %127) #12
  %128 = load i8, i8* %120, align 1
  %129 = icmp slt i8 %128, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %118
  %131 = load i8*, i8** %67, align 8
  call void @_ZdlPv(i8* %131) #14
  br label %132

132:                                              ; preds = %118, %130
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %66) #12
  %133 = load i8, i8* %17, align 1
  %134 = icmp slt i8 %133, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %132
  %136 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %136) #14
  br label %137

137:                                              ; preds = %132, %135
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  %138 = load i8, i8* %22, align 1
  %139 = icmp slt i8 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %137
  %141 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %141) #14
  br label %142

142:                                              ; preds = %137, %140
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #12
  ret void
}

declare void @_ZNK4base8FilePath11AppendASCIIENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.base::FilePath"* sret, %"class.base::FilePath"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10spellcheck34GetCorrespondingSpellCheckLanguageEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.std::__1::basic_string"* noalias sret, i8*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #12
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  %11 = bitcast %"class.logging::CheckError"* %4 to i8*
  %12 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  br label %14

14:                                               ; preds = %3, %94
  %15 = phi %"struct.spellcheck::LanguageRegion"* [ getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 0, i64 0), %3 ], [ %95, %94 ]
  %16 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %15, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = call i64 @strlen(i8* nonnull %17) #12
  br label %23

21:                                               ; preds = %14
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.91, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i64 0, i64 0)) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %23

23:                                               ; preds = %19, %21
  %24 = phi i64 [ 0, %21 ], [ %20, %19 ]
  %25 = icmp eq i64 %24, %2
  br i1 %25, label %26, label %51

26:                                               ; preds = %23
  %27 = call i32 @bcmp(i8* %17, i8* %1, i64 %2) #12
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %51

29:                                               ; preds = %26
  %30 = icmp ugt i64 %2, -17
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %32) #13
  unreachable

33:                                               ; preds = %29
  %34 = icmp ult i64 %2, 23
  br i1 %34, label %43, label %35

35:                                               ; preds = %33
  %36 = add nuw i64 %2, 16
  %37 = and i64 %36, -16
  %38 = call i8* @_Znwm(i64 %37) #14
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %38, i8** %39, align 8, !alias.scope !11
  %40 = or i64 %37, -9223372036854775808
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %40, i64* %41, align 8, !alias.scope !11
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %2, i64* %42, align 8, !alias.scope !11
  br label %49

43:                                               ; preds = %33
  %44 = trunc i64 %2 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1, !alias.scope !11
  %47 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %48 = icmp eq i64 %2, 0
  br i1 %48, label %99, label %49

49:                                               ; preds = %43, %35
  %50 = phi i8* [ %38, %35 ], [ %47, %43 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %1, i64 %2, i1 false) #12
  br label %99

51:                                               ; preds = %23, %26
  %52 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %15, i64 0, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = call i64 @strlen(i8* nonnull %53) #12
  br label %59

57:                                               ; preds = %51
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.91, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.92, i64 0, i64 0)) #12
  %58 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  br label %59

59:                                               ; preds = %55, %57
  %60 = phi i64 [ 0, %57 ], [ %56, %55 ]
  %61 = icmp eq i64 %60, %2
  br i1 %61, label %62, label %94

62:                                               ; preds = %59
  %63 = call i32 @bcmp(i8* %53, i8* %1, i64 %2) #12
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %94

65:                                               ; preds = %62
  %66 = load i8, i8* %13, align 1
  %67 = icmp slt i8 %66, 0
  %68 = load i64, i64* %9, align 8
  %69 = zext i8 %66 to i64
  %70 = select i1 %67, i64 %68, i64 %69
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %94

72:                                               ; preds = %65
  %73 = load i8*, i8** %16, align 8
  %74 = load i8, i8* %73, align 1
  %75 = call i1 @llvm.is.constant.i8(i8 %74) #12
  br i1 %75, label %76, label %92

76:                                               ; preds = %72
  %77 = call i64 @strlen(i8* %73) #12
  %78 = icmp ult i64 %77, 23
  br i1 %78, label %79, label %90

79:                                               ; preds = %76
  br i1 %67, label %80, label %82

80:                                               ; preds = %79
  store i64 %77, i64* %9, align 8
  %81 = load i8*, i8** %8, align 8
  br label %84

82:                                               ; preds = %79
  %83 = trunc i64 %77 to i8
  store i8 %83, i8* %13, align 1
  br label %84

84:                                               ; preds = %82, %80
  %85 = phi i8* [ %81, %80 ], [ %7, %82 ]
  %86 = icmp eq i64 %77, 0
  br i1 %86, label %88, label %87

87:                                               ; preds = %84
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %85, i8* align 1 %73, i64 %77, i1 false) #12
  br label %88

88:                                               ; preds = %87, %84
  %89 = getelementptr inbounds i8, i8* %85, i64 %77
  store i8 0, i8* %89, align 1
  br label %94

90:                                               ; preds = %76
  %91 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"* nonnull %6, i8* %73, i64 %77) #12
  br label %94

92:                                               ; preds = %72
  %93 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* %73) #12
  br label %94

94:                                               ; preds = %59, %65, %62, %88, %90, %92
  %95 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %15, i64 1
  %96 = icmp eq %"struct.spellcheck::LanguageRegion"* %95, getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 1, i64 0)
  br i1 %96, label %97, label %14

97:                                               ; preds = %94
  %98 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* nonnull align 8 %7, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #12
  br label %106

99:                                               ; preds = %49, %43
  %100 = phi i8* [ %47, %43 ], [ %50, %49 ]
  %101 = getelementptr inbounds i8, i8* %100, i64 %2
  store i8 0, i8* %101, align 1
  %102 = load i8, i8* %13, align 1
  %103 = icmp slt i8 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %99
  %105 = load i8*, i8** %8, align 8
  call void @_ZdlPv(i8* %105) #14
  br label %106

106:                                              ; preds = %97, %99, %104
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10spellcheck19SpellCheckLanguagesEv(%"class.std::__1::vector"* noalias sret) local_unnamed_addr #0 {
  %2 = alloca %"class.std::__1::basic_string", align 8
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #12
  %6 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  br label %13

13:                                               ; preds = %1, %48
  %14 = phi %"struct.spellcheck::LanguageRegion"* [ getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 0, i64 0), %1 ], [ %49, %48 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %15 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %14, i64 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i64 @strlen(i8* %16) #12
  %18 = icmp ugt i64 %17, -17
  br i1 %18, label %19, label %21

19:                                               ; preds = %13
  %20 = bitcast %"class.std::__1::basic_string"* %2 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %20) #13
  unreachable

21:                                               ; preds = %13
  %22 = icmp ult i64 %17, 23
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = add nuw i64 %17, 16
  %25 = and i64 %24, -16
  %26 = call i8* @_Znwm(i64 %25) #14
  store i8* %26, i8** %7, align 8
  %27 = or i64 %25, -9223372036854775808
  store i64 %27, i64* %8, align 8
  store i64 %17, i64* %9, align 8
  br label %31

28:                                               ; preds = %21
  %29 = trunc i64 %17 to i8
  store i8 %29, i8* %11, align 1
  %30 = icmp eq i64 %17, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %28, %23
  %32 = phi i8* [ %26, %23 ], [ %6, %28 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %32, i8* align 1 %16, i64 %17, i1 false) #12
  br label %33

33:                                               ; preds = %28, %31
  %34 = phi i8* [ %6, %28 ], [ %32, %31 ]
  %35 = getelementptr inbounds i8, i8* %34, i64 %17
  store i8 0, i8* %35, align 1
  %36 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %37 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %4, align 8
  %38 = icmp ult %"class.std::__1::basic_string"* %36, %37
  br i1 %38, label %39, label %43

39:                                               ; preds = %33
  %40 = bitcast %"class.std::__1::basic_string"* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* nonnull align 8 %6, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #12
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %36, i64 1
  %42 = ptrtoint %"class.std::__1::basic_string"* %41 to i64
  store i64 %42, i64* %12, align 8
  br label %48

43:                                               ; preds = %33
  call void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"* %0, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %2) #12
  %44 = load i8, i8* %11, align 1
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %43
  %47 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %47) #14
  br label %48

48:                                               ; preds = %39, %43, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  %49 = getelementptr inbounds %"struct.spellcheck::LanguageRegion", %"struct.spellcheck::LanguageRegion"* %14, i64 1
  %50 = icmp eq %"struct.spellcheck::LanguageRegion"* %49, getelementptr inbounds ([55 x %"struct.spellcheck::LanguageRegion"], [55 x %"struct.spellcheck::LanguageRegion"]* @_ZN10spellcheckL31kSupportedSpellCheckerLanguagesE, i64 1, i64 0)
  br i1 %50, label %51, label %13

51:                                               ; preds = %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10spellcheck35GetISOLanguageCountryCodeFromLocaleERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPS6_S9_(%"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* nocapture, %"class.std::__1::basic_string"* nocapture) local_unnamed_addr #0 {
  %4 = alloca [12 x i8], align 1
  %5 = alloca i32, align 4
  %6 = alloca [22 x i8], align 16
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %9) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %9, i8* align 1 getelementptr inbounds (<{ i8, i8, [10 x i8] }>, <{ i8, i8, [10 x i8] }>* @__const._ZN10spellcheck35GetISOLanguageCountryCodeFromLocaleERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPS6_S9_.language, i64 0, i32 0), i64 12, i1 false)
  %10 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = zext i8 %12 to i64
  %17 = select i1 %13, i64 %15, i64 %16
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %29, label %19

19:                                               ; preds = %3
  %20 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #12
  store i32 0, i32* %5, align 4
  %21 = getelementptr inbounds [22 x i8], [22 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 22, i8* nonnull %21) #12
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 22, i1 false)
  %23 = load i8*, i8** %22, align 8
  %24 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %25 = select i1 %13, i8* %23, i8* %24
  %26 = call i32 @uloc_addLikelySubtags_69(i8* %25, i8* nonnull %21, i32 22, i32* nonnull %5) #12
  store i32 0, i32* %5, align 4
  %27 = call i32 @uloc_getLanguage_69(i8* nonnull %21, i8* nonnull %9, i32 12, i32* nonnull %5) #12
  %28 = call i8* @uloc_getISO3Country_69(i8* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 22, i8* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #12
  br label %29

29:                                               ; preds = %19, %3
  %30 = phi i8* [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), %3 ], [ %28, %19 ]
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = call i64 @strlen(i8* nonnull %9) #12
  %33 = icmp ugt i64 %32, -17
  br i1 %33, label %34, label %36

34:                                               ; preds = %29
  %35 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %35) #13
  unreachable

36:                                               ; preds = %29
  %37 = icmp ult i64 %32, 23
  br i1 %37, label %46, label %38

38:                                               ; preds = %36
  %39 = add nuw i64 %32, 16
  %40 = and i64 %39, -16
  %41 = call i8* @_Znwm(i64 %40) #14
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %41, i8** %42, align 8
  %43 = or i64 %40, -9223372036854775808
  %44 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %32, i64* %45, align 8
  br label %51

46:                                               ; preds = %36
  %47 = trunc i64 %32 to i8
  %48 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  store i8 %47, i8* %49, align 1
  %50 = icmp eq i64 %32, 0
  br i1 %50, label %53, label %51

51:                                               ; preds = %46, %38
  %52 = phi i8* [ %41, %38 ], [ %31, %46 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %52, i8* nonnull align 1 %9, i64 %32, i1 false) #12
  br label %53

53:                                               ; preds = %46, %51
  %54 = phi i8* [ %31, %46 ], [ %52, %51 ]
  %55 = getelementptr inbounds i8, i8* %54, i64 %32
  store i8 0, i8* %55, align 1
  %56 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %57 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %56, i64 0, i32 1, i32 0
  %58 = load i8, i8* %57, align 1
  %59 = icmp slt i8 %58, 0
  br i1 %59, label %60, label %63

60:                                               ; preds = %53
  %61 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  call void @_ZdlPv(i8* %62) #14
  br label %63

63:                                               ; preds = %60, %53
  %64 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* nonnull align 8 %31, i64 24, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  %65 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %65) #12
  %66 = call i64 @strlen(i8* %30) #12
  %67 = icmp ugt i64 %66, -17
  br i1 %67, label %68, label %70

68:                                               ; preds = %63
  %69 = bitcast %"class.std::__1::basic_string"* %8 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %69) #13
  unreachable

70:                                               ; preds = %63
  %71 = icmp ult i64 %66, 23
  br i1 %71, label %80, label %72

72:                                               ; preds = %70
  %73 = add nuw i64 %66, 16
  %74 = and i64 %73, -16
  %75 = call i8* @_Znwm(i64 %74) #14
  %76 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %75, i8** %76, align 8
  %77 = or i64 %74, -9223372036854775808
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %77, i64* %78, align 8
  %79 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %66, i64* %79, align 8
  br label %85

80:                                               ; preds = %70
  %81 = trunc i64 %66 to i8
  %82 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %83 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %82, i64 0, i32 1, i32 0
  store i8 %81, i8* %83, align 1
  %84 = icmp eq i64 %66, 0
  br i1 %84, label %87, label %85

85:                                               ; preds = %80, %72
  %86 = phi i8* [ %75, %72 ], [ %65, %80 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %86, i8* align 1 %30, i64 %66, i1 false) #12
  br label %87

87:                                               ; preds = %80, %85
  %88 = phi i8* [ %65, %80 ], [ %86, %85 ]
  %89 = getelementptr inbounds i8, i8* %88, i64 %66
  store i8 0, i8* %89, align 1
  %90 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %91 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %90, i64 0, i32 1, i32 0
  %92 = load i8, i8* %91, align 1
  %93 = icmp slt i8 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %87
  %95 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  call void @_ZdlPv(i8* %96) #14
  br label %97

97:                                               ; preds = %94, %87
  %98 = bitcast %"class.std::__1::basic_string"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* nonnull align 8 %65, i64 24, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %65) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %9) #12
  ret void
}

declare i32 @uloc_addLikelySubtags_69(i8*, i8*, i32, i32*) local_unnamed_addr #2

declare i32 @uloc_getLanguage_69(i8*, i8*, i32, i32*) local_unnamed_addr #2

declare i8* @uloc_getISO3Country_69(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN10spellcheck15FillSuggestionsERKNSt3__16vectorINS1_INS0_12basic_stringIDsNS0_11char_traitsIDsEENS0_9allocatorIDsEEEENS5_IS7_EEEENS5_IS9_EEEEPS9_(%"class.std::__1::vector.6"* nocapture readonly dereferenceable(24), %"class.std::__1::vector.8"*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::vector.8"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %11 = inttoptr i64 %7 to %"class.std::__1::vector.8"*
  %12 = inttoptr i64 %5 to %"class.std::__1::vector.8"*
  %13 = icmp eq %"class.std::__1::vector.8"* %12, %11
  br i1 %13, label %14, label %24

14:                                               ; preds = %24, %2
  %15 = phi i64 [ 0, %2 ], [ %35, %24 ]
  %16 = mul i64 %15, %9
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %311, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 0
  %20 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 1
  %21 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %22 = bitcast %"class.std::__1::basic_string.10"** %20 to i64*
  %23 = bitcast %"class.std::__1::vector.8"* %1 to i64*
  br label %38

24:                                               ; preds = %2, %24
  %25 = phi i64 [ %35, %24 ], [ 0, %2 ]
  %26 = phi %"class.std::__1::vector.8"* [ %36, %24 ], [ %11, %2 ]
  %27 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %26, i64 0, i32 0, i32 1
  %28 = bitcast %"class.std::__1::basic_string.10"** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = bitcast %"class.std::__1::vector.8"* %26 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %29, %31
  %33 = sdiv exact i64 %32, 24
  %34 = icmp ult i64 %25, %33
  %35 = select i1 %34, i64 %33, i64 %25
  %36 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %26, i64 1
  %37 = icmp eq %"class.std::__1::vector.8"* %36, %12
  br i1 %37, label %14, label %24

38:                                               ; preds = %309, %18
  %39 = phi %"class.std::__1::vector.8"* [ %11, %18 ], [ %310, %309 ]
  %40 = phi i64 [ 0, %18 ], [ %307, %309 ]
  %41 = urem i64 %40, %9
  %42 = udiv i64 %40, %9
  %43 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %39, i64 %41
  %44 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %39, i64 %41, i32 0, i32 1
  %45 = bitcast %"class.std::__1::basic_string.10"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::vector.8"* %43 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %46, %48
  %50 = sdiv exact i64 %49, 24
  %51 = icmp ugt i64 %50, %42
  %52 = inttoptr i64 %48 to %"class.std::__1::basic_string.10"*
  br i1 %51, label %53, label %306

53:                                               ; preds = %38
  %54 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %52, i64 %42
  %55 = load %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"** %19, align 8
  %56 = load %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"** %20, align 8
  %57 = icmp eq %"class.std::__1::basic_string.10"* %55, %56
  %58 = ptrtoint %"class.std::__1::basic_string.10"* %56 to i64
  br i1 %57, label %105, label %59

59:                                               ; preds = %53
  %60 = bitcast %"class.std::__1::basic_string.10"* %54 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %60, i64 0, i32 1, i32 1
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  %64 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %52, i64 %42, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = zext i8 %62 to i64
  %67 = select i1 %63, i64 %65, i64 %66
  %68 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i16*, i16** %68, align 8
  %70 = bitcast %"class.std::__1::basic_string.10"* %54 to i16*
  %71 = select i1 %63, i16* %69, i16* %70
  %72 = icmp eq i64 %67, 0
  br label %73

73:                                               ; preds = %102, %59
  %74 = phi %"class.std::__1::basic_string.10"* [ %55, %59 ], [ %103, %102 ]
  %75 = bitcast %"class.std::__1::basic_string.10"* %74 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %76 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %75, i64 0, i32 1, i32 1
  %77 = load i8, i8* %76, align 1
  %78 = icmp slt i8 %77, 0
  %79 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = zext i8 %77 to i64
  %82 = select i1 %78, i64 %80, i64 %81
  %83 = icmp eq i64 %82, %67
  br i1 %83, label %84, label %102

84:                                               ; preds = %73
  br i1 %72, label %105, label %85

85:                                               ; preds = %84
  %86 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %87 = load i16*, i16** %86, align 8
  %88 = bitcast %"class.std::__1::basic_string.10"* %74 to i16*
  %89 = select i1 %78, i16* %87, i16* %88
  br label %90

90:                                               ; preds = %97, %85
  %91 = phi i64 [ %98, %97 ], [ %67, %85 ]
  %92 = phi i16* [ %100, %97 ], [ %71, %85 ]
  %93 = phi i16* [ %99, %97 ], [ %89, %85 ]
  %94 = load i16, i16* %93, align 2
  %95 = load i16, i16* %92, align 2
  %96 = icmp eq i16 %95, %94
  br i1 %96, label %97, label %102

97:                                               ; preds = %90
  %98 = add i64 %91, -1
  %99 = getelementptr inbounds i16, i16* %93, i64 1
  %100 = getelementptr inbounds i16, i16* %92, i64 1
  %101 = icmp eq i64 %98, 0
  br i1 %101, label %105, label %90

102:                                              ; preds = %90, %73
  %103 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %74, i64 1
  %104 = icmp eq %"class.std::__1::basic_string.10"* %103, %56
  br i1 %104, label %108, label %73

105:                                              ; preds = %84, %97, %53
  %106 = phi %"class.std::__1::basic_string.10"* [ %55, %53 ], [ %74, %97 ], [ %74, %84 ]
  %107 = icmp eq %"class.std::__1::basic_string.10"* %106, %56
  br i1 %107, label %108, label %300

108:                                              ; preds = %102, %105
  %109 = load %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"** %21, align 8
  %110 = icmp eq %"class.std::__1::basic_string.10"* %56, %109
  br i1 %110, label %298, label %111

111:                                              ; preds = %108
  %112 = bitcast %"class.std::__1::basic_string.10"* %54 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %113 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %112, i64 0, i32 1, i32 1
  %114 = load i8, i8* %113, align 1
  %115 = icmp slt i8 %114, 0
  br i1 %115, label %119, label %116

116:                                              ; preds = %111
  %117 = bitcast %"class.std::__1::basic_string.10"* %56 to i8*
  %118 = bitcast %"class.std::__1::basic_string.10"* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %117, i8* align 8 %118, i64 24, i1 false) #12
  br label %295

119:                                              ; preds = %111
  %120 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %121 = load i16*, i16** %120, align 8
  %122 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %52, i64 %42, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = icmp ult i64 %123, 11
  br i1 %124, label %125, label %130

125:                                              ; preds = %119
  %126 = bitcast %"class.std::__1::basic_string.10"* %56 to i16*
  %127 = trunc i64 %123 to i8
  %128 = bitcast %"class.std::__1::basic_string.10"* %56 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %129 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %128, i64 0, i32 1, i32 1
  store i8 %127, i8* %129, align 1
  br label %147

130:                                              ; preds = %119
  %131 = icmp ugt i64 %123, 9223372036854775791
  br i1 %131, label %132, label %134

132:                                              ; preds = %130
  %133 = bitcast %"class.std::__1::basic_string.10"* %56 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %133) #13
  unreachable

134:                                              ; preds = %130
  %135 = add nuw nsw i64 %123, 8
  %136 = and i64 %135, -8
  %137 = icmp slt i64 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %134
  tail call void @abort() #13
  unreachable

139:                                              ; preds = %134
  %140 = shl i64 %136, 1
  %141 = tail call i8* @_Znwm(i64 %140) #14
  %142 = bitcast i8* %141 to i16*
  %143 = bitcast %"class.std::__1::basic_string.10"* %56 to i8**
  store i8* %141, i8** %143, align 8
  %144 = or i64 %136, -9223372036854775808
  %145 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %56, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %56, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %123, i64* %146, align 8
  br label %147

147:                                              ; preds = %139, %125
  %148 = phi i16* [ %126, %125 ], [ %142, %139 ]
  %149 = add nuw nsw i64 %123, 1
  %150 = add i64 %123, 1
  %151 = icmp ult i64 %150, 16
  br i1 %151, label %242, label %152

152:                                              ; preds = %147
  %153 = getelementptr i16, i16* %148, i64 1
  %154 = getelementptr i16, i16* %153, i64 %123
  %155 = getelementptr i16, i16* %121, i64 1
  %156 = getelementptr i16, i16* %155, i64 %123
  %157 = icmp ult i16* %148, %156
  %158 = icmp ult i16* %121, %154
  %159 = and i1 %157, %158
  br i1 %159, label %242, label %160

160:                                              ; preds = %152
  %161 = and i64 %150, -16
  %162 = sub i64 %149, %161
  %163 = getelementptr i16, i16* %121, i64 %161
  %164 = getelementptr i16, i16* %148, i64 %161
  %165 = add i64 %161, -16
  %166 = lshr exact i64 %165, 4
  %167 = add nuw nsw i64 %166, 1
  %168 = and i64 %167, 3
  %169 = icmp ult i64 %165, 48
  br i1 %169, label %221, label %170

170:                                              ; preds = %160
  %171 = sub nsw i64 %167, %168
  br label %172

172:                                              ; preds = %172, %170
  %173 = phi i64 [ 0, %170 ], [ %218, %172 ]
  %174 = phi i64 [ %171, %170 ], [ %219, %172 ]
  %175 = getelementptr i16, i16* %121, i64 %173
  %176 = getelementptr i16, i16* %148, i64 %173
  %177 = bitcast i16* %175 to <8 x i16>*
  %178 = load <8 x i16>, <8 x i16>* %177, align 2, !alias.scope !14
  %179 = getelementptr i16, i16* %175, i64 8
  %180 = bitcast i16* %179 to <8 x i16>*
  %181 = load <8 x i16>, <8 x i16>* %180, align 2, !alias.scope !14
  %182 = bitcast i16* %176 to <8 x i16>*
  store <8 x i16> %178, <8 x i16>* %182, align 2, !alias.scope !17, !noalias !14
  %183 = getelementptr i16, i16* %176, i64 8
  %184 = bitcast i16* %183 to <8 x i16>*
  store <8 x i16> %181, <8 x i16>* %184, align 2, !alias.scope !17, !noalias !14
  %185 = or i64 %173, 16
  %186 = getelementptr i16, i16* %121, i64 %185
  %187 = getelementptr i16, i16* %148, i64 %185
  %188 = bitcast i16* %186 to <8 x i16>*
  %189 = load <8 x i16>, <8 x i16>* %188, align 2, !alias.scope !14
  %190 = getelementptr i16, i16* %186, i64 8
  %191 = bitcast i16* %190 to <8 x i16>*
  %192 = load <8 x i16>, <8 x i16>* %191, align 2, !alias.scope !14
  %193 = bitcast i16* %187 to <8 x i16>*
  store <8 x i16> %189, <8 x i16>* %193, align 2, !alias.scope !17, !noalias !14
  %194 = getelementptr i16, i16* %187, i64 8
  %195 = bitcast i16* %194 to <8 x i16>*
  store <8 x i16> %192, <8 x i16>* %195, align 2, !alias.scope !17, !noalias !14
  %196 = or i64 %173, 32
  %197 = getelementptr i16, i16* %121, i64 %196
  %198 = getelementptr i16, i16* %148, i64 %196
  %199 = bitcast i16* %197 to <8 x i16>*
  %200 = load <8 x i16>, <8 x i16>* %199, align 2, !alias.scope !14
  %201 = getelementptr i16, i16* %197, i64 8
  %202 = bitcast i16* %201 to <8 x i16>*
  %203 = load <8 x i16>, <8 x i16>* %202, align 2, !alias.scope !14
  %204 = bitcast i16* %198 to <8 x i16>*
  store <8 x i16> %200, <8 x i16>* %204, align 2, !alias.scope !17, !noalias !14
  %205 = getelementptr i16, i16* %198, i64 8
  %206 = bitcast i16* %205 to <8 x i16>*
  store <8 x i16> %203, <8 x i16>* %206, align 2, !alias.scope !17, !noalias !14
  %207 = or i64 %173, 48
  %208 = getelementptr i16, i16* %121, i64 %207
  %209 = getelementptr i16, i16* %148, i64 %207
  %210 = bitcast i16* %208 to <8 x i16>*
  %211 = load <8 x i16>, <8 x i16>* %210, align 2, !alias.scope !14
  %212 = getelementptr i16, i16* %208, i64 8
  %213 = bitcast i16* %212 to <8 x i16>*
  %214 = load <8 x i16>, <8 x i16>* %213, align 2, !alias.scope !14
  %215 = bitcast i16* %209 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %215, align 2, !alias.scope !17, !noalias !14
  %216 = getelementptr i16, i16* %209, i64 8
  %217 = bitcast i16* %216 to <8 x i16>*
  store <8 x i16> %214, <8 x i16>* %217, align 2, !alias.scope !17, !noalias !14
  %218 = add i64 %173, 64
  %219 = add i64 %174, -4
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %172, !llvm.loop !19

221:                                              ; preds = %172, %160
  %222 = phi i64 [ 0, %160 ], [ %218, %172 ]
  %223 = icmp eq i64 %168, 0
  br i1 %223, label %240, label %224

224:                                              ; preds = %221, %224
  %225 = phi i64 [ %237, %224 ], [ %222, %221 ]
  %226 = phi i64 [ %238, %224 ], [ %168, %221 ]
  %227 = getelementptr i16, i16* %121, i64 %225
  %228 = getelementptr i16, i16* %148, i64 %225
  %229 = bitcast i16* %227 to <8 x i16>*
  %230 = load <8 x i16>, <8 x i16>* %229, align 2, !alias.scope !14
  %231 = getelementptr i16, i16* %227, i64 8
  %232 = bitcast i16* %231 to <8 x i16>*
  %233 = load <8 x i16>, <8 x i16>* %232, align 2, !alias.scope !14
  %234 = bitcast i16* %228 to <8 x i16>*
  store <8 x i16> %230, <8 x i16>* %234, align 2, !alias.scope !17, !noalias !14
  %235 = getelementptr i16, i16* %228, i64 8
  %236 = bitcast i16* %235 to <8 x i16>*
  store <8 x i16> %233, <8 x i16>* %236, align 2, !alias.scope !17, !noalias !14
  %237 = add i64 %225, 16
  %238 = add i64 %226, -1
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %240, label %224, !llvm.loop !21

240:                                              ; preds = %224, %221
  %241 = icmp eq i64 %150, %161
  br i1 %241, label %295, label %242

242:                                              ; preds = %240, %152, %147
  %243 = phi i64 [ %149, %152 ], [ %149, %147 ], [ %162, %240 ]
  %244 = phi i16* [ %121, %152 ], [ %121, %147 ], [ %163, %240 ]
  %245 = phi i16* [ %148, %152 ], [ %148, %147 ], [ %164, %240 ]
  %246 = add i64 %243, -1
  %247 = and i64 %243, 7
  %248 = icmp eq i64 %247, 0
  br i1 %248, label %260, label %249

249:                                              ; preds = %242, %249
  %250 = phi i64 [ %255, %249 ], [ %243, %242 ]
  %251 = phi i16* [ %257, %249 ], [ %244, %242 ]
  %252 = phi i16* [ %256, %249 ], [ %245, %242 ]
  %253 = phi i64 [ %258, %249 ], [ %247, %242 ]
  %254 = load i16, i16* %251, align 2
  store i16 %254, i16* %252, align 2
  %255 = add i64 %250, -1
  %256 = getelementptr inbounds i16, i16* %252, i64 1
  %257 = getelementptr inbounds i16, i16* %251, i64 1
  %258 = add i64 %253, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %249, !llvm.loop !23

260:                                              ; preds = %249, %242
  %261 = phi i64 [ %243, %242 ], [ %255, %249 ]
  %262 = phi i16* [ %244, %242 ], [ %257, %249 ]
  %263 = phi i16* [ %245, %242 ], [ %256, %249 ]
  %264 = icmp ult i64 %246, 7
  br i1 %264, label %295, label %265

265:                                              ; preds = %260, %265
  %266 = phi i64 [ %291, %265 ], [ %261, %260 ]
  %267 = phi i16* [ %293, %265 ], [ %262, %260 ]
  %268 = phi i16* [ %292, %265 ], [ %263, %260 ]
  %269 = load i16, i16* %267, align 2
  store i16 %269, i16* %268, align 2
  %270 = getelementptr inbounds i16, i16* %268, i64 1
  %271 = getelementptr inbounds i16, i16* %267, i64 1
  %272 = load i16, i16* %271, align 2
  store i16 %272, i16* %270, align 2
  %273 = getelementptr inbounds i16, i16* %268, i64 2
  %274 = getelementptr inbounds i16, i16* %267, i64 2
  %275 = load i16, i16* %274, align 2
  store i16 %275, i16* %273, align 2
  %276 = getelementptr inbounds i16, i16* %268, i64 3
  %277 = getelementptr inbounds i16, i16* %267, i64 3
  %278 = load i16, i16* %277, align 2
  store i16 %278, i16* %276, align 2
  %279 = getelementptr inbounds i16, i16* %268, i64 4
  %280 = getelementptr inbounds i16, i16* %267, i64 4
  %281 = load i16, i16* %280, align 2
  store i16 %281, i16* %279, align 2
  %282 = getelementptr inbounds i16, i16* %268, i64 5
  %283 = getelementptr inbounds i16, i16* %267, i64 5
  %284 = load i16, i16* %283, align 2
  store i16 %284, i16* %282, align 2
  %285 = getelementptr inbounds i16, i16* %268, i64 6
  %286 = getelementptr inbounds i16, i16* %267, i64 6
  %287 = load i16, i16* %286, align 2
  store i16 %287, i16* %285, align 2
  %288 = getelementptr inbounds i16, i16* %268, i64 7
  %289 = getelementptr inbounds i16, i16* %267, i64 7
  %290 = load i16, i16* %289, align 2
  store i16 %290, i16* %288, align 2
  %291 = add i64 %266, -8
  %292 = getelementptr inbounds i16, i16* %268, i64 8
  %293 = getelementptr inbounds i16, i16* %267, i64 8
  %294 = icmp eq i64 %291, 0
  br i1 %294, label %295, label %265, !llvm.loop !24

295:                                              ; preds = %260, %265, %240, %116
  %296 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %56, i64 1
  %297 = ptrtoint %"class.std::__1::basic_string.10"* %296 to i64
  store i64 %297, i64* %22, align 8
  br label %300

298:                                              ; preds = %108
  tail call void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(%"class.std::__1::vector.8"* %1, %"class.std::__1::basic_string.10"* dereferenceable(24) %54) #12
  %299 = load i64, i64* %22, align 8
  br label %300

300:                                              ; preds = %105, %298, %295
  %301 = phi i64 [ %58, %105 ], [ %299, %298 ], [ %297, %295 ]
  %302 = load i64, i64* %23, align 8
  %303 = sub i64 %301, %302
  %304 = sdiv exact i64 %303, 24
  %305 = icmp ugt i64 %304, 4
  br i1 %305, label %311, label %306

306:                                              ; preds = %300, %38
  %307 = add nuw i64 %40, 1
  %308 = icmp eq i64 %307, %16
  br i1 %308, label %311, label %309

309:                                              ; preds = %306
  %310 = load %"class.std::__1::vector.8"*, %"class.std::__1::vector.8"** %10, align 8
  br label %38

311:                                              ; preds = %300, %306, %14
  ret void
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #9

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE17__assign_externalEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIS6_EEvOT_(%"class.std::__1::vector"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #14
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string"* %34 to i8*
  %38 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %34, i64 1
  %40 = ptrtoint %"class.std::__1::basic_string"* %39 to i64
  %41 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %42 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %41, align 8
  %43 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %44 = icmp eq %"class.std::__1::basic_string"* %43, %42
  br i1 %44, label %45, label %47

45:                                               ; preds = %31
  %46 = ptrtoint %"class.std::__1::basic_string"* %42 to i64
  br label %58

47:                                               ; preds = %31, %47
  %48 = phi %"class.std::__1::basic_string"* [ %50, %47 ], [ %34, %31 ]
  %49 = phi %"class.std::__1::basic_string"* [ %51, %47 ], [ %43, %31 ]
  %50 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %48, i64 -1
  %51 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %49, i64 -1
  %52 = bitcast %"class.std::__1::basic_string"* %50 to i8*
  %53 = bitcast %"class.std::__1::basic_string"* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %53, i8 0, i64 24, i1 false) #12
  %54 = icmp eq %"class.std::__1::basic_string"* %51, %42
  br i1 %54, label %55, label %47

55:                                               ; preds = %47
  %56 = load i64, i64* %6, align 8
  %57 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  br label %58

58:                                               ; preds = %45, %55
  %59 = phi %"class.std::__1::basic_string"* [ %42, %45 ], [ %57, %55 ]
  %60 = phi %"class.std::__1::basic_string"* [ %34, %45 ], [ %50, %55 ]
  %61 = phi i64 [ %46, %45 ], [ %56, %55 ]
  %62 = ptrtoint %"class.std::__1::basic_string"* %60 to i64
  store i64 %62, i64* %6, align 8
  store i64 %40, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %63 = inttoptr i64 %61 to %"class.std::__1::basic_string"*
  %64 = icmp eq %"class.std::__1::basic_string"* %59, %63
  br i1 %64, label %77, label %65

65:                                               ; preds = %58, %75
  %66 = phi %"class.std::__1::basic_string"* [ %67, %75 ], [ %59, %58 ]
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %66, i64 -1
  %68 = bitcast %"class.std::__1::basic_string"* %67 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %69 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %68, i64 0, i32 1, i32 0
  %70 = load i8, i8* %69, align 1
  %71 = icmp slt i8 %70, 0
  br i1 %71, label %72, label %75

72:                                               ; preds = %65
  %73 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %67, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = load i8*, i8** %73, align 8
  tail call void @_ZdlPv(i8* %74) #14
  br label %75

75:                                               ; preds = %72, %65
  %76 = icmp eq %"class.std::__1::basic_string"* %67, %63
  br i1 %76, label %77, label %65

77:                                               ; preds = %75, %58
  %78 = icmp eq i64 %61, 0
  br i1 %78, label %81, label %79

79:                                               ; preds = %77
  %80 = inttoptr i64 %61 to i8*
  tail call void @_ZdlPv(i8* %80) #14
  br label %81

81:                                               ; preds = %77, %79
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorINS_12basic_stringIDsNS_11char_traitsIDsEENS_9allocatorIDsEEEENS4_IS6_EEE21__push_back_slow_pathIRKS6_EEvOT_(%"class.std::__1::vector.8"*, %"class.std::__1::basic_string.10"* dereferenceable(24)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"class.std::__1::basic_string.10"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 24
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 768614336404564650
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"class.std::__1::basic_string.10"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 24
  %20 = icmp ult i64 %19, 384307168202282325
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 768614336404564650, %14 ]
  %28 = mul i64 %27, 24
  %29 = tail call i8* @_Znwm(i64 %28) #14
  %30 = bitcast i8* %29 to %"class.std::__1::basic_string.10"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"class.std::__1::basic_string.10"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %33, i64 %9
  %35 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %33, i64 %32
  %36 = ptrtoint %"class.std::__1::basic_string.10"* %35 to i64
  %37 = bitcast %"class.std::__1::basic_string.10"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %37, i64 0, i32 1, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %31
  %42 = bitcast %"class.std::__1::basic_string.10"* %34 to i8*
  %43 = bitcast %"class.std::__1::basic_string.10"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false) #12
  br label %219

44:                                               ; preds = %31
  %45 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %46 = load i16*, i16** %45, align 8
  %47 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = icmp ult i64 %48, 11
  br i1 %49, label %50, label %55

50:                                               ; preds = %44
  %51 = bitcast %"class.std::__1::basic_string.10"* %34 to i16*
  %52 = trunc i64 %48 to i8
  %53 = bitcast %"class.std::__1::basic_string.10"* %34 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %54 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %53, i64 0, i32 1, i32 1
  store i8 %52, i8* %54, align 1
  br label %72

55:                                               ; preds = %44
  %56 = icmp ugt i64 %48, 9223372036854775791
  br i1 %56, label %57, label %59

57:                                               ; preds = %55
  %58 = bitcast %"class.std::__1::basic_string.10"* %34 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %58) #13
  unreachable

59:                                               ; preds = %55
  %60 = add nuw nsw i64 %48, 8
  %61 = and i64 %60, -8
  %62 = icmp slt i64 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %59
  tail call void @abort() #13
  unreachable

64:                                               ; preds = %59
  %65 = shl i64 %61, 1
  %66 = tail call i8* @_Znwm(i64 %65) #14
  %67 = bitcast i8* %66 to i16*
  %68 = bitcast %"class.std::__1::basic_string.10"* %34 to i8**
  store i8* %66, i8** %68, align 8
  %69 = or i64 %61, -9223372036854775808
  %70 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %33, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %33, i64 %9, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %48, i64* %71, align 8
  br label %72

72:                                               ; preds = %64, %50
  %73 = phi i16* [ %51, %50 ], [ %67, %64 ]
  %74 = add nuw nsw i64 %48, 1
  %75 = add i64 %48, 1
  %76 = icmp ult i64 %75, 16
  br i1 %76, label %166, label %77

77:                                               ; preds = %72
  %78 = add i64 %48, 1
  %79 = getelementptr i16, i16* %73, i64 %78
  %80 = getelementptr i16, i16* %46, i64 %78
  %81 = icmp ult i16* %73, %80
  %82 = icmp ult i16* %46, %79
  %83 = and i1 %81, %82
  br i1 %83, label %166, label %84

84:                                               ; preds = %77
  %85 = and i64 %75, -16
  %86 = sub i64 %74, %85
  %87 = getelementptr i16, i16* %46, i64 %85
  %88 = getelementptr i16, i16* %73, i64 %85
  %89 = add i64 %85, -16
  %90 = lshr exact i64 %89, 4
  %91 = add nuw nsw i64 %90, 1
  %92 = and i64 %91, 3
  %93 = icmp ult i64 %89, 48
  br i1 %93, label %145, label %94

94:                                               ; preds = %84
  %95 = sub nsw i64 %91, %92
  br label %96

96:                                               ; preds = %96, %94
  %97 = phi i64 [ 0, %94 ], [ %142, %96 ]
  %98 = phi i64 [ %95, %94 ], [ %143, %96 ]
  %99 = getelementptr i16, i16* %46, i64 %97
  %100 = getelementptr i16, i16* %73, i64 %97
  %101 = bitcast i16* %99 to <8 x i16>*
  %102 = load <8 x i16>, <8 x i16>* %101, align 2, !alias.scope !25
  %103 = getelementptr i16, i16* %99, i64 8
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !25
  %106 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %102, <8 x i16>* %106, align 2, !alias.scope !28, !noalias !25
  %107 = getelementptr i16, i16* %100, i64 8
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> %105, <8 x i16>* %108, align 2, !alias.scope !28, !noalias !25
  %109 = or i64 %97, 16
  %110 = getelementptr i16, i16* %46, i64 %109
  %111 = getelementptr i16, i16* %73, i64 %109
  %112 = bitcast i16* %110 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !25
  %114 = getelementptr i16, i16* %110, i64 8
  %115 = bitcast i16* %114 to <8 x i16>*
  %116 = load <8 x i16>, <8 x i16>* %115, align 2, !alias.scope !25
  %117 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %117, align 2, !alias.scope !28, !noalias !25
  %118 = getelementptr i16, i16* %111, i64 8
  %119 = bitcast i16* %118 to <8 x i16>*
  store <8 x i16> %116, <8 x i16>* %119, align 2, !alias.scope !28, !noalias !25
  %120 = or i64 %97, 32
  %121 = getelementptr i16, i16* %46, i64 %120
  %122 = getelementptr i16, i16* %73, i64 %120
  %123 = bitcast i16* %121 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !25
  %125 = getelementptr i16, i16* %121, i64 8
  %126 = bitcast i16* %125 to <8 x i16>*
  %127 = load <8 x i16>, <8 x i16>* %126, align 2, !alias.scope !25
  %128 = bitcast i16* %122 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %128, align 2, !alias.scope !28, !noalias !25
  %129 = getelementptr i16, i16* %122, i64 8
  %130 = bitcast i16* %129 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %130, align 2, !alias.scope !28, !noalias !25
  %131 = or i64 %97, 48
  %132 = getelementptr i16, i16* %46, i64 %131
  %133 = getelementptr i16, i16* %73, i64 %131
  %134 = bitcast i16* %132 to <8 x i16>*
  %135 = load <8 x i16>, <8 x i16>* %134, align 2, !alias.scope !25
  %136 = getelementptr i16, i16* %132, i64 8
  %137 = bitcast i16* %136 to <8 x i16>*
  %138 = load <8 x i16>, <8 x i16>* %137, align 2, !alias.scope !25
  %139 = bitcast i16* %133 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %139, align 2, !alias.scope !28, !noalias !25
  %140 = getelementptr i16, i16* %133, i64 8
  %141 = bitcast i16* %140 to <8 x i16>*
  store <8 x i16> %138, <8 x i16>* %141, align 2, !alias.scope !28, !noalias !25
  %142 = add i64 %97, 64
  %143 = add i64 %98, -4
  %144 = icmp eq i64 %143, 0
  br i1 %144, label %145, label %96, !llvm.loop !30

145:                                              ; preds = %96, %84
  %146 = phi i64 [ 0, %84 ], [ %142, %96 ]
  %147 = icmp eq i64 %92, 0
  br i1 %147, label %164, label %148

148:                                              ; preds = %145, %148
  %149 = phi i64 [ %161, %148 ], [ %146, %145 ]
  %150 = phi i64 [ %162, %148 ], [ %92, %145 ]
  %151 = getelementptr i16, i16* %46, i64 %149
  %152 = getelementptr i16, i16* %73, i64 %149
  %153 = bitcast i16* %151 to <8 x i16>*
  %154 = load <8 x i16>, <8 x i16>* %153, align 2, !alias.scope !25
  %155 = getelementptr i16, i16* %151, i64 8
  %156 = bitcast i16* %155 to <8 x i16>*
  %157 = load <8 x i16>, <8 x i16>* %156, align 2, !alias.scope !25
  %158 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> %154, <8 x i16>* %158, align 2, !alias.scope !28, !noalias !25
  %159 = getelementptr i16, i16* %152, i64 8
  %160 = bitcast i16* %159 to <8 x i16>*
  store <8 x i16> %157, <8 x i16>* %160, align 2, !alias.scope !28, !noalias !25
  %161 = add i64 %149, 16
  %162 = add i64 %150, -1
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %148, !llvm.loop !31

164:                                              ; preds = %148, %145
  %165 = icmp eq i64 %75, %85
  br i1 %165, label %219, label %166

166:                                              ; preds = %164, %77, %72
  %167 = phi i64 [ %74, %77 ], [ %74, %72 ], [ %86, %164 ]
  %168 = phi i16* [ %46, %77 ], [ %46, %72 ], [ %87, %164 ]
  %169 = phi i16* [ %73, %77 ], [ %73, %72 ], [ %88, %164 ]
  %170 = add i64 %167, -1
  %171 = and i64 %167, 7
  %172 = icmp eq i64 %171, 0
  br i1 %172, label %184, label %173

173:                                              ; preds = %166, %173
  %174 = phi i64 [ %179, %173 ], [ %167, %166 ]
  %175 = phi i16* [ %181, %173 ], [ %168, %166 ]
  %176 = phi i16* [ %180, %173 ], [ %169, %166 ]
  %177 = phi i64 [ %182, %173 ], [ %171, %166 ]
  %178 = load i16, i16* %175, align 2
  store i16 %178, i16* %176, align 2
  %179 = add i64 %174, -1
  %180 = getelementptr inbounds i16, i16* %176, i64 1
  %181 = getelementptr inbounds i16, i16* %175, i64 1
  %182 = add i64 %177, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %173, !llvm.loop !32

184:                                              ; preds = %173, %166
  %185 = phi i64 [ %167, %166 ], [ %179, %173 ]
  %186 = phi i16* [ %168, %166 ], [ %181, %173 ]
  %187 = phi i16* [ %169, %166 ], [ %180, %173 ]
  %188 = icmp ult i64 %170, 7
  br i1 %188, label %219, label %189

189:                                              ; preds = %184, %189
  %190 = phi i64 [ %215, %189 ], [ %185, %184 ]
  %191 = phi i16* [ %217, %189 ], [ %186, %184 ]
  %192 = phi i16* [ %216, %189 ], [ %187, %184 ]
  %193 = load i16, i16* %191, align 2
  store i16 %193, i16* %192, align 2
  %194 = getelementptr inbounds i16, i16* %192, i64 1
  %195 = getelementptr inbounds i16, i16* %191, i64 1
  %196 = load i16, i16* %195, align 2
  store i16 %196, i16* %194, align 2
  %197 = getelementptr inbounds i16, i16* %192, i64 2
  %198 = getelementptr inbounds i16, i16* %191, i64 2
  %199 = load i16, i16* %198, align 2
  store i16 %199, i16* %197, align 2
  %200 = getelementptr inbounds i16, i16* %192, i64 3
  %201 = getelementptr inbounds i16, i16* %191, i64 3
  %202 = load i16, i16* %201, align 2
  store i16 %202, i16* %200, align 2
  %203 = getelementptr inbounds i16, i16* %192, i64 4
  %204 = getelementptr inbounds i16, i16* %191, i64 4
  %205 = load i16, i16* %204, align 2
  store i16 %205, i16* %203, align 2
  %206 = getelementptr inbounds i16, i16* %192, i64 5
  %207 = getelementptr inbounds i16, i16* %191, i64 5
  %208 = load i16, i16* %207, align 2
  store i16 %208, i16* %206, align 2
  %209 = getelementptr inbounds i16, i16* %192, i64 6
  %210 = getelementptr inbounds i16, i16* %191, i64 6
  %211 = load i16, i16* %210, align 2
  store i16 %211, i16* %209, align 2
  %212 = getelementptr inbounds i16, i16* %192, i64 7
  %213 = getelementptr inbounds i16, i16* %191, i64 7
  %214 = load i16, i16* %213, align 2
  store i16 %214, i16* %212, align 2
  %215 = add i64 %190, -8
  %216 = getelementptr inbounds i16, i16* %192, i64 8
  %217 = getelementptr inbounds i16, i16* %191, i64 8
  %218 = icmp eq i64 %215, 0
  br i1 %218, label %219, label %189, !llvm.loop !33

219:                                              ; preds = %184, %189, %164, %41
  %220 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %34, i64 1
  %221 = ptrtoint %"class.std::__1::basic_string.10"* %220 to i64
  %222 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %223 = load %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"** %222, align 8
  %224 = load %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"** %3, align 8
  %225 = icmp eq %"class.std::__1::basic_string.10"* %224, %223
  br i1 %225, label %226, label %228

226:                                              ; preds = %219
  %227 = ptrtoint %"class.std::__1::basic_string.10"* %223 to i64
  br label %239

228:                                              ; preds = %219, %228
  %229 = phi %"class.std::__1::basic_string.10"* [ %231, %228 ], [ %34, %219 ]
  %230 = phi %"class.std::__1::basic_string.10"* [ %232, %228 ], [ %224, %219 ]
  %231 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %229, i64 -1
  %232 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %230, i64 -1
  %233 = bitcast %"class.std::__1::basic_string.10"* %231 to i8*
  %234 = bitcast %"class.std::__1::basic_string.10"* %232 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %233, i8* align 8 %234, i64 24, i1 false) #12
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %234, i8 0, i64 24, i1 false) #12
  %235 = icmp eq %"class.std::__1::basic_string.10"* %232, %223
  br i1 %235, label %236, label %228

236:                                              ; preds = %228
  %237 = load i64, i64* %6, align 8
  %238 = load %"class.std::__1::basic_string.10"*, %"class.std::__1::basic_string.10"** %3, align 8
  br label %239

239:                                              ; preds = %226, %236
  %240 = phi %"class.std::__1::basic_string.10"* [ %223, %226 ], [ %238, %236 ]
  %241 = phi %"class.std::__1::basic_string.10"* [ %34, %226 ], [ %231, %236 ]
  %242 = phi i64 [ %227, %226 ], [ %237, %236 ]
  %243 = ptrtoint %"class.std::__1::basic_string.10"* %241 to i64
  store i64 %243, i64* %6, align 8
  store i64 %221, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %244 = inttoptr i64 %242 to %"class.std::__1::basic_string.10"*
  %245 = icmp eq %"class.std::__1::basic_string.10"* %240, %244
  br i1 %245, label %258, label %246

246:                                              ; preds = %239, %256
  %247 = phi %"class.std::__1::basic_string.10"* [ %248, %256 ], [ %240, %239 ]
  %248 = getelementptr inbounds %"class.std::__1::basic_string.10", %"class.std::__1::basic_string.10"* %247, i64 -1
  %249 = bitcast %"class.std::__1::basic_string.10"* %248 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %250 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %249, i64 0, i32 1, i32 1
  %251 = load i8, i8* %250, align 1
  %252 = icmp slt i8 %251, 0
  br i1 %252, label %253, label %256

253:                                              ; preds = %246
  %254 = bitcast %"class.std::__1::basic_string.10"* %248 to i8**
  %255 = load i8*, i8** %254, align 8
  tail call void @_ZdlPv(i8* %255) #14
  br label %256

256:                                              ; preds = %253, %246
  %257 = icmp eq %"class.std::__1::basic_string.10"* %248, %244
  br i1 %257, label %258, label %246

258:                                              ; preds = %256, %239
  %259 = icmp eq i64 %242, 0
  br i1 %259, label %262, label %260

260:                                              ; preds = %258
  %261 = inttoptr i64 %242 to i8*
  tail call void @_ZdlPv(i8* %261) #14
  br label %262

262:                                              ; preds = %258, %260
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!4 = distinct !{!4, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_: argument 0"}
!7 = distinct !{!7, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_: argument 0"}
!10 = distinct !{!10, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEOS9_PKS6_"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv: argument 0"}
!13 = distinct !{!13, !"_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv"}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.isvectorized", i32 1}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.unroll.disable"}
!23 = distinct !{!23, !22}
!24 = distinct !{!24, !20}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !20}
!31 = distinct !{!31, !22}
!32 = distinct !{!32, !22}
!33 = distinct !{!33, !20}
