; ModuleID = '../../third_party/pdfium/third_party/lcms/src/cmssm.c'
source_filename = "../../third_party/pdfium/third_party/lcms/src/cmssm.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct._spiral = type { i32, i32 }
%struct._cmsContext_struct = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator*, [15 x i8*], %struct._cmsMemPluginChunkType }
%struct._cmsSubAllocator = type { %struct._cmsContext_struct*, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsSubAllocator_chunk_st = type { i8*, i32, i32, %struct._cmsSubAllocator_chunk_st* }
%struct._cmsMemPluginChunkType = type { i8* (%struct._cmsContext_struct*, i32)*, i8* (%struct._cmsContext_struct*, i32)*, void (%struct._cmsContext_struct*, i8*)*, i8* (%struct._cmsContext_struct*, i8*, i32)*, i8* (%struct._cmsContext_struct*, i32, i32)*, i8* (%struct._cmsContext_struct*, i8*, i32)* }
%struct.cmsCIELab = type { double, double, double }
%struct.cmsSpherical = type { double, double, double }
%struct.cmsGDB = type { %struct._cmsContext_struct*, [16 x [16 x %struct.cmsGDBPoint]] }
%struct.cmsGDBPoint = type { i32, %struct.cmsSpherical }
%struct.cmsVEC3 = type { [3 x double] }
%struct.cmsLine = type { %struct.cmsVEC3, %struct.cmsVEC3 }

@.str = private unnamed_addr constant [29 x i8] c"spherical value out of range\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c" quadrant out of range\00", align 1
@Spiral = internal unnamed_addr constant [24 x %struct._spiral] [%struct._spiral { i32 0, i32 -1 }, %struct._spiral { i32 1, i32 -1 }, %struct._spiral { i32 1, i32 0 }, %struct._spiral { i32 1, i32 1 }, %struct._spiral { i32 0, i32 1 }, %struct._spiral { i32 -1, i32 1 }, %struct._spiral { i32 -1, i32 0 }, %struct._spiral { i32 -1, i32 -1 }, %struct._spiral { i32 -1, i32 -2 }, %struct._spiral { i32 0, i32 -2 }, %struct._spiral { i32 1, i32 -2 }, %struct._spiral { i32 2, i32 -2 }, %struct._spiral { i32 2, i32 -1 }, %struct._spiral { i32 2, i32 0 }, %struct._spiral { i32 2, i32 1 }, %struct._spiral { i32 2, i32 2 }, %struct._spiral { i32 1, i32 2 }, %struct._spiral { i32 0, i32 2 }, %struct._spiral { i32 -1, i32 2 }, %struct._spiral { i32 -2, i32 2 }, %struct._spiral { i32 -2, i32 1 }, %struct._spiral { i32 -2, i32 0 }, %struct._spiral { i32 -2, i32 -1 }, %struct._spiral { i32 -2, i32 -2 }], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i8* @cmsGBDAlloc(%struct._cmsContext_struct*) local_unnamed_addr #0 {
  %2 = tail call i8* @_cmsMallocZero(%struct._cmsContext_struct* %0, i32 8200) #5
  %3 = icmp eq i8* %2, null
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = bitcast i8* %2 to %struct._cmsContext_struct**
  store %struct._cmsContext_struct* %0, %struct._cmsContext_struct** %5, align 8
  br label %6

6:                                                ; preds = %1, %4
  ret i8* %2
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @_cmsMallocZero(%struct._cmsContext_struct*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @cmsGBDFree(i8*) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %6, label %3

3:                                                ; preds = %1
  %4 = bitcast i8* %0 to %struct._cmsContext_struct**
  %5 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %4, align 8
  tail call void @_cmsFree(%struct._cmsContext_struct* %5, i8* nonnull %0) #5
  br label %6

6:                                                ; preds = %1, %3
  ret void
}

declare void @_cmsFree(%struct._cmsContext_struct*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsGDBAddPoint(i8*, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.cmsSpherical, align 8
  %4 = bitcast i8* %0 to %struct.cmsGDB*
  %5 = bitcast %struct.cmsSpherical* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #5
  %6 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %3, i64 0, i32 0
  %7 = bitcast %struct.cmsSpherical* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -1, i64 24, i1 false)
  %8 = call fastcc %struct.cmsGDBPoint* @GetPoint(%struct.cmsGDB* %4, %struct.cmsCIELab* %1, %struct.cmsSpherical* nonnull %3)
  %9 = icmp eq %struct.cmsGDBPoint* %8, null
  br i1 %9, label %25, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %8, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %10
  store i32 1, i32* %11, align 8
  %15 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %8, i64 0, i32 1
  %16 = bitcast %struct.cmsSpherical* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* nonnull align 8 %5, i64 24, i1 false)
  br label %25

17:                                               ; preds = %10
  %18 = load double, double* %6, align 8
  %19 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %8, i64 0, i32 1
  %20 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %19, i64 0, i32 0
  %21 = load double, double* %20, align 8
  %22 = fcmp ogt double %18, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %17
  store i32 1, i32* %11, align 8
  %24 = bitcast %struct.cmsSpherical* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* nonnull align 8 %5, i64 24, i1 false)
  br label %25

25:                                               ; preds = %14, %23, %17, %2
  %26 = phi i32 [ 0, %2 ], [ 1, %17 ], [ 1, %23 ], [ 1, %14 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #5
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.cmsGDBPoint* @GetPoint(%struct.cmsGDB* readonly, %struct.cmsCIELab* nocapture readonly, %struct.cmsSpherical* nocapture) unnamed_addr #0 {
  %4 = alloca %struct.cmsVEC3, align 8
  %5 = bitcast %struct.cmsVEC3* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #5
  %6 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %4, i64 0, i32 0, i64 0
  %7 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %4, i64 0, i32 0, i64 1
  %8 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 0
  %9 = bitcast %struct.cmsVEC3* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -1, i64 24, i1 false)
  %10 = load double, double* %8, align 8
  %11 = fadd double %10, -5.000000e+01
  %12 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 1
  %13 = load double, double* %12, align 8
  %14 = getelementptr inbounds %struct.cmsCIELab, %struct.cmsCIELab* %1, i64 0, i32 2
  %15 = load double, double* %14, align 8
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %4, double %11, double %13, double %15) #5
  %16 = load double, double* %6, align 8
  %17 = bitcast double* %7 to <2 x double>*
  %18 = load <2 x double>, <2 x double>* %17, align 8
  %19 = fmul double %16, %16
  %20 = fmul <2 x double> %18, %18
  %21 = extractelement <2 x double> %20, i32 0
  %22 = fadd double %19, %21
  %23 = extractelement <2 x double> %20, i32 1
  %24 = fadd double %22, %23
  %25 = call double @sqrt(double %24) #5
  %26 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %2, i64 0, i32 0
  store double %25, double* %26, align 8
  %27 = fcmp oeq double %25, 0.000000e+00
  br i1 %27, label %28, label %31

28:                                               ; preds = %3
  %29 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %2, i64 0, i32 1
  %30 = bitcast double* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #5
  br label %67

31:                                               ; preds = %3
  %32 = extractelement <2 x double> %18, i32 1
  %33 = fcmp oeq double %32, 0.000000e+00
  %34 = extractelement <2 x double> %18, i32 0
  %35 = fcmp oeq double %34, 0.000000e+00
  %36 = and i1 %35, %33
  br i1 %36, label %46, label %37

37:                                               ; preds = %31
  %38 = call double @atan2(double %34, double %32) #5
  %39 = fmul double %38, 1.800000e+02
  %40 = fdiv double %39, 0x400921FB54442D18
  %41 = fcmp olt double %40, 0.000000e+00
  br i1 %41, label %42, label %46

42:                                               ; preds = %37, %42
  %43 = phi double [ %44, %42 ], [ %40, %37 ]
  %44 = fadd double %43, 3.600000e+02
  %45 = fcmp olt double %44, 0.000000e+00
  br i1 %45, label %42, label %46

46:                                               ; preds = %42, %37, %31
  %47 = phi double [ 0.000000e+00, %31 ], [ %40, %37 ], [ %44, %42 ]
  %48 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %2, i64 0, i32 1
  store double %47, double* %48, align 8
  %49 = fadd double %21, %23
  %50 = call double @sqrt(double %49) #5
  %51 = fcmp oeq double %16, 0.000000e+00
  %52 = fcmp oeq double %50, 0.000000e+00
  %53 = and i1 %51, %52
  br i1 %53, label %63, label %54

54:                                               ; preds = %46
  %55 = call double @atan2(double %50, double %16) #5
  %56 = fmul double %55, 1.800000e+02
  %57 = fdiv double %56, 0x400921FB54442D18
  %58 = fcmp olt double %57, 0.000000e+00
  br i1 %58, label %59, label %63

59:                                               ; preds = %54, %59
  %60 = phi double [ %61, %59 ], [ %57, %54 ]
  %61 = fadd double %60, 3.600000e+02
  %62 = fcmp olt double %61, 0.000000e+00
  br i1 %62, label %59, label %63

63:                                               ; preds = %59, %54, %46
  %64 = phi double [ 0.000000e+00, %46 ], [ %57, %54 ], [ %61, %59 ]
  %65 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %2, i64 0, i32 2
  store double %64, double* %65, align 8
  %66 = load double, double* %26, align 8
  br label %67

67:                                               ; preds = %28, %63
  %68 = phi double [ 0.000000e+00, %28 ], [ %64, %63 ]
  %69 = phi double [ %25, %28 ], [ %66, %63 ]
  %70 = fcmp olt double %69, 0.000000e+00
  br i1 %70, label %77, label %71

71:                                               ; preds = %67
  %72 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %2, i64 0, i32 1
  %73 = load double, double* %72, align 8
  %74 = fcmp olt double %73, 0.000000e+00
  %75 = fcmp olt double %68, 0.000000e+00
  %76 = or i1 %74, %75
  br i1 %76, label %77, label %80

77:                                               ; preds = %71, %67
  %78 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 0
  %79 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %78, align 8
  call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %79, i32 2, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0)) #5
  br label %102

80:                                               ; preds = %71
  %81 = fmul double %73, 1.600000e+01
  %82 = fdiv double %81, 3.600000e+02
  %83 = call double @llvm.floor.f64(double %82) #5
  %84 = fptosi double %83 to i32
  %85 = fmul double %68, 1.600000e+01
  %86 = fdiv double %85, 1.800000e+02
  %87 = call double @llvm.floor.f64(double %86) #5
  %88 = fptosi double %87 to i32
  %89 = icmp slt i32 %84, 15
  %90 = select i1 %89, i32 %84, i32 15
  %91 = icmp slt i32 %88, 15
  %92 = select i1 %91, i32 %88, i32 15
  %93 = or i32 %92, %90
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %80
  %96 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 0
  %97 = load %struct._cmsContext_struct*, %struct._cmsContext_struct** %96, align 8
  call void (%struct._cmsContext_struct*, i32, i8*, ...) @cmsSignalError(%struct._cmsContext_struct* %97, i32 2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #5
  br label %102

98:                                               ; preds = %80
  %99 = sext i32 %92 to i64
  %100 = sext i32 %90 to i64
  %101 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 1, i64 %99, i64 %100
  br label %102

102:                                              ; preds = %98, %95, %77
  %103 = phi %struct.cmsGDBPoint* [ null, %77 ], [ null, %95 ], [ %101, %98 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #5
  ret %struct.cmsGDBPoint* %103
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsGDBCheckPoint(i8* readonly, %struct.cmsCIELab* nocapture readonly) local_unnamed_addr #0 {
  %3 = alloca %struct.cmsSpherical, align 8
  %4 = bitcast i8* %0 to %struct.cmsGDB*
  %5 = bitcast %struct.cmsSpherical* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #5
  %6 = getelementptr inbounds %struct.cmsSpherical, %struct.cmsSpherical* %3, i64 0, i32 0
  %7 = bitcast %struct.cmsSpherical* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -1, i64 24, i1 false)
  %8 = call fastcc %struct.cmsGDBPoint* @GetPoint(%struct.cmsGDB* %4, %struct.cmsCIELab* %1, %struct.cmsSpherical* nonnull %3)
  %9 = icmp eq %struct.cmsGDBPoint* %8, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %8, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %10
  %15 = load double, double* %6, align 8
  %16 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %8, i64 0, i32 1, i32 0
  %17 = load double, double* %16, align 8
  %18 = fcmp ole double %15, %17
  %19 = zext i1 %18 to i32
  br label %20

20:                                               ; preds = %10, %2, %14
  %21 = phi i32 [ %19, %14 ], [ 0, %2 ], [ 0, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #5
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @cmsGDBCompute(i8*, i32) local_unnamed_addr #0 {
  %3 = bitcast i8* %0 to %struct.cmsGDB*
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 0, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 1, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 2, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 3, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 4, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 5, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 6, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 7, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 8, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 9, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 10, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 11, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 12, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 13, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 14, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 15, i32 0)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 0, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 1, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 2, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 3, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 4, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 5, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 6, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 7, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 8, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 9, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 10, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 11, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 12, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 13, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 14, i32 15)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 15, i32 15)
  br label %4

4:                                                ; preds = %4, %2
  %5 = phi i32 [ %6, %4 ], [ 1, %2 ]
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 0, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 1, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 2, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 3, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 4, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 5, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 6, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 7, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 8, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 9, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 10, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 11, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 12, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 13, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 14, i32 %5)
  tail call fastcc void @InterpolateMissingSector(%struct.cmsGDB* %3, i32 15, i32 %5)
  %6 = add nuw nsw i32 %5, 1
  %7 = icmp eq i32 %6, 16
  br i1 %7, label %8, label %4

8:                                                ; preds = %4
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @InterpolateMissingSector(%struct.cmsGDB*, i32, i32) unnamed_addr #0 {
  %4 = alloca %struct.cmsVEC3, align 8
  %5 = alloca %struct.cmsVEC3, align 8
  %6 = alloca %struct.cmsLine, align 8
  %7 = alloca [25 x %struct.cmsGDBPoint*], align 16
  %8 = alloca %struct.cmsLine, align 8
  %9 = bitcast %struct.cmsVEC3* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #5
  %10 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %5, i64 0, i32 0, i64 0
  %11 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %5, i64 0, i32 0, i64 1
  %12 = getelementptr inbounds %struct.cmsVEC3, %struct.cmsVEC3* %5, i64 0, i32 0, i64 2
  %13 = bitcast %struct.cmsLine* %6 to i8*
  %14 = bitcast %struct.cmsVEC3* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -1, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %13) #5
  %15 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %6, i64 0, i32 0, i32 0, i64 0
  %16 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %6, i64 0, i32 0, i32 0, i64 1
  %17 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %6, i64 0, i32 1, i32 0, i64 0
  %18 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %6, i64 0, i32 1, i32 0, i64 1
  %19 = bitcast [25 x %struct.cmsGDBPoint*]* %7 to i8*
  %20 = bitcast %struct.cmsLine* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %19) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 200, i1 false)
  %21 = bitcast %struct.cmsLine* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %21) #5
  %22 = sext i32 %2 to i64
  %23 = sext i32 %1 to i64
  %24 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 1, i64 %22, i64 %23, i32 0
  %25 = bitcast %struct.cmsLine* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -1, i64 48, i1 false)
  %26 = load i32, i32* %24, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %307

28:                                               ; preds = %3, %55
  %29 = phi i64 [ %57, %55 ], [ 0, %3 ]
  %30 = phi i32 [ %56, %55 ], [ 0, %3 ]
  %31 = getelementptr inbounds [24 x %struct._spiral], [24 x %struct._spiral]* @Spiral, i64 0, i64 %29, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = add nsw i32 %32, %1
  %34 = getelementptr inbounds [24 x %struct._spiral], [24 x %struct._spiral]* @Spiral, i64 0, i64 %29, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = add nsw i32 %35, %2
  %37 = srem i32 %33, 16
  %38 = srem i32 %36, 16
  %39 = icmp slt i32 %37, 0
  %40 = add nsw i32 %37, 16
  %41 = select i1 %39, i32 %40, i32 %37
  %42 = icmp slt i32 %38, 0
  %43 = add nsw i32 %38, 16
  %44 = select i1 %42, i32 %43, i32 %38
  %45 = sext i32 %44 to i64
  %46 = sext i32 %41 to i64
  %47 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 1, i64 %45, i64 %46
  %48 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %47, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %55, label %51

51:                                               ; preds = %28
  %52 = add nsw i32 %30, 1
  %53 = sext i32 %30 to i64
  %54 = getelementptr inbounds [25 x %struct.cmsGDBPoint*], [25 x %struct.cmsGDBPoint*]* %7, i64 0, i64 %53
  store %struct.cmsGDBPoint* %47, %struct.cmsGDBPoint** %54, align 8
  br label %55

55:                                               ; preds = %51, %28
  %56 = phi i32 [ %52, %51 ], [ %30, %28 ]
  %57 = add nuw nsw i64 %29, 1
  %58 = icmp eq i64 %57, 24
  br i1 %58, label %59, label %28

59:                                               ; preds = %55
  %60 = sitofp i32 %1 to double
  %61 = fadd double %60, 5.000000e-01
  %62 = fmul double %61, 3.600000e+02
  %63 = fmul double %62, 6.250000e-02
  %64 = sitofp i32 %2 to double
  %65 = fadd double %64, 5.000000e-01
  %66 = fmul double %65, 1.800000e+02
  %67 = fmul double %66, 6.250000e-02
  %68 = fmul double %63, 0x400921FB54442D18
  %69 = fdiv double %68, 1.800000e+02
  %70 = tail call double @sin(double %69) #5
  %71 = tail call double @cos(double %69) #5
  %72 = fmul double %67, 0x400921FB54442D18
  %73 = fdiv double %72, 1.800000e+02
  %74 = tail call double @sin(double %73) #5
  %75 = tail call double @cos(double %73) #5
  %76 = fmul double %74, 5.000000e+01
  %77 = fmul double %70, %76
  %78 = fmul double %71, %76
  %79 = fmul double %75, 5.000000e+01
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %5, double 5.000000e+01, double 0.000000e+00, double 0.000000e+00) #5
  %80 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %6, i64 0, i32 0
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %80, double %79, double %77, double %78) #5
  %81 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %6, i64 0, i32 1
  %82 = load double, double* %10, align 8
  %83 = fsub double %82, %79
  %84 = load double, double* %11, align 8
  %85 = fsub double %84, %77
  %86 = load double, double* %12, align 8
  %87 = fsub double %86, %78
  call void @_cmsVEC3init(%struct.cmsVEC3* %81, double %83, double %85, double %87) #5
  %88 = icmp sgt i32 %56, 0
  br i1 %88, label %89, label %300

89:                                               ; preds = %59
  %90 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %8, i64 0, i32 0
  %91 = getelementptr inbounds %struct.cmsLine, %struct.cmsLine* %8, i64 0, i32 1
  %92 = bitcast %struct.cmsVEC3* %4 to i8*
  %93 = fmul double %64, 1.800000e+02
  %94 = fmul double %93, 6.250000e-02
  %95 = add nsw i32 %2, 1
  %96 = sitofp i32 %95 to double
  %97 = fmul double %96, 1.800000e+02
  %98 = fmul double %97, 6.250000e-02
  %99 = fmul double %60, 3.600000e+02
  %100 = fmul double %99, 6.250000e-02
  %101 = add nsw i32 %1, 1
  %102 = sitofp i32 %101 to double
  %103 = fmul double %102, 3.600000e+02
  %104 = fmul double %103, 6.250000e-02
  %105 = sext i32 %56 to i64
  %106 = zext i32 %56 to i64
  %107 = bitcast double* %16 to <2 x double>*
  %108 = bitcast double* %18 to <2 x double>*
  br label %115

109:                                              ; preds = %283, %115
  %110 = phi double [ %120, %115 ], [ %295, %283 ]
  %111 = phi double [ %119, %115 ], [ %296, %283 ]
  %112 = phi double [ %118, %115 ], [ %297, %283 ]
  %113 = add nuw nsw i64 %117, 1
  %114 = icmp eq i64 %121, %106
  br i1 %114, label %300, label %115

115:                                              ; preds = %109, %89
  %116 = phi i64 [ 0, %89 ], [ %121, %109 ]
  %117 = phi i64 [ 1, %89 ], [ %113, %109 ]
  %118 = phi double [ 0.000000e+00, %89 ], [ %112, %109 ]
  %119 = phi double [ 0.000000e+00, %89 ], [ %111, %109 ]
  %120 = phi double [ 0.000000e+00, %89 ], [ %110, %109 ]
  %121 = add nuw nsw i64 %116, 1
  %122 = icmp slt i64 %121, %105
  br i1 %122, label %123, label %109

123:                                              ; preds = %115
  %124 = getelementptr inbounds [25 x %struct.cmsGDBPoint*], [25 x %struct.cmsGDBPoint*]* %7, i64 0, i64 %116
  %125 = load %struct.cmsGDBPoint*, %struct.cmsGDBPoint** %124, align 8
  %126 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %125, i64 0, i32 1, i32 1
  %127 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %125, i64 0, i32 1, i32 2
  %128 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %125, i64 0, i32 1, i32 0
  br label %129

129:                                              ; preds = %283, %123
  %130 = phi i64 [ %117, %123 ], [ %298, %283 ]
  %131 = phi double [ %118, %123 ], [ %297, %283 ]
  %132 = phi double [ %119, %123 ], [ %296, %283 ]
  %133 = phi double [ %120, %123 ], [ %295, %283 ]
  %134 = load double, double* %126, align 8
  %135 = fmul double %134, 0x400921FB54442D18
  %136 = fdiv double %135, 1.800000e+02
  %137 = call double @sin(double %136) #5
  %138 = load double, double* %126, align 8
  %139 = fmul double %138, 0x400921FB54442D18
  %140 = fdiv double %139, 1.800000e+02
  %141 = call double @cos(double %140) #5
  %142 = load double, double* %127, align 8
  %143 = fmul double %142, 0x400921FB54442D18
  %144 = fdiv double %143, 1.800000e+02
  %145 = call double @sin(double %144) #5
  %146 = load double, double* %127, align 8
  %147 = fmul double %146, 0x400921FB54442D18
  %148 = fdiv double %147, 1.800000e+02
  %149 = call double @cos(double %148) #5
  %150 = load double, double* %128, align 8
  %151 = fmul double %145, %150
  %152 = fmul double %137, %151
  %153 = fmul double %141, %151
  %154 = fmul double %149, %150
  %155 = getelementptr inbounds [25 x %struct.cmsGDBPoint*], [25 x %struct.cmsGDBPoint*]* %7, i64 0, i64 %130
  %156 = load %struct.cmsGDBPoint*, %struct.cmsGDBPoint** %155, align 8
  %157 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %156, i64 0, i32 1, i32 1
  %158 = load double, double* %157, align 8
  %159 = fmul double %158, 0x400921FB54442D18
  %160 = fdiv double %159, 1.800000e+02
  %161 = call double @sin(double %160) #5
  %162 = load double, double* %157, align 8
  %163 = fmul double %162, 0x400921FB54442D18
  %164 = fdiv double %163, 1.800000e+02
  %165 = call double @cos(double %164) #5
  %166 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %156, i64 0, i32 1, i32 2
  %167 = load double, double* %166, align 8
  %168 = fmul double %167, 0x400921FB54442D18
  %169 = fdiv double %168, 1.800000e+02
  %170 = call double @sin(double %169) #5
  %171 = load double, double* %166, align 8
  %172 = fmul double %171, 0x400921FB54442D18
  %173 = fdiv double %172, 1.800000e+02
  %174 = call double @cos(double %173) #5
  %175 = getelementptr inbounds %struct.cmsGDBPoint, %struct.cmsGDBPoint* %156, i64 0, i32 1, i32 0
  %176 = load double, double* %175, align 8
  %177 = fmul double %170, %176
  %178 = fmul double %161, %177
  %179 = fmul double %165, %177
  %180 = fmul double %174, %176
  call void @_cmsVEC3init(%struct.cmsVEC3* nonnull %90, double %154, double %152, double %153) #5
  %181 = fsub double %180, %154
  %182 = fsub double %178, %152
  %183 = fsub double %179, %153
  call void @_cmsVEC3init(%struct.cmsVEC3* %91, double %181, double %182, double %183) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %92) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %92, i8 -1, i64 24, i1 false) #5
  call void @_cmsVEC3minus(%struct.cmsVEC3* nonnull %4, %struct.cmsVEC3* nonnull %80, %struct.cmsVEC3* nonnull %90) #5
  %184 = call double @_cmsVEC3dot(%struct.cmsVEC3* %81, %struct.cmsVEC3* %81) #5
  %185 = call double @_cmsVEC3dot(%struct.cmsVEC3* %81, %struct.cmsVEC3* %91) #5
  %186 = call double @_cmsVEC3dot(%struct.cmsVEC3* %91, %struct.cmsVEC3* %91) #5
  %187 = call double @_cmsVEC3dot(%struct.cmsVEC3* %81, %struct.cmsVEC3* nonnull %4) #5
  %188 = call double @_cmsVEC3dot(%struct.cmsVEC3* %91, %struct.cmsVEC3* nonnull %4) #5
  %189 = fmul double %184, %186
  %190 = fmul double %185, %185
  %191 = fsub double %189, %190
  %192 = fcmp olt double %191, 1.000000e-04
  br i1 %192, label %205, label %193

193:                                              ; preds = %129
  %194 = fmul double %185, %188
  %195 = fmul double %186, %187
  %196 = fsub double %194, %195
  %197 = fcmp olt double %196, 0.000000e+00
  br i1 %197, label %205, label %198

198:                                              ; preds = %193
  %199 = fmul double %184, %188
  %200 = fmul double %185, %187
  %201 = fsub double %199, %200
  %202 = fcmp ogt double %196, %191
  br i1 %202, label %203, label %205

203:                                              ; preds = %198
  %204 = fadd double %185, %188
  br label %205

205:                                              ; preds = %203, %198, %193, %129
  %206 = phi double [ %191, %203 ], [ %196, %198 ], [ 0.000000e+00, %129 ], [ 0.000000e+00, %193 ]
  %207 = phi double [ %191, %203 ], [ %191, %198 ], [ 1.000000e+00, %129 ], [ %191, %193 ]
  %208 = phi double [ %204, %203 ], [ %201, %198 ], [ %188, %129 ], [ %188, %193 ]
  %209 = phi double [ %186, %203 ], [ %191, %198 ], [ %186, %129 ], [ %186, %193 ]
  %210 = fcmp olt double %208, 0.000000e+00
  br i1 %210, label %211, label %218

211:                                              ; preds = %205
  %212 = fsub double -0.000000e+00, %187
  %213 = fcmp ogt double %187, 0.000000e+00
  br i1 %213, label %227, label %214

214:                                              ; preds = %211
  %215 = fcmp olt double %184, %212
  %216 = select i1 %215, double %207, double %212
  %217 = select i1 %215, double %207, double %184
  br label %227

218:                                              ; preds = %205
  %219 = fcmp ogt double %208, %209
  br i1 %219, label %220, label %227

220:                                              ; preds = %218
  %221 = fsub double %185, %187
  %222 = fcmp olt double %221, 0.000000e+00
  br i1 %222, label %227, label %223

223:                                              ; preds = %220
  %224 = fcmp ogt double %221, %184
  %225 = select i1 %224, double %207, double %221
  %226 = select i1 %224, double %207, double %184
  br label %227

227:                                              ; preds = %211, %214, %218, %220, %223
  %228 = phi double [ %206, %218 ], [ 0.000000e+00, %211 ], [ %216, %214 ], [ 0.000000e+00, %220 ], [ %225, %223 ]
  %229 = phi double [ %207, %218 ], [ %207, %211 ], [ %217, %214 ], [ %207, %220 ], [ %226, %223 ]
  %230 = call double @llvm.fabs.f64(double %228) #5
  %231 = fcmp olt double %230, 1.000000e-04
  %232 = fdiv double %228, %229
  %233 = select i1 %231, double 0.000000e+00, double %232
  %234 = load double, double* %15, align 8
  %235 = load double, double* %17, align 8
  %236 = fmul double %235, %233
  %237 = fadd double %234, %236
  %238 = load <2 x double>, <2 x double>* %107, align 8
  %239 = load <2 x double>, <2 x double>* %108, align 8
  %240 = insertelement <2 x double> undef, double %233, i32 0
  %241 = shufflevector <2 x double> %240, <2 x double> undef, <2 x i32> zeroinitializer
  %242 = fmul <2 x double> %241, %239
  %243 = fadd <2 x double> %238, %242
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %92) #5
  %244 = fmul double %237, %237
  %245 = extractelement <2 x double> %243, i32 0
  %246 = fmul double %245, %245
  %247 = fadd double %244, %246
  %248 = extractelement <2 x double> %243, i32 1
  %249 = fmul double %248, %248
  %250 = fadd double %247, %249
  %251 = call double @sqrt(double %250) #5
  %252 = fcmp oeq double %251, 0.000000e+00
  br i1 %252, label %283, label %253

253:                                              ; preds = %227
  %254 = fcmp oeq <2 x double> %243, zeroinitializer
  %255 = extractelement <2 x i1> %254, i32 0
  %256 = extractelement <2 x i1> %254, i32 1
  %257 = and i1 %255, %256
  br i1 %257, label %267, label %258

258:                                              ; preds = %253
  %259 = call double @atan2(double %245, double %248) #5
  %260 = fmul double %259, 1.800000e+02
  %261 = fdiv double %260, 0x400921FB54442D18
  %262 = fcmp olt double %261, 0.000000e+00
  br i1 %262, label %263, label %267

263:                                              ; preds = %258, %263
  %264 = phi double [ %265, %263 ], [ %261, %258 ]
  %265 = fadd double %264, 3.600000e+02
  %266 = fcmp olt double %265, 0.000000e+00
  br i1 %266, label %263, label %267

267:                                              ; preds = %263, %258, %253
  %268 = phi double [ 0.000000e+00, %253 ], [ %261, %258 ], [ %265, %263 ]
  %269 = fadd double %246, %249
  %270 = call double @sqrt(double %269) #5
  %271 = fcmp oeq double %237, 0.000000e+00
  %272 = fcmp oeq double %270, 0.000000e+00
  %273 = and i1 %271, %272
  br i1 %273, label %283, label %274

274:                                              ; preds = %267
  %275 = call double @atan2(double %270, double %237) #5
  %276 = fmul double %275, 1.800000e+02
  %277 = fdiv double %276, 0x400921FB54442D18
  %278 = fcmp olt double %277, 0.000000e+00
  br i1 %278, label %279, label %283

279:                                              ; preds = %274, %279
  %280 = phi double [ %281, %279 ], [ %277, %274 ]
  %281 = fadd double %280, 3.600000e+02
  %282 = fcmp olt double %281, 0.000000e+00
  br i1 %282, label %279, label %283

283:                                              ; preds = %279, %267, %274, %227
  %284 = phi double [ 0.000000e+00, %227 ], [ %268, %274 ], [ %268, %267 ], [ %268, %279 ]
  %285 = phi double [ 0.000000e+00, %227 ], [ %277, %274 ], [ 0.000000e+00, %267 ], [ %281, %279 ]
  %286 = fcmp ule double %251, %131
  %287 = fcmp ult double %285, %94
  %288 = or i1 %286, %287
  %289 = fcmp ugt double %285, %98
  %290 = or i1 %288, %289
  %291 = fcmp ult double %284, %100
  %292 = or i1 %290, %291
  %293 = fcmp ugt double %284, %104
  %294 = or i1 %292, %293
  %295 = select i1 %294, double %133, double %285
  %296 = select i1 %294, double %132, double %284
  %297 = select i1 %294, double %131, double %251
  %298 = add nuw nsw i64 %130, 1
  %299 = icmp eq i64 %298, %106
  br i1 %299, label %109, label %129

300:                                              ; preds = %109, %59
  %301 = phi double [ 0.000000e+00, %59 ], [ %110, %109 ]
  %302 = phi double [ 0.000000e+00, %59 ], [ %111, %109 ]
  %303 = phi double [ 0.000000e+00, %59 ], [ %112, %109 ]
  %304 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 1, i64 %22, i64 %23, i32 1, i32 0
  store double %303, double* %304, align 8
  %305 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 1, i64 %22, i64 %23, i32 1, i32 1
  store double %302, double* %305, align 8
  %306 = getelementptr inbounds %struct.cmsGDB, %struct.cmsGDB* %0, i64 0, i32 1, i64 %22, i64 %23, i32 1, i32 2
  store double %301, double* %306, align 8
  store i32 2, i32* %24, align 8
  br label %307

307:                                              ; preds = %3, %300
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #5
  ret void
}

declare void @_cmsVEC3init(%struct.cmsVEC3*, double, double, double) local_unnamed_addr #2

declare void @cmsSignalError(%struct._cmsContext_struct*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @atan2(double, double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sin(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @cos(double) local_unnamed_addr #3

declare void @_cmsVEC3minus(%struct.cmsVEC3*, %struct.cmsVEC3*, %struct.cmsVEC3*) local_unnamed_addr #2

declare double @_cmsVEC3dot(%struct.cmsVEC3*, %struct.cmsVEC3*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
