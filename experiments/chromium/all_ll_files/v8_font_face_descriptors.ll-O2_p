; ModuleID = 'gen/third_party/blink/renderer/bindings/core/v8/v8_font_face_descriptors.cc'
source_filename = "gen/third_party/blink/renderer/bindings/core/v8/v8_font_face_descriptors.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.76", i32, [4 x i8], %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.212", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.228", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.240", %"class.std::__1::unique_ptr.246", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.253", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.85", %"class.std::__1::unique_ptr.91", %"class.std::__1::unique_ptr.97", %"class.std::__1::unique_ptr.103", %"class.std::__1::unique_ptr.109", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.155", %"class.std::__1::unique_ptr.162", %"class.std::__1::unique_ptr.169", %"class.std::__1::unique_ptr.192", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.103" = type { %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.109" = type { %"class.std::__1::__compressed_pair.110" }
%"class.std::__1::__compressed_pair.110" = type { %"struct.std::__1::__compressed_pair_elem.111" }
%"struct.std::__1::__compressed_pair_elem.111" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, {}* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.112" = type { %"struct.std::__1::__atomic_base.113" }
%"struct.std::__1::__atomic_base.113" = type { %"struct.std::__1::__atomic_base.114" }
%"struct.std::__1::__atomic_base.114" = type { %"struct.std::__1::__cxx_atomic_impl.115" }
%"struct.std::__1::__cxx_atomic_impl.115" = type { %"struct.std::__1::__cxx_atomic_base_impl.116" }
%"struct.std::__1::__cxx_atomic_base_impl.116" = type { i64 }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::Worklist.151"* }
%"class.blink::Worklist.151" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.155" = type { %"class.std::__1::__compressed_pair.156" }
%"class.std::__1::__compressed_pair.156" = type { %"struct.std::__1::__compressed_pair_elem.157" }
%"struct.std::__1::__compressed_pair_elem.157" = type { %"class.blink::Worklist.158"* }
%"class.blink::Worklist.158" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::Worklist.165"* }
%"class.blink::Worklist.165" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.112" }
%"class.std::__1::unique_ptr.169" = type { %"class.std::__1::__compressed_pair.170" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.172", %"class.std::__1::__compressed_pair.179", %"class.std::__1::__compressed_pair.184", %"class.std::__1::__compressed_pair.186", [4 x i8] }>
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174", %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { i64 }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { float }
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.195", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.204" }
%"class.WTF::Vector.204" = type { %"class.WTF::VectorBuffer.205" }
%"class.WTF::VectorBuffer.205" = type { %"class.WTF::VectorBufferBase.206" }
%"class.WTF::VectorBufferBase.206" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.220" }
%"class.WTF::VectorBuffer.220" = type { %"class.WTF::VectorBufferBase.221" }
%"class.WTF::VectorBufferBase.221" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.234" }
%"class.std::__1::unique_ptr.234" = type { %"class.std::__1::__compressed_pair.235" }
%"class.std::__1::__compressed_pair.235" = type { %"struct.std::__1::__compressed_pair_elem.236" }
%"struct.std::__1::__compressed_pair_elem.236" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.137"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.144"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.151"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.284" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.240" = type { %"class.std::__1::__compressed_pair.241" }
%"class.std::__1::__compressed_pair.241" = type { %"struct.std::__1::__compressed_pair_elem.242" }
%"struct.std::__1::__compressed_pair_elem.242" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.246" = type { %"class.std::__1::__compressed_pair.247" }
%"class.std::__1::__compressed_pair.247" = type { %"struct.std::__1::__compressed_pair_elem.248" }
%"struct.std::__1::__compressed_pair_elem.248" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.252 }
%class.scoped_refptr.252 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.253" = type { %"struct.std::__1::__atomic_base.254" }
%"struct.std::__1::__atomic_base.254" = type { %"struct.std::__1::__cxx_atomic_impl.255" }
%"struct.std::__1::__cxx_atomic_impl.255" = type { %"struct.std::__1::__cxx_atomic_base_impl.256" }
%"struct.std::__1::__cxx_atomic_base_impl.256" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.v8::Value" = type { i8 }
%"class.blink::FontFaceDescriptors" = type { %"class.blink::IDLDictionaryBase", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"class.v8::internal::Isolate" = type opaque
%"class.blink::V8StringResource" = type { %"class.v8::Local", i32, %"class.WTF::String", %"class.WTF::StringView::StackBackingStore" }
%"class.v8::Local" = type { %"class.v8::Value"* }
%"class.WTF::StringView::StackBackingStore" = type { [64 x i16], %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.v8::Object" = type { i8 }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap", %"class.WTF::HashMap", %"class.WTF::HashMap.23", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.70", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.257", %"class.std::__1::unique_ptr.262", %"class.blink::Persistent.268", %"class.blink::Persistent.272", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr.7", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17", i32, i32 }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.WTF::HashMap.23" = type { %"class.WTF::HashTable.24" }
%"class.WTF::HashTable.24" = type <{ %"struct.WTF::KeyValuePair.27"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.27" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.36", %class.scoped_refptr }
%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.31", i8* }
%"class.WTF::HashMap.31" = type { %"class.WTF::HashTable.32" }
%"class.WTF::HashTable.32" = type <{ %"struct.WTF::KeyValuePair.35"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.35" = type { %"class.WTF::StringImpl"*, i64 }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.36" = type { %"class.v8::PersistentValueMapBase.37" }
%"class.v8::PersistentValueMapBase.37" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.38", i8* }
%"class.WTF::HashMap.38" = type { %"class.WTF::HashTable.39" }
%"class.WTF::HashTable.39" = type <{ %"struct.WTF::KeyValuePair.42"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.42" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted", %"class.WTF::String", %"class.std::__1::unique_ptr.43" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.54", %"class.WTF::Vector.60", i8, i32 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.WTF::Vector"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.60" = type { %"class.WTF::VectorBuffer.61" }
%"class.WTF::VectorBuffer.61" = type { %"class.WTF::VectorBufferBase", [32 x i8] }
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.291, %"class.blink::Member.310", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.291 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted.292", i32, i32, %"class.blink::Persistent.294" }
%"class.WTF::RefCounted.292" = type { %"class.base::RefCounted.293" }
%"class.base::RefCounted.293" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.294" = type { %"class.blink::PersistentBase.295" }
%"class.blink::PersistentBase.295" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.300" }
%"class.WTF::HashMap.300" = type { %"class.WTF::HashTable.301" }
%"class.WTF::HashTable.301" = type <{ %"struct.WTF::KeyValuePair.303"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.303" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference.307" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase.304" }
%"class.blink::MemberBase.304" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.307" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.307" = type { %"class.v8::TracedReference.308" }
%"class.v8::TracedReference.308" = type { %"class.v8::BasicTracedReference.309" }
%"class.v8::BasicTracedReference.309" = type { %"class.v8::TracedReferenceBase" }
%"class.blink::Member.310" = type { %"class.blink::MemberBase.311" }
%"class.blink::MemberBase.311" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.WTF::Vector.257" = type { %"class.WTF::VectorBuffer.258" }
%"class.WTF::VectorBuffer.258" = type { %"class.WTF::VectorBufferBase.259" }
%"class.WTF::VectorBufferBase.259" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.262" = type { %"class.std::__1::__compressed_pair.263" }
%"class.std::__1::__compressed_pair.263" = type { %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.268" = type { %"class.blink::PersistentBase.269" }
%"class.blink::PersistentBase.269" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.272" = type { %"class.blink::PersistentBase.273" }
%"class.blink::PersistentBase.273" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.278" }
%"class.WTF::Vector.278" = type { %"class.WTF::VectorBuffer.279" }
%"class.WTF::VectorBuffer.279" = type { %"class.WTF::VectorBufferBase.280" }
%"class.WTF::VectorBufferBase.280" = type { %"struct.std::__1::pair.281"*, i32, i32 }
%"struct.std::__1::pair.281" = type { %"class.blink::UntracedMember", %"class.blink::Member" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member" = type { %"class.blink::MemberBase.282" }
%"class.blink::MemberBase.282" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Eternal" = type { %"class.v8::Name"* }
%"class.v8::Name" = type { i8 }
%"class.base::span.312" = type { %"struct.base::internal::ExtentStorage", i8** }
%"struct.base::internal::ExtentStorage" = type { i64 }
%"class.v8::String" = type { i8 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.334" }
%"class.std::__1::__compressed_pair.334" = type { %"struct.std::__1::__compressed_pair_elem.335" }
%"struct.std::__1::__compressed_pair_elem.335" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.v8::Int32" = type { i8 }

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE = comdat any

$_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [30 x i8] c"cannot convert to dictionary.\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"U+0-10FFFF\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"100%\00", align 1
@_ZZN5blinkL32eternalV8FontFaceDescriptorsKeysEPN2v87IsolateEE5kKeys = internal constant [11 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i32 0, i32 0)], align 16
@.str.5 = private unnamed_addr constant [15 x i8] c"ascentOverride\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"descentOverride\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"display\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"featureSettings\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"lineGapOverride\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"sizeAdjust\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"stretch\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"style\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"unicodeRange\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"variant\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"weight\00", align 1
@.ref.tmp = private constant { i64, i8** } { i64 11, i8** getelementptr inbounds ([11 x i8*], [11 x i8*]* @_ZZN5blinkL32eternalV8FontFaceDescriptorsKeysEPN2v87IsolateEE5kKeys, i32 0, i32 0) }, align 8
@_ZN5blink26RuntimeEnabledFeaturesBase37is_css_font_face_size_adjust_enabled_E = external local_unnamed_addr global i8, align 1
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.17 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.18 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink21V8FontFaceDescriptors6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_19FontFaceDescriptorsERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::FontFaceDescriptors"* nocapture, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::TryCatch", align 8
  %6 = alloca %"class.blink::V8StringResource", align 8
  %7 = alloca %"class.blink::V8StringResource", align 8
  %8 = alloca %"class.blink::V8StringResource", align 8
  %9 = alloca %"class.blink::V8StringResource", align 8
  %10 = alloca %"class.blink::V8StringResource", align 8
  %11 = alloca %"class.blink::V8StringResource", align 8
  %12 = alloca %"class.blink::V8StringResource", align 8
  %13 = alloca %"class.blink::V8StringResource", align 8
  %14 = alloca %"class.blink::V8StringResource", align 8
  %15 = alloca %"class.blink::V8StringResource", align 8
  %16 = alloca %"class.blink::V8StringResource", align 8
  %17 = icmp eq %"class.v8::Value"* %1, null
  br i1 %17, label %1946, label %18

18:                                               ; preds = %4
  %19 = bitcast %"class.v8::Value"* %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, 3
  %22 = icmp eq i64 %21, 1
  br i1 %22, label %23, label %39

23:                                               ; preds = %18
  %24 = add i64 %20, -1
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = and i64 %20, -4294967296
  %28 = zext i32 %26 to i64
  %29 = or i64 %27, %28
  %30 = add i64 %29, 7
  %31 = inttoptr i64 %30 to i16*
  %32 = load i16, i16* %31, align 2
  %33 = icmp eq i16 %32, 67
  br i1 %33, label %34, label %39

34:                                               ; preds = %23
  %35 = add i64 %20, 23
  %36 = inttoptr i64 %35 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = ashr i32 %37, 1
  switch i32 %38, label %39 [
    i32 5, label %1946
    i32 3, label %1946
  ]

39:                                               ; preds = %34, %23, %18
  %40 = tail call zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"* nonnull %1) #7
  br i1 %40, label %42, label %41

41:                                               ; preds = %39
  tail call void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"* %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0)) #7
  br label %1946

42:                                               ; preds = %39
  %43 = bitcast %"class.v8::Value"* %1 to %"class.v8::Object"*
  %44 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %45 = add i64 %44, 8
  %46 = inttoptr i64 %45 to %"class.blink::V8PerIsolateData"**
  %47 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %46, align 8
  %48 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %47, i8* bitcast ([11 x i8*]* @_ZZN5blinkL32eternalV8FontFaceDescriptorsKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.312"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.312"*)) #7
  %49 = extractvalue { i64, %"class.v8::Eternal"* } %48, 1
  %50 = bitcast %"class.v8::TryCatch"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %50) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 48, i1 false)
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %5, %"class.v8::Isolate"* %0) #7
  %51 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %0) #7
  %52 = bitcast %"class.v8::Eternal"* %49 to %"class.v8::Value"**
  %53 = load %"class.v8::Value"*, %"class.v8::Value"** %52, align 8
  %54 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %53) #7
  %55 = icmp eq %"class.v8::Value"* %54, null
  br i1 %55, label %56, label %62

56:                                               ; preds = %42
  %57 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %58 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %59 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %58, align 8
  %60 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %59, i64 5
  %61 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %60, align 8
  call void %61(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %57) #7
  br label %1945

62:                                               ; preds = %42
  %63 = bitcast %"class.v8::Value"* %54 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = and i64 %64, 3
  %66 = icmp eq i64 %65, 1
  br i1 %66, label %67, label %84

67:                                               ; preds = %62
  %68 = add i64 %64, -1
  %69 = inttoptr i64 %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = and i64 %64, -4294967296
  %72 = zext i32 %70 to i64
  %73 = or i64 %71, %72
  %74 = add i64 %73, 7
  %75 = inttoptr i64 %74 to i16*
  %76 = load i16, i16* %75, align 2
  %77 = icmp eq i16 %76, 67
  br i1 %77, label %78, label %84

78:                                               ; preds = %67
  %79 = add i64 %64, 23
  %80 = inttoptr i64 %79 to i32*
  %81 = load i32, i32* %80, align 4
  %82 = and i32 %81, -2
  %83 = icmp eq i32 %82, 10
  br i1 %83, label %224, label %84

84:                                               ; preds = %67, %62, %78
  %85 = bitcast %"class.blink::V8StringResource"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %85) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %85, i8 -86, i64 152, i1 false)
  %86 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %54, %"class.v8::Value"** %86, align 8
  %87 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 1
  store i32 0, i32* %87, align 8
  %88 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %88, align 8
  %89 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1
  %90 = bitcast %"class.std::__1::unique_ptr"* %89 to i64*
  store i64 0, i64* %90, align 8
  %91 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %6, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %91, label %92, label %202

92:                                               ; preds = %84
  %93 = load %"class.v8::Value"*, %"class.v8::Value"** %86, align 8
  %94 = icmp eq %"class.v8::Value"* %93, null
  br i1 %94, label %95, label %119, !prof !2

95:                                               ; preds = %92
  %96 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %98, label %100

98:                                               ; preds = %95
  %99 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 1
  br label %144

100:                                              ; preds = %95
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = load atomic i32, i32* %101 monotonic, align 4
  %103 = and i32 %102, 2
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %105, label %117

105:                                              ; preds = %100
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i33
  %109 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %108, i33 1) #7
  %110 = extractvalue { i33, i1 } %109, 1
  %111 = extractvalue { i33, i1 } %109, 0
  %112 = icmp slt i33 %111, 0
  %113 = or i1 %110, %112
  br i1 %113, label %114, label %115, !prof !2

114:                                              ; preds = %105
  call void @llvm.trap() #7
  unreachable

115:                                              ; preds = %105
  %116 = trunc i33 %111 to i32
  store i32 %116, i32* %106, align 4
  br label %117

117:                                              ; preds = %100, %115
  %118 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 1
  br label %125

119:                                              ; preds = %92
  %120 = bitcast %"class.v8::Value"* %93 to %"class.v8::String"*
  %121 = load i32, i32* %87, align 8
  %122 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %120, i32 %121) #7
  %123 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 1
  %124 = icmp eq %"class.WTF::StringImpl"* %122, null
  br i1 %124, label %144, label %125

125:                                              ; preds = %117, %119
  %126 = phi %"class.WTF::String"* [ %118, %117 ], [ %123, %119 ]
  %127 = phi %"class.WTF::StringImpl"* [ %96, %117 ], [ %122, %119 ]
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %144

132:                                              ; preds = %125
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %127, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i33
  %136 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %135, i33 1) #7
  %137 = extractvalue { i33, i1 } %136, 1
  %138 = extractvalue { i33, i1 } %136, 0
  %139 = icmp slt i33 %138, 0
  %140 = or i1 %137, %139
  br i1 %140, label %141, label %142, !prof !2

141:                                              ; preds = %132
  call void @llvm.trap() #7
  unreachable

142:                                              ; preds = %132
  %143 = trunc i33 %138 to i32
  store i32 %143, i32* %133, align 4
  br label %144

144:                                              ; preds = %98, %142, %125, %119
  %145 = phi i1 [ false, %142 ], [ false, %125 ], [ true, %119 ], [ true, %98 ]
  %146 = phi %"class.WTF::String"* [ %126, %142 ], [ %126, %125 ], [ %123, %119 ], [ %99, %98 ]
  %147 = phi %"class.WTF::StringImpl"* [ %127, %142 ], [ %127, %125 ], [ null, %119 ], [ null, %98 ]
  %148 = ptrtoint %"class.WTF::StringImpl"* %147 to i64
  %149 = bitcast %"class.WTF::String"* %146 to i64*
  %150 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %146, i64 0, i32 0, i32 0
  %151 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %150, align 8
  store i64 %148, i64* %149, align 8
  %152 = icmp eq %"class.WTF::StringImpl"* %151, null
  br i1 %152, label %166, label %153

153:                                              ; preds = %144
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %151, i64 0, i32 0
  %159 = load i32, i32* %158, align 4
  br i1 %157, label %160, label %162

160:                                              ; preds = %153
  %161 = add i32 %159, -1
  store i32 %161, i32* %158, align 4
  br label %162

162:                                              ; preds = %160, %153
  %163 = phi i32 [ %161, %160 ], [ %159, %153 ]
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %166

165:                                              ; preds = %162
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %151) #7
  br label %166

166:                                              ; preds = %144, %162, %165
  br i1 %145, label %180, label %167

167:                                              ; preds = %166
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = load atomic i32, i32* %168 monotonic, align 4
  %170 = and i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  br i1 %171, label %174, label %176

174:                                              ; preds = %167
  %175 = add i32 %173, -1
  store i32 %175, i32* %172, align 4
  br label %176

176:                                              ; preds = %174, %167
  %177 = phi i32 [ %175, %174 ], [ %173, %167 ]
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %180

179:                                              ; preds = %176
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %147) #7
  br label %180

180:                                              ; preds = %166, %176, %179
  %181 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %182 = load i8*, i8** %181, align 8
  store i8* null, i8** %181, align 8
  %183 = icmp eq i8* %182, null
  br i1 %183, label %185, label %184

184:                                              ; preds = %180
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %182) #7
  br label %185

185:                                              ; preds = %184, %180
  %186 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %187 = icmp eq %"class.WTF::StringImpl"* %186, null
  br i1 %187, label %201, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %190 = load atomic i32, i32* %189 monotonic, align 4
  %191 = and i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %186, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  br i1 %192, label %195, label %197

195:                                              ; preds = %188
  %196 = add i32 %194, -1
  store i32 %196, i32* %193, align 4
  br label %197

197:                                              ; preds = %195, %188
  %198 = phi i32 [ %196, %195 ], [ %194, %188 ]
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %186) #7
  br label %201

201:                                              ; preds = %185, %197, %200
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %85) #7
  br label %224

202:                                              ; preds = %84
  %203 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %6, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %204 = load i8*, i8** %203, align 8
  store i8* null, i8** %203, align 8
  %205 = icmp eq i8* %204, null
  br i1 %205, label %207, label %206

206:                                              ; preds = %202
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %204) #7
  br label %207

207:                                              ; preds = %206, %202
  %208 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %88, align 8
  %209 = icmp eq %"class.WTF::StringImpl"* %208, null
  br i1 %209, label %223, label %210

210:                                              ; preds = %207
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = and i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %208, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  br i1 %214, label %217, label %219

217:                                              ; preds = %210
  %218 = add i32 %216, -1
  store i32 %218, i32* %215, align 4
  br label %219

219:                                              ; preds = %217, %210
  %220 = phi i32 [ %218, %217 ], [ %216, %210 ]
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %223

222:                                              ; preds = %219
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %208) #7
  br label %223

223:                                              ; preds = %207, %219, %222
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %85) #7
  br label %1945

224:                                              ; preds = %201, %78
  %225 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 1, i32 0
  %226 = bitcast %"class.v8::Name"** %225 to %"class.v8::Value"**
  %227 = load %"class.v8::Value"*, %"class.v8::Value"** %226, align 8
  %228 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %227) #7
  %229 = icmp eq %"class.v8::Value"* %228, null
  br i1 %229, label %230, label %236

230:                                              ; preds = %224
  %231 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %232 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %233 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %232, align 8
  %234 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %233, i64 5
  %235 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %234, align 8
  call void %235(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %231) #7
  br label %1945

236:                                              ; preds = %224
  %237 = bitcast %"class.v8::Value"* %228 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = and i64 %238, 3
  %240 = icmp eq i64 %239, 1
  br i1 %240, label %241, label %258

241:                                              ; preds = %236
  %242 = add i64 %238, -1
  %243 = inttoptr i64 %242 to i32*
  %244 = load i32, i32* %243, align 4
  %245 = and i64 %238, -4294967296
  %246 = zext i32 %244 to i64
  %247 = or i64 %245, %246
  %248 = add i64 %247, 7
  %249 = inttoptr i64 %248 to i16*
  %250 = load i16, i16* %249, align 2
  %251 = icmp eq i16 %250, 67
  br i1 %251, label %252, label %258

252:                                              ; preds = %241
  %253 = add i64 %238, 23
  %254 = inttoptr i64 %253 to i32*
  %255 = load i32, i32* %254, align 4
  %256 = and i32 %255, -2
  %257 = icmp eq i32 %256, 10
  br i1 %257, label %398, label %258

258:                                              ; preds = %241, %236, %252
  %259 = bitcast %"class.blink::V8StringResource"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %259) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %259, i8 -86, i64 152, i1 false)
  %260 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %228, %"class.v8::Value"** %260, align 8
  %261 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 1
  store i32 0, i32* %261, align 8
  %262 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %262, align 8
  %263 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1
  %264 = bitcast %"class.std::__1::unique_ptr"* %263 to i64*
  store i64 0, i64* %264, align 8
  %265 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %7, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %265, label %266, label %376

266:                                              ; preds = %258
  %267 = load %"class.v8::Value"*, %"class.v8::Value"** %260, align 8
  %268 = icmp eq %"class.v8::Value"* %267, null
  br i1 %268, label %269, label %293, !prof !2

269:                                              ; preds = %266
  %270 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %262, align 8
  %271 = icmp eq %"class.WTF::StringImpl"* %270, null
  br i1 %271, label %272, label %274

272:                                              ; preds = %269
  %273 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 2
  br label %318

274:                                              ; preds = %269
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %276 = load atomic i32, i32* %275 monotonic, align 4
  %277 = and i32 %276, 2
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %291

279:                                              ; preds = %274
  %280 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 0
  %281 = load i32, i32* %280, align 4
  %282 = zext i32 %281 to i33
  %283 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %282, i33 1) #7
  %284 = extractvalue { i33, i1 } %283, 1
  %285 = extractvalue { i33, i1 } %283, 0
  %286 = icmp slt i33 %285, 0
  %287 = or i1 %284, %286
  br i1 %287, label %288, label %289, !prof !2

288:                                              ; preds = %279
  call void @llvm.trap() #7
  unreachable

289:                                              ; preds = %279
  %290 = trunc i33 %285 to i32
  store i32 %290, i32* %280, align 4
  br label %291

291:                                              ; preds = %274, %289
  %292 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 2
  br label %299

293:                                              ; preds = %266
  %294 = bitcast %"class.v8::Value"* %267 to %"class.v8::String"*
  %295 = load i32, i32* %261, align 8
  %296 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %294, i32 %295) #7
  %297 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 2
  %298 = icmp eq %"class.WTF::StringImpl"* %296, null
  br i1 %298, label %318, label %299

299:                                              ; preds = %291, %293
  %300 = phi %"class.WTF::String"* [ %292, %291 ], [ %297, %293 ]
  %301 = phi %"class.WTF::StringImpl"* [ %270, %291 ], [ %296, %293 ]
  %302 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %303 = load atomic i32, i32* %302 monotonic, align 4
  %304 = and i32 %303, 2
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %306, label %318

306:                                              ; preds = %299
  %307 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %301, i64 0, i32 0
  %308 = load i32, i32* %307, align 4
  %309 = zext i32 %308 to i33
  %310 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %309, i33 1) #7
  %311 = extractvalue { i33, i1 } %310, 1
  %312 = extractvalue { i33, i1 } %310, 0
  %313 = icmp slt i33 %312, 0
  %314 = or i1 %311, %313
  br i1 %314, label %315, label %316, !prof !2

315:                                              ; preds = %306
  call void @llvm.trap() #7
  unreachable

316:                                              ; preds = %306
  %317 = trunc i33 %312 to i32
  store i32 %317, i32* %307, align 4
  br label %318

318:                                              ; preds = %272, %316, %299, %293
  %319 = phi i1 [ false, %316 ], [ false, %299 ], [ true, %293 ], [ true, %272 ]
  %320 = phi %"class.WTF::String"* [ %300, %316 ], [ %300, %299 ], [ %297, %293 ], [ %273, %272 ]
  %321 = phi %"class.WTF::StringImpl"* [ %301, %316 ], [ %301, %299 ], [ null, %293 ], [ null, %272 ]
  %322 = ptrtoint %"class.WTF::StringImpl"* %321 to i64
  %323 = bitcast %"class.WTF::String"* %320 to i64*
  %324 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %320, i64 0, i32 0, i32 0
  %325 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %324, align 8
  store i64 %322, i64* %323, align 8
  %326 = icmp eq %"class.WTF::StringImpl"* %325, null
  br i1 %326, label %340, label %327

327:                                              ; preds = %318
  %328 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %329 = load atomic i32, i32* %328 monotonic, align 4
  %330 = and i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %325, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  br i1 %331, label %334, label %336

334:                                              ; preds = %327
  %335 = add i32 %333, -1
  store i32 %335, i32* %332, align 4
  br label %336

336:                                              ; preds = %334, %327
  %337 = phi i32 [ %335, %334 ], [ %333, %327 ]
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %340

339:                                              ; preds = %336
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %325) #7
  br label %340

340:                                              ; preds = %318, %336, %339
  br i1 %319, label %354, label %341

341:                                              ; preds = %340
  %342 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %343 = load atomic i32, i32* %342 monotonic, align 4
  %344 = and i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %321, i64 0, i32 0
  %347 = load i32, i32* %346, align 4
  br i1 %345, label %348, label %350

348:                                              ; preds = %341
  %349 = add i32 %347, -1
  store i32 %349, i32* %346, align 4
  br label %350

350:                                              ; preds = %348, %341
  %351 = phi i32 [ %349, %348 ], [ %347, %341 ]
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %353, label %354

353:                                              ; preds = %350
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %321) #7
  br label %354

354:                                              ; preds = %340, %350, %353
  %355 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %356 = load i8*, i8** %355, align 8
  store i8* null, i8** %355, align 8
  %357 = icmp eq i8* %356, null
  br i1 %357, label %359, label %358

358:                                              ; preds = %354
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %356) #7
  br label %359

359:                                              ; preds = %358, %354
  %360 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %262, align 8
  %361 = icmp eq %"class.WTF::StringImpl"* %360, null
  br i1 %361, label %375, label %362

362:                                              ; preds = %359
  %363 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %360, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %364 = load atomic i32, i32* %363 monotonic, align 4
  %365 = and i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %360, i64 0, i32 0
  %368 = load i32, i32* %367, align 4
  br i1 %366, label %369, label %371

369:                                              ; preds = %362
  %370 = add i32 %368, -1
  store i32 %370, i32* %367, align 4
  br label %371

371:                                              ; preds = %369, %362
  %372 = phi i32 [ %370, %369 ], [ %368, %362 ]
  %373 = icmp eq i32 %372, 0
  br i1 %373, label %374, label %375

374:                                              ; preds = %371
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %360) #7
  br label %375

375:                                              ; preds = %359, %371, %374
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %259) #7
  br label %398

376:                                              ; preds = %258
  %377 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %7, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %378 = load i8*, i8** %377, align 8
  store i8* null, i8** %377, align 8
  %379 = icmp eq i8* %378, null
  br i1 %379, label %381, label %380

380:                                              ; preds = %376
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %378) #7
  br label %381

381:                                              ; preds = %380, %376
  %382 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %262, align 8
  %383 = icmp eq %"class.WTF::StringImpl"* %382, null
  br i1 %383, label %397, label %384

384:                                              ; preds = %381
  %385 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %382, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %386 = load atomic i32, i32* %385 monotonic, align 4
  %387 = and i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %382, i64 0, i32 0
  %390 = load i32, i32* %389, align 4
  br i1 %388, label %391, label %393

391:                                              ; preds = %384
  %392 = add i32 %390, -1
  store i32 %392, i32* %389, align 4
  br label %393

393:                                              ; preds = %391, %384
  %394 = phi i32 [ %392, %391 ], [ %390, %384 ]
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %397

396:                                              ; preds = %393
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %382) #7
  br label %397

397:                                              ; preds = %381, %393, %396
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %259) #7
  br label %1945

398:                                              ; preds = %375, %252
  %399 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 2, i32 0
  %400 = bitcast %"class.v8::Name"** %399 to %"class.v8::Value"**
  %401 = load %"class.v8::Value"*, %"class.v8::Value"** %400, align 8
  %402 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %401) #7
  %403 = icmp eq %"class.v8::Value"* %402, null
  br i1 %403, label %404, label %410

404:                                              ; preds = %398
  %405 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %406 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %407 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %406, align 8
  %408 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %407, i64 5
  %409 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %408, align 8
  call void %409(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %405) #7
  br label %1945

410:                                              ; preds = %398
  %411 = bitcast %"class.v8::Value"* %402 to i64*
  %412 = load i64, i64* %411, align 8
  %413 = and i64 %412, 3
  %414 = icmp eq i64 %413, 1
  br i1 %414, label %415, label %432

415:                                              ; preds = %410
  %416 = add i64 %412, -1
  %417 = inttoptr i64 %416 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = and i64 %412, -4294967296
  %420 = zext i32 %418 to i64
  %421 = or i64 %419, %420
  %422 = add i64 %421, 7
  %423 = inttoptr i64 %422 to i16*
  %424 = load i16, i16* %423, align 2
  %425 = icmp eq i16 %424, 67
  br i1 %425, label %426, label %432

426:                                              ; preds = %415
  %427 = add i64 %412, 23
  %428 = inttoptr i64 %427 to i32*
  %429 = load i32, i32* %428, align 4
  %430 = and i32 %429, -2
  %431 = icmp eq i32 %430, 10
  br i1 %431, label %572, label %432

432:                                              ; preds = %415, %410, %426
  %433 = bitcast %"class.blink::V8StringResource"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %433) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %433, i8 -86, i64 152, i1 false)
  %434 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %402, %"class.v8::Value"** %434, align 8
  %435 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 1
  store i32 0, i32* %435, align 8
  %436 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %436, align 8
  %437 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1
  %438 = bitcast %"class.std::__1::unique_ptr"* %437 to i64*
  store i64 0, i64* %438, align 8
  %439 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %8, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %439, label %440, label %550

440:                                              ; preds = %432
  %441 = load %"class.v8::Value"*, %"class.v8::Value"** %434, align 8
  %442 = icmp eq %"class.v8::Value"* %441, null
  br i1 %442, label %443, label %467, !prof !2

443:                                              ; preds = %440
  %444 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %436, align 8
  %445 = icmp eq %"class.WTF::StringImpl"* %444, null
  br i1 %445, label %446, label %448

446:                                              ; preds = %443
  %447 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 3
  br label %492

448:                                              ; preds = %443
  %449 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %444, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %450 = load atomic i32, i32* %449 monotonic, align 4
  %451 = and i32 %450, 2
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %453, label %465

453:                                              ; preds = %448
  %454 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %444, i64 0, i32 0
  %455 = load i32, i32* %454, align 4
  %456 = zext i32 %455 to i33
  %457 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %456, i33 1) #7
  %458 = extractvalue { i33, i1 } %457, 1
  %459 = extractvalue { i33, i1 } %457, 0
  %460 = icmp slt i33 %459, 0
  %461 = or i1 %458, %460
  br i1 %461, label %462, label %463, !prof !2

462:                                              ; preds = %453
  call void @llvm.trap() #7
  unreachable

463:                                              ; preds = %453
  %464 = trunc i33 %459 to i32
  store i32 %464, i32* %454, align 4
  br label %465

465:                                              ; preds = %448, %463
  %466 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 3
  br label %473

467:                                              ; preds = %440
  %468 = bitcast %"class.v8::Value"* %441 to %"class.v8::String"*
  %469 = load i32, i32* %435, align 8
  %470 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %468, i32 %469) #7
  %471 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 3
  %472 = icmp eq %"class.WTF::StringImpl"* %470, null
  br i1 %472, label %492, label %473

473:                                              ; preds = %465, %467
  %474 = phi %"class.WTF::String"* [ %466, %465 ], [ %471, %467 ]
  %475 = phi %"class.WTF::StringImpl"* [ %444, %465 ], [ %470, %467 ]
  %476 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %475, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %477 = load atomic i32, i32* %476 monotonic, align 4
  %478 = and i32 %477, 2
  %479 = icmp eq i32 %478, 0
  br i1 %479, label %480, label %492

480:                                              ; preds = %473
  %481 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %475, i64 0, i32 0
  %482 = load i32, i32* %481, align 4
  %483 = zext i32 %482 to i33
  %484 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %483, i33 1) #7
  %485 = extractvalue { i33, i1 } %484, 1
  %486 = extractvalue { i33, i1 } %484, 0
  %487 = icmp slt i33 %486, 0
  %488 = or i1 %485, %487
  br i1 %488, label %489, label %490, !prof !2

489:                                              ; preds = %480
  call void @llvm.trap() #7
  unreachable

490:                                              ; preds = %480
  %491 = trunc i33 %486 to i32
  store i32 %491, i32* %481, align 4
  br label %492

492:                                              ; preds = %446, %490, %473, %467
  %493 = phi i1 [ false, %490 ], [ false, %473 ], [ true, %467 ], [ true, %446 ]
  %494 = phi %"class.WTF::String"* [ %474, %490 ], [ %474, %473 ], [ %471, %467 ], [ %447, %446 ]
  %495 = phi %"class.WTF::StringImpl"* [ %475, %490 ], [ %475, %473 ], [ null, %467 ], [ null, %446 ]
  %496 = ptrtoint %"class.WTF::StringImpl"* %495 to i64
  %497 = bitcast %"class.WTF::String"* %494 to i64*
  %498 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %494, i64 0, i32 0, i32 0
  %499 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %498, align 8
  store i64 %496, i64* %497, align 8
  %500 = icmp eq %"class.WTF::StringImpl"* %499, null
  br i1 %500, label %514, label %501

501:                                              ; preds = %492
  %502 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %499, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %503 = load atomic i32, i32* %502 monotonic, align 4
  %504 = and i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %499, i64 0, i32 0
  %507 = load i32, i32* %506, align 4
  br i1 %505, label %508, label %510

508:                                              ; preds = %501
  %509 = add i32 %507, -1
  store i32 %509, i32* %506, align 4
  br label %510

510:                                              ; preds = %508, %501
  %511 = phi i32 [ %509, %508 ], [ %507, %501 ]
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %514

513:                                              ; preds = %510
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %499) #7
  br label %514

514:                                              ; preds = %492, %510, %513
  br i1 %493, label %528, label %515

515:                                              ; preds = %514
  %516 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %495, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %517 = load atomic i32, i32* %516 monotonic, align 4
  %518 = and i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %495, i64 0, i32 0
  %521 = load i32, i32* %520, align 4
  br i1 %519, label %522, label %524

522:                                              ; preds = %515
  %523 = add i32 %521, -1
  store i32 %523, i32* %520, align 4
  br label %524

524:                                              ; preds = %522, %515
  %525 = phi i32 [ %523, %522 ], [ %521, %515 ]
  %526 = icmp eq i32 %525, 0
  br i1 %526, label %527, label %528

527:                                              ; preds = %524
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %495) #7
  br label %528

528:                                              ; preds = %514, %524, %527
  %529 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %530 = load i8*, i8** %529, align 8
  store i8* null, i8** %529, align 8
  %531 = icmp eq i8* %530, null
  br i1 %531, label %533, label %532

532:                                              ; preds = %528
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %530) #7
  br label %533

533:                                              ; preds = %532, %528
  %534 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %436, align 8
  %535 = icmp eq %"class.WTF::StringImpl"* %534, null
  br i1 %535, label %549, label %536

536:                                              ; preds = %533
  %537 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %538 = load atomic i32, i32* %537 monotonic, align 4
  %539 = and i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %534, i64 0, i32 0
  %542 = load i32, i32* %541, align 4
  br i1 %540, label %543, label %545

543:                                              ; preds = %536
  %544 = add i32 %542, -1
  store i32 %544, i32* %541, align 4
  br label %545

545:                                              ; preds = %543, %536
  %546 = phi i32 [ %544, %543 ], [ %542, %536 ]
  %547 = icmp eq i32 %546, 0
  br i1 %547, label %548, label %549

548:                                              ; preds = %545
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %534) #7
  br label %549

549:                                              ; preds = %533, %545, %548
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %433) #7
  br label %572

550:                                              ; preds = %432
  %551 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %8, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %552 = load i8*, i8** %551, align 8
  store i8* null, i8** %551, align 8
  %553 = icmp eq i8* %552, null
  br i1 %553, label %555, label %554

554:                                              ; preds = %550
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %552) #7
  br label %555

555:                                              ; preds = %554, %550
  %556 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %436, align 8
  %557 = icmp eq %"class.WTF::StringImpl"* %556, null
  br i1 %557, label %571, label %558

558:                                              ; preds = %555
  %559 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %556, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %560 = load atomic i32, i32* %559 monotonic, align 4
  %561 = and i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %556, i64 0, i32 0
  %564 = load i32, i32* %563, align 4
  br i1 %562, label %565, label %567

565:                                              ; preds = %558
  %566 = add i32 %564, -1
  store i32 %566, i32* %563, align 4
  br label %567

567:                                              ; preds = %565, %558
  %568 = phi i32 [ %566, %565 ], [ %564, %558 ]
  %569 = icmp eq i32 %568, 0
  br i1 %569, label %570, label %571

570:                                              ; preds = %567
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %556) #7
  br label %571

571:                                              ; preds = %555, %567, %570
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %433) #7
  br label %1945

572:                                              ; preds = %549, %426
  %573 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 3, i32 0
  %574 = bitcast %"class.v8::Name"** %573 to %"class.v8::Value"**
  %575 = load %"class.v8::Value"*, %"class.v8::Value"** %574, align 8
  %576 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %575) #7
  %577 = icmp eq %"class.v8::Value"* %576, null
  br i1 %577, label %578, label %584

578:                                              ; preds = %572
  %579 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %580 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %581 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %580, align 8
  %582 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %581, i64 5
  %583 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %582, align 8
  call void %583(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %579) #7
  br label %1945

584:                                              ; preds = %572
  %585 = bitcast %"class.v8::Value"* %576 to i64*
  %586 = load i64, i64* %585, align 8
  %587 = and i64 %586, 3
  %588 = icmp eq i64 %587, 1
  br i1 %588, label %589, label %606

589:                                              ; preds = %584
  %590 = add i64 %586, -1
  %591 = inttoptr i64 %590 to i32*
  %592 = load i32, i32* %591, align 4
  %593 = and i64 %586, -4294967296
  %594 = zext i32 %592 to i64
  %595 = or i64 %593, %594
  %596 = add i64 %595, 7
  %597 = inttoptr i64 %596 to i16*
  %598 = load i16, i16* %597, align 2
  %599 = icmp eq i16 %598, 67
  br i1 %599, label %600, label %606

600:                                              ; preds = %589
  %601 = add i64 %586, 23
  %602 = inttoptr i64 %601 to i32*
  %603 = load i32, i32* %602, align 4
  %604 = and i32 %603, -2
  %605 = icmp eq i32 %604, 10
  br i1 %605, label %746, label %606

606:                                              ; preds = %589, %584, %600
  %607 = bitcast %"class.blink::V8StringResource"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %607) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %607, i8 -86, i64 152, i1 false)
  %608 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %576, %"class.v8::Value"** %608, align 8
  %609 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 1
  store i32 0, i32* %609, align 8
  %610 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %610, align 8
  %611 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1
  %612 = bitcast %"class.std::__1::unique_ptr"* %611 to i64*
  store i64 0, i64* %612, align 8
  %613 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %9, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %613, label %614, label %724

614:                                              ; preds = %606
  %615 = load %"class.v8::Value"*, %"class.v8::Value"** %608, align 8
  %616 = icmp eq %"class.v8::Value"* %615, null
  br i1 %616, label %617, label %641, !prof !2

617:                                              ; preds = %614
  %618 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %610, align 8
  %619 = icmp eq %"class.WTF::StringImpl"* %618, null
  br i1 %619, label %620, label %622

620:                                              ; preds = %617
  %621 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 4
  br label %666

622:                                              ; preds = %617
  %623 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %618, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %624 = load atomic i32, i32* %623 monotonic, align 4
  %625 = and i32 %624, 2
  %626 = icmp eq i32 %625, 0
  br i1 %626, label %627, label %639

627:                                              ; preds = %622
  %628 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %618, i64 0, i32 0
  %629 = load i32, i32* %628, align 4
  %630 = zext i32 %629 to i33
  %631 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %630, i33 1) #7
  %632 = extractvalue { i33, i1 } %631, 1
  %633 = extractvalue { i33, i1 } %631, 0
  %634 = icmp slt i33 %633, 0
  %635 = or i1 %632, %634
  br i1 %635, label %636, label %637, !prof !2

636:                                              ; preds = %627
  call void @llvm.trap() #7
  unreachable

637:                                              ; preds = %627
  %638 = trunc i33 %633 to i32
  store i32 %638, i32* %628, align 4
  br label %639

639:                                              ; preds = %622, %637
  %640 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 4
  br label %647

641:                                              ; preds = %614
  %642 = bitcast %"class.v8::Value"* %615 to %"class.v8::String"*
  %643 = load i32, i32* %609, align 8
  %644 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %642, i32 %643) #7
  %645 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 4
  %646 = icmp eq %"class.WTF::StringImpl"* %644, null
  br i1 %646, label %666, label %647

647:                                              ; preds = %639, %641
  %648 = phi %"class.WTF::String"* [ %640, %639 ], [ %645, %641 ]
  %649 = phi %"class.WTF::StringImpl"* [ %618, %639 ], [ %644, %641 ]
  %650 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %649, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %651 = load atomic i32, i32* %650 monotonic, align 4
  %652 = and i32 %651, 2
  %653 = icmp eq i32 %652, 0
  br i1 %653, label %654, label %666

654:                                              ; preds = %647
  %655 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %649, i64 0, i32 0
  %656 = load i32, i32* %655, align 4
  %657 = zext i32 %656 to i33
  %658 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %657, i33 1) #7
  %659 = extractvalue { i33, i1 } %658, 1
  %660 = extractvalue { i33, i1 } %658, 0
  %661 = icmp slt i33 %660, 0
  %662 = or i1 %659, %661
  br i1 %662, label %663, label %664, !prof !2

663:                                              ; preds = %654
  call void @llvm.trap() #7
  unreachable

664:                                              ; preds = %654
  %665 = trunc i33 %660 to i32
  store i32 %665, i32* %655, align 4
  br label %666

666:                                              ; preds = %620, %664, %647, %641
  %667 = phi i1 [ false, %664 ], [ false, %647 ], [ true, %641 ], [ true, %620 ]
  %668 = phi %"class.WTF::String"* [ %648, %664 ], [ %648, %647 ], [ %645, %641 ], [ %621, %620 ]
  %669 = phi %"class.WTF::StringImpl"* [ %649, %664 ], [ %649, %647 ], [ null, %641 ], [ null, %620 ]
  %670 = ptrtoint %"class.WTF::StringImpl"* %669 to i64
  %671 = bitcast %"class.WTF::String"* %668 to i64*
  %672 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %668, i64 0, i32 0, i32 0
  %673 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %672, align 8
  store i64 %670, i64* %671, align 8
  %674 = icmp eq %"class.WTF::StringImpl"* %673, null
  br i1 %674, label %688, label %675

675:                                              ; preds = %666
  %676 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %673, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %677 = load atomic i32, i32* %676 monotonic, align 4
  %678 = and i32 %677, 2
  %679 = icmp eq i32 %678, 0
  %680 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %673, i64 0, i32 0
  %681 = load i32, i32* %680, align 4
  br i1 %679, label %682, label %684

682:                                              ; preds = %675
  %683 = add i32 %681, -1
  store i32 %683, i32* %680, align 4
  br label %684

684:                                              ; preds = %682, %675
  %685 = phi i32 [ %683, %682 ], [ %681, %675 ]
  %686 = icmp eq i32 %685, 0
  br i1 %686, label %687, label %688

687:                                              ; preds = %684
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %673) #7
  br label %688

688:                                              ; preds = %666, %684, %687
  br i1 %667, label %702, label %689

689:                                              ; preds = %688
  %690 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %669, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %691 = load atomic i32, i32* %690 monotonic, align 4
  %692 = and i32 %691, 2
  %693 = icmp eq i32 %692, 0
  %694 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %669, i64 0, i32 0
  %695 = load i32, i32* %694, align 4
  br i1 %693, label %696, label %698

696:                                              ; preds = %689
  %697 = add i32 %695, -1
  store i32 %697, i32* %694, align 4
  br label %698

698:                                              ; preds = %696, %689
  %699 = phi i32 [ %697, %696 ], [ %695, %689 ]
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %701, label %702

701:                                              ; preds = %698
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %669) #7
  br label %702

702:                                              ; preds = %688, %698, %701
  %703 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %704 = load i8*, i8** %703, align 8
  store i8* null, i8** %703, align 8
  %705 = icmp eq i8* %704, null
  br i1 %705, label %707, label %706

706:                                              ; preds = %702
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %704) #7
  br label %707

707:                                              ; preds = %706, %702
  %708 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %610, align 8
  %709 = icmp eq %"class.WTF::StringImpl"* %708, null
  br i1 %709, label %723, label %710

710:                                              ; preds = %707
  %711 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %712 = load atomic i32, i32* %711 monotonic, align 4
  %713 = and i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 0
  %716 = load i32, i32* %715, align 4
  br i1 %714, label %717, label %719

717:                                              ; preds = %710
  %718 = add i32 %716, -1
  store i32 %718, i32* %715, align 4
  br label %719

719:                                              ; preds = %717, %710
  %720 = phi i32 [ %718, %717 ], [ %716, %710 ]
  %721 = icmp eq i32 %720, 0
  br i1 %721, label %722, label %723

722:                                              ; preds = %719
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %708) #7
  br label %723

723:                                              ; preds = %707, %719, %722
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %607) #7
  br label %746

724:                                              ; preds = %606
  %725 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %9, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %726 = load i8*, i8** %725, align 8
  store i8* null, i8** %725, align 8
  %727 = icmp eq i8* %726, null
  br i1 %727, label %729, label %728

728:                                              ; preds = %724
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %726) #7
  br label %729

729:                                              ; preds = %728, %724
  %730 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %610, align 8
  %731 = icmp eq %"class.WTF::StringImpl"* %730, null
  br i1 %731, label %745, label %732

732:                                              ; preds = %729
  %733 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %730, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %734 = load atomic i32, i32* %733 monotonic, align 4
  %735 = and i32 %734, 2
  %736 = icmp eq i32 %735, 0
  %737 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %730, i64 0, i32 0
  %738 = load i32, i32* %737, align 4
  br i1 %736, label %739, label %741

739:                                              ; preds = %732
  %740 = add i32 %738, -1
  store i32 %740, i32* %737, align 4
  br label %741

741:                                              ; preds = %739, %732
  %742 = phi i32 [ %740, %739 ], [ %738, %732 ]
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %744, label %745

744:                                              ; preds = %741
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %730) #7
  br label %745

745:                                              ; preds = %729, %741, %744
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %607) #7
  br label %1945

746:                                              ; preds = %723, %600
  %747 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 4, i32 0
  %748 = bitcast %"class.v8::Name"** %747 to %"class.v8::Value"**
  %749 = load %"class.v8::Value"*, %"class.v8::Value"** %748, align 8
  %750 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %749) #7
  %751 = icmp eq %"class.v8::Value"* %750, null
  br i1 %751, label %752, label %758

752:                                              ; preds = %746
  %753 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %754 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %755 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %754, align 8
  %756 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %755, i64 5
  %757 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %756, align 8
  call void %757(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %753) #7
  br label %1945

758:                                              ; preds = %746
  %759 = bitcast %"class.v8::Value"* %750 to i64*
  %760 = load i64, i64* %759, align 8
  %761 = and i64 %760, 3
  %762 = icmp eq i64 %761, 1
  br i1 %762, label %763, label %780

763:                                              ; preds = %758
  %764 = add i64 %760, -1
  %765 = inttoptr i64 %764 to i32*
  %766 = load i32, i32* %765, align 4
  %767 = and i64 %760, -4294967296
  %768 = zext i32 %766 to i64
  %769 = or i64 %767, %768
  %770 = add i64 %769, 7
  %771 = inttoptr i64 %770 to i16*
  %772 = load i16, i16* %771, align 2
  %773 = icmp eq i16 %772, 67
  br i1 %773, label %774, label %780

774:                                              ; preds = %763
  %775 = add i64 %760, 23
  %776 = inttoptr i64 %775 to i32*
  %777 = load i32, i32* %776, align 4
  %778 = and i32 %777, -2
  %779 = icmp eq i32 %778, 10
  br i1 %779, label %920, label %780

780:                                              ; preds = %763, %758, %774
  %781 = bitcast %"class.blink::V8StringResource"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %781) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %781, i8 -86, i64 152, i1 false)
  %782 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %750, %"class.v8::Value"** %782, align 8
  %783 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 1
  store i32 0, i32* %783, align 8
  %784 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %784, align 8
  %785 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1
  %786 = bitcast %"class.std::__1::unique_ptr"* %785 to i64*
  store i64 0, i64* %786, align 8
  %787 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %10, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %787, label %788, label %898

788:                                              ; preds = %780
  %789 = load %"class.v8::Value"*, %"class.v8::Value"** %782, align 8
  %790 = icmp eq %"class.v8::Value"* %789, null
  br i1 %790, label %791, label %815, !prof !2

791:                                              ; preds = %788
  %792 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %784, align 8
  %793 = icmp eq %"class.WTF::StringImpl"* %792, null
  br i1 %793, label %794, label %796

794:                                              ; preds = %791
  %795 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 5
  br label %840

796:                                              ; preds = %791
  %797 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %792, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %798 = load atomic i32, i32* %797 monotonic, align 4
  %799 = and i32 %798, 2
  %800 = icmp eq i32 %799, 0
  br i1 %800, label %801, label %813

801:                                              ; preds = %796
  %802 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %792, i64 0, i32 0
  %803 = load i32, i32* %802, align 4
  %804 = zext i32 %803 to i33
  %805 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %804, i33 1) #7
  %806 = extractvalue { i33, i1 } %805, 1
  %807 = extractvalue { i33, i1 } %805, 0
  %808 = icmp slt i33 %807, 0
  %809 = or i1 %806, %808
  br i1 %809, label %810, label %811, !prof !2

810:                                              ; preds = %801
  call void @llvm.trap() #7
  unreachable

811:                                              ; preds = %801
  %812 = trunc i33 %807 to i32
  store i32 %812, i32* %802, align 4
  br label %813

813:                                              ; preds = %796, %811
  %814 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 5
  br label %821

815:                                              ; preds = %788
  %816 = bitcast %"class.v8::Value"* %789 to %"class.v8::String"*
  %817 = load i32, i32* %783, align 8
  %818 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %816, i32 %817) #7
  %819 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 5
  %820 = icmp eq %"class.WTF::StringImpl"* %818, null
  br i1 %820, label %840, label %821

821:                                              ; preds = %813, %815
  %822 = phi %"class.WTF::String"* [ %814, %813 ], [ %819, %815 ]
  %823 = phi %"class.WTF::StringImpl"* [ %792, %813 ], [ %818, %815 ]
  %824 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %823, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %825 = load atomic i32, i32* %824 monotonic, align 4
  %826 = and i32 %825, 2
  %827 = icmp eq i32 %826, 0
  br i1 %827, label %828, label %840

828:                                              ; preds = %821
  %829 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %823, i64 0, i32 0
  %830 = load i32, i32* %829, align 4
  %831 = zext i32 %830 to i33
  %832 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %831, i33 1) #7
  %833 = extractvalue { i33, i1 } %832, 1
  %834 = extractvalue { i33, i1 } %832, 0
  %835 = icmp slt i33 %834, 0
  %836 = or i1 %833, %835
  br i1 %836, label %837, label %838, !prof !2

837:                                              ; preds = %828
  call void @llvm.trap() #7
  unreachable

838:                                              ; preds = %828
  %839 = trunc i33 %834 to i32
  store i32 %839, i32* %829, align 4
  br label %840

840:                                              ; preds = %794, %838, %821, %815
  %841 = phi i1 [ false, %838 ], [ false, %821 ], [ true, %815 ], [ true, %794 ]
  %842 = phi %"class.WTF::String"* [ %822, %838 ], [ %822, %821 ], [ %819, %815 ], [ %795, %794 ]
  %843 = phi %"class.WTF::StringImpl"* [ %823, %838 ], [ %823, %821 ], [ null, %815 ], [ null, %794 ]
  %844 = ptrtoint %"class.WTF::StringImpl"* %843 to i64
  %845 = bitcast %"class.WTF::String"* %842 to i64*
  %846 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %842, i64 0, i32 0, i32 0
  %847 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %846, align 8
  store i64 %844, i64* %845, align 8
  %848 = icmp eq %"class.WTF::StringImpl"* %847, null
  br i1 %848, label %862, label %849

849:                                              ; preds = %840
  %850 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %847, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %851 = load atomic i32, i32* %850 monotonic, align 4
  %852 = and i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %847, i64 0, i32 0
  %855 = load i32, i32* %854, align 4
  br i1 %853, label %856, label %858

856:                                              ; preds = %849
  %857 = add i32 %855, -1
  store i32 %857, i32* %854, align 4
  br label %858

858:                                              ; preds = %856, %849
  %859 = phi i32 [ %857, %856 ], [ %855, %849 ]
  %860 = icmp eq i32 %859, 0
  br i1 %860, label %861, label %862

861:                                              ; preds = %858
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %847) #7
  br label %862

862:                                              ; preds = %840, %858, %861
  br i1 %841, label %876, label %863

863:                                              ; preds = %862
  %864 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %843, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %865 = load atomic i32, i32* %864 monotonic, align 4
  %866 = and i32 %865, 2
  %867 = icmp eq i32 %866, 0
  %868 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %843, i64 0, i32 0
  %869 = load i32, i32* %868, align 4
  br i1 %867, label %870, label %872

870:                                              ; preds = %863
  %871 = add i32 %869, -1
  store i32 %871, i32* %868, align 4
  br label %872

872:                                              ; preds = %870, %863
  %873 = phi i32 [ %871, %870 ], [ %869, %863 ]
  %874 = icmp eq i32 %873, 0
  br i1 %874, label %875, label %876

875:                                              ; preds = %872
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %843) #7
  br label %876

876:                                              ; preds = %862, %872, %875
  %877 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %878 = load i8*, i8** %877, align 8
  store i8* null, i8** %877, align 8
  %879 = icmp eq i8* %878, null
  br i1 %879, label %881, label %880

880:                                              ; preds = %876
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %878) #7
  br label %881

881:                                              ; preds = %880, %876
  %882 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %784, align 8
  %883 = icmp eq %"class.WTF::StringImpl"* %882, null
  br i1 %883, label %897, label %884

884:                                              ; preds = %881
  %885 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %882, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %886 = load atomic i32, i32* %885 monotonic, align 4
  %887 = and i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %882, i64 0, i32 0
  %890 = load i32, i32* %889, align 4
  br i1 %888, label %891, label %893

891:                                              ; preds = %884
  %892 = add i32 %890, -1
  store i32 %892, i32* %889, align 4
  br label %893

893:                                              ; preds = %891, %884
  %894 = phi i32 [ %892, %891 ], [ %890, %884 ]
  %895 = icmp eq i32 %894, 0
  br i1 %895, label %896, label %897

896:                                              ; preds = %893
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %882) #7
  br label %897

897:                                              ; preds = %881, %893, %896
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %781) #7
  br label %920

898:                                              ; preds = %780
  %899 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %10, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %900 = load i8*, i8** %899, align 8
  store i8* null, i8** %899, align 8
  %901 = icmp eq i8* %900, null
  br i1 %901, label %903, label %902

902:                                              ; preds = %898
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %900) #7
  br label %903

903:                                              ; preds = %902, %898
  %904 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %784, align 8
  %905 = icmp eq %"class.WTF::StringImpl"* %904, null
  br i1 %905, label %919, label %906

906:                                              ; preds = %903
  %907 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %904, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %908 = load atomic i32, i32* %907 monotonic, align 4
  %909 = and i32 %908, 2
  %910 = icmp eq i32 %909, 0
  %911 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %904, i64 0, i32 0
  %912 = load i32, i32* %911, align 4
  br i1 %910, label %913, label %915

913:                                              ; preds = %906
  %914 = add i32 %912, -1
  store i32 %914, i32* %911, align 4
  br label %915

915:                                              ; preds = %913, %906
  %916 = phi i32 [ %914, %913 ], [ %912, %906 ]
  %917 = icmp eq i32 %916, 0
  br i1 %917, label %918, label %919

918:                                              ; preds = %915
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %904) #7
  br label %919

919:                                              ; preds = %903, %915, %918
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %781) #7
  br label %1945

920:                                              ; preds = %897, %774
  %921 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 6, i32 0
  %922 = bitcast %"class.v8::Name"** %921 to %"class.v8::Value"**
  %923 = load %"class.v8::Value"*, %"class.v8::Value"** %922, align 8
  %924 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %923) #7
  %925 = icmp eq %"class.v8::Value"* %924, null
  br i1 %925, label %926, label %932

926:                                              ; preds = %920
  %927 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %928 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %929 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %928, align 8
  %930 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %929, i64 5
  %931 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %930, align 8
  call void %931(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %927) #7
  br label %1945

932:                                              ; preds = %920
  %933 = bitcast %"class.v8::Value"* %924 to i64*
  %934 = load i64, i64* %933, align 8
  %935 = and i64 %934, 3
  %936 = icmp eq i64 %935, 1
  br i1 %936, label %937, label %954

937:                                              ; preds = %932
  %938 = add i64 %934, -1
  %939 = inttoptr i64 %938 to i32*
  %940 = load i32, i32* %939, align 4
  %941 = and i64 %934, -4294967296
  %942 = zext i32 %940 to i64
  %943 = or i64 %941, %942
  %944 = add i64 %943, 7
  %945 = inttoptr i64 %944 to i16*
  %946 = load i16, i16* %945, align 2
  %947 = icmp eq i16 %946, 67
  br i1 %947, label %948, label %954

948:                                              ; preds = %937
  %949 = add i64 %934, 23
  %950 = inttoptr i64 %949 to i32*
  %951 = load i32, i32* %950, align 4
  %952 = and i32 %951, -2
  %953 = icmp eq i32 %952, 10
  br i1 %953, label %1094, label %954

954:                                              ; preds = %937, %932, %948
  %955 = bitcast %"class.blink::V8StringResource"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %955) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %955, i8 -86, i64 152, i1 false)
  %956 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %924, %"class.v8::Value"** %956, align 8
  %957 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 1
  store i32 0, i32* %957, align 8
  %958 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %958, align 8
  %959 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1
  %960 = bitcast %"class.std::__1::unique_ptr"* %959 to i64*
  store i64 0, i64* %960, align 8
  %961 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %11, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %961, label %962, label %1072

962:                                              ; preds = %954
  %963 = load %"class.v8::Value"*, %"class.v8::Value"** %956, align 8
  %964 = icmp eq %"class.v8::Value"* %963, null
  br i1 %964, label %965, label %989, !prof !2

965:                                              ; preds = %962
  %966 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %958, align 8
  %967 = icmp eq %"class.WTF::StringImpl"* %966, null
  br i1 %967, label %968, label %970

968:                                              ; preds = %965
  %969 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 7
  br label %1014

970:                                              ; preds = %965
  %971 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %966, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %972 = load atomic i32, i32* %971 monotonic, align 4
  %973 = and i32 %972, 2
  %974 = icmp eq i32 %973, 0
  br i1 %974, label %975, label %987

975:                                              ; preds = %970
  %976 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %966, i64 0, i32 0
  %977 = load i32, i32* %976, align 4
  %978 = zext i32 %977 to i33
  %979 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %978, i33 1) #7
  %980 = extractvalue { i33, i1 } %979, 1
  %981 = extractvalue { i33, i1 } %979, 0
  %982 = icmp slt i33 %981, 0
  %983 = or i1 %980, %982
  br i1 %983, label %984, label %985, !prof !2

984:                                              ; preds = %975
  call void @llvm.trap() #7
  unreachable

985:                                              ; preds = %975
  %986 = trunc i33 %981 to i32
  store i32 %986, i32* %976, align 4
  br label %987

987:                                              ; preds = %970, %985
  %988 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 7
  br label %995

989:                                              ; preds = %962
  %990 = bitcast %"class.v8::Value"* %963 to %"class.v8::String"*
  %991 = load i32, i32* %957, align 8
  %992 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %990, i32 %991) #7
  %993 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 7
  %994 = icmp eq %"class.WTF::StringImpl"* %992, null
  br i1 %994, label %1014, label %995

995:                                              ; preds = %987, %989
  %996 = phi %"class.WTF::String"* [ %988, %987 ], [ %993, %989 ]
  %997 = phi %"class.WTF::StringImpl"* [ %966, %987 ], [ %992, %989 ]
  %998 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %997, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %999 = load atomic i32, i32* %998 monotonic, align 4
  %1000 = and i32 %999, 2
  %1001 = icmp eq i32 %1000, 0
  br i1 %1001, label %1002, label %1014

1002:                                             ; preds = %995
  %1003 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %997, i64 0, i32 0
  %1004 = load i32, i32* %1003, align 4
  %1005 = zext i32 %1004 to i33
  %1006 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1005, i33 1) #7
  %1007 = extractvalue { i33, i1 } %1006, 1
  %1008 = extractvalue { i33, i1 } %1006, 0
  %1009 = icmp slt i33 %1008, 0
  %1010 = or i1 %1007, %1009
  br i1 %1010, label %1011, label %1012, !prof !2

1011:                                             ; preds = %1002
  call void @llvm.trap() #7
  unreachable

1012:                                             ; preds = %1002
  %1013 = trunc i33 %1008 to i32
  store i32 %1013, i32* %1003, align 4
  br label %1014

1014:                                             ; preds = %968, %1012, %995, %989
  %1015 = phi i1 [ false, %1012 ], [ false, %995 ], [ true, %989 ], [ true, %968 ]
  %1016 = phi %"class.WTF::String"* [ %996, %1012 ], [ %996, %995 ], [ %993, %989 ], [ %969, %968 ]
  %1017 = phi %"class.WTF::StringImpl"* [ %997, %1012 ], [ %997, %995 ], [ null, %989 ], [ null, %968 ]
  %1018 = ptrtoint %"class.WTF::StringImpl"* %1017 to i64
  %1019 = bitcast %"class.WTF::String"* %1016 to i64*
  %1020 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1016, i64 0, i32 0, i32 0
  %1021 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1020, align 8
  store i64 %1018, i64* %1019, align 8
  %1022 = icmp eq %"class.WTF::StringImpl"* %1021, null
  br i1 %1022, label %1036, label %1023

1023:                                             ; preds = %1014
  %1024 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1021, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1025 = load atomic i32, i32* %1024 monotonic, align 4
  %1026 = and i32 %1025, 2
  %1027 = icmp eq i32 %1026, 0
  %1028 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1021, i64 0, i32 0
  %1029 = load i32, i32* %1028, align 4
  br i1 %1027, label %1030, label %1032

1030:                                             ; preds = %1023
  %1031 = add i32 %1029, -1
  store i32 %1031, i32* %1028, align 4
  br label %1032

1032:                                             ; preds = %1030, %1023
  %1033 = phi i32 [ %1031, %1030 ], [ %1029, %1023 ]
  %1034 = icmp eq i32 %1033, 0
  br i1 %1034, label %1035, label %1036

1035:                                             ; preds = %1032
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1021) #7
  br label %1036

1036:                                             ; preds = %1014, %1032, %1035
  br i1 %1015, label %1050, label %1037

1037:                                             ; preds = %1036
  %1038 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1017, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1039 = load atomic i32, i32* %1038 monotonic, align 4
  %1040 = and i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1017, i64 0, i32 0
  %1043 = load i32, i32* %1042, align 4
  br i1 %1041, label %1044, label %1046

1044:                                             ; preds = %1037
  %1045 = add i32 %1043, -1
  store i32 %1045, i32* %1042, align 4
  br label %1046

1046:                                             ; preds = %1044, %1037
  %1047 = phi i32 [ %1045, %1044 ], [ %1043, %1037 ]
  %1048 = icmp eq i32 %1047, 0
  br i1 %1048, label %1049, label %1050

1049:                                             ; preds = %1046
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1017) #7
  br label %1050

1050:                                             ; preds = %1036, %1046, %1049
  %1051 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1052 = load i8*, i8** %1051, align 8
  store i8* null, i8** %1051, align 8
  %1053 = icmp eq i8* %1052, null
  br i1 %1053, label %1055, label %1054

1054:                                             ; preds = %1050
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1052) #7
  br label %1055

1055:                                             ; preds = %1054, %1050
  %1056 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %958, align 8
  %1057 = icmp eq %"class.WTF::StringImpl"* %1056, null
  br i1 %1057, label %1071, label %1058

1058:                                             ; preds = %1055
  %1059 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1056, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1060 = load atomic i32, i32* %1059 monotonic, align 4
  %1061 = and i32 %1060, 2
  %1062 = icmp eq i32 %1061, 0
  %1063 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1056, i64 0, i32 0
  %1064 = load i32, i32* %1063, align 4
  br i1 %1062, label %1065, label %1067

1065:                                             ; preds = %1058
  %1066 = add i32 %1064, -1
  store i32 %1066, i32* %1063, align 4
  br label %1067

1067:                                             ; preds = %1065, %1058
  %1068 = phi i32 [ %1066, %1065 ], [ %1064, %1058 ]
  %1069 = icmp eq i32 %1068, 0
  br i1 %1069, label %1070, label %1071

1070:                                             ; preds = %1067
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1056) #7
  br label %1071

1071:                                             ; preds = %1055, %1067, %1070
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %955) #7
  br label %1094

1072:                                             ; preds = %954
  %1073 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %11, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1074 = load i8*, i8** %1073, align 8
  store i8* null, i8** %1073, align 8
  %1075 = icmp eq i8* %1074, null
  br i1 %1075, label %1077, label %1076

1076:                                             ; preds = %1072
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1074) #7
  br label %1077

1077:                                             ; preds = %1076, %1072
  %1078 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %958, align 8
  %1079 = icmp eq %"class.WTF::StringImpl"* %1078, null
  br i1 %1079, label %1093, label %1080

1080:                                             ; preds = %1077
  %1081 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1078, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1082 = load atomic i32, i32* %1081 monotonic, align 4
  %1083 = and i32 %1082, 2
  %1084 = icmp eq i32 %1083, 0
  %1085 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1078, i64 0, i32 0
  %1086 = load i32, i32* %1085, align 4
  br i1 %1084, label %1087, label %1089

1087:                                             ; preds = %1080
  %1088 = add i32 %1086, -1
  store i32 %1088, i32* %1085, align 4
  br label %1089

1089:                                             ; preds = %1087, %1080
  %1090 = phi i32 [ %1088, %1087 ], [ %1086, %1080 ]
  %1091 = icmp eq i32 %1090, 0
  br i1 %1091, label %1092, label %1093

1092:                                             ; preds = %1089
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1078) #7
  br label %1093

1093:                                             ; preds = %1077, %1089, %1092
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %955) #7
  br label %1945

1094:                                             ; preds = %1071, %948
  %1095 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 7, i32 0
  %1096 = bitcast %"class.v8::Name"** %1095 to %"class.v8::Value"**
  %1097 = load %"class.v8::Value"*, %"class.v8::Value"** %1096, align 8
  %1098 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %1097) #7
  %1099 = icmp eq %"class.v8::Value"* %1098, null
  br i1 %1099, label %1100, label %1106

1100:                                             ; preds = %1094
  %1101 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1102 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1103 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1102, align 8
  %1104 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1103, i64 5
  %1105 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1104, align 8
  call void %1105(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1101) #7
  br label %1945

1106:                                             ; preds = %1094
  %1107 = bitcast %"class.v8::Value"* %1098 to i64*
  %1108 = load i64, i64* %1107, align 8
  %1109 = and i64 %1108, 3
  %1110 = icmp eq i64 %1109, 1
  br i1 %1110, label %1111, label %1128

1111:                                             ; preds = %1106
  %1112 = add i64 %1108, -1
  %1113 = inttoptr i64 %1112 to i32*
  %1114 = load i32, i32* %1113, align 4
  %1115 = and i64 %1108, -4294967296
  %1116 = zext i32 %1114 to i64
  %1117 = or i64 %1115, %1116
  %1118 = add i64 %1117, 7
  %1119 = inttoptr i64 %1118 to i16*
  %1120 = load i16, i16* %1119, align 2
  %1121 = icmp eq i16 %1120, 67
  br i1 %1121, label %1122, label %1128

1122:                                             ; preds = %1111
  %1123 = add i64 %1108, 23
  %1124 = inttoptr i64 %1123 to i32*
  %1125 = load i32, i32* %1124, align 4
  %1126 = and i32 %1125, -2
  %1127 = icmp eq i32 %1126, 10
  br i1 %1127, label %1268, label %1128

1128:                                             ; preds = %1111, %1106, %1122
  %1129 = bitcast %"class.blink::V8StringResource"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1129) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1129, i8 -86, i64 152, i1 false)
  %1130 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1098, %"class.v8::Value"** %1130, align 8
  %1131 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 1
  store i32 0, i32* %1131, align 8
  %1132 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1132, align 8
  %1133 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1
  %1134 = bitcast %"class.std::__1::unique_ptr"* %1133 to i64*
  store i64 0, i64* %1134, align 8
  %1135 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %12, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1135, label %1136, label %1246

1136:                                             ; preds = %1128
  %1137 = load %"class.v8::Value"*, %"class.v8::Value"** %1130, align 8
  %1138 = icmp eq %"class.v8::Value"* %1137, null
  br i1 %1138, label %1139, label %1163, !prof !2

1139:                                             ; preds = %1136
  %1140 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1132, align 8
  %1141 = icmp eq %"class.WTF::StringImpl"* %1140, null
  br i1 %1141, label %1142, label %1144

1142:                                             ; preds = %1139
  %1143 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 8
  br label %1188

1144:                                             ; preds = %1139
  %1145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1140, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1146 = load atomic i32, i32* %1145 monotonic, align 4
  %1147 = and i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  br i1 %1148, label %1149, label %1161

1149:                                             ; preds = %1144
  %1150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1140, i64 0, i32 0
  %1151 = load i32, i32* %1150, align 4
  %1152 = zext i32 %1151 to i33
  %1153 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1152, i33 1) #7
  %1154 = extractvalue { i33, i1 } %1153, 1
  %1155 = extractvalue { i33, i1 } %1153, 0
  %1156 = icmp slt i33 %1155, 0
  %1157 = or i1 %1154, %1156
  br i1 %1157, label %1158, label %1159, !prof !2

1158:                                             ; preds = %1149
  call void @llvm.trap() #7
  unreachable

1159:                                             ; preds = %1149
  %1160 = trunc i33 %1155 to i32
  store i32 %1160, i32* %1150, align 4
  br label %1161

1161:                                             ; preds = %1144, %1159
  %1162 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 8
  br label %1169

1163:                                             ; preds = %1136
  %1164 = bitcast %"class.v8::Value"* %1137 to %"class.v8::String"*
  %1165 = load i32, i32* %1131, align 8
  %1166 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1164, i32 %1165) #7
  %1167 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 8
  %1168 = icmp eq %"class.WTF::StringImpl"* %1166, null
  br i1 %1168, label %1188, label %1169

1169:                                             ; preds = %1161, %1163
  %1170 = phi %"class.WTF::String"* [ %1162, %1161 ], [ %1167, %1163 ]
  %1171 = phi %"class.WTF::StringImpl"* [ %1140, %1161 ], [ %1166, %1163 ]
  %1172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1171, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1173 = load atomic i32, i32* %1172 monotonic, align 4
  %1174 = and i32 %1173, 2
  %1175 = icmp eq i32 %1174, 0
  br i1 %1175, label %1176, label %1188

1176:                                             ; preds = %1169
  %1177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1171, i64 0, i32 0
  %1178 = load i32, i32* %1177, align 4
  %1179 = zext i32 %1178 to i33
  %1180 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1179, i33 1) #7
  %1181 = extractvalue { i33, i1 } %1180, 1
  %1182 = extractvalue { i33, i1 } %1180, 0
  %1183 = icmp slt i33 %1182, 0
  %1184 = or i1 %1181, %1183
  br i1 %1184, label %1185, label %1186, !prof !2

1185:                                             ; preds = %1176
  call void @llvm.trap() #7
  unreachable

1186:                                             ; preds = %1176
  %1187 = trunc i33 %1182 to i32
  store i32 %1187, i32* %1177, align 4
  br label %1188

1188:                                             ; preds = %1142, %1186, %1169, %1163
  %1189 = phi i1 [ false, %1186 ], [ false, %1169 ], [ true, %1163 ], [ true, %1142 ]
  %1190 = phi %"class.WTF::String"* [ %1170, %1186 ], [ %1170, %1169 ], [ %1167, %1163 ], [ %1143, %1142 ]
  %1191 = phi %"class.WTF::StringImpl"* [ %1171, %1186 ], [ %1171, %1169 ], [ null, %1163 ], [ null, %1142 ]
  %1192 = ptrtoint %"class.WTF::StringImpl"* %1191 to i64
  %1193 = bitcast %"class.WTF::String"* %1190 to i64*
  %1194 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1190, i64 0, i32 0, i32 0
  %1195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1194, align 8
  store i64 %1192, i64* %1193, align 8
  %1196 = icmp eq %"class.WTF::StringImpl"* %1195, null
  br i1 %1196, label %1210, label %1197

1197:                                             ; preds = %1188
  %1198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1199 = load atomic i32, i32* %1198 monotonic, align 4
  %1200 = and i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1195, i64 0, i32 0
  %1203 = load i32, i32* %1202, align 4
  br i1 %1201, label %1204, label %1206

1204:                                             ; preds = %1197
  %1205 = add i32 %1203, -1
  store i32 %1205, i32* %1202, align 4
  br label %1206

1206:                                             ; preds = %1204, %1197
  %1207 = phi i32 [ %1205, %1204 ], [ %1203, %1197 ]
  %1208 = icmp eq i32 %1207, 0
  br i1 %1208, label %1209, label %1210

1209:                                             ; preds = %1206
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1195) #7
  br label %1210

1210:                                             ; preds = %1188, %1206, %1209
  br i1 %1189, label %1224, label %1211

1211:                                             ; preds = %1210
  %1212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1213 = load atomic i32, i32* %1212 monotonic, align 4
  %1214 = and i32 %1213, 2
  %1215 = icmp eq i32 %1214, 0
  %1216 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1191, i64 0, i32 0
  %1217 = load i32, i32* %1216, align 4
  br i1 %1215, label %1218, label %1220

1218:                                             ; preds = %1211
  %1219 = add i32 %1217, -1
  store i32 %1219, i32* %1216, align 4
  br label %1220

1220:                                             ; preds = %1218, %1211
  %1221 = phi i32 [ %1219, %1218 ], [ %1217, %1211 ]
  %1222 = icmp eq i32 %1221, 0
  br i1 %1222, label %1223, label %1224

1223:                                             ; preds = %1220
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1191) #7
  br label %1224

1224:                                             ; preds = %1210, %1220, %1223
  %1225 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1226 = load i8*, i8** %1225, align 8
  store i8* null, i8** %1225, align 8
  %1227 = icmp eq i8* %1226, null
  br i1 %1227, label %1229, label %1228

1228:                                             ; preds = %1224
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1226) #7
  br label %1229

1229:                                             ; preds = %1228, %1224
  %1230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1132, align 8
  %1231 = icmp eq %"class.WTF::StringImpl"* %1230, null
  br i1 %1231, label %1245, label %1232

1232:                                             ; preds = %1229
  %1233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1230, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1234 = load atomic i32, i32* %1233 monotonic, align 4
  %1235 = and i32 %1234, 2
  %1236 = icmp eq i32 %1235, 0
  %1237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1230, i64 0, i32 0
  %1238 = load i32, i32* %1237, align 4
  br i1 %1236, label %1239, label %1241

1239:                                             ; preds = %1232
  %1240 = add i32 %1238, -1
  store i32 %1240, i32* %1237, align 4
  br label %1241

1241:                                             ; preds = %1239, %1232
  %1242 = phi i32 [ %1240, %1239 ], [ %1238, %1232 ]
  %1243 = icmp eq i32 %1242, 0
  br i1 %1243, label %1244, label %1245

1244:                                             ; preds = %1241
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1230) #7
  br label %1245

1245:                                             ; preds = %1229, %1241, %1244
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1129) #7
  br label %1268

1246:                                             ; preds = %1128
  %1247 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %12, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1248 = load i8*, i8** %1247, align 8
  store i8* null, i8** %1247, align 8
  %1249 = icmp eq i8* %1248, null
  br i1 %1249, label %1251, label %1250

1250:                                             ; preds = %1246
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1248) #7
  br label %1251

1251:                                             ; preds = %1250, %1246
  %1252 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1132, align 8
  %1253 = icmp eq %"class.WTF::StringImpl"* %1252, null
  br i1 %1253, label %1267, label %1254

1254:                                             ; preds = %1251
  %1255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1252, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1256 = load atomic i32, i32* %1255 monotonic, align 4
  %1257 = and i32 %1256, 2
  %1258 = icmp eq i32 %1257, 0
  %1259 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1252, i64 0, i32 0
  %1260 = load i32, i32* %1259, align 4
  br i1 %1258, label %1261, label %1263

1261:                                             ; preds = %1254
  %1262 = add i32 %1260, -1
  store i32 %1262, i32* %1259, align 4
  br label %1263

1263:                                             ; preds = %1261, %1254
  %1264 = phi i32 [ %1262, %1261 ], [ %1260, %1254 ]
  %1265 = icmp eq i32 %1264, 0
  br i1 %1265, label %1266, label %1267

1266:                                             ; preds = %1263
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1252) #7
  br label %1267

1267:                                             ; preds = %1251, %1263, %1266
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1129) #7
  br label %1945

1268:                                             ; preds = %1245, %1122
  %1269 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 8, i32 0
  %1270 = bitcast %"class.v8::Name"** %1269 to %"class.v8::Value"**
  %1271 = load %"class.v8::Value"*, %"class.v8::Value"** %1270, align 8
  %1272 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %1271) #7
  %1273 = icmp eq %"class.v8::Value"* %1272, null
  br i1 %1273, label %1274, label %1280

1274:                                             ; preds = %1268
  %1275 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1276 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1277 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1276, align 8
  %1278 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1277, i64 5
  %1279 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1278, align 8
  call void %1279(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1275) #7
  br label %1945

1280:                                             ; preds = %1268
  %1281 = bitcast %"class.v8::Value"* %1272 to i64*
  %1282 = load i64, i64* %1281, align 8
  %1283 = and i64 %1282, 3
  %1284 = icmp eq i64 %1283, 1
  br i1 %1284, label %1285, label %1302

1285:                                             ; preds = %1280
  %1286 = add i64 %1282, -1
  %1287 = inttoptr i64 %1286 to i32*
  %1288 = load i32, i32* %1287, align 4
  %1289 = and i64 %1282, -4294967296
  %1290 = zext i32 %1288 to i64
  %1291 = or i64 %1289, %1290
  %1292 = add i64 %1291, 7
  %1293 = inttoptr i64 %1292 to i16*
  %1294 = load i16, i16* %1293, align 2
  %1295 = icmp eq i16 %1294, 67
  br i1 %1295, label %1296, label %1302

1296:                                             ; preds = %1285
  %1297 = add i64 %1282, 23
  %1298 = inttoptr i64 %1297 to i32*
  %1299 = load i32, i32* %1298, align 4
  %1300 = and i32 %1299, -2
  %1301 = icmp eq i32 %1300, 10
  br i1 %1301, label %1442, label %1302

1302:                                             ; preds = %1285, %1280, %1296
  %1303 = bitcast %"class.blink::V8StringResource"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1303) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1303, i8 -86, i64 152, i1 false)
  %1304 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1272, %"class.v8::Value"** %1304, align 8
  %1305 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 1
  store i32 0, i32* %1305, align 8
  %1306 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1306, align 8
  %1307 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1
  %1308 = bitcast %"class.std::__1::unique_ptr"* %1307 to i64*
  store i64 0, i64* %1308, align 8
  %1309 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %13, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1309, label %1310, label %1420

1310:                                             ; preds = %1302
  %1311 = load %"class.v8::Value"*, %"class.v8::Value"** %1304, align 8
  %1312 = icmp eq %"class.v8::Value"* %1311, null
  br i1 %1312, label %1313, label %1337, !prof !2

1313:                                             ; preds = %1310
  %1314 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1306, align 8
  %1315 = icmp eq %"class.WTF::StringImpl"* %1314, null
  br i1 %1315, label %1316, label %1318

1316:                                             ; preds = %1313
  %1317 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 9
  br label %1362

1318:                                             ; preds = %1313
  %1319 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1314, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1320 = load atomic i32, i32* %1319 monotonic, align 4
  %1321 = and i32 %1320, 2
  %1322 = icmp eq i32 %1321, 0
  br i1 %1322, label %1323, label %1335

1323:                                             ; preds = %1318
  %1324 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1314, i64 0, i32 0
  %1325 = load i32, i32* %1324, align 4
  %1326 = zext i32 %1325 to i33
  %1327 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1326, i33 1) #7
  %1328 = extractvalue { i33, i1 } %1327, 1
  %1329 = extractvalue { i33, i1 } %1327, 0
  %1330 = icmp slt i33 %1329, 0
  %1331 = or i1 %1328, %1330
  br i1 %1331, label %1332, label %1333, !prof !2

1332:                                             ; preds = %1323
  call void @llvm.trap() #7
  unreachable

1333:                                             ; preds = %1323
  %1334 = trunc i33 %1329 to i32
  store i32 %1334, i32* %1324, align 4
  br label %1335

1335:                                             ; preds = %1318, %1333
  %1336 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 9
  br label %1343

1337:                                             ; preds = %1310
  %1338 = bitcast %"class.v8::Value"* %1311 to %"class.v8::String"*
  %1339 = load i32, i32* %1305, align 8
  %1340 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1338, i32 %1339) #7
  %1341 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 9
  %1342 = icmp eq %"class.WTF::StringImpl"* %1340, null
  br i1 %1342, label %1362, label %1343

1343:                                             ; preds = %1335, %1337
  %1344 = phi %"class.WTF::String"* [ %1336, %1335 ], [ %1341, %1337 ]
  %1345 = phi %"class.WTF::StringImpl"* [ %1314, %1335 ], [ %1340, %1337 ]
  %1346 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1345, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1347 = load atomic i32, i32* %1346 monotonic, align 4
  %1348 = and i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  br i1 %1349, label %1350, label %1362

1350:                                             ; preds = %1343
  %1351 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1345, i64 0, i32 0
  %1352 = load i32, i32* %1351, align 4
  %1353 = zext i32 %1352 to i33
  %1354 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1353, i33 1) #7
  %1355 = extractvalue { i33, i1 } %1354, 1
  %1356 = extractvalue { i33, i1 } %1354, 0
  %1357 = icmp slt i33 %1356, 0
  %1358 = or i1 %1355, %1357
  br i1 %1358, label %1359, label %1360, !prof !2

1359:                                             ; preds = %1350
  call void @llvm.trap() #7
  unreachable

1360:                                             ; preds = %1350
  %1361 = trunc i33 %1356 to i32
  store i32 %1361, i32* %1351, align 4
  br label %1362

1362:                                             ; preds = %1316, %1360, %1343, %1337
  %1363 = phi i1 [ false, %1360 ], [ false, %1343 ], [ true, %1337 ], [ true, %1316 ]
  %1364 = phi %"class.WTF::String"* [ %1344, %1360 ], [ %1344, %1343 ], [ %1341, %1337 ], [ %1317, %1316 ]
  %1365 = phi %"class.WTF::StringImpl"* [ %1345, %1360 ], [ %1345, %1343 ], [ null, %1337 ], [ null, %1316 ]
  %1366 = ptrtoint %"class.WTF::StringImpl"* %1365 to i64
  %1367 = bitcast %"class.WTF::String"* %1364 to i64*
  %1368 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1364, i64 0, i32 0, i32 0
  %1369 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1368, align 8
  store i64 %1366, i64* %1367, align 8
  %1370 = icmp eq %"class.WTF::StringImpl"* %1369, null
  br i1 %1370, label %1384, label %1371

1371:                                             ; preds = %1362
  %1372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1369, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1373 = load atomic i32, i32* %1372 monotonic, align 4
  %1374 = and i32 %1373, 2
  %1375 = icmp eq i32 %1374, 0
  %1376 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1369, i64 0, i32 0
  %1377 = load i32, i32* %1376, align 4
  br i1 %1375, label %1378, label %1380

1378:                                             ; preds = %1371
  %1379 = add i32 %1377, -1
  store i32 %1379, i32* %1376, align 4
  br label %1380

1380:                                             ; preds = %1378, %1371
  %1381 = phi i32 [ %1379, %1378 ], [ %1377, %1371 ]
  %1382 = icmp eq i32 %1381, 0
  br i1 %1382, label %1383, label %1384

1383:                                             ; preds = %1380
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1369) #7
  br label %1384

1384:                                             ; preds = %1362, %1380, %1383
  br i1 %1363, label %1398, label %1385

1385:                                             ; preds = %1384
  %1386 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1365, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1387 = load atomic i32, i32* %1386 monotonic, align 4
  %1388 = and i32 %1387, 2
  %1389 = icmp eq i32 %1388, 0
  %1390 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1365, i64 0, i32 0
  %1391 = load i32, i32* %1390, align 4
  br i1 %1389, label %1392, label %1394

1392:                                             ; preds = %1385
  %1393 = add i32 %1391, -1
  store i32 %1393, i32* %1390, align 4
  br label %1394

1394:                                             ; preds = %1392, %1385
  %1395 = phi i32 [ %1393, %1392 ], [ %1391, %1385 ]
  %1396 = icmp eq i32 %1395, 0
  br i1 %1396, label %1397, label %1398

1397:                                             ; preds = %1394
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1365) #7
  br label %1398

1398:                                             ; preds = %1384, %1394, %1397
  %1399 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1400 = load i8*, i8** %1399, align 8
  store i8* null, i8** %1399, align 8
  %1401 = icmp eq i8* %1400, null
  br i1 %1401, label %1403, label %1402

1402:                                             ; preds = %1398
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1400) #7
  br label %1403

1403:                                             ; preds = %1402, %1398
  %1404 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1306, align 8
  %1405 = icmp eq %"class.WTF::StringImpl"* %1404, null
  br i1 %1405, label %1419, label %1406

1406:                                             ; preds = %1403
  %1407 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1404, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1408 = load atomic i32, i32* %1407 monotonic, align 4
  %1409 = and i32 %1408, 2
  %1410 = icmp eq i32 %1409, 0
  %1411 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1404, i64 0, i32 0
  %1412 = load i32, i32* %1411, align 4
  br i1 %1410, label %1413, label %1415

1413:                                             ; preds = %1406
  %1414 = add i32 %1412, -1
  store i32 %1414, i32* %1411, align 4
  br label %1415

1415:                                             ; preds = %1413, %1406
  %1416 = phi i32 [ %1414, %1413 ], [ %1412, %1406 ]
  %1417 = icmp eq i32 %1416, 0
  br i1 %1417, label %1418, label %1419

1418:                                             ; preds = %1415
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1404) #7
  br label %1419

1419:                                             ; preds = %1403, %1415, %1418
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1303) #7
  br label %1442

1420:                                             ; preds = %1302
  %1421 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %13, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1422 = load i8*, i8** %1421, align 8
  store i8* null, i8** %1421, align 8
  %1423 = icmp eq i8* %1422, null
  br i1 %1423, label %1425, label %1424

1424:                                             ; preds = %1420
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1422) #7
  br label %1425

1425:                                             ; preds = %1424, %1420
  %1426 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1306, align 8
  %1427 = icmp eq %"class.WTF::StringImpl"* %1426, null
  br i1 %1427, label %1441, label %1428

1428:                                             ; preds = %1425
  %1429 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1426, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1430 = load atomic i32, i32* %1429 monotonic, align 4
  %1431 = and i32 %1430, 2
  %1432 = icmp eq i32 %1431, 0
  %1433 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1426, i64 0, i32 0
  %1434 = load i32, i32* %1433, align 4
  br i1 %1432, label %1435, label %1437

1435:                                             ; preds = %1428
  %1436 = add i32 %1434, -1
  store i32 %1436, i32* %1433, align 4
  br label %1437

1437:                                             ; preds = %1435, %1428
  %1438 = phi i32 [ %1436, %1435 ], [ %1434, %1428 ]
  %1439 = icmp eq i32 %1438, 0
  br i1 %1439, label %1440, label %1441

1440:                                             ; preds = %1437
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1426) #7
  br label %1441

1441:                                             ; preds = %1425, %1437, %1440
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1303) #7
  br label %1945

1442:                                             ; preds = %1419, %1296
  %1443 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 9, i32 0
  %1444 = bitcast %"class.v8::Name"** %1443 to %"class.v8::Value"**
  %1445 = load %"class.v8::Value"*, %"class.v8::Value"** %1444, align 8
  %1446 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %1445) #7
  %1447 = icmp eq %"class.v8::Value"* %1446, null
  br i1 %1447, label %1448, label %1454

1448:                                             ; preds = %1442
  %1449 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1450 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1451 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1450, align 8
  %1452 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1451, i64 5
  %1453 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1452, align 8
  call void %1453(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1449) #7
  br label %1945

1454:                                             ; preds = %1442
  %1455 = bitcast %"class.v8::Value"* %1446 to i64*
  %1456 = load i64, i64* %1455, align 8
  %1457 = and i64 %1456, 3
  %1458 = icmp eq i64 %1457, 1
  br i1 %1458, label %1459, label %1476

1459:                                             ; preds = %1454
  %1460 = add i64 %1456, -1
  %1461 = inttoptr i64 %1460 to i32*
  %1462 = load i32, i32* %1461, align 4
  %1463 = and i64 %1456, -4294967296
  %1464 = zext i32 %1462 to i64
  %1465 = or i64 %1463, %1464
  %1466 = add i64 %1465, 7
  %1467 = inttoptr i64 %1466 to i16*
  %1468 = load i16, i16* %1467, align 2
  %1469 = icmp eq i16 %1468, 67
  br i1 %1469, label %1470, label %1476

1470:                                             ; preds = %1459
  %1471 = add i64 %1456, 23
  %1472 = inttoptr i64 %1471 to i32*
  %1473 = load i32, i32* %1472, align 4
  %1474 = and i32 %1473, -2
  %1475 = icmp eq i32 %1474, 10
  br i1 %1475, label %1616, label %1476

1476:                                             ; preds = %1459, %1454, %1470
  %1477 = bitcast %"class.blink::V8StringResource"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1477) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1477, i8 -86, i64 152, i1 false)
  %1478 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1446, %"class.v8::Value"** %1478, align 8
  %1479 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 1
  store i32 0, i32* %1479, align 8
  %1480 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1480, align 8
  %1481 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1
  %1482 = bitcast %"class.std::__1::unique_ptr"* %1481 to i64*
  store i64 0, i64* %1482, align 8
  %1483 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %14, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1483, label %1484, label %1594

1484:                                             ; preds = %1476
  %1485 = load %"class.v8::Value"*, %"class.v8::Value"** %1478, align 8
  %1486 = icmp eq %"class.v8::Value"* %1485, null
  br i1 %1486, label %1487, label %1511, !prof !2

1487:                                             ; preds = %1484
  %1488 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1480, align 8
  %1489 = icmp eq %"class.WTF::StringImpl"* %1488, null
  br i1 %1489, label %1490, label %1492

1490:                                             ; preds = %1487
  %1491 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 10
  br label %1536

1492:                                             ; preds = %1487
  %1493 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1488, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1494 = load atomic i32, i32* %1493 monotonic, align 4
  %1495 = and i32 %1494, 2
  %1496 = icmp eq i32 %1495, 0
  br i1 %1496, label %1497, label %1509

1497:                                             ; preds = %1492
  %1498 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1488, i64 0, i32 0
  %1499 = load i32, i32* %1498, align 4
  %1500 = zext i32 %1499 to i33
  %1501 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1500, i33 1) #7
  %1502 = extractvalue { i33, i1 } %1501, 1
  %1503 = extractvalue { i33, i1 } %1501, 0
  %1504 = icmp slt i33 %1503, 0
  %1505 = or i1 %1502, %1504
  br i1 %1505, label %1506, label %1507, !prof !2

1506:                                             ; preds = %1497
  call void @llvm.trap() #7
  unreachable

1507:                                             ; preds = %1497
  %1508 = trunc i33 %1503 to i32
  store i32 %1508, i32* %1498, align 4
  br label %1509

1509:                                             ; preds = %1492, %1507
  %1510 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 10
  br label %1517

1511:                                             ; preds = %1484
  %1512 = bitcast %"class.v8::Value"* %1485 to %"class.v8::String"*
  %1513 = load i32, i32* %1479, align 8
  %1514 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1512, i32 %1513) #7
  %1515 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 10
  %1516 = icmp eq %"class.WTF::StringImpl"* %1514, null
  br i1 %1516, label %1536, label %1517

1517:                                             ; preds = %1509, %1511
  %1518 = phi %"class.WTF::String"* [ %1510, %1509 ], [ %1515, %1511 ]
  %1519 = phi %"class.WTF::StringImpl"* [ %1488, %1509 ], [ %1514, %1511 ]
  %1520 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1519, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1521 = load atomic i32, i32* %1520 monotonic, align 4
  %1522 = and i32 %1521, 2
  %1523 = icmp eq i32 %1522, 0
  br i1 %1523, label %1524, label %1536

1524:                                             ; preds = %1517
  %1525 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1519, i64 0, i32 0
  %1526 = load i32, i32* %1525, align 4
  %1527 = zext i32 %1526 to i33
  %1528 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1527, i33 1) #7
  %1529 = extractvalue { i33, i1 } %1528, 1
  %1530 = extractvalue { i33, i1 } %1528, 0
  %1531 = icmp slt i33 %1530, 0
  %1532 = or i1 %1529, %1531
  br i1 %1532, label %1533, label %1534, !prof !2

1533:                                             ; preds = %1524
  call void @llvm.trap() #7
  unreachable

1534:                                             ; preds = %1524
  %1535 = trunc i33 %1530 to i32
  store i32 %1535, i32* %1525, align 4
  br label %1536

1536:                                             ; preds = %1490, %1534, %1517, %1511
  %1537 = phi i1 [ false, %1534 ], [ false, %1517 ], [ true, %1511 ], [ true, %1490 ]
  %1538 = phi %"class.WTF::String"* [ %1518, %1534 ], [ %1518, %1517 ], [ %1515, %1511 ], [ %1491, %1490 ]
  %1539 = phi %"class.WTF::StringImpl"* [ %1519, %1534 ], [ %1519, %1517 ], [ null, %1511 ], [ null, %1490 ]
  %1540 = ptrtoint %"class.WTF::StringImpl"* %1539 to i64
  %1541 = bitcast %"class.WTF::String"* %1538 to i64*
  %1542 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1538, i64 0, i32 0, i32 0
  %1543 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1542, align 8
  store i64 %1540, i64* %1541, align 8
  %1544 = icmp eq %"class.WTF::StringImpl"* %1543, null
  br i1 %1544, label %1558, label %1545

1545:                                             ; preds = %1536
  %1546 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1543, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1547 = load atomic i32, i32* %1546 monotonic, align 4
  %1548 = and i32 %1547, 2
  %1549 = icmp eq i32 %1548, 0
  %1550 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1543, i64 0, i32 0
  %1551 = load i32, i32* %1550, align 4
  br i1 %1549, label %1552, label %1554

1552:                                             ; preds = %1545
  %1553 = add i32 %1551, -1
  store i32 %1553, i32* %1550, align 4
  br label %1554

1554:                                             ; preds = %1552, %1545
  %1555 = phi i32 [ %1553, %1552 ], [ %1551, %1545 ]
  %1556 = icmp eq i32 %1555, 0
  br i1 %1556, label %1557, label %1558

1557:                                             ; preds = %1554
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1543) #7
  br label %1558

1558:                                             ; preds = %1536, %1554, %1557
  br i1 %1537, label %1572, label %1559

1559:                                             ; preds = %1558
  %1560 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1539, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1561 = load atomic i32, i32* %1560 monotonic, align 4
  %1562 = and i32 %1561, 2
  %1563 = icmp eq i32 %1562, 0
  %1564 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1539, i64 0, i32 0
  %1565 = load i32, i32* %1564, align 4
  br i1 %1563, label %1566, label %1568

1566:                                             ; preds = %1559
  %1567 = add i32 %1565, -1
  store i32 %1567, i32* %1564, align 4
  br label %1568

1568:                                             ; preds = %1566, %1559
  %1569 = phi i32 [ %1567, %1566 ], [ %1565, %1559 ]
  %1570 = icmp eq i32 %1569, 0
  br i1 %1570, label %1571, label %1572

1571:                                             ; preds = %1568
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1539) #7
  br label %1572

1572:                                             ; preds = %1558, %1568, %1571
  %1573 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1574 = load i8*, i8** %1573, align 8
  store i8* null, i8** %1573, align 8
  %1575 = icmp eq i8* %1574, null
  br i1 %1575, label %1577, label %1576

1576:                                             ; preds = %1572
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1574) #7
  br label %1577

1577:                                             ; preds = %1576, %1572
  %1578 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1480, align 8
  %1579 = icmp eq %"class.WTF::StringImpl"* %1578, null
  br i1 %1579, label %1593, label %1580

1580:                                             ; preds = %1577
  %1581 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1578, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1582 = load atomic i32, i32* %1581 monotonic, align 4
  %1583 = and i32 %1582, 2
  %1584 = icmp eq i32 %1583, 0
  %1585 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1578, i64 0, i32 0
  %1586 = load i32, i32* %1585, align 4
  br i1 %1584, label %1587, label %1589

1587:                                             ; preds = %1580
  %1588 = add i32 %1586, -1
  store i32 %1588, i32* %1585, align 4
  br label %1589

1589:                                             ; preds = %1587, %1580
  %1590 = phi i32 [ %1588, %1587 ], [ %1586, %1580 ]
  %1591 = icmp eq i32 %1590, 0
  br i1 %1591, label %1592, label %1593

1592:                                             ; preds = %1589
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1578) #7
  br label %1593

1593:                                             ; preds = %1577, %1589, %1592
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1477) #7
  br label %1616

1594:                                             ; preds = %1476
  %1595 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %14, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1596 = load i8*, i8** %1595, align 8
  store i8* null, i8** %1595, align 8
  %1597 = icmp eq i8* %1596, null
  br i1 %1597, label %1599, label %1598

1598:                                             ; preds = %1594
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1596) #7
  br label %1599

1599:                                             ; preds = %1598, %1594
  %1600 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1480, align 8
  %1601 = icmp eq %"class.WTF::StringImpl"* %1600, null
  br i1 %1601, label %1615, label %1602

1602:                                             ; preds = %1599
  %1603 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1600, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1604 = load atomic i32, i32* %1603 monotonic, align 4
  %1605 = and i32 %1604, 2
  %1606 = icmp eq i32 %1605, 0
  %1607 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1600, i64 0, i32 0
  %1608 = load i32, i32* %1607, align 4
  br i1 %1606, label %1609, label %1611

1609:                                             ; preds = %1602
  %1610 = add i32 %1608, -1
  store i32 %1610, i32* %1607, align 4
  br label %1611

1611:                                             ; preds = %1609, %1602
  %1612 = phi i32 [ %1610, %1609 ], [ %1608, %1602 ]
  %1613 = icmp eq i32 %1612, 0
  br i1 %1613, label %1614, label %1615

1614:                                             ; preds = %1611
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1600) #7
  br label %1615

1615:                                             ; preds = %1599, %1611, %1614
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1477) #7
  br label %1945

1616:                                             ; preds = %1593, %1470
  %1617 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 10, i32 0
  %1618 = bitcast %"class.v8::Name"** %1617 to %"class.v8::Value"**
  %1619 = load %"class.v8::Value"*, %"class.v8::Value"** %1618, align 8
  %1620 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %1619) #7
  %1621 = icmp eq %"class.v8::Value"* %1620, null
  br i1 %1621, label %1622, label %1628

1622:                                             ; preds = %1616
  %1623 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1624 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1625 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1624, align 8
  %1626 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1625, i64 5
  %1627 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1626, align 8
  call void %1627(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1623) #7
  br label %1945

1628:                                             ; preds = %1616
  %1629 = bitcast %"class.v8::Value"* %1620 to i64*
  %1630 = load i64, i64* %1629, align 8
  %1631 = and i64 %1630, 3
  %1632 = icmp eq i64 %1631, 1
  br i1 %1632, label %1633, label %1650

1633:                                             ; preds = %1628
  %1634 = add i64 %1630, -1
  %1635 = inttoptr i64 %1634 to i32*
  %1636 = load i32, i32* %1635, align 4
  %1637 = and i64 %1630, -4294967296
  %1638 = zext i32 %1636 to i64
  %1639 = or i64 %1637, %1638
  %1640 = add i64 %1639, 7
  %1641 = inttoptr i64 %1640 to i16*
  %1642 = load i16, i16* %1641, align 2
  %1643 = icmp eq i16 %1642, 67
  br i1 %1643, label %1644, label %1650

1644:                                             ; preds = %1633
  %1645 = add i64 %1630, 23
  %1646 = inttoptr i64 %1645 to i32*
  %1647 = load i32, i32* %1646, align 4
  %1648 = and i32 %1647, -2
  %1649 = icmp eq i32 %1648, 10
  br i1 %1649, label %1790, label %1650

1650:                                             ; preds = %1633, %1628, %1644
  %1651 = bitcast %"class.blink::V8StringResource"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1651) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1651, i8 -86, i64 152, i1 false)
  %1652 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1620, %"class.v8::Value"** %1652, align 8
  %1653 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 1
  store i32 0, i32* %1653, align 8
  %1654 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1654, align 8
  %1655 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1
  %1656 = bitcast %"class.std::__1::unique_ptr"* %1655 to i64*
  store i64 0, i64* %1656, align 8
  %1657 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %15, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1657, label %1658, label %1768

1658:                                             ; preds = %1650
  %1659 = load %"class.v8::Value"*, %"class.v8::Value"** %1652, align 8
  %1660 = icmp eq %"class.v8::Value"* %1659, null
  br i1 %1660, label %1661, label %1685, !prof !2

1661:                                             ; preds = %1658
  %1662 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1654, align 8
  %1663 = icmp eq %"class.WTF::StringImpl"* %1662, null
  br i1 %1663, label %1664, label %1666

1664:                                             ; preds = %1661
  %1665 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 11
  br label %1710

1666:                                             ; preds = %1661
  %1667 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1662, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1668 = load atomic i32, i32* %1667 monotonic, align 4
  %1669 = and i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  br i1 %1670, label %1671, label %1683

1671:                                             ; preds = %1666
  %1672 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1662, i64 0, i32 0
  %1673 = load i32, i32* %1672, align 4
  %1674 = zext i32 %1673 to i33
  %1675 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1674, i33 1) #7
  %1676 = extractvalue { i33, i1 } %1675, 1
  %1677 = extractvalue { i33, i1 } %1675, 0
  %1678 = icmp slt i33 %1677, 0
  %1679 = or i1 %1676, %1678
  br i1 %1679, label %1680, label %1681, !prof !2

1680:                                             ; preds = %1671
  call void @llvm.trap() #7
  unreachable

1681:                                             ; preds = %1671
  %1682 = trunc i33 %1677 to i32
  store i32 %1682, i32* %1672, align 4
  br label %1683

1683:                                             ; preds = %1666, %1681
  %1684 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 11
  br label %1691

1685:                                             ; preds = %1658
  %1686 = bitcast %"class.v8::Value"* %1659 to %"class.v8::String"*
  %1687 = load i32, i32* %1653, align 8
  %1688 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1686, i32 %1687) #7
  %1689 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 11
  %1690 = icmp eq %"class.WTF::StringImpl"* %1688, null
  br i1 %1690, label %1710, label %1691

1691:                                             ; preds = %1683, %1685
  %1692 = phi %"class.WTF::String"* [ %1684, %1683 ], [ %1689, %1685 ]
  %1693 = phi %"class.WTF::StringImpl"* [ %1662, %1683 ], [ %1688, %1685 ]
  %1694 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1693, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1695 = load atomic i32, i32* %1694 monotonic, align 4
  %1696 = and i32 %1695, 2
  %1697 = icmp eq i32 %1696, 0
  br i1 %1697, label %1698, label %1710

1698:                                             ; preds = %1691
  %1699 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1693, i64 0, i32 0
  %1700 = load i32, i32* %1699, align 4
  %1701 = zext i32 %1700 to i33
  %1702 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1701, i33 1) #7
  %1703 = extractvalue { i33, i1 } %1702, 1
  %1704 = extractvalue { i33, i1 } %1702, 0
  %1705 = icmp slt i33 %1704, 0
  %1706 = or i1 %1703, %1705
  br i1 %1706, label %1707, label %1708, !prof !2

1707:                                             ; preds = %1698
  call void @llvm.trap() #7
  unreachable

1708:                                             ; preds = %1698
  %1709 = trunc i33 %1704 to i32
  store i32 %1709, i32* %1699, align 4
  br label %1710

1710:                                             ; preds = %1664, %1708, %1691, %1685
  %1711 = phi i1 [ false, %1708 ], [ false, %1691 ], [ true, %1685 ], [ true, %1664 ]
  %1712 = phi %"class.WTF::String"* [ %1692, %1708 ], [ %1692, %1691 ], [ %1689, %1685 ], [ %1665, %1664 ]
  %1713 = phi %"class.WTF::StringImpl"* [ %1693, %1708 ], [ %1693, %1691 ], [ null, %1685 ], [ null, %1664 ]
  %1714 = ptrtoint %"class.WTF::StringImpl"* %1713 to i64
  %1715 = bitcast %"class.WTF::String"* %1712 to i64*
  %1716 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1712, i64 0, i32 0, i32 0
  %1717 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1716, align 8
  store i64 %1714, i64* %1715, align 8
  %1718 = icmp eq %"class.WTF::StringImpl"* %1717, null
  br i1 %1718, label %1732, label %1719

1719:                                             ; preds = %1710
  %1720 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1717, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1721 = load atomic i32, i32* %1720 monotonic, align 4
  %1722 = and i32 %1721, 2
  %1723 = icmp eq i32 %1722, 0
  %1724 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1717, i64 0, i32 0
  %1725 = load i32, i32* %1724, align 4
  br i1 %1723, label %1726, label %1728

1726:                                             ; preds = %1719
  %1727 = add i32 %1725, -1
  store i32 %1727, i32* %1724, align 4
  br label %1728

1728:                                             ; preds = %1726, %1719
  %1729 = phi i32 [ %1727, %1726 ], [ %1725, %1719 ]
  %1730 = icmp eq i32 %1729, 0
  br i1 %1730, label %1731, label %1732

1731:                                             ; preds = %1728
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1717) #7
  br label %1732

1732:                                             ; preds = %1710, %1728, %1731
  br i1 %1711, label %1746, label %1733

1733:                                             ; preds = %1732
  %1734 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1713, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1735 = load atomic i32, i32* %1734 monotonic, align 4
  %1736 = and i32 %1735, 2
  %1737 = icmp eq i32 %1736, 0
  %1738 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1713, i64 0, i32 0
  %1739 = load i32, i32* %1738, align 4
  br i1 %1737, label %1740, label %1742

1740:                                             ; preds = %1733
  %1741 = add i32 %1739, -1
  store i32 %1741, i32* %1738, align 4
  br label %1742

1742:                                             ; preds = %1740, %1733
  %1743 = phi i32 [ %1741, %1740 ], [ %1739, %1733 ]
  %1744 = icmp eq i32 %1743, 0
  br i1 %1744, label %1745, label %1746

1745:                                             ; preds = %1742
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1713) #7
  br label %1746

1746:                                             ; preds = %1732, %1742, %1745
  %1747 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1748 = load i8*, i8** %1747, align 8
  store i8* null, i8** %1747, align 8
  %1749 = icmp eq i8* %1748, null
  br i1 %1749, label %1751, label %1750

1750:                                             ; preds = %1746
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1748) #7
  br label %1751

1751:                                             ; preds = %1750, %1746
  %1752 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1654, align 8
  %1753 = icmp eq %"class.WTF::StringImpl"* %1752, null
  br i1 %1753, label %1767, label %1754

1754:                                             ; preds = %1751
  %1755 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1752, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1756 = load atomic i32, i32* %1755 monotonic, align 4
  %1757 = and i32 %1756, 2
  %1758 = icmp eq i32 %1757, 0
  %1759 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1752, i64 0, i32 0
  %1760 = load i32, i32* %1759, align 4
  br i1 %1758, label %1761, label %1763

1761:                                             ; preds = %1754
  %1762 = add i32 %1760, -1
  store i32 %1762, i32* %1759, align 4
  br label %1763

1763:                                             ; preds = %1761, %1754
  %1764 = phi i32 [ %1762, %1761 ], [ %1760, %1754 ]
  %1765 = icmp eq i32 %1764, 0
  br i1 %1765, label %1766, label %1767

1766:                                             ; preds = %1763
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1752) #7
  br label %1767

1767:                                             ; preds = %1751, %1763, %1766
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1651) #7
  br label %1790

1768:                                             ; preds = %1650
  %1769 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %15, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1770 = load i8*, i8** %1769, align 8
  store i8* null, i8** %1769, align 8
  %1771 = icmp eq i8* %1770, null
  br i1 %1771, label %1773, label %1772

1772:                                             ; preds = %1768
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1770) #7
  br label %1773

1773:                                             ; preds = %1772, %1768
  %1774 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1654, align 8
  %1775 = icmp eq %"class.WTF::StringImpl"* %1774, null
  br i1 %1775, label %1789, label %1776

1776:                                             ; preds = %1773
  %1777 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1774, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1778 = load atomic i32, i32* %1777 monotonic, align 4
  %1779 = and i32 %1778, 2
  %1780 = icmp eq i32 %1779, 0
  %1781 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1774, i64 0, i32 0
  %1782 = load i32, i32* %1781, align 4
  br i1 %1780, label %1783, label %1785

1783:                                             ; preds = %1776
  %1784 = add i32 %1782, -1
  store i32 %1784, i32* %1781, align 4
  br label %1785

1785:                                             ; preds = %1783, %1776
  %1786 = phi i32 [ %1784, %1783 ], [ %1782, %1776 ]
  %1787 = icmp eq i32 %1786, 0
  br i1 %1787, label %1788, label %1789

1788:                                             ; preds = %1785
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1774) #7
  br label %1789

1789:                                             ; preds = %1773, %1785, %1788
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1651) #7
  br label %1945

1790:                                             ; preds = %1767, %1644
  %1791 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase37is_css_font_face_size_adjust_enabled_E, align 1, !range !3
  %1792 = icmp eq i8 %1791, 0
  br i1 %1792, label %1945, label %1793

1793:                                             ; preds = %1790
  %1794 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %49, i64 5, i32 0
  %1795 = bitcast %"class.v8::Name"** %1794 to %"class.v8::Value"**
  %1796 = load %"class.v8::Value"*, %"class.v8::Value"** %1795, align 8
  %1797 = call %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"* nonnull %43, %"class.v8::Context"* %51, %"class.v8::Value"* %1796) #7
  %1798 = icmp eq %"class.v8::Value"* %1797, null
  br i1 %1798, label %1799, label %1805

1799:                                             ; preds = %1793
  %1800 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %5) #7
  %1801 = bitcast %"class.blink::ExceptionState"* %3 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %1802 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %1801, align 8
  %1803 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1802, i64 5
  %1804 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %1803, align 8
  call void %1804(%"class.blink::ExceptionState"* %3, %"class.v8::Value"* %1800) #7
  br label %1945

1805:                                             ; preds = %1793
  %1806 = bitcast %"class.v8::Value"* %1797 to i64*
  %1807 = load i64, i64* %1806, align 8
  %1808 = and i64 %1807, 3
  %1809 = icmp eq i64 %1808, 1
  br i1 %1809, label %1810, label %1827

1810:                                             ; preds = %1805
  %1811 = add i64 %1807, -1
  %1812 = inttoptr i64 %1811 to i32*
  %1813 = load i32, i32* %1812, align 4
  %1814 = and i64 %1807, -4294967296
  %1815 = zext i32 %1813 to i64
  %1816 = or i64 %1814, %1815
  %1817 = add i64 %1816, 7
  %1818 = inttoptr i64 %1817 to i16*
  %1819 = load i16, i16* %1818, align 2
  %1820 = icmp eq i16 %1819, 67
  br i1 %1820, label %1821, label %1827

1821:                                             ; preds = %1810
  %1822 = add i64 %1807, 23
  %1823 = inttoptr i64 %1822 to i32*
  %1824 = load i32, i32* %1823, align 4
  %1825 = and i32 %1824, -2
  %1826 = icmp eq i32 %1825, 10
  br i1 %1826, label %1945, label %1827

1827:                                             ; preds = %1810, %1805, %1821
  %1828 = bitcast %"class.blink::V8StringResource"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %1828) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1828, i8 -86, i64 152, i1 false)
  %1829 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 0, i32 0
  store %"class.v8::Value"* %1797, %"class.v8::Value"** %1829, align 8
  %1830 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 1
  store i32 0, i32* %1830, align 8
  %1831 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %1831, align 8
  %1832 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 3, i32 1
  %1833 = bitcast %"class.std::__1::unique_ptr"* %1832 to i64*
  store i64 0, i64* %1833, align 8
  %1834 = call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"* nonnull %16, %"class.blink::ExceptionState"* dereferenceable(72) %3)
  br i1 %1834, label %1835, label %1923

1835:                                             ; preds = %1827
  %1836 = load %"class.v8::Value"*, %"class.v8::Value"** %1829, align 8
  %1837 = icmp eq %"class.v8::Value"* %1836, null
  br i1 %1837, label %1838, label %1862, !prof !2

1838:                                             ; preds = %1835
  %1839 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1831, align 8
  %1840 = icmp eq %"class.WTF::StringImpl"* %1839, null
  br i1 %1840, label %1841, label %1843

1841:                                             ; preds = %1838
  %1842 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 6
  br label %1887

1843:                                             ; preds = %1838
  %1844 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1839, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1845 = load atomic i32, i32* %1844 monotonic, align 4
  %1846 = and i32 %1845, 2
  %1847 = icmp eq i32 %1846, 0
  br i1 %1847, label %1848, label %1860

1848:                                             ; preds = %1843
  %1849 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1839, i64 0, i32 0
  %1850 = load i32, i32* %1849, align 4
  %1851 = zext i32 %1850 to i33
  %1852 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1851, i33 1) #7
  %1853 = extractvalue { i33, i1 } %1852, 1
  %1854 = extractvalue { i33, i1 } %1852, 0
  %1855 = icmp slt i33 %1854, 0
  %1856 = or i1 %1853, %1855
  br i1 %1856, label %1857, label %1858, !prof !2

1857:                                             ; preds = %1848
  call void @llvm.trap() #7
  unreachable

1858:                                             ; preds = %1848
  %1859 = trunc i33 %1854 to i32
  store i32 %1859, i32* %1849, align 4
  br label %1860

1860:                                             ; preds = %1843, %1858
  %1861 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 6
  br label %1868

1862:                                             ; preds = %1835
  %1863 = bitcast %"class.v8::Value"* %1836 to %"class.v8::String"*
  %1864 = load i32, i32* %1830, align 8
  %1865 = call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"* nonnull %1863, i32 %1864) #7
  %1866 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %2, i64 0, i32 6
  %1867 = icmp eq %"class.WTF::StringImpl"* %1865, null
  br i1 %1867, label %1887, label %1868

1868:                                             ; preds = %1860, %1862
  %1869 = phi %"class.WTF::String"* [ %1861, %1860 ], [ %1866, %1862 ]
  %1870 = phi %"class.WTF::StringImpl"* [ %1839, %1860 ], [ %1865, %1862 ]
  %1871 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1870, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1872 = load atomic i32, i32* %1871 monotonic, align 4
  %1873 = and i32 %1872, 2
  %1874 = icmp eq i32 %1873, 0
  br i1 %1874, label %1875, label %1887

1875:                                             ; preds = %1868
  %1876 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1870, i64 0, i32 0
  %1877 = load i32, i32* %1876, align 4
  %1878 = zext i32 %1877 to i33
  %1879 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %1878, i33 1) #7
  %1880 = extractvalue { i33, i1 } %1879, 1
  %1881 = extractvalue { i33, i1 } %1879, 0
  %1882 = icmp slt i33 %1881, 0
  %1883 = or i1 %1880, %1882
  br i1 %1883, label %1884, label %1885, !prof !2

1884:                                             ; preds = %1875
  call void @llvm.trap() #7
  unreachable

1885:                                             ; preds = %1875
  %1886 = trunc i33 %1881 to i32
  store i32 %1886, i32* %1876, align 4
  br label %1887

1887:                                             ; preds = %1841, %1885, %1868, %1862
  %1888 = phi i1 [ false, %1885 ], [ false, %1868 ], [ true, %1862 ], [ true, %1841 ]
  %1889 = phi %"class.WTF::String"* [ %1869, %1885 ], [ %1869, %1868 ], [ %1866, %1862 ], [ %1842, %1841 ]
  %1890 = phi %"class.WTF::StringImpl"* [ %1870, %1885 ], [ %1870, %1868 ], [ null, %1862 ], [ null, %1841 ]
  %1891 = ptrtoint %"class.WTF::StringImpl"* %1890 to i64
  %1892 = bitcast %"class.WTF::String"* %1889 to i64*
  %1893 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1889, i64 0, i32 0, i32 0
  %1894 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1893, align 8
  store i64 %1891, i64* %1892, align 8
  %1895 = icmp eq %"class.WTF::StringImpl"* %1894, null
  br i1 %1895, label %1909, label %1896

1896:                                             ; preds = %1887
  %1897 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1894, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1898 = load atomic i32, i32* %1897 monotonic, align 4
  %1899 = and i32 %1898, 2
  %1900 = icmp eq i32 %1899, 0
  %1901 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1894, i64 0, i32 0
  %1902 = load i32, i32* %1901, align 4
  br i1 %1900, label %1903, label %1905

1903:                                             ; preds = %1896
  %1904 = add i32 %1902, -1
  store i32 %1904, i32* %1901, align 4
  br label %1905

1905:                                             ; preds = %1903, %1896
  %1906 = phi i32 [ %1904, %1903 ], [ %1902, %1896 ]
  %1907 = icmp eq i32 %1906, 0
  br i1 %1907, label %1908, label %1909

1908:                                             ; preds = %1905
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1894) #7
  br label %1909

1909:                                             ; preds = %1887, %1905, %1908
  br i1 %1888, label %1923, label %1910

1910:                                             ; preds = %1909
  %1911 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1890, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1912 = load atomic i32, i32* %1911 monotonic, align 4
  %1913 = and i32 %1912, 2
  %1914 = icmp eq i32 %1913, 0
  %1915 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1890, i64 0, i32 0
  %1916 = load i32, i32* %1915, align 4
  br i1 %1914, label %1917, label %1919

1917:                                             ; preds = %1910
  %1918 = add i32 %1916, -1
  store i32 %1918, i32* %1915, align 4
  br label %1919

1919:                                             ; preds = %1917, %1910
  %1920 = phi i32 [ %1918, %1917 ], [ %1916, %1910 ]
  %1921 = icmp eq i32 %1920, 0
  br i1 %1921, label %1922, label %1923

1922:                                             ; preds = %1919
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1890) #7
  br label %1923

1923:                                             ; preds = %1922, %1919, %1909, %1827
  %1924 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %16, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %1925 = load i8*, i8** %1924, align 8
  store i8* null, i8** %1924, align 8
  %1926 = icmp eq i8* %1925, null
  br i1 %1926, label %1928, label %1927

1927:                                             ; preds = %1923
  call void @_ZN3WTF10Partitions10BufferFreeEPv(i8* nonnull %1925) #7
  br label %1928

1928:                                             ; preds = %1927, %1923
  %1929 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1831, align 8
  %1930 = icmp eq %"class.WTF::StringImpl"* %1929, null
  br i1 %1930, label %1944, label %1931

1931:                                             ; preds = %1928
  %1932 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1929, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %1933 = load atomic i32, i32* %1932 monotonic, align 4
  %1934 = and i32 %1933, 2
  %1935 = icmp eq i32 %1934, 0
  %1936 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1929, i64 0, i32 0
  %1937 = load i32, i32* %1936, align 4
  br i1 %1935, label %1938, label %1940

1938:                                             ; preds = %1931
  %1939 = add i32 %1937, -1
  store i32 %1939, i32* %1936, align 4
  br label %1940

1940:                                             ; preds = %1938, %1931
  %1941 = phi i32 [ %1939, %1938 ], [ %1937, %1931 ]
  %1942 = icmp eq i32 %1941, 0
  br i1 %1942, label %1943, label %1944

1943:                                             ; preds = %1940
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1929) #7
  br label %1944

1944:                                             ; preds = %1928, %1940, %1943
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %1828) #7
  br label %1945

1945:                                             ; preds = %1790, %230, %397, %578, %745, %926, %1093, %1274, %1441, %1622, %1789, %1944, %1821, %1799, %1615, %1448, %1267, %1100, %919, %752, %571, %404, %223, %56
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %50) #7
  br label %1946

1946:                                             ; preds = %34, %34, %4, %1945, %41
  ret void
}

declare zeroext i1 @_ZNK2v85Value8IsObjectEv(%"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink14ExceptionState14ThrowTypeErrorEPKc(%"class.blink::ExceptionState"*, i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"*, %"class.v8::Isolate"*) unnamed_addr #1

declare %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZN2v86Object3GetENS_5LocalINS_7ContextEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Value"*) local_unnamed_addr #1

declare %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE7PrepareERNS_14ExceptionStateE(%"class.blink::V8StringResource"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.v8::TryCatch", align 8
  %4 = tail call zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"* %0)
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #7
  %7 = bitcast %"class.v8::TryCatch"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 48, i1 false) #7
  call void @_ZN2v88TryCatchC1EPNS_7IsolateE(%"class.v8::TryCatch"* nonnull %3, %"class.v8::Isolate"* %6) #7
  %8 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %9 = load %"class.v8::Value"*, %"class.v8::Value"** %8, align 8
  %10 = call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %6) #7
  %11 = call %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"* %9, %"class.v8::Context"* %10) #7
  %12 = ptrtoint %"class.v8::String"* %11 to i64
  %13 = bitcast %"class.blink::V8StringResource"* %0 to i64*
  store i64 %12, i64* %13, align 8
  %14 = icmp eq %"class.v8::String"* %11, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %5
  %16 = call %"class.v8::Value"* @_ZNK2v88TryCatch9ExceptionEv(%"class.v8::TryCatch"* nonnull %3) #7
  %17 = bitcast %"class.blink::ExceptionState"* %1 to void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)***
  %18 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)**, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %18, i64 5
  %20 = load void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)*, void (%"class.blink::ExceptionState"*, %"class.v8::Value"*)** %19, align 8
  call void %20(%"class.blink::ExceptionState"* %1, %"class.v8::Value"* %16) #7
  br label %21

21:                                               ; preds = %5, %15
  %22 = phi i1 [ false, %15 ], [ true, %5 ]
  call void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  br label %23

23:                                               ; preds = %21, %2
  %24 = phi i1 [ true, %2 ], [ %22, %21 ]
  ret i1 %24
}

; Function Attrs: nounwind
declare void @_ZN2v88TryCatchD1Ev(%"class.v8::TryCatch"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::Value"* @_ZNK5blink19FontFaceDescriptors8ToV8ImplEN2v85LocalINS1_6ObjectEEEPNS1_7IsolateE(%"class.blink::FontFaceDescriptors"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) unnamed_addr #0 align 2 {
  %4 = tail call %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"* %2) #7
  %5 = tail call zeroext i1 @_ZN5blink23toV8FontFaceDescriptorsEPKNS_19FontFaceDescriptorsEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::FontFaceDescriptors"* %0, %"class.v8::Object"* %4, %"class.v8::Object"* undef, %"class.v8::Isolate"* %2)
  %6 = bitcast %"class.v8::Object"* %4 to %"class.v8::Value"*
  %7 = ptrtoint %"class.v8::Isolate"* %2 to i64
  %8 = add i64 %7, 160
  %9 = inttoptr i64 %8 to %"class.v8::Value"*
  %10 = select i1 %5, %"class.v8::Value"* %6, %"class.v8::Value"* %9
  ret %"class.v8::Value"* %10
}

declare %"class.v8::Object"* @_ZN2v86Object3NewEPNS_7IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink23toV8FontFaceDescriptorsEPKNS_19FontFaceDescriptorsEN2v85LocalINS3_6ObjectEEES6_PNS3_7IsolateE(%"class.blink::FontFaceDescriptors"* readonly, %"class.v8::Object"*, %"class.v8::Object"* nocapture readnone, %"class.v8::Isolate"*) local_unnamed_addr #0 {
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = alloca %"class.WTF::StringView", align 8
  %11 = alloca %"class.WTF::StringView", align 8
  %12 = alloca %"class.WTF::StringView", align 8
  %13 = alloca %"class.WTF::StringView", align 8
  %14 = alloca %"class.WTF::StringView", align 8
  %15 = alloca %"class.WTF::StringView", align 8
  %16 = ptrtoint %"class.v8::Isolate"* %3 to i64
  %17 = add i64 %16, 8
  %18 = inttoptr i64 %17 to %"class.blink::V8PerIsolateData"**
  %19 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %18, align 8
  %20 = tail call { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"* %19, i8* bitcast ([11 x i8*]* @_ZZN5blinkL32eternalV8FontFaceDescriptorsKeysEPN2v87IsolateEE5kKeys to i8*), %"class.base::span.312"* dereferenceable(16) bitcast ({ i64, i8** }* @.ref.tmp to %"class.base::span.312"*)) #7
  %21 = extractvalue { i64, %"class.v8::Eternal"* } %20, 1
  %22 = tail call %"class.v8::Context"* @_ZN2v87Isolate17GetCurrentContextEv(%"class.v8::Isolate"* %3) #7
  %23 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 1, i32 0, i32 0
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %23, align 8
  %25 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %25, label %36, label %26

26:                                               ; preds = %4
  %27 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #7
  %28 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 0
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 1
  %32 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  %33 = bitcast i8** %32 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %31, %"class.WTF::StringImpl"** %33, align 8
  %34 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 %30, i32* %34, align 8
  %35 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %5)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #7
  br label %40

36:                                               ; preds = %4
  %37 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %38 = icmp eq %"class.v8::String"* %37, null
  br i1 %38, label %39, label %40, !prof !2

39:                                               ; preds = %36
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %40

40:                                               ; preds = %39, %36, %26
  %41 = phi %"class.v8::String"* [ %35, %26 ], [ %37, %36 ], [ null, %39 ]
  %42 = bitcast %"class.v8::String"* %41 to %"class.v8::Value"*
  %43 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 0, i32 0
  %44 = load %"class.v8::Name"*, %"class.v8::Name"** %43, align 8
  %45 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %44, %"class.v8::Value"* %42) #7
  %46 = trunc i16 %45 to i8
  %47 = icmp ne i8 %46, 0
  %48 = icmp ugt i16 %45, 255
  %49 = and i1 %48, %47
  br i1 %49, label %50, label %334

50:                                               ; preds = %40
  %51 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 2, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %64, label %54

54:                                               ; preds = %50
  %55 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #7
  %56 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %52, %"class.WTF::StringImpl"** %56, align 8
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 1
  %60 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %61 = bitcast i8** %60 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %61, align 8
  %62 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %58, i32* %62, align 8
  %63 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %6)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #7
  br label %68

64:                                               ; preds = %50
  %65 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %66 = icmp eq %"class.v8::String"* %65, null
  br i1 %66, label %67, label %68, !prof !2

67:                                               ; preds = %64
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %68

68:                                               ; preds = %67, %64, %54
  %69 = phi %"class.v8::String"* [ %63, %54 ], [ %65, %64 ], [ null, %67 ]
  %70 = bitcast %"class.v8::String"* %69 to %"class.v8::Value"*
  %71 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 1, i32 0
  %72 = load %"class.v8::Name"*, %"class.v8::Name"** %71, align 8
  %73 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %72, %"class.v8::Value"* %70) #7
  %74 = trunc i16 %73 to i8
  %75 = icmp ne i8 %74, 0
  %76 = icmp ugt i16 %73, 255
  %77 = and i1 %76, %75
  br i1 %77, label %78, label %334

78:                                               ; preds = %68
  %79 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 3, i32 0, i32 0
  %80 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %79, align 8
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %92, label %82

82:                                               ; preds = %78
  %83 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %83) #7
  %84 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 0
  store %"class.WTF::StringImpl"* %80, %"class.WTF::StringImpl"** %84, align 8
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 1
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 1
  %88 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  %89 = bitcast i8** %88 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %87, %"class.WTF::StringImpl"** %89, align 8
  %90 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 %86, i32* %90, align 8
  %91 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %7)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %83) #7
  br label %96

92:                                               ; preds = %78
  %93 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 0, i32 4) #7
  %94 = icmp eq %"class.v8::String"* %93, null
  br i1 %94, label %95, label %96, !prof !2

95:                                               ; preds = %92
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %96

96:                                               ; preds = %95, %92, %82
  %97 = phi %"class.v8::String"* [ %91, %82 ], [ %93, %92 ], [ null, %95 ]
  %98 = bitcast %"class.v8::String"* %97 to %"class.v8::Value"*
  %99 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 2, i32 0
  %100 = load %"class.v8::Name"*, %"class.v8::Name"** %99, align 8
  %101 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %100, %"class.v8::Value"* %98) #7
  %102 = trunc i16 %101 to i8
  %103 = icmp ne i8 %102, 0
  %104 = icmp ugt i16 %101, 255
  %105 = and i1 %104, %103
  br i1 %105, label %106, label %334

106:                                              ; preds = %96
  %107 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 4, i32 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %120, label %110

110:                                              ; preds = %106
  %111 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %111) #7
  %112 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %108, %"class.WTF::StringImpl"** %112, align 8
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 1
  %114 = load i32, i32* %113, align 4
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 1
  %116 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %117 = bitcast i8** %116 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %115, %"class.WTF::StringImpl"** %117, align 8
  %118 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %114, i32* %118, align 8
  %119 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %8)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %111) #7
  br label %124

120:                                              ; preds = %106
  %121 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %122 = icmp eq %"class.v8::String"* %121, null
  br i1 %122, label %123, label %124, !prof !2

123:                                              ; preds = %120
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %124

124:                                              ; preds = %123, %120, %110
  %125 = phi %"class.v8::String"* [ %119, %110 ], [ %121, %120 ], [ null, %123 ]
  %126 = bitcast %"class.v8::String"* %125 to %"class.v8::Value"*
  %127 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 3, i32 0
  %128 = load %"class.v8::Name"*, %"class.v8::Name"** %127, align 8
  %129 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %128, %"class.v8::Value"* %126) #7
  %130 = trunc i16 %129 to i8
  %131 = icmp ne i8 %130, 0
  %132 = icmp ugt i16 %129, 255
  %133 = and i1 %132, %131
  br i1 %133, label %134, label %334

134:                                              ; preds = %124
  %135 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 5, i32 0, i32 0
  %136 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %135, align 8
  %137 = icmp eq %"class.WTF::StringImpl"* %136, null
  br i1 %137, label %148, label %138

138:                                              ; preds = %134
  %139 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %139) #7
  %140 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 0
  store %"class.WTF::StringImpl"* %136, %"class.WTF::StringImpl"** %140, align 8
  %141 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 0, i32 1
  %142 = load i32, i32* %141, align 4
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %136, i64 1
  %144 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  %145 = bitcast i8** %144 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %143, %"class.WTF::StringImpl"** %145, align 8
  %146 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 %142, i32* %146, align 8
  %147 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %9)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %139) #7
  br label %152

148:                                              ; preds = %134
  %149 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %150 = icmp eq %"class.v8::String"* %149, null
  br i1 %150, label %151, label %152, !prof !2

151:                                              ; preds = %148
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %152

152:                                              ; preds = %151, %148, %138
  %153 = phi %"class.v8::String"* [ %147, %138 ], [ %149, %148 ], [ null, %151 ]
  %154 = bitcast %"class.v8::String"* %153 to %"class.v8::Value"*
  %155 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 4, i32 0
  %156 = load %"class.v8::Name"*, %"class.v8::Name"** %155, align 8
  %157 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %156, %"class.v8::Value"* %154) #7
  %158 = trunc i16 %157 to i8
  %159 = icmp ne i8 %158, 0
  %160 = icmp ugt i16 %157, 255
  %161 = and i1 %160, %159
  br i1 %161, label %162, label %334

162:                                              ; preds = %152
  %163 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 7, i32 0, i32 0
  %164 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %163, align 8
  %165 = icmp eq %"class.WTF::StringImpl"* %164, null
  br i1 %165, label %176, label %166

166:                                              ; preds = %162
  %167 = bitcast %"class.WTF::StringView"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %167) #7
  %168 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 0
  store %"class.WTF::StringImpl"* %164, %"class.WTF::StringImpl"** %168, align 8
  %169 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 0, i32 1
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %164, i64 1
  %172 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 1
  %173 = bitcast i8** %172 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %171, %"class.WTF::StringImpl"** %173, align 8
  %174 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %10, i64 0, i32 2
  store i32 %170, i32* %174, align 8
  %175 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %10)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %167) #7
  br label %180

176:                                              ; preds = %162
  %177 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %178 = icmp eq %"class.v8::String"* %177, null
  br i1 %178, label %179, label %180, !prof !2

179:                                              ; preds = %176
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %180

180:                                              ; preds = %179, %176, %166
  %181 = phi %"class.v8::String"* [ %175, %166 ], [ %177, %176 ], [ null, %179 ]
  %182 = bitcast %"class.v8::String"* %181 to %"class.v8::Value"*
  %183 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 6, i32 0
  %184 = load %"class.v8::Name"*, %"class.v8::Name"** %183, align 8
  %185 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %184, %"class.v8::Value"* %182) #7
  %186 = trunc i16 %185 to i8
  %187 = icmp ne i8 %186, 0
  %188 = icmp ugt i16 %185, 255
  %189 = and i1 %188, %187
  br i1 %189, label %190, label %334

190:                                              ; preds = %180
  %191 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 8, i32 0, i32 0
  %192 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %191, align 8
  %193 = icmp eq %"class.WTF::StringImpl"* %192, null
  br i1 %193, label %204, label %194

194:                                              ; preds = %190
  %195 = bitcast %"class.WTF::StringView"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %195) #7
  %196 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 0
  store %"class.WTF::StringImpl"* %192, %"class.WTF::StringImpl"** %196, align 8
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 0, i32 1
  %198 = load i32, i32* %197, align 4
  %199 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %192, i64 1
  %200 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 1
  %201 = bitcast i8** %200 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %199, %"class.WTF::StringImpl"** %201, align 8
  %202 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %11, i64 0, i32 2
  store i32 %198, i32* %202, align 8
  %203 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %11)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %195) #7
  br label %208

204:                                              ; preds = %190
  %205 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %206 = icmp eq %"class.v8::String"* %205, null
  br i1 %206, label %207, label %208, !prof !2

207:                                              ; preds = %204
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %208

208:                                              ; preds = %207, %204, %194
  %209 = phi %"class.v8::String"* [ %203, %194 ], [ %205, %204 ], [ null, %207 ]
  %210 = bitcast %"class.v8::String"* %209 to %"class.v8::Value"*
  %211 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 7, i32 0
  %212 = load %"class.v8::Name"*, %"class.v8::Name"** %211, align 8
  %213 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %212, %"class.v8::Value"* %210) #7
  %214 = trunc i16 %213 to i8
  %215 = icmp ne i8 %214, 0
  %216 = icmp ugt i16 %213, 255
  %217 = and i1 %216, %215
  br i1 %217, label %218, label %334

218:                                              ; preds = %208
  %219 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 9, i32 0, i32 0
  %220 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %219, align 8
  %221 = icmp eq %"class.WTF::StringImpl"* %220, null
  br i1 %221, label %232, label %222

222:                                              ; preds = %218
  %223 = bitcast %"class.WTF::StringView"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %223) #7
  %224 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 0
  store %"class.WTF::StringImpl"* %220, %"class.WTF::StringImpl"** %224, align 8
  %225 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %220, i64 0, i32 1
  %226 = load i32, i32* %225, align 4
  %227 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %220, i64 1
  %228 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 1
  %229 = bitcast i8** %228 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %227, %"class.WTF::StringImpl"** %229, align 8
  %230 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %12, i64 0, i32 2
  store i32 %226, i32* %230, align 8
  %231 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %12)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %223) #7
  br label %236

232:                                              ; preds = %218
  %233 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i32 0, i32 10) #7
  %234 = icmp eq %"class.v8::String"* %233, null
  br i1 %234, label %235, label %236, !prof !2

235:                                              ; preds = %232
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %236

236:                                              ; preds = %235, %232, %222
  %237 = phi %"class.v8::String"* [ %231, %222 ], [ %233, %232 ], [ null, %235 ]
  %238 = bitcast %"class.v8::String"* %237 to %"class.v8::Value"*
  %239 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 8, i32 0
  %240 = load %"class.v8::Name"*, %"class.v8::Name"** %239, align 8
  %241 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %240, %"class.v8::Value"* %238) #7
  %242 = trunc i16 %241 to i8
  %243 = icmp ne i8 %242, 0
  %244 = icmp ugt i16 %241, 255
  %245 = and i1 %244, %243
  br i1 %245, label %246, label %334

246:                                              ; preds = %236
  %247 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 10, i32 0, i32 0
  %248 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %247, align 8
  %249 = icmp eq %"class.WTF::StringImpl"* %248, null
  br i1 %249, label %260, label %250

250:                                              ; preds = %246
  %251 = bitcast %"class.WTF::StringView"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %251) #7
  %252 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 0
  store %"class.WTF::StringImpl"* %248, %"class.WTF::StringImpl"** %252, align 8
  %253 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 0, i32 1
  %254 = load i32, i32* %253, align 4
  %255 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %248, i64 1
  %256 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 1
  %257 = bitcast i8** %256 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %255, %"class.WTF::StringImpl"** %257, align 8
  %258 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %13, i64 0, i32 2
  store i32 %254, i32* %258, align 8
  %259 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %13)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %251) #7
  br label %264

260:                                              ; preds = %246
  %261 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %262 = icmp eq %"class.v8::String"* %261, null
  br i1 %262, label %263, label %264, !prof !2

263:                                              ; preds = %260
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %264

264:                                              ; preds = %263, %260, %250
  %265 = phi %"class.v8::String"* [ %259, %250 ], [ %261, %260 ], [ null, %263 ]
  %266 = bitcast %"class.v8::String"* %265 to %"class.v8::Value"*
  %267 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 9, i32 0
  %268 = load %"class.v8::Name"*, %"class.v8::Name"** %267, align 8
  %269 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %268, %"class.v8::Value"* %266) #7
  %270 = trunc i16 %269 to i8
  %271 = icmp ne i8 %270, 0
  %272 = icmp ugt i16 %269, 255
  %273 = and i1 %272, %271
  br i1 %273, label %274, label %334

274:                                              ; preds = %264
  %275 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 11, i32 0, i32 0
  %276 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %275, align 8
  %277 = icmp eq %"class.WTF::StringImpl"* %276, null
  br i1 %277, label %288, label %278

278:                                              ; preds = %274
  %279 = bitcast %"class.WTF::StringView"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %279) #7
  %280 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 0
  store %"class.WTF::StringImpl"* %276, %"class.WTF::StringImpl"** %280, align 8
  %281 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %276, i64 0, i32 1
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %276, i64 1
  %284 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 1
  %285 = bitcast i8** %284 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %283, %"class.WTF::StringImpl"** %285, align 8
  %286 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %14, i64 0, i32 2
  store i32 %282, i32* %286, align 8
  %287 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %14)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %279) #7
  br label %292

288:                                              ; preds = %274
  %289 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 6) #7
  %290 = icmp eq %"class.v8::String"* %289, null
  br i1 %290, label %291, label %292, !prof !2

291:                                              ; preds = %288
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %292

292:                                              ; preds = %291, %288, %278
  %293 = phi %"class.v8::String"* [ %287, %278 ], [ %289, %288 ], [ null, %291 ]
  %294 = bitcast %"class.v8::String"* %293 to %"class.v8::Value"*
  %295 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 10, i32 0
  %296 = load %"class.v8::Name"*, %"class.v8::Name"** %295, align 8
  %297 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %296, %"class.v8::Value"* %294) #7
  %298 = trunc i16 %297 to i8
  %299 = icmp ne i8 %298, 0
  %300 = icmp ugt i16 %297, 255
  %301 = and i1 %300, %299
  br i1 %301, label %302, label %334

302:                                              ; preds = %292
  %303 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase37is_css_font_face_size_adjust_enabled_E, align 1, !range !3
  %304 = icmp eq i8 %303, 0
  br i1 %304, label %333, label %305

305:                                              ; preds = %302
  %306 = getelementptr inbounds %"class.blink::FontFaceDescriptors", %"class.blink::FontFaceDescriptors"* %0, i64 0, i32 6, i32 0, i32 0
  %307 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %306, align 8
  %308 = icmp eq %"class.WTF::StringImpl"* %307, null
  br i1 %308, label %319, label %309

309:                                              ; preds = %305
  %310 = bitcast %"class.WTF::StringView"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %310) #7
  %311 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 0
  store %"class.WTF::StringImpl"* %307, %"class.WTF::StringImpl"** %311, align 8
  %312 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %307, i64 0, i32 1
  %313 = load i32, i32* %312, align 4
  %314 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %307, i64 1
  %315 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 1
  %316 = bitcast i8** %315 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %314, %"class.WTF::StringImpl"** %316, align 8
  %317 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %15, i64 0, i32 2
  store i32 %313, i32* %317, align 8
  %318 = call %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"* %3, %"class.WTF::StringView"* nonnull dereferenceable(24) %15)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %310) #7
  br label %323

319:                                              ; preds = %305
  %320 = call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %3, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 0, i32 4) #7
  %321 = icmp eq %"class.v8::String"* %320, null
  br i1 %321, label %322, label %323, !prof !2

322:                                              ; preds = %319
  call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %323

323:                                              ; preds = %322, %319, %309
  %324 = phi %"class.v8::String"* [ %318, %309 ], [ %320, %319 ], [ null, %322 ]
  %325 = bitcast %"class.v8::String"* %324 to %"class.v8::Value"*
  %326 = getelementptr inbounds %"class.v8::Eternal", %"class.v8::Eternal"* %21, i64 5, i32 0
  %327 = load %"class.v8::Name"*, %"class.v8::Name"** %326, align 8
  %328 = call i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"* %1, %"class.v8::Context"* %22, %"class.v8::Name"* %327, %"class.v8::Value"* %325) #7
  %329 = trunc i16 %328 to i8
  %330 = icmp ne i8 %329, 0
  %331 = icmp ugt i16 %328, 255
  %332 = and i1 %331, %330
  br i1 %332, label %333, label %334

333:                                              ; preds = %302, %323
  br label %334

334:                                              ; preds = %68, %124, %180, %236, %333, %323, %292, %264, %208, %152, %96, %40
  %335 = phi i1 [ false, %40 ], [ false, %68 ], [ false, %96 ], [ false, %124 ], [ false, %152 ], [ false, %180 ], [ false, %208 ], [ false, %236 ], [ false, %264 ], [ true, %333 ], [ false, %323 ], [ false, %292 ]
  ret i1 %335
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden %"class.v8::String"* @_ZN5blink8V8StringEPN2v87IsolateERKN3WTF10StringViewE(%"class.v8::Isolate"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4 comdat {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = icmp eq i8* %4, null
  %6 = bitcast i8* %4 to i16*
  br i1 %5, label %7, label %11

7:                                                ; preds = %2
  %8 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %9 = add i64 %8, 200
  %10 = inttoptr i64 %9 to %"class.v8::String"*
  br label %63

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = icmp eq i8* %4, %15
  br i1 %16, label %17, label %48

17:                                               ; preds = %11
  %18 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %19, %21
  %23 = icmp eq %"class.WTF::StringImpl"* %13, null
  %24 = or i1 %23, %22
  br i1 %24, label %48, label %25

25:                                               ; preds = %17
  %26 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %27 = add i64 %26, 8
  %28 = inttoptr i64 %27 to %"class.blink::V8PerIsolateData"**
  %29 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %28, align 8
  %30 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %29, i64 0, i32 5, i32 0, i32 0, i32 0
  %31 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %30, align 8
  %32 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 3, i32 0
  %33 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, %13
  br i1 %34, label %35, label %46

35:                                               ; preds = %25
  %36 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %31, i64 0, i32 1
  %37 = bitcast %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference"* %36 to %"class.v8::String"**
  %38 = load %"class.v8::String"*, %"class.v8::String"** %37, align 8
  %39 = icmp eq %"class.v8::String"* %38, null
  br i1 %39, label %63, label %40

40:                                               ; preds = %35
  %41 = bitcast %"class.v8::String"* %38 to i64*
  %42 = bitcast %"class.v8::Isolate"* %0 to %"class.v8::internal::Isolate"*
  %43 = load i64, i64* %41, align 8
  %44 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %42, i64 %43) #7
  %45 = bitcast i64* %44 to %"class.v8::String"*
  br label %63

46:                                               ; preds = %25
  %47 = tail call %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %31, %"class.v8::Isolate"* %0, %"class.WTF::StringImpl"* nonnull %13) #7
  br label %63

48:                                               ; preds = %17, %11
  %49 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %50 = load atomic i32, i32* %49 monotonic, align 4
  %51 = and i32 %50, 1
  %52 = icmp eq i32 %51, 0
  %53 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %54 = load i32, i32* %53, align 8
  br i1 %52, label %59, label %55

55:                                               ; preds = %48
  %56 = tail call %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i8* nonnull %4, i32 0, i32 %54) #7
  %57 = icmp eq %"class.v8::String"* %56, null
  br i1 %57, label %58, label %63, !prof !2

58:                                               ; preds = %55
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

59:                                               ; preds = %48
  %60 = tail call %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"* %0, i16* nonnull %6, i32 0, i32 %54) #7
  %61 = icmp eq %"class.v8::String"* %60, null
  br i1 %61, label %62, label %63, !prof !2

62:                                               ; preds = %59
  tail call void @_ZN2v82V812ToLocalEmptyEv() #7
  br label %63

63:                                               ; preds = %46, %40, %35, %62, %59, %58, %55, %7
  %64 = phi %"class.v8::String"* [ %10, %7 ], [ %56, %55 ], [ null, %58 ], [ %60, %59 ], [ null, %62 ], [ null, %35 ], [ %45, %40 ], [ %47, %46 ]
  ret %"class.v8::String"* %64
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::FontFaceDescriptors"* @_ZN5blink17NativeValueTraitsINS_19FontFaceDescriptorsEvE11NativeValueEPN2v87IsolateENS3_5LocalINS3_5ValueEEERNS_14ExceptionStateE(%"class.v8::Isolate"*, %"class.v8::Value"*, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 96) #7
  %5 = bitcast i8* %4 to %"class.blink::FontFaceDescriptors"*
  tail call void @_ZN5blink19FontFaceDescriptorsC1Ev(%"class.blink::FontFaceDescriptors"* %5) #7
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  tail call void @_ZN5blink21V8FontFaceDescriptors6ToImplEPN2v87IsolateENS1_5LocalINS1_5ValueEEEPNS_19FontFaceDescriptorsERNS_14ExceptionStateE(%"class.v8::Isolate"* %0, %"class.v8::Value"* %1, %"class.blink::FontFaceDescriptors"* %5, %"class.blink::ExceptionState"* dereferenceable(72) %2)
  ret %"class.blink::FontFaceDescriptors"* %5
}

declare { i64, %"class.v8::Eternal"* } @_ZN5blink16V8PerIsolateData28FindOrCreateEternalNameCacheEPKvRKN4base4spanIKPKcLm18446744073709551615EEE(%"class.blink::V8PerIsolateData"*, i8*, %"class.base::span.312"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromOneByteEPNS_7IsolateEPKhNS_13NewStringTypeEi(%"class.v8::Isolate"*, i8*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN2v86String14NewFromTwoByteEPNS_7IsolateEPKtNS_13NewStringTypeEi(%"class.v8::Isolate"*, i16*, i32, i32) local_unnamed_addr #1

declare %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

declare void @_ZN2v82V812ToLocalEmptyEv() local_unnamed_addr #1

declare i16 @_ZN2v86Object18CreateDataPropertyENS_5LocalINS_7ContextEEENS1_INS_4NameEEENS1_INS_5ValueEEE(%"class.v8::Object"*, %"class.v8::Context"*, %"class.v8::Name"*, %"class.v8::Value"*) local_unnamed_addr #1

declare void @_ZN5blink19FontFaceDescriptorsC1Ev(%"class.blink::FontFaceDescriptors"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #7
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !2

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #7
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #7
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #7
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #7
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #7
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), i8* %40, i8* %41) #7
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #7
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.17, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #7
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #7
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !2

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #7
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #1

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #1

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #1

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN5blink16V8StringResourceILNS_20V8StringResourceModeE0EE11PrepareFastEv(%"class.blink::V8StringResource"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.v8::Value"*, %"class.v8::Value"** %2, align 8
  %4 = icmp eq %"class.v8::Value"* %3, null
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.v8::Value"* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 3
  %9 = icmp eq i64 %8, 1
  br i1 %9, label %10, label %21, !prof !4

10:                                               ; preds = %5
  %11 = add i64 %7, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = and i64 %7, -4294967296
  %15 = zext i32 %13 to i64
  %16 = or i64 %14, %15
  %17 = add i64 %16, 7
  %18 = inttoptr i64 %17 to i16*
  %19 = load i16, i16* %18, align 2
  %20 = icmp ult i16 %19, 64
  br i1 %20, label %82, label %21, !prof !5

21:                                               ; preds = %5, %10
  %22 = tail call zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"* nonnull %3) #7
  br i1 %22, label %23, label %80, !prof !5

23:                                               ; preds = %21
  %24 = bitcast %"class.blink::V8StringResource"* %0 to %"class.v8::Int32"**
  %25 = load %"class.v8::Int32"*, %"class.v8::Int32"** %24, align 8
  %26 = tail call i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"* %25) #7
  %27 = tail call %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32 %26) #7
  %28 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 2
  %29 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #7
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  tail call void @llvm.trap() #7
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %23
  %48 = ptrtoint %"class.WTF::StringImpl"* %27 to i64
  %49 = bitcast %"class.WTF::String"* %28 to i64*
  %50 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %28, i64 0, i32 0, i32 0
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #7
  br label %66

66:                                               ; preds = %47, %62, %65
  store %"class.v8::Value"* null, %"class.v8::Value"** %2, align 8
  br i1 %29, label %82, label %67

67:                                               ; preds = %66
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %73 = load i32, i32* %72, align 4
  br i1 %71, label %74, label %76

74:                                               ; preds = %67
  %75 = add i32 %73, -1
  store i32 %75, i32* %72, align 4
  br label %76

76:                                               ; preds = %74, %67
  %77 = phi i32 [ %75, %74 ], [ %73, %67 ]
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %82

79:                                               ; preds = %76
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %82

80:                                               ; preds = %21
  %81 = getelementptr inbounds %"class.blink::V8StringResource", %"class.blink::V8StringResource"* %0, i64 0, i32 1
  store i32 1, i32* %81, align 8
  br label %82

82:                                               ; preds = %79, %76, %66, %10, %1, %80
  %83 = phi i1 [ false, %80 ], [ true, %1 ], [ true, %10 ], [ true, %66 ], [ true, %76 ], [ true, %79 ]
  ret i1 %83
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #1

declare zeroext i1 @_ZNK2v85Value7IsInt32Ev(%"class.v8::Value"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringEi(i32) local_unnamed_addr #1

declare i32 @_ZNK2v85Int325ValueEv(%"class.v8::Int32"*) local_unnamed_addr #1

declare %"class.v8::String"* @_ZNK2v85Value8ToStringENS_5LocalINS_7ContextEEE(%"class.v8::Value"*, %"class.v8::Context"*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN5blink13ToBlinkStringIN3WTF6StringEEET_N2v85LocalINS4_6StringEEENS_12ExternalModeE(%"class.v8::String"*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2146410443, i32 1073205}
!5 = !{!"branch_weights", i32 2000, i32 1}
