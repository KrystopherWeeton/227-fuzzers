; ModuleID = '../../third_party/libgav1/src/src/threading_strategy.cc'
source_filename = "../../third_party/libgav1/src/src/threading_strategy.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::nothrow_t" = type { i8 }
%"class.libgav1::ThreadingStrategy" = type <{ %"class.std::__1::unique_ptr", i32, i32, i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.libgav1::ThreadPool"* }
%"class.libgav1::ThreadPool" = type { %"class.libgav1::Executor", %"class.std::__1::condition_variable", %"class.std::__1::mutex", %"class.libgav1::UnboundedQueue", %"class.std::__1::unique_ptr.2", i8, i32, [16 x i8] }
%"class.libgav1::Executor" = type { i32 (...)** }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon, %union.anon.0, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon = type { i64 }
%union.anon.0 = type { i64 }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.libgav1::UnboundedQueue" = type { %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64, %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64 }
%"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block" = type opaque
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.libgav1::ThreadPool::WorkerThread"** }
%"class.libgav1::ThreadPool::WorkerThread" = type opaque
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.9", i8, i8, i8, %"struct.std::__1::array.10", %"struct.std::__1::array.11" }
%"struct.std::__1::array.9" = type { [4 x i8] }
%"struct.std::__1::array.10" = type { [8 x i8] }
%"struct.std::__1::array.11" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"class.libgav1::FrameScratchBufferPool" = type { %"class.std::__1::mutex", %"class.libgav1::Stack" }
%"class.libgav1::Stack" = type <{ [128 x %"class.std::__1::unique_ptr.12"], i32, [4 x i8] }>
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.libgav1::FrameScratchBuffer"* }
%"struct.libgav1::FrameScratchBuffer" = type <{ %"class.libgav1::LoopRestorationInfo", %"class.libgav1::Array2D", %"class.libgav1::Array2D.27", %"class.libgav1::BlockParametersHolder", %"struct.libgav1::TemporalMotionField", [24 x i8], %"struct.libgav1::SymbolDecoderContext", %"class.std::__1::unique_ptr.84", %"class.libgav1::YuvBuffer", [2 x %"class.libgav1::AlignedDynamicBuffer"], %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer", %"class.libgav1::DynamicBuffer.106", %"class.libgav1::TileScratchBufferPool", %"class.libgav1::ThreadingStrategy", %"class.std::__1::mutex", %"class.libgav1::DynamicBuffer.122", %"class.libgav1::DynamicBuffer.129", i8, [23 x i8] }>
%"class.libgav1::LoopRestorationInfo" = type { [3 x %"struct.libgav1::RestorationUnitInfo"*], %"class.libgav1::DynamicBuffer", [3 x i8], %"struct.libgav1::LoopRestoration"*, i8, i8, [3 x i32], [3 x i32], [3 x i32] }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"class.libgav1::DynamicBuffer" = type { %"class.std::__1::unique_ptr.15", i64 }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.libgav1::RestorationUnitInfo"* }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr.21", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { i16* }
%"class.libgav1::Array2DView" = type { i32, i32, i16* }
%"class.libgav1::Array2D.27" = type { %"class.std::__1::unique_ptr.28", i64, i64, %"class.libgav1::Array2DView.34" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { i8* }
%"class.libgav1::Array2DView.34" = type { i32, i32, i8* }
%"class.libgav1::BlockParametersHolder" = type { i32, i32, %"class.libgav1::DynamicBuffer.35", %"struct.std::__1::atomic", %"class.libgav1::Array2D.44" }
%"class.libgav1::DynamicBuffer.35" = type { %"class.std::__1::unique_ptr.36", i64 }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.std::__1::unique_ptr.39"* }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"struct.libgav1::BlockParameters"* }
%"struct.libgav1::BlockParameters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x i8], [4 x i8], %"union.libgav1::CompoundMotionVector", %"struct.libgav1::PaletteModeInfo", %"class.std::__1::unique_ptr.49" }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%"struct.libgav1::PaletteModeInfo" = type { [2 x i8], [3 x [8 x i16]] }
%"class.std::__1::unique_ptr.49" = type { %"class.std::__1::__compressed_pair.50" }
%"class.std::__1::__compressed_pair.50" = type { %"struct.std::__1::__compressed_pair_elem.51" }
%"struct.std::__1::__compressed_pair_elem.51" = type { %"struct.libgav1::PredictionParameters"* }
%"struct.libgav1::PredictionParameters" = type { i8, i8, [2 x i32], i8, i8, i32, i32, [2 x %"class.libgav1::Array2D.52"], i8, i8, i8, i32, i32, i8, i8, i8, %union.anon.60, [8 x i16], i32, i32, i32, [2 x %"struct.libgav1::MotionVector"], i32, [8 x [4 x i32]] }
%"class.libgav1::Array2D.52" = type { %"class.std::__1::unique_ptr.53", i64, i64, %"class.libgav1::Array2DView.59" }
%"class.std::__1::unique_ptr.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { i8* }
%"class.libgav1::Array2DView.59" = type { i32, i32, i8* }
%union.anon.60 = type { [8 x %"union.libgav1::CompoundMotionVector"] }
%"struct.libgav1::MotionVector" = type { %union.anon.48 }
%union.anon.48 = type { i32 }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.43" }
%"struct.std::__1::__atomic_base.43" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.libgav1::Array2D.44" = type { %"class.std::__1::unique_ptr.45", i64, i64, %"class.libgav1::Array2DView.67" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Array2DView.67" = type { i32, i32, %"struct.libgav1::BlockParameters"** }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.68", %"class.libgav1::Array2D.76" }
%"class.libgav1::Array2D.68" = type { %"class.std::__1::unique_ptr.69", i64, i64, %"class.libgav1::Array2DView.75" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"struct.libgav1::MotionVector"* }
%"class.libgav1::Array2DView.75" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"class.libgav1::Array2D.76" = type { %"class.std::__1::unique_ptr.77", i64, i64, %"class.libgav1::Array2DView.83" }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { i8* }
%"class.libgav1::Array2DView.83" = type { i32, i32, i8* }
%"struct.libgav1::SymbolDecoderContext" = type { [5 x [4 x [11 x i16]]], [8 x i8], [3 x [9 x i16]], [10 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [5 x i16], [22 x i8], [5 x i16], [22 x i8], [4 x [5 x i16]], [24 x i8], [3 x i16], [26 x i8], [5 x [5 x [14 x i16]]], [4 x i8], [4 x [14 x i16]], [16 x i8], [8 x [8 x i16]], [2 x [13 x [15 x i16]]], [20 x i8], [9 x i16], [14 x i8], [6 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [6 x i16], [20 x i8], [4 x [3 x [4 x i16]]], [21 x [3 x i16]], [2 x i8], [5 x [13 x [3 x i16]]], [26 x i8], [3 x [4 x [17 x i16]]], [8 x i8], [2 x [4 x [13 x [17 x i16]]]], [16 x i8], [2 x [2 x [6 x i16]]], [16 x i8], [2 x [2 x [7 x i16]]], [8 x i8], [2 x [2 x [8 x i16]]], [2 x [2 x [9 x i16]]], [24 x i8], [2 x [2 x [10 x i16]]], [16 x i8], [2 x [11 x i16]], [20 x i8], [2 x [12 x i16]], [16 x i8], [5 x [2 x [9 x [3 x i16]]]], [4 x i8], [5 x [2 x [4 x [4 x i16]]]], [5 x [2 x [42 x [5 x i16]]]], [24 x i8], [5 x [2 x [21 x [5 x i16]]]], [12 x i8], [2 x [3 x [3 x i16]]], [28 x i8], [4 x i16], [24 x i8], [3 x i16], [26 x i8], [3 x i16], [26 x i8], [7 x [3 x [3 x i16]]], [2 x i8], [7 x [8 x i16]], [16 x i8], [2 x [3 x i16]], [20 x i8], [7 x [8 x i16]], [16 x i8], [2 x [7 x [5 x [9 x i16]]]], [20 x i8], [4 x [3 x i16]], [8 x i8], [5 x [3 x i16]], [2 x i8], [5 x [3 x i16]], [2 x i8], [2 x [3 x [3 x [3 x i16]]]], [20 x i8], [3 x [2 x [3 x i16]]], [28 x i8], [3 x [6 x [3 x i16]]], [20 x i8], [8 x [9 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [2 x [3 x i16]], [20 x i8], [6 x [3 x i16]], [28 x i8], [3 x [3 x i16]], [14 x i8], [3 x [3 x i16]], [14 x i8], [3 x [5 x i16]], [2 x i8], [22 x [3 x i16]], [28 x i8], [22 x [17 x i16]], [20 x i8], [22 x [3 x i16]], [28 x i8], [22 x [4 x i16]], [16 x i8], [6 x [3 x i16]], [28 x i8], [6 x [3 x i16]], [28 x i8], [22 x [3 x i16]], [28 x i8], [16 x [4 x i16]], [2 x [5 x i16]], [12 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [12 x i16]]], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [2 x [5 x i16]]]], [16 x i8], [2 x [2 x [3 x i16]]], [8 x i8], [2 x [2 x [10 x [3 x i16]]]], [16 x i8], [2 x [2 x [5 x i16]]], [24 x i8], [2 x [2 x [3 x i16]]], [8 x i8] }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.libgav1::ResidualBufferPool"* }
%"class.libgav1::ResidualBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::ResidualBufferStack", i64, i32, [4 x i8] }>
%"class.libgav1::ResidualBufferStack" = type { %"class.libgav1::ResidualBuffer"*, i64 }
%"class.libgav1::ResidualBuffer" = type { %"class.std::__1::unique_ptr.87", %"class.libgav1::Queue", %"class.libgav1::Queue.96", %"class.libgav1::ResidualBuffer"* }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"class.libgav1::Queue" = type { %"class.std::__1::unique_ptr.90", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"struct.libgav1::TransformParameters"* }
%"struct.libgav1::TransformParameters" = type { i8, i32 }
%"class.libgav1::Queue.96" = type { %"class.std::__1::unique_ptr.97", i64, i64, i64, i64 }
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.libgav1::PartitionTreeNode"* }
%"struct.libgav1::PartitionTreeNode" = type <{ i32, i32, i8, [3 x i8] }>
%"class.libgav1::AlignedDynamicBuffer" = type { %"class.std::__1::unique_ptr.87", i64 }
%"class.libgav1::YuvBuffer" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i8], [3 x i8*], %"class.std::__1::unique_ptr.53", i64, i8, i8, [6 x i8] }>
%"class.libgav1::DynamicBuffer.106" = type { %"class.std::__1::unique_ptr.107", i64 }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.std::__1::array.110"* }
%"struct.std::__1::array.110" = type { [3 x %"class.libgav1::AlignedDynamicBuffer.145"] }
%"class.libgav1::AlignedDynamicBuffer.145" = type { %"class.std::__1::unique_ptr.87", i64 }
%"class.libgav1::TileScratchBufferPool" = type <{ %"class.std::__1::mutex", %"class.libgav1::Stack.114", i32, [4 x i8] }>
%"class.libgav1::Stack.114" = type <{ [128 x %"class.std::__1::unique_ptr.115"], i32, [4 x i8] }>
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.libgav1::TileScratchBuffer"* }
%"struct.libgav1::TileScratchBuffer" = type <{ [16384 x i8], %union.anon.118, %"class.std::__1::unique_ptr.87", i64, i8, [3 x [34 x [34 x i8]]], [3 x i8] }>
%union.anon.118 = type { [2 x [16384 x i16]] }
%"class.libgav1::DynamicBuffer.122" = type { %"class.std::__1::unique_ptr.123", i64 }
%"class.std::__1::unique_ptr.123" = type { %"class.std::__1::__compressed_pair.124" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { i32* }
%"class.libgav1::DynamicBuffer.129" = type { %"class.std::__1::unique_ptr.130", i64 }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.std::__1::condition_variable"* }

$_ZN7libgav122FrameScratchBufferPool3GetEv = comdat any

$_ZN7libgav118FrameScratchBufferD2Ev = comdat any

@.str = private unnamed_addr constant [8 x i8] c"libgav1\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"libgav1-fp\00", align 1
@_ZSt7nothrow = external global %"struct.std::nothrow_t", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav117ThreadingStrategy5ResetERKNS_14ObuFrameHeaderEi(%"class.libgav1::ThreadingStrategy"* nocapture, %"struct.libgav1::ObuFrameHeader"* nocapture readonly dereferenceable(2080), i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 3
  store i8 0, i8* %4, align 8
  %5 = icmp eq i32 %2, 1
  br i1 %5, label %6, label %18

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %7, align 8
  store %"class.libgav1::ThreadPool"* null, %"class.libgav1::ThreadPool"** %7, align 8
  %9 = icmp eq %"class.libgav1::ThreadPool"* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  %11 = bitcast %"class.libgav1::ThreadPool"* %8 to void (%"class.libgav1::ThreadPool"*)***
  %12 = load void (%"class.libgav1::ThreadPool"*)**, void (%"class.libgav1::ThreadPool"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %12, i64 1
  %14 = load void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %13, align 8
  tail call void %14(%"class.libgav1::ThreadPool"* nonnull %8) #8
  br label %15

15:                                               ; preds = %6, %10
  %16 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 1
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 2
  store i32 0, i32* %17, align 4
  br label %75

18:                                               ; preds = %3
  %19 = icmp slt i32 %2, 128
  %20 = select i1 %19, i32 %2, i32 128
  %21 = add nsw i32 %20, -1
  %22 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %22, align 8
  %24 = icmp eq %"class.libgav1::ThreadPool"* %23, null
  br i1 %24, label %28, label %25

25:                                               ; preds = %18
  %26 = tail call i32 @_ZNK7libgav110ThreadPool11num_threadsEv(%"class.libgav1::ThreadPool"* nonnull %23) #8
  %27 = icmp eq i32 %26, %21
  br i1 %27, label %46, label %28

28:                                               ; preds = %25, %18
  %29 = tail call %"class.libgav1::ThreadPool"* @_ZN7libgav110ThreadPool6CreateEPKci(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %21) #8
  %30 = ptrtoint %"class.libgav1::ThreadPool"* %29 to i64
  %31 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %22, align 8
  %32 = bitcast %"class.libgav1::ThreadingStrategy"* %0 to i64*
  store i64 %30, i64* %32, align 8
  %33 = icmp eq %"class.libgav1::ThreadPool"* %31, null
  br i1 %33, label %40, label %34

34:                                               ; preds = %28
  %35 = bitcast %"class.libgav1::ThreadPool"* %31 to void (%"class.libgav1::ThreadPool"*)***
  %36 = load void (%"class.libgav1::ThreadPool"*)**, void (%"class.libgav1::ThreadPool"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %36, i64 1
  %38 = load void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %37, align 8
  tail call void %38(%"class.libgav1::ThreadPool"* nonnull %31) #8
  %39 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %22, align 8
  br label %40

40:                                               ; preds = %34, %28
  %41 = phi %"class.libgav1::ThreadPool"* [ %39, %34 ], [ %29, %28 ]
  %42 = icmp eq %"class.libgav1::ThreadPool"* %41, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %40
  %44 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 1
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 2
  store i32 0, i32* %45, align 4
  br label %75

46:                                               ; preds = %25, %40
  %47 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %1, i64 0, i32 15, i32 3
  %48 = load i32, i32* %47, align 4
  %49 = icmp sgt i32 %48, 1
  br i1 %49, label %50, label %59

50:                                               ; preds = %46
  %51 = add nsw i32 %48, -1
  %52 = icmp slt i32 %51, %21
  %53 = select i1 %52, i32 %51, i32 %21
  %54 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 1
  store i32 %53, i32* %54, align 8
  %55 = sub nsw i32 %21, %53
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %62

57:                                               ; preds = %50
  %58 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 2
  store i32 0, i32* %58, align 4
  br label %75

59:                                               ; preds = %46
  %60 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 1
  store i32 0, i32* %60, align 8
  %61 = icmp eq i32 %48, 1
  br i1 %61, label %62, label %75

62:                                               ; preds = %50, %59
  %63 = phi i32 [ %21, %59 ], [ %55, %50 ]
  %64 = sdiv i32 %63, %48
  %65 = srem i32 %63, %48
  %66 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 2
  br label %67

67:                                               ; preds = %72, %62
  %68 = phi i32 [ 0, %62 ], [ %73, %72 ]
  %69 = icmp slt i32 %68, %65
  %70 = sext i1 %69 to i32
  %71 = icmp eq i32 %64, %70
  br i1 %71, label %75, label %72

72:                                               ; preds = %67
  %73 = add nuw nsw i32 %68, 1
  store i32 %73, i32* %66, align 4
  %74 = icmp eq i32 %73, %48
  br i1 %74, label %75, label %67

75:                                               ; preds = %67, %72, %59, %57, %43, %15
  %76 = phi i1 [ true, %15 ], [ false, %43 ], [ true, %57 ], [ true, %59 ], [ true, %72 ], [ true, %67 ]
  ret i1 %76
}

declare i32 @_ZNK7libgav110ThreadPool11num_threadsEv(%"class.libgav1::ThreadPool"*) local_unnamed_addr #1

declare %"class.libgav1::ThreadPool"* @_ZN7libgav110ThreadPool6CreateEPKci(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav117ThreadingStrategy5ResetEi(%"class.libgav1::ThreadingStrategy"* nocapture, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 3
  store i8 1, i8* %3, align 8
  %4 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 2
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %6, align 8
  %8 = icmp eq %"class.libgav1::ThreadPool"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %2
  %10 = tail call i32 @_ZNK7libgav110ThreadPool11num_threadsEv(%"class.libgav1::ThreadPool"* nonnull %7) #8
  %11 = icmp eq i32 %10, %1
  br i1 %11, label %27, label %12

12:                                               ; preds = %9, %2
  %13 = tail call %"class.libgav1::ThreadPool"* @_ZN7libgav110ThreadPool6CreateEPKci(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %1) #8
  %14 = ptrtoint %"class.libgav1::ThreadPool"* %13 to i64
  %15 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %6, align 8
  %16 = bitcast %"class.libgav1::ThreadingStrategy"* %0 to i64*
  store i64 %14, i64* %16, align 8
  %17 = icmp eq %"class.libgav1::ThreadPool"* %15, null
  br i1 %17, label %24, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.libgav1::ThreadPool"* %15 to void (%"class.libgav1::ThreadPool"*)***
  %20 = load void (%"class.libgav1::ThreadPool"*)**, void (%"class.libgav1::ThreadPool"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %20, i64 1
  %22 = load void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %21, align 8
  tail call void %22(%"class.libgav1::ThreadPool"* nonnull %15) #8
  %23 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %6, align 8
  br label %24

24:                                               ; preds = %18, %12
  %25 = phi %"class.libgav1::ThreadPool"* [ %23, %18 ], [ %13, %12 ]
  %26 = icmp eq %"class.libgav1::ThreadPool"* %25, null
  br i1 %26, label %28, label %27

27:                                               ; preds = %9, %24
  br label %28

28:                                               ; preds = %24, %27
  %29 = phi i1 [ true, %27 ], [ false, %24 ]
  ret i1 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7libgav137InitializeThreadPoolsForFrameParallelEiiiPNSt3__110unique_ptrINS_10ThreadPoolENS0_14default_deleteIS2_EEEEPNS_22FrameScratchBufferPoolE(i32, i32, i32, %"class.std::__1::unique_ptr"* nocapture, %"class.libgav1::FrameScratchBufferPool"*) local_unnamed_addr #0 {
  %6 = icmp slt i32 %0, 128
  %7 = select i1 %6, i32 %0, i32 128
  %8 = icmp ne i32 %7, 1
  %9 = mul nsw i32 %1, 3
  %10 = icmp slt i32 %9, %7
  %11 = and i1 %8, %10
  br i1 %11, label %12, label %136

12:                                               ; preds = %5
  %13 = add nsw i32 %2, 1
  %14 = sdiv i32 %7, %13
  %15 = icmp sgt i32 %14, 2
  %16 = select i1 %15, i32 %14, i32 2
  %17 = tail call %"class.libgav1::ThreadPool"* @_ZN7libgav110ThreadPool6CreateEi(i32 %16) #8
  %18 = ptrtoint %"class.libgav1::ThreadPool"* %17 to i64
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %3, i64 0, i32 0, i32 0, i32 0
  %20 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %19, align 8
  %21 = bitcast %"class.std::__1::unique_ptr"* %3 to i64*
  store i64 %18, i64* %21, align 8
  %22 = icmp eq %"class.libgav1::ThreadPool"* %20, null
  br i1 %22, label %29, label %23

23:                                               ; preds = %12
  %24 = bitcast %"class.libgav1::ThreadPool"* %20 to void (%"class.libgav1::ThreadPool"*)***
  %25 = load void (%"class.libgav1::ThreadPool"*)**, void (%"class.libgav1::ThreadPool"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %25, i64 1
  %27 = load void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %26, align 8
  tail call void %27(%"class.libgav1::ThreadPool"* nonnull %20) #8
  %28 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %19, align 8
  br label %29

29:                                               ; preds = %23, %12
  %30 = phi %"class.libgav1::ThreadPool"* [ %28, %23 ], [ %17, %12 ]
  %31 = icmp eq %"class.libgav1::ThreadPool"* %30, null
  br i1 %31, label %136, label %32

32:                                               ; preds = %29
  %33 = sub nsw i32 %7, %16
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %136, label %35

35:                                               ; preds = %32
  %36 = sdiv i32 %33, %16
  %37 = srem i32 %33, %16
  %38 = zext i32 %16 to i64
  %39 = shl nuw nsw i64 %38, 3
  %40 = tail call noalias i8* @malloc(i64 %39) #8
  %41 = bitcast i8* %40 to %"class.std::__1::unique_ptr.12"*
  %42 = icmp eq i8* %40, null
  br i1 %42, label %133, label %43

43:                                               ; preds = %35
  %44 = icmp sgt i32 %33, 0
  br i1 %44, label %45, label %133

45:                                               ; preds = %43, %83
  %46 = phi i32 [ %88, %83 ], [ 0, %43 ]
  %47 = phi i32 [ %84, %83 ], [ %33, %43 ]
  %48 = phi i64 [ %87, %83 ], [ 0, %43 ]
  %49 = tail call %"struct.libgav1::FrameScratchBuffer"* @_ZN7libgav122FrameScratchBufferPool3GetEv(%"class.libgav1::FrameScratchBufferPool"* %4)
  %50 = ptrtoint %"struct.libgav1::FrameScratchBuffer"* %49 to i64
  %51 = icmp eq %"struct.libgav1::FrameScratchBuffer"* %49, null
  br i1 %51, label %117, label %52

52:                                               ; preds = %45
  %53 = icmp slt i32 %46, %37
  %54 = zext i1 %53 to i32
  %55 = add nsw i32 %36, %54
  %56 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %49, i64 0, i32 14
  %57 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %49, i64 0, i32 14, i32 3
  store i8 1, i8* %57, align 8
  %58 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %49, i64 0, i32 14, i32 1
  store i32 0, i32* %58, align 8
  %59 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %49, i64 0, i32 14, i32 2
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds %"class.libgav1::ThreadingStrategy", %"class.libgav1::ThreadingStrategy"* %56, i64 0, i32 0, i32 0, i32 0, i32 0
  %61 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %60, align 8
  %62 = icmp eq %"class.libgav1::ThreadPool"* %61, null
  br i1 %62, label %66, label %63

63:                                               ; preds = %52
  %64 = tail call i32 @_ZNK7libgav110ThreadPool11num_threadsEv(%"class.libgav1::ThreadPool"* nonnull %61) #8
  %65 = icmp eq i32 %64, %55
  br i1 %65, label %83, label %66

66:                                               ; preds = %63, %52
  %67 = tail call %"class.libgav1::ThreadPool"* @_ZN7libgav110ThreadPool6CreateEPKci(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %55) #8
  %68 = ptrtoint %"class.libgav1::ThreadPool"* %67 to i64
  %69 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %60, align 8
  %70 = bitcast %"class.libgav1::ThreadingStrategy"* %56 to i64*
  store i64 %68, i64* %70, align 8
  %71 = icmp eq %"class.libgav1::ThreadPool"* %69, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %66
  %73 = bitcast %"class.libgav1::ThreadPool"* %69 to void (%"class.libgav1::ThreadPool"*)***
  %74 = load void (%"class.libgav1::ThreadPool"*)**, void (%"class.libgav1::ThreadPool"*)*** %73, align 8
  %75 = getelementptr inbounds void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %74, i64 1
  %76 = load void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %75, align 8
  tail call void %76(%"class.libgav1::ThreadPool"* nonnull %69) #8
  %77 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %60, align 8
  br label %78

78:                                               ; preds = %72, %66
  %79 = phi %"class.libgav1::ThreadPool"* [ %77, %72 ], [ %67, %66 ]
  %80 = icmp eq %"class.libgav1::ThreadPool"* %79, null
  br i1 %80, label %81, label %83

81:                                               ; preds = %78
  tail call void @_ZN7libgav118FrameScratchBufferD2Ev(%"struct.libgav1::FrameScratchBuffer"* nonnull %49) #8
  %82 = bitcast %"struct.libgav1::FrameScratchBuffer"* %49 to i8*
  tail call void @_ZdlPv(i8* %82) #9
  br label %117

83:                                               ; preds = %63, %78
  %84 = sub nsw i32 %47, %55
  %85 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %41, i64 %48
  %86 = bitcast %"class.std::__1::unique_ptr.12"* %85 to i64*
  store i64 %50, i64* %86, align 8
  %87 = add nuw nsw i64 %48, 1
  %88 = add nuw nsw i32 %46, 1
  %89 = icmp ult i32 %88, %16
  %90 = icmp sgt i32 %84, 0
  %91 = and i1 %90, %89
  br i1 %91, label %45, label %92

92:                                               ; preds = %83
  %93 = trunc i64 %87 to i32
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %95, label %119

95:                                               ; preds = %92
  %96 = getelementptr inbounds %"class.libgav1::FrameScratchBufferPool", %"class.libgav1::FrameScratchBufferPool"* %4, i64 0, i32 0
  %97 = getelementptr inbounds %"class.libgav1::FrameScratchBufferPool", %"class.libgav1::FrameScratchBufferPool"* %4, i64 0, i32 1, i32 1
  br label %98

98:                                               ; preds = %95, %115
  %99 = phi i64 [ %87, %95 ], [ %100, %115 ]
  %100 = add nsw i64 %99, -1
  %101 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %41, i64 %100
  %102 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %101, i64 0, i32 0, i32 0, i32 0
  %103 = bitcast %"class.std::__1::unique_ptr.12"* %101 to i64*
  %104 = load i64, i64* %103, align 8
  store %"struct.libgav1::FrameScratchBuffer"* null, %"struct.libgav1::FrameScratchBuffer"** %102, align 8
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %96) #8
  %105 = load i32, i32* %97, align 8
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %97, align 8
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds %"class.libgav1::FrameScratchBufferPool", %"class.libgav1::FrameScratchBufferPool"* %4, i64 0, i32 1, i32 0, i64 %107
  %109 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %108, i64 0, i32 0, i32 0, i32 0
  %110 = load %"struct.libgav1::FrameScratchBuffer"*, %"struct.libgav1::FrameScratchBuffer"** %109, align 8
  %111 = bitcast %"class.std::__1::unique_ptr.12"* %108 to i64*
  store i64 %104, i64* %111, align 8
  %112 = icmp eq %"struct.libgav1::FrameScratchBuffer"* %110, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %98
  tail call void @_ZN7libgav118FrameScratchBufferD2Ev(%"struct.libgav1::FrameScratchBuffer"* nonnull %110) #8
  %114 = bitcast %"struct.libgav1::FrameScratchBuffer"* %110 to i8*
  tail call void @_ZdlPv(i8* %114) #9
  br label %115

115:                                              ; preds = %98, %113
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %96) #8
  %116 = icmp sgt i64 %100, 0
  br i1 %116, label %98, label %119

117:                                              ; preds = %45, %81
  %118 = icmp eq i64 %48, 0
  br i1 %118, label %133, label %119

119:                                              ; preds = %115, %92, %117
  %120 = phi i64 [ %48, %117 ], [ %87, %92 ], [ %87, %115 ]
  %121 = phi i1 [ false, %117 ], [ true, %92 ], [ true, %115 ]
  %122 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %41, i64 %120
  br label %123

123:                                              ; preds = %119, %130
  %124 = phi %"class.std::__1::unique_ptr.12"* [ %131, %130 ], [ %41, %119 ]
  %125 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %124, i64 0, i32 0, i32 0, i32 0
  %126 = load %"struct.libgav1::FrameScratchBuffer"*, %"struct.libgav1::FrameScratchBuffer"** %125, align 8
  store %"struct.libgav1::FrameScratchBuffer"* null, %"struct.libgav1::FrameScratchBuffer"** %125, align 8
  %127 = icmp eq %"struct.libgav1::FrameScratchBuffer"* %126, null
  br i1 %127, label %130, label %128

128:                                              ; preds = %123
  tail call void @_ZN7libgav118FrameScratchBufferD2Ev(%"struct.libgav1::FrameScratchBuffer"* nonnull %126) #8
  %129 = bitcast %"struct.libgav1::FrameScratchBuffer"* %126 to i8*
  tail call void @_ZdlPv(i8* %129) #9
  br label %130

130:                                              ; preds = %128, %123
  %131 = getelementptr inbounds %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12"* %124, i64 1
  %132 = icmp eq %"class.std::__1::unique_ptr.12"* %131, %122
  br i1 %132, label %133, label %123

133:                                              ; preds = %130, %43, %35, %117
  %134 = phi i1 [ false, %117 ], [ false, %35 ], [ true, %43 ], [ %121, %130 ]
  %135 = phi i8* [ %40, %117 ], [ null, %35 ], [ %40, %43 ], [ %40, %130 ]
  tail call void @free(i8* %135) #8
  br label %136

136:                                              ; preds = %5, %133, %32, %29
  %137 = phi i1 [ false, %29 ], [ %134, %133 ], [ true, %32 ], [ true, %5 ]
  ret i1 %137
}

declare %"class.libgav1::ThreadPool"* @_ZN7libgav110ThreadPool6CreateEi(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.libgav1::FrameScratchBuffer"* @_ZN7libgav122FrameScratchBufferPool3GetEv(%"class.libgav1::FrameScratchBufferPool"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.libgav1::FrameScratchBufferPool", %"class.libgav1::FrameScratchBufferPool"* %0, i64 0, i32 0
  tail call void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"* %2) #8
  %3 = getelementptr inbounds %"class.libgav1::FrameScratchBufferPool", %"class.libgav1::FrameScratchBufferPool"* %0, i64 0, i32 1, i32 1
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 0
  br i1 %5, label %6, label %36

6:                                                ; preds = %1
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #8
  %7 = tail call noalias i8* @_ZnwmRKSt9nothrow_t(i64 22368, %"struct.std::nothrow_t"* dereferenceable(1) @_ZSt7nothrow) #9
  %8 = icmp eq i8* %7, null
  br i1 %8, label %42, label %9

9:                                                ; preds = %6
  %10 = getelementptr inbounds i8, i8* %7, i64 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 16, i1 false) #8
  %11 = getelementptr inbounds i8, i8* %7, i64 96
  %12 = getelementptr inbounds i8, i8* %7, i64 208
  %13 = getelementptr inbounds i8, i8* %7, i64 20704
  %14 = bitcast i8* %13 to i64*
  store i64 0, i64* %14, align 8
  %15 = getelementptr inbounds i8, i8* %7, i64 20712
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %7, i64 20716
  store i8 0, i8* %17, align 4
  %18 = getelementptr inbounds i8, i8* %7, i64 20720
  %19 = getelementptr i8, i8* %7, i64 20800
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 76, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %19, i8 0, i64 42, i1 false) #8
  %20 = getelementptr i8, i8* %7, i64 20848
  %21 = getelementptr inbounds i8, i8* %7, i64 20888
  %22 = getelementptr i8, i8* %7, i64 20968
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %21, i8 0, i64 76, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 42, i1 false) #8
  %23 = getelementptr inbounds i8, i8* %7, i64 21016
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 8
  %25 = getelementptr inbounds i8, i8* %7, i64 21020
  store i8 0, i8* %25, align 4
  %26 = getelementptr inbounds i8, i8* %7, i64 21024
  %27 = getelementptr i8, i8* %7, i64 21104
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %26, i8 0, i64 76, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 42, i1 false) #8
  %28 = getelementptr inbounds i8, i8* %7, i64 21152
  %29 = getelementptr inbounds i8, i8* %7, i64 22232
  %30 = bitcast i8* %29 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 104, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 120, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 37, i1 false) #8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 1080, i1 false) #8
  store i32 -1, i32* %30, align 8
  %31 = getelementptr inbounds i8, i8* %7, i64 22240
  %32 = bitcast i8* %31 to i32*
  store i32 0, i32* %32, align 8
  %33 = getelementptr inbounds i8, i8* %7, i64 22248
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 17, i1 false) #8
  %34 = getelementptr inbounds i8, i8* %7, i64 22272
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %34, i8 0, i64 72, i1 false) #8
  %35 = ptrtoint i8* %7 to i64
  br label %42

36:                                               ; preds = %1
  %37 = add nsw i32 %4, -1
  store i32 %37, i32* %3, align 8
  %38 = sext i32 %4 to i64
  %39 = getelementptr inbounds %"class.libgav1::FrameScratchBufferPool", %"class.libgav1::FrameScratchBufferPool"* %0, i64 0, i32 1, i32 0, i64 %38, i32 0, i32 0, i32 0
  %40 = bitcast %"struct.libgav1::FrameScratchBuffer"** %39 to i64*
  %41 = load i64, i64* %40, align 8
  store %"struct.libgav1::FrameScratchBuffer"* null, %"struct.libgav1::FrameScratchBuffer"** %39, align 8
  tail call void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"* %2) #8
  br label %42

42:                                               ; preds = %6, %9, %36
  %43 = phi i64 [ %41, %36 ], [ %35, %9 ], [ 0, %6 ]
  %44 = inttoptr i64 %43 to %"struct.libgav1::FrameScratchBuffer"*
  ret %"struct.libgav1::FrameScratchBuffer"* %44
}

; Function Attrs: nobuiltin nofree nounwind
declare noalias i8* @_ZnwmRKSt9nothrow_t(i64, %"struct.std::nothrow_t"* dereferenceable(1)) local_unnamed_addr #2

declare void @_ZNSt3__15mutex4lockEv(%"class.std::__1::mutex"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZNSt3__15mutex6unlockEv(%"class.std::__1::mutex"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav118FrameScratchBufferD2Ev(%"struct.libgav1::FrameScratchBuffer"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 17, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.std::__1::condition_variable"*, %"class.std::__1::condition_variable"** %2, align 8
  store %"class.std::__1::condition_variable"* null, %"class.std::__1::condition_variable"** %2, align 8
  %4 = icmp eq %"class.std::__1::condition_variable"* %3, null
  br i1 %4, label %18, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.std::__1::condition_variable", %"class.std::__1::condition_variable"* %3, i64 -1, i32 0, i32 0, i32 6
  %7 = bitcast [2 x i32]* %6 to i8*
  %8 = bitcast [2 x i32]* %6 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = getelementptr inbounds %"class.std::__1::condition_variable", %"class.std::__1::condition_variable"* %3, i64 %9
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi %"class.std::__1::condition_variable"* [ %15, %13 ], [ %12, %11 ]
  %15 = getelementptr inbounds %"class.std::__1::condition_variable", %"class.std::__1::condition_variable"* %14, i64 -1
  tail call void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"* %15) #8
  %16 = icmp eq %"class.std::__1::condition_variable"* %15, %3
  br i1 %16, label %17, label %13

17:                                               ; preds = %13, %5
  tail call void @_ZdaPv(i8* %7) #9
  br label %18

18:                                               ; preds = %1, %17
  %19 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 16, i32 0, i32 0, i32 0, i32 0
  %20 = load i32*, i32** %19, align 8
  store i32* null, i32** %19, align 8
  %21 = icmp eq i32* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = bitcast i32* %20 to i8*
  tail call void @_ZdaPv(i8* %23) #9
  br label %24

24:                                               ; preds = %18, %22
  %25 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0
  %26 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %25, align 8
  store %"class.libgav1::ThreadPool"* null, %"class.libgav1::ThreadPool"** %25, align 8
  %27 = icmp eq %"class.libgav1::ThreadPool"* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = bitcast %"class.libgav1::ThreadPool"* %26 to void (%"class.libgav1::ThreadPool"*)***
  %30 = load void (%"class.libgav1::ThreadPool"*)**, void (%"class.libgav1::ThreadPool"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %30, i64 1
  %32 = load void (%"class.libgav1::ThreadPool"*)*, void (%"class.libgav1::ThreadPool"*)** %31, align 8
  tail call void %32(%"class.libgav1::ThreadPool"* nonnull %26) #8
  br label %33

33:                                               ; preds = %24, %28
  %34 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 13, i32 1, i32 0, i64 0
  %35 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 13, i32 1, i32 0, i64 128
  br label %36

36:                                               ; preds = %49, %33
  %37 = phi %"class.std::__1::unique_ptr.115"* [ %35, %33 ], [ %38, %49 ]
  %38 = getelementptr inbounds %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.115"* %37, i64 -1
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.115"* %38, i64 0, i32 0, i32 0, i32 0
  %40 = load %"struct.libgav1::TileScratchBuffer"*, %"struct.libgav1::TileScratchBuffer"** %39, align 8
  store %"struct.libgav1::TileScratchBuffer"* null, %"struct.libgav1::TileScratchBuffer"** %39, align 8
  %41 = icmp eq %"struct.libgav1::TileScratchBuffer"* %40, null
  br i1 %41, label %49, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %40, i64 0, i32 2, i32 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  store i8* null, i8** %43, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %47, label %46

46:                                               ; preds = %42
  tail call void @free(i8* nonnull %44) #8
  br label %47

47:                                               ; preds = %46, %42
  %48 = getelementptr inbounds %"struct.libgav1::TileScratchBuffer", %"struct.libgav1::TileScratchBuffer"* %40, i64 0, i32 0, i64 0
  tail call void @free(i8* %48) #8
  br label %49

49:                                               ; preds = %47, %36
  %50 = icmp eq %"class.std::__1::unique_ptr.115"* %38, %34
  br i1 %50, label %51, label %36

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  %53 = load %"struct.std::__1::array.110"*, %"struct.std::__1::array.110"** %52, align 8
  store %"struct.std::__1::array.110"* null, %"struct.std::__1::array.110"** %52, align 8
  %54 = icmp eq %"struct.std::__1::array.110"* %53, null
  br i1 %54, label %82, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"struct.std::__1::array.110", %"struct.std::__1::array.110"* %53, i64 -1, i32 0, i64 2, i32 1
  %57 = bitcast i64* %56 to i8*
  %58 = load i64, i64* %56, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %81, label %60

60:                                               ; preds = %55
  %61 = getelementptr inbounds %"struct.std::__1::array.110", %"struct.std::__1::array.110"* %53, i64 %58
  br label %62

62:                                               ; preds = %79, %60
  %63 = phi %"struct.std::__1::array.110"* [ %64, %79 ], [ %61, %60 ]
  %64 = getelementptr inbounds %"struct.std::__1::array.110", %"struct.std::__1::array.110"* %63, i64 -1
  %65 = getelementptr inbounds %"struct.std::__1::array.110", %"struct.std::__1::array.110"* %63, i64 -1, i32 0, i64 2, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  store i8* null, i8** %65, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %62
  tail call void @free(i8* nonnull %66) #8
  br label %69

69:                                               ; preds = %68, %62
  %70 = getelementptr inbounds %"struct.std::__1::array.110", %"struct.std::__1::array.110"* %63, i64 -1, i32 0, i64 1, i32 0, i32 0, i32 0, i32 0
  %71 = load i8*, i8** %70, align 8
  store i8* null, i8** %70, align 8
  %72 = icmp eq i8* %71, null
  br i1 %72, label %74, label %73

73:                                               ; preds = %69
  tail call void @free(i8* nonnull %71) #8
  br label %74

74:                                               ; preds = %73, %69
  %75 = getelementptr inbounds %"struct.std::__1::array.110", %"struct.std::__1::array.110"* %64, i64 0, i32 0, i64 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  store i8* null, i8** %75, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  tail call void @free(i8* nonnull %76) #8
  br label %79

79:                                               ; preds = %78, %74
  %80 = icmp eq %"struct.std::__1::array.110"* %64, %53
  br i1 %80, label %81, label %62

81:                                               ; preds = %79, %55
  tail call void @_ZdaPv(i8* %57) #9
  br label %82

82:                                               ; preds = %51, %81
  %83 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 11, i32 14, i32 0, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  store i8* null, i8** %83, align 8
  %85 = icmp eq i8* %84, null
  br i1 %85, label %87, label %86

86:                                               ; preds = %82
  tail call void @_ZdaPv(i8* nonnull %84) #9
  br label %87

87:                                               ; preds = %82, %86
  %88 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 10, i32 14, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  store i8* null, i8** %88, align 8
  %90 = icmp eq i8* %89, null
  br i1 %90, label %92, label %91

91:                                               ; preds = %87
  tail call void @_ZdaPv(i8* nonnull %89) #9
  br label %92

92:                                               ; preds = %87, %91
  %93 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 9, i64 1, i32 0, i32 0, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  store i8* null, i8** %93, align 8
  %95 = icmp eq i8* %94, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %92
  tail call void @free(i8* nonnull %94) #8
  br label %97

97:                                               ; preds = %92, %96
  %98 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 9, i64 0, i32 0, i32 0, i32 0, i32 0
  %99 = load i8*, i8** %98, align 8
  store i8* null, i8** %98, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %184, label %183

101:                                              ; preds = %184
  tail call void @_ZdaPv(i8* nonnull %186) #9
  br label %102

102:                                              ; preds = %184, %101
  %103 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 7, i32 0, i32 0, i32 0
  %104 = load %"class.libgav1::ResidualBufferPool"*, %"class.libgav1::ResidualBufferPool"** %103, align 8
  store %"class.libgav1::ResidualBufferPool"* null, %"class.libgav1::ResidualBufferPool"** %103, align 8
  %105 = icmp eq %"class.libgav1::ResidualBufferPool"* %104, null
  br i1 %105, label %109, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds %"class.libgav1::ResidualBufferPool", %"class.libgav1::ResidualBufferPool"* %104, i64 0, i32 1
  tail call void @_ZN7libgav119ResidualBufferStackD1Ev(%"class.libgav1::ResidualBufferStack"* %107) #8
  %108 = bitcast %"class.libgav1::ResidualBufferPool"* %104 to i8*
  tail call void @_ZdlPv(i8* nonnull %108) #8
  br label %109

109:                                              ; preds = %102, %106
  %110 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 4, i32 1, i32 0, i32 0, i32 0, i32 0
  %111 = load i8*, i8** %110, align 8
  store i8* null, i8** %110, align 8
  %112 = icmp eq i8* %111, null
  br i1 %112, label %114, label %113

113:                                              ; preds = %109
  tail call void @_ZdaPv(i8* nonnull %111) #9
  br label %114

114:                                              ; preds = %113, %109
  %115 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load %"struct.libgav1::MotionVector"*, %"struct.libgav1::MotionVector"** %115, align 8
  store %"struct.libgav1::MotionVector"* null, %"struct.libgav1::MotionVector"** %115, align 8
  %117 = icmp eq %"struct.libgav1::MotionVector"* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %114
  %119 = bitcast %"struct.libgav1::MotionVector"* %116 to i8*
  tail call void @_ZdaPv(i8* nonnull %119) #8
  br label %120

120:                                              ; preds = %114, %118
  %121 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0
  %122 = load %"struct.libgav1::BlockParameters"**, %"struct.libgav1::BlockParameters"*** %121, align 8
  store %"struct.libgav1::BlockParameters"** null, %"struct.libgav1::BlockParameters"*** %121, align 8
  %123 = icmp eq %"struct.libgav1::BlockParameters"** %122, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %120
  %125 = bitcast %"struct.libgav1::BlockParameters"** %122 to i8*
  tail call void @_ZdaPv(i8* %125) #9
  br label %126

126:                                              ; preds = %124, %120
  %127 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 3, i32 2, i32 0, i32 0, i32 0, i32 0
  %128 = load %"class.std::__1::unique_ptr.39"*, %"class.std::__1::unique_ptr.39"** %127, align 8
  store %"class.std::__1::unique_ptr.39"* null, %"class.std::__1::unique_ptr.39"** %127, align 8
  %129 = icmp eq %"class.std::__1::unique_ptr.39"* %128, null
  br i1 %129, label %165, label %130

130:                                              ; preds = %126
  %131 = getelementptr inbounds %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39"* %128, i64 -1
  %132 = bitcast %"class.std::__1::unique_ptr.39"* %131 to i8*
  %133 = bitcast %"class.std::__1::unique_ptr.39"* %131 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = icmp eq i64 %134, 0
  br i1 %135, label %164, label %136

136:                                              ; preds = %130
  %137 = getelementptr inbounds %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39"* %128, i64 %134
  br label %138

138:                                              ; preds = %162, %136
  %139 = phi %"class.std::__1::unique_ptr.39"* [ %140, %162 ], [ %137, %136 ]
  %140 = getelementptr inbounds %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39"* %139, i64 -1
  %141 = getelementptr inbounds %"class.std::__1::unique_ptr.39", %"class.std::__1::unique_ptr.39"* %140, i64 0, i32 0, i32 0, i32 0
  %142 = load %"struct.libgav1::BlockParameters"*, %"struct.libgav1::BlockParameters"** %141, align 8
  store %"struct.libgav1::BlockParameters"* null, %"struct.libgav1::BlockParameters"** %141, align 8
  %143 = icmp eq %"struct.libgav1::BlockParameters"* %142, null
  br i1 %143, label %162, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %142, i64 0, i32 18, i32 0, i32 0, i32 0
  %146 = load %"struct.libgav1::PredictionParameters"*, %"struct.libgav1::PredictionParameters"** %145, align 8
  store %"struct.libgav1::PredictionParameters"* null, %"struct.libgav1::PredictionParameters"** %145, align 8
  %147 = icmp eq %"struct.libgav1::PredictionParameters"* %146, null
  br i1 %147, label %160, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %146, i64 0, i32 7, i64 1, i32 0, i32 0, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  store i8* null, i8** %149, align 8
  %151 = icmp eq i8* %150, null
  br i1 %151, label %153, label %152

152:                                              ; preds = %148
  tail call void @_ZdaPv(i8* nonnull %150) #9
  br label %153

153:                                              ; preds = %152, %148
  %154 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %146, i64 0, i32 7, i64 0, i32 0, i32 0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  store i8* null, i8** %154, align 8
  %156 = icmp eq i8* %155, null
  br i1 %156, label %158, label %157

157:                                              ; preds = %153
  tail call void @_ZdaPv(i8* nonnull %155) #9
  br label %158

158:                                              ; preds = %157, %153
  %159 = getelementptr inbounds %"struct.libgav1::PredictionParameters", %"struct.libgav1::PredictionParameters"* %146, i64 0, i32 0
  tail call void @_ZdlPv(i8* %159) #8
  br label %160

160:                                              ; preds = %158, %144
  %161 = getelementptr inbounds %"struct.libgav1::BlockParameters", %"struct.libgav1::BlockParameters"* %142, i64 0, i32 0
  tail call void @_ZdlPv(i8* %161) #8
  br label %162

162:                                              ; preds = %160, %138
  %163 = icmp eq %"class.std::__1::unique_ptr.39"* %140, %128
  br i1 %163, label %164, label %138

164:                                              ; preds = %162, %130
  tail call void @_ZdaPv(i8* %132) #9
  br label %165

165:                                              ; preds = %126, %164
  %166 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %167 = load i8*, i8** %166, align 8
  store i8* null, i8** %166, align 8
  %168 = icmp eq i8* %167, null
  br i1 %168, label %170, label %169

169:                                              ; preds = %165
  tail call void @_ZdaPv(i8* nonnull %167) #9
  br label %170

170:                                              ; preds = %165, %169
  %171 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %172 = load i16*, i16** %171, align 8
  store i16* null, i16** %171, align 8
  %173 = icmp eq i16* %172, null
  br i1 %173, label %176, label %174

174:                                              ; preds = %170
  %175 = bitcast i16* %172 to i8*
  tail call void @_ZdaPv(i8* %175) #9
  br label %176

176:                                              ; preds = %170, %174
  %177 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %178 = load %"struct.libgav1::RestorationUnitInfo"*, %"struct.libgav1::RestorationUnitInfo"** %177, align 8
  store %"struct.libgav1::RestorationUnitInfo"* null, %"struct.libgav1::RestorationUnitInfo"** %177, align 8
  %179 = icmp eq %"struct.libgav1::RestorationUnitInfo"* %178, null
  br i1 %179, label %182, label %180

180:                                              ; preds = %176
  %181 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %178, i64 0, i32 0
  tail call void @free(i8* %181) #8
  br label %182

182:                                              ; preds = %176, %180
  ret void

183:                                              ; preds = %97
  tail call void @free(i8* nonnull %99) #8
  br label %184

184:                                              ; preds = %183, %97
  %185 = getelementptr inbounds %"struct.libgav1::FrameScratchBuffer", %"struct.libgav1::FrameScratchBuffer"* %0, i64 0, i32 8, i32 14, i32 0, i32 0, i32 0
  %186 = load i8*, i8** %185, align 8
  store i8* null, i8** %185, align 8
  %187 = icmp eq i8* %186, null
  br i1 %187, label %102, label %101
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZNSt3__118condition_variableD1Ev(%"class.std::__1::condition_variable"*) unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7libgav119ResidualBufferStackD1Ev(%"class.libgav1::ResidualBufferStack"*) unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
