; ModuleID = '../../third_party/libwebp/src/dec/frame_dec.c'
source_filename = "../../third_party/libwebp/src/dec/frame_dec.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.WebPDecoderOptions = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i32] }
%struct.VP8Decoder = type { i32, i32, i8*, %struct.VP8BitReader, %struct.VP8FrameHeader, %struct.VP8PictureHeader, %struct.VP8FilterHeader, %struct.VP8SegmentHeader, %struct.WebPWorker, i32, i32, i32, %struct.VP8ThreadContext, i32, i32, i32, i32, i32, i32, i32, [8 x %struct.VP8BitReader], i32, %struct.VP8Random, [4 x %struct.VP8QuantMatrix], %struct.VP8Proba, i32, i8, i8*, [4 x i8], %struct.VP8TopSamples*, %struct.VP8MB*, %struct.VP8FInfo*, i8*, i8*, i8*, i8*, i32, i32, i8*, i64, i32, i32, %struct.VP8MBData*, i32, [4 x [2 x %struct.VP8FInfo]], %struct.ALPHDecoder*, i8*, i64, i32, i8*, i8*, i8*, i32 }
%struct.VP8BitReader = type { i64, i32, i32, i8*, i8*, i8*, i32 }
%struct.VP8FrameHeader = type { i8, i8, i8, i32 }
%struct.VP8PictureHeader = type { i16, i16, i8, i8, i8, i8 }
%struct.VP8FilterHeader = type { i32, i32, i32, i32, [4 x i32], [4 x i32] }
%struct.VP8SegmentHeader = type { i32, i32, i32, [4 x i8], [4 x i8] }
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8ThreadContext = type { i32, i32, i32, %struct.VP8FInfo*, %struct.VP8MBData*, %struct.VP8Io }
%struct.VP8Io = type { i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)*, void (%struct.VP8Io*)*, i32, i64, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8* }
%struct.VP8Random = type { i32, i32, [55 x i32], i32 }
%struct.VP8QuantMatrix = type { [2 x i32], [2 x i32], [2 x i32], i32, i32 }
%struct.VP8Proba = type { [3 x i8], [4 x [8 x %struct.VP8BandProbas]], [4 x [17 x %struct.VP8BandProbas*]] }
%struct.VP8BandProbas = type { [3 x [11 x i8]] }
%struct.VP8TopSamples = type { [16 x i8], [8 x i8], [8 x i8] }
%struct.VP8MB = type { i8, i8 }
%struct.VP8FInfo = type { i8, i8, i8, i8 }
%struct.VP8MBData = type { [384 x i16], i8, [16 x i8], i8, i32, i32, i8, i8, i8 }
%struct.ALPHDecoder = type opaque
%struct.WebPWorkerInterface = type { void (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)* }
%struct.WebPHeaderStructure = type { i8*, i64, i32, i64, i8*, i64, i64, i64, i32 }

@kQuantToDitherAmp = internal unnamed_addr constant [12 x i8] c"\08\07\06\04\04\02\02\02\01\01\01\01", align 1
@.str = private unnamed_addr constant [19 x i8] c"Frame setup failed\00", align 1
@kFilterExtraRows = internal unnamed_addr constant [3 x i8] c"\00\02\08", align 1
@kScan = internal unnamed_addr constant [16 x i16] [i16 0, i16 4, i16 8, i16 12, i16 128, i16 132, i16 136, i16 140, i16 256, i16 260, i16 264, i16 268, i16 384, i16 388, i16 392, i16 396], align 16
@VP8PredLuma4 = external local_unnamed_addr global [0 x void (i8*)*], align 8
@VP8PredLuma16 = external local_unnamed_addr global [0 x void (i8*)*], align 8
@VP8PredChroma8 = external local_unnamed_addr global [0 x void (i8*)*], align 8
@VP8Transform = external local_unnamed_addr global void (i16*, i8*, i32)*, align 8
@VP8TransformAC3 = external local_unnamed_addr global void (i16*, i8*)*, align 8
@VP8TransformDC = external local_unnamed_addr global void (i16*, i8*)*, align 8
@VP8TransformUV = external local_unnamed_addr global void (i16*, i8*)*, align 8
@VP8TransformDCUV = external local_unnamed_addr global void (i16*, i8*)*, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"Could not decode alpha data.\00", align 1
@VP8SimpleHFilter16 = external local_unnamed_addr global void (i8*, i32, i32)*, align 8
@VP8SimpleHFilter16i = external local_unnamed_addr global void (i8*, i32, i32)*, align 8
@VP8SimpleVFilter16 = external local_unnamed_addr global void (i8*, i32, i32)*, align 8
@VP8SimpleVFilter16i = external local_unnamed_addr global void (i8*, i32, i32)*, align 8
@VP8HFilter16 = external local_unnamed_addr global void (i8*, i32, i32, i32, i32)*, align 8
@VP8HFilter8 = external local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)*, align 8
@VP8HFilter16i = external local_unnamed_addr global void (i8*, i32, i32, i32, i32)*, align 8
@VP8HFilter8i = external local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)*, align 8
@VP8VFilter16 = external local_unnamed_addr global void (i8*, i32, i32, i32, i32)*, align 8
@VP8VFilter8 = external local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)*, align 8
@VP8VFilter16i = external local_unnamed_addr global void (i8*, i32, i32, i32, i32)*, align 8
@VP8VFilter8i = external local_unnamed_addr global void (i8*, i8*, i32, i32, i32, i32)*, align 8
@VP8DitherCombine8x8 = external local_unnamed_addr global void (i8*, i8*, i32)*, align 8
@.str.2 = private unnamed_addr constant [30 x i8] c"thread initialization failed.\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"no memory during frame initialization.\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8InitDithering(%struct.WebPDecoderOptions* readonly, %struct.VP8Decoder*) local_unnamed_addr #0 {
  %3 = icmp eq %struct.WebPDecoderOptions* %0, null
  br i1 %3, label %52, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.WebPDecoderOptions, %struct.WebPDecoderOptions* %0, i64 0, i32 11
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, 0
  br i1 %7, label %43, label %8

8:                                                ; preds = %4
  %9 = icmp sgt i32 %6, 100
  br i1 %9, label %14, label %10

10:                                               ; preds = %8
  %11 = mul nsw i32 %6, 255
  %12 = sdiv i32 %11, 100
  %13 = icmp sgt i32 %11, 99
  br i1 %13, label %14, label %43

14:                                               ; preds = %8, %10
  %15 = phi i32 [ %12, %10 ], [ 255, %8 ]
  %16 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  %18 = icmp slt i32 %17, 12
  br i1 %18, label %22, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 0, i32 4
  %21 = load i32, i32* %20, align 4
  br label %32

22:                                               ; preds = %14
  %23 = icmp sgt i32 %17, 0
  %24 = select i1 %23, i32 %17, i32 0
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds [12 x i8], [12 x i8]* @kQuantToDitherAmp, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = mul nsw i32 %15, %28
  %30 = ashr i32 %29, 3
  %31 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 0, i32 4
  store i32 %30, i32* %31, align 4
  br label %32

32:                                               ; preds = %19, %22
  %33 = phi i32 [ %21, %19 ], [ %30, %22 ]
  %34 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 1, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 12
  br i1 %36, label %53, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 1, i32 4
  %39 = load i32, i32* %38, align 4
  br label %63

40:                                               ; preds = %101
  %41 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 22
  tail call void @VP8InitRandom(%struct.VP8Random* %41, float 1.000000e+00) #4
  %42 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 21
  store i32 1, i32* %42, align 8
  br label %43

43:                                               ; preds = %4, %40, %101, %10
  %44 = getelementptr inbounds %struct.WebPDecoderOptions, %struct.WebPDecoderOptions* %0, i64 0, i32 13
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 52
  store i32 %45, i32* %46, align 8
  %47 = icmp sgt i32 %45, 100
  br i1 %47, label %48, label %49

48:                                               ; preds = %43
  store i32 100, i32* %46, align 8
  br label %52

49:                                               ; preds = %43
  %50 = icmp slt i32 %45, 0
  br i1 %50, label %51, label %52

51:                                               ; preds = %49
  store i32 0, i32* %46, align 8
  br label %52

52:                                               ; preds = %48, %51, %49, %2
  ret void

53:                                               ; preds = %32
  %54 = icmp sgt i32 %35, 0
  %55 = select i1 %54, i32 %35, i32 0
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [12 x i8], [12 x i8]* @kQuantToDitherAmp, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = mul nsw i32 %15, %59
  %61 = ashr i32 %60, 3
  %62 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 1, i32 4
  store i32 %61, i32* %62, align 4
  br label %63

63:                                               ; preds = %37, %53
  %64 = phi i32 [ %39, %37 ], [ %61, %53 ]
  %65 = or i32 %64, %33
  %66 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 2, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %67, 12
  br i1 %68, label %72, label %69

69:                                               ; preds = %63
  %70 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 2, i32 4
  %71 = load i32, i32* %70, align 4
  br label %82

72:                                               ; preds = %63
  %73 = icmp sgt i32 %67, 0
  %74 = select i1 %73, i32 %67, i32 0
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [12 x i8], [12 x i8]* @kQuantToDitherAmp, i64 0, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = mul nsw i32 %15, %78
  %80 = ashr i32 %79, 3
  %81 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 2, i32 4
  store i32 %80, i32* %81, align 4
  br label %82

82:                                               ; preds = %69, %72
  %83 = phi i32 [ %71, %69 ], [ %80, %72 ]
  %84 = or i32 %83, %65
  %85 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 3, i32 3
  %86 = load i32, i32* %85, align 4
  %87 = icmp slt i32 %86, 12
  br i1 %87, label %91, label %88

88:                                               ; preds = %82
  %89 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 3, i32 4
  %90 = load i32, i32* %89, align 4
  br label %101

91:                                               ; preds = %82
  %92 = icmp sgt i32 %86, 0
  %93 = select i1 %92, i32 %86, i32 0
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [12 x i8], [12 x i8]* @kQuantToDitherAmp, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = mul nsw i32 %15, %97
  %99 = ashr i32 %98, 3
  %100 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %1, i64 0, i32 23, i64 3, i32 4
  store i32 %99, i32* %100, align 4
  br label %101

101:                                              ; preds = %88, %91
  %102 = phi i32 [ %90, %88 ], [ %99, %91 ]
  %103 = or i32 %102, %84
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %43, label %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @VP8InitRandom(%struct.VP8Random*, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8ProcessRow(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 43
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 41
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 16
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %9, %11
  br i1 %12, label %17, label %13

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 18
  %15 = load i32, i32* %14, align 4
  %16 = icmp sle i32 %9, %15
  br label %17

17:                                               ; preds = %7, %13, %2
  %18 = phi i1 [ false, %7 ], [ false, %2 ], [ %16, %13 ]
  %19 = zext i1 %18 to i32
  %20 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 9
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %31

23:                                               ; preds = %17
  %24 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 41
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 2
  store i32 %19, i32* %27, align 8
  tail call fastcc void @ReconstructRow(%struct.VP8Decoder* %0, %struct.VP8ThreadContext* %3)
  %28 = bitcast %struct.VP8Decoder* %0 to i8*
  %29 = bitcast %struct.VP8Io* %1 to i8*
  %30 = tail call i32 @FinishRow(i8* %28, i8* %29)
  br label %78

31:                                               ; preds = %17
  %32 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  %33 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #4
  %34 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %33, i64 0, i32 2
  %35 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %34, align 8
  %36 = tail call i32 %35(%struct.WebPWorker* %32) #4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %78, label %39

39:                                               ; preds = %31
  %40 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 5
  %41 = bitcast %struct.VP8Io* %40 to i8*
  %42 = bitcast %struct.VP8Io* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 160, i1 false)
  %43 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 10
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.VP8ThreadContext, %struct.VP8ThreadContext* %3, i64 0, i32 0
  store i32 %44, i32* %45, align 8
  %46 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 41
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 1
  store i32 %47, i32* %48, align 4
  %49 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 2
  store i32 %19, i32* %49, align 8
  %50 = load i32, i32* %20, align 8
  %51 = icmp eq i32 %50, 2
  br i1 %51, label %52, label %59

52:                                               ; preds = %39
  %53 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 4
  %54 = bitcast %struct.VP8MBData** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 42
  %57 = bitcast %struct.VP8MBData** %56 to i64*
  %58 = load i64, i64* %57, align 8
  store i64 %58, i64* %54, align 8
  store i64 %55, i64* %57, align 8
  br label %60

59:                                               ; preds = %39
  tail call fastcc void @ReconstructRow(%struct.VP8Decoder* %0, %struct.VP8ThreadContext* %3)
  br label %60

60:                                               ; preds = %59, %52
  br i1 %18, label %61, label %68

61:                                               ; preds = %60
  %62 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 3
  %63 = bitcast %struct.VP8FInfo** %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 31
  %66 = bitcast %struct.VP8FInfo** %65 to i64*
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %63, align 8
  store i64 %64, i64* %66, align 8
  br label %68

68:                                               ; preds = %61, %60
  %69 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #4
  %70 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %69, i64 0, i32 3
  %71 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %70, align 8
  tail call void %71(%struct.WebPWorker* %32) #4
  %72 = load i32, i32* %43, align 4
  %73 = add nsw i32 %72, 1
  %74 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 11
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %73, %75
  %77 = select i1 %76, i32 0, i32 %73
  store i32 %77, i32* %43, align 4
  ret i32 1

78:                                               ; preds = %31, %23
  %79 = phi i32 [ %30, %23 ], [ 0, %31 ]
  ret i32 %79
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @ReconstructRow(%struct.VP8Decoder* nocapture readonly, %struct.VP8ThreadContext* nocapture readonly) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8ThreadContext, %struct.VP8ThreadContext* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.VP8ThreadContext, %struct.VP8ThreadContext* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 32
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 40
  %10 = getelementptr inbounds i8, i8* %8, i64 584
  %11 = getelementptr inbounds i8, i8* %8, i64 39
  store i8 -127, i8* %11, align 1
  %12 = getelementptr inbounds i8, i8* %8, i64 71
  store i8 -127, i8* %12, align 1
  %13 = getelementptr inbounds i8, i8* %8, i64 103
  store i8 -127, i8* %13, align 1
  %14 = getelementptr inbounds i8, i8* %8, i64 135
  store i8 -127, i8* %14, align 1
  %15 = getelementptr inbounds i8, i8* %8, i64 167
  store i8 -127, i8* %15, align 1
  %16 = getelementptr inbounds i8, i8* %8, i64 199
  store i8 -127, i8* %16, align 1
  %17 = getelementptr inbounds i8, i8* %8, i64 231
  store i8 -127, i8* %17, align 1
  %18 = getelementptr inbounds i8, i8* %8, i64 263
  store i8 -127, i8* %18, align 1
  %19 = getelementptr inbounds i8, i8* %8, i64 295
  store i8 -127, i8* %19, align 1
  %20 = getelementptr inbounds i8, i8* %8, i64 327
  store i8 -127, i8* %20, align 1
  %21 = getelementptr inbounds i8, i8* %8, i64 359
  store i8 -127, i8* %21, align 1
  %22 = getelementptr inbounds i8, i8* %8, i64 391
  store i8 -127, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %8, i64 423
  store i8 -127, i8* %23, align 1
  %24 = getelementptr inbounds i8, i8* %8, i64 455
  store i8 -127, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %8, i64 487
  store i8 -127, i8* %25, align 1
  %26 = getelementptr inbounds i8, i8* %8, i64 519
  store i8 -127, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %8, i64 600
  %28 = getelementptr inbounds i8, i8* %8, i64 583
  store i8 -127, i8* %28, align 1
  %29 = getelementptr inbounds i8, i8* %8, i64 599
  store i8 -127, i8* %29, align 1
  %30 = getelementptr inbounds i8, i8* %8, i64 615
  store i8 -127, i8* %30, align 1
  %31 = getelementptr inbounds i8, i8* %8, i64 631
  store i8 -127, i8* %31, align 1
  %32 = getelementptr inbounds i8, i8* %8, i64 647
  store i8 -127, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %8, i64 663
  store i8 -127, i8* %33, align 1
  %34 = getelementptr inbounds i8, i8* %8, i64 679
  store i8 -127, i8* %34, align 1
  %35 = getelementptr inbounds i8, i8* %8, i64 695
  store i8 -127, i8* %35, align 1
  %36 = getelementptr inbounds i8, i8* %8, i64 711
  store i8 -127, i8* %36, align 1
  %37 = getelementptr inbounds i8, i8* %8, i64 727
  store i8 -127, i8* %37, align 1
  %38 = getelementptr inbounds i8, i8* %8, i64 743
  store i8 -127, i8* %38, align 1
  %39 = getelementptr inbounds i8, i8* %8, i64 759
  store i8 -127, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %8, i64 775
  store i8 -127, i8* %40, align 1
  %41 = getelementptr inbounds i8, i8* %8, i64 791
  store i8 -127, i8* %41, align 1
  %42 = getelementptr inbounds i8, i8* %8, i64 807
  store i8 -127, i8* %42, align 1
  %43 = getelementptr inbounds i8, i8* %8, i64 823
  store i8 -127, i8* %43, align 1
  %44 = icmp sgt i32 %4, 0
  br i1 %44, label %45, label %49

45:                                               ; preds = %2
  %46 = getelementptr inbounds i8, i8* %8, i64 567
  store i8 -127, i8* %46, align 1
  %47 = getelementptr inbounds i8, i8* %8, i64 551
  store i8 -127, i8* %47, align 1
  %48 = getelementptr inbounds i8, i8* %8, i64 7
  store i8 -127, i8* %48, align 1
  br label %53

49:                                               ; preds = %2
  %50 = getelementptr inbounds i8, i8* %8, i64 7
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %50, i8 127, i64 21, i1 false)
  %51 = getelementptr inbounds i8, i8* %8, i64 551
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %51, i8 127, i64 9, i1 false)
  %52 = getelementptr inbounds i8, i8* %8, i64 567
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %52, i8 127, i64 9, i1 false)
  br label %53

53:                                               ; preds = %49, %45
  %54 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 13
  %55 = load i32, i32* %54, align 8
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %57, label %624

57:                                               ; preds = %53
  %58 = getelementptr inbounds %struct.VP8ThreadContext, %struct.VP8ThreadContext* %1, i64 0, i32 4
  %59 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 29
  %60 = getelementptr inbounds i8, i8* %8, i64 8
  %61 = getelementptr inbounds i8, i8* %8, i64 552
  %62 = bitcast i8* %61 to i64*
  %63 = getelementptr inbounds i8, i8* %8, i64 568
  %64 = bitcast i8* %63 to i64*
  %65 = getelementptr inbounds i8, i8* %8, i64 24
  %66 = bitcast i8* %65 to i32*
  %67 = getelementptr inbounds i8, i8* %8, i64 408
  %68 = bitcast i8* %67 to i32*
  %69 = getelementptr inbounds i8, i8* %8, i64 280
  %70 = bitcast i8* %69 to i32*
  %71 = getelementptr inbounds i8, i8* %8, i64 152
  %72 = bitcast i8* %71 to i32*
  %73 = icmp eq i32 %4, 0
  %74 = select i1 %73, i64 4, i64 0
  %75 = select i1 %73, i64 6, i64 5
  %76 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 14
  %77 = getelementptr inbounds i8, i8* %8, i64 520
  %78 = getelementptr inbounds i8, i8* %8, i64 808
  %79 = bitcast i8* %78 to i64*
  %80 = getelementptr inbounds i8, i8* %8, i64 824
  %81 = bitcast i8* %80 to i64*
  %82 = shl i32 %6, 4
  %83 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 36
  %84 = shl i32 %6, 3
  %85 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 37
  %86 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 33
  %87 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 34
  %88 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 35
  %89 = getelementptr inbounds i8, i8* %8, i64 4
  %90 = getelementptr inbounds i8, i8* %8, i64 20
  %91 = bitcast i8* %90 to i32*
  %92 = bitcast i8* %89 to i32*
  %93 = getelementptr inbounds i8, i8* %8, i64 36
  %94 = getelementptr inbounds i8, i8* %8, i64 52
  %95 = bitcast i8* %94 to i32*
  %96 = bitcast i8* %93 to i32*
  %97 = getelementptr inbounds i8, i8* %8, i64 68
  %98 = getelementptr inbounds i8, i8* %8, i64 84
  %99 = bitcast i8* %98 to i32*
  %100 = bitcast i8* %97 to i32*
  %101 = getelementptr inbounds i8, i8* %8, i64 100
  %102 = getelementptr inbounds i8, i8* %8, i64 116
  %103 = bitcast i8* %102 to i32*
  %104 = bitcast i8* %101 to i32*
  %105 = getelementptr inbounds i8, i8* %8, i64 132
  %106 = getelementptr inbounds i8, i8* %8, i64 148
  %107 = bitcast i8* %106 to i32*
  %108 = bitcast i8* %105 to i32*
  %109 = getelementptr inbounds i8, i8* %8, i64 164
  %110 = getelementptr inbounds i8, i8* %8, i64 180
  %111 = bitcast i8* %110 to i32*
  %112 = bitcast i8* %109 to i32*
  %113 = getelementptr inbounds i8, i8* %8, i64 196
  %114 = getelementptr inbounds i8, i8* %8, i64 212
  %115 = bitcast i8* %114 to i32*
  %116 = bitcast i8* %113 to i32*
  %117 = getelementptr inbounds i8, i8* %8, i64 228
  %118 = getelementptr inbounds i8, i8* %8, i64 244
  %119 = bitcast i8* %118 to i32*
  %120 = bitcast i8* %117 to i32*
  %121 = getelementptr inbounds i8, i8* %8, i64 260
  %122 = getelementptr inbounds i8, i8* %8, i64 276
  %123 = bitcast i8* %122 to i32*
  %124 = bitcast i8* %121 to i32*
  %125 = getelementptr inbounds i8, i8* %8, i64 292
  %126 = getelementptr inbounds i8, i8* %8, i64 308
  %127 = bitcast i8* %126 to i32*
  %128 = bitcast i8* %125 to i32*
  %129 = getelementptr inbounds i8, i8* %8, i64 324
  %130 = getelementptr inbounds i8, i8* %8, i64 340
  %131 = bitcast i8* %130 to i32*
  %132 = bitcast i8* %129 to i32*
  %133 = getelementptr inbounds i8, i8* %8, i64 356
  %134 = getelementptr inbounds i8, i8* %8, i64 372
  %135 = bitcast i8* %134 to i32*
  %136 = bitcast i8* %133 to i32*
  %137 = getelementptr inbounds i8, i8* %8, i64 388
  %138 = getelementptr inbounds i8, i8* %8, i64 404
  %139 = bitcast i8* %138 to i32*
  %140 = bitcast i8* %137 to i32*
  %141 = getelementptr inbounds i8, i8* %8, i64 420
  %142 = getelementptr inbounds i8, i8* %8, i64 436
  %143 = bitcast i8* %142 to i32*
  %144 = bitcast i8* %141 to i32*
  %145 = getelementptr inbounds i8, i8* %8, i64 452
  %146 = getelementptr inbounds i8, i8* %8, i64 468
  %147 = bitcast i8* %146 to i32*
  %148 = bitcast i8* %145 to i32*
  %149 = getelementptr inbounds i8, i8* %8, i64 484
  %150 = getelementptr inbounds i8, i8* %8, i64 500
  %151 = bitcast i8* %150 to i32*
  %152 = bitcast i8* %149 to i32*
  %153 = getelementptr inbounds i8, i8* %8, i64 516
  %154 = getelementptr inbounds i8, i8* %8, i64 532
  %155 = bitcast i8* %154 to i32*
  %156 = bitcast i8* %153 to i32*
  %157 = getelementptr inbounds i8, i8* %8, i64 548
  %158 = getelementptr inbounds i8, i8* %8, i64 556
  %159 = bitcast i8* %158 to i32*
  %160 = bitcast i8* %157 to i32*
  %161 = getelementptr inbounds i8, i8* %8, i64 564
  %162 = getelementptr inbounds i8, i8* %8, i64 572
  %163 = bitcast i8* %162 to i32*
  %164 = bitcast i8* %161 to i32*
  %165 = getelementptr inbounds i8, i8* %8, i64 580
  %166 = getelementptr inbounds i8, i8* %8, i64 588
  %167 = bitcast i8* %166 to i32*
  %168 = bitcast i8* %165 to i32*
  %169 = getelementptr inbounds i8, i8* %8, i64 596
  %170 = getelementptr inbounds i8, i8* %8, i64 604
  %171 = bitcast i8* %170 to i32*
  %172 = bitcast i8* %169 to i32*
  %173 = getelementptr inbounds i8, i8* %8, i64 612
  %174 = getelementptr inbounds i8, i8* %8, i64 620
  %175 = bitcast i8* %174 to i32*
  %176 = bitcast i8* %173 to i32*
  %177 = getelementptr inbounds i8, i8* %8, i64 628
  %178 = getelementptr inbounds i8, i8* %8, i64 636
  %179 = bitcast i8* %178 to i32*
  %180 = bitcast i8* %177 to i32*
  %181 = getelementptr inbounds i8, i8* %8, i64 644
  %182 = getelementptr inbounds i8, i8* %8, i64 652
  %183 = bitcast i8* %182 to i32*
  %184 = bitcast i8* %181 to i32*
  %185 = getelementptr inbounds i8, i8* %8, i64 660
  %186 = getelementptr inbounds i8, i8* %8, i64 668
  %187 = bitcast i8* %186 to i32*
  %188 = bitcast i8* %185 to i32*
  %189 = getelementptr inbounds i8, i8* %8, i64 676
  %190 = getelementptr inbounds i8, i8* %8, i64 684
  %191 = bitcast i8* %190 to i32*
  %192 = bitcast i8* %189 to i32*
  %193 = getelementptr inbounds i8, i8* %8, i64 692
  %194 = getelementptr inbounds i8, i8* %8, i64 700
  %195 = bitcast i8* %194 to i32*
  %196 = bitcast i8* %193 to i32*
  %197 = getelementptr inbounds i8, i8* %8, i64 708
  %198 = getelementptr inbounds i8, i8* %8, i64 716
  %199 = bitcast i8* %198 to i32*
  %200 = bitcast i8* %197 to i32*
  %201 = getelementptr inbounds i8, i8* %8, i64 724
  %202 = getelementptr inbounds i8, i8* %8, i64 732
  %203 = bitcast i8* %202 to i32*
  %204 = bitcast i8* %201 to i32*
  %205 = getelementptr inbounds i8, i8* %8, i64 740
  %206 = getelementptr inbounds i8, i8* %8, i64 748
  %207 = bitcast i8* %206 to i32*
  %208 = bitcast i8* %205 to i32*
  %209 = getelementptr inbounds i8, i8* %8, i64 756
  %210 = getelementptr inbounds i8, i8* %8, i64 764
  %211 = bitcast i8* %210 to i32*
  %212 = bitcast i8* %209 to i32*
  %213 = getelementptr inbounds i8, i8* %8, i64 772
  %214 = getelementptr inbounds i8, i8* %8, i64 780
  %215 = bitcast i8* %214 to i32*
  %216 = bitcast i8* %213 to i32*
  %217 = getelementptr inbounds i8, i8* %8, i64 788
  %218 = getelementptr inbounds i8, i8* %8, i64 796
  %219 = bitcast i8* %218 to i32*
  %220 = bitcast i8* %217 to i32*
  %221 = getelementptr inbounds i8, i8* %8, i64 804
  %222 = getelementptr inbounds i8, i8* %8, i64 812
  %223 = bitcast i8* %222 to i32*
  %224 = bitcast i8* %221 to i32*
  %225 = getelementptr inbounds i8, i8* %8, i64 820
  %226 = getelementptr inbounds i8, i8* %8, i64 828
  %227 = bitcast i8* %226 to i32*
  %228 = bitcast i8* %225 to i32*
  %229 = getelementptr inbounds i8, i8* %8, i64 72
  %230 = getelementptr inbounds i8, i8* %8, i64 104
  %231 = getelementptr inbounds i8, i8* %8, i64 136
  %232 = getelementptr inbounds i8, i8* %8, i64 168
  %233 = getelementptr inbounds i8, i8* %8, i64 200
  %234 = getelementptr inbounds i8, i8* %8, i64 232
  %235 = getelementptr inbounds i8, i8* %8, i64 264
  %236 = getelementptr inbounds i8, i8* %8, i64 296
  %237 = getelementptr inbounds i8, i8* %8, i64 328
  %238 = getelementptr inbounds i8, i8* %8, i64 360
  %239 = getelementptr inbounds i8, i8* %8, i64 392
  %240 = getelementptr inbounds i8, i8* %8, i64 424
  %241 = getelementptr inbounds i8, i8* %8, i64 456
  %242 = getelementptr inbounds i8, i8* %8, i64 488
  %243 = getelementptr inbounds i8, i8* %8, i64 520
  %244 = bitcast i8* %10 to i64*
  %245 = bitcast i8* %27 to i64*
  %246 = getelementptr inbounds i8, i8* %8, i64 616
  %247 = bitcast i8* %246 to i64*
  %248 = getelementptr inbounds i8, i8* %8, i64 632
  %249 = bitcast i8* %248 to i64*
  %250 = getelementptr inbounds i8, i8* %8, i64 648
  %251 = bitcast i8* %250 to i64*
  %252 = getelementptr inbounds i8, i8* %8, i64 664
  %253 = bitcast i8* %252 to i64*
  %254 = getelementptr inbounds i8, i8* %8, i64 680
  %255 = bitcast i8* %254 to i64*
  %256 = getelementptr inbounds i8, i8* %8, i64 696
  %257 = bitcast i8* %256 to i64*
  %258 = getelementptr inbounds i8, i8* %8, i64 712
  %259 = bitcast i8* %258 to i64*
  %260 = getelementptr inbounds i8, i8* %8, i64 728
  %261 = bitcast i8* %260 to i64*
  %262 = getelementptr inbounds i8, i8* %8, i64 744
  %263 = bitcast i8* %262 to i64*
  %264 = getelementptr inbounds i8, i8* %8, i64 760
  %265 = bitcast i8* %264 to i64*
  %266 = getelementptr inbounds i8, i8* %8, i64 776
  %267 = bitcast i8* %266 to i64*
  %268 = getelementptr inbounds i8, i8* %8, i64 792
  %269 = bitcast i8* %268 to i64*
  %270 = getelementptr inbounds i8, i8* %8, i64 808
  %271 = bitcast i8* %270 to i64*
  %272 = getelementptr inbounds i8, i8* %8, i64 824
  %273 = bitcast i8* %272 to i64*
  br label %274

274:                                              ; preds = %57, %455
  %275 = phi i64 [ 0, %57 ], [ %620, %455 ]
  %276 = load %struct.VP8MBData*, %struct.VP8MBData** %58, align 8
  %277 = icmp eq i64 %275, 0
  br i1 %277, label %314, label %278

278:                                              ; preds = %274
  %279 = load i32, i32* %91, align 1
  store i32 %279, i32* %92, align 1
  %280 = load i32, i32* %95, align 1
  store i32 %280, i32* %96, align 1
  %281 = load i32, i32* %99, align 1
  store i32 %281, i32* %100, align 1
  %282 = load i32, i32* %103, align 1
  store i32 %282, i32* %104, align 1
  %283 = load i32, i32* %107, align 1
  store i32 %283, i32* %108, align 1
  %284 = load i32, i32* %111, align 1
  store i32 %284, i32* %112, align 1
  %285 = load i32, i32* %115, align 1
  store i32 %285, i32* %116, align 1
  %286 = load i32, i32* %119, align 1
  store i32 %286, i32* %120, align 1
  %287 = load i32, i32* %123, align 1
  store i32 %287, i32* %124, align 1
  %288 = load i32, i32* %127, align 1
  store i32 %288, i32* %128, align 1
  %289 = load i32, i32* %131, align 1
  store i32 %289, i32* %132, align 1
  %290 = load i32, i32* %135, align 1
  store i32 %290, i32* %136, align 1
  %291 = load i32, i32* %139, align 1
  store i32 %291, i32* %140, align 1
  %292 = load i32, i32* %143, align 1
  store i32 %292, i32* %144, align 1
  %293 = load i32, i32* %147, align 1
  store i32 %293, i32* %148, align 1
  %294 = load i32, i32* %151, align 1
  store i32 %294, i32* %152, align 1
  %295 = load i32, i32* %155, align 1
  store i32 %295, i32* %156, align 1
  %296 = load i32, i32* %159, align 1
  store i32 %296, i32* %160, align 1
  %297 = load i32, i32* %163, align 1
  store i32 %297, i32* %164, align 1
  %298 = load i32, i32* %167, align 1
  store i32 %298, i32* %168, align 1
  %299 = load i32, i32* %171, align 1
  store i32 %299, i32* %172, align 1
  %300 = load i32, i32* %175, align 1
  store i32 %300, i32* %176, align 1
  %301 = load i32, i32* %179, align 1
  store i32 %301, i32* %180, align 1
  %302 = load i32, i32* %183, align 1
  store i32 %302, i32* %184, align 1
  %303 = load i32, i32* %187, align 1
  store i32 %303, i32* %188, align 1
  %304 = load i32, i32* %191, align 1
  store i32 %304, i32* %192, align 1
  %305 = load i32, i32* %195, align 1
  store i32 %305, i32* %196, align 1
  %306 = load i32, i32* %199, align 1
  store i32 %306, i32* %200, align 1
  %307 = load i32, i32* %203, align 1
  store i32 %307, i32* %204, align 1
  %308 = load i32, i32* %207, align 1
  store i32 %308, i32* %208, align 1
  %309 = load i32, i32* %211, align 1
  store i32 %309, i32* %212, align 1
  %310 = load i32, i32* %215, align 1
  store i32 %310, i32* %216, align 1
  %311 = load i32, i32* %219, align 1
  store i32 %311, i32* %220, align 1
  %312 = load i32, i32* %223, align 1
  store i32 %312, i32* %224, align 1
  %313 = load i32, i32* %227, align 1
  store i32 %313, i32* %228, align 1
  br label %314

314:                                              ; preds = %278, %274
  %315 = load %struct.VP8TopSamples*, %struct.VP8TopSamples** %59, align 8
  %316 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %315, i64 %275
  %317 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 4
  %318 = load i32, i32* %317, align 4
  br i1 %44, label %319, label %327

319:                                              ; preds = %314
  %320 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %316, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %320, i64 16, i1 false)
  %321 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %315, i64 %275, i32 1, i64 0
  %322 = bitcast i8* %321 to i64*
  %323 = load i64, i64* %322, align 1
  store i64 %323, i64* %62, align 1
  %324 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %315, i64 %275, i32 2, i64 0
  %325 = bitcast i8* %324 to i64*
  %326 = load i64, i64* %325, align 1
  store i64 %326, i64* %64, align 1
  br label %327

327:                                              ; preds = %319, %314
  %328 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 1
  %329 = load i8, i8* %328, align 4
  %330 = icmp eq i8 %329, 0
  br i1 %330, label %378, label %331

331:                                              ; preds = %327
  br i1 %44, label %334, label %332

332:                                              ; preds = %331
  %333 = load i32, i32* %66, align 4
  br label %351

334:                                              ; preds = %331
  %335 = load i32, i32* %54, align 8
  %336 = add nsw i32 %335, -1
  %337 = sext i32 %336 to i64
  %338 = icmp slt i64 %275, %337
  br i1 %338, label %347, label %339

339:                                              ; preds = %334
  %340 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %315, i64 %275, i32 0, i64 15
  %341 = load i8, i8* %340, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %65, i8 %341, i64 4, i1 false)
  %342 = zext i8 %341 to i32
  %343 = shl nuw nsw i32 %342, 8
  %344 = or i32 %343, %342
  %345 = shl nuw i32 %344, 16
  %346 = or i32 %344, %345
  br label %351

347:                                              ; preds = %334
  %348 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %316, i64 1
  %349 = bitcast %struct.VP8TopSamples* %348 to i32*
  %350 = load i32, i32* %349, align 1
  store i32 %350, i32* %66, align 4
  br label %351

351:                                              ; preds = %332, %339, %347
  %352 = phi i32 [ %333, %332 ], [ %346, %339 ], [ %350, %347 ]
  store i32 %352, i32* %68, align 4
  store i32 %352, i32* %70, align 4
  store i32 %352, i32* %72, align 4
  br label %353

353:                                              ; preds = %374, %351
  %354 = phi i64 [ 0, %351 ], [ %375, %374 ]
  %355 = phi i32 [ %318, %351 ], [ %376, %374 ]
  %356 = getelementptr inbounds [16 x i16], [16 x i16]* @kScan, i64 0, i64 %354
  %357 = load i16, i16* %356, align 2
  %358 = zext i16 %357 to i64
  %359 = getelementptr inbounds i8, i8* %9, i64 %358
  %360 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 2, i64 %354
  %361 = load i8, i8* %360, align 1
  %362 = zext i8 %361 to i64
  %363 = getelementptr inbounds [0 x void (i8*)*], [0 x void (i8*)*]* @VP8PredLuma4, i64 0, i64 %362
  %364 = load void (i8*)*, void (i8*)** %363, align 8
  tail call void %364(i8* %359) #4
  %365 = shl nsw i64 %354, 4
  %366 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 0, i64 %365
  %367 = lshr i32 %355, 30
  switch i32 %367, label %374 [
    i32 3, label %368
    i32 2, label %370
    i32 1, label %372
  ]

368:                                              ; preds = %353
  %369 = load void (i16*, i8*, i32)*, void (i16*, i8*, i32)** @VP8Transform, align 8
  tail call void %369(i16* %366, i8* %359, i32 0) #4
  br label %374

370:                                              ; preds = %353
  %371 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformAC3, align 8
  tail call void %371(i16* %366, i8* %359) #4
  br label %374

372:                                              ; preds = %353
  %373 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDC, align 8
  tail call void %373(i16* %366, i8* %359) #4
  br label %374

374:                                              ; preds = %353, %368, %370, %372
  %375 = add nuw nsw i64 %354, 1
  %376 = shl i32 %355, 2
  %377 = icmp eq i64 %375, 16
  br i1 %377, label %408, label %353

378:                                              ; preds = %327
  %379 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 2, i64 0
  %380 = load i8, i8* %379, align 1
  %381 = zext i8 %380 to i64
  %382 = icmp eq i8 %380, 0
  %383 = select i1 %277, i64 %75, i64 %74
  %384 = select i1 %382, i64 %383, i64 %381
  %385 = getelementptr inbounds [0 x void (i8*)*], [0 x void (i8*)*]* @VP8PredLuma16, i64 0, i64 %384
  %386 = load void (i8*)*, void (i8*)** %385, align 8
  tail call void %386(i8* %9) #4
  %387 = icmp eq i32 %318, 0
  br i1 %387, label %410, label %388

388:                                              ; preds = %378, %404
  %389 = phi i64 [ %405, %404 ], [ 0, %378 ]
  %390 = phi i32 [ %406, %404 ], [ %318, %378 ]
  %391 = shl nsw i64 %389, 4
  %392 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 0, i64 %391
  %393 = getelementptr inbounds [16 x i16], [16 x i16]* @kScan, i64 0, i64 %389
  %394 = load i16, i16* %393, align 2
  %395 = zext i16 %394 to i64
  %396 = getelementptr inbounds i8, i8* %9, i64 %395
  %397 = lshr i32 %390, 30
  switch i32 %397, label %404 [
    i32 3, label %398
    i32 2, label %400
    i32 1, label %402
  ]

398:                                              ; preds = %388
  %399 = load void (i16*, i8*, i32)*, void (i16*, i8*, i32)** @VP8Transform, align 8
  tail call void %399(i16* %392, i8* %396, i32 0) #4
  br label %404

400:                                              ; preds = %388
  %401 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformAC3, align 8
  tail call void %401(i16* %392, i8* %396) #4
  br label %404

402:                                              ; preds = %388
  %403 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDC, align 8
  tail call void %403(i16* %392, i8* %396) #4
  br label %404

404:                                              ; preds = %388, %398, %400, %402
  %405 = add nuw nsw i64 %389, 1
  %406 = shl i32 %390, 2
  %407 = icmp eq i64 %405, 16
  br i1 %407, label %410, label %388

408:                                              ; preds = %374
  %409 = select i1 %277, i64 %75, i64 %74
  br label %410

410:                                              ; preds = %404, %408, %378
  %411 = phi i64 [ %409, %408 ], [ %383, %378 ], [ %383, %404 ]
  %412 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 5
  %413 = load i32, i32* %412, align 4
  %414 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 3
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i64
  %417 = icmp eq i8 %415, 0
  %418 = select i1 %417, i64 %411, i64 %416
  %419 = getelementptr inbounds [0 x void (i8*)*], [0 x void (i8*)*]* @VP8PredChroma8, i64 0, i64 %418
  %420 = load void (i8*)*, void (i8*)** %419, align 8
  tail call void %420(i8* %10) #4
  %421 = load void (i8*)*, void (i8*)** %419, align 8
  tail call void %421(i8* %27) #4
  %422 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 0, i64 256
  %423 = and i32 %413, 255
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %432, label %425

425:                                              ; preds = %410
  %426 = and i32 %413, 170
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %430, label %428

428:                                              ; preds = %425
  %429 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformUV, align 8
  tail call void %429(i16* %422, i8* %10) #4
  br label %432

430:                                              ; preds = %425
  %431 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDCUV, align 8
  tail call void %431(i16* %422, i8* %10) #4
  br label %432

432:                                              ; preds = %410, %428, %430
  %433 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %276, i64 %275, i32 0, i64 320
  %434 = and i32 %413, 65280
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %443, label %436

436:                                              ; preds = %432
  %437 = and i32 %413, 43520
  %438 = icmp eq i32 %437, 0
  br i1 %438, label %441, label %439

439:                                              ; preds = %436
  %440 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformUV, align 8
  tail call void %440(i16* %433, i8* %27) #4
  br label %443

441:                                              ; preds = %436
  %442 = load void (i16*, i8*)*, void (i16*, i8*)** @VP8TransformDCUV, align 8
  tail call void %442(i16* %433, i8* %27) #4
  br label %443

443:                                              ; preds = %432, %439, %441
  %444 = load i32, i32* %76, align 4
  %445 = add nsw i32 %444, -1
  %446 = icmp slt i32 %4, %445
  br i1 %446, label %447, label %455

447:                                              ; preds = %443
  %448 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %316, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %448, i8* align 1 %77, i64 16, i1 false)
  %449 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %315, i64 %275, i32 1, i64 0
  %450 = bitcast i8* %449 to i64*
  %451 = load i64, i64* %79, align 1
  store i64 %451, i64* %450, align 1
  %452 = getelementptr inbounds %struct.VP8TopSamples, %struct.VP8TopSamples* %315, i64 %275, i32 2, i64 0
  %453 = bitcast i8* %452 to i64*
  %454 = load i64, i64* %81, align 1
  store i64 %454, i64* %453, align 1
  br label %455

455:                                              ; preds = %447, %443
  %456 = load i32, i32* %83, align 8
  %457 = mul nsw i32 %82, %456
  %458 = load i32, i32* %85, align 4
  %459 = mul nsw i32 %84, %458
  %460 = load i8*, i8** %86, align 8
  %461 = shl i64 %275, 4
  %462 = and i64 %461, 4294967280
  %463 = getelementptr inbounds i8, i8* %460, i64 %462
  %464 = sext i32 %457 to i64
  %465 = getelementptr inbounds i8, i8* %463, i64 %464
  %466 = load i8*, i8** %87, align 8
  %467 = shl i64 %275, 3
  %468 = and i64 %467, 4294967288
  %469 = sext i32 %459 to i64
  %470 = load i8*, i8** %88, align 8
  %471 = getelementptr inbounds i8, i8* %470, i64 %468
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %465, i8* align 1 %9, i64 16, i1 false)
  %472 = load i32, i32* %83, align 8
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds i8, i8* %465, i64 %473
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %474, i8* align 1 %229, i64 16, i1 false)
  %475 = load i32, i32* %83, align 8
  %476 = shl nsw i32 %475, 1
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds i8, i8* %465, i64 %477
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %478, i8* align 1 %230, i64 16, i1 false)
  %479 = load i32, i32* %83, align 8
  %480 = mul nsw i32 %479, 3
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i8, i8* %465, i64 %481
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %482, i8* align 1 %231, i64 16, i1 false)
  %483 = load i32, i32* %83, align 8
  %484 = shl nsw i32 %483, 2
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i8, i8* %465, i64 %485
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %486, i8* align 1 %232, i64 16, i1 false)
  %487 = load i32, i32* %83, align 8
  %488 = mul nsw i32 %487, 5
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds i8, i8* %465, i64 %489
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %490, i8* align 1 %233, i64 16, i1 false)
  %491 = load i32, i32* %83, align 8
  %492 = mul nsw i32 %491, 6
  %493 = sext i32 %492 to i64
  %494 = getelementptr inbounds i8, i8* %465, i64 %493
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %494, i8* align 1 %234, i64 16, i1 false)
  %495 = load i32, i32* %83, align 8
  %496 = mul nsw i32 %495, 7
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds i8, i8* %465, i64 %497
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %498, i8* align 1 %235, i64 16, i1 false)
  %499 = load i32, i32* %83, align 8
  %500 = shl nsw i32 %499, 3
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i8, i8* %465, i64 %501
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %502, i8* align 1 %236, i64 16, i1 false)
  %503 = load i32, i32* %83, align 8
  %504 = mul nsw i32 %503, 9
  %505 = sext i32 %504 to i64
  %506 = getelementptr inbounds i8, i8* %465, i64 %505
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %506, i8* align 1 %237, i64 16, i1 false)
  %507 = load i32, i32* %83, align 8
  %508 = mul nsw i32 %507, 10
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds i8, i8* %465, i64 %509
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %510, i8* align 1 %238, i64 16, i1 false)
  %511 = load i32, i32* %83, align 8
  %512 = mul nsw i32 %511, 11
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i8, i8* %465, i64 %513
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %514, i8* align 1 %239, i64 16, i1 false)
  %515 = load i32, i32* %83, align 8
  %516 = mul nsw i32 %515, 12
  %517 = sext i32 %516 to i64
  %518 = getelementptr inbounds i8, i8* %465, i64 %517
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %518, i8* align 1 %240, i64 16, i1 false)
  %519 = load i32, i32* %83, align 8
  %520 = mul nsw i32 %519, 13
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds i8, i8* %465, i64 %521
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %522, i8* align 1 %241, i64 16, i1 false)
  %523 = load i32, i32* %83, align 8
  %524 = mul nsw i32 %523, 14
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i8, i8* %465, i64 %525
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %526, i8* align 1 %242, i64 16, i1 false)
  %527 = load i32, i32* %83, align 8
  %528 = mul nsw i32 %527, 15
  %529 = sext i32 %528 to i64
  %530 = getelementptr inbounds i8, i8* %465, i64 %529
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %530, i8* align 1 %243, i64 16, i1 false)
  %531 = getelementptr inbounds i8, i8* %466, i64 %468
  %532 = getelementptr inbounds i8, i8* %531, i64 %469
  %533 = getelementptr inbounds i8, i8* %471, i64 %469
  %534 = bitcast i8* %532 to i64*
  %535 = load i64, i64* %244, align 1
  store i64 %535, i64* %534, align 1
  %536 = bitcast i8* %533 to i64*
  %537 = load i64, i64* %245, align 1
  store i64 %537, i64* %536, align 1
  %538 = load i32, i32* %85, align 4
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds i8, i8* %532, i64 %539
  %541 = bitcast i8* %540 to i64*
  %542 = load i64, i64* %247, align 1
  store i64 %542, i64* %541, align 1
  %543 = load i32, i32* %85, align 4
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds i8, i8* %533, i64 %544
  %546 = bitcast i8* %545 to i64*
  %547 = load i64, i64* %249, align 1
  store i64 %547, i64* %546, align 1
  %548 = load i32, i32* %85, align 4
  %549 = shl nsw i32 %548, 1
  %550 = sext i32 %549 to i64
  %551 = getelementptr inbounds i8, i8* %532, i64 %550
  %552 = bitcast i8* %551 to i64*
  %553 = load i64, i64* %251, align 1
  store i64 %553, i64* %552, align 1
  %554 = load i32, i32* %85, align 4
  %555 = shl nsw i32 %554, 1
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds i8, i8* %533, i64 %556
  %558 = bitcast i8* %557 to i64*
  %559 = load i64, i64* %253, align 1
  store i64 %559, i64* %558, align 1
  %560 = load i32, i32* %85, align 4
  %561 = mul nsw i32 %560, 3
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds i8, i8* %532, i64 %562
  %564 = bitcast i8* %563 to i64*
  %565 = load i64, i64* %255, align 1
  store i64 %565, i64* %564, align 1
  %566 = load i32, i32* %85, align 4
  %567 = mul nsw i32 %566, 3
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds i8, i8* %533, i64 %568
  %570 = bitcast i8* %569 to i64*
  %571 = load i64, i64* %257, align 1
  store i64 %571, i64* %570, align 1
  %572 = load i32, i32* %85, align 4
  %573 = shl nsw i32 %572, 2
  %574 = sext i32 %573 to i64
  %575 = getelementptr inbounds i8, i8* %532, i64 %574
  %576 = bitcast i8* %575 to i64*
  %577 = load i64, i64* %259, align 1
  store i64 %577, i64* %576, align 1
  %578 = load i32, i32* %85, align 4
  %579 = shl nsw i32 %578, 2
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds i8, i8* %533, i64 %580
  %582 = bitcast i8* %581 to i64*
  %583 = load i64, i64* %261, align 1
  store i64 %583, i64* %582, align 1
  %584 = load i32, i32* %85, align 4
  %585 = mul nsw i32 %584, 5
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds i8, i8* %532, i64 %586
  %588 = bitcast i8* %587 to i64*
  %589 = load i64, i64* %263, align 1
  store i64 %589, i64* %588, align 1
  %590 = load i32, i32* %85, align 4
  %591 = mul nsw i32 %590, 5
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds i8, i8* %533, i64 %592
  %594 = bitcast i8* %593 to i64*
  %595 = load i64, i64* %265, align 1
  store i64 %595, i64* %594, align 1
  %596 = load i32, i32* %85, align 4
  %597 = mul nsw i32 %596, 6
  %598 = sext i32 %597 to i64
  %599 = getelementptr inbounds i8, i8* %532, i64 %598
  %600 = bitcast i8* %599 to i64*
  %601 = load i64, i64* %267, align 1
  store i64 %601, i64* %600, align 1
  %602 = load i32, i32* %85, align 4
  %603 = mul nsw i32 %602, 6
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds i8, i8* %533, i64 %604
  %606 = bitcast i8* %605 to i64*
  %607 = load i64, i64* %269, align 1
  store i64 %607, i64* %606, align 1
  %608 = load i32, i32* %85, align 4
  %609 = mul nsw i32 %608, 7
  %610 = sext i32 %609 to i64
  %611 = getelementptr inbounds i8, i8* %532, i64 %610
  %612 = bitcast i8* %611 to i64*
  %613 = load i64, i64* %271, align 1
  store i64 %613, i64* %612, align 1
  %614 = load i32, i32* %85, align 4
  %615 = mul nsw i32 %614, 7
  %616 = sext i32 %615 to i64
  %617 = getelementptr inbounds i8, i8* %533, i64 %616
  %618 = bitcast i8* %617 to i64*
  %619 = load i64, i64* %273, align 1
  store i64 %619, i64* %618, align 1
  %620 = add nuw nsw i64 %275, 1
  %621 = load i32, i32* %54, align 8
  %622 = sext i32 %621 to i64
  %623 = icmp slt i64 %620, %622
  br i1 %623, label %274, label %624

624:                                              ; preds = %455, %53
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @FinishRow(i8*, i8*) #0 {
  %3 = alloca [64 x i8], align 16
  %4 = bitcast i8* %0 to %struct.VP8Decoder*
  %5 = bitcast i8* %1 to %struct.VP8Io*
  %6 = getelementptr inbounds i8, i8* %0, i64 216
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 2920
  %10 = bitcast i8* %9 to i32*
  %11 = load i32, i32* %10, align 8
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [3 x i8], [3 x i8]* @kFilterExtraRows, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds i8, i8* %0, i64 2880
  %17 = bitcast i8* %16 to i32*
  %18 = load i32, i32* %17, align 8
  %19 = mul nsw i32 %18, %15
  %20 = lshr i32 %15, 1
  %21 = getelementptr inbounds i8, i8* %0, i64 2884
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = mul nsw i32 %20, %23
  %25 = shl i32 %8, 4
  %26 = mul nsw i32 %25, %18
  %27 = shl i32 %8, 3
  %28 = mul nsw i32 %27, %23
  %29 = getelementptr inbounds i8, i8* %0, i64 2856
  %30 = bitcast i8* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = sext i32 %19 to i64
  %33 = sub nsw i64 0, %32
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = sext i32 %26 to i64
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = getelementptr inbounds i8, i8* %0, i64 2864
  %38 = bitcast i8* %37 to i8**
  %39 = load i8*, i8** %38, align 8
  %40 = sext i32 %24 to i64
  %41 = sub nsw i64 0, %40
  %42 = getelementptr inbounds i8, i8* %39, i64 %41
  %43 = sext i32 %28 to i64
  %44 = getelementptr inbounds i8, i8* %42, i64 %43
  %45 = getelementptr inbounds i8, i8* %0, i64 2872
  %46 = bitcast i8* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 %41
  %49 = getelementptr inbounds i8, i8* %48, i64 %43
  %50 = getelementptr inbounds i8, i8* %0, i64 220
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds i8, i8* %0, i64 428
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 4
  %57 = add nsw i32 %56, -1
  %58 = icmp sge i32 %52, %57
  %59 = getelementptr inbounds i8, i8* %0, i64 200
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 8
  %62 = icmp eq i32 %61, 2
  br i1 %62, label %63, label %65

63:                                               ; preds = %2
  %64 = bitcast i8* %6 to %struct.VP8ThreadContext*
  tail call fastcc void @ReconstructRow(%struct.VP8Decoder* %4, %struct.VP8ThreadContext* %64)
  br label %65

65:                                               ; preds = %63, %2
  %66 = getelementptr inbounds i8, i8* %0, i64 224
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 8
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %172, label %70

70:                                               ; preds = %65
  %71 = getelementptr inbounds i8, i8* %0, i64 416
  %72 = bitcast i8* %71 to i32*
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds i8, i8* %0, i64 424
  %75 = bitcast i8* %74 to i32*
  %76 = load i32, i32* %75, align 8
  %77 = icmp slt i32 %73, %76
  br i1 %77, label %78, label %172

78:                                               ; preds = %70
  %79 = load i32, i32* %51, align 4
  %80 = getelementptr inbounds i8, i8* %0, i64 232
  %81 = bitcast i8* %80 to %struct.VP8FInfo**
  %82 = icmp sgt i32 %79, 0
  %83 = sext i32 %73 to i64
  br label %84

84:                                               ; preds = %167, %78
  %85 = phi i64 [ %83, %78 ], [ %168, %167 ]
  %86 = load i32, i32* %7, align 8
  %87 = load i32, i32* %17, align 8
  %88 = load %struct.VP8FInfo*, %struct.VP8FInfo** %81, align 8
  %89 = load i8*, i8** %30, align 8
  %90 = shl i32 %86, 4
  %91 = mul nsw i32 %90, %87
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %89, i64 %92
  %94 = trunc i64 %85 to i32
  %95 = shl nsw i32 %94, 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %93, i64 %96
  %98 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %88, i64 %85, i32 1
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %88, i64 %85, i32 0
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp eq i8 %102, 0
  br i1 %104, label %167, label %105

105:                                              ; preds = %84
  %106 = load i32, i32* %10, align 8
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %128

108:                                              ; preds = %105
  %109 = icmp sgt i64 %85, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %108
  %111 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** @VP8SimpleHFilter16, align 8
  %112 = add nuw nsw i32 %103, 4
  tail call void %111(i8* %97, i32 %87, i32 %112) #4
  br label %113

113:                                              ; preds = %110, %108
  %114 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %88, i64 %85, i32 2
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** @VP8SimpleHFilter16i, align 8
  tail call void %118(i8* %97, i32 %87, i32 %103) #4
  br label %119

119:                                              ; preds = %117, %113
  br i1 %82, label %120, label %123

120:                                              ; preds = %119
  %121 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** @VP8SimpleVFilter16, align 8
  %122 = add nuw nsw i32 %103, 4
  tail call void %121(i8* %97, i32 %87, i32 %122) #4
  br label %123

123:                                              ; preds = %120, %119
  %124 = load i8, i8* %114, align 1
  %125 = icmp eq i8 %124, 0
  br i1 %125, label %167, label %126

126:                                              ; preds = %123
  %127 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** @VP8SimpleVFilter16i, align 8
  tail call void %127(i8* %97, i32 %87, i32 %103) #4
  br label %167

128:                                              ; preds = %105
  %129 = load i32, i32* %22, align 4
  %130 = load i8*, i8** %38, align 8
  %131 = shl i32 %86, 3
  %132 = mul nsw i32 %131, %129
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i8, i8* %130, i64 %133
  %135 = shl nsw i32 %94, 3
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = load i8*, i8** %46, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 %133
  %140 = getelementptr inbounds i8, i8* %139, i64 %136
  %141 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %88, i64 %85, i32 3
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = icmp sgt i64 %85, 0
  br i1 %144, label %145, label %149

145:                                              ; preds = %128
  %146 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @VP8HFilter16, align 8
  %147 = add nuw nsw i32 %103, 4
  tail call void %146(i8* %97, i32 %87, i32 %147, i32 %100, i32 %143) #4
  %148 = load void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32, i32, i32)** @VP8HFilter8, align 8
  tail call void %148(i8* %137, i8* %140, i32 %129, i32 %147, i32 %100, i32 %143) #4
  br label %149

149:                                              ; preds = %145, %128
  %150 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %88, i64 %85, i32 2
  %151 = load i8, i8* %150, align 1
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %156, label %153

153:                                              ; preds = %149
  %154 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @VP8HFilter16i, align 8
  tail call void %154(i8* %97, i32 %87, i32 %103, i32 %100, i32 %143) #4
  %155 = load void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32, i32, i32)** @VP8HFilter8i, align 8
  tail call void %155(i8* %137, i8* %140, i32 %129, i32 %103, i32 %100, i32 %143) #4
  br label %156

156:                                              ; preds = %153, %149
  br i1 %82, label %157, label %161

157:                                              ; preds = %156
  %158 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @VP8VFilter16, align 8
  %159 = add nuw nsw i32 %103, 4
  tail call void %158(i8* %97, i32 %87, i32 %159, i32 %100, i32 %143) #4
  %160 = load void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32, i32, i32)** @VP8VFilter8, align 8
  tail call void %160(i8* %137, i8* %140, i32 %129, i32 %159, i32 %100, i32 %143) #4
  br label %161

161:                                              ; preds = %157, %156
  %162 = load i8, i8* %150, align 1
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %167, label %164

164:                                              ; preds = %161
  %165 = load void (i8*, i32, i32, i32, i32)*, void (i8*, i32, i32, i32, i32)** @VP8VFilter16i, align 8
  tail call void %165(i8* %97, i32 %87, i32 %103, i32 %100, i32 %143) #4
  %166 = load void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32, i32, i32)** @VP8VFilter8i, align 8
  tail call void %166(i8* %137, i8* %140, i32 %129, i32 %103, i32 %100, i32 %143) #4
  br label %167

167:                                              ; preds = %164, %161, %126, %123, %84
  %168 = add nsw i64 %85, 1
  %169 = load i32, i32* %75, align 8
  %170 = sext i32 %169 to i64
  %171 = icmp slt i64 %168, %170
  br i1 %171, label %84, label %172

172:                                              ; preds = %167, %70, %65
  %173 = getelementptr inbounds i8, i8* %0, i64 824
  %174 = bitcast i8* %173 to i32*
  %175 = load i32, i32* %174, align 8
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %291, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds i8, i8* %0, i64 416
  %179 = bitcast i8* %178 to i32*
  %180 = load i32, i32* %179, align 8
  %181 = getelementptr inbounds i8, i8* %0, i64 424
  %182 = bitcast i8* %181 to i32*
  %183 = load i32, i32* %182, align 8
  %184 = icmp slt i32 %180, %183
  br i1 %184, label %185, label %291

185:                                              ; preds = %177
  %186 = getelementptr inbounds i8, i8* %0, i64 240
  %187 = bitcast i8* %186 to %struct.VP8MBData**
  %188 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 0
  %189 = getelementptr inbounds i8, i8* %0, i64 828
  %190 = bitcast i8* %189 to i32*
  %191 = getelementptr inbounds i8, i8* %0, i64 832
  %192 = bitcast i8* %191 to i32*
  %193 = sext i32 %180 to i64
  br label %194

194:                                              ; preds = %286, %185
  %195 = phi i32 [ %183, %185 ], [ %287, %286 ]
  %196 = phi i64 [ %193, %185 ], [ %288, %286 ]
  %197 = load %struct.VP8MBData*, %struct.VP8MBData** %187, align 8
  %198 = load i32, i32* %22, align 4
  %199 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %197, i64 %196, i32 6
  %200 = load i8, i8* %199, align 4
  %201 = icmp ugt i8 %200, 3
  br i1 %201, label %202, label %286

202:                                              ; preds = %194
  %203 = zext i8 %200 to i32
  %204 = load i32, i32* %7, align 8
  %205 = load i8*, i8** %38, align 8
  %206 = shl i32 %198, 3
  %207 = mul i32 %206, %204
  %208 = trunc i64 %196 to i32
  %209 = shl nsw i32 %208, 3
  %210 = load i8*, i8** %46, align 8
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %188) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %188, i8 -86, i64 64, i1 false) #4
  %211 = load i32, i32* %190, align 4
  %212 = load i32, i32* %192, align 4
  br label %213

213:                                              ; preds = %213, %202
  %214 = phi i32 [ %212, %202 ], [ %232, %213 ]
  %215 = phi i32 [ %211, %202 ], [ %228, %213 ]
  %216 = phi i64 [ 0, %202 ], [ %240, %213 ]
  %217 = sext i32 %215 to i64
  %218 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %4, i64 0, i32 22, i32 2, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = sext i32 %214 to i64
  %221 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %4, i64 0, i32 22, i32 2, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = sub i32 %219, %222
  %224 = and i32 %223, 2147483647
  store i32 %224, i32* %218, align 4
  %225 = load i32, i32* %190, align 4
  %226 = add nsw i32 %225, 1
  %227 = icmp eq i32 %226, 55
  %228 = select i1 %227, i32 0, i32 %226
  store i32 %228, i32* %190, align 4
  %229 = load i32, i32* %192, align 4
  %230 = add nsw i32 %229, 1
  %231 = icmp eq i32 %230, 55
  %232 = select i1 %231, i32 0, i32 %230
  store i32 %232, i32* %192, align 4
  %233 = shl i32 %223, 1
  %234 = ashr i32 %233, 24
  %235 = mul nsw i32 %234, %203
  %236 = lshr i32 %235, 8
  %237 = trunc i32 %236 to i8
  %238 = xor i8 %237, -128
  %239 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %216
  store i8 %238, i8* %239, align 1
  %240 = add nuw nsw i64 %216, 1
  %241 = icmp eq i64 %240, 64
  br i1 %241, label %242, label %213

242:                                              ; preds = %213
  %243 = sext i32 %207 to i64
  %244 = sext i32 %209 to i64
  %245 = getelementptr inbounds i8, i8* %205, i64 %243
  %246 = getelementptr inbounds i8, i8* %245, i64 %244
  %247 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @VP8DitherCombine8x8, align 8
  call void %247(i8* nonnull %188, i8* %246, i32 %198) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %188) #4
  %248 = load i8, i8* %199, align 4
  %249 = zext i8 %248 to i32
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %188) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %188, i8 -86, i64 64, i1 false) #4
  %250 = load i32, i32* %190, align 4
  %251 = load i32, i32* %192, align 4
  br label %252

252:                                              ; preds = %252, %242
  %253 = phi i32 [ %251, %242 ], [ %271, %252 ]
  %254 = phi i32 [ %250, %242 ], [ %267, %252 ]
  %255 = phi i64 [ 0, %242 ], [ %279, %252 ]
  %256 = sext i32 %254 to i64
  %257 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %4, i64 0, i32 22, i32 2, i64 %256
  %258 = load i32, i32* %257, align 4
  %259 = sext i32 %253 to i64
  %260 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %4, i64 0, i32 22, i32 2, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = sub i32 %258, %261
  %263 = and i32 %262, 2147483647
  store i32 %263, i32* %257, align 4
  %264 = load i32, i32* %190, align 4
  %265 = add nsw i32 %264, 1
  %266 = icmp eq i32 %265, 55
  %267 = select i1 %266, i32 0, i32 %265
  store i32 %267, i32* %190, align 4
  %268 = load i32, i32* %192, align 4
  %269 = add nsw i32 %268, 1
  %270 = icmp eq i32 %269, 55
  %271 = select i1 %270, i32 0, i32 %269
  store i32 %271, i32* %192, align 4
  %272 = shl i32 %262, 1
  %273 = ashr i32 %272, 24
  %274 = mul nsw i32 %273, %249
  %275 = lshr i32 %274, 8
  %276 = trunc i32 %275 to i8
  %277 = xor i8 %276, -128
  %278 = getelementptr inbounds [64 x i8], [64 x i8]* %3, i64 0, i64 %255
  store i8 %277, i8* %278, align 1
  %279 = add nuw nsw i64 %255, 1
  %280 = icmp eq i64 %279, 64
  br i1 %280, label %281, label %252

281:                                              ; preds = %252
  %282 = getelementptr inbounds i8, i8* %210, i64 %243
  %283 = getelementptr inbounds i8, i8* %282, i64 %244
  %284 = load void (i8*, i8*, i32)*, void (i8*, i8*, i32)** @VP8DitherCombine8x8, align 8
  call void %284(i8* nonnull %188, i8* %283, i32 %198) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %188) #4
  %285 = load i32, i32* %182, align 8
  br label %286

286:                                              ; preds = %281, %194
  %287 = phi i32 [ %285, %281 ], [ %195, %194 ]
  %288 = add nsw i64 %196, 1
  %289 = sext i32 %287 to i64
  %290 = icmp slt i64 %288, %289
  br i1 %290, label %194, label %291

291:                                              ; preds = %286, %177, %172
  %292 = getelementptr inbounds i8, i8* %1, i64 64
  %293 = bitcast i8* %292 to i32 (%struct.VP8Io*)**
  %294 = load i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)** %293, align 8
  %295 = icmp eq i32 (%struct.VP8Io*)* %294, null
  br i1 %295, label %421, label %296

296:                                              ; preds = %291
  %297 = shl i32 %52, 4
  %298 = add i32 %297, 16
  br i1 %53, label %305, label %299

299:                                              ; preds = %296
  %300 = sub nsw i32 %297, %15
  %301 = getelementptr inbounds i8, i8* %1, i64 24
  %302 = bitcast i8* %301 to i8**
  store i8* %36, i8** %302, align 8
  %303 = getelementptr inbounds i8, i8* %1, i64 32
  %304 = bitcast i8* %303 to i8**
  store i8* %44, i8** %304, align 8
  br label %316

305:                                              ; preds = %296
  %306 = load i8*, i8** %30, align 8
  %307 = getelementptr inbounds i8, i8* %306, i64 %35
  %308 = getelementptr inbounds i8, i8* %1, i64 24
  %309 = bitcast i8* %308 to i8**
  store i8* %307, i8** %309, align 8
  %310 = load i8*, i8** %38, align 8
  %311 = getelementptr inbounds i8, i8* %310, i64 %43
  %312 = getelementptr inbounds i8, i8* %1, i64 32
  %313 = bitcast i8* %312 to i8**
  store i8* %311, i8** %313, align 8
  %314 = load i8*, i8** %46, align 8
  %315 = getelementptr inbounds i8, i8* %314, i64 %43
  br label %316

316:                                              ; preds = %305, %299
  %317 = phi i8* [ %315, %305 ], [ %49, %299 ]
  %318 = phi i32 [ 0, %305 ], [ %300, %299 ]
  %319 = getelementptr inbounds i8, i8* %1, i64 40
  %320 = bitcast i8* %319 to i8**
  store i8* %317, i8** %320, align 8
  %321 = sub nsw i32 0, %15
  %322 = select i1 %58, i32 0, i32 %321
  %323 = add i32 %298, %322
  %324 = getelementptr inbounds i8, i8* %1, i64 132
  %325 = bitcast i8* %324 to i32*
  %326 = load i32, i32* %325, align 4
  %327 = icmp sgt i32 %323, %326
  %328 = select i1 %327, i32 %326, i32 %323
  %329 = getelementptr inbounds i8, i8* %1, i64 152
  %330 = bitcast i8* %329 to i8**
  store i8* null, i8** %330, align 8
  %331 = getelementptr inbounds i8, i8* %0, i64 2968
  %332 = bitcast i8* %331 to i8**
  %333 = load i8*, i8** %332, align 8
  %334 = icmp ne i8* %333, null
  %335 = icmp sgt i32 %328, %318
  %336 = and i1 %334, %335
  br i1 %336, label %337, label %341

337:                                              ; preds = %316
  %338 = sub nsw i32 %328, %318
  %339 = call i8* @VP8DecompressAlphaRows(%struct.VP8Decoder* %4, %struct.VP8Io* %5, i32 %318, i32 %338) #4
  store i8* %339, i8** %330, align 8
  %340 = icmp eq i8* %339, null
  br i1 %340, label %419, label %341

341:                                              ; preds = %316, %337
  %342 = phi i8* [ null, %316 ], [ %339, %337 ]
  %343 = getelementptr inbounds i8, i8* %1, i64 128
  %344 = bitcast i8* %343 to i32*
  %345 = load i32, i32* %344, align 8
  %346 = icmp sgt i32 %345, %318
  br i1 %346, label %347, label %378

347:                                              ; preds = %341
  %348 = sub nsw i32 %345, %318
  %349 = load i32, i32* %17, align 8
  %350 = mul nsw i32 %349, %348
  %351 = getelementptr inbounds i8, i8* %1, i64 24
  %352 = bitcast i8* %351 to i8**
  %353 = load i8*, i8** %352, align 8
  %354 = sext i32 %350 to i64
  %355 = getelementptr inbounds i8, i8* %353, i64 %354
  store i8* %355, i8** %352, align 8
  %356 = load i32, i32* %22, align 4
  %357 = ashr i32 %348, 1
  %358 = mul nsw i32 %356, %357
  %359 = getelementptr inbounds i8, i8* %1, i64 32
  %360 = bitcast i8* %359 to i8**
  %361 = load i8*, i8** %360, align 8
  %362 = sext i32 %358 to i64
  %363 = getelementptr inbounds i8, i8* %361, i64 %362
  store i8* %363, i8** %360, align 8
  %364 = load i32, i32* %22, align 4
  %365 = mul nsw i32 %364, %357
  %366 = getelementptr inbounds i8, i8* %1, i64 40
  %367 = bitcast i8* %366 to i8**
  %368 = load i8*, i8** %367, align 8
  %369 = sext i32 %365 to i64
  %370 = getelementptr inbounds i8, i8* %368, i64 %369
  store i8* %370, i8** %367, align 8
  %371 = icmp eq i8* %342, null
  br i1 %371, label %378, label %372

372:                                              ; preds = %347
  %373 = bitcast i8* %1 to i32*
  %374 = load i32, i32* %373, align 8
  %375 = mul nsw i32 %374, %348
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds i8, i8* %342, i64 %376
  store i8* %377, i8** %330, align 8
  br label %378

378:                                              ; preds = %372, %347, %341
  %379 = phi i8* [ %342, %341 ], [ null, %347 ], [ %377, %372 ]
  %380 = phi i32 [ %318, %341 ], [ %345, %347 ], [ %345, %372 ]
  %381 = icmp sgt i32 %328, %380
  br i1 %381, label %382, label %421

382:                                              ; preds = %378
  %383 = getelementptr inbounds i8, i8* %1, i64 120
  %384 = bitcast i8* %383 to i32*
  %385 = load i32, i32* %384, align 8
  %386 = getelementptr inbounds i8, i8* %1, i64 24
  %387 = bitcast i8* %386 to i8**
  %388 = load i8*, i8** %387, align 8
  %389 = sext i32 %385 to i64
  %390 = getelementptr inbounds i8, i8* %388, i64 %389
  store i8* %390, i8** %387, align 8
  %391 = ashr i32 %385, 1
  %392 = getelementptr inbounds i8, i8* %1, i64 32
  %393 = bitcast i8* %392 to i8**
  %394 = load i8*, i8** %393, align 8
  %395 = sext i32 %391 to i64
  %396 = getelementptr inbounds i8, i8* %394, i64 %395
  store i8* %396, i8** %393, align 8
  %397 = getelementptr inbounds i8, i8* %1, i64 40
  %398 = bitcast i8* %397 to i8**
  %399 = load i8*, i8** %398, align 8
  %400 = getelementptr inbounds i8, i8* %399, i64 %395
  store i8* %400, i8** %398, align 8
  %401 = icmp eq i8* %379, null
  br i1 %401, label %404, label %402

402:                                              ; preds = %382
  %403 = getelementptr inbounds i8, i8* %379, i64 %389
  store i8* %403, i8** %330, align 8
  br label %404

404:                                              ; preds = %382, %402
  %405 = sub nsw i32 %380, %345
  %406 = getelementptr inbounds i8, i8* %1, i64 8
  %407 = bitcast i8* %406 to i32*
  store i32 %405, i32* %407, align 8
  %408 = getelementptr inbounds i8, i8* %1, i64 124
  %409 = bitcast i8* %408 to i32*
  %410 = load i32, i32* %409, align 4
  %411 = sub nsw i32 %410, %385
  %412 = getelementptr inbounds i8, i8* %1, i64 12
  %413 = bitcast i8* %412 to i32*
  store i32 %411, i32* %413, align 4
  %414 = sub nsw i32 %328, %380
  %415 = getelementptr inbounds i8, i8* %1, i64 16
  %416 = bitcast i8* %415 to i32*
  store i32 %414, i32* %416, align 8
  %417 = load i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)** %293, align 8
  %418 = call i32 %417(%struct.VP8Io* %5) #4
  br label %421

419:                                              ; preds = %337
  %420 = call i32 @VP8SetError(%struct.VP8Decoder* %4, i32 3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0)) #4
  br label %448

421:                                              ; preds = %378, %404, %291
  %422 = phi i32 [ 1, %291 ], [ 1, %378 ], [ %418, %404 ]
  %423 = add nsw i32 %8, 1
  %424 = getelementptr inbounds i8, i8* %0, i64 208
  %425 = bitcast i8* %424 to i32*
  %426 = load i32, i32* %425, align 8
  %427 = icmp ne i32 %423, %426
  %428 = or i1 %58, %427
  br i1 %428, label %448, label %429

429:                                              ; preds = %421
  %430 = load i8*, i8** %30, align 8
  %431 = getelementptr inbounds i8, i8* %430, i64 %33
  %432 = load i32, i32* %17, align 8
  %433 = shl nsw i32 %432, 4
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds i8, i8* %36, i64 %434
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %431, i8* align 1 %435, i64 %32, i1 false)
  %436 = load i8*, i8** %38, align 8
  %437 = getelementptr inbounds i8, i8* %436, i64 %41
  %438 = load i32, i32* %22, align 4
  %439 = shl nsw i32 %438, 3
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i8, i8* %44, i64 %440
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %437, i8* align 1 %441, i64 %40, i1 false)
  %442 = load i8*, i8** %46, align 8
  %443 = getelementptr inbounds i8, i8* %442, i64 %41
  %444 = load i32, i32* %22, align 4
  %445 = shl nsw i32 %444, 3
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds i8, i8* %49, i64 %446
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %443, i8* align 1 %447, i64 %40, i1 false)
  br label %448

448:                                              ; preds = %419, %429, %421
  %449 = phi i32 [ %420, %419 ], [ %422, %421 ], [ %422, %429 ]
  ret i32 %449
}

declare %struct.WebPWorkerInterface* @WebPGetWorkerInterface() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EnterCritical(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 12
  %4 = load i32 (%struct.VP8Io*)*, i32 (%struct.VP8Io*)** %3, align 8
  %5 = icmp eq i32 (%struct.VP8Io*)* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = tail call i32 %4(%struct.VP8Io* %1) #4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %6
  %10 = tail call i32 @VP8SetError(%struct.VP8Decoder* %0, i32 6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0)) #4
  %11 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  br label %185

13:                                               ; preds = %6, %2
  %14 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 17
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 43
  br i1 %16, label %19, label %18

18:                                               ; preds = %13
  store i32 0, i32* %17, align 8
  br label %29

19:                                               ; preds = %13
  %20 = load i32, i32* %17, align 8
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [3 x i8], [3 x i8]* @kFilterExtraRows, i64 0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = icmp eq i32 %20, 2
  br i1 %25, label %26, label %29

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 15
  store i32 0, i32* %27, align 8
  %28 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 16
  br label %46

29:                                               ; preds = %18, %19
  %30 = phi i32 [ 0, %18 ], [ %24, %19 ]
  %31 = phi i32 [ 0, %18 ], [ %20, %19 ]
  %32 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 19
  %33 = load i32, i32* %32, align 8
  %34 = sub nsw i32 %33, %30
  %35 = ashr i32 %34, 4
  %36 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 15
  store i32 %35, i32* %36, align 8
  %37 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 21
  %38 = load i32, i32* %37, align 8
  %39 = sub nsw i32 %38, %30
  %40 = ashr i32 %39, 4
  %41 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 16
  store i32 %40, i32* %41, align 4
  %42 = icmp slt i32 %34, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %29
  store i32 0, i32* %36, align 8
  br label %44

44:                                               ; preds = %43, %29
  %45 = icmp slt i32 %39, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %44, %26
  %47 = phi i32* [ %28, %26 ], [ %41, %44 ]
  %48 = phi i32 [ %24, %26 ], [ %30, %44 ]
  %49 = phi i32 [ 2, %26 ], [ %31, %44 ]
  store i32 0, i32* %47, align 4
  br label %50

50:                                               ; preds = %46, %44
  %51 = phi i32 [ %30, %44 ], [ %48, %46 ]
  %52 = phi i32 [ %31, %44 ], [ %49, %46 ]
  %53 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 22
  %54 = load i32, i32* %53, align 4
  %55 = add nuw nsw i32 %51, 15
  %56 = add i32 %55, %54
  %57 = ashr i32 %56, 4
  %58 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 18
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 20
  %60 = load i32, i32* %59, align 4
  %61 = add i32 %55, %60
  %62 = ashr i32 %61, 4
  %63 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 17
  %64 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 13
  %65 = load i32, i32* %64, align 8
  %66 = icmp sgt i32 %62, %65
  %67 = select i1 %66, i32 %65, i32 %62
  store i32 %67, i32* %63, align 8
  %68 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 14
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %57, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %50
  store i32 %69, i32* %58, align 4
  br label %72

72:                                               ; preds = %71, %50
  %73 = icmp sgt i32 %52, 0
  br i1 %73, label %74, label %185

74:                                               ; preds = %72
  %75 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 0
  %76 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 2
  %77 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 1
  %78 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 3
  %79 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 4, i64 0
  %80 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 5, i64 0
  %81 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 6, i32 2
  %82 = load i32, i32* %75, align 8
  %83 = icmp eq i32 %82, 0
  br label %84

84:                                               ; preds = %181, %74
  %85 = phi i64 [ 0, %74 ], [ %183, %181 ]
  br i1 %83, label %95, label %86

86:                                               ; preds = %84
  %87 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 7, i32 4, i64 %85
  %88 = load i8, i8* %87, align 1
  %89 = sext i8 %88 to i32
  %90 = load i32, i32* %76, align 8
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %97

92:                                               ; preds = %86
  %93 = load i32, i32* %77, align 4
  %94 = add nsw i32 %93, %89
  br label %97

95:                                               ; preds = %84
  %96 = load i32, i32* %77, align 4
  br label %97

97:                                               ; preds = %95, %92, %86
  %98 = phi i32 [ %89, %86 ], [ %94, %92 ], [ %96, %95 ]
  %99 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 0
  %100 = load i32, i32* %78, align 4
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %105, label %102

102:                                              ; preds = %97
  %103 = load i32, i32* %79, align 4
  %104 = add nsw i32 %103, %98
  br label %105

105:                                              ; preds = %102, %97
  %106 = phi i32 [ %104, %102 ], [ %98, %97 ]
  %107 = icmp slt i32 %106, 63
  %108 = select i1 %107, i32 %106, i32 63
  %109 = icmp sgt i32 %108, 0
  %110 = select i1 %109, i32 %108, i32 0
  %111 = icmp sgt i32 %106, 0
  br i1 %111, label %112, label %137

112:                                              ; preds = %105
  %113 = load i32, i32* %81, align 4
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %122

115:                                              ; preds = %112
  %116 = icmp sgt i32 %113, 4
  %117 = select i1 %116, i32 2, i32 1
  %118 = lshr i32 %110, %117
  %119 = sub nsw i32 9, %113
  %120 = icmp sgt i32 %118, %119
  %121 = select i1 %120, i32 %119, i32 %118
  br label %122

122:                                              ; preds = %115, %112
  %123 = phi i32 [ %110, %112 ], [ %121, %115 ]
  %124 = icmp sgt i32 %123, 1
  %125 = select i1 %124, i32 %123, i32 1
  %126 = trunc i32 %125 to i8
  %127 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 0, i32 1
  store i8 %126, i8* %127, align 1
  %128 = shl nuw nsw i32 %110, 1
  %129 = add nuw nsw i32 %125, %128
  %130 = trunc i32 %129 to i8
  %131 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %99, i64 0, i32 0
  store i8 %130, i8* %131, align 1
  %132 = icmp sgt i32 %110, 39
  %133 = icmp sgt i32 %110, 14
  %134 = zext i1 %133 to i8
  %135 = select i1 %132, i8 2, i8 %134
  %136 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 0, i32 3
  store i8 %135, i8* %136, align 1
  br label %139

137:                                              ; preds = %105
  %138 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %99, i64 0, i32 0
  store i8 0, i8* %138, align 1
  br label %139

139:                                              ; preds = %137, %122
  %140 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 0, i32 2
  store i8 0, i8* %140, align 1
  %141 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 1
  br i1 %101, label %147, label %142

142:                                              ; preds = %139
  %143 = load i32, i32* %79, align 4
  %144 = add nsw i32 %143, %98
  %145 = load i32, i32* %80, align 4
  %146 = add nsw i32 %144, %145
  br label %147

147:                                              ; preds = %142, %139
  %148 = phi i32 [ %146, %142 ], [ %98, %139 ]
  %149 = icmp slt i32 %148, 63
  %150 = select i1 %149, i32 %148, i32 63
  %151 = icmp sgt i32 %150, 0
  %152 = select i1 %151, i32 %150, i32 0
  %153 = icmp sgt i32 %148, 0
  br i1 %153, label %156, label %154

154:                                              ; preds = %147
  %155 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %141, i64 0, i32 0
  store i8 0, i8* %155, align 1
  br label %181

156:                                              ; preds = %147
  %157 = load i32, i32* %81, align 4
  %158 = icmp sgt i32 %157, 0
  br i1 %158, label %159, label %166

159:                                              ; preds = %156
  %160 = icmp sgt i32 %157, 4
  %161 = select i1 %160, i32 2, i32 1
  %162 = lshr i32 %152, %161
  %163 = sub nsw i32 9, %157
  %164 = icmp sgt i32 %162, %163
  %165 = select i1 %164, i32 %163, i32 %162
  br label %166

166:                                              ; preds = %159, %156
  %167 = phi i32 [ %152, %156 ], [ %165, %159 ]
  %168 = icmp sgt i32 %167, 1
  %169 = select i1 %168, i32 %167, i32 1
  %170 = trunc i32 %169 to i8
  %171 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 1, i32 1
  store i8 %170, i8* %171, align 1
  %172 = shl nuw nsw i32 %152, 1
  %173 = add nuw nsw i32 %169, %172
  %174 = trunc i32 %173 to i8
  %175 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %141, i64 0, i32 0
  store i8 %174, i8* %175, align 1
  %176 = icmp sgt i32 %152, 39
  %177 = icmp sgt i32 %152, 14
  %178 = zext i1 %177 to i8
  %179 = select i1 %176, i8 2, i8 %178
  %180 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 1, i32 3
  store i8 %179, i8* %180, align 1
  br label %181

181:                                              ; preds = %166, %154
  %182 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 44, i64 %85, i64 1, i32 2
  store i8 1, i8* %182, align 1
  %183 = add nuw nsw i64 %85, 1
  %184 = icmp eq i64 %183, 4
  br i1 %184, label %185, label %84

185:                                              ; preds = %181, %72, %9
  %186 = phi i32 [ %12, %9 ], [ 0, %72 ], [ 0, %181 ]
  ret i32 %186
}

declare i32 @VP8SetError(%struct.VP8Decoder*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8ExitCritical(%struct.VP8Decoder*, %struct.VP8Io*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 9
  %4 = load i32, i32* %3, align 8
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %2
  %7 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #4
  %8 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %7, i64 0, i32 2
  %9 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %8, align 8
  %10 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  %11 = tail call i32 %9(%struct.WebPWorker* %10) #4
  br label %12

12:                                               ; preds = %6, %2
  %13 = phi i32 [ %11, %6 ], [ 1, %2 ]
  %14 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 13
  %15 = load void (%struct.VP8Io*)*, void (%struct.VP8Io*)** %14, align 8
  %16 = icmp eq void (%struct.VP8Io*)* %15, null
  br i1 %16, label %18, label %17

17:                                               ; preds = %12
  tail call void %15(%struct.VP8Io* %1) #4
  br label %18

18:                                               ; preds = %12, %17
  ret i32 %13
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @VP8GetThreadMethod(%struct.WebPDecoderOptions* nocapture readnone, %struct.WebPHeaderStructure* nocapture readnone, i32, i32) local_unnamed_addr #3 {
  ret i32 0
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8InitFrame(%struct.VP8Decoder*, %struct.VP8Io* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 10
  store i32 0, i32* %3, align 4
  %4 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 9
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %26

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8
  %9 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #4
  %10 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %9, i64 0, i32 1
  %11 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %10, align 8
  %12 = tail call i32 %11(%struct.WebPWorker* %8) #4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %28, label %14

14:                                               ; preds = %7
  %15 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8, i32 3
  %16 = bitcast i8** %15 to %struct.VP8Decoder**
  store %struct.VP8Decoder* %0, %struct.VP8Decoder** %16, align 8
  %17 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 5
  %18 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8, i32 4
  %19 = bitcast i8** %18 to %struct.VP8Io**
  store %struct.VP8Io* %17, %struct.VP8Io** %19, align 8
  %20 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 8, i32 2
  store i32 (i8*, i8*)* @FinishRow, i32 (i8*, i8*)** %20, align 8
  %21 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 43
  %22 = load i32, i32* %21, align 8
  %23 = icmp sgt i32 %22, 0
  %24 = select i1 %23, i32 3, i32 2
  %25 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 11
  store i32 %24, i32* %25, align 8
  br label %34

26:                                               ; preds = %2
  %27 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 11
  store i32 1, i32* %27, align 8
  br label %34

28:                                               ; preds = %7
  %29 = tail call i32 @VP8SetError(%struct.VP8Decoder* %0, i32 1, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0)) #4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %203, label %31

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 11
  %33 = load i32, i32* %32, align 8
  br label %34

34:                                               ; preds = %31, %26, %14
  %35 = phi i32 [ %33, %31 ], [ 1, %26 ], [ %24, %14 ]
  %36 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 13
  %37 = load i32, i32* %36, align 8
  %38 = shl nsw i32 %37, 2
  %39 = sext i32 %38 to i64
  %40 = sext i32 %37 to i64
  %41 = shl nsw i64 %40, 5
  %42 = add nsw i32 %37, 1
  %43 = sext i32 %42 to i64
  %44 = shl nsw i64 %43, 1
  %45 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 43
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, 0
  %48 = load i32, i32* %4, align 8
  br i1 %47, label %49, label %55

49:                                               ; preds = %34
  %50 = icmp sgt i32 %48, 0
  %51 = select i1 %50, i32 2, i32 1
  %52 = mul nsw i32 %51, %37
  %53 = sext i32 %52 to i64
  %54 = shl nsw i64 %53, 2
  br label %55

55:                                               ; preds = %49, %34
  %56 = phi i64 [ %54, %49 ], [ 0, %34 ]
  %57 = icmp eq i32 %48, 2
  %58 = select i1 %57, i32 2, i32 1
  %59 = mul nsw i32 %58, %37
  %60 = sext i32 %59 to i64
  %61 = mul nsw i64 %60, 800
  %62 = shl nsw i32 %35, 4
  %63 = sext i32 %46 to i64
  %64 = getelementptr inbounds [3 x i8], [3 x i8]* @kFilterExtraRows, i64 0, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = add nsw i32 %62, %66
  %68 = mul nsw i32 %67, 3
  %69 = sdiv i32 %68, 2
  %70 = sext i32 %69 to i64
  %71 = mul i64 %41, %70
  %72 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 46
  %73 = load i8*, i8** %72, align 8
  %74 = icmp eq i8* %73, null
  br i1 %74, label %83, label %75

75:                                               ; preds = %55
  %76 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 0
  %77 = load i16, i16* %76, align 8
  %78 = zext i16 %77 to i64
  %79 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 5, i32 1
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i64
  %82 = mul nuw nsw i64 %81, %78
  br label %83

83:                                               ; preds = %75, %55
  %84 = phi i64 [ %82, %75 ], [ 0, %55 ]
  %85 = add nsw i64 %39, 863
  %86 = add nsw i64 %85, %41
  %87 = add nsw i64 %86, %44
  %88 = add nsw i64 %87, %61
  %89 = add nsw i64 %88, %56
  %90 = add i64 %89, %71
  %91 = add i64 %90, %84
  %92 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 39
  %93 = load i64, i64* %92, align 8
  %94 = icmp ugt i64 %91, %93
  %95 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 38
  %96 = load i8*, i8** %95, align 8
  br i1 %94, label %97, label %103

97:                                               ; preds = %83
  tail call void @WebPSafeFree(i8* %96) #4
  store i64 0, i64* %92, align 8
  %98 = tail call i8* @WebPSafeMalloc(i64 %91, i64 1) #4
  store i8* %98, i8** %95, align 8
  %99 = icmp eq i8* %98, null
  br i1 %99, label %176, label %100

100:                                              ; preds = %97
  store i64 %91, i64* %92, align 8
  %101 = load i32, i32* %45, align 8
  %102 = load i32, i32* %4, align 8
  br label %103

103:                                              ; preds = %100, %83
  %104 = phi i32 [ %102, %100 ], [ %48, %83 ]
  %105 = phi i32 [ %101, %100 ], [ %46, %83 ]
  %106 = phi i8* [ %98, %100 ], [ %96, %83 ]
  %107 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 27
  store i8* %106, i8** %107, align 8
  %108 = getelementptr inbounds i8, i8* %106, i64 %39
  %109 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 29
  %110 = bitcast %struct.VP8TopSamples** %109 to i8**
  store i8* %108, i8** %110, align 8
  %111 = getelementptr inbounds i8, i8* %108, i64 %41
  %112 = getelementptr inbounds i8, i8* %111, i64 2
  %113 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 30
  %114 = bitcast %struct.VP8MB** %113 to i8**
  store i8* %112, i8** %114, align 8
  %115 = getelementptr inbounds i8, i8* %111, i64 %44
  %116 = icmp eq i64 %56, 0
  %117 = bitcast i8* %115 to %struct.VP8FInfo*
  %118 = select i1 %116, %struct.VP8FInfo* null, %struct.VP8FInfo* %117
  %119 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 31
  store %struct.VP8FInfo* %118, %struct.VP8FInfo** %119, align 8
  %120 = getelementptr inbounds i8, i8* %115, i64 %56
  %121 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 0
  store i32 0, i32* %121, align 8
  %122 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 3
  %123 = icmp sgt i32 %105, 0
  %124 = icmp sgt i32 %104, 0
  %125 = and i1 %123, %124
  %126 = getelementptr inbounds %struct.VP8FInfo, %struct.VP8FInfo* %118, i64 %40
  %127 = select i1 %125, %struct.VP8FInfo* %126, %struct.VP8FInfo* %118
  store %struct.VP8FInfo* %127, %struct.VP8FInfo** %122, align 8
  %128 = ptrtoint i8* %120 to i64
  %129 = add i64 %128, 31
  %130 = and i64 %129, -32
  %131 = inttoptr i64 %130 to i8*
  %132 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 32
  store i8* %131, i8** %132, align 8
  %133 = getelementptr inbounds i8, i8* %131, i64 832
  %134 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 42
  %135 = bitcast %struct.VP8MBData** %134 to i8**
  store i8* %133, i8** %135, align 8
  %136 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 12, i32 4
  %137 = bitcast %struct.VP8MBData** %136 to i8**
  store i8* %133, i8** %137, align 8
  %138 = icmp eq i32 %104, 2
  br i1 %138, label %139, label %142

139:                                              ; preds = %103
  %140 = bitcast i8* %133 to %struct.VP8MBData*
  %141 = getelementptr inbounds %struct.VP8MBData, %struct.VP8MBData* %140, i64 %40
  store %struct.VP8MBData* %141, %struct.VP8MBData** %136, align 8
  br label %142

142:                                              ; preds = %103, %139
  %143 = getelementptr inbounds i8, i8* %133, i64 %61
  %144 = shl nsw i32 %37, 4
  %145 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 36
  store i32 %144, i32* %145, align 8
  %146 = shl nsw i32 %37, 3
  %147 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 37
  store i32 %146, i32* %147, align 4
  %148 = sext i32 %105 to i64
  %149 = getelementptr inbounds [3 x i8], [3 x i8]* @kFilterExtraRows, i64 0, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = mul nsw i32 %144, %151
  %153 = lshr i32 %151, 1
  %154 = mul nsw i32 %153, %146
  %155 = sext i32 %152 to i64
  %156 = getelementptr inbounds i8, i8* %143, i64 %155
  %157 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 33
  store i8* %156, i8** %157, align 8
  %158 = mul nsw i32 %144, %62
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i8, i8* %156, i64 %159
  %161 = sext i32 %154 to i64
  %162 = getelementptr inbounds i8, i8* %160, i64 %161
  %163 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 34
  store i8* %162, i8** %163, align 8
  %164 = shl i32 %35, 3
  %165 = mul nsw i32 %164, %146
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %162, i64 %166
  %168 = getelementptr inbounds i8, i8* %167, i64 %161
  %169 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 35
  store i8* %168, i8** %169, align 8
  store i32 0, i32* %3, align 4
  %170 = getelementptr inbounds i8, i8* %143, i64 %71
  %171 = icmp eq i64 %84, 0
  %172 = select i1 %171, i8* null, i8* %170
  %173 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 50
  store i8* %172, i8** %173, align 8
  %174 = getelementptr inbounds i8, i8* %112, i64 -2
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %174, i8 0, i64 %44, i1 false) #4
  tail call void @VP8InitScanline(%struct.VP8Decoder* %0) #4
  %175 = load i8*, i8** %107, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %175, i8 0, i64 %39, i1 false) #4
  br label %179

176:                                              ; preds = %97
  %177 = tail call i32 @VP8SetError(%struct.VP8Decoder* %0, i32 1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0)) #4
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %203, label %179

179:                                              ; preds = %142, %176
  %180 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 2
  store i32 0, i32* %180, align 8
  %181 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 33
  %182 = bitcast i8** %181 to i64*
  %183 = load i64, i64* %182, align 8
  %184 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 5
  %185 = bitcast i8** %184 to i64*
  store i64 %183, i64* %185, align 8
  %186 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 34
  %187 = bitcast i8** %186 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 6
  %190 = bitcast i8** %189 to i64*
  store i64 %188, i64* %190, align 8
  %191 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 35
  %192 = bitcast i8** %191 to i64*
  %193 = load i64, i64* %192, align 8
  %194 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 7
  %195 = bitcast i8** %194 to i64*
  store i64 %193, i64* %195, align 8
  %196 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 36
  %197 = load i32, i32* %196, align 8
  %198 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 8
  store i32 %197, i32* %198, align 8
  %199 = getelementptr inbounds %struct.VP8Decoder, %struct.VP8Decoder* %0, i64 0, i32 37
  %200 = load i32, i32* %199, align 4
  %201 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 9
  store i32 %200, i32* %201, align 4
  %202 = getelementptr inbounds %struct.VP8Io, %struct.VP8Io* %1, i64 0, i32 26
  store i8* null, i8** %202, align 8
  tail call void @VP8DspInit() #4
  br label %203

203:                                              ; preds = %176, %28, %179
  %204 = phi i32 [ 1, %179 ], [ 0, %28 ], [ 0, %176 ]
  ret i32 %204
}

declare void @VP8DspInit() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i8* @VP8DecompressAlphaRows(%struct.VP8Decoder*, %struct.VP8Io*, i32, i32) local_unnamed_addr #2

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

declare void @VP8InitScanline(%struct.VP8Decoder*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
