; ModuleID = '../../base/time/time_now_posix.cc'
source_filename = "../../base/time/time_now_posix.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.timeval = type { i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%struct.timespec = type { i64, i64 }

@.str = private unnamed_addr constant [34 x i8] c"../../base/time/time_now_posix.cc\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"gettimeofday(&tv, &tz) == 0\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"clock_gettime(clk_id, &ts) == 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base6subtle23TimeNowIgnoringOverrideEv() local_unnamed_addr #0 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca i64, align 8
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 0
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 1
  %7 = bitcast i64* %2 to i8*
  %8 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  store i64 0, i64* %2, align 8
  %9 = call i32 @gettimeofday(%struct.timeval* nonnull %1, i8* nonnull %7) #8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %0
  %12 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #8
  %13 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8
  br label %14

14:                                               ; preds = %0, %11
  %15 = load i64, i64* %5, align 8
  %16 = mul nsw i64 %15, 1000000
  %17 = load i64, i64* %6, align 8
  %18 = add i64 %17, 11644473600000000
  %19 = add i64 %18, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8
  ret i64 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, i8* nocapture) local_unnamed_addr #2

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base6subtle37TimeNowFromSystemTimeIgnoringOverrideEv() local_unnamed_addr #0 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca i64, align 8
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = bitcast %struct.timeval* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8
  %5 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 0
  %6 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i64 0, i32 1
  %7 = bitcast i64* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 16, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #8
  store i64 0, i64* %2, align 8
  %8 = call i32 @gettimeofday(%struct.timeval* nonnull %1, i8* nonnull %7) #8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %0
  %11 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 80, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0)) #8
  %12 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8
  br label %13

13:                                               ; preds = %0, %10
  %14 = load i64, i64* %5, align 8
  %15 = mul nsw i64 %14, 1000000
  %16 = load i64, i64* %6, align 8
  %17 = add i64 %16, 11644473600000000
  %18 = add i64 %17, %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8
  ret i64 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8
  %4 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 0
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 16, i1 false) #8
  %6 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %1) #8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %0
  %9 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0)) #8
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  br label %11

11:                                               ; preds = %8, %0
  %12 = load i64, i64* %4, align 8
  %13 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %12, i64 1000000) #8
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = load i64, i64* %5, align 8
  %17 = sdiv i64 %16, 1000
  %18 = extractvalue { i64, i1 } %13, 0
  %19 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %18, i64 %17) #8
  %20 = extractvalue { i64, i1 } %19, 1
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %15, %11
  call void @llvm.trap() #8
  unreachable

22:                                               ; preds = %15
  %23 = extractvalue { i64, i1 } %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8
  ret i64 %23
}

; Function Attrs: nounwind ssp uwtable
define hidden { i8, i64 } @_ZN4base6subtle33MaybeTimeTicksNowIgnoringOverrideEv() local_unnamed_addr #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8
  %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %2, i8 -86, i64 16, i1 false) #8
  %4 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %1) #8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %20

6:                                                ; preds = %0
  %7 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %8, i64 1000000) #8
  %10 = extractvalue { i64, i1 } %9, 1
  br i1 %10, label %17, label %11

11:                                               ; preds = %6
  %12 = load i64, i64* %3, align 8
  %13 = sdiv i64 %12, 1000
  %14 = extractvalue { i64, i1 } %9, 0
  %15 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %14, i64 %13) #8
  %16 = extractvalue { i64, i1 } %15, 1
  br i1 %16, label %17, label %18, !prof !2

17:                                               ; preds = %11, %6
  call void @llvm.trap() #8
  unreachable

18:                                               ; preds = %11
  %19 = extractvalue { i64, i1 } %15, 0
  br label %20

20:                                               ; preds = %0, %18
  %21 = phi i8 [ 1, %18 ], [ 0, %0 ]
  %22 = phi i64 [ %19, %18 ], [ undef, %0 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8
  %23 = insertvalue { i8, i64 } undef, i8 %21, 0
  %24 = insertvalue { i8, i64 } %23, i64 %22, 1
  ret { i8, i64 } %24
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN4base9TimeTicks8GetClockEv() local_unnamed_addr #5 align 2 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4base9TimeTicks16IsHighResolutionEv() local_unnamed_addr #5 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN4base9TimeTicks27IsConsistentAcrossProcessesEv() local_unnamed_addr #5 align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base6subtle30ThreadTicksNowIgnoringOverrideEv() local_unnamed_addr #0 {
  %1 = alloca %struct.timespec, align 8
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = bitcast %struct.timespec* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8
  %4 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 0
  %5 = getelementptr inbounds %struct.timespec, %struct.timespec* %1, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 16, i1 false) #8
  %6 = call i32 @clock_gettime(i32 3, %struct.timespec* nonnull %1) #8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %0
  %9 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 54, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0)) #8
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  br label %11

11:                                               ; preds = %8, %0
  %12 = load i64, i64* %4, align 8
  %13 = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %12, i64 1000000) #8
  %14 = extractvalue { i64, i1 } %13, 1
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = load i64, i64* %5, align 8
  %17 = sdiv i64 %16, 1000
  %18 = extractvalue { i64, i1 } %13, 0
  %19 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %18, i64 %17) #8
  %20 = extractvalue { i64, i1 } %19, 1
  br i1 %20, label %21, label %22, !prof !2

21:                                               ; preds = %15, %11
  call void @llvm.trap() #8
  unreachable

22:                                               ; preds = %15
  %23 = extractvalue { i64, i1 } %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8
  ret i64 %23
}

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind
declare i32 @clock_gettime(i32, %struct.timespec*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #6

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
