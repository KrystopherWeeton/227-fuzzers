; ModuleID = '../../chrome/browser/policy/managed_account_policy_handler.cc'
source_filename = "../../chrome/browser/policy/managed_account_policy_handler.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.ManagedAccountRestrictionsPolicyHandler = type { %"class.policy::SimpleSchemaValidatingPolicyHandler.base", [6 x i8] }
%"class.policy::SimpleSchemaValidatingPolicyHandler.base" = type <{ %"class.policy::SchemaValidatingPolicyHandler.base", [4 x i8], i8*, i8, i8 }>
%"class.policy::SchemaValidatingPolicyHandler.base" = type <{ %"class.policy::NamedPolicyHandler", %"class.policy::Schema", i32 }>
%"class.policy::NamedPolicyHandler" = type { %"class.policy::ConfigurationPolicyHandler", i8* }
%"class.policy::ConfigurationPolicyHandler" = type { i32 (...)** }
%"class.policy::Schema" = type { %class.scoped_refptr, %"struct.policy::internal::SchemaNode"* }
%class.scoped_refptr = type { %"class.policy::Schema::InternalStorage"* }
%"class.policy::Schema::InternalStorage" = type opaque
%"struct.policy::internal::SchemaNode" = type opaque
%"class.policy::SimpleSchemaValidatingPolicyHandler" = type <{ %"class.policy::SchemaValidatingPolicyHandler.base", [4 x i8], i8*, i8, i8, [6 x i8] }>
%"class.policy::PolicyMap" = type { %"class.std::__1::map", i8, %"class.base::internal::flat_tree", %"class.base::internal::flat_tree" }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.std::__1::basic_string"* }
%class.PrefValueMap = type { i32 (...)**, %"class.std::__1::map.14" }
%"class.std::__1::map.14" = type { %"class.std::__1::__tree.15" }
%"class.std::__1::__tree.15" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__basic_string_common" = type { i8 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.policy::PolicyMap::Entry" = type { i32, i32, i32, %"class.std::__1::unique_ptr", %"class.std::__1::vector.33", %"class.absl::optional", i8, i8, %"class.std::__1::map.71" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.policy::ExternalDataFetcher"* }
%"class.policy::ExternalDataFetcher" = type { %"class.base::WeakPtr", %"class.std::__1::basic_string" }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.25 }
%class.scoped_refptr.25 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.26" }
%"struct.std::__1::__atomic_base.26" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.27" }
%"struct.std::__1::atomic.27" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__atomic_base.29" }
%"struct.std::__1::__atomic_base.29" = type { %"struct.std::__1::__cxx_atomic_impl.30" }
%"struct.std::__1::__cxx_atomic_impl.30" = type { %"struct.std::__1::__cxx_atomic_base_impl.31" }
%"struct.std::__1::__cxx_atomic_base_impl.31" = type { i8 }
%"class.std::__1::vector.33" = type { %"class.std::__1::__vector_base.34" }
%"class.std::__1::__vector_base.34" = type { %"class.policy::PolicyMap::EntryConflict"*, %"class.policy::PolicyMap::EntryConflict"*, %"class.std::__1::__compressed_pair.35" }
%"class.policy::PolicyMap::EntryConflict" = type { i32, %"class.policy::PolicyMap::Entry" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.policy::PolicyMap::EntryConflict"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.40 }
%union.anon.40 = type { %"class.base::Value" }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.41" }
%"union.absl::variant_internal::DestructibleUnionImpl.41" = type { %"union.absl::variant_internal::DestructibleUnionImpl.42" }
%"union.absl::variant_internal::DestructibleUnionImpl.42" = type { %"union.absl::variant_internal::DestructibleUnionImpl.43" }
%"union.absl::variant_internal::DestructibleUnionImpl.43" = type { %"union.absl::variant_internal::DestructibleUnionImpl.44" }
%"union.absl::variant_internal::DestructibleUnionImpl.44" = type { %"class.std::__1::basic_string" }
%"class.std::__1::map.71" = type { %"class.std::__1::__tree.72" }
%"class.std::__1::__tree.72" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.73", %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.policy::PolicyErrorMap" = type { i32 (...)**, %"class.std::__1::vector.82", %"class.std::__1::multimap", %"class.std::__1::map.98" }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"class.std::__1::unique_ptr.84"*, %"class.std::__1::unique_ptr.84"*, %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::unique_ptr.84" = type opaque
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.std::__1::unique_ptr.84"* }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree.90" }
%"class.std::__1::__tree.90" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.91", %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.98" = type { %"class.std::__1::__tree.99" }
%"class.std::__1::__tree.99" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.100", %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.policy::PolicyHandlerParameters" = type opaque

@_ZN6policy3key33kManagedAccountsSigninRestrictionE = external constant [0 x i8], align 1
@_ZN5prefs33kManagedAccountsSigninRestrictionE = external constant [0 x i8], align 1
@_ZTV39ManagedAccountRestrictionsPolicyHandler = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.ManagedAccountRestrictionsPolicyHandler*)* @_ZN39ManagedAccountRestrictionsPolicyHandlerD2Ev to i8*), i8* bitcast (void (%class.ManagedAccountRestrictionsPolicyHandler*)* @_ZN39ManagedAccountRestrictionsPolicyHandlerD0Ev to i8*), i8* bitcast (i1 (%"class.policy::SimpleSchemaValidatingPolicyHandler"*, %"class.policy::PolicyMap"*, %"class.policy::PolicyErrorMap"*)* @_ZN6policy35SimpleSchemaValidatingPolicyHandler19CheckPolicySettingsERKNS_9PolicyMapEPNS_14PolicyErrorMapE to i8*), i8* bitcast (void (%"class.policy::ConfigurationPolicyHandler"*, %"class.policy::PolicyMap"*, %"struct.policy::PolicyHandlerParameters"*, %class.PrefValueMap*)* @_ZN6policy26ConfigurationPolicyHandler33ApplyPolicySettingsWithParametersERKNS_9PolicyMapERKNS_23PolicyHandlerParametersEP12PrefValueMap to i8*), i8* bitcast (void (%"class.policy::ConfigurationPolicyHandler"*, %"class.policy::PolicyMap"*)* @_ZNK6policy26ConfigurationPolicyHandler20PrepareForDisplayingEPNS_9PolicyMapE to i8*), i8* bitcast (void (%class.ManagedAccountRestrictionsPolicyHandler*, %"class.policy::PolicyMap"*, %class.PrefValueMap*)* @_ZN39ManagedAccountRestrictionsPolicyHandler19ApplyPolicySettingsERKN6policy9PolicyMapEP12PrefValueMap to i8*)] }, align 8
@_ZN5prefs45kManagedAccountsSigninRestrictionScopeMachineE = external constant [0 x i8], align 1

@_ZN39ManagedAccountRestrictionsPolicyHandlerC1EN6policy6SchemaE = hidden unnamed_addr alias void (%class.ManagedAccountRestrictionsPolicyHandler*, %"class.policy::Schema"*), void (%class.ManagedAccountRestrictionsPolicyHandler*, %"class.policy::Schema"*)* @_ZN39ManagedAccountRestrictionsPolicyHandlerC2EN6policy6SchemaE
@_ZN39ManagedAccountRestrictionsPolicyHandlerD1Ev = hidden unnamed_addr alias void (%class.ManagedAccountRestrictionsPolicyHandler*), void (%class.ManagedAccountRestrictionsPolicyHandler*)* @_ZN39ManagedAccountRestrictionsPolicyHandlerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN39ManagedAccountRestrictionsPolicyHandlerC2EN6policy6SchemaE(%class.ManagedAccountRestrictionsPolicyHandler*, %"class.policy::Schema"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.policy::Schema", align 8
  %4 = bitcast %class.ManagedAccountRestrictionsPolicyHandler* %0 to %"class.policy::SimpleSchemaValidatingPolicyHandler"*
  call void @_ZN6policy6SchemaC1ERKS0_(%"class.policy::Schema"* nonnull %3, %"class.policy::Schema"* dereferenceable(16) %1) #8
  call void @_ZN6policy35SimpleSchemaValidatingPolicyHandlerC2EPKcS2_NS_6SchemaENS_21SchemaOnErrorStrategyENS0_21RecommendedPermissionENS0_19MandatoryPermissionE(%"class.policy::SimpleSchemaValidatingPolicyHandler"* %4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN6policy3key33kManagedAccountsSigninRestrictionE, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs33kManagedAccountsSigninRestrictionE, i64 0, i64 0), %"class.policy::Schema"* nonnull %3, i32 1, i32 1, i32 0) #8
  call void @_ZN6policy6SchemaD1Ev(%"class.policy::Schema"* nonnull %3) #8
  %5 = getelementptr inbounds %class.ManagedAccountRestrictionsPolicyHandler, %class.ManagedAccountRestrictionsPolicyHandler* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV39ManagedAccountRestrictionsPolicyHandler, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  ret void
}

declare void @_ZN6policy6SchemaC1ERKS0_(%"class.policy::Schema"*, %"class.policy::Schema"* dereferenceable(16)) unnamed_addr #1

declare void @_ZN6policy35SimpleSchemaValidatingPolicyHandlerC2EPKcS2_NS_6SchemaENS_21SchemaOnErrorStrategyENS0_21RecommendedPermissionENS0_19MandatoryPermissionE(%"class.policy::SimpleSchemaValidatingPolicyHandler"*, i8*, i8*, %"class.policy::Schema"*, i32, i32, i32) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6policy6SchemaD1Ev(%"class.policy::Schema"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6policy35SimpleSchemaValidatingPolicyHandlerD2Ev(%"class.policy::SimpleSchemaValidatingPolicyHandler"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN39ManagedAccountRestrictionsPolicyHandlerD2Ev(%class.ManagedAccountRestrictionsPolicyHandler*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.ManagedAccountRestrictionsPolicyHandler* %0 to %"class.policy::SimpleSchemaValidatingPolicyHandler"*
  tail call void @_ZN6policy35SimpleSchemaValidatingPolicyHandlerD2Ev(%"class.policy::SimpleSchemaValidatingPolicyHandler"* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN39ManagedAccountRestrictionsPolicyHandlerD0Ev(%class.ManagedAccountRestrictionsPolicyHandler*) unnamed_addr #0 align 2 {
  %2 = bitcast %class.ManagedAccountRestrictionsPolicyHandler* %0 to %"class.policy::SimpleSchemaValidatingPolicyHandler"*
  tail call void @_ZN6policy35SimpleSchemaValidatingPolicyHandlerD2Ev(%"class.policy::SimpleSchemaValidatingPolicyHandler"* %2) #8
  %3 = bitcast %class.ManagedAccountRestrictionsPolicyHandler* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN39ManagedAccountRestrictionsPolicyHandler19ApplyPolicySettingsERKN6policy9PolicyMapEP12PrefValueMap(%class.ManagedAccountRestrictionsPolicyHandler*, %"class.policy::PolicyMap"* dereferenceable(80), %class.PrefValueMap*) unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %class.ManagedAccountRestrictionsPolicyHandler* %0 to %"class.policy::SimpleSchemaValidatingPolicyHandler"*
  tail call void @_ZN6policy35SimpleSchemaValidatingPolicyHandler19ApplyPolicySettingsERKNS_9PolicyMapEP12PrefValueMap(%"class.policy::SimpleSchemaValidatingPolicyHandler"* %6, %"class.policy::PolicyMap"* dereferenceable(80) %1, %class.PrefValueMap* %2) #8
  %7 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #8
  %8 = getelementptr inbounds %class.ManagedAccountRestrictionsPolicyHandler, %class.ManagedAccountRestrictionsPolicyHandler* %0, i64 0, i32 0, i32 0, i32 0
  %9 = tail call i8* @_ZNK6policy18NamedPolicyHandler11policy_nameEv(%"class.policy::NamedPolicyHandler"* %8) #8
  %10 = tail call i64 @strlen(i8* %9) #8
  %11 = icmp ugt i64 %10, -17
  br i1 %11, label %12, label %14

12:                                               ; preds = %3
  %13 = bitcast %"class.std::__1::basic_string"* %4 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %13) #10
  unreachable

14:                                               ; preds = %3
  %15 = icmp ult i64 %10, 23
  br i1 %15, label %25, label %16

16:                                               ; preds = %14
  %17 = add nuw i64 %10, 16
  %18 = and i64 %17, -16
  %19 = tail call i8* @_Znwm(i64 %18) #9
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %19, i8** %20, align 8
  %21 = or i64 %18, -9223372036854775808
  %22 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %21, i64* %22, align 8
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %10, i64* %23, align 8
  %24 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %30

25:                                               ; preds = %14
  %26 = trunc i64 %10 to i8
  %27 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  store i8 %26, i8* %28, align 1
  %29 = icmp eq i64 %10, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %25, %16
  %31 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %27, %25 ], [ %24, %16 ]
  %32 = phi i8* [ %7, %25 ], [ %19, %16 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %32, i8* align 1 %9, i64 %10, i1 false) #8
  br label %33

33:                                               ; preds = %25, %30
  %34 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %27, %25 ], [ %31, %30 ]
  %35 = phi i8* [ %7, %25 ], [ %32, %30 ]
  %36 = getelementptr inbounds i8, i8* %35, i64 %10
  store i8 0, i8* %36, align 1
  %37 = call %"class.policy::PolicyMap::Entry"* @_ZNK6policy9PolicyMap3GetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.policy::PolicyMap"* %1, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4) #8
  %38 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %34, i64 0, i32 1, i32 0
  %39 = load i8, i8* %38, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %33
  %42 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @_ZdlPv(i8* %43) #9
  br label %44

44:                                               ; preds = %33, %41
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #8
  %45 = icmp eq %"class.policy::PolicyMap::Entry"* %37, null
  br i1 %45, label %91, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds %"class.policy::PolicyMap::Entry", %"class.policy::PolicyMap::Entry"* %37, i64 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %46
  %51 = getelementptr inbounds %"class.policy::PolicyMap::Entry", %"class.policy::PolicyMap::Entry"* %37, i64 0, i32 2
  %52 = load i32, i32* %51, align 8
  %53 = icmp ne i32 %52, 2
  br label %54

54:                                               ; preds = %50, %46
  %55 = phi i1 [ true, %46 ], [ %53, %50 ]
  %56 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %56) #8
  %57 = call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs45kManagedAccountsSigninRestrictionScopeMachineE, i64 0, i64 0)) #8
  %58 = icmp ugt i64 %57, -17
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  %60 = bitcast %"class.std::__1::basic_string"* %5 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %60) #10
  unreachable

61:                                               ; preds = %54
  %62 = icmp ult i64 %57, 23
  br i1 %62, label %72, label %63

63:                                               ; preds = %61
  %64 = add nuw i64 %57, 16
  %65 = and i64 %64, -16
  %66 = call i8* @_Znwm(i64 %65) #9
  %67 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %66, i8** %67, align 8
  %68 = or i64 %65, -9223372036854775808
  %69 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %57, i64* %70, align 8
  %71 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %77

72:                                               ; preds = %61
  %73 = trunc i64 %57 to i8
  %74 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %75 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %74, i64 0, i32 1, i32 0
  store i8 %73, i8* %75, align 1
  %76 = icmp eq i64 %57, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %72, %63
  %78 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %74, %72 ], [ %71, %63 ]
  %79 = phi i8* [ %56, %72 ], [ %66, %63 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %79, i8* align 1 getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5prefs45kManagedAccountsSigninRestrictionScopeMachineE, i64 0, i64 0), i64 %57, i1 false) #8
  br label %80

80:                                               ; preds = %72, %77
  %81 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %74, %72 ], [ %78, %77 ]
  %82 = phi i8* [ %56, %72 ], [ %79, %77 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 %57
  store i8 0, i8* %83, align 1
  call void @_ZN12PrefValueMap10SetBooleanERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb(%class.PrefValueMap* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5, i1 zeroext %55) #8
  %84 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %81, i64 0, i32 1, i32 0
  %85 = load i8, i8* %84, align 1
  %86 = icmp slt i8 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %80
  %88 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  call void @_ZdlPv(i8* %89) #9
  br label %90

90:                                               ; preds = %80, %87
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %56) #8
  br label %91

91:                                               ; preds = %44, %90
  ret void
}

declare void @_ZN6policy35SimpleSchemaValidatingPolicyHandler19ApplyPolicySettingsERKNS_9PolicyMapEP12PrefValueMap(%"class.policy::SimpleSchemaValidatingPolicyHandler"*, %"class.policy::PolicyMap"* dereferenceable(80), %class.PrefValueMap*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.policy::PolicyMap::Entry"* @_ZNK6policy9PolicyMap3GetERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.policy::PolicyMap"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #1

declare i8* @_ZNK6policy18NamedPolicyHandler11policy_nameEv(%"class.policy::NamedPolicyHandler"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN12PrefValueMap10SetBooleanERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEb(%class.PrefValueMap*, %"class.std::__1::basic_string"* dereferenceable(24), i1 zeroext) local_unnamed_addr #1

declare zeroext i1 @_ZN6policy35SimpleSchemaValidatingPolicyHandler19CheckPolicySettingsERKNS_9PolicyMapEPNS_14PolicyErrorMapE(%"class.policy::SimpleSchemaValidatingPolicyHandler"*, %"class.policy::PolicyMap"* dereferenceable(80), %"class.policy::PolicyErrorMap"*) unnamed_addr #1

declare void @_ZN6policy26ConfigurationPolicyHandler33ApplyPolicySettingsWithParametersERKNS_9PolicyMapERKNS_23PolicyHandlerParametersEP12PrefValueMap(%"class.policy::ConfigurationPolicyHandler"*, %"class.policy::PolicyMap"* dereferenceable(80), %"struct.policy::PolicyHandlerParameters"*, %class.PrefValueMap*) unnamed_addr #1

declare void @_ZNK6policy26ConfigurationPolicyHandler20PrepareForDisplayingEPNS_9PolicyMapE(%"class.policy::ConfigurationPolicyHandler"*, %"class.policy::PolicyMap"*) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
