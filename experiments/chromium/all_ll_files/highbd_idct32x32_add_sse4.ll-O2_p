; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct32x32_add_sse4.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct32x32_add_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_1024_add_sse4_1(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [4 x [32 x <2 x i64>]], align 16
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [8 x [32 x <2 x i64>]], align 16
  %8 = alloca [32 x <2 x i64>], align 16
  %9 = icmp eq i32 %3, 8
  br i1 %9, label %10, label %737

10:                                               ; preds = %4
  %11 = bitcast [4 x [32 x <2 x i64>]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 512, i1 false)
  %13 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %14 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %15 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %16 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %17 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %18 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %19 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %20 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %21 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 8
  %22 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 9
  %23 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 10
  %24 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 11
  %25 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 12
  %26 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 13
  %27 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 14
  %28 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 15
  %29 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 16
  %30 = bitcast <2 x i64>* %29 to <8 x i16>*
  %31 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 18
  %33 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 19
  %34 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 20
  %35 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 21
  %36 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 22
  %37 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 23
  %38 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 24
  %39 = bitcast <2 x i64>* %38 to <8 x i16>*
  %40 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 25
  %41 = bitcast <2 x i64>* %40 to <8 x i16>*
  %42 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 26
  %43 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 27
  %44 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 28
  %45 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 29
  %46 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 30
  %47 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 31
  br label %50

48:                                               ; preds = %50
  %49 = sext i32 %2 to i64
  br label %440

50:                                               ; preds = %50, %10
  %51 = phi i64 [ 0, %10 ], [ %438, %50 ]
  %52 = phi i32* [ %0, %10 ], [ %437, %50 ]
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 16
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 16
  %58 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %57) #6
  %59 = getelementptr inbounds i32, i32* %52, i64 32
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = getelementptr inbounds i32, i32* %52, i64 36
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %61, <4 x i32> %64) #6
  %66 = getelementptr inbounds i32, i32* %52, i64 64
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 16
  %69 = getelementptr inbounds i32, i32* %52, i64 68
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 16
  %72 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> %71) #6
  %73 = getelementptr inbounds i32, i32* %52, i64 96
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 16
  %76 = getelementptr inbounds i32, i32* %52, i64 100
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %78) #6
  %80 = getelementptr inbounds i32, i32* %52, i64 128
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 16
  %83 = getelementptr inbounds i32, i32* %52, i64 132
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 16
  %86 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %82, <4 x i32> %85) #6
  %87 = getelementptr inbounds i32, i32* %52, i64 160
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 16
  %90 = getelementptr inbounds i32, i32* %52, i64 164
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 16
  %93 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %89, <4 x i32> %92) #6
  %94 = getelementptr inbounds i32, i32* %52, i64 192
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 16
  %97 = getelementptr inbounds i32, i32* %52, i64 196
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 16
  %100 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %96, <4 x i32> %99) #6
  %101 = getelementptr inbounds i32, i32* %52, i64 224
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 16
  %104 = getelementptr inbounds i32, i32* %52, i64 228
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 16
  %107 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %103, <4 x i32> %106) #6
  %108 = shufflevector <8 x i16> %58, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %110 = shufflevector <8 x i16> %86, <8 x i16> %93, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %111 = shufflevector <8 x i16> %100, <8 x i16> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = shufflevector <8 x i16> %58, <8 x i16> %65, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %113 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = shufflevector <8 x i16> %86, <8 x i16> %93, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %115 = shufflevector <8 x i16> %100, <8 x i16> %107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %116 = bitcast <8 x i16> %108 to <4 x i32>
  %117 = bitcast <8 x i16> %109 to <4 x i32>
  %118 = shufflevector <4 x i32> %116, <4 x i32> %117, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %119 = bitcast <4 x i32> %118 to <2 x i64>
  %120 = bitcast <8 x i16> %110 to <4 x i32>
  %121 = bitcast <8 x i16> %111 to <4 x i32>
  %122 = shufflevector <4 x i32> %120, <4 x i32> %121, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %123 = bitcast <4 x i32> %122 to <2 x i64>
  %124 = bitcast <8 x i16> %112 to <4 x i32>
  %125 = bitcast <8 x i16> %113 to <4 x i32>
  %126 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %127 = bitcast <4 x i32> %126 to <2 x i64>
  %128 = bitcast <8 x i16> %114 to <4 x i32>
  %129 = bitcast <8 x i16> %115 to <4 x i32>
  %130 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = shufflevector <4 x i32> %116, <4 x i32> %117, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  %134 = shufflevector <4 x i32> %120, <4 x i32> %121, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %135 = bitcast <4 x i32> %134 to <2 x i64>
  %136 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %137 = bitcast <4 x i32> %136 to <2 x i64>
  %138 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %139 = bitcast <4 x i32> %138 to <2 x i64>
  %140 = shufflevector <2 x i64> %119, <2 x i64> %123, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %140, <2 x i64>* %13, align 16
  %141 = shufflevector <2 x i64> %119, <2 x i64> %123, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %141, <2 x i64>* %14, align 16
  %142 = shufflevector <2 x i64> %133, <2 x i64> %135, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %142, <2 x i64>* %15, align 16
  %143 = shufflevector <2 x i64> %133, <2 x i64> %135, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %143, <2 x i64>* %16, align 16
  %144 = shufflevector <2 x i64> %127, <2 x i64> %131, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %144, <2 x i64>* %17, align 16
  %145 = shufflevector <2 x i64> %127, <2 x i64> %131, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %145, <2 x i64>* %18, align 16
  %146 = shufflevector <2 x i64> %137, <2 x i64> %139, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %146, <2 x i64>* %19, align 16
  %147 = shufflevector <2 x i64> %137, <2 x i64> %139, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %147, <2 x i64>* %20, align 16
  %148 = getelementptr inbounds i32, i32* %52, i64 8
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 16
  %151 = getelementptr inbounds i32, i32* %52, i64 12
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 16
  %154 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %150, <4 x i32> %153) #6
  %155 = getelementptr inbounds i32, i32* %52, i64 40
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = getelementptr inbounds i32, i32* %52, i64 44
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 16
  %161 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %157, <4 x i32> %160) #6
  %162 = getelementptr inbounds i32, i32* %52, i64 72
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 16
  %165 = getelementptr inbounds i32, i32* %52, i64 76
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %164, <4 x i32> %167) #6
  %169 = getelementptr inbounds i32, i32* %52, i64 104
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 16
  %172 = getelementptr inbounds i32, i32* %52, i64 108
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 16
  %175 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %171, <4 x i32> %174) #6
  %176 = getelementptr inbounds i32, i32* %52, i64 136
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 16
  %179 = getelementptr inbounds i32, i32* %52, i64 140
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 16
  %182 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %178, <4 x i32> %181) #6
  %183 = getelementptr inbounds i32, i32* %52, i64 168
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = getelementptr inbounds i32, i32* %52, i64 172
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 16
  %189 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %185, <4 x i32> %188) #6
  %190 = getelementptr inbounds i32, i32* %52, i64 200
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 16
  %193 = getelementptr inbounds i32, i32* %52, i64 204
  %194 = bitcast i32* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 16
  %196 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %192, <4 x i32> %195) #6
  %197 = getelementptr inbounds i32, i32* %52, i64 232
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 16
  %200 = getelementptr inbounds i32, i32* %52, i64 236
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 16
  %203 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %199, <4 x i32> %202) #6
  %204 = shufflevector <8 x i16> %154, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = shufflevector <8 x i16> %168, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = shufflevector <8 x i16> %182, <8 x i16> %189, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %207 = shufflevector <8 x i16> %196, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %208 = shufflevector <8 x i16> %154, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %209 = shufflevector <8 x i16> %168, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = shufflevector <8 x i16> %182, <8 x i16> %189, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = shufflevector <8 x i16> %196, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %212 = bitcast <8 x i16> %204 to <4 x i32>
  %213 = bitcast <8 x i16> %205 to <4 x i32>
  %214 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = bitcast <8 x i16> %206 to <4 x i32>
  %217 = bitcast <8 x i16> %207 to <4 x i32>
  %218 = shufflevector <4 x i32> %216, <4 x i32> %217, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = bitcast <8 x i16> %208 to <4 x i32>
  %221 = bitcast <8 x i16> %209 to <4 x i32>
  %222 = shufflevector <4 x i32> %220, <4 x i32> %221, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %223 = bitcast <4 x i32> %222 to <2 x i64>
  %224 = bitcast <8 x i16> %210 to <4 x i32>
  %225 = bitcast <8 x i16> %211 to <4 x i32>
  %226 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %227 = bitcast <4 x i32> %226 to <2 x i64>
  %228 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %229 = bitcast <4 x i32> %228 to <2 x i64>
  %230 = shufflevector <4 x i32> %216, <4 x i32> %217, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %231 = bitcast <4 x i32> %230 to <2 x i64>
  %232 = shufflevector <4 x i32> %220, <4 x i32> %221, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = shufflevector <2 x i64> %215, <2 x i64> %219, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %236, <2 x i64>* %21, align 16
  %237 = shufflevector <2 x i64> %215, <2 x i64> %219, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %237, <2 x i64>* %22, align 16
  %238 = shufflevector <2 x i64> %229, <2 x i64> %231, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %238, <2 x i64>* %23, align 16
  %239 = shufflevector <2 x i64> %229, <2 x i64> %231, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %239, <2 x i64>* %24, align 16
  %240 = shufflevector <2 x i64> %223, <2 x i64> %227, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %240, <2 x i64>* %25, align 16
  %241 = shufflevector <2 x i64> %223, <2 x i64> %227, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %241, <2 x i64>* %26, align 16
  %242 = shufflevector <2 x i64> %233, <2 x i64> %235, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %242, <2 x i64>* %27, align 16
  %243 = shufflevector <2 x i64> %233, <2 x i64> %235, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %243, <2 x i64>* %28, align 16
  %244 = getelementptr inbounds i32, i32* %52, i64 16
  %245 = bitcast i32* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 16
  %247 = getelementptr inbounds i32, i32* %52, i64 20
  %248 = bitcast i32* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 16
  %250 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %246, <4 x i32> %249) #6
  store <8 x i16> %250, <8 x i16>* %30, align 16
  %251 = getelementptr inbounds i32, i32* %52, i64 48
  %252 = bitcast i32* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 16
  %254 = getelementptr inbounds i32, i32* %52, i64 52
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 16
  %257 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %253, <4 x i32> %256) #6
  %258 = getelementptr inbounds i32, i32* %52, i64 80
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 16
  %261 = getelementptr inbounds i32, i32* %52, i64 84
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 16
  %264 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %260, <4 x i32> %263) #6
  %265 = getelementptr inbounds i32, i32* %52, i64 112
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 16
  %268 = getelementptr inbounds i32, i32* %52, i64 116
  %269 = bitcast i32* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 16
  %271 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %267, <4 x i32> %270) #6
  %272 = getelementptr inbounds i32, i32* %52, i64 144
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 16
  %275 = getelementptr inbounds i32, i32* %52, i64 148
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 16
  %278 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %274, <4 x i32> %277) #6
  %279 = getelementptr inbounds i32, i32* %52, i64 176
  %280 = bitcast i32* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 16
  %282 = getelementptr inbounds i32, i32* %52, i64 180
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 16
  %285 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %281, <4 x i32> %284) #6
  %286 = getelementptr inbounds i32, i32* %52, i64 208
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 16
  %289 = getelementptr inbounds i32, i32* %52, i64 212
  %290 = bitcast i32* %289 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 16
  %292 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %288, <4 x i32> %291) #6
  %293 = getelementptr inbounds i32, i32* %52, i64 240
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = getelementptr inbounds i32, i32* %52, i64 244
  %297 = bitcast i32* %296 to <4 x i32>*
  %298 = load <4 x i32>, <4 x i32>* %297, align 16
  %299 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %295, <4 x i32> %298) #6
  %300 = shufflevector <8 x i16> %250, <8 x i16> %257, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %301 = shufflevector <8 x i16> %264, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %302 = shufflevector <8 x i16> %278, <8 x i16> %285, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %303 = shufflevector <8 x i16> %292, <8 x i16> %299, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %304 = shufflevector <8 x i16> %250, <8 x i16> %257, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %305 = shufflevector <8 x i16> %264, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %306 = shufflevector <8 x i16> %278, <8 x i16> %285, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %307 = shufflevector <8 x i16> %292, <8 x i16> %299, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %308 = bitcast <8 x i16> %300 to <4 x i32>
  %309 = bitcast <8 x i16> %301 to <4 x i32>
  %310 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = bitcast <8 x i16> %302 to <4 x i32>
  %313 = bitcast <8 x i16> %303 to <4 x i32>
  %314 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = bitcast <8 x i16> %304 to <4 x i32>
  %317 = bitcast <8 x i16> %305 to <4 x i32>
  %318 = shufflevector <4 x i32> %316, <4 x i32> %317, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = bitcast <8 x i16> %306 to <4 x i32>
  %321 = bitcast <8 x i16> %307 to <4 x i32>
  %322 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %325 = bitcast <4 x i32> %324 to <2 x i64>
  %326 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = shufflevector <4 x i32> %316, <4 x i32> %317, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %329 = bitcast <4 x i32> %328 to <2 x i64>
  %330 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %331 = bitcast <4 x i32> %330 to <2 x i64>
  %332 = shufflevector <2 x i64> %311, <2 x i64> %315, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %332, <2 x i64>* %29, align 16
  %333 = shufflevector <2 x i64> %311, <2 x i64> %315, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %333, <2 x i64>* %31, align 16
  %334 = shufflevector <2 x i64> %325, <2 x i64> %327, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %334, <2 x i64>* %32, align 16
  %335 = shufflevector <2 x i64> %325, <2 x i64> %327, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %335, <2 x i64>* %33, align 16
  %336 = shufflevector <2 x i64> %319, <2 x i64> %323, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %336, <2 x i64>* %34, align 16
  %337 = shufflevector <2 x i64> %319, <2 x i64> %323, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %337, <2 x i64>* %35, align 16
  %338 = shufflevector <2 x i64> %329, <2 x i64> %331, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %338, <2 x i64>* %36, align 16
  %339 = shufflevector <2 x i64> %329, <2 x i64> %331, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %339, <2 x i64>* %37, align 16
  %340 = getelementptr inbounds i32, i32* %52, i64 24
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 16
  %343 = getelementptr inbounds i32, i32* %52, i64 28
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16
  %346 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %342, <4 x i32> %345) #6
  store <8 x i16> %346, <8 x i16>* %39, align 16
  %347 = getelementptr inbounds i32, i32* %52, i64 56
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 16
  %350 = getelementptr inbounds i32, i32* %52, i64 60
  %351 = bitcast i32* %350 to <4 x i32>*
  %352 = load <4 x i32>, <4 x i32>* %351, align 16
  %353 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %349, <4 x i32> %352) #6
  store <8 x i16> %353, <8 x i16>* %41, align 16
  %354 = getelementptr inbounds i32, i32* %52, i64 88
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 16
  %357 = getelementptr inbounds i32, i32* %52, i64 92
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 16
  %360 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %356, <4 x i32> %359) #6
  %361 = getelementptr inbounds i32, i32* %52, i64 120
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = getelementptr inbounds i32, i32* %52, i64 124
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 16
  %367 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %363, <4 x i32> %366) #6
  %368 = getelementptr inbounds i32, i32* %52, i64 152
  %369 = bitcast i32* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 16
  %371 = getelementptr inbounds i32, i32* %52, i64 156
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 16
  %374 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %370, <4 x i32> %373) #6
  %375 = getelementptr inbounds i32, i32* %52, i64 184
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 16
  %378 = getelementptr inbounds i32, i32* %52, i64 188
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 16
  %381 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %377, <4 x i32> %380) #6
  %382 = getelementptr inbounds i32, i32* %52, i64 216
  %383 = bitcast i32* %382 to <4 x i32>*
  %384 = load <4 x i32>, <4 x i32>* %383, align 16
  %385 = getelementptr inbounds i32, i32* %52, i64 220
  %386 = bitcast i32* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 16
  %388 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %384, <4 x i32> %387) #6
  %389 = getelementptr inbounds i32, i32* %52, i64 248
  %390 = bitcast i32* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 16
  %392 = getelementptr inbounds i32, i32* %52, i64 252
  %393 = bitcast i32* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 16
  %395 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %391, <4 x i32> %394) #6
  %396 = shufflevector <8 x i16> %346, <8 x i16> %353, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %397 = shufflevector <8 x i16> %360, <8 x i16> %367, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %398 = shufflevector <8 x i16> %374, <8 x i16> %381, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %399 = shufflevector <8 x i16> %388, <8 x i16> %395, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %400 = shufflevector <8 x i16> %346, <8 x i16> %353, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %401 = shufflevector <8 x i16> %360, <8 x i16> %367, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %402 = shufflevector <8 x i16> %374, <8 x i16> %381, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %403 = shufflevector <8 x i16> %388, <8 x i16> %395, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %404 = bitcast <8 x i16> %396 to <4 x i32>
  %405 = bitcast <8 x i16> %397 to <4 x i32>
  %406 = shufflevector <4 x i32> %404, <4 x i32> %405, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %407 = bitcast <4 x i32> %406 to <2 x i64>
  %408 = bitcast <8 x i16> %398 to <4 x i32>
  %409 = bitcast <8 x i16> %399 to <4 x i32>
  %410 = shufflevector <4 x i32> %408, <4 x i32> %409, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %411 = bitcast <4 x i32> %410 to <2 x i64>
  %412 = bitcast <8 x i16> %400 to <4 x i32>
  %413 = bitcast <8 x i16> %401 to <4 x i32>
  %414 = shufflevector <4 x i32> %412, <4 x i32> %413, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = bitcast <8 x i16> %402 to <4 x i32>
  %417 = bitcast <8 x i16> %403 to <4 x i32>
  %418 = shufflevector <4 x i32> %416, <4 x i32> %417, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %419 = bitcast <4 x i32> %418 to <2 x i64>
  %420 = shufflevector <4 x i32> %404, <4 x i32> %405, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %421 = bitcast <4 x i32> %420 to <2 x i64>
  %422 = shufflevector <4 x i32> %408, <4 x i32> %409, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %423 = bitcast <4 x i32> %422 to <2 x i64>
  %424 = shufflevector <4 x i32> %412, <4 x i32> %413, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = shufflevector <4 x i32> %416, <4 x i32> %417, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %427 = bitcast <4 x i32> %426 to <2 x i64>
  %428 = shufflevector <2 x i64> %407, <2 x i64> %411, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %428, <2 x i64>* %38, align 16
  %429 = shufflevector <2 x i64> %407, <2 x i64> %411, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %429, <2 x i64>* %40, align 16
  %430 = shufflevector <2 x i64> %421, <2 x i64> %423, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %430, <2 x i64>* %42, align 16
  %431 = shufflevector <2 x i64> %421, <2 x i64> %423, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %431, <2 x i64>* %43, align 16
  %432 = shufflevector <2 x i64> %415, <2 x i64> %419, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %432, <2 x i64>* %44, align 16
  %433 = shufflevector <2 x i64> %415, <2 x i64> %419, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %433, <2 x i64>* %45, align 16
  %434 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %434, <2 x i64>* %46, align 16
  %435 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %435, <2 x i64>* %47, align 16
  %436 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 %51, i64 0
  call void @idct32_1024_8x32(<2 x i64>* nonnull %13, <2 x i64>* %436) #6
  %437 = getelementptr inbounds i32, i32* %52, i64 256
  %438 = add nuw nsw i64 %51, 1
  %439 = icmp eq i64 %438, 4
  br i1 %439, label %48, label %50

440:                                              ; preds = %48, %732
  %441 = phi i64 [ 0, %48 ], [ %734, %732 ]
  %442 = phi i16* [ %1, %48 ], [ %733, %732 ]
  %443 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 0, i64 %441
  %444 = bitcast <2 x i64>* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 16
  %446 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 1
  %447 = bitcast <2 x i64>* %446 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 16
  %449 = shufflevector <8 x i16> %445, <8 x i16> %448, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %450 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 2
  %451 = bitcast <2 x i64>* %450 to <8 x i16>*
  %452 = load <8 x i16>, <8 x i16>* %451, align 16
  %453 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 3
  %454 = bitcast <2 x i64>* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 16
  %456 = shufflevector <8 x i16> %452, <8 x i16> %455, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %457 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 4
  %458 = bitcast <2 x i64>* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 16
  %460 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 5
  %461 = bitcast <2 x i64>* %460 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 16
  %463 = shufflevector <8 x i16> %459, <8 x i16> %462, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %464 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 6
  %465 = bitcast <2 x i64>* %464 to <8 x i16>*
  %466 = load <8 x i16>, <8 x i16>* %465, align 16
  %467 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 7
  %468 = bitcast <2 x i64>* %467 to <8 x i16>*
  %469 = load <8 x i16>, <8 x i16>* %468, align 16
  %470 = shufflevector <8 x i16> %466, <8 x i16> %469, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %471 = shufflevector <8 x i16> %445, <8 x i16> %448, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %472 = shufflevector <8 x i16> %452, <8 x i16> %455, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %473 = shufflevector <8 x i16> %459, <8 x i16> %462, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %474 = shufflevector <8 x i16> %466, <8 x i16> %469, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %475 = bitcast <8 x i16> %449 to <4 x i32>
  %476 = bitcast <8 x i16> %456 to <4 x i32>
  %477 = shufflevector <4 x i32> %475, <4 x i32> %476, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = bitcast <8 x i16> %463 to <4 x i32>
  %480 = bitcast <8 x i16> %470 to <4 x i32>
  %481 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %482 = bitcast <4 x i32> %481 to <2 x i64>
  %483 = bitcast <8 x i16> %471 to <4 x i32>
  %484 = bitcast <8 x i16> %472 to <4 x i32>
  %485 = shufflevector <4 x i32> %483, <4 x i32> %484, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %486 = bitcast <4 x i32> %485 to <2 x i64>
  %487 = bitcast <8 x i16> %473 to <4 x i32>
  %488 = bitcast <8 x i16> %474 to <4 x i32>
  %489 = shufflevector <4 x i32> %487, <4 x i32> %488, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %490 = bitcast <4 x i32> %489 to <2 x i64>
  %491 = shufflevector <4 x i32> %475, <4 x i32> %476, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %492 = bitcast <4 x i32> %491 to <2 x i64>
  %493 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %494 = bitcast <4 x i32> %493 to <2 x i64>
  %495 = shufflevector <4 x i32> %483, <4 x i32> %484, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %496 = bitcast <4 x i32> %495 to <2 x i64>
  %497 = shufflevector <4 x i32> %487, <4 x i32> %488, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %498 = bitcast <4 x i32> %497 to <2 x i64>
  %499 = shufflevector <2 x i64> %478, <2 x i64> %482, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %499, <2 x i64>* %13, align 16
  %500 = shufflevector <2 x i64> %478, <2 x i64> %482, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %500, <2 x i64>* %14, align 16
  %501 = shufflevector <2 x i64> %492, <2 x i64> %494, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %501, <2 x i64>* %15, align 16
  %502 = shufflevector <2 x i64> %492, <2 x i64> %494, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %502, <2 x i64>* %16, align 16
  %503 = shufflevector <2 x i64> %486, <2 x i64> %490, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %503, <2 x i64>* %17, align 16
  %504 = shufflevector <2 x i64> %486, <2 x i64> %490, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %504, <2 x i64>* %18, align 16
  %505 = shufflevector <2 x i64> %496, <2 x i64> %498, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %505, <2 x i64>* %19, align 16
  %506 = shufflevector <2 x i64> %496, <2 x i64> %498, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %506, <2 x i64>* %20, align 16
  %507 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 1, i64 %441
  %508 = bitcast <2 x i64>* %507 to <8 x i16>*
  %509 = load <8 x i16>, <8 x i16>* %508, align 16
  %510 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 1
  %511 = bitcast <2 x i64>* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 16
  %513 = shufflevector <8 x i16> %509, <8 x i16> %512, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %514 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 2
  %515 = bitcast <2 x i64>* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 16
  %517 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 3
  %518 = bitcast <2 x i64>* %517 to <8 x i16>*
  %519 = load <8 x i16>, <8 x i16>* %518, align 16
  %520 = shufflevector <8 x i16> %516, <8 x i16> %519, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %521 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 4
  %522 = bitcast <2 x i64>* %521 to <8 x i16>*
  %523 = load <8 x i16>, <8 x i16>* %522, align 16
  %524 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 5
  %525 = bitcast <2 x i64>* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 16
  %527 = shufflevector <8 x i16> %523, <8 x i16> %526, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %528 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 6
  %529 = bitcast <2 x i64>* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 16
  %531 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 7
  %532 = bitcast <2 x i64>* %531 to <8 x i16>*
  %533 = load <8 x i16>, <8 x i16>* %532, align 16
  %534 = shufflevector <8 x i16> %530, <8 x i16> %533, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %535 = shufflevector <8 x i16> %509, <8 x i16> %512, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %536 = shufflevector <8 x i16> %516, <8 x i16> %519, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %537 = shufflevector <8 x i16> %523, <8 x i16> %526, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %538 = shufflevector <8 x i16> %530, <8 x i16> %533, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %539 = bitcast <8 x i16> %513 to <4 x i32>
  %540 = bitcast <8 x i16> %520 to <4 x i32>
  %541 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %542 = bitcast <4 x i32> %541 to <2 x i64>
  %543 = bitcast <8 x i16> %527 to <4 x i32>
  %544 = bitcast <8 x i16> %534 to <4 x i32>
  %545 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %546 = bitcast <4 x i32> %545 to <2 x i64>
  %547 = bitcast <8 x i16> %535 to <4 x i32>
  %548 = bitcast <8 x i16> %536 to <4 x i32>
  %549 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = bitcast <8 x i16> %537 to <4 x i32>
  %552 = bitcast <8 x i16> %538 to <4 x i32>
  %553 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %554 = bitcast <4 x i32> %553 to <2 x i64>
  %555 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %556 = bitcast <4 x i32> %555 to <2 x i64>
  %557 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %558 = bitcast <4 x i32> %557 to <2 x i64>
  %559 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %560 = bitcast <4 x i32> %559 to <2 x i64>
  %561 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %562 = bitcast <4 x i32> %561 to <2 x i64>
  %563 = shufflevector <2 x i64> %542, <2 x i64> %546, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %563, <2 x i64>* %21, align 16
  %564 = shufflevector <2 x i64> %542, <2 x i64> %546, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %564, <2 x i64>* %22, align 16
  %565 = shufflevector <2 x i64> %556, <2 x i64> %558, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %565, <2 x i64>* %23, align 16
  %566 = shufflevector <2 x i64> %556, <2 x i64> %558, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %566, <2 x i64>* %24, align 16
  %567 = shufflevector <2 x i64> %550, <2 x i64> %554, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %567, <2 x i64>* %25, align 16
  %568 = shufflevector <2 x i64> %550, <2 x i64> %554, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %568, <2 x i64>* %26, align 16
  %569 = shufflevector <2 x i64> %560, <2 x i64> %562, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %569, <2 x i64>* %27, align 16
  %570 = shufflevector <2 x i64> %560, <2 x i64> %562, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %570, <2 x i64>* %28, align 16
  %571 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 2, i64 %441
  %572 = bitcast <2 x i64>* %571 to <8 x i16>*
  %573 = load <8 x i16>, <8 x i16>* %572, align 16
  %574 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 1
  %575 = bitcast <2 x i64>* %574 to <8 x i16>*
  %576 = load <8 x i16>, <8 x i16>* %575, align 16
  %577 = shufflevector <8 x i16> %573, <8 x i16> %576, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %578 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 2
  %579 = bitcast <2 x i64>* %578 to <8 x i16>*
  %580 = load <8 x i16>, <8 x i16>* %579, align 16
  %581 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 3
  %582 = bitcast <2 x i64>* %581 to <8 x i16>*
  %583 = load <8 x i16>, <8 x i16>* %582, align 16
  %584 = shufflevector <8 x i16> %580, <8 x i16> %583, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %585 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 4
  %586 = bitcast <2 x i64>* %585 to <8 x i16>*
  %587 = load <8 x i16>, <8 x i16>* %586, align 16
  %588 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 5
  %589 = bitcast <2 x i64>* %588 to <8 x i16>*
  %590 = load <8 x i16>, <8 x i16>* %589, align 16
  %591 = shufflevector <8 x i16> %587, <8 x i16> %590, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %592 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 6
  %593 = bitcast <2 x i64>* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 16
  %595 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 7
  %596 = bitcast <2 x i64>* %595 to <8 x i16>*
  %597 = load <8 x i16>, <8 x i16>* %596, align 16
  %598 = shufflevector <8 x i16> %594, <8 x i16> %597, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %599 = shufflevector <8 x i16> %573, <8 x i16> %576, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %600 = shufflevector <8 x i16> %580, <8 x i16> %583, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %601 = shufflevector <8 x i16> %587, <8 x i16> %590, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %602 = shufflevector <8 x i16> %594, <8 x i16> %597, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %603 = bitcast <8 x i16> %577 to <4 x i32>
  %604 = bitcast <8 x i16> %584 to <4 x i32>
  %605 = shufflevector <4 x i32> %603, <4 x i32> %604, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %606 = bitcast <4 x i32> %605 to <2 x i64>
  %607 = bitcast <8 x i16> %591 to <4 x i32>
  %608 = bitcast <8 x i16> %598 to <4 x i32>
  %609 = shufflevector <4 x i32> %607, <4 x i32> %608, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %610 = bitcast <4 x i32> %609 to <2 x i64>
  %611 = bitcast <8 x i16> %599 to <4 x i32>
  %612 = bitcast <8 x i16> %600 to <4 x i32>
  %613 = shufflevector <4 x i32> %611, <4 x i32> %612, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %614 = bitcast <4 x i32> %613 to <2 x i64>
  %615 = bitcast <8 x i16> %601 to <4 x i32>
  %616 = bitcast <8 x i16> %602 to <4 x i32>
  %617 = shufflevector <4 x i32> %615, <4 x i32> %616, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %618 = bitcast <4 x i32> %617 to <2 x i64>
  %619 = shufflevector <4 x i32> %603, <4 x i32> %604, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %620 = bitcast <4 x i32> %619 to <2 x i64>
  %621 = shufflevector <4 x i32> %607, <4 x i32> %608, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %622 = bitcast <4 x i32> %621 to <2 x i64>
  %623 = shufflevector <4 x i32> %611, <4 x i32> %612, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %624 = bitcast <4 x i32> %623 to <2 x i64>
  %625 = shufflevector <4 x i32> %615, <4 x i32> %616, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %626 = bitcast <4 x i32> %625 to <2 x i64>
  %627 = shufflevector <2 x i64> %606, <2 x i64> %610, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %627, <2 x i64>* %29, align 16
  %628 = shufflevector <2 x i64> %606, <2 x i64> %610, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %628, <2 x i64>* %31, align 16
  %629 = shufflevector <2 x i64> %620, <2 x i64> %622, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %629, <2 x i64>* %32, align 16
  %630 = shufflevector <2 x i64> %620, <2 x i64> %622, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %630, <2 x i64>* %33, align 16
  %631 = shufflevector <2 x i64> %614, <2 x i64> %618, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %631, <2 x i64>* %34, align 16
  %632 = shufflevector <2 x i64> %614, <2 x i64> %618, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %632, <2 x i64>* %35, align 16
  %633 = shufflevector <2 x i64> %624, <2 x i64> %626, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %633, <2 x i64>* %36, align 16
  %634 = shufflevector <2 x i64> %624, <2 x i64> %626, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %634, <2 x i64>* %37, align 16
  %635 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 3, i64 %441
  %636 = bitcast <2 x i64>* %635 to <8 x i16>*
  %637 = load <8 x i16>, <8 x i16>* %636, align 16
  %638 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 1
  %639 = bitcast <2 x i64>* %638 to <8 x i16>*
  %640 = load <8 x i16>, <8 x i16>* %639, align 16
  %641 = shufflevector <8 x i16> %637, <8 x i16> %640, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %642 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 2
  %643 = bitcast <2 x i64>* %642 to <8 x i16>*
  %644 = load <8 x i16>, <8 x i16>* %643, align 16
  %645 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 3
  %646 = bitcast <2 x i64>* %645 to <8 x i16>*
  %647 = load <8 x i16>, <8 x i16>* %646, align 16
  %648 = shufflevector <8 x i16> %644, <8 x i16> %647, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %649 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 4
  %650 = bitcast <2 x i64>* %649 to <8 x i16>*
  %651 = load <8 x i16>, <8 x i16>* %650, align 16
  %652 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 5
  %653 = bitcast <2 x i64>* %652 to <8 x i16>*
  %654 = load <8 x i16>, <8 x i16>* %653, align 16
  %655 = shufflevector <8 x i16> %651, <8 x i16> %654, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %656 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 6
  %657 = bitcast <2 x i64>* %656 to <8 x i16>*
  %658 = load <8 x i16>, <8 x i16>* %657, align 16
  %659 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 7
  %660 = bitcast <2 x i64>* %659 to <8 x i16>*
  %661 = load <8 x i16>, <8 x i16>* %660, align 16
  %662 = shufflevector <8 x i16> %658, <8 x i16> %661, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %663 = shufflevector <8 x i16> %637, <8 x i16> %640, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %664 = shufflevector <8 x i16> %644, <8 x i16> %647, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %665 = shufflevector <8 x i16> %651, <8 x i16> %654, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %666 = shufflevector <8 x i16> %658, <8 x i16> %661, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %667 = bitcast <8 x i16> %641 to <4 x i32>
  %668 = bitcast <8 x i16> %648 to <4 x i32>
  %669 = shufflevector <4 x i32> %667, <4 x i32> %668, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %670 = bitcast <4 x i32> %669 to <2 x i64>
  %671 = bitcast <8 x i16> %655 to <4 x i32>
  %672 = bitcast <8 x i16> %662 to <4 x i32>
  %673 = shufflevector <4 x i32> %671, <4 x i32> %672, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %674 = bitcast <4 x i32> %673 to <2 x i64>
  %675 = bitcast <8 x i16> %663 to <4 x i32>
  %676 = bitcast <8 x i16> %664 to <4 x i32>
  %677 = shufflevector <4 x i32> %675, <4 x i32> %676, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %678 = bitcast <4 x i32> %677 to <2 x i64>
  %679 = bitcast <8 x i16> %665 to <4 x i32>
  %680 = bitcast <8 x i16> %666 to <4 x i32>
  %681 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %682 = bitcast <4 x i32> %681 to <2 x i64>
  %683 = shufflevector <4 x i32> %667, <4 x i32> %668, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %684 = bitcast <4 x i32> %683 to <2 x i64>
  %685 = shufflevector <4 x i32> %671, <4 x i32> %672, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %686 = bitcast <4 x i32> %685 to <2 x i64>
  %687 = shufflevector <4 x i32> %675, <4 x i32> %676, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %688 = bitcast <4 x i32> %687 to <2 x i64>
  %689 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %690 = bitcast <4 x i32> %689 to <2 x i64>
  %691 = shufflevector <2 x i64> %670, <2 x i64> %674, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %691, <2 x i64>* %38, align 16
  %692 = shufflevector <2 x i64> %670, <2 x i64> %674, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %692, <2 x i64>* %40, align 16
  %693 = shufflevector <2 x i64> %684, <2 x i64> %686, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %693, <2 x i64>* %42, align 16
  %694 = shufflevector <2 x i64> %684, <2 x i64> %686, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %694, <2 x i64>* %43, align 16
  %695 = shufflevector <2 x i64> %678, <2 x i64> %682, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %695, <2 x i64>* %44, align 16
  %696 = shufflevector <2 x i64> %678, <2 x i64> %682, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %696, <2 x i64>* %45, align 16
  %697 = shufflevector <2 x i64> %688, <2 x i64> %690, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %697, <2 x i64>* %46, align 16
  %698 = shufflevector <2 x i64> %688, <2 x i64> %690, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %698, <2 x i64>* %47, align 16
  call void @idct32_1024_8x32(<2 x i64>* nonnull %13, <2 x i64>* nonnull %13) #6
  br label %699

699:                                              ; preds = %699, %440
  %700 = phi i64 [ 0, %440 ], [ %730, %699 ]
  %701 = mul nsw i64 %700, %49
  %702 = getelementptr inbounds i16, i16* %442, i64 %701
  %703 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 %700
  %704 = bitcast <2 x i64>* %703 to <8 x i16>*
  %705 = load <8 x i16>, <8 x i16>* %704, align 16
  %706 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %705, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %707 = ashr <8 x i16> %706, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %708 = bitcast i16* %702 to <8 x i16>*
  %709 = load <8 x i16>, <8 x i16>* %708, align 16
  %710 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %709, <8 x i16> %707) #6
  %711 = icmp sgt <8 x i16> %710, zeroinitializer
  %712 = select <8 x i1> %711, <8 x i16> %710, <8 x i16> zeroinitializer
  %713 = icmp slt <8 x i16> %712, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %714 = select <8 x i1> %713, <8 x i16> %712, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %714, <8 x i16>* %708, align 16
  %715 = or i64 %700, 1
  %716 = mul nsw i64 %715, %49
  %717 = getelementptr inbounds i16, i16* %442, i64 %716
  %718 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 %715
  %719 = bitcast <2 x i64>* %718 to <8 x i16>*
  %720 = load <8 x i16>, <8 x i16>* %719, align 16
  %721 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %720, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %722 = ashr <8 x i16> %721, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %723 = bitcast i16* %717 to <8 x i16>*
  %724 = load <8 x i16>, <8 x i16>* %723, align 16
  %725 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %724, <8 x i16> %722) #6
  %726 = icmp sgt <8 x i16> %725, zeroinitializer
  %727 = select <8 x i1> %726, <8 x i16> %725, <8 x i16> zeroinitializer
  %728 = icmp slt <8 x i16> %727, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %729 = select <8 x i1> %728, <8 x i16> %727, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %729, <8 x i16>* %723, align 16
  %730 = add nuw nsw i64 %700, 2
  %731 = icmp eq i64 %730, 32
  br i1 %731, label %732, label %699

732:                                              ; preds = %699
  %733 = getelementptr inbounds i16, i16* %442, i64 8
  %734 = add nuw nsw i64 %441, 8
  %735 = icmp ult i64 %734, 32
  br i1 %735, label %440, label %736

736:                                              ; preds = %732
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #6
  br label %1256

737:                                              ; preds = %4
  %738 = bitcast [8 x [32 x <2 x i64>]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %738) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %738, i8 -86, i64 4096, i1 false)
  %739 = bitcast [32 x <2 x i64>]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %739) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %739, i8 -86, i64 512, i1 false)
  br label %774

740:                                              ; preds = %774
  %741 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 0
  %742 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 1
  %743 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 2
  %744 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 3
  %745 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 4
  %746 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 5
  %747 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 6
  %748 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 7
  %749 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 8
  %750 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 9
  %751 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 10
  %752 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 11
  %753 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 12
  %754 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 13
  %755 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 14
  %756 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 15
  %757 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 16
  %758 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 17
  %759 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 18
  %760 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 19
  %761 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 20
  %762 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 21
  %763 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 22
  %764 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 23
  %765 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 24
  %766 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 25
  %767 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 26
  %768 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 27
  %769 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 28
  %770 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 29
  %771 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 30
  %772 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 31
  %773 = sext i32 %2 to i64
  br label %1031

774:                                              ; preds = %774, %737
  %775 = phi i64 [ 0, %737 ], [ %1029, %774 ]
  %776 = phi i32* [ %0, %737 ], [ %1028, %774 ]
  %777 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 0
  %778 = bitcast i32* %776 to <2 x i64>*
  %779 = load <2 x i64>, <2 x i64>* %778, align 16
  store <2 x i64> %779, <2 x i64>* %777, align 16
  %780 = getelementptr inbounds i32, i32* %776, i64 4
  %781 = bitcast i32* %780 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 16
  %783 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 1
  store <2 x i64> %782, <2 x i64>* %783, align 16
  %784 = getelementptr inbounds i32, i32* %776, i64 32
  %785 = bitcast i32* %784 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 16
  %787 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 2
  store <2 x i64> %786, <2 x i64>* %787, align 16
  %788 = getelementptr inbounds i32, i32* %776, i64 36
  %789 = bitcast i32* %788 to <2 x i64>*
  %790 = load <2 x i64>, <2 x i64>* %789, align 16
  %791 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 3
  store <2 x i64> %790, <2 x i64>* %791, align 16
  %792 = getelementptr inbounds i32, i32* %776, i64 64
  %793 = bitcast i32* %792 to <2 x i64>*
  %794 = load <2 x i64>, <2 x i64>* %793, align 16
  %795 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 4
  store <2 x i64> %794, <2 x i64>* %795, align 16
  %796 = getelementptr inbounds i32, i32* %776, i64 68
  %797 = bitcast i32* %796 to <2 x i64>*
  %798 = load <2 x i64>, <2 x i64>* %797, align 16
  %799 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 5
  store <2 x i64> %798, <2 x i64>* %799, align 16
  %800 = getelementptr inbounds i32, i32* %776, i64 96
  %801 = bitcast i32* %800 to <2 x i64>*
  %802 = load <2 x i64>, <2 x i64>* %801, align 16
  %803 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 6
  store <2 x i64> %802, <2 x i64>* %803, align 16
  %804 = getelementptr inbounds i32, i32* %776, i64 100
  %805 = bitcast i32* %804 to <4 x i32>*
  %806 = load <4 x i32>, <4 x i32>* %805, align 16
  %807 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 7
  %808 = bitcast <2 x i64> %779 to <4 x i32>
  %809 = bitcast <2 x i64> %786 to <4 x i32>
  %810 = shufflevector <4 x i32> %808, <4 x i32> %809, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %811 = bitcast <4 x i32> %810 to <2 x i64>
  %812 = bitcast <2 x i64> %794 to <4 x i32>
  %813 = bitcast <2 x i64> %802 to <4 x i32>
  %814 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %815 = bitcast <4 x i32> %814 to <2 x i64>
  %816 = shufflevector <4 x i32> %808, <4 x i32> %809, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %817 = bitcast <4 x i32> %816 to <2 x i64>
  %818 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %819 = bitcast <4 x i32> %818 to <2 x i64>
  %820 = bitcast <2 x i64> %782 to <4 x i32>
  %821 = bitcast <2 x i64> %790 to <4 x i32>
  %822 = shufflevector <4 x i32> %820, <4 x i32> %821, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %823 = bitcast <4 x i32> %822 to <2 x i64>
  %824 = bitcast <2 x i64> %798 to <4 x i32>
  %825 = shufflevector <4 x i32> %824, <4 x i32> %806, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %826 = bitcast <4 x i32> %825 to <2 x i64>
  %827 = shufflevector <4 x i32> %820, <4 x i32> %821, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %828 = bitcast <4 x i32> %827 to <2 x i64>
  %829 = shufflevector <4 x i32> %824, <4 x i32> %806, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %830 = bitcast <4 x i32> %829 to <2 x i64>
  %831 = shufflevector <2 x i64> %811, <2 x i64> %815, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %831, <2 x i64>* %777, align 16
  %832 = shufflevector <2 x i64> %811, <2 x i64> %815, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %832, <2 x i64>* %783, align 16
  %833 = shufflevector <2 x i64> %817, <2 x i64> %819, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %833, <2 x i64>* %787, align 16
  %834 = shufflevector <2 x i64> %817, <2 x i64> %819, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %834, <2 x i64>* %791, align 16
  %835 = shufflevector <2 x i64> %823, <2 x i64> %826, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %835, <2 x i64>* %795, align 16
  %836 = shufflevector <2 x i64> %823, <2 x i64> %826, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %836, <2 x i64>* %799, align 16
  %837 = shufflevector <2 x i64> %828, <2 x i64> %830, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %837, <2 x i64>* %803, align 16
  %838 = shufflevector <2 x i64> %828, <2 x i64> %830, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %838, <2 x i64>* %807, align 16
  %839 = getelementptr inbounds i32, i32* %776, i64 8
  %840 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 8
  %841 = bitcast i32* %839 to <2 x i64>*
  %842 = load <2 x i64>, <2 x i64>* %841, align 16
  store <2 x i64> %842, <2 x i64>* %840, align 16
  %843 = getelementptr inbounds i32, i32* %776, i64 12
  %844 = bitcast i32* %843 to <2 x i64>*
  %845 = load <2 x i64>, <2 x i64>* %844, align 16
  %846 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 9
  store <2 x i64> %845, <2 x i64>* %846, align 16
  %847 = getelementptr inbounds i32, i32* %776, i64 40
  %848 = bitcast i32* %847 to <2 x i64>*
  %849 = load <2 x i64>, <2 x i64>* %848, align 16
  %850 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 10
  store <2 x i64> %849, <2 x i64>* %850, align 16
  %851 = getelementptr inbounds i32, i32* %776, i64 44
  %852 = bitcast i32* %851 to <2 x i64>*
  %853 = load <2 x i64>, <2 x i64>* %852, align 16
  %854 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 11
  store <2 x i64> %853, <2 x i64>* %854, align 16
  %855 = getelementptr inbounds i32, i32* %776, i64 72
  %856 = bitcast i32* %855 to <2 x i64>*
  %857 = load <2 x i64>, <2 x i64>* %856, align 16
  %858 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 12
  store <2 x i64> %857, <2 x i64>* %858, align 16
  %859 = getelementptr inbounds i32, i32* %776, i64 76
  %860 = bitcast i32* %859 to <2 x i64>*
  %861 = load <2 x i64>, <2 x i64>* %860, align 16
  %862 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 13
  store <2 x i64> %861, <2 x i64>* %862, align 16
  %863 = getelementptr inbounds i32, i32* %776, i64 104
  %864 = bitcast i32* %863 to <2 x i64>*
  %865 = load <2 x i64>, <2 x i64>* %864, align 16
  %866 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 14
  store <2 x i64> %865, <2 x i64>* %866, align 16
  %867 = getelementptr inbounds i32, i32* %776, i64 108
  %868 = bitcast i32* %867 to <4 x i32>*
  %869 = load <4 x i32>, <4 x i32>* %868, align 16
  %870 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 15
  %871 = bitcast <2 x i64> %842 to <4 x i32>
  %872 = bitcast <2 x i64> %849 to <4 x i32>
  %873 = shufflevector <4 x i32> %871, <4 x i32> %872, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %874 = bitcast <4 x i32> %873 to <2 x i64>
  %875 = bitcast <2 x i64> %857 to <4 x i32>
  %876 = bitcast <2 x i64> %865 to <4 x i32>
  %877 = shufflevector <4 x i32> %875, <4 x i32> %876, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %878 = bitcast <4 x i32> %877 to <2 x i64>
  %879 = shufflevector <4 x i32> %871, <4 x i32> %872, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %880 = bitcast <4 x i32> %879 to <2 x i64>
  %881 = shufflevector <4 x i32> %875, <4 x i32> %876, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %882 = bitcast <4 x i32> %881 to <2 x i64>
  %883 = bitcast <2 x i64> %845 to <4 x i32>
  %884 = bitcast <2 x i64> %853 to <4 x i32>
  %885 = shufflevector <4 x i32> %883, <4 x i32> %884, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %886 = bitcast <4 x i32> %885 to <2 x i64>
  %887 = bitcast <2 x i64> %861 to <4 x i32>
  %888 = shufflevector <4 x i32> %887, <4 x i32> %869, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %889 = bitcast <4 x i32> %888 to <2 x i64>
  %890 = shufflevector <4 x i32> %883, <4 x i32> %884, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %891 = bitcast <4 x i32> %890 to <2 x i64>
  %892 = shufflevector <4 x i32> %887, <4 x i32> %869, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %893 = bitcast <4 x i32> %892 to <2 x i64>
  %894 = shufflevector <2 x i64> %874, <2 x i64> %878, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %894, <2 x i64>* %840, align 16
  %895 = shufflevector <2 x i64> %874, <2 x i64> %878, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %895, <2 x i64>* %846, align 16
  %896 = shufflevector <2 x i64> %880, <2 x i64> %882, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %896, <2 x i64>* %850, align 16
  %897 = shufflevector <2 x i64> %880, <2 x i64> %882, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %897, <2 x i64>* %854, align 16
  %898 = shufflevector <2 x i64> %886, <2 x i64> %889, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %898, <2 x i64>* %858, align 16
  %899 = shufflevector <2 x i64> %886, <2 x i64> %889, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %899, <2 x i64>* %862, align 16
  %900 = shufflevector <2 x i64> %891, <2 x i64> %893, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %900, <2 x i64>* %866, align 16
  %901 = shufflevector <2 x i64> %891, <2 x i64> %893, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %901, <2 x i64>* %870, align 16
  %902 = getelementptr inbounds i32, i32* %776, i64 16
  %903 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 16
  %904 = bitcast i32* %902 to <2 x i64>*
  %905 = load <2 x i64>, <2 x i64>* %904, align 16
  store <2 x i64> %905, <2 x i64>* %903, align 16
  %906 = getelementptr inbounds i32, i32* %776, i64 20
  %907 = bitcast i32* %906 to <2 x i64>*
  %908 = load <2 x i64>, <2 x i64>* %907, align 16
  %909 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 17
  store <2 x i64> %908, <2 x i64>* %909, align 16
  %910 = getelementptr inbounds i32, i32* %776, i64 48
  %911 = bitcast i32* %910 to <2 x i64>*
  %912 = load <2 x i64>, <2 x i64>* %911, align 16
  %913 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 18
  store <2 x i64> %912, <2 x i64>* %913, align 16
  %914 = getelementptr inbounds i32, i32* %776, i64 52
  %915 = bitcast i32* %914 to <2 x i64>*
  %916 = load <2 x i64>, <2 x i64>* %915, align 16
  %917 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 19
  store <2 x i64> %916, <2 x i64>* %917, align 16
  %918 = getelementptr inbounds i32, i32* %776, i64 80
  %919 = bitcast i32* %918 to <2 x i64>*
  %920 = load <2 x i64>, <2 x i64>* %919, align 16
  %921 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 20
  store <2 x i64> %920, <2 x i64>* %921, align 16
  %922 = getelementptr inbounds i32, i32* %776, i64 84
  %923 = bitcast i32* %922 to <2 x i64>*
  %924 = load <2 x i64>, <2 x i64>* %923, align 16
  %925 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 21
  store <2 x i64> %924, <2 x i64>* %925, align 16
  %926 = getelementptr inbounds i32, i32* %776, i64 112
  %927 = bitcast i32* %926 to <2 x i64>*
  %928 = load <2 x i64>, <2 x i64>* %927, align 16
  %929 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 22
  store <2 x i64> %928, <2 x i64>* %929, align 16
  %930 = getelementptr inbounds i32, i32* %776, i64 116
  %931 = bitcast i32* %930 to <4 x i32>*
  %932 = load <4 x i32>, <4 x i32>* %931, align 16
  %933 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 23
  %934 = bitcast <2 x i64> %905 to <4 x i32>
  %935 = bitcast <2 x i64> %912 to <4 x i32>
  %936 = shufflevector <4 x i32> %934, <4 x i32> %935, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %937 = bitcast <4 x i32> %936 to <2 x i64>
  %938 = bitcast <2 x i64> %920 to <4 x i32>
  %939 = bitcast <2 x i64> %928 to <4 x i32>
  %940 = shufflevector <4 x i32> %938, <4 x i32> %939, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %941 = bitcast <4 x i32> %940 to <2 x i64>
  %942 = shufflevector <4 x i32> %934, <4 x i32> %935, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %943 = bitcast <4 x i32> %942 to <2 x i64>
  %944 = shufflevector <4 x i32> %938, <4 x i32> %939, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %945 = bitcast <4 x i32> %944 to <2 x i64>
  %946 = bitcast <2 x i64> %908 to <4 x i32>
  %947 = bitcast <2 x i64> %916 to <4 x i32>
  %948 = shufflevector <4 x i32> %946, <4 x i32> %947, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %949 = bitcast <4 x i32> %948 to <2 x i64>
  %950 = bitcast <2 x i64> %924 to <4 x i32>
  %951 = shufflevector <4 x i32> %950, <4 x i32> %932, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %952 = bitcast <4 x i32> %951 to <2 x i64>
  %953 = shufflevector <4 x i32> %946, <4 x i32> %947, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %954 = bitcast <4 x i32> %953 to <2 x i64>
  %955 = shufflevector <4 x i32> %950, <4 x i32> %932, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %956 = bitcast <4 x i32> %955 to <2 x i64>
  %957 = shufflevector <2 x i64> %937, <2 x i64> %941, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %957, <2 x i64>* %903, align 16
  %958 = shufflevector <2 x i64> %937, <2 x i64> %941, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %958, <2 x i64>* %909, align 16
  %959 = shufflevector <2 x i64> %943, <2 x i64> %945, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %959, <2 x i64>* %913, align 16
  %960 = shufflevector <2 x i64> %943, <2 x i64> %945, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %960, <2 x i64>* %917, align 16
  %961 = shufflevector <2 x i64> %949, <2 x i64> %952, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %961, <2 x i64>* %921, align 16
  %962 = shufflevector <2 x i64> %949, <2 x i64> %952, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %962, <2 x i64>* %925, align 16
  %963 = shufflevector <2 x i64> %954, <2 x i64> %956, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %963, <2 x i64>* %929, align 16
  %964 = shufflevector <2 x i64> %954, <2 x i64> %956, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %964, <2 x i64>* %933, align 16
  %965 = getelementptr inbounds i32, i32* %776, i64 24
  %966 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 24
  %967 = bitcast i32* %965 to <2 x i64>*
  %968 = load <2 x i64>, <2 x i64>* %967, align 16
  store <2 x i64> %968, <2 x i64>* %966, align 16
  %969 = getelementptr inbounds i32, i32* %776, i64 28
  %970 = bitcast i32* %969 to <2 x i64>*
  %971 = load <2 x i64>, <2 x i64>* %970, align 16
  %972 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 25
  store <2 x i64> %971, <2 x i64>* %972, align 16
  %973 = getelementptr inbounds i32, i32* %776, i64 56
  %974 = bitcast i32* %973 to <2 x i64>*
  %975 = load <2 x i64>, <2 x i64>* %974, align 16
  %976 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 26
  store <2 x i64> %975, <2 x i64>* %976, align 16
  %977 = getelementptr inbounds i32, i32* %776, i64 60
  %978 = bitcast i32* %977 to <2 x i64>*
  %979 = load <2 x i64>, <2 x i64>* %978, align 16
  %980 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 27
  store <2 x i64> %979, <2 x i64>* %980, align 16
  %981 = getelementptr inbounds i32, i32* %776, i64 88
  %982 = bitcast i32* %981 to <2 x i64>*
  %983 = load <2 x i64>, <2 x i64>* %982, align 16
  %984 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 28
  store <2 x i64> %983, <2 x i64>* %984, align 16
  %985 = getelementptr inbounds i32, i32* %776, i64 92
  %986 = bitcast i32* %985 to <2 x i64>*
  %987 = load <2 x i64>, <2 x i64>* %986, align 16
  %988 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 29
  store <2 x i64> %987, <2 x i64>* %988, align 16
  %989 = getelementptr inbounds i32, i32* %776, i64 120
  %990 = bitcast i32* %989 to <2 x i64>*
  %991 = load <2 x i64>, <2 x i64>* %990, align 16
  %992 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 30
  store <2 x i64> %991, <2 x i64>* %992, align 16
  %993 = getelementptr inbounds i32, i32* %776, i64 124
  %994 = bitcast i32* %993 to <4 x i32>*
  %995 = load <4 x i32>, <4 x i32>* %994, align 16
  %996 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 31
  %997 = bitcast <2 x i64> %968 to <4 x i32>
  %998 = bitcast <2 x i64> %975 to <4 x i32>
  %999 = shufflevector <4 x i32> %997, <4 x i32> %998, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1000 = bitcast <4 x i32> %999 to <2 x i64>
  %1001 = bitcast <2 x i64> %983 to <4 x i32>
  %1002 = bitcast <2 x i64> %991 to <4 x i32>
  %1003 = shufflevector <4 x i32> %1001, <4 x i32> %1002, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1004 = bitcast <4 x i32> %1003 to <2 x i64>
  %1005 = shufflevector <4 x i32> %997, <4 x i32> %998, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1006 = bitcast <4 x i32> %1005 to <2 x i64>
  %1007 = shufflevector <4 x i32> %1001, <4 x i32> %1002, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1008 = bitcast <4 x i32> %1007 to <2 x i64>
  %1009 = bitcast <2 x i64> %971 to <4 x i32>
  %1010 = bitcast <2 x i64> %979 to <4 x i32>
  %1011 = shufflevector <4 x i32> %1009, <4 x i32> %1010, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1012 = bitcast <4 x i32> %1011 to <2 x i64>
  %1013 = bitcast <2 x i64> %987 to <4 x i32>
  %1014 = shufflevector <4 x i32> %1013, <4 x i32> %995, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1015 = bitcast <4 x i32> %1014 to <2 x i64>
  %1016 = shufflevector <4 x i32> %1009, <4 x i32> %1010, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1017 = bitcast <4 x i32> %1016 to <2 x i64>
  %1018 = shufflevector <4 x i32> %1013, <4 x i32> %995, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1019 = bitcast <4 x i32> %1018 to <2 x i64>
  %1020 = shufflevector <2 x i64> %1000, <2 x i64> %1004, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1020, <2 x i64>* %966, align 16
  %1021 = shufflevector <2 x i64> %1000, <2 x i64> %1004, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1021, <2 x i64>* %972, align 16
  %1022 = shufflevector <2 x i64> %1006, <2 x i64> %1008, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1022, <2 x i64>* %976, align 16
  %1023 = shufflevector <2 x i64> %1006, <2 x i64> %1008, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1023, <2 x i64>* %980, align 16
  %1024 = shufflevector <2 x i64> %1012, <2 x i64> %1015, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1024, <2 x i64>* %984, align 16
  %1025 = shufflevector <2 x i64> %1012, <2 x i64> %1015, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1025, <2 x i64>* %988, align 16
  %1026 = shufflevector <2 x i64> %1017, <2 x i64> %1019, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1026, <2 x i64>* %992, align 16
  %1027 = shufflevector <2 x i64> %1017, <2 x i64> %1019, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1027, <2 x i64>* %996, align 16
  call fastcc void @highbd_idct32_1024_4x32(<2 x i64>* %777)
  %1028 = getelementptr inbounds i32, i32* %776, i64 128
  %1029 = add nuw nsw i64 %775, 1
  %1030 = icmp eq i64 %1029, 8
  br i1 %1030, label %740, label %774

1031:                                             ; preds = %740, %1251
  %1032 = phi i64 [ 0, %740 ], [ %1253, %1251 ]
  %1033 = phi i16* [ %1, %740 ], [ %1252, %1251 ]
  %1034 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 0, i64 %1032
  %1035 = bitcast <2 x i64>* %1034 to <4 x i32>*
  %1036 = load <4 x i32>, <4 x i32>* %1035, align 16
  %1037 = getelementptr inbounds <2 x i64>, <2 x i64>* %1034, i64 1
  %1038 = bitcast <2 x i64>* %1037 to <4 x i32>*
  %1039 = load <4 x i32>, <4 x i32>* %1038, align 16
  %1040 = shufflevector <4 x i32> %1036, <4 x i32> %1039, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1041 = bitcast <4 x i32> %1040 to <2 x i64>
  %1042 = getelementptr inbounds <2 x i64>, <2 x i64>* %1034, i64 2
  %1043 = bitcast <2 x i64>* %1042 to <4 x i32>*
  %1044 = load <4 x i32>, <4 x i32>* %1043, align 16
  %1045 = getelementptr inbounds <2 x i64>, <2 x i64>* %1034, i64 3
  %1046 = bitcast <2 x i64>* %1045 to <4 x i32>*
  %1047 = load <4 x i32>, <4 x i32>* %1046, align 16
  %1048 = shufflevector <4 x i32> %1044, <4 x i32> %1047, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1049 = bitcast <4 x i32> %1048 to <2 x i64>
  %1050 = shufflevector <4 x i32> %1036, <4 x i32> %1039, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1051 = bitcast <4 x i32> %1050 to <2 x i64>
  %1052 = shufflevector <4 x i32> %1044, <4 x i32> %1047, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1053 = bitcast <4 x i32> %1052 to <2 x i64>
  %1054 = shufflevector <2 x i64> %1041, <2 x i64> %1049, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1054, <2 x i64>* %741, align 16
  %1055 = shufflevector <2 x i64> %1041, <2 x i64> %1049, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1055, <2 x i64>* %742, align 16
  %1056 = shufflevector <2 x i64> %1051, <2 x i64> %1053, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1056, <2 x i64>* %743, align 16
  %1057 = shufflevector <2 x i64> %1051, <2 x i64> %1053, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1057, <2 x i64>* %744, align 16
  %1058 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 1, i64 %1032
  %1059 = bitcast <2 x i64>* %1058 to <4 x i32>*
  %1060 = load <4 x i32>, <4 x i32>* %1059, align 16
  %1061 = getelementptr inbounds <2 x i64>, <2 x i64>* %1058, i64 1
  %1062 = bitcast <2 x i64>* %1061 to <4 x i32>*
  %1063 = load <4 x i32>, <4 x i32>* %1062, align 16
  %1064 = shufflevector <4 x i32> %1060, <4 x i32> %1063, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1065 = bitcast <4 x i32> %1064 to <2 x i64>
  %1066 = getelementptr inbounds <2 x i64>, <2 x i64>* %1058, i64 2
  %1067 = bitcast <2 x i64>* %1066 to <4 x i32>*
  %1068 = load <4 x i32>, <4 x i32>* %1067, align 16
  %1069 = getelementptr inbounds <2 x i64>, <2 x i64>* %1058, i64 3
  %1070 = bitcast <2 x i64>* %1069 to <4 x i32>*
  %1071 = load <4 x i32>, <4 x i32>* %1070, align 16
  %1072 = shufflevector <4 x i32> %1068, <4 x i32> %1071, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1073 = bitcast <4 x i32> %1072 to <2 x i64>
  %1074 = shufflevector <4 x i32> %1060, <4 x i32> %1063, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1075 = bitcast <4 x i32> %1074 to <2 x i64>
  %1076 = shufflevector <4 x i32> %1068, <4 x i32> %1071, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1077 = bitcast <4 x i32> %1076 to <2 x i64>
  %1078 = shufflevector <2 x i64> %1065, <2 x i64> %1073, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1078, <2 x i64>* %745, align 16
  %1079 = shufflevector <2 x i64> %1065, <2 x i64> %1073, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1079, <2 x i64>* %746, align 16
  %1080 = shufflevector <2 x i64> %1075, <2 x i64> %1077, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1080, <2 x i64>* %747, align 16
  %1081 = shufflevector <2 x i64> %1075, <2 x i64> %1077, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1081, <2 x i64>* %748, align 16
  %1082 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 2, i64 %1032
  %1083 = bitcast <2 x i64>* %1082 to <4 x i32>*
  %1084 = load <4 x i32>, <4 x i32>* %1083, align 16
  %1085 = getelementptr inbounds <2 x i64>, <2 x i64>* %1082, i64 1
  %1086 = bitcast <2 x i64>* %1085 to <4 x i32>*
  %1087 = load <4 x i32>, <4 x i32>* %1086, align 16
  %1088 = shufflevector <4 x i32> %1084, <4 x i32> %1087, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1089 = bitcast <4 x i32> %1088 to <2 x i64>
  %1090 = getelementptr inbounds <2 x i64>, <2 x i64>* %1082, i64 2
  %1091 = bitcast <2 x i64>* %1090 to <4 x i32>*
  %1092 = load <4 x i32>, <4 x i32>* %1091, align 16
  %1093 = getelementptr inbounds <2 x i64>, <2 x i64>* %1082, i64 3
  %1094 = bitcast <2 x i64>* %1093 to <4 x i32>*
  %1095 = load <4 x i32>, <4 x i32>* %1094, align 16
  %1096 = shufflevector <4 x i32> %1092, <4 x i32> %1095, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1097 = bitcast <4 x i32> %1096 to <2 x i64>
  %1098 = shufflevector <4 x i32> %1084, <4 x i32> %1087, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1099 = bitcast <4 x i32> %1098 to <2 x i64>
  %1100 = shufflevector <4 x i32> %1092, <4 x i32> %1095, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1101 = bitcast <4 x i32> %1100 to <2 x i64>
  %1102 = shufflevector <2 x i64> %1089, <2 x i64> %1097, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1102, <2 x i64>* %749, align 16
  %1103 = shufflevector <2 x i64> %1089, <2 x i64> %1097, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1103, <2 x i64>* %750, align 16
  %1104 = shufflevector <2 x i64> %1099, <2 x i64> %1101, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1104, <2 x i64>* %751, align 16
  %1105 = shufflevector <2 x i64> %1099, <2 x i64> %1101, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1105, <2 x i64>* %752, align 16
  %1106 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 3, i64 %1032
  %1107 = bitcast <2 x i64>* %1106 to <4 x i32>*
  %1108 = load <4 x i32>, <4 x i32>* %1107, align 16
  %1109 = getelementptr inbounds <2 x i64>, <2 x i64>* %1106, i64 1
  %1110 = bitcast <2 x i64>* %1109 to <4 x i32>*
  %1111 = load <4 x i32>, <4 x i32>* %1110, align 16
  %1112 = shufflevector <4 x i32> %1108, <4 x i32> %1111, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1113 = bitcast <4 x i32> %1112 to <2 x i64>
  %1114 = getelementptr inbounds <2 x i64>, <2 x i64>* %1106, i64 2
  %1115 = bitcast <2 x i64>* %1114 to <4 x i32>*
  %1116 = load <4 x i32>, <4 x i32>* %1115, align 16
  %1117 = getelementptr inbounds <2 x i64>, <2 x i64>* %1106, i64 3
  %1118 = bitcast <2 x i64>* %1117 to <4 x i32>*
  %1119 = load <4 x i32>, <4 x i32>* %1118, align 16
  %1120 = shufflevector <4 x i32> %1116, <4 x i32> %1119, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1121 = bitcast <4 x i32> %1120 to <2 x i64>
  %1122 = shufflevector <4 x i32> %1108, <4 x i32> %1111, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1123 = bitcast <4 x i32> %1122 to <2 x i64>
  %1124 = shufflevector <4 x i32> %1116, <4 x i32> %1119, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1125 = bitcast <4 x i32> %1124 to <2 x i64>
  %1126 = shufflevector <2 x i64> %1113, <2 x i64> %1121, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1126, <2 x i64>* %753, align 16
  %1127 = shufflevector <2 x i64> %1113, <2 x i64> %1121, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1127, <2 x i64>* %754, align 16
  %1128 = shufflevector <2 x i64> %1123, <2 x i64> %1125, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1128, <2 x i64>* %755, align 16
  %1129 = shufflevector <2 x i64> %1123, <2 x i64> %1125, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1129, <2 x i64>* %756, align 16
  %1130 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 4, i64 %1032
  %1131 = bitcast <2 x i64>* %1130 to <4 x i32>*
  %1132 = load <4 x i32>, <4 x i32>* %1131, align 16
  %1133 = getelementptr inbounds <2 x i64>, <2 x i64>* %1130, i64 1
  %1134 = bitcast <2 x i64>* %1133 to <4 x i32>*
  %1135 = load <4 x i32>, <4 x i32>* %1134, align 16
  %1136 = shufflevector <4 x i32> %1132, <4 x i32> %1135, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1137 = bitcast <4 x i32> %1136 to <2 x i64>
  %1138 = getelementptr inbounds <2 x i64>, <2 x i64>* %1130, i64 2
  %1139 = bitcast <2 x i64>* %1138 to <4 x i32>*
  %1140 = load <4 x i32>, <4 x i32>* %1139, align 16
  %1141 = getelementptr inbounds <2 x i64>, <2 x i64>* %1130, i64 3
  %1142 = bitcast <2 x i64>* %1141 to <4 x i32>*
  %1143 = load <4 x i32>, <4 x i32>* %1142, align 16
  %1144 = shufflevector <4 x i32> %1140, <4 x i32> %1143, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1145 = bitcast <4 x i32> %1144 to <2 x i64>
  %1146 = shufflevector <4 x i32> %1132, <4 x i32> %1135, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1147 = bitcast <4 x i32> %1146 to <2 x i64>
  %1148 = shufflevector <4 x i32> %1140, <4 x i32> %1143, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1149 = bitcast <4 x i32> %1148 to <2 x i64>
  %1150 = shufflevector <2 x i64> %1137, <2 x i64> %1145, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1150, <2 x i64>* %757, align 16
  %1151 = shufflevector <2 x i64> %1137, <2 x i64> %1145, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1151, <2 x i64>* %758, align 16
  %1152 = shufflevector <2 x i64> %1147, <2 x i64> %1149, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1152, <2 x i64>* %759, align 16
  %1153 = shufflevector <2 x i64> %1147, <2 x i64> %1149, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1153, <2 x i64>* %760, align 16
  %1154 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 5, i64 %1032
  %1155 = bitcast <2 x i64>* %1154 to <4 x i32>*
  %1156 = load <4 x i32>, <4 x i32>* %1155, align 16
  %1157 = getelementptr inbounds <2 x i64>, <2 x i64>* %1154, i64 1
  %1158 = bitcast <2 x i64>* %1157 to <4 x i32>*
  %1159 = load <4 x i32>, <4 x i32>* %1158, align 16
  %1160 = shufflevector <4 x i32> %1156, <4 x i32> %1159, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1161 = bitcast <4 x i32> %1160 to <2 x i64>
  %1162 = getelementptr inbounds <2 x i64>, <2 x i64>* %1154, i64 2
  %1163 = bitcast <2 x i64>* %1162 to <4 x i32>*
  %1164 = load <4 x i32>, <4 x i32>* %1163, align 16
  %1165 = getelementptr inbounds <2 x i64>, <2 x i64>* %1154, i64 3
  %1166 = bitcast <2 x i64>* %1165 to <4 x i32>*
  %1167 = load <4 x i32>, <4 x i32>* %1166, align 16
  %1168 = shufflevector <4 x i32> %1164, <4 x i32> %1167, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1169 = bitcast <4 x i32> %1168 to <2 x i64>
  %1170 = shufflevector <4 x i32> %1156, <4 x i32> %1159, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1171 = bitcast <4 x i32> %1170 to <2 x i64>
  %1172 = shufflevector <4 x i32> %1164, <4 x i32> %1167, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1173 = bitcast <4 x i32> %1172 to <2 x i64>
  %1174 = shufflevector <2 x i64> %1161, <2 x i64> %1169, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1174, <2 x i64>* %761, align 16
  %1175 = shufflevector <2 x i64> %1161, <2 x i64> %1169, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1175, <2 x i64>* %762, align 16
  %1176 = shufflevector <2 x i64> %1171, <2 x i64> %1173, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1176, <2 x i64>* %763, align 16
  %1177 = shufflevector <2 x i64> %1171, <2 x i64> %1173, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1177, <2 x i64>* %764, align 16
  %1178 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 6, i64 %1032
  %1179 = bitcast <2 x i64>* %1178 to <4 x i32>*
  %1180 = load <4 x i32>, <4 x i32>* %1179, align 16
  %1181 = getelementptr inbounds <2 x i64>, <2 x i64>* %1178, i64 1
  %1182 = bitcast <2 x i64>* %1181 to <4 x i32>*
  %1183 = load <4 x i32>, <4 x i32>* %1182, align 16
  %1184 = shufflevector <4 x i32> %1180, <4 x i32> %1183, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1185 = bitcast <4 x i32> %1184 to <2 x i64>
  %1186 = getelementptr inbounds <2 x i64>, <2 x i64>* %1178, i64 2
  %1187 = bitcast <2 x i64>* %1186 to <4 x i32>*
  %1188 = load <4 x i32>, <4 x i32>* %1187, align 16
  %1189 = getelementptr inbounds <2 x i64>, <2 x i64>* %1178, i64 3
  %1190 = bitcast <2 x i64>* %1189 to <4 x i32>*
  %1191 = load <4 x i32>, <4 x i32>* %1190, align 16
  %1192 = shufflevector <4 x i32> %1188, <4 x i32> %1191, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1193 = bitcast <4 x i32> %1192 to <2 x i64>
  %1194 = shufflevector <4 x i32> %1180, <4 x i32> %1183, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1195 = bitcast <4 x i32> %1194 to <2 x i64>
  %1196 = shufflevector <4 x i32> %1188, <4 x i32> %1191, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1197 = bitcast <4 x i32> %1196 to <2 x i64>
  %1198 = shufflevector <2 x i64> %1185, <2 x i64> %1193, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1198, <2 x i64>* %765, align 16
  %1199 = shufflevector <2 x i64> %1185, <2 x i64> %1193, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1199, <2 x i64>* %766, align 16
  %1200 = shufflevector <2 x i64> %1195, <2 x i64> %1197, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1200, <2 x i64>* %767, align 16
  %1201 = shufflevector <2 x i64> %1195, <2 x i64> %1197, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1201, <2 x i64>* %768, align 16
  %1202 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 7, i64 %1032
  %1203 = bitcast <2 x i64>* %1202 to <4 x i32>*
  %1204 = load <4 x i32>, <4 x i32>* %1203, align 16
  %1205 = getelementptr inbounds <2 x i64>, <2 x i64>* %1202, i64 1
  %1206 = bitcast <2 x i64>* %1205 to <4 x i32>*
  %1207 = load <4 x i32>, <4 x i32>* %1206, align 16
  %1208 = shufflevector <4 x i32> %1204, <4 x i32> %1207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1209 = bitcast <4 x i32> %1208 to <2 x i64>
  %1210 = getelementptr inbounds <2 x i64>, <2 x i64>* %1202, i64 2
  %1211 = bitcast <2 x i64>* %1210 to <4 x i32>*
  %1212 = load <4 x i32>, <4 x i32>* %1211, align 16
  %1213 = getelementptr inbounds <2 x i64>, <2 x i64>* %1202, i64 3
  %1214 = bitcast <2 x i64>* %1213 to <4 x i32>*
  %1215 = load <4 x i32>, <4 x i32>* %1214, align 16
  %1216 = shufflevector <4 x i32> %1212, <4 x i32> %1215, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1217 = bitcast <4 x i32> %1216 to <2 x i64>
  %1218 = shufflevector <4 x i32> %1204, <4 x i32> %1207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1219 = bitcast <4 x i32> %1218 to <2 x i64>
  %1220 = shufflevector <4 x i32> %1212, <4 x i32> %1215, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1221 = bitcast <4 x i32> %1220 to <2 x i64>
  %1222 = shufflevector <2 x i64> %1209, <2 x i64> %1217, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1222, <2 x i64>* %769, align 16
  %1223 = shufflevector <2 x i64> %1209, <2 x i64> %1217, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1223, <2 x i64>* %770, align 16
  %1224 = shufflevector <2 x i64> %1219, <2 x i64> %1221, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1224, <2 x i64>* %771, align 16
  %1225 = shufflevector <2 x i64> %1219, <2 x i64> %1221, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1225, <2 x i64>* %772, align 16
  call fastcc void @highbd_idct32_1024_4x32(<2 x i64>* nonnull %741)
  %1226 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %1227 = add <8 x i16> %1226, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %1228

1228:                                             ; preds = %1228, %1031
  %1229 = phi i64 [ 0, %1031 ], [ %1249, %1228 ]
  %1230 = mul nsw i64 %1229, %773
  %1231 = getelementptr inbounds i16, i16* %1033, i64 %1230
  %1232 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %1229
  %1233 = bitcast <2 x i64>* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 16
  %1235 = add <4 x i32> %1234, <i32 32, i32 32, i32 32, i32 32>
  %1236 = ashr <4 x i32> %1235, <i32 6, i32 6, i32 6, i32 6>
  %1237 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1236, <4 x i32> %1236) #6
  %1238 = bitcast i16* %1231 to i64*
  %1239 = load i64, i64* %1238, align 1
  %1240 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1239, i32 0
  %1241 = bitcast <2 x i64> %1240 to <8 x i16>
  %1242 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %1241, <8 x i16> %1237) #6
  %1243 = icmp sgt <8 x i16> %1242, zeroinitializer
  %1244 = select <8 x i1> %1243, <8 x i16> %1242, <8 x i16> zeroinitializer
  %1245 = icmp slt <8 x i16> %1244, %1227
  %1246 = select <8 x i1> %1245, <8 x i16> %1244, <8 x i16> %1227
  %1247 = bitcast <8 x i16> %1246 to <2 x i64>
  %1248 = extractelement <2 x i64> %1247, i32 0
  store i64 %1248, i64* %1238, align 1
  %1249 = add nuw nsw i64 %1229, 1
  %1250 = icmp eq i64 %1249, 32
  br i1 %1250, label %1251, label %1228

1251:                                             ; preds = %1228
  %1252 = getelementptr inbounds i16, i16* %1033, i64 4
  %1253 = add nuw nsw i64 %1032, 4
  %1254 = icmp ult i64 %1253, 32
  br i1 %1254, label %1031, label %1255

1255:                                             ; preds = %1251
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %739) #6
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %738) #6
  br label %1256

1256:                                             ; preds = %1255, %736
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @idct32_1024_8x32(<2 x i64>*, <2 x i64>*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_1024_4x32(<2 x i64>*) unnamed_addr #0 {
  %2 = alloca [32 x <2 x i64>], align 16
  %3 = alloca [32 x <2 x i64>], align 16
  %4 = bitcast [32 x <2 x i64>]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 0
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 28
  %10 = bitcast <2 x i64>* %9 to <4 x i32>*
  %11 = load <4 x i32>, <4 x i32>* %10, align 16
  %12 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = shl <2 x i64> %13, <i64 32, i64 32>
  %21 = ashr exact <2 x i64> %20, <i64 32, i64 32>
  %22 = mul nsw <2 x i64> %21, <i64 64276, i64 64276>
  %23 = shl <2 x i64> %15, <i64 32, i64 32>
  %24 = ashr exact <2 x i64> %23, <i64 32, i64 32>
  %25 = mul nsw <2 x i64> %24, <i64 64276, i64 64276>
  %26 = mul nsw <2 x i64> %21, <i64 12784, i64 12784>
  %27 = mul nsw <2 x i64> %24, <i64 12784, i64 12784>
  %28 = shl <2 x i64> %17, <i64 32, i64 32>
  %29 = ashr exact <2 x i64> %28, <i64 32, i64 32>
  %30 = mul nsw <2 x i64> %29, <i64 12784, i64 12784>
  %31 = shl <2 x i64> %19, <i64 32, i64 32>
  %32 = ashr exact <2 x i64> %31, <i64 32, i64 32>
  %33 = mul nsw <2 x i64> %32, <i64 12784, i64 12784>
  %34 = add nsw <2 x i64> %26, <i64 32768, i64 32768>
  %35 = mul nsw <2 x i64> %29, <i64 -64276, i64 -64276>
  %36 = add nsw <2 x i64> %34, %35
  %37 = bitcast <2 x i64> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %39 = add nsw <2 x i64> %27, <i64 32768, i64 32768>
  %40 = mul nsw <2 x i64> %32, <i64 -64276, i64 -64276>
  %41 = add nsw <2 x i64> %39, %40
  %42 = bitcast <2 x i64> %41 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %44 = add nsw <2 x i64> %22, <i64 32768, i64 32768>
  %45 = add nsw <2 x i64> %44, %30
  %46 = bitcast <2 x i64> %45 to <16 x i8>
  %47 = shufflevector <16 x i8> %46, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %48 = add nsw <2 x i64> %25, <i64 32768, i64 32768>
  %49 = add nsw <2 x i64> %48, %33
  %50 = bitcast <2 x i64> %49 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %52 = bitcast <16 x i8> %38 to <4 x i32>
  %53 = bitcast <16 x i8> %43 to <4 x i32>
  %54 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %55 = shufflevector <4 x i32> %52, <4 x i32> %53, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %56 = shufflevector <4 x i32> %54, <4 x i32> %55, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %57 = bitcast <16 x i8> %47 to <4 x i32>
  %58 = bitcast <16 x i8> %51 to <4 x i32>
  %59 = shufflevector <4 x i32> %57, <4 x i32> %58, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %60 = shufflevector <4 x i32> %57, <4 x i32> %58, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %62 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 20
  %63 = bitcast <2 x i64>* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %66 = bitcast <2 x i64>* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16
  %68 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = shl <2 x i64> %69, <i64 32, i64 32>
  %77 = ashr exact <2 x i64> %76, <i64 32, i64 32>
  %78 = mul nsw <2 x i64> %77, <i64 36408, i64 36408>
  %79 = shl <2 x i64> %71, <i64 32, i64 32>
  %80 = ashr exact <2 x i64> %79, <i64 32, i64 32>
  %81 = mul nsw <2 x i64> %80, <i64 36408, i64 36408>
  %82 = mul nsw <2 x i64> %77, <i64 54492, i64 54492>
  %83 = mul nsw <2 x i64> %80, <i64 54492, i64 54492>
  %84 = shl <2 x i64> %73, <i64 32, i64 32>
  %85 = ashr exact <2 x i64> %84, <i64 32, i64 32>
  %86 = mul nsw <2 x i64> %85, <i64 54492, i64 54492>
  %87 = shl <2 x i64> %75, <i64 32, i64 32>
  %88 = ashr exact <2 x i64> %87, <i64 32, i64 32>
  %89 = mul nsw <2 x i64> %88, <i64 54492, i64 54492>
  %90 = add nsw <2 x i64> %82, <i64 32768, i64 32768>
  %91 = mul nsw <2 x i64> %85, <i64 -36408, i64 -36408>
  %92 = add nsw <2 x i64> %90, %91
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %95 = add nsw <2 x i64> %83, <i64 32768, i64 32768>
  %96 = mul nsw <2 x i64> %88, <i64 -36408, i64 -36408>
  %97 = add nsw <2 x i64> %95, %96
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %100 = add nsw <2 x i64> %78, <i64 32768, i64 32768>
  %101 = add nsw <2 x i64> %100, %86
  %102 = bitcast <2 x i64> %101 to <16 x i8>
  %103 = shufflevector <16 x i8> %102, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %104 = add nsw <2 x i64> %81, <i64 32768, i64 32768>
  %105 = add nsw <2 x i64> %104, %89
  %106 = bitcast <2 x i64> %105 to <16 x i8>
  %107 = shufflevector <16 x i8> %106, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %108 = bitcast <16 x i8> %94 to <4 x i32>
  %109 = bitcast <16 x i8> %99 to <4 x i32>
  %110 = shufflevector <4 x i32> %108, <4 x i32> %109, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %111 = shufflevector <4 x i32> %108, <4 x i32> %109, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %112 = shufflevector <4 x i32> %110, <4 x i32> %111, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %113 = bitcast <16 x i8> %103 to <4 x i32>
  %114 = bitcast <16 x i8> %107 to <4 x i32>
  %115 = shufflevector <4 x i32> %113, <4 x i32> %114, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %116 = shufflevector <4 x i32> %113, <4 x i32> %114, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %117 = shufflevector <4 x i32> %115, <4 x i32> %116, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %118 = bitcast <2 x i64>* %0 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 16
  %120 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 16
  %121 = bitcast <2 x i64>* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 16
  %123 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %124 = bitcast <4 x i32> %123 to <2 x i64>
  %125 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %128 = bitcast <4 x i32> %127 to <2 x i64>
  %129 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %130 = bitcast <4 x i32> %129 to <2 x i64>
  %131 = shl <2 x i64> %124, <i64 32, i64 32>
  %132 = ashr exact <2 x i64> %131, <i64 32, i64 32>
  %133 = mul nsw <2 x i64> %132, <i64 46340, i64 46340>
  %134 = shl <2 x i64> %126, <i64 32, i64 32>
  %135 = ashr exact <2 x i64> %134, <i64 32, i64 32>
  %136 = mul nsw <2 x i64> %135, <i64 46340, i64 46340>
  %137 = shl <2 x i64> %128, <i64 32, i64 32>
  %138 = ashr exact <2 x i64> %137, <i64 32, i64 32>
  %139 = mul nsw <2 x i64> %138, <i64 46340, i64 46340>
  %140 = shl <2 x i64> %130, <i64 32, i64 32>
  %141 = ashr exact <2 x i64> %140, <i64 32, i64 32>
  %142 = mul nsw <2 x i64> %141, <i64 46340, i64 46340>
  %143 = add nsw <2 x i64> %133, <i64 32768, i64 32768>
  %144 = sub nsw <2 x i64> %143, %139
  %145 = bitcast <2 x i64> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %147 = add nsw <2 x i64> %136, <i64 32768, i64 32768>
  %148 = sub nsw <2 x i64> %147, %142
  %149 = bitcast <2 x i64> %148 to <16 x i8>
  %150 = shufflevector <16 x i8> %149, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %151 = add nsw <2 x i64> %143, %139
  %152 = bitcast <2 x i64> %151 to <16 x i8>
  %153 = shufflevector <16 x i8> %152, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %154 = add nsw <2 x i64> %147, %142
  %155 = bitcast <2 x i64> %154 to <16 x i8>
  %156 = shufflevector <16 x i8> %155, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %157 = bitcast <16 x i8> %146 to <4 x i32>
  %158 = bitcast <16 x i8> %150 to <4 x i32>
  %159 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %160 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %161 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %162 = bitcast <16 x i8> %153 to <4 x i32>
  %163 = bitcast <16 x i8> %156 to <4 x i32>
  %164 = shufflevector <4 x i32> %162, <4 x i32> %163, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %165 = shufflevector <4 x i32> %162, <4 x i32> %163, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %166 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %167 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %168 = bitcast <2 x i64>* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 16
  %170 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 24
  %171 = bitcast <2 x i64>* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 16
  %173 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shufflevector <4 x i32> %169, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <4 x i32> %172, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %180 = bitcast <4 x i32> %179 to <2 x i64>
  %181 = shl <2 x i64> %174, <i64 32, i64 32>
  %182 = ashr exact <2 x i64> %181, <i64 32, i64 32>
  %183 = mul nsw <2 x i64> %182, <i64 60548, i64 60548>
  %184 = shl <2 x i64> %176, <i64 32, i64 32>
  %185 = ashr exact <2 x i64> %184, <i64 32, i64 32>
  %186 = mul nsw <2 x i64> %185, <i64 60548, i64 60548>
  %187 = mul nsw <2 x i64> %182, <i64 25080, i64 25080>
  %188 = mul nsw <2 x i64> %185, <i64 25080, i64 25080>
  %189 = shl <2 x i64> %178, <i64 32, i64 32>
  %190 = ashr exact <2 x i64> %189, <i64 32, i64 32>
  %191 = mul nsw <2 x i64> %190, <i64 25080, i64 25080>
  %192 = shl <2 x i64> %180, <i64 32, i64 32>
  %193 = ashr exact <2 x i64> %192, <i64 32, i64 32>
  %194 = mul nsw <2 x i64> %193, <i64 25080, i64 25080>
  %195 = add nsw <2 x i64> %187, <i64 32768, i64 32768>
  %196 = mul nsw <2 x i64> %190, <i64 -60548, i64 -60548>
  %197 = add nsw <2 x i64> %195, %196
  %198 = bitcast <2 x i64> %197 to <16 x i8>
  %199 = shufflevector <16 x i8> %198, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %200 = add nsw <2 x i64> %188, <i64 32768, i64 32768>
  %201 = mul nsw <2 x i64> %193, <i64 -60548, i64 -60548>
  %202 = add nsw <2 x i64> %200, %201
  %203 = bitcast <2 x i64> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %205 = add nsw <2 x i64> %183, <i64 32768, i64 32768>
  %206 = add nsw <2 x i64> %205, %191
  %207 = bitcast <2 x i64> %206 to <16 x i8>
  %208 = shufflevector <16 x i8> %207, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %209 = add nsw <2 x i64> %186, <i64 32768, i64 32768>
  %210 = add nsw <2 x i64> %209, %194
  %211 = bitcast <2 x i64> %210 to <16 x i8>
  %212 = shufflevector <16 x i8> %211, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %213 = bitcast <16 x i8> %199 to <4 x i32>
  %214 = bitcast <16 x i8> %204 to <4 x i32>
  %215 = shufflevector <4 x i32> %213, <4 x i32> %214, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %216 = shufflevector <4 x i32> %213, <4 x i32> %214, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %217 = shufflevector <4 x i32> %215, <4 x i32> %216, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %218 = bitcast <16 x i8> %208 to <4 x i32>
  %219 = bitcast <16 x i8> %212 to <4 x i32>
  %220 = shufflevector <4 x i32> %218, <4 x i32> %219, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %221 = shufflevector <4 x i32> %218, <4 x i32> %219, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %222 = shufflevector <4 x i32> %220, <4 x i32> %221, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %223 = add <4 x i32> %112, %56
  %224 = sub <4 x i32> %56, %112
  %225 = sub <4 x i32> %61, %117
  %226 = add <4 x i32> %117, %61
  %227 = add <4 x i32> %222, %166
  %228 = add <4 x i32> %217, %161
  %229 = sub <4 x i32> %161, %217
  %230 = sub <4 x i32> %166, %222
  %231 = shufflevector <4 x i32> %225, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %232 = bitcast <4 x i32> %231 to <2 x i64>
  %233 = shufflevector <4 x i32> %225, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %234 = bitcast <4 x i32> %233 to <2 x i64>
  %235 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %236 = bitcast <4 x i32> %235 to <2 x i64>
  %237 = shufflevector <4 x i32> %224, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %238 = bitcast <4 x i32> %237 to <2 x i64>
  %239 = shl <2 x i64> %232, <i64 32, i64 32>
  %240 = ashr exact <2 x i64> %239, <i64 32, i64 32>
  %241 = mul nsw <2 x i64> %240, <i64 46340, i64 46340>
  %242 = shl <2 x i64> %234, <i64 32, i64 32>
  %243 = ashr exact <2 x i64> %242, <i64 32, i64 32>
  %244 = mul nsw <2 x i64> %243, <i64 46340, i64 46340>
  %245 = shl <2 x i64> %236, <i64 32, i64 32>
  %246 = ashr exact <2 x i64> %245, <i64 32, i64 32>
  %247 = mul nsw <2 x i64> %246, <i64 46340, i64 46340>
  %248 = shl <2 x i64> %238, <i64 32, i64 32>
  %249 = ashr exact <2 x i64> %248, <i64 32, i64 32>
  %250 = mul nsw <2 x i64> %249, <i64 46340, i64 46340>
  %251 = add nsw <2 x i64> %241, <i64 32768, i64 32768>
  %252 = sub nsw <2 x i64> %251, %247
  %253 = bitcast <2 x i64> %252 to <16 x i8>
  %254 = shufflevector <16 x i8> %253, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %255 = add nsw <2 x i64> %244, <i64 32768, i64 32768>
  %256 = sub nsw <2 x i64> %255, %250
  %257 = bitcast <2 x i64> %256 to <16 x i8>
  %258 = shufflevector <16 x i8> %257, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %259 = add nsw <2 x i64> %251, %247
  %260 = bitcast <2 x i64> %259 to <16 x i8>
  %261 = shufflevector <16 x i8> %260, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %262 = add nsw <2 x i64> %255, %250
  %263 = bitcast <2 x i64> %262 to <16 x i8>
  %264 = shufflevector <16 x i8> %263, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %265 = bitcast <16 x i8> %254 to <4 x i32>
  %266 = bitcast <16 x i8> %258 to <4 x i32>
  %267 = shufflevector <4 x i32> %265, <4 x i32> %266, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %268 = shufflevector <4 x i32> %265, <4 x i32> %266, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %269 = shufflevector <4 x i32> %267, <4 x i32> %268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %270 = bitcast <16 x i8> %261 to <4 x i32>
  %271 = bitcast <16 x i8> %264 to <4 x i32>
  %272 = shufflevector <4 x i32> %270, <4 x i32> %271, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %273 = shufflevector <4 x i32> %270, <4 x i32> %271, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %274 = shufflevector <4 x i32> %272, <4 x i32> %273, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %275 = add <4 x i32> %227, %226
  %276 = add <4 x i32> %274, %228
  %277 = add <4 x i32> %269, %229
  %278 = add <4 x i32> %230, %223
  %279 = sub <4 x i32> %230, %223
  %280 = sub <4 x i32> %229, %269
  %281 = sub <4 x i32> %228, %274
  %282 = sub <4 x i32> %227, %226
  %283 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %284 = bitcast <2 x i64>* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 16
  %286 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 30
  %287 = bitcast <2 x i64>* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 16
  %289 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %290 = bitcast <4 x i32> %289 to <2 x i64>
  %291 = shufflevector <4 x i32> %285, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %292 = bitcast <4 x i32> %291 to <2 x i64>
  %293 = shufflevector <4 x i32> %288, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %294 = bitcast <4 x i32> %293 to <2 x i64>
  %295 = shufflevector <4 x i32> %288, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %296 = bitcast <4 x i32> %295 to <2 x i64>
  %297 = shl <2 x i64> %290, <i64 32, i64 32>
  %298 = ashr exact <2 x i64> %297, <i64 32, i64 32>
  %299 = mul nsw <2 x i64> %298, <i64 65220, i64 65220>
  %300 = shl <2 x i64> %292, <i64 32, i64 32>
  %301 = ashr exact <2 x i64> %300, <i64 32, i64 32>
  %302 = mul nsw <2 x i64> %301, <i64 65220, i64 65220>
  %303 = mul nsw <2 x i64> %298, <i64 6424, i64 6424>
  %304 = mul nsw <2 x i64> %301, <i64 6424, i64 6424>
  %305 = shl <2 x i64> %294, <i64 32, i64 32>
  %306 = ashr exact <2 x i64> %305, <i64 32, i64 32>
  %307 = mul nsw <2 x i64> %306, <i64 6424, i64 6424>
  %308 = shl <2 x i64> %296, <i64 32, i64 32>
  %309 = ashr exact <2 x i64> %308, <i64 32, i64 32>
  %310 = mul nsw <2 x i64> %309, <i64 6424, i64 6424>
  %311 = add nsw <2 x i64> %303, <i64 32768, i64 32768>
  %312 = mul nsw <2 x i64> %306, <i64 -65220, i64 -65220>
  %313 = add nsw <2 x i64> %311, %312
  %314 = bitcast <2 x i64> %313 to <16 x i8>
  %315 = shufflevector <16 x i8> %314, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %316 = add nsw <2 x i64> %304, <i64 32768, i64 32768>
  %317 = mul nsw <2 x i64> %309, <i64 -65220, i64 -65220>
  %318 = add nsw <2 x i64> %316, %317
  %319 = bitcast <2 x i64> %318 to <16 x i8>
  %320 = shufflevector <16 x i8> %319, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %321 = add nsw <2 x i64> %299, <i64 32768, i64 32768>
  %322 = add nsw <2 x i64> %321, %307
  %323 = bitcast <2 x i64> %322 to <16 x i8>
  %324 = shufflevector <16 x i8> %323, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %325 = add nsw <2 x i64> %302, <i64 32768, i64 32768>
  %326 = add nsw <2 x i64> %325, %310
  %327 = bitcast <2 x i64> %326 to <16 x i8>
  %328 = shufflevector <16 x i8> %327, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %329 = bitcast <16 x i8> %315 to <4 x i32>
  %330 = bitcast <16 x i8> %320 to <4 x i32>
  %331 = shufflevector <4 x i32> %329, <4 x i32> %330, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %332 = shufflevector <4 x i32> %329, <4 x i32> %330, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %333 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %334 = bitcast <16 x i8> %324 to <4 x i32>
  %335 = bitcast <16 x i8> %328 to <4 x i32>
  %336 = shufflevector <4 x i32> %334, <4 x i32> %335, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %337 = shufflevector <4 x i32> %334, <4 x i32> %335, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %338 = shufflevector <4 x i32> %336, <4 x i32> %337, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %339 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 18
  %340 = bitcast <2 x i64>* %339 to <4 x i32>*
  %341 = load <4 x i32>, <4 x i32>* %340, align 16
  %342 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %343 = bitcast <2 x i64>* %342 to <4 x i32>*
  %344 = load <4 x i32>, <4 x i32>* %343, align 16
  %345 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = shufflevector <4 x i32> %341, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = shufflevector <4 x i32> %344, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shl <2 x i64> %346, <i64 32, i64 32>
  %354 = ashr exact <2 x i64> %353, <i64 32, i64 32>
  %355 = mul nsw <2 x i64> %354, <i64 41576, i64 41576>
  %356 = shl <2 x i64> %348, <i64 32, i64 32>
  %357 = ashr exact <2 x i64> %356, <i64 32, i64 32>
  %358 = mul nsw <2 x i64> %357, <i64 41576, i64 41576>
  %359 = mul nsw <2 x i64> %354, <i64 50660, i64 50660>
  %360 = mul nsw <2 x i64> %357, <i64 50660, i64 50660>
  %361 = shl <2 x i64> %350, <i64 32, i64 32>
  %362 = ashr exact <2 x i64> %361, <i64 32, i64 32>
  %363 = mul nsw <2 x i64> %362, <i64 50660, i64 50660>
  %364 = shl <2 x i64> %352, <i64 32, i64 32>
  %365 = ashr exact <2 x i64> %364, <i64 32, i64 32>
  %366 = mul nsw <2 x i64> %365, <i64 50660, i64 50660>
  %367 = add nsw <2 x i64> %359, <i64 32768, i64 32768>
  %368 = mul nsw <2 x i64> %362, <i64 -41576, i64 -41576>
  %369 = add nsw <2 x i64> %367, %368
  %370 = bitcast <2 x i64> %369 to <16 x i8>
  %371 = shufflevector <16 x i8> %370, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %372 = add nsw <2 x i64> %360, <i64 32768, i64 32768>
  %373 = mul nsw <2 x i64> %365, <i64 -41576, i64 -41576>
  %374 = add nsw <2 x i64> %372, %373
  %375 = bitcast <2 x i64> %374 to <16 x i8>
  %376 = shufflevector <16 x i8> %375, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %377 = add nsw <2 x i64> %355, <i64 32768, i64 32768>
  %378 = add nsw <2 x i64> %377, %363
  %379 = bitcast <2 x i64> %378 to <16 x i8>
  %380 = shufflevector <16 x i8> %379, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %381 = add nsw <2 x i64> %358, <i64 32768, i64 32768>
  %382 = add nsw <2 x i64> %381, %366
  %383 = bitcast <2 x i64> %382 to <16 x i8>
  %384 = shufflevector <16 x i8> %383, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %385 = bitcast <16 x i8> %371 to <4 x i32>
  %386 = bitcast <16 x i8> %376 to <4 x i32>
  %387 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %388 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %389 = shufflevector <4 x i32> %387, <4 x i32> %388, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %390 = bitcast <16 x i8> %380 to <4 x i32>
  %391 = bitcast <16 x i8> %384 to <4 x i32>
  %392 = shufflevector <4 x i32> %390, <4 x i32> %391, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %393 = shufflevector <4 x i32> %390, <4 x i32> %391, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %394 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %395 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %396 = bitcast <2 x i64>* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 16
  %398 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 22
  %399 = bitcast <2 x i64>* %398 to <4 x i32>*
  %400 = load <4 x i32>, <4 x i32>* %399, align 16
  %401 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %402 = bitcast <4 x i32> %401 to <2 x i64>
  %403 = shufflevector <4 x i32> %397, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %404 = bitcast <4 x i32> %403 to <2 x i64>
  %405 = shufflevector <4 x i32> %400, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %406 = bitcast <4 x i32> %405 to <2 x i64>
  %407 = shufflevector <4 x i32> %400, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %408 = bitcast <4 x i32> %407 to <2 x i64>
  %409 = shl <2 x i64> %402, <i64 32, i64 32>
  %410 = ashr exact <2 x i64> %409, <i64 32, i64 32>
  %411 = mul nsw <2 x i64> %410, <i64 57796, i64 57796>
  %412 = shl <2 x i64> %404, <i64 32, i64 32>
  %413 = ashr exact <2 x i64> %412, <i64 32, i64 32>
  %414 = mul nsw <2 x i64> %413, <i64 57796, i64 57796>
  %415 = mul nsw <2 x i64> %410, <i64 30892, i64 30892>
  %416 = mul nsw <2 x i64> %413, <i64 30892, i64 30892>
  %417 = shl <2 x i64> %406, <i64 32, i64 32>
  %418 = ashr exact <2 x i64> %417, <i64 32, i64 32>
  %419 = mul nsw <2 x i64> %418, <i64 30892, i64 30892>
  %420 = shl <2 x i64> %408, <i64 32, i64 32>
  %421 = ashr exact <2 x i64> %420, <i64 32, i64 32>
  %422 = mul nsw <2 x i64> %421, <i64 30892, i64 30892>
  %423 = add nsw <2 x i64> %415, <i64 32768, i64 32768>
  %424 = mul nsw <2 x i64> %418, <i64 -57796, i64 -57796>
  %425 = add nsw <2 x i64> %423, %424
  %426 = bitcast <2 x i64> %425 to <16 x i8>
  %427 = shufflevector <16 x i8> %426, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %428 = add nsw <2 x i64> %416, <i64 32768, i64 32768>
  %429 = mul nsw <2 x i64> %421, <i64 -57796, i64 -57796>
  %430 = add nsw <2 x i64> %428, %429
  %431 = bitcast <2 x i64> %430 to <16 x i8>
  %432 = shufflevector <16 x i8> %431, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %433 = add nsw <2 x i64> %411, <i64 32768, i64 32768>
  %434 = add nsw <2 x i64> %433, %419
  %435 = bitcast <2 x i64> %434 to <16 x i8>
  %436 = shufflevector <16 x i8> %435, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %437 = add nsw <2 x i64> %414, <i64 32768, i64 32768>
  %438 = add nsw <2 x i64> %437, %422
  %439 = bitcast <2 x i64> %438 to <16 x i8>
  %440 = shufflevector <16 x i8> %439, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %441 = bitcast <16 x i8> %427 to <4 x i32>
  %442 = bitcast <16 x i8> %432 to <4 x i32>
  %443 = shufflevector <4 x i32> %441, <4 x i32> %442, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %444 = shufflevector <4 x i32> %441, <4 x i32> %442, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %445 = shufflevector <4 x i32> %443, <4 x i32> %444, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %446 = bitcast <16 x i8> %436 to <4 x i32>
  %447 = bitcast <16 x i8> %440 to <4 x i32>
  %448 = shufflevector <4 x i32> %446, <4 x i32> %447, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %449 = shufflevector <4 x i32> %446, <4 x i32> %447, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %450 = shufflevector <4 x i32> %448, <4 x i32> %449, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %451 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 26
  %452 = bitcast <2 x i64>* %451 to <4 x i32>*
  %453 = load <4 x i32>, <4 x i32>* %452, align 16
  %454 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %455 = bitcast <2 x i64>* %454 to <4 x i32>*
  %456 = load <4 x i32>, <4 x i32>* %455, align 16
  %457 = shufflevector <4 x i32> %453, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %458 = bitcast <4 x i32> %457 to <2 x i64>
  %459 = shufflevector <4 x i32> %453, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %460 = bitcast <4 x i32> %459 to <2 x i64>
  %461 = shufflevector <4 x i32> %456, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %462 = bitcast <4 x i32> %461 to <2 x i64>
  %463 = shufflevector <4 x i32> %456, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %464 = bitcast <4 x i32> %463 to <2 x i64>
  %465 = shl <2 x i64> %458, <i64 32, i64 32>
  %466 = ashr exact <2 x i64> %465, <i64 32, i64 32>
  %467 = mul nsw <2 x i64> %466, <i64 19024, i64 19024>
  %468 = shl <2 x i64> %460, <i64 32, i64 32>
  %469 = ashr exact <2 x i64> %468, <i64 32, i64 32>
  %470 = mul nsw <2 x i64> %469, <i64 19024, i64 19024>
  %471 = mul nsw <2 x i64> %466, <i64 62716, i64 62716>
  %472 = mul nsw <2 x i64> %469, <i64 62716, i64 62716>
  %473 = shl <2 x i64> %462, <i64 32, i64 32>
  %474 = ashr exact <2 x i64> %473, <i64 32, i64 32>
  %475 = mul nsw <2 x i64> %474, <i64 62716, i64 62716>
  %476 = shl <2 x i64> %464, <i64 32, i64 32>
  %477 = ashr exact <2 x i64> %476, <i64 32, i64 32>
  %478 = mul nsw <2 x i64> %477, <i64 62716, i64 62716>
  %479 = add nsw <2 x i64> %471, <i64 32768, i64 32768>
  %480 = mul nsw <2 x i64> %474, <i64 -19024, i64 -19024>
  %481 = add nsw <2 x i64> %479, %480
  %482 = bitcast <2 x i64> %481 to <16 x i8>
  %483 = shufflevector <16 x i8> %482, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %484 = add nsw <2 x i64> %472, <i64 32768, i64 32768>
  %485 = mul nsw <2 x i64> %477, <i64 -19024, i64 -19024>
  %486 = add nsw <2 x i64> %484, %485
  %487 = bitcast <2 x i64> %486 to <16 x i8>
  %488 = shufflevector <16 x i8> %487, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %489 = add nsw <2 x i64> %467, <i64 32768, i64 32768>
  %490 = add nsw <2 x i64> %489, %475
  %491 = bitcast <2 x i64> %490 to <16 x i8>
  %492 = shufflevector <16 x i8> %491, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %493 = add nsw <2 x i64> %470, <i64 32768, i64 32768>
  %494 = add nsw <2 x i64> %493, %478
  %495 = bitcast <2 x i64> %494 to <16 x i8>
  %496 = shufflevector <16 x i8> %495, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %497 = bitcast <16 x i8> %483 to <4 x i32>
  %498 = bitcast <16 x i8> %488 to <4 x i32>
  %499 = shufflevector <4 x i32> %497, <4 x i32> %498, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %500 = shufflevector <4 x i32> %497, <4 x i32> %498, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %501 = shufflevector <4 x i32> %499, <4 x i32> %500, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %502 = bitcast <16 x i8> %492 to <4 x i32>
  %503 = bitcast <16 x i8> %496 to <4 x i32>
  %504 = shufflevector <4 x i32> %502, <4 x i32> %503, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %505 = shufflevector <4 x i32> %502, <4 x i32> %503, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %506 = shufflevector <4 x i32> %504, <4 x i32> %505, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %507 = add <4 x i32> %389, %333
  %508 = sub <4 x i32> %333, %389
  %509 = sub <4 x i32> %338, %394
  %510 = add <4 x i32> %394, %338
  %511 = sub <4 x i32> %501, %445
  %512 = add <4 x i32> %501, %445
  %513 = add <4 x i32> %506, %450
  %514 = sub <4 x i32> %506, %450
  %515 = shufflevector <4 x i32> %509, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %516 = bitcast <4 x i32> %515 to <2 x i64>
  %517 = shufflevector <4 x i32> %509, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %518 = bitcast <4 x i32> %517 to <2 x i64>
  %519 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %520 = bitcast <4 x i32> %519 to <2 x i64>
  %521 = shufflevector <4 x i32> %508, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %522 = bitcast <4 x i32> %521 to <2 x i64>
  %523 = shl <2 x i64> %516, <i64 32, i64 32>
  %524 = ashr exact <2 x i64> %523, <i64 32, i64 32>
  %525 = mul nsw <2 x i64> %524, <i64 60548, i64 60548>
  %526 = shl <2 x i64> %518, <i64 32, i64 32>
  %527 = ashr exact <2 x i64> %526, <i64 32, i64 32>
  %528 = mul nsw <2 x i64> %527, <i64 60548, i64 60548>
  %529 = mul nsw <2 x i64> %524, <i64 25080, i64 25080>
  %530 = mul nsw <2 x i64> %527, <i64 25080, i64 25080>
  %531 = shl <2 x i64> %520, <i64 32, i64 32>
  %532 = ashr exact <2 x i64> %531, <i64 32, i64 32>
  %533 = mul nsw <2 x i64> %532, <i64 25080, i64 25080>
  %534 = shl <2 x i64> %522, <i64 32, i64 32>
  %535 = ashr exact <2 x i64> %534, <i64 32, i64 32>
  %536 = mul nsw <2 x i64> %535, <i64 25080, i64 25080>
  %537 = mul nsw <2 x i64> %532, <i64 -60548, i64 -60548>
  %538 = add nsw <2 x i64> %537, <i64 32768, i64 32768>
  %539 = add nsw <2 x i64> %538, %529
  %540 = bitcast <2 x i64> %539 to <16 x i8>
  %541 = shufflevector <16 x i8> %540, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %542 = mul nsw <2 x i64> %535, <i64 -60548, i64 -60548>
  %543 = add nsw <2 x i64> %542, <i64 32768, i64 32768>
  %544 = add nsw <2 x i64> %543, %530
  %545 = bitcast <2 x i64> %544 to <16 x i8>
  %546 = shufflevector <16 x i8> %545, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %547 = add nsw <2 x i64> %533, <i64 32768, i64 32768>
  %548 = add nsw <2 x i64> %547, %525
  %549 = bitcast <2 x i64> %548 to <16 x i8>
  %550 = shufflevector <16 x i8> %549, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %551 = add nsw <2 x i64> %536, <i64 32768, i64 32768>
  %552 = add nsw <2 x i64> %551, %528
  %553 = bitcast <2 x i64> %552 to <16 x i8>
  %554 = shufflevector <16 x i8> %553, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %555 = bitcast <16 x i8> %541 to <4 x i32>
  %556 = bitcast <16 x i8> %546 to <4 x i32>
  %557 = shufflevector <4 x i32> %555, <4 x i32> %556, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %558 = shufflevector <4 x i32> %555, <4 x i32> %556, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %559 = shufflevector <4 x i32> %557, <4 x i32> %558, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %560 = bitcast <16 x i8> %550 to <4 x i32>
  %561 = bitcast <16 x i8> %554 to <4 x i32>
  %562 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %563 = shufflevector <4 x i32> %560, <4 x i32> %561, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %564 = shufflevector <4 x i32> %562, <4 x i32> %563, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %565 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %566 = bitcast <4 x i32> %565 to <2 x i64>
  %567 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %568 = bitcast <4 x i32> %567 to <2 x i64>
  %569 = shufflevector <4 x i32> %511, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %570 = bitcast <4 x i32> %569 to <2 x i64>
  %571 = shufflevector <4 x i32> %511, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %572 = bitcast <4 x i32> %571 to <2 x i64>
  %573 = shl <2 x i64> %566, <i64 32, i64 32>
  %574 = ashr exact <2 x i64> %573, <i64 32, i64 32>
  %575 = mul nsw <2 x i64> %574, <i64 25080, i64 25080>
  %576 = shl <2 x i64> %568, <i64 32, i64 32>
  %577 = ashr exact <2 x i64> %576, <i64 32, i64 32>
  %578 = mul nsw <2 x i64> %577, <i64 25080, i64 25080>
  %579 = mul nsw <2 x i64> %574, <i64 -60548, i64 -60548>
  %580 = mul nsw <2 x i64> %577, <i64 -60548, i64 -60548>
  %581 = shl <2 x i64> %570, <i64 32, i64 32>
  %582 = ashr exact <2 x i64> %581, <i64 32, i64 32>
  %583 = mul nsw <2 x i64> %582, <i64 -60548, i64 -60548>
  %584 = shl <2 x i64> %572, <i64 32, i64 32>
  %585 = ashr exact <2 x i64> %584, <i64 32, i64 32>
  %586 = mul nsw <2 x i64> %585, <i64 -60548, i64 -60548>
  %587 = mul nsw <2 x i64> %582, <i64 -25080, i64 -25080>
  %588 = add nsw <2 x i64> %587, <i64 32768, i64 32768>
  %589 = add nsw <2 x i64> %588, %579
  %590 = bitcast <2 x i64> %589 to <16 x i8>
  %591 = shufflevector <16 x i8> %590, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %592 = mul nsw <2 x i64> %585, <i64 -25080, i64 -25080>
  %593 = add nsw <2 x i64> %592, <i64 32768, i64 32768>
  %594 = add nsw <2 x i64> %593, %580
  %595 = bitcast <2 x i64> %594 to <16 x i8>
  %596 = shufflevector <16 x i8> %595, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %597 = add nsw <2 x i64> %583, <i64 32768, i64 32768>
  %598 = add nsw <2 x i64> %597, %575
  %599 = bitcast <2 x i64> %598 to <16 x i8>
  %600 = shufflevector <16 x i8> %599, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %601 = add nsw <2 x i64> %586, <i64 32768, i64 32768>
  %602 = add nsw <2 x i64> %601, %578
  %603 = bitcast <2 x i64> %602 to <16 x i8>
  %604 = shufflevector <16 x i8> %603, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %605 = bitcast <16 x i8> %591 to <4 x i32>
  %606 = bitcast <16 x i8> %596 to <4 x i32>
  %607 = shufflevector <4 x i32> %605, <4 x i32> %606, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %608 = shufflevector <4 x i32> %605, <4 x i32> %606, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %609 = shufflevector <4 x i32> %607, <4 x i32> %608, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %610 = bitcast <16 x i8> %600 to <4 x i32>
  %611 = bitcast <16 x i8> %604 to <4 x i32>
  %612 = shufflevector <4 x i32> %610, <4 x i32> %611, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %613 = shufflevector <4 x i32> %610, <4 x i32> %611, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %614 = shufflevector <4 x i32> %612, <4 x i32> %613, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %615 = add <4 x i32> %512, %507
  %616 = add <4 x i32> %609, %559
  %617 = sub <4 x i32> %559, %609
  %618 = sub <4 x i32> %507, %512
  %619 = sub <4 x i32> %510, %513
  %620 = sub <4 x i32> %564, %614
  %621 = add <4 x i32> %614, %564
  %622 = add <4 x i32> %513, %510
  %623 = shufflevector <4 x i32> %620, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %624 = bitcast <4 x i32> %623 to <2 x i64>
  %625 = shufflevector <4 x i32> %620, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %626 = bitcast <4 x i32> %625 to <2 x i64>
  %627 = shufflevector <4 x i32> %617, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %628 = bitcast <4 x i32> %627 to <2 x i64>
  %629 = shufflevector <4 x i32> %617, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %630 = bitcast <4 x i32> %629 to <2 x i64>
  %631 = shl <2 x i64> %624, <i64 32, i64 32>
  %632 = ashr exact <2 x i64> %631, <i64 32, i64 32>
  %633 = mul nsw <2 x i64> %632, <i64 46340, i64 46340>
  %634 = shl <2 x i64> %626, <i64 32, i64 32>
  %635 = ashr exact <2 x i64> %634, <i64 32, i64 32>
  %636 = mul nsw <2 x i64> %635, <i64 46340, i64 46340>
  %637 = shl <2 x i64> %628, <i64 32, i64 32>
  %638 = ashr exact <2 x i64> %637, <i64 32, i64 32>
  %639 = mul nsw <2 x i64> %638, <i64 46340, i64 46340>
  %640 = shl <2 x i64> %630, <i64 32, i64 32>
  %641 = ashr exact <2 x i64> %640, <i64 32, i64 32>
  %642 = mul nsw <2 x i64> %641, <i64 46340, i64 46340>
  %643 = add nsw <2 x i64> %633, <i64 32768, i64 32768>
  %644 = sub nsw <2 x i64> %643, %639
  %645 = bitcast <2 x i64> %644 to <16 x i8>
  %646 = shufflevector <16 x i8> %645, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %647 = add nsw <2 x i64> %636, <i64 32768, i64 32768>
  %648 = sub nsw <2 x i64> %647, %642
  %649 = bitcast <2 x i64> %648 to <16 x i8>
  %650 = shufflevector <16 x i8> %649, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %651 = add nsw <2 x i64> %643, %639
  %652 = bitcast <2 x i64> %651 to <16 x i8>
  %653 = shufflevector <16 x i8> %652, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %654 = add nsw <2 x i64> %647, %642
  %655 = bitcast <2 x i64> %654 to <16 x i8>
  %656 = shufflevector <16 x i8> %655, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %657 = bitcast <16 x i8> %646 to <4 x i32>
  %658 = bitcast <16 x i8> %650 to <4 x i32>
  %659 = shufflevector <4 x i32> %657, <4 x i32> %658, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %660 = shufflevector <4 x i32> %657, <4 x i32> %658, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %661 = shufflevector <4 x i32> %659, <4 x i32> %660, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %662 = bitcast <16 x i8> %653 to <4 x i32>
  %663 = bitcast <16 x i8> %656 to <4 x i32>
  %664 = shufflevector <4 x i32> %662, <4 x i32> %663, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %665 = shufflevector <4 x i32> %662, <4 x i32> %663, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %666 = shufflevector <4 x i32> %664, <4 x i32> %665, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %667 = shufflevector <4 x i32> %619, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %668 = bitcast <4 x i32> %667 to <2 x i64>
  %669 = shufflevector <4 x i32> %619, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %670 = bitcast <4 x i32> %669 to <2 x i64>
  %671 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %672 = bitcast <4 x i32> %671 to <2 x i64>
  %673 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %674 = bitcast <4 x i32> %673 to <2 x i64>
  %675 = shl <2 x i64> %668, <i64 32, i64 32>
  %676 = ashr exact <2 x i64> %675, <i64 32, i64 32>
  %677 = mul nsw <2 x i64> %676, <i64 46340, i64 46340>
  %678 = shl <2 x i64> %670, <i64 32, i64 32>
  %679 = ashr exact <2 x i64> %678, <i64 32, i64 32>
  %680 = mul nsw <2 x i64> %679, <i64 46340, i64 46340>
  %681 = shl <2 x i64> %672, <i64 32, i64 32>
  %682 = ashr exact <2 x i64> %681, <i64 32, i64 32>
  %683 = mul nsw <2 x i64> %682, <i64 46340, i64 46340>
  %684 = shl <2 x i64> %674, <i64 32, i64 32>
  %685 = ashr exact <2 x i64> %684, <i64 32, i64 32>
  %686 = mul nsw <2 x i64> %685, <i64 46340, i64 46340>
  %687 = add nsw <2 x i64> %677, <i64 32768, i64 32768>
  %688 = sub nsw <2 x i64> %687, %683
  %689 = bitcast <2 x i64> %688 to <16 x i8>
  %690 = shufflevector <16 x i8> %689, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %691 = add nsw <2 x i64> %680, <i64 32768, i64 32768>
  %692 = sub nsw <2 x i64> %691, %686
  %693 = bitcast <2 x i64> %692 to <16 x i8>
  %694 = shufflevector <16 x i8> %693, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %695 = add nsw <2 x i64> %687, %683
  %696 = bitcast <2 x i64> %695 to <16 x i8>
  %697 = shufflevector <16 x i8> %696, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %698 = add nsw <2 x i64> %691, %686
  %699 = bitcast <2 x i64> %698 to <16 x i8>
  %700 = shufflevector <16 x i8> %699, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %701 = bitcast <16 x i8> %690 to <4 x i32>
  %702 = bitcast <16 x i8> %694 to <4 x i32>
  %703 = shufflevector <4 x i32> %701, <4 x i32> %702, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %704 = shufflevector <4 x i32> %701, <4 x i32> %702, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %705 = shufflevector <4 x i32> %703, <4 x i32> %704, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %706 = bitcast <16 x i8> %697 to <4 x i32>
  %707 = bitcast <16 x i8> %700 to <4 x i32>
  %708 = shufflevector <4 x i32> %706, <4 x i32> %707, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %709 = shufflevector <4 x i32> %706, <4 x i32> %707, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %710 = shufflevector <4 x i32> %708, <4 x i32> %709, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %711 = add <4 x i32> %622, %275
  %712 = bitcast [32 x <2 x i64>]* %3 to <4 x i32>*
  store <4 x i32> %711, <4 x i32>* %712, align 16
  %713 = sub <4 x i32> %275, %622
  %714 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 15
  %715 = bitcast <2 x i64>* %714 to <4 x i32>*
  store <4 x i32> %713, <4 x i32>* %715, align 16
  %716 = add <4 x i32> %621, %276
  %717 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 1
  %718 = bitcast <2 x i64>* %717 to <4 x i32>*
  store <4 x i32> %716, <4 x i32>* %718, align 16
  %719 = sub <4 x i32> %276, %621
  %720 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 14
  %721 = bitcast <2 x i64>* %720 to <4 x i32>*
  store <4 x i32> %719, <4 x i32>* %721, align 16
  %722 = add <4 x i32> %666, %277
  %723 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 2
  %724 = bitcast <2 x i64>* %723 to <4 x i32>*
  store <4 x i32> %722, <4 x i32>* %724, align 16
  %725 = sub <4 x i32> %277, %666
  %726 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 13
  %727 = bitcast <2 x i64>* %726 to <4 x i32>*
  store <4 x i32> %725, <4 x i32>* %727, align 16
  %728 = add <4 x i32> %710, %278
  %729 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 3
  %730 = bitcast <2 x i64>* %729 to <4 x i32>*
  store <4 x i32> %728, <4 x i32>* %730, align 16
  %731 = sub <4 x i32> %278, %710
  %732 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 12
  %733 = bitcast <2 x i64>* %732 to <4 x i32>*
  store <4 x i32> %731, <4 x i32>* %733, align 16
  %734 = add <4 x i32> %705, %279
  %735 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 4
  %736 = bitcast <2 x i64>* %735 to <4 x i32>*
  store <4 x i32> %734, <4 x i32>* %736, align 16
  %737 = sub <4 x i32> %279, %705
  %738 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 11
  %739 = bitcast <2 x i64>* %738 to <4 x i32>*
  store <4 x i32> %737, <4 x i32>* %739, align 16
  %740 = add <4 x i32> %661, %280
  %741 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 5
  %742 = bitcast <2 x i64>* %741 to <4 x i32>*
  store <4 x i32> %740, <4 x i32>* %742, align 16
  %743 = sub <4 x i32> %280, %661
  %744 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 10
  %745 = bitcast <2 x i64>* %744 to <4 x i32>*
  store <4 x i32> %743, <4 x i32>* %745, align 16
  %746 = add <4 x i32> %616, %281
  %747 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 6
  %748 = bitcast <2 x i64>* %747 to <4 x i32>*
  store <4 x i32> %746, <4 x i32>* %748, align 16
  %749 = sub <4 x i32> %281, %616
  %750 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 9
  %751 = bitcast <2 x i64>* %750 to <4 x i32>*
  store <4 x i32> %749, <4 x i32>* %751, align 16
  %752 = add <4 x i32> %615, %282
  %753 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 7
  %754 = bitcast <2 x i64>* %753 to <4 x i32>*
  store <4 x i32> %752, <4 x i32>* %754, align 16
  %755 = sub <4 x i32> %282, %615
  %756 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 8
  %757 = bitcast <2 x i64>* %756 to <4 x i32>*
  store <4 x i32> %755, <4 x i32>* %757, align 16
  %758 = bitcast [32 x <2 x i64>]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %758) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %758, i8 -86, i64 496, i1 false) #6
  %759 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %760 = bitcast <2 x i64>* %759 to <4 x i32>*
  %761 = load <4 x i32>, <4 x i32>* %760, align 16
  %762 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 31
  %763 = bitcast <2 x i64>* %762 to <4 x i32>*
  %764 = load <4 x i32>, <4 x i32>* %763, align 16
  %765 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 16
  %766 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 31
  %767 = shufflevector <4 x i32> %761, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %768 = bitcast <4 x i32> %767 to <2 x i64>
  %769 = shufflevector <4 x i32> %761, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %770 = bitcast <4 x i32> %769 to <2 x i64>
  %771 = shufflevector <4 x i32> %764, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %772 = bitcast <4 x i32> %771 to <2 x i64>
  %773 = shufflevector <4 x i32> %764, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %774 = bitcast <4 x i32> %773 to <2 x i64>
  %775 = shl <2 x i64> %768, <i64 32, i64 32>
  %776 = ashr exact <2 x i64> %775, <i64 32, i64 32>
  %777 = mul nsw <2 x i64> %776, <i64 65456, i64 65456>
  %778 = shl <2 x i64> %770, <i64 32, i64 32>
  %779 = ashr exact <2 x i64> %778, <i64 32, i64 32>
  %780 = mul nsw <2 x i64> %779, <i64 65456, i64 65456>
  %781 = mul nsw <2 x i64> %776, <i64 3216, i64 3216>
  %782 = mul nsw <2 x i64> %779, <i64 3216, i64 3216>
  %783 = shl <2 x i64> %772, <i64 32, i64 32>
  %784 = ashr exact <2 x i64> %783, <i64 32, i64 32>
  %785 = mul nsw <2 x i64> %784, <i64 3216, i64 3216>
  %786 = shl <2 x i64> %774, <i64 32, i64 32>
  %787 = ashr exact <2 x i64> %786, <i64 32, i64 32>
  %788 = mul nsw <2 x i64> %787, <i64 3216, i64 3216>
  %789 = add nsw <2 x i64> %781, <i64 32768, i64 32768>
  %790 = mul nsw <2 x i64> %784, <i64 -65456, i64 -65456>
  %791 = add nsw <2 x i64> %789, %790
  %792 = bitcast <2 x i64> %791 to <16 x i8>
  %793 = shufflevector <16 x i8> %792, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %794 = add nsw <2 x i64> %782, <i64 32768, i64 32768>
  %795 = mul nsw <2 x i64> %787, <i64 -65456, i64 -65456>
  %796 = add nsw <2 x i64> %794, %795
  %797 = bitcast <2 x i64> %796 to <16 x i8>
  %798 = shufflevector <16 x i8> %797, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %799 = add nsw <2 x i64> %777, <i64 32768, i64 32768>
  %800 = add nsw <2 x i64> %799, %785
  %801 = bitcast <2 x i64> %800 to <16 x i8>
  %802 = shufflevector <16 x i8> %801, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %803 = add nsw <2 x i64> %780, <i64 32768, i64 32768>
  %804 = add nsw <2 x i64> %803, %788
  %805 = bitcast <2 x i64> %804 to <16 x i8>
  %806 = shufflevector <16 x i8> %805, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %807 = bitcast <16 x i8> %793 to <4 x i32>
  %808 = bitcast <16 x i8> %798 to <4 x i32>
  %809 = shufflevector <4 x i32> %807, <4 x i32> %808, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %810 = shufflevector <4 x i32> %807, <4 x i32> %808, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %811 = shufflevector <4 x i32> %809, <4 x i32> %810, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %812 = bitcast <2 x i64>* %765 to <4 x i32>*
  store <4 x i32> %811, <4 x i32>* %812, align 16
  %813 = bitcast <16 x i8> %802 to <4 x i32>
  %814 = bitcast <16 x i8> %806 to <4 x i32>
  %815 = shufflevector <4 x i32> %813, <4 x i32> %814, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %816 = shufflevector <4 x i32> %813, <4 x i32> %814, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %817 = shufflevector <4 x i32> %815, <4 x i32> %816, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %818 = bitcast <2 x i64>* %766 to <4 x i32>*
  store <4 x i32> %817, <4 x i32>* %818, align 16
  %819 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 17
  %820 = bitcast <2 x i64>* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 16
  %822 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %823 = bitcast <2 x i64>* %822 to <4 x i32>*
  %824 = load <4 x i32>, <4 x i32>* %823, align 16
  %825 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 17
  %826 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 30
  %827 = shufflevector <4 x i32> %821, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %828 = bitcast <4 x i32> %827 to <2 x i64>
  %829 = shufflevector <4 x i32> %821, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %830 = bitcast <4 x i32> %829 to <2 x i64>
  %831 = shufflevector <4 x i32> %824, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %832 = bitcast <4 x i32> %831 to <2 x i64>
  %833 = shufflevector <4 x i32> %824, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %834 = bitcast <4 x i32> %833 to <2 x i64>
  %835 = shl <2 x i64> %828, <i64 32, i64 32>
  %836 = ashr exact <2 x i64> %835, <i64 32, i64 32>
  %837 = mul nsw <2 x i64> %836, <i64 44012, i64 44012>
  %838 = shl <2 x i64> %830, <i64 32, i64 32>
  %839 = ashr exact <2 x i64> %838, <i64 32, i64 32>
  %840 = mul nsw <2 x i64> %839, <i64 44012, i64 44012>
  %841 = mul nsw <2 x i64> %836, <i64 48560, i64 48560>
  %842 = mul nsw <2 x i64> %839, <i64 48560, i64 48560>
  %843 = shl <2 x i64> %832, <i64 32, i64 32>
  %844 = ashr exact <2 x i64> %843, <i64 32, i64 32>
  %845 = mul nsw <2 x i64> %844, <i64 48560, i64 48560>
  %846 = shl <2 x i64> %834, <i64 32, i64 32>
  %847 = ashr exact <2 x i64> %846, <i64 32, i64 32>
  %848 = mul nsw <2 x i64> %847, <i64 48560, i64 48560>
  %849 = add nsw <2 x i64> %841, <i64 32768, i64 32768>
  %850 = mul nsw <2 x i64> %844, <i64 -44012, i64 -44012>
  %851 = add nsw <2 x i64> %849, %850
  %852 = bitcast <2 x i64> %851 to <16 x i8>
  %853 = shufflevector <16 x i8> %852, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %854 = add nsw <2 x i64> %842, <i64 32768, i64 32768>
  %855 = mul nsw <2 x i64> %847, <i64 -44012, i64 -44012>
  %856 = add nsw <2 x i64> %854, %855
  %857 = bitcast <2 x i64> %856 to <16 x i8>
  %858 = shufflevector <16 x i8> %857, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %859 = add nsw <2 x i64> %837, <i64 32768, i64 32768>
  %860 = add nsw <2 x i64> %859, %845
  %861 = bitcast <2 x i64> %860 to <16 x i8>
  %862 = shufflevector <16 x i8> %861, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %863 = add nsw <2 x i64> %840, <i64 32768, i64 32768>
  %864 = add nsw <2 x i64> %863, %848
  %865 = bitcast <2 x i64> %864 to <16 x i8>
  %866 = shufflevector <16 x i8> %865, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %867 = bitcast <16 x i8> %853 to <4 x i32>
  %868 = bitcast <16 x i8> %858 to <4 x i32>
  %869 = shufflevector <4 x i32> %867, <4 x i32> %868, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %870 = shufflevector <4 x i32> %867, <4 x i32> %868, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %871 = shufflevector <4 x i32> %869, <4 x i32> %870, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %872 = bitcast <2 x i64>* %825 to <4 x i32>*
  store <4 x i32> %871, <4 x i32>* %872, align 16
  %873 = bitcast <16 x i8> %862 to <4 x i32>
  %874 = bitcast <16 x i8> %866 to <4 x i32>
  %875 = shufflevector <4 x i32> %873, <4 x i32> %874, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %876 = shufflevector <4 x i32> %873, <4 x i32> %874, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %877 = shufflevector <4 x i32> %875, <4 x i32> %876, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %878 = bitcast <2 x i64>* %826 to <4 x i32>*
  store <4 x i32> %877, <4 x i32>* %878, align 16
  %879 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %880 = bitcast <2 x i64>* %879 to <4 x i32>*
  %881 = load <4 x i32>, <4 x i32>* %880, align 16
  %882 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 23
  %883 = bitcast <2 x i64>* %882 to <4 x i32>*
  %884 = load <4 x i32>, <4 x i32>* %883, align 16
  %885 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 18
  %886 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 29
  %887 = shufflevector <4 x i32> %881, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %888 = bitcast <4 x i32> %887 to <2 x i64>
  %889 = shufflevector <4 x i32> %881, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %890 = bitcast <4 x i32> %889 to <2 x i64>
  %891 = shufflevector <4 x i32> %884, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %892 = bitcast <4 x i32> %891 to <2 x i64>
  %893 = shufflevector <4 x i32> %884, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %894 = bitcast <4 x i32> %893 to <2 x i64>
  %895 = shl <2 x i64> %888, <i64 32, i64 32>
  %896 = ashr exact <2 x i64> %895, <i64 32, i64 32>
  %897 = mul nsw <2 x i64> %896, <i64 59244, i64 59244>
  %898 = shl <2 x i64> %890, <i64 32, i64 32>
  %899 = ashr exact <2 x i64> %898, <i64 32, i64 32>
  %900 = mul nsw <2 x i64> %899, <i64 59244, i64 59244>
  %901 = mul nsw <2 x i64> %896, <i64 28020, i64 28020>
  %902 = mul nsw <2 x i64> %899, <i64 28020, i64 28020>
  %903 = shl <2 x i64> %892, <i64 32, i64 32>
  %904 = ashr exact <2 x i64> %903, <i64 32, i64 32>
  %905 = mul nsw <2 x i64> %904, <i64 28020, i64 28020>
  %906 = shl <2 x i64> %894, <i64 32, i64 32>
  %907 = ashr exact <2 x i64> %906, <i64 32, i64 32>
  %908 = mul nsw <2 x i64> %907, <i64 28020, i64 28020>
  %909 = add nsw <2 x i64> %901, <i64 32768, i64 32768>
  %910 = mul nsw <2 x i64> %904, <i64 -59244, i64 -59244>
  %911 = add nsw <2 x i64> %909, %910
  %912 = bitcast <2 x i64> %911 to <16 x i8>
  %913 = shufflevector <16 x i8> %912, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %914 = add nsw <2 x i64> %902, <i64 32768, i64 32768>
  %915 = mul nsw <2 x i64> %907, <i64 -59244, i64 -59244>
  %916 = add nsw <2 x i64> %914, %915
  %917 = bitcast <2 x i64> %916 to <16 x i8>
  %918 = shufflevector <16 x i8> %917, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %919 = add nsw <2 x i64> %897, <i64 32768, i64 32768>
  %920 = add nsw <2 x i64> %919, %905
  %921 = bitcast <2 x i64> %920 to <16 x i8>
  %922 = shufflevector <16 x i8> %921, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %923 = add nsw <2 x i64> %900, <i64 32768, i64 32768>
  %924 = add nsw <2 x i64> %923, %908
  %925 = bitcast <2 x i64> %924 to <16 x i8>
  %926 = shufflevector <16 x i8> %925, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %927 = bitcast <16 x i8> %913 to <4 x i32>
  %928 = bitcast <16 x i8> %918 to <4 x i32>
  %929 = shufflevector <4 x i32> %927, <4 x i32> %928, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %930 = shufflevector <4 x i32> %927, <4 x i32> %928, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %931 = shufflevector <4 x i32> %929, <4 x i32> %930, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %932 = bitcast <2 x i64>* %885 to <4 x i32>*
  store <4 x i32> %931, <4 x i32>* %932, align 16
  %933 = bitcast <16 x i8> %922 to <4 x i32>
  %934 = bitcast <16 x i8> %926 to <4 x i32>
  %935 = shufflevector <4 x i32> %933, <4 x i32> %934, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %936 = shufflevector <4 x i32> %933, <4 x i32> %934, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %937 = shufflevector <4 x i32> %935, <4 x i32> %936, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %938 = bitcast <2 x i64>* %886 to <4 x i32>*
  store <4 x i32> %937, <4 x i32>* %938, align 16
  %939 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 25
  %940 = bitcast <2 x i64>* %939 to <4 x i32>*
  %941 = load <4 x i32>, <4 x i32>* %940, align 16
  %942 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %943 = bitcast <2 x i64>* %942 to <4 x i32>*
  %944 = load <4 x i32>, <4 x i32>* %943, align 16
  %945 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 19
  %946 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 28
  %947 = shufflevector <4 x i32> %941, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %948 = bitcast <4 x i32> %947 to <2 x i64>
  %949 = shufflevector <4 x i32> %941, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %950 = bitcast <4 x i32> %949 to <2 x i64>
  %951 = shufflevector <4 x i32> %944, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %952 = bitcast <4 x i32> %951 to <2 x i64>
  %953 = shufflevector <4 x i32> %944, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %954 = bitcast <4 x i32> %953 to <2 x i64>
  %955 = shl <2 x i64> %948, <i64 32, i64 32>
  %956 = ashr exact <2 x i64> %955, <i64 32, i64 32>
  %957 = mul nsw <2 x i64> %956, <i64 22080, i64 22080>
  %958 = shl <2 x i64> %950, <i64 32, i64 32>
  %959 = ashr exact <2 x i64> %958, <i64 32, i64 32>
  %960 = mul nsw <2 x i64> %959, <i64 22080, i64 22080>
  %961 = mul nsw <2 x i64> %956, <i64 61704, i64 61704>
  %962 = mul nsw <2 x i64> %959, <i64 61704, i64 61704>
  %963 = shl <2 x i64> %952, <i64 32, i64 32>
  %964 = ashr exact <2 x i64> %963, <i64 32, i64 32>
  %965 = mul nsw <2 x i64> %964, <i64 61704, i64 61704>
  %966 = shl <2 x i64> %954, <i64 32, i64 32>
  %967 = ashr exact <2 x i64> %966, <i64 32, i64 32>
  %968 = mul nsw <2 x i64> %967, <i64 61704, i64 61704>
  %969 = add nsw <2 x i64> %961, <i64 32768, i64 32768>
  %970 = mul nsw <2 x i64> %964, <i64 -22080, i64 -22080>
  %971 = add nsw <2 x i64> %969, %970
  %972 = bitcast <2 x i64> %971 to <16 x i8>
  %973 = shufflevector <16 x i8> %972, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %974 = add nsw <2 x i64> %962, <i64 32768, i64 32768>
  %975 = mul nsw <2 x i64> %967, <i64 -22080, i64 -22080>
  %976 = add nsw <2 x i64> %974, %975
  %977 = bitcast <2 x i64> %976 to <16 x i8>
  %978 = shufflevector <16 x i8> %977, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %979 = add nsw <2 x i64> %957, <i64 32768, i64 32768>
  %980 = add nsw <2 x i64> %979, %965
  %981 = bitcast <2 x i64> %980 to <16 x i8>
  %982 = shufflevector <16 x i8> %981, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %983 = add nsw <2 x i64> %960, <i64 32768, i64 32768>
  %984 = add nsw <2 x i64> %983, %968
  %985 = bitcast <2 x i64> %984 to <16 x i8>
  %986 = shufflevector <16 x i8> %985, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %987 = bitcast <16 x i8> %973 to <4 x i32>
  %988 = bitcast <16 x i8> %978 to <4 x i32>
  %989 = shufflevector <4 x i32> %987, <4 x i32> %988, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %990 = shufflevector <4 x i32> %987, <4 x i32> %988, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %991 = shufflevector <4 x i32> %989, <4 x i32> %990, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %992 = bitcast <2 x i64>* %945 to <4 x i32>*
  store <4 x i32> %991, <4 x i32>* %992, align 16
  %993 = bitcast <16 x i8> %982 to <4 x i32>
  %994 = bitcast <16 x i8> %986 to <4 x i32>
  %995 = shufflevector <4 x i32> %993, <4 x i32> %994, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %996 = shufflevector <4 x i32> %993, <4 x i32> %994, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %997 = shufflevector <4 x i32> %995, <4 x i32> %996, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %998 = bitcast <2 x i64>* %946 to <4 x i32>*
  store <4 x i32> %997, <4 x i32>* %998, align 16
  %999 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %1000 = bitcast <2 x i64>* %999 to <4 x i32>*
  %1001 = load <4 x i32>, <4 x i32>* %1000, align 16
  %1002 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 27
  %1003 = bitcast <2 x i64>* %1002 to <4 x i32>*
  %1004 = load <4 x i32>, <4 x i32>* %1003, align 16
  %1005 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 20
  %1006 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 27
  %1007 = shufflevector <4 x i32> %1001, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1008 = bitcast <4 x i32> %1007 to <2 x i64>
  %1009 = shufflevector <4 x i32> %1001, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1010 = bitcast <4 x i32> %1009 to <2 x i64>
  %1011 = shufflevector <4 x i32> %1004, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1012 = bitcast <4 x i32> %1011 to <2 x i64>
  %1013 = shufflevector <4 x i32> %1004, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1014 = bitcast <4 x i32> %1013 to <2 x i64>
  %1015 = shl <2 x i64> %1008, <i64 32, i64 32>
  %1016 = ashr exact <2 x i64> %1015, <i64 32, i64 32>
  %1017 = mul nsw <2 x i64> %1016, <i64 63572, i64 63572>
  %1018 = shl <2 x i64> %1010, <i64 32, i64 32>
  %1019 = ashr exact <2 x i64> %1018, <i64 32, i64 32>
  %1020 = mul nsw <2 x i64> %1019, <i64 63572, i64 63572>
  %1021 = mul nsw <2 x i64> %1016, <i64 15924, i64 15924>
  %1022 = mul nsw <2 x i64> %1019, <i64 15924, i64 15924>
  %1023 = shl <2 x i64> %1012, <i64 32, i64 32>
  %1024 = ashr exact <2 x i64> %1023, <i64 32, i64 32>
  %1025 = mul nsw <2 x i64> %1024, <i64 15924, i64 15924>
  %1026 = shl <2 x i64> %1014, <i64 32, i64 32>
  %1027 = ashr exact <2 x i64> %1026, <i64 32, i64 32>
  %1028 = mul nsw <2 x i64> %1027, <i64 15924, i64 15924>
  %1029 = add nsw <2 x i64> %1021, <i64 32768, i64 32768>
  %1030 = mul nsw <2 x i64> %1024, <i64 -63572, i64 -63572>
  %1031 = add nsw <2 x i64> %1029, %1030
  %1032 = bitcast <2 x i64> %1031 to <16 x i8>
  %1033 = shufflevector <16 x i8> %1032, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1034 = add nsw <2 x i64> %1022, <i64 32768, i64 32768>
  %1035 = mul nsw <2 x i64> %1027, <i64 -63572, i64 -63572>
  %1036 = add nsw <2 x i64> %1034, %1035
  %1037 = bitcast <2 x i64> %1036 to <16 x i8>
  %1038 = shufflevector <16 x i8> %1037, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1039 = add nsw <2 x i64> %1017, <i64 32768, i64 32768>
  %1040 = add nsw <2 x i64> %1039, %1025
  %1041 = bitcast <2 x i64> %1040 to <16 x i8>
  %1042 = shufflevector <16 x i8> %1041, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1043 = add nsw <2 x i64> %1020, <i64 32768, i64 32768>
  %1044 = add nsw <2 x i64> %1043, %1028
  %1045 = bitcast <2 x i64> %1044 to <16 x i8>
  %1046 = shufflevector <16 x i8> %1045, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1047 = bitcast <16 x i8> %1033 to <4 x i32>
  %1048 = bitcast <16 x i8> %1038 to <4 x i32>
  %1049 = shufflevector <4 x i32> %1047, <4 x i32> %1048, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1050 = shufflevector <4 x i32> %1047, <4 x i32> %1048, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1051 = shufflevector <4 x i32> %1049, <4 x i32> %1050, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1052 = bitcast <2 x i64>* %1005 to <4 x i32>*
  store <4 x i32> %1051, <4 x i32>* %1052, align 16
  %1053 = bitcast <16 x i8> %1042 to <4 x i32>
  %1054 = bitcast <16 x i8> %1046 to <4 x i32>
  %1055 = shufflevector <4 x i32> %1053, <4 x i32> %1054, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1056 = shufflevector <4 x i32> %1053, <4 x i32> %1054, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1057 = shufflevector <4 x i32> %1055, <4 x i32> %1056, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1058 = bitcast <2 x i64>* %1006 to <4 x i32>*
  store <4 x i32> %1057, <4 x i32>* %1058, align 16
  %1059 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 21
  %1060 = bitcast <2 x i64>* %1059 to <4 x i32>*
  %1061 = load <4 x i32>, <4 x i32>* %1060, align 16
  %1062 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %1063 = bitcast <2 x i64>* %1062 to <4 x i32>*
  %1064 = load <4 x i32>, <4 x i32>* %1063, align 16
  %1065 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 21
  %1066 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 26
  %1067 = shufflevector <4 x i32> %1061, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1068 = bitcast <4 x i32> %1067 to <2 x i64>
  %1069 = shufflevector <4 x i32> %1061, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1070 = bitcast <4 x i32> %1069 to <2 x i64>
  %1071 = shufflevector <4 x i32> %1064, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1072 = bitcast <4 x i32> %1071 to <2 x i64>
  %1073 = shufflevector <4 x i32> %1064, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1074 = bitcast <4 x i32> %1073 to <2 x i64>
  %1075 = shl <2 x i64> %1068, <i64 32, i64 32>
  %1076 = ashr exact <2 x i64> %1075, <i64 32, i64 32>
  %1077 = mul nsw <2 x i64> %1076, <i64 33692, i64 33692>
  %1078 = shl <2 x i64> %1070, <i64 32, i64 32>
  %1079 = ashr exact <2 x i64> %1078, <i64 32, i64 32>
  %1080 = mul nsw <2 x i64> %1079, <i64 33692, i64 33692>
  %1081 = mul nsw <2 x i64> %1076, <i64 56212, i64 56212>
  %1082 = mul nsw <2 x i64> %1079, <i64 56212, i64 56212>
  %1083 = shl <2 x i64> %1072, <i64 32, i64 32>
  %1084 = ashr exact <2 x i64> %1083, <i64 32, i64 32>
  %1085 = mul nsw <2 x i64> %1084, <i64 56212, i64 56212>
  %1086 = shl <2 x i64> %1074, <i64 32, i64 32>
  %1087 = ashr exact <2 x i64> %1086, <i64 32, i64 32>
  %1088 = mul nsw <2 x i64> %1087, <i64 56212, i64 56212>
  %1089 = add nsw <2 x i64> %1081, <i64 32768, i64 32768>
  %1090 = mul nsw <2 x i64> %1084, <i64 -33692, i64 -33692>
  %1091 = add nsw <2 x i64> %1089, %1090
  %1092 = bitcast <2 x i64> %1091 to <16 x i8>
  %1093 = shufflevector <16 x i8> %1092, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1094 = add nsw <2 x i64> %1082, <i64 32768, i64 32768>
  %1095 = mul nsw <2 x i64> %1087, <i64 -33692, i64 -33692>
  %1096 = add nsw <2 x i64> %1094, %1095
  %1097 = bitcast <2 x i64> %1096 to <16 x i8>
  %1098 = shufflevector <16 x i8> %1097, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1099 = add nsw <2 x i64> %1077, <i64 32768, i64 32768>
  %1100 = add nsw <2 x i64> %1099, %1085
  %1101 = bitcast <2 x i64> %1100 to <16 x i8>
  %1102 = shufflevector <16 x i8> %1101, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1103 = add nsw <2 x i64> %1080, <i64 32768, i64 32768>
  %1104 = add nsw <2 x i64> %1103, %1088
  %1105 = bitcast <2 x i64> %1104 to <16 x i8>
  %1106 = shufflevector <16 x i8> %1105, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1107 = bitcast <16 x i8> %1093 to <4 x i32>
  %1108 = bitcast <16 x i8> %1098 to <4 x i32>
  %1109 = shufflevector <4 x i32> %1107, <4 x i32> %1108, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1110 = shufflevector <4 x i32> %1107, <4 x i32> %1108, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1111 = shufflevector <4 x i32> %1109, <4 x i32> %1110, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1112 = bitcast <2 x i64>* %1065 to <4 x i32>*
  store <4 x i32> %1111, <4 x i32>* %1112, align 16
  %1113 = bitcast <16 x i8> %1102 to <4 x i32>
  %1114 = bitcast <16 x i8> %1106 to <4 x i32>
  %1115 = shufflevector <4 x i32> %1113, <4 x i32> %1114, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1116 = shufflevector <4 x i32> %1113, <4 x i32> %1114, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1117 = shufflevector <4 x i32> %1115, <4 x i32> %1116, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1118 = bitcast <2 x i64>* %1066 to <4 x i32>*
  store <4 x i32> %1117, <4 x i32>* %1118, align 16
  %1119 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %1120 = bitcast <2 x i64>* %1119 to <4 x i32>*
  %1121 = load <4 x i32>, <4 x i32>* %1120, align 16
  %1122 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 19
  %1123 = bitcast <2 x i64>* %1122 to <4 x i32>*
  %1124 = load <4 x i32>, <4 x i32>* %1123, align 16
  %1125 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 22
  %1126 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 25
  %1127 = shufflevector <4 x i32> %1121, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1128 = bitcast <4 x i32> %1127 to <2 x i64>
  %1129 = shufflevector <4 x i32> %1121, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1130 = bitcast <4 x i32> %1129 to <2 x i64>
  %1131 = shufflevector <4 x i32> %1124, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1132 = bitcast <4 x i32> %1131 to <2 x i64>
  %1133 = shufflevector <4 x i32> %1124, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1134 = bitcast <4 x i32> %1133 to <2 x i64>
  %1135 = shl <2 x i64> %1128, <i64 32, i64 32>
  %1136 = ashr exact <2 x i64> %1135, <i64 32, i64 32>
  %1137 = mul nsw <2 x i64> %1136, <i64 52640, i64 52640>
  %1138 = shl <2 x i64> %1130, <i64 32, i64 32>
  %1139 = ashr exact <2 x i64> %1138, <i64 32, i64 32>
  %1140 = mul nsw <2 x i64> %1139, <i64 52640, i64 52640>
  %1141 = mul nsw <2 x i64> %1136, <i64 39040, i64 39040>
  %1142 = mul nsw <2 x i64> %1139, <i64 39040, i64 39040>
  %1143 = shl <2 x i64> %1132, <i64 32, i64 32>
  %1144 = ashr exact <2 x i64> %1143, <i64 32, i64 32>
  %1145 = mul nsw <2 x i64> %1144, <i64 39040, i64 39040>
  %1146 = shl <2 x i64> %1134, <i64 32, i64 32>
  %1147 = ashr exact <2 x i64> %1146, <i64 32, i64 32>
  %1148 = mul nsw <2 x i64> %1147, <i64 39040, i64 39040>
  %1149 = add nsw <2 x i64> %1141, <i64 32768, i64 32768>
  %1150 = mul nsw <2 x i64> %1144, <i64 -52640, i64 -52640>
  %1151 = add nsw <2 x i64> %1149, %1150
  %1152 = bitcast <2 x i64> %1151 to <16 x i8>
  %1153 = shufflevector <16 x i8> %1152, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1154 = add nsw <2 x i64> %1142, <i64 32768, i64 32768>
  %1155 = mul nsw <2 x i64> %1147, <i64 -52640, i64 -52640>
  %1156 = add nsw <2 x i64> %1154, %1155
  %1157 = bitcast <2 x i64> %1156 to <16 x i8>
  %1158 = shufflevector <16 x i8> %1157, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1159 = add nsw <2 x i64> %1137, <i64 32768, i64 32768>
  %1160 = add nsw <2 x i64> %1159, %1145
  %1161 = bitcast <2 x i64> %1160 to <16 x i8>
  %1162 = shufflevector <16 x i8> %1161, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1163 = add nsw <2 x i64> %1140, <i64 32768, i64 32768>
  %1164 = add nsw <2 x i64> %1163, %1148
  %1165 = bitcast <2 x i64> %1164 to <16 x i8>
  %1166 = shufflevector <16 x i8> %1165, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1167 = bitcast <16 x i8> %1153 to <4 x i32>
  %1168 = bitcast <16 x i8> %1158 to <4 x i32>
  %1169 = shufflevector <4 x i32> %1167, <4 x i32> %1168, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1170 = shufflevector <4 x i32> %1167, <4 x i32> %1168, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1171 = shufflevector <4 x i32> %1169, <4 x i32> %1170, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1172 = bitcast <2 x i64>* %1125 to <4 x i32>*
  store <4 x i32> %1171, <4 x i32>* %1172, align 16
  %1173 = bitcast <16 x i8> %1162 to <4 x i32>
  %1174 = bitcast <16 x i8> %1166 to <4 x i32>
  %1175 = shufflevector <4 x i32> %1173, <4 x i32> %1174, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1176 = shufflevector <4 x i32> %1173, <4 x i32> %1174, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1177 = shufflevector <4 x i32> %1175, <4 x i32> %1176, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1178 = bitcast <2 x i64>* %1126 to <4 x i32>*
  store <4 x i32> %1177, <4 x i32>* %1178, align 16
  %1179 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 29
  %1180 = bitcast <2 x i64>* %1179 to <4 x i32>*
  %1181 = load <4 x i32>, <4 x i32>* %1180, align 16
  %1182 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %1183 = bitcast <2 x i64>* %1182 to <4 x i32>*
  %1184 = load <4 x i32>, <4 x i32>* %1183, align 16
  %1185 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 23
  %1186 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 24
  %1187 = shufflevector <4 x i32> %1181, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1188 = bitcast <4 x i32> %1187 to <2 x i64>
  %1189 = shufflevector <4 x i32> %1181, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1190 = bitcast <4 x i32> %1189 to <2 x i64>
  %1191 = shufflevector <4 x i32> %1184, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1192 = bitcast <4 x i32> %1191 to <2 x i64>
  %1193 = shufflevector <4 x i32> %1184, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1194 = bitcast <4 x i32> %1193 to <2 x i64>
  %1195 = shl <2 x i64> %1188, <i64 32, i64 32>
  %1196 = ashr exact <2 x i64> %1195, <i64 32, i64 32>
  %1197 = mul nsw <2 x i64> %1196, <i64 9616, i64 9616>
  %1198 = shl <2 x i64> %1190, <i64 32, i64 32>
  %1199 = ashr exact <2 x i64> %1198, <i64 32, i64 32>
  %1200 = mul nsw <2 x i64> %1199, <i64 9616, i64 9616>
  %1201 = mul nsw <2 x i64> %1196, <i64 64828, i64 64828>
  %1202 = mul nsw <2 x i64> %1199, <i64 64828, i64 64828>
  %1203 = shl <2 x i64> %1192, <i64 32, i64 32>
  %1204 = ashr exact <2 x i64> %1203, <i64 32, i64 32>
  %1205 = mul nsw <2 x i64> %1204, <i64 64828, i64 64828>
  %1206 = shl <2 x i64> %1194, <i64 32, i64 32>
  %1207 = ashr exact <2 x i64> %1206, <i64 32, i64 32>
  %1208 = mul nsw <2 x i64> %1207, <i64 64828, i64 64828>
  %1209 = add nsw <2 x i64> %1201, <i64 32768, i64 32768>
  %1210 = mul nsw <2 x i64> %1204, <i64 -9616, i64 -9616>
  %1211 = add nsw <2 x i64> %1209, %1210
  %1212 = bitcast <2 x i64> %1211 to <16 x i8>
  %1213 = shufflevector <16 x i8> %1212, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1214 = add nsw <2 x i64> %1202, <i64 32768, i64 32768>
  %1215 = mul nsw <2 x i64> %1207, <i64 -9616, i64 -9616>
  %1216 = add nsw <2 x i64> %1214, %1215
  %1217 = bitcast <2 x i64> %1216 to <16 x i8>
  %1218 = shufflevector <16 x i8> %1217, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1219 = add nsw <2 x i64> %1197, <i64 32768, i64 32768>
  %1220 = add nsw <2 x i64> %1219, %1205
  %1221 = bitcast <2 x i64> %1220 to <16 x i8>
  %1222 = shufflevector <16 x i8> %1221, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1223 = add nsw <2 x i64> %1200, <i64 32768, i64 32768>
  %1224 = add nsw <2 x i64> %1223, %1208
  %1225 = bitcast <2 x i64> %1224 to <16 x i8>
  %1226 = shufflevector <16 x i8> %1225, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1227 = bitcast <16 x i8> %1213 to <4 x i32>
  %1228 = bitcast <16 x i8> %1218 to <4 x i32>
  %1229 = shufflevector <4 x i32> %1227, <4 x i32> %1228, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1230 = shufflevector <4 x i32> %1227, <4 x i32> %1228, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1231 = shufflevector <4 x i32> %1229, <4 x i32> %1230, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1232 = bitcast <2 x i64>* %1185 to <4 x i32>*
  store <4 x i32> %1231, <4 x i32>* %1232, align 16
  %1233 = bitcast <16 x i8> %1222 to <4 x i32>
  %1234 = bitcast <16 x i8> %1226 to <4 x i32>
  %1235 = shufflevector <4 x i32> %1233, <4 x i32> %1234, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1236 = shufflevector <4 x i32> %1233, <4 x i32> %1234, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1237 = shufflevector <4 x i32> %1235, <4 x i32> %1236, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1238 = bitcast <2 x i64>* %1186 to <4 x i32>*
  store <4 x i32> %1237, <4 x i32>* %1238, align 16
  %1239 = add <4 x i32> %871, %811
  %1240 = sub <4 x i32> %811, %871
  %1241 = sub <4 x i32> %991, %931
  %1242 = add <4 x i32> %991, %931
  %1243 = add <4 x i32> %1111, %1051
  %1244 = sub <4 x i32> %1051, %1111
  %1245 = sub <4 x i32> %1231, %1171
  %1246 = add <4 x i32> %1231, %1171
  %1247 = add <4 x i32> %1237, %1177
  %1248 = sub <4 x i32> %1237, %1177
  %1249 = sub <4 x i32> %1057, %1117
  %1250 = add <4 x i32> %1117, %1057
  %1251 = add <4 x i32> %997, %937
  %1252 = sub <4 x i32> %997, %937
  %1253 = sub <4 x i32> %817, %877
  %1254 = add <4 x i32> %877, %817
  store <4 x i32> %1239, <4 x i32>* %812, align 16
  store <4 x i32> %1254, <4 x i32>* %818, align 16
  %1255 = shufflevector <4 x i32> %1253, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1256 = bitcast <4 x i32> %1255 to <2 x i64>
  %1257 = shufflevector <4 x i32> %1253, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1258 = bitcast <4 x i32> %1257 to <2 x i64>
  %1259 = shufflevector <4 x i32> %1240, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1260 = bitcast <4 x i32> %1259 to <2 x i64>
  %1261 = shufflevector <4 x i32> %1240, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1262 = bitcast <4 x i32> %1261 to <2 x i64>
  %1263 = shl <2 x i64> %1256, <i64 32, i64 32>
  %1264 = ashr exact <2 x i64> %1263, <i64 32, i64 32>
  %1265 = mul nsw <2 x i64> %1264, <i64 64276, i64 64276>
  %1266 = shl <2 x i64> %1258, <i64 32, i64 32>
  %1267 = ashr exact <2 x i64> %1266, <i64 32, i64 32>
  %1268 = mul nsw <2 x i64> %1267, <i64 64276, i64 64276>
  %1269 = mul nsw <2 x i64> %1264, <i64 12784, i64 12784>
  %1270 = mul nsw <2 x i64> %1267, <i64 12784, i64 12784>
  %1271 = shl <2 x i64> %1260, <i64 32, i64 32>
  %1272 = ashr exact <2 x i64> %1271, <i64 32, i64 32>
  %1273 = mul nsw <2 x i64> %1272, <i64 12784, i64 12784>
  %1274 = shl <2 x i64> %1262, <i64 32, i64 32>
  %1275 = ashr exact <2 x i64> %1274, <i64 32, i64 32>
  %1276 = mul nsw <2 x i64> %1275, <i64 12784, i64 12784>
  %1277 = mul nsw <2 x i64> %1272, <i64 -64276, i64 -64276>
  %1278 = add nsw <2 x i64> %1277, <i64 32768, i64 32768>
  %1279 = add nsw <2 x i64> %1278, %1269
  %1280 = bitcast <2 x i64> %1279 to <16 x i8>
  %1281 = shufflevector <16 x i8> %1280, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1282 = mul nsw <2 x i64> %1275, <i64 -64276, i64 -64276>
  %1283 = add nsw <2 x i64> %1282, <i64 32768, i64 32768>
  %1284 = add nsw <2 x i64> %1283, %1270
  %1285 = bitcast <2 x i64> %1284 to <16 x i8>
  %1286 = shufflevector <16 x i8> %1285, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1287 = add nsw <2 x i64> %1273, <i64 32768, i64 32768>
  %1288 = add nsw <2 x i64> %1287, %1265
  %1289 = bitcast <2 x i64> %1288 to <16 x i8>
  %1290 = shufflevector <16 x i8> %1289, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1291 = add nsw <2 x i64> %1276, <i64 32768, i64 32768>
  %1292 = add nsw <2 x i64> %1291, %1268
  %1293 = bitcast <2 x i64> %1292 to <16 x i8>
  %1294 = shufflevector <16 x i8> %1293, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1295 = bitcast <16 x i8> %1281 to <4 x i32>
  %1296 = bitcast <16 x i8> %1286 to <4 x i32>
  %1297 = shufflevector <4 x i32> %1295, <4 x i32> %1296, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1298 = shufflevector <4 x i32> %1295, <4 x i32> %1296, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1299 = shufflevector <4 x i32> %1297, <4 x i32> %1298, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1299, <4 x i32>* %872, align 16
  %1300 = bitcast <16 x i8> %1290 to <4 x i32>
  %1301 = bitcast <16 x i8> %1294 to <4 x i32>
  %1302 = shufflevector <4 x i32> %1300, <4 x i32> %1301, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1303 = shufflevector <4 x i32> %1300, <4 x i32> %1301, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1304 = shufflevector <4 x i32> %1302, <4 x i32> %1303, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1304, <4 x i32>* %878, align 16
  %1305 = shufflevector <4 x i32> %1252, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1306 = bitcast <4 x i32> %1305 to <2 x i64>
  %1307 = shufflevector <4 x i32> %1252, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1308 = bitcast <4 x i32> %1307 to <2 x i64>
  %1309 = shufflevector <4 x i32> %1241, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1310 = bitcast <4 x i32> %1309 to <2 x i64>
  %1311 = shufflevector <4 x i32> %1241, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1312 = bitcast <4 x i32> %1311 to <2 x i64>
  %1313 = shl <2 x i64> %1306, <i64 32, i64 32>
  %1314 = ashr exact <2 x i64> %1313, <i64 32, i64 32>
  %1315 = mul nsw <2 x i64> %1314, <i64 12784, i64 12784>
  %1316 = shl <2 x i64> %1308, <i64 32, i64 32>
  %1317 = ashr exact <2 x i64> %1316, <i64 32, i64 32>
  %1318 = mul nsw <2 x i64> %1317, <i64 12784, i64 12784>
  %1319 = mul nsw <2 x i64> %1314, <i64 -64276, i64 -64276>
  %1320 = mul nsw <2 x i64> %1317, <i64 -64276, i64 -64276>
  %1321 = shl <2 x i64> %1310, <i64 32, i64 32>
  %1322 = ashr exact <2 x i64> %1321, <i64 32, i64 32>
  %1323 = mul nsw <2 x i64> %1322, <i64 -64276, i64 -64276>
  %1324 = shl <2 x i64> %1312, <i64 32, i64 32>
  %1325 = ashr exact <2 x i64> %1324, <i64 32, i64 32>
  %1326 = mul nsw <2 x i64> %1325, <i64 -64276, i64 -64276>
  %1327 = mul nsw <2 x i64> %1322, <i64 -12784, i64 -12784>
  %1328 = add nsw <2 x i64> %1327, <i64 32768, i64 32768>
  %1329 = add nsw <2 x i64> %1328, %1319
  %1330 = bitcast <2 x i64> %1329 to <16 x i8>
  %1331 = shufflevector <16 x i8> %1330, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1332 = mul nsw <2 x i64> %1325, <i64 -12784, i64 -12784>
  %1333 = add nsw <2 x i64> %1332, <i64 32768, i64 32768>
  %1334 = add nsw <2 x i64> %1333, %1320
  %1335 = bitcast <2 x i64> %1334 to <16 x i8>
  %1336 = shufflevector <16 x i8> %1335, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1337 = add nsw <2 x i64> %1323, <i64 32768, i64 32768>
  %1338 = add nsw <2 x i64> %1337, %1315
  %1339 = bitcast <2 x i64> %1338 to <16 x i8>
  %1340 = shufflevector <16 x i8> %1339, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1341 = add nsw <2 x i64> %1326, <i64 32768, i64 32768>
  %1342 = add nsw <2 x i64> %1341, %1318
  %1343 = bitcast <2 x i64> %1342 to <16 x i8>
  %1344 = shufflevector <16 x i8> %1343, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1345 = bitcast <16 x i8> %1331 to <4 x i32>
  %1346 = bitcast <16 x i8> %1336 to <4 x i32>
  %1347 = shufflevector <4 x i32> %1345, <4 x i32> %1346, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1348 = shufflevector <4 x i32> %1345, <4 x i32> %1346, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1349 = shufflevector <4 x i32> %1347, <4 x i32> %1348, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1349, <4 x i32>* %932, align 16
  %1350 = bitcast <16 x i8> %1340 to <4 x i32>
  %1351 = bitcast <16 x i8> %1344 to <4 x i32>
  %1352 = shufflevector <4 x i32> %1350, <4 x i32> %1351, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1353 = shufflevector <4 x i32> %1350, <4 x i32> %1351, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1354 = shufflevector <4 x i32> %1352, <4 x i32> %1353, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1354, <4 x i32>* %938, align 16
  store <4 x i32> %1242, <4 x i32>* %992, align 16
  store <4 x i32> %1243, <4 x i32>* %1052, align 16
  %1355 = shufflevector <4 x i32> %1249, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1356 = bitcast <4 x i32> %1355 to <2 x i64>
  %1357 = shufflevector <4 x i32> %1249, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1358 = bitcast <4 x i32> %1357 to <2 x i64>
  %1359 = shufflevector <4 x i32> %1244, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1360 = bitcast <4 x i32> %1359 to <2 x i64>
  %1361 = shufflevector <4 x i32> %1244, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1362 = bitcast <4 x i32> %1361 to <2 x i64>
  %1363 = shl <2 x i64> %1356, <i64 32, i64 32>
  %1364 = ashr exact <2 x i64> %1363, <i64 32, i64 32>
  %1365 = mul nsw <2 x i64> %1364, <i64 36408, i64 36408>
  %1366 = shl <2 x i64> %1358, <i64 32, i64 32>
  %1367 = ashr exact <2 x i64> %1366, <i64 32, i64 32>
  %1368 = mul nsw <2 x i64> %1367, <i64 36408, i64 36408>
  %1369 = mul nsw <2 x i64> %1364, <i64 54492, i64 54492>
  %1370 = mul nsw <2 x i64> %1367, <i64 54492, i64 54492>
  %1371 = shl <2 x i64> %1360, <i64 32, i64 32>
  %1372 = ashr exact <2 x i64> %1371, <i64 32, i64 32>
  %1373 = mul nsw <2 x i64> %1372, <i64 54492, i64 54492>
  %1374 = shl <2 x i64> %1362, <i64 32, i64 32>
  %1375 = ashr exact <2 x i64> %1374, <i64 32, i64 32>
  %1376 = mul nsw <2 x i64> %1375, <i64 54492, i64 54492>
  %1377 = mul nsw <2 x i64> %1372, <i64 -36408, i64 -36408>
  %1378 = add nsw <2 x i64> %1377, <i64 32768, i64 32768>
  %1379 = add nsw <2 x i64> %1378, %1369
  %1380 = bitcast <2 x i64> %1379 to <16 x i8>
  %1381 = shufflevector <16 x i8> %1380, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1382 = mul nsw <2 x i64> %1375, <i64 -36408, i64 -36408>
  %1383 = add nsw <2 x i64> %1382, <i64 32768, i64 32768>
  %1384 = add nsw <2 x i64> %1383, %1370
  %1385 = bitcast <2 x i64> %1384 to <16 x i8>
  %1386 = shufflevector <16 x i8> %1385, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1387 = add nsw <2 x i64> %1373, <i64 32768, i64 32768>
  %1388 = add nsw <2 x i64> %1387, %1365
  %1389 = bitcast <2 x i64> %1388 to <16 x i8>
  %1390 = shufflevector <16 x i8> %1389, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1391 = add nsw <2 x i64> %1376, <i64 32768, i64 32768>
  %1392 = add nsw <2 x i64> %1391, %1368
  %1393 = bitcast <2 x i64> %1392 to <16 x i8>
  %1394 = shufflevector <16 x i8> %1393, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1395 = bitcast <16 x i8> %1381 to <4 x i32>
  %1396 = bitcast <16 x i8> %1386 to <4 x i32>
  %1397 = shufflevector <4 x i32> %1395, <4 x i32> %1396, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1398 = shufflevector <4 x i32> %1395, <4 x i32> %1396, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1399 = shufflevector <4 x i32> %1397, <4 x i32> %1398, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1399, <4 x i32>* %1112, align 16
  %1400 = bitcast <16 x i8> %1390 to <4 x i32>
  %1401 = bitcast <16 x i8> %1394 to <4 x i32>
  %1402 = shufflevector <4 x i32> %1400, <4 x i32> %1401, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1403 = shufflevector <4 x i32> %1400, <4 x i32> %1401, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1404 = shufflevector <4 x i32> %1402, <4 x i32> %1403, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1404, <4 x i32>* %1118, align 16
  %1405 = shufflevector <4 x i32> %1248, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1406 = bitcast <4 x i32> %1405 to <2 x i64>
  %1407 = shufflevector <4 x i32> %1248, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1408 = bitcast <4 x i32> %1407 to <2 x i64>
  %1409 = shufflevector <4 x i32> %1245, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1410 = bitcast <4 x i32> %1409 to <2 x i64>
  %1411 = shufflevector <4 x i32> %1245, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1412 = bitcast <4 x i32> %1411 to <2 x i64>
  %1413 = shl <2 x i64> %1406, <i64 32, i64 32>
  %1414 = ashr exact <2 x i64> %1413, <i64 32, i64 32>
  %1415 = mul nsw <2 x i64> %1414, <i64 54492, i64 54492>
  %1416 = shl <2 x i64> %1408, <i64 32, i64 32>
  %1417 = ashr exact <2 x i64> %1416, <i64 32, i64 32>
  %1418 = mul nsw <2 x i64> %1417, <i64 54492, i64 54492>
  %1419 = mul nsw <2 x i64> %1414, <i64 -36408, i64 -36408>
  %1420 = mul nsw <2 x i64> %1417, <i64 -36408, i64 -36408>
  %1421 = shl <2 x i64> %1410, <i64 32, i64 32>
  %1422 = ashr exact <2 x i64> %1421, <i64 32, i64 32>
  %1423 = mul nsw <2 x i64> %1422, <i64 -36408, i64 -36408>
  %1424 = shl <2 x i64> %1412, <i64 32, i64 32>
  %1425 = ashr exact <2 x i64> %1424, <i64 32, i64 32>
  %1426 = mul nsw <2 x i64> %1425, <i64 -36408, i64 -36408>
  %1427 = mul nsw <2 x i64> %1422, <i64 -54492, i64 -54492>
  %1428 = add nsw <2 x i64> %1427, <i64 32768, i64 32768>
  %1429 = add nsw <2 x i64> %1428, %1419
  %1430 = bitcast <2 x i64> %1429 to <16 x i8>
  %1431 = shufflevector <16 x i8> %1430, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1432 = mul nsw <2 x i64> %1425, <i64 -54492, i64 -54492>
  %1433 = add nsw <2 x i64> %1432, <i64 32768, i64 32768>
  %1434 = add nsw <2 x i64> %1433, %1420
  %1435 = bitcast <2 x i64> %1434 to <16 x i8>
  %1436 = shufflevector <16 x i8> %1435, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1437 = add nsw <2 x i64> %1423, <i64 32768, i64 32768>
  %1438 = add nsw <2 x i64> %1437, %1415
  %1439 = bitcast <2 x i64> %1438 to <16 x i8>
  %1440 = shufflevector <16 x i8> %1439, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1441 = add nsw <2 x i64> %1426, <i64 32768, i64 32768>
  %1442 = add nsw <2 x i64> %1441, %1418
  %1443 = bitcast <2 x i64> %1442 to <16 x i8>
  %1444 = shufflevector <16 x i8> %1443, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1445 = bitcast <16 x i8> %1431 to <4 x i32>
  %1446 = bitcast <16 x i8> %1436 to <4 x i32>
  %1447 = shufflevector <4 x i32> %1445, <4 x i32> %1446, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1448 = shufflevector <4 x i32> %1445, <4 x i32> %1446, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1449 = shufflevector <4 x i32> %1447, <4 x i32> %1448, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1449, <4 x i32>* %1172, align 16
  %1450 = bitcast <16 x i8> %1440 to <4 x i32>
  %1451 = bitcast <16 x i8> %1444 to <4 x i32>
  %1452 = shufflevector <4 x i32> %1450, <4 x i32> %1451, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1453 = shufflevector <4 x i32> %1450, <4 x i32> %1451, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1454 = shufflevector <4 x i32> %1452, <4 x i32> %1453, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1454, <4 x i32>* %1178, align 16
  store <4 x i32> %1246, <4 x i32>* %1232, align 16
  store <4 x i32> %1247, <4 x i32>* %1238, align 16
  store <4 x i32> %1250, <4 x i32>* %1058, align 16
  store <4 x i32> %1251, <4 x i32>* %998, align 16
  %1455 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 0
  call fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nonnull %1455, <2 x i64>* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %758) #6
  br label %1456

1456:                                             ; preds = %1456, %1
  %1457 = phi i64 [ 0, %1 ], [ %1473, %1456 ]
  %1458 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1457
  %1459 = bitcast <2 x i64>* %1458 to <4 x i32>*
  %1460 = load <4 x i32>, <4 x i32>* %1459, align 16
  %1461 = shl i64 %1457, 32
  %1462 = sub nuw nsw i64 133143986176, %1461
  %1463 = ashr exact i64 %1462, 32
  %1464 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1463
  %1465 = bitcast <2 x i64>* %1464 to <4 x i32>*
  %1466 = load <4 x i32>, <4 x i32>* %1465, align 16
  %1467 = add <4 x i32> %1466, %1460
  %1468 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1457
  %1469 = bitcast <2 x i64>* %1468 to <4 x i32>*
  store <4 x i32> %1467, <4 x i32>* %1469, align 16
  %1470 = sub <4 x i32> %1460, %1466
  %1471 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1463
  %1472 = bitcast <2 x i64>* %1471 to <4 x i32>*
  store <4 x i32> %1470, <4 x i32>* %1472, align 16
  %1473 = add nuw nsw i64 %1457, 1
  %1474 = icmp eq i64 %1473, 16
  br i1 %1474, label %1475, label %1456

1475:                                             ; preds = %1456
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_135_add_sse4_1(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [2 x [32 x <2 x i64>]], align 16
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [32 x <2 x i64>], align 16
  %8 = alloca [8 x [32 x <2 x i64>]], align 16
  %9 = alloca [32 x <2 x i64>], align 16
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %401

11:                                               ; preds = %4
  %12 = bitcast [2 x [32 x <2 x i64>]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1024, i1 false)
  %13 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 512, i1 false)
  %14 = bitcast [32 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %16 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %17 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %18 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %19 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %20 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %21 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %22 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %23 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 8
  %24 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 9
  %25 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 10
  %26 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 11
  %27 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 12
  %28 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 13
  %29 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 14
  %30 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 15
  br label %34

31:                                               ; preds = %34
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 0
  %33 = sext i32 %2 to i64
  br label %232

34:                                               ; preds = %34, %11
  %35 = phi i64 [ 0, %11 ], [ %230, %34 ]
  %36 = phi i32* [ %0, %11 ], [ %229, %34 ]
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 16
  %39 = getelementptr inbounds i32, i32* %36, i64 4
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 16
  %42 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %38, <4 x i32> %41) #6
  %43 = getelementptr inbounds i32, i32* %36, i64 32
  %44 = bitcast i32* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 16
  %46 = getelementptr inbounds i32, i32* %36, i64 36
  %47 = bitcast i32* %46 to <4 x i32>*
  %48 = load <4 x i32>, <4 x i32>* %47, align 16
  %49 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %45, <4 x i32> %48) #6
  %50 = getelementptr inbounds i32, i32* %36, i64 64
  %51 = bitcast i32* %50 to <4 x i32>*
  %52 = load <4 x i32>, <4 x i32>* %51, align 16
  %53 = getelementptr inbounds i32, i32* %36, i64 68
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 16
  %56 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %52, <4 x i32> %55) #6
  %57 = getelementptr inbounds i32, i32* %36, i64 96
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16
  %60 = getelementptr inbounds i32, i32* %36, i64 100
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 16
  %63 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %59, <4 x i32> %62) #6
  %64 = getelementptr inbounds i32, i32* %36, i64 128
  %65 = bitcast i32* %64 to <4 x i32>*
  %66 = load <4 x i32>, <4 x i32>* %65, align 16
  %67 = getelementptr inbounds i32, i32* %36, i64 132
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 16
  %70 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %66, <4 x i32> %69) #6
  %71 = getelementptr inbounds i32, i32* %36, i64 160
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 16
  %74 = getelementptr inbounds i32, i32* %36, i64 164
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 16
  %77 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %73, <4 x i32> %76) #6
  %78 = getelementptr inbounds i32, i32* %36, i64 192
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 16
  %81 = getelementptr inbounds i32, i32* %36, i64 196
  %82 = bitcast i32* %81 to <4 x i32>*
  %83 = load <4 x i32>, <4 x i32>* %82, align 16
  %84 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %80, <4 x i32> %83) #6
  %85 = getelementptr inbounds i32, i32* %36, i64 224
  %86 = bitcast i32* %85 to <4 x i32>*
  %87 = load <4 x i32>, <4 x i32>* %86, align 16
  %88 = getelementptr inbounds i32, i32* %36, i64 228
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 16
  %91 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %87, <4 x i32> %90) #6
  %92 = shufflevector <8 x i16> %42, <8 x i16> %49, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %93 = shufflevector <8 x i16> %56, <8 x i16> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %94 = shufflevector <8 x i16> %70, <8 x i16> %77, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %95 = shufflevector <8 x i16> %84, <8 x i16> %91, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = shufflevector <8 x i16> %42, <8 x i16> %49, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %97 = shufflevector <8 x i16> %56, <8 x i16> %63, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %98 = shufflevector <8 x i16> %70, <8 x i16> %77, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %99 = shufflevector <8 x i16> %84, <8 x i16> %91, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = bitcast <8 x i16> %92 to <4 x i32>
  %101 = bitcast <8 x i16> %93 to <4 x i32>
  %102 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = bitcast <8 x i16> %94 to <4 x i32>
  %105 = bitcast <8 x i16> %95 to <4 x i32>
  %106 = shufflevector <4 x i32> %104, <4 x i32> %105, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = bitcast <8 x i16> %96 to <4 x i32>
  %109 = bitcast <8 x i16> %97 to <4 x i32>
  %110 = shufflevector <4 x i32> %108, <4 x i32> %109, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = bitcast <8 x i16> %98 to <4 x i32>
  %113 = bitcast <8 x i16> %99 to <4 x i32>
  %114 = shufflevector <4 x i32> %112, <4 x i32> %113, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %115 = bitcast <4 x i32> %114 to <2 x i64>
  %116 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %117 = bitcast <4 x i32> %116 to <2 x i64>
  %118 = shufflevector <4 x i32> %104, <4 x i32> %105, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %119 = bitcast <4 x i32> %118 to <2 x i64>
  %120 = shufflevector <4 x i32> %108, <4 x i32> %109, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %121 = bitcast <4 x i32> %120 to <2 x i64>
  %122 = shufflevector <4 x i32> %112, <4 x i32> %113, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %123 = bitcast <4 x i32> %122 to <2 x i64>
  %124 = shufflevector <2 x i64> %103, <2 x i64> %107, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %124, <2 x i64>* %15, align 16
  %125 = shufflevector <2 x i64> %103, <2 x i64> %107, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %125, <2 x i64>* %16, align 16
  %126 = shufflevector <2 x i64> %117, <2 x i64> %119, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %126, <2 x i64>* %17, align 16
  %127 = shufflevector <2 x i64> %117, <2 x i64> %119, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %127, <2 x i64>* %18, align 16
  %128 = shufflevector <2 x i64> %111, <2 x i64> %115, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %128, <2 x i64>* %19, align 16
  %129 = shufflevector <2 x i64> %111, <2 x i64> %115, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %129, <2 x i64>* %20, align 16
  %130 = shufflevector <2 x i64> %121, <2 x i64> %123, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %130, <2 x i64>* %21, align 16
  %131 = shufflevector <2 x i64> %121, <2 x i64> %123, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %131, <2 x i64>* %22, align 16
  %132 = getelementptr inbounds i32, i32* %36, i64 8
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 16
  %135 = getelementptr inbounds i32, i32* %36, i64 12
  %136 = bitcast i32* %135 to <4 x i32>*
  %137 = load <4 x i32>, <4 x i32>* %136, align 16
  %138 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %134, <4 x i32> %137) #6
  %139 = getelementptr inbounds i32, i32* %36, i64 40
  %140 = bitcast i32* %139 to <4 x i32>*
  %141 = load <4 x i32>, <4 x i32>* %140, align 16
  %142 = getelementptr inbounds i32, i32* %36, i64 44
  %143 = bitcast i32* %142 to <4 x i32>*
  %144 = load <4 x i32>, <4 x i32>* %143, align 16
  %145 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %141, <4 x i32> %144) #6
  %146 = getelementptr inbounds i32, i32* %36, i64 72
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 16
  %149 = getelementptr inbounds i32, i32* %36, i64 76
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 16
  %152 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %148, <4 x i32> %151) #6
  %153 = getelementptr inbounds i32, i32* %36, i64 104
  %154 = bitcast i32* %153 to <4 x i32>*
  %155 = load <4 x i32>, <4 x i32>* %154, align 16
  %156 = getelementptr inbounds i32, i32* %36, i64 108
  %157 = bitcast i32* %156 to <4 x i32>*
  %158 = load <4 x i32>, <4 x i32>* %157, align 16
  %159 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %155, <4 x i32> %158) #6
  %160 = getelementptr inbounds i32, i32* %36, i64 136
  %161 = bitcast i32* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 16
  %163 = getelementptr inbounds i32, i32* %36, i64 140
  %164 = bitcast i32* %163 to <4 x i32>*
  %165 = load <4 x i32>, <4 x i32>* %164, align 16
  %166 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %162, <4 x i32> %165) #6
  %167 = getelementptr inbounds i32, i32* %36, i64 168
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 16
  %170 = getelementptr inbounds i32, i32* %36, i64 172
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 16
  %173 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %169, <4 x i32> %172) #6
  %174 = getelementptr inbounds i32, i32* %36, i64 200
  %175 = bitcast i32* %174 to <4 x i32>*
  %176 = load <4 x i32>, <4 x i32>* %175, align 16
  %177 = getelementptr inbounds i32, i32* %36, i64 204
  %178 = bitcast i32* %177 to <4 x i32>*
  %179 = load <4 x i32>, <4 x i32>* %178, align 16
  %180 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %176, <4 x i32> %179) #6
  %181 = getelementptr inbounds i32, i32* %36, i64 232
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 16
  %184 = getelementptr inbounds i32, i32* %36, i64 236
  %185 = bitcast i32* %184 to <4 x i32>*
  %186 = load <4 x i32>, <4 x i32>* %185, align 16
  %187 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %183, <4 x i32> %186) #6
  %188 = shufflevector <8 x i16> %138, <8 x i16> %145, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %189 = shufflevector <8 x i16> %152, <8 x i16> %159, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %190 = shufflevector <8 x i16> %166, <8 x i16> %173, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %191 = shufflevector <8 x i16> %180, <8 x i16> %187, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %192 = shufflevector <8 x i16> %138, <8 x i16> %145, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %193 = shufflevector <8 x i16> %152, <8 x i16> %159, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %194 = shufflevector <8 x i16> %166, <8 x i16> %173, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %195 = shufflevector <8 x i16> %180, <8 x i16> %187, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %196 = bitcast <8 x i16> %188 to <4 x i32>
  %197 = bitcast <8 x i16> %189 to <4 x i32>
  %198 = shufflevector <4 x i32> %196, <4 x i32> %197, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %199 = bitcast <4 x i32> %198 to <2 x i64>
  %200 = bitcast <8 x i16> %190 to <4 x i32>
  %201 = bitcast <8 x i16> %191 to <4 x i32>
  %202 = shufflevector <4 x i32> %200, <4 x i32> %201, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %203 = bitcast <4 x i32> %202 to <2 x i64>
  %204 = bitcast <8 x i16> %192 to <4 x i32>
  %205 = bitcast <8 x i16> %193 to <4 x i32>
  %206 = shufflevector <4 x i32> %204, <4 x i32> %205, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %207 = bitcast <4 x i32> %206 to <2 x i64>
  %208 = bitcast <8 x i16> %194 to <4 x i32>
  %209 = bitcast <8 x i16> %195 to <4 x i32>
  %210 = shufflevector <4 x i32> %208, <4 x i32> %209, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %211 = bitcast <4 x i32> %210 to <2 x i64>
  %212 = shufflevector <4 x i32> %196, <4 x i32> %197, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %213 = bitcast <4 x i32> %212 to <2 x i64>
  %214 = shufflevector <4 x i32> %200, <4 x i32> %201, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = shufflevector <4 x i32> %204, <4 x i32> %205, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %217 = bitcast <4 x i32> %216 to <2 x i64>
  %218 = shufflevector <4 x i32> %208, <4 x i32> %209, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = shufflevector <2 x i64> %199, <2 x i64> %203, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %220, <2 x i64>* %23, align 16
  %221 = shufflevector <2 x i64> %199, <2 x i64> %203, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %221, <2 x i64>* %24, align 16
  %222 = shufflevector <2 x i64> %213, <2 x i64> %215, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %222, <2 x i64>* %25, align 16
  %223 = shufflevector <2 x i64> %213, <2 x i64> %215, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %223, <2 x i64>* %26, align 16
  %224 = shufflevector <2 x i64> %207, <2 x i64> %211, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %224, <2 x i64>* %27, align 16
  %225 = shufflevector <2 x i64> %207, <2 x i64> %211, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %225, <2 x i64>* %28, align 16
  %226 = shufflevector <2 x i64> %217, <2 x i64> %219, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %226, <2 x i64>* %29, align 16
  %227 = shufflevector <2 x i64> %217, <2 x i64> %219, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %227, <2 x i64>* %30, align 16
  %228 = getelementptr inbounds [2 x [32 x <2 x i64>]], [2 x [32 x <2 x i64>]]* %5, i64 0, i64 %35, i64 0
  call void @idct32_135_8x32_ssse3(<2 x i64>* nonnull %15, <2 x i64>* %228) #6
  %229 = getelementptr inbounds i32, i32* %36, i64 256
  %230 = add nuw nsw i64 %35, 1
  %231 = icmp eq i64 %230, 2
  br i1 %231, label %31, label %34

232:                                              ; preds = %31, %396
  %233 = phi i64 [ 0, %31 ], [ %398, %396 ]
  %234 = phi i16* [ %1, %31 ], [ %397, %396 ]
  %235 = getelementptr inbounds [2 x [32 x <2 x i64>]], [2 x [32 x <2 x i64>]]* %5, i64 0, i64 0, i64 %233
  %236 = bitcast <2 x i64>* %235 to <8 x i16>*
  %237 = load <8 x i16>, <8 x i16>* %236, align 16
  %238 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 1
  %239 = bitcast <2 x i64>* %238 to <8 x i16>*
  %240 = load <8 x i16>, <8 x i16>* %239, align 16
  %241 = shufflevector <8 x i16> %237, <8 x i16> %240, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %242 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 2
  %243 = bitcast <2 x i64>* %242 to <8 x i16>*
  %244 = load <8 x i16>, <8 x i16>* %243, align 16
  %245 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 3
  %246 = bitcast <2 x i64>* %245 to <8 x i16>*
  %247 = load <8 x i16>, <8 x i16>* %246, align 16
  %248 = shufflevector <8 x i16> %244, <8 x i16> %247, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %249 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 4
  %250 = bitcast <2 x i64>* %249 to <8 x i16>*
  %251 = load <8 x i16>, <8 x i16>* %250, align 16
  %252 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 5
  %253 = bitcast <2 x i64>* %252 to <8 x i16>*
  %254 = load <8 x i16>, <8 x i16>* %253, align 16
  %255 = shufflevector <8 x i16> %251, <8 x i16> %254, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %256 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 6
  %257 = bitcast <2 x i64>* %256 to <8 x i16>*
  %258 = load <8 x i16>, <8 x i16>* %257, align 16
  %259 = getelementptr inbounds <2 x i64>, <2 x i64>* %235, i64 7
  %260 = bitcast <2 x i64>* %259 to <8 x i16>*
  %261 = load <8 x i16>, <8 x i16>* %260, align 16
  %262 = shufflevector <8 x i16> %258, <8 x i16> %261, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %263 = shufflevector <8 x i16> %237, <8 x i16> %240, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %264 = shufflevector <8 x i16> %244, <8 x i16> %247, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %265 = shufflevector <8 x i16> %251, <8 x i16> %254, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %266 = shufflevector <8 x i16> %258, <8 x i16> %261, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %267 = bitcast <8 x i16> %241 to <4 x i32>
  %268 = bitcast <8 x i16> %248 to <4 x i32>
  %269 = shufflevector <4 x i32> %267, <4 x i32> %268, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = bitcast <8 x i16> %255 to <4 x i32>
  %272 = bitcast <8 x i16> %262 to <4 x i32>
  %273 = shufflevector <4 x i32> %271, <4 x i32> %272, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %274 = bitcast <4 x i32> %273 to <2 x i64>
  %275 = bitcast <8 x i16> %263 to <4 x i32>
  %276 = bitcast <8 x i16> %264 to <4 x i32>
  %277 = shufflevector <4 x i32> %275, <4 x i32> %276, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %278 = bitcast <4 x i32> %277 to <2 x i64>
  %279 = bitcast <8 x i16> %265 to <4 x i32>
  %280 = bitcast <8 x i16> %266 to <4 x i32>
  %281 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %282 = bitcast <4 x i32> %281 to <2 x i64>
  %283 = shufflevector <4 x i32> %267, <4 x i32> %268, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %284 = bitcast <4 x i32> %283 to <2 x i64>
  %285 = shufflevector <4 x i32> %271, <4 x i32> %272, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %286 = bitcast <4 x i32> %285 to <2 x i64>
  %287 = shufflevector <4 x i32> %275, <4 x i32> %276, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %290 = bitcast <4 x i32> %289 to <2 x i64>
  %291 = shufflevector <2 x i64> %270, <2 x i64> %274, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %291, <2 x i64>* %15, align 16
  %292 = shufflevector <2 x i64> %270, <2 x i64> %274, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %292, <2 x i64>* %16, align 16
  %293 = shufflevector <2 x i64> %284, <2 x i64> %286, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %293, <2 x i64>* %17, align 16
  %294 = shufflevector <2 x i64> %284, <2 x i64> %286, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %294, <2 x i64>* %18, align 16
  %295 = shufflevector <2 x i64> %278, <2 x i64> %282, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %295, <2 x i64>* %19, align 16
  %296 = shufflevector <2 x i64> %278, <2 x i64> %282, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %296, <2 x i64>* %20, align 16
  %297 = shufflevector <2 x i64> %288, <2 x i64> %290, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %297, <2 x i64>* %21, align 16
  %298 = shufflevector <2 x i64> %288, <2 x i64> %290, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %298, <2 x i64>* %22, align 16
  %299 = getelementptr inbounds [2 x [32 x <2 x i64>]], [2 x [32 x <2 x i64>]]* %5, i64 0, i64 1, i64 %233
  %300 = bitcast <2 x i64>* %299 to <8 x i16>*
  %301 = load <8 x i16>, <8 x i16>* %300, align 16
  %302 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 1
  %303 = bitcast <2 x i64>* %302 to <8 x i16>*
  %304 = load <8 x i16>, <8 x i16>* %303, align 16
  %305 = shufflevector <8 x i16> %301, <8 x i16> %304, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %306 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 2
  %307 = bitcast <2 x i64>* %306 to <8 x i16>*
  %308 = load <8 x i16>, <8 x i16>* %307, align 16
  %309 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 3
  %310 = bitcast <2 x i64>* %309 to <8 x i16>*
  %311 = load <8 x i16>, <8 x i16>* %310, align 16
  %312 = shufflevector <8 x i16> %308, <8 x i16> %311, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %313 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 4
  %314 = bitcast <2 x i64>* %313 to <8 x i16>*
  %315 = load <8 x i16>, <8 x i16>* %314, align 16
  %316 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 5
  %317 = bitcast <2 x i64>* %316 to <8 x i16>*
  %318 = load <8 x i16>, <8 x i16>* %317, align 16
  %319 = shufflevector <8 x i16> %315, <8 x i16> %318, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %320 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 6
  %321 = bitcast <2 x i64>* %320 to <8 x i16>*
  %322 = load <8 x i16>, <8 x i16>* %321, align 16
  %323 = getelementptr inbounds <2 x i64>, <2 x i64>* %299, i64 7
  %324 = bitcast <2 x i64>* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 16
  %326 = shufflevector <8 x i16> %322, <8 x i16> %325, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %327 = shufflevector <8 x i16> %301, <8 x i16> %304, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %328 = shufflevector <8 x i16> %308, <8 x i16> %311, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %329 = shufflevector <8 x i16> %315, <8 x i16> %318, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %330 = shufflevector <8 x i16> %322, <8 x i16> %325, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %331 = bitcast <8 x i16> %305 to <4 x i32>
  %332 = bitcast <8 x i16> %312 to <4 x i32>
  %333 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %334 = bitcast <4 x i32> %333 to <2 x i64>
  %335 = bitcast <8 x i16> %319 to <4 x i32>
  %336 = bitcast <8 x i16> %326 to <4 x i32>
  %337 = shufflevector <4 x i32> %335, <4 x i32> %336, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %338 = bitcast <4 x i32> %337 to <2 x i64>
  %339 = bitcast <8 x i16> %327 to <4 x i32>
  %340 = bitcast <8 x i16> %328 to <4 x i32>
  %341 = shufflevector <4 x i32> %339, <4 x i32> %340, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %342 = bitcast <4 x i32> %341 to <2 x i64>
  %343 = bitcast <8 x i16> %329 to <4 x i32>
  %344 = bitcast <8 x i16> %330 to <4 x i32>
  %345 = shufflevector <4 x i32> %343, <4 x i32> %344, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = shufflevector <4 x i32> %335, <4 x i32> %336, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = shufflevector <4 x i32> %339, <4 x i32> %340, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shufflevector <4 x i32> %343, <4 x i32> %344, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = shufflevector <2 x i64> %334, <2 x i64> %338, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %355, <2 x i64>* %23, align 16
  %356 = shufflevector <2 x i64> %334, <2 x i64> %338, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %356, <2 x i64>* %24, align 16
  %357 = shufflevector <2 x i64> %348, <2 x i64> %350, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %357, <2 x i64>* %25, align 16
  %358 = shufflevector <2 x i64> %348, <2 x i64> %350, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %358, <2 x i64>* %26, align 16
  %359 = shufflevector <2 x i64> %342, <2 x i64> %346, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %359, <2 x i64>* %27, align 16
  %360 = shufflevector <2 x i64> %342, <2 x i64> %346, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %360, <2 x i64>* %28, align 16
  %361 = shufflevector <2 x i64> %352, <2 x i64> %354, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %361, <2 x i64>* %29, align 16
  %362 = shufflevector <2 x i64> %352, <2 x i64> %354, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %362, <2 x i64>* %30, align 16
  call void @idct32_135_8x32_ssse3(<2 x i64>* nonnull %15, <2 x i64>* nonnull %32) #6
  br label %363

363:                                              ; preds = %363, %232
  %364 = phi i64 [ 0, %232 ], [ %394, %363 ]
  %365 = mul nsw i64 %364, %33
  %366 = getelementptr inbounds i16, i16* %234, i64 %365
  %367 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %364
  %368 = bitcast <2 x i64>* %367 to <8 x i16>*
  %369 = load <8 x i16>, <8 x i16>* %368, align 16
  %370 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %369, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %371 = ashr <8 x i16> %370, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %372 = bitcast i16* %366 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 16
  %374 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %373, <8 x i16> %371) #6
  %375 = icmp sgt <8 x i16> %374, zeroinitializer
  %376 = select <8 x i1> %375, <8 x i16> %374, <8 x i16> zeroinitializer
  %377 = icmp slt <8 x i16> %376, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %378 = select <8 x i1> %377, <8 x i16> %376, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %378, <8 x i16>* %372, align 16
  %379 = or i64 %364, 1
  %380 = mul nsw i64 %379, %33
  %381 = getelementptr inbounds i16, i16* %234, i64 %380
  %382 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %379
  %383 = bitcast <2 x i64>* %382 to <8 x i16>*
  %384 = load <8 x i16>, <8 x i16>* %383, align 16
  %385 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %384, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %386 = ashr <8 x i16> %385, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %387 = bitcast i16* %381 to <8 x i16>*
  %388 = load <8 x i16>, <8 x i16>* %387, align 16
  %389 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %388, <8 x i16> %386) #6
  %390 = icmp sgt <8 x i16> %389, zeroinitializer
  %391 = select <8 x i1> %390, <8 x i16> %389, <8 x i16> zeroinitializer
  %392 = icmp slt <8 x i16> %391, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %393 = select <8 x i1> %392, <8 x i16> %391, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %393, <8 x i16>* %387, align 16
  %394 = add nuw nsw i64 %364, 2
  %395 = icmp eq i64 %394, 32
  br i1 %395, label %396, label %363

396:                                              ; preds = %363
  %397 = getelementptr inbounds i16, i16* %234, i64 8
  %398 = add nuw nsw i64 %233, 8
  %399 = icmp ult i64 %398, 32
  br i1 %399, label %232, label %400

400:                                              ; preds = %396
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %12) #6
  br label %682

401:                                              ; preds = %4
  %402 = bitcast [8 x [32 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %402) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %402, i8 -86, i64 4096, i1 false)
  %403 = bitcast [32 x <2 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %403) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %403, i8 -86, i64 512, i1 false)
  br label %422

404:                                              ; preds = %422
  %405 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 0
  %406 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 1
  %407 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 2
  %408 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 3
  %409 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 4
  %410 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 5
  %411 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 6
  %412 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 7
  %413 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 8
  %414 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 9
  %415 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 10
  %416 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 11
  %417 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 12
  %418 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 13
  %419 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 14
  %420 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 15
  %421 = sext i32 %2 to i64
  br label %553

422:                                              ; preds = %422, %401
  %423 = phi i64 [ 0, %401 ], [ %551, %422 ]
  %424 = phi i32* [ %0, %401 ], [ %550, %422 ]
  %425 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 0
  %426 = bitcast i32* %424 to <2 x i64>*
  %427 = load <2 x i64>, <2 x i64>* %426, align 16
  store <2 x i64> %427, <2 x i64>* %425, align 16
  %428 = getelementptr inbounds i32, i32* %424, i64 4
  %429 = bitcast i32* %428 to <2 x i64>*
  %430 = load <2 x i64>, <2 x i64>* %429, align 16
  %431 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 1
  store <2 x i64> %430, <2 x i64>* %431, align 16
  %432 = getelementptr inbounds i32, i32* %424, i64 32
  %433 = bitcast i32* %432 to <2 x i64>*
  %434 = load <2 x i64>, <2 x i64>* %433, align 16
  %435 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 2
  store <2 x i64> %434, <2 x i64>* %435, align 16
  %436 = getelementptr inbounds i32, i32* %424, i64 36
  %437 = bitcast i32* %436 to <2 x i64>*
  %438 = load <2 x i64>, <2 x i64>* %437, align 16
  %439 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 3
  store <2 x i64> %438, <2 x i64>* %439, align 16
  %440 = getelementptr inbounds i32, i32* %424, i64 64
  %441 = bitcast i32* %440 to <2 x i64>*
  %442 = load <2 x i64>, <2 x i64>* %441, align 16
  %443 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 4
  store <2 x i64> %442, <2 x i64>* %443, align 16
  %444 = getelementptr inbounds i32, i32* %424, i64 68
  %445 = bitcast i32* %444 to <2 x i64>*
  %446 = load <2 x i64>, <2 x i64>* %445, align 16
  %447 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 5
  store <2 x i64> %446, <2 x i64>* %447, align 16
  %448 = getelementptr inbounds i32, i32* %424, i64 96
  %449 = bitcast i32* %448 to <2 x i64>*
  %450 = load <2 x i64>, <2 x i64>* %449, align 16
  %451 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 6
  store <2 x i64> %450, <2 x i64>* %451, align 16
  %452 = getelementptr inbounds i32, i32* %424, i64 100
  %453 = bitcast i32* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 16
  %455 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 7
  %456 = bitcast <2 x i64> %427 to <4 x i32>
  %457 = bitcast <2 x i64> %434 to <4 x i32>
  %458 = shufflevector <4 x i32> %456, <4 x i32> %457, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %459 = bitcast <4 x i32> %458 to <2 x i64>
  %460 = bitcast <2 x i64> %442 to <4 x i32>
  %461 = bitcast <2 x i64> %450 to <4 x i32>
  %462 = shufflevector <4 x i32> %460, <4 x i32> %461, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %463 = bitcast <4 x i32> %462 to <2 x i64>
  %464 = shufflevector <4 x i32> %456, <4 x i32> %457, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %465 = bitcast <4 x i32> %464 to <2 x i64>
  %466 = shufflevector <4 x i32> %460, <4 x i32> %461, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = bitcast <2 x i64> %430 to <4 x i32>
  %469 = bitcast <2 x i64> %438 to <4 x i32>
  %470 = shufflevector <4 x i32> %468, <4 x i32> %469, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = bitcast <2 x i64> %446 to <4 x i32>
  %473 = shufflevector <4 x i32> %472, <4 x i32> %454, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %474 = bitcast <4 x i32> %473 to <2 x i64>
  %475 = shufflevector <4 x i32> %468, <4 x i32> %469, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %476 = bitcast <4 x i32> %475 to <2 x i64>
  %477 = shufflevector <4 x i32> %472, <4 x i32> %454, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = shufflevector <2 x i64> %459, <2 x i64> %463, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %479, <2 x i64>* %425, align 16
  %480 = shufflevector <2 x i64> %459, <2 x i64> %463, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %480, <2 x i64>* %431, align 16
  %481 = shufflevector <2 x i64> %465, <2 x i64> %467, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %481, <2 x i64>* %435, align 16
  %482 = shufflevector <2 x i64> %465, <2 x i64> %467, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %482, <2 x i64>* %439, align 16
  %483 = shufflevector <2 x i64> %471, <2 x i64> %474, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %483, <2 x i64>* %443, align 16
  %484 = shufflevector <2 x i64> %471, <2 x i64> %474, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %484, <2 x i64>* %447, align 16
  %485 = shufflevector <2 x i64> %476, <2 x i64> %478, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %485, <2 x i64>* %451, align 16
  %486 = shufflevector <2 x i64> %476, <2 x i64> %478, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %486, <2 x i64>* %455, align 16
  %487 = getelementptr inbounds i32, i32* %424, i64 8
  %488 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 8
  %489 = bitcast i32* %487 to <2 x i64>*
  %490 = load <2 x i64>, <2 x i64>* %489, align 16
  store <2 x i64> %490, <2 x i64>* %488, align 16
  %491 = getelementptr inbounds i32, i32* %424, i64 12
  %492 = bitcast i32* %491 to <2 x i64>*
  %493 = load <2 x i64>, <2 x i64>* %492, align 16
  %494 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 9
  store <2 x i64> %493, <2 x i64>* %494, align 16
  %495 = getelementptr inbounds i32, i32* %424, i64 40
  %496 = bitcast i32* %495 to <2 x i64>*
  %497 = load <2 x i64>, <2 x i64>* %496, align 16
  %498 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 10
  store <2 x i64> %497, <2 x i64>* %498, align 16
  %499 = getelementptr inbounds i32, i32* %424, i64 44
  %500 = bitcast i32* %499 to <2 x i64>*
  %501 = load <2 x i64>, <2 x i64>* %500, align 16
  %502 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 11
  store <2 x i64> %501, <2 x i64>* %502, align 16
  %503 = getelementptr inbounds i32, i32* %424, i64 72
  %504 = bitcast i32* %503 to <2 x i64>*
  %505 = load <2 x i64>, <2 x i64>* %504, align 16
  %506 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 12
  store <2 x i64> %505, <2 x i64>* %506, align 16
  %507 = getelementptr inbounds i32, i32* %424, i64 76
  %508 = bitcast i32* %507 to <2 x i64>*
  %509 = load <2 x i64>, <2 x i64>* %508, align 16
  %510 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 13
  store <2 x i64> %509, <2 x i64>* %510, align 16
  %511 = getelementptr inbounds i32, i32* %424, i64 104
  %512 = bitcast i32* %511 to <2 x i64>*
  %513 = load <2 x i64>, <2 x i64>* %512, align 16
  %514 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 14
  store <2 x i64> %513, <2 x i64>* %514, align 16
  %515 = getelementptr inbounds i32, i32* %424, i64 108
  %516 = bitcast i32* %515 to <4 x i32>*
  %517 = load <4 x i32>, <4 x i32>* %516, align 16
  %518 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %423, i64 15
  %519 = bitcast <2 x i64> %490 to <4 x i32>
  %520 = bitcast <2 x i64> %497 to <4 x i32>
  %521 = shufflevector <4 x i32> %519, <4 x i32> %520, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %522 = bitcast <4 x i32> %521 to <2 x i64>
  %523 = bitcast <2 x i64> %505 to <4 x i32>
  %524 = bitcast <2 x i64> %513 to <4 x i32>
  %525 = shufflevector <4 x i32> %523, <4 x i32> %524, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %526 = bitcast <4 x i32> %525 to <2 x i64>
  %527 = shufflevector <4 x i32> %519, <4 x i32> %520, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %528 = bitcast <4 x i32> %527 to <2 x i64>
  %529 = shufflevector <4 x i32> %523, <4 x i32> %524, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = bitcast <2 x i64> %493 to <4 x i32>
  %532 = bitcast <2 x i64> %501 to <4 x i32>
  %533 = shufflevector <4 x i32> %531, <4 x i32> %532, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %534 = bitcast <4 x i32> %533 to <2 x i64>
  %535 = bitcast <2 x i64> %509 to <4 x i32>
  %536 = shufflevector <4 x i32> %535, <4 x i32> %517, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %537 = bitcast <4 x i32> %536 to <2 x i64>
  %538 = shufflevector <4 x i32> %531, <4 x i32> %532, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %539 = bitcast <4 x i32> %538 to <2 x i64>
  %540 = shufflevector <4 x i32> %535, <4 x i32> %517, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %541 = bitcast <4 x i32> %540 to <2 x i64>
  %542 = shufflevector <2 x i64> %522, <2 x i64> %526, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %542, <2 x i64>* %488, align 16
  %543 = shufflevector <2 x i64> %522, <2 x i64> %526, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %543, <2 x i64>* %494, align 16
  %544 = shufflevector <2 x i64> %528, <2 x i64> %530, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %544, <2 x i64>* %498, align 16
  %545 = shufflevector <2 x i64> %528, <2 x i64> %530, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %545, <2 x i64>* %502, align 16
  %546 = shufflevector <2 x i64> %534, <2 x i64> %537, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %546, <2 x i64>* %506, align 16
  %547 = shufflevector <2 x i64> %534, <2 x i64> %537, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %547, <2 x i64>* %510, align 16
  %548 = shufflevector <2 x i64> %539, <2 x i64> %541, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %548, <2 x i64>* %514, align 16
  %549 = shufflevector <2 x i64> %539, <2 x i64> %541, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %549, <2 x i64>* %518, align 16
  call fastcc void @highbd_idct32_135_4x32(<2 x i64>* %425)
  %550 = getelementptr inbounds i32, i32* %424, i64 128
  %551 = add nuw nsw i64 %423, 1
  %552 = icmp eq i64 %551, 4
  br i1 %552, label %404, label %422

553:                                              ; preds = %404, %677
  %554 = phi i64 [ 0, %404 ], [ %679, %677 ]
  %555 = phi i16* [ %1, %404 ], [ %678, %677 ]
  %556 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 0, i64 %554
  %557 = bitcast <2 x i64>* %556 to <4 x i32>*
  %558 = load <4 x i32>, <4 x i32>* %557, align 16
  %559 = getelementptr inbounds <2 x i64>, <2 x i64>* %556, i64 1
  %560 = bitcast <2 x i64>* %559 to <4 x i32>*
  %561 = load <4 x i32>, <4 x i32>* %560, align 16
  %562 = shufflevector <4 x i32> %558, <4 x i32> %561, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %563 = bitcast <4 x i32> %562 to <2 x i64>
  %564 = getelementptr inbounds <2 x i64>, <2 x i64>* %556, i64 2
  %565 = bitcast <2 x i64>* %564 to <4 x i32>*
  %566 = load <4 x i32>, <4 x i32>* %565, align 16
  %567 = getelementptr inbounds <2 x i64>, <2 x i64>* %556, i64 3
  %568 = bitcast <2 x i64>* %567 to <4 x i32>*
  %569 = load <4 x i32>, <4 x i32>* %568, align 16
  %570 = shufflevector <4 x i32> %566, <4 x i32> %569, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %571 = bitcast <4 x i32> %570 to <2 x i64>
  %572 = shufflevector <4 x i32> %558, <4 x i32> %561, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = shufflevector <4 x i32> %566, <4 x i32> %569, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %575 = bitcast <4 x i32> %574 to <2 x i64>
  %576 = shufflevector <2 x i64> %563, <2 x i64> %571, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %576, <2 x i64>* %405, align 16
  %577 = shufflevector <2 x i64> %563, <2 x i64> %571, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %577, <2 x i64>* %406, align 16
  %578 = shufflevector <2 x i64> %573, <2 x i64> %575, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %578, <2 x i64>* %407, align 16
  %579 = shufflevector <2 x i64> %573, <2 x i64> %575, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %579, <2 x i64>* %408, align 16
  %580 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 1, i64 %554
  %581 = bitcast <2 x i64>* %580 to <4 x i32>*
  %582 = load <4 x i32>, <4 x i32>* %581, align 16
  %583 = getelementptr inbounds <2 x i64>, <2 x i64>* %580, i64 1
  %584 = bitcast <2 x i64>* %583 to <4 x i32>*
  %585 = load <4 x i32>, <4 x i32>* %584, align 16
  %586 = shufflevector <4 x i32> %582, <4 x i32> %585, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %587 = bitcast <4 x i32> %586 to <2 x i64>
  %588 = getelementptr inbounds <2 x i64>, <2 x i64>* %580, i64 2
  %589 = bitcast <2 x i64>* %588 to <4 x i32>*
  %590 = load <4 x i32>, <4 x i32>* %589, align 16
  %591 = getelementptr inbounds <2 x i64>, <2 x i64>* %580, i64 3
  %592 = bitcast <2 x i64>* %591 to <4 x i32>*
  %593 = load <4 x i32>, <4 x i32>* %592, align 16
  %594 = shufflevector <4 x i32> %590, <4 x i32> %593, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %595 = bitcast <4 x i32> %594 to <2 x i64>
  %596 = shufflevector <4 x i32> %582, <4 x i32> %585, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %597 = bitcast <4 x i32> %596 to <2 x i64>
  %598 = shufflevector <4 x i32> %590, <4 x i32> %593, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %599 = bitcast <4 x i32> %598 to <2 x i64>
  %600 = shufflevector <2 x i64> %587, <2 x i64> %595, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %600, <2 x i64>* %409, align 16
  %601 = shufflevector <2 x i64> %587, <2 x i64> %595, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %601, <2 x i64>* %410, align 16
  %602 = shufflevector <2 x i64> %597, <2 x i64> %599, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %602, <2 x i64>* %411, align 16
  %603 = shufflevector <2 x i64> %597, <2 x i64> %599, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %603, <2 x i64>* %412, align 16
  %604 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 2, i64 %554
  %605 = bitcast <2 x i64>* %604 to <4 x i32>*
  %606 = load <4 x i32>, <4 x i32>* %605, align 16
  %607 = getelementptr inbounds <2 x i64>, <2 x i64>* %604, i64 1
  %608 = bitcast <2 x i64>* %607 to <4 x i32>*
  %609 = load <4 x i32>, <4 x i32>* %608, align 16
  %610 = shufflevector <4 x i32> %606, <4 x i32> %609, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %611 = bitcast <4 x i32> %610 to <2 x i64>
  %612 = getelementptr inbounds <2 x i64>, <2 x i64>* %604, i64 2
  %613 = bitcast <2 x i64>* %612 to <4 x i32>*
  %614 = load <4 x i32>, <4 x i32>* %613, align 16
  %615 = getelementptr inbounds <2 x i64>, <2 x i64>* %604, i64 3
  %616 = bitcast <2 x i64>* %615 to <4 x i32>*
  %617 = load <4 x i32>, <4 x i32>* %616, align 16
  %618 = shufflevector <4 x i32> %614, <4 x i32> %617, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %619 = bitcast <4 x i32> %618 to <2 x i64>
  %620 = shufflevector <4 x i32> %606, <4 x i32> %609, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %621 = bitcast <4 x i32> %620 to <2 x i64>
  %622 = shufflevector <4 x i32> %614, <4 x i32> %617, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %623 = bitcast <4 x i32> %622 to <2 x i64>
  %624 = shufflevector <2 x i64> %611, <2 x i64> %619, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %624, <2 x i64>* %413, align 16
  %625 = shufflevector <2 x i64> %611, <2 x i64> %619, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %625, <2 x i64>* %414, align 16
  %626 = shufflevector <2 x i64> %621, <2 x i64> %623, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %626, <2 x i64>* %415, align 16
  %627 = shufflevector <2 x i64> %621, <2 x i64> %623, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %627, <2 x i64>* %416, align 16
  %628 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 3, i64 %554
  %629 = bitcast <2 x i64>* %628 to <4 x i32>*
  %630 = load <4 x i32>, <4 x i32>* %629, align 16
  %631 = getelementptr inbounds <2 x i64>, <2 x i64>* %628, i64 1
  %632 = bitcast <2 x i64>* %631 to <4 x i32>*
  %633 = load <4 x i32>, <4 x i32>* %632, align 16
  %634 = shufflevector <4 x i32> %630, <4 x i32> %633, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %635 = bitcast <4 x i32> %634 to <2 x i64>
  %636 = getelementptr inbounds <2 x i64>, <2 x i64>* %628, i64 2
  %637 = bitcast <2 x i64>* %636 to <4 x i32>*
  %638 = load <4 x i32>, <4 x i32>* %637, align 16
  %639 = getelementptr inbounds <2 x i64>, <2 x i64>* %628, i64 3
  %640 = bitcast <2 x i64>* %639 to <4 x i32>*
  %641 = load <4 x i32>, <4 x i32>* %640, align 16
  %642 = shufflevector <4 x i32> %638, <4 x i32> %641, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %643 = bitcast <4 x i32> %642 to <2 x i64>
  %644 = shufflevector <4 x i32> %630, <4 x i32> %633, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  %646 = shufflevector <4 x i32> %638, <4 x i32> %641, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = shufflevector <2 x i64> %635, <2 x i64> %643, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %648, <2 x i64>* %417, align 16
  %649 = shufflevector <2 x i64> %635, <2 x i64> %643, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %649, <2 x i64>* %418, align 16
  %650 = shufflevector <2 x i64> %645, <2 x i64> %647, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %650, <2 x i64>* %419, align 16
  %651 = shufflevector <2 x i64> %645, <2 x i64> %647, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %651, <2 x i64>* %420, align 16
  call fastcc void @highbd_idct32_135_4x32(<2 x i64>* nonnull %405)
  %652 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %653 = add <8 x i16> %652, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %654

654:                                              ; preds = %654, %553
  %655 = phi i64 [ 0, %553 ], [ %675, %654 ]
  %656 = mul nsw i64 %655, %421
  %657 = getelementptr inbounds i16, i16* %555, i64 %656
  %658 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %655
  %659 = bitcast <2 x i64>* %658 to <4 x i32>*
  %660 = load <4 x i32>, <4 x i32>* %659, align 16
  %661 = add <4 x i32> %660, <i32 32, i32 32, i32 32, i32 32>
  %662 = ashr <4 x i32> %661, <i32 6, i32 6, i32 6, i32 6>
  %663 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %662, <4 x i32> %662) #6
  %664 = bitcast i16* %657 to i64*
  %665 = load i64, i64* %664, align 1
  %666 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %665, i32 0
  %667 = bitcast <2 x i64> %666 to <8 x i16>
  %668 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %667, <8 x i16> %663) #6
  %669 = icmp sgt <8 x i16> %668, zeroinitializer
  %670 = select <8 x i1> %669, <8 x i16> %668, <8 x i16> zeroinitializer
  %671 = icmp slt <8 x i16> %670, %653
  %672 = select <8 x i1> %671, <8 x i16> %670, <8 x i16> %653
  %673 = bitcast <8 x i16> %672 to <2 x i64>
  %674 = extractelement <2 x i64> %673, i32 0
  store i64 %674, i64* %664, align 1
  %675 = add nuw nsw i64 %655, 1
  %676 = icmp eq i64 %675, 32
  br i1 %676, label %677, label %654

677:                                              ; preds = %654
  %678 = getelementptr inbounds i16, i16* %555, i64 4
  %679 = add nuw nsw i64 %554, 4
  %680 = icmp ult i64 %679, 32
  br i1 %680, label %553, label %681

681:                                              ; preds = %677
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %403) #6
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %402) #6
  br label %682

682:                                              ; preds = %681, %400
  ret void
}

declare void @idct32_135_8x32_ssse3(<2 x i64>*, <2 x i64>*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_135_4x32(<2 x i64>* nocapture) unnamed_addr #0 {
  %2 = alloca [32 x <2 x i64>], align 16
  %3 = alloca [32 x <2 x i64>], align 16
  %4 = bitcast [32 x <2 x i64>]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 0
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = shl <2 x i64> %10, <i64 32, i64 32>
  %14 = ashr exact <2 x i64> %13, <i64 32, i64 32>
  %15 = mul nsw <2 x i64> %14, <i64 12784, i64 12784>
  %16 = shl <2 x i64> %12, <i64 32, i64 32>
  %17 = ashr exact <2 x i64> %16, <i64 32, i64 32>
  %18 = mul nsw <2 x i64> %17, <i64 12784, i64 12784>
  %19 = add nsw <2 x i64> %15, <i64 32768, i64 32768>
  %20 = bitcast <2 x i64> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %22 = add nsw <2 x i64> %18, <i64 32768, i64 32768>
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %25 = bitcast <16 x i8> %21 to <4 x i32>
  %26 = bitcast <16 x i8> %24 to <4 x i32>
  %27 = shufflevector <4 x i32> %25, <4 x i32> %26, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %28 = shufflevector <4 x i32> %25, <4 x i32> %26, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %30 = mul nsw <2 x i64> %14, <i64 64276, i64 64276>
  %31 = mul nsw <2 x i64> %17, <i64 64276, i64 64276>
  %32 = add nsw <2 x i64> %30, <i64 32768, i64 32768>
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %35 = add nsw <2 x i64> %31, <i64 32768, i64 32768>
  %36 = bitcast <2 x i64> %35 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %38 = bitcast <16 x i8> %34 to <4 x i32>
  %39 = bitcast <16 x i8> %37 to <4 x i32>
  %40 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %41 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %40, <4 x i32> %41, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %43 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %44 = bitcast <2 x i64>* %43 to <4 x i32>*
  %45 = load <4 x i32>, <4 x i32>* %44, align 16
  %46 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %47 = bitcast <4 x i32> %46 to <2 x i64>
  %48 = shufflevector <4 x i32> %45, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = shl <2 x i64> %47, <i64 32, i64 32>
  %51 = ashr exact <2 x i64> %50, <i64 32, i64 32>
  %52 = mul nsw <2 x i64> %51, <i64 -36408, i64 -36408>
  %53 = shl <2 x i64> %49, <i64 32, i64 32>
  %54 = ashr exact <2 x i64> %53, <i64 32, i64 32>
  %55 = mul nsw <2 x i64> %54, <i64 -36408, i64 -36408>
  %56 = add nsw <2 x i64> %52, <i64 32768, i64 32768>
  %57 = bitcast <2 x i64> %56 to <16 x i8>
  %58 = shufflevector <16 x i8> %57, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %59 = add nsw <2 x i64> %55, <i64 32768, i64 32768>
  %60 = bitcast <2 x i64> %59 to <16 x i8>
  %61 = shufflevector <16 x i8> %60, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %62 = bitcast <16 x i8> %58 to <4 x i32>
  %63 = bitcast <16 x i8> %61 to <4 x i32>
  %64 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %65 = shufflevector <4 x i32> %62, <4 x i32> %63, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %66 = shufflevector <4 x i32> %64, <4 x i32> %65, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %67 = mul nsw <2 x i64> %51, <i64 54492, i64 54492>
  %68 = mul nsw <2 x i64> %54, <i64 54492, i64 54492>
  %69 = add nsw <2 x i64> %67, <i64 32768, i64 32768>
  %70 = bitcast <2 x i64> %69 to <16 x i8>
  %71 = shufflevector <16 x i8> %70, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %72 = add nsw <2 x i64> %68, <i64 32768, i64 32768>
  %73 = bitcast <2 x i64> %72 to <16 x i8>
  %74 = shufflevector <16 x i8> %73, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %75 = bitcast <16 x i8> %71 to <4 x i32>
  %76 = bitcast <16 x i8> %74 to <4 x i32>
  %77 = shufflevector <4 x i32> %75, <4 x i32> %76, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %78 = shufflevector <4 x i32> %75, <4 x i32> %76, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %79 = shufflevector <4 x i32> %77, <4 x i32> %78, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %80 = bitcast <2 x i64>* %0 to <4 x i32>*
  %81 = load <4 x i32>, <4 x i32>* %80, align 16
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %83 = bitcast <4 x i32> %82 to <2 x i64>
  %84 = shufflevector <4 x i32> %81, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = shl <2 x i64> %83, <i64 32, i64 32>
  %87 = ashr exact <2 x i64> %86, <i64 32, i64 32>
  %88 = mul nsw <2 x i64> %87, <i64 46340, i64 46340>
  %89 = shl <2 x i64> %85, <i64 32, i64 32>
  %90 = ashr exact <2 x i64> %89, <i64 32, i64 32>
  %91 = mul nsw <2 x i64> %90, <i64 46340, i64 46340>
  %92 = add nsw <2 x i64> %88, <i64 32768, i64 32768>
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %95 = add nsw <2 x i64> %91, <i64 32768, i64 32768>
  %96 = bitcast <2 x i64> %95 to <16 x i8>
  %97 = shufflevector <16 x i8> %96, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %98 = bitcast <16 x i8> %94 to <4 x i32>
  %99 = bitcast <16 x i8> %97 to <4 x i32>
  %100 = shufflevector <4 x i32> %98, <4 x i32> %99, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %101 = shufflevector <4 x i32> %98, <4 x i32> %99, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %102 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %103 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %104 = bitcast <2 x i64>* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 16
  %106 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = shl <2 x i64> %107, <i64 32, i64 32>
  %111 = ashr exact <2 x i64> %110, <i64 32, i64 32>
  %112 = mul nsw <2 x i64> %111, <i64 25080, i64 25080>
  %113 = shl <2 x i64> %109, <i64 32, i64 32>
  %114 = ashr exact <2 x i64> %113, <i64 32, i64 32>
  %115 = mul nsw <2 x i64> %114, <i64 25080, i64 25080>
  %116 = add nsw <2 x i64> %112, <i64 32768, i64 32768>
  %117 = bitcast <2 x i64> %116 to <16 x i8>
  %118 = shufflevector <16 x i8> %117, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %119 = add nsw <2 x i64> %115, <i64 32768, i64 32768>
  %120 = bitcast <2 x i64> %119 to <16 x i8>
  %121 = shufflevector <16 x i8> %120, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %122 = bitcast <16 x i8> %118 to <4 x i32>
  %123 = bitcast <16 x i8> %121 to <4 x i32>
  %124 = shufflevector <4 x i32> %122, <4 x i32> %123, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %125 = shufflevector <4 x i32> %122, <4 x i32> %123, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %126 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %127 = mul nsw <2 x i64> %111, <i64 60548, i64 60548>
  %128 = mul nsw <2 x i64> %114, <i64 60548, i64 60548>
  %129 = add nsw <2 x i64> %127, <i64 32768, i64 32768>
  %130 = bitcast <2 x i64> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %132 = add nsw <2 x i64> %128, <i64 32768, i64 32768>
  %133 = bitcast <2 x i64> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %135 = bitcast <16 x i8> %131 to <4 x i32>
  %136 = bitcast <16 x i8> %134 to <4 x i32>
  %137 = shufflevector <4 x i32> %135, <4 x i32> %136, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %138 = shufflevector <4 x i32> %135, <4 x i32> %136, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %139 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %140 = add <4 x i32> %66, %29
  %141 = sub <4 x i32> %29, %66
  %142 = sub <4 x i32> %42, %79
  %143 = add <4 x i32> %79, %42
  %144 = add <4 x i32> %139, %102
  %145 = add <4 x i32> %126, %102
  %146 = sub <4 x i32> %102, %126
  %147 = sub <4 x i32> %102, %139
  %148 = shufflevector <4 x i32> %142, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = shufflevector <4 x i32> %142, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %155 = bitcast <4 x i32> %154 to <2 x i64>
  %156 = shl <2 x i64> %149, <i64 32, i64 32>
  %157 = ashr exact <2 x i64> %156, <i64 32, i64 32>
  %158 = mul nsw <2 x i64> %157, <i64 46340, i64 46340>
  %159 = shl <2 x i64> %151, <i64 32, i64 32>
  %160 = ashr exact <2 x i64> %159, <i64 32, i64 32>
  %161 = mul nsw <2 x i64> %160, <i64 46340, i64 46340>
  %162 = shl <2 x i64> %153, <i64 32, i64 32>
  %163 = ashr exact <2 x i64> %162, <i64 32, i64 32>
  %164 = mul nsw <2 x i64> %163, <i64 46340, i64 46340>
  %165 = shl <2 x i64> %155, <i64 32, i64 32>
  %166 = ashr exact <2 x i64> %165, <i64 32, i64 32>
  %167 = mul nsw <2 x i64> %166, <i64 46340, i64 46340>
  %168 = add nsw <2 x i64> %158, <i64 32768, i64 32768>
  %169 = sub nsw <2 x i64> %168, %164
  %170 = bitcast <2 x i64> %169 to <16 x i8>
  %171 = shufflevector <16 x i8> %170, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %172 = add nsw <2 x i64> %161, <i64 32768, i64 32768>
  %173 = sub nsw <2 x i64> %172, %167
  %174 = bitcast <2 x i64> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %176 = add nsw <2 x i64> %168, %164
  %177 = bitcast <2 x i64> %176 to <16 x i8>
  %178 = shufflevector <16 x i8> %177, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %179 = add nsw <2 x i64> %172, %167
  %180 = bitcast <2 x i64> %179 to <16 x i8>
  %181 = shufflevector <16 x i8> %180, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %182 = bitcast <16 x i8> %171 to <4 x i32>
  %183 = bitcast <16 x i8> %175 to <4 x i32>
  %184 = shufflevector <4 x i32> %182, <4 x i32> %183, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %185 = shufflevector <4 x i32> %182, <4 x i32> %183, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %186 = shufflevector <4 x i32> %184, <4 x i32> %185, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %187 = bitcast <16 x i8> %178 to <4 x i32>
  %188 = bitcast <16 x i8> %181 to <4 x i32>
  %189 = shufflevector <4 x i32> %187, <4 x i32> %188, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %190 = shufflevector <4 x i32> %187, <4 x i32> %188, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %191 = shufflevector <4 x i32> %189, <4 x i32> %190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %192 = add <4 x i32> %144, %143
  %193 = add <4 x i32> %191, %145
  %194 = add <4 x i32> %186, %146
  %195 = add <4 x i32> %147, %140
  %196 = sub <4 x i32> %147, %140
  %197 = sub <4 x i32> %146, %186
  %198 = sub <4 x i32> %145, %191
  %199 = sub <4 x i32> %144, %143
  %200 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %201 = bitcast <2 x i64>* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 16
  %203 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %204 = bitcast <4 x i32> %203 to <2 x i64>
  %205 = shufflevector <4 x i32> %202, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %206 = bitcast <4 x i32> %205 to <2 x i64>
  %207 = shl <2 x i64> %204, <i64 32, i64 32>
  %208 = ashr exact <2 x i64> %207, <i64 32, i64 32>
  %209 = mul nsw <2 x i64> %208, <i64 6424, i64 6424>
  %210 = shl <2 x i64> %206, <i64 32, i64 32>
  %211 = ashr exact <2 x i64> %210, <i64 32, i64 32>
  %212 = mul nsw <2 x i64> %211, <i64 6424, i64 6424>
  %213 = add nsw <2 x i64> %209, <i64 32768, i64 32768>
  %214 = bitcast <2 x i64> %213 to <16 x i8>
  %215 = shufflevector <16 x i8> %214, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %216 = add nsw <2 x i64> %212, <i64 32768, i64 32768>
  %217 = bitcast <2 x i64> %216 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %219 = bitcast <16 x i8> %215 to <4 x i32>
  %220 = bitcast <16 x i8> %218 to <4 x i32>
  %221 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %222 = shufflevector <4 x i32> %219, <4 x i32> %220, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %223 = shufflevector <4 x i32> %221, <4 x i32> %222, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %224 = mul nsw <2 x i64> %208, <i64 65220, i64 65220>
  %225 = mul nsw <2 x i64> %211, <i64 65220, i64 65220>
  %226 = add nsw <2 x i64> %224, <i64 32768, i64 32768>
  %227 = bitcast <2 x i64> %226 to <16 x i8>
  %228 = shufflevector <16 x i8> %227, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %229 = add nsw <2 x i64> %225, <i64 32768, i64 32768>
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %232 = bitcast <16 x i8> %228 to <4 x i32>
  %233 = bitcast <16 x i8> %231 to <4 x i32>
  %234 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %235 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %238 = bitcast <2 x i64>* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 16
  %240 = shufflevector <4 x i32> %239, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %241 = bitcast <4 x i32> %240 to <2 x i64>
  %242 = shufflevector <4 x i32> %239, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %243 = bitcast <4 x i32> %242 to <2 x i64>
  %244 = shl <2 x i64> %241, <i64 32, i64 32>
  %245 = ashr exact <2 x i64> %244, <i64 32, i64 32>
  %246 = mul nsw <2 x i64> %245, <i64 -41576, i64 -41576>
  %247 = shl <2 x i64> %243, <i64 32, i64 32>
  %248 = ashr exact <2 x i64> %247, <i64 32, i64 32>
  %249 = mul nsw <2 x i64> %248, <i64 -41576, i64 -41576>
  %250 = add nsw <2 x i64> %246, <i64 32768, i64 32768>
  %251 = bitcast <2 x i64> %250 to <16 x i8>
  %252 = shufflevector <16 x i8> %251, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %253 = add nsw <2 x i64> %249, <i64 32768, i64 32768>
  %254 = bitcast <2 x i64> %253 to <16 x i8>
  %255 = shufflevector <16 x i8> %254, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %256 = bitcast <16 x i8> %252 to <4 x i32>
  %257 = bitcast <16 x i8> %255 to <4 x i32>
  %258 = shufflevector <4 x i32> %256, <4 x i32> %257, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %259 = shufflevector <4 x i32> %256, <4 x i32> %257, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %260 = shufflevector <4 x i32> %258, <4 x i32> %259, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %261 = mul nsw <2 x i64> %245, <i64 50660, i64 50660>
  %262 = mul nsw <2 x i64> %248, <i64 50660, i64 50660>
  %263 = add nsw <2 x i64> %261, <i64 32768, i64 32768>
  %264 = bitcast <2 x i64> %263 to <16 x i8>
  %265 = shufflevector <16 x i8> %264, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %266 = add nsw <2 x i64> %262, <i64 32768, i64 32768>
  %267 = bitcast <2 x i64> %266 to <16 x i8>
  %268 = shufflevector <16 x i8> %267, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %269 = bitcast <16 x i8> %265 to <4 x i32>
  %270 = bitcast <16 x i8> %268 to <4 x i32>
  %271 = shufflevector <4 x i32> %269, <4 x i32> %270, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %272 = shufflevector <4 x i32> %269, <4 x i32> %270, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %273 = shufflevector <4 x i32> %271, <4 x i32> %272, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %274 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %275 = bitcast <2 x i64>* %274 to <4 x i32>*
  %276 = load <4 x i32>, <4 x i32>* %275, align 16
  %277 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %278 = bitcast <4 x i32> %277 to <2 x i64>
  %279 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %280 = bitcast <4 x i32> %279 to <2 x i64>
  %281 = shl <2 x i64> %278, <i64 32, i64 32>
  %282 = ashr exact <2 x i64> %281, <i64 32, i64 32>
  %283 = mul nsw <2 x i64> %282, <i64 30892, i64 30892>
  %284 = shl <2 x i64> %280, <i64 32, i64 32>
  %285 = ashr exact <2 x i64> %284, <i64 32, i64 32>
  %286 = mul nsw <2 x i64> %285, <i64 30892, i64 30892>
  %287 = add nsw <2 x i64> %283, <i64 32768, i64 32768>
  %288 = bitcast <2 x i64> %287 to <16 x i8>
  %289 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %290 = add nsw <2 x i64> %286, <i64 32768, i64 32768>
  %291 = bitcast <2 x i64> %290 to <16 x i8>
  %292 = shufflevector <16 x i8> %291, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %293 = bitcast <16 x i8> %289 to <4 x i32>
  %294 = bitcast <16 x i8> %292 to <4 x i32>
  %295 = shufflevector <4 x i32> %293, <4 x i32> %294, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %296 = shufflevector <4 x i32> %293, <4 x i32> %294, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %297 = shufflevector <4 x i32> %295, <4 x i32> %296, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %298 = mul nsw <2 x i64> %282, <i64 57796, i64 57796>
  %299 = mul nsw <2 x i64> %285, <i64 57796, i64 57796>
  %300 = add nsw <2 x i64> %298, <i64 32768, i64 32768>
  %301 = bitcast <2 x i64> %300 to <16 x i8>
  %302 = shufflevector <16 x i8> %301, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %303 = add nsw <2 x i64> %299, <i64 32768, i64 32768>
  %304 = bitcast <2 x i64> %303 to <16 x i8>
  %305 = shufflevector <16 x i8> %304, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %306 = bitcast <16 x i8> %302 to <4 x i32>
  %307 = bitcast <16 x i8> %305 to <4 x i32>
  %308 = shufflevector <4 x i32> %306, <4 x i32> %307, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %309 = shufflevector <4 x i32> %306, <4 x i32> %307, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %310 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %311 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %312 = bitcast <2 x i64>* %311 to <4 x i32>*
  %313 = load <4 x i32>, <4 x i32>* %312, align 16
  %314 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %317 = bitcast <4 x i32> %316 to <2 x i64>
  %318 = shl <2 x i64> %315, <i64 32, i64 32>
  %319 = ashr exact <2 x i64> %318, <i64 32, i64 32>
  %320 = mul nsw <2 x i64> %319, <i64 -19024, i64 -19024>
  %321 = shl <2 x i64> %317, <i64 32, i64 32>
  %322 = ashr exact <2 x i64> %321, <i64 32, i64 32>
  %323 = mul nsw <2 x i64> %322, <i64 -19024, i64 -19024>
  %324 = add nsw <2 x i64> %320, <i64 32768, i64 32768>
  %325 = bitcast <2 x i64> %324 to <16 x i8>
  %326 = shufflevector <16 x i8> %325, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %327 = add nsw <2 x i64> %323, <i64 32768, i64 32768>
  %328 = bitcast <2 x i64> %327 to <16 x i8>
  %329 = shufflevector <16 x i8> %328, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %330 = bitcast <16 x i8> %326 to <4 x i32>
  %331 = bitcast <16 x i8> %329 to <4 x i32>
  %332 = shufflevector <4 x i32> %330, <4 x i32> %331, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %333 = shufflevector <4 x i32> %330, <4 x i32> %331, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %334 = shufflevector <4 x i32> %332, <4 x i32> %333, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %335 = mul nsw <2 x i64> %319, <i64 62716, i64 62716>
  %336 = mul nsw <2 x i64> %322, <i64 62716, i64 62716>
  %337 = add nsw <2 x i64> %335, <i64 32768, i64 32768>
  %338 = bitcast <2 x i64> %337 to <16 x i8>
  %339 = shufflevector <16 x i8> %338, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %340 = add nsw <2 x i64> %336, <i64 32768, i64 32768>
  %341 = bitcast <2 x i64> %340 to <16 x i8>
  %342 = shufflevector <16 x i8> %341, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %343 = bitcast <16 x i8> %339 to <4 x i32>
  %344 = bitcast <16 x i8> %342 to <4 x i32>
  %345 = shufflevector <4 x i32> %343, <4 x i32> %344, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %346 = shufflevector <4 x i32> %343, <4 x i32> %344, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %347 = shufflevector <4 x i32> %345, <4 x i32> %346, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %348 = add <4 x i32> %260, %223
  %349 = sub <4 x i32> %223, %260
  %350 = sub <4 x i32> %236, %273
  %351 = add <4 x i32> %273, %236
  %352 = sub <4 x i32> %334, %297
  %353 = add <4 x i32> %334, %297
  %354 = add <4 x i32> %347, %310
  %355 = sub <4 x i32> %347, %310
  %356 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %357 = bitcast <4 x i32> %356 to <2 x i64>
  %358 = shufflevector <4 x i32> %350, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %359 = bitcast <4 x i32> %358 to <2 x i64>
  %360 = shufflevector <4 x i32> %349, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %361 = bitcast <4 x i32> %360 to <2 x i64>
  %362 = shufflevector <4 x i32> %349, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %363 = bitcast <4 x i32> %362 to <2 x i64>
  %364 = shl <2 x i64> %357, <i64 32, i64 32>
  %365 = ashr exact <2 x i64> %364, <i64 32, i64 32>
  %366 = mul nsw <2 x i64> %365, <i64 60548, i64 60548>
  %367 = shl <2 x i64> %359, <i64 32, i64 32>
  %368 = ashr exact <2 x i64> %367, <i64 32, i64 32>
  %369 = mul nsw <2 x i64> %368, <i64 60548, i64 60548>
  %370 = mul nsw <2 x i64> %365, <i64 25080, i64 25080>
  %371 = mul nsw <2 x i64> %368, <i64 25080, i64 25080>
  %372 = shl <2 x i64> %361, <i64 32, i64 32>
  %373 = ashr exact <2 x i64> %372, <i64 32, i64 32>
  %374 = mul nsw <2 x i64> %373, <i64 25080, i64 25080>
  %375 = shl <2 x i64> %363, <i64 32, i64 32>
  %376 = ashr exact <2 x i64> %375, <i64 32, i64 32>
  %377 = mul nsw <2 x i64> %376, <i64 25080, i64 25080>
  %378 = add nsw <2 x i64> %370, <i64 32768, i64 32768>
  %379 = mul nsw <2 x i64> %373, <i64 -60548, i64 -60548>
  %380 = add nsw <2 x i64> %378, %379
  %381 = bitcast <2 x i64> %380 to <16 x i8>
  %382 = shufflevector <16 x i8> %381, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %383 = add nsw <2 x i64> %371, <i64 32768, i64 32768>
  %384 = mul nsw <2 x i64> %376, <i64 -60548, i64 -60548>
  %385 = add nsw <2 x i64> %383, %384
  %386 = bitcast <2 x i64> %385 to <16 x i8>
  %387 = shufflevector <16 x i8> %386, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %388 = add nsw <2 x i64> %366, <i64 32768, i64 32768>
  %389 = add nsw <2 x i64> %388, %374
  %390 = bitcast <2 x i64> %389 to <16 x i8>
  %391 = shufflevector <16 x i8> %390, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %392 = add nsw <2 x i64> %369, <i64 32768, i64 32768>
  %393 = add nsw <2 x i64> %392, %377
  %394 = bitcast <2 x i64> %393 to <16 x i8>
  %395 = shufflevector <16 x i8> %394, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %396 = bitcast <16 x i8> %382 to <4 x i32>
  %397 = bitcast <16 x i8> %387 to <4 x i32>
  %398 = shufflevector <4 x i32> %396, <4 x i32> %397, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %399 = shufflevector <4 x i32> %396, <4 x i32> %397, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %400 = shufflevector <4 x i32> %398, <4 x i32> %399, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %401 = bitcast <16 x i8> %391 to <4 x i32>
  %402 = bitcast <16 x i8> %395 to <4 x i32>
  %403 = shufflevector <4 x i32> %401, <4 x i32> %402, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %404 = shufflevector <4 x i32> %401, <4 x i32> %402, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %405 = shufflevector <4 x i32> %403, <4 x i32> %404, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %406 = shufflevector <4 x i32> %355, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %407 = bitcast <4 x i32> %406 to <2 x i64>
  %408 = shufflevector <4 x i32> %355, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %409 = bitcast <4 x i32> %408 to <2 x i64>
  %410 = shufflevector <4 x i32> %352, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %411 = bitcast <4 x i32> %410 to <2 x i64>
  %412 = shufflevector <4 x i32> %352, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = shl <2 x i64> %407, <i64 32, i64 32>
  %415 = ashr exact <2 x i64> %414, <i64 32, i64 32>
  %416 = mul nsw <2 x i64> %415, <i64 25080, i64 25080>
  %417 = shl <2 x i64> %409, <i64 32, i64 32>
  %418 = ashr exact <2 x i64> %417, <i64 32, i64 32>
  %419 = mul nsw <2 x i64> %418, <i64 25080, i64 25080>
  %420 = mul nsw <2 x i64> %415, <i64 -60548, i64 -60548>
  %421 = mul nsw <2 x i64> %418, <i64 -60548, i64 -60548>
  %422 = shl <2 x i64> %411, <i64 32, i64 32>
  %423 = ashr exact <2 x i64> %422, <i64 32, i64 32>
  %424 = mul nsw <2 x i64> %423, <i64 -60548, i64 -60548>
  %425 = shl <2 x i64> %413, <i64 32, i64 32>
  %426 = ashr exact <2 x i64> %425, <i64 32, i64 32>
  %427 = mul nsw <2 x i64> %426, <i64 -60548, i64 -60548>
  %428 = add nsw <2 x i64> %420, <i64 32768, i64 32768>
  %429 = mul nsw <2 x i64> %423, <i64 -25080, i64 -25080>
  %430 = add nsw <2 x i64> %428, %429
  %431 = bitcast <2 x i64> %430 to <16 x i8>
  %432 = shufflevector <16 x i8> %431, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %433 = add nsw <2 x i64> %421, <i64 32768, i64 32768>
  %434 = mul nsw <2 x i64> %426, <i64 -25080, i64 -25080>
  %435 = add nsw <2 x i64> %433, %434
  %436 = bitcast <2 x i64> %435 to <16 x i8>
  %437 = shufflevector <16 x i8> %436, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %438 = add nsw <2 x i64> %416, <i64 32768, i64 32768>
  %439 = add nsw <2 x i64> %438, %424
  %440 = bitcast <2 x i64> %439 to <16 x i8>
  %441 = shufflevector <16 x i8> %440, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %442 = add nsw <2 x i64> %419, <i64 32768, i64 32768>
  %443 = add nsw <2 x i64> %442, %427
  %444 = bitcast <2 x i64> %443 to <16 x i8>
  %445 = shufflevector <16 x i8> %444, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %446 = bitcast <16 x i8> %432 to <4 x i32>
  %447 = bitcast <16 x i8> %437 to <4 x i32>
  %448 = shufflevector <4 x i32> %446, <4 x i32> %447, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %449 = shufflevector <4 x i32> %446, <4 x i32> %447, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %450 = shufflevector <4 x i32> %448, <4 x i32> %449, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %451 = bitcast <16 x i8> %441 to <4 x i32>
  %452 = bitcast <16 x i8> %445 to <4 x i32>
  %453 = shufflevector <4 x i32> %451, <4 x i32> %452, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %454 = shufflevector <4 x i32> %451, <4 x i32> %452, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %455 = shufflevector <4 x i32> %453, <4 x i32> %454, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %456 = add <4 x i32> %353, %348
  %457 = add <4 x i32> %450, %400
  %458 = sub <4 x i32> %400, %450
  %459 = sub <4 x i32> %348, %353
  %460 = sub <4 x i32> %351, %354
  %461 = sub <4 x i32> %405, %455
  %462 = add <4 x i32> %455, %405
  %463 = add <4 x i32> %354, %351
  %464 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %465 = bitcast <4 x i32> %464 to <2 x i64>
  %466 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %469 = bitcast <4 x i32> %468 to <2 x i64>
  %470 = shufflevector <4 x i32> %458, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = shl <2 x i64> %465, <i64 32, i64 32>
  %473 = ashr exact <2 x i64> %472, <i64 32, i64 32>
  %474 = mul nsw <2 x i64> %473, <i64 46340, i64 46340>
  %475 = shl <2 x i64> %467, <i64 32, i64 32>
  %476 = ashr exact <2 x i64> %475, <i64 32, i64 32>
  %477 = mul nsw <2 x i64> %476, <i64 46340, i64 46340>
  %478 = shl <2 x i64> %469, <i64 32, i64 32>
  %479 = ashr exact <2 x i64> %478, <i64 32, i64 32>
  %480 = mul nsw <2 x i64> %479, <i64 46340, i64 46340>
  %481 = shl <2 x i64> %471, <i64 32, i64 32>
  %482 = ashr exact <2 x i64> %481, <i64 32, i64 32>
  %483 = mul nsw <2 x i64> %482, <i64 46340, i64 46340>
  %484 = add nsw <2 x i64> %474, <i64 32768, i64 32768>
  %485 = sub nsw <2 x i64> %484, %480
  %486 = bitcast <2 x i64> %485 to <16 x i8>
  %487 = shufflevector <16 x i8> %486, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %488 = add nsw <2 x i64> %477, <i64 32768, i64 32768>
  %489 = sub nsw <2 x i64> %488, %483
  %490 = bitcast <2 x i64> %489 to <16 x i8>
  %491 = shufflevector <16 x i8> %490, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %492 = add nsw <2 x i64> %484, %480
  %493 = bitcast <2 x i64> %492 to <16 x i8>
  %494 = shufflevector <16 x i8> %493, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %495 = add nsw <2 x i64> %488, %483
  %496 = bitcast <2 x i64> %495 to <16 x i8>
  %497 = shufflevector <16 x i8> %496, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %498 = bitcast <16 x i8> %487 to <4 x i32>
  %499 = bitcast <16 x i8> %491 to <4 x i32>
  %500 = shufflevector <4 x i32> %498, <4 x i32> %499, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %501 = shufflevector <4 x i32> %498, <4 x i32> %499, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %502 = shufflevector <4 x i32> %500, <4 x i32> %501, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %503 = bitcast <16 x i8> %494 to <4 x i32>
  %504 = bitcast <16 x i8> %497 to <4 x i32>
  %505 = shufflevector <4 x i32> %503, <4 x i32> %504, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %506 = shufflevector <4 x i32> %503, <4 x i32> %504, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %507 = shufflevector <4 x i32> %505, <4 x i32> %506, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %508 = shufflevector <4 x i32> %460, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %509 = bitcast <4 x i32> %508 to <2 x i64>
  %510 = shufflevector <4 x i32> %460, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %511 = bitcast <4 x i32> %510 to <2 x i64>
  %512 = shufflevector <4 x i32> %459, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %513 = bitcast <4 x i32> %512 to <2 x i64>
  %514 = shufflevector <4 x i32> %459, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %515 = bitcast <4 x i32> %514 to <2 x i64>
  %516 = shl <2 x i64> %509, <i64 32, i64 32>
  %517 = ashr exact <2 x i64> %516, <i64 32, i64 32>
  %518 = mul nsw <2 x i64> %517, <i64 46340, i64 46340>
  %519 = shl <2 x i64> %511, <i64 32, i64 32>
  %520 = ashr exact <2 x i64> %519, <i64 32, i64 32>
  %521 = mul nsw <2 x i64> %520, <i64 46340, i64 46340>
  %522 = shl <2 x i64> %513, <i64 32, i64 32>
  %523 = ashr exact <2 x i64> %522, <i64 32, i64 32>
  %524 = mul nsw <2 x i64> %523, <i64 46340, i64 46340>
  %525 = shl <2 x i64> %515, <i64 32, i64 32>
  %526 = ashr exact <2 x i64> %525, <i64 32, i64 32>
  %527 = mul nsw <2 x i64> %526, <i64 46340, i64 46340>
  %528 = add nsw <2 x i64> %518, <i64 32768, i64 32768>
  %529 = sub nsw <2 x i64> %528, %524
  %530 = bitcast <2 x i64> %529 to <16 x i8>
  %531 = shufflevector <16 x i8> %530, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %532 = add nsw <2 x i64> %521, <i64 32768, i64 32768>
  %533 = sub nsw <2 x i64> %532, %527
  %534 = bitcast <2 x i64> %533 to <16 x i8>
  %535 = shufflevector <16 x i8> %534, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %536 = add nsw <2 x i64> %528, %524
  %537 = bitcast <2 x i64> %536 to <16 x i8>
  %538 = shufflevector <16 x i8> %537, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %539 = add nsw <2 x i64> %532, %527
  %540 = bitcast <2 x i64> %539 to <16 x i8>
  %541 = shufflevector <16 x i8> %540, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %542 = bitcast <16 x i8> %531 to <4 x i32>
  %543 = bitcast <16 x i8> %535 to <4 x i32>
  %544 = shufflevector <4 x i32> %542, <4 x i32> %543, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %545 = shufflevector <4 x i32> %542, <4 x i32> %543, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %546 = shufflevector <4 x i32> %544, <4 x i32> %545, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %547 = bitcast <16 x i8> %538 to <4 x i32>
  %548 = bitcast <16 x i8> %541 to <4 x i32>
  %549 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %550 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %551 = shufflevector <4 x i32> %549, <4 x i32> %550, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %552 = add <4 x i32> %463, %192
  %553 = bitcast [32 x <2 x i64>]* %3 to <4 x i32>*
  store <4 x i32> %552, <4 x i32>* %553, align 16
  %554 = sub <4 x i32> %192, %463
  %555 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 15
  %556 = bitcast <2 x i64>* %555 to <4 x i32>*
  store <4 x i32> %554, <4 x i32>* %556, align 16
  %557 = add <4 x i32> %462, %193
  %558 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 1
  %559 = bitcast <2 x i64>* %558 to <4 x i32>*
  store <4 x i32> %557, <4 x i32>* %559, align 16
  %560 = sub <4 x i32> %193, %462
  %561 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 14
  %562 = bitcast <2 x i64>* %561 to <4 x i32>*
  store <4 x i32> %560, <4 x i32>* %562, align 16
  %563 = add <4 x i32> %507, %194
  %564 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 2
  %565 = bitcast <2 x i64>* %564 to <4 x i32>*
  store <4 x i32> %563, <4 x i32>* %565, align 16
  %566 = sub <4 x i32> %194, %507
  %567 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 13
  %568 = bitcast <2 x i64>* %567 to <4 x i32>*
  store <4 x i32> %566, <4 x i32>* %568, align 16
  %569 = add <4 x i32> %551, %195
  %570 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 3
  %571 = bitcast <2 x i64>* %570 to <4 x i32>*
  store <4 x i32> %569, <4 x i32>* %571, align 16
  %572 = sub <4 x i32> %195, %551
  %573 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 12
  %574 = bitcast <2 x i64>* %573 to <4 x i32>*
  store <4 x i32> %572, <4 x i32>* %574, align 16
  %575 = add <4 x i32> %546, %196
  %576 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 4
  %577 = bitcast <2 x i64>* %576 to <4 x i32>*
  store <4 x i32> %575, <4 x i32>* %577, align 16
  %578 = sub <4 x i32> %196, %546
  %579 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 11
  %580 = bitcast <2 x i64>* %579 to <4 x i32>*
  store <4 x i32> %578, <4 x i32>* %580, align 16
  %581 = add <4 x i32> %502, %197
  %582 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 5
  %583 = bitcast <2 x i64>* %582 to <4 x i32>*
  store <4 x i32> %581, <4 x i32>* %583, align 16
  %584 = sub <4 x i32> %197, %502
  %585 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 10
  %586 = bitcast <2 x i64>* %585 to <4 x i32>*
  store <4 x i32> %584, <4 x i32>* %586, align 16
  %587 = add <4 x i32> %457, %198
  %588 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 6
  %589 = bitcast <2 x i64>* %588 to <4 x i32>*
  store <4 x i32> %587, <4 x i32>* %589, align 16
  %590 = sub <4 x i32> %198, %457
  %591 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 9
  %592 = bitcast <2 x i64>* %591 to <4 x i32>*
  store <4 x i32> %590, <4 x i32>* %592, align 16
  %593 = add <4 x i32> %456, %199
  %594 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 7
  %595 = bitcast <2 x i64>* %594 to <4 x i32>*
  store <4 x i32> %593, <4 x i32>* %595, align 16
  %596 = sub <4 x i32> %199, %456
  %597 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 8
  %598 = bitcast <2 x i64>* %597 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %598, align 16
  %599 = bitcast [32 x <2 x i64>]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %599) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %599, i8 -86, i64 480, i1 false) #6
  %600 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %601 = bitcast <2 x i64>* %600 to <4 x i32>*
  %602 = load <4 x i32>, <4 x i32>* %601, align 16
  %603 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 16
  %604 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 31
  %605 = shufflevector <4 x i32> %602, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %606 = bitcast <4 x i32> %605 to <2 x i64>
  %607 = shufflevector <4 x i32> %602, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %608 = bitcast <4 x i32> %607 to <2 x i64>
  %609 = shl <2 x i64> %606, <i64 32, i64 32>
  %610 = ashr exact <2 x i64> %609, <i64 32, i64 32>
  %611 = mul nsw <2 x i64> %610, <i64 3216, i64 3216>
  %612 = shl <2 x i64> %608, <i64 32, i64 32>
  %613 = ashr exact <2 x i64> %612, <i64 32, i64 32>
  %614 = mul nsw <2 x i64> %613, <i64 3216, i64 3216>
  %615 = add nsw <2 x i64> %611, <i64 32768, i64 32768>
  %616 = bitcast <2 x i64> %615 to <16 x i8>
  %617 = shufflevector <16 x i8> %616, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %618 = add nsw <2 x i64> %614, <i64 32768, i64 32768>
  %619 = bitcast <2 x i64> %618 to <16 x i8>
  %620 = shufflevector <16 x i8> %619, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %621 = bitcast <16 x i8> %617 to <4 x i32>
  %622 = bitcast <16 x i8> %620 to <4 x i32>
  %623 = shufflevector <4 x i32> %621, <4 x i32> %622, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %624 = shufflevector <4 x i32> %621, <4 x i32> %622, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %625 = shufflevector <4 x i32> %623, <4 x i32> %624, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %626 = bitcast <2 x i64>* %603 to <4 x i32>*
  store <4 x i32> %625, <4 x i32>* %626, align 16
  %627 = mul nsw <2 x i64> %610, <i64 65456, i64 65456>
  %628 = mul nsw <2 x i64> %613, <i64 65456, i64 65456>
  %629 = add nsw <2 x i64> %627, <i64 32768, i64 32768>
  %630 = bitcast <2 x i64> %629 to <16 x i8>
  %631 = shufflevector <16 x i8> %630, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %632 = add nsw <2 x i64> %628, <i64 32768, i64 32768>
  %633 = bitcast <2 x i64> %632 to <16 x i8>
  %634 = shufflevector <16 x i8> %633, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %635 = bitcast <16 x i8> %631 to <4 x i32>
  %636 = bitcast <16 x i8> %634 to <4 x i32>
  %637 = shufflevector <4 x i32> %635, <4 x i32> %636, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %638 = shufflevector <4 x i32> %635, <4 x i32> %636, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %639 = shufflevector <4 x i32> %637, <4 x i32> %638, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %640 = bitcast <2 x i64>* %604 to <4 x i32>*
  store <4 x i32> %639, <4 x i32>* %640, align 16
  %641 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %642 = bitcast <2 x i64>* %641 to <4 x i32>*
  %643 = load <4 x i32>, <4 x i32>* %642, align 16
  %644 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 17
  %645 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 30
  %646 = shufflevector <4 x i32> %643, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = shufflevector <4 x i32> %643, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %649 = bitcast <4 x i32> %648 to <2 x i64>
  %650 = shl <2 x i64> %647, <i64 32, i64 32>
  %651 = ashr exact <2 x i64> %650, <i64 32, i64 32>
  %652 = mul nsw <2 x i64> %651, <i64 -44012, i64 -44012>
  %653 = shl <2 x i64> %649, <i64 32, i64 32>
  %654 = ashr exact <2 x i64> %653, <i64 32, i64 32>
  %655 = mul nsw <2 x i64> %654, <i64 -44012, i64 -44012>
  %656 = add nsw <2 x i64> %652, <i64 32768, i64 32768>
  %657 = bitcast <2 x i64> %656 to <16 x i8>
  %658 = shufflevector <16 x i8> %657, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %659 = add nsw <2 x i64> %655, <i64 32768, i64 32768>
  %660 = bitcast <2 x i64> %659 to <16 x i8>
  %661 = shufflevector <16 x i8> %660, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %662 = bitcast <16 x i8> %658 to <4 x i32>
  %663 = bitcast <16 x i8> %661 to <4 x i32>
  %664 = shufflevector <4 x i32> %662, <4 x i32> %663, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %665 = shufflevector <4 x i32> %662, <4 x i32> %663, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %666 = shufflevector <4 x i32> %664, <4 x i32> %665, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %667 = bitcast <2 x i64>* %644 to <4 x i32>*
  store <4 x i32> %666, <4 x i32>* %667, align 16
  %668 = mul nsw <2 x i64> %651, <i64 48560, i64 48560>
  %669 = mul nsw <2 x i64> %654, <i64 48560, i64 48560>
  %670 = add nsw <2 x i64> %668, <i64 32768, i64 32768>
  %671 = bitcast <2 x i64> %670 to <16 x i8>
  %672 = shufflevector <16 x i8> %671, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %673 = add nsw <2 x i64> %669, <i64 32768, i64 32768>
  %674 = bitcast <2 x i64> %673 to <16 x i8>
  %675 = shufflevector <16 x i8> %674, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %676 = bitcast <16 x i8> %672 to <4 x i32>
  %677 = bitcast <16 x i8> %675 to <4 x i32>
  %678 = shufflevector <4 x i32> %676, <4 x i32> %677, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %679 = shufflevector <4 x i32> %676, <4 x i32> %677, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %680 = shufflevector <4 x i32> %678, <4 x i32> %679, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %681 = bitcast <2 x i64>* %645 to <4 x i32>*
  store <4 x i32> %680, <4 x i32>* %681, align 16
  %682 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %683 = bitcast <2 x i64>* %682 to <4 x i32>*
  %684 = load <4 x i32>, <4 x i32>* %683, align 16
  %685 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 18
  %686 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 29
  %687 = shufflevector <4 x i32> %684, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %688 = bitcast <4 x i32> %687 to <2 x i64>
  %689 = shufflevector <4 x i32> %684, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %690 = bitcast <4 x i32> %689 to <2 x i64>
  %691 = shl <2 x i64> %688, <i64 32, i64 32>
  %692 = ashr exact <2 x i64> %691, <i64 32, i64 32>
  %693 = mul nsw <2 x i64> %692, <i64 28020, i64 28020>
  %694 = shl <2 x i64> %690, <i64 32, i64 32>
  %695 = ashr exact <2 x i64> %694, <i64 32, i64 32>
  %696 = mul nsw <2 x i64> %695, <i64 28020, i64 28020>
  %697 = add nsw <2 x i64> %693, <i64 32768, i64 32768>
  %698 = bitcast <2 x i64> %697 to <16 x i8>
  %699 = shufflevector <16 x i8> %698, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %700 = add nsw <2 x i64> %696, <i64 32768, i64 32768>
  %701 = bitcast <2 x i64> %700 to <16 x i8>
  %702 = shufflevector <16 x i8> %701, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %703 = bitcast <16 x i8> %699 to <4 x i32>
  %704 = bitcast <16 x i8> %702 to <4 x i32>
  %705 = shufflevector <4 x i32> %703, <4 x i32> %704, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %706 = shufflevector <4 x i32> %703, <4 x i32> %704, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %707 = shufflevector <4 x i32> %705, <4 x i32> %706, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %708 = bitcast <2 x i64>* %685 to <4 x i32>*
  store <4 x i32> %707, <4 x i32>* %708, align 16
  %709 = mul nsw <2 x i64> %692, <i64 59244, i64 59244>
  %710 = mul nsw <2 x i64> %695, <i64 59244, i64 59244>
  %711 = add nsw <2 x i64> %709, <i64 32768, i64 32768>
  %712 = bitcast <2 x i64> %711 to <16 x i8>
  %713 = shufflevector <16 x i8> %712, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %714 = add nsw <2 x i64> %710, <i64 32768, i64 32768>
  %715 = bitcast <2 x i64> %714 to <16 x i8>
  %716 = shufflevector <16 x i8> %715, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %717 = bitcast <16 x i8> %713 to <4 x i32>
  %718 = bitcast <16 x i8> %716 to <4 x i32>
  %719 = shufflevector <4 x i32> %717, <4 x i32> %718, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %720 = shufflevector <4 x i32> %717, <4 x i32> %718, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %721 = shufflevector <4 x i32> %719, <4 x i32> %720, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %722 = bitcast <2 x i64>* %686 to <4 x i32>*
  store <4 x i32> %721, <4 x i32>* %722, align 16
  %723 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %724 = bitcast <2 x i64>* %723 to <4 x i32>*
  %725 = load <4 x i32>, <4 x i32>* %724, align 16
  %726 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 19
  %727 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 28
  %728 = shufflevector <4 x i32> %725, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %729 = bitcast <4 x i32> %728 to <2 x i64>
  %730 = shufflevector <4 x i32> %725, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %731 = bitcast <4 x i32> %730 to <2 x i64>
  %732 = shl <2 x i64> %729, <i64 32, i64 32>
  %733 = ashr exact <2 x i64> %732, <i64 32, i64 32>
  %734 = mul nsw <2 x i64> %733, <i64 -22080, i64 -22080>
  %735 = shl <2 x i64> %731, <i64 32, i64 32>
  %736 = ashr exact <2 x i64> %735, <i64 32, i64 32>
  %737 = mul nsw <2 x i64> %736, <i64 -22080, i64 -22080>
  %738 = add nsw <2 x i64> %734, <i64 32768, i64 32768>
  %739 = bitcast <2 x i64> %738 to <16 x i8>
  %740 = shufflevector <16 x i8> %739, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %741 = add nsw <2 x i64> %737, <i64 32768, i64 32768>
  %742 = bitcast <2 x i64> %741 to <16 x i8>
  %743 = shufflevector <16 x i8> %742, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %744 = bitcast <16 x i8> %740 to <4 x i32>
  %745 = bitcast <16 x i8> %743 to <4 x i32>
  %746 = shufflevector <4 x i32> %744, <4 x i32> %745, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %747 = shufflevector <4 x i32> %744, <4 x i32> %745, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %748 = shufflevector <4 x i32> %746, <4 x i32> %747, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %749 = bitcast <2 x i64>* %726 to <4 x i32>*
  store <4 x i32> %748, <4 x i32>* %749, align 16
  %750 = mul nsw <2 x i64> %733, <i64 61704, i64 61704>
  %751 = mul nsw <2 x i64> %736, <i64 61704, i64 61704>
  %752 = add nsw <2 x i64> %750, <i64 32768, i64 32768>
  %753 = bitcast <2 x i64> %752 to <16 x i8>
  %754 = shufflevector <16 x i8> %753, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %755 = add nsw <2 x i64> %751, <i64 32768, i64 32768>
  %756 = bitcast <2 x i64> %755 to <16 x i8>
  %757 = shufflevector <16 x i8> %756, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %758 = bitcast <16 x i8> %754 to <4 x i32>
  %759 = bitcast <16 x i8> %757 to <4 x i32>
  %760 = shufflevector <4 x i32> %758, <4 x i32> %759, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %761 = shufflevector <4 x i32> %758, <4 x i32> %759, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %762 = shufflevector <4 x i32> %760, <4 x i32> %761, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %763 = bitcast <2 x i64>* %727 to <4 x i32>*
  store <4 x i32> %762, <4 x i32>* %763, align 16
  %764 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %765 = bitcast <2 x i64>* %764 to <4 x i32>*
  %766 = load <4 x i32>, <4 x i32>* %765, align 16
  %767 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 20
  %768 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 27
  %769 = shufflevector <4 x i32> %766, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %770 = bitcast <4 x i32> %769 to <2 x i64>
  %771 = shufflevector <4 x i32> %766, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %772 = bitcast <4 x i32> %771 to <2 x i64>
  %773 = shl <2 x i64> %770, <i64 32, i64 32>
  %774 = ashr exact <2 x i64> %773, <i64 32, i64 32>
  %775 = mul nsw <2 x i64> %774, <i64 15924, i64 15924>
  %776 = shl <2 x i64> %772, <i64 32, i64 32>
  %777 = ashr exact <2 x i64> %776, <i64 32, i64 32>
  %778 = mul nsw <2 x i64> %777, <i64 15924, i64 15924>
  %779 = add nsw <2 x i64> %775, <i64 32768, i64 32768>
  %780 = bitcast <2 x i64> %779 to <16 x i8>
  %781 = shufflevector <16 x i8> %780, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %782 = add nsw <2 x i64> %778, <i64 32768, i64 32768>
  %783 = bitcast <2 x i64> %782 to <16 x i8>
  %784 = shufflevector <16 x i8> %783, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %785 = bitcast <16 x i8> %781 to <4 x i32>
  %786 = bitcast <16 x i8> %784 to <4 x i32>
  %787 = shufflevector <4 x i32> %785, <4 x i32> %786, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %788 = shufflevector <4 x i32> %785, <4 x i32> %786, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %789 = shufflevector <4 x i32> %787, <4 x i32> %788, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %790 = bitcast <2 x i64>* %767 to <4 x i32>*
  store <4 x i32> %789, <4 x i32>* %790, align 16
  %791 = mul nsw <2 x i64> %774, <i64 63572, i64 63572>
  %792 = mul nsw <2 x i64> %777, <i64 63572, i64 63572>
  %793 = add nsw <2 x i64> %791, <i64 32768, i64 32768>
  %794 = bitcast <2 x i64> %793 to <16 x i8>
  %795 = shufflevector <16 x i8> %794, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %796 = add nsw <2 x i64> %792, <i64 32768, i64 32768>
  %797 = bitcast <2 x i64> %796 to <16 x i8>
  %798 = shufflevector <16 x i8> %797, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %799 = bitcast <16 x i8> %795 to <4 x i32>
  %800 = bitcast <16 x i8> %798 to <4 x i32>
  %801 = shufflevector <4 x i32> %799, <4 x i32> %800, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %802 = shufflevector <4 x i32> %799, <4 x i32> %800, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %803 = shufflevector <4 x i32> %801, <4 x i32> %802, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %804 = bitcast <2 x i64>* %768 to <4 x i32>*
  store <4 x i32> %803, <4 x i32>* %804, align 16
  %805 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %806 = bitcast <2 x i64>* %805 to <4 x i32>*
  %807 = load <4 x i32>, <4 x i32>* %806, align 16
  %808 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 21
  %809 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 26
  %810 = shufflevector <4 x i32> %807, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %811 = bitcast <4 x i32> %810 to <2 x i64>
  %812 = shufflevector <4 x i32> %807, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %813 = bitcast <4 x i32> %812 to <2 x i64>
  %814 = shl <2 x i64> %811, <i64 32, i64 32>
  %815 = ashr exact <2 x i64> %814, <i64 32, i64 32>
  %816 = mul nsw <2 x i64> %815, <i64 -33692, i64 -33692>
  %817 = shl <2 x i64> %813, <i64 32, i64 32>
  %818 = ashr exact <2 x i64> %817, <i64 32, i64 32>
  %819 = mul nsw <2 x i64> %818, <i64 -33692, i64 -33692>
  %820 = add nsw <2 x i64> %816, <i64 32768, i64 32768>
  %821 = bitcast <2 x i64> %820 to <16 x i8>
  %822 = shufflevector <16 x i8> %821, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %823 = add nsw <2 x i64> %819, <i64 32768, i64 32768>
  %824 = bitcast <2 x i64> %823 to <16 x i8>
  %825 = shufflevector <16 x i8> %824, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %826 = bitcast <16 x i8> %822 to <4 x i32>
  %827 = bitcast <16 x i8> %825 to <4 x i32>
  %828 = shufflevector <4 x i32> %826, <4 x i32> %827, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %829 = shufflevector <4 x i32> %826, <4 x i32> %827, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %830 = shufflevector <4 x i32> %828, <4 x i32> %829, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %831 = bitcast <2 x i64>* %808 to <4 x i32>*
  store <4 x i32> %830, <4 x i32>* %831, align 16
  %832 = mul nsw <2 x i64> %815, <i64 56212, i64 56212>
  %833 = mul nsw <2 x i64> %818, <i64 56212, i64 56212>
  %834 = add nsw <2 x i64> %832, <i64 32768, i64 32768>
  %835 = bitcast <2 x i64> %834 to <16 x i8>
  %836 = shufflevector <16 x i8> %835, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %837 = add nsw <2 x i64> %833, <i64 32768, i64 32768>
  %838 = bitcast <2 x i64> %837 to <16 x i8>
  %839 = shufflevector <16 x i8> %838, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %840 = bitcast <16 x i8> %836 to <4 x i32>
  %841 = bitcast <16 x i8> %839 to <4 x i32>
  %842 = shufflevector <4 x i32> %840, <4 x i32> %841, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %843 = shufflevector <4 x i32> %840, <4 x i32> %841, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %844 = shufflevector <4 x i32> %842, <4 x i32> %843, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %845 = bitcast <2 x i64>* %809 to <4 x i32>*
  store <4 x i32> %844, <4 x i32>* %845, align 16
  %846 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %847 = bitcast <2 x i64>* %846 to <4 x i32>*
  %848 = load <4 x i32>, <4 x i32>* %847, align 16
  %849 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 22
  %850 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 25
  %851 = shufflevector <4 x i32> %848, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %852 = bitcast <4 x i32> %851 to <2 x i64>
  %853 = shufflevector <4 x i32> %848, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %854 = bitcast <4 x i32> %853 to <2 x i64>
  %855 = shl <2 x i64> %852, <i64 32, i64 32>
  %856 = ashr exact <2 x i64> %855, <i64 32, i64 32>
  %857 = mul nsw <2 x i64> %856, <i64 39040, i64 39040>
  %858 = shl <2 x i64> %854, <i64 32, i64 32>
  %859 = ashr exact <2 x i64> %858, <i64 32, i64 32>
  %860 = mul nsw <2 x i64> %859, <i64 39040, i64 39040>
  %861 = add nsw <2 x i64> %857, <i64 32768, i64 32768>
  %862 = bitcast <2 x i64> %861 to <16 x i8>
  %863 = shufflevector <16 x i8> %862, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %864 = add nsw <2 x i64> %860, <i64 32768, i64 32768>
  %865 = bitcast <2 x i64> %864 to <16 x i8>
  %866 = shufflevector <16 x i8> %865, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %867 = bitcast <16 x i8> %863 to <4 x i32>
  %868 = bitcast <16 x i8> %866 to <4 x i32>
  %869 = shufflevector <4 x i32> %867, <4 x i32> %868, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %870 = shufflevector <4 x i32> %867, <4 x i32> %868, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %871 = shufflevector <4 x i32> %869, <4 x i32> %870, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %872 = bitcast <2 x i64>* %849 to <4 x i32>*
  store <4 x i32> %871, <4 x i32>* %872, align 16
  %873 = mul nsw <2 x i64> %856, <i64 52640, i64 52640>
  %874 = mul nsw <2 x i64> %859, <i64 52640, i64 52640>
  %875 = add nsw <2 x i64> %873, <i64 32768, i64 32768>
  %876 = bitcast <2 x i64> %875 to <16 x i8>
  %877 = shufflevector <16 x i8> %876, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %878 = add nsw <2 x i64> %874, <i64 32768, i64 32768>
  %879 = bitcast <2 x i64> %878 to <16 x i8>
  %880 = shufflevector <16 x i8> %879, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %881 = bitcast <16 x i8> %877 to <4 x i32>
  %882 = bitcast <16 x i8> %880 to <4 x i32>
  %883 = shufflevector <4 x i32> %881, <4 x i32> %882, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %884 = shufflevector <4 x i32> %881, <4 x i32> %882, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %885 = shufflevector <4 x i32> %883, <4 x i32> %884, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %886 = bitcast <2 x i64>* %850 to <4 x i32>*
  store <4 x i32> %885, <4 x i32>* %886, align 16
  %887 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %888 = bitcast <2 x i64>* %887 to <4 x i32>*
  %889 = load <4 x i32>, <4 x i32>* %888, align 16
  %890 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 23
  %891 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 24
  %892 = shufflevector <4 x i32> %889, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %893 = bitcast <4 x i32> %892 to <2 x i64>
  %894 = shufflevector <4 x i32> %889, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %895 = bitcast <4 x i32> %894 to <2 x i64>
  %896 = shl <2 x i64> %893, <i64 32, i64 32>
  %897 = ashr exact <2 x i64> %896, <i64 32, i64 32>
  %898 = mul nsw <2 x i64> %897, <i64 -9616, i64 -9616>
  %899 = shl <2 x i64> %895, <i64 32, i64 32>
  %900 = ashr exact <2 x i64> %899, <i64 32, i64 32>
  %901 = mul nsw <2 x i64> %900, <i64 -9616, i64 -9616>
  %902 = add nsw <2 x i64> %898, <i64 32768, i64 32768>
  %903 = bitcast <2 x i64> %902 to <16 x i8>
  %904 = shufflevector <16 x i8> %903, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %905 = add nsw <2 x i64> %901, <i64 32768, i64 32768>
  %906 = bitcast <2 x i64> %905 to <16 x i8>
  %907 = shufflevector <16 x i8> %906, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %908 = bitcast <16 x i8> %904 to <4 x i32>
  %909 = bitcast <16 x i8> %907 to <4 x i32>
  %910 = shufflevector <4 x i32> %908, <4 x i32> %909, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %911 = shufflevector <4 x i32> %908, <4 x i32> %909, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %912 = shufflevector <4 x i32> %910, <4 x i32> %911, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %913 = bitcast <2 x i64>* %890 to <4 x i32>*
  store <4 x i32> %912, <4 x i32>* %913, align 16
  %914 = mul nsw <2 x i64> %897, <i64 64828, i64 64828>
  %915 = mul nsw <2 x i64> %900, <i64 64828, i64 64828>
  %916 = add nsw <2 x i64> %914, <i64 32768, i64 32768>
  %917 = bitcast <2 x i64> %916 to <16 x i8>
  %918 = shufflevector <16 x i8> %917, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %919 = add nsw <2 x i64> %915, <i64 32768, i64 32768>
  %920 = bitcast <2 x i64> %919 to <16 x i8>
  %921 = shufflevector <16 x i8> %920, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %922 = bitcast <16 x i8> %918 to <4 x i32>
  %923 = bitcast <16 x i8> %921 to <4 x i32>
  %924 = shufflevector <4 x i32> %922, <4 x i32> %923, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %925 = shufflevector <4 x i32> %922, <4 x i32> %923, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %926 = shufflevector <4 x i32> %924, <4 x i32> %925, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %927 = bitcast <2 x i64>* %891 to <4 x i32>*
  store <4 x i32> %926, <4 x i32>* %927, align 16
  %928 = add <4 x i32> %666, %625
  %929 = sub <4 x i32> %625, %666
  %930 = sub <4 x i32> %748, %707
  %931 = add <4 x i32> %748, %707
  %932 = add <4 x i32> %830, %789
  %933 = sub <4 x i32> %789, %830
  %934 = sub <4 x i32> %912, %871
  %935 = add <4 x i32> %912, %871
  %936 = add <4 x i32> %926, %885
  %937 = sub <4 x i32> %926, %885
  %938 = sub <4 x i32> %803, %844
  %939 = add <4 x i32> %844, %803
  %940 = add <4 x i32> %762, %721
  %941 = sub <4 x i32> %762, %721
  %942 = sub <4 x i32> %639, %680
  %943 = add <4 x i32> %680, %639
  store <4 x i32> %928, <4 x i32>* %626, align 16
  store <4 x i32> %943, <4 x i32>* %640, align 16
  %944 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %945 = bitcast <4 x i32> %944 to <2 x i64>
  %946 = shufflevector <4 x i32> %942, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %947 = bitcast <4 x i32> %946 to <2 x i64>
  %948 = shufflevector <4 x i32> %929, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %949 = bitcast <4 x i32> %948 to <2 x i64>
  %950 = shufflevector <4 x i32> %929, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %951 = bitcast <4 x i32> %950 to <2 x i64>
  %952 = shl <2 x i64> %945, <i64 32, i64 32>
  %953 = ashr exact <2 x i64> %952, <i64 32, i64 32>
  %954 = mul nsw <2 x i64> %953, <i64 64276, i64 64276>
  %955 = shl <2 x i64> %947, <i64 32, i64 32>
  %956 = ashr exact <2 x i64> %955, <i64 32, i64 32>
  %957 = mul nsw <2 x i64> %956, <i64 64276, i64 64276>
  %958 = mul nsw <2 x i64> %953, <i64 12784, i64 12784>
  %959 = mul nsw <2 x i64> %956, <i64 12784, i64 12784>
  %960 = shl <2 x i64> %949, <i64 32, i64 32>
  %961 = ashr exact <2 x i64> %960, <i64 32, i64 32>
  %962 = mul nsw <2 x i64> %961, <i64 12784, i64 12784>
  %963 = shl <2 x i64> %951, <i64 32, i64 32>
  %964 = ashr exact <2 x i64> %963, <i64 32, i64 32>
  %965 = mul nsw <2 x i64> %964, <i64 12784, i64 12784>
  %966 = mul nsw <2 x i64> %961, <i64 -64276, i64 -64276>
  %967 = add nsw <2 x i64> %966, <i64 32768, i64 32768>
  %968 = add nsw <2 x i64> %967, %958
  %969 = bitcast <2 x i64> %968 to <16 x i8>
  %970 = shufflevector <16 x i8> %969, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %971 = mul nsw <2 x i64> %964, <i64 -64276, i64 -64276>
  %972 = add nsw <2 x i64> %971, <i64 32768, i64 32768>
  %973 = add nsw <2 x i64> %972, %959
  %974 = bitcast <2 x i64> %973 to <16 x i8>
  %975 = shufflevector <16 x i8> %974, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %976 = add nsw <2 x i64> %962, <i64 32768, i64 32768>
  %977 = add nsw <2 x i64> %976, %954
  %978 = bitcast <2 x i64> %977 to <16 x i8>
  %979 = shufflevector <16 x i8> %978, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %980 = add nsw <2 x i64> %965, <i64 32768, i64 32768>
  %981 = add nsw <2 x i64> %980, %957
  %982 = bitcast <2 x i64> %981 to <16 x i8>
  %983 = shufflevector <16 x i8> %982, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %984 = bitcast <16 x i8> %970 to <4 x i32>
  %985 = bitcast <16 x i8> %975 to <4 x i32>
  %986 = shufflevector <4 x i32> %984, <4 x i32> %985, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %987 = shufflevector <4 x i32> %984, <4 x i32> %985, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %988 = shufflevector <4 x i32> %986, <4 x i32> %987, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %988, <4 x i32>* %667, align 16
  %989 = bitcast <16 x i8> %979 to <4 x i32>
  %990 = bitcast <16 x i8> %983 to <4 x i32>
  %991 = shufflevector <4 x i32> %989, <4 x i32> %990, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %992 = shufflevector <4 x i32> %989, <4 x i32> %990, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %993 = shufflevector <4 x i32> %991, <4 x i32> %992, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %993, <4 x i32>* %681, align 16
  %994 = shufflevector <4 x i32> %941, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %995 = bitcast <4 x i32> %994 to <2 x i64>
  %996 = shufflevector <4 x i32> %941, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %997 = bitcast <4 x i32> %996 to <2 x i64>
  %998 = shufflevector <4 x i32> %930, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %999 = bitcast <4 x i32> %998 to <2 x i64>
  %1000 = shufflevector <4 x i32> %930, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1001 = bitcast <4 x i32> %1000 to <2 x i64>
  %1002 = shl <2 x i64> %995, <i64 32, i64 32>
  %1003 = ashr exact <2 x i64> %1002, <i64 32, i64 32>
  %1004 = mul nsw <2 x i64> %1003, <i64 12784, i64 12784>
  %1005 = shl <2 x i64> %997, <i64 32, i64 32>
  %1006 = ashr exact <2 x i64> %1005, <i64 32, i64 32>
  %1007 = mul nsw <2 x i64> %1006, <i64 12784, i64 12784>
  %1008 = mul nsw <2 x i64> %1003, <i64 -64276, i64 -64276>
  %1009 = mul nsw <2 x i64> %1006, <i64 -64276, i64 -64276>
  %1010 = shl <2 x i64> %999, <i64 32, i64 32>
  %1011 = ashr exact <2 x i64> %1010, <i64 32, i64 32>
  %1012 = mul nsw <2 x i64> %1011, <i64 -64276, i64 -64276>
  %1013 = shl <2 x i64> %1001, <i64 32, i64 32>
  %1014 = ashr exact <2 x i64> %1013, <i64 32, i64 32>
  %1015 = mul nsw <2 x i64> %1014, <i64 -64276, i64 -64276>
  %1016 = mul nsw <2 x i64> %1011, <i64 -12784, i64 -12784>
  %1017 = add nsw <2 x i64> %1016, <i64 32768, i64 32768>
  %1018 = add nsw <2 x i64> %1017, %1008
  %1019 = bitcast <2 x i64> %1018 to <16 x i8>
  %1020 = shufflevector <16 x i8> %1019, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1021 = mul nsw <2 x i64> %1014, <i64 -12784, i64 -12784>
  %1022 = add nsw <2 x i64> %1021, <i64 32768, i64 32768>
  %1023 = add nsw <2 x i64> %1022, %1009
  %1024 = bitcast <2 x i64> %1023 to <16 x i8>
  %1025 = shufflevector <16 x i8> %1024, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1026 = add nsw <2 x i64> %1012, <i64 32768, i64 32768>
  %1027 = add nsw <2 x i64> %1026, %1004
  %1028 = bitcast <2 x i64> %1027 to <16 x i8>
  %1029 = shufflevector <16 x i8> %1028, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1030 = add nsw <2 x i64> %1015, <i64 32768, i64 32768>
  %1031 = add nsw <2 x i64> %1030, %1007
  %1032 = bitcast <2 x i64> %1031 to <16 x i8>
  %1033 = shufflevector <16 x i8> %1032, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1034 = bitcast <16 x i8> %1020 to <4 x i32>
  %1035 = bitcast <16 x i8> %1025 to <4 x i32>
  %1036 = shufflevector <4 x i32> %1034, <4 x i32> %1035, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1037 = shufflevector <4 x i32> %1034, <4 x i32> %1035, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1038 = shufflevector <4 x i32> %1036, <4 x i32> %1037, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1038, <4 x i32>* %708, align 16
  %1039 = bitcast <16 x i8> %1029 to <4 x i32>
  %1040 = bitcast <16 x i8> %1033 to <4 x i32>
  %1041 = shufflevector <4 x i32> %1039, <4 x i32> %1040, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1042 = shufflevector <4 x i32> %1039, <4 x i32> %1040, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1043 = shufflevector <4 x i32> %1041, <4 x i32> %1042, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1043, <4 x i32>* %722, align 16
  store <4 x i32> %931, <4 x i32>* %749, align 16
  store <4 x i32> %932, <4 x i32>* %790, align 16
  %1044 = shufflevector <4 x i32> %938, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1045 = bitcast <4 x i32> %1044 to <2 x i64>
  %1046 = shufflevector <4 x i32> %938, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1047 = bitcast <4 x i32> %1046 to <2 x i64>
  %1048 = shufflevector <4 x i32> %933, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1049 = bitcast <4 x i32> %1048 to <2 x i64>
  %1050 = shufflevector <4 x i32> %933, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1051 = bitcast <4 x i32> %1050 to <2 x i64>
  %1052 = shl <2 x i64> %1045, <i64 32, i64 32>
  %1053 = ashr exact <2 x i64> %1052, <i64 32, i64 32>
  %1054 = mul nsw <2 x i64> %1053, <i64 36408, i64 36408>
  %1055 = shl <2 x i64> %1047, <i64 32, i64 32>
  %1056 = ashr exact <2 x i64> %1055, <i64 32, i64 32>
  %1057 = mul nsw <2 x i64> %1056, <i64 36408, i64 36408>
  %1058 = mul nsw <2 x i64> %1053, <i64 54492, i64 54492>
  %1059 = mul nsw <2 x i64> %1056, <i64 54492, i64 54492>
  %1060 = shl <2 x i64> %1049, <i64 32, i64 32>
  %1061 = ashr exact <2 x i64> %1060, <i64 32, i64 32>
  %1062 = mul nsw <2 x i64> %1061, <i64 54492, i64 54492>
  %1063 = shl <2 x i64> %1051, <i64 32, i64 32>
  %1064 = ashr exact <2 x i64> %1063, <i64 32, i64 32>
  %1065 = mul nsw <2 x i64> %1064, <i64 54492, i64 54492>
  %1066 = mul nsw <2 x i64> %1061, <i64 -36408, i64 -36408>
  %1067 = add nsw <2 x i64> %1066, <i64 32768, i64 32768>
  %1068 = add nsw <2 x i64> %1067, %1058
  %1069 = bitcast <2 x i64> %1068 to <16 x i8>
  %1070 = shufflevector <16 x i8> %1069, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1071 = mul nsw <2 x i64> %1064, <i64 -36408, i64 -36408>
  %1072 = add nsw <2 x i64> %1071, <i64 32768, i64 32768>
  %1073 = add nsw <2 x i64> %1072, %1059
  %1074 = bitcast <2 x i64> %1073 to <16 x i8>
  %1075 = shufflevector <16 x i8> %1074, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1076 = add nsw <2 x i64> %1062, <i64 32768, i64 32768>
  %1077 = add nsw <2 x i64> %1076, %1054
  %1078 = bitcast <2 x i64> %1077 to <16 x i8>
  %1079 = shufflevector <16 x i8> %1078, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1080 = add nsw <2 x i64> %1065, <i64 32768, i64 32768>
  %1081 = add nsw <2 x i64> %1080, %1057
  %1082 = bitcast <2 x i64> %1081 to <16 x i8>
  %1083 = shufflevector <16 x i8> %1082, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1084 = bitcast <16 x i8> %1070 to <4 x i32>
  %1085 = bitcast <16 x i8> %1075 to <4 x i32>
  %1086 = shufflevector <4 x i32> %1084, <4 x i32> %1085, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1087 = shufflevector <4 x i32> %1084, <4 x i32> %1085, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1088 = shufflevector <4 x i32> %1086, <4 x i32> %1087, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1088, <4 x i32>* %831, align 16
  %1089 = bitcast <16 x i8> %1079 to <4 x i32>
  %1090 = bitcast <16 x i8> %1083 to <4 x i32>
  %1091 = shufflevector <4 x i32> %1089, <4 x i32> %1090, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1092 = shufflevector <4 x i32> %1089, <4 x i32> %1090, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1093 = shufflevector <4 x i32> %1091, <4 x i32> %1092, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1093, <4 x i32>* %845, align 16
  %1094 = shufflevector <4 x i32> %937, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1095 = bitcast <4 x i32> %1094 to <2 x i64>
  %1096 = shufflevector <4 x i32> %937, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1097 = bitcast <4 x i32> %1096 to <2 x i64>
  %1098 = shufflevector <4 x i32> %934, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1099 = bitcast <4 x i32> %1098 to <2 x i64>
  %1100 = shufflevector <4 x i32> %934, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1101 = bitcast <4 x i32> %1100 to <2 x i64>
  %1102 = shl <2 x i64> %1095, <i64 32, i64 32>
  %1103 = ashr exact <2 x i64> %1102, <i64 32, i64 32>
  %1104 = mul nsw <2 x i64> %1103, <i64 54492, i64 54492>
  %1105 = shl <2 x i64> %1097, <i64 32, i64 32>
  %1106 = ashr exact <2 x i64> %1105, <i64 32, i64 32>
  %1107 = mul nsw <2 x i64> %1106, <i64 54492, i64 54492>
  %1108 = mul nsw <2 x i64> %1103, <i64 -36408, i64 -36408>
  %1109 = mul nsw <2 x i64> %1106, <i64 -36408, i64 -36408>
  %1110 = shl <2 x i64> %1099, <i64 32, i64 32>
  %1111 = ashr exact <2 x i64> %1110, <i64 32, i64 32>
  %1112 = mul nsw <2 x i64> %1111, <i64 -36408, i64 -36408>
  %1113 = shl <2 x i64> %1101, <i64 32, i64 32>
  %1114 = ashr exact <2 x i64> %1113, <i64 32, i64 32>
  %1115 = mul nsw <2 x i64> %1114, <i64 -36408, i64 -36408>
  %1116 = mul nsw <2 x i64> %1111, <i64 -54492, i64 -54492>
  %1117 = add nsw <2 x i64> %1116, <i64 32768, i64 32768>
  %1118 = add nsw <2 x i64> %1117, %1108
  %1119 = bitcast <2 x i64> %1118 to <16 x i8>
  %1120 = shufflevector <16 x i8> %1119, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1121 = mul nsw <2 x i64> %1114, <i64 -54492, i64 -54492>
  %1122 = add nsw <2 x i64> %1121, <i64 32768, i64 32768>
  %1123 = add nsw <2 x i64> %1122, %1109
  %1124 = bitcast <2 x i64> %1123 to <16 x i8>
  %1125 = shufflevector <16 x i8> %1124, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1126 = add nsw <2 x i64> %1112, <i64 32768, i64 32768>
  %1127 = add nsw <2 x i64> %1126, %1104
  %1128 = bitcast <2 x i64> %1127 to <16 x i8>
  %1129 = shufflevector <16 x i8> %1128, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1130 = add nsw <2 x i64> %1115, <i64 32768, i64 32768>
  %1131 = add nsw <2 x i64> %1130, %1107
  %1132 = bitcast <2 x i64> %1131 to <16 x i8>
  %1133 = shufflevector <16 x i8> %1132, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1134 = bitcast <16 x i8> %1120 to <4 x i32>
  %1135 = bitcast <16 x i8> %1125 to <4 x i32>
  %1136 = shufflevector <4 x i32> %1134, <4 x i32> %1135, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1137 = shufflevector <4 x i32> %1134, <4 x i32> %1135, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1138 = shufflevector <4 x i32> %1136, <4 x i32> %1137, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1138, <4 x i32>* %872, align 16
  %1139 = bitcast <16 x i8> %1129 to <4 x i32>
  %1140 = bitcast <16 x i8> %1133 to <4 x i32>
  %1141 = shufflevector <4 x i32> %1139, <4 x i32> %1140, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1142 = shufflevector <4 x i32> %1139, <4 x i32> %1140, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1143 = shufflevector <4 x i32> %1141, <4 x i32> %1142, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1143, <4 x i32>* %886, align 16
  store <4 x i32> %935, <4 x i32>* %913, align 16
  store <4 x i32> %936, <4 x i32>* %927, align 16
  store <4 x i32> %939, <4 x i32>* %804, align 16
  store <4 x i32> %940, <4 x i32>* %763, align 16
  %1144 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 0
  call fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nonnull %1144, <2 x i64>* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %599) #6
  br label %1145

1145:                                             ; preds = %1145, %1
  %1146 = phi i64 [ 0, %1 ], [ %1162, %1145 ]
  %1147 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1146
  %1148 = bitcast <2 x i64>* %1147 to <4 x i32>*
  %1149 = load <4 x i32>, <4 x i32>* %1148, align 16
  %1150 = shl i64 %1146, 32
  %1151 = sub nuw nsw i64 133143986176, %1150
  %1152 = ashr exact i64 %1151, 32
  %1153 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1152
  %1154 = bitcast <2 x i64>* %1153 to <4 x i32>*
  %1155 = load <4 x i32>, <4 x i32>* %1154, align 16
  %1156 = add <4 x i32> %1155, %1149
  %1157 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1146
  %1158 = bitcast <2 x i64>* %1157 to <4 x i32>*
  store <4 x i32> %1156, <4 x i32>* %1158, align 16
  %1159 = sub <4 x i32> %1149, %1155
  %1160 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1152
  %1161 = bitcast <2 x i64>* %1160 to <4 x i32>*
  store <4 x i32> %1159, <4 x i32>* %1161, align 16
  %1162 = add nuw nsw i64 %1146, 1
  %1163 = icmp eq i64 %1162, 16
  br i1 %1163, label %1164, label %1145

1164:                                             ; preds = %1145
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_34_add_sse4_1(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [32 x <2 x i64>], align 16
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [32 x <2 x i64>], align 16
  %8 = alloca [8 x [32 x <2 x i64>]], align 16
  %9 = alloca [32 x <2 x i64>], align 16
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %229

11:                                               ; preds = %4
  %12 = bitcast [32 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %12) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 512, i1 false)
  %13 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #6
  %14 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %15 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 400, i1 false)
  %16 = bitcast [32 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %16) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 512, i1 false)
  %17 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %18 = bitcast i32* %0 to <4 x i32>*
  %19 = load <4 x i32>, <4 x i32>* %18, align 16
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16
  %23 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %19, <4 x i32> %22) #6
  %24 = bitcast [32 x <2 x i64>]* %6 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %24, align 16
  %25 = getelementptr inbounds i32, i32* %0, i64 32
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 16
  %28 = getelementptr inbounds i32, i32* %0, i64 36
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 16
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %27, <4 x i32> %30) #6
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %33 = getelementptr inbounds i32, i32* %0, i64 64
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 16
  %36 = getelementptr inbounds i32, i32* %0, i64 68
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 16
  %39 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %35, <4 x i32> %38) #6
  %40 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %41 = getelementptr inbounds i32, i32* %0, i64 96
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 16
  %44 = getelementptr inbounds i32, i32* %0, i64 100
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 16
  %47 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %43, <4 x i32> %46) #6
  %48 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %49 = getelementptr inbounds i32, i32* %0, i64 128
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 16
  %52 = getelementptr inbounds i32, i32* %0, i64 132
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 16
  %55 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %51, <4 x i32> %54) #6
  %56 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %57 = getelementptr inbounds i32, i32* %0, i64 160
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16
  %60 = getelementptr inbounds i32, i32* %0, i64 164
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 16
  %63 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %59, <4 x i32> %62) #6
  %64 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %65 = getelementptr inbounds i32, i32* %0, i64 192
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16
  %68 = getelementptr inbounds i32, i32* %0, i64 196
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %70) #6
  %72 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %73 = getelementptr inbounds i32, i32* %0, i64 224
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 16
  %76 = getelementptr inbounds i32, i32* %0, i64 228
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %78) #6
  %80 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %81 = shufflevector <8 x i16> %23, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = shufflevector <8 x i16> %39, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = shufflevector <8 x i16> %55, <8 x i16> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %84 = shufflevector <8 x i16> %71, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %85 = shufflevector <8 x i16> %23, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %39, <8 x i16> %47, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %55, <8 x i16> %63, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = shufflevector <8 x i16> %71, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %89 = bitcast <8 x i16> %81 to <4 x i32>
  %90 = bitcast <8 x i16> %82 to <4 x i32>
  %91 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = bitcast <8 x i16> %83 to <4 x i32>
  %94 = bitcast <8 x i16> %84 to <4 x i32>
  %95 = shufflevector <4 x i32> %93, <4 x i32> %94, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = bitcast <8 x i16> %85 to <4 x i32>
  %98 = bitcast <8 x i16> %86 to <4 x i32>
  %99 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = bitcast <8 x i16> %87 to <4 x i32>
  %102 = bitcast <8 x i16> %88 to <4 x i32>
  %103 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %106 = bitcast <4 x i32> %105 to <2 x i64>
  %107 = shufflevector <4 x i32> %93, <4 x i32> %94, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %108 = bitcast <4 x i32> %107 to <2 x i64>
  %109 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = shufflevector <2 x i64> %92, <2 x i64> %96, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %113, <2 x i64>* %17, align 16
  %114 = shufflevector <2 x i64> %92, <2 x i64> %96, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %114, <2 x i64>* %32, align 16
  %115 = shufflevector <2 x i64> %106, <2 x i64> %108, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %115, <2 x i64>* %40, align 16
  %116 = shufflevector <2 x i64> %106, <2 x i64> %108, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %116, <2 x i64>* %48, align 16
  %117 = shufflevector <2 x i64> %100, <2 x i64> %104, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %117, <2 x i64>* %56, align 16
  %118 = shufflevector <2 x i64> %100, <2 x i64> %104, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %118, <2 x i64>* %64, align 16
  %119 = shufflevector <2 x i64> %110, <2 x i64> %112, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %119, <2 x i64>* %72, align 16
  %120 = shufflevector <2 x i64> %110, <2 x i64> %112, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %120, <2 x i64>* %80, align 16
  %121 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %5, i64 0, i64 0
  call void @idct32_34_8x32_ssse3(<2 x i64>* nonnull %17, <2 x i64>* nonnull %121) #6
  %122 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 0
  %123 = sext i32 %2 to i64
  br label %124

124:                                              ; preds = %11, %224
  %125 = phi i64 [ 0, %11 ], [ %226, %224 ]
  %126 = phi i16* [ %1, %11 ], [ %225, %224 ]
  %127 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %5, i64 0, i64 %125
  %128 = bitcast <2 x i64>* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 16
  %130 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 1
  %131 = bitcast <2 x i64>* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 16
  %133 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 2
  %135 = bitcast <2 x i64>* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 16
  %137 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 3
  %138 = bitcast <2 x i64>* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 16
  %140 = shufflevector <8 x i16> %136, <8 x i16> %139, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %141 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 4
  %142 = bitcast <2 x i64>* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 16
  %144 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 5
  %145 = bitcast <2 x i64>* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = shufflevector <8 x i16> %143, <8 x i16> %146, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %148 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 6
  %149 = bitcast <2 x i64>* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 7
  %152 = bitcast <2 x i64>* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 16
  %154 = shufflevector <8 x i16> %150, <8 x i16> %153, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %155 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %156 = shufflevector <8 x i16> %136, <8 x i16> %139, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %157 = shufflevector <8 x i16> %143, <8 x i16> %146, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %158 = shufflevector <8 x i16> %150, <8 x i16> %153, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %159 = bitcast <8 x i16> %133 to <4 x i32>
  %160 = bitcast <8 x i16> %140 to <4 x i32>
  %161 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = bitcast <8 x i16> %147 to <4 x i32>
  %164 = bitcast <8 x i16> %154 to <4 x i32>
  %165 = shufflevector <4 x i32> %163, <4 x i32> %164, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %166 = bitcast <4 x i32> %165 to <2 x i64>
  %167 = bitcast <8 x i16> %155 to <4 x i32>
  %168 = bitcast <8 x i16> %156 to <4 x i32>
  %169 = shufflevector <4 x i32> %167, <4 x i32> %168, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = bitcast <8 x i16> %157 to <4 x i32>
  %172 = bitcast <8 x i16> %158 to <4 x i32>
  %173 = shufflevector <4 x i32> %171, <4 x i32> %172, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <4 x i32> %163, <4 x i32> %164, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <4 x i32> %167, <4 x i32> %168, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %180 = bitcast <4 x i32> %179 to <2 x i64>
  %181 = shufflevector <4 x i32> %171, <4 x i32> %172, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = shufflevector <2 x i64> %162, <2 x i64> %166, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %183, <2 x i64>* %17, align 16
  %184 = shufflevector <2 x i64> %162, <2 x i64> %166, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %184, <2 x i64>* %32, align 16
  %185 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %185, <2 x i64>* %40, align 16
  %186 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %186, <2 x i64>* %48, align 16
  %187 = shufflevector <2 x i64> %170, <2 x i64> %174, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %187, <2 x i64>* %56, align 16
  %188 = shufflevector <2 x i64> %170, <2 x i64> %174, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %188, <2 x i64>* %64, align 16
  %189 = shufflevector <2 x i64> %180, <2 x i64> %182, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %189, <2 x i64>* %72, align 16
  %190 = shufflevector <2 x i64> %180, <2 x i64> %182, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %190, <2 x i64>* %80, align 16
  call void @idct32_34_8x32_ssse3(<2 x i64>* nonnull %17, <2 x i64>* nonnull %122) #6
  br label %191

191:                                              ; preds = %191, %124
  %192 = phi i64 [ 0, %124 ], [ %222, %191 ]
  %193 = mul nsw i64 %192, %123
  %194 = getelementptr inbounds i16, i16* %126, i64 %193
  %195 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %192
  %196 = bitcast <2 x i64>* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 16
  %198 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %197, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %199 = ashr <8 x i16> %198, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %200 = bitcast i16* %194 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 16
  %202 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %201, <8 x i16> %199) #6
  %203 = icmp sgt <8 x i16> %202, zeroinitializer
  %204 = select <8 x i1> %203, <8 x i16> %202, <8 x i16> zeroinitializer
  %205 = icmp slt <8 x i16> %204, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %206 = select <8 x i1> %205, <8 x i16> %204, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %206, <8 x i16>* %200, align 16
  %207 = or i64 %192, 1
  %208 = mul nsw i64 %207, %123
  %209 = getelementptr inbounds i16, i16* %126, i64 %208
  %210 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %207
  %211 = bitcast <2 x i64>* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 16
  %213 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %212, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #6
  %214 = ashr <8 x i16> %213, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %215 = bitcast i16* %209 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 16
  %217 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %216, <8 x i16> %214) #6
  %218 = icmp sgt <8 x i16> %217, zeroinitializer
  %219 = select <8 x i1> %218, <8 x i16> %217, <8 x i16> zeroinitializer
  %220 = icmp slt <8 x i16> %219, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %221 = select <8 x i1> %220, <8 x i16> %219, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %221, <8 x i16>* %215, align 16
  %222 = add nuw nsw i64 %192, 2
  %223 = icmp eq i64 %222, 32
  br i1 %223, label %224, label %191

224:                                              ; preds = %191
  %225 = getelementptr inbounds i16, i16* %126, i64 8
  %226 = add nuw nsw i64 %125, 8
  %227 = icmp ult i64 %226, 32
  br i1 %227, label %124, label %228

228:                                              ; preds = %224
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %12) #6
  br label %510

229:                                              ; preds = %4
  %230 = bitcast [8 x [32 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %230) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %230, i8 -86, i64 4096, i1 false)
  %231 = bitcast [32 x <2 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %231) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %231, i8 -86, i64 512, i1 false)
  br label %250

232:                                              ; preds = %250
  %233 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 0
  %234 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 1
  %235 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 2
  %236 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 3
  %237 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 4
  %238 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 5
  %239 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 6
  %240 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 7
  %241 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 8
  %242 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 9
  %243 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 10
  %244 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 11
  %245 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 12
  %246 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 13
  %247 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 14
  %248 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 15
  %249 = sext i32 %2 to i64
  br label %381

250:                                              ; preds = %250, %229
  %251 = phi i64 [ 0, %229 ], [ %379, %250 ]
  %252 = phi i32* [ %0, %229 ], [ %378, %250 ]
  %253 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 0
  %254 = bitcast i32* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 16
  store <2 x i64> %255, <2 x i64>* %253, align 16
  %256 = getelementptr inbounds i32, i32* %252, i64 4
  %257 = bitcast i32* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 16
  %259 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 1
  store <2 x i64> %258, <2 x i64>* %259, align 16
  %260 = getelementptr inbounds i32, i32* %252, i64 32
  %261 = bitcast i32* %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 16
  %263 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 2
  store <2 x i64> %262, <2 x i64>* %263, align 16
  %264 = getelementptr inbounds i32, i32* %252, i64 36
  %265 = bitcast i32* %264 to <2 x i64>*
  %266 = load <2 x i64>, <2 x i64>* %265, align 16
  %267 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 3
  store <2 x i64> %266, <2 x i64>* %267, align 16
  %268 = getelementptr inbounds i32, i32* %252, i64 64
  %269 = bitcast i32* %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 16
  %271 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 4
  store <2 x i64> %270, <2 x i64>* %271, align 16
  %272 = getelementptr inbounds i32, i32* %252, i64 68
  %273 = bitcast i32* %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 16
  %275 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 5
  store <2 x i64> %274, <2 x i64>* %275, align 16
  %276 = getelementptr inbounds i32, i32* %252, i64 96
  %277 = bitcast i32* %276 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 16
  %279 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 6
  store <2 x i64> %278, <2 x i64>* %279, align 16
  %280 = getelementptr inbounds i32, i32* %252, i64 100
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 16
  %283 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 7
  %284 = bitcast <2 x i64> %255 to <4 x i32>
  %285 = bitcast <2 x i64> %262 to <4 x i32>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %287 = bitcast <4 x i32> %286 to <2 x i64>
  %288 = bitcast <2 x i64> %270 to <4 x i32>
  %289 = bitcast <2 x i64> %278 to <4 x i32>
  %290 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %295 = bitcast <4 x i32> %294 to <2 x i64>
  %296 = bitcast <2 x i64> %258 to <4 x i32>
  %297 = bitcast <2 x i64> %266 to <4 x i32>
  %298 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = bitcast <2 x i64> %274 to <4 x i32>
  %301 = shufflevector <4 x i32> %300, <4 x i32> %282, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %302 = bitcast <4 x i32> %301 to <2 x i64>
  %303 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %304 = bitcast <4 x i32> %303 to <2 x i64>
  %305 = shufflevector <4 x i32> %300, <4 x i32> %282, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = shufflevector <2 x i64> %287, <2 x i64> %291, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %307, <2 x i64>* %253, align 16
  %308 = shufflevector <2 x i64> %287, <2 x i64> %291, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %308, <2 x i64>* %259, align 16
  %309 = shufflevector <2 x i64> %293, <2 x i64> %295, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %309, <2 x i64>* %263, align 16
  %310 = shufflevector <2 x i64> %293, <2 x i64> %295, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %310, <2 x i64>* %267, align 16
  %311 = shufflevector <2 x i64> %299, <2 x i64> %302, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %311, <2 x i64>* %271, align 16
  %312 = shufflevector <2 x i64> %299, <2 x i64> %302, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %312, <2 x i64>* %275, align 16
  %313 = shufflevector <2 x i64> %304, <2 x i64> %306, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %313, <2 x i64>* %279, align 16
  %314 = shufflevector <2 x i64> %304, <2 x i64> %306, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %314, <2 x i64>* %283, align 16
  %315 = getelementptr inbounds i32, i32* %252, i64 8
  %316 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 8
  %317 = bitcast i32* %315 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 16
  store <2 x i64> %318, <2 x i64>* %316, align 16
  %319 = getelementptr inbounds i32, i32* %252, i64 12
  %320 = bitcast i32* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 16
  %322 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 9
  store <2 x i64> %321, <2 x i64>* %322, align 16
  %323 = getelementptr inbounds i32, i32* %252, i64 40
  %324 = bitcast i32* %323 to <2 x i64>*
  %325 = load <2 x i64>, <2 x i64>* %324, align 16
  %326 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 10
  store <2 x i64> %325, <2 x i64>* %326, align 16
  %327 = getelementptr inbounds i32, i32* %252, i64 44
  %328 = bitcast i32* %327 to <2 x i64>*
  %329 = load <2 x i64>, <2 x i64>* %328, align 16
  %330 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 11
  store <2 x i64> %329, <2 x i64>* %330, align 16
  %331 = getelementptr inbounds i32, i32* %252, i64 72
  %332 = bitcast i32* %331 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 16
  %334 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 12
  store <2 x i64> %333, <2 x i64>* %334, align 16
  %335 = getelementptr inbounds i32, i32* %252, i64 76
  %336 = bitcast i32* %335 to <2 x i64>*
  %337 = load <2 x i64>, <2 x i64>* %336, align 16
  %338 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 13
  store <2 x i64> %337, <2 x i64>* %338, align 16
  %339 = getelementptr inbounds i32, i32* %252, i64 104
  %340 = bitcast i32* %339 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %340, align 16
  %342 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 14
  store <2 x i64> %341, <2 x i64>* %342, align 16
  %343 = getelementptr inbounds i32, i32* %252, i64 108
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16
  %346 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 15
  %347 = bitcast <2 x i64> %318 to <4 x i32>
  %348 = bitcast <2 x i64> %325 to <4 x i32>
  %349 = shufflevector <4 x i32> %347, <4 x i32> %348, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = bitcast <2 x i64> %333 to <4 x i32>
  %352 = bitcast <2 x i64> %341 to <4 x i32>
  %353 = shufflevector <4 x i32> %351, <4 x i32> %352, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = shufflevector <4 x i32> %347, <4 x i32> %348, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = shufflevector <4 x i32> %351, <4 x i32> %352, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %358 = bitcast <4 x i32> %357 to <2 x i64>
  %359 = bitcast <2 x i64> %321 to <4 x i32>
  %360 = bitcast <2 x i64> %329 to <4 x i32>
  %361 = shufflevector <4 x i32> %359, <4 x i32> %360, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %362 = bitcast <4 x i32> %361 to <2 x i64>
  %363 = bitcast <2 x i64> %337 to <4 x i32>
  %364 = shufflevector <4 x i32> %363, <4 x i32> %345, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %365 = bitcast <4 x i32> %364 to <2 x i64>
  %366 = shufflevector <4 x i32> %359, <4 x i32> %360, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = shufflevector <4 x i32> %363, <4 x i32> %345, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %369 = bitcast <4 x i32> %368 to <2 x i64>
  %370 = shufflevector <2 x i64> %350, <2 x i64> %354, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %370, <2 x i64>* %316, align 16
  %371 = shufflevector <2 x i64> %350, <2 x i64> %354, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %371, <2 x i64>* %322, align 16
  %372 = shufflevector <2 x i64> %356, <2 x i64> %358, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %372, <2 x i64>* %326, align 16
  %373 = shufflevector <2 x i64> %356, <2 x i64> %358, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %373, <2 x i64>* %330, align 16
  %374 = shufflevector <2 x i64> %362, <2 x i64> %365, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %374, <2 x i64>* %334, align 16
  %375 = shufflevector <2 x i64> %362, <2 x i64> %365, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %375, <2 x i64>* %338, align 16
  %376 = shufflevector <2 x i64> %367, <2 x i64> %369, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %376, <2 x i64>* %342, align 16
  %377 = shufflevector <2 x i64> %367, <2 x i64> %369, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %377, <2 x i64>* %346, align 16
  call fastcc void @highbd_idct32_34_4x32(<2 x i64>* %253)
  %378 = getelementptr inbounds i32, i32* %252, i64 128
  %379 = add nuw nsw i64 %251, 1
  %380 = icmp eq i64 %379, 4
  br i1 %380, label %232, label %250

381:                                              ; preds = %232, %505
  %382 = phi i64 [ 0, %232 ], [ %507, %505 ]
  %383 = phi i16* [ %1, %232 ], [ %506, %505 ]
  %384 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 0, i64 %382
  %385 = bitcast <2 x i64>* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 16
  %387 = getelementptr inbounds <2 x i64>, <2 x i64>* %384, i64 1
  %388 = bitcast <2 x i64>* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 16
  %390 = shufflevector <4 x i32> %386, <4 x i32> %389, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %391 = bitcast <4 x i32> %390 to <2 x i64>
  %392 = getelementptr inbounds <2 x i64>, <2 x i64>* %384, i64 2
  %393 = bitcast <2 x i64>* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 16
  %395 = getelementptr inbounds <2 x i64>, <2 x i64>* %384, i64 3
  %396 = bitcast <2 x i64>* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 16
  %398 = shufflevector <4 x i32> %394, <4 x i32> %397, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %399 = bitcast <4 x i32> %398 to <2 x i64>
  %400 = shufflevector <4 x i32> %386, <4 x i32> %389, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %401 = bitcast <4 x i32> %400 to <2 x i64>
  %402 = shufflevector <4 x i32> %394, <4 x i32> %397, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = shufflevector <2 x i64> %391, <2 x i64> %399, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %404, <2 x i64>* %233, align 16
  %405 = shufflevector <2 x i64> %391, <2 x i64> %399, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %405, <2 x i64>* %234, align 16
  %406 = shufflevector <2 x i64> %401, <2 x i64> %403, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %406, <2 x i64>* %235, align 16
  %407 = shufflevector <2 x i64> %401, <2 x i64> %403, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %407, <2 x i64>* %236, align 16
  %408 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 1, i64 %382
  %409 = bitcast <2 x i64>* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 16
  %411 = getelementptr inbounds <2 x i64>, <2 x i64>* %408, i64 1
  %412 = bitcast <2 x i64>* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 16
  %414 = shufflevector <4 x i32> %410, <4 x i32> %413, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = getelementptr inbounds <2 x i64>, <2 x i64>* %408, i64 2
  %417 = bitcast <2 x i64>* %416 to <4 x i32>*
  %418 = load <4 x i32>, <4 x i32>* %417, align 16
  %419 = getelementptr inbounds <2 x i64>, <2 x i64>* %408, i64 3
  %420 = bitcast <2 x i64>* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 16
  %422 = shufflevector <4 x i32> %418, <4 x i32> %421, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %423 = bitcast <4 x i32> %422 to <2 x i64>
  %424 = shufflevector <4 x i32> %410, <4 x i32> %413, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = shufflevector <4 x i32> %418, <4 x i32> %421, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %427 = bitcast <4 x i32> %426 to <2 x i64>
  %428 = shufflevector <2 x i64> %415, <2 x i64> %423, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %428, <2 x i64>* %237, align 16
  %429 = shufflevector <2 x i64> %415, <2 x i64> %423, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %429, <2 x i64>* %238, align 16
  %430 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %430, <2 x i64>* %239, align 16
  %431 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %431, <2 x i64>* %240, align 16
  %432 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 2, i64 %382
  %433 = bitcast <2 x i64>* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 16
  %435 = getelementptr inbounds <2 x i64>, <2 x i64>* %432, i64 1
  %436 = bitcast <2 x i64>* %435 to <4 x i32>*
  %437 = load <4 x i32>, <4 x i32>* %436, align 16
  %438 = shufflevector <4 x i32> %434, <4 x i32> %437, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %439 = bitcast <4 x i32> %438 to <2 x i64>
  %440 = getelementptr inbounds <2 x i64>, <2 x i64>* %432, i64 2
  %441 = bitcast <2 x i64>* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 16
  %443 = getelementptr inbounds <2 x i64>, <2 x i64>* %432, i64 3
  %444 = bitcast <2 x i64>* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 16
  %446 = shufflevector <4 x i32> %442, <4 x i32> %445, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %447 = bitcast <4 x i32> %446 to <2 x i64>
  %448 = shufflevector <4 x i32> %434, <4 x i32> %437, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %449 = bitcast <4 x i32> %448 to <2 x i64>
  %450 = shufflevector <4 x i32> %442, <4 x i32> %445, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %451 = bitcast <4 x i32> %450 to <2 x i64>
  %452 = shufflevector <2 x i64> %439, <2 x i64> %447, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %452, <2 x i64>* %241, align 16
  %453 = shufflevector <2 x i64> %439, <2 x i64> %447, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %453, <2 x i64>* %242, align 16
  %454 = shufflevector <2 x i64> %449, <2 x i64> %451, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %454, <2 x i64>* %243, align 16
  %455 = shufflevector <2 x i64> %449, <2 x i64> %451, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %455, <2 x i64>* %244, align 16
  %456 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 3, i64 %382
  %457 = bitcast <2 x i64>* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 16
  %459 = getelementptr inbounds <2 x i64>, <2 x i64>* %456, i64 1
  %460 = bitcast <2 x i64>* %459 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 16
  %462 = shufflevector <4 x i32> %458, <4 x i32> %461, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %463 = bitcast <4 x i32> %462 to <2 x i64>
  %464 = getelementptr inbounds <2 x i64>, <2 x i64>* %456, i64 2
  %465 = bitcast <2 x i64>* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 16
  %467 = getelementptr inbounds <2 x i64>, <2 x i64>* %456, i64 3
  %468 = bitcast <2 x i64>* %467 to <4 x i32>*
  %469 = load <4 x i32>, <4 x i32>* %468, align 16
  %470 = shufflevector <4 x i32> %466, <4 x i32> %469, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = shufflevector <4 x i32> %458, <4 x i32> %461, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %473 = bitcast <4 x i32> %472 to <2 x i64>
  %474 = shufflevector <4 x i32> %466, <4 x i32> %469, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %475 = bitcast <4 x i32> %474 to <2 x i64>
  %476 = shufflevector <2 x i64> %463, <2 x i64> %471, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %476, <2 x i64>* %245, align 16
  %477 = shufflevector <2 x i64> %463, <2 x i64> %471, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %477, <2 x i64>* %246, align 16
  %478 = shufflevector <2 x i64> %473, <2 x i64> %475, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %478, <2 x i64>* %247, align 16
  %479 = shufflevector <2 x i64> %473, <2 x i64> %475, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %479, <2 x i64>* %248, align 16
  call fastcc void @highbd_idct32_34_4x32(<2 x i64>* nonnull %233)
  %480 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #6
  %481 = add <8 x i16> %480, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %482

482:                                              ; preds = %482, %381
  %483 = phi i64 [ 0, %381 ], [ %503, %482 ]
  %484 = mul nsw i64 %483, %249
  %485 = getelementptr inbounds i16, i16* %383, i64 %484
  %486 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %483
  %487 = bitcast <2 x i64>* %486 to <4 x i32>*
  %488 = load <4 x i32>, <4 x i32>* %487, align 16
  %489 = add <4 x i32> %488, <i32 32, i32 32, i32 32, i32 32>
  %490 = ashr <4 x i32> %489, <i32 6, i32 6, i32 6, i32 6>
  %491 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %490, <4 x i32> %490) #6
  %492 = bitcast i16* %485 to i64*
  %493 = load i64, i64* %492, align 1
  %494 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %493, i32 0
  %495 = bitcast <2 x i64> %494 to <8 x i16>
  %496 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %495, <8 x i16> %491) #6
  %497 = icmp sgt <8 x i16> %496, zeroinitializer
  %498 = select <8 x i1> %497, <8 x i16> %496, <8 x i16> zeroinitializer
  %499 = icmp slt <8 x i16> %498, %481
  %500 = select <8 x i1> %499, <8 x i16> %498, <8 x i16> %481
  %501 = bitcast <8 x i16> %500 to <2 x i64>
  %502 = extractelement <2 x i64> %501, i32 0
  store i64 %502, i64* %492, align 1
  %503 = add nuw nsw i64 %483, 1
  %504 = icmp eq i64 %503, 32
  br i1 %504, label %505, label %482

505:                                              ; preds = %482
  %506 = getelementptr inbounds i16, i16* %383, i64 4
  %507 = add nuw nsw i64 %382, 4
  %508 = icmp ult i64 %507, 32
  br i1 %508, label %381, label %509

509:                                              ; preds = %505
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %231) #6
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %230) #6
  br label %510

510:                                              ; preds = %509, %228
  ret void
}

declare void @idct32_34_8x32_ssse3(<2 x i64>*, <2 x i64>*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_34_4x32(<2 x i64>* nocapture) unnamed_addr #0 {
  %2 = alloca [32 x <2 x i64>], align 16
  %3 = alloca [32 x <2 x i64>], align 16
  %4 = bitcast [32 x <2 x i64>]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 0
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %12 = bitcast <4 x i32> %11 to <2 x i64>
  %13 = shl <2 x i64> %10, <i64 32, i64 32>
  %14 = ashr exact <2 x i64> %13, <i64 32, i64 32>
  %15 = mul nsw <2 x i64> %14, <i64 12784, i64 12784>
  %16 = shl <2 x i64> %12, <i64 32, i64 32>
  %17 = ashr exact <2 x i64> %16, <i64 32, i64 32>
  %18 = mul nsw <2 x i64> %17, <i64 12784, i64 12784>
  %19 = add nsw <2 x i64> %15, <i64 32768, i64 32768>
  %20 = bitcast <2 x i64> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %22 = add nsw <2 x i64> %18, <i64 32768, i64 32768>
  %23 = bitcast <2 x i64> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %25 = bitcast <16 x i8> %21 to <4 x i32>
  %26 = bitcast <16 x i8> %24 to <4 x i32>
  %27 = shufflevector <4 x i32> %25, <4 x i32> %26, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %28 = shufflevector <4 x i32> %25, <4 x i32> %26, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %29 = shufflevector <4 x i32> %27, <4 x i32> %28, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %30 = mul nsw <2 x i64> %14, <i64 64276, i64 64276>
  %31 = mul nsw <2 x i64> %17, <i64 64276, i64 64276>
  %32 = add nsw <2 x i64> %30, <i64 32768, i64 32768>
  %33 = bitcast <2 x i64> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %35 = add nsw <2 x i64> %31, <i64 32768, i64 32768>
  %36 = bitcast <2 x i64> %35 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %38 = bitcast <16 x i8> %34 to <4 x i32>
  %39 = bitcast <16 x i8> %37 to <4 x i32>
  %40 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %41 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %42 = shufflevector <4 x i32> %40, <4 x i32> %41, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %43 = bitcast <2 x i64>* %0 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %46 = bitcast <4 x i32> %45 to <2 x i64>
  %47 = shufflevector <4 x i32> %44, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %48 = bitcast <4 x i32> %47 to <2 x i64>
  %49 = shl <2 x i64> %46, <i64 32, i64 32>
  %50 = ashr exact <2 x i64> %49, <i64 32, i64 32>
  %51 = mul nsw <2 x i64> %50, <i64 46340, i64 46340>
  %52 = shl <2 x i64> %48, <i64 32, i64 32>
  %53 = ashr exact <2 x i64> %52, <i64 32, i64 32>
  %54 = mul nsw <2 x i64> %53, <i64 46340, i64 46340>
  %55 = add nsw <2 x i64> %51, <i64 32768, i64 32768>
  %56 = bitcast <2 x i64> %55 to <16 x i8>
  %57 = shufflevector <16 x i8> %56, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %58 = add nsw <2 x i64> %54, <i64 32768, i64 32768>
  %59 = bitcast <2 x i64> %58 to <16 x i8>
  %60 = shufflevector <16 x i8> %59, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %61 = bitcast <16 x i8> %57 to <4 x i32>
  %62 = bitcast <16 x i8> %60 to <4 x i32>
  %63 = shufflevector <4 x i32> %61, <4 x i32> %62, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %64 = shufflevector <4 x i32> %61, <4 x i32> %62, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %65 = shufflevector <4 x i32> %63, <4 x i32> %64, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %66 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = shufflevector <4 x i32> %29, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shl <2 x i64> %67, <i64 32, i64 32>
  %75 = ashr exact <2 x i64> %74, <i64 32, i64 32>
  %76 = mul nsw <2 x i64> %75, <i64 46340, i64 46340>
  %77 = shl <2 x i64> %69, <i64 32, i64 32>
  %78 = ashr exact <2 x i64> %77, <i64 32, i64 32>
  %79 = mul nsw <2 x i64> %78, <i64 46340, i64 46340>
  %80 = shl <2 x i64> %71, <i64 32, i64 32>
  %81 = ashr exact <2 x i64> %80, <i64 32, i64 32>
  %82 = mul nsw <2 x i64> %81, <i64 46340, i64 46340>
  %83 = shl <2 x i64> %73, <i64 32, i64 32>
  %84 = ashr exact <2 x i64> %83, <i64 32, i64 32>
  %85 = mul nsw <2 x i64> %84, <i64 46340, i64 46340>
  %86 = add nsw <2 x i64> %76, <i64 32768, i64 32768>
  %87 = sub nsw <2 x i64> %86, %82
  %88 = bitcast <2 x i64> %87 to <16 x i8>
  %89 = shufflevector <16 x i8> %88, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %90 = add nsw <2 x i64> %79, <i64 32768, i64 32768>
  %91 = sub nsw <2 x i64> %90, %85
  %92 = bitcast <2 x i64> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %94 = add nsw <2 x i64> %86, %82
  %95 = bitcast <2 x i64> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %97 = add nsw <2 x i64> %90, %85
  %98 = bitcast <2 x i64> %97 to <16 x i8>
  %99 = shufflevector <16 x i8> %98, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %100 = bitcast <16 x i8> %89 to <4 x i32>
  %101 = bitcast <16 x i8> %93 to <4 x i32>
  %102 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %103 = shufflevector <4 x i32> %100, <4 x i32> %101, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %104 = shufflevector <4 x i32> %102, <4 x i32> %103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %105 = bitcast <16 x i8> %96 to <4 x i32>
  %106 = bitcast <16 x i8> %99 to <4 x i32>
  %107 = shufflevector <4 x i32> %105, <4 x i32> %106, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %108 = shufflevector <4 x i32> %105, <4 x i32> %106, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %109 = shufflevector <4 x i32> %107, <4 x i32> %108, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %110 = add <4 x i32> %65, %42
  %111 = add <4 x i32> %109, %65
  %112 = add <4 x i32> %104, %65
  %113 = add <4 x i32> %65, %29
  %114 = sub <4 x i32> %65, %29
  %115 = sub <4 x i32> %65, %104
  %116 = sub <4 x i32> %65, %109
  %117 = sub <4 x i32> %65, %42
  %118 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %119 = bitcast <2 x i64>* %118 to <4 x i32>*
  %120 = load <4 x i32>, <4 x i32>* %119, align 16
  %121 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %122 = bitcast <4 x i32> %121 to <2 x i64>
  %123 = shufflevector <4 x i32> %120, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %124 = bitcast <4 x i32> %123 to <2 x i64>
  %125 = shl <2 x i64> %122, <i64 32, i64 32>
  %126 = ashr exact <2 x i64> %125, <i64 32, i64 32>
  %127 = mul nsw <2 x i64> %126, <i64 6424, i64 6424>
  %128 = shl <2 x i64> %124, <i64 32, i64 32>
  %129 = ashr exact <2 x i64> %128, <i64 32, i64 32>
  %130 = mul nsw <2 x i64> %129, <i64 6424, i64 6424>
  %131 = add nsw <2 x i64> %127, <i64 32768, i64 32768>
  %132 = bitcast <2 x i64> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %134 = add nsw <2 x i64> %130, <i64 32768, i64 32768>
  %135 = bitcast <2 x i64> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %137 = bitcast <16 x i8> %133 to <4 x i32>
  %138 = bitcast <16 x i8> %136 to <4 x i32>
  %139 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %140 = shufflevector <4 x i32> %137, <4 x i32> %138, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %141 = shufflevector <4 x i32> %139, <4 x i32> %140, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %142 = mul nsw <2 x i64> %126, <i64 65220, i64 65220>
  %143 = mul nsw <2 x i64> %129, <i64 65220, i64 65220>
  %144 = add nsw <2 x i64> %142, <i64 32768, i64 32768>
  %145 = bitcast <2 x i64> %144 to <16 x i8>
  %146 = shufflevector <16 x i8> %145, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %147 = add nsw <2 x i64> %143, <i64 32768, i64 32768>
  %148 = bitcast <2 x i64> %147 to <16 x i8>
  %149 = shufflevector <16 x i8> %148, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %150 = bitcast <16 x i8> %146 to <4 x i32>
  %151 = bitcast <16 x i8> %149 to <4 x i32>
  %152 = shufflevector <4 x i32> %150, <4 x i32> %151, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %153 = shufflevector <4 x i32> %150, <4 x i32> %151, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %154 = shufflevector <4 x i32> %152, <4 x i32> %153, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %155 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %156 = bitcast <2 x i64>* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = shufflevector <4 x i32> %157, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %159 = bitcast <4 x i32> %158 to <2 x i64>
  %160 = shufflevector <4 x i32> %157, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %161 = bitcast <4 x i32> %160 to <2 x i64>
  %162 = shl <2 x i64> %159, <i64 32, i64 32>
  %163 = ashr exact <2 x i64> %162, <i64 32, i64 32>
  %164 = mul nsw <2 x i64> %163, <i64 -19024, i64 -19024>
  %165 = shl <2 x i64> %161, <i64 32, i64 32>
  %166 = ashr exact <2 x i64> %165, <i64 32, i64 32>
  %167 = mul nsw <2 x i64> %166, <i64 -19024, i64 -19024>
  %168 = add nsw <2 x i64> %164, <i64 32768, i64 32768>
  %169 = bitcast <2 x i64> %168 to <16 x i8>
  %170 = shufflevector <16 x i8> %169, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %171 = add nsw <2 x i64> %167, <i64 32768, i64 32768>
  %172 = bitcast <2 x i64> %171 to <16 x i8>
  %173 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %174 = bitcast <16 x i8> %170 to <4 x i32>
  %175 = bitcast <16 x i8> %173 to <4 x i32>
  %176 = shufflevector <4 x i32> %174, <4 x i32> %175, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %177 = shufflevector <4 x i32> %174, <4 x i32> %175, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %178 = shufflevector <4 x i32> %176, <4 x i32> %177, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %179 = mul nsw <2 x i64> %163, <i64 62716, i64 62716>
  %180 = mul nsw <2 x i64> %166, <i64 62716, i64 62716>
  %181 = add nsw <2 x i64> %179, <i64 32768, i64 32768>
  %182 = bitcast <2 x i64> %181 to <16 x i8>
  %183 = shufflevector <16 x i8> %182, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %184 = add nsw <2 x i64> %180, <i64 32768, i64 32768>
  %185 = bitcast <2 x i64> %184 to <16 x i8>
  %186 = shufflevector <16 x i8> %185, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %187 = bitcast <16 x i8> %183 to <4 x i32>
  %188 = bitcast <16 x i8> %186 to <4 x i32>
  %189 = shufflevector <4 x i32> %187, <4 x i32> %188, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %190 = shufflevector <4 x i32> %187, <4 x i32> %188, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %191 = shufflevector <4 x i32> %189, <4 x i32> %190, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %192 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %193 = bitcast <4 x i32> %192 to <2 x i64>
  %194 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %195 = bitcast <4 x i32> %194 to <2 x i64>
  %196 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %197 = bitcast <4 x i32> %196 to <2 x i64>
  %198 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %199 = bitcast <4 x i32> %198 to <2 x i64>
  %200 = shl <2 x i64> %193, <i64 32, i64 32>
  %201 = ashr exact <2 x i64> %200, <i64 32, i64 32>
  %202 = mul nsw <2 x i64> %201, <i64 60548, i64 60548>
  %203 = shl <2 x i64> %195, <i64 32, i64 32>
  %204 = ashr exact <2 x i64> %203, <i64 32, i64 32>
  %205 = mul nsw <2 x i64> %204, <i64 60548, i64 60548>
  %206 = mul nsw <2 x i64> %201, <i64 25080, i64 25080>
  %207 = mul nsw <2 x i64> %204, <i64 25080, i64 25080>
  %208 = shl <2 x i64> %197, <i64 32, i64 32>
  %209 = ashr exact <2 x i64> %208, <i64 32, i64 32>
  %210 = mul nsw <2 x i64> %209, <i64 25080, i64 25080>
  %211 = shl <2 x i64> %199, <i64 32, i64 32>
  %212 = ashr exact <2 x i64> %211, <i64 32, i64 32>
  %213 = mul nsw <2 x i64> %212, <i64 25080, i64 25080>
  %214 = add nsw <2 x i64> %206, <i64 32768, i64 32768>
  %215 = mul nsw <2 x i64> %209, <i64 -60548, i64 -60548>
  %216 = add nsw <2 x i64> %214, %215
  %217 = bitcast <2 x i64> %216 to <16 x i8>
  %218 = shufflevector <16 x i8> %217, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %219 = add nsw <2 x i64> %207, <i64 32768, i64 32768>
  %220 = mul nsw <2 x i64> %212, <i64 -60548, i64 -60548>
  %221 = add nsw <2 x i64> %219, %220
  %222 = bitcast <2 x i64> %221 to <16 x i8>
  %223 = shufflevector <16 x i8> %222, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %224 = add nsw <2 x i64> %202, <i64 32768, i64 32768>
  %225 = add nsw <2 x i64> %224, %210
  %226 = bitcast <2 x i64> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %228 = add nsw <2 x i64> %205, <i64 32768, i64 32768>
  %229 = add nsw <2 x i64> %228, %213
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %232 = bitcast <16 x i8> %218 to <4 x i32>
  %233 = bitcast <16 x i8> %223 to <4 x i32>
  %234 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %235 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = bitcast <16 x i8> %227 to <4 x i32>
  %238 = bitcast <16 x i8> %231 to <4 x i32>
  %239 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %240 = shufflevector <4 x i32> %237, <4 x i32> %238, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %241 = shufflevector <4 x i32> %239, <4 x i32> %240, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %242 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %243 = bitcast <4 x i32> %242 to <2 x i64>
  %244 = shufflevector <4 x i32> %191, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %245 = bitcast <4 x i32> %244 to <2 x i64>
  %246 = shufflevector <4 x i32> %178, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = shufflevector <4 x i32> %178, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shl <2 x i64> %243, <i64 32, i64 32>
  %251 = ashr exact <2 x i64> %250, <i64 32, i64 32>
  %252 = mul nsw <2 x i64> %251, <i64 25080, i64 25080>
  %253 = shl <2 x i64> %245, <i64 32, i64 32>
  %254 = ashr exact <2 x i64> %253, <i64 32, i64 32>
  %255 = mul nsw <2 x i64> %254, <i64 25080, i64 25080>
  %256 = mul nsw <2 x i64> %251, <i64 -60548, i64 -60548>
  %257 = mul nsw <2 x i64> %254, <i64 -60548, i64 -60548>
  %258 = shl <2 x i64> %247, <i64 32, i64 32>
  %259 = ashr exact <2 x i64> %258, <i64 32, i64 32>
  %260 = mul nsw <2 x i64> %259, <i64 -60548, i64 -60548>
  %261 = shl <2 x i64> %249, <i64 32, i64 32>
  %262 = ashr exact <2 x i64> %261, <i64 32, i64 32>
  %263 = mul nsw <2 x i64> %262, <i64 -60548, i64 -60548>
  %264 = add nsw <2 x i64> %256, <i64 32768, i64 32768>
  %265 = mul nsw <2 x i64> %259, <i64 -25080, i64 -25080>
  %266 = add nsw <2 x i64> %264, %265
  %267 = bitcast <2 x i64> %266 to <16 x i8>
  %268 = shufflevector <16 x i8> %267, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %269 = add nsw <2 x i64> %257, <i64 32768, i64 32768>
  %270 = mul nsw <2 x i64> %262, <i64 -25080, i64 -25080>
  %271 = add nsw <2 x i64> %269, %270
  %272 = bitcast <2 x i64> %271 to <16 x i8>
  %273 = shufflevector <16 x i8> %272, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %274 = add nsw <2 x i64> %252, <i64 32768, i64 32768>
  %275 = add nsw <2 x i64> %274, %260
  %276 = bitcast <2 x i64> %275 to <16 x i8>
  %277 = shufflevector <16 x i8> %276, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %278 = add nsw <2 x i64> %255, <i64 32768, i64 32768>
  %279 = add nsw <2 x i64> %278, %263
  %280 = bitcast <2 x i64> %279 to <16 x i8>
  %281 = shufflevector <16 x i8> %280, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %282 = bitcast <16 x i8> %268 to <4 x i32>
  %283 = bitcast <16 x i8> %273 to <4 x i32>
  %284 = shufflevector <4 x i32> %282, <4 x i32> %283, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %285 = shufflevector <4 x i32> %282, <4 x i32> %283, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %287 = bitcast <16 x i8> %277 to <4 x i32>
  %288 = bitcast <16 x i8> %281 to <4 x i32>
  %289 = shufflevector <4 x i32> %287, <4 x i32> %288, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %290 = shufflevector <4 x i32> %287, <4 x i32> %288, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %291 = shufflevector <4 x i32> %289, <4 x i32> %290, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %292 = add <4 x i32> %178, %141
  %293 = add <4 x i32> %286, %236
  %294 = sub <4 x i32> %236, %286
  %295 = sub <4 x i32> %141, %178
  %296 = sub <4 x i32> %154, %191
  %297 = sub <4 x i32> %241, %291
  %298 = add <4 x i32> %291, %241
  %299 = add <4 x i32> %191, %154
  %300 = shufflevector <4 x i32> %297, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %301 = bitcast <4 x i32> %300 to <2 x i64>
  %302 = shufflevector <4 x i32> %297, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %303 = bitcast <4 x i32> %302 to <2 x i64>
  %304 = shufflevector <4 x i32> %294, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %305 = bitcast <4 x i32> %304 to <2 x i64>
  %306 = shufflevector <4 x i32> %294, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %307 = bitcast <4 x i32> %306 to <2 x i64>
  %308 = shl <2 x i64> %301, <i64 32, i64 32>
  %309 = ashr exact <2 x i64> %308, <i64 32, i64 32>
  %310 = mul nsw <2 x i64> %309, <i64 46340, i64 46340>
  %311 = shl <2 x i64> %303, <i64 32, i64 32>
  %312 = ashr exact <2 x i64> %311, <i64 32, i64 32>
  %313 = mul nsw <2 x i64> %312, <i64 46340, i64 46340>
  %314 = shl <2 x i64> %305, <i64 32, i64 32>
  %315 = ashr exact <2 x i64> %314, <i64 32, i64 32>
  %316 = mul nsw <2 x i64> %315, <i64 46340, i64 46340>
  %317 = shl <2 x i64> %307, <i64 32, i64 32>
  %318 = ashr exact <2 x i64> %317, <i64 32, i64 32>
  %319 = mul nsw <2 x i64> %318, <i64 46340, i64 46340>
  %320 = add nsw <2 x i64> %310, <i64 32768, i64 32768>
  %321 = sub nsw <2 x i64> %320, %316
  %322 = bitcast <2 x i64> %321 to <16 x i8>
  %323 = shufflevector <16 x i8> %322, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %324 = add nsw <2 x i64> %313, <i64 32768, i64 32768>
  %325 = sub nsw <2 x i64> %324, %319
  %326 = bitcast <2 x i64> %325 to <16 x i8>
  %327 = shufflevector <16 x i8> %326, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %328 = add nsw <2 x i64> %320, %316
  %329 = bitcast <2 x i64> %328 to <16 x i8>
  %330 = shufflevector <16 x i8> %329, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %331 = add nsw <2 x i64> %324, %319
  %332 = bitcast <2 x i64> %331 to <16 x i8>
  %333 = shufflevector <16 x i8> %332, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %334 = bitcast <16 x i8> %323 to <4 x i32>
  %335 = bitcast <16 x i8> %327 to <4 x i32>
  %336 = shufflevector <4 x i32> %334, <4 x i32> %335, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %337 = shufflevector <4 x i32> %334, <4 x i32> %335, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %338 = shufflevector <4 x i32> %336, <4 x i32> %337, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %339 = bitcast <16 x i8> %330 to <4 x i32>
  %340 = bitcast <16 x i8> %333 to <4 x i32>
  %341 = shufflevector <4 x i32> %339, <4 x i32> %340, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %342 = shufflevector <4 x i32> %339, <4 x i32> %340, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %343 = shufflevector <4 x i32> %341, <4 x i32> %342, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %344 = shufflevector <4 x i32> %296, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %345 = bitcast <4 x i32> %344 to <2 x i64>
  %346 = shufflevector <4 x i32> %296, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %347 = bitcast <4 x i32> %346 to <2 x i64>
  %348 = shufflevector <4 x i32> %295, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %349 = bitcast <4 x i32> %348 to <2 x i64>
  %350 = shufflevector <4 x i32> %295, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = shl <2 x i64> %345, <i64 32, i64 32>
  %353 = ashr exact <2 x i64> %352, <i64 32, i64 32>
  %354 = mul nsw <2 x i64> %353, <i64 46340, i64 46340>
  %355 = shl <2 x i64> %347, <i64 32, i64 32>
  %356 = ashr exact <2 x i64> %355, <i64 32, i64 32>
  %357 = mul nsw <2 x i64> %356, <i64 46340, i64 46340>
  %358 = shl <2 x i64> %349, <i64 32, i64 32>
  %359 = ashr exact <2 x i64> %358, <i64 32, i64 32>
  %360 = mul nsw <2 x i64> %359, <i64 46340, i64 46340>
  %361 = shl <2 x i64> %351, <i64 32, i64 32>
  %362 = ashr exact <2 x i64> %361, <i64 32, i64 32>
  %363 = mul nsw <2 x i64> %362, <i64 46340, i64 46340>
  %364 = add nsw <2 x i64> %354, <i64 32768, i64 32768>
  %365 = sub nsw <2 x i64> %364, %360
  %366 = bitcast <2 x i64> %365 to <16 x i8>
  %367 = shufflevector <16 x i8> %366, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %368 = add nsw <2 x i64> %357, <i64 32768, i64 32768>
  %369 = sub nsw <2 x i64> %368, %363
  %370 = bitcast <2 x i64> %369 to <16 x i8>
  %371 = shufflevector <16 x i8> %370, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %372 = add nsw <2 x i64> %364, %360
  %373 = bitcast <2 x i64> %372 to <16 x i8>
  %374 = shufflevector <16 x i8> %373, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %375 = add nsw <2 x i64> %368, %363
  %376 = bitcast <2 x i64> %375 to <16 x i8>
  %377 = shufflevector <16 x i8> %376, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %378 = bitcast <16 x i8> %367 to <4 x i32>
  %379 = bitcast <16 x i8> %371 to <4 x i32>
  %380 = shufflevector <4 x i32> %378, <4 x i32> %379, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %381 = shufflevector <4 x i32> %378, <4 x i32> %379, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %382 = shufflevector <4 x i32> %380, <4 x i32> %381, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %383 = bitcast <16 x i8> %374 to <4 x i32>
  %384 = bitcast <16 x i8> %377 to <4 x i32>
  %385 = shufflevector <4 x i32> %383, <4 x i32> %384, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %386 = shufflevector <4 x i32> %383, <4 x i32> %384, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %387 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %388 = add <4 x i32> %299, %110
  %389 = bitcast [32 x <2 x i64>]* %3 to <4 x i32>*
  store <4 x i32> %388, <4 x i32>* %389, align 16
  %390 = sub <4 x i32> %110, %299
  %391 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 15
  %392 = bitcast <2 x i64>* %391 to <4 x i32>*
  store <4 x i32> %390, <4 x i32>* %392, align 16
  %393 = add <4 x i32> %298, %111
  %394 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 1
  %395 = bitcast <2 x i64>* %394 to <4 x i32>*
  store <4 x i32> %393, <4 x i32>* %395, align 16
  %396 = sub <4 x i32> %111, %298
  %397 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 14
  %398 = bitcast <2 x i64>* %397 to <4 x i32>*
  store <4 x i32> %396, <4 x i32>* %398, align 16
  %399 = add <4 x i32> %343, %112
  %400 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 2
  %401 = bitcast <2 x i64>* %400 to <4 x i32>*
  store <4 x i32> %399, <4 x i32>* %401, align 16
  %402 = sub <4 x i32> %112, %343
  %403 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 13
  %404 = bitcast <2 x i64>* %403 to <4 x i32>*
  store <4 x i32> %402, <4 x i32>* %404, align 16
  %405 = add <4 x i32> %387, %113
  %406 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 3
  %407 = bitcast <2 x i64>* %406 to <4 x i32>*
  store <4 x i32> %405, <4 x i32>* %407, align 16
  %408 = sub <4 x i32> %113, %387
  %409 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 12
  %410 = bitcast <2 x i64>* %409 to <4 x i32>*
  store <4 x i32> %408, <4 x i32>* %410, align 16
  %411 = add <4 x i32> %382, %114
  %412 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 4
  %413 = bitcast <2 x i64>* %412 to <4 x i32>*
  store <4 x i32> %411, <4 x i32>* %413, align 16
  %414 = sub <4 x i32> %114, %382
  %415 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 11
  %416 = bitcast <2 x i64>* %415 to <4 x i32>*
  store <4 x i32> %414, <4 x i32>* %416, align 16
  %417 = add <4 x i32> %338, %115
  %418 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 5
  %419 = bitcast <2 x i64>* %418 to <4 x i32>*
  store <4 x i32> %417, <4 x i32>* %419, align 16
  %420 = sub <4 x i32> %115, %338
  %421 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 10
  %422 = bitcast <2 x i64>* %421 to <4 x i32>*
  store <4 x i32> %420, <4 x i32>* %422, align 16
  %423 = add <4 x i32> %293, %116
  %424 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 6
  %425 = bitcast <2 x i64>* %424 to <4 x i32>*
  store <4 x i32> %423, <4 x i32>* %425, align 16
  %426 = sub <4 x i32> %116, %293
  %427 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 9
  %428 = bitcast <2 x i64>* %427 to <4 x i32>*
  store <4 x i32> %426, <4 x i32>* %428, align 16
  %429 = add <4 x i32> %292, %117
  %430 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 7
  %431 = bitcast <2 x i64>* %430 to <4 x i32>*
  store <4 x i32> %429, <4 x i32>* %431, align 16
  %432 = sub <4 x i32> %117, %292
  %433 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 8
  %434 = bitcast <2 x i64>* %433 to <4 x i32>*
  store <4 x i32> %432, <4 x i32>* %434, align 16
  %435 = bitcast [32 x <2 x i64>]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %435) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %435, i8 -86, i64 496, i1 false) #6
  %436 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %437 = bitcast <2 x i64>* %436 to <4 x i32>*
  %438 = load <4 x i32>, <4 x i32>* %437, align 16
  %439 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 16
  %440 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 31
  %441 = shufflevector <4 x i32> %438, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %442 = bitcast <4 x i32> %441 to <2 x i64>
  %443 = shufflevector <4 x i32> %438, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %444 = bitcast <4 x i32> %443 to <2 x i64>
  %445 = shl <2 x i64> %442, <i64 32, i64 32>
  %446 = ashr exact <2 x i64> %445, <i64 32, i64 32>
  %447 = mul nsw <2 x i64> %446, <i64 3216, i64 3216>
  %448 = shl <2 x i64> %444, <i64 32, i64 32>
  %449 = ashr exact <2 x i64> %448, <i64 32, i64 32>
  %450 = mul nsw <2 x i64> %449, <i64 3216, i64 3216>
  %451 = add nsw <2 x i64> %447, <i64 32768, i64 32768>
  %452 = bitcast <2 x i64> %451 to <16 x i8>
  %453 = shufflevector <16 x i8> %452, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %454 = add nsw <2 x i64> %450, <i64 32768, i64 32768>
  %455 = bitcast <2 x i64> %454 to <16 x i8>
  %456 = shufflevector <16 x i8> %455, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %457 = bitcast <16 x i8> %453 to <4 x i32>
  %458 = bitcast <16 x i8> %456 to <4 x i32>
  %459 = shufflevector <4 x i32> %457, <4 x i32> %458, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %460 = shufflevector <4 x i32> %457, <4 x i32> %458, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %461 = shufflevector <4 x i32> %459, <4 x i32> %460, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %462 = bitcast <2 x i64>* %439 to <4 x i32>*
  store <4 x i32> %461, <4 x i32>* %462, align 16
  %463 = mul nsw <2 x i64> %446, <i64 65456, i64 65456>
  %464 = mul nsw <2 x i64> %449, <i64 65456, i64 65456>
  %465 = add nsw <2 x i64> %463, <i64 32768, i64 32768>
  %466 = bitcast <2 x i64> %465 to <16 x i8>
  %467 = shufflevector <16 x i8> %466, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %468 = add nsw <2 x i64> %464, <i64 32768, i64 32768>
  %469 = bitcast <2 x i64> %468 to <16 x i8>
  %470 = shufflevector <16 x i8> %469, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %471 = bitcast <16 x i8> %467 to <4 x i32>
  %472 = bitcast <16 x i8> %470 to <4 x i32>
  %473 = shufflevector <4 x i32> %471, <4 x i32> %472, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %474 = shufflevector <4 x i32> %471, <4 x i32> %472, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %475 = shufflevector <4 x i32> %473, <4 x i32> %474, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %476 = bitcast <2 x i64>* %440 to <4 x i32>*
  store <4 x i32> %475, <4 x i32>* %476, align 16
  %477 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %478 = bitcast <2 x i64>* %477 to <4 x i32>*
  %479 = load <4 x i32>, <4 x i32>* %478, align 16
  %480 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 19
  %481 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 28
  %482 = shufflevector <4 x i32> %479, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %483 = bitcast <4 x i32> %482 to <2 x i64>
  %484 = shufflevector <4 x i32> %479, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %485 = bitcast <4 x i32> %484 to <2 x i64>
  %486 = shl <2 x i64> %483, <i64 32, i64 32>
  %487 = ashr exact <2 x i64> %486, <i64 32, i64 32>
  %488 = mul nsw <2 x i64> %487, <i64 -22080, i64 -22080>
  %489 = shl <2 x i64> %485, <i64 32, i64 32>
  %490 = ashr exact <2 x i64> %489, <i64 32, i64 32>
  %491 = mul nsw <2 x i64> %490, <i64 -22080, i64 -22080>
  %492 = add nsw <2 x i64> %488, <i64 32768, i64 32768>
  %493 = bitcast <2 x i64> %492 to <16 x i8>
  %494 = shufflevector <16 x i8> %493, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %495 = add nsw <2 x i64> %491, <i64 32768, i64 32768>
  %496 = bitcast <2 x i64> %495 to <16 x i8>
  %497 = shufflevector <16 x i8> %496, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %498 = bitcast <16 x i8> %494 to <4 x i32>
  %499 = bitcast <16 x i8> %497 to <4 x i32>
  %500 = shufflevector <4 x i32> %498, <4 x i32> %499, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %501 = shufflevector <4 x i32> %498, <4 x i32> %499, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %502 = shufflevector <4 x i32> %500, <4 x i32> %501, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %503 = bitcast <2 x i64>* %480 to <4 x i32>*
  store <4 x i32> %502, <4 x i32>* %503, align 16
  %504 = mul nsw <2 x i64> %487, <i64 61704, i64 61704>
  %505 = mul nsw <2 x i64> %490, <i64 61704, i64 61704>
  %506 = add nsw <2 x i64> %504, <i64 32768, i64 32768>
  %507 = bitcast <2 x i64> %506 to <16 x i8>
  %508 = shufflevector <16 x i8> %507, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %509 = add nsw <2 x i64> %505, <i64 32768, i64 32768>
  %510 = bitcast <2 x i64> %509 to <16 x i8>
  %511 = shufflevector <16 x i8> %510, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %512 = bitcast <16 x i8> %508 to <4 x i32>
  %513 = bitcast <16 x i8> %511 to <4 x i32>
  %514 = shufflevector <4 x i32> %512, <4 x i32> %513, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %515 = shufflevector <4 x i32> %512, <4 x i32> %513, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %516 = shufflevector <4 x i32> %514, <4 x i32> %515, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %517 = bitcast <2 x i64>* %481 to <4 x i32>*
  store <4 x i32> %516, <4 x i32>* %517, align 16
  %518 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %519 = bitcast <2 x i64>* %518 to <4 x i32>*
  %520 = load <4 x i32>, <4 x i32>* %519, align 16
  %521 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 20
  %522 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 27
  %523 = shufflevector <4 x i32> %520, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %524 = bitcast <4 x i32> %523 to <2 x i64>
  %525 = shufflevector <4 x i32> %520, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %526 = bitcast <4 x i32> %525 to <2 x i64>
  %527 = shl <2 x i64> %524, <i64 32, i64 32>
  %528 = ashr exact <2 x i64> %527, <i64 32, i64 32>
  %529 = mul nsw <2 x i64> %528, <i64 15924, i64 15924>
  %530 = shl <2 x i64> %526, <i64 32, i64 32>
  %531 = ashr exact <2 x i64> %530, <i64 32, i64 32>
  %532 = mul nsw <2 x i64> %531, <i64 15924, i64 15924>
  %533 = add nsw <2 x i64> %529, <i64 32768, i64 32768>
  %534 = bitcast <2 x i64> %533 to <16 x i8>
  %535 = shufflevector <16 x i8> %534, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %536 = add nsw <2 x i64> %532, <i64 32768, i64 32768>
  %537 = bitcast <2 x i64> %536 to <16 x i8>
  %538 = shufflevector <16 x i8> %537, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %539 = bitcast <16 x i8> %535 to <4 x i32>
  %540 = bitcast <16 x i8> %538 to <4 x i32>
  %541 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %542 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %543 = shufflevector <4 x i32> %541, <4 x i32> %542, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %544 = bitcast <2 x i64>* %521 to <4 x i32>*
  store <4 x i32> %543, <4 x i32>* %544, align 16
  %545 = mul nsw <2 x i64> %528, <i64 63572, i64 63572>
  %546 = mul nsw <2 x i64> %531, <i64 63572, i64 63572>
  %547 = add nsw <2 x i64> %545, <i64 32768, i64 32768>
  %548 = bitcast <2 x i64> %547 to <16 x i8>
  %549 = shufflevector <16 x i8> %548, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %550 = add nsw <2 x i64> %546, <i64 32768, i64 32768>
  %551 = bitcast <2 x i64> %550 to <16 x i8>
  %552 = shufflevector <16 x i8> %551, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %553 = bitcast <16 x i8> %549 to <4 x i32>
  %554 = bitcast <16 x i8> %552 to <4 x i32>
  %555 = shufflevector <4 x i32> %553, <4 x i32> %554, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %556 = shufflevector <4 x i32> %553, <4 x i32> %554, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %557 = shufflevector <4 x i32> %555, <4 x i32> %556, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %558 = bitcast <2 x i64>* %522 to <4 x i32>*
  store <4 x i32> %557, <4 x i32>* %558, align 16
  %559 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %560 = bitcast <2 x i64>* %559 to <4 x i32>*
  %561 = load <4 x i32>, <4 x i32>* %560, align 16
  %562 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 23
  %563 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 24
  %564 = shufflevector <4 x i32> %561, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %565 = bitcast <4 x i32> %564 to <2 x i64>
  %566 = shufflevector <4 x i32> %561, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %567 = bitcast <4 x i32> %566 to <2 x i64>
  %568 = shl <2 x i64> %565, <i64 32, i64 32>
  %569 = ashr exact <2 x i64> %568, <i64 32, i64 32>
  %570 = mul nsw <2 x i64> %569, <i64 -9616, i64 -9616>
  %571 = shl <2 x i64> %567, <i64 32, i64 32>
  %572 = ashr exact <2 x i64> %571, <i64 32, i64 32>
  %573 = mul nsw <2 x i64> %572, <i64 -9616, i64 -9616>
  %574 = add nsw <2 x i64> %570, <i64 32768, i64 32768>
  %575 = bitcast <2 x i64> %574 to <16 x i8>
  %576 = shufflevector <16 x i8> %575, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %577 = add nsw <2 x i64> %573, <i64 32768, i64 32768>
  %578 = bitcast <2 x i64> %577 to <16 x i8>
  %579 = shufflevector <16 x i8> %578, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %580 = bitcast <16 x i8> %576 to <4 x i32>
  %581 = bitcast <16 x i8> %579 to <4 x i32>
  %582 = shufflevector <4 x i32> %580, <4 x i32> %581, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %583 = shufflevector <4 x i32> %580, <4 x i32> %581, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %584 = shufflevector <4 x i32> %582, <4 x i32> %583, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %585 = bitcast <2 x i64>* %562 to <4 x i32>*
  store <4 x i32> %584, <4 x i32>* %585, align 16
  %586 = mul nsw <2 x i64> %569, <i64 64828, i64 64828>
  %587 = mul nsw <2 x i64> %572, <i64 64828, i64 64828>
  %588 = add nsw <2 x i64> %586, <i64 32768, i64 32768>
  %589 = bitcast <2 x i64> %588 to <16 x i8>
  %590 = shufflevector <16 x i8> %589, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %591 = add nsw <2 x i64> %587, <i64 32768, i64 32768>
  %592 = bitcast <2 x i64> %591 to <16 x i8>
  %593 = shufflevector <16 x i8> %592, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %594 = bitcast <16 x i8> %590 to <4 x i32>
  %595 = bitcast <16 x i8> %593 to <4 x i32>
  %596 = shufflevector <4 x i32> %594, <4 x i32> %595, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %597 = shufflevector <4 x i32> %594, <4 x i32> %595, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %598 = shufflevector <4 x i32> %596, <4 x i32> %597, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %599 = bitcast <2 x i64>* %563 to <4 x i32>*
  store <4 x i32> %598, <4 x i32>* %599, align 16
  %600 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 17
  %601 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 30
  %602 = shufflevector <4 x i32> %475, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %603 = bitcast <4 x i32> %602 to <2 x i64>
  %604 = shufflevector <4 x i32> %475, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %605 = bitcast <4 x i32> %604 to <2 x i64>
  %606 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %607 = bitcast <4 x i32> %606 to <2 x i64>
  %608 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %609 = bitcast <4 x i32> %608 to <2 x i64>
  %610 = shl <2 x i64> %603, <i64 32, i64 32>
  %611 = ashr exact <2 x i64> %610, <i64 32, i64 32>
  %612 = mul nsw <2 x i64> %611, <i64 64276, i64 64276>
  %613 = shl <2 x i64> %605, <i64 32, i64 32>
  %614 = ashr exact <2 x i64> %613, <i64 32, i64 32>
  %615 = mul nsw <2 x i64> %614, <i64 64276, i64 64276>
  %616 = mul nsw <2 x i64> %611, <i64 12784, i64 12784>
  %617 = mul nsw <2 x i64> %614, <i64 12784, i64 12784>
  %618 = shl <2 x i64> %607, <i64 32, i64 32>
  %619 = ashr exact <2 x i64> %618, <i64 32, i64 32>
  %620 = mul nsw <2 x i64> %619, <i64 12784, i64 12784>
  %621 = shl <2 x i64> %609, <i64 32, i64 32>
  %622 = ashr exact <2 x i64> %621, <i64 32, i64 32>
  %623 = mul nsw <2 x i64> %622, <i64 12784, i64 12784>
  %624 = mul nsw <2 x i64> %619, <i64 -64276, i64 -64276>
  %625 = add nsw <2 x i64> %624, <i64 32768, i64 32768>
  %626 = add nsw <2 x i64> %625, %616
  %627 = bitcast <2 x i64> %626 to <16 x i8>
  %628 = shufflevector <16 x i8> %627, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %629 = mul nsw <2 x i64> %622, <i64 -64276, i64 -64276>
  %630 = add nsw <2 x i64> %629, <i64 32768, i64 32768>
  %631 = add nsw <2 x i64> %630, %617
  %632 = bitcast <2 x i64> %631 to <16 x i8>
  %633 = shufflevector <16 x i8> %632, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %634 = add nsw <2 x i64> %620, <i64 32768, i64 32768>
  %635 = add nsw <2 x i64> %634, %612
  %636 = bitcast <2 x i64> %635 to <16 x i8>
  %637 = shufflevector <16 x i8> %636, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %638 = add nsw <2 x i64> %623, <i64 32768, i64 32768>
  %639 = add nsw <2 x i64> %638, %615
  %640 = bitcast <2 x i64> %639 to <16 x i8>
  %641 = shufflevector <16 x i8> %640, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %642 = bitcast <16 x i8> %628 to <4 x i32>
  %643 = bitcast <16 x i8> %633 to <4 x i32>
  %644 = shufflevector <4 x i32> %642, <4 x i32> %643, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %645 = shufflevector <4 x i32> %642, <4 x i32> %643, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %646 = shufflevector <4 x i32> %644, <4 x i32> %645, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %647 = bitcast <2 x i64>* %600 to <4 x i32>*
  store <4 x i32> %646, <4 x i32>* %647, align 16
  %648 = bitcast <16 x i8> %637 to <4 x i32>
  %649 = bitcast <16 x i8> %641 to <4 x i32>
  %650 = shufflevector <4 x i32> %648, <4 x i32> %649, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %651 = shufflevector <4 x i32> %648, <4 x i32> %649, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %652 = shufflevector <4 x i32> %650, <4 x i32> %651, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %653 = bitcast <2 x i64>* %601 to <4 x i32>*
  store <4 x i32> %652, <4 x i32>* %653, align 16
  %654 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 18
  %655 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 29
  %656 = shufflevector <4 x i32> %516, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %657 = bitcast <4 x i32> %656 to <2 x i64>
  %658 = shufflevector <4 x i32> %516, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %659 = bitcast <4 x i32> %658 to <2 x i64>
  %660 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %661 = bitcast <4 x i32> %660 to <2 x i64>
  %662 = shufflevector <4 x i32> %502, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %663 = bitcast <4 x i32> %662 to <2 x i64>
  %664 = shl <2 x i64> %657, <i64 32, i64 32>
  %665 = ashr exact <2 x i64> %664, <i64 32, i64 32>
  %666 = mul nsw <2 x i64> %665, <i64 12784, i64 12784>
  %667 = shl <2 x i64> %659, <i64 32, i64 32>
  %668 = ashr exact <2 x i64> %667, <i64 32, i64 32>
  %669 = mul nsw <2 x i64> %668, <i64 12784, i64 12784>
  %670 = mul nsw <2 x i64> %665, <i64 -64276, i64 -64276>
  %671 = mul nsw <2 x i64> %668, <i64 -64276, i64 -64276>
  %672 = shl <2 x i64> %661, <i64 32, i64 32>
  %673 = ashr exact <2 x i64> %672, <i64 32, i64 32>
  %674 = mul nsw <2 x i64> %673, <i64 -64276, i64 -64276>
  %675 = shl <2 x i64> %663, <i64 32, i64 32>
  %676 = ashr exact <2 x i64> %675, <i64 32, i64 32>
  %677 = mul nsw <2 x i64> %676, <i64 -64276, i64 -64276>
  %678 = mul nsw <2 x i64> %673, <i64 -12784, i64 -12784>
  %679 = add nsw <2 x i64> %678, <i64 32768, i64 32768>
  %680 = add nsw <2 x i64> %679, %670
  %681 = bitcast <2 x i64> %680 to <16 x i8>
  %682 = shufflevector <16 x i8> %681, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %683 = mul nsw <2 x i64> %676, <i64 -12784, i64 -12784>
  %684 = add nsw <2 x i64> %683, <i64 32768, i64 32768>
  %685 = add nsw <2 x i64> %684, %671
  %686 = bitcast <2 x i64> %685 to <16 x i8>
  %687 = shufflevector <16 x i8> %686, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %688 = add nsw <2 x i64> %674, <i64 32768, i64 32768>
  %689 = add nsw <2 x i64> %688, %666
  %690 = bitcast <2 x i64> %689 to <16 x i8>
  %691 = shufflevector <16 x i8> %690, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %692 = add nsw <2 x i64> %677, <i64 32768, i64 32768>
  %693 = add nsw <2 x i64> %692, %669
  %694 = bitcast <2 x i64> %693 to <16 x i8>
  %695 = shufflevector <16 x i8> %694, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %696 = bitcast <16 x i8> %682 to <4 x i32>
  %697 = bitcast <16 x i8> %687 to <4 x i32>
  %698 = shufflevector <4 x i32> %696, <4 x i32> %697, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %699 = shufflevector <4 x i32> %696, <4 x i32> %697, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %700 = shufflevector <4 x i32> %698, <4 x i32> %699, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %701 = bitcast <2 x i64>* %654 to <4 x i32>*
  store <4 x i32> %700, <4 x i32>* %701, align 16
  %702 = bitcast <16 x i8> %691 to <4 x i32>
  %703 = bitcast <16 x i8> %695 to <4 x i32>
  %704 = shufflevector <4 x i32> %702, <4 x i32> %703, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %705 = shufflevector <4 x i32> %702, <4 x i32> %703, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %706 = shufflevector <4 x i32> %704, <4 x i32> %705, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %707 = bitcast <2 x i64>* %655 to <4 x i32>*
  store <4 x i32> %706, <4 x i32>* %707, align 16
  %708 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 21
  %709 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 26
  %710 = shufflevector <4 x i32> %557, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %711 = bitcast <4 x i32> %710 to <2 x i64>
  %712 = shufflevector <4 x i32> %557, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %713 = bitcast <4 x i32> %712 to <2 x i64>
  %714 = shufflevector <4 x i32> %543, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %715 = bitcast <4 x i32> %714 to <2 x i64>
  %716 = shufflevector <4 x i32> %543, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %717 = bitcast <4 x i32> %716 to <2 x i64>
  %718 = shl <2 x i64> %711, <i64 32, i64 32>
  %719 = ashr exact <2 x i64> %718, <i64 32, i64 32>
  %720 = mul nsw <2 x i64> %719, <i64 36408, i64 36408>
  %721 = shl <2 x i64> %713, <i64 32, i64 32>
  %722 = ashr exact <2 x i64> %721, <i64 32, i64 32>
  %723 = mul nsw <2 x i64> %722, <i64 36408, i64 36408>
  %724 = mul nsw <2 x i64> %719, <i64 54492, i64 54492>
  %725 = mul nsw <2 x i64> %722, <i64 54492, i64 54492>
  %726 = shl <2 x i64> %715, <i64 32, i64 32>
  %727 = ashr exact <2 x i64> %726, <i64 32, i64 32>
  %728 = mul nsw <2 x i64> %727, <i64 54492, i64 54492>
  %729 = shl <2 x i64> %717, <i64 32, i64 32>
  %730 = ashr exact <2 x i64> %729, <i64 32, i64 32>
  %731 = mul nsw <2 x i64> %730, <i64 54492, i64 54492>
  %732 = mul nsw <2 x i64> %727, <i64 -36408, i64 -36408>
  %733 = add nsw <2 x i64> %732, <i64 32768, i64 32768>
  %734 = add nsw <2 x i64> %733, %724
  %735 = bitcast <2 x i64> %734 to <16 x i8>
  %736 = shufflevector <16 x i8> %735, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %737 = mul nsw <2 x i64> %730, <i64 -36408, i64 -36408>
  %738 = add nsw <2 x i64> %737, <i64 32768, i64 32768>
  %739 = add nsw <2 x i64> %738, %725
  %740 = bitcast <2 x i64> %739 to <16 x i8>
  %741 = shufflevector <16 x i8> %740, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %742 = add nsw <2 x i64> %728, <i64 32768, i64 32768>
  %743 = add nsw <2 x i64> %742, %720
  %744 = bitcast <2 x i64> %743 to <16 x i8>
  %745 = shufflevector <16 x i8> %744, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %746 = add nsw <2 x i64> %731, <i64 32768, i64 32768>
  %747 = add nsw <2 x i64> %746, %723
  %748 = bitcast <2 x i64> %747 to <16 x i8>
  %749 = shufflevector <16 x i8> %748, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %750 = bitcast <16 x i8> %736 to <4 x i32>
  %751 = bitcast <16 x i8> %741 to <4 x i32>
  %752 = shufflevector <4 x i32> %750, <4 x i32> %751, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %753 = shufflevector <4 x i32> %750, <4 x i32> %751, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %754 = shufflevector <4 x i32> %752, <4 x i32> %753, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %755 = bitcast <2 x i64>* %708 to <4 x i32>*
  store <4 x i32> %754, <4 x i32>* %755, align 16
  %756 = bitcast <16 x i8> %745 to <4 x i32>
  %757 = bitcast <16 x i8> %749 to <4 x i32>
  %758 = shufflevector <4 x i32> %756, <4 x i32> %757, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %759 = shufflevector <4 x i32> %756, <4 x i32> %757, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %760 = shufflevector <4 x i32> %758, <4 x i32> %759, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %761 = bitcast <2 x i64>* %709 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %761, align 16
  %762 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 22
  %763 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 25
  %764 = shufflevector <4 x i32> %598, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %765 = bitcast <4 x i32> %764 to <2 x i64>
  %766 = shufflevector <4 x i32> %598, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %767 = bitcast <4 x i32> %766 to <2 x i64>
  %768 = shufflevector <4 x i32> %584, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %769 = bitcast <4 x i32> %768 to <2 x i64>
  %770 = shufflevector <4 x i32> %584, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %771 = bitcast <4 x i32> %770 to <2 x i64>
  %772 = shl <2 x i64> %765, <i64 32, i64 32>
  %773 = ashr exact <2 x i64> %772, <i64 32, i64 32>
  %774 = mul nsw <2 x i64> %773, <i64 54492, i64 54492>
  %775 = shl <2 x i64> %767, <i64 32, i64 32>
  %776 = ashr exact <2 x i64> %775, <i64 32, i64 32>
  %777 = mul nsw <2 x i64> %776, <i64 54492, i64 54492>
  %778 = mul nsw <2 x i64> %773, <i64 -36408, i64 -36408>
  %779 = mul nsw <2 x i64> %776, <i64 -36408, i64 -36408>
  %780 = shl <2 x i64> %769, <i64 32, i64 32>
  %781 = ashr exact <2 x i64> %780, <i64 32, i64 32>
  %782 = mul nsw <2 x i64> %781, <i64 -36408, i64 -36408>
  %783 = shl <2 x i64> %771, <i64 32, i64 32>
  %784 = ashr exact <2 x i64> %783, <i64 32, i64 32>
  %785 = mul nsw <2 x i64> %784, <i64 -36408, i64 -36408>
  %786 = mul nsw <2 x i64> %781, <i64 -54492, i64 -54492>
  %787 = add nsw <2 x i64> %786, <i64 32768, i64 32768>
  %788 = add nsw <2 x i64> %787, %778
  %789 = bitcast <2 x i64> %788 to <16 x i8>
  %790 = shufflevector <16 x i8> %789, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %791 = mul nsw <2 x i64> %784, <i64 -54492, i64 -54492>
  %792 = add nsw <2 x i64> %791, <i64 32768, i64 32768>
  %793 = add nsw <2 x i64> %792, %779
  %794 = bitcast <2 x i64> %793 to <16 x i8>
  %795 = shufflevector <16 x i8> %794, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %796 = add nsw <2 x i64> %782, <i64 32768, i64 32768>
  %797 = add nsw <2 x i64> %796, %774
  %798 = bitcast <2 x i64> %797 to <16 x i8>
  %799 = shufflevector <16 x i8> %798, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %800 = add nsw <2 x i64> %785, <i64 32768, i64 32768>
  %801 = add nsw <2 x i64> %800, %777
  %802 = bitcast <2 x i64> %801 to <16 x i8>
  %803 = shufflevector <16 x i8> %802, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %804 = bitcast <16 x i8> %790 to <4 x i32>
  %805 = bitcast <16 x i8> %795 to <4 x i32>
  %806 = shufflevector <4 x i32> %804, <4 x i32> %805, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %807 = shufflevector <4 x i32> %804, <4 x i32> %805, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %808 = shufflevector <4 x i32> %806, <4 x i32> %807, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %809 = bitcast <2 x i64>* %762 to <4 x i32>*
  store <4 x i32> %808, <4 x i32>* %809, align 16
  %810 = bitcast <16 x i8> %799 to <4 x i32>
  %811 = bitcast <16 x i8> %803 to <4 x i32>
  %812 = shufflevector <4 x i32> %810, <4 x i32> %811, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %813 = shufflevector <4 x i32> %810, <4 x i32> %811, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %814 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %815 = bitcast <2 x i64>* %763 to <4 x i32>*
  store <4 x i32> %814, <4 x i32>* %815, align 16
  %816 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 0
  call fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nonnull %816, <2 x i64>* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %435) #6
  br label %817

817:                                              ; preds = %817, %1
  %818 = phi i64 [ 0, %1 ], [ %834, %817 ]
  %819 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %818
  %820 = bitcast <2 x i64>* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 16
  %822 = shl i64 %818, 32
  %823 = sub nuw nsw i64 133143986176, %822
  %824 = ashr exact i64 %823, 32
  %825 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %824
  %826 = bitcast <2 x i64>* %825 to <4 x i32>*
  %827 = load <4 x i32>, <4 x i32>* %826, align 16
  %828 = add <4 x i32> %827, %821
  %829 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %818
  %830 = bitcast <2 x i64>* %829 to <4 x i32>*
  store <4 x i32> %828, <4 x i32>* %830, align 16
  %831 = sub <4 x i32> %821, %827
  %832 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %824
  %833 = bitcast <2 x i64>* %832 to <4 x i32>*
  store <4 x i32> %831, <4 x i32>* %833, align 16
  %834 = add nuw nsw i64 %818, 1
  %835 = icmp eq i64 %834, 16
  br i1 %835, label %836, label %817

836:                                              ; preds = %817
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #6
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #3

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #4

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #3

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nocapture, <2 x i64>* nocapture) unnamed_addr #5 {
  %3 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 16
  %4 = bitcast <2 x i64>* %3 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 19
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = add <4 x i32> %8, %5
  %10 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 17
  %11 = bitcast <2 x i64>* %10 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 16
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 18
  %14 = bitcast <2 x i64>* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 16
  %16 = add <4 x i32> %15, %12
  %17 = sub <4 x i32> %12, %15
  %18 = sub <4 x i32> %5, %8
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 23
  %20 = bitcast <2 x i64>* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 16
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 20
  %23 = bitcast <2 x i64>* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 16
  %25 = sub <4 x i32> %21, %24
  %26 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 22
  %27 = bitcast <2 x i64>* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 21
  %30 = bitcast <2 x i64>* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = sub <4 x i32> %28, %31
  %33 = add <4 x i32> %31, %28
  %34 = add <4 x i32> %24, %21
  %35 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 24
  %36 = bitcast <2 x i64>* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 27
  %39 = bitcast <2 x i64>* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = add <4 x i32> %40, %37
  %42 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 25
  %43 = bitcast <2 x i64>* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16
  %45 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 26
  %46 = bitcast <2 x i64>* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 16
  %48 = add <4 x i32> %47, %44
  %49 = sub <4 x i32> %44, %47
  %50 = sub <4 x i32> %37, %40
  %51 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 31
  %52 = bitcast <2 x i64>* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 16
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 28
  %55 = bitcast <2 x i64>* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 16
  %57 = sub <4 x i32> %53, %56
  %58 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 30
  %59 = bitcast <2 x i64>* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 16
  %61 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 29
  %62 = bitcast <2 x i64>* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 16
  %64 = sub <4 x i32> %60, %63
  %65 = add <4 x i32> %63, %60
  %66 = add <4 x i32> %56, %53
  store <4 x i32> %9, <4 x i32>* %4, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  %67 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %68 = bitcast <4 x i32> %67 to <2 x i64>
  %69 = shufflevector <4 x i32> %64, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %70 = bitcast <4 x i32> %69 to <2 x i64>
  %71 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = shufflevector <4 x i32> %17, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = shl <2 x i64> %68, <i64 32, i64 32>
  %76 = ashr exact <2 x i64> %75, <i64 32, i64 32>
  %77 = mul nsw <2 x i64> %76, <i64 60548, i64 60548>
  %78 = shl <2 x i64> %70, <i64 32, i64 32>
  %79 = ashr exact <2 x i64> %78, <i64 32, i64 32>
  %80 = mul nsw <2 x i64> %79, <i64 60548, i64 60548>
  %81 = mul nsw <2 x i64> %76, <i64 25080, i64 25080>
  %82 = mul nsw <2 x i64> %79, <i64 25080, i64 25080>
  %83 = shl <2 x i64> %72, <i64 32, i64 32>
  %84 = ashr exact <2 x i64> %83, <i64 32, i64 32>
  %85 = mul nsw <2 x i64> %84, <i64 25080, i64 25080>
  %86 = shl <2 x i64> %74, <i64 32, i64 32>
  %87 = ashr exact <2 x i64> %86, <i64 32, i64 32>
  %88 = mul nsw <2 x i64> %87, <i64 25080, i64 25080>
  %89 = mul nsw <2 x i64> %84, <i64 -60548, i64 -60548>
  %90 = add nsw <2 x i64> %89, <i64 32768, i64 32768>
  %91 = add nsw <2 x i64> %90, %81
  %92 = bitcast <2 x i64> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %94 = mul nsw <2 x i64> %87, <i64 -60548, i64 -60548>
  %95 = add nsw <2 x i64> %94, <i64 32768, i64 32768>
  %96 = add nsw <2 x i64> %95, %82
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %99 = add nsw <2 x i64> %85, <i64 32768, i64 32768>
  %100 = add nsw <2 x i64> %99, %77
  %101 = bitcast <2 x i64> %100 to <16 x i8>
  %102 = shufflevector <16 x i8> %101, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %103 = add nsw <2 x i64> %88, <i64 32768, i64 32768>
  %104 = add nsw <2 x i64> %103, %80
  %105 = bitcast <2 x i64> %104 to <16 x i8>
  %106 = shufflevector <16 x i8> %105, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %107 = bitcast <16 x i8> %93 to <4 x i32>
  %108 = bitcast <16 x i8> %98 to <4 x i32>
  %109 = shufflevector <4 x i32> %107, <4 x i32> %108, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %110 = shufflevector <4 x i32> %107, <4 x i32> %108, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %111 = shufflevector <4 x i32> %109, <4 x i32> %110, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %111, <4 x i32>* %14, align 16
  %112 = bitcast <16 x i8> %102 to <4 x i32>
  %113 = bitcast <16 x i8> %106 to <4 x i32>
  %114 = shufflevector <4 x i32> %112, <4 x i32> %113, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %115 = shufflevector <4 x i32> %112, <4 x i32> %113, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %116 = shufflevector <4 x i32> %114, <4 x i32> %115, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %116, <4 x i32>* %62, align 16
  %117 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %120 = bitcast <4 x i32> %119 to <2 x i64>
  %121 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %122 = bitcast <4 x i32> %121 to <2 x i64>
  %123 = shufflevector <4 x i32> %18, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %124 = bitcast <4 x i32> %123 to <2 x i64>
  %125 = shl <2 x i64> %118, <i64 32, i64 32>
  %126 = ashr exact <2 x i64> %125, <i64 32, i64 32>
  %127 = mul nsw <2 x i64> %126, <i64 60548, i64 60548>
  %128 = shl <2 x i64> %120, <i64 32, i64 32>
  %129 = ashr exact <2 x i64> %128, <i64 32, i64 32>
  %130 = mul nsw <2 x i64> %129, <i64 60548, i64 60548>
  %131 = mul nsw <2 x i64> %126, <i64 25080, i64 25080>
  %132 = mul nsw <2 x i64> %129, <i64 25080, i64 25080>
  %133 = shl <2 x i64> %122, <i64 32, i64 32>
  %134 = ashr exact <2 x i64> %133, <i64 32, i64 32>
  %135 = mul nsw <2 x i64> %134, <i64 25080, i64 25080>
  %136 = shl <2 x i64> %124, <i64 32, i64 32>
  %137 = ashr exact <2 x i64> %136, <i64 32, i64 32>
  %138 = mul nsw <2 x i64> %137, <i64 25080, i64 25080>
  %139 = mul nsw <2 x i64> %134, <i64 -60548, i64 -60548>
  %140 = add nsw <2 x i64> %139, <i64 32768, i64 32768>
  %141 = add nsw <2 x i64> %140, %131
  %142 = bitcast <2 x i64> %141 to <16 x i8>
  %143 = shufflevector <16 x i8> %142, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %144 = mul nsw <2 x i64> %137, <i64 -60548, i64 -60548>
  %145 = add nsw <2 x i64> %144, <i64 32768, i64 32768>
  %146 = add nsw <2 x i64> %145, %132
  %147 = bitcast <2 x i64> %146 to <16 x i8>
  %148 = shufflevector <16 x i8> %147, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %149 = add nsw <2 x i64> %135, <i64 32768, i64 32768>
  %150 = add nsw <2 x i64> %149, %127
  %151 = bitcast <2 x i64> %150 to <16 x i8>
  %152 = shufflevector <16 x i8> %151, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %153 = add nsw <2 x i64> %138, <i64 32768, i64 32768>
  %154 = add nsw <2 x i64> %153, %130
  %155 = bitcast <2 x i64> %154 to <16 x i8>
  %156 = shufflevector <16 x i8> %155, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %157 = bitcast <16 x i8> %143 to <4 x i32>
  %158 = bitcast <16 x i8> %148 to <4 x i32>
  %159 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %160 = shufflevector <4 x i32> %157, <4 x i32> %158, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %161 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %161, <4 x i32>* %7, align 16
  %162 = bitcast <16 x i8> %152 to <4 x i32>
  %163 = bitcast <16 x i8> %156 to <4 x i32>
  %164 = shufflevector <4 x i32> %162, <4 x i32> %163, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %165 = shufflevector <4 x i32> %162, <4 x i32> %163, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %166 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %166, <4 x i32>* %55, align 16
  %167 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %168 = bitcast <4 x i32> %167 to <2 x i64>
  %169 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %172 = bitcast <4 x i32> %171 to <2 x i64>
  %173 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shl <2 x i64> %168, <i64 32, i64 32>
  %176 = ashr exact <2 x i64> %175, <i64 32, i64 32>
  %177 = mul nsw <2 x i64> %176, <i64 25080, i64 25080>
  %178 = shl <2 x i64> %170, <i64 32, i64 32>
  %179 = ashr exact <2 x i64> %178, <i64 32, i64 32>
  %180 = mul nsw <2 x i64> %179, <i64 25080, i64 25080>
  %181 = mul nsw <2 x i64> %176, <i64 -60548, i64 -60548>
  %182 = mul nsw <2 x i64> %179, <i64 -60548, i64 -60548>
  %183 = shl <2 x i64> %172, <i64 32, i64 32>
  %184 = ashr exact <2 x i64> %183, <i64 32, i64 32>
  %185 = mul nsw <2 x i64> %184, <i64 -60548, i64 -60548>
  %186 = shl <2 x i64> %174, <i64 32, i64 32>
  %187 = ashr exact <2 x i64> %186, <i64 32, i64 32>
  %188 = mul nsw <2 x i64> %187, <i64 -60548, i64 -60548>
  %189 = mul nsw <2 x i64> %184, <i64 -25080, i64 -25080>
  %190 = add nsw <2 x i64> %189, <i64 32768, i64 32768>
  %191 = add nsw <2 x i64> %190, %181
  %192 = bitcast <2 x i64> %191 to <16 x i8>
  %193 = shufflevector <16 x i8> %192, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %194 = mul nsw <2 x i64> %187, <i64 -25080, i64 -25080>
  %195 = add nsw <2 x i64> %194, <i64 32768, i64 32768>
  %196 = add nsw <2 x i64> %195, %182
  %197 = bitcast <2 x i64> %196 to <16 x i8>
  %198 = shufflevector <16 x i8> %197, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %199 = add nsw <2 x i64> %185, <i64 32768, i64 32768>
  %200 = add nsw <2 x i64> %199, %177
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %202 = shufflevector <16 x i8> %201, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %203 = add nsw <2 x i64> %188, <i64 32768, i64 32768>
  %204 = add nsw <2 x i64> %203, %180
  %205 = bitcast <2 x i64> %204 to <16 x i8>
  %206 = shufflevector <16 x i8> %205, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %207 = bitcast <16 x i8> %193 to <4 x i32>
  %208 = bitcast <16 x i8> %198 to <4 x i32>
  %209 = shufflevector <4 x i32> %207, <4 x i32> %208, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %210 = shufflevector <4 x i32> %207, <4 x i32> %208, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %211 = shufflevector <4 x i32> %209, <4 x i32> %210, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %211, <4 x i32>* %23, align 16
  %212 = bitcast <16 x i8> %202 to <4 x i32>
  %213 = bitcast <16 x i8> %206 to <4 x i32>
  %214 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %215 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %216 = shufflevector <4 x i32> %214, <4 x i32> %215, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %216, <4 x i32>* %39, align 16
  %217 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %218 = bitcast <4 x i32> %217 to <2 x i64>
  %219 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %220 = bitcast <4 x i32> %219 to <2 x i64>
  %221 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %222 = bitcast <4 x i32> %221 to <2 x i64>
  %223 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %224 = bitcast <4 x i32> %223 to <2 x i64>
  %225 = shl <2 x i64> %218, <i64 32, i64 32>
  %226 = ashr exact <2 x i64> %225, <i64 32, i64 32>
  %227 = mul nsw <2 x i64> %226, <i64 25080, i64 25080>
  %228 = shl <2 x i64> %220, <i64 32, i64 32>
  %229 = ashr exact <2 x i64> %228, <i64 32, i64 32>
  %230 = mul nsw <2 x i64> %229, <i64 25080, i64 25080>
  %231 = mul nsw <2 x i64> %226, <i64 -60548, i64 -60548>
  %232 = mul nsw <2 x i64> %229, <i64 -60548, i64 -60548>
  %233 = shl <2 x i64> %222, <i64 32, i64 32>
  %234 = ashr exact <2 x i64> %233, <i64 32, i64 32>
  %235 = mul nsw <2 x i64> %234, <i64 -60548, i64 -60548>
  %236 = shl <2 x i64> %224, <i64 32, i64 32>
  %237 = ashr exact <2 x i64> %236, <i64 32, i64 32>
  %238 = mul nsw <2 x i64> %237, <i64 -60548, i64 -60548>
  %239 = mul nsw <2 x i64> %234, <i64 -25080, i64 -25080>
  %240 = add nsw <2 x i64> %239, <i64 32768, i64 32768>
  %241 = add nsw <2 x i64> %240, %231
  %242 = bitcast <2 x i64> %241 to <16 x i8>
  %243 = shufflevector <16 x i8> %242, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %244 = mul nsw <2 x i64> %237, <i64 -25080, i64 -25080>
  %245 = add nsw <2 x i64> %244, <i64 32768, i64 32768>
  %246 = add nsw <2 x i64> %245, %232
  %247 = bitcast <2 x i64> %246 to <16 x i8>
  %248 = shufflevector <16 x i8> %247, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %249 = add nsw <2 x i64> %235, <i64 32768, i64 32768>
  %250 = add nsw <2 x i64> %249, %227
  %251 = bitcast <2 x i64> %250 to <16 x i8>
  %252 = shufflevector <16 x i8> %251, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %253 = add nsw <2 x i64> %238, <i64 32768, i64 32768>
  %254 = add nsw <2 x i64> %253, %230
  %255 = bitcast <2 x i64> %254 to <16 x i8>
  %256 = shufflevector <16 x i8> %255, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %257 = bitcast <16 x i8> %243 to <4 x i32>
  %258 = bitcast <16 x i8> %248 to <4 x i32>
  %259 = shufflevector <4 x i32> %257, <4 x i32> %258, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %260 = shufflevector <4 x i32> %257, <4 x i32> %258, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %261 = shufflevector <4 x i32> %259, <4 x i32> %260, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %261, <4 x i32>* %30, align 16
  %262 = bitcast <16 x i8> %252 to <4 x i32>
  %263 = bitcast <16 x i8> %256 to <4 x i32>
  %264 = shufflevector <4 x i32> %262, <4 x i32> %263, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %265 = shufflevector <4 x i32> %262, <4 x i32> %263, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %266 = shufflevector <4 x i32> %264, <4 x i32> %265, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %266, <4 x i32>* %46, align 16
  store <4 x i32> %33, <4 x i32>* %27, align 16
  store <4 x i32> %34, <4 x i32>* %20, align 16
  store <4 x i32> %41, <4 x i32>* %36, align 16
  store <4 x i32> %48, <4 x i32>* %43, align 16
  store <4 x i32> %65, <4 x i32>* %59, align 16
  store <4 x i32> %66, <4 x i32>* %52, align 16
  %267 = add <4 x i32> %34, %9
  %268 = add <4 x i32> %33, %16
  %269 = load <4 x i32>, <4 x i32>* %14, align 16
  %270 = add <4 x i32> %261, %269
  %271 = load <4 x i32>, <4 x i32>* %7, align 16
  %272 = add <4 x i32> %211, %271
  %273 = sub <4 x i32> %271, %211
  %274 = sub <4 x i32> %269, %261
  %275 = sub <4 x i32> %16, %33
  %276 = sub <4 x i32> %9, %34
  %277 = sub <4 x i32> %66, %41
  %278 = sub <4 x i32> %65, %48
  %279 = load <4 x i32>, <4 x i32>* %62, align 16
  %280 = sub <4 x i32> %279, %266
  %281 = load <4 x i32>, <4 x i32>* %55, align 16
  %282 = sub <4 x i32> %281, %216
  %283 = add <4 x i32> %216, %281
  %284 = add <4 x i32> %266, %279
  %285 = add <4 x i32> %65, %48
  %286 = add <4 x i32> %66, %41
  %287 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 16
  %288 = bitcast <2 x i64>* %287 to <4 x i32>*
  store <4 x i32> %267, <4 x i32>* %288, align 16
  %289 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 17
  %290 = bitcast <2 x i64>* %289 to <4 x i32>*
  store <4 x i32> %268, <4 x i32>* %290, align 16
  %291 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 18
  %292 = bitcast <2 x i64>* %291 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %292, align 16
  %293 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 19
  %294 = bitcast <2 x i64>* %293 to <4 x i32>*
  store <4 x i32> %272, <4 x i32>* %294, align 16
  %295 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 20
  %296 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 27
  %297 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %298 = bitcast <4 x i32> %297 to <2 x i64>
  %299 = shufflevector <4 x i32> %282, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %300 = bitcast <4 x i32> %299 to <2 x i64>
  %301 = shufflevector <4 x i32> %273, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %302 = bitcast <4 x i32> %301 to <2 x i64>
  %303 = shufflevector <4 x i32> %273, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %304 = bitcast <4 x i32> %303 to <2 x i64>
  %305 = shl <2 x i64> %298, <i64 32, i64 32>
  %306 = ashr exact <2 x i64> %305, <i64 32, i64 32>
  %307 = mul nsw <2 x i64> %306, <i64 46340, i64 46340>
  %308 = shl <2 x i64> %300, <i64 32, i64 32>
  %309 = ashr exact <2 x i64> %308, <i64 32, i64 32>
  %310 = mul nsw <2 x i64> %309, <i64 46340, i64 46340>
  %311 = shl <2 x i64> %302, <i64 32, i64 32>
  %312 = ashr exact <2 x i64> %311, <i64 32, i64 32>
  %313 = mul nsw <2 x i64> %312, <i64 46340, i64 46340>
  %314 = shl <2 x i64> %304, <i64 32, i64 32>
  %315 = ashr exact <2 x i64> %314, <i64 32, i64 32>
  %316 = mul nsw <2 x i64> %315, <i64 46340, i64 46340>
  %317 = add nsw <2 x i64> %307, <i64 32768, i64 32768>
  %318 = sub nsw <2 x i64> %317, %313
  %319 = bitcast <2 x i64> %318 to <16 x i8>
  %320 = shufflevector <16 x i8> %319, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %321 = add nsw <2 x i64> %310, <i64 32768, i64 32768>
  %322 = sub nsw <2 x i64> %321, %316
  %323 = bitcast <2 x i64> %322 to <16 x i8>
  %324 = shufflevector <16 x i8> %323, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %325 = add nsw <2 x i64> %317, %313
  %326 = bitcast <2 x i64> %325 to <16 x i8>
  %327 = shufflevector <16 x i8> %326, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %328 = add nsw <2 x i64> %321, %316
  %329 = bitcast <2 x i64> %328 to <16 x i8>
  %330 = shufflevector <16 x i8> %329, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %331 = bitcast <16 x i8> %320 to <4 x i32>
  %332 = bitcast <16 x i8> %324 to <4 x i32>
  %333 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %334 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %335 = shufflevector <4 x i32> %333, <4 x i32> %334, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %336 = bitcast <2 x i64>* %295 to <4 x i32>*
  store <4 x i32> %335, <4 x i32>* %336, align 16
  %337 = bitcast <16 x i8> %327 to <4 x i32>
  %338 = bitcast <16 x i8> %330 to <4 x i32>
  %339 = shufflevector <4 x i32> %337, <4 x i32> %338, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %340 = shufflevector <4 x i32> %337, <4 x i32> %338, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %341 = shufflevector <4 x i32> %339, <4 x i32> %340, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %342 = bitcast <2 x i64>* %296 to <4 x i32>*
  store <4 x i32> %341, <4 x i32>* %342, align 16
  %343 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 21
  %344 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 26
  %345 = shufflevector <4 x i32> %280, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = shufflevector <4 x i32> %280, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = shufflevector <4 x i32> %274, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shl <2 x i64> %346, <i64 32, i64 32>
  %354 = ashr exact <2 x i64> %353, <i64 32, i64 32>
  %355 = mul nsw <2 x i64> %354, <i64 46340, i64 46340>
  %356 = shl <2 x i64> %348, <i64 32, i64 32>
  %357 = ashr exact <2 x i64> %356, <i64 32, i64 32>
  %358 = mul nsw <2 x i64> %357, <i64 46340, i64 46340>
  %359 = shl <2 x i64> %350, <i64 32, i64 32>
  %360 = ashr exact <2 x i64> %359, <i64 32, i64 32>
  %361 = mul nsw <2 x i64> %360, <i64 46340, i64 46340>
  %362 = shl <2 x i64> %352, <i64 32, i64 32>
  %363 = ashr exact <2 x i64> %362, <i64 32, i64 32>
  %364 = mul nsw <2 x i64> %363, <i64 46340, i64 46340>
  %365 = add nsw <2 x i64> %355, <i64 32768, i64 32768>
  %366 = sub nsw <2 x i64> %365, %361
  %367 = bitcast <2 x i64> %366 to <16 x i8>
  %368 = shufflevector <16 x i8> %367, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %369 = add nsw <2 x i64> %358, <i64 32768, i64 32768>
  %370 = sub nsw <2 x i64> %369, %364
  %371 = bitcast <2 x i64> %370 to <16 x i8>
  %372 = shufflevector <16 x i8> %371, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %373 = add nsw <2 x i64> %365, %361
  %374 = bitcast <2 x i64> %373 to <16 x i8>
  %375 = shufflevector <16 x i8> %374, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %376 = add nsw <2 x i64> %369, %364
  %377 = bitcast <2 x i64> %376 to <16 x i8>
  %378 = shufflevector <16 x i8> %377, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %379 = bitcast <16 x i8> %368 to <4 x i32>
  %380 = bitcast <16 x i8> %372 to <4 x i32>
  %381 = shufflevector <4 x i32> %379, <4 x i32> %380, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %382 = shufflevector <4 x i32> %379, <4 x i32> %380, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %383 = shufflevector <4 x i32> %381, <4 x i32> %382, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %384 = bitcast <2 x i64>* %343 to <4 x i32>*
  store <4 x i32> %383, <4 x i32>* %384, align 16
  %385 = bitcast <16 x i8> %375 to <4 x i32>
  %386 = bitcast <16 x i8> %378 to <4 x i32>
  %387 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %388 = shufflevector <4 x i32> %385, <4 x i32> %386, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %389 = shufflevector <4 x i32> %387, <4 x i32> %388, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %390 = bitcast <2 x i64>* %344 to <4 x i32>*
  store <4 x i32> %389, <4 x i32>* %390, align 16
  %391 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 22
  %392 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 25
  %393 = shufflevector <4 x i32> %278, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %394 = bitcast <4 x i32> %393 to <2 x i64>
  %395 = shufflevector <4 x i32> %278, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %396 = bitcast <4 x i32> %395 to <2 x i64>
  %397 = shufflevector <4 x i32> %275, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = shufflevector <4 x i32> %275, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = shl <2 x i64> %394, <i64 32, i64 32>
  %402 = ashr exact <2 x i64> %401, <i64 32, i64 32>
  %403 = mul nsw <2 x i64> %402, <i64 46340, i64 46340>
  %404 = shl <2 x i64> %396, <i64 32, i64 32>
  %405 = ashr exact <2 x i64> %404, <i64 32, i64 32>
  %406 = mul nsw <2 x i64> %405, <i64 46340, i64 46340>
  %407 = shl <2 x i64> %398, <i64 32, i64 32>
  %408 = ashr exact <2 x i64> %407, <i64 32, i64 32>
  %409 = mul nsw <2 x i64> %408, <i64 46340, i64 46340>
  %410 = shl <2 x i64> %400, <i64 32, i64 32>
  %411 = ashr exact <2 x i64> %410, <i64 32, i64 32>
  %412 = mul nsw <2 x i64> %411, <i64 46340, i64 46340>
  %413 = add nsw <2 x i64> %403, <i64 32768, i64 32768>
  %414 = sub nsw <2 x i64> %413, %409
  %415 = bitcast <2 x i64> %414 to <16 x i8>
  %416 = shufflevector <16 x i8> %415, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %417 = add nsw <2 x i64> %406, <i64 32768, i64 32768>
  %418 = sub nsw <2 x i64> %417, %412
  %419 = bitcast <2 x i64> %418 to <16 x i8>
  %420 = shufflevector <16 x i8> %419, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %421 = add nsw <2 x i64> %413, %409
  %422 = bitcast <2 x i64> %421 to <16 x i8>
  %423 = shufflevector <16 x i8> %422, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %424 = add nsw <2 x i64> %417, %412
  %425 = bitcast <2 x i64> %424 to <16 x i8>
  %426 = shufflevector <16 x i8> %425, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %427 = bitcast <16 x i8> %416 to <4 x i32>
  %428 = bitcast <16 x i8> %420 to <4 x i32>
  %429 = shufflevector <4 x i32> %427, <4 x i32> %428, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %430 = shufflevector <4 x i32> %427, <4 x i32> %428, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %431 = shufflevector <4 x i32> %429, <4 x i32> %430, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %432 = bitcast <2 x i64>* %391 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %432, align 16
  %433 = bitcast <16 x i8> %423 to <4 x i32>
  %434 = bitcast <16 x i8> %426 to <4 x i32>
  %435 = shufflevector <4 x i32> %433, <4 x i32> %434, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %436 = shufflevector <4 x i32> %433, <4 x i32> %434, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %437 = shufflevector <4 x i32> %435, <4 x i32> %436, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %438 = bitcast <2 x i64>* %392 to <4 x i32>*
  store <4 x i32> %437, <4 x i32>* %438, align 16
  %439 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 23
  %440 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 24
  %441 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %442 = bitcast <4 x i32> %441 to <2 x i64>
  %443 = shufflevector <4 x i32> %277, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %444 = bitcast <4 x i32> %443 to <2 x i64>
  %445 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %446 = bitcast <4 x i32> %445 to <2 x i64>
  %447 = shufflevector <4 x i32> %276, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %448 = bitcast <4 x i32> %447 to <2 x i64>
  %449 = shl <2 x i64> %442, <i64 32, i64 32>
  %450 = ashr exact <2 x i64> %449, <i64 32, i64 32>
  %451 = mul nsw <2 x i64> %450, <i64 46340, i64 46340>
  %452 = shl <2 x i64> %444, <i64 32, i64 32>
  %453 = ashr exact <2 x i64> %452, <i64 32, i64 32>
  %454 = mul nsw <2 x i64> %453, <i64 46340, i64 46340>
  %455 = shl <2 x i64> %446, <i64 32, i64 32>
  %456 = ashr exact <2 x i64> %455, <i64 32, i64 32>
  %457 = mul nsw <2 x i64> %456, <i64 46340, i64 46340>
  %458 = shl <2 x i64> %448, <i64 32, i64 32>
  %459 = ashr exact <2 x i64> %458, <i64 32, i64 32>
  %460 = mul nsw <2 x i64> %459, <i64 46340, i64 46340>
  %461 = add nsw <2 x i64> %451, <i64 32768, i64 32768>
  %462 = sub nsw <2 x i64> %461, %457
  %463 = bitcast <2 x i64> %462 to <16 x i8>
  %464 = shufflevector <16 x i8> %463, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %465 = add nsw <2 x i64> %454, <i64 32768, i64 32768>
  %466 = sub nsw <2 x i64> %465, %460
  %467 = bitcast <2 x i64> %466 to <16 x i8>
  %468 = shufflevector <16 x i8> %467, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %469 = add nsw <2 x i64> %461, %457
  %470 = bitcast <2 x i64> %469 to <16 x i8>
  %471 = shufflevector <16 x i8> %470, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %472 = add nsw <2 x i64> %465, %460
  %473 = bitcast <2 x i64> %472 to <16 x i8>
  %474 = shufflevector <16 x i8> %473, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %475 = bitcast <16 x i8> %464 to <4 x i32>
  %476 = bitcast <16 x i8> %468 to <4 x i32>
  %477 = shufflevector <4 x i32> %475, <4 x i32> %476, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %478 = shufflevector <4 x i32> %475, <4 x i32> %476, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %479 = shufflevector <4 x i32> %477, <4 x i32> %478, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %480 = bitcast <2 x i64>* %439 to <4 x i32>*
  store <4 x i32> %479, <4 x i32>* %480, align 16
  %481 = bitcast <16 x i8> %471 to <4 x i32>
  %482 = bitcast <16 x i8> %474 to <4 x i32>
  %483 = shufflevector <4 x i32> %481, <4 x i32> %482, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %484 = shufflevector <4 x i32> %481, <4 x i32> %482, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %485 = shufflevector <4 x i32> %483, <4 x i32> %484, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %486 = bitcast <2 x i64>* %440 to <4 x i32>*
  store <4 x i32> %485, <4 x i32>* %486, align 16
  %487 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 28
  %488 = bitcast <2 x i64>* %487 to <4 x i32>*
  store <4 x i32> %283, <4 x i32>* %488, align 16
  %489 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 29
  %490 = bitcast <2 x i64>* %489 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %490, align 16
  %491 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 30
  %492 = bitcast <2 x i64>* %491 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %492, align 16
  %493 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 31
  %494 = bitcast <2 x i64>* %493 to <4 x i32>*
  store <4 x i32> %286, <4 x i32>* %494, align 16
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
