; ModuleID = '../../third_party/libaom/source/libaom/av1/common/x86/filterintra_sse4.c'
source_filename = "../../third_party/libaom/source/libaom/av1/common/x86/filterintra_sse4.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@tx_size_wide = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 4, i32 8, i32 8, i32 16, i32 16, i32 32, i32 32, i32 64, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64], align 16
@tx_size_high = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 16, i32 32, i32 64, i32 8, i32 4, i32 16, i32 8, i32 32, i32 16, i32 64, i32 32, i32 16, i32 4, i32 32, i32 8, i32 64, i32 16], align 16
@av1_filter_intra_taps = external local_unnamed_addr constant [5 x [8 x [8 x i8]]], align 16

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @av1_filter_intra_predictor_sse4_1(i8* nocapture, i64, i8 zeroext, i8* nocapture readonly, i8* nocapture readonly, i32) local_unnamed_addr #0 {
  %7 = zext i8 %2 to i64
  %8 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_wide, i64 0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds [19 x i32], [19 x i32]* @tx_size_high, i64 0, i64 %7
  %11 = load i32, i32* %10, align 4
  %12 = lshr i64 8225, %7
  %13 = and i64 %12, 1
  %14 = icmp eq i64 %13, 0
  %15 = sext i32 %5 to i64
  %16 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @av1_filter_intra_taps, i64 0, i64 %15, i64 0, i64 0
  %17 = bitcast i8* %16 to <16 x i8>*
  %18 = load <16 x i8>, <16 x i8>* %17, align 16
  %19 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @av1_filter_intra_taps, i64 0, i64 %15, i64 2, i64 0
  %20 = bitcast i8* %19 to <16 x i8>*
  %21 = load <16 x i8>, <16 x i8>* %20, align 16
  %22 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @av1_filter_intra_taps, i64 0, i64 %15, i64 4, i64 0
  %23 = bitcast i8* %22 to <16 x i8>*
  %24 = load <16 x i8>, <16 x i8>* %23, align 16
  %25 = getelementptr inbounds [5 x [8 x [8 x i8]]], [5 x [8 x [8 x i8]]]* @av1_filter_intra_taps, i64 0, i64 %15, i64 6, i64 0
  %26 = bitcast i8* %25 to <16 x i8>*
  %27 = load <16 x i8>, <16 x i8>* %26, align 16
  %28 = getelementptr inbounds i8, i8* %3, i64 -1
  br i1 %14, label %290, label %29

29:                                               ; preds = %6
  %30 = bitcast i8* %28 to i32*
  %31 = load i32, i32* %30, align 1
  %32 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %31, i32 0
  %33 = bitcast <4 x i32> %32 to <16 x i8>
  %34 = getelementptr inbounds i8, i8* %3, i64 3
  %35 = load i8, i8* %34, align 1
  %36 = insertelement <16 x i8> %33, i8 %35, i64 4
  %37 = lshr i64 16449, %7
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %29
  %41 = bitcast i8* %4 to i32*
  %42 = load i32, i32* %41, align 1
  %43 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %42, i32 0
  %44 = bitcast <4 x i32> %43 to <2 x i64>
  br label %49

45:                                               ; preds = %29
  %46 = bitcast i8* %4 to i64*
  %47 = load i64, i64* %46, align 1
  %48 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %47, i32 0
  br label %49

49:                                               ; preds = %45, %40
  %50 = phi <2 x i64> [ %44, %40 ], [ %48, %45 ]
  %51 = bitcast <2 x i64> %50 to <16 x i8>
  %52 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %51, <16 x i32> <i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26>
  %53 = or <16 x i8> %52, %36
  %54 = bitcast <16 x i8> %53 to <4 x i32>
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %56 = bitcast <4 x i32> %55 to <16 x i8>
  %57 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %18) #2
  %58 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %21) #2
  %59 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %57, <8 x i16> %58) #2
  %60 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %59, <8 x i16> %59) #2
  %61 = add <8 x i16> %60, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %62 = ashr <8 x i16> %61, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %63 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %62, <8 x i16> undef) #2
  %64 = bitcast <16 x i8> %63 to <4 x i32>
  %65 = extractelement <4 x i32> %64, i32 0
  %66 = bitcast i8* %0 to i32*
  store i32 %65, i32* %66, align 1
  %67 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %24) #2
  %68 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %56, <16 x i8> %27) #2
  %69 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %67, <8 x i16> %68) #2
  %70 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %69, <8 x i16> %69) #2
  %71 = add <8 x i16> %70, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %72 = ashr <8 x i16> %71, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %73 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %72, <8 x i16> undef) #2
  %74 = getelementptr inbounds i8, i8* %0, i64 %1
  %75 = bitcast <16 x i8> %73 to <4 x i32>
  %76 = extractelement <4 x i32> %75, i32 0
  %77 = bitcast i8* %74 to i32*
  store i32 %76, i32* %77, align 1
  %78 = shufflevector <4 x i32> %75, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %79 = bitcast <4 x i32> %78 to <16 x i8>
  %80 = or <16 x i8> %52, %79
  %81 = shufflevector <16 x i8> %80, <16 x i8> undef, <16 x i32> <i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15, i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15>
  %82 = getelementptr inbounds i8, i8* %74, i64 %1
  %83 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %81, <16 x i8> %18) #2
  %84 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %81, <16 x i8> %21) #2
  %85 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %83, <8 x i16> %84) #2
  %86 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %85, <8 x i16> %85) #2
  %87 = add <8 x i16> %86, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %88 = ashr <8 x i16> %87, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %89 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %88, <8 x i16> undef) #2
  %90 = bitcast <16 x i8> %89 to <4 x i32>
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = bitcast i8* %82 to i32*
  store i32 %91, i32* %92, align 1
  %93 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %81, <16 x i8> %24) #2
  %94 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %81, <16 x i8> %27) #2
  %95 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %93, <8 x i16> %94) #2
  %96 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %95, <8 x i16> %95) #2
  %97 = add <8 x i16> %96, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %98 = ashr <8 x i16> %97, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %99 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %98, <8 x i16> undef) #2
  %100 = getelementptr inbounds i8, i8* %82, i64 %1
  %101 = bitcast <16 x i8> %99 to <4 x i32>
  %102 = extractelement <4 x i32> %101, i32 0
  %103 = bitcast i8* %100 to i32*
  store i32 %102, i32* %103, align 1
  %104 = lshr i64 271492, %7
  %105 = and i64 %104, 1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %224, label %107

107:                                              ; preds = %49
  %108 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0>, <16 x i8> %52, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %109 = shufflevector <4 x i32> %101, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %110 = bitcast <4 x i32> %109 to <16 x i8>
  %111 = or <16 x i8> %108, %110
  %112 = shufflevector <16 x i8> %111, <16 x i8> undef, <16 x i32> <i32 9, i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 15, i32 9, i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 15>
  %113 = getelementptr inbounds i8, i8* %100, i64 %1
  %114 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %18) #2
  %115 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %21) #2
  %116 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %114, <8 x i16> %115) #2
  %117 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %116, <8 x i16> %116) #2
  %118 = add <8 x i16> %117, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %119 = ashr <8 x i16> %118, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %120 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %119, <8 x i16> undef) #2
  %121 = bitcast <16 x i8> %120 to <4 x i32>
  %122 = extractelement <4 x i32> %121, i32 0
  %123 = bitcast i8* %113 to i32*
  store i32 %122, i32* %123, align 1
  %124 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %24) #2
  %125 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %112, <16 x i8> %27) #2
  %126 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %124, <8 x i16> %125) #2
  %127 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %126, <8 x i16> %126) #2
  %128 = add <8 x i16> %127, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %129 = ashr <8 x i16> %128, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %130 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %129, <8 x i16> undef) #2
  %131 = getelementptr inbounds i8, i8* %113, i64 %1
  %132 = bitcast <16 x i8> %130 to <4 x i32>
  %133 = extractelement <4 x i32> %132, i32 0
  %134 = bitcast i8* %131 to i32*
  store i32 %133, i32* %134, align 1
  %135 = shufflevector <16 x i8> %108, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %136 = shufflevector <4 x i32> %132, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %137 = shufflevector <16 x i8> %108, <16 x i8> <i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 17>
  %138 = getelementptr inbounds i8, i8* %4, i64 8
  %139 = bitcast i8* %138 to i64*
  %140 = load i64, i64* %139, align 1
  %141 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %140, i32 0
  %142 = bitcast <4 x i32> %136 to <16 x i8>
  %143 = or <16 x i8> %137, %142
  %144 = shufflevector <16 x i8> %143, <16 x i8> undef, <16 x i32> <i32 9, i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 15, i32 9, i32 0, i32 1, i32 2, i32 3, i32 10, i32 11, i32 15>
  %145 = getelementptr inbounds i8, i8* %131, i64 %1
  %146 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %144, <16 x i8> %18) #2
  %147 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %144, <16 x i8> %21) #2
  %148 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %146, <8 x i16> %147) #2
  %149 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %148, <8 x i16> %148) #2
  %150 = add <8 x i16> %149, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %151 = ashr <8 x i16> %150, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %152 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %151, <8 x i16> undef) #2
  %153 = bitcast <16 x i8> %152 to <4 x i32>
  %154 = extractelement <4 x i32> %153, i32 0
  %155 = bitcast i8* %145 to i32*
  store i32 %154, i32* %155, align 1
  %156 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %144, <16 x i8> %24) #2
  %157 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %144, <16 x i8> %27) #2
  %158 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %156, <8 x i16> %157) #2
  %159 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %158, <8 x i16> %158) #2
  %160 = add <8 x i16> %159, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %161 = ashr <8 x i16> %160, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %162 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %161, <8 x i16> undef) #2
  %163 = getelementptr inbounds i8, i8* %145, i64 %1
  %164 = bitcast <16 x i8> %162 to <4 x i32>
  %165 = extractelement <4 x i32> %164, i32 0
  %166 = bitcast i8* %163 to i32*
  store i32 %165, i32* %166, align 1
  %167 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %135, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %168 = shufflevector <4 x i32> %164, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %169 = bitcast <2 x i64> %141 to <16 x i8>
  %170 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %169, <16 x i32> <i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24>
  %171 = or <16 x i8> %170, %167
  %172 = bitcast <4 x i32> %168 to <16 x i8>
  %173 = or <16 x i8> %171, %172
  %174 = shufflevector <16 x i8> %173, <16 x i8> undef, <16 x i32> <i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15, i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15>
  %175 = getelementptr inbounds i8, i8* %163, i64 %1
  %176 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %174, <16 x i8> %18) #2
  %177 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %174, <16 x i8> %21) #2
  %178 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %176, <8 x i16> %177) #2
  %179 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %178, <8 x i16> %178) #2
  %180 = add <8 x i16> %179, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %181 = ashr <8 x i16> %180, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %182 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %181, <8 x i16> undef) #2
  %183 = bitcast <16 x i8> %182 to <4 x i32>
  %184 = extractelement <4 x i32> %183, i32 0
  %185 = bitcast i8* %175 to i32*
  store i32 %184, i32* %185, align 1
  %186 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %174, <16 x i8> %24) #2
  %187 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %174, <16 x i8> %27) #2
  %188 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %186, <8 x i16> %187) #2
  %189 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %188, <8 x i16> %188) #2
  %190 = add <8 x i16> %189, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %191 = ashr <8 x i16> %190, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %192 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %191, <8 x i16> undef) #2
  %193 = getelementptr inbounds i8, i8* %175, i64 %1
  %194 = bitcast <16 x i8> %192 to <4 x i32>
  %195 = extractelement <4 x i32> %194, i32 0
  %196 = bitcast i8* %193 to i32*
  store i32 %195, i32* %196, align 1
  %197 = shufflevector <4 x i32> %194, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %198 = shufflevector <16 x i8> %171, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %199 = bitcast <4 x i32> %197 to <16 x i8>
  %200 = or <16 x i8> %198, %199
  %201 = shufflevector <16 x i8> %200, <16 x i8> undef, <16 x i32> <i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15, i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15>
  %202 = getelementptr inbounds i8, i8* %193, i64 %1
  %203 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %201, <16 x i8> %18) #2
  %204 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %201, <16 x i8> %21) #2
  %205 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %203, <8 x i16> %204) #2
  %206 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %205, <8 x i16> %205) #2
  %207 = add <8 x i16> %206, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %208 = ashr <8 x i16> %207, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %209 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %208, <8 x i16> undef) #2
  %210 = bitcast <16 x i8> %209 to <4 x i32>
  %211 = extractelement <4 x i32> %210, i32 0
  %212 = bitcast i8* %202 to i32*
  store i32 %211, i32* %212, align 1
  %213 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %201, <16 x i8> %24) #2
  %214 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %201, <16 x i8> %27) #2
  %215 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %213, <8 x i16> %214) #2
  %216 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %215, <8 x i16> %215) #2
  %217 = add <8 x i16> %216, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %218 = ashr <8 x i16> %217, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %219 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %218, <8 x i16> undef) #2
  %220 = getelementptr inbounds i8, i8* %202, i64 %1
  %221 = bitcast <16 x i8> %219 to <4 x i32>
  %222 = extractelement <4 x i32> %221, i32 0
  %223 = bitcast i8* %220 to i32*
  store i32 %222, i32* %223, align 1
  br label %228

224:                                              ; preds = %49
  %225 = lshr i64 507838, %7
  %226 = and i64 %225, 1
  %227 = icmp eq i64 %226, 0
  br i1 %227, label %623, label %228

228:                                              ; preds = %224, %107
  %229 = phi i32 [ %222, %107 ], [ %102, %224 ]
  %230 = phi i8* [ %175, %107 ], [ %0, %224 ]
  %231 = phi <16 x i8> [ %198, %107 ], [ %52, %224 ]
  %232 = getelementptr inbounds i8, i8* %230, i64 %1
  %233 = getelementptr inbounds i8, i8* %232, i64 %1
  %234 = getelementptr inbounds i8, i8* %233, i64 %1
  %235 = shufflevector <16 x i8> %231, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %236 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %235, <16 x i32> <i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25>
  %237 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %229, i32 0
  %238 = bitcast <4 x i32> %237 to <16 x i8>
  %239 = or <16 x i8> %236, %238
  %240 = shufflevector <16 x i8> %239, <16 x i8> undef, <16 x i32> <i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15, i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15>
  %241 = getelementptr inbounds i8, i8* %234, i64 %1
  %242 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %240, <16 x i8> %18) #2
  %243 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %240, <16 x i8> %21) #2
  %244 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %242, <8 x i16> %243) #2
  %245 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %244, <8 x i16> %244) #2
  %246 = add <8 x i16> %245, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %247 = ashr <8 x i16> %246, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %248 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %247, <8 x i16> undef) #2
  %249 = bitcast <16 x i8> %248 to <4 x i32>
  %250 = extractelement <4 x i32> %249, i32 0
  %251 = bitcast i8* %241 to i32*
  store i32 %250, i32* %251, align 1
  %252 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %240, <16 x i8> %24) #2
  %253 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %240, <16 x i8> %27) #2
  %254 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %252, <8 x i16> %253) #2
  %255 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %254, <8 x i16> %254) #2
  %256 = add <8 x i16> %255, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %257 = ashr <8 x i16> %256, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %258 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %257, <8 x i16> undef) #2
  %259 = getelementptr inbounds i8, i8* %241, i64 %1
  %260 = bitcast <16 x i8> %258 to <4 x i32>
  %261 = extractelement <4 x i32> %260, i32 0
  %262 = bitcast i8* %259 to i32*
  store i32 %261, i32* %262, align 1
  %263 = shufflevector <4 x i32> %260, <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %264 = shufflevector <16 x i8> %236, <16 x i8> <i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 8, i32 9, i32 10, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 17>
  %265 = bitcast <4 x i32> %263 to <16 x i8>
  %266 = or <16 x i8> %264, %265
  %267 = shufflevector <16 x i8> %266, <16 x i8> undef, <16 x i32> <i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15, i32 6, i32 0, i32 1, i32 2, i32 3, i32 7, i32 8, i32 15>
  %268 = getelementptr inbounds i8, i8* %259, i64 %1
  %269 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %267, <16 x i8> %18) #2
  %270 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %267, <16 x i8> %21) #2
  %271 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %269, <8 x i16> %270) #2
  %272 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %271, <8 x i16> %271) #2
  %273 = add <8 x i16> %272, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %274 = ashr <8 x i16> %273, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %275 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %274, <8 x i16> undef) #2
  %276 = bitcast <16 x i8> %275 to <4 x i32>
  %277 = extractelement <4 x i32> %276, i32 0
  %278 = bitcast i8* %268 to i32*
  store i32 %277, i32* %278, align 1
  %279 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %267, <16 x i8> %24) #2
  %280 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %267, <16 x i8> %27) #2
  %281 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %279, <8 x i16> %280) #2
  %282 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %281, <8 x i16> %281) #2
  %283 = add <8 x i16> %282, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %284 = ashr <8 x i16> %283, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %285 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %284, <8 x i16> undef) #2
  %286 = getelementptr inbounds i8, i8* %268, i64 %1
  %287 = bitcast <16 x i8> %285 to <4 x i32>
  %288 = extractelement <4 x i32> %287, i32 0
  %289 = bitcast i8* %286 to i32*
  store i32 %288, i32* %289, align 1
  br label %623

290:                                              ; preds = %6
  %291 = bitcast i8* %28 to i64*
  %292 = load i64, i64* %291, align 1
  %293 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %292, i32 0
  %294 = bitcast i8* %4 to i32*
  %295 = load i32, i32* %294, align 1
  %296 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %295, i32 0
  %297 = bitcast <4 x i32> %296 to <16 x i8>
  %298 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %297, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
  %299 = bitcast <2 x i64> %293 to <16 x i8>
  %300 = or <16 x i8> %298, %299
  %301 = shufflevector <16 x i8> %300, <16 x i8> undef, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 9, i32 15, i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 9, i32 15>
  %302 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %301, <16 x i8> %18) #2
  %303 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %301, <16 x i8> %21) #2
  %304 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %302, <8 x i16> %303) #2
  %305 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %304, <8 x i16> %304) #2
  %306 = add <8 x i16> %305, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %307 = ashr <8 x i16> %306, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %308 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %307, <8 x i16> undef) #2
  %309 = bitcast <16 x i8> %308 to <4 x i32>
  %310 = extractelement <4 x i32> %309, i32 0
  %311 = bitcast i8* %0 to i32*
  store i32 %310, i32* %311, align 1
  %312 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %301, <16 x i8> %24) #2
  %313 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %301, <16 x i8> %27) #2
  %314 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %312, <8 x i16> %313) #2
  %315 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %314, <8 x i16> %314) #2
  %316 = add <8 x i16> %315, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %317 = ashr <8 x i16> %316, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %318 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %317, <8 x i16> undef) #2
  %319 = getelementptr inbounds i8, i8* %0, i64 %1
  %320 = bitcast <16 x i8> %318 to <4 x i32>
  %321 = extractelement <4 x i32> %320, i32 0
  %322 = bitcast i8* %319 to i32*
  store i32 %321, i32* %322, align 1
  %323 = shufflevector <16 x i8> %298, <16 x i8> <i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 1, i32 2, i32 3, i32 4, i32 undef, i32 undef, i32 undef, i32 undef, i32 9, i32 10, i32 11, i32 undef, i32 undef, i32 undef, i32 undef, i32 16>
  %324 = shufflevector <4 x i32> %320, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %325 = bitcast <4 x i32> %324 to <16 x i8>
  %326 = or <16 x i8> %323, %325
  %327 = shufflevector <16 x i8> %326, <16 x i8> undef, <16 x i32> <i32 8, i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 15, i32 8, i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 15>
  %328 = shl i64 %1, 1
  %329 = shl i64 %1, 2
  %330 = getelementptr inbounds i8, i8* %0, i64 %328
  %331 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %327, <16 x i8> %18) #2
  %332 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %327, <16 x i8> %21) #2
  %333 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %331, <8 x i16> %332) #2
  %334 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %333, <8 x i16> %333) #2
  %335 = add <8 x i16> %334, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %336 = ashr <8 x i16> %335, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %337 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %336, <8 x i16> undef) #2
  %338 = bitcast <16 x i8> %337 to <4 x i32>
  %339 = extractelement <4 x i32> %338, i32 0
  %340 = bitcast i8* %330 to i32*
  store i32 %339, i32* %340, align 1
  %341 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %327, <16 x i8> %24) #2
  %342 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %327, <16 x i8> %27) #2
  %343 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %341, <8 x i16> %342) #2
  %344 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %343, <8 x i16> %343) #2
  %345 = add <8 x i16> %344, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %346 = ashr <8 x i16> %345, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %347 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %346, <8 x i16> undef) #2
  %348 = getelementptr inbounds i8, i8* %330, i64 %1
  %349 = bitcast <16 x i8> %347 to <4 x i32>
  %350 = extractelement <4 x i32> %349, i32 0
  %351 = bitcast i8* %348 to i32*
  store i32 %350, i32* %351, align 1
  %352 = add nsw i32 %9, -4
  %353 = icmp sgt i32 %352, 3
  br i1 %353, label %354, label %361

354:                                              ; preds = %290
  %355 = add nsw i64 %1, -1
  %356 = add nsw i64 %1, 3
  %357 = add nsw i64 %328, -1
  %358 = mul i64 %1, 3
  %359 = add nsw i64 %358, -1
  %360 = sext i32 %352 to i64
  br label %381

361:                                              ; preds = %381, %290
  %362 = phi i8* [ %0, %290 ], [ %384, %381 ]
  %363 = lshr i64 507838, %7
  %364 = and i64 %363, 1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %623, label %366

366:                                              ; preds = %361
  %367 = sext i32 %9 to i64
  %368 = sub nsw i64 0, %367
  %369 = sub i64 0, %1
  %370 = getelementptr inbounds i8, i8* %4, i64 -1
  %371 = lshr i64 516062, %7
  %372 = and i64 %371, 1
  %373 = icmp eq i64 %372, 0
  %374 = sub i64 3, %1
  %375 = add nsw i64 %1, -1
  %376 = add nsw i64 %1, 3
  %377 = add nsw i64 %328, -1
  %378 = mul i64 %1, 3
  %379 = add nsw i64 %378, -1
  %380 = sext i32 %11 to i64
  br label %464

381:                                              ; preds = %381, %354
  %382 = phi i64 [ 3, %354 ], [ %390, %381 ]
  %383 = phi i8* [ %0, %354 ], [ %384, %381 ]
  %384 = getelementptr inbounds i8, i8* %383, i64 4
  %385 = getelementptr inbounds i8, i8* %3, i64 %382
  %386 = bitcast i8* %385 to i32*
  %387 = load i32, i32* %386, align 1
  %388 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %387, i32 0
  %389 = bitcast <4 x i32> %388 to <16 x i8>
  %390 = add nuw nsw i64 %382, 4
  %391 = getelementptr inbounds i8, i8* %3, i64 %390
  %392 = load i8, i8* %391, align 1
  %393 = insertelement <16 x i8> %389, i8 %392, i64 4
  %394 = getelementptr inbounds i8, i8* %383, i64 3
  %395 = load i8, i8* %394, align 1
  %396 = insertelement <16 x i8> %393, i8 %395, i64 5
  %397 = getelementptr inbounds i8, i8* %384, i64 %355
  %398 = load i8, i8* %397, align 1
  %399 = insertelement <16 x i8> %396, i8 %398, i64 6
  %400 = bitcast <16 x i8> %399 to <4 x i32>
  %401 = shufflevector <4 x i32> %400, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %402 = bitcast <4 x i32> %401 to <16 x i8>
  %403 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %402, <16 x i8> %18) #2
  %404 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %402, <16 x i8> %21) #2
  %405 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %403, <8 x i16> %404) #2
  %406 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %405, <8 x i16> %405) #2
  %407 = add <8 x i16> %406, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %408 = ashr <8 x i16> %407, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %409 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %408, <8 x i16> undef) #2
  %410 = bitcast <16 x i8> %409 to <4 x i32>
  %411 = extractelement <4 x i32> %410, i32 0
  %412 = bitcast i8* %384 to i32*
  store i32 %411, i32* %412, align 1
  %413 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %402, <16 x i8> %24) #2
  %414 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %402, <16 x i8> %27) #2
  %415 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %413, <8 x i16> %414) #2
  %416 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %415, <8 x i16> %415) #2
  %417 = add <8 x i16> %416, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %418 = ashr <8 x i16> %417, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %419 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %418, <8 x i16> undef) #2
  %420 = getelementptr inbounds i8, i8* %384, i64 %1
  %421 = bitcast <16 x i8> %419 to <4 x i32>
  %422 = extractelement <4 x i32> %421, i32 0
  %423 = bitcast i8* %420 to i32*
  store i32 %422, i32* %423, align 1
  %424 = getelementptr inbounds i8, i8* %420, i64 -1
  %425 = bitcast i8* %424 to i32*
  %426 = load i32, i32* %425, align 1
  %427 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %426, i32 0
  %428 = bitcast <4 x i32> %427 to <16 x i8>
  %429 = getelementptr inbounds i8, i8* %384, i64 %356
  %430 = load i8, i8* %429, align 1
  %431 = insertelement <16 x i8> %428, i8 %430, i64 4
  %432 = getelementptr inbounds i8, i8* %384, i64 %357
  %433 = load i8, i8* %432, align 1
  %434 = insertelement <16 x i8> %431, i8 %433, i64 5
  %435 = getelementptr inbounds i8, i8* %384, i64 %359
  %436 = load i8, i8* %435, align 1
  %437 = insertelement <16 x i8> %434, i8 %436, i64 6
  %438 = bitcast <16 x i8> %437 to <4 x i32>
  %439 = shufflevector <4 x i32> %438, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %440 = getelementptr inbounds i8, i8* %384, i64 %328
  %441 = bitcast <4 x i32> %439 to <16 x i8>
  %442 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %441, <16 x i8> %18) #2
  %443 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %441, <16 x i8> %21) #2
  %444 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %442, <8 x i16> %443) #2
  %445 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %444, <8 x i16> %444) #2
  %446 = add <8 x i16> %445, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %447 = ashr <8 x i16> %446, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %448 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %447, <8 x i16> undef) #2
  %449 = bitcast <16 x i8> %448 to <4 x i32>
  %450 = extractelement <4 x i32> %449, i32 0
  %451 = bitcast i8* %440 to i32*
  store i32 %450, i32* %451, align 1
  %452 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %441, <16 x i8> %24) #2
  %453 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %441, <16 x i8> %27) #2
  %454 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %452, <8 x i16> %453) #2
  %455 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %454, <8 x i16> %454) #2
  %456 = add <8 x i16> %455, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %457 = ashr <8 x i16> %456, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %458 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %457, <8 x i16> undef) #2
  %459 = getelementptr inbounds i8, i8* %440, i64 %1
  %460 = bitcast <16 x i8> %458 to <4 x i32>
  %461 = extractelement <4 x i32> %460, i32 0
  %462 = bitcast i8* %459 to i32*
  store i32 %461, i32* %462, align 1
  %463 = icmp slt i64 %390, %360
  br i1 %463, label %381, label %361

464:                                              ; preds = %535, %366
  %465 = phi i64 [ 4, %366 ], [ %537, %535 ]
  %466 = phi i8* [ %362, %366 ], [ %536, %535 ]
  %467 = getelementptr inbounds i8, i8* %466, i64 4
  %468 = getelementptr inbounds i8, i8* %467, i64 %329
  %469 = getelementptr inbounds i8, i8* %468, i64 %368
  %470 = getelementptr inbounds i8, i8* %469, i64 %369
  %471 = bitcast i8* %470 to i32*
  %472 = load i32, i32* %471, align 1
  %473 = insertelement <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, i32 %472, i32 0
  %474 = getelementptr inbounds i8, i8* %370, i64 %465
  %475 = bitcast i8* %474 to i32*
  %476 = load i32, i32* %475, align 1
  %477 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %476, i32 0
  %478 = bitcast <4 x i32> %477 to <16 x i8>
  %479 = shufflevector <16 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>, <16 x i8> %478, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 undef, i32 21, i32 22, i32 23>
  %480 = or i64 %465, 3
  %481 = getelementptr inbounds i8, i8* %4, i64 %480
  %482 = load i8, i8* %481, align 1
  %483 = insertelement <16 x i8> %479, i8 %482, i64 12
  %484 = bitcast <4 x i32> %473 to <16 x i8>
  %485 = or <16 x i8> %483, %484
  %486 = shufflevector <16 x i8> %485, <16 x i8> undef, <16 x i32> <i32 8, i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 15, i32 8, i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 15>
  %487 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %486, <16 x i8> %18) #2
  %488 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %486, <16 x i8> %21) #2
  %489 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %487, <8 x i16> %488) #2
  %490 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %489, <8 x i16> %489) #2
  %491 = add <8 x i16> %490, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %492 = ashr <8 x i16> %491, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %493 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %492, <8 x i16> undef) #2
  %494 = bitcast <16 x i8> %493 to <4 x i32>
  %495 = extractelement <4 x i32> %494, i32 0
  %496 = bitcast i8* %469 to i32*
  store i32 %495, i32* %496, align 1
  %497 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %486, <16 x i8> %24) #2
  %498 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %486, <16 x i8> %27) #2
  %499 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %497, <8 x i16> %498) #2
  %500 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %499, <8 x i16> %499) #2
  %501 = add <8 x i16> %500, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %502 = ashr <8 x i16> %501, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %503 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %502, <8 x i16> undef) #2
  %504 = getelementptr inbounds i8, i8* %469, i64 %1
  %505 = bitcast <16 x i8> %503 to <4 x i32>
  %506 = extractelement <4 x i32> %505, i32 0
  %507 = bitcast i8* %504 to i32*
  store i32 %506, i32* %507, align 1
  %508 = shufflevector <16 x i8> %483, <16 x i8> <i8 undef, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef, i32 10, i32 11, i32 12, i32 undef, i32 undef, i32 undef, i32 undef, i32 17>
  %509 = shufflevector <4 x i32> %505, <4 x i32> <i32 undef, i32 undef, i32 0, i32 0>, <4 x i32> <i32 0, i32 undef, i32 6, i32 7>
  %510 = bitcast <4 x i32> %509 to <16 x i8>
  %511 = or <16 x i8> %508, %510
  %512 = shufflevector <16 x i8> %511, <16 x i8> undef, <16 x i32> <i32 8, i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 15, i32 8, i32 0, i32 1, i32 2, i32 3, i32 9, i32 10, i32 15>
  %513 = getelementptr inbounds i8, i8* %469, i64 %328
  %514 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %512, <16 x i8> %18) #2
  %515 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %512, <16 x i8> %21) #2
  %516 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %514, <8 x i16> %515) #2
  %517 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %516, <8 x i16> %516) #2
  %518 = add <8 x i16> %517, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %519 = ashr <8 x i16> %518, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %520 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %519, <8 x i16> undef) #2
  %521 = bitcast <16 x i8> %520 to <4 x i32>
  %522 = extractelement <4 x i32> %521, i32 0
  %523 = bitcast i8* %513 to i32*
  store i32 %522, i32* %523, align 1
  %524 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %512, <16 x i8> %24) #2
  %525 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %512, <16 x i8> %27) #2
  %526 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %524, <8 x i16> %525) #2
  %527 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %526, <8 x i16> %526) #2
  %528 = add <8 x i16> %527, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %529 = ashr <8 x i16> %528, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %530 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %529, <8 x i16> undef) #2
  %531 = getelementptr inbounds i8, i8* %513, i64 %1
  %532 = bitcast <16 x i8> %530 to <4 x i32>
  %533 = extractelement <4 x i32> %532, i32 0
  %534 = bitcast i8* %531 to i32*
  store i32 %533, i32* %534, align 1
  br i1 %373, label %535, label %539

535:                                              ; preds = %539, %464
  %536 = phi i8* [ %469, %464 ], [ %542, %539 ]
  %537 = add nuw nsw i64 %465, 4
  %538 = icmp slt i64 %537, %380
  br i1 %538, label %464, label %623

539:                                              ; preds = %464, %539
  %540 = phi i8* [ %542, %539 ], [ %469, %464 ]
  %541 = phi i32 [ %621, %539 ], [ 4, %464 ]
  %542 = getelementptr inbounds i8, i8* %540, i64 4
  %543 = getelementptr inbounds i8, i8* %542, i64 %369
  %544 = getelementptr inbounds i8, i8* %543, i64 -1
  %545 = bitcast i8* %544 to i32*
  %546 = load i32, i32* %545, align 1
  %547 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %546, i32 0
  %548 = bitcast <4 x i32> %547 to <16 x i8>
  %549 = getelementptr inbounds i8, i8* %542, i64 %374
  %550 = load i8, i8* %549, align 1
  %551 = insertelement <16 x i8> %548, i8 %550, i64 4
  %552 = getelementptr inbounds i8, i8* %540, i64 3
  %553 = load i8, i8* %552, align 1
  %554 = insertelement <16 x i8> %551, i8 %553, i64 5
  %555 = getelementptr inbounds i8, i8* %542, i64 %375
  %556 = load i8, i8* %555, align 1
  %557 = insertelement <16 x i8> %554, i8 %556, i64 6
  %558 = bitcast <16 x i8> %557 to <4 x i32>
  %559 = shufflevector <4 x i32> %558, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %560 = bitcast <4 x i32> %559 to <16 x i8>
  %561 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %560, <16 x i8> %18) #2
  %562 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %560, <16 x i8> %21) #2
  %563 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %561, <8 x i16> %562) #2
  %564 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %563, <8 x i16> %563) #2
  %565 = add <8 x i16> %564, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %566 = ashr <8 x i16> %565, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %567 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %566, <8 x i16> undef) #2
  %568 = bitcast <16 x i8> %567 to <4 x i32>
  %569 = extractelement <4 x i32> %568, i32 0
  %570 = bitcast i8* %542 to i32*
  store i32 %569, i32* %570, align 1
  %571 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %560, <16 x i8> %24) #2
  %572 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %560, <16 x i8> %27) #2
  %573 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %571, <8 x i16> %572) #2
  %574 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %573, <8 x i16> %573) #2
  %575 = add <8 x i16> %574, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %576 = ashr <8 x i16> %575, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %577 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %576, <8 x i16> undef) #2
  %578 = getelementptr inbounds i8, i8* %542, i64 %1
  %579 = bitcast <16 x i8> %577 to <4 x i32>
  %580 = extractelement <4 x i32> %579, i32 0
  %581 = bitcast i8* %578 to i32*
  store i32 %580, i32* %581, align 1
  %582 = getelementptr inbounds i8, i8* %578, i64 -1
  %583 = bitcast i8* %582 to i32*
  %584 = load i32, i32* %583, align 1
  %585 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %584, i32 0
  %586 = bitcast <4 x i32> %585 to <16 x i8>
  %587 = getelementptr inbounds i8, i8* %542, i64 %376
  %588 = load i8, i8* %587, align 1
  %589 = insertelement <16 x i8> %586, i8 %588, i64 4
  %590 = getelementptr inbounds i8, i8* %542, i64 %377
  %591 = load i8, i8* %590, align 1
  %592 = insertelement <16 x i8> %589, i8 %591, i64 5
  %593 = getelementptr inbounds i8, i8* %542, i64 %379
  %594 = load i8, i8* %593, align 1
  %595 = insertelement <16 x i8> %592, i8 %594, i64 6
  %596 = bitcast <16 x i8> %595 to <4 x i32>
  %597 = shufflevector <4 x i32> %596, <4 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %598 = getelementptr inbounds i8, i8* %542, i64 %328
  %599 = bitcast <4 x i32> %597 to <16 x i8>
  %600 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %599, <16 x i8> %18) #2
  %601 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %599, <16 x i8> %21) #2
  %602 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %600, <8 x i16> %601) #2
  %603 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %602, <8 x i16> %602) #2
  %604 = add <8 x i16> %603, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %605 = ashr <8 x i16> %604, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %606 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %605, <8 x i16> undef) #2
  %607 = bitcast <16 x i8> %606 to <4 x i32>
  %608 = extractelement <4 x i32> %607, i32 0
  %609 = bitcast i8* %598 to i32*
  store i32 %608, i32* %609, align 1
  %610 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %599, <16 x i8> %24) #2
  %611 = tail call <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8> %599, <16 x i8> %27) #2
  %612 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %610, <8 x i16> %611) #2
  %613 = tail call <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16> %612, <8 x i16> %612) #2
  %614 = add <8 x i16> %613, <i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8>
  %615 = ashr <8 x i16> %614, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %616 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %615, <8 x i16> undef) #2
  %617 = getelementptr inbounds i8, i8* %598, i64 %1
  %618 = bitcast <16 x i8> %616 to <4 x i32>
  %619 = extractelement <4 x i32> %618, i32 0
  %620 = bitcast i8* %617 to i32*
  store i32 %619, i32* %620, align 1
  %621 = add nuw nsw i32 %541, 4
  %622 = icmp slt i32 %621, %9
  br i1 %622, label %539, label %535

623:                                              ; preds = %535, %224, %361, %228
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.pmadd.ub.sw.128(<16 x i8>, <16 x i8>) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.ssse3.phadd.w.128(<8 x i16>, <8 x i16>) #1

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #1

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
