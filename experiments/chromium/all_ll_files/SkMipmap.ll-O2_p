; ModuleID = '../../third_party/skia/src/core/SkMipmap.cpp'
source_filename = "../../third_party/skia/src/core/SkMipmap.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkMipmap = type <{ %class.SkCachedData.base, [6 x i8], %class.sk_sp, %"struct.SkMipmap::Level"*, i32, [4 x i8] }>
%class.SkCachedData.base = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8 }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%union.anon = type { %class.SkDiscardableMemory* }
%class.SkDiscardableMemory = type opaque
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%"struct.SkMipmap::Level" = type { %class.SkPixmap, %struct.SkSize }
%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%struct.SkISize = type { i32, i32 }
%struct.SkSize = type { float, float }
%class.SkCachedData = type <{ i32 (...)**, %class.SkMutex, %union.anon, i8*, i64, i32, i32, i8, i8, [6 x i8] }>
%class.SkBitmap = type { %class.sk_sp.6, %class.SkPixmap, %class.sk_sp.7 }
%class.sk_sp.6 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.sk_sp.7 = type { %class.SkMipmap* }
%class.sk_sp.8 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.9, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.9 = type { %"struct.std::__1::atomic" }
%class.SkDynamicMemoryWStream = type { %class.SkWStream, %"struct.SkDynamicMemoryWStream::Block"*, %"struct.SkDynamicMemoryWStream::Block"*, i64 }
%class.SkWStream = type { i32 (...)** }
%"struct.SkDynamicMemoryWStream::Block" = type opaque
%"struct.SkPngEncoder::Options" = type { i32, i32, %class.sk_sp.40 }
%class.sk_sp.40 = type { %class.SkDataTable* }
%class.SkDataTable = type { %class.SkRefCnt.base, i32, i64, %union.anon.41, void (i8*)*, i8* }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%union.anon.41 = type { %"struct.SkDataTable::Dir"* }
%"struct.SkDataTable::Dir" = type { i8*, i64 }
%class.SkBinaryWriteBuffer = type { %class.SkWriteBuffer, %class.sk_sp.14, %class.sk_sp.15, %class.SkWriter32, %class.SkTHashMap }
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.8*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.8*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.8*, %class.SkTypeface*, i8*)*, i8* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.10", [7 x i8] }>
%"struct.std::__1::atomic.10" = type { %"struct.std::__1::__atomic_base.11" }
%"struct.std::__1::__atomic_base.11" = type { %"struct.std::__1::__cxx_atomic_impl.12" }
%"struct.std::__1::__cxx_atomic_impl.12" = type { %"struct.std::__1::__cxx_atomic_base_impl.13" }
%"struct.std::__1::__cxx_atomic_base_impl.13" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.14 = type { %class.SkFactorySet* }
%class.SkFactorySet = type opaque
%class.sk_sp.15 = type { %class.SkRefCntSet* }
%class.SkRefCntSet = type opaque
%class.SkWriter32 = type { i8*, i64, i64, i8*, %class.SkAutoTMalloc }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.17" }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.SkTHashTable<SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair, const char *, SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair, const char *, SkTHashMap<const char *, unsigned int, SkGoodHash>::Pair>::Slot" = type opaque
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkMipmapBuilder = type { %class.sk_sp.7 }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap.21, i32, [4 x i8], %class.sk_sp.30*, i32, [4 x i8], void (%class.sk_sp.31*, %class.SkReadBuffer*)**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap.21 = type { %class.SkTHashTable.22 }
%class.SkTHashTable.22 = type { i32, i32, %class.SkAutoTArray.23 }
%class.SkAutoTArray.23 = type { %"class.std::__1::unique_ptr.24" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.31*, %class.SkReadBuffer*)* }
%class.sk_sp.31 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.30 = type { %class.SkTypeface* }
%struct.SkDeserialProcs = type { {}*, i8*, void (%class.sk_sp.33*, i8*, i64, i8*)*, i8*, void (%class.sk_sp.30*, i8*, i64, i8*)*, i8* }
%class.sk_sp.33 = type { %class.SkImage* }
%class.SkImageGenerator = type <{ i32 (...)**, %struct.SkImageInfo, i32, [4 x i8] }>

$_Z14downsample_1_2I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_1_3I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_2_1I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_2_2I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_2_3I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_3_1I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_3_2I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_3_3I20ColorTypeFilter_8888EvPvPKvmi = comdat any

$_Z14downsample_1_2I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_1_3I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_2_1I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_2_2I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_2_3I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_3_1I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_3_2I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_3_3I19ColorTypeFilter_565EvPvPKvmi = comdat any

$_Z14downsample_1_2I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_1_3I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_2_1I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_2_2I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_2_3I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_3_1I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_3_2I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_3_3I20ColorTypeFilter_4444EvPvPKvmi = comdat any

$_Z14downsample_1_2I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_1_3I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_2_1I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_2_2I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_2_3I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_3_1I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_3_2I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_3_3I17ColorTypeFilter_8EvPvPKvmi = comdat any

$_Z14downsample_1_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_1_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_2_1I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_2_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_2_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_3_1I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_3_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_3_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi = comdat any

$_Z14downsample_1_2I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_1_3I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_2_1I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_2_2I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_2_3I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_3_1I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_3_2I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_3_3I18ColorTypeFilter_88EvPvPKvmi = comdat any

$_Z14downsample_1_2I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_1_3I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_2_1I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_2_2I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_2_3I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_3_1I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_3_2I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_3_3I20ColorTypeFilter_1616EvPvPKvmi = comdat any

$_Z14downsample_1_2I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_1_3I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_2_1I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_2_2I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_2_3I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_3_1I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_3_2I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_3_3I18ColorTypeFilter_16EvPvPKvmi = comdat any

$_Z14downsample_1_2I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_1_3I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_2_1I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_2_2I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_2_3I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_3_1I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_3_2I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_3_3I23ColorTypeFilter_1010102EvPvPKvmi = comdat any

$_Z14downsample_1_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_1_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_2_1I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_2_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_2_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_3_1I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_3_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_3_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi = comdat any

$_Z14downsample_1_2I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_1_3I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_2_1I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_2_2I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_2_3I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_3_1I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_3_2I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_3_3I22ColorTypeFilter_F16F16EvPvPKvmi = comdat any

$_Z14downsample_1_2I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_1_3I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_2_1I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_2_2I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_2_3I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_3_1I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_3_2I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_Z14downsample_3_3I24ColorTypeFilter_16161616EvPvPKvmi = comdat any

$_ZN8SkMipmapD2Ev = comdat any

$_ZN8SkMipmapD0Ev = comdat any

$_ZN8SkMipmap12onDataChangeEPvS0_ = comdat any

$_ZTV8SkMipmap = comdat any

@_ZTV8SkMipmap = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkMipmap*)* @_ZN8SkMipmapD2Ev to i8*), i8* bitcast (void (%class.SkMipmap*)* @_ZN8SkMipmapD0Ev to i8*), i8* bitcast (void (%class.SkMipmap*, i8*, i8*)* @_ZN8SkMipmap12onDataChangeEPvS0_ to i8*)] }, comdat, align 8
@_ZTV22SkDynamicMemoryWStream = external unnamed_addr constant { [7 x i8*] }, align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i64 @_ZN8SkMipmap15AllocLevelsSizeEim(i32, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp slt i32 %0, 0
  br i1 %3, label %14, label %4

4:                                                ; preds = %2
  %5 = add nuw nsw i32 %0, 1
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 48
  %8 = add i64 %7, %1
  %9 = add i64 %8, 2147483648
  %10 = icmp ult i64 %9, 4294967296
  br i1 %10, label %11, label %14

11:                                               ; preds = %4
  %12 = shl i64 %8, 32
  %13 = ashr exact i64 %12, 32
  br label %14

14:                                               ; preds = %11, %4, %2
  %15 = phi i64 [ 0, %2 ], [ %13, %11 ], [ 0, %4 ]
  ret i64 %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkMipmap* @_ZN8SkMipmap5BuildERK8SkPixmapPFP19SkDiscardableMemorymEb(%class.SkPixmap* nocapture readonly dereferenceable(40), %class.SkDiscardableMemory* (i64)*, i1 zeroext) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.SkPixmap, align 8
  %5 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  switch i32 %6, label %21 [
    i32 4, label %9
    i32 6, label %9
    i32 2, label %10
    i32 3, label %11
    i32 1, label %12
    i32 11, label %12
    i32 12, label %13
    i32 13, label %13
    i32 15, label %14
    i32 19, label %15
    i32 18, label %16
    i32 7, label %17
    i32 8, label %17
    i32 16, label %18
    i32 17, label %19
    i32 20, label %20
    i32 0, label %298
    i32 5, label %298
    i32 9, label %298
    i32 10, label %298
    i32 14, label %298
  ]

9:                                                ; preds = %3, %3
  br label %21

10:                                               ; preds = %3
  br label %21

11:                                               ; preds = %3
  br label %21

12:                                               ; preds = %3, %3
  br label %21

13:                                               ; preds = %3, %3
  br label %21

14:                                               ; preds = %3
  br label %21

15:                                               ; preds = %3
  br label %21

16:                                               ; preds = %3
  br label %21

17:                                               ; preds = %3, %3
  br label %21

18:                                               ; preds = %3
  br label %21

19:                                               ; preds = %3
  br label %21

20:                                               ; preds = %3
  br label %21

21:                                               ; preds = %3, %20, %19, %18, %17, %16, %15, %14, %13, %12, %11, %10, %9
  %22 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_2_2I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_2_2I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_2_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_2_2I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_2_2I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_2_2I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_2_2I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_2_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_2_2I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_2_2I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_2_2I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_2_2I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %23 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_2_3I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_2_3I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_2_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_2_3I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_2_3I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_2_3I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_2_3I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_2_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_2_3I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_2_3I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_2_3I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_2_3I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %24 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_3_1I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_3_1I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_3_1I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_3_1I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_3_1I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_3_1I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_3_1I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_3_1I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_3_1I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_3_1I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_3_1I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_3_1I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %25 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_3_2I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_3_2I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_3_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_3_2I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_3_2I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_3_2I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_3_2I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_3_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_3_2I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_3_2I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_3_2I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_3_2I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %26 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_3_3I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_3_3I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_3_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_3_3I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_3_3I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_3_3I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_3_3I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_3_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_3_3I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_3_3I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_3_3I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_3_3I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %27 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_2_1I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_2_1I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_2_1I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_2_1I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_2_1I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_2_1I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_2_1I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_2_1I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_2_1I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_2_1I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_2_1I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_2_1I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %28 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_1_3I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_1_3I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_1_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_1_3I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_1_3I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_1_3I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_1_3I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_1_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_1_3I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_1_3I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_1_3I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_1_3I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %29 = phi void (i8*, i8*, i64, i32)* [ null, %3 ], [ @_Z14downsample_1_2I24ColorTypeFilter_16161616EvPvPKvmi, %20 ], [ @_Z14downsample_1_2I22ColorTypeFilter_F16F16EvPvPKvmi, %19 ], [ @_Z14downsample_1_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi, %18 ], [ @_Z14downsample_1_2I23ColorTypeFilter_1010102EvPvPKvmi, %17 ], [ @_Z14downsample_1_2I18ColorTypeFilter_16EvPvPKvmi, %16 ], [ @_Z14downsample_1_2I20ColorTypeFilter_1616EvPvPKvmi, %15 ], [ @_Z14downsample_1_2I18ColorTypeFilter_88EvPvPKvmi, %14 ], [ @_Z14downsample_1_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi, %13 ], [ @_Z14downsample_1_2I17ColorTypeFilter_8EvPvPKvmi, %12 ], [ @_Z14downsample_1_2I20ColorTypeFilter_4444EvPvPKvmi, %11 ], [ @_Z14downsample_1_2I19ColorTypeFilter_565EvPvPKvmi, %10 ], [ @_Z14downsample_1_2I20ColorTypeFilter_8888EvPvPKvmi, %9 ]
  %30 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp slt i32 %31, 2
  %33 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 2
  %36 = and i1 %32, %35
  br i1 %36, label %298, label %37

37:                                               ; preds = %21
  %38 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 1, i32 1
  %39 = icmp slt i32 %31, 1
  %40 = icmp slt i32 %34, 1
  %41 = or i1 %39, %40
  br i1 %41, label %49, label %42

42:                                               ; preds = %37
  %43 = icmp slt i32 %31, %34
  %44 = select i1 %43, i32 %34, i32 %31
  %45 = icmp slt i32 %44, 2
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = tail call i32 @llvm.ctlz.i32(i32 %44, i1 false) #17, !range !2
  %48 = sub nsw i32 31, %47
  br label %49

49:                                               ; preds = %46, %42, %37
  %50 = phi i32 [ %48, %46 ], [ 0, %37 ], [ 0, %42 ]
  br label %64

51:                                               ; preds = %94
  %52 = icmp slt i32 %50, 0
  br i1 %52, label %298, label %53

53:                                               ; preds = %51
  %54 = mul nsw i32 %50, 48
  %55 = add nsw i32 %54, 48
  %56 = sext i32 %55 to i64
  %57 = add i64 %102, %56
  %58 = add i64 %57, 2147483648
  %59 = icmp ult i64 %58, 4294967296
  br i1 %59, label %60, label %298

60:                                               ; preds = %53
  %61 = shl i64 %57, 32
  %62 = ashr exact i64 %61, 32
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %298, label %108

64:                                               ; preds = %104, %49
  %65 = phi i32 [ %107, %104 ], [ %34, %49 ]
  %66 = phi i32 [ %106, %104 ], [ %31, %49 ]
  %67 = phi i32 [ %105, %104 ], [ %50, %49 ]
  %68 = phi i64 [ %102, %104 ], [ 0, %49 ]
  %69 = icmp slt i32 %66, 1
  %70 = icmp slt i32 %65, 1
  %71 = or i1 %69, %70
  br i1 %71, label %94, label %72

72:                                               ; preds = %64
  %73 = icmp slt i32 %66, %65
  %74 = select i1 %73, i32 %65, i32 %66
  %75 = icmp slt i32 %74, 2
  br i1 %75, label %79, label %76

76:                                               ; preds = %72
  %77 = tail call i32 @llvm.ctlz.i32(i32 %74, i1 false) #17, !range !2
  %78 = sub nsw i32 31, %77
  br label %79

79:                                               ; preds = %76, %72
  %80 = phi i32 [ %78, %76 ], [ 0, %72 ]
  %81 = icmp sgt i32 %80, %67
  br i1 %81, label %82, label %94

82:                                               ; preds = %79
  %83 = add nuw nsw i32 %67, 1
  %84 = lshr i32 %66, %83
  %85 = icmp sgt i32 %84, 1
  %86 = select i1 %85, i32 %84, i32 1
  %87 = lshr i32 %65, %83
  %88 = icmp sgt i32 %87, 1
  %89 = select i1 %88, i32 %87, i32 1
  %90 = zext i32 %89 to i64
  %91 = shl nuw nsw i64 %90, 32
  %92 = zext i32 %86 to i64
  %93 = or i64 %91, %92
  br label %94

94:                                               ; preds = %79, %64, %82
  %95 = phi i64 [ %93, %82 ], [ 0, %64 ], [ 0, %79 ]
  %96 = trunc i64 %95 to i32
  %97 = tail call i32 @_Z24SkColorTypeBytesPerPixel11SkColorType(i32 %6) #17
  %98 = mul nsw i32 %97, %96
  %99 = sext i32 %98 to i64
  %100 = ashr i64 %95, 32
  %101 = mul nsw i64 %100, %99
  %102 = add i64 %101, %68
  %103 = icmp sgt i32 %67, 0
  br i1 %103, label %104, label %51

104:                                              ; preds = %94
  %105 = add nsw i32 %67, -1
  %106 = load i32, i32* %30, align 4
  %107 = load i32, i32* %38, align 4
  br label %64

108:                                              ; preds = %60
  %109 = icmp eq %class.SkDiscardableMemory* (i64)* %1, null
  br i1 %109, label %116, label %110

110:                                              ; preds = %108
  %111 = tail call %class.SkDiscardableMemory* %1(i64 %62) #17
  %112 = icmp eq %class.SkDiscardableMemory* %111, null
  br i1 %112, label %298, label %113

113:                                              ; preds = %110
  %114 = tail call i8* @_Znwm(i64 88) #18
  %115 = bitcast i8* %114 to %class.SkCachedData*
  tail call void @_ZN12SkCachedDataC2EmP19SkDiscardableMemory(%class.SkCachedData* nonnull %115, i64 %62, %class.SkDiscardableMemory* nonnull %111) #17
  br label %120

116:                                              ; preds = %108
  %117 = tail call i8* @_Znwm(i64 88) #18
  %118 = tail call i8* @_Z15sk_malloc_flagsmj(i64 %62, i32 2) #17
  %119 = bitcast i8* %117 to %class.SkCachedData*
  tail call void @_ZN12SkCachedDataC2EPvm(%class.SkCachedData* nonnull %119, i8* %118, i64 %62) #17
  br label %120

120:                                              ; preds = %113, %116
  %121 = phi i8* [ %114, %113 ], [ %117, %116 ]
  %122 = bitcast i8* %121 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV8SkMipmap, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %122, align 8
  %123 = getelementptr inbounds i8, i8* %121, i64 64
  %124 = bitcast i8* %123 to %class.SkColorSpace**
  store %class.SkColorSpace* null, %class.SkColorSpace** %124, align 8
  %125 = bitcast i8* %121 to %class.SkMipmap*
  %126 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %127 = load %class.SkColorSpace*, %class.SkColorSpace** %126, align 8
  %128 = icmp eq %class.SkColorSpace* %127, null
  br i1 %128, label %129, label %133

129:                                              ; preds = %120
  %130 = ptrtoint %class.SkColorSpace* %127 to i64
  %131 = getelementptr inbounds i8, i8* %121, i64 64
  %132 = bitcast i8* %131 to i64*
  store i64 %130, i64* %132, align 8
  br label %149

133:                                              ; preds = %120
  %134 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %127, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = atomicrmw add i32* %134, i32 1 monotonic, !noalias !3
  %136 = getelementptr inbounds i8, i8* %121, i64 64
  %137 = bitcast i8* %136 to %class.SkColorSpace**
  %138 = load %class.SkColorSpace*, %class.SkColorSpace** %137, align 8
  %139 = bitcast %class.SkColorSpace* %138 to i8*
  %140 = ptrtoint %class.SkColorSpace* %127 to i64
  %141 = getelementptr inbounds i8, i8* %121, i64 64
  %142 = bitcast i8* %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = icmp eq %class.SkColorSpace* %138, null
  br i1 %143, label %149, label %144

144:                                              ; preds = %133
  %145 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %138, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = atomicrmw add i32* %145, i32 -1 acq_rel
  %147 = icmp eq i32 %146, 1
  br i1 %147, label %148, label %149

148:                                              ; preds = %144
  tail call void @_ZdlPv(i8* %139) #18
  br label %149

149:                                              ; preds = %129, %148, %144, %133
  %150 = getelementptr inbounds i8, i8* %121, i64 80
  %151 = bitcast i8* %150 to i32*
  store i32 %50, i32* %151, align 8
  %152 = getelementptr inbounds i8, i8* %121, i64 32
  %153 = bitcast i8* %152 to i8**
  %154 = load i8*, i8** %153, align 8
  %155 = bitcast i8* %154 to %"struct.SkMipmap::Level"*
  %156 = getelementptr inbounds i8, i8* %121, i64 72
  %157 = bitcast i8* %156 to i8**
  store i8* %154, i8** %157, align 8
  %158 = sext i32 %50 to i64
  %159 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %158
  %160 = bitcast %"struct.SkMipmap::Level"* %159 to i8*
  %161 = load i32, i32* %30, align 4
  %162 = load i32, i32* %38, align 4
  %163 = bitcast %class.SkPixmap* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %163) #17
  %164 = bitcast %class.SkPixmap* %0 to i8*
  %165 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2
  %166 = bitcast %struct.SkImageInfo* %165 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %166, i8 -86, i64 24, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %163, i8* align 8 %164, i64 16, i1 false) #17
  %167 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  %168 = load %class.SkColorSpace*, %class.SkColorSpace** %126, align 8
  %169 = icmp eq %class.SkColorSpace* %168, null
  br i1 %169, label %173, label %170

170:                                              ; preds = %149
  %171 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %168, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = atomicrmw add i32* %171, i32 1 monotonic
  br label %173

173:                                              ; preds = %149, %170
  store %class.SkColorSpace* %168, %class.SkColorSpace** %167, align 8
  %174 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 2, i32 0, i32 1
  %175 = bitcast i32* %5 to <2 x i64>*
  %176 = load <2 x i64>, <2 x i64>* %175, align 8
  %177 = bitcast i32* %174 to <2 x i64>*
  store <2 x i64> %176, <2 x i64>* %177, align 8
  %178 = icmp sgt i32 %50, 0
  br i1 %178, label %179, label %190

179:                                              ; preds = %173
  %180 = zext i32 %6 to i64
  %181 = zext i32 %8 to i64
  %182 = shl nuw i64 %181, 32
  %183 = or i64 %182, %180
  %184 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 0
  %185 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %4, i64 0, i32 1
  %186 = zext i32 %50 to i64
  %187 = bitcast i32* %174 to <2 x i64>*
  br label %200

188:                                              ; preds = %290
  %189 = load %class.SkColorSpace*, %class.SkColorSpace** %167, align 8
  br label %190

190:                                              ; preds = %188, %173
  %191 = phi %class.SkColorSpace* [ %189, %188 ], [ %168, %173 ]
  %192 = icmp eq %class.SkColorSpace* %191, null
  br i1 %192, label %199, label %193

193:                                              ; preds = %190
  %194 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %191, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = atomicrmw add i32* %194, i32 -1 acq_rel
  %196 = icmp eq i32 %195, 1
  br i1 %196, label %197, label %199

197:                                              ; preds = %193
  %198 = bitcast %class.SkColorSpace* %191 to i8*
  tail call void @_ZdlPv(i8* %198) #18
  br label %199

199:                                              ; preds = %190, %193, %197
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %163) #17
  br label %298

200:                                              ; preds = %290, %179
  %201 = phi i64 [ 0, %179 ], [ %296, %290 ]
  %202 = phi i32 [ %162, %179 ], [ %230, %290 ]
  %203 = phi i32 [ %161, %179 ], [ %227, %290 ]
  %204 = phi i8* [ %160, %179 ], [ %295, %290 ]
  %205 = and i32 %202, 1
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %217, label %207

207:                                              ; preds = %200
  %208 = icmp eq i32 %202, 1
  %209 = and i32 %203, 1
  %210 = icmp ne i32 %209, 0
  br i1 %208, label %211, label %213

211:                                              ; preds = %207
  %212 = select i1 %210, void (i8*, i8*, i64, i32)* %24, void (i8*, i8*, i64, i32)* %27
  br label %223

213:                                              ; preds = %207
  br i1 %210, label %214, label %223

214:                                              ; preds = %213
  %215 = icmp eq i32 %203, 1
  %216 = select i1 %215, void (i8*, i8*, i64, i32)* %28, void (i8*, i8*, i64, i32)* %26
  br label %223

217:                                              ; preds = %200
  %218 = and i32 %203, 1
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %223, label %220

220:                                              ; preds = %217
  %221 = icmp eq i32 %203, 1
  %222 = select i1 %221, void (i8*, i8*, i64, i32)* %29, void (i8*, i8*, i64, i32)* %25
  br label %223

223:                                              ; preds = %211, %214, %213, %220, %217
  %224 = phi void (i8*, i8*, i64, i32)* [ %212, %211 ], [ %216, %214 ], [ %23, %213 ], [ %222, %220 ], [ %22, %217 ]
  %225 = ashr i32 %203, 1
  %226 = icmp sgt i32 %225, 1
  %227 = select i1 %226, i32 %225, i32 1
  %228 = ashr i32 %202, 1
  %229 = icmp sgt i32 %228, 1
  %230 = select i1 %229, i32 %228, i32 1
  %231 = tail call i32 @_Z24SkColorTypeBytesPerPixel11SkColorType(i32 %6) #17
  %232 = mul nsw i32 %231, %227
  %233 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %201, i32 0
  %234 = zext i32 %230 to i64
  %235 = shl nuw nsw i64 %234, 32
  %236 = zext i32 %227 to i64
  %237 = or i64 %235, %236
  %238 = zext i32 %232 to i64
  %239 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %233, i64 0, i32 0
  store i8* %204, i8** %239, align 8
  %240 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %201, i32 0, i32 1
  store i64 %238, i64* %240, align 8
  %241 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %201, i32 0, i32 2, i32 0, i32 0, i32 0
  store %class.SkColorSpace* null, %class.SkColorSpace** %241, align 8
  %242 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %201, i32 0, i32 2, i32 0, i32 1
  %243 = bitcast i32* %242 to i64*
  store i64 %183, i64* %243, align 8
  %244 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %201, i32 0, i32 2, i32 1
  %245 = bitcast %struct.SkISize* %244 to i64*
  store i64 %237, i64* %245, align 8
  %246 = sitofp i32 %227 to float
  %247 = load i32, i32* %30, align 4
  %248 = sitofp i32 %247 to float
  %249 = fdiv float %246, %248
  %250 = sitofp i32 %230 to float
  %251 = load i32, i32* %38, align 4
  %252 = sitofp i32 %251 to float
  %253 = fdiv float %250, %252
  %254 = insertelement <2 x float> undef, float %249, i32 0
  %255 = insertelement <2 x float> %254, float %253, i32 1
  %256 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %155, i64 %201, i32 1
  %257 = bitcast %struct.SkSize* %256 to <2 x float>*
  store <2 x float> %255, <2 x float>* %257, align 8
  br i1 %2, label %260, label %258

258:                                              ; preds = %223
  %259 = bitcast %class.SkPixmap* %233 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %163, i8* align 8 %259, i64 16, i1 false) #17
  br label %280

260:                                              ; preds = %223
  %261 = load i8*, i8** %184, align 8
  %262 = load i64, i64* %185, align 8
  %263 = shl i64 %262, 1
  br label %264

264:                                              ; preds = %260, %264
  %265 = phi i32 [ 0, %260 ], [ %271, %264 ]
  %266 = phi i8* [ %204, %260 ], [ %270, %264 ]
  %267 = phi i8* [ %261, %260 ], [ %268, %264 ]
  tail call void %224(i8* %266, i8* %267, i64 %262, i32 %227) #17
  %268 = getelementptr inbounds i8, i8* %267, i64 %263
  %269 = load i64, i64* %240, align 8
  %270 = getelementptr inbounds i8, i8* %266, i64 %269
  %271 = add nuw nsw i32 %265, 1
  %272 = icmp ult i32 %271, %230
  br i1 %272, label %264, label %273

273:                                              ; preds = %264
  %274 = load %class.SkColorSpace*, %class.SkColorSpace** %241, align 8
  %275 = bitcast %class.SkPixmap* %233 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %163, i8* align 8 %275, i64 16, i1 false) #17
  %276 = icmp eq %class.SkColorSpace* %274, null
  br i1 %276, label %280, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %274, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %279 = atomicrmw add i32* %278, i32 1 monotonic
  br label %280

280:                                              ; preds = %258, %277, %273
  %281 = phi %class.SkColorSpace* [ null, %258 ], [ %274, %277 ], [ null, %273 ]
  %282 = load %class.SkColorSpace*, %class.SkColorSpace** %167, align 8
  store %class.SkColorSpace* %281, %class.SkColorSpace** %167, align 8
  %283 = icmp eq %class.SkColorSpace* %282, null
  br i1 %283, label %290, label %284

284:                                              ; preds = %280
  %285 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %282, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = atomicrmw add i32* %285, i32 -1 acq_rel
  %287 = icmp eq i32 %286, 1
  br i1 %287, label %288, label %290

288:                                              ; preds = %284
  %289 = bitcast %class.SkColorSpace* %282 to i8*
  tail call void @_ZdlPv(i8* %289) #18
  br label %290

290:                                              ; preds = %280, %284, %288
  %291 = bitcast i32* %242 to <2 x i64>*
  %292 = load <2 x i64>, <2 x i64>* %291, align 8
  store <2 x i64> %292, <2 x i64>* %187, align 8
  %293 = mul i32 %232, %230
  %294 = zext i32 %293 to i64
  %295 = getelementptr inbounds i8, i8* %204, i64 %294
  %296 = add nuw nsw i64 %201, 1
  %297 = icmp eq i64 %296, %186
  br i1 %297, label %188, label %200

298:                                              ; preds = %21, %53, %51, %110, %60, %199, %3, %3, %3, %3, %3
  %299 = phi %class.SkMipmap* [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %3 ], [ null, %60 ], [ %125, %199 ], [ null, %110 ], [ null, %51 ], [ null, %53 ], [ null, %21 ]
  ret %class.SkMipmap* %299
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %35, %13 ]
  %15 = phi i32* [ %9, %7 ], [ %34, %13 ]
  %16 = phi i32* [ %10, %7 ], [ %33, %13 ]
  %17 = load i32, i32* %16, align 4
  %18 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %17, i32 0
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = load i32, i32* %15, align 4
  %22 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %21, i32 0
  %23 = bitcast <4 x i32> %22 to <16 x i8>
  %24 = shufflevector <16 x i8> %23, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %25 = bitcast <16 x i8> %20 to <8 x i16>
  %26 = bitcast <16 x i8> %24 to <8 x i16>
  %27 = add <8 x i16> %26, %25
  %28 = lshr <8 x i16> %27, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %29 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %28, <8 x i16> undef) #17
  %30 = bitcast <16 x i8> %29 to <4 x i32>
  %31 = extractelement <4 x i32> %30, i32 0
  %32 = getelementptr inbounds i32, i32* %5, i64 %14
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds i32, i32* %16, i64 2
  %34 = getelementptr inbounds i32, i32* %15, i64 2
  %35 = add nuw nsw i64 %14, 1
  %36 = icmp eq i64 %35, %11
  br i1 %36, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %46, %15 ]
  %17 = phi i32* [ %10, %8 ], [ %45, %15 ]
  %18 = phi i32* [ %11, %8 ], [ %44, %15 ]
  %19 = phi i32* [ %12, %8 ], [ %43, %15 ]
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = load i32, i32* %18, align 4
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %24, i32 0
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = load i32, i32* %17, align 4
  %29 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %28, i32 0
  %30 = bitcast <4 x i32> %29 to <16 x i8>
  %31 = shufflevector <16 x i8> %30, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %32 = bitcast <16 x i8> %23 to <8 x i16>
  %33 = bitcast <16 x i8> %27 to <8 x i16>
  %34 = bitcast <16 x i8> %31 to <8 x i16>
  %35 = shl <8 x i16> %33, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %36 = add <8 x i16> %34, %32
  %37 = add <8 x i16> %36, %35
  %38 = lshr <8 x i16> %37, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %39 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %38, <8 x i16> undef) #17
  %40 = bitcast <16 x i8> %39 to <4 x i32>
  %41 = extractelement <4 x i32> %40, i32 0
  %42 = getelementptr inbounds i32, i32* %6, i64 %16
  store i32 %41, i32* %42, align 4
  %43 = getelementptr inbounds i32, i32* %19, i64 2
  %44 = getelementptr inbounds i32, i32* %18, i64 2
  %45 = getelementptr inbounds i32, i32* %17, i64 2
  %46 = add nuw nsw i64 %16, 1
  %47 = icmp eq i64 %46, %13
  br i1 %47, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i32*
  %9 = zext i32 %3 to i64
  br label %11

10:                                               ; preds = %11, %4
  ret void

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %32, %11 ]
  %13 = phi i32* [ %8, %7 ], [ %31, %11 ]
  %14 = load i32, i32* %13, align 4
  %15 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %14, i32 0
  %16 = bitcast <4 x i32> %15 to <16 x i8>
  %17 = shufflevector <16 x i8> %16, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %18 = getelementptr inbounds i32, i32* %13, i64 1
  %19 = load i32, i32* %18, align 4
  %20 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %19, i32 0
  %21 = bitcast <4 x i32> %20 to <16 x i8>
  %22 = shufflevector <16 x i8> %21, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %23 = bitcast <16 x i8> %17 to <8 x i16>
  %24 = bitcast <16 x i8> %22 to <8 x i16>
  %25 = add <8 x i16> %24, %23
  %26 = lshr <8 x i16> %25, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %27 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %26, <8 x i16> undef) #17
  %28 = bitcast <16 x i8> %27 to <4 x i32>
  %29 = extractelement <4 x i32> %28, i32 0
  %30 = getelementptr inbounds i32, i32* %5, i64 %12
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds i32, i32* %13, i64 2
  %32 = add nuw nsw i64 %12, 1
  %33 = icmp eq i64 %32, %9
  br i1 %33, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %49, %13 ]
  %15 = phi i32* [ %9, %7 ], [ %48, %13 ]
  %16 = phi i32* [ %10, %7 ], [ %47, %13 ]
  %17 = load i32, i32* %16, align 4
  %18 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %17, i32 0
  %19 = bitcast <4 x i32> %18 to <16 x i8>
  %20 = shufflevector <16 x i8> %19, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %21 = getelementptr inbounds i32, i32* %16, i64 1
  %22 = load i32, i32* %21, align 4
  %23 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %22, i32 0
  %24 = bitcast <4 x i32> %23 to <16 x i8>
  %25 = shufflevector <16 x i8> %24, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %26 = load i32, i32* %15, align 4
  %27 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %26, i32 0
  %28 = bitcast <4 x i32> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %30 = getelementptr inbounds i32, i32* %15, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %31, i32 0
  %33 = bitcast <4 x i32> %32 to <16 x i8>
  %34 = shufflevector <16 x i8> %33, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %35 = bitcast <16 x i8> %20 to <8 x i16>
  %36 = bitcast <16 x i8> %29 to <8 x i16>
  %37 = bitcast <16 x i8> %25 to <8 x i16>
  %38 = bitcast <16 x i8> %34 to <8 x i16>
  %39 = add <8 x i16> %37, %35
  %40 = add <8 x i16> %39, %36
  %41 = add <8 x i16> %40, %38
  %42 = lshr <8 x i16> %41, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %43 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %42, <8 x i16> undef) #17
  %44 = bitcast <16 x i8> %43 to <4 x i32>
  %45 = extractelement <4 x i32> %44, i32 0
  %46 = getelementptr inbounds i32, i32* %5, i64 %14
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds i32, i32* %16, i64 2
  %48 = getelementptr inbounds i32, i32* %15, i64 2
  %49 = add nuw nsw i64 %14, 1
  %50 = icmp eq i64 %49, %11
  br i1 %50, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %68, %15 ]
  %17 = phi i32* [ %10, %8 ], [ %67, %15 ]
  %18 = phi i32* [ %11, %8 ], [ %66, %15 ]
  %19 = phi i32* [ %12, %8 ], [ %65, %15 ]
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = getelementptr inbounds i32, i32* %19, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %25, i32 0
  %27 = bitcast <4 x i32> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = load i32, i32* %18, align 4
  %30 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %29, i32 0
  %31 = bitcast <4 x i32> %30 to <16 x i8>
  %32 = shufflevector <16 x i8> %31, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %33 = getelementptr inbounds i32, i32* %18, i64 1
  %34 = load i32, i32* %33, align 4
  %35 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %34, i32 0
  %36 = bitcast <4 x i32> %35 to <16 x i8>
  %37 = shufflevector <16 x i8> %36, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %38 = load i32, i32* %17, align 4
  %39 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %38, i32 0
  %40 = bitcast <4 x i32> %39 to <16 x i8>
  %41 = shufflevector <16 x i8> %40, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %42 = getelementptr inbounds i32, i32* %17, i64 1
  %43 = load i32, i32* %42, align 4
  %44 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %43, i32 0
  %45 = bitcast <4 x i32> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = bitcast <16 x i8> %23 to <8 x i16>
  %48 = bitcast <16 x i8> %32 to <8 x i16>
  %49 = bitcast <16 x i8> %41 to <8 x i16>
  %50 = shl <8 x i16> %48, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %51 = bitcast <16 x i8> %28 to <8 x i16>
  %52 = bitcast <16 x i8> %37 to <8 x i16>
  %53 = bitcast <16 x i8> %46 to <8 x i16>
  %54 = shl <8 x i16> %52, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %55 = add <8 x i16> %51, %47
  %56 = add <8 x i16> %55, %50
  %57 = add <8 x i16> %56, %49
  %58 = add <8 x i16> %57, %54
  %59 = add <8 x i16> %58, %53
  %60 = lshr <8 x i16> %59, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %61 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %60, <8 x i16> undef) #17
  %62 = bitcast <16 x i8> %61 to <4 x i32>
  %63 = extractelement <4 x i32> %62, i32 0
  %64 = getelementptr inbounds i32, i32* %6, i64 %16
  store i32 %63, i32* %64, align 4
  %65 = getelementptr inbounds i32, i32* %19, i64 2
  %66 = getelementptr inbounds i32, i32* %18, i64 2
  %67 = getelementptr inbounds i32, i32* %17, i64 2
  %68 = add nuw nsw i64 %16, 1
  %69 = icmp eq i64 %68, %13
  br i1 %69, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %9, i32 0
  %11 = bitcast <4 x i32> %10 to <16 x i8>
  %12 = shufflevector <16 x i8> %11, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %40, %15 ]
  %17 = phi i32* [ %5, %8 ], [ %24, %15 ]
  %18 = phi <16 x i8> [ %12, %8 ], [ %28, %15 ]
  %19 = getelementptr inbounds i32, i32* %17, i64 1
  %20 = load i32, i32* %19, align 4
  %21 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %20, i32 0
  %22 = bitcast <4 x i32> %21 to <16 x i8>
  %23 = shufflevector <16 x i8> %22, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %24 = getelementptr inbounds i32, i32* %17, i64 2
  %25 = load i32, i32* %24, align 4
  %26 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %25, i32 0
  %27 = bitcast <4 x i32> %26 to <16 x i8>
  %28 = shufflevector <16 x i8> %27, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %29 = bitcast <16 x i8> %18 to <8 x i16>
  %30 = bitcast <16 x i8> %23 to <8 x i16>
  %31 = bitcast <16 x i8> %28 to <8 x i16>
  %32 = shl <8 x i16> %30, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %33 = add <8 x i16> %31, %29
  %34 = add <8 x i16> %33, %32
  %35 = lshr <8 x i16> %34, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  %36 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %35, <8 x i16> undef) #17
  %37 = bitcast <16 x i8> %36 to <4 x i32>
  %38 = extractelement <4 x i32> %37, i32 0
  %39 = getelementptr inbounds i32, i32* %6, i64 %16
  store i32 %38, i32* %39, align 4
  %40 = add nuw nsw i64 %16, 1
  %41 = icmp eq i64 %40, %13
  br i1 %41, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i8* %0 to i32*
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %23

10:                                               ; preds = %4
  %11 = load i32, i32* %7, align 4
  %12 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %11, i32 0
  %13 = bitcast <4 x i32> %12 to <16 x i8>
  %14 = shufflevector <16 x i8> %13, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %15 = bitcast <16 x i8> %14 to <8 x i16>
  %16 = load i32, i32* %5, align 4
  %17 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %16, i32 0
  %18 = bitcast <4 x i32> %17 to <16 x i8>
  %19 = shufflevector <16 x i8> %18, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %20 = bitcast <16 x i8> %19 to <8 x i16>
  %21 = add <8 x i16> %15, %20
  %22 = zext i32 %3 to i64
  br label %24

23:                                               ; preds = %24, %4
  ret void

24:                                               ; preds = %24, %10
  %25 = phi i64 [ 0, %10 ], [ %64, %24 ]
  %26 = phi i32* [ %5, %10 ], [ %42, %24 ]
  %27 = phi i32* [ %7, %10 ], [ %47, %24 ]
  %28 = phi <8 x i16> [ %21, %10 ], [ %54, %24 ]
  %29 = getelementptr inbounds i32, i32* %26, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %30, i32 0
  %32 = bitcast <4 x i32> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %34 = getelementptr inbounds i32, i32* %27, i64 1
  %35 = load i32, i32* %34, align 4
  %36 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %35, i32 0
  %37 = bitcast <4 x i32> %36 to <16 x i8>
  %38 = shufflevector <16 x i8> %37, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %39 = bitcast <16 x i8> %33 to <8 x i16>
  %40 = shl <8 x i16> %39, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %41 = bitcast <16 x i8> %38 to <8 x i16>
  %42 = getelementptr inbounds i32, i32* %26, i64 2
  %43 = load i32, i32* %42, align 4
  %44 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %43, i32 0
  %45 = bitcast <4 x i32> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %47 = getelementptr inbounds i32, i32* %27, i64 2
  %48 = load i32, i32* %47, align 4
  %49 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %48, i32 0
  %50 = bitcast <4 x i32> %49 to <16 x i8>
  %51 = shufflevector <16 x i8> %50, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %52 = bitcast <16 x i8> %46 to <8 x i16>
  %53 = bitcast <16 x i8> %51 to <8 x i16>
  %54 = add <8 x i16> %53, %52
  %55 = shl <8 x i16> %41, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %56 = add <8 x i16> %40, %28
  %57 = add <8 x i16> %56, %55
  %58 = add <8 x i16> %57, %54
  %59 = lshr <8 x i16> %58, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  %60 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %59, <8 x i16> undef) #17
  %61 = bitcast <16 x i8> %60 to <4 x i32>
  %62 = extractelement <4 x i32> %61, i32 0
  %63 = getelementptr inbounds i32, i32* %8, i64 %25
  store i32 %62, i32* %63, align 4
  %64 = add nuw nsw i64 %25, 1
  %65 = icmp eq i64 %64, %22
  br i1 %65, label %23, label %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I20ColorTypeFilter_8888EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %0 to i32*
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %32

12:                                               ; preds = %4
  %13 = load i32, i32* %9, align 4
  %14 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %13, i32 0
  %15 = bitcast <4 x i32> %14 to <16 x i8>
  %16 = shufflevector <16 x i8> %15, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %17 = bitcast <16 x i8> %16 to <8 x i16>
  %18 = load i32, i32* %5, align 4
  %19 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %18, i32 0
  %20 = bitcast <4 x i32> %19 to <16 x i8>
  %21 = shufflevector <16 x i8> %20, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %22 = bitcast <16 x i8> %21 to <8 x i16>
  %23 = add <8 x i16> %17, %22
  %24 = load i32, i32* %7, align 4
  %25 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %24, i32 0
  %26 = bitcast <4 x i32> %25 to <16 x i8>
  %27 = shufflevector <16 x i8> %26, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %28 = bitcast <16 x i8> %27 to <8 x i16>
  %29 = shl <8 x i16> %28, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %30 = add <8 x i16> %23, %29
  %31 = zext i32 %3 to i64
  br label %33

32:                                               ; preds = %33, %4
  ret void

33:                                               ; preds = %33, %12
  %34 = phi i64 [ 0, %12 ], [ %89, %33 ]
  %35 = phi i32* [ %5, %12 ], [ %61, %33 ]
  %36 = phi i32* [ %7, %12 ], [ %66, %33 ]
  %37 = phi i32* [ %9, %12 ], [ %71, %33 ]
  %38 = phi <8 x i16> [ %30, %12 ], [ %81, %33 ]
  %39 = getelementptr inbounds i32, i32* %35, i64 1
  %40 = load i32, i32* %39, align 4
  %41 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %40, i32 0
  %42 = bitcast <4 x i32> %41 to <16 x i8>
  %43 = shufflevector <16 x i8> %42, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %44 = getelementptr inbounds i32, i32* %36, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %45, i32 0
  %47 = bitcast <4 x i32> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %49 = getelementptr inbounds i32, i32* %37, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %50, i32 0
  %52 = bitcast <4 x i32> %51 to <16 x i8>
  %53 = shufflevector <16 x i8> %52, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %54 = bitcast <16 x i8> %43 to <8 x i16>
  %55 = bitcast <16 x i8> %48 to <8 x i16>
  %56 = bitcast <16 x i8> %53 to <8 x i16>
  %57 = shl <8 x i16> %55, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %58 = add <8 x i16> %56, %54
  %59 = add <8 x i16> %58, %57
  %60 = shl <8 x i16> %59, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %61 = getelementptr inbounds i32, i32* %35, i64 2
  %62 = load i32, i32* %61, align 4
  %63 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %62, i32 0
  %64 = bitcast <4 x i32> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %66 = getelementptr inbounds i32, i32* %36, i64 2
  %67 = load i32, i32* %66, align 4
  %68 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %67, i32 0
  %69 = bitcast <4 x i32> %68 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %71 = getelementptr inbounds i32, i32* %37, i64 2
  %72 = load i32, i32* %71, align 4
  %73 = insertelement <4 x i32> <i32 undef, i32 0, i32 undef, i32 undef>, i32 %72, i32 0
  %74 = bitcast <4 x i32> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %76 = bitcast <16 x i8> %65 to <8 x i16>
  %77 = bitcast <16 x i8> %70 to <8 x i16>
  %78 = bitcast <16 x i8> %75 to <8 x i16>
  %79 = shl <8 x i16> %77, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %80 = add <8 x i16> %78, %76
  %81 = add <8 x i16> %80, %79
  %82 = add <8 x i16> %60, %38
  %83 = add <8 x i16> %82, %81
  %84 = lshr <8 x i16> %83, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %85 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %84, <8 x i16> undef) #17
  %86 = bitcast <16 x i8> %85 to <4 x i32>
  %87 = extractelement <4 x i32> %86, i32 0
  %88 = getelementptr inbounds i32, i32* %10, i64 %34
  store i32 %87, i32* %88, align 4
  %89 = add nuw nsw i64 %34, 1
  %90 = icmp eq i64 %89, %31
  br i1 %90, label %32, label %33
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 9
  br i1 %12, label %13, label %17

13:                                               ; preds = %42, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %37, %42 ]
  %15 = phi i16* [ %10, %17 ], [ %10, %7 ], [ %39, %42 ]
  %16 = phi i16* [ %9, %17 ], [ %9, %7 ], [ %41, %42 ]
  br label %76

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 1
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 2
  %21 = add i64 %20, %2
  %22 = add i64 %21, -2
  %23 = getelementptr i8, i8* %1, i64 %22
  %24 = add nsw i64 %20, -2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = icmp ugt i8* %23, %0
  %27 = icmp ult i8* %8, %19
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %25, %0
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %13, label %33

33:                                               ; preds = %17
  %34 = and i64 %11, 7
  %35 = icmp eq i64 %34, 0
  %36 = select i1 %35, i64 8, i64 %34
  %37 = sub nsw i64 %11, %36
  %38 = shl nsw i64 %37, 1
  %39 = getelementptr i16, i16* %10, i64 %38
  %40 = shl nsw i64 %37, 1
  %41 = getelementptr i16, i16* %9, i64 %40
  br label %42

42:                                               ; preds = %42, %33
  %43 = phi i64 [ 0, %33 ], [ %73, %42 ]
  %44 = shl i64 %43, 1
  %45 = getelementptr i16, i16* %10, i64 %44
  %46 = shl i64 %43, 1
  %47 = getelementptr i16, i16* %9, i64 %46
  %48 = bitcast i16* %45 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 2
  %50 = shufflevector <16 x i16> %49, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = and <8 x i32> %51, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %53 = shl nuw <8 x i32> %51, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %54 = and <8 x i32> %53, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %55 = or <8 x i32> %54, %52
  %56 = bitcast i16* %47 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 2
  %58 = shufflevector <16 x i16> %57, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = and <8 x i32> %59, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %61 = shl nuw <8 x i32> %59, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %62 = and <8 x i32> %61, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %63 = or <8 x i32> %62, %60
  %64 = add nuw nsw <8 x i32> %63, %55
  %65 = lshr <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = and <8 x i32> %65, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %67 = lshr <8 x i32> %64, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>
  %68 = and <8 x i32> %67, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %69 = or <8 x i32> %68, %66
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %5, i64 %43
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !6, !noalias !9
  %73 = add i64 %43, 8
  %74 = icmp eq i64 %73, %37
  br i1 %74, label %13, label %42, !llvm.loop !12

75:                                               ; preds = %76, %4
  ret void

76:                                               ; preds = %13, %76
  %77 = phi i64 [ %102, %76 ], [ %14, %13 ]
  %78 = phi i16* [ %100, %76 ], [ %15, %13 ]
  %79 = phi i16* [ %101, %76 ], [ %16, %13 ]
  %80 = load i16, i16* %78, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 63519
  %83 = shl nuw i32 %81, 16
  %84 = and i32 %83, 132120576
  %85 = or i32 %84, %82
  %86 = load i16, i16* %79, align 2
  %87 = zext i16 %86 to i32
  %88 = and i32 %87, 63519
  %89 = shl nuw i32 %87, 16
  %90 = and i32 %89, 132120576
  %91 = or i32 %90, %88
  %92 = add nuw nsw i32 %91, %85
  %93 = lshr i32 %92, 1
  %94 = and i32 %93, 63519
  %95 = lshr i32 %92, 17
  %96 = and i32 %95, 2016
  %97 = or i32 %96, %94
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %5, i64 %77
  store i16 %98, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %78, i64 2
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  %102 = add nuw nsw i64 %77, 1
  %103 = icmp eq i64 %102, %11
  br i1 %103, label %75, label %76, !llvm.loop !14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %100

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 9
  br i1 %14, label %15, label %20

15:                                               ; preds = %55, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %48, %55 ]
  %17 = phi i16* [ %10, %20 ], [ %10, %8 ], [ %50, %55 ]
  %18 = phi i16* [ %11, %20 ], [ %11, %8 ], [ %52, %55 ]
  %19 = phi i16* [ %12, %20 ], [ %12, %8 ], [ %54, %55 ]
  br label %101

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 2
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = add i64 %25, -2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = add i64 %23, %2
  %29 = add i64 %28, -2
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = add nsw i64 %23, -2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = icmp ugt i8* %27, %0
  %34 = icmp ult i8* %9, %22
  %35 = and i1 %33, %34
  %36 = icmp ugt i8* %30, %0
  %37 = icmp ult i8* %5, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %32, %0
  %41 = icmp ugt i8* %22, %1
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  br i1 %43, label %15, label %44

44:                                               ; preds = %20
  %45 = and i64 %13, 7
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 8, i64 %45
  %48 = sub nsw i64 %13, %47
  %49 = shl nsw i64 %48, 1
  %50 = getelementptr i16, i16* %10, i64 %49
  %51 = shl nsw i64 %48, 1
  %52 = getelementptr i16, i16* %11, i64 %51
  %53 = shl nsw i64 %48, 1
  %54 = getelementptr i16, i16* %12, i64 %53
  br label %55

55:                                               ; preds = %55, %44
  %56 = phi i64 [ 0, %44 ], [ %98, %55 ]
  %57 = shl i64 %56, 1
  %58 = getelementptr i16, i16* %10, i64 %57
  %59 = shl i64 %56, 1
  %60 = getelementptr i16, i16* %11, i64 %59
  %61 = shl i64 %56, 1
  %62 = getelementptr i16, i16* %12, i64 %61
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 2
  %65 = shufflevector <16 x i16> %64, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = and <8 x i32> %66, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %68 = shl nuw <8 x i32> %66, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %69 = and <8 x i32> %68, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %70 = or <8 x i32> %69, %67
  %71 = bitcast i16* %60 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 2
  %73 = shufflevector <16 x i16> %72, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = zext <8 x i16> %73 to <8 x i32>
  %75 = and <8 x i32> %74, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %76 = shl nuw <8 x i32> %74, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %77 = and <8 x i32> %76, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %78 = or <8 x i32> %77, %75
  %79 = bitcast i16* %58 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = shufflevector <16 x i16> %80, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = and <8 x i32> %82, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %84 = shl nuw <8 x i32> %82, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %85 = and <8 x i32> %84, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %86 = or <8 x i32> %85, %83
  %87 = shl nuw nsw <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = add nuw nsw <8 x i32> %86, %70
  %89 = add nuw nsw <8 x i32> %88, %87
  %90 = lshr <8 x i32> %89, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %91 = and <8 x i32> %90, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %92 = lshr <8 x i32> %89, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %93 = and <8 x i32> %92, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %94 = or <8 x i32> %93, %91
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = getelementptr inbounds i16, i16* %6, i64 %56
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2, !alias.scope !15, !noalias !18
  %98 = add i64 %56, 8
  %99 = icmp eq i64 %98, %48
  br i1 %99, label %15, label %55, !llvm.loop !22

100:                                              ; preds = %101, %4
  ret void

101:                                              ; preds = %15, %101
  %102 = phi i64 [ %137, %101 ], [ %16, %15 ]
  %103 = phi i16* [ %136, %101 ], [ %17, %15 ]
  %104 = phi i16* [ %135, %101 ], [ %18, %15 ]
  %105 = phi i16* [ %134, %101 ], [ %19, %15 ]
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = and i32 %107, 63519
  %109 = shl nuw i32 %107, 16
  %110 = and i32 %109, 132120576
  %111 = or i32 %110, %108
  %112 = load i16, i16* %104, align 2
  %113 = zext i16 %112 to i32
  %114 = and i32 %113, 63519
  %115 = shl nuw i32 %113, 16
  %116 = and i32 %115, 132120576
  %117 = or i32 %116, %114
  %118 = load i16, i16* %103, align 2
  %119 = zext i16 %118 to i32
  %120 = and i32 %119, 63519
  %121 = shl nuw i32 %119, 16
  %122 = and i32 %121, 132120576
  %123 = or i32 %122, %120
  %124 = shl nuw nsw i32 %117, 1
  %125 = add nuw nsw i32 %123, %111
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 2
  %128 = and i32 %127, 63519
  %129 = lshr i32 %126, 18
  %130 = and i32 %129, 2016
  %131 = or i32 %130, %128
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %6, i64 %102
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %105, i64 2
  %135 = getelementptr inbounds i16, i16* %104, i64 2
  %136 = getelementptr inbounds i16, i16* %103, i64 2
  %137 = add nuw nsw i64 %102, 1
  %138 = icmp eq i64 %137, %13
  br i1 %138, label %100, label %101, !llvm.loop !23
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %57

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i16*
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %55, %14, %7
  %12 = phi i64 [ 0, %14 ], [ 0, %7 ], [ %23, %55 ]
  %13 = phi i16* [ %8, %14 ], [ %8, %7 ], [ %25, %55 ]
  br label %58

14:                                               ; preds = %7
  %15 = shl nuw nsw i64 %9, 1
  %16 = getelementptr i8, i8* %0, i64 %15
  %17 = shl nuw nsw i64 %9, 2
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = icmp ugt i8* %18, %0
  %20 = icmp ugt i8* %16, %1
  %21 = and i1 %19, %20
  br i1 %21, label %11, label %22

22:                                               ; preds = %14
  %23 = and i64 %9, 4294967288
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i16, i16* %8, i64 %24
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %53, %26 ]
  %28 = shl i64 %27, 1
  %29 = getelementptr i16, i16* %8, i64 %28
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = shufflevector <16 x i16> %31, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %33 = shufflevector <16 x i16> %31, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %34 = zext <8 x i16> %32 to <8 x i32>
  %35 = and <8 x i32> %34, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %36 = shl nuw <8 x i32> %34, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %37 = and <8 x i32> %36, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %38 = or <8 x i32> %37, %35
  %39 = zext <8 x i16> %33 to <8 x i32>
  %40 = and <8 x i32> %39, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %41 = shl nuw <8 x i32> %39, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %42 = and <8 x i32> %41, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %43 = or <8 x i32> %42, %40
  %44 = add nuw nsw <8 x i32> %43, %38
  %45 = lshr <8 x i32> %44, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %46 = and <8 x i32> %45, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %47 = lshr <8 x i32> %44, <i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17, i32 17>
  %48 = and <8 x i32> %47, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %49 = or <8 x i32> %48, %46
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = getelementptr inbounds i16, i16* %5, i64 %27
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %52, align 2, !alias.scope !24, !noalias !27
  %53 = add i64 %27, 8
  %54 = icmp eq i64 %53, %23
  br i1 %54, label %55, label %26, !llvm.loop !29

55:                                               ; preds = %26
  %56 = icmp eq i64 %23, %9
  br i1 %56, label %57, label %11

57:                                               ; preds = %58, %55, %4
  ret void

58:                                               ; preds = %11, %58
  %59 = phi i64 [ %83, %58 ], [ %12, %11 ]
  %60 = phi i16* [ %82, %58 ], [ %13, %11 ]
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = and i32 %62, 63519
  %64 = shl nuw i32 %62, 16
  %65 = and i32 %64, 132120576
  %66 = or i32 %65, %63
  %67 = getelementptr inbounds i16, i16* %60, i64 1
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = and i32 %69, 63519
  %71 = shl nuw i32 %69, 16
  %72 = and i32 %71, 132120576
  %73 = or i32 %72, %70
  %74 = add nuw nsw i32 %73, %66
  %75 = lshr i32 %74, 1
  %76 = and i32 %75, 63519
  %77 = lshr i32 %74, 17
  %78 = and i32 %77, 2016
  %79 = or i32 %78, %76
  %80 = trunc i32 %79 to i16
  %81 = getelementptr inbounds i16, i16* %5, i64 %59
  store i16 %80, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %60, i64 2
  %83 = add nuw nsw i64 %59, 1
  %84 = icmp eq i64 %83, %9
  br i1 %84, label %57, label %58, !llvm.loop !30
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 4
  br i1 %12, label %13, label %17

13:                                               ; preds = %84, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %32, %84 ]
  %15 = phi i16* [ %10, %17 ], [ %10, %7 ], [ %34, %84 ]
  %16 = phi i16* [ %9, %17 ], [ %9, %7 ], [ %36, %84 ]
  br label %87

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 1
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 2
  %21 = add i64 %20, %2
  %22 = getelementptr i8, i8* %1, i64 %21
  %23 = getelementptr i8, i8* %1, i64 %20
  %24 = icmp ugt i8* %22, %0
  %25 = icmp ult i8* %8, %19
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %23, %0
  %28 = icmp ugt i8* %19, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %13, label %31

31:                                               ; preds = %17
  %32 = and i64 %11, 4294967292
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i16, i16* %10, i64 %33
  %35 = shl nuw nsw i64 %32, 1
  %36 = getelementptr i16, i16* %9, i64 %35
  br label %37

37:                                               ; preds = %37, %31
  %38 = phi i64 [ 0, %31 ], [ %82, %37 ]
  %39 = shl i64 %38, 1
  %40 = getelementptr i16, i16* %10, i64 %39
  %41 = shl i64 %38, 1
  %42 = getelementptr i16, i16* %9, i64 %41
  %43 = bitcast i16* %40 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %46 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %47 = zext <4 x i16> %45 to <4 x i32>
  %48 = and <4 x i32> %47, <i32 63519, i32 63519, i32 63519, i32 63519>
  %49 = shl nuw <4 x i32> %47, <i32 16, i32 16, i32 16, i32 16>
  %50 = and <4 x i32> %49, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %51 = or <4 x i32> %50, %48
  %52 = zext <4 x i16> %46 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 63519, i32 63519, i32 63519, i32 63519>
  %54 = shl nuw <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %55 = and <4 x i32> %54, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %56 = or <4 x i32> %55, %53
  %57 = bitcast i16* %42 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = zext <4 x i16> %59 to <4 x i32>
  %62 = and <4 x i32> %61, <i32 63519, i32 63519, i32 63519, i32 63519>
  %63 = shl nuw <4 x i32> %61, <i32 16, i32 16, i32 16, i32 16>
  %64 = and <4 x i32> %63, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %65 = or <4 x i32> %64, %62
  %66 = zext <4 x i16> %60 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 63519, i32 63519, i32 63519, i32 63519>
  %68 = shl nuw <4 x i32> %66, <i32 16, i32 16, i32 16, i32 16>
  %69 = and <4 x i32> %68, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %70 = or <4 x i32> %69, %67
  %71 = add nuw nsw <4 x i32> %56, %51
  %72 = add nuw nsw <4 x i32> %71, %65
  %73 = add nuw nsw <4 x i32> %72, %70
  %74 = lshr <4 x i32> %73, <i32 2, i32 2, i32 2, i32 2>
  %75 = and <4 x i32> %74, <i32 63519, i32 63519, i32 63519, i32 63519>
  %76 = lshr <4 x i32> %73, <i32 18, i32 18, i32 18, i32 18>
  %77 = and <4 x i32> %76, <i32 2016, i32 2016, i32 2016, i32 2016>
  %78 = or <4 x i32> %77, %75
  %79 = trunc <4 x i32> %78 to <4 x i16>
  %80 = getelementptr inbounds i16, i16* %5, i64 %38
  %81 = bitcast i16* %80 to <4 x i16>*
  store <4 x i16> %79, <4 x i16>* %81, align 2, !alias.scope !31, !noalias !34
  %82 = add i64 %38, 4
  %83 = icmp eq i64 %82, %32
  br i1 %83, label %84, label %37, !llvm.loop !37

84:                                               ; preds = %37
  %85 = icmp eq i64 %32, %11
  br i1 %85, label %86, label %13

86:                                               ; preds = %87, %84, %4
  ret void

87:                                               ; preds = %13, %87
  %88 = phi i64 [ %129, %87 ], [ %14, %13 ]
  %89 = phi i16* [ %127, %87 ], [ %15, %13 ]
  %90 = phi i16* [ %128, %87 ], [ %16, %13 ]
  %91 = load i16, i16* %89, align 2
  %92 = zext i16 %91 to i32
  %93 = and i32 %92, 63519
  %94 = shl nuw i32 %92, 16
  %95 = and i32 %94, 132120576
  %96 = or i32 %95, %93
  %97 = getelementptr inbounds i16, i16* %89, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = and i32 %99, 63519
  %101 = shl nuw i32 %99, 16
  %102 = and i32 %101, 132120576
  %103 = or i32 %102, %100
  %104 = load i16, i16* %90, align 2
  %105 = zext i16 %104 to i32
  %106 = and i32 %105, 63519
  %107 = shl nuw i32 %105, 16
  %108 = and i32 %107, 132120576
  %109 = or i32 %108, %106
  %110 = getelementptr inbounds i16, i16* %90, i64 1
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = and i32 %112, 63519
  %114 = shl nuw i32 %112, 16
  %115 = and i32 %114, 132120576
  %116 = or i32 %115, %113
  %117 = add nuw nsw i32 %103, %96
  %118 = add nuw nsw i32 %117, %109
  %119 = add nuw nsw i32 %118, %116
  %120 = lshr i32 %119, 2
  %121 = and i32 %120, 63519
  %122 = lshr i32 %119, 18
  %123 = and i32 %122, 2016
  %124 = or i32 %123, %121
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %5, i64 %88
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %89, i64 2
  %128 = getelementptr inbounds i16, i16* %90, i64 2
  %129 = add nuw nsw i64 %88, 1
  %130 = icmp eq i64 %129, %11
  br i1 %130, label %86, label %87, !llvm.loop !38
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %117

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 4
  br i1 %14, label %15, label %20

15:                                               ; preds = %115, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %42, %115 ]
  %17 = phi i16* [ %10, %20 ], [ %10, %8 ], [ %44, %115 ]
  %18 = phi i16* [ %11, %20 ], [ %11, %8 ], [ %46, %115 ]
  %19 = phi i16* [ %12, %20 ], [ %12, %8 ], [ %48, %115 ]
  br label %118

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 2
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = add i64 %23, %2
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = getelementptr i8, i8* %1, i64 %23
  %30 = icmp ugt i8* %26, %0
  %31 = icmp ult i8* %9, %22
  %32 = and i1 %30, %31
  %33 = icmp ugt i8* %28, %0
  %34 = icmp ult i8* %5, %22
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  %37 = icmp ugt i8* %29, %0
  %38 = icmp ugt i8* %22, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %15, label %41

41:                                               ; preds = %20
  %42 = and i64 %13, 4294967292
  %43 = shl nuw nsw i64 %42, 1
  %44 = getelementptr i16, i16* %10, i64 %43
  %45 = shl nuw nsw i64 %42, 1
  %46 = getelementptr i16, i16* %11, i64 %45
  %47 = shl nuw nsw i64 %42, 1
  %48 = getelementptr i16, i16* %12, i64 %47
  br label %49

49:                                               ; preds = %49, %41
  %50 = phi i64 [ 0, %41 ], [ %113, %49 ]
  %51 = shl i64 %50, 1
  %52 = getelementptr i16, i16* %10, i64 %51
  %53 = shl i64 %50, 1
  %54 = getelementptr i16, i16* %11, i64 %53
  %55 = shl i64 %50, 1
  %56 = getelementptr i16, i16* %12, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = zext <4 x i16> %59 to <4 x i32>
  %62 = and <4 x i32> %61, <i32 63519, i32 63519, i32 63519, i32 63519>
  %63 = shl nuw <4 x i32> %61, <i32 16, i32 16, i32 16, i32 16>
  %64 = and <4 x i32> %63, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %65 = or <4 x i32> %64, %62
  %66 = zext <4 x i16> %60 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 63519, i32 63519, i32 63519, i32 63519>
  %68 = shl nuw <4 x i32> %66, <i32 16, i32 16, i32 16, i32 16>
  %69 = and <4 x i32> %68, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %70 = or <4 x i32> %69, %67
  %71 = bitcast i16* %54 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %74 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %75 = zext <4 x i16> %73 to <4 x i32>
  %76 = and <4 x i32> %75, <i32 63519, i32 63519, i32 63519, i32 63519>
  %77 = shl nuw <4 x i32> %75, <i32 16, i32 16, i32 16, i32 16>
  %78 = and <4 x i32> %77, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %79 = or <4 x i32> %78, %76
  %80 = zext <4 x i16> %74 to <4 x i32>
  %81 = and <4 x i32> %80, <i32 63519, i32 63519, i32 63519, i32 63519>
  %82 = shl nuw <4 x i32> %80, <i32 16, i32 16, i32 16, i32 16>
  %83 = and <4 x i32> %82, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %84 = or <4 x i32> %83, %81
  %85 = bitcast i16* %52 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %88 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %89 = zext <4 x i16> %87 to <4 x i32>
  %90 = and <4 x i32> %89, <i32 63519, i32 63519, i32 63519, i32 63519>
  %91 = shl nuw <4 x i32> %89, <i32 16, i32 16, i32 16, i32 16>
  %92 = and <4 x i32> %91, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %93 = or <4 x i32> %92, %90
  %94 = zext <4 x i16> %88 to <4 x i32>
  %95 = and <4 x i32> %94, <i32 63519, i32 63519, i32 63519, i32 63519>
  %96 = shl nuw <4 x i32> %94, <i32 16, i32 16, i32 16, i32 16>
  %97 = and <4 x i32> %96, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %98 = or <4 x i32> %97, %95
  %99 = add nuw nsw <4 x i32> %84, %79
  %100 = shl nuw nsw <4 x i32> %99, <i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <4 x i32> %70, %65
  %102 = add nuw nsw <4 x i32> %101, %93
  %103 = add nuw nsw <4 x i32> %102, %98
  %104 = add nuw nsw <4 x i32> %103, %100
  %105 = lshr <4 x i32> %104, <i32 3, i32 3, i32 3, i32 3>
  %106 = and <4 x i32> %105, <i32 63519, i32 63519, i32 63519, i32 63519>
  %107 = lshr <4 x i32> %104, <i32 19, i32 19, i32 19, i32 19>
  %108 = and <4 x i32> %107, <i32 2016, i32 2016, i32 2016, i32 2016>
  %109 = or <4 x i32> %108, %106
  %110 = trunc <4 x i32> %109 to <4 x i16>
  %111 = getelementptr inbounds i16, i16* %6, i64 %50
  %112 = bitcast i16* %111 to <4 x i16>*
  store <4 x i16> %110, <4 x i16>* %112, align 2, !alias.scope !39, !noalias !42
  %113 = add i64 %50, 4
  %114 = icmp eq i64 %113, %42
  br i1 %114, label %115, label %49, !llvm.loop !46

115:                                              ; preds = %49
  %116 = icmp eq i64 %42, %13
  br i1 %116, label %117, label %15

117:                                              ; preds = %118, %115, %4
  ret void

118:                                              ; preds = %15, %118
  %119 = phi i64 [ %178, %118 ], [ %16, %15 ]
  %120 = phi i16* [ %177, %118 ], [ %17, %15 ]
  %121 = phi i16* [ %176, %118 ], [ %18, %15 ]
  %122 = phi i16* [ %175, %118 ], [ %19, %15 ]
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = and i32 %124, 63519
  %126 = shl nuw i32 %124, 16
  %127 = and i32 %126, 132120576
  %128 = or i32 %127, %125
  %129 = getelementptr inbounds i16, i16* %122, i64 1
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = and i32 %131, 63519
  %133 = shl nuw i32 %131, 16
  %134 = and i32 %133, 132120576
  %135 = or i32 %134, %132
  %136 = load i16, i16* %121, align 2
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 63519
  %139 = shl nuw i32 %137, 16
  %140 = and i32 %139, 132120576
  %141 = or i32 %140, %138
  %142 = getelementptr inbounds i16, i16* %121, i64 1
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = and i32 %144, 63519
  %146 = shl nuw i32 %144, 16
  %147 = and i32 %146, 132120576
  %148 = or i32 %147, %145
  %149 = load i16, i16* %120, align 2
  %150 = zext i16 %149 to i32
  %151 = and i32 %150, 63519
  %152 = shl nuw i32 %150, 16
  %153 = and i32 %152, 132120576
  %154 = or i32 %153, %151
  %155 = getelementptr inbounds i16, i16* %120, i64 1
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 63519
  %159 = shl nuw i32 %157, 16
  %160 = and i32 %159, 132120576
  %161 = or i32 %160, %158
  %162 = add nuw nsw i32 %148, %141
  %163 = shl nuw nsw i32 %162, 1
  %164 = add nuw nsw i32 %135, %128
  %165 = add nuw nsw i32 %164, %154
  %166 = add nuw nsw i32 %165, %161
  %167 = add nuw nsw i32 %166, %163
  %168 = lshr i32 %167, 3
  %169 = and i32 %168, 63519
  %170 = lshr i32 %167, 19
  %171 = and i32 %170, 2016
  %172 = or i32 %171, %169
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds i16, i16* %6, i64 %119
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %122, i64 2
  %176 = getelementptr inbounds i16, i16* %121, i64 2
  %177 = getelementptr inbounds i16, i16* %120, i64 2
  %178 = add nuw nsw i64 %119, 1
  %179 = icmp eq i64 %178, %13
  br i1 %179, label %117, label %118, !llvm.loop !47
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %74

10:                                               ; preds = %4
  %11 = shl nuw i32 %8, 16
  %12 = and i32 %11, 132120576
  %13 = and i32 %8, 63519
  %14 = or i32 %12, %13
  %15 = zext i32 %3 to i64
  %16 = icmp ult i32 %3, 8
  br i1 %16, label %17, label %21

17:                                               ; preds = %71, %21, %10
  %18 = phi i64 [ 0, %10 ], [ 0, %21 ], [ %32, %71 ]
  %19 = phi i16* [ %5, %10 ], [ %5, %21 ], [ %34, %71 ]
  %20 = phi i32 [ %14, %10 ], [ %14, %21 ], [ %73, %71 ]
  br label %75

21:                                               ; preds = %10
  %22 = shl nuw nsw i64 %15, 1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %1, i64 2
  %25 = shl nuw nsw i64 %15, 2
  %26 = or i64 %25, 2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = icmp ugt i8* %27, %0
  %29 = icmp ult i8* %24, %23
  %30 = and i1 %28, %29
  br i1 %30, label %17, label %31

31:                                               ; preds = %21
  %32 = and i64 %15, 4294967288
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i16, i16* %5, i64 %33
  %35 = insertelement <8 x i32> undef, i32 %14, i32 7
  %36 = getelementptr i8, i8* %1, i64 2
  %37 = bitcast i8* %36 to i16*
  br label %38

38:                                               ; preds = %38, %31
  %39 = phi i64 [ 0, %31 ], [ %69, %38 ]
  %40 = phi <8 x i32> [ %35, %31 ], [ %56, %38 ]
  %41 = shl i64 %39, 1
  %42 = getelementptr inbounds i16, i16* %37, i64 %41
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 2
  %45 = shufflevector <16 x i16> %44, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %46 = shufflevector <16 x i16> %44, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %47 = zext <8 x i16> %45 to <8 x i32>
  %48 = and <8 x i32> %47, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %49 = shl nuw <8 x i32> %47, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %50 = and <8 x i32> %49, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %51 = or <8 x i32> %50, %48
  %52 = zext <8 x i16> %46 to <8 x i32>
  %53 = and <8 x i32> %52, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %54 = shl nuw <8 x i32> %52, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %55 = and <8 x i32> %54, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %56 = or <8 x i32> %55, %53
  %57 = shufflevector <8 x i32> %40, <8 x i32> %56, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %58 = shl nuw nsw <8 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = add nsw <8 x i32> %56, %57
  %60 = add nsw <8 x i32> %59, %58
  %61 = lshr <8 x i32> %60, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %62 = and <8 x i32> %61, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %63 = lshr <8 x i32> %60, <i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18, i32 18>
  %64 = and <8 x i32> %63, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %65 = or <8 x i32> %64, %62
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds i16, i16* %6, i64 %39
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 2, !alias.scope !48, !noalias !51
  %69 = add i64 %39, 8
  %70 = icmp eq i64 %69, %32
  br i1 %70, label %71, label %38, !llvm.loop !53

71:                                               ; preds = %38
  %72 = icmp eq i64 %32, %15
  %73 = extractelement <8 x i32> %56, i32 7
  br i1 %72, label %74, label %17

74:                                               ; preds = %75, %71, %4
  ret void

75:                                               ; preds = %17, %75
  %76 = phi i64 [ %103, %75 ], [ %18, %17 ]
  %77 = phi i16* [ %86, %75 ], [ %19, %17 ]
  %78 = phi i32 [ %92, %75 ], [ %20, %17 ]
  %79 = getelementptr inbounds i16, i16* %77, i64 1
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 63519
  %83 = shl nuw i32 %81, 16
  %84 = and i32 %83, 132120576
  %85 = or i32 %84, %82
  %86 = getelementptr inbounds i16, i16* %77, i64 2
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = and i32 %88, 63519
  %90 = shl nuw i32 %88, 16
  %91 = and i32 %90, 132120576
  %92 = or i32 %91, %89
  %93 = shl nuw nsw i32 %85, 1
  %94 = add nsw i32 %92, %78
  %95 = add nsw i32 %94, %93
  %96 = lshr i32 %95, 2
  %97 = and i32 %96, 63519
  %98 = lshr i32 %95, 18
  %99 = and i32 %98, 2016
  %100 = or i32 %99, %97
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %6, i64 %76
  store i16 %101, i16* %102, align 2
  %103 = add nuw nsw i64 %76, 1
  %104 = icmp eq i64 %103, %15
  br i1 %104, label %74, label %75, !llvm.loop !54
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = bitcast i8* %0 to i16*
  %9 = load i16, i16* %5, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16, i16* %7, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %115

14:                                               ; preds = %4
  %15 = shl nuw i32 %12, 16
  %16 = and i32 %15, 132120576
  %17 = and i32 %12, 63519
  %18 = or i32 %16, %17
  %19 = shl nuw i32 %10, 16
  %20 = and i32 %19, 132120576
  %21 = and i32 %10, 63519
  %22 = or i32 %20, %21
  %23 = add nuw nsw i32 %18, %22
  %24 = zext i32 %3 to i64
  %25 = icmp ult i32 %3, 8
  br i1 %25, label %26, label %31

26:                                               ; preds = %112, %31, %14
  %27 = phi i64 [ 0, %14 ], [ 0, %31 ], [ %51, %112 ]
  %28 = phi i16* [ %5, %14 ], [ %5, %31 ], [ %53, %112 ]
  %29 = phi i16* [ %7, %14 ], [ %7, %31 ], [ %55, %112 ]
  %30 = phi i32 [ %23, %14 ], [ %23, %31 ], [ %114, %112 ]
  br label %116

31:                                               ; preds = %14
  %32 = shl nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = add i64 %2, 2
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = shl nuw nsw i64 %24, 2
  %37 = add i64 %36, %2
  %38 = add i64 %37, 2
  %39 = getelementptr i8, i8* %1, i64 %38
  %40 = getelementptr i8, i8* %1, i64 2
  %41 = or i64 %36, 2
  %42 = getelementptr i8, i8* %1, i64 %41
  %43 = icmp ugt i8* %39, %0
  %44 = icmp ult i8* %35, %33
  %45 = and i1 %43, %44
  %46 = icmp ugt i8* %42, %0
  %47 = icmp ult i8* %40, %33
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  br i1 %49, label %26, label %50

50:                                               ; preds = %31
  %51 = and i64 %24, 4294967288
  %52 = shl nuw nsw i64 %51, 1
  %53 = getelementptr i16, i16* %5, i64 %52
  %54 = shl nuw nsw i64 %51, 1
  %55 = getelementptr i16, i16* %7, i64 %54
  %56 = insertelement <8 x i32> undef, i32 %23, i32 7
  %57 = getelementptr i8, i8* %1, i64 2
  %58 = bitcast i8* %57 to i16*
  %59 = getelementptr i8, i8* %6, i64 2
  %60 = bitcast i8* %59 to i16*
  br label %61

61:                                               ; preds = %61, %50
  %62 = phi i64 [ 0, %50 ], [ %110, %61 ]
  %63 = phi <8 x i32> [ %56, %50 ], [ %96, %61 ]
  %64 = shl i64 %62, 1
  %65 = shl i64 %62, 1
  %66 = getelementptr inbounds i16, i16* %58, i64 %64
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %71 = zext <8 x i16> %69 to <8 x i32>
  %72 = and <8 x i32> %71, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %73 = shl nuw <8 x i32> %71, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %74 = and <8 x i32> %73, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %75 = or <8 x i32> %74, %72
  %76 = getelementptr inbounds i16, i16* %60, i64 %65
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 2
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %80 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %81 = zext <8 x i16> %79 to <8 x i32>
  %82 = and <8 x i32> %81, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %83 = shl nuw <8 x i32> %81, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %84 = and <8 x i32> %83, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %85 = or <8 x i32> %84, %82
  %86 = zext <8 x i16> %70 to <8 x i32>
  %87 = and <8 x i32> %86, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %88 = shl nuw <8 x i32> %86, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %89 = and <8 x i32> %88, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %90 = or <8 x i32> %89, %87
  %91 = zext <8 x i16> %80 to <8 x i32>
  %92 = and <8 x i32> %91, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %93 = shl nuw <8 x i32> %91, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %94 = and <8 x i32> %93, <i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %95 = or <8 x i32> %94, %92
  %96 = add nuw nsw <8 x i32> %95, %90
  %97 = shufflevector <8 x i32> %63, <8 x i32> %96, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %98 = add nuw nsw <8 x i32> %85, %75
  %99 = shl nuw nsw <8 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nsw <8 x i32> %96, %97
  %101 = add nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %103 = and <8 x i32> %102, <i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519, i32 63519>
  %104 = lshr <8 x i32> %101, <i32 19, i32 19, i32 19, i32 19, i32 19, i32 19, i32 19, i32 19>
  %105 = and <8 x i32> %104, <i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016, i32 2016>
  %106 = or <8 x i32> %105, %103
  %107 = trunc <8 x i32> %106 to <8 x i16>
  %108 = getelementptr inbounds i16, i16* %8, i64 %62
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %109, align 2, !alias.scope !55, !noalias !58
  %110 = add i64 %62, 8
  %111 = icmp eq i64 %110, %51
  br i1 %111, label %112, label %61, !llvm.loop !61

112:                                              ; preds = %61
  %113 = icmp eq i64 %51, %24
  %114 = extractelement <8 x i32> %96, i32 7
  br i1 %113, label %115, label %26

115:                                              ; preds = %116, %112, %4
  ret void

116:                                              ; preds = %26, %116
  %117 = phi i64 [ %161, %116 ], [ %27, %26 ]
  %118 = phi i16* [ %135, %116 ], [ %28, %26 ]
  %119 = phi i16* [ %142, %116 ], [ %29, %26 ]
  %120 = phi i32 [ %149, %116 ], [ %30, %26 ]
  %121 = getelementptr inbounds i16, i16* %118, i64 1
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = and i32 %123, 63519
  %125 = shl nuw i32 %123, 16
  %126 = and i32 %125, 132120576
  %127 = or i32 %126, %124
  %128 = getelementptr inbounds i16, i16* %119, i64 1
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = and i32 %130, 63519
  %132 = shl nuw i32 %130, 16
  %133 = and i32 %132, 132120576
  %134 = or i32 %133, %131
  %135 = getelementptr inbounds i16, i16* %118, i64 2
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 63519
  %139 = shl nuw i32 %137, 16
  %140 = and i32 %139, 132120576
  %141 = or i32 %140, %138
  %142 = getelementptr inbounds i16, i16* %119, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = and i32 %144, 63519
  %146 = shl nuw i32 %144, 16
  %147 = and i32 %146, 132120576
  %148 = or i32 %147, %145
  %149 = add nuw nsw i32 %148, %141
  %150 = add nuw nsw i32 %134, %127
  %151 = shl nuw nsw i32 %150, 1
  %152 = add nsw i32 %149, %120
  %153 = add nsw i32 %152, %151
  %154 = lshr i32 %153, 3
  %155 = and i32 %154, 63519
  %156 = lshr i32 %153, 19
  %157 = and i32 %156, 2016
  %158 = or i32 %157, %155
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds i16, i16* %8, i64 %117
  store i16 %159, i16* %160, align 2
  %161 = add nuw nsw i64 %117, 1
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %115, label %116, !llvm.loop !62
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I19ColorTypeFilter_565EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %0 to i16*
  %11 = load i16, i16* %5, align 2
  %12 = zext i16 %11 to i32
  %13 = load i16, i16* %7, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16, i16* %9, align 2
  %16 = zext i16 %15 to i32
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %160

18:                                               ; preds = %4
  %19 = shl nuw i32 %16, 16
  %20 = and i32 %19, 132120576
  %21 = and i32 %16, 63519
  %22 = or i32 %20, %21
  %23 = shl nuw i32 %12, 16
  %24 = and i32 %23, 132120576
  %25 = and i32 %12, 63519
  %26 = or i32 %24, %25
  %27 = add nuw nsw i32 %22, %26
  %28 = shl nuw i32 %14, 16
  %29 = and i32 %28, 132120576
  %30 = and i32 %14, 63519
  %31 = or i32 %29, %30
  %32 = shl nuw nsw i32 %31, 1
  %33 = add nuw nsw i32 %27, %32
  %34 = zext i32 %3 to i64
  %35 = icmp ult i32 %3, 4
  br i1 %35, label %36, label %42

36:                                               ; preds = %157, %42, %18
  %37 = phi i64 [ 0, %18 ], [ 0, %42 ], [ %72, %157 ]
  %38 = phi i16* [ %5, %18 ], [ %5, %42 ], [ %74, %157 ]
  %39 = phi i16* [ %7, %18 ], [ %7, %42 ], [ %76, %157 ]
  %40 = phi i32 [ %33, %18 ], [ %33, %42 ], [ %159, %157 ]
  %41 = phi i16* [ %9, %18 ], [ %9, %42 ], [ %78, %157 ]
  br label %161

42:                                               ; preds = %18
  %43 = shl nuw nsw i64 %34, 1
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = shl i64 %2, 1
  %46 = add i64 %45, 2
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = shl nuw nsw i64 %34, 2
  %49 = add i64 %48, %45
  %50 = add i64 %49, 2
  %51 = getelementptr i8, i8* %1, i64 %50
  %52 = add i64 %2, 2
  %53 = getelementptr i8, i8* %1, i64 %52
  %54 = add i64 %48, %2
  %55 = add i64 %54, 2
  %56 = getelementptr i8, i8* %1, i64 %55
  %57 = getelementptr i8, i8* %1, i64 2
  %58 = or i64 %48, 2
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = icmp ugt i8* %51, %0
  %61 = icmp ult i8* %47, %44
  %62 = and i1 %60, %61
  %63 = icmp ugt i8* %56, %0
  %64 = icmp ult i8* %53, %44
  %65 = and i1 %63, %64
  %66 = or i1 %62, %65
  %67 = icmp ugt i8* %59, %0
  %68 = icmp ult i8* %57, %44
  %69 = and i1 %67, %68
  %70 = or i1 %66, %69
  br i1 %70, label %36, label %71

71:                                               ; preds = %42
  %72 = and i64 %34, 4294967292
  %73 = shl nuw nsw i64 %72, 1
  %74 = getelementptr i16, i16* %5, i64 %73
  %75 = shl nuw nsw i64 %72, 1
  %76 = getelementptr i16, i16* %7, i64 %75
  %77 = shl nuw nsw i64 %72, 1
  %78 = getelementptr i16, i16* %9, i64 %77
  %79 = insertelement <4 x i32> undef, i32 %33, i32 3
  %80 = getelementptr i8, i8* %1, i64 2
  %81 = bitcast i8* %80 to i16*
  %82 = getelementptr i8, i8* %6, i64 2
  %83 = bitcast i8* %82 to i16*
  %84 = getelementptr i8, i8* %8, i64 2
  %85 = bitcast i8* %84 to i16*
  br label %86

86:                                               ; preds = %86, %71
  %87 = phi i64 [ 0, %71 ], [ %155, %86 ]
  %88 = phi <4 x i32> [ %79, %71 ], [ %143, %86 ]
  %89 = shl i64 %87, 1
  %90 = shl i64 %87, 1
  %91 = shl i64 %87, 1
  %92 = getelementptr inbounds i16, i16* %81, i64 %89
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %96 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %97 = zext <4 x i16> %95 to <4 x i32>
  %98 = and <4 x i32> %97, <i32 63519, i32 63519, i32 63519, i32 63519>
  %99 = shl nuw <4 x i32> %97, <i32 16, i32 16, i32 16, i32 16>
  %100 = and <4 x i32> %99, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %101 = or <4 x i32> %100, %98
  %102 = getelementptr inbounds i16, i16* %83, i64 %90
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %106 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %107 = zext <4 x i16> %105 to <4 x i32>
  %108 = and <4 x i32> %107, <i32 63519, i32 63519, i32 63519, i32 63519>
  %109 = shl nuw <4 x i32> %107, <i32 16, i32 16, i32 16, i32 16>
  %110 = and <4 x i32> %109, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %111 = or <4 x i32> %110, %108
  %112 = getelementptr inbounds i16, i16* %85, i64 %91
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %116 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %117 = zext <4 x i16> %115 to <4 x i32>
  %118 = and <4 x i32> %117, <i32 63519, i32 63519, i32 63519, i32 63519>
  %119 = shl nuw <4 x i32> %117, <i32 16, i32 16, i32 16, i32 16>
  %120 = and <4 x i32> %119, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %121 = or <4 x i32> %120, %118
  %122 = shl nuw nsw <4 x i32> %111, <i32 1, i32 1, i32 1, i32 1>
  %123 = add nuw nsw <4 x i32> %121, %101
  %124 = add nuw nsw <4 x i32> %123, %122
  %125 = shl nuw nsw <4 x i32> %124, <i32 1, i32 1, i32 1, i32 1>
  %126 = zext <4 x i16> %96 to <4 x i32>
  %127 = and <4 x i32> %126, <i32 63519, i32 63519, i32 63519, i32 63519>
  %128 = shl nuw <4 x i32> %126, <i32 16, i32 16, i32 16, i32 16>
  %129 = and <4 x i32> %128, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %130 = or <4 x i32> %129, %127
  %131 = zext <4 x i16> %106 to <4 x i32>
  %132 = and <4 x i32> %131, <i32 63519, i32 63519, i32 63519, i32 63519>
  %133 = shl nuw <4 x i32> %131, <i32 16, i32 16, i32 16, i32 16>
  %134 = and <4 x i32> %133, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %135 = or <4 x i32> %134, %132
  %136 = zext <4 x i16> %116 to <4 x i32>
  %137 = and <4 x i32> %136, <i32 63519, i32 63519, i32 63519, i32 63519>
  %138 = shl nuw <4 x i32> %136, <i32 16, i32 16, i32 16, i32 16>
  %139 = and <4 x i32> %138, <i32 132120576, i32 132120576, i32 132120576, i32 132120576>
  %140 = or <4 x i32> %139, %137
  %141 = shl nuw nsw <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %142 = add nuw nsw <4 x i32> %140, %130
  %143 = add nuw nsw <4 x i32> %142, %141
  %144 = shufflevector <4 x i32> %88, <4 x i32> %143, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %145 = add nsw <4 x i32> %125, %144
  %146 = add <4 x i32> %145, %143
  %147 = lshr <4 x i32> %146, <i32 4, i32 4, i32 4, i32 4>
  %148 = and <4 x i32> %147, <i32 63519, i32 63519, i32 63519, i32 63519>
  %149 = lshr <4 x i32> %146, <i32 20, i32 20, i32 20, i32 20>
  %150 = and <4 x i32> %149, <i32 2016, i32 2016, i32 2016, i32 2016>
  %151 = or <4 x i32> %150, %148
  %152 = trunc <4 x i32> %151 to <4 x i16>
  %153 = getelementptr inbounds i16, i16* %10, i64 %87
  %154 = bitcast i16* %153 to <4 x i16>*
  store <4 x i16> %152, <4 x i16>* %154, align 2, !alias.scope !63, !noalias !66
  %155 = add i64 %87, 4
  %156 = icmp eq i64 %155, %72
  br i1 %156, label %157, label %86, !llvm.loop !70

157:                                              ; preds = %86
  %158 = icmp eq i64 %72, %34
  %159 = extractelement <4 x i32> %143, i32 3
  br i1 %158, label %160, label %36

160:                                              ; preds = %161, %157, %4
  ret void

161:                                              ; preds = %36, %161
  %162 = phi i64 [ %225, %161 ], [ %37, %36 ]
  %163 = phi i16* [ %192, %161 ], [ %38, %36 ]
  %164 = phi i16* [ %199, %161 ], [ %39, %36 ]
  %165 = phi i32 [ %215, %161 ], [ %40, %36 ]
  %166 = phi i16* [ %206, %161 ], [ %41, %36 ]
  %167 = getelementptr inbounds i16, i16* %163, i64 1
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = and i32 %169, 63519
  %171 = shl nuw i32 %169, 16
  %172 = and i32 %171, 132120576
  %173 = or i32 %172, %170
  %174 = getelementptr inbounds i16, i16* %164, i64 1
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = and i32 %176, 63519
  %178 = shl nuw i32 %176, 16
  %179 = and i32 %178, 132120576
  %180 = or i32 %179, %177
  %181 = getelementptr inbounds i16, i16* %166, i64 1
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = and i32 %183, 63519
  %185 = shl nuw i32 %183, 16
  %186 = and i32 %185, 132120576
  %187 = or i32 %186, %184
  %188 = shl nuw nsw i32 %180, 1
  %189 = add nuw nsw i32 %187, %173
  %190 = add nuw nsw i32 %189, %188
  %191 = shl nuw nsw i32 %190, 1
  %192 = getelementptr inbounds i16, i16* %163, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = and i32 %194, 63519
  %196 = shl nuw i32 %194, 16
  %197 = and i32 %196, 132120576
  %198 = or i32 %197, %195
  %199 = getelementptr inbounds i16, i16* %164, i64 2
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = and i32 %201, 63519
  %203 = shl nuw i32 %201, 16
  %204 = and i32 %203, 132120576
  %205 = or i32 %204, %202
  %206 = getelementptr inbounds i16, i16* %166, i64 2
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = and i32 %208, 63519
  %210 = shl nuw i32 %208, 16
  %211 = and i32 %210, 132120576
  %212 = or i32 %211, %209
  %213 = shl nuw nsw i32 %205, 1
  %214 = add nuw nsw i32 %212, %198
  %215 = add nuw nsw i32 %214, %213
  %216 = add nsw i32 %191, %165
  %217 = add i32 %216, %215
  %218 = lshr i32 %217, 4
  %219 = and i32 %218, 63519
  %220 = lshr i32 %217, 20
  %221 = and i32 %220, 2016
  %222 = or i32 %221, %219
  %223 = trunc i32 %222 to i16
  %224 = getelementptr inbounds i16, i16* %10, i64 %162
  store i16 %223, i16* %224, align 2
  %225 = add nuw nsw i64 %162, 1
  %226 = icmp eq i64 %225, %34
  br i1 %226, label %160, label %161, !llvm.loop !71
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 9
  br i1 %12, label %13, label %17

13:                                               ; preds = %42, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %37, %42 ]
  %15 = phi i16* [ %10, %17 ], [ %10, %7 ], [ %39, %42 ]
  %16 = phi i16* [ %9, %17 ], [ %9, %7 ], [ %41, %42 ]
  br label %76

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 1
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 2
  %21 = add i64 %20, %2
  %22 = add i64 %21, -2
  %23 = getelementptr i8, i8* %1, i64 %22
  %24 = add nsw i64 %20, -2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = icmp ugt i8* %23, %0
  %27 = icmp ult i8* %8, %19
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %25, %0
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %13, label %33

33:                                               ; preds = %17
  %34 = and i64 %11, 7
  %35 = icmp eq i64 %34, 0
  %36 = select i1 %35, i64 8, i64 %34
  %37 = sub nsw i64 %11, %36
  %38 = shl nsw i64 %37, 1
  %39 = getelementptr i16, i16* %10, i64 %38
  %40 = shl nsw i64 %37, 1
  %41 = getelementptr i16, i16* %9, i64 %40
  br label %42

42:                                               ; preds = %42, %33
  %43 = phi i64 [ 0, %33 ], [ %73, %42 ]
  %44 = shl i64 %43, 1
  %45 = getelementptr i16, i16* %10, i64 %44
  %46 = shl i64 %43, 1
  %47 = getelementptr i16, i16* %9, i64 %46
  %48 = bitcast i16* %45 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 2
  %50 = shufflevector <16 x i16> %49, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = and <8 x i32> %51, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %53 = shl nuw nsw <8 x i32> %51, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %54 = and <8 x i32> %53, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %55 = or <8 x i32> %54, %52
  %56 = bitcast i16* %47 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 2
  %58 = shufflevector <16 x i16> %57, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = and <8 x i32> %59, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %61 = shl nuw nsw <8 x i32> %59, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %62 = and <8 x i32> %61, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %63 = or <8 x i32> %62, %60
  %64 = add nuw nsw <8 x i32> %63, %55
  %65 = lshr <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = and <8 x i32> %65, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %67 = lshr <8 x i32> %64, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %68 = and <8 x i32> %67, <i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680>
  %69 = or <8 x i32> %68, %66
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %5, i64 %43
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !72, !noalias !75
  %73 = add i64 %43, 8
  %74 = icmp eq i64 %73, %37
  br i1 %74, label %13, label %42, !llvm.loop !78

75:                                               ; preds = %76, %4
  ret void

76:                                               ; preds = %13, %76
  %77 = phi i64 [ %102, %76 ], [ %14, %13 ]
  %78 = phi i16* [ %100, %76 ], [ %15, %13 ]
  %79 = phi i16* [ %101, %76 ], [ %16, %13 ]
  %80 = load i16, i16* %78, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 3855
  %83 = shl nuw nsw i32 %81, 12
  %84 = and i32 %83, 252641280
  %85 = or i32 %84, %82
  %86 = load i16, i16* %79, align 2
  %87 = zext i16 %86 to i32
  %88 = and i32 %87, 3855
  %89 = shl nuw nsw i32 %87, 12
  %90 = and i32 %89, 252641280
  %91 = or i32 %90, %88
  %92 = add nuw nsw i32 %91, %85
  %93 = lshr i32 %92, 1
  %94 = and i32 %93, 3855
  %95 = lshr i32 %92, 13
  %96 = and i32 %95, 61680
  %97 = or i32 %96, %94
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %5, i64 %77
  store i16 %98, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %78, i64 2
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  %102 = add nuw nsw i64 %77, 1
  %103 = icmp eq i64 %102, %11
  br i1 %103, label %75, label %76, !llvm.loop !79
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %100

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 9
  br i1 %14, label %15, label %20

15:                                               ; preds = %55, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %48, %55 ]
  %17 = phi i16* [ %10, %20 ], [ %10, %8 ], [ %50, %55 ]
  %18 = phi i16* [ %11, %20 ], [ %11, %8 ], [ %52, %55 ]
  %19 = phi i16* [ %12, %20 ], [ %12, %8 ], [ %54, %55 ]
  br label %101

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 2
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = add i64 %25, -2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = add i64 %23, %2
  %29 = add i64 %28, -2
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = add nsw i64 %23, -2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = icmp ugt i8* %27, %0
  %34 = icmp ult i8* %9, %22
  %35 = and i1 %33, %34
  %36 = icmp ugt i8* %30, %0
  %37 = icmp ult i8* %5, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %32, %0
  %41 = icmp ugt i8* %22, %1
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  br i1 %43, label %15, label %44

44:                                               ; preds = %20
  %45 = and i64 %13, 7
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 8, i64 %45
  %48 = sub nsw i64 %13, %47
  %49 = shl nsw i64 %48, 1
  %50 = getelementptr i16, i16* %10, i64 %49
  %51 = shl nsw i64 %48, 1
  %52 = getelementptr i16, i16* %11, i64 %51
  %53 = shl nsw i64 %48, 1
  %54 = getelementptr i16, i16* %12, i64 %53
  br label %55

55:                                               ; preds = %55, %44
  %56 = phi i64 [ 0, %44 ], [ %98, %55 ]
  %57 = shl i64 %56, 1
  %58 = getelementptr i16, i16* %10, i64 %57
  %59 = shl i64 %56, 1
  %60 = getelementptr i16, i16* %11, i64 %59
  %61 = shl i64 %56, 1
  %62 = getelementptr i16, i16* %12, i64 %61
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 2
  %65 = shufflevector <16 x i16> %64, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = and <8 x i32> %66, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %68 = shl nuw nsw <8 x i32> %66, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %69 = and <8 x i32> %68, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %70 = or <8 x i32> %69, %67
  %71 = bitcast i16* %60 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 2
  %73 = shufflevector <16 x i16> %72, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = zext <8 x i16> %73 to <8 x i32>
  %75 = and <8 x i32> %74, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %76 = shl nuw nsw <8 x i32> %74, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %77 = and <8 x i32> %76, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %78 = or <8 x i32> %77, %75
  %79 = bitcast i16* %58 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = shufflevector <16 x i16> %80, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = and <8 x i32> %82, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %84 = shl nuw nsw <8 x i32> %82, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %85 = and <8 x i32> %84, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %86 = or <8 x i32> %85, %83
  %87 = shl nuw nsw <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = add nuw nsw <8 x i32> %86, %70
  %89 = add nuw nsw <8 x i32> %88, %87
  %90 = lshr <8 x i32> %89, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %91 = and <8 x i32> %90, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %92 = lshr <8 x i32> %89, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %93 = and <8 x i32> %92, <i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680>
  %94 = or <8 x i32> %93, %91
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = getelementptr inbounds i16, i16* %6, i64 %56
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2, !alias.scope !80, !noalias !83
  %98 = add i64 %56, 8
  %99 = icmp eq i64 %98, %48
  br i1 %99, label %15, label %55, !llvm.loop !87

100:                                              ; preds = %101, %4
  ret void

101:                                              ; preds = %15, %101
  %102 = phi i64 [ %137, %101 ], [ %16, %15 ]
  %103 = phi i16* [ %136, %101 ], [ %17, %15 ]
  %104 = phi i16* [ %135, %101 ], [ %18, %15 ]
  %105 = phi i16* [ %134, %101 ], [ %19, %15 ]
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = and i32 %107, 3855
  %109 = shl nuw nsw i32 %107, 12
  %110 = and i32 %109, 252641280
  %111 = or i32 %110, %108
  %112 = load i16, i16* %104, align 2
  %113 = zext i16 %112 to i32
  %114 = and i32 %113, 3855
  %115 = shl nuw nsw i32 %113, 12
  %116 = and i32 %115, 252641280
  %117 = or i32 %116, %114
  %118 = load i16, i16* %103, align 2
  %119 = zext i16 %118 to i32
  %120 = and i32 %119, 3855
  %121 = shl nuw nsw i32 %119, 12
  %122 = and i32 %121, 252641280
  %123 = or i32 %122, %120
  %124 = shl nuw nsw i32 %117, 1
  %125 = add nuw nsw i32 %123, %111
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 2
  %128 = and i32 %127, 3855
  %129 = lshr i32 %126, 14
  %130 = and i32 %129, 61680
  %131 = or i32 %130, %128
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %6, i64 %102
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %105, i64 2
  %135 = getelementptr inbounds i16, i16* %104, i64 2
  %136 = getelementptr inbounds i16, i16* %103, i64 2
  %137 = add nuw nsw i64 %102, 1
  %138 = icmp eq i64 %137, %13
  br i1 %138, label %100, label %101, !llvm.loop !88
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %57

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i16*
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %55, %14, %7
  %12 = phi i64 [ 0, %14 ], [ 0, %7 ], [ %23, %55 ]
  %13 = phi i16* [ %8, %14 ], [ %8, %7 ], [ %25, %55 ]
  br label %58

14:                                               ; preds = %7
  %15 = shl nuw nsw i64 %9, 1
  %16 = getelementptr i8, i8* %0, i64 %15
  %17 = shl nuw nsw i64 %9, 2
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = icmp ugt i8* %18, %0
  %20 = icmp ugt i8* %16, %1
  %21 = and i1 %19, %20
  br i1 %21, label %11, label %22

22:                                               ; preds = %14
  %23 = and i64 %9, 4294967288
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i16, i16* %8, i64 %24
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %53, %26 ]
  %28 = shl i64 %27, 1
  %29 = getelementptr i16, i16* %8, i64 %28
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = shufflevector <16 x i16> %31, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %33 = shufflevector <16 x i16> %31, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %34 = zext <8 x i16> %32 to <8 x i32>
  %35 = and <8 x i32> %34, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %36 = shl nuw nsw <8 x i32> %34, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %37 = and <8 x i32> %36, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %38 = or <8 x i32> %37, %35
  %39 = zext <8 x i16> %33 to <8 x i32>
  %40 = and <8 x i32> %39, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %41 = shl nuw nsw <8 x i32> %39, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %42 = and <8 x i32> %41, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %43 = or <8 x i32> %42, %40
  %44 = add nuw nsw <8 x i32> %43, %38
  %45 = lshr <8 x i32> %44, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %46 = and <8 x i32> %45, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %47 = lshr <8 x i32> %44, <i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13>
  %48 = and <8 x i32> %47, <i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680>
  %49 = or <8 x i32> %48, %46
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = getelementptr inbounds i16, i16* %5, i64 %27
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %52, align 2, !alias.scope !89, !noalias !92
  %53 = add i64 %27, 8
  %54 = icmp eq i64 %53, %23
  br i1 %54, label %55, label %26, !llvm.loop !94

55:                                               ; preds = %26
  %56 = icmp eq i64 %23, %9
  br i1 %56, label %57, label %11

57:                                               ; preds = %58, %55, %4
  ret void

58:                                               ; preds = %11, %58
  %59 = phi i64 [ %83, %58 ], [ %12, %11 ]
  %60 = phi i16* [ %82, %58 ], [ %13, %11 ]
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = and i32 %62, 3855
  %64 = shl nuw nsw i32 %62, 12
  %65 = and i32 %64, 252641280
  %66 = or i32 %65, %63
  %67 = getelementptr inbounds i16, i16* %60, i64 1
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = and i32 %69, 3855
  %71 = shl nuw nsw i32 %69, 12
  %72 = and i32 %71, 252641280
  %73 = or i32 %72, %70
  %74 = add nuw nsw i32 %73, %66
  %75 = lshr i32 %74, 1
  %76 = and i32 %75, 3855
  %77 = lshr i32 %74, 13
  %78 = and i32 %77, 61680
  %79 = or i32 %78, %76
  %80 = trunc i32 %79 to i16
  %81 = getelementptr inbounds i16, i16* %5, i64 %59
  store i16 %80, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %60, i64 2
  %83 = add nuw nsw i64 %59, 1
  %84 = icmp eq i64 %83, %9
  br i1 %84, label %57, label %58, !llvm.loop !95
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 4
  br i1 %12, label %13, label %17

13:                                               ; preds = %84, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %32, %84 ]
  %15 = phi i16* [ %10, %17 ], [ %10, %7 ], [ %34, %84 ]
  %16 = phi i16* [ %9, %17 ], [ %9, %7 ], [ %36, %84 ]
  br label %87

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 1
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 2
  %21 = add i64 %20, %2
  %22 = getelementptr i8, i8* %1, i64 %21
  %23 = getelementptr i8, i8* %1, i64 %20
  %24 = icmp ugt i8* %22, %0
  %25 = icmp ult i8* %8, %19
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %23, %0
  %28 = icmp ugt i8* %19, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %13, label %31

31:                                               ; preds = %17
  %32 = and i64 %11, 4294967292
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i16, i16* %10, i64 %33
  %35 = shl nuw nsw i64 %32, 1
  %36 = getelementptr i16, i16* %9, i64 %35
  br label %37

37:                                               ; preds = %37, %31
  %38 = phi i64 [ 0, %31 ], [ %82, %37 ]
  %39 = shl i64 %38, 1
  %40 = getelementptr i16, i16* %10, i64 %39
  %41 = shl i64 %38, 1
  %42 = getelementptr i16, i16* %9, i64 %41
  %43 = bitcast i16* %40 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %46 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %47 = zext <4 x i16> %45 to <4 x i32>
  %48 = and <4 x i32> %47, <i32 3855, i32 3855, i32 3855, i32 3855>
  %49 = shl nuw nsw <4 x i32> %47, <i32 12, i32 12, i32 12, i32 12>
  %50 = and <4 x i32> %49, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %51 = or <4 x i32> %50, %48
  %52 = zext <4 x i16> %46 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 3855, i32 3855, i32 3855, i32 3855>
  %54 = shl nuw nsw <4 x i32> %52, <i32 12, i32 12, i32 12, i32 12>
  %55 = and <4 x i32> %54, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %56 = or <4 x i32> %55, %53
  %57 = bitcast i16* %42 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = zext <4 x i16> %59 to <4 x i32>
  %62 = and <4 x i32> %61, <i32 3855, i32 3855, i32 3855, i32 3855>
  %63 = shl nuw nsw <4 x i32> %61, <i32 12, i32 12, i32 12, i32 12>
  %64 = and <4 x i32> %63, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %65 = or <4 x i32> %64, %62
  %66 = zext <4 x i16> %60 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 3855, i32 3855, i32 3855, i32 3855>
  %68 = shl nuw nsw <4 x i32> %66, <i32 12, i32 12, i32 12, i32 12>
  %69 = and <4 x i32> %68, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %70 = or <4 x i32> %69, %67
  %71 = add nuw nsw <4 x i32> %56, %51
  %72 = add nuw nsw <4 x i32> %71, %65
  %73 = add nuw nsw <4 x i32> %72, %70
  %74 = lshr <4 x i32> %73, <i32 2, i32 2, i32 2, i32 2>
  %75 = and <4 x i32> %74, <i32 3855, i32 3855, i32 3855, i32 3855>
  %76 = lshr <4 x i32> %73, <i32 14, i32 14, i32 14, i32 14>
  %77 = and <4 x i32> %76, <i32 61680, i32 61680, i32 61680, i32 61680>
  %78 = or <4 x i32> %77, %75
  %79 = trunc <4 x i32> %78 to <4 x i16>
  %80 = getelementptr inbounds i16, i16* %5, i64 %38
  %81 = bitcast i16* %80 to <4 x i16>*
  store <4 x i16> %79, <4 x i16>* %81, align 2, !alias.scope !96, !noalias !99
  %82 = add i64 %38, 4
  %83 = icmp eq i64 %82, %32
  br i1 %83, label %84, label %37, !llvm.loop !102

84:                                               ; preds = %37
  %85 = icmp eq i64 %32, %11
  br i1 %85, label %86, label %13

86:                                               ; preds = %87, %84, %4
  ret void

87:                                               ; preds = %13, %87
  %88 = phi i64 [ %129, %87 ], [ %14, %13 ]
  %89 = phi i16* [ %127, %87 ], [ %15, %13 ]
  %90 = phi i16* [ %128, %87 ], [ %16, %13 ]
  %91 = load i16, i16* %89, align 2
  %92 = zext i16 %91 to i32
  %93 = and i32 %92, 3855
  %94 = shl nuw nsw i32 %92, 12
  %95 = and i32 %94, 252641280
  %96 = or i32 %95, %93
  %97 = getelementptr inbounds i16, i16* %89, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = and i32 %99, 3855
  %101 = shl nuw nsw i32 %99, 12
  %102 = and i32 %101, 252641280
  %103 = or i32 %102, %100
  %104 = load i16, i16* %90, align 2
  %105 = zext i16 %104 to i32
  %106 = and i32 %105, 3855
  %107 = shl nuw nsw i32 %105, 12
  %108 = and i32 %107, 252641280
  %109 = or i32 %108, %106
  %110 = getelementptr inbounds i16, i16* %90, i64 1
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = and i32 %112, 3855
  %114 = shl nuw nsw i32 %112, 12
  %115 = and i32 %114, 252641280
  %116 = or i32 %115, %113
  %117 = add nuw nsw i32 %103, %96
  %118 = add nuw nsw i32 %117, %109
  %119 = add nuw nsw i32 %118, %116
  %120 = lshr i32 %119, 2
  %121 = and i32 %120, 3855
  %122 = lshr i32 %119, 14
  %123 = and i32 %122, 61680
  %124 = or i32 %123, %121
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %5, i64 %88
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %89, i64 2
  %128 = getelementptr inbounds i16, i16* %90, i64 2
  %129 = add nuw nsw i64 %88, 1
  %130 = icmp eq i64 %129, %11
  br i1 %130, label %86, label %87, !llvm.loop !103
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %117

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 4
  br i1 %14, label %15, label %20

15:                                               ; preds = %115, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %42, %115 ]
  %17 = phi i16* [ %10, %20 ], [ %10, %8 ], [ %44, %115 ]
  %18 = phi i16* [ %11, %20 ], [ %11, %8 ], [ %46, %115 ]
  %19 = phi i16* [ %12, %20 ], [ %12, %8 ], [ %48, %115 ]
  br label %118

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 2
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = add i64 %23, %2
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = getelementptr i8, i8* %1, i64 %23
  %30 = icmp ugt i8* %26, %0
  %31 = icmp ult i8* %9, %22
  %32 = and i1 %30, %31
  %33 = icmp ugt i8* %28, %0
  %34 = icmp ult i8* %5, %22
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  %37 = icmp ugt i8* %29, %0
  %38 = icmp ugt i8* %22, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %15, label %41

41:                                               ; preds = %20
  %42 = and i64 %13, 4294967292
  %43 = shl nuw nsw i64 %42, 1
  %44 = getelementptr i16, i16* %10, i64 %43
  %45 = shl nuw nsw i64 %42, 1
  %46 = getelementptr i16, i16* %11, i64 %45
  %47 = shl nuw nsw i64 %42, 1
  %48 = getelementptr i16, i16* %12, i64 %47
  br label %49

49:                                               ; preds = %49, %41
  %50 = phi i64 [ 0, %41 ], [ %113, %49 ]
  %51 = shl i64 %50, 1
  %52 = getelementptr i16, i16* %10, i64 %51
  %53 = shl i64 %50, 1
  %54 = getelementptr i16, i16* %11, i64 %53
  %55 = shl i64 %50, 1
  %56 = getelementptr i16, i16* %12, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = zext <4 x i16> %59 to <4 x i32>
  %62 = and <4 x i32> %61, <i32 3855, i32 3855, i32 3855, i32 3855>
  %63 = shl nuw nsw <4 x i32> %61, <i32 12, i32 12, i32 12, i32 12>
  %64 = and <4 x i32> %63, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %65 = or <4 x i32> %64, %62
  %66 = zext <4 x i16> %60 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 3855, i32 3855, i32 3855, i32 3855>
  %68 = shl nuw nsw <4 x i32> %66, <i32 12, i32 12, i32 12, i32 12>
  %69 = and <4 x i32> %68, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %70 = or <4 x i32> %69, %67
  %71 = bitcast i16* %54 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %74 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %75 = zext <4 x i16> %73 to <4 x i32>
  %76 = and <4 x i32> %75, <i32 3855, i32 3855, i32 3855, i32 3855>
  %77 = shl nuw nsw <4 x i32> %75, <i32 12, i32 12, i32 12, i32 12>
  %78 = and <4 x i32> %77, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %79 = or <4 x i32> %78, %76
  %80 = zext <4 x i16> %74 to <4 x i32>
  %81 = and <4 x i32> %80, <i32 3855, i32 3855, i32 3855, i32 3855>
  %82 = shl nuw nsw <4 x i32> %80, <i32 12, i32 12, i32 12, i32 12>
  %83 = and <4 x i32> %82, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %84 = or <4 x i32> %83, %81
  %85 = bitcast i16* %52 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %88 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %89 = zext <4 x i16> %87 to <4 x i32>
  %90 = and <4 x i32> %89, <i32 3855, i32 3855, i32 3855, i32 3855>
  %91 = shl nuw nsw <4 x i32> %89, <i32 12, i32 12, i32 12, i32 12>
  %92 = and <4 x i32> %91, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %93 = or <4 x i32> %92, %90
  %94 = zext <4 x i16> %88 to <4 x i32>
  %95 = and <4 x i32> %94, <i32 3855, i32 3855, i32 3855, i32 3855>
  %96 = shl nuw nsw <4 x i32> %94, <i32 12, i32 12, i32 12, i32 12>
  %97 = and <4 x i32> %96, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %98 = or <4 x i32> %97, %95
  %99 = add nuw nsw <4 x i32> %84, %79
  %100 = shl nuw nsw <4 x i32> %99, <i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <4 x i32> %70, %65
  %102 = add nuw nsw <4 x i32> %101, %93
  %103 = add nuw nsw <4 x i32> %102, %98
  %104 = add nuw <4 x i32> %103, %100
  %105 = lshr <4 x i32> %104, <i32 3, i32 3, i32 3, i32 3>
  %106 = and <4 x i32> %105, <i32 3855, i32 3855, i32 3855, i32 3855>
  %107 = lshr <4 x i32> %104, <i32 15, i32 15, i32 15, i32 15>
  %108 = and <4 x i32> %107, <i32 61680, i32 61680, i32 61680, i32 61680>
  %109 = or <4 x i32> %108, %106
  %110 = trunc <4 x i32> %109 to <4 x i16>
  %111 = getelementptr inbounds i16, i16* %6, i64 %50
  %112 = bitcast i16* %111 to <4 x i16>*
  store <4 x i16> %110, <4 x i16>* %112, align 2, !alias.scope !104, !noalias !107
  %113 = add i64 %50, 4
  %114 = icmp eq i64 %113, %42
  br i1 %114, label %115, label %49, !llvm.loop !111

115:                                              ; preds = %49
  %116 = icmp eq i64 %42, %13
  br i1 %116, label %117, label %15

117:                                              ; preds = %118, %115, %4
  ret void

118:                                              ; preds = %15, %118
  %119 = phi i64 [ %178, %118 ], [ %16, %15 ]
  %120 = phi i16* [ %177, %118 ], [ %17, %15 ]
  %121 = phi i16* [ %176, %118 ], [ %18, %15 ]
  %122 = phi i16* [ %175, %118 ], [ %19, %15 ]
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = and i32 %124, 3855
  %126 = shl nuw nsw i32 %124, 12
  %127 = and i32 %126, 252641280
  %128 = or i32 %127, %125
  %129 = getelementptr inbounds i16, i16* %122, i64 1
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = and i32 %131, 3855
  %133 = shl nuw nsw i32 %131, 12
  %134 = and i32 %133, 252641280
  %135 = or i32 %134, %132
  %136 = load i16, i16* %121, align 2
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 3855
  %139 = shl nuw nsw i32 %137, 12
  %140 = and i32 %139, 252641280
  %141 = or i32 %140, %138
  %142 = getelementptr inbounds i16, i16* %121, i64 1
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = and i32 %144, 3855
  %146 = shl nuw nsw i32 %144, 12
  %147 = and i32 %146, 252641280
  %148 = or i32 %147, %145
  %149 = load i16, i16* %120, align 2
  %150 = zext i16 %149 to i32
  %151 = and i32 %150, 3855
  %152 = shl nuw nsw i32 %150, 12
  %153 = and i32 %152, 252641280
  %154 = or i32 %153, %151
  %155 = getelementptr inbounds i16, i16* %120, i64 1
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 3855
  %159 = shl nuw nsw i32 %157, 12
  %160 = and i32 %159, 252641280
  %161 = or i32 %160, %158
  %162 = add nuw nsw i32 %148, %141
  %163 = shl nuw nsw i32 %162, 1
  %164 = add nuw nsw i32 %135, %128
  %165 = add nuw nsw i32 %164, %154
  %166 = add nuw nsw i32 %165, %161
  %167 = add nuw i32 %166, %163
  %168 = lshr i32 %167, 3
  %169 = and i32 %168, 3855
  %170 = lshr i32 %167, 15
  %171 = and i32 %170, 61680
  %172 = or i32 %171, %169
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds i16, i16* %6, i64 %119
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %122, i64 2
  %176 = getelementptr inbounds i16, i16* %121, i64 2
  %177 = getelementptr inbounds i16, i16* %120, i64 2
  %178 = add nuw nsw i64 %119, 1
  %179 = icmp eq i64 %178, %13
  br i1 %179, label %117, label %118, !llvm.loop !112
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %74

10:                                               ; preds = %4
  %11 = shl nuw nsw i32 %8, 12
  %12 = and i32 %11, 252641280
  %13 = and i32 %8, 3855
  %14 = or i32 %12, %13
  %15 = zext i32 %3 to i64
  %16 = icmp ult i32 %3, 8
  br i1 %16, label %17, label %21

17:                                               ; preds = %71, %21, %10
  %18 = phi i64 [ 0, %10 ], [ 0, %21 ], [ %32, %71 ]
  %19 = phi i16* [ %5, %10 ], [ %5, %21 ], [ %34, %71 ]
  %20 = phi i32 [ %14, %10 ], [ %14, %21 ], [ %73, %71 ]
  br label %75

21:                                               ; preds = %10
  %22 = shl nuw nsw i64 %15, 1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %1, i64 2
  %25 = shl nuw nsw i64 %15, 2
  %26 = or i64 %25, 2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = icmp ugt i8* %27, %0
  %29 = icmp ult i8* %24, %23
  %30 = and i1 %28, %29
  br i1 %30, label %17, label %31

31:                                               ; preds = %21
  %32 = and i64 %15, 4294967288
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i16, i16* %5, i64 %33
  %35 = insertelement <8 x i32> undef, i32 %14, i32 7
  %36 = getelementptr i8, i8* %1, i64 2
  %37 = bitcast i8* %36 to i16*
  br label %38

38:                                               ; preds = %38, %31
  %39 = phi i64 [ 0, %31 ], [ %69, %38 ]
  %40 = phi <8 x i32> [ %35, %31 ], [ %56, %38 ]
  %41 = shl i64 %39, 1
  %42 = getelementptr inbounds i16, i16* %37, i64 %41
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 2
  %45 = shufflevector <16 x i16> %44, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %46 = shufflevector <16 x i16> %44, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %47 = zext <8 x i16> %45 to <8 x i32>
  %48 = and <8 x i32> %47, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %49 = shl nuw nsw <8 x i32> %47, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %50 = and <8 x i32> %49, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %51 = or <8 x i32> %50, %48
  %52 = zext <8 x i16> %46 to <8 x i32>
  %53 = and <8 x i32> %52, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %54 = shl nuw nsw <8 x i32> %52, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %55 = and <8 x i32> %54, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %56 = or <8 x i32> %55, %53
  %57 = shufflevector <8 x i32> %40, <8 x i32> %56, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %58 = shl nuw nsw <8 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = add nsw <8 x i32> %56, %57
  %60 = add nsw <8 x i32> %59, %58
  %61 = lshr <8 x i32> %60, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %62 = and <8 x i32> %61, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %63 = lshr <8 x i32> %60, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %64 = and <8 x i32> %63, <i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680>
  %65 = or <8 x i32> %64, %62
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds i16, i16* %6, i64 %39
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 2, !alias.scope !113, !noalias !116
  %69 = add i64 %39, 8
  %70 = icmp eq i64 %69, %32
  br i1 %70, label %71, label %38, !llvm.loop !118

71:                                               ; preds = %38
  %72 = icmp eq i64 %32, %15
  %73 = extractelement <8 x i32> %56, i32 7
  br i1 %72, label %74, label %17

74:                                               ; preds = %75, %71, %4
  ret void

75:                                               ; preds = %17, %75
  %76 = phi i64 [ %103, %75 ], [ %18, %17 ]
  %77 = phi i16* [ %86, %75 ], [ %19, %17 ]
  %78 = phi i32 [ %92, %75 ], [ %20, %17 ]
  %79 = getelementptr inbounds i16, i16* %77, i64 1
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 3855
  %83 = shl nuw nsw i32 %81, 12
  %84 = and i32 %83, 252641280
  %85 = or i32 %84, %82
  %86 = getelementptr inbounds i16, i16* %77, i64 2
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = and i32 %88, 3855
  %90 = shl nuw nsw i32 %88, 12
  %91 = and i32 %90, 252641280
  %92 = or i32 %91, %89
  %93 = shl nuw nsw i32 %85, 1
  %94 = add nsw i32 %92, %78
  %95 = add nsw i32 %94, %93
  %96 = lshr i32 %95, 2
  %97 = and i32 %96, 3855
  %98 = lshr i32 %95, 14
  %99 = and i32 %98, 61680
  %100 = or i32 %99, %97
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %6, i64 %76
  store i16 %101, i16* %102, align 2
  %103 = add nuw nsw i64 %76, 1
  %104 = icmp eq i64 %103, %15
  br i1 %104, label %74, label %75, !llvm.loop !119
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = bitcast i8* %0 to i16*
  %9 = load i16, i16* %5, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16, i16* %7, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %115

14:                                               ; preds = %4
  %15 = shl nuw nsw i32 %12, 12
  %16 = and i32 %15, 252641280
  %17 = and i32 %12, 3855
  %18 = or i32 %16, %17
  %19 = shl nuw nsw i32 %10, 12
  %20 = and i32 %19, 252641280
  %21 = and i32 %10, 3855
  %22 = or i32 %20, %21
  %23 = add nuw nsw i32 %18, %22
  %24 = zext i32 %3 to i64
  %25 = icmp ult i32 %3, 8
  br i1 %25, label %26, label %31

26:                                               ; preds = %112, %31, %14
  %27 = phi i64 [ 0, %14 ], [ 0, %31 ], [ %51, %112 ]
  %28 = phi i16* [ %5, %14 ], [ %5, %31 ], [ %53, %112 ]
  %29 = phi i16* [ %7, %14 ], [ %7, %31 ], [ %55, %112 ]
  %30 = phi i32 [ %23, %14 ], [ %23, %31 ], [ %114, %112 ]
  br label %116

31:                                               ; preds = %14
  %32 = shl nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = add i64 %2, 2
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = shl nuw nsw i64 %24, 2
  %37 = add i64 %36, %2
  %38 = add i64 %37, 2
  %39 = getelementptr i8, i8* %1, i64 %38
  %40 = getelementptr i8, i8* %1, i64 2
  %41 = or i64 %36, 2
  %42 = getelementptr i8, i8* %1, i64 %41
  %43 = icmp ugt i8* %39, %0
  %44 = icmp ult i8* %35, %33
  %45 = and i1 %43, %44
  %46 = icmp ugt i8* %42, %0
  %47 = icmp ult i8* %40, %33
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  br i1 %49, label %26, label %50

50:                                               ; preds = %31
  %51 = and i64 %24, 4294967288
  %52 = shl nuw nsw i64 %51, 1
  %53 = getelementptr i16, i16* %5, i64 %52
  %54 = shl nuw nsw i64 %51, 1
  %55 = getelementptr i16, i16* %7, i64 %54
  %56 = insertelement <8 x i32> undef, i32 %23, i32 7
  %57 = getelementptr i8, i8* %1, i64 2
  %58 = bitcast i8* %57 to i16*
  %59 = getelementptr i8, i8* %6, i64 2
  %60 = bitcast i8* %59 to i16*
  br label %61

61:                                               ; preds = %61, %50
  %62 = phi i64 [ 0, %50 ], [ %110, %61 ]
  %63 = phi <8 x i32> [ %56, %50 ], [ %96, %61 ]
  %64 = shl i64 %62, 1
  %65 = shl i64 %62, 1
  %66 = getelementptr inbounds i16, i16* %58, i64 %64
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %71 = zext <8 x i16> %69 to <8 x i32>
  %72 = and <8 x i32> %71, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %73 = shl nuw nsw <8 x i32> %71, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %74 = and <8 x i32> %73, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %75 = or <8 x i32> %74, %72
  %76 = getelementptr inbounds i16, i16* %60, i64 %65
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 2
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %80 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %81 = zext <8 x i16> %79 to <8 x i32>
  %82 = and <8 x i32> %81, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %83 = shl nuw nsw <8 x i32> %81, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %84 = and <8 x i32> %83, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %85 = or <8 x i32> %84, %82
  %86 = zext <8 x i16> %70 to <8 x i32>
  %87 = and <8 x i32> %86, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %88 = shl nuw nsw <8 x i32> %86, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %89 = and <8 x i32> %88, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %90 = or <8 x i32> %89, %87
  %91 = zext <8 x i16> %80 to <8 x i32>
  %92 = and <8 x i32> %91, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %93 = shl nuw nsw <8 x i32> %91, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %94 = and <8 x i32> %93, <i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %95 = or <8 x i32> %94, %92
  %96 = add nuw nsw <8 x i32> %95, %90
  %97 = shufflevector <8 x i32> %63, <8 x i32> %96, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %98 = add nuw nsw <8 x i32> %85, %75
  %99 = shl nuw nsw <8 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nsw <8 x i32> %96, %97
  %101 = add nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %103 = and <8 x i32> %102, <i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855, i32 3855>
  %104 = lshr <8 x i32> %101, <i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15, i32 15>
  %105 = and <8 x i32> %104, <i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680, i32 61680>
  %106 = or <8 x i32> %105, %103
  %107 = trunc <8 x i32> %106 to <8 x i16>
  %108 = getelementptr inbounds i16, i16* %8, i64 %62
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %109, align 2, !alias.scope !120, !noalias !123
  %110 = add i64 %62, 8
  %111 = icmp eq i64 %110, %51
  br i1 %111, label %112, label %61, !llvm.loop !126

112:                                              ; preds = %61
  %113 = icmp eq i64 %51, %24
  %114 = extractelement <8 x i32> %96, i32 7
  br i1 %113, label %115, label %26

115:                                              ; preds = %116, %112, %4
  ret void

116:                                              ; preds = %26, %116
  %117 = phi i64 [ %161, %116 ], [ %27, %26 ]
  %118 = phi i16* [ %135, %116 ], [ %28, %26 ]
  %119 = phi i16* [ %142, %116 ], [ %29, %26 ]
  %120 = phi i32 [ %149, %116 ], [ %30, %26 ]
  %121 = getelementptr inbounds i16, i16* %118, i64 1
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = and i32 %123, 3855
  %125 = shl nuw nsw i32 %123, 12
  %126 = and i32 %125, 252641280
  %127 = or i32 %126, %124
  %128 = getelementptr inbounds i16, i16* %119, i64 1
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = and i32 %130, 3855
  %132 = shl nuw nsw i32 %130, 12
  %133 = and i32 %132, 252641280
  %134 = or i32 %133, %131
  %135 = getelementptr inbounds i16, i16* %118, i64 2
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 3855
  %139 = shl nuw nsw i32 %137, 12
  %140 = and i32 %139, 252641280
  %141 = or i32 %140, %138
  %142 = getelementptr inbounds i16, i16* %119, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = and i32 %144, 3855
  %146 = shl nuw nsw i32 %144, 12
  %147 = and i32 %146, 252641280
  %148 = or i32 %147, %145
  %149 = add nuw nsw i32 %148, %141
  %150 = add nuw nsw i32 %134, %127
  %151 = shl nuw nsw i32 %150, 1
  %152 = add nsw i32 %149, %120
  %153 = add nsw i32 %152, %151
  %154 = lshr i32 %153, 3
  %155 = and i32 %154, 3855
  %156 = lshr i32 %153, 15
  %157 = and i32 %156, 61680
  %158 = or i32 %157, %155
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds i16, i16* %8, i64 %117
  store i16 %159, i16* %160, align 2
  %161 = add nuw nsw i64 %117, 1
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %115, label %116, !llvm.loop !127
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I20ColorTypeFilter_4444EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %0 to i16*
  %11 = load i16, i16* %5, align 2
  %12 = zext i16 %11 to i32
  %13 = load i16, i16* %7, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16, i16* %9, align 2
  %16 = zext i16 %15 to i32
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %160

18:                                               ; preds = %4
  %19 = shl nuw nsw i32 %16, 12
  %20 = and i32 %19, 252641280
  %21 = and i32 %16, 3855
  %22 = or i32 %20, %21
  %23 = shl nuw nsw i32 %12, 12
  %24 = and i32 %23, 252641280
  %25 = and i32 %12, 3855
  %26 = or i32 %24, %25
  %27 = add nuw nsw i32 %22, %26
  %28 = shl nuw nsw i32 %14, 12
  %29 = and i32 %28, 252641280
  %30 = and i32 %14, 3855
  %31 = or i32 %29, %30
  %32 = shl nuw nsw i32 %31, 1
  %33 = add nuw nsw i32 %27, %32
  %34 = zext i32 %3 to i64
  %35 = icmp ult i32 %3, 4
  br i1 %35, label %36, label %42

36:                                               ; preds = %157, %42, %18
  %37 = phi i64 [ 0, %18 ], [ 0, %42 ], [ %72, %157 ]
  %38 = phi i16* [ %5, %18 ], [ %5, %42 ], [ %74, %157 ]
  %39 = phi i16* [ %7, %18 ], [ %7, %42 ], [ %76, %157 ]
  %40 = phi i32 [ %33, %18 ], [ %33, %42 ], [ %159, %157 ]
  %41 = phi i16* [ %9, %18 ], [ %9, %42 ], [ %78, %157 ]
  br label %161

42:                                               ; preds = %18
  %43 = shl nuw nsw i64 %34, 1
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = shl i64 %2, 1
  %46 = add i64 %45, 2
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = shl nuw nsw i64 %34, 2
  %49 = add i64 %48, %45
  %50 = add i64 %49, 2
  %51 = getelementptr i8, i8* %1, i64 %50
  %52 = add i64 %2, 2
  %53 = getelementptr i8, i8* %1, i64 %52
  %54 = add i64 %48, %2
  %55 = add i64 %54, 2
  %56 = getelementptr i8, i8* %1, i64 %55
  %57 = getelementptr i8, i8* %1, i64 2
  %58 = or i64 %48, 2
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = icmp ugt i8* %51, %0
  %61 = icmp ult i8* %47, %44
  %62 = and i1 %60, %61
  %63 = icmp ugt i8* %56, %0
  %64 = icmp ult i8* %53, %44
  %65 = and i1 %63, %64
  %66 = or i1 %62, %65
  %67 = icmp ugt i8* %59, %0
  %68 = icmp ult i8* %57, %44
  %69 = and i1 %67, %68
  %70 = or i1 %66, %69
  br i1 %70, label %36, label %71

71:                                               ; preds = %42
  %72 = and i64 %34, 4294967292
  %73 = shl nuw nsw i64 %72, 1
  %74 = getelementptr i16, i16* %5, i64 %73
  %75 = shl nuw nsw i64 %72, 1
  %76 = getelementptr i16, i16* %7, i64 %75
  %77 = shl nuw nsw i64 %72, 1
  %78 = getelementptr i16, i16* %9, i64 %77
  %79 = insertelement <4 x i32> undef, i32 %33, i32 3
  %80 = getelementptr i8, i8* %1, i64 2
  %81 = bitcast i8* %80 to i16*
  %82 = getelementptr i8, i8* %6, i64 2
  %83 = bitcast i8* %82 to i16*
  %84 = getelementptr i8, i8* %8, i64 2
  %85 = bitcast i8* %84 to i16*
  br label %86

86:                                               ; preds = %86, %71
  %87 = phi i64 [ 0, %71 ], [ %155, %86 ]
  %88 = phi <4 x i32> [ %79, %71 ], [ %143, %86 ]
  %89 = shl i64 %87, 1
  %90 = shl i64 %87, 1
  %91 = shl i64 %87, 1
  %92 = getelementptr inbounds i16, i16* %81, i64 %89
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %96 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %97 = zext <4 x i16> %95 to <4 x i32>
  %98 = and <4 x i32> %97, <i32 3855, i32 3855, i32 3855, i32 3855>
  %99 = shl nuw nsw <4 x i32> %97, <i32 12, i32 12, i32 12, i32 12>
  %100 = and <4 x i32> %99, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %101 = or <4 x i32> %100, %98
  %102 = getelementptr inbounds i16, i16* %83, i64 %90
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %106 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %107 = zext <4 x i16> %105 to <4 x i32>
  %108 = and <4 x i32> %107, <i32 3855, i32 3855, i32 3855, i32 3855>
  %109 = shl nuw nsw <4 x i32> %107, <i32 12, i32 12, i32 12, i32 12>
  %110 = and <4 x i32> %109, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %111 = or <4 x i32> %110, %108
  %112 = getelementptr inbounds i16, i16* %85, i64 %91
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %116 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %117 = zext <4 x i16> %115 to <4 x i32>
  %118 = and <4 x i32> %117, <i32 3855, i32 3855, i32 3855, i32 3855>
  %119 = shl nuw nsw <4 x i32> %117, <i32 12, i32 12, i32 12, i32 12>
  %120 = and <4 x i32> %119, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %121 = or <4 x i32> %120, %118
  %122 = shl nuw nsw <4 x i32> %111, <i32 1, i32 1, i32 1, i32 1>
  %123 = add nuw nsw <4 x i32> %121, %101
  %124 = add nuw nsw <4 x i32> %123, %122
  %125 = shl nuw nsw <4 x i32> %124, <i32 1, i32 1, i32 1, i32 1>
  %126 = zext <4 x i16> %96 to <4 x i32>
  %127 = and <4 x i32> %126, <i32 3855, i32 3855, i32 3855, i32 3855>
  %128 = shl nuw nsw <4 x i32> %126, <i32 12, i32 12, i32 12, i32 12>
  %129 = and <4 x i32> %128, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %130 = or <4 x i32> %129, %127
  %131 = zext <4 x i16> %106 to <4 x i32>
  %132 = and <4 x i32> %131, <i32 3855, i32 3855, i32 3855, i32 3855>
  %133 = shl nuw nsw <4 x i32> %131, <i32 12, i32 12, i32 12, i32 12>
  %134 = and <4 x i32> %133, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %135 = or <4 x i32> %134, %132
  %136 = zext <4 x i16> %116 to <4 x i32>
  %137 = and <4 x i32> %136, <i32 3855, i32 3855, i32 3855, i32 3855>
  %138 = shl nuw nsw <4 x i32> %136, <i32 12, i32 12, i32 12, i32 12>
  %139 = and <4 x i32> %138, <i32 252641280, i32 252641280, i32 252641280, i32 252641280>
  %140 = or <4 x i32> %139, %137
  %141 = shl nuw nsw <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %142 = add nuw nsw <4 x i32> %140, %130
  %143 = add nuw nsw <4 x i32> %142, %141
  %144 = shufflevector <4 x i32> %88, <4 x i32> %143, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %145 = add <4 x i32> %125, %144
  %146 = add <4 x i32> %145, %143
  %147 = lshr <4 x i32> %146, <i32 4, i32 4, i32 4, i32 4>
  %148 = and <4 x i32> %147, <i32 3855, i32 3855, i32 3855, i32 3855>
  %149 = lshr <4 x i32> %146, <i32 16, i32 16, i32 16, i32 16>
  %150 = and <4 x i32> %149, <i32 61680, i32 61680, i32 61680, i32 61680>
  %151 = or <4 x i32> %150, %148
  %152 = trunc <4 x i32> %151 to <4 x i16>
  %153 = getelementptr inbounds i16, i16* %10, i64 %87
  %154 = bitcast i16* %153 to <4 x i16>*
  store <4 x i16> %152, <4 x i16>* %154, align 2, !alias.scope !128, !noalias !131
  %155 = add i64 %87, 4
  %156 = icmp eq i64 %155, %72
  br i1 %156, label %157, label %86, !llvm.loop !135

157:                                              ; preds = %86
  %158 = icmp eq i64 %72, %34
  %159 = extractelement <4 x i32> %143, i32 3
  br i1 %158, label %160, label %36

160:                                              ; preds = %161, %157, %4
  ret void

161:                                              ; preds = %36, %161
  %162 = phi i64 [ %225, %161 ], [ %37, %36 ]
  %163 = phi i16* [ %192, %161 ], [ %38, %36 ]
  %164 = phi i16* [ %199, %161 ], [ %39, %36 ]
  %165 = phi i32 [ %215, %161 ], [ %40, %36 ]
  %166 = phi i16* [ %206, %161 ], [ %41, %36 ]
  %167 = getelementptr inbounds i16, i16* %163, i64 1
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = and i32 %169, 3855
  %171 = shl nuw nsw i32 %169, 12
  %172 = and i32 %171, 252641280
  %173 = or i32 %172, %170
  %174 = getelementptr inbounds i16, i16* %164, i64 1
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = and i32 %176, 3855
  %178 = shl nuw nsw i32 %176, 12
  %179 = and i32 %178, 252641280
  %180 = or i32 %179, %177
  %181 = getelementptr inbounds i16, i16* %166, i64 1
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = and i32 %183, 3855
  %185 = shl nuw nsw i32 %183, 12
  %186 = and i32 %185, 252641280
  %187 = or i32 %186, %184
  %188 = shl nuw nsw i32 %180, 1
  %189 = add nuw nsw i32 %187, %173
  %190 = add nuw nsw i32 %189, %188
  %191 = shl nuw nsw i32 %190, 1
  %192 = getelementptr inbounds i16, i16* %163, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = and i32 %194, 3855
  %196 = shl nuw nsw i32 %194, 12
  %197 = and i32 %196, 252641280
  %198 = or i32 %197, %195
  %199 = getelementptr inbounds i16, i16* %164, i64 2
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = and i32 %201, 3855
  %203 = shl nuw nsw i32 %201, 12
  %204 = and i32 %203, 252641280
  %205 = or i32 %204, %202
  %206 = getelementptr inbounds i16, i16* %166, i64 2
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = and i32 %208, 3855
  %210 = shl nuw nsw i32 %208, 12
  %211 = and i32 %210, 252641280
  %212 = or i32 %211, %209
  %213 = shl nuw nsw i32 %205, 1
  %214 = add nuw nsw i32 %212, %198
  %215 = add nuw nsw i32 %214, %213
  %216 = add i32 %191, %165
  %217 = add i32 %216, %215
  %218 = lshr i32 %217, 4
  %219 = and i32 %218, 3855
  %220 = lshr i32 %217, 16
  %221 = and i32 %220, 61680
  %222 = or i32 %221, %219
  %223 = trunc i32 %222 to i16
  %224 = getelementptr inbounds i16, i16* %10, i64 %162
  store i16 %223, i16* %224, align 2
  %225 = add nuw nsw i64 %162, 1
  %226 = icmp eq i64 %225, %34
  br i1 %226, label %160, label %161, !llvm.loop !136
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %81

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %1, i64 %2
  %8 = zext i32 %3 to i64
  %9 = icmp ult i32 %3, 17
  br i1 %9, label %10, label %36

10:                                               ; preds = %60, %36, %6
  %11 = phi i64 [ 0, %36 ], [ 0, %6 ], [ %55, %60 ]
  %12 = phi i8* [ %1, %36 ], [ %1, %6 ], [ %57, %60 ]
  %13 = phi i8* [ %7, %36 ], [ %7, %6 ], [ %59, %60 ]
  %14 = sub nsw i64 %8, %11
  %15 = xor i64 %11, -1
  %16 = and i64 %14, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %30, label %18

18:                                               ; preds = %10
  %19 = load i8, i8* %12, align 1
  %20 = zext i8 %19 to i32
  %21 = load i8, i8* %13, align 1
  %22 = zext i8 %21 to i32
  %23 = add nuw nsw i32 %22, %20
  %24 = lshr i32 %23, 1
  %25 = trunc i32 %24 to i8
  %26 = getelementptr inbounds i8, i8* %0, i64 %11
  store i8 %25, i8* %26, align 1
  %27 = getelementptr inbounds i8, i8* %12, i64 2
  %28 = getelementptr inbounds i8, i8* %13, i64 2
  %29 = add nuw nsw i64 %11, 1
  br label %30

30:                                               ; preds = %10, %18
  %31 = phi i64 [ %11, %10 ], [ %29, %18 ]
  %32 = phi i8* [ %12, %10 ], [ %27, %18 ]
  %33 = phi i8* [ %13, %10 ], [ %28, %18 ]
  %34 = sub nsw i64 0, %8
  %35 = icmp eq i64 %15, %34
  br i1 %35, label %81, label %82

36:                                               ; preds = %6
  %37 = getelementptr i8, i8* %0, i64 %8
  %38 = shl nuw nsw i64 %8, 1
  %39 = add i64 %38, %2
  %40 = add i64 %39, -1
  %41 = getelementptr i8, i8* %1, i64 %40
  %42 = add nsw i64 %38, -1
  %43 = getelementptr i8, i8* %1, i64 %42
  %44 = icmp ugt i8* %41, %0
  %45 = icmp ult i8* %7, %37
  %46 = and i1 %44, %45
  %47 = icmp ugt i8* %43, %0
  %48 = icmp ugt i8* %37, %1
  %49 = and i1 %47, %48
  %50 = or i1 %46, %49
  br i1 %50, label %10, label %51

51:                                               ; preds = %36
  %52 = and i64 %8, 15
  %53 = icmp eq i64 %52, 0
  %54 = select i1 %53, i64 16, i64 %52
  %55 = sub nsw i64 %8, %54
  %56 = shl nsw i64 %55, 1
  %57 = getelementptr i8, i8* %1, i64 %56
  %58 = shl nsw i64 %55, 1
  %59 = getelementptr i8, i8* %7, i64 %58
  br label %60

60:                                               ; preds = %60, %51
  %61 = phi i64 [ 0, %51 ], [ %79, %60 ]
  %62 = shl i64 %61, 1
  %63 = getelementptr i8, i8* %1, i64 %62
  %64 = shl i64 %61, 1
  %65 = getelementptr i8, i8* %7, i64 %64
  %66 = bitcast i8* %63 to <32 x i8>*
  %67 = load <32 x i8>, <32 x i8>* %66, align 1
  %68 = shufflevector <32 x i8> %67, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %69 = zext <16 x i8> %68 to <16 x i32>
  %70 = bitcast i8* %65 to <32 x i8>*
  %71 = load <32 x i8>, <32 x i8>* %70, align 1
  %72 = shufflevector <32 x i8> %71, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %73 = zext <16 x i8> %72 to <16 x i32>
  %74 = add nuw nsw <16 x i32> %73, %69
  %75 = lshr <16 x i32> %74, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %76 = trunc <16 x i32> %75 to <16 x i8>
  %77 = getelementptr inbounds i8, i8* %0, i64 %61
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %78, align 1, !alias.scope !137, !noalias !140
  %79 = add i64 %61, 16
  %80 = icmp eq i64 %79, %55
  br i1 %80, label %10, label %60, !llvm.loop !143

81:                                               ; preds = %30, %82, %4
  ret void

82:                                               ; preds = %30, %82
  %83 = phi i64 [ %107, %82 ], [ %31, %30 ]
  %84 = phi i8* [ %105, %82 ], [ %32, %30 ]
  %85 = phi i8* [ %106, %82 ], [ %33, %30 ]
  %86 = load i8, i8* %84, align 1
  %87 = zext i8 %86 to i32
  %88 = load i8, i8* %85, align 1
  %89 = zext i8 %88 to i32
  %90 = add nuw nsw i32 %89, %87
  %91 = lshr i32 %90, 1
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %0, i64 %83
  store i8 %92, i8* %93, align 1
  %94 = getelementptr inbounds i8, i8* %84, i64 2
  %95 = getelementptr inbounds i8, i8* %85, i64 2
  %96 = add nuw nsw i64 %83, 1
  %97 = load i8, i8* %94, align 1
  %98 = zext i8 %97 to i32
  %99 = load i8, i8* %95, align 1
  %100 = zext i8 %99 to i32
  %101 = add nuw nsw i32 %100, %98
  %102 = lshr i32 %101, 1
  %103 = trunc i32 %102 to i8
  %104 = getelementptr inbounds i8, i8* %0, i64 %96
  store i8 %103, i8* %104, align 1
  %105 = getelementptr inbounds i8, i8* %84, i64 4
  %106 = getelementptr inbounds i8, i8* %85, i64 4
  %107 = add nuw nsw i64 %83, 2
  %108 = icmp eq i64 %107, %8
  br i1 %108, label %81, label %82, !llvm.loop !144
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %107

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %5, i64 %2
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 17
  br i1 %10, label %11, label %44

11:                                               ; preds = %78, %44, %7
  %12 = phi i64 [ 0, %44 ], [ 0, %7 ], [ %71, %78 ]
  %13 = phi i8* [ %8, %44 ], [ %8, %7 ], [ %73, %78 ]
  %14 = phi i8* [ %5, %44 ], [ %5, %7 ], [ %75, %78 ]
  %15 = phi i8* [ %1, %44 ], [ %1, %7 ], [ %77, %78 ]
  %16 = sub nsw i64 %9, %12
  %17 = xor i64 %12, -1
  %18 = and i64 %16, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %37, label %20

20:                                               ; preds = %11
  %21 = load i8, i8* %15, align 1
  %22 = zext i8 %21 to i32
  %23 = load i8, i8* %14, align 1
  %24 = zext i8 %23 to i32
  %25 = load i8, i8* %13, align 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %24, 1
  %28 = add nuw nsw i32 %26, %22
  %29 = add nuw nsw i32 %28, %27
  %30 = lshr i32 %29, 2
  %31 = trunc i32 %30 to i8
  %32 = getelementptr inbounds i8, i8* %0, i64 %12
  store i8 %31, i8* %32, align 1
  %33 = getelementptr inbounds i8, i8* %15, i64 2
  %34 = getelementptr inbounds i8, i8* %14, i64 2
  %35 = getelementptr inbounds i8, i8* %13, i64 2
  %36 = add nuw nsw i64 %12, 1
  br label %37

37:                                               ; preds = %11, %20
  %38 = phi i64 [ %12, %11 ], [ %36, %20 ]
  %39 = phi i8* [ %13, %11 ], [ %35, %20 ]
  %40 = phi i8* [ %14, %11 ], [ %34, %20 ]
  %41 = phi i8* [ %15, %11 ], [ %33, %20 ]
  %42 = sub nsw i64 0, %9
  %43 = icmp eq i64 %17, %42
  br i1 %43, label %107, label %108

44:                                               ; preds = %7
  %45 = getelementptr i8, i8* %0, i64 %9
  %46 = shl i64 %2, 1
  %47 = shl nuw nsw i64 %9, 1
  %48 = add i64 %46, %47
  %49 = add i64 %48, -1
  %50 = getelementptr i8, i8* %1, i64 %49
  %51 = add i64 %47, %2
  %52 = add i64 %51, -1
  %53 = getelementptr i8, i8* %1, i64 %52
  %54 = add nsw i64 %47, -1
  %55 = getelementptr i8, i8* %1, i64 %54
  %56 = icmp ugt i8* %50, %0
  %57 = icmp ult i8* %8, %45
  %58 = and i1 %56, %57
  %59 = icmp ugt i8* %53, %0
  %60 = icmp ult i8* %5, %45
  %61 = and i1 %59, %60
  %62 = or i1 %58, %61
  %63 = icmp ugt i8* %55, %0
  %64 = icmp ugt i8* %45, %1
  %65 = and i1 %63, %64
  %66 = or i1 %62, %65
  br i1 %66, label %11, label %67

67:                                               ; preds = %44
  %68 = and i64 %9, 15
  %69 = icmp eq i64 %68, 0
  %70 = select i1 %69, i64 16, i64 %68
  %71 = sub nsw i64 %9, %70
  %72 = shl nsw i64 %71, 1
  %73 = getelementptr i8, i8* %8, i64 %72
  %74 = shl nsw i64 %71, 1
  %75 = getelementptr i8, i8* %5, i64 %74
  %76 = shl nsw i64 %71, 1
  %77 = getelementptr i8, i8* %1, i64 %76
  br label %78

78:                                               ; preds = %78, %67
  %79 = phi i64 [ 0, %67 ], [ %105, %78 ]
  %80 = shl i64 %79, 1
  %81 = getelementptr i8, i8* %8, i64 %80
  %82 = shl i64 %79, 1
  %83 = getelementptr i8, i8* %5, i64 %82
  %84 = shl i64 %79, 1
  %85 = getelementptr i8, i8* %1, i64 %84
  %86 = bitcast i8* %85 to <32 x i8>*
  %87 = load <32 x i8>, <32 x i8>* %86, align 1
  %88 = shufflevector <32 x i8> %87, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %89 = zext <16 x i8> %88 to <16 x i32>
  %90 = bitcast i8* %83 to <32 x i8>*
  %91 = load <32 x i8>, <32 x i8>* %90, align 1
  %92 = shufflevector <32 x i8> %91, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %93 = zext <16 x i8> %92 to <16 x i32>
  %94 = bitcast i8* %81 to <32 x i8>*
  %95 = load <32 x i8>, <32 x i8>* %94, align 1
  %96 = shufflevector <32 x i8> %95, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %97 = zext <16 x i8> %96 to <16 x i32>
  %98 = shl nuw nsw <16 x i32> %93, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %99 = add nuw nsw <16 x i32> %97, %89
  %100 = add nuw nsw <16 x i32> %99, %98
  %101 = lshr <16 x i32> %100, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %102 = trunc <16 x i32> %101 to <16 x i8>
  %103 = getelementptr inbounds i8, i8* %0, i64 %79
  %104 = bitcast i8* %103 to <16 x i8>*
  store <16 x i8> %102, <16 x i8>* %104, align 1, !alias.scope !145, !noalias !148
  %105 = add i64 %79, 16
  %106 = icmp eq i64 %105, %71
  br i1 %106, label %11, label %78, !llvm.loop !152

107:                                              ; preds = %37, %108, %4
  ret void

108:                                              ; preds = %37, %108
  %109 = phi i64 [ %144, %108 ], [ %38, %37 ]
  %110 = phi i8* [ %143, %108 ], [ %39, %37 ]
  %111 = phi i8* [ %142, %108 ], [ %40, %37 ]
  %112 = phi i8* [ %141, %108 ], [ %41, %37 ]
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  %115 = load i8, i8* %111, align 1
  %116 = zext i8 %115 to i32
  %117 = load i8, i8* %110, align 1
  %118 = zext i8 %117 to i32
  %119 = shl nuw nsw i32 %116, 1
  %120 = add nuw nsw i32 %118, %114
  %121 = add nuw nsw i32 %120, %119
  %122 = lshr i32 %121, 2
  %123 = trunc i32 %122 to i8
  %124 = getelementptr inbounds i8, i8* %0, i64 %109
  store i8 %123, i8* %124, align 1
  %125 = getelementptr inbounds i8, i8* %112, i64 2
  %126 = getelementptr inbounds i8, i8* %111, i64 2
  %127 = getelementptr inbounds i8, i8* %110, i64 2
  %128 = add nuw nsw i64 %109, 1
  %129 = load i8, i8* %125, align 1
  %130 = zext i8 %129 to i32
  %131 = load i8, i8* %126, align 1
  %132 = zext i8 %131 to i32
  %133 = load i8, i8* %127, align 1
  %134 = zext i8 %133 to i32
  %135 = shl nuw nsw i32 %132, 1
  %136 = add nuw nsw i32 %134, %130
  %137 = add nuw nsw i32 %136, %135
  %138 = lshr i32 %137, 2
  %139 = trunc i32 %138 to i8
  %140 = getelementptr inbounds i8, i8* %0, i64 %128
  store i8 %139, i8* %140, align 1
  %141 = getelementptr inbounds i8, i8* %112, i64 4
  %142 = getelementptr inbounds i8, i8* %111, i64 4
  %143 = getelementptr inbounds i8, i8* %110, i64 4
  %144 = add nuw nsw i64 %109, 2
  %145 = icmp eq i64 %144, %9
  br i1 %145, label %107, label %108, !llvm.loop !153
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %102

6:                                                ; preds = %4
  %7 = zext i32 %3 to i64
  %8 = icmp ult i32 %3, 16
  br i1 %8, label %9, label %32

9:                                                ; preds = %100, %32, %6
  %10 = phi i64 [ 0, %32 ], [ 0, %6 ], [ %40, %100 ]
  %11 = phi i8* [ %1, %32 ], [ %1, %6 ], [ %42, %100 ]
  %12 = xor i64 %10, -1
  %13 = and i64 %7, 1
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %9
  %16 = load i8, i8* %11, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8, i8* %11, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = add nuw nsw i32 %20, %17
  %22 = lshr i32 %21, 1
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds i8, i8* %0, i64 %10
  store i8 %23, i8* %24, align 1
  %25 = getelementptr inbounds i8, i8* %11, i64 2
  %26 = or i64 %10, 1
  br label %27

27:                                               ; preds = %9, %15
  %28 = phi i64 [ %10, %9 ], [ %26, %15 ]
  %29 = phi i8* [ %11, %9 ], [ %25, %15 ]
  %30 = sub nsw i64 0, %7
  %31 = icmp eq i64 %12, %30
  br i1 %31, label %102, label %103

32:                                               ; preds = %6
  %33 = getelementptr i8, i8* %0, i64 %7
  %34 = shl nuw nsw i64 %7, 1
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = icmp ugt i8* %35, %0
  %37 = icmp ugt i8* %33, %1
  %38 = and i1 %36, %37
  br i1 %38, label %9, label %39

39:                                               ; preds = %32
  %40 = and i64 %7, 4294967280
  %41 = shl nuw nsw i64 %40, 1
  %42 = getelementptr i8, i8* %1, i64 %41
  %43 = add nsw i64 %40, -16
  %44 = lshr exact i64 %43, 4
  %45 = add nuw nsw i64 %44, 1
  %46 = and i64 %45, 1
  %47 = icmp eq i64 %43, 0
  br i1 %47, label %83, label %48

48:                                               ; preds = %39
  %49 = sub nuw nsw i64 %45, %46
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %80, %50 ]
  %52 = phi i64 [ %49, %48 ], [ %81, %50 ]
  %53 = shl i64 %51, 1
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = bitcast i8* %54 to <32 x i8>*
  %56 = load <32 x i8>, <32 x i8>* %55, align 1
  %57 = shufflevector <32 x i8> %56, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %58 = shufflevector <32 x i8> %56, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %59 = zext <16 x i8> %57 to <16 x i32>
  %60 = zext <16 x i8> %58 to <16 x i32>
  %61 = add nuw nsw <16 x i32> %60, %59
  %62 = lshr <16 x i32> %61, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %63 = trunc <16 x i32> %62 to <16 x i8>
  %64 = getelementptr inbounds i8, i8* %0, i64 %51
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %63, <16 x i8>* %65, align 1, !alias.scope !154, !noalias !157
  %66 = or i64 %51, 16
  %67 = shl i64 %66, 1
  %68 = getelementptr i8, i8* %1, i64 %67
  %69 = bitcast i8* %68 to <32 x i8>*
  %70 = load <32 x i8>, <32 x i8>* %69, align 1
  %71 = shufflevector <32 x i8> %70, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %72 = shufflevector <32 x i8> %70, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %73 = zext <16 x i8> %71 to <16 x i32>
  %74 = zext <16 x i8> %72 to <16 x i32>
  %75 = add nuw nsw <16 x i32> %74, %73
  %76 = lshr <16 x i32> %75, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %77 = trunc <16 x i32> %76 to <16 x i8>
  %78 = getelementptr inbounds i8, i8* %0, i64 %66
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %77, <16 x i8>* %79, align 1, !alias.scope !154, !noalias !157
  %80 = add i64 %51, 32
  %81 = add i64 %52, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %50, !llvm.loop !159

83:                                               ; preds = %50, %39
  %84 = phi i64 [ 0, %39 ], [ %80, %50 ]
  %85 = icmp eq i64 %46, 0
  br i1 %85, label %100, label %86

86:                                               ; preds = %83
  %87 = shl i64 %84, 1
  %88 = getelementptr i8, i8* %1, i64 %87
  %89 = bitcast i8* %88 to <32 x i8>*
  %90 = load <32 x i8>, <32 x i8>* %89, align 1
  %91 = shufflevector <32 x i8> %90, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %92 = shufflevector <32 x i8> %90, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %93 = zext <16 x i8> %91 to <16 x i32>
  %94 = zext <16 x i8> %92 to <16 x i32>
  %95 = add nuw nsw <16 x i32> %94, %93
  %96 = lshr <16 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %97 = trunc <16 x i32> %96 to <16 x i8>
  %98 = getelementptr inbounds i8, i8* %0, i64 %84
  %99 = bitcast i8* %98 to <16 x i8>*
  store <16 x i8> %97, <16 x i8>* %99, align 1, !alias.scope !154, !noalias !157
  br label %100

100:                                              ; preds = %83, %86
  %101 = icmp eq i64 %40, %7
  br i1 %101, label %102, label %9

102:                                              ; preds = %27, %103, %100, %4
  ret void

103:                                              ; preds = %27, %103
  %104 = phi i64 [ %127, %103 ], [ %28, %27 ]
  %105 = phi i8* [ %126, %103 ], [ %29, %27 ]
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = getelementptr inbounds i8, i8* %105, i64 1
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = add nuw nsw i32 %110, %107
  %112 = lshr i32 %111, 1
  %113 = trunc i32 %112 to i8
  %114 = getelementptr inbounds i8, i8* %0, i64 %104
  store i8 %113, i8* %114, align 1
  %115 = getelementptr inbounds i8, i8* %105, i64 2
  %116 = add nuw nsw i64 %104, 1
  %117 = load i8, i8* %115, align 1
  %118 = zext i8 %117 to i32
  %119 = getelementptr inbounds i8, i8* %105, i64 3
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = add nuw nsw i32 %121, %118
  %123 = lshr i32 %122, 1
  %124 = trunc i32 %123 to i8
  %125 = getelementptr inbounds i8, i8* %0, i64 %116
  store i8 %124, i8* %125, align 1
  %126 = getelementptr inbounds i8, i8* %105, i64 4
  %127 = add nuw nsw i64 %104, 2
  %128 = icmp eq i64 %127, %7
  br i1 %128, label %102, label %103, !llvm.loop !160
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %35

6:                                                ; preds = %4
  %7 = getelementptr inbounds i8, i8* %1, i64 %2
  %8 = zext i32 %3 to i64
  %9 = and i64 %8, 1
  %10 = icmp eq i32 %3, 1
  br i1 %10, label %13, label %11

11:                                               ; preds = %6
  %12 = sub nsw i64 %8, %9
  br label %36

13:                                               ; preds = %36, %6
  %14 = phi i64 [ 0, %6 ], [ %78, %36 ]
  %15 = phi i8* [ %1, %6 ], [ %76, %36 ]
  %16 = phi i8* [ %7, %6 ], [ %77, %36 ]
  %17 = icmp eq i64 %9, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %13
  %19 = load i8, i8* %15, align 1
  %20 = zext i8 %19 to i32
  %21 = getelementptr inbounds i8, i8* %15, i64 1
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = load i8, i8* %16, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %16, i64 1
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = add nuw nsw i32 %23, %20
  %30 = add nuw nsw i32 %29, %25
  %31 = add nuw nsw i32 %30, %28
  %32 = lshr i32 %31, 2
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds i8, i8* %0, i64 %14
  store i8 %33, i8* %34, align 1
  br label %35

35:                                               ; preds = %18, %13, %4
  ret void

36:                                               ; preds = %36, %11
  %37 = phi i64 [ 0, %11 ], [ %78, %36 ]
  %38 = phi i8* [ %1, %11 ], [ %76, %36 ]
  %39 = phi i8* [ %7, %11 ], [ %77, %36 ]
  %40 = phi i64 [ %12, %11 ], [ %79, %36 ]
  %41 = load i8, i8* %38, align 1
  %42 = zext i8 %41 to i32
  %43 = getelementptr inbounds i8, i8* %38, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = load i8, i8* %39, align 1
  %47 = zext i8 %46 to i32
  %48 = getelementptr inbounds i8, i8* %39, i64 1
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i32
  %51 = add nuw nsw i32 %45, %42
  %52 = add nuw nsw i32 %51, %47
  %53 = add nuw nsw i32 %52, %50
  %54 = lshr i32 %53, 2
  %55 = trunc i32 %54 to i8
  %56 = getelementptr inbounds i8, i8* %0, i64 %37
  store i8 %55, i8* %56, align 1
  %57 = getelementptr inbounds i8, i8* %38, i64 2
  %58 = getelementptr inbounds i8, i8* %39, i64 2
  %59 = or i64 %37, 1
  %60 = load i8, i8* %57, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds i8, i8* %38, i64 3
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = load i8, i8* %58, align 1
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds i8, i8* %39, i64 3
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = add nuw nsw i32 %64, %61
  %71 = add nuw nsw i32 %70, %66
  %72 = add nuw nsw i32 %71, %69
  %73 = lshr i32 %72, 2
  %74 = trunc i32 %73 to i8
  %75 = getelementptr inbounds i8, i8* %0, i64 %59
  store i8 %74, i8* %75, align 1
  %76 = getelementptr inbounds i8, i8* %38, i64 4
  %77 = getelementptr inbounds i8, i8* %39, i64 4
  %78 = add nuw nsw i64 %37, 2
  %79 = add i64 %40, -2
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %13, label %36
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %5, i64 %2
  %9 = zext i32 %3 to i64
  br label %11

10:                                               ; preds = %11, %4
  ret void

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %43, %11 ]
  %13 = phi i8* [ %8, %7 ], [ %42, %11 ]
  %14 = phi i8* [ %5, %7 ], [ %41, %11 ]
  %15 = phi i8* [ %1, %7 ], [ %40, %11 ]
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = getelementptr inbounds i8, i8* %15, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = load i8, i8* %14, align 1
  %22 = zext i8 %21 to i32
  %23 = getelementptr inbounds i8, i8* %14, i64 1
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = load i8, i8* %13, align 1
  %27 = zext i8 %26 to i32
  %28 = getelementptr inbounds i8, i8* %13, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = add nuw nsw i32 %25, %22
  %32 = shl nuw nsw i32 %31, 1
  %33 = add nuw nsw i32 %20, %17
  %34 = add nuw nsw i32 %33, %27
  %35 = add nuw nsw i32 %34, %30
  %36 = add nuw nsw i32 %35, %32
  %37 = lshr i32 %36, 3
  %38 = trunc i32 %37 to i8
  %39 = getelementptr inbounds i8, i8* %0, i64 %12
  store i8 %38, i8* %39, align 1
  %40 = getelementptr inbounds i8, i8* %15, i64 2
  %41 = getelementptr inbounds i8, i8* %14, i64 2
  %42 = getelementptr inbounds i8, i8* %13, i64 2
  %43 = add nuw nsw i64 %12, 1
  %44 = icmp eq i64 %43, %9
  br i1 %44, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = icmp sgt i32 %3, 0
  br i1 %5, label %6, label %77

6:                                                ; preds = %4
  %7 = load i8, i8* %1, align 1
  %8 = zext i8 %7 to i32
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 16
  br i1 %10, label %11, label %38

11:                                               ; preds = %74, %38, %6
  %12 = phi i64 [ 0, %6 ], [ 0, %38 ], [ %48, %74 ]
  %13 = phi i8* [ %1, %6 ], [ %1, %38 ], [ %50, %74 ]
  %14 = phi i32 [ %8, %6 ], [ %8, %38 ], [ %76, %74 ]
  %15 = xor i64 %12, -1
  %16 = and i64 %9, 1
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %32, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %13, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %13, i64 2
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = shl nuw nsw i32 %21, 1
  %26 = add nuw nsw i32 %14, %24
  %27 = add nuw nsw i32 %26, %25
  %28 = lshr i32 %27, 2
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds i8, i8* %0, i64 %12
  store i8 %29, i8* %30, align 1
  %31 = or i64 %12, 1
  br label %32

32:                                               ; preds = %11, %18
  %33 = phi i64 [ %12, %11 ], [ %31, %18 ]
  %34 = phi i8* [ %13, %11 ], [ %22, %18 ]
  %35 = phi i32 [ %14, %11 ], [ %24, %18 ]
  %36 = sub nsw i64 0, %9
  %37 = icmp eq i64 %15, %36
  br i1 %37, label %77, label %78

38:                                               ; preds = %6
  %39 = getelementptr i8, i8* %0, i64 %9
  %40 = getelementptr i8, i8* %1, i64 1
  %41 = shl nuw nsw i64 %9, 1
  %42 = or i64 %41, 1
  %43 = getelementptr i8, i8* %1, i64 %42
  %44 = icmp ugt i8* %43, %0
  %45 = icmp ult i8* %40, %39
  %46 = and i1 %44, %45
  br i1 %46, label %11, label %47

47:                                               ; preds = %38
  %48 = and i64 %9, 4294967280
  %49 = shl nuw nsw i64 %48, 1
  %50 = getelementptr i8, i8* %1, i64 %49
  %51 = insertelement <16 x i32> undef, i32 %8, i32 15
  %52 = getelementptr i8, i8* %1, i64 1
  br label %53

53:                                               ; preds = %53, %47
  %54 = phi i64 [ 0, %47 ], [ %72, %53 ]
  %55 = phi <16 x i32> [ %51, %47 ], [ %63, %53 ]
  %56 = shl i64 %54, 1
  %57 = getelementptr inbounds i8, i8* %52, i64 %56
  %58 = bitcast i8* %57 to <32 x i8>*
  %59 = load <32 x i8>, <32 x i8>* %58, align 1
  %60 = shufflevector <32 x i8> %59, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %61 = shufflevector <32 x i8> %59, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %62 = zext <16 x i8> %60 to <16 x i32>
  %63 = zext <16 x i8> %61 to <16 x i32>
  %64 = shufflevector <16 x i32> %55, <16 x i32> %63, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %65 = shl nuw nsw <16 x i32> %62, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = add nuw nsw <16 x i32> %64, %63
  %67 = add nuw nsw <16 x i32> %66, %65
  %68 = lshr <16 x i32> %67, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %69 = trunc <16 x i32> %68 to <16 x i8>
  %70 = getelementptr inbounds i8, i8* %0, i64 %54
  %71 = bitcast i8* %70 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %71, align 1, !alias.scope !161, !noalias !164
  %72 = add i64 %54, 16
  %73 = icmp eq i64 %72, %48
  br i1 %73, label %74, label %53, !llvm.loop !166

74:                                               ; preds = %53
  %75 = icmp eq i64 %48, %9
  %76 = extractelement <16 x i32> %63, i32 15
  br i1 %75, label %77, label %11

77:                                               ; preds = %32, %78, %74, %4
  ret void

78:                                               ; preds = %32, %78
  %79 = phi i64 [ %107, %78 ], [ %33, %32 ]
  %80 = phi i8* [ %98, %78 ], [ %34, %32 ]
  %81 = phi i32 [ %100, %78 ], [ %35, %32 ]
  %82 = getelementptr inbounds i8, i8* %80, i64 1
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i32
  %85 = getelementptr inbounds i8, i8* %80, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = shl nuw nsw i32 %84, 1
  %89 = add nuw nsw i32 %81, %87
  %90 = add nuw nsw i32 %89, %88
  %91 = lshr i32 %90, 2
  %92 = trunc i32 %91 to i8
  %93 = getelementptr inbounds i8, i8* %0, i64 %79
  store i8 %92, i8* %93, align 1
  %94 = add nuw nsw i64 %79, 1
  %95 = getelementptr inbounds i8, i8* %80, i64 3
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = getelementptr inbounds i8, i8* %80, i64 4
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = shl nuw nsw i32 %97, 1
  %102 = add nuw nsw i32 %87, %100
  %103 = add nuw nsw i32 %102, %101
  %104 = lshr i32 %103, 2
  %105 = trunc i32 %104 to i8
  %106 = getelementptr inbounds i8, i8* %0, i64 %94
  store i8 %105, i8* %106, align 1
  %107 = add nuw nsw i64 %79, 2
  %108 = icmp eq i64 %107, %9
  br i1 %108, label %77, label %78, !llvm.loop !167
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %113

7:                                                ; preds = %4
  %8 = load i8, i8* %5, align 1
  %9 = zext i8 %8 to i32
  %10 = load i8, i8* %1, align 1
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %9, %11
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 16
  br i1 %14, label %15, label %52

15:                                               ; preds = %110, %52, %7
  %16 = phi i64 [ 0, %7 ], [ 0, %52 ], [ %71, %110 ]
  %17 = phi i8* [ %1, %7 ], [ %1, %52 ], [ %73, %110 ]
  %18 = phi i8* [ %5, %7 ], [ %5, %52 ], [ %75, %110 ]
  %19 = phi i32 [ %12, %7 ], [ %12, %52 ], [ %112, %110 ]
  %20 = xor i64 %16, -1
  %21 = and i64 %13, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %45, label %23

23:                                               ; preds = %15
  %24 = getelementptr inbounds i8, i8* %17, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = getelementptr inbounds i8, i8* %18, i64 1
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = getelementptr inbounds i8, i8* %17, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i32
  %33 = getelementptr inbounds i8, i8* %18, i64 2
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = add nuw nsw i32 %35, %32
  %37 = add nuw nsw i32 %29, %26
  %38 = shl nuw nsw i32 %37, 1
  %39 = add nuw nsw i32 %36, %19
  %40 = add nuw nsw i32 %39, %38
  %41 = lshr i32 %40, 3
  %42 = trunc i32 %41 to i8
  %43 = getelementptr inbounds i8, i8* %0, i64 %16
  store i8 %42, i8* %43, align 1
  %44 = or i64 %16, 1
  br label %45

45:                                               ; preds = %15, %23
  %46 = phi i64 [ %16, %15 ], [ %44, %23 ]
  %47 = phi i8* [ %17, %15 ], [ %30, %23 ]
  %48 = phi i8* [ %18, %15 ], [ %33, %23 ]
  %49 = phi i32 [ %19, %15 ], [ %36, %23 ]
  %50 = sub nsw i64 0, %13
  %51 = icmp eq i64 %20, %50
  br i1 %51, label %113, label %114

52:                                               ; preds = %7
  %53 = getelementptr i8, i8* %0, i64 %13
  %54 = add i64 %2, 1
  %55 = getelementptr i8, i8* %1, i64 %54
  %56 = shl nuw nsw i64 %13, 1
  %57 = add i64 %56, %2
  %58 = add i64 %57, 1
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = getelementptr i8, i8* %1, i64 1
  %61 = or i64 %56, 1
  %62 = getelementptr i8, i8* %1, i64 %61
  %63 = icmp ugt i8* %59, %0
  %64 = icmp ult i8* %55, %53
  %65 = and i1 %63, %64
  %66 = icmp ugt i8* %62, %0
  %67 = icmp ult i8* %60, %53
  %68 = and i1 %66, %67
  %69 = or i1 %65, %68
  br i1 %69, label %15, label %70

70:                                               ; preds = %52
  %71 = and i64 %13, 4294967280
  %72 = shl nuw nsw i64 %71, 1
  %73 = getelementptr i8, i8* %1, i64 %72
  %74 = shl nuw nsw i64 %71, 1
  %75 = getelementptr i8, i8* %5, i64 %74
  %76 = insertelement <16 x i32> undef, i32 %12, i32 15
  %77 = getelementptr i8, i8* %1, i64 1
  %78 = getelementptr i8, i8* %5, i64 1
  br label %79

79:                                               ; preds = %79, %70
  %80 = phi i64 [ 0, %70 ], [ %108, %79 ]
  %81 = phi <16 x i32> [ %76, %70 ], [ %98, %79 ]
  %82 = shl i64 %80, 1
  %83 = shl i64 %80, 1
  %84 = getelementptr inbounds i8, i8* %77, i64 %82
  %85 = bitcast i8* %84 to <32 x i8>*
  %86 = load <32 x i8>, <32 x i8>* %85, align 1
  %87 = shufflevector <32 x i8> %86, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %88 = shufflevector <32 x i8> %86, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %89 = zext <16 x i8> %87 to <16 x i32>
  %90 = getelementptr inbounds i8, i8* %78, i64 %83
  %91 = bitcast i8* %90 to <32 x i8>*
  %92 = load <32 x i8>, <32 x i8>* %91, align 1
  %93 = shufflevector <32 x i8> %92, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %94 = shufflevector <32 x i8> %92, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %95 = zext <16 x i8> %93 to <16 x i32>
  %96 = zext <16 x i8> %88 to <16 x i32>
  %97 = zext <16 x i8> %94 to <16 x i32>
  %98 = add nuw nsw <16 x i32> %97, %96
  %99 = shufflevector <16 x i32> %81, <16 x i32> %98, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %100 = add nuw nsw <16 x i32> %95, %89
  %101 = shl nuw nsw <16 x i32> %100, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %102 = add nuw nsw <16 x i32> %98, %99
  %103 = add nuw nsw <16 x i32> %102, %101
  %104 = lshr <16 x i32> %103, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %105 = trunc <16 x i32> %104 to <16 x i8>
  %106 = getelementptr inbounds i8, i8* %0, i64 %80
  %107 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %105, <16 x i8>* %107, align 1, !alias.scope !168, !noalias !171
  %108 = add i64 %80, 16
  %109 = icmp eq i64 %108, %71
  br i1 %109, label %110, label %79, !llvm.loop !174

110:                                              ; preds = %79
  %111 = icmp eq i64 %71, %13
  %112 = extractelement <16 x i32> %98, i32 15
  br i1 %111, label %113, label %15

113:                                              ; preds = %45, %114, %110, %4
  ret void

114:                                              ; preds = %45, %114
  %115 = phi i64 [ %160, %114 ], [ %46, %45 ]
  %116 = phi i8* [ %146, %114 ], [ %47, %45 ]
  %117 = phi i8* [ %149, %114 ], [ %48, %45 ]
  %118 = phi i32 [ %152, %114 ], [ %49, %45 ]
  %119 = getelementptr inbounds i8, i8* %116, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %117, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %116, i64 2
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = getelementptr inbounds i8, i8* %117, i64 2
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i32
  %131 = add nuw nsw i32 %130, %127
  %132 = add nuw nsw i32 %124, %121
  %133 = shl nuw nsw i32 %132, 1
  %134 = add nuw nsw i32 %131, %118
  %135 = add nuw nsw i32 %134, %133
  %136 = lshr i32 %135, 3
  %137 = trunc i32 %136 to i8
  %138 = getelementptr inbounds i8, i8* %0, i64 %115
  store i8 %137, i8* %138, align 1
  %139 = add nuw nsw i64 %115, 1
  %140 = getelementptr inbounds i8, i8* %116, i64 3
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = getelementptr inbounds i8, i8* %117, i64 3
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = getelementptr inbounds i8, i8* %116, i64 4
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i32
  %149 = getelementptr inbounds i8, i8* %117, i64 4
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = add nuw nsw i32 %151, %148
  %153 = add nuw nsw i32 %145, %142
  %154 = shl nuw nsw i32 %153, 1
  %155 = add nuw nsw i32 %152, %131
  %156 = add nuw nsw i32 %155, %154
  %157 = lshr i32 %156, 3
  %158 = trunc i32 %157 to i8
  %159 = getelementptr inbounds i8, i8* %0, i64 %139
  store i8 %158, i8* %159, align 1
  %160 = add nuw nsw i64 %115, 2
  %161 = icmp eq i64 %160, %13
  br i1 %161, label %113, label %114, !llvm.loop !175
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I17ColorTypeFilter_8EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = getelementptr inbounds i8, i8* %5, i64 %2
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %112

8:                                                ; preds = %4
  %9 = load i8, i8* %6, align 1
  %10 = zext i8 %9 to i32
  %11 = load i8, i8* %1, align 1
  %12 = zext i8 %11 to i32
  %13 = add nuw nsw i32 %10, %12
  %14 = load i8, i8* %5, align 1
  %15 = zext i8 %14 to i32
  %16 = shl nuw nsw i32 %15, 1
  %17 = add nuw nsw i32 %13, %16
  %18 = zext i32 %3 to i64
  %19 = icmp ult i32 %3, 16
  br i1 %19, label %20, label %26

20:                                               ; preds = %109, %26, %8
  %21 = phi i64 [ 0, %8 ], [ 0, %26 ], [ %55, %109 ]
  %22 = phi i8* [ %1, %8 ], [ %1, %26 ], [ %57, %109 ]
  %23 = phi i8* [ %5, %8 ], [ %5, %26 ], [ %59, %109 ]
  %24 = phi i32 [ %17, %8 ], [ %17, %26 ], [ %111, %109 ]
  %25 = phi i8* [ %6, %8 ], [ %6, %26 ], [ %61, %109 ]
  br label %113

26:                                               ; preds = %8
  %27 = getelementptr i8, i8* %0, i64 %18
  %28 = shl i64 %2, 1
  %29 = or i64 %28, 1
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = shl nuw nsw i64 %18, 1
  %32 = add i64 %28, %31
  %33 = or i64 %32, 1
  %34 = getelementptr i8, i8* %1, i64 %33
  %35 = add i64 %2, 1
  %36 = getelementptr i8, i8* %1, i64 %35
  %37 = add i64 %31, %2
  %38 = add i64 %37, 1
  %39 = getelementptr i8, i8* %1, i64 %38
  %40 = getelementptr i8, i8* %1, i64 1
  %41 = or i64 %31, 1
  %42 = getelementptr i8, i8* %1, i64 %41
  %43 = icmp ugt i8* %34, %0
  %44 = icmp ult i8* %30, %27
  %45 = and i1 %43, %44
  %46 = icmp ugt i8* %39, %0
  %47 = icmp ult i8* %36, %27
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  %50 = icmp ugt i8* %42, %0
  %51 = icmp ult i8* %40, %27
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  br i1 %53, label %20, label %54

54:                                               ; preds = %26
  %55 = and i64 %18, 4294967280
  %56 = shl nuw nsw i64 %55, 1
  %57 = getelementptr i8, i8* %1, i64 %56
  %58 = shl nuw nsw i64 %55, 1
  %59 = getelementptr i8, i8* %5, i64 %58
  %60 = shl nuw nsw i64 %55, 1
  %61 = getelementptr i8, i8* %6, i64 %60
  %62 = insertelement <16 x i32> undef, i32 %17, i32 15
  %63 = getelementptr i8, i8* %1, i64 1
  %64 = getelementptr i8, i8* %5, i64 1
  %65 = getelementptr i8, i8* %6, i64 1
  br label %66

66:                                               ; preds = %66, %54
  %67 = phi i64 [ 0, %54 ], [ %107, %66 ]
  %68 = phi <16 x i32> [ %62, %54 ], [ %99, %66 ]
  %69 = shl i64 %67, 1
  %70 = shl i64 %67, 1
  %71 = shl i64 %67, 1
  %72 = getelementptr inbounds i8, i8* %63, i64 %69
  %73 = bitcast i8* %72 to <32 x i8>*
  %74 = load <32 x i8>, <32 x i8>* %73, align 1
  %75 = shufflevector <32 x i8> %74, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %76 = shufflevector <32 x i8> %74, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %77 = zext <16 x i8> %75 to <16 x i32>
  %78 = getelementptr inbounds i8, i8* %64, i64 %70
  %79 = bitcast i8* %78 to <32 x i8>*
  %80 = load <32 x i8>, <32 x i8>* %79, align 1
  %81 = shufflevector <32 x i8> %80, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %82 = shufflevector <32 x i8> %80, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %83 = zext <16 x i8> %81 to <16 x i32>
  %84 = getelementptr inbounds i8, i8* %65, i64 %71
  %85 = bitcast i8* %84 to <32 x i8>*
  %86 = load <32 x i8>, <32 x i8>* %85, align 1
  %87 = shufflevector <32 x i8> %86, <32 x i8> undef, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  %88 = shufflevector <32 x i8> %86, <32 x i8> undef, <16 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15, i32 17, i32 19, i32 21, i32 23, i32 25, i32 27, i32 29, i32 31>
  %89 = zext <16 x i8> %87 to <16 x i32>
  %90 = shl nuw nsw <16 x i32> %83, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %91 = add nuw nsw <16 x i32> %89, %77
  %92 = add nuw nsw <16 x i32> %91, %90
  %93 = shl nuw nsw <16 x i32> %92, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %94 = zext <16 x i8> %76 to <16 x i32>
  %95 = zext <16 x i8> %82 to <16 x i32>
  %96 = zext <16 x i8> %88 to <16 x i32>
  %97 = shl nuw nsw <16 x i32> %95, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %98 = add nuw nsw <16 x i32> %96, %94
  %99 = add nuw nsw <16 x i32> %98, %97
  %100 = shufflevector <16 x i32> %68, <16 x i32> %99, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %101 = add nuw nsw <16 x i32> %93, %100
  %102 = add nuw nsw <16 x i32> %101, %99
  %103 = lshr <16 x i32> %102, <i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4>
  %104 = trunc <16 x i32> %103 to <16 x i8>
  %105 = getelementptr inbounds i8, i8* %0, i64 %67
  %106 = bitcast i8* %105 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %106, align 1, !alias.scope !176, !noalias !179
  %107 = add i64 %67, 16
  %108 = icmp eq i64 %107, %55
  br i1 %108, label %109, label %66, !llvm.loop !183

109:                                              ; preds = %66
  %110 = icmp eq i64 %55, %18
  %111 = extractelement <16 x i32> %99, i32 15
  br i1 %110, label %112, label %20

112:                                              ; preds = %113, %109, %4
  ret void

113:                                              ; preds = %20, %113
  %114 = phi i64 [ %149, %113 ], [ %21, %20 ]
  %115 = phi i8* [ %132, %113 ], [ %22, %20 ]
  %116 = phi i8* [ %135, %113 ], [ %23, %20 ]
  %117 = phi i32 [ %143, %113 ], [ %24, %20 ]
  %118 = phi i8* [ %138, %113 ], [ %25, %20 ]
  %119 = getelementptr inbounds i8, i8* %115, i64 1
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i32
  %122 = getelementptr inbounds i8, i8* %116, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = getelementptr inbounds i8, i8* %118, i64 1
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = shl nuw nsw i32 %124, 1
  %129 = add nuw nsw i32 %127, %121
  %130 = add nuw nsw i32 %129, %128
  %131 = shl nuw nsw i32 %130, 1
  %132 = getelementptr inbounds i8, i8* %115, i64 2
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = getelementptr inbounds i8, i8* %116, i64 2
  %136 = load i8, i8* %135, align 1
  %137 = zext i8 %136 to i32
  %138 = getelementptr inbounds i8, i8* %118, i64 2
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = shl nuw nsw i32 %137, 1
  %142 = add nuw nsw i32 %140, %134
  %143 = add nuw nsw i32 %142, %141
  %144 = add nuw nsw i32 %131, %117
  %145 = add nuw nsw i32 %144, %143
  %146 = lshr i32 %145, 4
  %147 = trunc i32 %146 to i8
  %148 = getelementptr inbounds i8, i8* %0, i64 %114
  store i8 %147, i8* %148, align 1
  %149 = add nuw nsw i64 %114, 1
  %150 = icmp eq i64 %149, %18
  br i1 %150, label %112, label %113, !llvm.loop !184
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %1 to i64*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %63, %13 ]
  %15 = phi i64* [ %9, %7 ], [ %62, %13 ]
  %16 = phi i64* [ %10, %7 ], [ %61, %13 ]
  %17 = load i64, i64* %16, align 8
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <8 x i16>
  %20 = shufflevector <8 x i16> %19, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = bitcast <8 x i16> %20 to <4 x i32>
  %22 = and <4 x i32> %21, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %23 = icmp sgt <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %24 = shl <4 x i32> %22, <i32 13, i32 13, i32 13, i32 13>
  %25 = add <4 x i32> %24, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %26 = shl <4 x i32> %21, <i32 16, i32 16, i32 16, i32 16>
  %27 = and <4 x i32> %26, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = select <4 x i1> %23, <4 x i32> %25, <4 x i32> zeroinitializer
  %29 = or <4 x i32> %28, %27
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = load i64, i64* %15, align 8
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = bitcast <8 x i16> %34 to <4 x i32>
  %36 = and <4 x i32> %35, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %37 = icmp sgt <4 x i32> %36, <i32 1023, i32 1023, i32 1023, i32 1023>
  %38 = shl <4 x i32> %36, <i32 13, i32 13, i32 13, i32 13>
  %39 = add <4 x i32> %38, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %40 = shl <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %41 = and <4 x i32> %40, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %42 = select <4 x i1> %37, <4 x i32> %39, <4 x i32> zeroinitializer
  %43 = or <4 x i32> %42, %41
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fadd <4 x float> %30, %44
  %46 = fmul <4 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = and <4 x i32> %47, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %49 = icmp ugt <4 x i32> %48, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %50 = add <4 x i32> %47, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %51 = lshr <4 x i32> %50, <i32 13, i32 13, i32 13, i32 13>
  %52 = shl <4 x i32> %51, <i32 16, i32 16, i32 16, i32 16>
  %53 = select <4 x i1> %49, <4 x i32> %52, <4 x i32> zeroinitializer
  %54 = and <4 x i32> %47, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %55 = or <4 x i32> %53, %54
  %56 = ashr exact <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> undef) #17
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = getelementptr inbounds i64, i64* %5, i64 %14
  store i64 %59, i64* %60, align 8
  %61 = getelementptr inbounds i64, i64* %16, i64 2
  %62 = getelementptr inbounds i64, i64* %15, i64 2
  %63 = add nuw nsw i64 %14, 1
  %64 = icmp eq i64 %63, %11
  br i1 %64, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i64*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %5 to i64*
  %12 = bitcast i8* %1 to i64*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %83, %15 ]
  %17 = phi i64* [ %10, %8 ], [ %82, %15 ]
  %18 = phi i64* [ %11, %8 ], [ %81, %15 ]
  %19 = phi i64* [ %12, %8 ], [ %80, %15 ]
  %20 = load i64, i64* %19, align 8
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = and <4 x i32> %24, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %26 = icmp sgt <4 x i32> %25, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = shl <4 x i32> %25, <i32 13, i32 13, i32 13, i32 13>
  %28 = add <4 x i32> %27, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %29 = shl <4 x i32> %24, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = select <4 x i1> %26, <4 x i32> %28, <4 x i32> zeroinitializer
  %32 = or <4 x i32> %31, %30
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = load i64, i64* %18, align 8
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <8 x i16>
  %37 = shufflevector <8 x i16> %36, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = bitcast <8 x i16> %37 to <4 x i32>
  %39 = and <4 x i32> %38, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %40 = icmp sgt <4 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = shl <4 x i32> %39, <i32 13, i32 13, i32 13, i32 13>
  %42 = add <4 x i32> %41, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %43 = shl <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %44 = and <4 x i32> %43, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %45 = select <4 x i1> %40, <4 x i32> %42, <4 x i32> zeroinitializer
  %46 = or <4 x i32> %45, %44
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = load i64, i64* %17, align 8
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %54 = icmp sgt <4 x i32> %53, <i32 1023, i32 1023, i32 1023, i32 1023>
  %55 = shl <4 x i32> %53, <i32 13, i32 13, i32 13, i32 13>
  %56 = add <4 x i32> %55, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %57 = shl <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %58 = and <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = select <4 x i1> %54, <4 x i32> %56, <4 x i32> zeroinitializer
  %60 = or <4 x i32> %59, %58
  %61 = bitcast <4 x i32> %60 to <4 x float>
  %62 = fadd <4 x float> %33, %47
  %63 = fadd <4 x float> %62, %47
  %64 = fadd <4 x float> %63, %61
  %65 = fmul <4 x float> %64, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %66 = bitcast <4 x float> %65 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %68 = icmp ugt <4 x i32> %67, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %69 = add <4 x i32> %66, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %70 = lshr <4 x i32> %69, <i32 13, i32 13, i32 13, i32 13>
  %71 = shl <4 x i32> %70, <i32 16, i32 16, i32 16, i32 16>
  %72 = select <4 x i1> %68, <4 x i32> %71, <4 x i32> zeroinitializer
  %73 = and <4 x i32> %66, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %74 = or <4 x i32> %72, %73
  %75 = ashr exact <4 x i32> %74, <i32 16, i32 16, i32 16, i32 16>
  %76 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> undef) #17
  %77 = bitcast <8 x i16> %76 to <2 x i64>
  %78 = extractelement <2 x i64> %77, i32 0
  %79 = getelementptr inbounds i64, i64* %6, i64 %16
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds i64, i64* %19, i64 2
  %81 = getelementptr inbounds i64, i64* %18, i64 2
  %82 = getelementptr inbounds i64, i64* %17, i64 2
  %83 = add nuw nsw i64 %16, 1
  %84 = icmp eq i64 %83, %13
  br i1 %84, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i64*
  %9 = zext i32 %3 to i64
  br label %11

10:                                               ; preds = %11, %4
  ret void

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %60, %11 ]
  %13 = phi i64* [ %8, %7 ], [ %59, %11 ]
  %14 = load i64, i64* %13, align 8
  %15 = insertelement <2 x i64> undef, i64 %14, i32 0
  %16 = bitcast <2 x i64> %15 to <8 x i16>
  %17 = shufflevector <8 x i16> %16, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %18 = bitcast <8 x i16> %17 to <4 x i32>
  %19 = and <4 x i32> %18, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %20 = icmp sgt <4 x i32> %19, <i32 1023, i32 1023, i32 1023, i32 1023>
  %21 = shl <4 x i32> %19, <i32 13, i32 13, i32 13, i32 13>
  %22 = add <4 x i32> %21, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %23 = shl <4 x i32> %18, <i32 16, i32 16, i32 16, i32 16>
  %24 = and <4 x i32> %23, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %25 = select <4 x i1> %20, <4 x i32> %22, <4 x i32> zeroinitializer
  %26 = or <4 x i32> %25, %24
  %27 = bitcast <4 x i32> %26 to <4 x float>
  %28 = getelementptr inbounds i64, i64* %13, i64 1
  %29 = load i64, i64* %28, align 8
  %30 = insertelement <2 x i64> undef, i64 %29, i32 0
  %31 = bitcast <2 x i64> %30 to <8 x i16>
  %32 = shufflevector <8 x i16> %31, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %33 = bitcast <8 x i16> %32 to <4 x i32>
  %34 = and <4 x i32> %33, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %35 = icmp sgt <4 x i32> %34, <i32 1023, i32 1023, i32 1023, i32 1023>
  %36 = shl <4 x i32> %34, <i32 13, i32 13, i32 13, i32 13>
  %37 = add <4 x i32> %36, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %38 = shl <4 x i32> %33, <i32 16, i32 16, i32 16, i32 16>
  %39 = and <4 x i32> %38, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %40 = select <4 x i1> %35, <4 x i32> %37, <4 x i32> zeroinitializer
  %41 = or <4 x i32> %40, %39
  %42 = bitcast <4 x i32> %41 to <4 x float>
  %43 = fadd <4 x float> %27, %42
  %44 = fmul <4 x float> %43, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %45 = bitcast <4 x float> %44 to <4 x i32>
  %46 = and <4 x i32> %45, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %47 = icmp ugt <4 x i32> %46, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %48 = add <4 x i32> %45, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %49 = lshr <4 x i32> %48, <i32 13, i32 13, i32 13, i32 13>
  %50 = shl <4 x i32> %49, <i32 16, i32 16, i32 16, i32 16>
  %51 = select <4 x i1> %47, <4 x i32> %50, <4 x i32> zeroinitializer
  %52 = and <4 x i32> %45, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %53 = or <4 x i32> %51, %52
  %54 = ashr exact <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %55 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> undef) #17
  %56 = bitcast <8 x i16> %55 to <2 x i64>
  %57 = extractelement <2 x i64> %56, i32 0
  %58 = getelementptr inbounds i64, i64* %5, i64 %12
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds i64, i64* %13, i64 2
  %60 = add nuw nsw i64 %12, 1
  %61 = icmp eq i64 %60, %9
  br i1 %61, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %1 to i64*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %95, %13 ]
  %15 = phi i64* [ %9, %7 ], [ %94, %13 ]
  %16 = phi i64* [ %10, %7 ], [ %93, %13 ]
  %17 = load i64, i64* %16, align 8
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <8 x i16>
  %20 = shufflevector <8 x i16> %19, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = bitcast <8 x i16> %20 to <4 x i32>
  %22 = and <4 x i32> %21, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %23 = icmp sgt <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %24 = shl <4 x i32> %22, <i32 13, i32 13, i32 13, i32 13>
  %25 = add <4 x i32> %24, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %26 = shl <4 x i32> %21, <i32 16, i32 16, i32 16, i32 16>
  %27 = and <4 x i32> %26, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = select <4 x i1> %23, <4 x i32> %25, <4 x i32> zeroinitializer
  %29 = or <4 x i32> %28, %27
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = getelementptr inbounds i64, i64* %16, i64 1
  %32 = load i64, i64* %31, align 8
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast <2 x i64> %33 to <8 x i16>
  %35 = shufflevector <8 x i16> %34, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = and <4 x i32> %36, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %38 = icmp sgt <4 x i32> %37, <i32 1023, i32 1023, i32 1023, i32 1023>
  %39 = shl <4 x i32> %37, <i32 13, i32 13, i32 13, i32 13>
  %40 = add <4 x i32> %39, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %41 = shl <4 x i32> %36, <i32 16, i32 16, i32 16, i32 16>
  %42 = and <4 x i32> %41, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %43 = select <4 x i1> %38, <4 x i32> %40, <4 x i32> zeroinitializer
  %44 = or <4 x i32> %43, %42
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = load i64, i64* %15, align 8
  %47 = insertelement <2 x i64> undef, i64 %46, i32 0
  %48 = bitcast <2 x i64> %47 to <8 x i16>
  %49 = shufflevector <8 x i16> %48, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %50 = bitcast <8 x i16> %49 to <4 x i32>
  %51 = and <4 x i32> %50, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %52 = icmp sgt <4 x i32> %51, <i32 1023, i32 1023, i32 1023, i32 1023>
  %53 = shl <4 x i32> %51, <i32 13, i32 13, i32 13, i32 13>
  %54 = add <4 x i32> %53, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %55 = shl <4 x i32> %50, <i32 16, i32 16, i32 16, i32 16>
  %56 = and <4 x i32> %55, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %57 = select <4 x i1> %52, <4 x i32> %54, <4 x i32> zeroinitializer
  %58 = or <4 x i32> %57, %56
  %59 = bitcast <4 x i32> %58 to <4 x float>
  %60 = getelementptr inbounds i64, i64* %15, i64 1
  %61 = load i64, i64* %60, align 8
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <8 x i16>
  %64 = shufflevector <8 x i16> %63, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %65 = bitcast <8 x i16> %64 to <4 x i32>
  %66 = and <4 x i32> %65, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %67 = icmp sgt <4 x i32> %66, <i32 1023, i32 1023, i32 1023, i32 1023>
  %68 = shl <4 x i32> %66, <i32 13, i32 13, i32 13, i32 13>
  %69 = add <4 x i32> %68, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %70 = shl <4 x i32> %65, <i32 16, i32 16, i32 16, i32 16>
  %71 = and <4 x i32> %70, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %72 = select <4 x i1> %67, <4 x i32> %69, <4 x i32> zeroinitializer
  %73 = or <4 x i32> %72, %71
  %74 = bitcast <4 x i32> %73 to <4 x float>
  %75 = fadd <4 x float> %30, %59
  %76 = fadd <4 x float> %75, %45
  %77 = fadd <4 x float> %76, %74
  %78 = fmul <4 x float> %77, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %79 = bitcast <4 x float> %78 to <4 x i32>
  %80 = and <4 x i32> %79, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %81 = icmp ugt <4 x i32> %80, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %82 = add <4 x i32> %79, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %83 = lshr <4 x i32> %82, <i32 13, i32 13, i32 13, i32 13>
  %84 = shl <4 x i32> %83, <i32 16, i32 16, i32 16, i32 16>
  %85 = select <4 x i1> %81, <4 x i32> %84, <4 x i32> zeroinitializer
  %86 = and <4 x i32> %79, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %87 = or <4 x i32> %85, %86
  %88 = ashr exact <4 x i32> %87, <i32 16, i32 16, i32 16, i32 16>
  %89 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %88, <4 x i32> undef) #17
  %90 = bitcast <8 x i16> %89 to <2 x i64>
  %91 = extractelement <2 x i64> %90, i32 0
  %92 = getelementptr inbounds i64, i64* %5, i64 %14
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds i64, i64* %16, i64 2
  %94 = getelementptr inbounds i64, i64* %15, i64 2
  %95 = add nuw nsw i64 %14, 1
  %96 = icmp eq i64 %95, %11
  br i1 %96, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i64*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %5 to i64*
  %12 = bitcast i8* %1 to i64*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %132, %15 ]
  %17 = phi i64* [ %10, %8 ], [ %131, %15 ]
  %18 = phi i64* [ %11, %8 ], [ %130, %15 ]
  %19 = phi i64* [ %12, %8 ], [ %129, %15 ]
  %20 = load i64, i64* %19, align 8
  %21 = insertelement <2 x i64> undef, i64 %20, i32 0
  %22 = bitcast <2 x i64> %21 to <8 x i16>
  %23 = shufflevector <8 x i16> %22, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %24 = bitcast <8 x i16> %23 to <4 x i32>
  %25 = and <4 x i32> %24, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %26 = icmp sgt <4 x i32> %25, <i32 1023, i32 1023, i32 1023, i32 1023>
  %27 = shl <4 x i32> %25, <i32 13, i32 13, i32 13, i32 13>
  %28 = add <4 x i32> %27, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %29 = shl <4 x i32> %24, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = select <4 x i1> %26, <4 x i32> %28, <4 x i32> zeroinitializer
  %32 = or <4 x i32> %31, %30
  %33 = bitcast <4 x i32> %32 to <4 x float>
  %34 = getelementptr inbounds i64, i64* %19, i64 1
  %35 = load i64, i64* %34, align 8
  %36 = insertelement <2 x i64> undef, i64 %35, i32 0
  %37 = bitcast <2 x i64> %36 to <8 x i16>
  %38 = shufflevector <8 x i16> %37, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %39 = bitcast <8 x i16> %38 to <4 x i32>
  %40 = and <4 x i32> %39, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %41 = icmp sgt <4 x i32> %40, <i32 1023, i32 1023, i32 1023, i32 1023>
  %42 = shl <4 x i32> %40, <i32 13, i32 13, i32 13, i32 13>
  %43 = add <4 x i32> %42, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %44 = shl <4 x i32> %39, <i32 16, i32 16, i32 16, i32 16>
  %45 = and <4 x i32> %44, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %46 = select <4 x i1> %41, <4 x i32> %43, <4 x i32> zeroinitializer
  %47 = or <4 x i32> %46, %45
  %48 = bitcast <4 x i32> %47 to <4 x float>
  %49 = load i64, i64* %18, align 8
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = bitcast <8 x i16> %52 to <4 x i32>
  %54 = and <4 x i32> %53, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %55 = icmp sgt <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = shl <4 x i32> %54, <i32 13, i32 13, i32 13, i32 13>
  %57 = add <4 x i32> %56, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %58 = shl <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %59 = and <4 x i32> %58, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %60 = select <4 x i1> %55, <4 x i32> %57, <4 x i32> zeroinitializer
  %61 = or <4 x i32> %60, %59
  %62 = bitcast <4 x i32> %61 to <4 x float>
  %63 = getelementptr inbounds i64, i64* %18, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = insertelement <2 x i64> undef, i64 %64, i32 0
  %66 = bitcast <2 x i64> %65 to <8 x i16>
  %67 = shufflevector <8 x i16> %66, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %68 = bitcast <8 x i16> %67 to <4 x i32>
  %69 = and <4 x i32> %68, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %70 = icmp sgt <4 x i32> %69, <i32 1023, i32 1023, i32 1023, i32 1023>
  %71 = shl <4 x i32> %69, <i32 13, i32 13, i32 13, i32 13>
  %72 = add <4 x i32> %71, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %73 = shl <4 x i32> %68, <i32 16, i32 16, i32 16, i32 16>
  %74 = and <4 x i32> %73, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %75 = select <4 x i1> %70, <4 x i32> %72, <4 x i32> zeroinitializer
  %76 = or <4 x i32> %75, %74
  %77 = bitcast <4 x i32> %76 to <4 x float>
  %78 = load i64, i64* %17, align 8
  %79 = insertelement <2 x i64> undef, i64 %78, i32 0
  %80 = bitcast <2 x i64> %79 to <8 x i16>
  %81 = shufflevector <8 x i16> %80, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = bitcast <8 x i16> %81 to <4 x i32>
  %83 = and <4 x i32> %82, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %84 = icmp sgt <4 x i32> %83, <i32 1023, i32 1023, i32 1023, i32 1023>
  %85 = shl <4 x i32> %83, <i32 13, i32 13, i32 13, i32 13>
  %86 = add <4 x i32> %85, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %87 = shl <4 x i32> %82, <i32 16, i32 16, i32 16, i32 16>
  %88 = and <4 x i32> %87, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %89 = select <4 x i1> %84, <4 x i32> %86, <4 x i32> zeroinitializer
  %90 = or <4 x i32> %89, %88
  %91 = bitcast <4 x i32> %90 to <4 x float>
  %92 = getelementptr inbounds i64, i64* %17, i64 1
  %93 = load i64, i64* %92, align 8
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = bitcast <2 x i64> %94 to <8 x i16>
  %96 = shufflevector <8 x i16> %95, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %97 = bitcast <8 x i16> %96 to <4 x i32>
  %98 = and <4 x i32> %97, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %99 = icmp sgt <4 x i32> %98, <i32 1023, i32 1023, i32 1023, i32 1023>
  %100 = shl <4 x i32> %98, <i32 13, i32 13, i32 13, i32 13>
  %101 = add <4 x i32> %100, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %102 = shl <4 x i32> %97, <i32 16, i32 16, i32 16, i32 16>
  %103 = and <4 x i32> %102, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %104 = select <4 x i1> %99, <4 x i32> %101, <4 x i32> zeroinitializer
  %105 = or <4 x i32> %104, %103
  %106 = bitcast <4 x i32> %105 to <4 x float>
  %107 = fadd <4 x float> %33, %62
  %108 = fadd <4 x float> %107, %62
  %109 = fadd <4 x float> %108, %91
  %110 = fadd <4 x float> %48, %77
  %111 = fadd <4 x float> %110, %77
  %112 = fadd <4 x float> %111, %106
  %113 = fadd <4 x float> %109, %112
  %114 = fmul <4 x float> %113, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %115 = bitcast <4 x float> %114 to <4 x i32>
  %116 = and <4 x i32> %115, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %117 = icmp ugt <4 x i32> %116, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %118 = add <4 x i32> %115, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %119 = lshr <4 x i32> %118, <i32 13, i32 13, i32 13, i32 13>
  %120 = shl <4 x i32> %119, <i32 16, i32 16, i32 16, i32 16>
  %121 = select <4 x i1> %117, <4 x i32> %120, <4 x i32> zeroinitializer
  %122 = and <4 x i32> %115, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %123 = or <4 x i32> %121, %122
  %124 = ashr exact <4 x i32> %123, <i32 16, i32 16, i32 16, i32 16>
  %125 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %124, <4 x i32> undef) #17
  %126 = bitcast <8 x i16> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = getelementptr inbounds i64, i64* %6, i64 %16
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds i64, i64* %19, i64 2
  %130 = getelementptr inbounds i64, i64* %18, i64 2
  %131 = getelementptr inbounds i64, i64* %17, i64 2
  %132 = add nuw nsw i64 %16, 1
  %133 = icmp eq i64 %132, %13
  br i1 %133, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i64*
  %6 = bitcast i8* %0 to i64*
  %7 = load i64, i64* %5, align 8
  %8 = insertelement <2 x i64> undef, i64 %7, i32 0
  %9 = bitcast <2 x i64> %8 to <8 x i16>
  %10 = shufflevector <8 x i16> %9, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %11 = bitcast <8 x i16> %10 to <4 x i32>
  %12 = and <4 x i32> %11, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %24

14:                                               ; preds = %4
  %15 = icmp sgt <4 x i32> %12, <i32 1023, i32 1023, i32 1023, i32 1023>
  %16 = shl <4 x i32> %12, <i32 13, i32 13, i32 13, i32 13>
  %17 = add <4 x i32> %16, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %18 = select <4 x i1> %15, <4 x i32> %17, <4 x i32> zeroinitializer
  %19 = shl <4 x i32> %11, <i32 16, i32 16, i32 16, i32 16>
  %20 = and <4 x i32> %19, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %21 = or <4 x i32> %18, %20
  %22 = bitcast <4 x i32> %21 to <4 x float>
  %23 = zext i32 %3 to i64
  br label %25

24:                                               ; preds = %25, %4
  ret void

25:                                               ; preds = %25, %14
  %26 = phi i64 [ 0, %14 ], [ %77, %25 ]
  %27 = phi i64* [ %5, %14 ], [ %44, %25 ]
  %28 = phi <4 x float> [ %22, %14 ], [ %58, %25 ]
  %29 = getelementptr inbounds i64, i64* %27, i64 1
  %30 = load i64, i64* %29, align 8
  %31 = insertelement <2 x i64> undef, i64 %30, i32 0
  %32 = bitcast <2 x i64> %31 to <8 x i16>
  %33 = shufflevector <8 x i16> %32, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %34 = bitcast <8 x i16> %33 to <4 x i32>
  %35 = and <4 x i32> %34, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %36 = icmp sgt <4 x i32> %35, <i32 1023, i32 1023, i32 1023, i32 1023>
  %37 = shl <4 x i32> %35, <i32 13, i32 13, i32 13, i32 13>
  %38 = add <4 x i32> %37, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %39 = shl <4 x i32> %34, <i32 16, i32 16, i32 16, i32 16>
  %40 = and <4 x i32> %39, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %41 = select <4 x i1> %36, <4 x i32> %38, <4 x i32> zeroinitializer
  %42 = or <4 x i32> %41, %40
  %43 = bitcast <4 x i32> %42 to <4 x float>
  %44 = getelementptr inbounds i64, i64* %27, i64 2
  %45 = load i64, i64* %44, align 8
  %46 = insertelement <2 x i64> undef, i64 %45, i32 0
  %47 = bitcast <2 x i64> %46 to <8 x i16>
  %48 = shufflevector <8 x i16> %47, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %49 = bitcast <8 x i16> %48 to <4 x i32>
  %50 = and <4 x i32> %49, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %51 = icmp sgt <4 x i32> %50, <i32 1023, i32 1023, i32 1023, i32 1023>
  %52 = shl <4 x i32> %50, <i32 13, i32 13, i32 13, i32 13>
  %53 = add <4 x i32> %52, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %54 = shl <4 x i32> %49, <i32 16, i32 16, i32 16, i32 16>
  %55 = and <4 x i32> %54, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %56 = select <4 x i1> %51, <4 x i32> %53, <4 x i32> zeroinitializer
  %57 = or <4 x i32> %56, %55
  %58 = bitcast <4 x i32> %57 to <4 x float>
  %59 = fadd <4 x float> %28, %43
  %60 = fadd <4 x float> %59, %43
  %61 = fadd <4 x float> %60, %58
  %62 = fmul <4 x float> %61, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %63 = bitcast <4 x float> %62 to <4 x i32>
  %64 = and <4 x i32> %63, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %65 = icmp ugt <4 x i32> %64, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %66 = add <4 x i32> %63, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %67 = lshr <4 x i32> %66, <i32 13, i32 13, i32 13, i32 13>
  %68 = shl <4 x i32> %67, <i32 16, i32 16, i32 16, i32 16>
  %69 = select <4 x i1> %65, <4 x i32> %68, <4 x i32> zeroinitializer
  %70 = and <4 x i32> %63, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %71 = or <4 x i32> %69, %70
  %72 = ashr exact <4 x i32> %71, <i32 16, i32 16, i32 16, i32 16>
  %73 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %72, <4 x i32> undef) #17
  %74 = bitcast <8 x i16> %73 to <2 x i64>
  %75 = extractelement <2 x i64> %74, i32 0
  %76 = getelementptr inbounds i64, i64* %6, i64 %26
  store i64 %75, i64* %76, align 8
  %77 = add nuw nsw i64 %26, 1
  %78 = icmp eq i64 %77, %23
  br i1 %78, label %24, label %25
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i64*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i64*
  %8 = bitcast i8* %0 to i64*
  %9 = load i64, i64* %5, align 8
  %10 = insertelement <2 x i64> undef, i64 %9, i32 0
  %11 = bitcast <2 x i64> %10 to <8 x i16>
  %12 = shufflevector <8 x i16> %11, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %13 = bitcast <8 x i16> %12 to <4 x i32>
  %14 = and <4 x i32> %13, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %15 = load i64, i64* %7, align 8
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %17, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = and <4 x i32> %19, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %21 = icmp sgt i32 %3, 0
  br i1 %21, label %22, label %41

22:                                               ; preds = %4
  %23 = icmp sgt <4 x i32> %14, <i32 1023, i32 1023, i32 1023, i32 1023>
  %24 = shl <4 x i32> %14, <i32 13, i32 13, i32 13, i32 13>
  %25 = add <4 x i32> %24, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %26 = select <4 x i1> %23, <4 x i32> %25, <4 x i32> zeroinitializer
  %27 = shl <4 x i32> %13, <i32 16, i32 16, i32 16, i32 16>
  %28 = and <4 x i32> %27, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %29 = or <4 x i32> %26, %28
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = icmp sgt <4 x i32> %20, <i32 1023, i32 1023, i32 1023, i32 1023>
  %32 = shl <4 x i32> %20, <i32 13, i32 13, i32 13, i32 13>
  %33 = add <4 x i32> %32, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %34 = select <4 x i1> %31, <4 x i32> %33, <4 x i32> zeroinitializer
  %35 = shl <4 x i32> %19, <i32 16, i32 16, i32 16, i32 16>
  %36 = and <4 x i32> %35, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %37 = or <4 x i32> %34, %36
  %38 = bitcast <4 x i32> %37 to <4 x float>
  %39 = fadd <4 x float> %30, %38
  %40 = zext i32 %3 to i64
  br label %42

41:                                               ; preds = %42, %4
  ret void

42:                                               ; preds = %42, %22
  %43 = phi i64 [ 0, %22 ], [ %128, %42 ]
  %44 = phi i64* [ %5, %22 ], [ %80, %42 ]
  %45 = phi i64* [ %7, %22 ], [ %95, %42 ]
  %46 = phi <4 x float> [ %39, %22 ], [ %110, %42 ]
  %47 = getelementptr inbounds i64, i64* %44, i64 1
  %48 = load i64, i64* %47, align 8
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %54 = icmp sgt <4 x i32> %53, <i32 1023, i32 1023, i32 1023, i32 1023>
  %55 = shl <4 x i32> %53, <i32 13, i32 13, i32 13, i32 13>
  %56 = add <4 x i32> %55, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %57 = shl <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %58 = and <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = select <4 x i1> %54, <4 x i32> %56, <4 x i32> zeroinitializer
  %60 = or <4 x i32> %59, %58
  %61 = bitcast <4 x i32> %60 to <4 x float>
  %62 = getelementptr inbounds i64, i64* %45, i64 1
  %63 = load i64, i64* %62, align 8
  %64 = insertelement <2 x i64> undef, i64 %63, i32 0
  %65 = bitcast <2 x i64> %64 to <8 x i16>
  %66 = shufflevector <8 x i16> %65, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %67 = bitcast <8 x i16> %66 to <4 x i32>
  %68 = and <4 x i32> %67, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %69 = icmp sgt <4 x i32> %68, <i32 1023, i32 1023, i32 1023, i32 1023>
  %70 = shl <4 x i32> %68, <i32 13, i32 13, i32 13, i32 13>
  %71 = add <4 x i32> %70, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %72 = shl <4 x i32> %67, <i32 16, i32 16, i32 16, i32 16>
  %73 = and <4 x i32> %72, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %74 = select <4 x i1> %69, <4 x i32> %71, <4 x i32> zeroinitializer
  %75 = or <4 x i32> %74, %73
  %76 = bitcast <4 x i32> %75 to <4 x float>
  %77 = fadd <4 x float> %61, %61
  %78 = fadd <4 x float> %77, %76
  %79 = fadd <4 x float> %78, %76
  %80 = getelementptr inbounds i64, i64* %44, i64 2
  %81 = load i64, i64* %80, align 8
  %82 = insertelement <2 x i64> undef, i64 %81, i32 0
  %83 = bitcast <2 x i64> %82 to <8 x i16>
  %84 = shufflevector <8 x i16> %83, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %85 = bitcast <8 x i16> %84 to <4 x i32>
  %86 = and <4 x i32> %85, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %87 = icmp sgt <4 x i32> %86, <i32 1023, i32 1023, i32 1023, i32 1023>
  %88 = shl <4 x i32> %86, <i32 13, i32 13, i32 13, i32 13>
  %89 = add <4 x i32> %88, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %90 = shl <4 x i32> %85, <i32 16, i32 16, i32 16, i32 16>
  %91 = and <4 x i32> %90, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %92 = select <4 x i1> %87, <4 x i32> %89, <4 x i32> zeroinitializer
  %93 = or <4 x i32> %92, %91
  %94 = bitcast <4 x i32> %93 to <4 x float>
  %95 = getelementptr inbounds i64, i64* %45, i64 2
  %96 = load i64, i64* %95, align 8
  %97 = insertelement <2 x i64> undef, i64 %96, i32 0
  %98 = bitcast <2 x i64> %97 to <8 x i16>
  %99 = shufflevector <8 x i16> %98, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %100 = bitcast <8 x i16> %99 to <4 x i32>
  %101 = and <4 x i32> %100, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %102 = icmp sgt <4 x i32> %101, <i32 1023, i32 1023, i32 1023, i32 1023>
  %103 = shl <4 x i32> %101, <i32 13, i32 13, i32 13, i32 13>
  %104 = add <4 x i32> %103, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %105 = shl <4 x i32> %100, <i32 16, i32 16, i32 16, i32 16>
  %106 = and <4 x i32> %105, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %107 = select <4 x i1> %102, <4 x i32> %104, <4 x i32> zeroinitializer
  %108 = or <4 x i32> %107, %106
  %109 = bitcast <4 x i32> %108 to <4 x float>
  %110 = fadd <4 x float> %94, %109
  %111 = fadd <4 x float> %46, %79
  %112 = fadd <4 x float> %111, %110
  %113 = fmul <4 x float> %112, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %114 = bitcast <4 x float> %113 to <4 x i32>
  %115 = and <4 x i32> %114, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %116 = icmp ugt <4 x i32> %115, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %117 = add <4 x i32> %114, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %118 = lshr <4 x i32> %117, <i32 13, i32 13, i32 13, i32 13>
  %119 = shl <4 x i32> %118, <i32 16, i32 16, i32 16, i32 16>
  %120 = select <4 x i1> %116, <4 x i32> %119, <4 x i32> zeroinitializer
  %121 = and <4 x i32> %114, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %122 = or <4 x i32> %120, %121
  %123 = ashr exact <4 x i32> %122, <i32 16, i32 16, i32 16, i32 16>
  %124 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %123, <4 x i32> undef) #17
  %125 = bitcast <8 x i16> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  %127 = getelementptr inbounds i64, i64* %8, i64 %43
  store i64 %126, i64* %127, align 8
  %128 = add nuw nsw i64 %43, 1
  %129 = icmp eq i64 %128, %40
  br i1 %129, label %41, label %42
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I24ColorTypeFilter_RGBA_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i64*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i64*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %0 to i64*
  %11 = load i64, i64* %5, align 8
  %12 = insertelement <2 x i64> undef, i64 %11, i32 0
  %13 = bitcast <2 x i64> %12 to <8 x i16>
  %14 = shufflevector <8 x i16> %13, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %15 = bitcast <8 x i16> %14 to <4 x i32>
  %16 = and <4 x i32> %15, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %17 = load i64, i64* %7, align 8
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <8 x i16>
  %20 = shufflevector <8 x i16> %19, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = bitcast <8 x i16> %20 to <4 x i32>
  %22 = and <4 x i32> %21, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %23 = icmp sgt <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %24 = shl <4 x i32> %22, <i32 13, i32 13, i32 13, i32 13>
  %25 = add <4 x i32> %24, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %26 = shl <4 x i32> %21, <i32 16, i32 16, i32 16, i32 16>
  %27 = and <4 x i32> %26, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %28 = select <4 x i1> %23, <4 x i32> %25, <4 x i32> zeroinitializer
  %29 = or <4 x i32> %28, %27
  %30 = bitcast <4 x i32> %29 to <4 x float>
  %31 = load i64, i64* %9, align 8
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = bitcast <8 x i16> %34 to <4 x i32>
  %36 = and <4 x i32> %35, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %37 = icmp sgt i32 %3, 0
  br i1 %37, label %38, label %59

38:                                               ; preds = %4
  %39 = icmp sgt <4 x i32> %16, <i32 1023, i32 1023, i32 1023, i32 1023>
  %40 = shl <4 x i32> %16, <i32 13, i32 13, i32 13, i32 13>
  %41 = add <4 x i32> %40, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %42 = select <4 x i1> %39, <4 x i32> %41, <4 x i32> zeroinitializer
  %43 = shl <4 x i32> %15, <i32 16, i32 16, i32 16, i32 16>
  %44 = and <4 x i32> %43, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %45 = or <4 x i32> %42, %44
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = fadd <4 x float> %46, %30
  %48 = fadd <4 x float> %47, %30
  %49 = icmp sgt <4 x i32> %36, <i32 1023, i32 1023, i32 1023, i32 1023>
  %50 = shl <4 x i32> %36, <i32 13, i32 13, i32 13, i32 13>
  %51 = add <4 x i32> %50, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %52 = select <4 x i1> %49, <4 x i32> %51, <4 x i32> zeroinitializer
  %53 = shl <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %54 = and <4 x i32> %53, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %55 = or <4 x i32> %52, %54
  %56 = bitcast <4 x i32> %55 to <4 x float>
  %57 = fadd <4 x float> %48, %56
  %58 = zext i32 %3 to i64
  br label %60

59:                                               ; preds = %60, %4
  ret void

60:                                               ; preds = %60, %38
  %61 = phi i64 [ 0, %38 ], [ %180, %60 ]
  %62 = phi i64* [ %5, %38 ], [ %115, %60 ]
  %63 = phi i64* [ %7, %38 ], [ %130, %60 ]
  %64 = phi i64* [ %9, %38 ], [ %145, %60 ]
  %65 = phi <4 x float> [ %57, %38 ], [ %162, %60 ]
  %66 = getelementptr inbounds i64, i64* %62, i64 1
  %67 = load i64, i64* %66, align 8
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = bitcast <2 x i64> %68 to <8 x i16>
  %70 = shufflevector <8 x i16> %69, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %71 = bitcast <8 x i16> %70 to <4 x i32>
  %72 = and <4 x i32> %71, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %73 = icmp sgt <4 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = shl <4 x i32> %72, <i32 13, i32 13, i32 13, i32 13>
  %75 = add <4 x i32> %74, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %76 = shl <4 x i32> %71, <i32 16, i32 16, i32 16, i32 16>
  %77 = and <4 x i32> %76, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %78 = select <4 x i1> %73, <4 x i32> %75, <4 x i32> zeroinitializer
  %79 = or <4 x i32> %78, %77
  %80 = bitcast <4 x i32> %79 to <4 x float>
  %81 = getelementptr inbounds i64, i64* %63, i64 1
  %82 = load i64, i64* %81, align 8
  %83 = insertelement <2 x i64> undef, i64 %82, i32 0
  %84 = bitcast <2 x i64> %83 to <8 x i16>
  %85 = shufflevector <8 x i16> %84, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %86 = bitcast <8 x i16> %85 to <4 x i32>
  %87 = and <4 x i32> %86, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %88 = icmp sgt <4 x i32> %87, <i32 1023, i32 1023, i32 1023, i32 1023>
  %89 = shl <4 x i32> %87, <i32 13, i32 13, i32 13, i32 13>
  %90 = add <4 x i32> %89, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %91 = shl <4 x i32> %86, <i32 16, i32 16, i32 16, i32 16>
  %92 = and <4 x i32> %91, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %93 = select <4 x i1> %88, <4 x i32> %90, <4 x i32> zeroinitializer
  %94 = or <4 x i32> %93, %92
  %95 = bitcast <4 x i32> %94 to <4 x float>
  %96 = getelementptr inbounds i64, i64* %64, i64 1
  %97 = load i64, i64* %96, align 8
  %98 = insertelement <2 x i64> undef, i64 %97, i32 0
  %99 = bitcast <2 x i64> %98 to <8 x i16>
  %100 = shufflevector <8 x i16> %99, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %101 = bitcast <8 x i16> %100 to <4 x i32>
  %102 = and <4 x i32> %101, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %103 = icmp sgt <4 x i32> %102, <i32 1023, i32 1023, i32 1023, i32 1023>
  %104 = shl <4 x i32> %102, <i32 13, i32 13, i32 13, i32 13>
  %105 = add <4 x i32> %104, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %106 = shl <4 x i32> %101, <i32 16, i32 16, i32 16, i32 16>
  %107 = and <4 x i32> %106, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %108 = select <4 x i1> %103, <4 x i32> %105, <4 x i32> zeroinitializer
  %109 = or <4 x i32> %108, %107
  %110 = bitcast <4 x i32> %109 to <4 x float>
  %111 = fadd <4 x float> %80, %95
  %112 = fadd <4 x float> %111, %95
  %113 = fadd <4 x float> %112, %110
  %114 = fmul <4 x float> %113, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %115 = getelementptr inbounds i64, i64* %62, i64 2
  %116 = load i64, i64* %115, align 8
  %117 = insertelement <2 x i64> undef, i64 %116, i32 0
  %118 = bitcast <2 x i64> %117 to <8 x i16>
  %119 = shufflevector <8 x i16> %118, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %120 = bitcast <8 x i16> %119 to <4 x i32>
  %121 = and <4 x i32> %120, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %122 = icmp sgt <4 x i32> %121, <i32 1023, i32 1023, i32 1023, i32 1023>
  %123 = shl <4 x i32> %121, <i32 13, i32 13, i32 13, i32 13>
  %124 = add <4 x i32> %123, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %125 = shl <4 x i32> %120, <i32 16, i32 16, i32 16, i32 16>
  %126 = and <4 x i32> %125, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %127 = select <4 x i1> %122, <4 x i32> %124, <4 x i32> zeroinitializer
  %128 = or <4 x i32> %127, %126
  %129 = bitcast <4 x i32> %128 to <4 x float>
  %130 = getelementptr inbounds i64, i64* %63, i64 2
  %131 = load i64, i64* %130, align 8
  %132 = insertelement <2 x i64> undef, i64 %131, i32 0
  %133 = bitcast <2 x i64> %132 to <8 x i16>
  %134 = shufflevector <8 x i16> %133, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %135 = bitcast <8 x i16> %134 to <4 x i32>
  %136 = and <4 x i32> %135, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %137 = icmp sgt <4 x i32> %136, <i32 1023, i32 1023, i32 1023, i32 1023>
  %138 = shl <4 x i32> %136, <i32 13, i32 13, i32 13, i32 13>
  %139 = add <4 x i32> %138, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %140 = shl <4 x i32> %135, <i32 16, i32 16, i32 16, i32 16>
  %141 = and <4 x i32> %140, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %142 = select <4 x i1> %137, <4 x i32> %139, <4 x i32> zeroinitializer
  %143 = or <4 x i32> %142, %141
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = getelementptr inbounds i64, i64* %64, i64 2
  %146 = load i64, i64* %145, align 8
  %147 = insertelement <2 x i64> undef, i64 %146, i32 0
  %148 = bitcast <2 x i64> %147 to <8 x i16>
  %149 = shufflevector <8 x i16> %148, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %150 = bitcast <8 x i16> %149 to <4 x i32>
  %151 = and <4 x i32> %150, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %152 = icmp sgt <4 x i32> %151, <i32 1023, i32 1023, i32 1023, i32 1023>
  %153 = shl <4 x i32> %151, <i32 13, i32 13, i32 13, i32 13>
  %154 = add <4 x i32> %153, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %155 = shl <4 x i32> %150, <i32 16, i32 16, i32 16, i32 16>
  %156 = and <4 x i32> %155, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %157 = select <4 x i1> %152, <4 x i32> %154, <4 x i32> zeroinitializer
  %158 = or <4 x i32> %157, %156
  %159 = bitcast <4 x i32> %158 to <4 x float>
  %160 = fadd <4 x float> %129, %144
  %161 = fadd <4 x float> %160, %144
  %162 = fadd <4 x float> %161, %159
  %163 = fadd <4 x float> %65, %114
  %164 = fadd <4 x float> %163, %162
  %165 = fmul <4 x float> %164, <float 6.250000e-02, float 6.250000e-02, float 6.250000e-02, float 6.250000e-02>
  %166 = bitcast <4 x float> %165 to <4 x i32>
  %167 = and <4 x i32> %166, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %168 = icmp ugt <4 x i32> %167, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %169 = add <4 x i32> %166, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %170 = lshr <4 x i32> %169, <i32 13, i32 13, i32 13, i32 13>
  %171 = shl <4 x i32> %170, <i32 16, i32 16, i32 16, i32 16>
  %172 = select <4 x i1> %168, <4 x i32> %171, <4 x i32> zeroinitializer
  %173 = and <4 x i32> %166, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %174 = or <4 x i32> %172, %173
  %175 = ashr exact <4 x i32> %174, <i32 16, i32 16, i32 16, i32 16>
  %176 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %175, <4 x i32> undef) #17
  %177 = bitcast <8 x i16> %176 to <2 x i64>
  %178 = extractelement <2 x i64> %177, i32 0
  %179 = getelementptr inbounds i64, i64* %10, i64 %61
  store i64 %178, i64* %179, align 8
  %180 = add nuw nsw i64 %61, 1
  %181 = icmp eq i64 %180, %58
  br i1 %181, label %59, label %60
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 9
  br i1 %12, label %13, label %17

13:                                               ; preds = %42, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %37, %42 ]
  %15 = phi i16* [ %10, %17 ], [ %10, %7 ], [ %39, %42 ]
  %16 = phi i16* [ %9, %17 ], [ %9, %7 ], [ %41, %42 ]
  br label %76

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 1
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 2
  %21 = add i64 %20, %2
  %22 = add i64 %21, -2
  %23 = getelementptr i8, i8* %1, i64 %22
  %24 = add nsw i64 %20, -2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = icmp ugt i8* %23, %0
  %27 = icmp ult i8* %8, %19
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %25, %0
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %13, label %33

33:                                               ; preds = %17
  %34 = and i64 %11, 7
  %35 = icmp eq i64 %34, 0
  %36 = select i1 %35, i64 8, i64 %34
  %37 = sub nsw i64 %11, %36
  %38 = shl nsw i64 %37, 1
  %39 = getelementptr i16, i16* %10, i64 %38
  %40 = shl nsw i64 %37, 1
  %41 = getelementptr i16, i16* %9, i64 %40
  br label %42

42:                                               ; preds = %42, %33
  %43 = phi i64 [ 0, %33 ], [ %73, %42 ]
  %44 = shl i64 %43, 1
  %45 = getelementptr i16, i16* %10, i64 %44
  %46 = shl i64 %43, 1
  %47 = getelementptr i16, i16* %9, i64 %46
  %48 = bitcast i16* %45 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 2
  %50 = shufflevector <16 x i16> %49, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %51 = zext <8 x i16> %50 to <8 x i32>
  %52 = and <8 x i32> %51, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %53 = shl nuw nsw <8 x i32> %51, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %54 = and <8 x i32> %53, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %55 = or <8 x i32> %54, %52
  %56 = bitcast i16* %47 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 2
  %58 = shufflevector <16 x i16> %57, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %59 = zext <8 x i16> %58 to <8 x i32>
  %60 = and <8 x i32> %59, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %61 = shl nuw nsw <8 x i32> %59, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %62 = and <8 x i32> %61, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %63 = or <8 x i32> %62, %60
  %64 = add nuw nsw <8 x i32> %63, %55
  %65 = lshr <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = and <8 x i32> %65, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %67 = lshr <8 x i32> %64, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %68 = and <8 x i32> %67, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %69 = or <8 x i32> %68, %66
  %70 = trunc <8 x i32> %69 to <8 x i16>
  %71 = getelementptr inbounds i16, i16* %5, i64 %43
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %70, <8 x i16>* %72, align 2, !alias.scope !185, !noalias !188
  %73 = add i64 %43, 8
  %74 = icmp eq i64 %73, %37
  br i1 %74, label %13, label %42, !llvm.loop !191

75:                                               ; preds = %76, %4
  ret void

76:                                               ; preds = %13, %76
  %77 = phi i64 [ %102, %76 ], [ %14, %13 ]
  %78 = phi i16* [ %100, %76 ], [ %15, %13 ]
  %79 = phi i16* [ %101, %76 ], [ %16, %13 ]
  %80 = load i16, i16* %78, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 255
  %83 = shl nuw nsw i32 %81, 8
  %84 = and i32 %83, 16711680
  %85 = or i32 %84, %82
  %86 = load i16, i16* %79, align 2
  %87 = zext i16 %86 to i32
  %88 = and i32 %87, 255
  %89 = shl nuw nsw i32 %87, 8
  %90 = and i32 %89, 16711680
  %91 = or i32 %90, %88
  %92 = add nuw nsw i32 %91, %85
  %93 = lshr i32 %92, 1
  %94 = and i32 %93, 255
  %95 = lshr i32 %92, 9
  %96 = and i32 %95, 65280
  %97 = or i32 %96, %94
  %98 = trunc i32 %97 to i16
  %99 = getelementptr inbounds i16, i16* %5, i64 %77
  store i16 %98, i16* %99, align 2
  %100 = getelementptr inbounds i16, i16* %78, i64 2
  %101 = getelementptr inbounds i16, i16* %79, i64 2
  %102 = add nuw nsw i64 %77, 1
  %103 = icmp eq i64 %102, %11
  br i1 %103, label %75, label %76, !llvm.loop !192
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %100

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 9
  br i1 %14, label %15, label %20

15:                                               ; preds = %55, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %48, %55 ]
  %17 = phi i16* [ %10, %20 ], [ %10, %8 ], [ %50, %55 ]
  %18 = phi i16* [ %11, %20 ], [ %11, %8 ], [ %52, %55 ]
  %19 = phi i16* [ %12, %20 ], [ %12, %8 ], [ %54, %55 ]
  br label %101

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 2
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = add i64 %25, -2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = add i64 %23, %2
  %29 = add i64 %28, -2
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = add nsw i64 %23, -2
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = icmp ugt i8* %27, %0
  %34 = icmp ult i8* %9, %22
  %35 = and i1 %33, %34
  %36 = icmp ugt i8* %30, %0
  %37 = icmp ult i8* %5, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %32, %0
  %41 = icmp ugt i8* %22, %1
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  br i1 %43, label %15, label %44

44:                                               ; preds = %20
  %45 = and i64 %13, 7
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 8, i64 %45
  %48 = sub nsw i64 %13, %47
  %49 = shl nsw i64 %48, 1
  %50 = getelementptr i16, i16* %10, i64 %49
  %51 = shl nsw i64 %48, 1
  %52 = getelementptr i16, i16* %11, i64 %51
  %53 = shl nsw i64 %48, 1
  %54 = getelementptr i16, i16* %12, i64 %53
  br label %55

55:                                               ; preds = %55, %44
  %56 = phi i64 [ 0, %44 ], [ %98, %55 ]
  %57 = shl i64 %56, 1
  %58 = getelementptr i16, i16* %10, i64 %57
  %59 = shl i64 %56, 1
  %60 = getelementptr i16, i16* %11, i64 %59
  %61 = shl i64 %56, 1
  %62 = getelementptr i16, i16* %12, i64 %61
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 2
  %65 = shufflevector <16 x i16> %64, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %66 = zext <8 x i16> %65 to <8 x i32>
  %67 = and <8 x i32> %66, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %68 = shl nuw nsw <8 x i32> %66, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %69 = and <8 x i32> %68, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %70 = or <8 x i32> %69, %67
  %71 = bitcast i16* %60 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 2
  %73 = shufflevector <16 x i16> %72, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %74 = zext <8 x i16> %73 to <8 x i32>
  %75 = and <8 x i32> %74, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %76 = shl nuw nsw <8 x i32> %74, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %77 = and <8 x i32> %76, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %78 = or <8 x i32> %77, %75
  %79 = bitcast i16* %58 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = shufflevector <16 x i16> %80, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %82 = zext <8 x i16> %81 to <8 x i32>
  %83 = and <8 x i32> %82, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %84 = shl nuw nsw <8 x i32> %82, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %85 = and <8 x i32> %84, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %86 = or <8 x i32> %85, %83
  %87 = shl nuw nsw <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %88 = add nuw nsw <8 x i32> %86, %70
  %89 = add nuw nsw <8 x i32> %88, %87
  %90 = lshr <8 x i32> %89, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %91 = and <8 x i32> %90, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %92 = lshr <8 x i32> %89, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %93 = and <8 x i32> %92, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %94 = or <8 x i32> %93, %91
  %95 = trunc <8 x i32> %94 to <8 x i16>
  %96 = getelementptr inbounds i16, i16* %6, i64 %56
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %97, align 2, !alias.scope !193, !noalias !196
  %98 = add i64 %56, 8
  %99 = icmp eq i64 %98, %48
  br i1 %99, label %15, label %55, !llvm.loop !200

100:                                              ; preds = %101, %4
  ret void

101:                                              ; preds = %15, %101
  %102 = phi i64 [ %137, %101 ], [ %16, %15 ]
  %103 = phi i16* [ %136, %101 ], [ %17, %15 ]
  %104 = phi i16* [ %135, %101 ], [ %18, %15 ]
  %105 = phi i16* [ %134, %101 ], [ %19, %15 ]
  %106 = load i16, i16* %105, align 2
  %107 = zext i16 %106 to i32
  %108 = and i32 %107, 255
  %109 = shl nuw nsw i32 %107, 8
  %110 = and i32 %109, 16711680
  %111 = or i32 %110, %108
  %112 = load i16, i16* %104, align 2
  %113 = zext i16 %112 to i32
  %114 = and i32 %113, 255
  %115 = shl nuw nsw i32 %113, 8
  %116 = and i32 %115, 16711680
  %117 = or i32 %116, %114
  %118 = load i16, i16* %103, align 2
  %119 = zext i16 %118 to i32
  %120 = and i32 %119, 255
  %121 = shl nuw nsw i32 %119, 8
  %122 = and i32 %121, 16711680
  %123 = or i32 %122, %120
  %124 = shl nuw nsw i32 %117, 1
  %125 = add nuw nsw i32 %123, %111
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 2
  %128 = and i32 %127, 255
  %129 = lshr i32 %126, 10
  %130 = and i32 %129, 65280
  %131 = or i32 %130, %128
  %132 = trunc i32 %131 to i16
  %133 = getelementptr inbounds i16, i16* %6, i64 %102
  store i16 %132, i16* %133, align 2
  %134 = getelementptr inbounds i16, i16* %105, i64 2
  %135 = getelementptr inbounds i16, i16* %104, i64 2
  %136 = getelementptr inbounds i16, i16* %103, i64 2
  %137 = add nuw nsw i64 %102, 1
  %138 = icmp eq i64 %137, %13
  br i1 %138, label %100, label %101, !llvm.loop !201
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %57

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i16*
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 8
  br i1 %10, label %11, label %14

11:                                               ; preds = %55, %14, %7
  %12 = phi i64 [ 0, %14 ], [ 0, %7 ], [ %23, %55 ]
  %13 = phi i16* [ %8, %14 ], [ %8, %7 ], [ %25, %55 ]
  br label %58

14:                                               ; preds = %7
  %15 = shl nuw nsw i64 %9, 1
  %16 = getelementptr i8, i8* %0, i64 %15
  %17 = shl nuw nsw i64 %9, 2
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = icmp ugt i8* %18, %0
  %20 = icmp ugt i8* %16, %1
  %21 = and i1 %19, %20
  br i1 %21, label %11, label %22

22:                                               ; preds = %14
  %23 = and i64 %9, 4294967288
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i16, i16* %8, i64 %24
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %53, %26 ]
  %28 = shl i64 %27, 1
  %29 = getelementptr i16, i16* %8, i64 %28
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = shufflevector <16 x i16> %31, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %33 = shufflevector <16 x i16> %31, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %34 = zext <8 x i16> %32 to <8 x i32>
  %35 = and <8 x i32> %34, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %36 = shl nuw nsw <8 x i32> %34, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %37 = and <8 x i32> %36, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %38 = or <8 x i32> %37, %35
  %39 = zext <8 x i16> %33 to <8 x i32>
  %40 = and <8 x i32> %39, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %41 = shl nuw nsw <8 x i32> %39, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %42 = and <8 x i32> %41, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %43 = or <8 x i32> %42, %40
  %44 = add nuw nsw <8 x i32> %43, %38
  %45 = lshr <8 x i32> %44, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %46 = and <8 x i32> %45, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %47 = lshr <8 x i32> %44, <i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9>
  %48 = and <8 x i32> %47, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %49 = or <8 x i32> %48, %46
  %50 = trunc <8 x i32> %49 to <8 x i16>
  %51 = getelementptr inbounds i16, i16* %5, i64 %27
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %52, align 2, !alias.scope !202, !noalias !205
  %53 = add i64 %27, 8
  %54 = icmp eq i64 %53, %23
  br i1 %54, label %55, label %26, !llvm.loop !207

55:                                               ; preds = %26
  %56 = icmp eq i64 %23, %9
  br i1 %56, label %57, label %11

57:                                               ; preds = %58, %55, %4
  ret void

58:                                               ; preds = %11, %58
  %59 = phi i64 [ %83, %58 ], [ %12, %11 ]
  %60 = phi i16* [ %82, %58 ], [ %13, %11 ]
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = and i32 %62, 255
  %64 = shl nuw nsw i32 %62, 8
  %65 = and i32 %64, 16711680
  %66 = or i32 %65, %63
  %67 = getelementptr inbounds i16, i16* %60, i64 1
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = and i32 %69, 255
  %71 = shl nuw nsw i32 %69, 8
  %72 = and i32 %71, 16711680
  %73 = or i32 %72, %70
  %74 = add nuw nsw i32 %73, %66
  %75 = lshr i32 %74, 1
  %76 = and i32 %75, 255
  %77 = lshr i32 %74, 9
  %78 = and i32 %77, 65280
  %79 = or i32 %78, %76
  %80 = trunc i32 %79 to i16
  %81 = getelementptr inbounds i16, i16* %5, i64 %59
  store i16 %80, i16* %81, align 2
  %82 = getelementptr inbounds i16, i16* %60, i64 2
  %83 = add nuw nsw i64 %59, 1
  %84 = icmp eq i64 %83, %9
  br i1 %84, label %57, label %58, !llvm.loop !208
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %86

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 4
  br i1 %12, label %13, label %17

13:                                               ; preds = %84, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %32, %84 ]
  %15 = phi i16* [ %10, %17 ], [ %10, %7 ], [ %34, %84 ]
  %16 = phi i16* [ %9, %17 ], [ %9, %7 ], [ %36, %84 ]
  br label %87

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 1
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 2
  %21 = add i64 %20, %2
  %22 = getelementptr i8, i8* %1, i64 %21
  %23 = getelementptr i8, i8* %1, i64 %20
  %24 = icmp ugt i8* %22, %0
  %25 = icmp ult i8* %8, %19
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %23, %0
  %28 = icmp ugt i8* %19, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %13, label %31

31:                                               ; preds = %17
  %32 = and i64 %11, 4294967292
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i16, i16* %10, i64 %33
  %35 = shl nuw nsw i64 %32, 1
  %36 = getelementptr i16, i16* %9, i64 %35
  br label %37

37:                                               ; preds = %37, %31
  %38 = phi i64 [ 0, %31 ], [ %82, %37 ]
  %39 = shl i64 %38, 1
  %40 = getelementptr i16, i16* %10, i64 %39
  %41 = shl i64 %38, 1
  %42 = getelementptr i16, i16* %9, i64 %41
  %43 = bitcast i16* %40 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 2
  %45 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %46 = shufflevector <8 x i16> %44, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %47 = zext <4 x i16> %45 to <4 x i32>
  %48 = and <4 x i32> %47, <i32 255, i32 255, i32 255, i32 255>
  %49 = shl nuw nsw <4 x i32> %47, <i32 8, i32 8, i32 8, i32 8>
  %50 = and <4 x i32> %49, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %51 = or <4 x i32> %50, %48
  %52 = zext <4 x i16> %46 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 255, i32 255, i32 255, i32 255>
  %54 = shl nuw nsw <4 x i32> %52, <i32 8, i32 8, i32 8, i32 8>
  %55 = and <4 x i32> %54, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %56 = or <4 x i32> %55, %53
  %57 = bitcast i16* %42 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = zext <4 x i16> %59 to <4 x i32>
  %62 = and <4 x i32> %61, <i32 255, i32 255, i32 255, i32 255>
  %63 = shl nuw nsw <4 x i32> %61, <i32 8, i32 8, i32 8, i32 8>
  %64 = and <4 x i32> %63, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %65 = or <4 x i32> %64, %62
  %66 = zext <4 x i16> %60 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 255, i32 255, i32 255, i32 255>
  %68 = shl nuw nsw <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = and <4 x i32> %68, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %70 = or <4 x i32> %69, %67
  %71 = add nuw nsw <4 x i32> %56, %51
  %72 = add nuw nsw <4 x i32> %71, %65
  %73 = add nuw nsw <4 x i32> %72, %70
  %74 = lshr <4 x i32> %73, <i32 2, i32 2, i32 2, i32 2>
  %75 = and <4 x i32> %74, <i32 255, i32 255, i32 255, i32 255>
  %76 = lshr <4 x i32> %73, <i32 10, i32 10, i32 10, i32 10>
  %77 = and <4 x i32> %76, <i32 65280, i32 65280, i32 65280, i32 65280>
  %78 = or <4 x i32> %77, %75
  %79 = trunc <4 x i32> %78 to <4 x i16>
  %80 = getelementptr inbounds i16, i16* %5, i64 %38
  %81 = bitcast i16* %80 to <4 x i16>*
  store <4 x i16> %79, <4 x i16>* %81, align 2, !alias.scope !209, !noalias !212
  %82 = add i64 %38, 4
  %83 = icmp eq i64 %82, %32
  br i1 %83, label %84, label %37, !llvm.loop !215

84:                                               ; preds = %37
  %85 = icmp eq i64 %32, %11
  br i1 %85, label %86, label %13

86:                                               ; preds = %87, %84, %4
  ret void

87:                                               ; preds = %13, %87
  %88 = phi i64 [ %129, %87 ], [ %14, %13 ]
  %89 = phi i16* [ %127, %87 ], [ %15, %13 ]
  %90 = phi i16* [ %128, %87 ], [ %16, %13 ]
  %91 = load i16, i16* %89, align 2
  %92 = zext i16 %91 to i32
  %93 = and i32 %92, 255
  %94 = shl nuw nsw i32 %92, 8
  %95 = and i32 %94, 16711680
  %96 = or i32 %95, %93
  %97 = getelementptr inbounds i16, i16* %89, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = and i32 %99, 255
  %101 = shl nuw nsw i32 %99, 8
  %102 = and i32 %101, 16711680
  %103 = or i32 %102, %100
  %104 = load i16, i16* %90, align 2
  %105 = zext i16 %104 to i32
  %106 = and i32 %105, 255
  %107 = shl nuw nsw i32 %105, 8
  %108 = and i32 %107, 16711680
  %109 = or i32 %108, %106
  %110 = getelementptr inbounds i16, i16* %90, i64 1
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = and i32 %112, 255
  %114 = shl nuw nsw i32 %112, 8
  %115 = and i32 %114, 16711680
  %116 = or i32 %115, %113
  %117 = add nuw nsw i32 %103, %96
  %118 = add nuw nsw i32 %117, %109
  %119 = add nuw nsw i32 %118, %116
  %120 = lshr i32 %119, 2
  %121 = and i32 %120, 255
  %122 = lshr i32 %119, 10
  %123 = and i32 %122, 65280
  %124 = or i32 %123, %121
  %125 = trunc i32 %124 to i16
  %126 = getelementptr inbounds i16, i16* %5, i64 %88
  store i16 %125, i16* %126, align 2
  %127 = getelementptr inbounds i16, i16* %89, i64 2
  %128 = getelementptr inbounds i16, i16* %90, i64 2
  %129 = add nuw nsw i64 %88, 1
  %130 = icmp eq i64 %129, %11
  br i1 %130, label %86, label %87, !llvm.loop !216
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %117

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 4
  br i1 %14, label %15, label %20

15:                                               ; preds = %115, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %42, %115 ]
  %17 = phi i16* [ %10, %20 ], [ %10, %8 ], [ %44, %115 ]
  %18 = phi i16* [ %11, %20 ], [ %11, %8 ], [ %46, %115 ]
  %19 = phi i16* [ %12, %20 ], [ %12, %8 ], [ %48, %115 ]
  br label %118

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 1
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 2
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = add i64 %23, %2
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = getelementptr i8, i8* %1, i64 %23
  %30 = icmp ugt i8* %26, %0
  %31 = icmp ult i8* %9, %22
  %32 = and i1 %30, %31
  %33 = icmp ugt i8* %28, %0
  %34 = icmp ult i8* %5, %22
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  %37 = icmp ugt i8* %29, %0
  %38 = icmp ugt i8* %22, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %15, label %41

41:                                               ; preds = %20
  %42 = and i64 %13, 4294967292
  %43 = shl nuw nsw i64 %42, 1
  %44 = getelementptr i16, i16* %10, i64 %43
  %45 = shl nuw nsw i64 %42, 1
  %46 = getelementptr i16, i16* %11, i64 %45
  %47 = shl nuw nsw i64 %42, 1
  %48 = getelementptr i16, i16* %12, i64 %47
  br label %49

49:                                               ; preds = %49, %41
  %50 = phi i64 [ 0, %41 ], [ %113, %49 ]
  %51 = shl i64 %50, 1
  %52 = getelementptr i16, i16* %10, i64 %51
  %53 = shl i64 %50, 1
  %54 = getelementptr i16, i16* %11, i64 %53
  %55 = shl i64 %50, 1
  %56 = getelementptr i16, i16* %12, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2
  %59 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i16> %58, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = zext <4 x i16> %59 to <4 x i32>
  %62 = and <4 x i32> %61, <i32 255, i32 255, i32 255, i32 255>
  %63 = shl nuw nsw <4 x i32> %61, <i32 8, i32 8, i32 8, i32 8>
  %64 = and <4 x i32> %63, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %65 = or <4 x i32> %64, %62
  %66 = zext <4 x i16> %60 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 255, i32 255, i32 255, i32 255>
  %68 = shl nuw nsw <4 x i32> %66, <i32 8, i32 8, i32 8, i32 8>
  %69 = and <4 x i32> %68, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %70 = or <4 x i32> %69, %67
  %71 = bitcast i16* %54 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %74 = shufflevector <8 x i16> %72, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %75 = zext <4 x i16> %73 to <4 x i32>
  %76 = and <4 x i32> %75, <i32 255, i32 255, i32 255, i32 255>
  %77 = shl nuw nsw <4 x i32> %75, <i32 8, i32 8, i32 8, i32 8>
  %78 = and <4 x i32> %77, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %79 = or <4 x i32> %78, %76
  %80 = zext <4 x i16> %74 to <4 x i32>
  %81 = and <4 x i32> %80, <i32 255, i32 255, i32 255, i32 255>
  %82 = shl nuw nsw <4 x i32> %80, <i32 8, i32 8, i32 8, i32 8>
  %83 = and <4 x i32> %82, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %84 = or <4 x i32> %83, %81
  %85 = bitcast i16* %52 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2
  %87 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %88 = shufflevector <8 x i16> %86, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %89 = zext <4 x i16> %87 to <4 x i32>
  %90 = and <4 x i32> %89, <i32 255, i32 255, i32 255, i32 255>
  %91 = shl nuw nsw <4 x i32> %89, <i32 8, i32 8, i32 8, i32 8>
  %92 = and <4 x i32> %91, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %93 = or <4 x i32> %92, %90
  %94 = zext <4 x i16> %88 to <4 x i32>
  %95 = and <4 x i32> %94, <i32 255, i32 255, i32 255, i32 255>
  %96 = shl nuw nsw <4 x i32> %94, <i32 8, i32 8, i32 8, i32 8>
  %97 = and <4 x i32> %96, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %98 = or <4 x i32> %97, %95
  %99 = add nuw nsw <4 x i32> %84, %79
  %100 = shl nuw nsw <4 x i32> %99, <i32 1, i32 1, i32 1, i32 1>
  %101 = add nuw nsw <4 x i32> %70, %65
  %102 = add nuw nsw <4 x i32> %101, %93
  %103 = add nuw nsw <4 x i32> %102, %98
  %104 = add nuw nsw <4 x i32> %103, %100
  %105 = lshr <4 x i32> %104, <i32 3, i32 3, i32 3, i32 3>
  %106 = and <4 x i32> %105, <i32 255, i32 255, i32 255, i32 255>
  %107 = lshr <4 x i32> %104, <i32 11, i32 11, i32 11, i32 11>
  %108 = and <4 x i32> %107, <i32 65280, i32 65280, i32 65280, i32 65280>
  %109 = or <4 x i32> %108, %106
  %110 = trunc <4 x i32> %109 to <4 x i16>
  %111 = getelementptr inbounds i16, i16* %6, i64 %50
  %112 = bitcast i16* %111 to <4 x i16>*
  store <4 x i16> %110, <4 x i16>* %112, align 2, !alias.scope !217, !noalias !220
  %113 = add i64 %50, 4
  %114 = icmp eq i64 %113, %42
  br i1 %114, label %115, label %49, !llvm.loop !224

115:                                              ; preds = %49
  %116 = icmp eq i64 %42, %13
  br i1 %116, label %117, label %15

117:                                              ; preds = %118, %115, %4
  ret void

118:                                              ; preds = %15, %118
  %119 = phi i64 [ %178, %118 ], [ %16, %15 ]
  %120 = phi i16* [ %177, %118 ], [ %17, %15 ]
  %121 = phi i16* [ %176, %118 ], [ %18, %15 ]
  %122 = phi i16* [ %175, %118 ], [ %19, %15 ]
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = and i32 %124, 255
  %126 = shl nuw nsw i32 %124, 8
  %127 = and i32 %126, 16711680
  %128 = or i32 %127, %125
  %129 = getelementptr inbounds i16, i16* %122, i64 1
  %130 = load i16, i16* %129, align 2
  %131 = zext i16 %130 to i32
  %132 = and i32 %131, 255
  %133 = shl nuw nsw i32 %131, 8
  %134 = and i32 %133, 16711680
  %135 = or i32 %134, %132
  %136 = load i16, i16* %121, align 2
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 255
  %139 = shl nuw nsw i32 %137, 8
  %140 = and i32 %139, 16711680
  %141 = or i32 %140, %138
  %142 = getelementptr inbounds i16, i16* %121, i64 1
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = and i32 %144, 255
  %146 = shl nuw nsw i32 %144, 8
  %147 = and i32 %146, 16711680
  %148 = or i32 %147, %145
  %149 = load i16, i16* %120, align 2
  %150 = zext i16 %149 to i32
  %151 = and i32 %150, 255
  %152 = shl nuw nsw i32 %150, 8
  %153 = and i32 %152, 16711680
  %154 = or i32 %153, %151
  %155 = getelementptr inbounds i16, i16* %120, i64 1
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 255
  %159 = shl nuw nsw i32 %157, 8
  %160 = and i32 %159, 16711680
  %161 = or i32 %160, %158
  %162 = add nuw nsw i32 %148, %141
  %163 = shl nuw nsw i32 %162, 1
  %164 = add nuw nsw i32 %135, %128
  %165 = add nuw nsw i32 %164, %154
  %166 = add nuw nsw i32 %165, %161
  %167 = add nuw nsw i32 %166, %163
  %168 = lshr i32 %167, 3
  %169 = and i32 %168, 255
  %170 = lshr i32 %167, 11
  %171 = and i32 %170, 65280
  %172 = or i32 %171, %169
  %173 = trunc i32 %172 to i16
  %174 = getelementptr inbounds i16, i16* %6, i64 %119
  store i16 %173, i16* %174, align 2
  %175 = getelementptr inbounds i16, i16* %122, i64 2
  %176 = getelementptr inbounds i16, i16* %121, i64 2
  %177 = getelementptr inbounds i16, i16* %120, i64 2
  %178 = add nuw nsw i64 %119, 1
  %179 = icmp eq i64 %178, %13
  br i1 %179, label %117, label %118, !llvm.loop !225
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i32
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %74

10:                                               ; preds = %4
  %11 = shl nuw nsw i32 %8, 8
  %12 = and i32 %11, 16711680
  %13 = and i32 %8, 255
  %14 = or i32 %12, %13
  %15 = zext i32 %3 to i64
  %16 = icmp ult i32 %3, 8
  br i1 %16, label %17, label %21

17:                                               ; preds = %71, %21, %10
  %18 = phi i64 [ 0, %10 ], [ 0, %21 ], [ %32, %71 ]
  %19 = phi i16* [ %5, %10 ], [ %5, %21 ], [ %34, %71 ]
  %20 = phi i32 [ %14, %10 ], [ %14, %21 ], [ %73, %71 ]
  br label %75

21:                                               ; preds = %10
  %22 = shl nuw nsw i64 %15, 1
  %23 = getelementptr i8, i8* %0, i64 %22
  %24 = getelementptr i8, i8* %1, i64 2
  %25 = shl nuw nsw i64 %15, 2
  %26 = or i64 %25, 2
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = icmp ugt i8* %27, %0
  %29 = icmp ult i8* %24, %23
  %30 = and i1 %28, %29
  br i1 %30, label %17, label %31

31:                                               ; preds = %21
  %32 = and i64 %15, 4294967288
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i16, i16* %5, i64 %33
  %35 = insertelement <8 x i32> undef, i32 %14, i32 7
  %36 = getelementptr i8, i8* %1, i64 2
  %37 = bitcast i8* %36 to i16*
  br label %38

38:                                               ; preds = %38, %31
  %39 = phi i64 [ 0, %31 ], [ %69, %38 ]
  %40 = phi <8 x i32> [ %35, %31 ], [ %56, %38 ]
  %41 = shl i64 %39, 1
  %42 = getelementptr inbounds i16, i16* %37, i64 %41
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 2
  %45 = shufflevector <16 x i16> %44, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %46 = shufflevector <16 x i16> %44, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %47 = zext <8 x i16> %45 to <8 x i32>
  %48 = and <8 x i32> %47, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %49 = shl nuw nsw <8 x i32> %47, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %50 = and <8 x i32> %49, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %51 = or <8 x i32> %50, %48
  %52 = zext <8 x i16> %46 to <8 x i32>
  %53 = and <8 x i32> %52, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %54 = shl nuw nsw <8 x i32> %52, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %55 = and <8 x i32> %54, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %56 = or <8 x i32> %55, %53
  %57 = shufflevector <8 x i32> %40, <8 x i32> %56, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %58 = shl nuw nsw <8 x i32> %51, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %59 = add nsw <8 x i32> %56, %57
  %60 = add nsw <8 x i32> %59, %58
  %61 = lshr <8 x i32> %60, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %62 = and <8 x i32> %61, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %63 = lshr <8 x i32> %60, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %64 = and <8 x i32> %63, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %65 = or <8 x i32> %64, %62
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds i16, i16* %6, i64 %39
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 2, !alias.scope !226, !noalias !229
  %69 = add i64 %39, 8
  %70 = icmp eq i64 %69, %32
  br i1 %70, label %71, label %38, !llvm.loop !231

71:                                               ; preds = %38
  %72 = icmp eq i64 %32, %15
  %73 = extractelement <8 x i32> %56, i32 7
  br i1 %72, label %74, label %17

74:                                               ; preds = %75, %71, %4
  ret void

75:                                               ; preds = %17, %75
  %76 = phi i64 [ %103, %75 ], [ %18, %17 ]
  %77 = phi i16* [ %86, %75 ], [ %19, %17 ]
  %78 = phi i32 [ %92, %75 ], [ %20, %17 ]
  %79 = getelementptr inbounds i16, i16* %77, i64 1
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 255
  %83 = shl nuw nsw i32 %81, 8
  %84 = and i32 %83, 16711680
  %85 = or i32 %84, %82
  %86 = getelementptr inbounds i16, i16* %77, i64 2
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = and i32 %88, 255
  %90 = shl nuw nsw i32 %88, 8
  %91 = and i32 %90, 16711680
  %92 = or i32 %91, %89
  %93 = shl nuw nsw i32 %85, 1
  %94 = add nsw i32 %92, %78
  %95 = add nsw i32 %94, %93
  %96 = lshr i32 %95, 2
  %97 = and i32 %96, 255
  %98 = lshr i32 %95, 10
  %99 = and i32 %98, 65280
  %100 = or i32 %99, %97
  %101 = trunc i32 %100 to i16
  %102 = getelementptr inbounds i16, i16* %6, i64 %76
  store i16 %101, i16* %102, align 2
  %103 = add nuw nsw i64 %76, 1
  %104 = icmp eq i64 %103, %15
  br i1 %104, label %74, label %75, !llvm.loop !232
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = bitcast i8* %0 to i16*
  %9 = load i16, i16* %5, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16, i16* %7, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %115

14:                                               ; preds = %4
  %15 = shl nuw nsw i32 %12, 8
  %16 = and i32 %15, 16711680
  %17 = and i32 %12, 255
  %18 = or i32 %16, %17
  %19 = shl nuw nsw i32 %10, 8
  %20 = and i32 %19, 16711680
  %21 = and i32 %10, 255
  %22 = or i32 %20, %21
  %23 = add nuw nsw i32 %18, %22
  %24 = zext i32 %3 to i64
  %25 = icmp ult i32 %3, 8
  br i1 %25, label %26, label %31

26:                                               ; preds = %112, %31, %14
  %27 = phi i64 [ 0, %14 ], [ 0, %31 ], [ %51, %112 ]
  %28 = phi i16* [ %5, %14 ], [ %5, %31 ], [ %53, %112 ]
  %29 = phi i16* [ %7, %14 ], [ %7, %31 ], [ %55, %112 ]
  %30 = phi i32 [ %23, %14 ], [ %23, %31 ], [ %114, %112 ]
  br label %116

31:                                               ; preds = %14
  %32 = shl nuw nsw i64 %24, 1
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = add i64 %2, 2
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = shl nuw nsw i64 %24, 2
  %37 = add i64 %36, %2
  %38 = add i64 %37, 2
  %39 = getelementptr i8, i8* %1, i64 %38
  %40 = getelementptr i8, i8* %1, i64 2
  %41 = or i64 %36, 2
  %42 = getelementptr i8, i8* %1, i64 %41
  %43 = icmp ugt i8* %39, %0
  %44 = icmp ult i8* %35, %33
  %45 = and i1 %43, %44
  %46 = icmp ugt i8* %42, %0
  %47 = icmp ult i8* %40, %33
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  br i1 %49, label %26, label %50

50:                                               ; preds = %31
  %51 = and i64 %24, 4294967288
  %52 = shl nuw nsw i64 %51, 1
  %53 = getelementptr i16, i16* %5, i64 %52
  %54 = shl nuw nsw i64 %51, 1
  %55 = getelementptr i16, i16* %7, i64 %54
  %56 = insertelement <8 x i32> undef, i32 %23, i32 7
  %57 = getelementptr i8, i8* %1, i64 2
  %58 = bitcast i8* %57 to i16*
  %59 = getelementptr i8, i8* %6, i64 2
  %60 = bitcast i8* %59 to i16*
  br label %61

61:                                               ; preds = %61, %50
  %62 = phi i64 [ 0, %50 ], [ %110, %61 ]
  %63 = phi <8 x i32> [ %56, %50 ], [ %96, %61 ]
  %64 = shl i64 %62, 1
  %65 = shl i64 %62, 1
  %66 = getelementptr inbounds i16, i16* %58, i64 %64
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %70 = shufflevector <16 x i16> %68, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %71 = zext <8 x i16> %69 to <8 x i32>
  %72 = and <8 x i32> %71, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %73 = shl nuw nsw <8 x i32> %71, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %74 = and <8 x i32> %73, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %75 = or <8 x i32> %74, %72
  %76 = getelementptr inbounds i16, i16* %60, i64 %65
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 2
  %79 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %80 = shufflevector <16 x i16> %78, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %81 = zext <8 x i16> %79 to <8 x i32>
  %82 = and <8 x i32> %81, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %83 = shl nuw nsw <8 x i32> %81, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %84 = and <8 x i32> %83, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %85 = or <8 x i32> %84, %82
  %86 = zext <8 x i16> %70 to <8 x i32>
  %87 = and <8 x i32> %86, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %88 = shl nuw nsw <8 x i32> %86, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %89 = and <8 x i32> %88, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %90 = or <8 x i32> %89, %87
  %91 = zext <8 x i16> %80 to <8 x i32>
  %92 = and <8 x i32> %91, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %93 = shl nuw nsw <8 x i32> %91, <i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  %94 = and <8 x i32> %93, <i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %95 = or <8 x i32> %94, %92
  %96 = add nuw nsw <8 x i32> %95, %90
  %97 = shufflevector <8 x i32> %63, <8 x i32> %96, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %98 = add nuw nsw <8 x i32> %85, %75
  %99 = shl nuw nsw <8 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = add nsw <8 x i32> %96, %97
  %101 = add nsw <8 x i32> %100, %99
  %102 = lshr <8 x i32> %101, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %103 = and <8 x i32> %102, <i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255, i32 255>
  %104 = lshr <8 x i32> %101, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %105 = and <8 x i32> %104, <i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280, i32 65280>
  %106 = or <8 x i32> %105, %103
  %107 = trunc <8 x i32> %106 to <8 x i16>
  %108 = getelementptr inbounds i16, i16* %8, i64 %62
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %109, align 2, !alias.scope !233, !noalias !236
  %110 = add i64 %62, 8
  %111 = icmp eq i64 %110, %51
  br i1 %111, label %112, label %61, !llvm.loop !239

112:                                              ; preds = %61
  %113 = icmp eq i64 %51, %24
  %114 = extractelement <8 x i32> %96, i32 7
  br i1 %113, label %115, label %26

115:                                              ; preds = %116, %112, %4
  ret void

116:                                              ; preds = %26, %116
  %117 = phi i64 [ %161, %116 ], [ %27, %26 ]
  %118 = phi i16* [ %135, %116 ], [ %28, %26 ]
  %119 = phi i16* [ %142, %116 ], [ %29, %26 ]
  %120 = phi i32 [ %149, %116 ], [ %30, %26 ]
  %121 = getelementptr inbounds i16, i16* %118, i64 1
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = and i32 %123, 255
  %125 = shl nuw nsw i32 %123, 8
  %126 = and i32 %125, 16711680
  %127 = or i32 %126, %124
  %128 = getelementptr inbounds i16, i16* %119, i64 1
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = and i32 %130, 255
  %132 = shl nuw nsw i32 %130, 8
  %133 = and i32 %132, 16711680
  %134 = or i32 %133, %131
  %135 = getelementptr inbounds i16, i16* %118, i64 2
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = and i32 %137, 255
  %139 = shl nuw nsw i32 %137, 8
  %140 = and i32 %139, 16711680
  %141 = or i32 %140, %138
  %142 = getelementptr inbounds i16, i16* %119, i64 2
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = and i32 %144, 255
  %146 = shl nuw nsw i32 %144, 8
  %147 = and i32 %146, 16711680
  %148 = or i32 %147, %145
  %149 = add nuw nsw i32 %148, %141
  %150 = add nuw nsw i32 %134, %127
  %151 = shl nuw nsw i32 %150, 1
  %152 = add nsw i32 %149, %120
  %153 = add nsw i32 %152, %151
  %154 = lshr i32 %153, 3
  %155 = and i32 %154, 255
  %156 = lshr i32 %153, 11
  %157 = and i32 %156, 65280
  %158 = or i32 %157, %155
  %159 = trunc i32 %158 to i16
  %160 = getelementptr inbounds i16, i16* %8, i64 %117
  store i16 %159, i16* %160, align 2
  %161 = add nuw nsw i64 %117, 1
  %162 = icmp eq i64 %161, %24
  br i1 %162, label %115, label %116, !llvm.loop !240
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I18ColorTypeFilter_88EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %0 to i16*
  %11 = load i16, i16* %5, align 2
  %12 = zext i16 %11 to i32
  %13 = load i16, i16* %7, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16, i16* %9, align 2
  %16 = zext i16 %15 to i32
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %160

18:                                               ; preds = %4
  %19 = shl nuw nsw i32 %16, 8
  %20 = and i32 %19, 16711680
  %21 = and i32 %16, 255
  %22 = or i32 %20, %21
  %23 = shl nuw nsw i32 %12, 8
  %24 = and i32 %23, 16711680
  %25 = and i32 %12, 255
  %26 = or i32 %24, %25
  %27 = add nuw nsw i32 %22, %26
  %28 = shl nuw nsw i32 %14, 8
  %29 = and i32 %28, 16711680
  %30 = and i32 %14, 255
  %31 = or i32 %29, %30
  %32 = shl nuw nsw i32 %31, 1
  %33 = add nuw nsw i32 %27, %32
  %34 = zext i32 %3 to i64
  %35 = icmp ult i32 %3, 4
  br i1 %35, label %36, label %42

36:                                               ; preds = %157, %42, %18
  %37 = phi i64 [ 0, %18 ], [ 0, %42 ], [ %72, %157 ]
  %38 = phi i16* [ %5, %18 ], [ %5, %42 ], [ %74, %157 ]
  %39 = phi i16* [ %7, %18 ], [ %7, %42 ], [ %76, %157 ]
  %40 = phi i32 [ %33, %18 ], [ %33, %42 ], [ %159, %157 ]
  %41 = phi i16* [ %9, %18 ], [ %9, %42 ], [ %78, %157 ]
  br label %161

42:                                               ; preds = %18
  %43 = shl nuw nsw i64 %34, 1
  %44 = getelementptr i8, i8* %0, i64 %43
  %45 = shl i64 %2, 1
  %46 = add i64 %45, 2
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = shl nuw nsw i64 %34, 2
  %49 = add i64 %48, %45
  %50 = add i64 %49, 2
  %51 = getelementptr i8, i8* %1, i64 %50
  %52 = add i64 %2, 2
  %53 = getelementptr i8, i8* %1, i64 %52
  %54 = add i64 %48, %2
  %55 = add i64 %54, 2
  %56 = getelementptr i8, i8* %1, i64 %55
  %57 = getelementptr i8, i8* %1, i64 2
  %58 = or i64 %48, 2
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = icmp ugt i8* %51, %0
  %61 = icmp ult i8* %47, %44
  %62 = and i1 %60, %61
  %63 = icmp ugt i8* %56, %0
  %64 = icmp ult i8* %53, %44
  %65 = and i1 %63, %64
  %66 = or i1 %62, %65
  %67 = icmp ugt i8* %59, %0
  %68 = icmp ult i8* %57, %44
  %69 = and i1 %67, %68
  %70 = or i1 %66, %69
  br i1 %70, label %36, label %71

71:                                               ; preds = %42
  %72 = and i64 %34, 4294967292
  %73 = shl nuw nsw i64 %72, 1
  %74 = getelementptr i16, i16* %5, i64 %73
  %75 = shl nuw nsw i64 %72, 1
  %76 = getelementptr i16, i16* %7, i64 %75
  %77 = shl nuw nsw i64 %72, 1
  %78 = getelementptr i16, i16* %9, i64 %77
  %79 = insertelement <4 x i32> undef, i32 %33, i32 3
  %80 = getelementptr i8, i8* %1, i64 2
  %81 = bitcast i8* %80 to i16*
  %82 = getelementptr i8, i8* %6, i64 2
  %83 = bitcast i8* %82 to i16*
  %84 = getelementptr i8, i8* %8, i64 2
  %85 = bitcast i8* %84 to i16*
  br label %86

86:                                               ; preds = %86, %71
  %87 = phi i64 [ 0, %71 ], [ %155, %86 ]
  %88 = phi <4 x i32> [ %79, %71 ], [ %143, %86 ]
  %89 = shl i64 %87, 1
  %90 = shl i64 %87, 1
  %91 = shl i64 %87, 1
  %92 = getelementptr inbounds i16, i16* %81, i64 %89
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %96 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %97 = zext <4 x i16> %95 to <4 x i32>
  %98 = and <4 x i32> %97, <i32 255, i32 255, i32 255, i32 255>
  %99 = shl nuw nsw <4 x i32> %97, <i32 8, i32 8, i32 8, i32 8>
  %100 = and <4 x i32> %99, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %101 = or <4 x i32> %100, %98
  %102 = getelementptr inbounds i16, i16* %83, i64 %90
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 2
  %105 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %106 = shufflevector <8 x i16> %104, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %107 = zext <4 x i16> %105 to <4 x i32>
  %108 = and <4 x i32> %107, <i32 255, i32 255, i32 255, i32 255>
  %109 = shl nuw nsw <4 x i32> %107, <i32 8, i32 8, i32 8, i32 8>
  %110 = and <4 x i32> %109, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %111 = or <4 x i32> %110, %108
  %112 = getelementptr inbounds i16, i16* %85, i64 %91
  %113 = bitcast i16* %112 to <8 x i16>*
  %114 = load <8 x i16>, <8 x i16>* %113, align 2
  %115 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %116 = shufflevector <8 x i16> %114, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %117 = zext <4 x i16> %115 to <4 x i32>
  %118 = and <4 x i32> %117, <i32 255, i32 255, i32 255, i32 255>
  %119 = shl nuw nsw <4 x i32> %117, <i32 8, i32 8, i32 8, i32 8>
  %120 = and <4 x i32> %119, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %121 = or <4 x i32> %120, %118
  %122 = shl nuw nsw <4 x i32> %111, <i32 1, i32 1, i32 1, i32 1>
  %123 = add nuw nsw <4 x i32> %121, %101
  %124 = add nuw nsw <4 x i32> %123, %122
  %125 = shl nuw nsw <4 x i32> %124, <i32 1, i32 1, i32 1, i32 1>
  %126 = zext <4 x i16> %96 to <4 x i32>
  %127 = and <4 x i32> %126, <i32 255, i32 255, i32 255, i32 255>
  %128 = shl nuw nsw <4 x i32> %126, <i32 8, i32 8, i32 8, i32 8>
  %129 = and <4 x i32> %128, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %130 = or <4 x i32> %129, %127
  %131 = zext <4 x i16> %106 to <4 x i32>
  %132 = and <4 x i32> %131, <i32 255, i32 255, i32 255, i32 255>
  %133 = shl nuw nsw <4 x i32> %131, <i32 8, i32 8, i32 8, i32 8>
  %134 = and <4 x i32> %133, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %135 = or <4 x i32> %134, %132
  %136 = zext <4 x i16> %116 to <4 x i32>
  %137 = and <4 x i32> %136, <i32 255, i32 255, i32 255, i32 255>
  %138 = shl nuw nsw <4 x i32> %136, <i32 8, i32 8, i32 8, i32 8>
  %139 = and <4 x i32> %138, <i32 16711680, i32 16711680, i32 16711680, i32 16711680>
  %140 = or <4 x i32> %139, %137
  %141 = shl nuw nsw <4 x i32> %135, <i32 1, i32 1, i32 1, i32 1>
  %142 = add nuw nsw <4 x i32> %140, %130
  %143 = add nuw nsw <4 x i32> %142, %141
  %144 = shufflevector <4 x i32> %88, <4 x i32> %143, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %145 = add nsw <4 x i32> %125, %144
  %146 = add nsw <4 x i32> %145, %143
  %147 = lshr <4 x i32> %146, <i32 4, i32 4, i32 4, i32 4>
  %148 = and <4 x i32> %147, <i32 255, i32 255, i32 255, i32 255>
  %149 = lshr <4 x i32> %146, <i32 12, i32 12, i32 12, i32 12>
  %150 = and <4 x i32> %149, <i32 65280, i32 65280, i32 65280, i32 65280>
  %151 = or <4 x i32> %150, %148
  %152 = trunc <4 x i32> %151 to <4 x i16>
  %153 = getelementptr inbounds i16, i16* %10, i64 %87
  %154 = bitcast i16* %153 to <4 x i16>*
  store <4 x i16> %152, <4 x i16>* %154, align 2, !alias.scope !241, !noalias !244
  %155 = add i64 %87, 4
  %156 = icmp eq i64 %155, %72
  br i1 %156, label %157, label %86, !llvm.loop !248

157:                                              ; preds = %86
  %158 = icmp eq i64 %72, %34
  %159 = extractelement <4 x i32> %143, i32 3
  br i1 %158, label %160, label %36

160:                                              ; preds = %161, %157, %4
  ret void

161:                                              ; preds = %36, %161
  %162 = phi i64 [ %225, %161 ], [ %37, %36 ]
  %163 = phi i16* [ %192, %161 ], [ %38, %36 ]
  %164 = phi i16* [ %199, %161 ], [ %39, %36 ]
  %165 = phi i32 [ %215, %161 ], [ %40, %36 ]
  %166 = phi i16* [ %206, %161 ], [ %41, %36 ]
  %167 = getelementptr inbounds i16, i16* %163, i64 1
  %168 = load i16, i16* %167, align 2
  %169 = zext i16 %168 to i32
  %170 = and i32 %169, 255
  %171 = shl nuw nsw i32 %169, 8
  %172 = and i32 %171, 16711680
  %173 = or i32 %172, %170
  %174 = getelementptr inbounds i16, i16* %164, i64 1
  %175 = load i16, i16* %174, align 2
  %176 = zext i16 %175 to i32
  %177 = and i32 %176, 255
  %178 = shl nuw nsw i32 %176, 8
  %179 = and i32 %178, 16711680
  %180 = or i32 %179, %177
  %181 = getelementptr inbounds i16, i16* %166, i64 1
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = and i32 %183, 255
  %185 = shl nuw nsw i32 %183, 8
  %186 = and i32 %185, 16711680
  %187 = or i32 %186, %184
  %188 = shl nuw nsw i32 %180, 1
  %189 = add nuw nsw i32 %187, %173
  %190 = add nuw nsw i32 %189, %188
  %191 = shl nuw nsw i32 %190, 1
  %192 = getelementptr inbounds i16, i16* %163, i64 2
  %193 = load i16, i16* %192, align 2
  %194 = zext i16 %193 to i32
  %195 = and i32 %194, 255
  %196 = shl nuw nsw i32 %194, 8
  %197 = and i32 %196, 16711680
  %198 = or i32 %197, %195
  %199 = getelementptr inbounds i16, i16* %164, i64 2
  %200 = load i16, i16* %199, align 2
  %201 = zext i16 %200 to i32
  %202 = and i32 %201, 255
  %203 = shl nuw nsw i32 %201, 8
  %204 = and i32 %203, 16711680
  %205 = or i32 %204, %202
  %206 = getelementptr inbounds i16, i16* %166, i64 2
  %207 = load i16, i16* %206, align 2
  %208 = zext i16 %207 to i32
  %209 = and i32 %208, 255
  %210 = shl nuw nsw i32 %208, 8
  %211 = and i32 %210, 16711680
  %212 = or i32 %211, %209
  %213 = shl nuw nsw i32 %205, 1
  %214 = add nuw nsw i32 %212, %198
  %215 = add nuw nsw i32 %214, %213
  %216 = add nsw i32 %191, %165
  %217 = add nsw i32 %216, %215
  %218 = lshr i32 %217, 4
  %219 = and i32 %218, 255
  %220 = lshr i32 %217, 12
  %221 = and i32 %220, 65280
  %222 = or i32 %221, %219
  %223 = trunc i32 %222 to i16
  %224 = getelementptr inbounds i16, i16* %10, i64 %162
  store i16 %223, i16* %224, align 2
  %225 = add nuw nsw i64 %162, 1
  %226 = icmp eq i64 %225, %34
  br i1 %226, label %160, label %161, !llvm.loop !249
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %83

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 5
  br i1 %12, label %13, label %38

13:                                               ; preds = %63, %38, %7
  %14 = phi i64 [ 0, %38 ], [ 0, %7 ], [ %58, %63 ]
  %15 = phi i32* [ %10, %38 ], [ %10, %7 ], [ %60, %63 ]
  %16 = phi i32* [ %9, %38 ], [ %9, %7 ], [ %62, %63 ]
  %17 = sub nsw i64 %11, %14
  %18 = xor i64 %14, -1
  %19 = and i64 %17, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %32, label %21

21:                                               ; preds = %13
  %22 = load i32, i32* %15, align 4
  %23 = and i32 %22, 65535
  %24 = load i32, i32* %16, align 4
  %25 = and i32 %24, 65535
  %26 = add nuw nsw i32 %25, %23
  %27 = lshr i32 %26, 1
  %28 = getelementptr inbounds i32, i32* %5, i64 %14
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds i32, i32* %15, i64 2
  %30 = getelementptr inbounds i32, i32* %16, i64 2
  %31 = add nuw nsw i64 %14, 1
  br label %32

32:                                               ; preds = %13, %21
  %33 = phi i64 [ %14, %13 ], [ %31, %21 ]
  %34 = phi i32* [ %15, %13 ], [ %29, %21 ]
  %35 = phi i32* [ %16, %13 ], [ %30, %21 ]
  %36 = sub nsw i64 0, %11
  %37 = icmp eq i64 %18, %36
  br i1 %37, label %83, label %84

38:                                               ; preds = %7
  %39 = shl nuw nsw i64 %11, 2
  %40 = getelementptr i8, i8* %0, i64 %39
  %41 = shl nuw nsw i64 %11, 3
  %42 = add i64 %41, %2
  %43 = add i64 %42, -4
  %44 = getelementptr i8, i8* %1, i64 %43
  %45 = add nsw i64 %41, -4
  %46 = getelementptr i8, i8* %1, i64 %45
  %47 = icmp ugt i8* %44, %0
  %48 = icmp ult i8* %8, %40
  %49 = and i1 %47, %48
  %50 = icmp ugt i8* %46, %0
  %51 = icmp ugt i8* %40, %1
  %52 = and i1 %50, %51
  %53 = or i1 %49, %52
  br i1 %53, label %13, label %54

54:                                               ; preds = %38
  %55 = and i64 %11, 3
  %56 = icmp eq i64 %55, 0
  %57 = select i1 %56, i64 4, i64 %55
  %58 = sub nsw i64 %11, %57
  %59 = shl nsw i64 %58, 1
  %60 = getelementptr i32, i32* %10, i64 %59
  %61 = shl nsw i64 %58, 1
  %62 = getelementptr i32, i32* %9, i64 %61
  br label %63

63:                                               ; preds = %63, %54
  %64 = phi i64 [ 0, %54 ], [ %81, %63 ]
  %65 = shl i64 %64, 1
  %66 = getelementptr i32, i32* %10, i64 %65
  %67 = shl i64 %64, 1
  %68 = getelementptr i32, i32* %9, i64 %67
  %69 = bitcast i32* %66 to <8 x i32>*
  %70 = load <8 x i32>, <8 x i32>* %69, align 4
  %71 = shufflevector <8 x i32> %70, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %72 = and <4 x i32> %71, <i32 65535, i32 65535, i32 65535, i32 65535>
  %73 = bitcast i32* %68 to <8 x i32>*
  %74 = load <8 x i32>, <8 x i32>* %73, align 4
  %75 = shufflevector <8 x i32> %74, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %76 = and <4 x i32> %75, <i32 65535, i32 65535, i32 65535, i32 65535>
  %77 = add nuw nsw <4 x i32> %76, %72
  %78 = lshr <4 x i32> %77, <i32 1, i32 1, i32 1, i32 1>
  %79 = getelementptr inbounds i32, i32* %5, i64 %64
  %80 = bitcast i32* %79 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %80, align 4, !alias.scope !250, !noalias !253
  %81 = add i64 %64, 4
  %82 = icmp eq i64 %81, %58
  br i1 %82, label %13, label %63, !llvm.loop !256

83:                                               ; preds = %32, %84, %4
  ret void

84:                                               ; preds = %32, %84
  %85 = phi i64 [ %107, %84 ], [ %33, %32 ]
  %86 = phi i32* [ %105, %84 ], [ %34, %32 ]
  %87 = phi i32* [ %106, %84 ], [ %35, %32 ]
  %88 = load i32, i32* %86, align 4
  %89 = and i32 %88, 65535
  %90 = load i32, i32* %87, align 4
  %91 = and i32 %90, 65535
  %92 = add nuw nsw i32 %91, %89
  %93 = lshr i32 %92, 1
  %94 = getelementptr inbounds i32, i32* %5, i64 %85
  store i32 %93, i32* %94, align 4
  %95 = getelementptr inbounds i32, i32* %86, i64 2
  %96 = getelementptr inbounds i32, i32* %87, i64 2
  %97 = add nuw nsw i64 %85, 1
  %98 = load i32, i32* %95, align 4
  %99 = and i32 %98, 65535
  %100 = load i32, i32* %96, align 4
  %101 = and i32 %100, 65535
  %102 = add nuw nsw i32 %101, %99
  %103 = lshr i32 %102, 1
  %104 = getelementptr inbounds i32, i32* %5, i64 %97
  store i32 %103, i32* %104, align 4
  %105 = getelementptr inbounds i32, i32* %86, i64 4
  %106 = getelementptr inbounds i32, i32* %87, i64 4
  %107 = add nuw nsw i64 %85, 2
  %108 = icmp eq i64 %107, %11
  br i1 %108, label %83, label %84, !llvm.loop !257
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %110

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 5
  br i1 %14, label %15, label %47

15:                                               ; preds = %82, %47, %8
  %16 = phi i64 [ 0, %47 ], [ 0, %8 ], [ %75, %82 ]
  %17 = phi i32* [ %10, %47 ], [ %10, %8 ], [ %77, %82 ]
  %18 = phi i32* [ %11, %47 ], [ %11, %8 ], [ %79, %82 ]
  %19 = phi i32* [ %12, %47 ], [ %12, %8 ], [ %81, %82 ]
  %20 = sub nsw i64 %13, %16
  %21 = xor i64 %16, -1
  %22 = and i64 %20, 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %40, label %24

24:                                               ; preds = %15
  %25 = load i32, i32* %19, align 4
  %26 = and i32 %25, 65535
  %27 = load i32, i32* %18, align 4
  %28 = load i32, i32* %17, align 4
  %29 = and i32 %28, 65535
  %30 = shl i32 %27, 1
  %31 = and i32 %30, 131070
  %32 = add nuw nsw i32 %29, %26
  %33 = add nuw nsw i32 %32, %31
  %34 = lshr i32 %33, 2
  %35 = getelementptr inbounds i32, i32* %6, i64 %16
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds i32, i32* %19, i64 2
  %37 = getelementptr inbounds i32, i32* %18, i64 2
  %38 = getelementptr inbounds i32, i32* %17, i64 2
  %39 = add nuw nsw i64 %16, 1
  br label %40

40:                                               ; preds = %15, %24
  %41 = phi i64 [ %16, %15 ], [ %39, %24 ]
  %42 = phi i32* [ %17, %15 ], [ %38, %24 ]
  %43 = phi i32* [ %18, %15 ], [ %37, %24 ]
  %44 = phi i32* [ %19, %15 ], [ %36, %24 ]
  %45 = sub nsw i64 0, %13
  %46 = icmp eq i64 %21, %45
  br i1 %46, label %110, label %111

47:                                               ; preds = %8
  %48 = shl nuw nsw i64 %13, 2
  %49 = getelementptr i8, i8* %0, i64 %48
  %50 = shl nuw nsw i64 %13, 3
  %51 = shl i64 %2, 1
  %52 = add i64 %50, %51
  %53 = add i64 %52, -4
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = add i64 %50, %2
  %56 = add i64 %55, -4
  %57 = getelementptr i8, i8* %1, i64 %56
  %58 = add nsw i64 %50, -4
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = icmp ugt i8* %54, %0
  %61 = icmp ult i8* %9, %49
  %62 = and i1 %60, %61
  %63 = icmp ugt i8* %57, %0
  %64 = icmp ult i8* %5, %49
  %65 = and i1 %63, %64
  %66 = or i1 %62, %65
  %67 = icmp ugt i8* %59, %0
  %68 = icmp ugt i8* %49, %1
  %69 = and i1 %67, %68
  %70 = or i1 %66, %69
  br i1 %70, label %15, label %71

71:                                               ; preds = %47
  %72 = and i64 %13, 3
  %73 = icmp eq i64 %72, 0
  %74 = select i1 %73, i64 4, i64 %72
  %75 = sub nsw i64 %13, %74
  %76 = shl nsw i64 %75, 1
  %77 = getelementptr i32, i32* %10, i64 %76
  %78 = shl nsw i64 %75, 1
  %79 = getelementptr i32, i32* %11, i64 %78
  %80 = shl nsw i64 %75, 1
  %81 = getelementptr i32, i32* %12, i64 %80
  br label %82

82:                                               ; preds = %82, %71
  %83 = phi i64 [ 0, %71 ], [ %108, %82 ]
  %84 = shl i64 %83, 1
  %85 = getelementptr i32, i32* %10, i64 %84
  %86 = shl i64 %83, 1
  %87 = getelementptr i32, i32* %11, i64 %86
  %88 = shl i64 %83, 1
  %89 = getelementptr i32, i32* %12, i64 %88
  %90 = bitcast i32* %89 to <8 x i32>*
  %91 = load <8 x i32>, <8 x i32>* %90, align 4
  %92 = shufflevector <8 x i32> %91, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %93 = and <4 x i32> %92, <i32 65535, i32 65535, i32 65535, i32 65535>
  %94 = bitcast i32* %87 to <8 x i32>*
  %95 = load <8 x i32>, <8 x i32>* %94, align 4
  %96 = shufflevector <8 x i32> %95, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %97 = bitcast i32* %85 to <8 x i32>*
  %98 = load <8 x i32>, <8 x i32>* %97, align 4
  %99 = shufflevector <8 x i32> %98, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %100 = and <4 x i32> %99, <i32 65535, i32 65535, i32 65535, i32 65535>
  %101 = shl <4 x i32> %96, <i32 1, i32 1, i32 1, i32 1>
  %102 = and <4 x i32> %101, <i32 131070, i32 131070, i32 131070, i32 131070>
  %103 = add nuw nsw <4 x i32> %100, %93
  %104 = add nuw nsw <4 x i32> %103, %102
  %105 = lshr <4 x i32> %104, <i32 2, i32 2, i32 2, i32 2>
  %106 = getelementptr inbounds i32, i32* %6, i64 %83
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %105, <4 x i32>* %107, align 4, !alias.scope !258, !noalias !261
  %108 = add i64 %83, 4
  %109 = icmp eq i64 %108, %75
  br i1 %109, label %15, label %82, !llvm.loop !265

110:                                              ; preds = %40, %111, %4
  ret void

111:                                              ; preds = %40, %111
  %112 = phi i64 [ %145, %111 ], [ %41, %40 ]
  %113 = phi i32* [ %144, %111 ], [ %42, %40 ]
  %114 = phi i32* [ %143, %111 ], [ %43, %40 ]
  %115 = phi i32* [ %142, %111 ], [ %44, %40 ]
  %116 = load i32, i32* %115, align 4
  %117 = and i32 %116, 65535
  %118 = load i32, i32* %114, align 4
  %119 = load i32, i32* %113, align 4
  %120 = and i32 %119, 65535
  %121 = shl i32 %118, 1
  %122 = and i32 %121, 131070
  %123 = add nuw nsw i32 %120, %117
  %124 = add nuw nsw i32 %123, %122
  %125 = lshr i32 %124, 2
  %126 = getelementptr inbounds i32, i32* %6, i64 %112
  store i32 %125, i32* %126, align 4
  %127 = getelementptr inbounds i32, i32* %115, i64 2
  %128 = getelementptr inbounds i32, i32* %114, i64 2
  %129 = getelementptr inbounds i32, i32* %113, i64 2
  %130 = add nuw nsw i64 %112, 1
  %131 = load i32, i32* %127, align 4
  %132 = and i32 %131, 65535
  %133 = load i32, i32* %128, align 4
  %134 = load i32, i32* %129, align 4
  %135 = and i32 %134, 65535
  %136 = shl i32 %133, 1
  %137 = and i32 %136, 131070
  %138 = add nuw nsw i32 %135, %132
  %139 = add nuw nsw i32 %138, %137
  %140 = lshr i32 %139, 2
  %141 = getelementptr inbounds i32, i32* %6, i64 %130
  store i32 %140, i32* %141, align 4
  %142 = getelementptr inbounds i32, i32* %115, i64 4
  %143 = getelementptr inbounds i32, i32* %114, i64 4
  %144 = getelementptr inbounds i32, i32* %113, i64 4
  %145 = add nuw nsw i64 %112, 2
  %146 = icmp eq i64 %145, %13
  br i1 %146, label %110, label %111, !llvm.loop !266
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %101

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i32*
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 4
  br i1 %10, label %11, label %33

11:                                               ; preds = %99, %33, %7
  %12 = phi i64 [ 0, %33 ], [ 0, %7 ], [ %42, %99 ]
  %13 = phi i32* [ %8, %33 ], [ %8, %7 ], [ %44, %99 ]
  %14 = xor i64 %12, -1
  %15 = and i64 %9, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %28, label %17

17:                                               ; preds = %11
  %18 = load i32, i32* %13, align 4
  %19 = and i32 %18, 65535
  %20 = getelementptr inbounds i32, i32* %13, i64 1
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 65535
  %23 = add nuw nsw i32 %22, %19
  %24 = lshr i32 %23, 1
  %25 = getelementptr inbounds i32, i32* %5, i64 %12
  store i32 %24, i32* %25, align 4
  %26 = getelementptr inbounds i32, i32* %13, i64 2
  %27 = or i64 %12, 1
  br label %28

28:                                               ; preds = %11, %17
  %29 = phi i64 [ %12, %11 ], [ %27, %17 ]
  %30 = phi i32* [ %13, %11 ], [ %26, %17 ]
  %31 = sub nsw i64 0, %9
  %32 = icmp eq i64 %14, %31
  br i1 %32, label %101, label %102

33:                                               ; preds = %7
  %34 = shl nuw nsw i64 %9, 2
  %35 = getelementptr i8, i8* %0, i64 %34
  %36 = shl nuw nsw i64 %9, 3
  %37 = getelementptr i8, i8* %1, i64 %36
  %38 = icmp ugt i8* %37, %0
  %39 = icmp ugt i8* %35, %1
  %40 = and i1 %38, %39
  br i1 %40, label %11, label %41

41:                                               ; preds = %33
  %42 = and i64 %9, 4294967292
  %43 = shl nuw nsw i64 %42, 1
  %44 = getelementptr i32, i32* %8, i64 %43
  %45 = add nsw i64 %42, -4
  %46 = lshr exact i64 %45, 2
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 1
  %49 = icmp eq i64 %45, 0
  br i1 %49, label %83, label %50

50:                                               ; preds = %41
  %51 = sub nuw nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %80, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %81, %52 ]
  %55 = shl i64 %53, 1
  %56 = getelementptr i32, i32* %8, i64 %55
  %57 = bitcast i32* %56 to <8 x i32>*
  %58 = load <8 x i32>, <8 x i32>* %57, align 4
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i32> %58, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = and <4 x i32> %59, <i32 65535, i32 65535, i32 65535, i32 65535>
  %62 = and <4 x i32> %60, <i32 65535, i32 65535, i32 65535, i32 65535>
  %63 = add nuw nsw <4 x i32> %62, %61
  %64 = lshr <4 x i32> %63, <i32 1, i32 1, i32 1, i32 1>
  %65 = getelementptr inbounds i32, i32* %5, i64 %53
  %66 = bitcast i32* %65 to <4 x i32>*
  store <4 x i32> %64, <4 x i32>* %66, align 4, !alias.scope !267, !noalias !270
  %67 = or i64 %53, 4
  %68 = shl i64 %67, 1
  %69 = getelementptr i32, i32* %8, i64 %68
  %70 = bitcast i32* %69 to <8 x i32>*
  %71 = load <8 x i32>, <8 x i32>* %70, align 4
  %72 = shufflevector <8 x i32> %71, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %73 = shufflevector <8 x i32> %71, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %74 = and <4 x i32> %72, <i32 65535, i32 65535, i32 65535, i32 65535>
  %75 = and <4 x i32> %73, <i32 65535, i32 65535, i32 65535, i32 65535>
  %76 = add nuw nsw <4 x i32> %75, %74
  %77 = lshr <4 x i32> %76, <i32 1, i32 1, i32 1, i32 1>
  %78 = getelementptr inbounds i32, i32* %5, i64 %67
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> %77, <4 x i32>* %79, align 4, !alias.scope !267, !noalias !270
  %80 = add i64 %53, 8
  %81 = add i64 %54, -2
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %52, !llvm.loop !272

83:                                               ; preds = %52, %41
  %84 = phi i64 [ 0, %41 ], [ %80, %52 ]
  %85 = icmp eq i64 %48, 0
  br i1 %85, label %99, label %86

86:                                               ; preds = %83
  %87 = shl i64 %84, 1
  %88 = getelementptr i32, i32* %8, i64 %87
  %89 = bitcast i32* %88 to <8 x i32>*
  %90 = load <8 x i32>, <8 x i32>* %89, align 4
  %91 = shufflevector <8 x i32> %90, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %92 = shufflevector <8 x i32> %90, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %93 = and <4 x i32> %91, <i32 65535, i32 65535, i32 65535, i32 65535>
  %94 = and <4 x i32> %92, <i32 65535, i32 65535, i32 65535, i32 65535>
  %95 = add nuw nsw <4 x i32> %94, %93
  %96 = lshr <4 x i32> %95, <i32 1, i32 1, i32 1, i32 1>
  %97 = getelementptr inbounds i32, i32* %5, i64 %84
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %98, align 4, !alias.scope !267, !noalias !270
  br label %99

99:                                               ; preds = %83, %86
  %100 = icmp eq i64 %42, %9
  br i1 %100, label %101, label %11

101:                                              ; preds = %28, %102, %99, %4
  ret void

102:                                              ; preds = %28, %102
  %103 = phi i64 [ %124, %102 ], [ %29, %28 ]
  %104 = phi i32* [ %123, %102 ], [ %30, %28 ]
  %105 = load i32, i32* %104, align 4
  %106 = and i32 %105, 65535
  %107 = getelementptr inbounds i32, i32* %104, i64 1
  %108 = load i32, i32* %107, align 4
  %109 = and i32 %108, 65535
  %110 = add nuw nsw i32 %109, %106
  %111 = lshr i32 %110, 1
  %112 = getelementptr inbounds i32, i32* %5, i64 %103
  store i32 %111, i32* %112, align 4
  %113 = getelementptr inbounds i32, i32* %104, i64 2
  %114 = add nuw nsw i64 %103, 1
  %115 = load i32, i32* %113, align 4
  %116 = and i32 %115, 65535
  %117 = getelementptr inbounds i32, i32* %104, i64 3
  %118 = load i32, i32* %117, align 4
  %119 = and i32 %118, 65535
  %120 = add nuw nsw i32 %119, %116
  %121 = lshr i32 %120, 1
  %122 = getelementptr inbounds i32, i32* %5, i64 %114
  store i32 %121, i32* %122, align 4
  %123 = getelementptr inbounds i32, i32* %104, i64 4
  %124 = add nuw nsw i64 %103, 2
  %125 = icmp eq i64 %124, %9
  br i1 %125, label %101, label %102, !llvm.loop !273
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %66

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 4
  br i1 %12, label %13, label %17

13:                                               ; preds = %64, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %32, %64 ]
  %15 = phi i32* [ %10, %17 ], [ %10, %7 ], [ %34, %64 ]
  %16 = phi i32* [ %9, %17 ], [ %9, %7 ], [ %36, %64 ]
  br label %67

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 2
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 3
  %21 = add i64 %20, %2
  %22 = getelementptr i8, i8* %1, i64 %21
  %23 = getelementptr i8, i8* %1, i64 %20
  %24 = icmp ugt i8* %22, %0
  %25 = icmp ult i8* %8, %19
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %23, %0
  %28 = icmp ugt i8* %19, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %13, label %31

31:                                               ; preds = %17
  %32 = and i64 %11, 4294967292
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i32, i32* %10, i64 %33
  %35 = shl nuw nsw i64 %32, 1
  %36 = getelementptr i32, i32* %9, i64 %35
  br label %37

37:                                               ; preds = %37, %31
  %38 = phi i64 [ 0, %31 ], [ %62, %37 ]
  %39 = shl i64 %38, 1
  %40 = getelementptr i32, i32* %10, i64 %39
  %41 = shl i64 %38, 1
  %42 = getelementptr i32, i32* %9, i64 %41
  %43 = bitcast i32* %40 to <8 x i32>*
  %44 = load <8 x i32>, <8 x i32>* %43, align 4
  %45 = shufflevector <8 x i32> %44, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %46 = shufflevector <8 x i32> %44, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %47 = and <4 x i32> %45, <i32 65535, i32 65535, i32 65535, i32 65535>
  %48 = and <4 x i32> %46, <i32 65535, i32 65535, i32 65535, i32 65535>
  %49 = bitcast i32* %42 to <8 x i32>*
  %50 = load <8 x i32>, <8 x i32>* %49, align 4
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %52 = shufflevector <8 x i32> %50, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %53 = and <4 x i32> %51, <i32 65535, i32 65535, i32 65535, i32 65535>
  %54 = and <4 x i32> %52, <i32 65535, i32 65535, i32 65535, i32 65535>
  %55 = add nuw nsw <4 x i32> %48, %47
  %56 = add nuw nsw <4 x i32> %55, %53
  %57 = add nuw nsw <4 x i32> %56, %54
  %58 = lshr <4 x i32> %57, <i32 2, i32 2, i32 2, i32 2>
  %59 = and <4 x i32> %58, <i32 65535, i32 65535, i32 65535, i32 65535>
  %60 = getelementptr inbounds i32, i32* %5, i64 %38
  %61 = bitcast i32* %60 to <4 x i32>*
  store <4 x i32> %59, <4 x i32>* %61, align 4, !alias.scope !274, !noalias !277
  %62 = add i64 %38, 4
  %63 = icmp eq i64 %62, %32
  br i1 %63, label %64, label %37, !llvm.loop !280

64:                                               ; preds = %37
  %65 = icmp eq i64 %32, %11
  br i1 %65, label %66, label %13

66:                                               ; preds = %67, %64, %4
  ret void

67:                                               ; preds = %13, %67
  %68 = phi i64 [ %89, %67 ], [ %14, %13 ]
  %69 = phi i32* [ %87, %67 ], [ %15, %13 ]
  %70 = phi i32* [ %88, %67 ], [ %16, %13 ]
  %71 = load i32, i32* %69, align 4
  %72 = and i32 %71, 65535
  %73 = getelementptr inbounds i32, i32* %69, i64 1
  %74 = load i32, i32* %73, align 4
  %75 = and i32 %74, 65535
  %76 = load i32, i32* %70, align 4
  %77 = and i32 %76, 65535
  %78 = getelementptr inbounds i32, i32* %70, i64 1
  %79 = load i32, i32* %78, align 4
  %80 = and i32 %79, 65535
  %81 = add nuw nsw i32 %75, %72
  %82 = add nuw nsw i32 %81, %77
  %83 = add nuw nsw i32 %82, %80
  %84 = lshr i32 %83, 2
  %85 = and i32 %84, 65535
  %86 = getelementptr inbounds i32, i32* %5, i64 %68
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds i32, i32* %69, i64 2
  %88 = getelementptr inbounds i32, i32* %70, i64 2
  %89 = add nuw nsw i64 %68, 1
  %90 = icmp eq i64 %89, %11
  br i1 %90, label %66, label %67, !llvm.loop !281
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %89

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 4
  br i1 %14, label %15, label %20

15:                                               ; preds = %87, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %42, %87 ]
  %17 = phi i32* [ %10, %20 ], [ %10, %8 ], [ %44, %87 ]
  %18 = phi i32* [ %11, %20 ], [ %11, %8 ], [ %46, %87 ]
  %19 = phi i32* [ %12, %20 ], [ %12, %8 ], [ %48, %87 ]
  br label %90

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 3
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = add i64 %23, %2
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = getelementptr i8, i8* %1, i64 %23
  %30 = icmp ugt i8* %26, %0
  %31 = icmp ult i8* %9, %22
  %32 = and i1 %30, %31
  %33 = icmp ugt i8* %28, %0
  %34 = icmp ult i8* %5, %22
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  %37 = icmp ugt i8* %29, %0
  %38 = icmp ugt i8* %22, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %15, label %41

41:                                               ; preds = %20
  %42 = and i64 %13, 4294967292
  %43 = shl nuw nsw i64 %42, 1
  %44 = getelementptr i32, i32* %10, i64 %43
  %45 = shl nuw nsw i64 %42, 1
  %46 = getelementptr i32, i32* %11, i64 %45
  %47 = shl nuw nsw i64 %42, 1
  %48 = getelementptr i32, i32* %12, i64 %47
  br label %49

49:                                               ; preds = %49, %41
  %50 = phi i64 [ 0, %41 ], [ %85, %49 ]
  %51 = shl i64 %50, 1
  %52 = getelementptr i32, i32* %10, i64 %51
  %53 = shl i64 %50, 1
  %54 = getelementptr i32, i32* %11, i64 %53
  %55 = shl i64 %50, 1
  %56 = getelementptr i32, i32* %12, i64 %55
  %57 = bitcast i32* %56 to <8 x i32>*
  %58 = load <8 x i32>, <8 x i32>* %57, align 4
  %59 = shufflevector <8 x i32> %58, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = shufflevector <8 x i32> %58, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %61 = and <4 x i32> %59, <i32 65535, i32 65535, i32 65535, i32 65535>
  %62 = and <4 x i32> %60, <i32 65535, i32 65535, i32 65535, i32 65535>
  %63 = bitcast i32* %54 to <8 x i32>*
  %64 = load <8 x i32>, <8 x i32>* %63, align 4
  %65 = shufflevector <8 x i32> %64, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %66 = shufflevector <8 x i32> %64, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %67 = bitcast i32* %52 to <8 x i32>*
  %68 = load <8 x i32>, <8 x i32>* %67, align 4
  %69 = shufflevector <8 x i32> %68, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %70 = shufflevector <8 x i32> %68, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %71 = and <4 x i32> %69, <i32 65535, i32 65535, i32 65535, i32 65535>
  %72 = and <4 x i32> %70, <i32 65535, i32 65535, i32 65535, i32 65535>
  %73 = shl <4 x i32> %65, <i32 1, i32 1, i32 1, i32 1>
  %74 = and <4 x i32> %73, <i32 131070, i32 131070, i32 131070, i32 131070>
  %75 = shl <4 x i32> %66, <i32 1, i32 1, i32 1, i32 1>
  %76 = and <4 x i32> %75, <i32 131070, i32 131070, i32 131070, i32 131070>
  %77 = add nuw nsw <4 x i32> %62, %61
  %78 = add nuw nsw <4 x i32> %77, %74
  %79 = add nuw nsw <4 x i32> %78, %71
  %80 = add nuw nsw <4 x i32> %79, %76
  %81 = add nuw nsw <4 x i32> %80, %72
  %82 = lshr <4 x i32> %81, <i32 3, i32 3, i32 3, i32 3>
  %83 = getelementptr inbounds i32, i32* %6, i64 %50
  %84 = bitcast i32* %83 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %84, align 4, !alias.scope !282, !noalias !285
  %85 = add i64 %50, 4
  %86 = icmp eq i64 %85, %42
  br i1 %86, label %87, label %49, !llvm.loop !289

87:                                               ; preds = %49
  %88 = icmp eq i64 %42, %13
  br i1 %88, label %89, label %15

89:                                               ; preds = %90, %87, %4
  ret void

90:                                               ; preds = %15, %90
  %91 = phi i64 [ %122, %90 ], [ %16, %15 ]
  %92 = phi i32* [ %121, %90 ], [ %17, %15 ]
  %93 = phi i32* [ %120, %90 ], [ %18, %15 ]
  %94 = phi i32* [ %119, %90 ], [ %19, %15 ]
  %95 = load i32, i32* %94, align 4
  %96 = and i32 %95, 65535
  %97 = getelementptr inbounds i32, i32* %94, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = and i32 %98, 65535
  %100 = load i32, i32* %93, align 4
  %101 = getelementptr inbounds i32, i32* %93, i64 1
  %102 = load i32, i32* %101, align 4
  %103 = load i32, i32* %92, align 4
  %104 = and i32 %103, 65535
  %105 = getelementptr inbounds i32, i32* %92, i64 1
  %106 = load i32, i32* %105, align 4
  %107 = and i32 %106, 65535
  %108 = shl i32 %100, 1
  %109 = and i32 %108, 131070
  %110 = shl i32 %102, 1
  %111 = and i32 %110, 131070
  %112 = add nuw nsw i32 %99, %96
  %113 = add nuw nsw i32 %112, %109
  %114 = add nuw nsw i32 %113, %104
  %115 = add nuw nsw i32 %114, %111
  %116 = add nuw nsw i32 %115, %107
  %117 = lshr i32 %116, 3
  %118 = getelementptr inbounds i32, i32* %6, i64 %91
  store i32 %117, i32* %118, align 4
  %119 = getelementptr inbounds i32, i32* %94, i64 2
  %120 = getelementptr inbounds i32, i32* %93, i64 2
  %121 = getelementptr inbounds i32, i32* %92, i64 2
  %122 = add nuw nsw i64 %91, 1
  %123 = icmp eq i64 %122, %13
  br i1 %123, label %89, label %90, !llvm.loop !290
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %88

8:                                                ; preds = %4
  %9 = load i32, i32* %5, align 4
  %10 = and i32 %9, 65535
  %11 = zext i32 %10 to i64
  %12 = zext i32 %3 to i64
  %13 = icmp ult i32 %3, 4
  br i1 %13, label %14, label %44

14:                                               ; preds = %85, %44, %8
  %15 = phi i64 [ 0, %8 ], [ 0, %44 ], [ %55, %85 ]
  %16 = phi i32* [ %5, %8 ], [ %5, %44 ], [ %57, %85 ]
  %17 = phi i64 [ %11, %8 ], [ %11, %44 ], [ %87, %85 ]
  %18 = xor i64 %15, -1
  %19 = and i64 %12, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds i32, i32* %16, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i32, i32* %16, i64 2
  %25 = load i32, i32* %24, align 4
  %26 = and i32 %25, 65535
  %27 = zext i32 %26 to i64
  %28 = shl i32 %23, 1
  %29 = and i32 %28, 131070
  %30 = zext i32 %29 to i64
  %31 = add nuw nsw i64 %17, %27
  %32 = add nuw nsw i64 %31, %30
  %33 = lshr i64 %32, 2
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 65535
  %36 = getelementptr inbounds i32, i32* %6, i64 %15
  store i32 %35, i32* %36, align 4
  %37 = or i64 %15, 1
  br label %38

38:                                               ; preds = %14, %21
  %39 = phi i64 [ %15, %14 ], [ %37, %21 ]
  %40 = phi i32* [ %16, %14 ], [ %24, %21 ]
  %41 = phi i64 [ %17, %14 ], [ %27, %21 ]
  %42 = sub nsw i64 0, %12
  %43 = icmp eq i64 %18, %42
  br i1 %43, label %88, label %89

44:                                               ; preds = %8
  %45 = shl nuw nsw i64 %12, 2
  %46 = getelementptr i8, i8* %0, i64 %45
  %47 = getelementptr i8, i8* %1, i64 4
  %48 = shl nuw nsw i64 %12, 3
  %49 = or i64 %48, 4
  %50 = getelementptr i8, i8* %1, i64 %49
  %51 = icmp ugt i8* %50, %0
  %52 = icmp ult i8* %47, %46
  %53 = and i1 %51, %52
  br i1 %53, label %14, label %54

54:                                               ; preds = %44
  %55 = and i64 %12, 4294967292
  %56 = shl nuw nsw i64 %55, 1
  %57 = getelementptr i32, i32* %5, i64 %56
  %58 = insertelement <4 x i64> undef, i64 %11, i32 3
  %59 = getelementptr i8, i8* %1, i64 4
  %60 = bitcast i8* %59 to i32*
  br label %61

61:                                               ; preds = %61, %54
  %62 = phi i64 [ 0, %54 ], [ %83, %61 ]
  %63 = phi <4 x i64> [ %58, %54 ], [ %71, %61 ]
  %64 = shl i64 %62, 1
  %65 = getelementptr inbounds i32, i32* %60, i64 %64
  %66 = bitcast i32* %65 to <8 x i32>*
  %67 = load <8 x i32>, <8 x i32>* %66, align 4
  %68 = shufflevector <8 x i32> %67, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %69 = shufflevector <8 x i32> %67, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %70 = and <4 x i32> %69, <i32 65535, i32 65535, i32 65535, i32 65535>
  %71 = zext <4 x i32> %70 to <4 x i64>
  %72 = shufflevector <4 x i64> %63, <4 x i64> %71, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %73 = shl <4 x i32> %68, <i32 1, i32 1, i32 1, i32 1>
  %74 = and <4 x i32> %73, <i32 131070, i32 131070, i32 131070, i32 131070>
  %75 = zext <4 x i32> %74 to <4 x i64>
  %76 = add nuw nsw <4 x i64> %72, %71
  %77 = add nuw nsw <4 x i64> %76, %75
  %78 = lshr <4 x i64> %77, <i64 2, i64 2, i64 2, i64 2>
  %79 = trunc <4 x i64> %78 to <4 x i32>
  %80 = and <4 x i32> %79, <i32 65535, i32 65535, i32 65535, i32 65535>
  %81 = getelementptr inbounds i32, i32* %6, i64 %62
  %82 = bitcast i32* %81 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %82, align 4, !alias.scope !291, !noalias !294
  %83 = add i64 %62, 4
  %84 = icmp eq i64 %83, %55
  br i1 %84, label %85, label %61, !llvm.loop !296

85:                                               ; preds = %61
  %86 = icmp eq i64 %55, %12
  %87 = extractelement <4 x i64> %71, i32 3
  br i1 %86, label %88, label %14

88:                                               ; preds = %38, %89, %85, %4
  ret void

89:                                               ; preds = %38, %89
  %90 = phi i64 [ %121, %89 ], [ %39, %38 ]
  %91 = phi i32* [ %111, %89 ], [ %40, %38 ]
  %92 = phi i64 [ %114, %89 ], [ %41, %38 ]
  %93 = getelementptr inbounds i32, i32* %91, i64 1
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds i32, i32* %91, i64 2
  %96 = load i32, i32* %95, align 4
  %97 = and i32 %96, 65535
  %98 = zext i32 %97 to i64
  %99 = shl i32 %94, 1
  %100 = and i32 %99, 131070
  %101 = zext i32 %100 to i64
  %102 = add nuw nsw i64 %92, %98
  %103 = add nuw nsw i64 %102, %101
  %104 = lshr i64 %103, 2
  %105 = trunc i64 %104 to i32
  %106 = and i32 %105, 65535
  %107 = getelementptr inbounds i32, i32* %6, i64 %90
  store i32 %106, i32* %107, align 4
  %108 = add nuw nsw i64 %90, 1
  %109 = getelementptr inbounds i32, i32* %91, i64 3
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %91, i64 4
  %112 = load i32, i32* %111, align 4
  %113 = and i32 %112, 65535
  %114 = zext i32 %113 to i64
  %115 = shl i32 %110, 1
  %116 = and i32 %115, 131070
  %117 = add nuw nsw i32 %97, %113
  %118 = add nuw nsw i32 %117, %116
  %119 = lshr i32 %118, 2
  %120 = getelementptr inbounds i32, i32* %6, i64 %108
  store i32 %119, i32* %120, align 4
  %121 = add nuw nsw i64 %90, 2
  %122 = icmp eq i64 %121, %12
  br i1 %122, label %88, label %89, !llvm.loop !297
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i8* %0 to i32*
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %92

10:                                               ; preds = %4
  %11 = load i32, i32* %7, align 4
  %12 = and i32 %11, 65535
  %13 = load i32, i32* %5, align 4
  %14 = and i32 %13, 65535
  %15 = add nuw nsw i32 %12, %14
  %16 = zext i32 %15 to i64
  %17 = zext i32 %3 to i64
  %18 = icmp ult i32 %3, 4
  br i1 %18, label %19, label %24

19:                                               ; preds = %89, %24, %10
  %20 = phi i64 [ 0, %10 ], [ 0, %24 ], [ %44, %89 ]
  %21 = phi i32* [ %5, %10 ], [ %5, %24 ], [ %46, %89 ]
  %22 = phi i32* [ %7, %10 ], [ %7, %24 ], [ %48, %89 ]
  %23 = phi i64 [ %16, %10 ], [ %16, %24 ], [ %91, %89 ]
  br label %93

24:                                               ; preds = %10
  %25 = shl nuw nsw i64 %17, 2
  %26 = getelementptr i8, i8* %0, i64 %25
  %27 = add i64 %2, 4
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = shl nuw nsw i64 %17, 3
  %30 = add i64 %29, %2
  %31 = add i64 %30, 4
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = getelementptr i8, i8* %1, i64 4
  %34 = or i64 %29, 4
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = icmp ugt i8* %32, %0
  %37 = icmp ult i8* %28, %26
  %38 = and i1 %36, %37
  %39 = icmp ugt i8* %35, %0
  %40 = icmp ult i8* %33, %26
  %41 = and i1 %39, %40
  %42 = or i1 %38, %41
  br i1 %42, label %19, label %43

43:                                               ; preds = %24
  %44 = and i64 %17, 4294967292
  %45 = shl nuw nsw i64 %44, 1
  %46 = getelementptr i32, i32* %5, i64 %45
  %47 = shl nuw nsw i64 %44, 1
  %48 = getelementptr i32, i32* %7, i64 %47
  %49 = insertelement <4 x i64> undef, i64 %16, i32 3
  %50 = getelementptr i8, i8* %1, i64 4
  %51 = bitcast i8* %50 to i32*
  %52 = getelementptr i8, i8* %6, i64 4
  %53 = bitcast i8* %52 to i32*
  br label %54

54:                                               ; preds = %54, %43
  %55 = phi i64 [ 0, %43 ], [ %87, %54 ]
  %56 = phi <4 x i64> [ %49, %43 ], [ %78, %54 ]
  %57 = shl i64 %55, 1
  %58 = shl i64 %55, 1
  %59 = getelementptr inbounds i32, i32* %51, i64 %57
  %60 = bitcast i32* %59 to <8 x i32>*
  %61 = load <8 x i32>, <8 x i32>* %60, align 4
  %62 = shufflevector <8 x i32> %61, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %63 = shufflevector <8 x i32> %61, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %64 = getelementptr inbounds i32, i32* %53, i64 %58
  %65 = bitcast i32* %64 to <8 x i32>*
  %66 = load <8 x i32>, <8 x i32>* %65, align 4
  %67 = shufflevector <8 x i32> %66, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %68 = shufflevector <8 x i32> %66, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %69 = shl <4 x i32> %62, <i32 1, i32 1, i32 1, i32 1>
  %70 = and <4 x i32> %69, <i32 131070, i32 131070, i32 131070, i32 131070>
  %71 = shl <4 x i32> %67, <i32 1, i32 1, i32 1, i32 1>
  %72 = and <4 x i32> %71, <i32 131070, i32 131070, i32 131070, i32 131070>
  %73 = add nuw nsw <4 x i32> %72, %70
  %74 = zext <4 x i32> %73 to <4 x i64>
  %75 = and <4 x i32> %63, <i32 65535, i32 65535, i32 65535, i32 65535>
  %76 = and <4 x i32> %68, <i32 65535, i32 65535, i32 65535, i32 65535>
  %77 = add nuw nsw <4 x i32> %76, %75
  %78 = zext <4 x i32> %77 to <4 x i64>
  %79 = shufflevector <4 x i64> %56, <4 x i64> %78, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %80 = add nuw nsw <4 x i64> %79, %74
  %81 = add nuw nsw <4 x i64> %80, %78
  %82 = lshr <4 x i64> %81, <i64 3, i64 3, i64 3, i64 3>
  %83 = trunc <4 x i64> %82 to <4 x i32>
  %84 = and <4 x i32> %83, <i32 65535, i32 65535, i32 65535, i32 65535>
  %85 = getelementptr inbounds i32, i32* %8, i64 %55
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %84, <4 x i32>* %86, align 4, !alias.scope !298, !noalias !301
  %87 = add i64 %55, 4
  %88 = icmp eq i64 %87, %44
  br i1 %88, label %89, label %54, !llvm.loop !304

89:                                               ; preds = %54
  %90 = icmp eq i64 %44, %17
  %91 = extractelement <4 x i64> %78, i32 3
  br i1 %90, label %92, label %19

92:                                               ; preds = %93, %89, %4
  ret void

93:                                               ; preds = %19, %93
  %94 = phi i64 [ %122, %93 ], [ %20, %19 ]
  %95 = phi i32* [ %108, %93 ], [ %21, %19 ]
  %96 = phi i32* [ %111, %93 ], [ %22, %19 ]
  %97 = phi i64 [ %115, %93 ], [ %23, %19 ]
  %98 = getelementptr inbounds i32, i32* %95, i64 1
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds i32, i32* %96, i64 1
  %101 = load i32, i32* %100, align 4
  %102 = shl i32 %99, 1
  %103 = and i32 %102, 131070
  %104 = shl i32 %101, 1
  %105 = and i32 %104, 131070
  %106 = add nuw nsw i32 %105, %103
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds i32, i32* %95, i64 2
  %109 = load i32, i32* %108, align 4
  %110 = and i32 %109, 65535
  %111 = getelementptr inbounds i32, i32* %96, i64 2
  %112 = load i32, i32* %111, align 4
  %113 = and i32 %112, 65535
  %114 = add nuw nsw i32 %113, %110
  %115 = zext i32 %114 to i64
  %116 = add nuw nsw i64 %97, %107
  %117 = add nuw nsw i64 %116, %115
  %118 = lshr i64 %117, 3
  %119 = trunc i64 %118 to i32
  %120 = and i32 %119, 65535
  %121 = getelementptr inbounds i32, i32* %8, i64 %94
  store i32 %120, i32* %121, align 4
  %122 = add nuw nsw i64 %94, 1
  %123 = icmp eq i64 %122, %17
  br i1 %123, label %92, label %93, !llvm.loop !305
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I20ColorTypeFilter_1616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %0 to i32*
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %124

12:                                               ; preds = %4
  %13 = load i32, i32* %9, align 4
  %14 = and i32 %13, 65535
  %15 = load i32, i32* %5, align 4
  %16 = and i32 %15, 65535
  %17 = add nuw nsw i32 %14, %16
  %18 = load i32, i32* %7, align 4
  %19 = shl i32 %18, 1
  %20 = and i32 %19, 131070
  %21 = add nuw nsw i32 %17, %20
  %22 = zext i32 %21 to i64
  %23 = zext i32 %3 to i64
  %24 = icmp ult i32 %3, 4
  br i1 %24, label %25, label %31

25:                                               ; preds = %121, %31, %12
  %26 = phi i64 [ 0, %12 ], [ 0, %31 ], [ %61, %121 ]
  %27 = phi i32* [ %5, %12 ], [ %5, %31 ], [ %63, %121 ]
  %28 = phi i32* [ %7, %12 ], [ %7, %31 ], [ %65, %121 ]
  %29 = phi i64 [ %22, %12 ], [ %22, %31 ], [ %123, %121 ]
  %30 = phi i32* [ %9, %12 ], [ %9, %31 ], [ %67, %121 ]
  br label %125

31:                                               ; preds = %12
  %32 = shl nuw nsw i64 %23, 2
  %33 = getelementptr i8, i8* %0, i64 %32
  %34 = shl i64 %2, 1
  %35 = add i64 %34, 4
  %36 = getelementptr i8, i8* %1, i64 %35
  %37 = shl nuw nsw i64 %23, 3
  %38 = add i64 %37, %34
  %39 = add i64 %38, 4
  %40 = getelementptr i8, i8* %1, i64 %39
  %41 = add i64 %2, 4
  %42 = getelementptr i8, i8* %1, i64 %41
  %43 = add i64 %37, %2
  %44 = add i64 %43, 4
  %45 = getelementptr i8, i8* %1, i64 %44
  %46 = getelementptr i8, i8* %1, i64 4
  %47 = or i64 %37, 4
  %48 = getelementptr i8, i8* %1, i64 %47
  %49 = icmp ugt i8* %40, %0
  %50 = icmp ult i8* %36, %33
  %51 = and i1 %49, %50
  %52 = icmp ugt i8* %45, %0
  %53 = icmp ult i8* %42, %33
  %54 = and i1 %52, %53
  %55 = or i1 %51, %54
  %56 = icmp ugt i8* %48, %0
  %57 = icmp ult i8* %46, %33
  %58 = and i1 %56, %57
  %59 = or i1 %55, %58
  br i1 %59, label %25, label %60

60:                                               ; preds = %31
  %61 = and i64 %23, 4294967292
  %62 = shl nuw nsw i64 %61, 1
  %63 = getelementptr i32, i32* %5, i64 %62
  %64 = shl nuw nsw i64 %61, 1
  %65 = getelementptr i32, i32* %7, i64 %64
  %66 = shl nuw nsw i64 %61, 1
  %67 = getelementptr i32, i32* %9, i64 %66
  %68 = insertelement <4 x i64> undef, i64 %22, i32 3
  %69 = getelementptr i8, i8* %1, i64 4
  %70 = bitcast i8* %69 to i32*
  %71 = getelementptr i8, i8* %6, i64 4
  %72 = bitcast i8* %71 to i32*
  %73 = getelementptr i8, i8* %8, i64 4
  %74 = bitcast i8* %73 to i32*
  br label %75

75:                                               ; preds = %75, %60
  %76 = phi i64 [ 0, %60 ], [ %119, %75 ]
  %77 = phi <4 x i64> [ %68, %60 ], [ %110, %75 ]
  %78 = shl i64 %76, 1
  %79 = shl i64 %76, 1
  %80 = shl i64 %76, 1
  %81 = getelementptr inbounds i32, i32* %70, i64 %78
  %82 = bitcast i32* %81 to <8 x i32>*
  %83 = load <8 x i32>, <8 x i32>* %82, align 4
  %84 = shufflevector <8 x i32> %83, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %85 = shufflevector <8 x i32> %83, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %86 = and <4 x i32> %84, <i32 65535, i32 65535, i32 65535, i32 65535>
  %87 = getelementptr inbounds i32, i32* %72, i64 %79
  %88 = bitcast i32* %87 to <8 x i32>*
  %89 = load <8 x i32>, <8 x i32>* %88, align 4
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %91 = shufflevector <8 x i32> %89, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %92 = getelementptr inbounds i32, i32* %74, i64 %80
  %93 = bitcast i32* %92 to <8 x i32>*
  %94 = load <8 x i32>, <8 x i32>* %93, align 4
  %95 = shufflevector <8 x i32> %94, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %96 = shufflevector <8 x i32> %94, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %97 = and <4 x i32> %95, <i32 65535, i32 65535, i32 65535, i32 65535>
  %98 = shl <4 x i32> %90, <i32 1, i32 1, i32 1, i32 1>
  %99 = and <4 x i32> %98, <i32 131070, i32 131070, i32 131070, i32 131070>
  %100 = add nuw nsw <4 x i32> %97, %86
  %101 = add nuw nsw <4 x i32> %100, %99
  %102 = shl nuw nsw <4 x i32> %101, <i32 1, i32 1, i32 1, i32 1>
  %103 = zext <4 x i32> %102 to <4 x i64>
  %104 = and <4 x i32> %85, <i32 65535, i32 65535, i32 65535, i32 65535>
  %105 = and <4 x i32> %96, <i32 65535, i32 65535, i32 65535, i32 65535>
  %106 = shl <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %107 = and <4 x i32> %106, <i32 131070, i32 131070, i32 131070, i32 131070>
  %108 = add nuw nsw <4 x i32> %105, %104
  %109 = add nuw nsw <4 x i32> %108, %107
  %110 = zext <4 x i32> %109 to <4 x i64>
  %111 = shufflevector <4 x i64> %77, <4 x i64> %110, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %112 = add nuw nsw <4 x i64> %111, %103
  %113 = add nuw nsw <4 x i64> %112, %110
  %114 = lshr <4 x i64> %113, <i64 4, i64 4, i64 4, i64 4>
  %115 = trunc <4 x i64> %114 to <4 x i32>
  %116 = and <4 x i32> %115, <i32 65535, i32 65535, i32 65535, i32 65535>
  %117 = getelementptr inbounds i32, i32* %10, i64 %76
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %118, align 4, !alias.scope !306, !noalias !309
  %119 = add i64 %76, 4
  %120 = icmp eq i64 %119, %61
  br i1 %120, label %121, label %75, !llvm.loop !313

121:                                              ; preds = %75
  %122 = icmp eq i64 %61, %23
  %123 = extractelement <4 x i64> %110, i32 3
  br i1 %122, label %124, label %25

124:                                              ; preds = %125, %121, %4
  ret void

125:                                              ; preds = %25, %125
  %126 = phi i64 [ %164, %125 ], [ %26, %25 ]
  %127 = phi i32* [ %145, %125 ], [ %27, %25 ]
  %128 = phi i32* [ %148, %125 ], [ %28, %25 ]
  %129 = phi i64 [ %157, %125 ], [ %29, %25 ]
  %130 = phi i32* [ %150, %125 ], [ %30, %25 ]
  %131 = getelementptr inbounds i32, i32* %127, i64 1
  %132 = load i32, i32* %131, align 4
  %133 = and i32 %132, 65535
  %134 = getelementptr inbounds i32, i32* %128, i64 1
  %135 = load i32, i32* %134, align 4
  %136 = getelementptr inbounds i32, i32* %130, i64 1
  %137 = load i32, i32* %136, align 4
  %138 = and i32 %137, 65535
  %139 = shl i32 %135, 1
  %140 = and i32 %139, 131070
  %141 = add nuw nsw i32 %138, %133
  %142 = add nuw nsw i32 %141, %140
  %143 = shl nuw nsw i32 %142, 1
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i32, i32* %127, i64 2
  %146 = load i32, i32* %145, align 4
  %147 = and i32 %146, 65535
  %148 = getelementptr inbounds i32, i32* %128, i64 2
  %149 = load i32, i32* %148, align 4
  %150 = getelementptr inbounds i32, i32* %130, i64 2
  %151 = load i32, i32* %150, align 4
  %152 = and i32 %151, 65535
  %153 = shl i32 %149, 1
  %154 = and i32 %153, 131070
  %155 = add nuw nsw i32 %152, %147
  %156 = add nuw nsw i32 %155, %154
  %157 = zext i32 %156 to i64
  %158 = add nuw nsw i64 %129, %144
  %159 = add nuw nsw i64 %158, %157
  %160 = lshr i64 %159, 4
  %161 = trunc i64 %160 to i32
  %162 = and i32 %161, 65535
  %163 = getelementptr inbounds i32, i32* %10, i64 %126
  store i32 %162, i32* %163, align 4
  %164 = add nuw nsw i64 %126, 1
  %165 = icmp eq i64 %164, %23
  br i1 %165, label %124, label %125, !llvm.loop !314
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %85

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 9
  br i1 %12, label %13, label %39

13:                                               ; preds = %64, %39, %7
  %14 = phi i64 [ 0, %39 ], [ 0, %7 ], [ %59, %64 ]
  %15 = phi i16* [ %10, %39 ], [ %10, %7 ], [ %61, %64 ]
  %16 = phi i16* [ %9, %39 ], [ %9, %7 ], [ %63, %64 ]
  %17 = sub nsw i64 %11, %14
  %18 = xor i64 %14, -1
  %19 = and i64 %17, 1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %33, label %21

21:                                               ; preds = %13
  %22 = load i16, i16* %15, align 2
  %23 = zext i16 %22 to i32
  %24 = load i16, i16* %16, align 2
  %25 = zext i16 %24 to i32
  %26 = add nuw nsw i32 %25, %23
  %27 = lshr i32 %26, 1
  %28 = trunc i32 %27 to i16
  %29 = getelementptr inbounds i16, i16* %5, i64 %14
  store i16 %28, i16* %29, align 2
  %30 = getelementptr inbounds i16, i16* %15, i64 2
  %31 = getelementptr inbounds i16, i16* %16, i64 2
  %32 = add nuw nsw i64 %14, 1
  br label %33

33:                                               ; preds = %13, %21
  %34 = phi i64 [ %14, %13 ], [ %32, %21 ]
  %35 = phi i16* [ %15, %13 ], [ %30, %21 ]
  %36 = phi i16* [ %16, %13 ], [ %31, %21 ]
  %37 = sub nsw i64 0, %11
  %38 = icmp eq i64 %18, %37
  br i1 %38, label %85, label %86

39:                                               ; preds = %7
  %40 = shl nuw nsw i64 %11, 1
  %41 = getelementptr i8, i8* %0, i64 %40
  %42 = shl nuw nsw i64 %11, 2
  %43 = add i64 %42, %2
  %44 = add i64 %43, -2
  %45 = getelementptr i8, i8* %1, i64 %44
  %46 = add nsw i64 %42, -2
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = icmp ugt i8* %45, %0
  %49 = icmp ult i8* %8, %41
  %50 = and i1 %48, %49
  %51 = icmp ugt i8* %47, %0
  %52 = icmp ugt i8* %41, %1
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  br i1 %54, label %13, label %55

55:                                               ; preds = %39
  %56 = and i64 %11, 7
  %57 = icmp eq i64 %56, 0
  %58 = select i1 %57, i64 8, i64 %56
  %59 = sub nsw i64 %11, %58
  %60 = shl nsw i64 %59, 1
  %61 = getelementptr i16, i16* %10, i64 %60
  %62 = shl nsw i64 %59, 1
  %63 = getelementptr i16, i16* %9, i64 %62
  br label %64

64:                                               ; preds = %64, %55
  %65 = phi i64 [ 0, %55 ], [ %83, %64 ]
  %66 = shl i64 %65, 1
  %67 = getelementptr i16, i16* %10, i64 %66
  %68 = shl i64 %65, 1
  %69 = getelementptr i16, i16* %9, i64 %68
  %70 = bitcast i16* %67 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 2
  %72 = shufflevector <16 x i16> %71, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %73 = zext <8 x i16> %72 to <8 x i32>
  %74 = bitcast i16* %69 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 2
  %76 = shufflevector <16 x i16> %75, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %77 = zext <8 x i16> %76 to <8 x i32>
  %78 = add nuw nsw <8 x i32> %77, %73
  %79 = lshr <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %80 = trunc <8 x i32> %79 to <8 x i16>
  %81 = getelementptr inbounds i16, i16* %5, i64 %65
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %82, align 2, !alias.scope !315, !noalias !318
  %83 = add i64 %65, 8
  %84 = icmp eq i64 %83, %59
  br i1 %84, label %13, label %64, !llvm.loop !321

85:                                               ; preds = %33, %86, %4
  ret void

86:                                               ; preds = %33, %86
  %87 = phi i64 [ %111, %86 ], [ %34, %33 ]
  %88 = phi i16* [ %109, %86 ], [ %35, %33 ]
  %89 = phi i16* [ %110, %86 ], [ %36, %33 ]
  %90 = load i16, i16* %88, align 2
  %91 = zext i16 %90 to i32
  %92 = load i16, i16* %89, align 2
  %93 = zext i16 %92 to i32
  %94 = add nuw nsw i32 %93, %91
  %95 = lshr i32 %94, 1
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds i16, i16* %5, i64 %87
  store i16 %96, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %88, i64 2
  %99 = getelementptr inbounds i16, i16* %89, i64 2
  %100 = add nuw nsw i64 %87, 1
  %101 = load i16, i16* %98, align 2
  %102 = zext i16 %101 to i32
  %103 = load i16, i16* %99, align 2
  %104 = zext i16 %103 to i32
  %105 = add nuw nsw i32 %104, %102
  %106 = lshr i32 %105, 1
  %107 = trunc i32 %106 to i16
  %108 = getelementptr inbounds i16, i16* %5, i64 %100
  store i16 %107, i16* %108, align 2
  %109 = getelementptr inbounds i16, i16* %88, i64 4
  %110 = getelementptr inbounds i16, i16* %89, i64 4
  %111 = add nuw nsw i64 %87, 2
  %112 = icmp eq i64 %111, %11
  br i1 %112, label %85, label %86, !llvm.loop !322
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %112

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 9
  br i1 %14, label %15, label %48

15:                                               ; preds = %83, %48, %8
  %16 = phi i64 [ 0, %48 ], [ 0, %8 ], [ %76, %83 ]
  %17 = phi i16* [ %10, %48 ], [ %10, %8 ], [ %78, %83 ]
  %18 = phi i16* [ %11, %48 ], [ %11, %8 ], [ %80, %83 ]
  %19 = phi i16* [ %12, %48 ], [ %12, %8 ], [ %82, %83 ]
  %20 = sub nsw i64 %13, %16
  %21 = xor i64 %16, -1
  %22 = and i64 %20, 1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %41, label %24

24:                                               ; preds = %15
  %25 = load i16, i16* %19, align 2
  %26 = zext i16 %25 to i32
  %27 = load i16, i16* %18, align 2
  %28 = zext i16 %27 to i32
  %29 = load i16, i16* %17, align 2
  %30 = zext i16 %29 to i32
  %31 = shl nuw nsw i32 %28, 1
  %32 = add nuw nsw i32 %30, %26
  %33 = add nuw nsw i32 %32, %31
  %34 = lshr i32 %33, 2
  %35 = trunc i32 %34 to i16
  %36 = getelementptr inbounds i16, i16* %6, i64 %16
  store i16 %35, i16* %36, align 2
  %37 = getelementptr inbounds i16, i16* %19, i64 2
  %38 = getelementptr inbounds i16, i16* %18, i64 2
  %39 = getelementptr inbounds i16, i16* %17, i64 2
  %40 = add nuw nsw i64 %16, 1
  br label %41

41:                                               ; preds = %15, %24
  %42 = phi i64 [ %16, %15 ], [ %40, %24 ]
  %43 = phi i16* [ %17, %15 ], [ %39, %24 ]
  %44 = phi i16* [ %18, %15 ], [ %38, %24 ]
  %45 = phi i16* [ %19, %15 ], [ %37, %24 ]
  %46 = sub nsw i64 0, %13
  %47 = icmp eq i64 %21, %46
  br i1 %47, label %112, label %113

48:                                               ; preds = %8
  %49 = shl nuw nsw i64 %13, 1
  %50 = getelementptr i8, i8* %0, i64 %49
  %51 = shl nuw nsw i64 %13, 2
  %52 = shl i64 %2, 1
  %53 = add i64 %51, %52
  %54 = add i64 %53, -2
  %55 = getelementptr i8, i8* %1, i64 %54
  %56 = add i64 %51, %2
  %57 = add i64 %56, -2
  %58 = getelementptr i8, i8* %1, i64 %57
  %59 = add nsw i64 %51, -2
  %60 = getelementptr i8, i8* %1, i64 %59
  %61 = icmp ugt i8* %55, %0
  %62 = icmp ult i8* %9, %50
  %63 = and i1 %61, %62
  %64 = icmp ugt i8* %58, %0
  %65 = icmp ult i8* %5, %50
  %66 = and i1 %64, %65
  %67 = or i1 %63, %66
  %68 = icmp ugt i8* %60, %0
  %69 = icmp ugt i8* %50, %1
  %70 = and i1 %68, %69
  %71 = or i1 %67, %70
  br i1 %71, label %15, label %72

72:                                               ; preds = %48
  %73 = and i64 %13, 7
  %74 = icmp eq i64 %73, 0
  %75 = select i1 %74, i64 8, i64 %73
  %76 = sub nsw i64 %13, %75
  %77 = shl nsw i64 %76, 1
  %78 = getelementptr i16, i16* %10, i64 %77
  %79 = shl nsw i64 %76, 1
  %80 = getelementptr i16, i16* %11, i64 %79
  %81 = shl nsw i64 %76, 1
  %82 = getelementptr i16, i16* %12, i64 %81
  br label %83

83:                                               ; preds = %83, %72
  %84 = phi i64 [ 0, %72 ], [ %110, %83 ]
  %85 = shl i64 %84, 1
  %86 = getelementptr i16, i16* %10, i64 %85
  %87 = shl i64 %84, 1
  %88 = getelementptr i16, i16* %11, i64 %87
  %89 = shl i64 %84, 1
  %90 = getelementptr i16, i16* %12, i64 %89
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 2
  %93 = shufflevector <16 x i16> %92, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = zext <8 x i16> %93 to <8 x i32>
  %95 = bitcast i16* %88 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 2
  %97 = shufflevector <16 x i16> %96, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %98 = zext <8 x i16> %97 to <8 x i32>
  %99 = bitcast i16* %86 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 2
  %101 = shufflevector <16 x i16> %100, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %102 = zext <8 x i16> %101 to <8 x i32>
  %103 = shl nuw nsw <8 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %104 = add nuw nsw <8 x i32> %102, %94
  %105 = add nuw nsw <8 x i32> %104, %103
  %106 = lshr <8 x i32> %105, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %107 = trunc <8 x i32> %106 to <8 x i16>
  %108 = getelementptr inbounds i16, i16* %6, i64 %84
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %107, <8 x i16>* %109, align 2, !alias.scope !323, !noalias !326
  %110 = add i64 %84, 8
  %111 = icmp eq i64 %110, %76
  br i1 %111, label %15, label %83, !llvm.loop !330

112:                                              ; preds = %41, %113, %4
  ret void

113:                                              ; preds = %41, %113
  %114 = phi i64 [ %149, %113 ], [ %42, %41 ]
  %115 = phi i16* [ %148, %113 ], [ %43, %41 ]
  %116 = phi i16* [ %147, %113 ], [ %44, %41 ]
  %117 = phi i16* [ %146, %113 ], [ %45, %41 ]
  %118 = load i16, i16* %117, align 2
  %119 = zext i16 %118 to i32
  %120 = load i16, i16* %116, align 2
  %121 = zext i16 %120 to i32
  %122 = load i16, i16* %115, align 2
  %123 = zext i16 %122 to i32
  %124 = shl nuw nsw i32 %121, 1
  %125 = add nuw nsw i32 %123, %119
  %126 = add nuw nsw i32 %125, %124
  %127 = lshr i32 %126, 2
  %128 = trunc i32 %127 to i16
  %129 = getelementptr inbounds i16, i16* %6, i64 %114
  store i16 %128, i16* %129, align 2
  %130 = getelementptr inbounds i16, i16* %117, i64 2
  %131 = getelementptr inbounds i16, i16* %116, i64 2
  %132 = getelementptr inbounds i16, i16* %115, i64 2
  %133 = add nuw nsw i64 %114, 1
  %134 = load i16, i16* %130, align 2
  %135 = zext i16 %134 to i32
  %136 = load i16, i16* %131, align 2
  %137 = zext i16 %136 to i32
  %138 = load i16, i16* %132, align 2
  %139 = zext i16 %138 to i32
  %140 = shl nuw nsw i32 %137, 1
  %141 = add nuw nsw i32 %139, %135
  %142 = add nuw nsw i32 %141, %140
  %143 = lshr i32 %142, 2
  %144 = trunc i32 %143 to i16
  %145 = getelementptr inbounds i16, i16* %6, i64 %133
  store i16 %144, i16* %145, align 2
  %146 = getelementptr inbounds i16, i16* %117, i64 4
  %147 = getelementptr inbounds i16, i16* %116, i64 4
  %148 = getelementptr inbounds i16, i16* %115, i64 4
  %149 = add nuw nsw i64 %114, 2
  %150 = icmp eq i64 %149, %13
  br i1 %150, label %112, label %113, !llvm.loop !331
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %105

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i16*
  %9 = zext i32 %3 to i64
  %10 = icmp ult i32 %3, 8
  br i1 %10, label %11, label %34

11:                                               ; preds = %103, %34, %7
  %12 = phi i64 [ 0, %34 ], [ 0, %7 ], [ %43, %103 ]
  %13 = phi i16* [ %8, %34 ], [ %8, %7 ], [ %45, %103 ]
  %14 = xor i64 %12, -1
  %15 = and i64 %9, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %29, label %17

17:                                               ; preds = %11
  %18 = load i16, i16* %13, align 2
  %19 = zext i16 %18 to i32
  %20 = getelementptr inbounds i16, i16* %13, i64 1
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i32
  %23 = add nuw nsw i32 %22, %19
  %24 = lshr i32 %23, 1
  %25 = trunc i32 %24 to i16
  %26 = getelementptr inbounds i16, i16* %5, i64 %12
  store i16 %25, i16* %26, align 2
  %27 = getelementptr inbounds i16, i16* %13, i64 2
  %28 = or i64 %12, 1
  br label %29

29:                                               ; preds = %11, %17
  %30 = phi i64 [ %12, %11 ], [ %28, %17 ]
  %31 = phi i16* [ %13, %11 ], [ %27, %17 ]
  %32 = sub nsw i64 0, %9
  %33 = icmp eq i64 %14, %32
  br i1 %33, label %105, label %106

34:                                               ; preds = %7
  %35 = shl nuw nsw i64 %9, 1
  %36 = getelementptr i8, i8* %0, i64 %35
  %37 = shl nuw nsw i64 %9, 2
  %38 = getelementptr i8, i8* %1, i64 %37
  %39 = icmp ugt i8* %38, %0
  %40 = icmp ugt i8* %36, %1
  %41 = and i1 %39, %40
  br i1 %41, label %11, label %42

42:                                               ; preds = %34
  %43 = and i64 %9, 4294967288
  %44 = shl nuw nsw i64 %43, 1
  %45 = getelementptr i16, i16* %8, i64 %44
  %46 = add nsw i64 %43, -8
  %47 = lshr exact i64 %46, 3
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 1
  %50 = icmp eq i64 %46, 0
  br i1 %50, label %86, label %51

51:                                               ; preds = %42
  %52 = sub nuw nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %83, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %84, %53 ]
  %56 = shl i64 %54, 1
  %57 = getelementptr i16, i16* %8, i64 %56
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 2
  %60 = shufflevector <16 x i16> %59, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %61 = shufflevector <16 x i16> %59, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %62 = zext <8 x i16> %60 to <8 x i32>
  %63 = zext <8 x i16> %61 to <8 x i32>
  %64 = add nuw nsw <8 x i32> %63, %62
  %65 = lshr <8 x i32> %64, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %66 = trunc <8 x i32> %65 to <8 x i16>
  %67 = getelementptr inbounds i16, i16* %5, i64 %54
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %66, <8 x i16>* %68, align 2, !alias.scope !332, !noalias !335
  %69 = or i64 %54, 8
  %70 = shl i64 %69, 1
  %71 = getelementptr i16, i16* %8, i64 %70
  %72 = bitcast i16* %71 to <16 x i16>*
  %73 = load <16 x i16>, <16 x i16>* %72, align 2
  %74 = shufflevector <16 x i16> %73, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %75 = shufflevector <16 x i16> %73, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %76 = zext <8 x i16> %74 to <8 x i32>
  %77 = zext <8 x i16> %75 to <8 x i32>
  %78 = add nuw nsw <8 x i32> %77, %76
  %79 = lshr <8 x i32> %78, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %80 = trunc <8 x i32> %79 to <8 x i16>
  %81 = getelementptr inbounds i16, i16* %5, i64 %69
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %82, align 2, !alias.scope !332, !noalias !335
  %83 = add i64 %54, 16
  %84 = add i64 %55, -2
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %53, !llvm.loop !337

86:                                               ; preds = %53, %42
  %87 = phi i64 [ 0, %42 ], [ %83, %53 ]
  %88 = icmp eq i64 %49, 0
  br i1 %88, label %103, label %89

89:                                               ; preds = %86
  %90 = shl i64 %87, 1
  %91 = getelementptr i16, i16* %8, i64 %90
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 2
  %94 = shufflevector <16 x i16> %93, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %95 = shufflevector <16 x i16> %93, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %96 = zext <8 x i16> %94 to <8 x i32>
  %97 = zext <8 x i16> %95 to <8 x i32>
  %98 = add nuw nsw <8 x i32> %97, %96
  %99 = lshr <8 x i32> %98, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %100 = trunc <8 x i32> %99 to <8 x i16>
  %101 = getelementptr inbounds i16, i16* %5, i64 %87
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %100, <8 x i16>* %102, align 2, !alias.scope !332, !noalias !335
  br label %103

103:                                              ; preds = %86, %89
  %104 = icmp eq i64 %43, %9
  br i1 %104, label %105, label %11

105:                                              ; preds = %29, %106, %103, %4
  ret void

106:                                              ; preds = %29, %106
  %107 = phi i64 [ %130, %106 ], [ %30, %29 ]
  %108 = phi i16* [ %129, %106 ], [ %31, %29 ]
  %109 = load i16, i16* %108, align 2
  %110 = zext i16 %109 to i32
  %111 = getelementptr inbounds i16, i16* %108, i64 1
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i32
  %114 = add nuw nsw i32 %113, %110
  %115 = lshr i32 %114, 1
  %116 = trunc i32 %115 to i16
  %117 = getelementptr inbounds i16, i16* %5, i64 %107
  store i16 %116, i16* %117, align 2
  %118 = getelementptr inbounds i16, i16* %108, i64 2
  %119 = add nuw nsw i64 %107, 1
  %120 = load i16, i16* %118, align 2
  %121 = zext i16 %120 to i32
  %122 = getelementptr inbounds i16, i16* %108, i64 3
  %123 = load i16, i16* %122, align 2
  %124 = zext i16 %123 to i32
  %125 = add nuw nsw i32 %124, %121
  %126 = lshr i32 %125, 1
  %127 = trunc i32 %126 to i16
  %128 = getelementptr inbounds i16, i16* %5, i64 %119
  store i16 %127, i16* %128, align 2
  %129 = getelementptr inbounds i16, i16* %108, i64 4
  %130 = add nuw nsw i64 %107, 2
  %131 = icmp eq i64 %130, %9
  br i1 %131, label %105, label %106, !llvm.loop !338
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %38

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  %12 = and i64 %11, 1
  %13 = icmp eq i32 %3, 1
  br i1 %13, label %16, label %14

14:                                               ; preds = %7
  %15 = sub nsw i64 %11, %12
  br label %39

16:                                               ; preds = %39, %7
  %17 = phi i64 [ 0, %7 ], [ %81, %39 ]
  %18 = phi i16* [ %10, %7 ], [ %79, %39 ]
  %19 = phi i16* [ %9, %7 ], [ %80, %39 ]
  %20 = icmp eq i64 %12, 0
  br i1 %20, label %38, label %21

21:                                               ; preds = %16
  %22 = load i16, i16* %18, align 2
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds i16, i16* %18, i64 1
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = load i16, i16* %19, align 2
  %28 = zext i16 %27 to i32
  %29 = getelementptr inbounds i16, i16* %19, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = add nuw nsw i32 %26, %23
  %33 = add nuw nsw i32 %32, %28
  %34 = add nuw nsw i32 %33, %31
  %35 = lshr i32 %34, 2
  %36 = trunc i32 %35 to i16
  %37 = getelementptr inbounds i16, i16* %5, i64 %17
  store i16 %36, i16* %37, align 2
  br label %38

38:                                               ; preds = %21, %16, %4
  ret void

39:                                               ; preds = %39, %14
  %40 = phi i64 [ 0, %14 ], [ %81, %39 ]
  %41 = phi i16* [ %10, %14 ], [ %79, %39 ]
  %42 = phi i16* [ %9, %14 ], [ %80, %39 ]
  %43 = phi i64 [ %15, %14 ], [ %82, %39 ]
  %44 = load i16, i16* %41, align 2
  %45 = zext i16 %44 to i32
  %46 = getelementptr inbounds i16, i16* %41, i64 1
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = load i16, i16* %42, align 2
  %50 = zext i16 %49 to i32
  %51 = getelementptr inbounds i16, i16* %42, i64 1
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i32
  %54 = add nuw nsw i32 %48, %45
  %55 = add nuw nsw i32 %54, %50
  %56 = add nuw nsw i32 %55, %53
  %57 = lshr i32 %56, 2
  %58 = trunc i32 %57 to i16
  %59 = getelementptr inbounds i16, i16* %5, i64 %40
  store i16 %58, i16* %59, align 2
  %60 = getelementptr inbounds i16, i16* %41, i64 2
  %61 = getelementptr inbounds i16, i16* %42, i64 2
  %62 = or i64 %40, 1
  %63 = load i16, i16* %60, align 2
  %64 = zext i16 %63 to i32
  %65 = getelementptr inbounds i16, i16* %41, i64 3
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = load i16, i16* %61, align 2
  %69 = zext i16 %68 to i32
  %70 = getelementptr inbounds i16, i16* %42, i64 3
  %71 = load i16, i16* %70, align 2
  %72 = zext i16 %71 to i32
  %73 = add nuw nsw i32 %67, %64
  %74 = add nuw nsw i32 %73, %69
  %75 = add nuw nsw i32 %74, %72
  %76 = lshr i32 %75, 2
  %77 = trunc i32 %76 to i16
  %78 = getelementptr inbounds i16, i16* %5, i64 %62
  store i16 %77, i16* %78, align 2
  %79 = getelementptr inbounds i16, i16* %41, i64 4
  %80 = getelementptr inbounds i16, i16* %42, i64 4
  %81 = add nuw nsw i64 %40, 2
  %82 = add i64 %43, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %16, label %39
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %47, %15 ]
  %17 = phi i16* [ %10, %8 ], [ %46, %15 ]
  %18 = phi i16* [ %11, %8 ], [ %45, %15 ]
  %19 = phi i16* [ %12, %8 ], [ %44, %15 ]
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i32
  %22 = getelementptr inbounds i16, i16* %19, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = load i16, i16* %18, align 2
  %26 = zext i16 %25 to i32
  %27 = getelementptr inbounds i16, i16* %18, i64 1
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = load i16, i16* %17, align 2
  %31 = zext i16 %30 to i32
  %32 = getelementptr inbounds i16, i16* %17, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i32
  %35 = add nuw nsw i32 %29, %26
  %36 = shl nuw nsw i32 %35, 1
  %37 = add nuw nsw i32 %24, %21
  %38 = add nuw nsw i32 %37, %31
  %39 = add nuw nsw i32 %38, %34
  %40 = add nuw nsw i32 %39, %36
  %41 = lshr i32 %40, 3
  %42 = trunc i32 %41 to i16
  %43 = getelementptr inbounds i16, i16* %6, i64 %16
  store i16 %42, i16* %43, align 2
  %44 = getelementptr inbounds i16, i16* %19, i64 2
  %45 = getelementptr inbounds i16, i16* %18, i64 2
  %46 = getelementptr inbounds i16, i16* %17, i64 2
  %47 = add nuw nsw i64 %16, 1
  %48 = icmp eq i64 %47, %13
  br i1 %48, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %81

8:                                                ; preds = %4
  %9 = load i16, i16* %5, align 2
  %10 = zext i16 %9 to i32
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 8
  br i1 %12, label %13, label %40

13:                                               ; preds = %78, %40, %8
  %14 = phi i64 [ 0, %8 ], [ 0, %40 ], [ %51, %78 ]
  %15 = phi i16* [ %5, %8 ], [ %5, %40 ], [ %53, %78 ]
  %16 = phi i32 [ %10, %8 ], [ %10, %40 ], [ %80, %78 ]
  %17 = xor i64 %14, -1
  %18 = and i64 %11, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %34, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds i16, i16* %15, i64 1
  %22 = load i16, i16* %21, align 2
  %23 = zext i16 %22 to i32
  %24 = getelementptr inbounds i16, i16* %15, i64 2
  %25 = load i16, i16* %24, align 2
  %26 = zext i16 %25 to i32
  %27 = shl nuw nsw i32 %23, 1
  %28 = add nuw nsw i32 %16, %26
  %29 = add nuw nsw i32 %28, %27
  %30 = lshr i32 %29, 2
  %31 = trunc i32 %30 to i16
  %32 = getelementptr inbounds i16, i16* %6, i64 %14
  store i16 %31, i16* %32, align 2
  %33 = or i64 %14, 1
  br label %34

34:                                               ; preds = %13, %20
  %35 = phi i64 [ %14, %13 ], [ %33, %20 ]
  %36 = phi i16* [ %15, %13 ], [ %24, %20 ]
  %37 = phi i32 [ %16, %13 ], [ %26, %20 ]
  %38 = sub nsw i64 0, %11
  %39 = icmp eq i64 %17, %38
  br i1 %39, label %81, label %82

40:                                               ; preds = %8
  %41 = shl nuw nsw i64 %11, 1
  %42 = getelementptr i8, i8* %0, i64 %41
  %43 = getelementptr i8, i8* %1, i64 2
  %44 = shl nuw nsw i64 %11, 2
  %45 = or i64 %44, 2
  %46 = getelementptr i8, i8* %1, i64 %45
  %47 = icmp ugt i8* %46, %0
  %48 = icmp ult i8* %43, %42
  %49 = and i1 %47, %48
  br i1 %49, label %13, label %50

50:                                               ; preds = %40
  %51 = and i64 %11, 4294967288
  %52 = shl nuw nsw i64 %51, 1
  %53 = getelementptr i16, i16* %5, i64 %52
  %54 = insertelement <8 x i32> undef, i32 %10, i32 7
  %55 = getelementptr i8, i8* %1, i64 2
  %56 = bitcast i8* %55 to i16*
  br label %57

57:                                               ; preds = %57, %50
  %58 = phi i64 [ 0, %50 ], [ %76, %57 ]
  %59 = phi <8 x i32> [ %54, %50 ], [ %67, %57 ]
  %60 = shl i64 %58, 1
  %61 = getelementptr inbounds i16, i16* %56, i64 %60
  %62 = bitcast i16* %61 to <16 x i16>*
  %63 = load <16 x i16>, <16 x i16>* %62, align 2
  %64 = shufflevector <16 x i16> %63, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %65 = shufflevector <16 x i16> %63, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %66 = zext <8 x i16> %64 to <8 x i32>
  %67 = zext <8 x i16> %65 to <8 x i32>
  %68 = shufflevector <8 x i32> %59, <8 x i32> %67, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %69 = shl nuw nsw <8 x i32> %66, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %70 = add nuw nsw <8 x i32> %68, %67
  %71 = add nuw nsw <8 x i32> %70, %69
  %72 = lshr <8 x i32> %71, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %73 = trunc <8 x i32> %72 to <8 x i16>
  %74 = getelementptr inbounds i16, i16* %6, i64 %58
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %73, <8 x i16>* %75, align 2, !alias.scope !339, !noalias !342
  %76 = add i64 %58, 8
  %77 = icmp eq i64 %76, %51
  br i1 %77, label %78, label %57, !llvm.loop !344

78:                                               ; preds = %57
  %79 = icmp eq i64 %51, %11
  %80 = extractelement <8 x i32> %67, i32 7
  br i1 %79, label %81, label %13

81:                                               ; preds = %34, %82, %78, %4
  ret void

82:                                               ; preds = %34, %82
  %83 = phi i64 [ %111, %82 ], [ %35, %34 ]
  %84 = phi i16* [ %102, %82 ], [ %36, %34 ]
  %85 = phi i32 [ %104, %82 ], [ %37, %34 ]
  %86 = getelementptr inbounds i16, i16* %84, i64 1
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = getelementptr inbounds i16, i16* %84, i64 2
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = shl nuw nsw i32 %88, 1
  %93 = add nuw nsw i32 %85, %91
  %94 = add nuw nsw i32 %93, %92
  %95 = lshr i32 %94, 2
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds i16, i16* %6, i64 %83
  store i16 %96, i16* %97, align 2
  %98 = add nuw nsw i64 %83, 1
  %99 = getelementptr inbounds i16, i16* %84, i64 3
  %100 = load i16, i16* %99, align 2
  %101 = zext i16 %100 to i32
  %102 = getelementptr inbounds i16, i16* %84, i64 4
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = shl nuw nsw i32 %101, 1
  %106 = add nuw nsw i32 %91, %104
  %107 = add nuw nsw i32 %106, %105
  %108 = lshr i32 %107, 2
  %109 = trunc i32 %108 to i16
  %110 = getelementptr inbounds i16, i16* %6, i64 %98
  store i16 %109, i16* %110, align 2
  %111 = add nuw nsw i64 %83, 2
  %112 = icmp eq i64 %111, %11
  br i1 %112, label %81, label %82, !llvm.loop !345
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = bitcast i8* %0 to i16*
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %119

10:                                               ; preds = %4
  %11 = load i16, i16* %7, align 2
  %12 = zext i16 %11 to i32
  %13 = load i16, i16* %5, align 2
  %14 = zext i16 %13 to i32
  %15 = add nuw nsw i32 %12, %14
  %16 = zext i32 %3 to i64
  %17 = icmp ult i32 %3, 8
  br i1 %17, label %18, label %55

18:                                               ; preds = %116, %55, %10
  %19 = phi i64 [ 0, %10 ], [ 0, %55 ], [ %75, %116 ]
  %20 = phi i16* [ %5, %10 ], [ %5, %55 ], [ %77, %116 ]
  %21 = phi i16* [ %7, %10 ], [ %7, %55 ], [ %79, %116 ]
  %22 = phi i32 [ %15, %10 ], [ %15, %55 ], [ %118, %116 ]
  %23 = xor i64 %19, -1
  %24 = and i64 %16, 1
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %48, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds i16, i16* %20, i64 1
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = getelementptr inbounds i16, i16* %21, i64 1
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = getelementptr inbounds i16, i16* %20, i64 2
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = getelementptr inbounds i16, i16* %21, i64 2
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  %39 = add nuw nsw i32 %38, %35
  %40 = add nuw nsw i32 %32, %29
  %41 = shl nuw nsw i32 %40, 1
  %42 = add nuw nsw i32 %39, %22
  %43 = add nuw nsw i32 %42, %41
  %44 = lshr i32 %43, 3
  %45 = trunc i32 %44 to i16
  %46 = getelementptr inbounds i16, i16* %8, i64 %19
  store i16 %45, i16* %46, align 2
  %47 = or i64 %19, 1
  br label %48

48:                                               ; preds = %18, %26
  %49 = phi i64 [ %19, %18 ], [ %47, %26 ]
  %50 = phi i16* [ %20, %18 ], [ %33, %26 ]
  %51 = phi i16* [ %21, %18 ], [ %36, %26 ]
  %52 = phi i32 [ %22, %18 ], [ %39, %26 ]
  %53 = sub nsw i64 0, %16
  %54 = icmp eq i64 %23, %53
  br i1 %54, label %119, label %120

55:                                               ; preds = %10
  %56 = shl nuw nsw i64 %16, 1
  %57 = getelementptr i8, i8* %0, i64 %56
  %58 = add i64 %2, 2
  %59 = getelementptr i8, i8* %1, i64 %58
  %60 = shl nuw nsw i64 %16, 2
  %61 = add i64 %60, %2
  %62 = add i64 %61, 2
  %63 = getelementptr i8, i8* %1, i64 %62
  %64 = getelementptr i8, i8* %1, i64 2
  %65 = or i64 %60, 2
  %66 = getelementptr i8, i8* %1, i64 %65
  %67 = icmp ugt i8* %63, %0
  %68 = icmp ult i8* %59, %57
  %69 = and i1 %67, %68
  %70 = icmp ugt i8* %66, %0
  %71 = icmp ult i8* %64, %57
  %72 = and i1 %70, %71
  %73 = or i1 %69, %72
  br i1 %73, label %18, label %74

74:                                               ; preds = %55
  %75 = and i64 %16, 4294967288
  %76 = shl nuw nsw i64 %75, 1
  %77 = getelementptr i16, i16* %5, i64 %76
  %78 = shl nuw nsw i64 %75, 1
  %79 = getelementptr i16, i16* %7, i64 %78
  %80 = insertelement <8 x i32> undef, i32 %15, i32 7
  %81 = getelementptr i8, i8* %1, i64 2
  %82 = bitcast i8* %81 to i16*
  %83 = getelementptr i8, i8* %6, i64 2
  %84 = bitcast i8* %83 to i16*
  br label %85

85:                                               ; preds = %85, %74
  %86 = phi i64 [ 0, %74 ], [ %114, %85 ]
  %87 = phi <8 x i32> [ %80, %74 ], [ %104, %85 ]
  %88 = shl i64 %86, 1
  %89 = shl i64 %86, 1
  %90 = getelementptr inbounds i16, i16* %82, i64 %88
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 2
  %93 = shufflevector <16 x i16> %92, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %94 = shufflevector <16 x i16> %92, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %95 = zext <8 x i16> %93 to <8 x i32>
  %96 = getelementptr inbounds i16, i16* %84, i64 %89
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 2
  %99 = shufflevector <16 x i16> %98, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %100 = shufflevector <16 x i16> %98, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %101 = zext <8 x i16> %99 to <8 x i32>
  %102 = zext <8 x i16> %94 to <8 x i32>
  %103 = zext <8 x i16> %100 to <8 x i32>
  %104 = add nuw nsw <8 x i32> %103, %102
  %105 = shufflevector <8 x i32> %87, <8 x i32> %104, <8 x i32> <i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14>
  %106 = add nuw nsw <8 x i32> %101, %95
  %107 = shl nuw nsw <8 x i32> %106, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %108 = add nuw nsw <8 x i32> %104, %105
  %109 = add nuw nsw <8 x i32> %108, %107
  %110 = lshr <8 x i32> %109, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  %111 = trunc <8 x i32> %110 to <8 x i16>
  %112 = getelementptr inbounds i16, i16* %8, i64 %86
  %113 = bitcast i16* %112 to <8 x i16>*
  store <8 x i16> %111, <8 x i16>* %113, align 2, !alias.scope !346, !noalias !349
  %114 = add i64 %86, 8
  %115 = icmp eq i64 %114, %75
  br i1 %115, label %116, label %85, !llvm.loop !352

116:                                              ; preds = %85
  %117 = icmp eq i64 %75, %16
  %118 = extractelement <8 x i32> %104, i32 7
  br i1 %117, label %119, label %18

119:                                              ; preds = %48, %120, %116, %4
  ret void

120:                                              ; preds = %48, %120
  %121 = phi i64 [ %166, %120 ], [ %49, %48 ]
  %122 = phi i16* [ %152, %120 ], [ %50, %48 ]
  %123 = phi i16* [ %155, %120 ], [ %51, %48 ]
  %124 = phi i32 [ %158, %120 ], [ %52, %48 ]
  %125 = getelementptr inbounds i16, i16* %122, i64 1
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = getelementptr inbounds i16, i16* %123, i64 1
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = getelementptr inbounds i16, i16* %122, i64 2
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = getelementptr inbounds i16, i16* %123, i64 2
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = add nuw nsw i32 %136, %133
  %138 = add nuw nsw i32 %130, %127
  %139 = shl nuw nsw i32 %138, 1
  %140 = add nuw nsw i32 %137, %124
  %141 = add nuw nsw i32 %140, %139
  %142 = lshr i32 %141, 3
  %143 = trunc i32 %142 to i16
  %144 = getelementptr inbounds i16, i16* %8, i64 %121
  store i16 %143, i16* %144, align 2
  %145 = add nuw nsw i64 %121, 1
  %146 = getelementptr inbounds i16, i16* %122, i64 3
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = getelementptr inbounds i16, i16* %123, i64 3
  %150 = load i16, i16* %149, align 2
  %151 = zext i16 %150 to i32
  %152 = getelementptr inbounds i16, i16* %122, i64 4
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = getelementptr inbounds i16, i16* %123, i64 4
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = add nuw nsw i32 %157, %154
  %159 = add nuw nsw i32 %151, %148
  %160 = shl nuw nsw i32 %159, 1
  %161 = add nuw nsw i32 %158, %137
  %162 = add nuw nsw i32 %161, %160
  %163 = lshr i32 %162, 3
  %164 = trunc i32 %163 to i16
  %165 = getelementptr inbounds i16, i16* %8, i64 %145
  store i16 %164, i16* %165, align 2
  %166 = add nuw nsw i64 %121, 2
  %167 = icmp eq i64 %166, %16
  br i1 %167, label %119, label %120, !llvm.loop !353
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I18ColorTypeFilter_16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %0 to i16*
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %120

12:                                               ; preds = %4
  %13 = load i16, i16* %9, align 2
  %14 = zext i16 %13 to i32
  %15 = load i16, i16* %5, align 2
  %16 = zext i16 %15 to i32
  %17 = add nuw nsw i32 %14, %16
  %18 = load i16, i16* %7, align 2
  %19 = zext i16 %18 to i32
  %20 = shl nuw nsw i32 %19, 1
  %21 = add nuw nsw i32 %17, %20
  %22 = zext i32 %3 to i64
  %23 = icmp ult i32 %3, 4
  br i1 %23, label %24, label %30

24:                                               ; preds = %117, %30, %12
  %25 = phi i64 [ 0, %12 ], [ 0, %30 ], [ %60, %117 ]
  %26 = phi i16* [ %5, %12 ], [ %5, %30 ], [ %62, %117 ]
  %27 = phi i16* [ %7, %12 ], [ %7, %30 ], [ %64, %117 ]
  %28 = phi i32 [ %21, %12 ], [ %21, %30 ], [ %119, %117 ]
  %29 = phi i16* [ %9, %12 ], [ %9, %30 ], [ %66, %117 ]
  br label %121

30:                                               ; preds = %12
  %31 = shl nuw nsw i64 %22, 1
  %32 = getelementptr i8, i8* %0, i64 %31
  %33 = shl i64 %2, 1
  %34 = add i64 %33, 2
  %35 = getelementptr i8, i8* %1, i64 %34
  %36 = shl nuw nsw i64 %22, 2
  %37 = add i64 %36, %33
  %38 = add i64 %37, 2
  %39 = getelementptr i8, i8* %1, i64 %38
  %40 = add i64 %2, 2
  %41 = getelementptr i8, i8* %1, i64 %40
  %42 = add i64 %36, %2
  %43 = add i64 %42, 2
  %44 = getelementptr i8, i8* %1, i64 %43
  %45 = getelementptr i8, i8* %1, i64 2
  %46 = or i64 %36, 2
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = icmp ugt i8* %39, %0
  %49 = icmp ult i8* %35, %32
  %50 = and i1 %48, %49
  %51 = icmp ugt i8* %44, %0
  %52 = icmp ult i8* %41, %32
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  %55 = icmp ugt i8* %47, %0
  %56 = icmp ult i8* %45, %32
  %57 = and i1 %55, %56
  %58 = or i1 %54, %57
  br i1 %58, label %24, label %59

59:                                               ; preds = %30
  %60 = and i64 %22, 4294967292
  %61 = shl nuw nsw i64 %60, 1
  %62 = getelementptr i16, i16* %5, i64 %61
  %63 = shl nuw nsw i64 %60, 1
  %64 = getelementptr i16, i16* %7, i64 %63
  %65 = shl nuw nsw i64 %60, 1
  %66 = getelementptr i16, i16* %9, i64 %65
  %67 = insertelement <4 x i32> undef, i32 %21, i32 3
  %68 = getelementptr i8, i8* %1, i64 2
  %69 = bitcast i8* %68 to i16*
  %70 = getelementptr i8, i8* %6, i64 2
  %71 = bitcast i8* %70 to i16*
  %72 = getelementptr i8, i8* %8, i64 2
  %73 = bitcast i8* %72 to i16*
  br label %74

74:                                               ; preds = %74, %59
  %75 = phi i64 [ 0, %59 ], [ %115, %74 ]
  %76 = phi <4 x i32> [ %67, %59 ], [ %107, %74 ]
  %77 = shl i64 %75, 1
  %78 = shl i64 %75, 1
  %79 = shl i64 %75, 1
  %80 = getelementptr inbounds i16, i16* %69, i64 %77
  %81 = bitcast i16* %80 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2
  %83 = shufflevector <8 x i16> %82, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %84 = shufflevector <8 x i16> %82, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %85 = zext <4 x i16> %83 to <4 x i32>
  %86 = getelementptr inbounds i16, i16* %71, i64 %78
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2
  %89 = shufflevector <8 x i16> %88, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %90 = shufflevector <8 x i16> %88, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %91 = zext <4 x i16> %89 to <4 x i32>
  %92 = getelementptr inbounds i16, i16* %73, i64 %79
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2
  %95 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %96 = shufflevector <8 x i16> %94, <8 x i16> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %97 = zext <4 x i16> %95 to <4 x i32>
  %98 = shl nuw nsw <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %99 = add nuw nsw <4 x i32> %97, %85
  %100 = add nuw nsw <4 x i32> %99, %98
  %101 = shl nuw nsw <4 x i32> %100, <i32 1, i32 1, i32 1, i32 1>
  %102 = zext <4 x i16> %84 to <4 x i32>
  %103 = zext <4 x i16> %90 to <4 x i32>
  %104 = zext <4 x i16> %96 to <4 x i32>
  %105 = shl nuw nsw <4 x i32> %103, <i32 1, i32 1, i32 1, i32 1>
  %106 = add nuw nsw <4 x i32> %104, %102
  %107 = add nuw nsw <4 x i32> %106, %105
  %108 = shufflevector <4 x i32> %76, <4 x i32> %107, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %109 = add nuw nsw <4 x i32> %101, %108
  %110 = add nuw nsw <4 x i32> %109, %107
  %111 = lshr <4 x i32> %110, <i32 4, i32 4, i32 4, i32 4>
  %112 = trunc <4 x i32> %111 to <4 x i16>
  %113 = getelementptr inbounds i16, i16* %10, i64 %75
  %114 = bitcast i16* %113 to <4 x i16>*
  store <4 x i16> %112, <4 x i16>* %114, align 2, !alias.scope !354, !noalias !357
  %115 = add i64 %75, 4
  %116 = icmp eq i64 %115, %60
  br i1 %116, label %117, label %74, !llvm.loop !361

117:                                              ; preds = %74
  %118 = icmp eq i64 %60, %22
  %119 = extractelement <4 x i32> %107, i32 3
  br i1 %118, label %120, label %24

120:                                              ; preds = %121, %117, %4
  ret void

121:                                              ; preds = %24, %121
  %122 = phi i64 [ %157, %121 ], [ %25, %24 ]
  %123 = phi i16* [ %140, %121 ], [ %26, %24 ]
  %124 = phi i16* [ %143, %121 ], [ %27, %24 ]
  %125 = phi i32 [ %151, %121 ], [ %28, %24 ]
  %126 = phi i16* [ %146, %121 ], [ %29, %24 ]
  %127 = getelementptr inbounds i16, i16* %123, i64 1
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = getelementptr inbounds i16, i16* %124, i64 1
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = getelementptr inbounds i16, i16* %126, i64 1
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i32
  %136 = shl nuw nsw i32 %132, 1
  %137 = add nuw nsw i32 %135, %129
  %138 = add nuw nsw i32 %137, %136
  %139 = shl nuw nsw i32 %138, 1
  %140 = getelementptr inbounds i16, i16* %123, i64 2
  %141 = load i16, i16* %140, align 2
  %142 = zext i16 %141 to i32
  %143 = getelementptr inbounds i16, i16* %124, i64 2
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = getelementptr inbounds i16, i16* %126, i64 2
  %147 = load i16, i16* %146, align 2
  %148 = zext i16 %147 to i32
  %149 = shl nuw nsw i32 %145, 1
  %150 = add nuw nsw i32 %148, %142
  %151 = add nuw nsw i32 %150, %149
  %152 = add nuw nsw i32 %139, %125
  %153 = add nuw nsw i32 %152, %151
  %154 = lshr i32 %153, 4
  %155 = trunc i32 %154 to i16
  %156 = getelementptr inbounds i16, i16* %10, i64 %122
  store i16 %155, i16* %156, align 2
  %157 = add nuw nsw i64 %122, 1
  %158 = icmp eq i64 %157, %22
  br i1 %158, label %120, label %121, !llvm.loop !362
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %93

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  %12 = icmp ult i32 %3, 3
  br i1 %12, label %13, label %17

13:                                               ; preds = %42, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %37, %42 ]
  %15 = phi i32* [ %10, %17 ], [ %10, %7 ], [ %39, %42 ]
  %16 = phi i32* [ %9, %17 ], [ %9, %7 ], [ %41, %42 ]
  br label %94

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 2
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 3
  %21 = add i64 %20, %2
  %22 = add i64 %21, -4
  %23 = getelementptr i8, i8* %1, i64 %22
  %24 = add nsw i64 %20, -4
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = icmp ugt i8* %23, %0
  %27 = icmp ult i8* %8, %19
  %28 = and i1 %26, %27
  %29 = icmp ugt i8* %25, %0
  %30 = icmp ugt i8* %19, %1
  %31 = and i1 %29, %30
  %32 = or i1 %28, %31
  br i1 %32, label %13, label %33

33:                                               ; preds = %17
  %34 = and i64 %11, 1
  %35 = icmp eq i64 %34, 0
  %36 = select i1 %35, i64 2, i64 %34
  %37 = sub nsw i64 %11, %36
  %38 = shl nsw i64 %37, 1
  %39 = getelementptr i32, i32* %10, i64 %38
  %40 = shl nsw i64 %37, 1
  %41 = getelementptr i32, i32* %9, i64 %40
  br label %42

42:                                               ; preds = %42, %33
  %43 = phi i64 [ 0, %33 ], [ %91, %42 ]
  %44 = shl i64 %43, 1
  %45 = getelementptr i32, i32* %10, i64 %44
  %46 = shl i64 %43, 1
  %47 = getelementptr i32, i32* %9, i64 %46
  %48 = bitcast i32* %45 to <4 x i32>*
  %49 = load <4 x i32>, <4 x i32>* %48, align 4
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %51 = zext <2 x i32> %50 to <2 x i64>
  %52 = and <2 x i64> %51, <i64 1023, i64 1023>
  %53 = shl nuw nsw <2 x i64> %51, <i64 10, i64 10>
  %54 = and <2 x i64> %53, <i64 1072693248, i64 1072693248>
  %55 = or <2 x i64> %54, %52
  %56 = shl nuw nsw <2 x i64> %51, <i64 20, i64 20>
  %57 = and <2 x i64> %56, <i64 1124800395214848, i64 1124800395214848>
  %58 = or <2 x i64> %55, %57
  %59 = shl nuw nsw <2 x i64> %51, <i64 30, i64 30>
  %60 = and <2 x i64> %59, <i64 3458764513820540928, i64 3458764513820540928>
  %61 = or <2 x i64> %58, %60
  %62 = bitcast i32* %47 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 4
  %64 = shufflevector <4 x i32> %63, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %65 = zext <2 x i32> %64 to <2 x i64>
  %66 = and <2 x i64> %65, <i64 1023, i64 1023>
  %67 = shl nuw nsw <2 x i64> %65, <i64 10, i64 10>
  %68 = and <2 x i64> %67, <i64 1072693248, i64 1072693248>
  %69 = or <2 x i64> %68, %66
  %70 = shl nuw nsw <2 x i64> %65, <i64 20, i64 20>
  %71 = and <2 x i64> %70, <i64 1124800395214848, i64 1124800395214848>
  %72 = or <2 x i64> %69, %71
  %73 = shl nuw nsw <2 x i64> %65, <i64 30, i64 30>
  %74 = and <2 x i64> %73, <i64 3458764513820540928, i64 3458764513820540928>
  %75 = or <2 x i64> %72, %74
  %76 = add nuw nsw <2 x i64> %75, %61
  %77 = lshr <2 x i64> %76, <i64 1, i64 1>
  %78 = and <2 x i64> %77, <i64 1023, i64 1023>
  %79 = lshr <2 x i64> %76, <i64 11, i64 11>
  %80 = and <2 x i64> %79, <i64 1047552, i64 1047552>
  %81 = or <2 x i64> %80, %78
  %82 = lshr <2 x i64> %76, <i64 21, i64 21>
  %83 = and <2 x i64> %82, <i64 1072693248, i64 1072693248>
  %84 = or <2 x i64> %81, %83
  %85 = lshr <2 x i64> %76, <i64 31, i64 31>
  %86 = and <2 x i64> %85, <i64 3221225472, i64 3221225472>
  %87 = or <2 x i64> %84, %86
  %88 = trunc <2 x i64> %87 to <2 x i32>
  %89 = getelementptr inbounds i32, i32* %5, i64 %43
  %90 = bitcast i32* %89 to <2 x i32>*
  store <2 x i32> %88, <2 x i32>* %90, align 4, !alias.scope !363, !noalias !366
  %91 = add i64 %43, 2
  %92 = icmp eq i64 %91, %37
  br i1 %92, label %13, label %42, !llvm.loop !369

93:                                               ; preds = %94, %4
  ret void

94:                                               ; preds = %13, %94
  %95 = phi i64 [ %138, %94 ], [ %14, %13 ]
  %96 = phi i32* [ %136, %94 ], [ %15, %13 ]
  %97 = phi i32* [ %137, %94 ], [ %16, %13 ]
  %98 = load i32, i32* %96, align 4
  %99 = zext i32 %98 to i64
  %100 = and i64 %99, 1023
  %101 = shl nuw nsw i64 %99, 10
  %102 = and i64 %101, 1072693248
  %103 = or i64 %102, %100
  %104 = shl nuw nsw i64 %99, 20
  %105 = and i64 %104, 1124800395214848
  %106 = or i64 %103, %105
  %107 = shl nuw nsw i64 %99, 30
  %108 = and i64 %107, 3458764513820540928
  %109 = or i64 %106, %108
  %110 = load i32, i32* %97, align 4
  %111 = zext i32 %110 to i64
  %112 = and i64 %111, 1023
  %113 = shl nuw nsw i64 %111, 10
  %114 = and i64 %113, 1072693248
  %115 = or i64 %114, %112
  %116 = shl nuw nsw i64 %111, 20
  %117 = and i64 %116, 1124800395214848
  %118 = or i64 %115, %117
  %119 = shl nuw nsw i64 %111, 30
  %120 = and i64 %119, 3458764513820540928
  %121 = or i64 %118, %120
  %122 = add nuw nsw i64 %121, %109
  %123 = lshr i64 %122, 1
  %124 = and i64 %123, 1023
  %125 = lshr i64 %122, 11
  %126 = and i64 %125, 1047552
  %127 = or i64 %126, %124
  %128 = lshr i64 %122, 21
  %129 = and i64 %128, 1072693248
  %130 = or i64 %127, %129
  %131 = lshr i64 %122, 31
  %132 = and i64 %131, 3221225472
  %133 = or i64 %130, %132
  %134 = trunc i64 %133 to i32
  %135 = getelementptr inbounds i32, i32* %5, i64 %95
  store i32 %134, i32* %135, align 4
  %136 = getelementptr inbounds i32, i32* %96, i64 2
  %137 = getelementptr inbounds i32, i32* %97, i64 2
  %138 = add nuw nsw i64 %95, 1
  %139 = icmp eq i64 %138, %11
  br i1 %139, label %93, label %94, !llvm.loop !370
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %124

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  %14 = icmp ult i32 %3, 3
  br i1 %14, label %15, label %20

15:                                               ; preds = %55, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %48, %55 ]
  %17 = phi i32* [ %10, %20 ], [ %10, %8 ], [ %50, %55 ]
  %18 = phi i32* [ %11, %20 ], [ %11, %8 ], [ %52, %55 ]
  %19 = phi i32* [ %12, %20 ], [ %12, %8 ], [ %54, %55 ]
  br label %125

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 3
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = add i64 %25, -4
  %27 = getelementptr i8, i8* %1, i64 %26
  %28 = add i64 %23, %2
  %29 = add i64 %28, -4
  %30 = getelementptr i8, i8* %1, i64 %29
  %31 = add nsw i64 %23, -4
  %32 = getelementptr i8, i8* %1, i64 %31
  %33 = icmp ugt i8* %27, %0
  %34 = icmp ult i8* %9, %22
  %35 = and i1 %33, %34
  %36 = icmp ugt i8* %30, %0
  %37 = icmp ult i8* %5, %22
  %38 = and i1 %36, %37
  %39 = or i1 %35, %38
  %40 = icmp ugt i8* %32, %0
  %41 = icmp ugt i8* %22, %1
  %42 = and i1 %40, %41
  %43 = or i1 %39, %42
  br i1 %43, label %15, label %44

44:                                               ; preds = %20
  %45 = and i64 %13, 1
  %46 = icmp eq i64 %45, 0
  %47 = select i1 %46, i64 2, i64 %45
  %48 = sub nsw i64 %13, %47
  %49 = shl nsw i64 %48, 1
  %50 = getelementptr i32, i32* %10, i64 %49
  %51 = shl nsw i64 %48, 1
  %52 = getelementptr i32, i32* %11, i64 %51
  %53 = shl nsw i64 %48, 1
  %54 = getelementptr i32, i32* %12, i64 %53
  br label %55

55:                                               ; preds = %55, %44
  %56 = phi i64 [ 0, %44 ], [ %122, %55 ]
  %57 = shl i64 %56, 1
  %58 = getelementptr i32, i32* %10, i64 %57
  %59 = shl i64 %56, 1
  %60 = getelementptr i32, i32* %11, i64 %59
  %61 = shl i64 %56, 1
  %62 = getelementptr i32, i32* %12, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = shufflevector <4 x i32> %64, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %66 = zext <2 x i32> %65 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 1023, i64 1023>
  %68 = shl nuw nsw <2 x i64> %66, <i64 10, i64 10>
  %69 = and <2 x i64> %68, <i64 1072693248, i64 1072693248>
  %70 = or <2 x i64> %69, %67
  %71 = shl nuw nsw <2 x i64> %66, <i64 20, i64 20>
  %72 = and <2 x i64> %71, <i64 1124800395214848, i64 1124800395214848>
  %73 = or <2 x i64> %70, %72
  %74 = shl nuw nsw <2 x i64> %66, <i64 30, i64 30>
  %75 = and <2 x i64> %74, <i64 3458764513820540928, i64 3458764513820540928>
  %76 = or <2 x i64> %73, %75
  %77 = bitcast i32* %60 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 4
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %80 = zext <2 x i32> %79 to <2 x i64>
  %81 = and <2 x i64> %80, <i64 1023, i64 1023>
  %82 = shl nuw nsw <2 x i64> %80, <i64 10, i64 10>
  %83 = and <2 x i64> %82, <i64 1072693248, i64 1072693248>
  %84 = or <2 x i64> %83, %81
  %85 = shl nuw nsw <2 x i64> %80, <i64 20, i64 20>
  %86 = and <2 x i64> %85, <i64 1124800395214848, i64 1124800395214848>
  %87 = or <2 x i64> %84, %86
  %88 = shl nuw nsw <2 x i64> %80, <i64 30, i64 30>
  %89 = and <2 x i64> %88, <i64 3458764513820540928, i64 3458764513820540928>
  %90 = or <2 x i64> %87, %89
  %91 = bitcast i32* %58 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 4
  %93 = shufflevector <4 x i32> %92, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %94 = zext <2 x i32> %93 to <2 x i64>
  %95 = and <2 x i64> %94, <i64 1023, i64 1023>
  %96 = shl nuw nsw <2 x i64> %94, <i64 10, i64 10>
  %97 = and <2 x i64> %96, <i64 1072693248, i64 1072693248>
  %98 = or <2 x i64> %97, %95
  %99 = shl nuw nsw <2 x i64> %94, <i64 20, i64 20>
  %100 = and <2 x i64> %99, <i64 1124800395214848, i64 1124800395214848>
  %101 = or <2 x i64> %98, %100
  %102 = shl nuw nsw <2 x i64> %94, <i64 30, i64 30>
  %103 = and <2 x i64> %102, <i64 3458764513820540928, i64 3458764513820540928>
  %104 = or <2 x i64> %101, %103
  %105 = shl nuw nsw <2 x i64> %90, <i64 1, i64 1>
  %106 = add nuw nsw <2 x i64> %104, %76
  %107 = add nuw <2 x i64> %106, %105
  %108 = lshr <2 x i64> %107, <i64 2, i64 2>
  %109 = and <2 x i64> %108, <i64 1023, i64 1023>
  %110 = lshr <2 x i64> %107, <i64 12, i64 12>
  %111 = and <2 x i64> %110, <i64 1047552, i64 1047552>
  %112 = or <2 x i64> %111, %109
  %113 = lshr <2 x i64> %107, <i64 22, i64 22>
  %114 = and <2 x i64> %113, <i64 1072693248, i64 1072693248>
  %115 = or <2 x i64> %112, %114
  %116 = lshr <2 x i64> %107, <i64 32, i64 32>
  %117 = and <2 x i64> %116, <i64 3221225472, i64 3221225472>
  %118 = or <2 x i64> %115, %117
  %119 = trunc <2 x i64> %118 to <2 x i32>
  %120 = getelementptr inbounds i32, i32* %6, i64 %56
  %121 = bitcast i32* %120 to <2 x i32>*
  store <2 x i32> %119, <2 x i32>* %121, align 4, !alias.scope !371, !noalias !374
  %122 = add i64 %56, 2
  %123 = icmp eq i64 %122, %48
  br i1 %123, label %15, label %55, !llvm.loop !378

124:                                              ; preds = %125, %4
  ret void

125:                                              ; preds = %15, %125
  %126 = phi i64 [ %185, %125 ], [ %16, %15 ]
  %127 = phi i32* [ %184, %125 ], [ %17, %15 ]
  %128 = phi i32* [ %183, %125 ], [ %18, %15 ]
  %129 = phi i32* [ %182, %125 ], [ %19, %15 ]
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i64
  %132 = and i64 %131, 1023
  %133 = shl nuw nsw i64 %131, 10
  %134 = and i64 %133, 1072693248
  %135 = or i64 %134, %132
  %136 = shl nuw nsw i64 %131, 20
  %137 = and i64 %136, 1124800395214848
  %138 = or i64 %135, %137
  %139 = shl nuw nsw i64 %131, 30
  %140 = and i64 %139, 3458764513820540928
  %141 = or i64 %138, %140
  %142 = load i32, i32* %128, align 4
  %143 = zext i32 %142 to i64
  %144 = and i64 %143, 1023
  %145 = shl nuw nsw i64 %143, 10
  %146 = and i64 %145, 1072693248
  %147 = or i64 %146, %144
  %148 = shl nuw nsw i64 %143, 20
  %149 = and i64 %148, 1124800395214848
  %150 = or i64 %147, %149
  %151 = shl nuw nsw i64 %143, 30
  %152 = and i64 %151, 3458764513820540928
  %153 = or i64 %150, %152
  %154 = load i32, i32* %127, align 4
  %155 = zext i32 %154 to i64
  %156 = and i64 %155, 1023
  %157 = shl nuw nsw i64 %155, 10
  %158 = and i64 %157, 1072693248
  %159 = or i64 %158, %156
  %160 = shl nuw nsw i64 %155, 20
  %161 = and i64 %160, 1124800395214848
  %162 = or i64 %159, %161
  %163 = shl nuw nsw i64 %155, 30
  %164 = and i64 %163, 3458764513820540928
  %165 = or i64 %162, %164
  %166 = shl nuw nsw i64 %153, 1
  %167 = add nuw nsw i64 %165, %141
  %168 = add nuw i64 %167, %166
  %169 = lshr i64 %168, 2
  %170 = and i64 %169, 1023
  %171 = lshr i64 %168, 12
  %172 = and i64 %171, 1047552
  %173 = or i64 %172, %170
  %174 = lshr i64 %168, 22
  %175 = and i64 %174, 1072693248
  %176 = or i64 %173, %175
  %177 = lshr i64 %168, 32
  %178 = and i64 %177, 3221225472
  %179 = or i64 %176, %178
  %180 = trunc i64 %179 to i32
  %181 = getelementptr inbounds i32, i32* %6, i64 %126
  store i32 %180, i32* %181, align 4
  %182 = getelementptr inbounds i32, i32* %129, i64 2
  %183 = getelementptr inbounds i32, i32* %128, i64 2
  %184 = getelementptr inbounds i32, i32* %127, i64 2
  %185 = add nuw nsw i64 %126, 1
  %186 = icmp eq i64 %185, %13
  br i1 %186, label %124, label %125, !llvm.loop !379
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %75

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i32*
  %9 = zext i32 %3 to i64
  %10 = icmp eq i32 %3, 1
  br i1 %10, label %11, label %14

11:                                               ; preds = %73, %14, %7
  %12 = phi i64 [ 0, %14 ], [ 0, %7 ], [ %23, %73 ]
  %13 = phi i32* [ %8, %14 ], [ %8, %7 ], [ %25, %73 ]
  br label %76

14:                                               ; preds = %7
  %15 = shl nuw nsw i64 %9, 2
  %16 = getelementptr i8, i8* %0, i64 %15
  %17 = shl nuw nsw i64 %9, 3
  %18 = getelementptr i8, i8* %1, i64 %17
  %19 = icmp ugt i8* %18, %0
  %20 = icmp ugt i8* %16, %1
  %21 = and i1 %19, %20
  br i1 %21, label %11, label %22

22:                                               ; preds = %14
  %23 = and i64 %9, 4294967294
  %24 = shl nuw nsw i64 %23, 1
  %25 = getelementptr i32, i32* %8, i64 %24
  br label %26

26:                                               ; preds = %26, %22
  %27 = phi i64 [ 0, %22 ], [ %71, %26 ]
  %28 = shl i64 %27, 1
  %29 = getelementptr i32, i32* %8, i64 %28
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 4
  %32 = shufflevector <4 x i32> %31, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %33 = shufflevector <4 x i32> %31, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %34 = zext <2 x i32> %32 to <2 x i64>
  %35 = and <2 x i64> %34, <i64 1023, i64 1023>
  %36 = shl nuw nsw <2 x i64> %34, <i64 10, i64 10>
  %37 = and <2 x i64> %36, <i64 1072693248, i64 1072693248>
  %38 = or <2 x i64> %37, %35
  %39 = shl nuw nsw <2 x i64> %34, <i64 20, i64 20>
  %40 = and <2 x i64> %39, <i64 1124800395214848, i64 1124800395214848>
  %41 = or <2 x i64> %38, %40
  %42 = shl nuw nsw <2 x i64> %34, <i64 30, i64 30>
  %43 = and <2 x i64> %42, <i64 3458764513820540928, i64 3458764513820540928>
  %44 = or <2 x i64> %41, %43
  %45 = zext <2 x i32> %33 to <2 x i64>
  %46 = and <2 x i64> %45, <i64 1023, i64 1023>
  %47 = shl nuw nsw <2 x i64> %45, <i64 10, i64 10>
  %48 = and <2 x i64> %47, <i64 1072693248, i64 1072693248>
  %49 = or <2 x i64> %48, %46
  %50 = shl nuw nsw <2 x i64> %45, <i64 20, i64 20>
  %51 = and <2 x i64> %50, <i64 1124800395214848, i64 1124800395214848>
  %52 = or <2 x i64> %49, %51
  %53 = shl nuw nsw <2 x i64> %45, <i64 30, i64 30>
  %54 = and <2 x i64> %53, <i64 3458764513820540928, i64 3458764513820540928>
  %55 = or <2 x i64> %52, %54
  %56 = add nuw nsw <2 x i64> %55, %44
  %57 = lshr <2 x i64> %56, <i64 1, i64 1>
  %58 = and <2 x i64> %57, <i64 1023, i64 1023>
  %59 = lshr <2 x i64> %56, <i64 11, i64 11>
  %60 = and <2 x i64> %59, <i64 1047552, i64 1047552>
  %61 = or <2 x i64> %60, %58
  %62 = lshr <2 x i64> %56, <i64 21, i64 21>
  %63 = and <2 x i64> %62, <i64 1072693248, i64 1072693248>
  %64 = or <2 x i64> %61, %63
  %65 = lshr <2 x i64> %56, <i64 31, i64 31>
  %66 = and <2 x i64> %65, <i64 3221225472, i64 3221225472>
  %67 = or <2 x i64> %64, %66
  %68 = trunc <2 x i64> %67 to <2 x i32>
  %69 = getelementptr inbounds i32, i32* %5, i64 %27
  %70 = bitcast i32* %69 to <2 x i32>*
  store <2 x i32> %68, <2 x i32>* %70, align 4, !alias.scope !380, !noalias !383
  %71 = add i64 %27, 2
  %72 = icmp eq i64 %71, %23
  br i1 %72, label %73, label %26, !llvm.loop !385

73:                                               ; preds = %26
  %74 = icmp eq i64 %23, %9
  br i1 %74, label %75, label %11

75:                                               ; preds = %76, %73, %4
  ret void

76:                                               ; preds = %11, %76
  %77 = phi i64 [ %119, %76 ], [ %12, %11 ]
  %78 = phi i32* [ %118, %76 ], [ %13, %11 ]
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = and i64 %80, 1023
  %82 = shl nuw nsw i64 %80, 10
  %83 = and i64 %82, 1072693248
  %84 = or i64 %83, %81
  %85 = shl nuw nsw i64 %80, 20
  %86 = and i64 %85, 1124800395214848
  %87 = or i64 %84, %86
  %88 = shl nuw nsw i64 %80, 30
  %89 = and i64 %88, 3458764513820540928
  %90 = or i64 %87, %89
  %91 = getelementptr inbounds i32, i32* %78, i64 1
  %92 = load i32, i32* %91, align 4
  %93 = zext i32 %92 to i64
  %94 = and i64 %93, 1023
  %95 = shl nuw nsw i64 %93, 10
  %96 = and i64 %95, 1072693248
  %97 = or i64 %96, %94
  %98 = shl nuw nsw i64 %93, 20
  %99 = and i64 %98, 1124800395214848
  %100 = or i64 %97, %99
  %101 = shl nuw nsw i64 %93, 30
  %102 = and i64 %101, 3458764513820540928
  %103 = or i64 %100, %102
  %104 = add nuw nsw i64 %103, %90
  %105 = lshr i64 %104, 1
  %106 = and i64 %105, 1023
  %107 = lshr i64 %104, 11
  %108 = and i64 %107, 1047552
  %109 = or i64 %108, %106
  %110 = lshr i64 %104, 21
  %111 = and i64 %110, 1072693248
  %112 = or i64 %109, %111
  %113 = lshr i64 %104, 31
  %114 = and i64 %113, 3221225472
  %115 = or i64 %112, %114
  %116 = trunc i64 %115 to i32
  %117 = getelementptr inbounds i32, i32* %5, i64 %77
  store i32 %116, i32* %117, align 4
  %118 = getelementptr inbounds i32, i32* %78, i64 2
  %119 = add nuw nsw i64 %77, 1
  %120 = icmp eq i64 %119, %9
  br i1 %120, label %75, label %76, !llvm.loop !386
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %116

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  %12 = icmp eq i32 %3, 1
  br i1 %12, label %13, label %17

13:                                               ; preds = %114, %17, %7
  %14 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %32, %114 ]
  %15 = phi i32* [ %10, %17 ], [ %10, %7 ], [ %34, %114 ]
  %16 = phi i32* [ %9, %17 ], [ %9, %7 ], [ %36, %114 ]
  br label %117

17:                                               ; preds = %7
  %18 = shl nuw nsw i64 %11, 2
  %19 = getelementptr i8, i8* %0, i64 %18
  %20 = shl nuw nsw i64 %11, 3
  %21 = add i64 %20, %2
  %22 = getelementptr i8, i8* %1, i64 %21
  %23 = getelementptr i8, i8* %1, i64 %20
  %24 = icmp ugt i8* %22, %0
  %25 = icmp ult i8* %8, %19
  %26 = and i1 %24, %25
  %27 = icmp ugt i8* %23, %0
  %28 = icmp ugt i8* %19, %1
  %29 = and i1 %27, %28
  %30 = or i1 %26, %29
  br i1 %30, label %13, label %31

31:                                               ; preds = %17
  %32 = and i64 %11, 4294967294
  %33 = shl nuw nsw i64 %32, 1
  %34 = getelementptr i32, i32* %10, i64 %33
  %35 = shl nuw nsw i64 %32, 1
  %36 = getelementptr i32, i32* %9, i64 %35
  br label %37

37:                                               ; preds = %37, %31
  %38 = phi i64 [ 0, %31 ], [ %112, %37 ]
  %39 = shl i64 %38, 1
  %40 = getelementptr i32, i32* %10, i64 %39
  %41 = shl i64 %38, 1
  %42 = getelementptr i32, i32* %9, i64 %41
  %43 = bitcast i32* %40 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = shufflevector <4 x i32> %44, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %46 = shufflevector <4 x i32> %44, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %47 = zext <2 x i32> %45 to <2 x i64>
  %48 = and <2 x i64> %47, <i64 1023, i64 1023>
  %49 = shl nuw nsw <2 x i64> %47, <i64 10, i64 10>
  %50 = and <2 x i64> %49, <i64 1072693248, i64 1072693248>
  %51 = or <2 x i64> %50, %48
  %52 = shl nuw nsw <2 x i64> %47, <i64 20, i64 20>
  %53 = and <2 x i64> %52, <i64 1124800395214848, i64 1124800395214848>
  %54 = or <2 x i64> %51, %53
  %55 = shl nuw nsw <2 x i64> %47, <i64 30, i64 30>
  %56 = and <2 x i64> %55, <i64 3458764513820540928, i64 3458764513820540928>
  %57 = or <2 x i64> %54, %56
  %58 = zext <2 x i32> %46 to <2 x i64>
  %59 = and <2 x i64> %58, <i64 1023, i64 1023>
  %60 = shl nuw nsw <2 x i64> %58, <i64 10, i64 10>
  %61 = and <2 x i64> %60, <i64 1072693248, i64 1072693248>
  %62 = or <2 x i64> %61, %59
  %63 = shl nuw nsw <2 x i64> %58, <i64 20, i64 20>
  %64 = and <2 x i64> %63, <i64 1124800395214848, i64 1124800395214848>
  %65 = or <2 x i64> %62, %64
  %66 = shl nuw nsw <2 x i64> %58, <i64 30, i64 30>
  %67 = and <2 x i64> %66, <i64 3458764513820540928, i64 3458764513820540928>
  %68 = or <2 x i64> %65, %67
  %69 = bitcast i32* %42 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 4
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %72 = shufflevector <4 x i32> %70, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %73 = zext <2 x i32> %71 to <2 x i64>
  %74 = and <2 x i64> %73, <i64 1023, i64 1023>
  %75 = shl nuw nsw <2 x i64> %73, <i64 10, i64 10>
  %76 = and <2 x i64> %75, <i64 1072693248, i64 1072693248>
  %77 = or <2 x i64> %76, %74
  %78 = shl nuw nsw <2 x i64> %73, <i64 20, i64 20>
  %79 = and <2 x i64> %78, <i64 1124800395214848, i64 1124800395214848>
  %80 = or <2 x i64> %77, %79
  %81 = shl nuw nsw <2 x i64> %73, <i64 30, i64 30>
  %82 = and <2 x i64> %81, <i64 3458764513820540928, i64 3458764513820540928>
  %83 = or <2 x i64> %80, %82
  %84 = zext <2 x i32> %72 to <2 x i64>
  %85 = and <2 x i64> %84, <i64 1023, i64 1023>
  %86 = shl nuw nsw <2 x i64> %84, <i64 10, i64 10>
  %87 = and <2 x i64> %86, <i64 1072693248, i64 1072693248>
  %88 = or <2 x i64> %87, %85
  %89 = shl nuw nsw <2 x i64> %84, <i64 20, i64 20>
  %90 = and <2 x i64> %89, <i64 1124800395214848, i64 1124800395214848>
  %91 = or <2 x i64> %88, %90
  %92 = shl nuw nsw <2 x i64> %84, <i64 30, i64 30>
  %93 = and <2 x i64> %92, <i64 3458764513820540928, i64 3458764513820540928>
  %94 = or <2 x i64> %91, %93
  %95 = add nuw nsw <2 x i64> %68, %57
  %96 = add nuw <2 x i64> %95, %83
  %97 = add <2 x i64> %96, %94
  %98 = lshr <2 x i64> %97, <i64 2, i64 2>
  %99 = and <2 x i64> %98, <i64 1023, i64 1023>
  %100 = lshr <2 x i64> %97, <i64 12, i64 12>
  %101 = and <2 x i64> %100, <i64 1047552, i64 1047552>
  %102 = or <2 x i64> %101, %99
  %103 = lshr <2 x i64> %97, <i64 22, i64 22>
  %104 = and <2 x i64> %103, <i64 1072693248, i64 1072693248>
  %105 = or <2 x i64> %102, %104
  %106 = lshr <2 x i64> %97, <i64 32, i64 32>
  %107 = and <2 x i64> %106, <i64 3221225472, i64 3221225472>
  %108 = or <2 x i64> %105, %107
  %109 = trunc <2 x i64> %108 to <2 x i32>
  %110 = getelementptr inbounds i32, i32* %5, i64 %38
  %111 = bitcast i32* %110 to <2 x i32>*
  store <2 x i32> %109, <2 x i32>* %111, align 4, !alias.scope !387, !noalias !390
  %112 = add i64 %38, 2
  %113 = icmp eq i64 %112, %32
  br i1 %113, label %114, label %37, !llvm.loop !393

114:                                              ; preds = %37
  %115 = icmp eq i64 %32, %11
  br i1 %115, label %116, label %13

116:                                              ; preds = %117, %114, %4
  ret void

117:                                              ; preds = %13, %117
  %118 = phi i64 [ %189, %117 ], [ %14, %13 ]
  %119 = phi i32* [ %187, %117 ], [ %15, %13 ]
  %120 = phi i32* [ %188, %117 ], [ %16, %13 ]
  %121 = load i32, i32* %119, align 4
  %122 = zext i32 %121 to i64
  %123 = and i64 %122, 1023
  %124 = shl nuw nsw i64 %122, 10
  %125 = and i64 %124, 1072693248
  %126 = or i64 %125, %123
  %127 = shl nuw nsw i64 %122, 20
  %128 = and i64 %127, 1124800395214848
  %129 = or i64 %126, %128
  %130 = shl nuw nsw i64 %122, 30
  %131 = and i64 %130, 3458764513820540928
  %132 = or i64 %129, %131
  %133 = getelementptr inbounds i32, i32* %119, i64 1
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i64
  %136 = and i64 %135, 1023
  %137 = shl nuw nsw i64 %135, 10
  %138 = and i64 %137, 1072693248
  %139 = or i64 %138, %136
  %140 = shl nuw nsw i64 %135, 20
  %141 = and i64 %140, 1124800395214848
  %142 = or i64 %139, %141
  %143 = shl nuw nsw i64 %135, 30
  %144 = and i64 %143, 3458764513820540928
  %145 = or i64 %142, %144
  %146 = load i32, i32* %120, align 4
  %147 = zext i32 %146 to i64
  %148 = and i64 %147, 1023
  %149 = shl nuw nsw i64 %147, 10
  %150 = and i64 %149, 1072693248
  %151 = or i64 %150, %148
  %152 = shl nuw nsw i64 %147, 20
  %153 = and i64 %152, 1124800395214848
  %154 = or i64 %151, %153
  %155 = shl nuw nsw i64 %147, 30
  %156 = and i64 %155, 3458764513820540928
  %157 = or i64 %154, %156
  %158 = getelementptr inbounds i32, i32* %120, i64 1
  %159 = load i32, i32* %158, align 4
  %160 = zext i32 %159 to i64
  %161 = and i64 %160, 1023
  %162 = shl nuw nsw i64 %160, 10
  %163 = and i64 %162, 1072693248
  %164 = or i64 %163, %161
  %165 = shl nuw nsw i64 %160, 20
  %166 = and i64 %165, 1124800395214848
  %167 = or i64 %164, %166
  %168 = shl nuw nsw i64 %160, 30
  %169 = and i64 %168, 3458764513820540928
  %170 = or i64 %167, %169
  %171 = add nuw nsw i64 %145, %132
  %172 = add nuw i64 %171, %157
  %173 = add i64 %172, %170
  %174 = lshr i64 %173, 2
  %175 = and i64 %174, 1023
  %176 = lshr i64 %173, 12
  %177 = and i64 %176, 1047552
  %178 = or i64 %177, %175
  %179 = lshr i64 %173, 22
  %180 = and i64 %179, 1072693248
  %181 = or i64 %178, %180
  %182 = lshr i64 %173, 32
  %183 = and i64 %182, 3221225472
  %184 = or i64 %181, %183
  %185 = trunc i64 %184 to i32
  %186 = getelementptr inbounds i32, i32* %5, i64 %118
  store i32 %185, i32* %186, align 4
  %187 = getelementptr inbounds i32, i32* %119, i64 2
  %188 = getelementptr inbounds i32, i32* %120, i64 2
  %189 = add nuw nsw i64 %118, 1
  %190 = icmp eq i64 %189, %11
  br i1 %190, label %116, label %117, !llvm.loop !394
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %159

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  %14 = icmp eq i32 %3, 1
  br i1 %14, label %15, label %20

15:                                               ; preds = %157, %20, %8
  %16 = phi i64 [ 0, %20 ], [ 0, %8 ], [ %42, %157 ]
  %17 = phi i32* [ %10, %20 ], [ %10, %8 ], [ %44, %157 ]
  %18 = phi i32* [ %11, %20 ], [ %11, %8 ], [ %46, %157 ]
  %19 = phi i32* [ %12, %20 ], [ %12, %8 ], [ %48, %157 ]
  br label %160

20:                                               ; preds = %8
  %21 = shl nuw nsw i64 %13, 2
  %22 = getelementptr i8, i8* %0, i64 %21
  %23 = shl nuw nsw i64 %13, 3
  %24 = shl i64 %2, 1
  %25 = add i64 %23, %24
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = add i64 %23, %2
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = getelementptr i8, i8* %1, i64 %23
  %30 = icmp ugt i8* %26, %0
  %31 = icmp ult i8* %9, %22
  %32 = and i1 %30, %31
  %33 = icmp ugt i8* %28, %0
  %34 = icmp ult i8* %5, %22
  %35 = and i1 %33, %34
  %36 = or i1 %32, %35
  %37 = icmp ugt i8* %29, %0
  %38 = icmp ugt i8* %22, %1
  %39 = and i1 %37, %38
  %40 = or i1 %36, %39
  br i1 %40, label %15, label %41

41:                                               ; preds = %20
  %42 = and i64 %13, 4294967294
  %43 = shl nuw nsw i64 %42, 1
  %44 = getelementptr i32, i32* %10, i64 %43
  %45 = shl nuw nsw i64 %42, 1
  %46 = getelementptr i32, i32* %11, i64 %45
  %47 = shl nuw nsw i64 %42, 1
  %48 = getelementptr i32, i32* %12, i64 %47
  br label %49

49:                                               ; preds = %49, %41
  %50 = phi i64 [ 0, %41 ], [ %155, %49 ]
  %51 = shl i64 %50, 1
  %52 = getelementptr i32, i32* %10, i64 %51
  %53 = shl i64 %50, 1
  %54 = getelementptr i32, i32* %11, i64 %53
  %55 = shl i64 %50, 1
  %56 = getelementptr i32, i32* %12, i64 %55
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = shufflevector <4 x i32> %58, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %60 = shufflevector <4 x i32> %58, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %61 = zext <2 x i32> %59 to <2 x i64>
  %62 = and <2 x i64> %61, <i64 1023, i64 1023>
  %63 = shl nuw nsw <2 x i64> %61, <i64 10, i64 10>
  %64 = and <2 x i64> %63, <i64 1072693248, i64 1072693248>
  %65 = or <2 x i64> %64, %62
  %66 = shl nuw nsw <2 x i64> %61, <i64 20, i64 20>
  %67 = and <2 x i64> %66, <i64 1124800395214848, i64 1124800395214848>
  %68 = or <2 x i64> %65, %67
  %69 = shl nuw nsw <2 x i64> %61, <i64 30, i64 30>
  %70 = and <2 x i64> %69, <i64 3458764513820540928, i64 3458764513820540928>
  %71 = or <2 x i64> %68, %70
  %72 = zext <2 x i32> %60 to <2 x i64>
  %73 = and <2 x i64> %72, <i64 1023, i64 1023>
  %74 = shl nuw nsw <2 x i64> %72, <i64 10, i64 10>
  %75 = and <2 x i64> %74, <i64 1072693248, i64 1072693248>
  %76 = or <2 x i64> %75, %73
  %77 = shl nuw nsw <2 x i64> %72, <i64 20, i64 20>
  %78 = and <2 x i64> %77, <i64 1124800395214848, i64 1124800395214848>
  %79 = or <2 x i64> %76, %78
  %80 = shl nuw nsw <2 x i64> %72, <i64 30, i64 30>
  %81 = and <2 x i64> %80, <i64 3458764513820540928, i64 3458764513820540928>
  %82 = or <2 x i64> %79, %81
  %83 = bitcast i32* %54 to <4 x i32>*
  %84 = load <4 x i32>, <4 x i32>* %83, align 4
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %86 = shufflevector <4 x i32> %84, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %87 = zext <2 x i32> %85 to <2 x i64>
  %88 = and <2 x i64> %87, <i64 1023, i64 1023>
  %89 = shl nuw nsw <2 x i64> %87, <i64 10, i64 10>
  %90 = and <2 x i64> %89, <i64 1072693248, i64 1072693248>
  %91 = or <2 x i64> %90, %88
  %92 = shl nuw nsw <2 x i64> %87, <i64 20, i64 20>
  %93 = and <2 x i64> %92, <i64 1124800395214848, i64 1124800395214848>
  %94 = or <2 x i64> %91, %93
  %95 = shl nuw nsw <2 x i64> %87, <i64 30, i64 30>
  %96 = and <2 x i64> %95, <i64 3458764513820540928, i64 3458764513820540928>
  %97 = or <2 x i64> %94, %96
  %98 = zext <2 x i32> %86 to <2 x i64>
  %99 = and <2 x i64> %98, <i64 1023, i64 1023>
  %100 = shl nuw nsw <2 x i64> %98, <i64 10, i64 10>
  %101 = and <2 x i64> %100, <i64 1072693248, i64 1072693248>
  %102 = or <2 x i64> %101, %99
  %103 = shl nuw nsw <2 x i64> %98, <i64 20, i64 20>
  %104 = and <2 x i64> %103, <i64 1124800395214848, i64 1124800395214848>
  %105 = or <2 x i64> %102, %104
  %106 = shl nuw nsw <2 x i64> %98, <i64 30, i64 30>
  %107 = and <2 x i64> %106, <i64 3458764513820540928, i64 3458764513820540928>
  %108 = or <2 x i64> %105, %107
  %109 = bitcast i32* %52 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 4
  %111 = shufflevector <4 x i32> %110, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %112 = shufflevector <4 x i32> %110, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %113 = zext <2 x i32> %111 to <2 x i64>
  %114 = and <2 x i64> %113, <i64 1023, i64 1023>
  %115 = shl nuw nsw <2 x i64> %113, <i64 10, i64 10>
  %116 = and <2 x i64> %115, <i64 1072693248, i64 1072693248>
  %117 = or <2 x i64> %116, %114
  %118 = shl nuw nsw <2 x i64> %113, <i64 20, i64 20>
  %119 = and <2 x i64> %118, <i64 1124800395214848, i64 1124800395214848>
  %120 = or <2 x i64> %117, %119
  %121 = shl nuw nsw <2 x i64> %113, <i64 30, i64 30>
  %122 = and <2 x i64> %121, <i64 3458764513820540928, i64 3458764513820540928>
  %123 = or <2 x i64> %120, %122
  %124 = zext <2 x i32> %112 to <2 x i64>
  %125 = and <2 x i64> %124, <i64 1023, i64 1023>
  %126 = shl nuw nsw <2 x i64> %124, <i64 10, i64 10>
  %127 = and <2 x i64> %126, <i64 1072693248, i64 1072693248>
  %128 = or <2 x i64> %127, %125
  %129 = shl nuw nsw <2 x i64> %124, <i64 20, i64 20>
  %130 = and <2 x i64> %129, <i64 1124800395214848, i64 1124800395214848>
  %131 = or <2 x i64> %128, %130
  %132 = shl nuw nsw <2 x i64> %124, <i64 30, i64 30>
  %133 = and <2 x i64> %132, <i64 3458764513820540928, i64 3458764513820540928>
  %134 = or <2 x i64> %131, %133
  %135 = add nuw nsw <2 x i64> %108, %97
  %136 = shl nuw <2 x i64> %135, <i64 1, i64 1>
  %137 = add nuw nsw <2 x i64> %82, %71
  %138 = add nuw <2 x i64> %137, %123
  %139 = add <2 x i64> %138, %134
  %140 = add <2 x i64> %139, %136
  %141 = lshr <2 x i64> %140, <i64 3, i64 3>
  %142 = and <2 x i64> %141, <i64 1023, i64 1023>
  %143 = lshr <2 x i64> %140, <i64 13, i64 13>
  %144 = and <2 x i64> %143, <i64 1047552, i64 1047552>
  %145 = or <2 x i64> %144, %142
  %146 = lshr <2 x i64> %140, <i64 23, i64 23>
  %147 = and <2 x i64> %146, <i64 1072693248, i64 1072693248>
  %148 = or <2 x i64> %145, %147
  %149 = lshr <2 x i64> %140, <i64 33, i64 33>
  %150 = and <2 x i64> %149, <i64 1073741824, i64 1073741824>
  %151 = or <2 x i64> %148, %150
  %152 = trunc <2 x i64> %151 to <2 x i32>
  %153 = getelementptr inbounds i32, i32* %6, i64 %50
  %154 = bitcast i32* %153 to <2 x i32>*
  store <2 x i32> %152, <2 x i32>* %154, align 4, !alias.scope !395, !noalias !398
  %155 = add i64 %50, 2
  %156 = icmp eq i64 %155, %42
  br i1 %156, label %157, label %49, !llvm.loop !402

157:                                              ; preds = %49
  %158 = icmp eq i64 %42, %13
  br i1 %158, label %159, label %15

159:                                              ; preds = %160, %157, %4
  ret void

160:                                              ; preds = %15, %160
  %161 = phi i64 [ %262, %160 ], [ %16, %15 ]
  %162 = phi i32* [ %261, %160 ], [ %17, %15 ]
  %163 = phi i32* [ %260, %160 ], [ %18, %15 ]
  %164 = phi i32* [ %259, %160 ], [ %19, %15 ]
  %165 = load i32, i32* %164, align 4
  %166 = zext i32 %165 to i64
  %167 = and i64 %166, 1023
  %168 = shl nuw nsw i64 %166, 10
  %169 = and i64 %168, 1072693248
  %170 = or i64 %169, %167
  %171 = shl nuw nsw i64 %166, 20
  %172 = and i64 %171, 1124800395214848
  %173 = or i64 %170, %172
  %174 = shl nuw nsw i64 %166, 30
  %175 = and i64 %174, 3458764513820540928
  %176 = or i64 %173, %175
  %177 = getelementptr inbounds i32, i32* %164, i64 1
  %178 = load i32, i32* %177, align 4
  %179 = zext i32 %178 to i64
  %180 = and i64 %179, 1023
  %181 = shl nuw nsw i64 %179, 10
  %182 = and i64 %181, 1072693248
  %183 = or i64 %182, %180
  %184 = shl nuw nsw i64 %179, 20
  %185 = and i64 %184, 1124800395214848
  %186 = or i64 %183, %185
  %187 = shl nuw nsw i64 %179, 30
  %188 = and i64 %187, 3458764513820540928
  %189 = or i64 %186, %188
  %190 = load i32, i32* %163, align 4
  %191 = zext i32 %190 to i64
  %192 = and i64 %191, 1023
  %193 = shl nuw nsw i64 %191, 10
  %194 = and i64 %193, 1072693248
  %195 = or i64 %194, %192
  %196 = shl nuw nsw i64 %191, 20
  %197 = and i64 %196, 1124800395214848
  %198 = or i64 %195, %197
  %199 = shl nuw nsw i64 %191, 30
  %200 = and i64 %199, 3458764513820540928
  %201 = or i64 %198, %200
  %202 = getelementptr inbounds i32, i32* %163, i64 1
  %203 = load i32, i32* %202, align 4
  %204 = zext i32 %203 to i64
  %205 = and i64 %204, 1023
  %206 = shl nuw nsw i64 %204, 10
  %207 = and i64 %206, 1072693248
  %208 = or i64 %207, %205
  %209 = shl nuw nsw i64 %204, 20
  %210 = and i64 %209, 1124800395214848
  %211 = or i64 %208, %210
  %212 = shl nuw nsw i64 %204, 30
  %213 = and i64 %212, 3458764513820540928
  %214 = or i64 %211, %213
  %215 = load i32, i32* %162, align 4
  %216 = zext i32 %215 to i64
  %217 = and i64 %216, 1023
  %218 = shl nuw nsw i64 %216, 10
  %219 = and i64 %218, 1072693248
  %220 = or i64 %219, %217
  %221 = shl nuw nsw i64 %216, 20
  %222 = and i64 %221, 1124800395214848
  %223 = or i64 %220, %222
  %224 = shl nuw nsw i64 %216, 30
  %225 = and i64 %224, 3458764513820540928
  %226 = or i64 %223, %225
  %227 = getelementptr inbounds i32, i32* %162, i64 1
  %228 = load i32, i32* %227, align 4
  %229 = zext i32 %228 to i64
  %230 = and i64 %229, 1023
  %231 = shl nuw nsw i64 %229, 10
  %232 = and i64 %231, 1072693248
  %233 = or i64 %232, %230
  %234 = shl nuw nsw i64 %229, 20
  %235 = and i64 %234, 1124800395214848
  %236 = or i64 %233, %235
  %237 = shl nuw nsw i64 %229, 30
  %238 = and i64 %237, 3458764513820540928
  %239 = or i64 %236, %238
  %240 = add nuw nsw i64 %214, %201
  %241 = shl nuw i64 %240, 1
  %242 = add nuw nsw i64 %189, %176
  %243 = add nuw i64 %242, %226
  %244 = add i64 %243, %239
  %245 = add i64 %244, %241
  %246 = lshr i64 %245, 3
  %247 = and i64 %246, 1023
  %248 = lshr i64 %245, 13
  %249 = and i64 %248, 1047552
  %250 = or i64 %249, %247
  %251 = lshr i64 %245, 23
  %252 = and i64 %251, 1072693248
  %253 = or i64 %250, %252
  %254 = lshr i64 %245, 33
  %255 = and i64 %254, 1073741824
  %256 = or i64 %253, %255
  %257 = trunc i64 %256 to i32
  %258 = getelementptr inbounds i32, i32* %6, i64 %161
  store i32 %257, i32* %258, align 4
  %259 = getelementptr inbounds i32, i32* %164, i64 2
  %260 = getelementptr inbounds i32, i32* %163, i64 2
  %261 = getelementptr inbounds i32, i32* %162, i64 2
  %262 = add nuw nsw i64 %161, 1
  %263 = icmp eq i64 %262, %13
  br i1 %263, label %159, label %160, !llvm.loop !403
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = load i32, i32* %5, align 4
  %8 = zext i32 %7 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %10, label %98

10:                                               ; preds = %4
  %11 = shl nuw nsw i64 %8, 10
  %12 = and i64 %11, 1072693248
  %13 = and i64 %8, 1023
  %14 = or i64 %12, %13
  %15 = shl nuw nsw i64 %8, 20
  %16 = and i64 %15, 1124800395214848
  %17 = or i64 %14, %16
  %18 = shl nuw nsw i64 %8, 30
  %19 = and i64 %18, 3458764513820540928
  %20 = or i64 %17, %19
  %21 = zext i32 %3 to i64
  %22 = icmp ult i32 %3, 4
  br i1 %22, label %23, label %27

23:                                               ; preds = %95, %27, %10
  %24 = phi i64 [ 0, %10 ], [ 0, %27 ], [ %38, %95 ]
  %25 = phi i32* [ %5, %10 ], [ %5, %27 ], [ %40, %95 ]
  %26 = phi i64 [ %20, %10 ], [ %20, %27 ], [ %97, %95 ]
  br label %99

27:                                               ; preds = %10
  %28 = shl nuw nsw i64 %21, 2
  %29 = getelementptr i8, i8* %0, i64 %28
  %30 = getelementptr i8, i8* %1, i64 4
  %31 = shl nuw nsw i64 %21, 3
  %32 = or i64 %31, 4
  %33 = getelementptr i8, i8* %1, i64 %32
  %34 = icmp ugt i8* %33, %0
  %35 = icmp ult i8* %30, %29
  %36 = and i1 %34, %35
  br i1 %36, label %23, label %37

37:                                               ; preds = %27
  %38 = and i64 %21, 4294967292
  %39 = shl nuw nsw i64 %38, 1
  %40 = getelementptr i32, i32* %5, i64 %39
  %41 = insertelement <4 x i64> undef, i64 %20, i32 3
  %42 = getelementptr i8, i8* %1, i64 4
  %43 = bitcast i8* %42 to i32*
  br label %44

44:                                               ; preds = %44, %37
  %45 = phi i64 [ 0, %37 ], [ %93, %44 ]
  %46 = phi <4 x i64> [ %41, %37 ], [ %74, %44 ]
  %47 = shl i64 %45, 1
  %48 = getelementptr inbounds i32, i32* %43, i64 %47
  %49 = bitcast i32* %48 to <8 x i32>*
  %50 = load <8 x i32>, <8 x i32>* %49, align 4
  %51 = shufflevector <8 x i32> %50, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %52 = shufflevector <8 x i32> %50, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %53 = zext <4 x i32> %51 to <4 x i64>
  %54 = and <4 x i64> %53, <i64 1023, i64 1023, i64 1023, i64 1023>
  %55 = shl nuw nsw <4 x i64> %53, <i64 10, i64 10, i64 10, i64 10>
  %56 = and <4 x i64> %55, <i64 1072693248, i64 1072693248, i64 1072693248, i64 1072693248>
  %57 = or <4 x i64> %56, %54
  %58 = shl nuw nsw <4 x i64> %53, <i64 20, i64 20, i64 20, i64 20>
  %59 = and <4 x i64> %58, <i64 1124800395214848, i64 1124800395214848, i64 1124800395214848, i64 1124800395214848>
  %60 = or <4 x i64> %57, %59
  %61 = shl nuw nsw <4 x i64> %53, <i64 30, i64 30, i64 30, i64 30>
  %62 = and <4 x i64> %61, <i64 3458764513820540928, i64 3458764513820540928, i64 3458764513820540928, i64 3458764513820540928>
  %63 = or <4 x i64> %60, %62
  %64 = zext <4 x i32> %52 to <4 x i64>
  %65 = and <4 x i64> %64, <i64 1023, i64 1023, i64 1023, i64 1023>
  %66 = shl nuw nsw <4 x i64> %64, <i64 10, i64 10, i64 10, i64 10>
  %67 = and <4 x i64> %66, <i64 1072693248, i64 1072693248, i64 1072693248, i64 1072693248>
  %68 = or <4 x i64> %67, %65
  %69 = shl nuw nsw <4 x i64> %64, <i64 20, i64 20, i64 20, i64 20>
  %70 = and <4 x i64> %69, <i64 1124800395214848, i64 1124800395214848, i64 1124800395214848, i64 1124800395214848>
  %71 = or <4 x i64> %68, %70
  %72 = shl nuw nsw <4 x i64> %64, <i64 30, i64 30, i64 30, i64 30>
  %73 = and <4 x i64> %72, <i64 3458764513820540928, i64 3458764513820540928, i64 3458764513820540928, i64 3458764513820540928>
  %74 = or <4 x i64> %71, %73
  %75 = shufflevector <4 x i64> %46, <4 x i64> %74, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %76 = shl nuw nsw <4 x i64> %63, <i64 1, i64 1, i64 1, i64 1>
  %77 = add nsw <4 x i64> %74, %75
  %78 = add <4 x i64> %77, %76
  %79 = lshr <4 x i64> %78, <i64 2, i64 2, i64 2, i64 2>
  %80 = and <4 x i64> %79, <i64 1023, i64 1023, i64 1023, i64 1023>
  %81 = lshr <4 x i64> %78, <i64 12, i64 12, i64 12, i64 12>
  %82 = and <4 x i64> %81, <i64 1047552, i64 1047552, i64 1047552, i64 1047552>
  %83 = or <4 x i64> %82, %80
  %84 = lshr <4 x i64> %78, <i64 22, i64 22, i64 22, i64 22>
  %85 = and <4 x i64> %84, <i64 1072693248, i64 1072693248, i64 1072693248, i64 1072693248>
  %86 = or <4 x i64> %83, %85
  %87 = lshr <4 x i64> %78, <i64 32, i64 32, i64 32, i64 32>
  %88 = and <4 x i64> %87, <i64 3221225472, i64 3221225472, i64 3221225472, i64 3221225472>
  %89 = or <4 x i64> %86, %88
  %90 = trunc <4 x i64> %89 to <4 x i32>
  %91 = getelementptr inbounds i32, i32* %6, i64 %45
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %92, align 4, !alias.scope !404, !noalias !407
  %93 = add i64 %45, 4
  %94 = icmp eq i64 %93, %38
  br i1 %94, label %95, label %44, !llvm.loop !409

95:                                               ; preds = %44
  %96 = icmp eq i64 %38, %21
  %97 = extractelement <4 x i64> %74, i32 3
  br i1 %96, label %98, label %23

98:                                               ; preds = %99, %95, %4
  ret void

99:                                               ; preds = %23, %99
  %100 = phi i64 [ %145, %99 ], [ %24, %23 ]
  %101 = phi i32* [ %116, %99 ], [ %25, %23 ]
  %102 = phi i64 [ %128, %99 ], [ %26, %23 ]
  %103 = getelementptr inbounds i32, i32* %101, i64 1
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i64
  %106 = and i64 %105, 1023
  %107 = shl nuw nsw i64 %105, 10
  %108 = and i64 %107, 1072693248
  %109 = or i64 %108, %106
  %110 = shl nuw nsw i64 %105, 20
  %111 = and i64 %110, 1124800395214848
  %112 = or i64 %109, %111
  %113 = shl nuw nsw i64 %105, 30
  %114 = and i64 %113, 3458764513820540928
  %115 = or i64 %112, %114
  %116 = getelementptr inbounds i32, i32* %101, i64 2
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = and i64 %118, 1023
  %120 = shl nuw nsw i64 %118, 10
  %121 = and i64 %120, 1072693248
  %122 = or i64 %121, %119
  %123 = shl nuw nsw i64 %118, 20
  %124 = and i64 %123, 1124800395214848
  %125 = or i64 %122, %124
  %126 = shl nuw nsw i64 %118, 30
  %127 = and i64 %126, 3458764513820540928
  %128 = or i64 %125, %127
  %129 = shl nuw nsw i64 %115, 1
  %130 = add nsw i64 %128, %102
  %131 = add i64 %130, %129
  %132 = lshr i64 %131, 2
  %133 = and i64 %132, 1023
  %134 = lshr i64 %131, 12
  %135 = and i64 %134, 1047552
  %136 = or i64 %135, %133
  %137 = lshr i64 %131, 22
  %138 = and i64 %137, 1072693248
  %139 = or i64 %136, %138
  %140 = lshr i64 %131, 32
  %141 = and i64 %140, 3221225472
  %142 = or i64 %139, %141
  %143 = trunc i64 %142 to i32
  %144 = getelementptr inbounds i32, i32* %6, i64 %100
  store i32 %143, i32* %144, align 4
  %145 = add nuw nsw i64 %100, 1
  %146 = icmp eq i64 %145, %21
  br i1 %146, label %98, label %99, !llvm.loop !410
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i8* %0 to i32*
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = load i32, i32* %7, align 4
  %12 = zext i32 %11 to i64
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %157

14:                                               ; preds = %4
  %15 = shl nuw nsw i64 %12, 10
  %16 = and i64 %15, 1072693248
  %17 = and i64 %12, 1023
  %18 = or i64 %16, %17
  %19 = shl nuw nsw i64 %12, 20
  %20 = and i64 %19, 1124800395214848
  %21 = or i64 %18, %20
  %22 = shl nuw nsw i64 %12, 30
  %23 = and i64 %22, 3458764513820540928
  %24 = or i64 %21, %23
  %25 = shl nuw nsw i64 %10, 10
  %26 = and i64 %25, 1072693248
  %27 = and i64 %10, 1023
  %28 = or i64 %26, %27
  %29 = shl nuw nsw i64 %10, 20
  %30 = and i64 %29, 1124800395214848
  %31 = or i64 %28, %30
  %32 = shl nuw nsw i64 %10, 30
  %33 = and i64 %32, 3458764513820540928
  %34 = or i64 %31, %33
  %35 = add nuw nsw i64 %24, %34
  %36 = zext i32 %3 to i64
  %37 = icmp eq i32 %3, 1
  br i1 %37, label %38, label %43

38:                                               ; preds = %154, %43, %14
  %39 = phi i64 [ 0, %14 ], [ 0, %43 ], [ %63, %154 ]
  %40 = phi i32* [ %5, %14 ], [ %5, %43 ], [ %65, %154 ]
  %41 = phi i32* [ %7, %14 ], [ %7, %43 ], [ %67, %154 ]
  %42 = phi i64 [ %35, %14 ], [ %35, %43 ], [ %156, %154 ]
  br label %158

43:                                               ; preds = %14
  %44 = shl nuw nsw i64 %36, 2
  %45 = getelementptr i8, i8* %0, i64 %44
  %46 = add i64 %2, 4
  %47 = getelementptr i8, i8* %1, i64 %46
  %48 = shl nuw nsw i64 %36, 3
  %49 = add i64 %48, %2
  %50 = add i64 %49, 4
  %51 = getelementptr i8, i8* %1, i64 %50
  %52 = getelementptr i8, i8* %1, i64 4
  %53 = or i64 %48, 4
  %54 = getelementptr i8, i8* %1, i64 %53
  %55 = icmp ugt i8* %51, %0
  %56 = icmp ult i8* %47, %45
  %57 = and i1 %55, %56
  %58 = icmp ugt i8* %54, %0
  %59 = icmp ult i8* %52, %45
  %60 = and i1 %58, %59
  %61 = or i1 %57, %60
  br i1 %61, label %38, label %62

62:                                               ; preds = %43
  %63 = and i64 %36, 4294967294
  %64 = shl nuw nsw i64 %63, 1
  %65 = getelementptr i32, i32* %5, i64 %64
  %66 = shl nuw nsw i64 %63, 1
  %67 = getelementptr i32, i32* %7, i64 %66
  %68 = insertelement <2 x i64> undef, i64 %35, i32 1
  %69 = getelementptr i8, i8* %1, i64 4
  %70 = bitcast i8* %69 to i32*
  %71 = getelementptr i8, i8* %6, i64 4
  %72 = bitcast i8* %71 to i32*
  br label %73

73:                                               ; preds = %73, %62
  %74 = phi i64 [ 0, %62 ], [ %152, %73 ]
  %75 = phi <2 x i64> [ %68, %62 ], [ %132, %73 ]
  %76 = shl i64 %74, 1
  %77 = shl i64 %74, 1
  %78 = getelementptr inbounds i32, i32* %70, i64 %76
  %79 = bitcast i32* %78 to <4 x i32>*
  %80 = load <4 x i32>, <4 x i32>* %79, align 4
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %82 = shufflevector <4 x i32> %80, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %83 = zext <2 x i32> %81 to <2 x i64>
  %84 = and <2 x i64> %83, <i64 1023, i64 1023>
  %85 = shl nuw nsw <2 x i64> %83, <i64 10, i64 10>
  %86 = and <2 x i64> %85, <i64 1072693248, i64 1072693248>
  %87 = or <2 x i64> %86, %84
  %88 = shl nuw nsw <2 x i64> %83, <i64 20, i64 20>
  %89 = and <2 x i64> %88, <i64 1124800395214848, i64 1124800395214848>
  %90 = or <2 x i64> %87, %89
  %91 = shl nuw nsw <2 x i64> %83, <i64 30, i64 30>
  %92 = and <2 x i64> %91, <i64 3458764513820540928, i64 3458764513820540928>
  %93 = or <2 x i64> %90, %92
  %94 = getelementptr inbounds i32, i32* %72, i64 %77
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4
  %97 = shufflevector <4 x i32> %96, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %98 = shufflevector <4 x i32> %96, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %99 = zext <2 x i32> %97 to <2 x i64>
  %100 = and <2 x i64> %99, <i64 1023, i64 1023>
  %101 = shl nuw nsw <2 x i64> %99, <i64 10, i64 10>
  %102 = and <2 x i64> %101, <i64 1072693248, i64 1072693248>
  %103 = or <2 x i64> %102, %100
  %104 = shl nuw nsw <2 x i64> %99, <i64 20, i64 20>
  %105 = and <2 x i64> %104, <i64 1124800395214848, i64 1124800395214848>
  %106 = or <2 x i64> %103, %105
  %107 = shl nuw nsw <2 x i64> %99, <i64 30, i64 30>
  %108 = and <2 x i64> %107, <i64 3458764513820540928, i64 3458764513820540928>
  %109 = or <2 x i64> %106, %108
  %110 = zext <2 x i32> %82 to <2 x i64>
  %111 = and <2 x i64> %110, <i64 1023, i64 1023>
  %112 = shl nuw nsw <2 x i64> %110, <i64 10, i64 10>
  %113 = and <2 x i64> %112, <i64 1072693248, i64 1072693248>
  %114 = or <2 x i64> %113, %111
  %115 = shl nuw nsw <2 x i64> %110, <i64 20, i64 20>
  %116 = and <2 x i64> %115, <i64 1124800395214848, i64 1124800395214848>
  %117 = or <2 x i64> %114, %116
  %118 = shl nuw nsw <2 x i64> %110, <i64 30, i64 30>
  %119 = and <2 x i64> %118, <i64 3458764513820540928, i64 3458764513820540928>
  %120 = or <2 x i64> %117, %119
  %121 = zext <2 x i32> %98 to <2 x i64>
  %122 = and <2 x i64> %121, <i64 1023, i64 1023>
  %123 = shl nuw nsw <2 x i64> %121, <i64 10, i64 10>
  %124 = and <2 x i64> %123, <i64 1072693248, i64 1072693248>
  %125 = or <2 x i64> %124, %122
  %126 = shl nuw nsw <2 x i64> %121, <i64 20, i64 20>
  %127 = and <2 x i64> %126, <i64 1124800395214848, i64 1124800395214848>
  %128 = or <2 x i64> %125, %127
  %129 = shl nuw nsw <2 x i64> %121, <i64 30, i64 30>
  %130 = and <2 x i64> %129, <i64 3458764513820540928, i64 3458764513820540928>
  %131 = or <2 x i64> %128, %130
  %132 = add nuw nsw <2 x i64> %131, %120
  %133 = shufflevector <2 x i64> %75, <2 x i64> %132, <2 x i32> <i32 1, i32 2>
  %134 = add nuw nsw <2 x i64> %109, %93
  %135 = shl nuw <2 x i64> %134, <i64 1, i64 1>
  %136 = add <2 x i64> %132, %133
  %137 = add <2 x i64> %136, %135
  %138 = lshr <2 x i64> %137, <i64 3, i64 3>
  %139 = and <2 x i64> %138, <i64 1023, i64 1023>
  %140 = lshr <2 x i64> %137, <i64 13, i64 13>
  %141 = and <2 x i64> %140, <i64 1047552, i64 1047552>
  %142 = or <2 x i64> %141, %139
  %143 = lshr <2 x i64> %137, <i64 23, i64 23>
  %144 = and <2 x i64> %143, <i64 1072693248, i64 1072693248>
  %145 = or <2 x i64> %142, %144
  %146 = lshr <2 x i64> %137, <i64 33, i64 33>
  %147 = and <2 x i64> %146, <i64 1073741824, i64 1073741824>
  %148 = or <2 x i64> %145, %147
  %149 = trunc <2 x i64> %148 to <2 x i32>
  %150 = getelementptr inbounds i32, i32* %8, i64 %74
  %151 = bitcast i32* %150 to <2 x i32>*
  store <2 x i32> %149, <2 x i32>* %151, align 4, !alias.scope !411, !noalias !414
  %152 = add i64 %74, 2
  %153 = icmp eq i64 %152, %63
  br i1 %153, label %154, label %73, !llvm.loop !417

154:                                              ; preds = %73
  %155 = icmp eq i64 %63, %36
  %156 = extractelement <2 x i64> %132, i32 1
  br i1 %155, label %157, label %38

157:                                              ; preds = %158, %154, %4
  ret void

158:                                              ; preds = %38, %158
  %159 = phi i64 [ %233, %158 ], [ %39, %38 ]
  %160 = phi i32* [ %189, %158 ], [ %40, %38 ]
  %161 = phi i32* [ %202, %158 ], [ %41, %38 ]
  %162 = phi i64 [ %215, %158 ], [ %42, %38 ]
  %163 = getelementptr inbounds i32, i32* %160, i64 1
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i64
  %166 = and i64 %165, 1023
  %167 = shl nuw nsw i64 %165, 10
  %168 = and i64 %167, 1072693248
  %169 = or i64 %168, %166
  %170 = shl nuw nsw i64 %165, 20
  %171 = and i64 %170, 1124800395214848
  %172 = or i64 %169, %171
  %173 = shl nuw nsw i64 %165, 30
  %174 = and i64 %173, 3458764513820540928
  %175 = or i64 %172, %174
  %176 = getelementptr inbounds i32, i32* %161, i64 1
  %177 = load i32, i32* %176, align 4
  %178 = zext i32 %177 to i64
  %179 = and i64 %178, 1023
  %180 = shl nuw nsw i64 %178, 10
  %181 = and i64 %180, 1072693248
  %182 = or i64 %181, %179
  %183 = shl nuw nsw i64 %178, 20
  %184 = and i64 %183, 1124800395214848
  %185 = or i64 %182, %184
  %186 = shl nuw nsw i64 %178, 30
  %187 = and i64 %186, 3458764513820540928
  %188 = or i64 %185, %187
  %189 = getelementptr inbounds i32, i32* %160, i64 2
  %190 = load i32, i32* %189, align 4
  %191 = zext i32 %190 to i64
  %192 = and i64 %191, 1023
  %193 = shl nuw nsw i64 %191, 10
  %194 = and i64 %193, 1072693248
  %195 = or i64 %194, %192
  %196 = shl nuw nsw i64 %191, 20
  %197 = and i64 %196, 1124800395214848
  %198 = or i64 %195, %197
  %199 = shl nuw nsw i64 %191, 30
  %200 = and i64 %199, 3458764513820540928
  %201 = or i64 %198, %200
  %202 = getelementptr inbounds i32, i32* %161, i64 2
  %203 = load i32, i32* %202, align 4
  %204 = zext i32 %203 to i64
  %205 = and i64 %204, 1023
  %206 = shl nuw nsw i64 %204, 10
  %207 = and i64 %206, 1072693248
  %208 = or i64 %207, %205
  %209 = shl nuw nsw i64 %204, 20
  %210 = and i64 %209, 1124800395214848
  %211 = or i64 %208, %210
  %212 = shl nuw nsw i64 %204, 30
  %213 = and i64 %212, 3458764513820540928
  %214 = or i64 %211, %213
  %215 = add nuw nsw i64 %214, %201
  %216 = add nuw nsw i64 %188, %175
  %217 = shl nuw i64 %216, 1
  %218 = add i64 %215, %162
  %219 = add i64 %218, %217
  %220 = lshr i64 %219, 3
  %221 = and i64 %220, 1023
  %222 = lshr i64 %219, 13
  %223 = and i64 %222, 1047552
  %224 = or i64 %223, %221
  %225 = lshr i64 %219, 23
  %226 = and i64 %225, 1072693248
  %227 = or i64 %224, %226
  %228 = lshr i64 %219, 33
  %229 = and i64 %228, 1073741824
  %230 = or i64 %227, %229
  %231 = trunc i64 %230 to i32
  %232 = getelementptr inbounds i32, i32* %8, i64 %159
  store i32 %231, i32* %232, align 4
  %233 = add nuw nsw i64 %159, 1
  %234 = icmp eq i64 %233, %36
  br i1 %234, label %157, label %158, !llvm.loop !418
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I23ColorTypeFilter_1010102EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #4 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %0 to i32*
  %11 = load i32, i32* %5, align 4
  %12 = zext i32 %11 to i64
  %13 = load i32, i32* %7, align 4
  %14 = zext i32 %13 to i64
  %15 = load i32, i32* %9, align 4
  %16 = zext i32 %15 to i64
  %17 = icmp sgt i32 %3, 0
  br i1 %17, label %18, label %190

18:                                               ; preds = %4
  %19 = shl nuw nsw i64 %16, 10
  %20 = and i64 %19, 1072693248
  %21 = and i64 %16, 1023
  %22 = or i64 %20, %21
  %23 = shl nuw nsw i64 %16, 20
  %24 = and i64 %23, 1124800395214848
  %25 = or i64 %22, %24
  %26 = shl nuw nsw i64 %12, 10
  %27 = and i64 %26, 1072693248
  %28 = and i64 %12, 1023
  %29 = or i64 %27, %28
  %30 = shl nuw nsw i64 %12, 20
  %31 = and i64 %30, 1124800395214848
  %32 = or i64 %29, %31
  %33 = add nuw nsw i64 %25, %32
  %34 = shl nuw nsw i64 %14, 10
  %35 = and i64 %34, 1072693248
  %36 = and i64 %14, 1023
  %37 = or i64 %35, %36
  %38 = shl nuw nsw i64 %14, 20
  %39 = and i64 %38, 1124800395214848
  %40 = or i64 %37, %39
  %41 = shl nuw nsw i64 %40, 1
  %42 = add nuw nsw i64 %33, %41
  %43 = zext i32 %3 to i64
  %44 = icmp eq i32 %3, 1
  br i1 %44, label %45, label %51

45:                                               ; preds = %187, %51, %18
  %46 = phi i64 [ 0, %18 ], [ 0, %51 ], [ %81, %187 ]
  %47 = phi i32* [ %5, %18 ], [ %5, %51 ], [ %83, %187 ]
  %48 = phi i32* [ %7, %18 ], [ %7, %51 ], [ %85, %187 ]
  %49 = phi i64 [ %42, %18 ], [ %42, %51 ], [ %189, %187 ]
  %50 = phi i32* [ %9, %18 ], [ %9, %51 ], [ %87, %187 ]
  br label %191

51:                                               ; preds = %18
  %52 = shl nuw nsw i64 %43, 2
  %53 = getelementptr i8, i8* %0, i64 %52
  %54 = shl i64 %2, 1
  %55 = add i64 %54, 4
  %56 = getelementptr i8, i8* %1, i64 %55
  %57 = shl nuw nsw i64 %43, 3
  %58 = add i64 %57, %54
  %59 = add i64 %58, 4
  %60 = getelementptr i8, i8* %1, i64 %59
  %61 = add i64 %2, 4
  %62 = getelementptr i8, i8* %1, i64 %61
  %63 = add i64 %57, %2
  %64 = add i64 %63, 4
  %65 = getelementptr i8, i8* %1, i64 %64
  %66 = getelementptr i8, i8* %1, i64 4
  %67 = or i64 %57, 4
  %68 = getelementptr i8, i8* %1, i64 %67
  %69 = icmp ugt i8* %60, %0
  %70 = icmp ult i8* %56, %53
  %71 = and i1 %69, %70
  %72 = icmp ugt i8* %65, %0
  %73 = icmp ult i8* %62, %53
  %74 = and i1 %72, %73
  %75 = or i1 %71, %74
  %76 = icmp ugt i8* %68, %0
  %77 = icmp ult i8* %66, %53
  %78 = and i1 %76, %77
  %79 = or i1 %75, %78
  br i1 %79, label %45, label %80

80:                                               ; preds = %51
  %81 = and i64 %43, 4294967294
  %82 = shl nuw nsw i64 %81, 1
  %83 = getelementptr i32, i32* %5, i64 %82
  %84 = shl nuw nsw i64 %81, 1
  %85 = getelementptr i32, i32* %7, i64 %84
  %86 = shl nuw nsw i64 %81, 1
  %87 = getelementptr i32, i32* %9, i64 %86
  %88 = insertelement <2 x i64> undef, i64 %42, i32 1
  %89 = getelementptr i8, i8* %1, i64 4
  %90 = bitcast i8* %89 to i32*
  %91 = getelementptr i8, i8* %6, i64 4
  %92 = bitcast i8* %91 to i32*
  %93 = getelementptr i8, i8* %8, i64 4
  %94 = bitcast i8* %93 to i32*
  br label %95

95:                                               ; preds = %95, %80
  %96 = phi i64 [ 0, %80 ], [ %185, %95 ]
  %97 = phi <2 x i64> [ %88, %80 ], [ %170, %95 ]
  %98 = shl i64 %96, 1
  %99 = shl i64 %96, 1
  %100 = shl i64 %96, 1
  %101 = getelementptr inbounds i32, i32* %90, i64 %98
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 4
  %104 = shufflevector <4 x i32> %103, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %105 = shufflevector <4 x i32> %103, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %106 = zext <2 x i32> %104 to <2 x i64>
  %107 = and <2 x i64> %106, <i64 1023, i64 1023>
  %108 = shl nuw nsw <2 x i64> %106, <i64 10, i64 10>
  %109 = and <2 x i64> %108, <i64 1072693248, i64 1072693248>
  %110 = or <2 x i64> %109, %107
  %111 = shl nuw nsw <2 x i64> %106, <i64 20, i64 20>
  %112 = and <2 x i64> %111, <i64 1124800395214848, i64 1124800395214848>
  %113 = or <2 x i64> %110, %112
  %114 = getelementptr inbounds i32, i32* %92, i64 %99
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4
  %117 = shufflevector <4 x i32> %116, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %118 = shufflevector <4 x i32> %116, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %119 = zext <2 x i32> %117 to <2 x i64>
  %120 = and <2 x i64> %119, <i64 1023, i64 1023>
  %121 = shl nuw nsw <2 x i64> %119, <i64 10, i64 10>
  %122 = and <2 x i64> %121, <i64 1072693248, i64 1072693248>
  %123 = or <2 x i64> %122, %120
  %124 = shl nuw nsw <2 x i64> %119, <i64 20, i64 20>
  %125 = and <2 x i64> %124, <i64 1124800395214848, i64 1124800395214848>
  %126 = or <2 x i64> %123, %125
  %127 = getelementptr inbounds i32, i32* %94, i64 %100
  %128 = bitcast i32* %127 to <4 x i32>*
  %129 = load <4 x i32>, <4 x i32>* %128, align 4
  %130 = shufflevector <4 x i32> %129, <4 x i32> undef, <2 x i32> <i32 0, i32 2>
  %131 = shufflevector <4 x i32> %129, <4 x i32> undef, <2 x i32> <i32 1, i32 3>
  %132 = zext <2 x i32> %130 to <2 x i64>
  %133 = and <2 x i64> %132, <i64 1023, i64 1023>
  %134 = shl nuw nsw <2 x i64> %132, <i64 10, i64 10>
  %135 = and <2 x i64> %134, <i64 1072693248, i64 1072693248>
  %136 = or <2 x i64> %135, %133
  %137 = shl nuw nsw <2 x i64> %132, <i64 20, i64 20>
  %138 = and <2 x i64> %137, <i64 1124800395214848, i64 1124800395214848>
  %139 = or <2 x i64> %136, %138
  %140 = shl nuw nsw <2 x i64> %126, <i64 1, i64 1>
  %141 = add nuw nsw <2 x i64> %139, %113
  %142 = add nuw nsw <2 x i64> %141, %140
  %143 = shl nuw nsw <2 x i64> %142, <i64 1, i64 1>
  %144 = zext <2 x i32> %105 to <2 x i64>
  %145 = and <2 x i64> %144, <i64 1023, i64 1023>
  %146 = shl nuw nsw <2 x i64> %144, <i64 10, i64 10>
  %147 = and <2 x i64> %146, <i64 1072693248, i64 1072693248>
  %148 = or <2 x i64> %147, %145
  %149 = shl nuw nsw <2 x i64> %144, <i64 20, i64 20>
  %150 = and <2 x i64> %149, <i64 1124800395214848, i64 1124800395214848>
  %151 = or <2 x i64> %148, %150
  %152 = zext <2 x i32> %118 to <2 x i64>
  %153 = and <2 x i64> %152, <i64 1023, i64 1023>
  %154 = shl nuw nsw <2 x i64> %152, <i64 10, i64 10>
  %155 = and <2 x i64> %154, <i64 1072693248, i64 1072693248>
  %156 = or <2 x i64> %155, %153
  %157 = shl nuw nsw <2 x i64> %152, <i64 20, i64 20>
  %158 = and <2 x i64> %157, <i64 1124800395214848, i64 1124800395214848>
  %159 = or <2 x i64> %156, %158
  %160 = zext <2 x i32> %131 to <2 x i64>
  %161 = and <2 x i64> %160, <i64 1023, i64 1023>
  %162 = shl nuw nsw <2 x i64> %160, <i64 10, i64 10>
  %163 = and <2 x i64> %162, <i64 1072693248, i64 1072693248>
  %164 = or <2 x i64> %163, %161
  %165 = shl nuw nsw <2 x i64> %160, <i64 20, i64 20>
  %166 = and <2 x i64> %165, <i64 1124800395214848, i64 1124800395214848>
  %167 = or <2 x i64> %164, %166
  %168 = shl nuw nsw <2 x i64> %159, <i64 1, i64 1>
  %169 = add nuw nsw <2 x i64> %167, %151
  %170 = add nuw nsw <2 x i64> %169, %168
  %171 = shufflevector <2 x i64> %97, <2 x i64> %170, <2 x i32> <i32 1, i32 2>
  %172 = add nsw <2 x i64> %143, %171
  %173 = add <2 x i64> %172, %170
  %174 = lshr <2 x i64> %173, <i64 4, i64 4>
  %175 = and <2 x i64> %174, <i64 1023, i64 1023>
  %176 = lshr <2 x i64> %173, <i64 14, i64 14>
  %177 = and <2 x i64> %176, <i64 1047552, i64 1047552>
  %178 = or <2 x i64> %177, %175
  %179 = lshr <2 x i64> %173, <i64 24, i64 24>
  %180 = and <2 x i64> %179, <i64 1072693248, i64 1072693248>
  %181 = or <2 x i64> %178, %180
  %182 = trunc <2 x i64> %181 to <2 x i32>
  %183 = getelementptr inbounds i32, i32* %10, i64 %96
  %184 = bitcast i32* %183 to <2 x i32>*
  store <2 x i32> %182, <2 x i32>* %184, align 4, !alias.scope !419, !noalias !422
  %185 = add i64 %96, 2
  %186 = icmp eq i64 %185, %81
  br i1 %186, label %187, label %95, !llvm.loop !426

187:                                              ; preds = %95
  %188 = icmp eq i64 %81, %43
  %189 = extractelement <2 x i64> %170, i32 1
  br i1 %188, label %190, label %45

190:                                              ; preds = %191, %187, %4
  ret void

191:                                              ; preds = %45, %191
  %192 = phi i64 [ %276, %191 ], [ %46, %45 ]
  %193 = phi i32* [ %231, %191 ], [ %47, %45 ]
  %194 = phi i32* [ %241, %191 ], [ %48, %45 ]
  %195 = phi i64 [ %263, %191 ], [ %49, %45 ]
  %196 = phi i32* [ %251, %191 ], [ %50, %45 ]
  %197 = getelementptr inbounds i32, i32* %193, i64 1
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  %200 = and i64 %199, 1023
  %201 = shl nuw nsw i64 %199, 10
  %202 = and i64 %201, 1072693248
  %203 = or i64 %202, %200
  %204 = shl nuw nsw i64 %199, 20
  %205 = and i64 %204, 1124800395214848
  %206 = or i64 %203, %205
  %207 = getelementptr inbounds i32, i32* %194, i64 1
  %208 = load i32, i32* %207, align 4
  %209 = zext i32 %208 to i64
  %210 = and i64 %209, 1023
  %211 = shl nuw nsw i64 %209, 10
  %212 = and i64 %211, 1072693248
  %213 = or i64 %212, %210
  %214 = shl nuw nsw i64 %209, 20
  %215 = and i64 %214, 1124800395214848
  %216 = or i64 %213, %215
  %217 = getelementptr inbounds i32, i32* %196, i64 1
  %218 = load i32, i32* %217, align 4
  %219 = zext i32 %218 to i64
  %220 = and i64 %219, 1023
  %221 = shl nuw nsw i64 %219, 10
  %222 = and i64 %221, 1072693248
  %223 = or i64 %222, %220
  %224 = shl nuw nsw i64 %219, 20
  %225 = and i64 %224, 1124800395214848
  %226 = or i64 %223, %225
  %227 = shl nuw nsw i64 %216, 1
  %228 = add nuw nsw i64 %226, %206
  %229 = add nuw nsw i64 %228, %227
  %230 = shl nuw nsw i64 %229, 1
  %231 = getelementptr inbounds i32, i32* %193, i64 2
  %232 = load i32, i32* %231, align 4
  %233 = zext i32 %232 to i64
  %234 = and i64 %233, 1023
  %235 = shl nuw nsw i64 %233, 10
  %236 = and i64 %235, 1072693248
  %237 = or i64 %236, %234
  %238 = shl nuw nsw i64 %233, 20
  %239 = and i64 %238, 1124800395214848
  %240 = or i64 %237, %239
  %241 = getelementptr inbounds i32, i32* %194, i64 2
  %242 = load i32, i32* %241, align 4
  %243 = zext i32 %242 to i64
  %244 = and i64 %243, 1023
  %245 = shl nuw nsw i64 %243, 10
  %246 = and i64 %245, 1072693248
  %247 = or i64 %246, %244
  %248 = shl nuw nsw i64 %243, 20
  %249 = and i64 %248, 1124800395214848
  %250 = or i64 %247, %249
  %251 = getelementptr inbounds i32, i32* %196, i64 2
  %252 = load i32, i32* %251, align 4
  %253 = zext i32 %252 to i64
  %254 = and i64 %253, 1023
  %255 = shl nuw nsw i64 %253, 10
  %256 = and i64 %255, 1072693248
  %257 = or i64 %256, %254
  %258 = shl nuw nsw i64 %253, 20
  %259 = and i64 %258, 1124800395214848
  %260 = or i64 %257, %259
  %261 = shl nuw nsw i64 %250, 1
  %262 = add nuw nsw i64 %260, %240
  %263 = add nuw nsw i64 %262, %261
  %264 = add nsw i64 %230, %195
  %265 = add i64 %264, %263
  %266 = lshr i64 %265, 4
  %267 = and i64 %266, 1023
  %268 = lshr i64 %265, 14
  %269 = and i64 %268, 1047552
  %270 = or i64 %269, %267
  %271 = lshr i64 %265, 24
  %272 = and i64 %271, 1072693248
  %273 = or i64 %270, %272
  %274 = trunc i64 %273 to i32
  %275 = getelementptr inbounds i32, i32* %10, i64 %192
  store i32 %274, i32* %275, align 4
  %276 = add nuw nsw i64 %192, 1
  %277 = icmp eq i64 %276, %43
  br i1 %277, label %190, label %191, !llvm.loop !427
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %66, %13 ]
  %15 = phi i16* [ %9, %7 ], [ %65, %13 ]
  %16 = phi i16* [ %10, %7 ], [ %64, %13 ]
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i64
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = and <4 x i32> %22, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %24 = icmp sgt <4 x i32> %23, <i32 1023, i32 1023, i32 1023, i32 1023>
  %25 = shl <4 x i32> %23, <i32 13, i32 13, i32 13, i32 13>
  %26 = add <4 x i32> %25, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %27 = shl <4 x i32> %22, <i32 16, i32 16, i32 16, i32 16>
  %28 = and <4 x i32> %27, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %29 = select <4 x i1> %24, <4 x i32> %26, <4 x i32> zeroinitializer
  %30 = or <4 x i32> %29, %28
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = load i16, i16* %15, align 2
  %33 = zext i16 %32 to i64
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <8 x i16>
  %36 = shufflevector <8 x i16> %35, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %37 = bitcast <8 x i16> %36 to <4 x i32>
  %38 = and <4 x i32> %37, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %39 = icmp sgt <4 x i32> %38, <i32 1023, i32 1023, i32 1023, i32 1023>
  %40 = shl <4 x i32> %38, <i32 13, i32 13, i32 13, i32 13>
  %41 = add <4 x i32> %40, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %42 = shl <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %43 = and <4 x i32> %42, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = select <4 x i1> %39, <4 x i32> %41, <4 x i32> zeroinitializer
  %45 = or <4 x i32> %44, %43
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = fadd <4 x float> %31, %46
  %48 = fmul <4 x float> %47, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %49 = bitcast <4 x float> %48 to <4 x i32>
  %50 = and <4 x i32> %49, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %51 = icmp ugt <4 x i32> %50, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %52 = add <4 x i32> %49, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %53 = lshr <4 x i32> %52, <i32 13, i32 13, i32 13, i32 13>
  %54 = shl <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %55 = select <4 x i1> %51, <4 x i32> %54, <4 x i32> zeroinitializer
  %56 = and <4 x i32> %49, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %57 = or <4 x i32> %55, %56
  %58 = ashr exact <4 x i32> %57, <i32 16, i32 16, i32 16, i32 16>
  %59 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %58, <4 x i32> undef) #17
  %60 = bitcast <8 x i16> %59 to <2 x i64>
  %61 = extractelement <2 x i64> %60, i32 0
  %62 = trunc i64 %61 to i16
  %63 = getelementptr inbounds i16, i16* %5, i64 %14
  store i16 %62, i16* %63, align 2
  %64 = getelementptr inbounds i16, i16* %16, i64 2
  %65 = getelementptr inbounds i16, i16* %15, i64 2
  %66 = add nuw nsw i64 %14, 1
  %67 = icmp eq i64 %66, %11
  br i1 %67, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %87, %15 ]
  %17 = phi i16* [ %10, %8 ], [ %86, %15 ]
  %18 = phi i16* [ %11, %8 ], [ %85, %15 ]
  %19 = phi i16* [ %12, %8 ], [ %84, %15 ]
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i64
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <8 x i16>
  %24 = shufflevector <8 x i16> %23, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <8 x i16> %24 to <4 x i32>
  %26 = and <4 x i32> %25, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %27 = icmp sgt <4 x i32> %26, <i32 1023, i32 1023, i32 1023, i32 1023>
  %28 = shl <4 x i32> %26, <i32 13, i32 13, i32 13, i32 13>
  %29 = add <4 x i32> %28, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %30 = shl <4 x i32> %25, <i32 16, i32 16, i32 16, i32 16>
  %31 = and <4 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = select <4 x i1> %27, <4 x i32> %29, <4 x i32> zeroinitializer
  %33 = or <4 x i32> %32, %31
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = load i16, i16* %18, align 2
  %36 = zext i16 %35 to i64
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = bitcast <2 x i64> %37 to <8 x i16>
  %39 = shufflevector <8 x i16> %38, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %42 = icmp sgt <4 x i32> %41, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = shl <4 x i32> %41, <i32 13, i32 13, i32 13, i32 13>
  %44 = add <4 x i32> %43, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %45 = shl <4 x i32> %40, <i32 16, i32 16, i32 16, i32 16>
  %46 = and <4 x i32> %45, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %47 = select <4 x i1> %42, <4 x i32> %44, <4 x i32> zeroinitializer
  %48 = or <4 x i32> %47, %46
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = load i16, i16* %17, align 2
  %51 = zext i16 %50 to i64
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = bitcast <2 x i64> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %54 to <4 x i32>
  %56 = and <4 x i32> %55, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %57 = icmp sgt <4 x i32> %56, <i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = shl <4 x i32> %56, <i32 13, i32 13, i32 13, i32 13>
  %59 = add <4 x i32> %58, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %60 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %61 = and <4 x i32> %60, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %62 = select <4 x i1> %57, <4 x i32> %59, <4 x i32> zeroinitializer
  %63 = or <4 x i32> %62, %61
  %64 = bitcast <4 x i32> %63 to <4 x float>
  %65 = fadd <4 x float> %34, %49
  %66 = fadd <4 x float> %65, %49
  %67 = fadd <4 x float> %66, %64
  %68 = fmul <4 x float> %67, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %69 = bitcast <4 x float> %68 to <4 x i32>
  %70 = and <4 x i32> %69, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %71 = icmp ugt <4 x i32> %70, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %72 = add <4 x i32> %69, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %73 = lshr <4 x i32> %72, <i32 13, i32 13, i32 13, i32 13>
  %74 = shl <4 x i32> %73, <i32 16, i32 16, i32 16, i32 16>
  %75 = select <4 x i1> %71, <4 x i32> %74, <4 x i32> zeroinitializer
  %76 = and <4 x i32> %69, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %77 = or <4 x i32> %75, %76
  %78 = ashr exact <4 x i32> %77, <i32 16, i32 16, i32 16, i32 16>
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %78, <4 x i32> undef) #17
  %80 = bitcast <8 x i16> %79 to <2 x i64>
  %81 = extractelement <2 x i64> %80, i32 0
  %82 = trunc i64 %81 to i16
  %83 = getelementptr inbounds i16, i16* %6, i64 %16
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds i16, i16* %19, i64 2
  %85 = getelementptr inbounds i16, i16* %18, i64 2
  %86 = getelementptr inbounds i16, i16* %17, i64 2
  %87 = add nuw nsw i64 %16, 1
  %88 = icmp eq i64 %87, %13
  br i1 %88, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i16*
  %9 = zext i32 %3 to i64
  br label %11

10:                                               ; preds = %11, %4
  ret void

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %63, %11 ]
  %13 = phi i16* [ %8, %7 ], [ %62, %11 ]
  %14 = load i16, i16* %13, align 2
  %15 = zext i16 %14 to i64
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %17, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = and <4 x i32> %19, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %21 = icmp sgt <4 x i32> %20, <i32 1023, i32 1023, i32 1023, i32 1023>
  %22 = shl <4 x i32> %20, <i32 13, i32 13, i32 13, i32 13>
  %23 = add <4 x i32> %22, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %24 = shl <4 x i32> %19, <i32 16, i32 16, i32 16, i32 16>
  %25 = and <4 x i32> %24, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %26 = select <4 x i1> %21, <4 x i32> %23, <4 x i32> zeroinitializer
  %27 = or <4 x i32> %26, %25
  %28 = bitcast <4 x i32> %27 to <4 x float>
  %29 = getelementptr inbounds i16, i16* %13, i64 1
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i64
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = bitcast <8 x i16> %34 to <4 x i32>
  %36 = and <4 x i32> %35, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %37 = icmp sgt <4 x i32> %36, <i32 1023, i32 1023, i32 1023, i32 1023>
  %38 = shl <4 x i32> %36, <i32 13, i32 13, i32 13, i32 13>
  %39 = add <4 x i32> %38, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %40 = shl <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %41 = and <4 x i32> %40, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %42 = select <4 x i1> %37, <4 x i32> %39, <4 x i32> zeroinitializer
  %43 = or <4 x i32> %42, %41
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fadd <4 x float> %28, %44
  %46 = fmul <4 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = and <4 x i32> %47, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %49 = icmp ugt <4 x i32> %48, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %50 = add <4 x i32> %47, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %51 = lshr <4 x i32> %50, <i32 13, i32 13, i32 13, i32 13>
  %52 = shl <4 x i32> %51, <i32 16, i32 16, i32 16, i32 16>
  %53 = select <4 x i1> %49, <4 x i32> %52, <4 x i32> zeroinitializer
  %54 = and <4 x i32> %47, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %55 = or <4 x i32> %53, %54
  %56 = ashr exact <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> undef) #17
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = trunc i64 %59 to i16
  %61 = getelementptr inbounds i16, i16* %5, i64 %12
  store i16 %60, i16* %61, align 2
  %62 = getelementptr inbounds i16, i16* %13, i64 2
  %63 = add nuw nsw i64 %12, 1
  %64 = icmp eq i64 %63, %9
  br i1 %64, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i16*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %1 to i16*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %100, %13 ]
  %15 = phi i16* [ %9, %7 ], [ %99, %13 ]
  %16 = phi i16* [ %10, %7 ], [ %98, %13 ]
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i64
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = and <4 x i32> %22, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %24 = icmp sgt <4 x i32> %23, <i32 1023, i32 1023, i32 1023, i32 1023>
  %25 = shl <4 x i32> %23, <i32 13, i32 13, i32 13, i32 13>
  %26 = add <4 x i32> %25, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %27 = shl <4 x i32> %22, <i32 16, i32 16, i32 16, i32 16>
  %28 = and <4 x i32> %27, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %29 = select <4 x i1> %24, <4 x i32> %26, <4 x i32> zeroinitializer
  %30 = or <4 x i32> %29, %28
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = getelementptr inbounds i16, i16* %16, i64 1
  %33 = load i16, i16* %32, align 2
  %34 = zext i16 %33 to i64
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <8 x i16>
  %37 = shufflevector <8 x i16> %36, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = bitcast <8 x i16> %37 to <4 x i32>
  %39 = and <4 x i32> %38, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %40 = icmp sgt <4 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = shl <4 x i32> %39, <i32 13, i32 13, i32 13, i32 13>
  %42 = add <4 x i32> %41, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %43 = shl <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %44 = and <4 x i32> %43, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %45 = select <4 x i1> %40, <4 x i32> %42, <4 x i32> zeroinitializer
  %46 = or <4 x i32> %45, %44
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = load i16, i16* %15, align 2
  %49 = zext i16 %48 to i64
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = bitcast <8 x i16> %52 to <4 x i32>
  %54 = and <4 x i32> %53, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %55 = icmp sgt <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = shl <4 x i32> %54, <i32 13, i32 13, i32 13, i32 13>
  %57 = add <4 x i32> %56, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %58 = shl <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %59 = and <4 x i32> %58, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %60 = select <4 x i1> %55, <4 x i32> %57, <4 x i32> zeroinitializer
  %61 = or <4 x i32> %60, %59
  %62 = bitcast <4 x i32> %61 to <4 x float>
  %63 = getelementptr inbounds i16, i16* %15, i64 1
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i64
  %66 = insertelement <2 x i64> undef, i64 %65, i32 0
  %67 = bitcast <2 x i64> %66 to <8 x i16>
  %68 = shufflevector <8 x i16> %67, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %69 = bitcast <8 x i16> %68 to <4 x i32>
  %70 = and <4 x i32> %69, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %71 = icmp sgt <4 x i32> %70, <i32 1023, i32 1023, i32 1023, i32 1023>
  %72 = shl <4 x i32> %70, <i32 13, i32 13, i32 13, i32 13>
  %73 = add <4 x i32> %72, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %74 = shl <4 x i32> %69, <i32 16, i32 16, i32 16, i32 16>
  %75 = and <4 x i32> %74, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %76 = select <4 x i1> %71, <4 x i32> %73, <4 x i32> zeroinitializer
  %77 = or <4 x i32> %76, %75
  %78 = bitcast <4 x i32> %77 to <4 x float>
  %79 = fadd <4 x float> %31, %62
  %80 = fadd <4 x float> %79, %47
  %81 = fadd <4 x float> %80, %78
  %82 = fmul <4 x float> %81, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %83 = bitcast <4 x float> %82 to <4 x i32>
  %84 = and <4 x i32> %83, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %85 = icmp ugt <4 x i32> %84, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %86 = add <4 x i32> %83, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %87 = lshr <4 x i32> %86, <i32 13, i32 13, i32 13, i32 13>
  %88 = shl <4 x i32> %87, <i32 16, i32 16, i32 16, i32 16>
  %89 = select <4 x i1> %85, <4 x i32> %88, <4 x i32> zeroinitializer
  %90 = and <4 x i32> %83, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %91 = or <4 x i32> %89, %90
  %92 = ashr exact <4 x i32> %91, <i32 16, i32 16, i32 16, i32 16>
  %93 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %92, <4 x i32> undef) #17
  %94 = bitcast <8 x i16> %93 to <2 x i64>
  %95 = extractelement <2 x i64> %94, i32 0
  %96 = trunc i64 %95 to i16
  %97 = getelementptr inbounds i16, i16* %5, i64 %14
  store i16 %96, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %16, i64 2
  %99 = getelementptr inbounds i16, i16* %15, i64 2
  %100 = add nuw nsw i64 %14, 1
  %101 = icmp eq i64 %100, %11
  br i1 %101, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i16*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i16*
  %11 = bitcast i8* %5 to i16*
  %12 = bitcast i8* %1 to i16*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %139, %15 ]
  %17 = phi i16* [ %10, %8 ], [ %138, %15 ]
  %18 = phi i16* [ %11, %8 ], [ %137, %15 ]
  %19 = phi i16* [ %12, %8 ], [ %136, %15 ]
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i64
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <8 x i16>
  %24 = shufflevector <8 x i16> %23, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <8 x i16> %24 to <4 x i32>
  %26 = and <4 x i32> %25, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %27 = icmp sgt <4 x i32> %26, <i32 1023, i32 1023, i32 1023, i32 1023>
  %28 = shl <4 x i32> %26, <i32 13, i32 13, i32 13, i32 13>
  %29 = add <4 x i32> %28, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %30 = shl <4 x i32> %25, <i32 16, i32 16, i32 16, i32 16>
  %31 = and <4 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = select <4 x i1> %27, <4 x i32> %29, <4 x i32> zeroinitializer
  %33 = or <4 x i32> %32, %31
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = getelementptr inbounds i16, i16* %19, i64 1
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i64
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <8 x i16>
  %40 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = bitcast <8 x i16> %40 to <4 x i32>
  %42 = and <4 x i32> %41, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %43 = icmp sgt <4 x i32> %42, <i32 1023, i32 1023, i32 1023, i32 1023>
  %44 = shl <4 x i32> %42, <i32 13, i32 13, i32 13, i32 13>
  %45 = add <4 x i32> %44, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %46 = shl <4 x i32> %41, <i32 16, i32 16, i32 16, i32 16>
  %47 = and <4 x i32> %46, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %48 = select <4 x i1> %43, <4 x i32> %45, <4 x i32> zeroinitializer
  %49 = or <4 x i32> %48, %47
  %50 = bitcast <4 x i32> %49 to <4 x float>
  %51 = load i16, i16* %18, align 2
  %52 = zext i16 %51 to i64
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <8 x i16>
  %55 = shufflevector <8 x i16> %54, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = bitcast <8 x i16> %55 to <4 x i32>
  %57 = and <4 x i32> %56, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %58 = icmp sgt <4 x i32> %57, <i32 1023, i32 1023, i32 1023, i32 1023>
  %59 = shl <4 x i32> %57, <i32 13, i32 13, i32 13, i32 13>
  %60 = add <4 x i32> %59, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %61 = shl <4 x i32> %56, <i32 16, i32 16, i32 16, i32 16>
  %62 = and <4 x i32> %61, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %63 = select <4 x i1> %58, <4 x i32> %60, <4 x i32> zeroinitializer
  %64 = or <4 x i32> %63, %62
  %65 = bitcast <4 x i32> %64 to <4 x float>
  %66 = getelementptr inbounds i16, i16* %18, i64 1
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i64
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = bitcast <2 x i64> %69 to <8 x i16>
  %71 = shufflevector <8 x i16> %70, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = bitcast <8 x i16> %71 to <4 x i32>
  %73 = and <4 x i32> %72, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %74 = icmp sgt <4 x i32> %73, <i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = shl <4 x i32> %73, <i32 13, i32 13, i32 13, i32 13>
  %76 = add <4 x i32> %75, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %77 = shl <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %78 = and <4 x i32> %77, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %79 = select <4 x i1> %74, <4 x i32> %76, <4 x i32> zeroinitializer
  %80 = or <4 x i32> %79, %78
  %81 = bitcast <4 x i32> %80 to <4 x float>
  %82 = load i16, i16* %17, align 2
  %83 = zext i16 %82 to i64
  %84 = insertelement <2 x i64> undef, i64 %83, i32 0
  %85 = bitcast <2 x i64> %84 to <8 x i16>
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = bitcast <8 x i16> %86 to <4 x i32>
  %88 = and <4 x i32> %87, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %89 = icmp sgt <4 x i32> %88, <i32 1023, i32 1023, i32 1023, i32 1023>
  %90 = shl <4 x i32> %88, <i32 13, i32 13, i32 13, i32 13>
  %91 = add <4 x i32> %90, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %92 = shl <4 x i32> %87, <i32 16, i32 16, i32 16, i32 16>
  %93 = and <4 x i32> %92, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %94 = select <4 x i1> %89, <4 x i32> %91, <4 x i32> zeroinitializer
  %95 = or <4 x i32> %94, %93
  %96 = bitcast <4 x i32> %95 to <4 x float>
  %97 = getelementptr inbounds i16, i16* %17, i64 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i64
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast <2 x i64> %100 to <8 x i16>
  %102 = shufflevector <8 x i16> %101, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = bitcast <8 x i16> %102 to <4 x i32>
  %104 = and <4 x i32> %103, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %105 = icmp sgt <4 x i32> %104, <i32 1023, i32 1023, i32 1023, i32 1023>
  %106 = shl <4 x i32> %104, <i32 13, i32 13, i32 13, i32 13>
  %107 = add <4 x i32> %106, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %108 = shl <4 x i32> %103, <i32 16, i32 16, i32 16, i32 16>
  %109 = and <4 x i32> %108, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %110 = select <4 x i1> %105, <4 x i32> %107, <4 x i32> zeroinitializer
  %111 = or <4 x i32> %110, %109
  %112 = bitcast <4 x i32> %111 to <4 x float>
  %113 = fadd <4 x float> %34, %65
  %114 = fadd <4 x float> %113, %65
  %115 = fadd <4 x float> %114, %96
  %116 = fadd <4 x float> %50, %81
  %117 = fadd <4 x float> %116, %81
  %118 = fadd <4 x float> %117, %112
  %119 = fadd <4 x float> %115, %118
  %120 = fmul <4 x float> %119, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %121 = bitcast <4 x float> %120 to <4 x i32>
  %122 = and <4 x i32> %121, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %123 = icmp ugt <4 x i32> %122, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %124 = add <4 x i32> %121, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %125 = lshr <4 x i32> %124, <i32 13, i32 13, i32 13, i32 13>
  %126 = shl <4 x i32> %125, <i32 16, i32 16, i32 16, i32 16>
  %127 = select <4 x i1> %123, <4 x i32> %126, <4 x i32> zeroinitializer
  %128 = and <4 x i32> %121, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %129 = or <4 x i32> %127, %128
  %130 = ashr exact <4 x i32> %129, <i32 16, i32 16, i32 16, i32 16>
  %131 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %130, <4 x i32> undef) #17
  %132 = bitcast <8 x i16> %131 to <2 x i64>
  %133 = extractelement <2 x i64> %132, i32 0
  %134 = trunc i64 %133 to i16
  %135 = getelementptr inbounds i16, i16* %6, i64 %16
  store i16 %134, i16* %135, align 2
  %136 = getelementptr inbounds i16, i16* %19, i64 2
  %137 = getelementptr inbounds i16, i16* %18, i64 2
  %138 = getelementptr inbounds i16, i16* %17, i64 2
  %139 = add nuw nsw i64 %16, 1
  %140 = icmp eq i64 %139, %13
  br i1 %140, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = bitcast i8* %0 to i16*
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i64
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <8 x i16>
  %11 = shufflevector <8 x i16> %10, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %12 = bitcast <8 x i16> %11 to <4 x i32>
  %13 = and <4 x i32> %12, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %4
  %16 = icmp sgt <4 x i32> %13, <i32 1023, i32 1023, i32 1023, i32 1023>
  %17 = shl <4 x i32> %13, <i32 13, i32 13, i32 13, i32 13>
  %18 = add <4 x i32> %17, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %19 = select <4 x i1> %16, <4 x i32> %18, <4 x i32> zeroinitializer
  %20 = shl <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %21 = and <4 x i32> %20, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %22 = or <4 x i32> %19, %21
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = zext i32 %3 to i64
  br label %26

25:                                               ; preds = %26, %4
  ret void

26:                                               ; preds = %26, %15
  %27 = phi i64 [ 0, %15 ], [ %81, %26 ]
  %28 = phi i16* [ %5, %15 ], [ %46, %26 ]
  %29 = phi <4 x float> [ %23, %15 ], [ %61, %26 ]
  %30 = getelementptr inbounds i16, i16* %28, i64 1
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i64
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast <2 x i64> %33 to <8 x i16>
  %35 = shufflevector <8 x i16> %34, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = and <4 x i32> %36, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %38 = icmp sgt <4 x i32> %37, <i32 1023, i32 1023, i32 1023, i32 1023>
  %39 = shl <4 x i32> %37, <i32 13, i32 13, i32 13, i32 13>
  %40 = add <4 x i32> %39, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %41 = shl <4 x i32> %36, <i32 16, i32 16, i32 16, i32 16>
  %42 = and <4 x i32> %41, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %43 = select <4 x i1> %38, <4 x i32> %40, <4 x i32> zeroinitializer
  %44 = or <4 x i32> %43, %42
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = getelementptr inbounds i16, i16* %28, i64 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i64
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %54 = icmp sgt <4 x i32> %53, <i32 1023, i32 1023, i32 1023, i32 1023>
  %55 = shl <4 x i32> %53, <i32 13, i32 13, i32 13, i32 13>
  %56 = add <4 x i32> %55, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %57 = shl <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %58 = and <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = select <4 x i1> %54, <4 x i32> %56, <4 x i32> zeroinitializer
  %60 = or <4 x i32> %59, %58
  %61 = bitcast <4 x i32> %60 to <4 x float>
  %62 = fadd <4 x float> %29, %45
  %63 = fadd <4 x float> %62, %45
  %64 = fadd <4 x float> %63, %61
  %65 = fmul <4 x float> %64, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %66 = bitcast <4 x float> %65 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %68 = icmp ugt <4 x i32> %67, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %69 = add <4 x i32> %66, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %70 = lshr <4 x i32> %69, <i32 13, i32 13, i32 13, i32 13>
  %71 = shl <4 x i32> %70, <i32 16, i32 16, i32 16, i32 16>
  %72 = select <4 x i1> %68, <4 x i32> %71, <4 x i32> zeroinitializer
  %73 = and <4 x i32> %66, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %74 = or <4 x i32> %72, %73
  %75 = ashr exact <4 x i32> %74, <i32 16, i32 16, i32 16, i32 16>
  %76 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> undef) #17
  %77 = bitcast <8 x i16> %76 to <2 x i64>
  %78 = extractelement <2 x i64> %77, i32 0
  %79 = trunc i64 %78 to i16
  %80 = getelementptr inbounds i16, i16* %6, i64 %27
  store i16 %79, i16* %80, align 2
  %81 = add nuw nsw i64 %27, 1
  %82 = icmp eq i64 %81, %24
  br i1 %82, label %25, label %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = bitcast i8* %0 to i16*
  %9 = load i16, i16* %5, align 2
  %10 = zext i16 %9 to i64
  %11 = insertelement <2 x i64> undef, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <8 x i16>
  %13 = shufflevector <8 x i16> %12, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %14 = bitcast <8 x i16> %13 to <4 x i32>
  %15 = and <4 x i32> %14, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %16 = load i16, i16* %7, align 2
  %17 = zext i16 %16 to i64
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <8 x i16>
  %20 = shufflevector <8 x i16> %19, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = bitcast <8 x i16> %20 to <4 x i32>
  %22 = and <4 x i32> %21, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %23 = icmp sgt i32 %3, 0
  br i1 %23, label %24, label %43

24:                                               ; preds = %4
  %25 = icmp sgt <4 x i32> %15, <i32 1023, i32 1023, i32 1023, i32 1023>
  %26 = shl <4 x i32> %15, <i32 13, i32 13, i32 13, i32 13>
  %27 = add <4 x i32> %26, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %28 = select <4 x i1> %25, <4 x i32> %27, <4 x i32> zeroinitializer
  %29 = shl <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = or <4 x i32> %28, %30
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = icmp sgt <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = shl <4 x i32> %22, <i32 13, i32 13, i32 13, i32 13>
  %35 = add <4 x i32> %34, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %36 = select <4 x i1> %33, <4 x i32> %35, <4 x i32> zeroinitializer
  %37 = shl <4 x i32> %21, <i32 16, i32 16, i32 16, i32 16>
  %38 = and <4 x i32> %37, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %39 = or <4 x i32> %36, %38
  %40 = bitcast <4 x i32> %39 to <4 x float>
  %41 = fadd <4 x float> %32, %40
  %42 = zext i32 %3 to i64
  br label %44

43:                                               ; preds = %44, %4
  ret void

44:                                               ; preds = %44, %24
  %45 = phi i64 [ 0, %24 ], [ %135, %44 ]
  %46 = phi i16* [ %5, %24 ], [ %84, %44 ]
  %47 = phi i16* [ %7, %24 ], [ %100, %44 ]
  %48 = phi <4 x float> [ %41, %24 ], [ %116, %44 ]
  %49 = getelementptr inbounds i16, i16* %46, i64 1
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i64
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = bitcast <2 x i64> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %54 to <4 x i32>
  %56 = and <4 x i32> %55, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %57 = icmp sgt <4 x i32> %56, <i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = shl <4 x i32> %56, <i32 13, i32 13, i32 13, i32 13>
  %59 = add <4 x i32> %58, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %60 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %61 = and <4 x i32> %60, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %62 = select <4 x i1> %57, <4 x i32> %59, <4 x i32> zeroinitializer
  %63 = or <4 x i32> %62, %61
  %64 = bitcast <4 x i32> %63 to <4 x float>
  %65 = getelementptr inbounds i16, i16* %47, i64 1
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i64
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = bitcast <2 x i64> %68 to <8 x i16>
  %70 = shufflevector <8 x i16> %69, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %71 = bitcast <8 x i16> %70 to <4 x i32>
  %72 = and <4 x i32> %71, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %73 = icmp sgt <4 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = shl <4 x i32> %72, <i32 13, i32 13, i32 13, i32 13>
  %75 = add <4 x i32> %74, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %76 = shl <4 x i32> %71, <i32 16, i32 16, i32 16, i32 16>
  %77 = and <4 x i32> %76, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %78 = select <4 x i1> %73, <4 x i32> %75, <4 x i32> zeroinitializer
  %79 = or <4 x i32> %78, %77
  %80 = bitcast <4 x i32> %79 to <4 x float>
  %81 = fadd <4 x float> %64, %64
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %80
  %84 = getelementptr inbounds i16, i16* %46, i64 2
  %85 = load i16, i16* %84, align 2
  %86 = zext i16 %85 to i64
  %87 = insertelement <2 x i64> undef, i64 %86, i32 0
  %88 = bitcast <2 x i64> %87 to <8 x i16>
  %89 = shufflevector <8 x i16> %88, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = bitcast <8 x i16> %89 to <4 x i32>
  %91 = and <4 x i32> %90, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %92 = icmp sgt <4 x i32> %91, <i32 1023, i32 1023, i32 1023, i32 1023>
  %93 = shl <4 x i32> %91, <i32 13, i32 13, i32 13, i32 13>
  %94 = add <4 x i32> %93, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %95 = shl <4 x i32> %90, <i32 16, i32 16, i32 16, i32 16>
  %96 = and <4 x i32> %95, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %97 = select <4 x i1> %92, <4 x i32> %94, <4 x i32> zeroinitializer
  %98 = or <4 x i32> %97, %96
  %99 = bitcast <4 x i32> %98 to <4 x float>
  %100 = getelementptr inbounds i16, i16* %47, i64 2
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i64
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <8 x i16>
  %105 = shufflevector <8 x i16> %104, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %106 = bitcast <8 x i16> %105 to <4 x i32>
  %107 = and <4 x i32> %106, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %108 = icmp sgt <4 x i32> %107, <i32 1023, i32 1023, i32 1023, i32 1023>
  %109 = shl <4 x i32> %107, <i32 13, i32 13, i32 13, i32 13>
  %110 = add <4 x i32> %109, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %111 = shl <4 x i32> %106, <i32 16, i32 16, i32 16, i32 16>
  %112 = and <4 x i32> %111, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %113 = select <4 x i1> %108, <4 x i32> %110, <4 x i32> zeroinitializer
  %114 = or <4 x i32> %113, %112
  %115 = bitcast <4 x i32> %114 to <4 x float>
  %116 = fadd <4 x float> %99, %115
  %117 = fadd <4 x float> %48, %83
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %118, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %120 = bitcast <4 x float> %119 to <4 x i32>
  %121 = and <4 x i32> %120, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %122 = icmp ugt <4 x i32> %121, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %123 = add <4 x i32> %120, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %124 = lshr <4 x i32> %123, <i32 13, i32 13, i32 13, i32 13>
  %125 = shl <4 x i32> %124, <i32 16, i32 16, i32 16, i32 16>
  %126 = select <4 x i1> %122, <4 x i32> %125, <4 x i32> zeroinitializer
  %127 = and <4 x i32> %120, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %128 = or <4 x i32> %126, %127
  %129 = ashr exact <4 x i32> %128, <i32 16, i32 16, i32 16, i32 16>
  %130 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %129, <4 x i32> undef) #17
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = trunc i64 %132 to i16
  %134 = getelementptr inbounds i16, i16* %8, i64 %45
  store i16 %133, i16* %134, align 2
  %135 = add nuw nsw i64 %45, 1
  %136 = icmp eq i64 %135, %42
  br i1 %136, label %43, label %44
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I25ColorTypeFilter_Alpha_F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i16*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i16*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i16*
  %10 = bitcast i8* %0 to i16*
  %11 = load i16, i16* %5, align 2
  %12 = zext i16 %11 to i64
  %13 = insertelement <2 x i64> undef, i64 %12, i32 0
  %14 = bitcast <2 x i64> %13 to <8 x i16>
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = bitcast <8 x i16> %15 to <4 x i32>
  %17 = and <4 x i32> %16, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %18 = load i16, i16* %7, align 2
  %19 = zext i16 %18 to i64
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = bitcast <2 x i64> %20 to <8 x i16>
  %22 = shufflevector <8 x i16> %21, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %23 = bitcast <8 x i16> %22 to <4 x i32>
  %24 = and <4 x i32> %23, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %25 = icmp sgt <4 x i32> %24, <i32 1023, i32 1023, i32 1023, i32 1023>
  %26 = shl <4 x i32> %24, <i32 13, i32 13, i32 13, i32 13>
  %27 = add <4 x i32> %26, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %28 = shl <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %29 = and <4 x i32> %28, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %30 = select <4 x i1> %25, <4 x i32> %27, <4 x i32> zeroinitializer
  %31 = or <4 x i32> %30, %29
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = load i16, i16* %9, align 2
  %34 = zext i16 %33 to i64
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <8 x i16>
  %37 = shufflevector <8 x i16> %36, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = bitcast <8 x i16> %37 to <4 x i32>
  %39 = and <4 x i32> %38, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %40 = icmp sgt i32 %3, 0
  br i1 %40, label %41, label %62

41:                                               ; preds = %4
  %42 = icmp sgt <4 x i32> %17, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = shl <4 x i32> %17, <i32 13, i32 13, i32 13, i32 13>
  %44 = add <4 x i32> %43, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %45 = select <4 x i1> %42, <4 x i32> %44, <4 x i32> zeroinitializer
  %46 = shl <4 x i32> %16, <i32 16, i32 16, i32 16, i32 16>
  %47 = and <4 x i32> %46, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %48 = or <4 x i32> %45, %47
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = fadd <4 x float> %49, %32
  %51 = fadd <4 x float> %50, %32
  %52 = icmp sgt <4 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023>
  %53 = shl <4 x i32> %39, <i32 13, i32 13, i32 13, i32 13>
  %54 = add <4 x i32> %53, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %55 = select <4 x i1> %52, <4 x i32> %54, <4 x i32> zeroinitializer
  %56 = shl <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %57 = and <4 x i32> %56, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %58 = or <4 x i32> %55, %57
  %59 = bitcast <4 x i32> %58 to <4 x float>
  %60 = fadd <4 x float> %51, %59
  %61 = zext i32 %3 to i64
  br label %63

62:                                               ; preds = %63, %4
  ret void

63:                                               ; preds = %63, %41
  %64 = phi i64 [ 0, %41 ], [ %190, %63 ]
  %65 = phi i16* [ %5, %41 ], [ %121, %63 ]
  %66 = phi i16* [ %7, %41 ], [ %137, %63 ]
  %67 = phi i16* [ %9, %41 ], [ %153, %63 ]
  %68 = phi <4 x float> [ %60, %41 ], [ %171, %63 ]
  %69 = getelementptr inbounds i16, i16* %65, i64 1
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i64
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <8 x i16>
  %74 = shufflevector <8 x i16> %73, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = and <4 x i32> %75, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %77 = icmp sgt <4 x i32> %76, <i32 1023, i32 1023, i32 1023, i32 1023>
  %78 = shl <4 x i32> %76, <i32 13, i32 13, i32 13, i32 13>
  %79 = add <4 x i32> %78, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %80 = shl <4 x i32> %75, <i32 16, i32 16, i32 16, i32 16>
  %81 = and <4 x i32> %80, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %82 = select <4 x i1> %77, <4 x i32> %79, <4 x i32> zeroinitializer
  %83 = or <4 x i32> %82, %81
  %84 = bitcast <4 x i32> %83 to <4 x float>
  %85 = getelementptr inbounds i16, i16* %66, i64 1
  %86 = load i16, i16* %85, align 2
  %87 = zext i16 %86 to i64
  %88 = insertelement <2 x i64> undef, i64 %87, i32 0
  %89 = bitcast <2 x i64> %88 to <8 x i16>
  %90 = shufflevector <8 x i16> %89, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = bitcast <8 x i16> %90 to <4 x i32>
  %92 = and <4 x i32> %91, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %93 = icmp sgt <4 x i32> %92, <i32 1023, i32 1023, i32 1023, i32 1023>
  %94 = shl <4 x i32> %92, <i32 13, i32 13, i32 13, i32 13>
  %95 = add <4 x i32> %94, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %96 = shl <4 x i32> %91, <i32 16, i32 16, i32 16, i32 16>
  %97 = and <4 x i32> %96, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %98 = select <4 x i1> %93, <4 x i32> %95, <4 x i32> zeroinitializer
  %99 = or <4 x i32> %98, %97
  %100 = bitcast <4 x i32> %99 to <4 x float>
  %101 = getelementptr inbounds i16, i16* %67, i64 1
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i64
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <8 x i16>
  %106 = shufflevector <8 x i16> %105, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %107 = bitcast <8 x i16> %106 to <4 x i32>
  %108 = and <4 x i32> %107, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %109 = icmp sgt <4 x i32> %108, <i32 1023, i32 1023, i32 1023, i32 1023>
  %110 = shl <4 x i32> %108, <i32 13, i32 13, i32 13, i32 13>
  %111 = add <4 x i32> %110, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %112 = shl <4 x i32> %107, <i32 16, i32 16, i32 16, i32 16>
  %113 = and <4 x i32> %112, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %114 = select <4 x i1> %109, <4 x i32> %111, <4 x i32> zeroinitializer
  %115 = or <4 x i32> %114, %113
  %116 = bitcast <4 x i32> %115 to <4 x float>
  %117 = fadd <4 x float> %84, %100
  %118 = fadd <4 x float> %117, %100
  %119 = fadd <4 x float> %118, %116
  %120 = fmul <4 x float> %119, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %121 = getelementptr inbounds i16, i16* %65, i64 2
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i64
  %124 = insertelement <2 x i64> undef, i64 %123, i32 0
  %125 = bitcast <2 x i64> %124 to <8 x i16>
  %126 = shufflevector <8 x i16> %125, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %127 = bitcast <8 x i16> %126 to <4 x i32>
  %128 = and <4 x i32> %127, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %129 = icmp sgt <4 x i32> %128, <i32 1023, i32 1023, i32 1023, i32 1023>
  %130 = shl <4 x i32> %128, <i32 13, i32 13, i32 13, i32 13>
  %131 = add <4 x i32> %130, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %132 = shl <4 x i32> %127, <i32 16, i32 16, i32 16, i32 16>
  %133 = and <4 x i32> %132, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %134 = select <4 x i1> %129, <4 x i32> %131, <4 x i32> zeroinitializer
  %135 = or <4 x i32> %134, %133
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = getelementptr inbounds i16, i16* %66, i64 2
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i64
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <8 x i16>
  %142 = shufflevector <8 x i16> %141, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %143 = bitcast <8 x i16> %142 to <4 x i32>
  %144 = and <4 x i32> %143, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %145 = icmp sgt <4 x i32> %144, <i32 1023, i32 1023, i32 1023, i32 1023>
  %146 = shl <4 x i32> %144, <i32 13, i32 13, i32 13, i32 13>
  %147 = add <4 x i32> %146, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %148 = shl <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %149 = and <4 x i32> %148, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %150 = select <4 x i1> %145, <4 x i32> %147, <4 x i32> zeroinitializer
  %151 = or <4 x i32> %150, %149
  %152 = bitcast <4 x i32> %151 to <4 x float>
  %153 = getelementptr inbounds i16, i16* %67, i64 2
  %154 = load i16, i16* %153, align 2
  %155 = zext i16 %154 to i64
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = bitcast <2 x i64> %156 to <8 x i16>
  %158 = shufflevector <8 x i16> %157, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %159 = bitcast <8 x i16> %158 to <4 x i32>
  %160 = and <4 x i32> %159, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %161 = icmp sgt <4 x i32> %160, <i32 1023, i32 1023, i32 1023, i32 1023>
  %162 = shl <4 x i32> %160, <i32 13, i32 13, i32 13, i32 13>
  %163 = add <4 x i32> %162, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %164 = shl <4 x i32> %159, <i32 16, i32 16, i32 16, i32 16>
  %165 = and <4 x i32> %164, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %166 = select <4 x i1> %161, <4 x i32> %163, <4 x i32> zeroinitializer
  %167 = or <4 x i32> %166, %165
  %168 = bitcast <4 x i32> %167 to <4 x float>
  %169 = fadd <4 x float> %136, %152
  %170 = fadd <4 x float> %169, %152
  %171 = fadd <4 x float> %170, %168
  %172 = fadd <4 x float> %68, %120
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %173, <float 6.250000e-02, float 6.250000e-02, float 6.250000e-02, float 6.250000e-02>
  %175 = bitcast <4 x float> %174 to <4 x i32>
  %176 = and <4 x i32> %175, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %177 = icmp ugt <4 x i32> %176, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %178 = add <4 x i32> %175, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %179 = lshr <4 x i32> %178, <i32 13, i32 13, i32 13, i32 13>
  %180 = shl <4 x i32> %179, <i32 16, i32 16, i32 16, i32 16>
  %181 = select <4 x i1> %177, <4 x i32> %180, <4 x i32> zeroinitializer
  %182 = and <4 x i32> %175, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %183 = or <4 x i32> %181, %182
  %184 = ashr exact <4 x i32> %183, <i32 16, i32 16, i32 16, i32 16>
  %185 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %184, <4 x i32> undef) #17
  %186 = bitcast <8 x i16> %185 to <2 x i64>
  %187 = extractelement <2 x i64> %186, i32 0
  %188 = trunc i64 %187 to i16
  %189 = getelementptr inbounds i16, i16* %10, i64 %64
  store i16 %188, i16* %189, align 2
  %190 = add nuw nsw i64 %64, 1
  %191 = icmp eq i64 %190, %61
  br i1 %191, label %62, label %63
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %66, %13 ]
  %15 = phi i32* [ %9, %7 ], [ %65, %13 ]
  %16 = phi i32* [ %10, %7 ], [ %64, %13 ]
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = and <4 x i32> %22, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %24 = icmp sgt <4 x i32> %23, <i32 1023, i32 1023, i32 1023, i32 1023>
  %25 = shl <4 x i32> %23, <i32 13, i32 13, i32 13, i32 13>
  %26 = add <4 x i32> %25, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %27 = shl <4 x i32> %22, <i32 16, i32 16, i32 16, i32 16>
  %28 = and <4 x i32> %27, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %29 = select <4 x i1> %24, <4 x i32> %26, <4 x i32> zeroinitializer
  %30 = or <4 x i32> %29, %28
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = load i32, i32* %15, align 4
  %33 = zext i32 %32 to i64
  %34 = insertelement <2 x i64> undef, i64 %33, i32 0
  %35 = bitcast <2 x i64> %34 to <8 x i16>
  %36 = shufflevector <8 x i16> %35, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %37 = bitcast <8 x i16> %36 to <4 x i32>
  %38 = and <4 x i32> %37, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %39 = icmp sgt <4 x i32> %38, <i32 1023, i32 1023, i32 1023, i32 1023>
  %40 = shl <4 x i32> %38, <i32 13, i32 13, i32 13, i32 13>
  %41 = add <4 x i32> %40, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %42 = shl <4 x i32> %37, <i32 16, i32 16, i32 16, i32 16>
  %43 = and <4 x i32> %42, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %44 = select <4 x i1> %39, <4 x i32> %41, <4 x i32> zeroinitializer
  %45 = or <4 x i32> %44, %43
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = fadd <4 x float> %31, %46
  %48 = fmul <4 x float> %47, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %49 = bitcast <4 x float> %48 to <4 x i32>
  %50 = and <4 x i32> %49, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %51 = icmp ugt <4 x i32> %50, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %52 = add <4 x i32> %49, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %53 = lshr <4 x i32> %52, <i32 13, i32 13, i32 13, i32 13>
  %54 = shl <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %55 = select <4 x i1> %51, <4 x i32> %54, <4 x i32> zeroinitializer
  %56 = and <4 x i32> %49, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %57 = or <4 x i32> %55, %56
  %58 = ashr exact <4 x i32> %57, <i32 16, i32 16, i32 16, i32 16>
  %59 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %58, <4 x i32> undef) #17
  %60 = bitcast <8 x i16> %59 to <2 x i64>
  %61 = extractelement <2 x i64> %60, i32 0
  %62 = trunc i64 %61 to i32
  %63 = getelementptr inbounds i32, i32* %5, i64 %14
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds i32, i32* %16, i64 2
  %65 = getelementptr inbounds i32, i32* %15, i64 2
  %66 = add nuw nsw i64 %14, 1
  %67 = icmp eq i64 %66, %11
  br i1 %67, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %87, %15 ]
  %17 = phi i32* [ %10, %8 ], [ %86, %15 ]
  %18 = phi i32* [ %11, %8 ], [ %85, %15 ]
  %19 = phi i32* [ %12, %8 ], [ %84, %15 ]
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <8 x i16>
  %24 = shufflevector <8 x i16> %23, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <8 x i16> %24 to <4 x i32>
  %26 = and <4 x i32> %25, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %27 = icmp sgt <4 x i32> %26, <i32 1023, i32 1023, i32 1023, i32 1023>
  %28 = shl <4 x i32> %26, <i32 13, i32 13, i32 13, i32 13>
  %29 = add <4 x i32> %28, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %30 = shl <4 x i32> %25, <i32 16, i32 16, i32 16, i32 16>
  %31 = and <4 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = select <4 x i1> %27, <4 x i32> %29, <4 x i32> zeroinitializer
  %33 = or <4 x i32> %32, %31
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = load i32, i32* %18, align 4
  %36 = zext i32 %35 to i64
  %37 = insertelement <2 x i64> undef, i64 %36, i32 0
  %38 = bitcast <2 x i64> %37 to <8 x i16>
  %39 = shufflevector <8 x i16> %38, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %40 = bitcast <8 x i16> %39 to <4 x i32>
  %41 = and <4 x i32> %40, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %42 = icmp sgt <4 x i32> %41, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = shl <4 x i32> %41, <i32 13, i32 13, i32 13, i32 13>
  %44 = add <4 x i32> %43, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %45 = shl <4 x i32> %40, <i32 16, i32 16, i32 16, i32 16>
  %46 = and <4 x i32> %45, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %47 = select <4 x i1> %42, <4 x i32> %44, <4 x i32> zeroinitializer
  %48 = or <4 x i32> %47, %46
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = load i32, i32* %17, align 4
  %51 = zext i32 %50 to i64
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = bitcast <2 x i64> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %54 to <4 x i32>
  %56 = and <4 x i32> %55, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %57 = icmp sgt <4 x i32> %56, <i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = shl <4 x i32> %56, <i32 13, i32 13, i32 13, i32 13>
  %59 = add <4 x i32> %58, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %60 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %61 = and <4 x i32> %60, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %62 = select <4 x i1> %57, <4 x i32> %59, <4 x i32> zeroinitializer
  %63 = or <4 x i32> %62, %61
  %64 = bitcast <4 x i32> %63 to <4 x float>
  %65 = fadd <4 x float> %34, %49
  %66 = fadd <4 x float> %65, %49
  %67 = fadd <4 x float> %66, %64
  %68 = fmul <4 x float> %67, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %69 = bitcast <4 x float> %68 to <4 x i32>
  %70 = and <4 x i32> %69, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %71 = icmp ugt <4 x i32> %70, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %72 = add <4 x i32> %69, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %73 = lshr <4 x i32> %72, <i32 13, i32 13, i32 13, i32 13>
  %74 = shl <4 x i32> %73, <i32 16, i32 16, i32 16, i32 16>
  %75 = select <4 x i1> %71, <4 x i32> %74, <4 x i32> zeroinitializer
  %76 = and <4 x i32> %69, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %77 = or <4 x i32> %75, %76
  %78 = ashr exact <4 x i32> %77, <i32 16, i32 16, i32 16, i32 16>
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %78, <4 x i32> undef) #17
  %80 = bitcast <8 x i16> %79 to <2 x i64>
  %81 = extractelement <2 x i64> %80, i32 0
  %82 = trunc i64 %81 to i32
  %83 = getelementptr inbounds i32, i32* %6, i64 %16
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds i32, i32* %19, i64 2
  %85 = getelementptr inbounds i32, i32* %18, i64 2
  %86 = getelementptr inbounds i32, i32* %17, i64 2
  %87 = add nuw nsw i64 %16, 1
  %88 = icmp eq i64 %87, %13
  br i1 %88, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i32*
  %9 = zext i32 %3 to i64
  br label %11

10:                                               ; preds = %11, %4
  ret void

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %63, %11 ]
  %13 = phi i32* [ %8, %7 ], [ %62, %11 ]
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = insertelement <2 x i64> undef, i64 %15, i32 0
  %17 = bitcast <2 x i64> %16 to <8 x i16>
  %18 = shufflevector <8 x i16> %17, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %19 = bitcast <8 x i16> %18 to <4 x i32>
  %20 = and <4 x i32> %19, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %21 = icmp sgt <4 x i32> %20, <i32 1023, i32 1023, i32 1023, i32 1023>
  %22 = shl <4 x i32> %20, <i32 13, i32 13, i32 13, i32 13>
  %23 = add <4 x i32> %22, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %24 = shl <4 x i32> %19, <i32 16, i32 16, i32 16, i32 16>
  %25 = and <4 x i32> %24, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %26 = select <4 x i1> %21, <4 x i32> %23, <4 x i32> zeroinitializer
  %27 = or <4 x i32> %26, %25
  %28 = bitcast <4 x i32> %27 to <4 x float>
  %29 = getelementptr inbounds i32, i32* %13, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i64
  %32 = insertelement <2 x i64> undef, i64 %31, i32 0
  %33 = bitcast <2 x i64> %32 to <8 x i16>
  %34 = shufflevector <8 x i16> %33, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %35 = bitcast <8 x i16> %34 to <4 x i32>
  %36 = and <4 x i32> %35, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %37 = icmp sgt <4 x i32> %36, <i32 1023, i32 1023, i32 1023, i32 1023>
  %38 = shl <4 x i32> %36, <i32 13, i32 13, i32 13, i32 13>
  %39 = add <4 x i32> %38, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %40 = shl <4 x i32> %35, <i32 16, i32 16, i32 16, i32 16>
  %41 = and <4 x i32> %40, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %42 = select <4 x i1> %37, <4 x i32> %39, <4 x i32> zeroinitializer
  %43 = or <4 x i32> %42, %41
  %44 = bitcast <4 x i32> %43 to <4 x float>
  %45 = fadd <4 x float> %28, %44
  %46 = fmul <4 x float> %45, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %47 = bitcast <4 x float> %46 to <4 x i32>
  %48 = and <4 x i32> %47, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %49 = icmp ugt <4 x i32> %48, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %50 = add <4 x i32> %47, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %51 = lshr <4 x i32> %50, <i32 13, i32 13, i32 13, i32 13>
  %52 = shl <4 x i32> %51, <i32 16, i32 16, i32 16, i32 16>
  %53 = select <4 x i1> %49, <4 x i32> %52, <4 x i32> zeroinitializer
  %54 = and <4 x i32> %47, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %55 = or <4 x i32> %53, %54
  %56 = ashr exact <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %57 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %56, <4 x i32> undef) #17
  %58 = bitcast <8 x i16> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = trunc i64 %59 to i32
  %61 = getelementptr inbounds i32, i32* %5, i64 %12
  store i32 %60, i32* %61, align 4
  %62 = getelementptr inbounds i32, i32* %13, i64 2
  %63 = add nuw nsw i64 %12, 1
  %64 = icmp eq i64 %63, %9
  br i1 %64, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i32*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %1 to i32*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %100, %13 ]
  %15 = phi i32* [ %9, %7 ], [ %99, %13 ]
  %16 = phi i32* [ %10, %7 ], [ %98, %13 ]
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i64
  %19 = insertelement <2 x i64> undef, i64 %18, i32 0
  %20 = bitcast <2 x i64> %19 to <8 x i16>
  %21 = shufflevector <8 x i16> %20, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %22 = bitcast <8 x i16> %21 to <4 x i32>
  %23 = and <4 x i32> %22, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %24 = icmp sgt <4 x i32> %23, <i32 1023, i32 1023, i32 1023, i32 1023>
  %25 = shl <4 x i32> %23, <i32 13, i32 13, i32 13, i32 13>
  %26 = add <4 x i32> %25, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %27 = shl <4 x i32> %22, <i32 16, i32 16, i32 16, i32 16>
  %28 = and <4 x i32> %27, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %29 = select <4 x i1> %24, <4 x i32> %26, <4 x i32> zeroinitializer
  %30 = or <4 x i32> %29, %28
  %31 = bitcast <4 x i32> %30 to <4 x float>
  %32 = getelementptr inbounds i32, i32* %16, i64 1
  %33 = load i32, i32* %32, align 4
  %34 = zext i32 %33 to i64
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <8 x i16>
  %37 = shufflevector <8 x i16> %36, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = bitcast <8 x i16> %37 to <4 x i32>
  %39 = and <4 x i32> %38, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %40 = icmp sgt <4 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023>
  %41 = shl <4 x i32> %39, <i32 13, i32 13, i32 13, i32 13>
  %42 = add <4 x i32> %41, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %43 = shl <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %44 = and <4 x i32> %43, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %45 = select <4 x i1> %40, <4 x i32> %42, <4 x i32> zeroinitializer
  %46 = or <4 x i32> %45, %44
  %47 = bitcast <4 x i32> %46 to <4 x float>
  %48 = load i32, i32* %15, align 4
  %49 = zext i32 %48 to i64
  %50 = insertelement <2 x i64> undef, i64 %49, i32 0
  %51 = bitcast <2 x i64> %50 to <8 x i16>
  %52 = shufflevector <8 x i16> %51, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %53 = bitcast <8 x i16> %52 to <4 x i32>
  %54 = and <4 x i32> %53, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %55 = icmp sgt <4 x i32> %54, <i32 1023, i32 1023, i32 1023, i32 1023>
  %56 = shl <4 x i32> %54, <i32 13, i32 13, i32 13, i32 13>
  %57 = add <4 x i32> %56, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %58 = shl <4 x i32> %53, <i32 16, i32 16, i32 16, i32 16>
  %59 = and <4 x i32> %58, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %60 = select <4 x i1> %55, <4 x i32> %57, <4 x i32> zeroinitializer
  %61 = or <4 x i32> %60, %59
  %62 = bitcast <4 x i32> %61 to <4 x float>
  %63 = getelementptr inbounds i32, i32* %15, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i64
  %66 = insertelement <2 x i64> undef, i64 %65, i32 0
  %67 = bitcast <2 x i64> %66 to <8 x i16>
  %68 = shufflevector <8 x i16> %67, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %69 = bitcast <8 x i16> %68 to <4 x i32>
  %70 = and <4 x i32> %69, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %71 = icmp sgt <4 x i32> %70, <i32 1023, i32 1023, i32 1023, i32 1023>
  %72 = shl <4 x i32> %70, <i32 13, i32 13, i32 13, i32 13>
  %73 = add <4 x i32> %72, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %74 = shl <4 x i32> %69, <i32 16, i32 16, i32 16, i32 16>
  %75 = and <4 x i32> %74, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %76 = select <4 x i1> %71, <4 x i32> %73, <4 x i32> zeroinitializer
  %77 = or <4 x i32> %76, %75
  %78 = bitcast <4 x i32> %77 to <4 x float>
  %79 = fadd <4 x float> %31, %62
  %80 = fadd <4 x float> %79, %47
  %81 = fadd <4 x float> %80, %78
  %82 = fmul <4 x float> %81, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %83 = bitcast <4 x float> %82 to <4 x i32>
  %84 = and <4 x i32> %83, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %85 = icmp ugt <4 x i32> %84, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %86 = add <4 x i32> %83, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %87 = lshr <4 x i32> %86, <i32 13, i32 13, i32 13, i32 13>
  %88 = shl <4 x i32> %87, <i32 16, i32 16, i32 16, i32 16>
  %89 = select <4 x i1> %85, <4 x i32> %88, <4 x i32> zeroinitializer
  %90 = and <4 x i32> %83, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %91 = or <4 x i32> %89, %90
  %92 = ashr exact <4 x i32> %91, <i32 16, i32 16, i32 16, i32 16>
  %93 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %92, <4 x i32> undef) #17
  %94 = bitcast <8 x i16> %93 to <2 x i64>
  %95 = extractelement <2 x i64> %94, i32 0
  %96 = trunc i64 %95 to i32
  %97 = getelementptr inbounds i32, i32* %5, i64 %14
  store i32 %96, i32* %97, align 4
  %98 = getelementptr inbounds i32, i32* %16, i64 2
  %99 = getelementptr inbounds i32, i32* %15, i64 2
  %100 = add nuw nsw i64 %14, 1
  %101 = icmp eq i64 %100, %11
  br i1 %101, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i32*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i32*
  %11 = bitcast i8* %5 to i32*
  %12 = bitcast i8* %1 to i32*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %139, %15 ]
  %17 = phi i32* [ %10, %8 ], [ %138, %15 ]
  %18 = phi i32* [ %11, %8 ], [ %137, %15 ]
  %19 = phi i32* [ %12, %8 ], [ %136, %15 ]
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i64
  %22 = insertelement <2 x i64> undef, i64 %21, i32 0
  %23 = bitcast <2 x i64> %22 to <8 x i16>
  %24 = shufflevector <8 x i16> %23, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %25 = bitcast <8 x i16> %24 to <4 x i32>
  %26 = and <4 x i32> %25, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %27 = icmp sgt <4 x i32> %26, <i32 1023, i32 1023, i32 1023, i32 1023>
  %28 = shl <4 x i32> %26, <i32 13, i32 13, i32 13, i32 13>
  %29 = add <4 x i32> %28, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %30 = shl <4 x i32> %25, <i32 16, i32 16, i32 16, i32 16>
  %31 = and <4 x i32> %30, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %32 = select <4 x i1> %27, <4 x i32> %29, <4 x i32> zeroinitializer
  %33 = or <4 x i32> %32, %31
  %34 = bitcast <4 x i32> %33 to <4 x float>
  %35 = getelementptr inbounds i32, i32* %19, i64 1
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = insertelement <2 x i64> undef, i64 %37, i32 0
  %39 = bitcast <2 x i64> %38 to <8 x i16>
  %40 = shufflevector <8 x i16> %39, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %41 = bitcast <8 x i16> %40 to <4 x i32>
  %42 = and <4 x i32> %41, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %43 = icmp sgt <4 x i32> %42, <i32 1023, i32 1023, i32 1023, i32 1023>
  %44 = shl <4 x i32> %42, <i32 13, i32 13, i32 13, i32 13>
  %45 = add <4 x i32> %44, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %46 = shl <4 x i32> %41, <i32 16, i32 16, i32 16, i32 16>
  %47 = and <4 x i32> %46, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %48 = select <4 x i1> %43, <4 x i32> %45, <4 x i32> zeroinitializer
  %49 = or <4 x i32> %48, %47
  %50 = bitcast <4 x i32> %49 to <4 x float>
  %51 = load i32, i32* %18, align 4
  %52 = zext i32 %51 to i64
  %53 = insertelement <2 x i64> undef, i64 %52, i32 0
  %54 = bitcast <2 x i64> %53 to <8 x i16>
  %55 = shufflevector <8 x i16> %54, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %56 = bitcast <8 x i16> %55 to <4 x i32>
  %57 = and <4 x i32> %56, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %58 = icmp sgt <4 x i32> %57, <i32 1023, i32 1023, i32 1023, i32 1023>
  %59 = shl <4 x i32> %57, <i32 13, i32 13, i32 13, i32 13>
  %60 = add <4 x i32> %59, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %61 = shl <4 x i32> %56, <i32 16, i32 16, i32 16, i32 16>
  %62 = and <4 x i32> %61, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %63 = select <4 x i1> %58, <4 x i32> %60, <4 x i32> zeroinitializer
  %64 = or <4 x i32> %63, %62
  %65 = bitcast <4 x i32> %64 to <4 x float>
  %66 = getelementptr inbounds i32, i32* %18, i64 1
  %67 = load i32, i32* %66, align 4
  %68 = zext i32 %67 to i64
  %69 = insertelement <2 x i64> undef, i64 %68, i32 0
  %70 = bitcast <2 x i64> %69 to <8 x i16>
  %71 = shufflevector <8 x i16> %70, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %72 = bitcast <8 x i16> %71 to <4 x i32>
  %73 = and <4 x i32> %72, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %74 = icmp sgt <4 x i32> %73, <i32 1023, i32 1023, i32 1023, i32 1023>
  %75 = shl <4 x i32> %73, <i32 13, i32 13, i32 13, i32 13>
  %76 = add <4 x i32> %75, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %77 = shl <4 x i32> %72, <i32 16, i32 16, i32 16, i32 16>
  %78 = and <4 x i32> %77, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %79 = select <4 x i1> %74, <4 x i32> %76, <4 x i32> zeroinitializer
  %80 = or <4 x i32> %79, %78
  %81 = bitcast <4 x i32> %80 to <4 x float>
  %82 = load i32, i32* %17, align 4
  %83 = zext i32 %82 to i64
  %84 = insertelement <2 x i64> undef, i64 %83, i32 0
  %85 = bitcast <2 x i64> %84 to <8 x i16>
  %86 = shufflevector <8 x i16> %85, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %87 = bitcast <8 x i16> %86 to <4 x i32>
  %88 = and <4 x i32> %87, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %89 = icmp sgt <4 x i32> %88, <i32 1023, i32 1023, i32 1023, i32 1023>
  %90 = shl <4 x i32> %88, <i32 13, i32 13, i32 13, i32 13>
  %91 = add <4 x i32> %90, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %92 = shl <4 x i32> %87, <i32 16, i32 16, i32 16, i32 16>
  %93 = and <4 x i32> %92, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %94 = select <4 x i1> %89, <4 x i32> %91, <4 x i32> zeroinitializer
  %95 = or <4 x i32> %94, %93
  %96 = bitcast <4 x i32> %95 to <4 x float>
  %97 = getelementptr inbounds i32, i32* %17, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i64
  %100 = insertelement <2 x i64> undef, i64 %99, i32 0
  %101 = bitcast <2 x i64> %100 to <8 x i16>
  %102 = shufflevector <8 x i16> %101, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %103 = bitcast <8 x i16> %102 to <4 x i32>
  %104 = and <4 x i32> %103, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %105 = icmp sgt <4 x i32> %104, <i32 1023, i32 1023, i32 1023, i32 1023>
  %106 = shl <4 x i32> %104, <i32 13, i32 13, i32 13, i32 13>
  %107 = add <4 x i32> %106, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %108 = shl <4 x i32> %103, <i32 16, i32 16, i32 16, i32 16>
  %109 = and <4 x i32> %108, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %110 = select <4 x i1> %105, <4 x i32> %107, <4 x i32> zeroinitializer
  %111 = or <4 x i32> %110, %109
  %112 = bitcast <4 x i32> %111 to <4 x float>
  %113 = fadd <4 x float> %34, %65
  %114 = fadd <4 x float> %113, %65
  %115 = fadd <4 x float> %114, %96
  %116 = fadd <4 x float> %50, %81
  %117 = fadd <4 x float> %116, %81
  %118 = fadd <4 x float> %117, %112
  %119 = fadd <4 x float> %115, %118
  %120 = fmul <4 x float> %119, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %121 = bitcast <4 x float> %120 to <4 x i32>
  %122 = and <4 x i32> %121, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %123 = icmp ugt <4 x i32> %122, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %124 = add <4 x i32> %121, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %125 = lshr <4 x i32> %124, <i32 13, i32 13, i32 13, i32 13>
  %126 = shl <4 x i32> %125, <i32 16, i32 16, i32 16, i32 16>
  %127 = select <4 x i1> %123, <4 x i32> %126, <4 x i32> zeroinitializer
  %128 = and <4 x i32> %121, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %129 = or <4 x i32> %127, %128
  %130 = ashr exact <4 x i32> %129, <i32 16, i32 16, i32 16, i32 16>
  %131 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %130, <4 x i32> undef) #17
  %132 = bitcast <8 x i16> %131 to <2 x i64>
  %133 = extractelement <2 x i64> %132, i32 0
  %134 = trunc i64 %133 to i32
  %135 = getelementptr inbounds i32, i32* %6, i64 %16
  store i32 %134, i32* %135, align 4
  %136 = getelementptr inbounds i32, i32* %19, i64 2
  %137 = getelementptr inbounds i32, i32* %18, i64 2
  %138 = getelementptr inbounds i32, i32* %17, i64 2
  %139 = add nuw nsw i64 %16, 1
  %140 = icmp eq i64 %139, %13
  br i1 %140, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = bitcast i8* %0 to i32*
  %7 = load i32, i32* %5, align 4
  %8 = zext i32 %7 to i64
  %9 = insertelement <2 x i64> undef, i64 %8, i32 0
  %10 = bitcast <2 x i64> %9 to <8 x i16>
  %11 = shufflevector <8 x i16> %10, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %12 = bitcast <8 x i16> %11 to <4 x i32>
  %13 = and <4 x i32> %12, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %14 = icmp sgt i32 %3, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %4
  %16 = icmp sgt <4 x i32> %13, <i32 1023, i32 1023, i32 1023, i32 1023>
  %17 = shl <4 x i32> %13, <i32 13, i32 13, i32 13, i32 13>
  %18 = add <4 x i32> %17, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %19 = select <4 x i1> %16, <4 x i32> %18, <4 x i32> zeroinitializer
  %20 = shl <4 x i32> %12, <i32 16, i32 16, i32 16, i32 16>
  %21 = and <4 x i32> %20, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %22 = or <4 x i32> %19, %21
  %23 = bitcast <4 x i32> %22 to <4 x float>
  %24 = zext i32 %3 to i64
  br label %26

25:                                               ; preds = %26, %4
  ret void

26:                                               ; preds = %26, %15
  %27 = phi i64 [ 0, %15 ], [ %81, %26 ]
  %28 = phi i32* [ %5, %15 ], [ %46, %26 ]
  %29 = phi <4 x float> [ %23, %15 ], [ %61, %26 ]
  %30 = getelementptr inbounds i32, i32* %28, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = zext i32 %31 to i64
  %33 = insertelement <2 x i64> undef, i64 %32, i32 0
  %34 = bitcast <2 x i64> %33 to <8 x i16>
  %35 = shufflevector <8 x i16> %34, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %36 = bitcast <8 x i16> %35 to <4 x i32>
  %37 = and <4 x i32> %36, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %38 = icmp sgt <4 x i32> %37, <i32 1023, i32 1023, i32 1023, i32 1023>
  %39 = shl <4 x i32> %37, <i32 13, i32 13, i32 13, i32 13>
  %40 = add <4 x i32> %39, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %41 = shl <4 x i32> %36, <i32 16, i32 16, i32 16, i32 16>
  %42 = and <4 x i32> %41, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %43 = select <4 x i1> %38, <4 x i32> %40, <4 x i32> zeroinitializer
  %44 = or <4 x i32> %43, %42
  %45 = bitcast <4 x i32> %44 to <4 x float>
  %46 = getelementptr inbounds i32, i32* %28, i64 2
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i64
  %49 = insertelement <2 x i64> undef, i64 %48, i32 0
  %50 = bitcast <2 x i64> %49 to <8 x i16>
  %51 = shufflevector <8 x i16> %50, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %52 = bitcast <8 x i16> %51 to <4 x i32>
  %53 = and <4 x i32> %52, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %54 = icmp sgt <4 x i32> %53, <i32 1023, i32 1023, i32 1023, i32 1023>
  %55 = shl <4 x i32> %53, <i32 13, i32 13, i32 13, i32 13>
  %56 = add <4 x i32> %55, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %57 = shl <4 x i32> %52, <i32 16, i32 16, i32 16, i32 16>
  %58 = and <4 x i32> %57, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %59 = select <4 x i1> %54, <4 x i32> %56, <4 x i32> zeroinitializer
  %60 = or <4 x i32> %59, %58
  %61 = bitcast <4 x i32> %60 to <4 x float>
  %62 = fadd <4 x float> %29, %45
  %63 = fadd <4 x float> %62, %45
  %64 = fadd <4 x float> %63, %61
  %65 = fmul <4 x float> %64, <float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 2.500000e-01>
  %66 = bitcast <4 x float> %65 to <4 x i32>
  %67 = and <4 x i32> %66, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %68 = icmp ugt <4 x i32> %67, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %69 = add <4 x i32> %66, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %70 = lshr <4 x i32> %69, <i32 13, i32 13, i32 13, i32 13>
  %71 = shl <4 x i32> %70, <i32 16, i32 16, i32 16, i32 16>
  %72 = select <4 x i1> %68, <4 x i32> %71, <4 x i32> zeroinitializer
  %73 = and <4 x i32> %66, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %74 = or <4 x i32> %72, %73
  %75 = ashr exact <4 x i32> %74, <i32 16, i32 16, i32 16, i32 16>
  %76 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> undef) #17
  %77 = bitcast <8 x i16> %76 to <2 x i64>
  %78 = extractelement <2 x i64> %77, i32 0
  %79 = trunc i64 %78 to i32
  %80 = getelementptr inbounds i32, i32* %6, i64 %27
  store i32 %79, i32* %80, align 4
  %81 = add nuw nsw i64 %27, 1
  %82 = icmp eq i64 %81, %24
  br i1 %82, label %25, label %26
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = bitcast i8* %0 to i32*
  %9 = load i32, i32* %5, align 4
  %10 = zext i32 %9 to i64
  %11 = insertelement <2 x i64> undef, i64 %10, i32 0
  %12 = bitcast <2 x i64> %11 to <8 x i16>
  %13 = shufflevector <8 x i16> %12, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %14 = bitcast <8 x i16> %13 to <4 x i32>
  %15 = and <4 x i32> %14, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %16 = load i32, i32* %7, align 4
  %17 = zext i32 %16 to i64
  %18 = insertelement <2 x i64> undef, i64 %17, i32 0
  %19 = bitcast <2 x i64> %18 to <8 x i16>
  %20 = shufflevector <8 x i16> %19, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %21 = bitcast <8 x i16> %20 to <4 x i32>
  %22 = and <4 x i32> %21, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %23 = icmp sgt i32 %3, 0
  br i1 %23, label %24, label %43

24:                                               ; preds = %4
  %25 = icmp sgt <4 x i32> %15, <i32 1023, i32 1023, i32 1023, i32 1023>
  %26 = shl <4 x i32> %15, <i32 13, i32 13, i32 13, i32 13>
  %27 = add <4 x i32> %26, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %28 = select <4 x i1> %25, <4 x i32> %27, <4 x i32> zeroinitializer
  %29 = shl <4 x i32> %14, <i32 16, i32 16, i32 16, i32 16>
  %30 = and <4 x i32> %29, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %31 = or <4 x i32> %28, %30
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = icmp sgt <4 x i32> %22, <i32 1023, i32 1023, i32 1023, i32 1023>
  %34 = shl <4 x i32> %22, <i32 13, i32 13, i32 13, i32 13>
  %35 = add <4 x i32> %34, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %36 = select <4 x i1> %33, <4 x i32> %35, <4 x i32> zeroinitializer
  %37 = shl <4 x i32> %21, <i32 16, i32 16, i32 16, i32 16>
  %38 = and <4 x i32> %37, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %39 = or <4 x i32> %36, %38
  %40 = bitcast <4 x i32> %39 to <4 x float>
  %41 = fadd <4 x float> %32, %40
  %42 = zext i32 %3 to i64
  br label %44

43:                                               ; preds = %44, %4
  ret void

44:                                               ; preds = %44, %24
  %45 = phi i64 [ 0, %24 ], [ %135, %44 ]
  %46 = phi i32* [ %5, %24 ], [ %84, %44 ]
  %47 = phi i32* [ %7, %24 ], [ %100, %44 ]
  %48 = phi <4 x float> [ %41, %24 ], [ %116, %44 ]
  %49 = getelementptr inbounds i32, i32* %46, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = zext i32 %50 to i64
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = bitcast <2 x i64> %52 to <8 x i16>
  %54 = shufflevector <8 x i16> %53, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %55 = bitcast <8 x i16> %54 to <4 x i32>
  %56 = and <4 x i32> %55, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %57 = icmp sgt <4 x i32> %56, <i32 1023, i32 1023, i32 1023, i32 1023>
  %58 = shl <4 x i32> %56, <i32 13, i32 13, i32 13, i32 13>
  %59 = add <4 x i32> %58, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %60 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %61 = and <4 x i32> %60, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %62 = select <4 x i1> %57, <4 x i32> %59, <4 x i32> zeroinitializer
  %63 = or <4 x i32> %62, %61
  %64 = bitcast <4 x i32> %63 to <4 x float>
  %65 = getelementptr inbounds i32, i32* %47, i64 1
  %66 = load i32, i32* %65, align 4
  %67 = zext i32 %66 to i64
  %68 = insertelement <2 x i64> undef, i64 %67, i32 0
  %69 = bitcast <2 x i64> %68 to <8 x i16>
  %70 = shufflevector <8 x i16> %69, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %71 = bitcast <8 x i16> %70 to <4 x i32>
  %72 = and <4 x i32> %71, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %73 = icmp sgt <4 x i32> %72, <i32 1023, i32 1023, i32 1023, i32 1023>
  %74 = shl <4 x i32> %72, <i32 13, i32 13, i32 13, i32 13>
  %75 = add <4 x i32> %74, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %76 = shl <4 x i32> %71, <i32 16, i32 16, i32 16, i32 16>
  %77 = and <4 x i32> %76, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %78 = select <4 x i1> %73, <4 x i32> %75, <4 x i32> zeroinitializer
  %79 = or <4 x i32> %78, %77
  %80 = bitcast <4 x i32> %79 to <4 x float>
  %81 = fadd <4 x float> %64, %64
  %82 = fadd <4 x float> %81, %80
  %83 = fadd <4 x float> %82, %80
  %84 = getelementptr inbounds i32, i32* %46, i64 2
  %85 = load i32, i32* %84, align 4
  %86 = zext i32 %85 to i64
  %87 = insertelement <2 x i64> undef, i64 %86, i32 0
  %88 = bitcast <2 x i64> %87 to <8 x i16>
  %89 = shufflevector <8 x i16> %88, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %90 = bitcast <8 x i16> %89 to <4 x i32>
  %91 = and <4 x i32> %90, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %92 = icmp sgt <4 x i32> %91, <i32 1023, i32 1023, i32 1023, i32 1023>
  %93 = shl <4 x i32> %91, <i32 13, i32 13, i32 13, i32 13>
  %94 = add <4 x i32> %93, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %95 = shl <4 x i32> %90, <i32 16, i32 16, i32 16, i32 16>
  %96 = and <4 x i32> %95, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %97 = select <4 x i1> %92, <4 x i32> %94, <4 x i32> zeroinitializer
  %98 = or <4 x i32> %97, %96
  %99 = bitcast <4 x i32> %98 to <4 x float>
  %100 = getelementptr inbounds i32, i32* %47, i64 2
  %101 = load i32, i32* %100, align 4
  %102 = zext i32 %101 to i64
  %103 = insertelement <2 x i64> undef, i64 %102, i32 0
  %104 = bitcast <2 x i64> %103 to <8 x i16>
  %105 = shufflevector <8 x i16> %104, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %106 = bitcast <8 x i16> %105 to <4 x i32>
  %107 = and <4 x i32> %106, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %108 = icmp sgt <4 x i32> %107, <i32 1023, i32 1023, i32 1023, i32 1023>
  %109 = shl <4 x i32> %107, <i32 13, i32 13, i32 13, i32 13>
  %110 = add <4 x i32> %109, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %111 = shl <4 x i32> %106, <i32 16, i32 16, i32 16, i32 16>
  %112 = and <4 x i32> %111, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %113 = select <4 x i1> %108, <4 x i32> %110, <4 x i32> zeroinitializer
  %114 = or <4 x i32> %113, %112
  %115 = bitcast <4 x i32> %114 to <4 x float>
  %116 = fadd <4 x float> %99, %115
  %117 = fadd <4 x float> %48, %83
  %118 = fadd <4 x float> %117, %116
  %119 = fmul <4 x float> %118, <float 1.250000e-01, float 1.250000e-01, float 1.250000e-01, float 1.250000e-01>
  %120 = bitcast <4 x float> %119 to <4 x i32>
  %121 = and <4 x i32> %120, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %122 = icmp ugt <4 x i32> %121, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %123 = add <4 x i32> %120, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %124 = lshr <4 x i32> %123, <i32 13, i32 13, i32 13, i32 13>
  %125 = shl <4 x i32> %124, <i32 16, i32 16, i32 16, i32 16>
  %126 = select <4 x i1> %122, <4 x i32> %125, <4 x i32> zeroinitializer
  %127 = and <4 x i32> %120, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %128 = or <4 x i32> %126, %127
  %129 = ashr exact <4 x i32> %128, <i32 16, i32 16, i32 16, i32 16>
  %130 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %129, <4 x i32> undef) #17
  %131 = bitcast <8 x i16> %130 to <2 x i64>
  %132 = extractelement <2 x i64> %131, i32 0
  %133 = trunc i64 %132 to i32
  %134 = getelementptr inbounds i32, i32* %8, i64 %45
  store i32 %133, i32* %134, align 4
  %135 = add nuw nsw i64 %45, 1
  %136 = icmp eq i64 %135, %42
  br i1 %136, label %43, label %44
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I22ColorTypeFilter_F16F16EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %1 to i32*
  %6 = getelementptr inbounds i8, i8* %1, i64 %2
  %7 = bitcast i8* %6 to i32*
  %8 = getelementptr inbounds i8, i8* %6, i64 %2
  %9 = bitcast i8* %8 to i32*
  %10 = bitcast i8* %0 to i32*
  %11 = load i32, i32* %5, align 4
  %12 = zext i32 %11 to i64
  %13 = insertelement <2 x i64> undef, i64 %12, i32 0
  %14 = bitcast <2 x i64> %13 to <8 x i16>
  %15 = shufflevector <8 x i16> %14, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %16 = bitcast <8 x i16> %15 to <4 x i32>
  %17 = and <4 x i32> %16, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %18 = load i32, i32* %7, align 4
  %19 = zext i32 %18 to i64
  %20 = insertelement <2 x i64> undef, i64 %19, i32 0
  %21 = bitcast <2 x i64> %20 to <8 x i16>
  %22 = shufflevector <8 x i16> %21, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %23 = bitcast <8 x i16> %22 to <4 x i32>
  %24 = and <4 x i32> %23, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %25 = icmp sgt <4 x i32> %24, <i32 1023, i32 1023, i32 1023, i32 1023>
  %26 = shl <4 x i32> %24, <i32 13, i32 13, i32 13, i32 13>
  %27 = add <4 x i32> %26, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %28 = shl <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %29 = and <4 x i32> %28, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %30 = select <4 x i1> %25, <4 x i32> %27, <4 x i32> zeroinitializer
  %31 = or <4 x i32> %30, %29
  %32 = bitcast <4 x i32> %31 to <4 x float>
  %33 = load i32, i32* %9, align 4
  %34 = zext i32 %33 to i64
  %35 = insertelement <2 x i64> undef, i64 %34, i32 0
  %36 = bitcast <2 x i64> %35 to <8 x i16>
  %37 = shufflevector <8 x i16> %36, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %38 = bitcast <8 x i16> %37 to <4 x i32>
  %39 = and <4 x i32> %38, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %40 = icmp sgt i32 %3, 0
  br i1 %40, label %41, label %62

41:                                               ; preds = %4
  %42 = icmp sgt <4 x i32> %17, <i32 1023, i32 1023, i32 1023, i32 1023>
  %43 = shl <4 x i32> %17, <i32 13, i32 13, i32 13, i32 13>
  %44 = add <4 x i32> %43, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %45 = select <4 x i1> %42, <4 x i32> %44, <4 x i32> zeroinitializer
  %46 = shl <4 x i32> %16, <i32 16, i32 16, i32 16, i32 16>
  %47 = and <4 x i32> %46, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %48 = or <4 x i32> %45, %47
  %49 = bitcast <4 x i32> %48 to <4 x float>
  %50 = fadd <4 x float> %49, %32
  %51 = fadd <4 x float> %50, %32
  %52 = icmp sgt <4 x i32> %39, <i32 1023, i32 1023, i32 1023, i32 1023>
  %53 = shl <4 x i32> %39, <i32 13, i32 13, i32 13, i32 13>
  %54 = add <4 x i32> %53, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %55 = select <4 x i1> %52, <4 x i32> %54, <4 x i32> zeroinitializer
  %56 = shl <4 x i32> %38, <i32 16, i32 16, i32 16, i32 16>
  %57 = and <4 x i32> %56, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %58 = or <4 x i32> %55, %57
  %59 = bitcast <4 x i32> %58 to <4 x float>
  %60 = fadd <4 x float> %51, %59
  %61 = zext i32 %3 to i64
  br label %63

62:                                               ; preds = %63, %4
  ret void

63:                                               ; preds = %63, %41
  %64 = phi i64 [ 0, %41 ], [ %190, %63 ]
  %65 = phi i32* [ %5, %41 ], [ %121, %63 ]
  %66 = phi i32* [ %7, %41 ], [ %137, %63 ]
  %67 = phi i32* [ %9, %41 ], [ %153, %63 ]
  %68 = phi <4 x float> [ %60, %41 ], [ %171, %63 ]
  %69 = getelementptr inbounds i32, i32* %65, i64 1
  %70 = load i32, i32* %69, align 4
  %71 = zext i32 %70 to i64
  %72 = insertelement <2 x i64> undef, i64 %71, i32 0
  %73 = bitcast <2 x i64> %72 to <8 x i16>
  %74 = shufflevector <8 x i16> %73, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %75 = bitcast <8 x i16> %74 to <4 x i32>
  %76 = and <4 x i32> %75, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %77 = icmp sgt <4 x i32> %76, <i32 1023, i32 1023, i32 1023, i32 1023>
  %78 = shl <4 x i32> %76, <i32 13, i32 13, i32 13, i32 13>
  %79 = add <4 x i32> %78, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %80 = shl <4 x i32> %75, <i32 16, i32 16, i32 16, i32 16>
  %81 = and <4 x i32> %80, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %82 = select <4 x i1> %77, <4 x i32> %79, <4 x i32> zeroinitializer
  %83 = or <4 x i32> %82, %81
  %84 = bitcast <4 x i32> %83 to <4 x float>
  %85 = getelementptr inbounds i32, i32* %66, i64 1
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i64
  %88 = insertelement <2 x i64> undef, i64 %87, i32 0
  %89 = bitcast <2 x i64> %88 to <8 x i16>
  %90 = shufflevector <8 x i16> %89, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %91 = bitcast <8 x i16> %90 to <4 x i32>
  %92 = and <4 x i32> %91, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %93 = icmp sgt <4 x i32> %92, <i32 1023, i32 1023, i32 1023, i32 1023>
  %94 = shl <4 x i32> %92, <i32 13, i32 13, i32 13, i32 13>
  %95 = add <4 x i32> %94, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %96 = shl <4 x i32> %91, <i32 16, i32 16, i32 16, i32 16>
  %97 = and <4 x i32> %96, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %98 = select <4 x i1> %93, <4 x i32> %95, <4 x i32> zeroinitializer
  %99 = or <4 x i32> %98, %97
  %100 = bitcast <4 x i32> %99 to <4 x float>
  %101 = getelementptr inbounds i32, i32* %67, i64 1
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  %104 = insertelement <2 x i64> undef, i64 %103, i32 0
  %105 = bitcast <2 x i64> %104 to <8 x i16>
  %106 = shufflevector <8 x i16> %105, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %107 = bitcast <8 x i16> %106 to <4 x i32>
  %108 = and <4 x i32> %107, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %109 = icmp sgt <4 x i32> %108, <i32 1023, i32 1023, i32 1023, i32 1023>
  %110 = shl <4 x i32> %108, <i32 13, i32 13, i32 13, i32 13>
  %111 = add <4 x i32> %110, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %112 = shl <4 x i32> %107, <i32 16, i32 16, i32 16, i32 16>
  %113 = and <4 x i32> %112, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %114 = select <4 x i1> %109, <4 x i32> %111, <4 x i32> zeroinitializer
  %115 = or <4 x i32> %114, %113
  %116 = bitcast <4 x i32> %115 to <4 x float>
  %117 = fadd <4 x float> %84, %100
  %118 = fadd <4 x float> %117, %100
  %119 = fadd <4 x float> %118, %116
  %120 = fmul <4 x float> %119, <float 2.000000e+00, float 2.000000e+00, float 2.000000e+00, float 2.000000e+00>
  %121 = getelementptr inbounds i32, i32* %65, i64 2
  %122 = load i32, i32* %121, align 4
  %123 = zext i32 %122 to i64
  %124 = insertelement <2 x i64> undef, i64 %123, i32 0
  %125 = bitcast <2 x i64> %124 to <8 x i16>
  %126 = shufflevector <8 x i16> %125, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %127 = bitcast <8 x i16> %126 to <4 x i32>
  %128 = and <4 x i32> %127, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %129 = icmp sgt <4 x i32> %128, <i32 1023, i32 1023, i32 1023, i32 1023>
  %130 = shl <4 x i32> %128, <i32 13, i32 13, i32 13, i32 13>
  %131 = add <4 x i32> %130, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %132 = shl <4 x i32> %127, <i32 16, i32 16, i32 16, i32 16>
  %133 = and <4 x i32> %132, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %134 = select <4 x i1> %129, <4 x i32> %131, <4 x i32> zeroinitializer
  %135 = or <4 x i32> %134, %133
  %136 = bitcast <4 x i32> %135 to <4 x float>
  %137 = getelementptr inbounds i32, i32* %66, i64 2
  %138 = load i32, i32* %137, align 4
  %139 = zext i32 %138 to i64
  %140 = insertelement <2 x i64> undef, i64 %139, i32 0
  %141 = bitcast <2 x i64> %140 to <8 x i16>
  %142 = shufflevector <8 x i16> %141, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %143 = bitcast <8 x i16> %142 to <4 x i32>
  %144 = and <4 x i32> %143, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %145 = icmp sgt <4 x i32> %144, <i32 1023, i32 1023, i32 1023, i32 1023>
  %146 = shl <4 x i32> %144, <i32 13, i32 13, i32 13, i32 13>
  %147 = add <4 x i32> %146, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %148 = shl <4 x i32> %143, <i32 16, i32 16, i32 16, i32 16>
  %149 = and <4 x i32> %148, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %150 = select <4 x i1> %145, <4 x i32> %147, <4 x i32> zeroinitializer
  %151 = or <4 x i32> %150, %149
  %152 = bitcast <4 x i32> %151 to <4 x float>
  %153 = getelementptr inbounds i32, i32* %67, i64 2
  %154 = load i32, i32* %153, align 4
  %155 = zext i32 %154 to i64
  %156 = insertelement <2 x i64> undef, i64 %155, i32 0
  %157 = bitcast <2 x i64> %156 to <8 x i16>
  %158 = shufflevector <8 x i16> %157, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %159 = bitcast <8 x i16> %158 to <4 x i32>
  %160 = and <4 x i32> %159, <i32 -32769, i32 -32769, i32 -32769, i32 -32769>
  %161 = icmp sgt <4 x i32> %160, <i32 1023, i32 1023, i32 1023, i32 1023>
  %162 = shl <4 x i32> %160, <i32 13, i32 13, i32 13, i32 13>
  %163 = add <4 x i32> %162, <i32 939524096, i32 939524096, i32 939524096, i32 939524096>
  %164 = shl <4 x i32> %159, <i32 16, i32 16, i32 16, i32 16>
  %165 = and <4 x i32> %164, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %166 = select <4 x i1> %161, <4 x i32> %163, <4 x i32> zeroinitializer
  %167 = or <4 x i32> %166, %165
  %168 = bitcast <4 x i32> %167 to <4 x float>
  %169 = fadd <4 x float> %136, %152
  %170 = fadd <4 x float> %169, %152
  %171 = fadd <4 x float> %170, %168
  %172 = fadd <4 x float> %68, %120
  %173 = fadd <4 x float> %172, %171
  %174 = fmul <4 x float> %173, <float 6.250000e-02, float 6.250000e-02, float 6.250000e-02, float 6.250000e-02>
  %175 = bitcast <4 x float> %174 to <4 x i32>
  %176 = and <4 x i32> %175, <i32 2147475456, i32 2147475456, i32 2147475456, i32 2147475456>
  %177 = icmp ugt <4 x i32> %176, <i32 947904511, i32 947904511, i32 947904511, i32 947904511>
  %178 = add <4 x i32> %175, <i32 134217728, i32 134217728, i32 134217728, i32 134217728>
  %179 = lshr <4 x i32> %178, <i32 13, i32 13, i32 13, i32 13>
  %180 = shl <4 x i32> %179, <i32 16, i32 16, i32 16, i32 16>
  %181 = select <4 x i1> %177, <4 x i32> %180, <4 x i32> zeroinitializer
  %182 = and <4 x i32> %175, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %183 = or <4 x i32> %181, %182
  %184 = ashr exact <4 x i32> %183, <i32 16, i32 16, i32 16, i32 16>
  %185 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %184, <4 x i32> undef) #17
  %186 = bitcast <8 x i16> %185 to <2 x i64>
  %187 = extractelement <2 x i64> %186, i32 0
  %188 = trunc i64 %187 to i32
  %189 = getelementptr inbounds i32, i32* %10, i64 %64
  store i32 %188, i32* %189, align 4
  %190 = add nuw nsw i64 %64, 1
  %191 = icmp eq i64 %190, %61
  br i1 %191, label %62, label %63
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_2I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %1 to i64*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %75, %13 ]
  %15 = phi i64* [ %9, %7 ], [ %74, %13 ]
  %16 = phi i64* [ %10, %7 ], [ %73, %13 ]
  %17 = bitcast i64* %16 to <4 x i16>*
  %18 = load <4 x i16>, <4 x i16>* %17, align 8
  %19 = zext <4 x i16> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = extractelement <2 x i64> %20, i32 0
  %22 = extractelement <2 x i64> %20, i32 1
  %23 = bitcast i64 %21 to <2 x i32>
  %24 = shufflevector <2 x i32> %23, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = bitcast i64 %22 to <2 x i32>
  %26 = shufflevector <2 x i32> %25, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x i32> %24, <4 x i32> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = bitcast i64* %15 to <4 x i16>*
  %29 = load <4 x i16>, <4 x i16>* %28, align 8
  %30 = zext <4 x i16> %29 to <4 x i32>
  %31 = bitcast <4 x i32> %30 to <2 x i64>
  %32 = extractelement <2 x i64> %31, i32 0
  %33 = extractelement <2 x i64> %31, i32 1
  %34 = bitcast i64 %32 to <2 x i32>
  %35 = shufflevector <2 x i32> %34, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = bitcast i64 %33 to <2 x i32>
  %37 = shufflevector <2 x i32> %36, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %38 = shufflevector <4 x i32> %35, <4 x i32> %37, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %39 = add <4 x i32> %38, %27
  %40 = bitcast <4 x i32> %39 to <2 x i64>
  %41 = extractelement <2 x i64> %40, i32 0
  %42 = extractelement <2 x i64> %40, i32 1
  %43 = bitcast i64 %41 to <2 x i32>
  %44 = shufflevector <2 x i32> %43, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %45 = bitcast i64 %42 to <2 x i32>
  %46 = shufflevector <2 x i32> %45, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %47 = shufflevector <4 x i32> %44, <4 x i32> %46, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %48 = lshr <4 x i32> %47, <i32 1, i32 1, i32 1, i32 1>
  %49 = bitcast <4 x i32> %48 to <2 x i64>
  %50 = extractelement <2 x i64> %49, i32 0
  %51 = extractelement <2 x i64> %49, i32 1
  %52 = bitcast i64 %50 to <2 x i32>
  %53 = shufflevector <2 x i32> %52, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %54 = bitcast i64 %51 to <2 x i32>
  %55 = shufflevector <2 x i32> %54, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %56 = shufflevector <4 x i32> %53, <4 x i32> %55, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %57 = trunc <4 x i32> %56 to <4 x i16>
  %58 = extractelement <4 x i16> %57, i32 0
  %59 = extractelement <4 x i16> %57, i32 1
  %60 = extractelement <4 x i16> %57, i32 2
  %61 = extractelement <4 x i16> %57, i32 3
  %62 = zext i16 %61 to i64
  %63 = shl nuw i64 %62, 48
  %64 = zext i16 %60 to i64
  %65 = shl nuw nsw i64 %64, 32
  %66 = zext i16 %59 to i64
  %67 = shl nuw nsw i64 %66, 16
  %68 = zext i16 %58 to i64
  %69 = or i64 %67, %68
  %70 = or i64 %69, %65
  %71 = or i64 %70, %63
  %72 = getelementptr inbounds i64, i64* %5, i64 %14
  store i64 %71, i64* %72, align 8
  %73 = getelementptr inbounds i64, i64* %16, i64 2
  %74 = getelementptr inbounds i64, i64* %15, i64 2
  %75 = add nuw nsw i64 %14, 1
  %76 = icmp eq i64 %75, %11
  br i1 %76, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_1_3I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i64*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %5 to i64*
  %12 = bitcast i8* %1 to i64*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %108, %15 ]
  %17 = phi i64* [ %10, %8 ], [ %107, %15 ]
  %18 = phi i64* [ %11, %8 ], [ %106, %15 ]
  %19 = phi i64* [ %12, %8 ], [ %105, %15 ]
  %20 = bitcast i64* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 8
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = extractelement <2 x i64> %23, i32 0
  %25 = extractelement <2 x i64> %23, i32 1
  %26 = bitcast i64 %24 to <2 x i32>
  %27 = shufflevector <2 x i32> %26, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = bitcast i64 %25 to <2 x i32>
  %29 = shufflevector <2 x i32> %28, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %30 = shufflevector <4 x i32> %27, <4 x i32> %29, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %31 = bitcast i64* %18 to <4 x i16>*
  %32 = load <4 x i16>, <4 x i16>* %31, align 8
  %33 = zext <4 x i16> %32 to <4 x i32>
  %34 = bitcast <4 x i32> %33 to <2 x i64>
  %35 = extractelement <2 x i64> %34, i32 0
  %36 = extractelement <2 x i64> %34, i32 1
  %37 = bitcast i64 %35 to <2 x i32>
  %38 = shufflevector <2 x i32> %37, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %39 = bitcast i64 %36 to <2 x i32>
  %40 = shufflevector <2 x i32> %39, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %41 = shufflevector <4 x i32> %38, <4 x i32> %40, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %42 = bitcast i64* %17 to <4 x i16>*
  %43 = load <4 x i16>, <4 x i16>* %42, align 8
  %44 = zext <4 x i16> %43 to <4 x i32>
  %45 = bitcast <4 x i32> %44 to <2 x i64>
  %46 = extractelement <2 x i64> %45, i32 0
  %47 = extractelement <2 x i64> %45, i32 1
  %48 = bitcast i64 %46 to <2 x i32>
  %49 = shufflevector <2 x i32> %48, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %50 = bitcast i64 %47 to <2 x i32>
  %51 = shufflevector <2 x i32> %50, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %52 = shufflevector <4 x i32> %49, <4 x i32> %51, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %53 = add <4 x i32> %41, %30
  %54 = bitcast <4 x i32> %53 to <2 x i64>
  %55 = extractelement <2 x i64> %54, i32 0
  %56 = extractelement <2 x i64> %54, i32 1
  %57 = bitcast i64 %55 to <2 x i32>
  %58 = shufflevector <2 x i32> %57, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %59 = bitcast i64 %56 to <2 x i32>
  %60 = shufflevector <2 x i32> %59, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %61 = shufflevector <4 x i32> %58, <4 x i32> %60, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %62 = add <4 x i32> %61, %41
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = extractelement <2 x i64> %63, i32 0
  %65 = extractelement <2 x i64> %63, i32 1
  %66 = bitcast i64 %64 to <2 x i32>
  %67 = shufflevector <2 x i32> %66, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %68 = bitcast i64 %65 to <2 x i32>
  %69 = shufflevector <2 x i32> %68, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %70 = shufflevector <4 x i32> %67, <4 x i32> %69, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %71 = add <4 x i32> %70, %52
  %72 = bitcast <4 x i32> %71 to <2 x i64>
  %73 = extractelement <2 x i64> %72, i32 0
  %74 = extractelement <2 x i64> %72, i32 1
  %75 = bitcast i64 %73 to <2 x i32>
  %76 = shufflevector <2 x i32> %75, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %77 = bitcast i64 %74 to <2 x i32>
  %78 = shufflevector <2 x i32> %77, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %79 = shufflevector <4 x i32> %76, <4 x i32> %78, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %80 = lshr <4 x i32> %79, <i32 2, i32 2, i32 2, i32 2>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = extractelement <2 x i64> %81, i32 0
  %83 = extractelement <2 x i64> %81, i32 1
  %84 = bitcast i64 %82 to <2 x i32>
  %85 = shufflevector <2 x i32> %84, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = bitcast i64 %83 to <2 x i32>
  %87 = shufflevector <2 x i32> %86, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %88 = shufflevector <4 x i32> %85, <4 x i32> %87, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %89 = trunc <4 x i32> %88 to <4 x i16>
  %90 = extractelement <4 x i16> %89, i32 0
  %91 = extractelement <4 x i16> %89, i32 1
  %92 = extractelement <4 x i16> %89, i32 2
  %93 = extractelement <4 x i16> %89, i32 3
  %94 = zext i16 %93 to i64
  %95 = shl nuw i64 %94, 48
  %96 = zext i16 %92 to i64
  %97 = shl nuw nsw i64 %96, 32
  %98 = zext i16 %91 to i64
  %99 = shl nuw nsw i64 %98, 16
  %100 = zext i16 %90 to i64
  %101 = or i64 %99, %100
  %102 = or i64 %101, %97
  %103 = or i64 %102, %95
  %104 = getelementptr inbounds i64, i64* %6, i64 %16
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i64, i64* %19, i64 2
  %106 = getelementptr inbounds i64, i64* %18, i64 2
  %107 = getelementptr inbounds i64, i64* %17, i64 2
  %108 = add nuw nsw i64 %16, 1
  %109 = icmp eq i64 %108, %13
  br i1 %109, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_1I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %4
  %8 = bitcast i8* %1 to i64*
  %9 = zext i32 %3 to i64
  br label %11

10:                                               ; preds = %11, %4
  ret void

11:                                               ; preds = %11, %7
  %12 = phi i64 [ 0, %7 ], [ %72, %11 ]
  %13 = phi i64* [ %8, %7 ], [ %71, %11 ]
  %14 = bitcast i64* %13 to <4 x i16>*
  %15 = load <4 x i16>, <4 x i16>* %14, align 8
  %16 = zext <4 x i16> %15 to <4 x i32>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = extractelement <2 x i64> %17, i32 0
  %19 = extractelement <2 x i64> %17, i32 1
  %20 = bitcast i64 %18 to <2 x i32>
  %21 = shufflevector <2 x i32> %20, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %22 = bitcast i64 %19 to <2 x i32>
  %23 = shufflevector <2 x i32> %22, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %24 = shufflevector <4 x i32> %21, <4 x i32> %23, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %25 = getelementptr inbounds i64, i64* %13, i64 1
  %26 = bitcast i64* %25 to <4 x i16>*
  %27 = load <4 x i16>, <4 x i16>* %26, align 8
  %28 = zext <4 x i16> %27 to <4 x i32>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = extractelement <2 x i64> %29, i32 0
  %31 = extractelement <2 x i64> %29, i32 1
  %32 = bitcast i64 %30 to <2 x i32>
  %33 = shufflevector <2 x i32> %32, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %34 = bitcast i64 %31 to <2 x i32>
  %35 = shufflevector <2 x i32> %34, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %36 = shufflevector <4 x i32> %33, <4 x i32> %35, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %37 = add <4 x i32> %36, %24
  %38 = bitcast <4 x i32> %37 to <2 x i64>
  %39 = extractelement <2 x i64> %38, i32 0
  %40 = extractelement <2 x i64> %38, i32 1
  %41 = bitcast i64 %39 to <2 x i32>
  %42 = shufflevector <2 x i32> %41, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %43 = bitcast i64 %40 to <2 x i32>
  %44 = shufflevector <2 x i32> %43, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %45 = shufflevector <4 x i32> %42, <4 x i32> %44, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %46 = lshr <4 x i32> %45, <i32 1, i32 1, i32 1, i32 1>
  %47 = bitcast <4 x i32> %46 to <2 x i64>
  %48 = extractelement <2 x i64> %47, i32 0
  %49 = extractelement <2 x i64> %47, i32 1
  %50 = bitcast i64 %48 to <2 x i32>
  %51 = shufflevector <2 x i32> %50, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %52 = bitcast i64 %49 to <2 x i32>
  %53 = shufflevector <2 x i32> %52, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %54 = shufflevector <4 x i32> %51, <4 x i32> %53, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %55 = trunc <4 x i32> %54 to <4 x i16>
  %56 = extractelement <4 x i16> %55, i32 0
  %57 = extractelement <4 x i16> %55, i32 1
  %58 = extractelement <4 x i16> %55, i32 2
  %59 = extractelement <4 x i16> %55, i32 3
  %60 = zext i16 %59 to i64
  %61 = shl nuw i64 %60, 48
  %62 = zext i16 %58 to i64
  %63 = shl nuw nsw i64 %62, 32
  %64 = zext i16 %57 to i64
  %65 = shl nuw nsw i64 %64, 16
  %66 = zext i16 %56 to i64
  %67 = or i64 %65, %66
  %68 = or i64 %67, %63
  %69 = or i64 %68, %61
  %70 = getelementptr inbounds i64, i64* %5, i64 %12
  store i64 %69, i64* %70, align 8
  %71 = getelementptr inbounds i64, i64* %13, i64 2
  %72 = add nuw nsw i64 %12, 1
  %73 = icmp eq i64 %72, %9
  br i1 %73, label %10, label %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_2I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = icmp sgt i32 %3, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %1, i64 %2
  %9 = bitcast i8* %8 to i64*
  %10 = bitcast i8* %1 to i64*
  %11 = zext i32 %3 to i64
  br label %13

12:                                               ; preds = %13, %4
  ret void

13:                                               ; preds = %13, %7
  %14 = phi i64 [ 0, %7 ], [ %117, %13 ]
  %15 = phi i64* [ %9, %7 ], [ %116, %13 ]
  %16 = phi i64* [ %10, %7 ], [ %115, %13 ]
  %17 = bitcast i64* %16 to <4 x i16>*
  %18 = load <4 x i16>, <4 x i16>* %17, align 8
  %19 = zext <4 x i16> %18 to <4 x i32>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = extractelement <2 x i64> %20, i32 0
  %22 = extractelement <2 x i64> %20, i32 1
  %23 = bitcast i64 %21 to <2 x i32>
  %24 = shufflevector <2 x i32> %23, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %25 = bitcast i64 %22 to <2 x i32>
  %26 = shufflevector <2 x i32> %25, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %27 = shufflevector <4 x i32> %24, <4 x i32> %26, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %28 = getelementptr inbounds i64, i64* %16, i64 1
  %29 = bitcast i64* %28 to <4 x i16>*
  %30 = load <4 x i16>, <4 x i16>* %29, align 8
  %31 = zext <4 x i16> %30 to <4 x i32>
  %32 = bitcast <4 x i32> %31 to <2 x i64>
  %33 = extractelement <2 x i64> %32, i32 0
  %34 = extractelement <2 x i64> %32, i32 1
  %35 = bitcast i64 %33 to <2 x i32>
  %36 = shufflevector <2 x i32> %35, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %37 = bitcast i64 %34 to <2 x i32>
  %38 = shufflevector <2 x i32> %37, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %39 = shufflevector <4 x i32> %36, <4 x i32> %38, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %40 = bitcast i64* %15 to <4 x i16>*
  %41 = load <4 x i16>, <4 x i16>* %40, align 8
  %42 = zext <4 x i16> %41 to <4 x i32>
  %43 = bitcast <4 x i32> %42 to <2 x i64>
  %44 = extractelement <2 x i64> %43, i32 0
  %45 = extractelement <2 x i64> %43, i32 1
  %46 = bitcast i64 %44 to <2 x i32>
  %47 = shufflevector <2 x i32> %46, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %48 = bitcast i64 %45 to <2 x i32>
  %49 = shufflevector <2 x i32> %48, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %50 = shufflevector <4 x i32> %47, <4 x i32> %49, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %51 = getelementptr inbounds i64, i64* %15, i64 1
  %52 = bitcast i64* %51 to <4 x i16>*
  %53 = load <4 x i16>, <4 x i16>* %52, align 8
  %54 = zext <4 x i16> %53 to <4 x i32>
  %55 = bitcast <4 x i32> %54 to <2 x i64>
  %56 = extractelement <2 x i64> %55, i32 0
  %57 = extractelement <2 x i64> %55, i32 1
  %58 = bitcast i64 %56 to <2 x i32>
  %59 = shufflevector <2 x i32> %58, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %60 = bitcast i64 %57 to <2 x i32>
  %61 = shufflevector <2 x i32> %60, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %62 = shufflevector <4 x i32> %59, <4 x i32> %61, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %63 = add <4 x i32> %50, %27
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = extractelement <2 x i64> %64, i32 0
  %66 = extractelement <2 x i64> %64, i32 1
  %67 = bitcast i64 %65 to <2 x i32>
  %68 = shufflevector <2 x i32> %67, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %69 = bitcast i64 %66 to <2 x i32>
  %70 = shufflevector <2 x i32> %69, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %71 = shufflevector <4 x i32> %68, <4 x i32> %70, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %72 = add <4 x i32> %71, %39
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = extractelement <2 x i64> %73, i32 0
  %75 = extractelement <2 x i64> %73, i32 1
  %76 = bitcast i64 %74 to <2 x i32>
  %77 = shufflevector <2 x i32> %76, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %78 = bitcast i64 %75 to <2 x i32>
  %79 = shufflevector <2 x i32> %78, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %80 = shufflevector <4 x i32> %77, <4 x i32> %79, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %81 = add <4 x i32> %80, %62
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = extractelement <2 x i64> %82, i32 0
  %84 = extractelement <2 x i64> %82, i32 1
  %85 = bitcast i64 %83 to <2 x i32>
  %86 = shufflevector <2 x i32> %85, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %87 = bitcast i64 %84 to <2 x i32>
  %88 = shufflevector <2 x i32> %87, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %89 = shufflevector <4 x i32> %86, <4 x i32> %88, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %90 = lshr <4 x i32> %89, <i32 2, i32 2, i32 2, i32 2>
  %91 = bitcast <4 x i32> %90 to <2 x i64>
  %92 = extractelement <2 x i64> %91, i32 0
  %93 = extractelement <2 x i64> %91, i32 1
  %94 = bitcast i64 %92 to <2 x i32>
  %95 = shufflevector <2 x i32> %94, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %96 = bitcast i64 %93 to <2 x i32>
  %97 = shufflevector <2 x i32> %96, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %98 = shufflevector <4 x i32> %95, <4 x i32> %97, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %99 = trunc <4 x i32> %98 to <4 x i16>
  %100 = extractelement <4 x i16> %99, i32 0
  %101 = extractelement <4 x i16> %99, i32 1
  %102 = extractelement <4 x i16> %99, i32 2
  %103 = extractelement <4 x i16> %99, i32 3
  %104 = zext i16 %103 to i64
  %105 = shl nuw i64 %104, 48
  %106 = zext i16 %102 to i64
  %107 = shl nuw nsw i64 %106, 32
  %108 = zext i16 %101 to i64
  %109 = shl nuw nsw i64 %108, 16
  %110 = zext i16 %100 to i64
  %111 = or i64 %109, %110
  %112 = or i64 %111, %107
  %113 = or i64 %112, %105
  %114 = getelementptr inbounds i64, i64* %5, i64 %14
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i64, i64* %16, i64 2
  %116 = getelementptr inbounds i64, i64* %15, i64 2
  %117 = add nuw nsw i64 %14, 1
  %118 = icmp eq i64 %117, %11
  br i1 %118, label %12, label %13
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_2_3I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i64*
  %7 = icmp sgt i32 %3, 0
  br i1 %7, label %8, label %14

8:                                                ; preds = %4
  %9 = getelementptr inbounds i8, i8* %5, i64 %2
  %10 = bitcast i8* %9 to i64*
  %11 = bitcast i8* %5 to i64*
  %12 = bitcast i8* %1 to i64*
  %13 = zext i32 %3 to i64
  br label %15

14:                                               ; preds = %15, %4
  ret void

15:                                               ; preds = %15, %8
  %16 = phi i64 [ 0, %8 ], [ %180, %15 ]
  %17 = phi i64* [ %10, %8 ], [ %179, %15 ]
  %18 = phi i64* [ %11, %8 ], [ %178, %15 ]
  %19 = phi i64* [ %12, %8 ], [ %177, %15 ]
  %20 = bitcast i64* %19 to <4 x i16>*
  %21 = load <4 x i16>, <4 x i16>* %20, align 8
  %22 = zext <4 x i16> %21 to <4 x i32>
  %23 = bitcast <4 x i32> %22 to <2 x i64>
  %24 = extractelement <2 x i64> %23, i32 0
  %25 = extractelement <2 x i64> %23, i32 1
  %26 = bitcast i64 %24 to <2 x i32>
  %27 = shufflevector <2 x i32> %26, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %28 = bitcast i64 %25 to <2 x i32>
  %29 = shufflevector <2 x i32> %28, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %30 = shufflevector <4 x i32> %27, <4 x i32> %29, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %31 = getelementptr inbounds i64, i64* %19, i64 1
  %32 = bitcast i64* %31 to <4 x i16>*
  %33 = load <4 x i16>, <4 x i16>* %32, align 8
  %34 = zext <4 x i16> %33 to <4 x i32>
  %35 = bitcast <4 x i32> %34 to <2 x i64>
  %36 = extractelement <2 x i64> %35, i32 0
  %37 = extractelement <2 x i64> %35, i32 1
  %38 = bitcast i64 %36 to <2 x i32>
  %39 = shufflevector <2 x i32> %38, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %40 = bitcast i64 %37 to <2 x i32>
  %41 = shufflevector <2 x i32> %40, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %42 = shufflevector <4 x i32> %39, <4 x i32> %41, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %43 = bitcast i64* %18 to <4 x i16>*
  %44 = load <4 x i16>, <4 x i16>* %43, align 8
  %45 = zext <4 x i16> %44 to <4 x i32>
  %46 = bitcast <4 x i32> %45 to <2 x i64>
  %47 = extractelement <2 x i64> %46, i32 0
  %48 = extractelement <2 x i64> %46, i32 1
  %49 = bitcast i64 %47 to <2 x i32>
  %50 = shufflevector <2 x i32> %49, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %51 = bitcast i64 %48 to <2 x i32>
  %52 = shufflevector <2 x i32> %51, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %53 = shufflevector <4 x i32> %50, <4 x i32> %52, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %54 = getelementptr inbounds i64, i64* %18, i64 1
  %55 = bitcast i64* %54 to <4 x i16>*
  %56 = load <4 x i16>, <4 x i16>* %55, align 8
  %57 = zext <4 x i16> %56 to <4 x i32>
  %58 = bitcast <4 x i32> %57 to <2 x i64>
  %59 = extractelement <2 x i64> %58, i32 0
  %60 = extractelement <2 x i64> %58, i32 1
  %61 = bitcast i64 %59 to <2 x i32>
  %62 = shufflevector <2 x i32> %61, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %63 = bitcast i64 %60 to <2 x i32>
  %64 = shufflevector <2 x i32> %63, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %65 = shufflevector <4 x i32> %62, <4 x i32> %64, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %66 = bitcast i64* %17 to <4 x i16>*
  %67 = load <4 x i16>, <4 x i16>* %66, align 8
  %68 = zext <4 x i16> %67 to <4 x i32>
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = extractelement <2 x i64> %69, i32 0
  %71 = extractelement <2 x i64> %69, i32 1
  %72 = bitcast i64 %70 to <2 x i32>
  %73 = shufflevector <2 x i32> %72, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = bitcast i64 %71 to <2 x i32>
  %75 = shufflevector <2 x i32> %74, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %76 = shufflevector <4 x i32> %73, <4 x i32> %75, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %77 = getelementptr inbounds i64, i64* %17, i64 1
  %78 = bitcast i64* %77 to <4 x i16>*
  %79 = load <4 x i16>, <4 x i16>* %78, align 8
  %80 = zext <4 x i16> %79 to <4 x i32>
  %81 = bitcast <4 x i32> %80 to <2 x i64>
  %82 = extractelement <2 x i64> %81, i32 0
  %83 = extractelement <2 x i64> %81, i32 1
  %84 = bitcast i64 %82 to <2 x i32>
  %85 = shufflevector <2 x i32> %84, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %86 = bitcast i64 %83 to <2 x i32>
  %87 = shufflevector <2 x i32> %86, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %88 = shufflevector <4 x i32> %85, <4 x i32> %87, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %89 = add <4 x i32> %53, %30
  %90 = bitcast <4 x i32> %89 to <2 x i64>
  %91 = extractelement <2 x i64> %90, i32 0
  %92 = extractelement <2 x i64> %90, i32 1
  %93 = bitcast i64 %91 to <2 x i32>
  %94 = shufflevector <2 x i32> %93, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %95 = bitcast i64 %92 to <2 x i32>
  %96 = shufflevector <2 x i32> %95, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %97 = shufflevector <4 x i32> %94, <4 x i32> %96, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %98 = add <4 x i32> %97, %53
  %99 = bitcast <4 x i32> %98 to <2 x i64>
  %100 = extractelement <2 x i64> %99, i32 0
  %101 = extractelement <2 x i64> %99, i32 1
  %102 = bitcast i64 %100 to <2 x i32>
  %103 = shufflevector <2 x i32> %102, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %104 = bitcast i64 %101 to <2 x i32>
  %105 = shufflevector <2 x i32> %104, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %106 = shufflevector <4 x i32> %103, <4 x i32> %105, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %107 = add <4 x i32> %106, %76
  %108 = bitcast <4 x i32> %107 to <2 x i64>
  %109 = extractelement <2 x i64> %108, i32 0
  %110 = extractelement <2 x i64> %108, i32 1
  %111 = bitcast i64 %109 to <2 x i32>
  %112 = shufflevector <2 x i32> %111, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %113 = bitcast i64 %110 to <2 x i32>
  %114 = shufflevector <2 x i32> %113, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %115 = shufflevector <4 x i32> %112, <4 x i32> %114, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %116 = add <4 x i32> %65, %42
  %117 = bitcast <4 x i32> %116 to <2 x i64>
  %118 = extractelement <2 x i64> %117, i32 0
  %119 = extractelement <2 x i64> %117, i32 1
  %120 = bitcast i64 %118 to <2 x i32>
  %121 = shufflevector <2 x i32> %120, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %122 = bitcast i64 %119 to <2 x i32>
  %123 = shufflevector <2 x i32> %122, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %124 = shufflevector <4 x i32> %121, <4 x i32> %123, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %125 = add <4 x i32> %124, %65
  %126 = bitcast <4 x i32> %125 to <2 x i64>
  %127 = extractelement <2 x i64> %126, i32 0
  %128 = extractelement <2 x i64> %126, i32 1
  %129 = bitcast i64 %127 to <2 x i32>
  %130 = shufflevector <2 x i32> %129, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %131 = bitcast i64 %128 to <2 x i32>
  %132 = shufflevector <2 x i32> %131, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %133 = shufflevector <4 x i32> %130, <4 x i32> %132, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %134 = add <4 x i32> %133, %88
  %135 = bitcast <4 x i32> %134 to <2 x i64>
  %136 = extractelement <2 x i64> %135, i32 0
  %137 = extractelement <2 x i64> %135, i32 1
  %138 = bitcast i64 %136 to <2 x i32>
  %139 = shufflevector <2 x i32> %138, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %140 = bitcast i64 %137 to <2 x i32>
  %141 = shufflevector <2 x i32> %140, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %142 = shufflevector <4 x i32> %139, <4 x i32> %141, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %143 = add <4 x i32> %142, %115
  %144 = bitcast <4 x i32> %143 to <2 x i64>
  %145 = extractelement <2 x i64> %144, i32 0
  %146 = extractelement <2 x i64> %144, i32 1
  %147 = bitcast i64 %145 to <2 x i32>
  %148 = shufflevector <2 x i32> %147, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %149 = bitcast i64 %146 to <2 x i32>
  %150 = shufflevector <2 x i32> %149, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %151 = shufflevector <4 x i32> %148, <4 x i32> %150, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %152 = lshr <4 x i32> %151, <i32 3, i32 3, i32 3, i32 3>
  %153 = bitcast <4 x i32> %152 to <2 x i64>
  %154 = extractelement <2 x i64> %153, i32 0
  %155 = extractelement <2 x i64> %153, i32 1
  %156 = bitcast i64 %154 to <2 x i32>
  %157 = shufflevector <2 x i32> %156, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %158 = bitcast i64 %155 to <2 x i32>
  %159 = shufflevector <2 x i32> %158, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %160 = shufflevector <4 x i32> %157, <4 x i32> %159, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %161 = trunc <4 x i32> %160 to <4 x i16>
  %162 = extractelement <4 x i16> %161, i32 0
  %163 = extractelement <4 x i16> %161, i32 1
  %164 = extractelement <4 x i16> %161, i32 2
  %165 = extractelement <4 x i16> %161, i32 3
  %166 = zext i16 %165 to i64
  %167 = shl nuw i64 %166, 48
  %168 = zext i16 %164 to i64
  %169 = shl nuw nsw i64 %168, 32
  %170 = zext i16 %163 to i64
  %171 = shl nuw nsw i64 %170, 16
  %172 = zext i16 %162 to i64
  %173 = or i64 %171, %172
  %174 = or i64 %173, %169
  %175 = or i64 %174, %167
  %176 = getelementptr inbounds i64, i64* %6, i64 %16
  store i64 %175, i64* %176, align 8
  %177 = getelementptr inbounds i64, i64* %19, i64 2
  %178 = getelementptr inbounds i64, i64* %18, i64 2
  %179 = getelementptr inbounds i64, i64* %17, i64 2
  %180 = add nuw nsw i64 %16, 1
  %181 = icmp eq i64 %180, %13
  br i1 %181, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_1I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = bitcast i8* %0 to i64*
  %6 = bitcast i8* %1 to <4 x i16>*
  %7 = load <4 x i16>, <4 x i16>* %6, align 8
  %8 = zext <4 x i16> %7 to <4 x i32>
  %9 = bitcast <4 x i32> %8 to <2 x i64>
  %10 = icmp sgt i32 %3, 0
  br i1 %10, label %11, label %21

11:                                               ; preds = %4
  %12 = extractelement <2 x i64> %9, i32 0
  %13 = bitcast i64 %12 to <2 x i32>
  %14 = shufflevector <2 x i32> %13, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %15 = extractelement <2 x i64> %9, i32 1
  %16 = bitcast i64 %15 to <2 x i32>
  %17 = shufflevector <2 x i32> %16, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %18 = shufflevector <4 x i32> %14, <4 x i32> %17, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %19 = bitcast i8* %1 to i64*
  %20 = zext i32 %3 to i64
  br label %22

21:                                               ; preds = %22, %4
  ret void

22:                                               ; preds = %22, %11
  %23 = phi i64 [ 0, %11 ], [ %102, %22 ]
  %24 = phi i64* [ %19, %11 ], [ %38, %22 ]
  %25 = phi <4 x i32> [ %18, %11 ], [ %49, %22 ]
  %26 = getelementptr inbounds i64, i64* %24, i64 1
  %27 = bitcast i64* %26 to <4 x i16>*
  %28 = load <4 x i16>, <4 x i16>* %27, align 8
  %29 = zext <4 x i16> %28 to <4 x i32>
  %30 = bitcast <4 x i32> %29 to <2 x i64>
  %31 = extractelement <2 x i64> %30, i32 0
  %32 = extractelement <2 x i64> %30, i32 1
  %33 = bitcast i64 %31 to <2 x i32>
  %34 = shufflevector <2 x i32> %33, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %35 = bitcast i64 %32 to <2 x i32>
  %36 = shufflevector <2 x i32> %35, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %37 = shufflevector <4 x i32> %34, <4 x i32> %36, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %38 = getelementptr inbounds i64, i64* %24, i64 2
  %39 = bitcast i64* %38 to <4 x i16>*
  %40 = load <4 x i16>, <4 x i16>* %39, align 8
  %41 = zext <4 x i16> %40 to <4 x i32>
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = extractelement <2 x i64> %42, i32 1
  %45 = bitcast i64 %43 to <2 x i32>
  %46 = shufflevector <2 x i32> %45, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = bitcast i64 %44 to <2 x i32>
  %48 = shufflevector <2 x i32> %47, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %49 = shufflevector <4 x i32> %46, <4 x i32> %48, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %50 = add <4 x i32> %37, %25
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = extractelement <2 x i64> %51, i32 0
  %53 = extractelement <2 x i64> %51, i32 1
  %54 = bitcast i64 %52 to <2 x i32>
  %55 = shufflevector <2 x i32> %54, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = bitcast i64 %53 to <2 x i32>
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %58 = shufflevector <4 x i32> %55, <4 x i32> %57, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %59 = add <4 x i32> %58, %37
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = extractelement <2 x i64> %60, i32 0
  %62 = extractelement <2 x i64> %60, i32 1
  %63 = bitcast i64 %61 to <2 x i32>
  %64 = shufflevector <2 x i32> %63, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %65 = bitcast i64 %62 to <2 x i32>
  %66 = shufflevector <2 x i32> %65, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %67 = shufflevector <4 x i32> %64, <4 x i32> %66, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %68 = add <4 x i32> %67, %49
  %69 = bitcast <4 x i32> %68 to <2 x i64>
  %70 = extractelement <2 x i64> %69, i32 0
  %71 = extractelement <2 x i64> %69, i32 1
  %72 = bitcast i64 %70 to <2 x i32>
  %73 = shufflevector <2 x i32> %72, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %74 = bitcast i64 %71 to <2 x i32>
  %75 = shufflevector <2 x i32> %74, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %76 = shufflevector <4 x i32> %73, <4 x i32> %75, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %77 = lshr <4 x i32> %76, <i32 2, i32 2, i32 2, i32 2>
  %78 = bitcast <4 x i32> %77 to <2 x i64>
  %79 = extractelement <2 x i64> %78, i32 0
  %80 = extractelement <2 x i64> %78, i32 1
  %81 = bitcast i64 %79 to <2 x i32>
  %82 = shufflevector <2 x i32> %81, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %83 = bitcast i64 %80 to <2 x i32>
  %84 = shufflevector <2 x i32> %83, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %85 = shufflevector <4 x i32> %82, <4 x i32> %84, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %86 = trunc <4 x i32> %85 to <4 x i16>
  %87 = extractelement <4 x i16> %86, i32 0
  %88 = extractelement <4 x i16> %86, i32 1
  %89 = extractelement <4 x i16> %86, i32 2
  %90 = extractelement <4 x i16> %86, i32 3
  %91 = zext i16 %90 to i64
  %92 = shl nuw i64 %91, 48
  %93 = zext i16 %89 to i64
  %94 = shl nuw nsw i64 %93, 32
  %95 = zext i16 %88 to i64
  %96 = shl nuw nsw i64 %95, 16
  %97 = zext i16 %87 to i64
  %98 = or i64 %96, %97
  %99 = or i64 %98, %94
  %100 = or i64 %99, %92
  %101 = getelementptr inbounds i64, i64* %5, i64 %23
  store i64 %100, i64* %101, align 8
  %102 = add nuw nsw i64 %23, 1
  %103 = icmp eq i64 %102, %20
  br i1 %103, label %21, label %22
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_2I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = bitcast i8* %0 to i64*
  %7 = bitcast i8* %1 to <4 x i16>*
  %8 = load <4 x i16>, <4 x i16>* %7, align 8
  %9 = zext <4 x i16> %8 to <4 x i32>
  %10 = bitcast <4 x i32> %9 to <2 x i64>
  %11 = extractelement <2 x i64> %10, i32 0
  %12 = extractelement <2 x i64> %10, i32 1
  %13 = bitcast i64 %11 to <2 x i32>
  %14 = shufflevector <2 x i32> %13, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %15 = bitcast i64 %12 to <2 x i32>
  %16 = shufflevector <2 x i32> %15, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %17 = shufflevector <4 x i32> %14, <4 x i32> %16, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %18 = bitcast i8* %5 to <4 x i16>*
  %19 = load <4 x i16>, <4 x i16>* %18, align 8
  %20 = zext <4 x i16> %19 to <4 x i32>
  %21 = bitcast <4 x i32> %20 to <2 x i64>
  %22 = extractelement <2 x i64> %21, i32 0
  %23 = extractelement <2 x i64> %21, i32 1
  %24 = bitcast i64 %22 to <2 x i32>
  %25 = shufflevector <2 x i32> %24, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %26 = bitcast i64 %23 to <2 x i32>
  %27 = shufflevector <2 x i32> %26, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %28 = shufflevector <4 x i32> %25, <4 x i32> %27, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %29 = add <4 x i32> %28, %17
  %30 = bitcast <4 x i32> %29 to <2 x i64>
  %31 = icmp sgt i32 %3, 0
  br i1 %31, label %32, label %43

32:                                               ; preds = %4
  %33 = extractelement <2 x i64> %30, i32 0
  %34 = bitcast i64 %33 to <2 x i32>
  %35 = shufflevector <2 x i32> %34, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %36 = extractelement <2 x i64> %30, i32 1
  %37 = bitcast i64 %36 to <2 x i32>
  %38 = shufflevector <2 x i32> %37, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %39 = shufflevector <4 x i32> %35, <4 x i32> %38, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %40 = bitcast i8* %5 to i64*
  %41 = bitcast i8* %1 to i64*
  %42 = zext i32 %3 to i64
  br label %44

43:                                               ; preds = %44, %4
  ret void

44:                                               ; preds = %44, %32
  %45 = phi i64 [ 0, %32 ], [ %176, %44 ]
  %46 = phi i64* [ %41, %32 ], [ %100, %44 ]
  %47 = phi i64* [ %40, %32 ], [ %112, %44 ]
  %48 = phi <4 x i32> [ %39, %32 ], [ %132, %44 ]
  %49 = getelementptr inbounds i64, i64* %46, i64 1
  %50 = bitcast i64* %49 to <4 x i16>*
  %51 = load <4 x i16>, <4 x i16>* %50, align 8
  %52 = zext <4 x i16> %51 to <4 x i32>
  %53 = bitcast <4 x i32> %52 to <2 x i64>
  %54 = extractelement <2 x i64> %53, i32 0
  %55 = extractelement <2 x i64> %53, i32 1
  %56 = bitcast i64 %54 to <2 x i32>
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %58 = bitcast i64 %55 to <2 x i32>
  %59 = shufflevector <2 x i32> %58, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %60 = shufflevector <4 x i32> %57, <4 x i32> %59, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %61 = getelementptr inbounds i64, i64* %47, i64 1
  %62 = bitcast i64* %61 to <4 x i16>*
  %63 = load <4 x i16>, <4 x i16>* %62, align 8
  %64 = zext <4 x i16> %63 to <4 x i32>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = extractelement <2 x i64> %65, i32 0
  %67 = extractelement <2 x i64> %65, i32 1
  %68 = bitcast i64 %66 to <2 x i32>
  %69 = shufflevector <2 x i32> %68, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %70 = bitcast i64 %67 to <2 x i32>
  %71 = shufflevector <2 x i32> %70, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %72 = shufflevector <4 x i32> %69, <4 x i32> %71, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %73 = shl <4 x i32> %60, <i32 1, i32 1, i32 1, i32 1>
  %74 = bitcast <4 x i32> %73 to <2 x i64>
  %75 = extractelement <2 x i64> %74, i32 0
  %76 = extractelement <2 x i64> %74, i32 1
  %77 = bitcast i64 %75 to <2 x i32>
  %78 = shufflevector <2 x i32> %77, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %79 = bitcast i64 %76 to <2 x i32>
  %80 = shufflevector <2 x i32> %79, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %81 = shufflevector <4 x i32> %78, <4 x i32> %80, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %82 = add <4 x i32> %81, %72
  %83 = bitcast <4 x i32> %82 to <2 x i64>
  %84 = extractelement <2 x i64> %83, i32 0
  %85 = extractelement <2 x i64> %83, i32 1
  %86 = bitcast i64 %84 to <2 x i32>
  %87 = shufflevector <2 x i32> %86, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %88 = bitcast i64 %85 to <2 x i32>
  %89 = shufflevector <2 x i32> %88, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %90 = shufflevector <4 x i32> %87, <4 x i32> %89, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %91 = add <4 x i32> %90, %72
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = extractelement <2 x i64> %92, i32 0
  %94 = extractelement <2 x i64> %92, i32 1
  %95 = bitcast i64 %93 to <2 x i32>
  %96 = shufflevector <2 x i32> %95, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %97 = bitcast i64 %94 to <2 x i32>
  %98 = shufflevector <2 x i32> %97, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %99 = shufflevector <4 x i32> %96, <4 x i32> %98, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %100 = getelementptr inbounds i64, i64* %46, i64 2
  %101 = bitcast i64* %100 to <4 x i16>*
  %102 = load <4 x i16>, <4 x i16>* %101, align 8
  %103 = zext <4 x i16> %102 to <4 x i32>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = extractelement <2 x i64> %104, i32 0
  %106 = extractelement <2 x i64> %104, i32 1
  %107 = bitcast i64 %105 to <2 x i32>
  %108 = shufflevector <2 x i32> %107, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %109 = bitcast i64 %106 to <2 x i32>
  %110 = shufflevector <2 x i32> %109, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %111 = shufflevector <4 x i32> %108, <4 x i32> %110, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %112 = getelementptr inbounds i64, i64* %47, i64 2
  %113 = bitcast i64* %112 to <4 x i16>*
  %114 = load <4 x i16>, <4 x i16>* %113, align 8
  %115 = zext <4 x i16> %114 to <4 x i32>
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = extractelement <2 x i64> %116, i32 0
  %118 = extractelement <2 x i64> %116, i32 1
  %119 = bitcast i64 %117 to <2 x i32>
  %120 = shufflevector <2 x i32> %119, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %121 = bitcast i64 %118 to <2 x i32>
  %122 = shufflevector <2 x i32> %121, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %123 = shufflevector <4 x i32> %120, <4 x i32> %122, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %124 = add <4 x i32> %123, %111
  %125 = bitcast <4 x i32> %124 to <2 x i64>
  %126 = extractelement <2 x i64> %125, i32 0
  %127 = extractelement <2 x i64> %125, i32 1
  %128 = bitcast i64 %126 to <2 x i32>
  %129 = shufflevector <2 x i32> %128, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %130 = bitcast i64 %127 to <2 x i32>
  %131 = shufflevector <2 x i32> %130, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %132 = shufflevector <4 x i32> %129, <4 x i32> %131, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %133 = add <4 x i32> %99, %48
  %134 = bitcast <4 x i32> %133 to <2 x i64>
  %135 = extractelement <2 x i64> %134, i32 0
  %136 = extractelement <2 x i64> %134, i32 1
  %137 = bitcast i64 %135 to <2 x i32>
  %138 = shufflevector <2 x i32> %137, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %139 = bitcast i64 %136 to <2 x i32>
  %140 = shufflevector <2 x i32> %139, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %141 = shufflevector <4 x i32> %138, <4 x i32> %140, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %142 = add <4 x i32> %141, %132
  %143 = bitcast <4 x i32> %142 to <2 x i64>
  %144 = extractelement <2 x i64> %143, i32 0
  %145 = extractelement <2 x i64> %143, i32 1
  %146 = bitcast i64 %144 to <2 x i32>
  %147 = shufflevector <2 x i32> %146, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %148 = bitcast i64 %145 to <2 x i32>
  %149 = shufflevector <2 x i32> %148, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %150 = shufflevector <4 x i32> %147, <4 x i32> %149, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %151 = lshr <4 x i32> %150, <i32 3, i32 3, i32 3, i32 3>
  %152 = bitcast <4 x i32> %151 to <2 x i64>
  %153 = extractelement <2 x i64> %152, i32 0
  %154 = extractelement <2 x i64> %152, i32 1
  %155 = bitcast i64 %153 to <2 x i32>
  %156 = shufflevector <2 x i32> %155, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %157 = bitcast i64 %154 to <2 x i32>
  %158 = shufflevector <2 x i32> %157, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %159 = shufflevector <4 x i32> %156, <4 x i32> %158, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %160 = trunc <4 x i32> %159 to <4 x i16>
  %161 = extractelement <4 x i16> %160, i32 0
  %162 = extractelement <4 x i16> %160, i32 1
  %163 = extractelement <4 x i16> %160, i32 2
  %164 = extractelement <4 x i16> %160, i32 3
  %165 = zext i16 %164 to i64
  %166 = shl nuw i64 %165, 48
  %167 = zext i16 %163 to i64
  %168 = shl nuw nsw i64 %167, 32
  %169 = zext i16 %162 to i64
  %170 = shl nuw nsw i64 %169, 16
  %171 = zext i16 %161 to i64
  %172 = or i64 %170, %171
  %173 = or i64 %172, %168
  %174 = or i64 %173, %166
  %175 = getelementptr inbounds i64, i64* %6, i64 %45
  store i64 %174, i64* %175, align 8
  %176 = add nuw nsw i64 %45, 1
  %177 = icmp eq i64 %176, %42
  br i1 %177, label %43, label %44
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_Z14downsample_3_3I24ColorTypeFilter_16161616EvPvPKvmi(i8*, i8*, i64, i32) local_unnamed_addr #3 comdat {
  %5 = getelementptr inbounds i8, i8* %1, i64 %2
  %6 = getelementptr inbounds i8, i8* %5, i64 %2
  %7 = bitcast i8* %0 to i64*
  %8 = bitcast i8* %1 to <4 x i16>*
  %9 = load <4 x i16>, <4 x i16>* %8, align 8
  %10 = zext <4 x i16> %9 to <4 x i32>
  %11 = bitcast <4 x i32> %10 to <2 x i64>
  %12 = extractelement <2 x i64> %11, i32 0
  %13 = extractelement <2 x i64> %11, i32 1
  %14 = bitcast i64 %12 to <2 x i32>
  %15 = shufflevector <2 x i32> %14, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = bitcast i64 %13 to <2 x i32>
  %17 = shufflevector <2 x i32> %16, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %18 = shufflevector <4 x i32> %15, <4 x i32> %17, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %19 = bitcast i8* %5 to <4 x i16>*
  %20 = load <4 x i16>, <4 x i16>* %19, align 8
  %21 = zext <4 x i16> %20 to <4 x i32>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = extractelement <2 x i64> %22, i32 0
  %24 = extractelement <2 x i64> %22, i32 1
  %25 = bitcast i64 %23 to <2 x i32>
  %26 = shufflevector <2 x i32> %25, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %27 = bitcast i64 %24 to <2 x i32>
  %28 = shufflevector <2 x i32> %27, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %29 = shufflevector <4 x i32> %26, <4 x i32> %28, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %30 = bitcast i8* %6 to <4 x i16>*
  %31 = load <4 x i16>, <4 x i16>* %30, align 8
  %32 = zext <4 x i16> %31 to <4 x i32>
  %33 = bitcast <4 x i32> %32 to <2 x i64>
  %34 = extractelement <2 x i64> %33, i32 0
  %35 = extractelement <2 x i64> %33, i32 1
  %36 = bitcast i64 %34 to <2 x i32>
  %37 = shufflevector <2 x i32> %36, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %38 = bitcast i64 %35 to <2 x i32>
  %39 = shufflevector <2 x i32> %38, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %40 = shufflevector <4 x i32> %37, <4 x i32> %39, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %41 = add <4 x i32> %29, %18
  %42 = bitcast <4 x i32> %41 to <2 x i64>
  %43 = extractelement <2 x i64> %42, i32 0
  %44 = extractelement <2 x i64> %42, i32 1
  %45 = bitcast i64 %43 to <2 x i32>
  %46 = shufflevector <2 x i32> %45, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %47 = bitcast i64 %44 to <2 x i32>
  %48 = shufflevector <2 x i32> %47, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %49 = shufflevector <4 x i32> %46, <4 x i32> %48, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %50 = add <4 x i32> %49, %29
  %51 = bitcast <4 x i32> %50 to <2 x i64>
  %52 = extractelement <2 x i64> %51, i32 0
  %53 = extractelement <2 x i64> %51, i32 1
  %54 = bitcast i64 %52 to <2 x i32>
  %55 = shufflevector <2 x i32> %54, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %56 = bitcast i64 %53 to <2 x i32>
  %57 = shufflevector <2 x i32> %56, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %58 = shufflevector <4 x i32> %55, <4 x i32> %57, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %59 = add <4 x i32> %58, %40
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = icmp sgt i32 %3, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %4
  %63 = extractelement <2 x i64> %60, i32 0
  %64 = bitcast i64 %63 to <2 x i32>
  %65 = shufflevector <2 x i32> %64, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = extractelement <2 x i64> %60, i32 1
  %67 = bitcast i64 %66 to <2 x i32>
  %68 = shufflevector <2 x i32> %67, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %69 = shufflevector <4 x i32> %65, <4 x i32> %68, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %70 = bitcast i8* %6 to i64*
  %71 = bitcast i8* %5 to i64*
  %72 = bitcast i8* %1 to i64*
  %73 = zext i32 %3 to i64
  br label %75

74:                                               ; preds = %75, %4
  ret void

75:                                               ; preds = %75, %62
  %76 = phi i64 [ 0, %62 ], [ %259, %75 ]
  %77 = phi i64* [ %72, %62 ], [ %153, %75 ]
  %78 = phi i64* [ %71, %62 ], [ %165, %75 ]
  %79 = phi i64* [ %70, %62 ], [ %177, %75 ]
  %80 = phi <4 x i32> [ %69, %62 ], [ %215, %75 ]
  %81 = getelementptr inbounds i64, i64* %77, i64 1
  %82 = bitcast i64* %81 to <4 x i16>*
  %83 = load <4 x i16>, <4 x i16>* %82, align 8
  %84 = zext <4 x i16> %83 to <4 x i32>
  %85 = bitcast <4 x i32> %84 to <2 x i64>
  %86 = extractelement <2 x i64> %85, i32 0
  %87 = extractelement <2 x i64> %85, i32 1
  %88 = bitcast i64 %86 to <2 x i32>
  %89 = shufflevector <2 x i32> %88, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %90 = bitcast i64 %87 to <2 x i32>
  %91 = shufflevector <2 x i32> %90, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %92 = shufflevector <4 x i32> %89, <4 x i32> %91, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %93 = getelementptr inbounds i64, i64* %78, i64 1
  %94 = bitcast i64* %93 to <4 x i16>*
  %95 = load <4 x i16>, <4 x i16>* %94, align 8
  %96 = zext <4 x i16> %95 to <4 x i32>
  %97 = bitcast <4 x i32> %96 to <2 x i64>
  %98 = extractelement <2 x i64> %97, i32 0
  %99 = extractelement <2 x i64> %97, i32 1
  %100 = bitcast i64 %98 to <2 x i32>
  %101 = shufflevector <2 x i32> %100, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %102 = bitcast i64 %99 to <2 x i32>
  %103 = shufflevector <2 x i32> %102, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %104 = shufflevector <4 x i32> %101, <4 x i32> %103, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %105 = getelementptr inbounds i64, i64* %79, i64 1
  %106 = bitcast i64* %105 to <4 x i16>*
  %107 = load <4 x i16>, <4 x i16>* %106, align 8
  %108 = zext <4 x i16> %107 to <4 x i32>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = extractelement <2 x i64> %109, i32 0
  %111 = extractelement <2 x i64> %109, i32 1
  %112 = bitcast i64 %110 to <2 x i32>
  %113 = shufflevector <2 x i32> %112, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %114 = bitcast i64 %111 to <2 x i32>
  %115 = shufflevector <2 x i32> %114, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %116 = shufflevector <4 x i32> %113, <4 x i32> %115, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %117 = add <4 x i32> %104, %92
  %118 = bitcast <4 x i32> %117 to <2 x i64>
  %119 = extractelement <2 x i64> %118, i32 0
  %120 = extractelement <2 x i64> %118, i32 1
  %121 = bitcast i64 %119 to <2 x i32>
  %122 = shufflevector <2 x i32> %121, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %123 = bitcast i64 %120 to <2 x i32>
  %124 = shufflevector <2 x i32> %123, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %125 = shufflevector <4 x i32> %122, <4 x i32> %124, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %126 = add <4 x i32> %125, %104
  %127 = bitcast <4 x i32> %126 to <2 x i64>
  %128 = extractelement <2 x i64> %127, i32 0
  %129 = extractelement <2 x i64> %127, i32 1
  %130 = bitcast i64 %128 to <2 x i32>
  %131 = shufflevector <2 x i32> %130, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %132 = bitcast i64 %129 to <2 x i32>
  %133 = shufflevector <2 x i32> %132, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %134 = shufflevector <4 x i32> %131, <4 x i32> %133, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %135 = add <4 x i32> %134, %116
  %136 = bitcast <4 x i32> %135 to <2 x i64>
  %137 = extractelement <2 x i64> %136, i32 0
  %138 = extractelement <2 x i64> %136, i32 1
  %139 = bitcast i64 %137 to <2 x i32>
  %140 = shufflevector <2 x i32> %139, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %141 = bitcast i64 %138 to <2 x i32>
  %142 = shufflevector <2 x i32> %141, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %143 = shufflevector <4 x i32> %140, <4 x i32> %142, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %144 = shl <4 x i32> %143, <i32 1, i32 1, i32 1, i32 1>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = extractelement <2 x i64> %145, i32 0
  %147 = extractelement <2 x i64> %145, i32 1
  %148 = bitcast i64 %146 to <2 x i32>
  %149 = shufflevector <2 x i32> %148, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %150 = bitcast i64 %147 to <2 x i32>
  %151 = shufflevector <2 x i32> %150, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %152 = shufflevector <4 x i32> %149, <4 x i32> %151, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %153 = getelementptr inbounds i64, i64* %77, i64 2
  %154 = bitcast i64* %153 to <4 x i16>*
  %155 = load <4 x i16>, <4 x i16>* %154, align 8
  %156 = zext <4 x i16> %155 to <4 x i32>
  %157 = bitcast <4 x i32> %156 to <2 x i64>
  %158 = extractelement <2 x i64> %157, i32 0
  %159 = extractelement <2 x i64> %157, i32 1
  %160 = bitcast i64 %158 to <2 x i32>
  %161 = shufflevector <2 x i32> %160, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %162 = bitcast i64 %159 to <2 x i32>
  %163 = shufflevector <2 x i32> %162, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %164 = shufflevector <4 x i32> %161, <4 x i32> %163, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %165 = getelementptr inbounds i64, i64* %78, i64 2
  %166 = bitcast i64* %165 to <4 x i16>*
  %167 = load <4 x i16>, <4 x i16>* %166, align 8
  %168 = zext <4 x i16> %167 to <4 x i32>
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  %170 = extractelement <2 x i64> %169, i32 0
  %171 = extractelement <2 x i64> %169, i32 1
  %172 = bitcast i64 %170 to <2 x i32>
  %173 = shufflevector <2 x i32> %172, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %174 = bitcast i64 %171 to <2 x i32>
  %175 = shufflevector <2 x i32> %174, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %176 = shufflevector <4 x i32> %173, <4 x i32> %175, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %177 = getelementptr inbounds i64, i64* %79, i64 2
  %178 = bitcast i64* %177 to <4 x i16>*
  %179 = load <4 x i16>, <4 x i16>* %178, align 8
  %180 = zext <4 x i16> %179 to <4 x i32>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = extractelement <2 x i64> %181, i32 0
  %183 = extractelement <2 x i64> %181, i32 1
  %184 = bitcast i64 %182 to <2 x i32>
  %185 = shufflevector <2 x i32> %184, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %186 = bitcast i64 %183 to <2 x i32>
  %187 = shufflevector <2 x i32> %186, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %188 = shufflevector <4 x i32> %185, <4 x i32> %187, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %189 = add <4 x i32> %176, %164
  %190 = bitcast <4 x i32> %189 to <2 x i64>
  %191 = extractelement <2 x i64> %190, i32 0
  %192 = extractelement <2 x i64> %190, i32 1
  %193 = bitcast i64 %191 to <2 x i32>
  %194 = shufflevector <2 x i32> %193, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %195 = bitcast i64 %192 to <2 x i32>
  %196 = shufflevector <2 x i32> %195, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %197 = shufflevector <4 x i32> %194, <4 x i32> %196, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %198 = add <4 x i32> %197, %176
  %199 = bitcast <4 x i32> %198 to <2 x i64>
  %200 = extractelement <2 x i64> %199, i32 0
  %201 = extractelement <2 x i64> %199, i32 1
  %202 = bitcast i64 %200 to <2 x i32>
  %203 = shufflevector <2 x i32> %202, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %204 = bitcast i64 %201 to <2 x i32>
  %205 = shufflevector <2 x i32> %204, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %206 = shufflevector <4 x i32> %203, <4 x i32> %205, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %207 = add <4 x i32> %206, %188
  %208 = bitcast <4 x i32> %207 to <2 x i64>
  %209 = extractelement <2 x i64> %208, i32 0
  %210 = extractelement <2 x i64> %208, i32 1
  %211 = bitcast i64 %209 to <2 x i32>
  %212 = shufflevector <2 x i32> %211, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %213 = bitcast i64 %210 to <2 x i32>
  %214 = shufflevector <2 x i32> %213, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %215 = shufflevector <4 x i32> %212, <4 x i32> %214, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %216 = add <4 x i32> %152, %80
  %217 = bitcast <4 x i32> %216 to <2 x i64>
  %218 = extractelement <2 x i64> %217, i32 0
  %219 = extractelement <2 x i64> %217, i32 1
  %220 = bitcast i64 %218 to <2 x i32>
  %221 = shufflevector <2 x i32> %220, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %222 = bitcast i64 %219 to <2 x i32>
  %223 = shufflevector <2 x i32> %222, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %224 = shufflevector <4 x i32> %221, <4 x i32> %223, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %225 = add <4 x i32> %224, %215
  %226 = bitcast <4 x i32> %225 to <2 x i64>
  %227 = extractelement <2 x i64> %226, i32 0
  %228 = extractelement <2 x i64> %226, i32 1
  %229 = bitcast i64 %227 to <2 x i32>
  %230 = shufflevector <2 x i32> %229, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %231 = bitcast i64 %228 to <2 x i32>
  %232 = shufflevector <2 x i32> %231, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %233 = shufflevector <4 x i32> %230, <4 x i32> %232, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %234 = lshr <4 x i32> %233, <i32 4, i32 4, i32 4, i32 4>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = extractelement <2 x i64> %235, i32 0
  %237 = extractelement <2 x i64> %235, i32 1
  %238 = bitcast i64 %236 to <2 x i32>
  %239 = shufflevector <2 x i32> %238, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %240 = bitcast i64 %237 to <2 x i32>
  %241 = shufflevector <2 x i32> %240, <2 x i32> undef, <4 x i32> <i32 undef, i32 undef, i32 0, i32 1>
  %242 = shufflevector <4 x i32> %239, <4 x i32> %241, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %243 = trunc <4 x i32> %242 to <4 x i16>
  %244 = extractelement <4 x i16> %243, i32 0
  %245 = extractelement <4 x i16> %243, i32 1
  %246 = extractelement <4 x i16> %243, i32 2
  %247 = extractelement <4 x i16> %243, i32 3
  %248 = zext i16 %247 to i64
  %249 = shl nuw i64 %248, 48
  %250 = zext i16 %246 to i64
  %251 = shl nuw nsw i64 %250, 32
  %252 = zext i16 %245 to i64
  %253 = shl nuw nsw i64 %252, 16
  %254 = zext i16 %244 to i64
  %255 = or i64 %253, %254
  %256 = or i64 %255, %251
  %257 = or i64 %256, %249
  %258 = getelementptr inbounds i64, i64* %7, i64 %76
  store i64 %257, i64* %258, align 8
  %259 = add nuw nsw i64 %76, 1
  %260 = icmp eq i64 %259, %73
  br i1 %260, label %74, label %75
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @_ZN8SkMipmap17ComputeLevelCountEii(i32, i32) local_unnamed_addr #5 align 2 {
  %3 = icmp slt i32 %0, 1
  %4 = icmp slt i32 %1, 1
  %5 = or i1 %3, %4
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = icmp slt i32 %0, %1
  %8 = select i1 %7, i32 %1, i32 %0
  %9 = icmp slt i32 %8, 2
  br i1 %9, label %13, label %10

10:                                               ; preds = %6
  %11 = tail call i32 @llvm.ctlz.i32(i32 %8, i1 false) #17, !range !2
  %12 = sub nsw i32 31, %11
  br label %13

13:                                               ; preds = %10, %6, %2
  %14 = phi i32 [ 0, %2 ], [ %12, %10 ], [ 0, %6 ]
  ret i32 %14
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden i64 @_ZN8SkMipmap16ComputeLevelSizeEiii(i32, i32, i32) local_unnamed_addr #5 align 2 {
  %4 = icmp slt i32 %0, 1
  %5 = icmp slt i32 %1, 1
  %6 = or i1 %4, %5
  br i1 %6, label %31, label %7

7:                                                ; preds = %3
  %8 = icmp slt i32 %0, %1
  %9 = select i1 %8, i32 %1, i32 %0
  %10 = icmp slt i32 %9, 2
  br i1 %10, label %14, label %11

11:                                               ; preds = %7
  %12 = tail call i32 @llvm.ctlz.i32(i32 %9, i1 false) #17, !range !2
  %13 = sub nsw i32 31, %12
  br label %14

14:                                               ; preds = %7, %11
  %15 = phi i32 [ %13, %11 ], [ 0, %7 ]
  %16 = icmp sle i32 %15, %2
  %17 = icmp slt i32 %2, 0
  %18 = or i1 %17, %16
  br i1 %18, label %31, label %19

19:                                               ; preds = %14
  %20 = add nuw nsw i32 %2, 1
  %21 = lshr i32 %0, %20
  %22 = icmp sgt i32 %21, 1
  %23 = select i1 %22, i32 %21, i32 1
  %24 = lshr i32 %1, %20
  %25 = icmp sgt i32 %24, 1
  %26 = select i1 %25, i32 %24, i32 1
  %27 = zext i32 %26 to i64
  %28 = shl nuw nsw i64 %27, 32
  %29 = zext i32 %23 to i64
  %30 = or i64 %28, %29
  br label %31

31:                                               ; preds = %14, %3, %19
  %32 = phi i64 [ %30, %19 ], [ 0, %3 ], [ 0, %14 ]
  ret i64 %32
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden float @_ZN8SkMipmap12ComputeLevelE6SkSize(<2 x float>) local_unnamed_addr #7 align 2 {
  %2 = extractelement <2 x float> %0, i32 0
  %3 = extractelement <2 x float> %0, i32 1
  %4 = fmul float %2, %3
  %5 = tail call float @sqrtf(float %4) #17
  %6 = fcmp oge float %5, 1.000000e+00
  %7 = fcmp ole float %5, 0.000000e+00
  %8 = or i1 %6, %7
  br i1 %8, label %20, label %9

9:                                                ; preds = %1
  %10 = bitcast float %5 to i32
  %11 = and i32 %10, 2139095040
  %12 = icmp eq i32 %11, 2139095040
  br i1 %12, label %20, label %13

13:                                               ; preds = %9
  %14 = tail call float @log2f(float %5) #17
  %15 = fsub float -0.000000e+00, %14
  %16 = bitcast float %15 to i32
  %17 = and i32 %16, 2139095040
  %18 = icmp eq i32 %17, 2139095040
  %19 = select i1 %18, float -1.000000e+00, float %15
  br label %20

20:                                               ; preds = %9, %1, %13
  %21 = phi float [ %19, %13 ], [ -1.000000e+00, %9 ], [ -1.000000e+00, %1 ]
  ret float %21
}

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare float @log2f(float) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMipmap12extractLevelE6SkSizePNS_5LevelE(%class.SkMipmap* nocapture readonly, <2 x float>, %"struct.SkMipmap::Level"*) local_unnamed_addr #2 align 2 {
  %4 = alloca %class.sk_sp, align 8
  %5 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 3
  %6 = load %"struct.SkMipmap::Level"*, %"struct.SkMipmap::Level"** %5, align 8
  %7 = icmp eq %"struct.SkMipmap::Level"* %6, null
  br i1 %7, label %100, label %8

8:                                                ; preds = %3
  %9 = extractelement <2 x float> %1, i32 0
  %10 = extractelement <2 x float> %1, i32 1
  %11 = fmul float %9, %10
  %12 = tail call float @sqrtf(float %11) #17
  %13 = fcmp oge float %12, 1.000000e+00
  %14 = fcmp ole float %12, 0.000000e+00
  %15 = or i1 %13, %14
  br i1 %15, label %27, label %16

16:                                               ; preds = %8
  %17 = bitcast float %12 to i32
  %18 = and i32 %17, 2139095040
  %19 = icmp eq i32 %18, 2139095040
  br i1 %19, label %27, label %20

20:                                               ; preds = %16
  %21 = tail call float @log2f(float %12) #17
  %22 = fsub float -0.000000e+00, %21
  %23 = bitcast float %22 to i32
  %24 = and i32 %23, 2139095040
  %25 = icmp eq i32 %24, 2139095040
  %26 = select i1 %25, float -1.000000e+00, float %22
  br label %27

27:                                               ; preds = %8, %16, %20
  %28 = phi float [ %26, %20 ], [ -1.000000e+00, %16 ], [ -1.000000e+00, %8 ]
  %29 = tail call float @llvm.floor.f32(float %28)
  %30 = fcmp olt float %29, 0x41DFFFFFE0000000
  %31 = select i1 %30, float %29, float 0x41DFFFFFE0000000
  %32 = fcmp ogt float %31, 0xC1DFFFFFE0000000
  %33 = select i1 %32, float %31, float 0xC1DFFFFFE0000000
  %34 = fptosi float %33 to i32
  %35 = icmp slt i32 %34, 1
  br i1 %35, label %100, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 4
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq %"struct.SkMipmap::Level"* %2, null
  br i1 %39, label %100, label %40

40:                                               ; preds = %36
  %41 = icmp slt i32 %38, %34
  %42 = select i1 %41, i32 %38, i32 %34
  %43 = load %"struct.SkMipmap::Level"*, %"struct.SkMipmap::Level"** %5, align 8
  %44 = add nsw i32 %42, -1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %43, i64 %45
  %47 = bitcast %"struct.SkMipmap::Level"* %2 to i8*
  %48 = bitcast %"struct.SkMipmap::Level"* %46 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %47, i8* align 8 %48, i64 16, i1 false) #17
  %49 = icmp eq %"struct.SkMipmap::Level"* %46, %2
  br i1 %49, label %67, label %50

50:                                               ; preds = %40
  %51 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %43, i64 %45, i32 0, i32 2, i32 0, i32 0, i32 0
  %52 = load %class.SkColorSpace*, %class.SkColorSpace** %51, align 8
  %53 = icmp eq %class.SkColorSpace* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %50
  %55 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = atomicrmw add i32* %55, i32 1 monotonic
  br label %57

57:                                               ; preds = %54, %50
  %58 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %59 = load %class.SkColorSpace*, %class.SkColorSpace** %58, align 8
  store %class.SkColorSpace* %52, %class.SkColorSpace** %58, align 8
  %60 = icmp eq %class.SkColorSpace* %59, null
  br i1 %60, label %67, label %61

61:                                               ; preds = %57
  %62 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %63 = atomicrmw add i32* %62, i32 -1 acq_rel
  %64 = icmp eq i32 %63, 1
  br i1 %64, label %65, label %67

65:                                               ; preds = %61
  %66 = bitcast %class.SkColorSpace* %59 to i8*
  tail call void @_ZdlPv(i8* %66) #18
  br label %67

67:                                               ; preds = %40, %57, %61, %65
  %68 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0, i32 2, i32 0, i32 1
  %69 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %43, i64 %45, i32 0, i32 2, i32 0, i32 1
  %70 = bitcast i32* %69 to i64*
  %71 = bitcast i32* %68 to i64*
  %72 = load i64, i64* %70, align 8
  store i64 %72, i64* %71, align 8
  %73 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0, i32 2, i32 1
  %74 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %43, i64 %45, i32 0, i32 2, i32 1
  %75 = bitcast %struct.SkISize* %74 to i64*
  %76 = bitcast %struct.SkISize* %73 to i64*
  %77 = load i64, i64* %75, align 8
  store i64 %77, i64* %76, align 8
  %78 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 1
  %79 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %43, i64 %45, i32 1
  %80 = bitcast %struct.SkSize* %79 to i64*
  %81 = bitcast %struct.SkSize* %78 to i64*
  %82 = load i64, i64* %80, align 8
  store i64 %82, i64* %81, align 8
  %83 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0
  %84 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %85 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 2, i32 0
  %86 = load %class.SkColorSpace*, %class.SkColorSpace** %85, align 8
  %87 = icmp eq %class.SkColorSpace* %86, null
  br i1 %87, label %91, label %88

88:                                               ; preds = %67
  %89 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %86, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = atomicrmw add i32* %89, i32 1 monotonic
  br label %91

91:                                               ; preds = %67, %88
  store %class.SkColorSpace* %86, %class.SkColorSpace** %84, align 8
  call void @_ZN8SkPixmap13setColorSpaceE5sk_spI12SkColorSpaceE(%class.SkPixmap* %83, %class.sk_sp* nonnull %4) #17
  %92 = load %class.SkColorSpace*, %class.SkColorSpace** %84, align 8
  %93 = icmp eq %class.SkColorSpace* %92, null
  br i1 %93, label %100, label %94

94:                                               ; preds = %91
  %95 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %92, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %96 = atomicrmw add i32* %95, i32 -1 acq_rel
  %97 = icmp eq i32 %96, 1
  br i1 %97, label %98, label %100

98:                                               ; preds = %94
  %99 = bitcast %class.SkColorSpace* %92 to i8*
  call void @_ZdlPv(i8* %99) #18
  br label %100

100:                                              ; preds = %98, %94, %91, %27, %36, %3
  %101 = phi i1 [ false, %3 ], [ false, %27 ], [ true, %36 ], [ true, %91 ], [ true, %94 ], [ true, %98 ]
  ret i1 %101
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #9

declare void @_ZN8SkPixmap13setColorSpaceE5sk_spI12SkColorSpaceE(%class.SkPixmap*, %class.sk_sp*) local_unnamed_addr #10

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK8SkMipmap17validForRootLevelERK11SkImageInfo(%class.SkMipmap* nocapture readonly, %struct.SkImageInfo* nocapture readonly dereferenceable(24)) local_unnamed_addr #11 align 2 {
  %3 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 3
  %4 = load %"struct.SkMipmap::Level"*, %"struct.SkMipmap::Level"** %3, align 8
  %5 = icmp eq %"struct.SkMipmap::Level"* %4, null
  br i1 %5, label %51, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 1
  %8 = bitcast %struct.SkISize* %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = trunc i64 %9 to i32
  %11 = lshr i64 %9, 32
  %12 = trunc i64 %11 to i32
  %13 = icmp slt i32 %10, 2
  %14 = icmp slt i32 %12, 2
  %15 = and i1 %13, %14
  br i1 %15, label %51, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %4, i64 0, i32 0, i32 2, i32 1, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = ashr i32 %10, 1
  %20 = icmp sgt i32 %19, 1
  %21 = select i1 %20, i32 %19, i32 1
  %22 = icmp eq i32 %18, %21
  br i1 %22, label %23, label %51

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %4, i64 0, i32 0, i32 2, i32 1, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = ashr i32 %12, 1
  %27 = icmp sgt i32 %26, 1
  %28 = select i1 %27, i32 %26, i32 1
  %29 = icmp eq i32 %25, %28
  br i1 %29, label %30, label %51

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %4, i64 0, i32 0, i32 2, i32 0, i32 2
  %32 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %51

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %4, i64 0, i32 0, i32 2, i32 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 1
  %39 = load i32, i32* %38, align 8
  %40 = icmp eq i32 %37, %39
  %41 = getelementptr inbounds %struct.SkImageInfo, %struct.SkImageInfo* %1, i64 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  br label %45

43:                                               ; preds = %47
  %44 = icmp slt i32 %50, %33
  br i1 %44, label %45, label %51

45:                                               ; preds = %35, %43
  %46 = phi i32 [ 0, %35 ], [ %50, %43 ]
  br i1 %40, label %47, label %51

47:                                               ; preds = %45
  %48 = load i32, i32* %31, align 4
  %49 = icmp eq i32 %48, %42
  %50 = add nuw nsw i32 %46, 1
  br i1 %49, label %43, label %51

51:                                               ; preds = %45, %47, %43, %30, %6, %23, %16, %2
  %52 = phi i1 [ false, %2 ], [ false, %23 ], [ false, %16 ], [ false, %6 ], [ true, %30 ], [ false, %45 ], [ false, %47 ], [ true, %43 ]
  ret i1 %52
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK8SkMipmap11countLevelsEv(%class.SkMipmap* nocapture readonly) local_unnamed_addr #12 align 2 {
  %2 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkMipmap* @_ZN8SkMipmap5BuildERK8SkBitmapPFP19SkDiscardableMemorymE(%class.SkBitmap* dereferenceable(56), %class.SkDiscardableMemory* (i64)*) local_unnamed_addr #4 align 2 {
  %3 = alloca %class.SkPixmap, align 8
  %4 = bitcast %class.SkPixmap* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 40, i1 false) #17
  %5 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %0, %class.SkPixmap* nonnull %3) #17
  br i1 %5, label %6, label %8

6:                                                ; preds = %2
  %7 = call %class.SkMipmap* @_ZN8SkMipmap5BuildERK8SkPixmapPFP19SkDiscardableMemorymEb(%class.SkPixmap* nonnull dereferenceable(40) %3, %class.SkDiscardableMemory* (i64)* %1, i1 zeroext true)
  br label %8

8:                                                ; preds = %2, %6
  %9 = phi %class.SkMipmap* [ %7, %6 ], [ null, %2 ]
  %10 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %11 = load %class.SkColorSpace*, %class.SkColorSpace** %10, align 8
  %12 = icmp eq %class.SkColorSpace* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = atomicrmw add i32* %14, i32 -1 acq_rel
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  %18 = bitcast %class.SkColorSpace* %11 to i8*
  call void @_ZdlPv(i8* %18) #18
  br label %19

19:                                               ; preds = %8, %13, %17
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #17
  ret %class.SkMipmap* %9
}

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK8SkMipmap8getLevelEiPNS_5LevelE(%class.SkMipmap* nocapture readonly, i32, %"struct.SkMipmap::Level"*) local_unnamed_addr #4 align 2 {
  %4 = alloca %class.sk_sp, align 8
  %5 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 3
  %6 = load %"struct.SkMipmap::Level"*, %"struct.SkMipmap::Level"** %5, align 8
  %7 = icmp eq %"struct.SkMipmap::Level"* %6, null
  %8 = icmp slt i32 %1, 0
  %9 = or i1 %8, %7
  br i1 %9, label %72, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp sgt i32 %12, %1
  br i1 %13, label %14, label %72

14:                                               ; preds = %10
  %15 = icmp eq %"struct.SkMipmap::Level"* %2, null
  br i1 %15, label %72, label %16

16:                                               ; preds = %14
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 %17
  %19 = bitcast %"struct.SkMipmap::Level"* %2 to i8*
  %20 = bitcast %"struct.SkMipmap::Level"* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 %20, i64 16, i1 false) #17
  %21 = icmp eq %"struct.SkMipmap::Level"* %18, %2
  br i1 %21, label %39, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 %17, i32 0, i32 2, i32 0, i32 0, i32 0
  %24 = load %class.SkColorSpace*, %class.SkColorSpace** %23, align 8
  %25 = icmp eq %class.SkColorSpace* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = atomicrmw add i32* %27, i32 1 monotonic
  br label %29

29:                                               ; preds = %26, %22
  %30 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  %31 = load %class.SkColorSpace*, %class.SkColorSpace** %30, align 8
  store %class.SkColorSpace* %24, %class.SkColorSpace** %30, align 8
  %32 = icmp eq %class.SkColorSpace* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 -1 acq_rel
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %39

37:                                               ; preds = %33
  %38 = bitcast %class.SkColorSpace* %31 to i8*
  tail call void @_ZdlPv(i8* %38) #18
  br label %39

39:                                               ; preds = %16, %29, %33, %37
  %40 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0, i32 2, i32 0, i32 1
  %41 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 %17, i32 0, i32 2, i32 0, i32 1
  %42 = bitcast i32* %41 to i64*
  %43 = bitcast i32* %40 to i64*
  %44 = load i64, i64* %42, align 8
  store i64 %44, i64* %43, align 8
  %45 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0, i32 2, i32 1
  %46 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 %17, i32 0, i32 2, i32 1
  %47 = bitcast %struct.SkISize* %46 to i64*
  %48 = bitcast %struct.SkISize* %45 to i64*
  %49 = load i64, i64* %47, align 8
  store i64 %49, i64* %48, align 8
  %50 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 1
  %51 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 %17, i32 1
  %52 = bitcast %struct.SkSize* %51 to i64*
  %53 = bitcast %struct.SkSize* %50 to i64*
  %54 = load i64, i64* %52, align 8
  store i64 %54, i64* %53, align 8
  %55 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %2, i64 0, i32 0
  %56 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %57 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 2, i32 0
  %58 = load %class.SkColorSpace*, %class.SkColorSpace** %57, align 8
  %59 = icmp eq %class.SkColorSpace* %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %39
  %61 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = atomicrmw add i32* %61, i32 1 monotonic
  br label %63

63:                                               ; preds = %39, %60
  store %class.SkColorSpace* %58, %class.SkColorSpace** %56, align 8
  call void @_ZN8SkPixmap13setColorSpaceE5sk_spI12SkColorSpaceE(%class.SkPixmap* %55, %class.sk_sp* nonnull %4) #17
  %64 = load %class.SkColorSpace*, %class.SkColorSpace** %56, align 8
  %65 = icmp eq %class.SkColorSpace* %64, null
  br i1 %65, label %72, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %68 = atomicrmw add i32* %67, i32 -1 acq_rel
  %69 = icmp eq i32 %68, 1
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = bitcast %class.SkColorSpace* %64 to i8*
  call void @_ZdlPv(i8* %71) #18
  br label %72

72:                                               ; preds = %70, %66, %63, %14, %10, %3
  %73 = phi i1 [ false, %3 ], [ false, %10 ], [ true, %14 ], [ true, %63 ], [ true, %66 ], [ true, %70 ]
  ret i1 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK8SkMipmap9serializeEv(%class.sk_sp.8* noalias sret, %class.SkMipmap* nocapture readonly) local_unnamed_addr #4 align 2 {
  %3 = alloca %class.SkDynamicMemoryWStream, align 8
  %4 = alloca %"struct.SkPngEncoder::Options", align 8
  %5 = alloca %class.SkBinaryWriteBuffer, align 8
  %6 = alloca %"struct.SkMipmap::Level", align 8
  %7 = alloca %class.sk_sp.8, align 8
  %8 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %1, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = bitcast %class.SkBinaryWriteBuffer* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 128, i1 false)
  call void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer* nonnull %5) #17
  %11 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %5, i64 0, i32 0
  %12 = bitcast %class.SkBinaryWriteBuffer* %5 to void (%class.SkWriteBuffer*, i32)***
  %13 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %12, align 8
  %14 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %13, i64 7
  %15 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %14, align 8
  call void %15(%class.SkWriteBuffer* nonnull %11, i32 %9) #17
  %16 = icmp sgt i32 %9, 0
  br i1 %16, label %17, label %97

17:                                               ; preds = %2
  %18 = bitcast %"struct.SkMipmap::Level"* %6 to i8*
  %19 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 0, i32 1, i32 0
  %20 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 0, i32 1, i32 1
  %21 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %0, i64 0, i32 0
  %22 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 0, i32 0
  %23 = bitcast %class.sk_sp.8* %7 to i8*
  %24 = bitcast %class.SkDynamicMemoryWStream* %3 to i8*
  %25 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %3, i64 0, i32 0, i32 0
  %26 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %3, i64 0, i32 1
  %27 = bitcast %"struct.SkDynamicMemoryWStream::Block"** %26 to i8*
  %28 = getelementptr inbounds %class.SkDynamicMemoryWStream, %class.SkDynamicMemoryWStream* %3, i64 0, i32 0
  %29 = bitcast %"struct.SkPngEncoder::Options"* %4 to i8*
  %30 = getelementptr inbounds %"struct.SkPngEncoder::Options", %"struct.SkPngEncoder::Options"* %4, i64 0, i32 0
  %31 = getelementptr inbounds %"struct.SkPngEncoder::Options", %"struct.SkPngEncoder::Options"* %4, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.SkPngEncoder::Options", %"struct.SkPngEncoder::Options"* %4, i64 0, i32 2, i32 0
  %33 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %7, i64 0, i32 0
  %34 = bitcast %class.SkBinaryWriteBuffer* %5 to void (%class.SkWriteBuffer*, i8*, i64)***
  %35 = getelementptr inbounds %"struct.SkMipmap::Level", %"struct.SkMipmap::Level"* %6, i64 0, i32 0, i32 2, i32 0, i32 0, i32 0
  br label %38

36:                                               ; preds = %94
  %37 = icmp eq i32 %96, %9
  br i1 %37, label %97, label %38

38:                                               ; preds = %36, %17
  %39 = phi i32 [ 0, %17 ], [ %96, %36 ]
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %18) #17
  store float 0xFFFFFFFFE0000000, float* %19, align 8
  store float 0xFFFFFFFFE0000000, float* %20, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 0, i64 40, i1 false) #17
  %40 = call zeroext i1 @_ZNK8SkMipmap8getLevelEiPNS_5LevelE(%class.SkMipmap* %1, i32 %39, %"struct.SkMipmap::Level"* nonnull %6)
  br i1 %40, label %41, label %83

41:                                               ; preds = %38
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #17
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #17, !noalias !428
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV22SkDynamicMemoryWStream, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %25, align 8, !noalias !428
  call void @llvm.memset.p0i8.i64(i8* align 8 %27, i8 0, i64 24, i1 false) #17, !noalias !428
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #17, !noalias !428
  store i32 248, i32* %30, align 8, !noalias !428
  store i32 6, i32* %31, align 4, !noalias !428
  store %class.SkDataTable* null, %class.SkDataTable** %32, align 8, !noalias !428
  %42 = call zeroext i1 @_ZN12SkPngEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %28, %class.SkPixmap* nonnull dereferenceable(40) %22, %"struct.SkPngEncoder::Options"* nonnull dereferenceable(16) %4) #17, !noalias !428
  %43 = load %class.SkDataTable*, %class.SkDataTable** %32, align 8, !noalias !428
  %44 = icmp eq %class.SkDataTable* %43, null
  br i1 %44, label %55, label %45

45:                                               ; preds = %41
  %46 = getelementptr inbounds %class.SkDataTable, %class.SkDataTable* %43, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = atomicrmw add i32* %46, i32 -1 acq_rel
  %48 = icmp eq i32 %47, 1
  br i1 %48, label %49, label %55

49:                                               ; preds = %45
  %50 = bitcast %class.SkDataTable* %43 to %class.SkRefCntBase*
  %51 = bitcast %class.SkDataTable* %43 to void (%class.SkRefCntBase*)***
  %52 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %51, align 8
  %53 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %52, i64 2
  %54 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %53, align 8
  call void %54(%class.SkRefCntBase* nonnull %50) #17
  br label %55

55:                                               ; preds = %49, %45, %41
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #17, !noalias !428
  br i1 %42, label %56, label %57

56:                                               ; preds = %55
  call void @_ZN22SkDynamicMemoryWStream12detachAsDataEv(%class.sk_sp.8* nonnull sret %7, %class.SkDynamicMemoryWStream* nonnull %3) #17
  br label %58

57:                                               ; preds = %55
  store %class.SkData* null, %class.SkData** %33, align 8, !alias.scope !428
  br label %58

58:                                               ; preds = %56, %57
  call void @_ZN22SkDynamicMemoryWStreamD1Ev(%class.SkDynamicMemoryWStream* nonnull %3) #17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #17, !noalias !428
  %59 = load %class.SkData*, %class.SkData** %33, align 8
  %60 = icmp eq %class.SkData* %59, null
  br i1 %60, label %61, label %65

61:                                               ; preds = %58
  %62 = load void (%class.SkWriteBuffer*, i32)**, void (%class.SkWriteBuffer*, i32)*** %12, align 8
  %63 = getelementptr inbounds void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %62, i64 7
  %64 = load void (%class.SkWriteBuffer*, i32)*, void (%class.SkWriteBuffer*, i32)** %63, align 8
  call void %64(%class.SkWriteBuffer* nonnull %11, i32 0) #17
  br label %73

65:                                               ; preds = %58
  %66 = getelementptr inbounds %class.SkData, %class.SkData* %59, i64 0, i32 3
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %class.SkData, %class.SkData* %59, i64 0, i32 4
  %69 = load i64, i64* %68, align 8
  %70 = load void (%class.SkWriteBuffer*, i8*, i64)**, void (%class.SkWriteBuffer*, i8*, i64)*** %34, align 8
  %71 = getelementptr inbounds void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %70, i64 3
  %72 = load void (%class.SkWriteBuffer*, i8*, i64)*, void (%class.SkWriteBuffer*, i8*, i64)** %71, align 8
  call void %72(%class.SkWriteBuffer* nonnull %11, i8* %67, i64 %69) #17
  br label %73

73:                                               ; preds = %61, %65
  %74 = load %class.SkData*, %class.SkData** %33, align 8
  %75 = icmp eq %class.SkData* %74, null
  br i1 %75, label %82, label %76

76:                                               ; preds = %73
  %77 = getelementptr inbounds %class.SkData, %class.SkData* %74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %78 = atomicrmw add i32* %77, i32 -1 acq_rel
  %79 = icmp eq i32 %78, 1
  br i1 %79, label %80, label %82

80:                                               ; preds = %76
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %74) #17
  %81 = bitcast %class.SkData* %74 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %81) #17
  br label %82

82:                                               ; preds = %73, %76, %80
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #17
  br label %84

83:                                               ; preds = %38
  store %class.SkData* null, %class.SkData** %21, align 8
  br label %84

84:                                               ; preds = %82, %83
  %85 = phi i32 [ 0, %82 ], [ 1, %83 ]
  %86 = load %class.SkColorSpace*, %class.SkColorSpace** %35, align 8
  %87 = icmp eq %class.SkColorSpace* %86, null
  br i1 %87, label %94, label %88

88:                                               ; preds = %84
  %89 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %86, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = atomicrmw add i32* %89, i32 -1 acq_rel
  %91 = icmp eq i32 %90, 1
  br i1 %91, label %92, label %94

92:                                               ; preds = %88
  %93 = bitcast %class.SkColorSpace* %86 to i8*
  call void @_ZdlPv(i8* %93) #18
  br label %94

94:                                               ; preds = %84, %88, %92
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %18) #17
  %95 = icmp eq i32 %85, 0
  %96 = add nuw nsw i32 %39, 1
  br i1 %95, label %36, label %99

97:                                               ; preds = %36, %2
  %98 = getelementptr inbounds %class.SkBinaryWriteBuffer, %class.SkBinaryWriteBuffer* %5, i64 0, i32 3
  call void @_ZNK10SkWriter3214snapshotAsDataEv(%class.sk_sp.8* sret %0, %class.SkWriter32* %98) #17
  br label %99

99:                                               ; preds = %94, %97
  call void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer* nonnull %5) #17
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #17
  ret void
}

declare void @_ZN19SkBinaryWriteBufferC1Ev(%class.SkBinaryWriteBuffer*) unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZN19SkBinaryWriteBufferD1Ev(%class.SkBinaryWriteBuffer*) unnamed_addr #13

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN8SkMipmap11DeserializeEP15SkMipmapBuilderPKvm(%class.SkMipmapBuilder*, i8*, i64) local_unnamed_addr #4 align 2 {
  %4 = alloca %class.SkReadBuffer, align 8
  %5 = alloca %class.sk_sp.8, align 8
  %6 = alloca %class.SkPixmap, align 8
  %7 = bitcast %class.SkReadBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %7) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 -86, i64 136, i1 false)
  %8 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 6
  store %class.sk_sp.30* null, %class.sk_sp.30** %8, align 8
  %9 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 7
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 9
  store void (%class.sk_sp.31*, %class.SkReadBuffer*)** null, void (%class.sk_sp.31*, %class.SkReadBuffer*)*** %10, align 8
  %11 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 10
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 44, i1 false) #17
  %13 = bitcast %struct.SkDeserialProcs* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 49, i1 false) #17
  call void @_ZN12SkReadBuffer9setMemoryEPKvm(%class.SkReadBuffer* nonnull %4, i8* %1, i64 %2) #17
  %14 = call i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer* nonnull %4) #17
  %15 = call i32 @_ZNK15SkMipmapBuilder11countLevelsEv(%class.SkMipmapBuilder* %0) #17
  %16 = icmp eq i32 %15, %14
  br i1 %16, label %17, label %89

17:                                               ; preds = %3
  %18 = icmp sgt i32 %14, 0
  br i1 %18, label %19, label %85

19:                                               ; preds = %17
  %20 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %5, i64 0, i32 0
  %21 = bitcast %class.SkPixmap* %6 to i8*
  %22 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 2, i32 1
  %23 = bitcast %struct.SkISize* %22 to i64*
  %24 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 2
  %25 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 0
  %26 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 1
  %27 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  br label %30

28:                                               ; preds = %78
  %29 = icmp eq i32 %84, %14
  br i1 %29, label %85, label %30

30:                                               ; preds = %28, %19
  %31 = phi i32 [ 0, %19 ], [ %84, %28 ]
  %32 = call i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer* nonnull %4) #17
  %33 = sext i32 %32 to i64
  %34 = call i8* @_ZN12SkReadBuffer4skipEm(%class.SkReadBuffer* nonnull %4, i64 %33) #17
  %35 = icmp eq i8* %34, null
  br i1 %35, label %89, label %36

36:                                               ; preds = %30
  call void @_ZN6SkData12MakeWithProcEPKvmPFvS1_PvES2_(%class.sk_sp.8* nonnull sret %5, i8* nonnull %34, i64 %33, void (i8*, i8*)* null, i8* null) #17
  %37 = call %class.SkImageGenerator* @_ZN16SkImageGenerator15MakeFromEncodedE5sk_spI6SkDataE(%class.sk_sp.8* nonnull %5) #17
  %38 = load %class.SkData*, %class.SkData** %20, align 8
  %39 = icmp eq %class.SkData* %38, null
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %class.SkData, %class.SkData* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = atomicrmw add i32* %41, i32 -1 acq_rel
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %46

44:                                               ; preds = %40
  call void @_ZN6SkDataD1Ev(%class.SkData* nonnull %38) #17
  %45 = bitcast %class.SkData* %38 to i8*
  call void @_ZN6SkDatadlEPv(i8* nonnull %45) #17
  br label %46

46:                                               ; preds = %36, %40, %44
  %47 = icmp eq %class.SkImageGenerator* %37, null
  br i1 %47, label %89, label %48

48:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %21) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 -86, i64 40, i1 false)
  call void @_ZNK15SkMipmapBuilder5levelEi(%class.SkPixmap* nonnull sret %6, %class.SkMipmapBuilder* %0, i32 %31) #17
  %49 = getelementptr inbounds %class.SkImageGenerator, %class.SkImageGenerator* %37, i64 0, i32 1, i32 1
  %50 = bitcast %struct.SkISize* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = trunc i64 %51 to i32
  %53 = lshr i64 %51, 32
  %54 = trunc i64 %53 to i32
  %55 = load i64, i64* %23, align 8
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %55, 32
  %58 = trunc i64 %57 to i32
  %59 = icmp ne i32 %52, %56
  %60 = icmp ne i32 %54, %58
  %61 = or i1 %59, %60
  br i1 %61, label %68, label %62

62:                                               ; preds = %48
  %63 = load i8*, i8** %25, align 8
  %64 = load i64, i64* %26, align 8
  %65 = call zeroext i1 @_ZN16SkImageGenerator9getPixelsERK11SkImageInfoPvm(%class.SkImageGenerator* nonnull %37, %struct.SkImageInfo* dereferenceable(24) %24, i8* %63, i64 %64) #17
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  br label %68

68:                                               ; preds = %48, %62
  %69 = phi i32 [ %67, %62 ], [ 1, %48 ]
  %70 = load %class.SkColorSpace*, %class.SkColorSpace** %27, align 8
  %71 = icmp eq %class.SkColorSpace* %70, null
  br i1 %71, label %78, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = atomicrmw add i32* %73, i32 -1 acq_rel
  %75 = icmp eq i32 %74, 1
  br i1 %75, label %76, label %78

76:                                               ; preds = %72
  %77 = bitcast %class.SkColorSpace* %70 to i8*
  call void @_ZdlPv(i8* %77) #18
  br label %78

78:                                               ; preds = %76, %72, %68
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %21) #17
  %79 = bitcast %class.SkImageGenerator* %37 to void (%class.SkImageGenerator*)***
  %80 = load void (%class.SkImageGenerator*)**, void (%class.SkImageGenerator*)*** %79, align 8
  %81 = getelementptr inbounds void (%class.SkImageGenerator*)*, void (%class.SkImageGenerator*)** %80, i64 1
  %82 = load void (%class.SkImageGenerator*)*, void (%class.SkImageGenerator*)** %81, align 8
  call void %82(%class.SkImageGenerator* nonnull %37) #17
  %83 = icmp eq i32 %69, 0
  %84 = add nuw nsw i32 %31, 1
  br i1 %83, label %28, label %89

85:                                               ; preds = %28, %17
  %86 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 13
  %87 = load i8, i8* %86, align 8, !range !431
  %88 = icmp eq i8 %87, 0
  br label %89

89:                                               ; preds = %46, %30, %78, %3, %85
  %90 = phi i1 [ %88, %85 ], [ false, %3 ], [ false, %78 ], [ false, %30 ], [ false, %46 ]
  %91 = getelementptr inbounds %class.SkReadBuffer, %class.SkReadBuffer* %4, i64 0, i32 3, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %92 = load %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"*, %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"** %91, align 8
  store %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* null, %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"** %91, align 8
  %93 = icmp eq %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %89
  %95 = bitcast %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* %92 to i8*
  call void @_ZdaPv(i8* %95) #18
  br label %96

96:                                               ; preds = %89, %94
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %7) #17
  ret i1 %90
}

declare i32 @_ZN12SkReadBuffer6read32Ev(%class.SkReadBuffer*) local_unnamed_addr #10

declare i32 @_ZNK15SkMipmapBuilder11countLevelsEv(%class.SkMipmapBuilder*) local_unnamed_addr #10

declare i8* @_ZN12SkReadBuffer4skipEm(%class.SkReadBuffer*, i64) local_unnamed_addr #10

declare %class.SkImageGenerator* @_ZN16SkImageGenerator15MakeFromEncodedE5sk_spI6SkDataE(%class.sk_sp.8*) local_unnamed_addr #10

declare void @_ZN6SkData12MakeWithProcEPKvmPFvS1_PvES2_(%class.sk_sp.8* sret, i8*, i64, void (i8*, i8*)*, i8*) local_unnamed_addr #10

declare void @_ZNK15SkMipmapBuilder5levelEi(%class.SkPixmap* sret, %class.SkMipmapBuilder*, i32) local_unnamed_addr #10

declare i32 @_Z24SkColorTypeBytesPerPixel11SkColorType(i32) local_unnamed_addr #10

declare void @_ZN12SkCachedDataC2EmP19SkDiscardableMemory(%class.SkCachedData*, i64, %class.SkDiscardableMemory*) unnamed_addr #10

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkMipmapD2Ev(%class.SkMipmap*) unnamed_addr #14 comdat align 2 {
  %2 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV8SkMipmap, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 2, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #18
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = bitcast %class.SkMipmap* %0 to %class.SkCachedData*
  tail call void @_ZN12SkCachedDataD2Ev(%class.SkCachedData* %13) #17
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkMipmapD0Ev(%class.SkMipmap*) unnamed_addr #14 comdat align 2 {
  %2 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTV8SkMipmap, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 2, i32 0
  %4 = load %class.SkColorSpace*, %class.SkColorSpace** %3, align 8
  %5 = icmp eq %class.SkColorSpace* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i32* %7, i32 -1 acq_rel
  %9 = icmp eq i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %6
  %11 = bitcast %class.SkColorSpace* %4 to i8*
  tail call void @_ZdlPv(i8* %11) #18
  br label %12

12:                                               ; preds = %1, %6, %10
  %13 = bitcast %class.SkMipmap* %0 to %class.SkCachedData*
  tail call void @_ZN12SkCachedDataD2Ev(%class.SkCachedData* %13) #17
  %14 = bitcast %class.SkMipmap* %0 to i8*
  tail call void @_ZdlPv(i8* %14) #18
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN8SkMipmap12onDataChangeEPvS0_(%class.SkMipmap*, i8*, i8*) unnamed_addr #4 comdat align 2 {
  %4 = getelementptr inbounds %class.SkMipmap, %class.SkMipmap* %0, i64 0, i32 3
  %5 = bitcast %"struct.SkMipmap::Level"** %4 to i8**
  store i8* %2, i8** %5, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN12SkCachedDataD2Ev(%class.SkCachedData*) unnamed_addr #13

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #15

declare i8* @_Z15sk_malloc_flagsmj(i64, i32) local_unnamed_addr #10

declare void @_ZN12SkCachedDataC2EPvm(%class.SkCachedData*, i8*, i64) unnamed_addr #10

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #9

declare zeroext i1 @_ZN12SkPngEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkPngEncoder::Options"* dereferenceable(16)) local_unnamed_addr #10

declare void @_ZN22SkDynamicMemoryWStream12detachAsDataEv(%class.sk_sp.8* sret, %class.SkDynamicMemoryWStream*) local_unnamed_addr #10

; Function Attrs: nounwind
declare void @_ZN22SkDynamicMemoryWStreamD1Ev(%class.SkDynamicMemoryWStream*) unnamed_addr #13

declare void @_ZNK10SkWriter3214snapshotAsDataEv(%class.sk_sp.8* sret, %class.SkWriter32*) local_unnamed_addr #10

declare void @_ZN12SkReadBuffer9setMemoryEPKvm(%class.SkReadBuffer*, i8*, i64) local_unnamed_addr #10

declare zeroext i1 @_ZN16SkImageGenerator9getPixelsERK11SkImageInfoPvm(%class.SkImageGenerator*, %struct.SkImageInfo* dereferenceable(24), i8*, i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #15

; Function Attrs: nounwind
declare void @_ZN6SkDataD1Ev(%class.SkData*) unnamed_addr #13

; Function Attrs: nounwind
declare void @_ZN6SkDatadlEPv(i8*) local_unnamed_addr #13

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #16

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #16

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone }
attributes #17 = { nounwind }
attributes #18 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_: argument 0"}
!5 = distinct !{!5, !"_Z9sk_ref_spI12SkColorSpaceE5sk_spIT_EPS2_"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10, !11}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !8}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.isvectorized", i32 1}
!14 = distinct !{!14, !13}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19, !20, !21}
!19 = distinct !{!19, !17}
!20 = distinct !{!20, !17}
!21 = distinct !{!21, !17}
!22 = distinct !{!22, !13}
!23 = distinct !{!23, !13}
!24 = !{!25}
!25 = distinct !{!25, !26}
!26 = distinct !{!26, !"LVerDomain"}
!27 = !{!28}
!28 = distinct !{!28, !26}
!29 = distinct !{!29, !13}
!30 = distinct !{!30, !13}
!31 = !{!32}
!32 = distinct !{!32, !33}
!33 = distinct !{!33, !"LVerDomain"}
!34 = !{!35, !36}
!35 = distinct !{!35, !33}
!36 = distinct !{!36, !33}
!37 = distinct !{!37, !13}
!38 = distinct !{!38, !13}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43, !44, !45}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !41}
!45 = distinct !{!45, !41}
!46 = distinct !{!46, !13}
!47 = distinct !{!47, !13}
!48 = !{!49}
!49 = distinct !{!49, !50}
!50 = distinct !{!50, !"LVerDomain"}
!51 = !{!52}
!52 = distinct !{!52, !50}
!53 = distinct !{!53, !13}
!54 = distinct !{!54, !13}
!55 = !{!56}
!56 = distinct !{!56, !57}
!57 = distinct !{!57, !"LVerDomain"}
!58 = !{!59, !60}
!59 = distinct !{!59, !57}
!60 = distinct !{!60, !57}
!61 = distinct !{!61, !13}
!62 = distinct !{!62, !13}
!63 = !{!64}
!64 = distinct !{!64, !65}
!65 = distinct !{!65, !"LVerDomain"}
!66 = !{!67, !68, !69}
!67 = distinct !{!67, !65}
!68 = distinct !{!68, !65}
!69 = distinct !{!69, !65}
!70 = distinct !{!70, !13}
!71 = distinct !{!71, !13}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76, !77}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !74}
!78 = distinct !{!78, !13}
!79 = distinct !{!79, !13}
!80 = !{!81}
!81 = distinct !{!81, !82}
!82 = distinct !{!82, !"LVerDomain"}
!83 = !{!84, !85, !86}
!84 = distinct !{!84, !82}
!85 = distinct !{!85, !82}
!86 = distinct !{!86, !82}
!87 = distinct !{!87, !13}
!88 = distinct !{!88, !13}
!89 = !{!90}
!90 = distinct !{!90, !91}
!91 = distinct !{!91, !"LVerDomain"}
!92 = !{!93}
!93 = distinct !{!93, !91}
!94 = distinct !{!94, !13}
!95 = distinct !{!95, !13}
!96 = !{!97}
!97 = distinct !{!97, !98}
!98 = distinct !{!98, !"LVerDomain"}
!99 = !{!100, !101}
!100 = distinct !{!100, !98}
!101 = distinct !{!101, !98}
!102 = distinct !{!102, !13}
!103 = distinct !{!103, !13}
!104 = !{!105}
!105 = distinct !{!105, !106}
!106 = distinct !{!106, !"LVerDomain"}
!107 = !{!108, !109, !110}
!108 = distinct !{!108, !106}
!109 = distinct !{!109, !106}
!110 = distinct !{!110, !106}
!111 = distinct !{!111, !13}
!112 = distinct !{!112, !13}
!113 = !{!114}
!114 = distinct !{!114, !115}
!115 = distinct !{!115, !"LVerDomain"}
!116 = !{!117}
!117 = distinct !{!117, !115}
!118 = distinct !{!118, !13}
!119 = distinct !{!119, !13}
!120 = !{!121}
!121 = distinct !{!121, !122}
!122 = distinct !{!122, !"LVerDomain"}
!123 = !{!124, !125}
!124 = distinct !{!124, !122}
!125 = distinct !{!125, !122}
!126 = distinct !{!126, !13}
!127 = distinct !{!127, !13}
!128 = !{!129}
!129 = distinct !{!129, !130}
!130 = distinct !{!130, !"LVerDomain"}
!131 = !{!132, !133, !134}
!132 = distinct !{!132, !130}
!133 = distinct !{!133, !130}
!134 = distinct !{!134, !130}
!135 = distinct !{!135, !13}
!136 = distinct !{!136, !13}
!137 = !{!138}
!138 = distinct !{!138, !139}
!139 = distinct !{!139, !"LVerDomain"}
!140 = !{!141, !142}
!141 = distinct !{!141, !139}
!142 = distinct !{!142, !139}
!143 = distinct !{!143, !13}
!144 = distinct !{!144, !13}
!145 = !{!146}
!146 = distinct !{!146, !147}
!147 = distinct !{!147, !"LVerDomain"}
!148 = !{!149, !150, !151}
!149 = distinct !{!149, !147}
!150 = distinct !{!150, !147}
!151 = distinct !{!151, !147}
!152 = distinct !{!152, !13}
!153 = distinct !{!153, !13}
!154 = !{!155}
!155 = distinct !{!155, !156}
!156 = distinct !{!156, !"LVerDomain"}
!157 = !{!158}
!158 = distinct !{!158, !156}
!159 = distinct !{!159, !13}
!160 = distinct !{!160, !13}
!161 = !{!162}
!162 = distinct !{!162, !163}
!163 = distinct !{!163, !"LVerDomain"}
!164 = !{!165}
!165 = distinct !{!165, !163}
!166 = distinct !{!166, !13}
!167 = distinct !{!167, !13}
!168 = !{!169}
!169 = distinct !{!169, !170}
!170 = distinct !{!170, !"LVerDomain"}
!171 = !{!172, !173}
!172 = distinct !{!172, !170}
!173 = distinct !{!173, !170}
!174 = distinct !{!174, !13}
!175 = distinct !{!175, !13}
!176 = !{!177}
!177 = distinct !{!177, !178}
!178 = distinct !{!178, !"LVerDomain"}
!179 = !{!180, !181, !182}
!180 = distinct !{!180, !178}
!181 = distinct !{!181, !178}
!182 = distinct !{!182, !178}
!183 = distinct !{!183, !13}
!184 = distinct !{!184, !13}
!185 = !{!186}
!186 = distinct !{!186, !187}
!187 = distinct !{!187, !"LVerDomain"}
!188 = !{!189, !190}
!189 = distinct !{!189, !187}
!190 = distinct !{!190, !187}
!191 = distinct !{!191, !13}
!192 = distinct !{!192, !13}
!193 = !{!194}
!194 = distinct !{!194, !195}
!195 = distinct !{!195, !"LVerDomain"}
!196 = !{!197, !198, !199}
!197 = distinct !{!197, !195}
!198 = distinct !{!198, !195}
!199 = distinct !{!199, !195}
!200 = distinct !{!200, !13}
!201 = distinct !{!201, !13}
!202 = !{!203}
!203 = distinct !{!203, !204}
!204 = distinct !{!204, !"LVerDomain"}
!205 = !{!206}
!206 = distinct !{!206, !204}
!207 = distinct !{!207, !13}
!208 = distinct !{!208, !13}
!209 = !{!210}
!210 = distinct !{!210, !211}
!211 = distinct !{!211, !"LVerDomain"}
!212 = !{!213, !214}
!213 = distinct !{!213, !211}
!214 = distinct !{!214, !211}
!215 = distinct !{!215, !13}
!216 = distinct !{!216, !13}
!217 = !{!218}
!218 = distinct !{!218, !219}
!219 = distinct !{!219, !"LVerDomain"}
!220 = !{!221, !222, !223}
!221 = distinct !{!221, !219}
!222 = distinct !{!222, !219}
!223 = distinct !{!223, !219}
!224 = distinct !{!224, !13}
!225 = distinct !{!225, !13}
!226 = !{!227}
!227 = distinct !{!227, !228}
!228 = distinct !{!228, !"LVerDomain"}
!229 = !{!230}
!230 = distinct !{!230, !228}
!231 = distinct !{!231, !13}
!232 = distinct !{!232, !13}
!233 = !{!234}
!234 = distinct !{!234, !235}
!235 = distinct !{!235, !"LVerDomain"}
!236 = !{!237, !238}
!237 = distinct !{!237, !235}
!238 = distinct !{!238, !235}
!239 = distinct !{!239, !13}
!240 = distinct !{!240, !13}
!241 = !{!242}
!242 = distinct !{!242, !243}
!243 = distinct !{!243, !"LVerDomain"}
!244 = !{!245, !246, !247}
!245 = distinct !{!245, !243}
!246 = distinct !{!246, !243}
!247 = distinct !{!247, !243}
!248 = distinct !{!248, !13}
!249 = distinct !{!249, !13}
!250 = !{!251}
!251 = distinct !{!251, !252}
!252 = distinct !{!252, !"LVerDomain"}
!253 = !{!254, !255}
!254 = distinct !{!254, !252}
!255 = distinct !{!255, !252}
!256 = distinct !{!256, !13}
!257 = distinct !{!257, !13}
!258 = !{!259}
!259 = distinct !{!259, !260}
!260 = distinct !{!260, !"LVerDomain"}
!261 = !{!262, !263, !264}
!262 = distinct !{!262, !260}
!263 = distinct !{!263, !260}
!264 = distinct !{!264, !260}
!265 = distinct !{!265, !13}
!266 = distinct !{!266, !13}
!267 = !{!268}
!268 = distinct !{!268, !269}
!269 = distinct !{!269, !"LVerDomain"}
!270 = !{!271}
!271 = distinct !{!271, !269}
!272 = distinct !{!272, !13}
!273 = distinct !{!273, !13}
!274 = !{!275}
!275 = distinct !{!275, !276}
!276 = distinct !{!276, !"LVerDomain"}
!277 = !{!278, !279}
!278 = distinct !{!278, !276}
!279 = distinct !{!279, !276}
!280 = distinct !{!280, !13}
!281 = distinct !{!281, !13}
!282 = !{!283}
!283 = distinct !{!283, !284}
!284 = distinct !{!284, !"LVerDomain"}
!285 = !{!286, !287, !288}
!286 = distinct !{!286, !284}
!287 = distinct !{!287, !284}
!288 = distinct !{!288, !284}
!289 = distinct !{!289, !13}
!290 = distinct !{!290, !13}
!291 = !{!292}
!292 = distinct !{!292, !293}
!293 = distinct !{!293, !"LVerDomain"}
!294 = !{!295}
!295 = distinct !{!295, !293}
!296 = distinct !{!296, !13}
!297 = distinct !{!297, !13}
!298 = !{!299}
!299 = distinct !{!299, !300}
!300 = distinct !{!300, !"LVerDomain"}
!301 = !{!302, !303}
!302 = distinct !{!302, !300}
!303 = distinct !{!303, !300}
!304 = distinct !{!304, !13}
!305 = distinct !{!305, !13}
!306 = !{!307}
!307 = distinct !{!307, !308}
!308 = distinct !{!308, !"LVerDomain"}
!309 = !{!310, !311, !312}
!310 = distinct !{!310, !308}
!311 = distinct !{!311, !308}
!312 = distinct !{!312, !308}
!313 = distinct !{!313, !13}
!314 = distinct !{!314, !13}
!315 = !{!316}
!316 = distinct !{!316, !317}
!317 = distinct !{!317, !"LVerDomain"}
!318 = !{!319, !320}
!319 = distinct !{!319, !317}
!320 = distinct !{!320, !317}
!321 = distinct !{!321, !13}
!322 = distinct !{!322, !13}
!323 = !{!324}
!324 = distinct !{!324, !325}
!325 = distinct !{!325, !"LVerDomain"}
!326 = !{!327, !328, !329}
!327 = distinct !{!327, !325}
!328 = distinct !{!328, !325}
!329 = distinct !{!329, !325}
!330 = distinct !{!330, !13}
!331 = distinct !{!331, !13}
!332 = !{!333}
!333 = distinct !{!333, !334}
!334 = distinct !{!334, !"LVerDomain"}
!335 = !{!336}
!336 = distinct !{!336, !334}
!337 = distinct !{!337, !13}
!338 = distinct !{!338, !13}
!339 = !{!340}
!340 = distinct !{!340, !341}
!341 = distinct !{!341, !"LVerDomain"}
!342 = !{!343}
!343 = distinct !{!343, !341}
!344 = distinct !{!344, !13}
!345 = distinct !{!345, !13}
!346 = !{!347}
!347 = distinct !{!347, !348}
!348 = distinct !{!348, !"LVerDomain"}
!349 = !{!350, !351}
!350 = distinct !{!350, !348}
!351 = distinct !{!351, !348}
!352 = distinct !{!352, !13}
!353 = distinct !{!353, !13}
!354 = !{!355}
!355 = distinct !{!355, !356}
!356 = distinct !{!356, !"LVerDomain"}
!357 = !{!358, !359, !360}
!358 = distinct !{!358, !356}
!359 = distinct !{!359, !356}
!360 = distinct !{!360, !356}
!361 = distinct !{!361, !13}
!362 = distinct !{!362, !13}
!363 = !{!364}
!364 = distinct !{!364, !365}
!365 = distinct !{!365, !"LVerDomain"}
!366 = !{!367, !368}
!367 = distinct !{!367, !365}
!368 = distinct !{!368, !365}
!369 = distinct !{!369, !13}
!370 = distinct !{!370, !13}
!371 = !{!372}
!372 = distinct !{!372, !373}
!373 = distinct !{!373, !"LVerDomain"}
!374 = !{!375, !376, !377}
!375 = distinct !{!375, !373}
!376 = distinct !{!376, !373}
!377 = distinct !{!377, !373}
!378 = distinct !{!378, !13}
!379 = distinct !{!379, !13}
!380 = !{!381}
!381 = distinct !{!381, !382}
!382 = distinct !{!382, !"LVerDomain"}
!383 = !{!384}
!384 = distinct !{!384, !382}
!385 = distinct !{!385, !13}
!386 = distinct !{!386, !13}
!387 = !{!388}
!388 = distinct !{!388, !389}
!389 = distinct !{!389, !"LVerDomain"}
!390 = !{!391, !392}
!391 = distinct !{!391, !389}
!392 = distinct !{!392, !389}
!393 = distinct !{!393, !13}
!394 = distinct !{!394, !13}
!395 = !{!396}
!396 = distinct !{!396, !397}
!397 = distinct !{!397, !"LVerDomain"}
!398 = !{!399, !400, !401}
!399 = distinct !{!399, !397}
!400 = distinct !{!400, !397}
!401 = distinct !{!401, !397}
!402 = distinct !{!402, !13}
!403 = distinct !{!403, !13}
!404 = !{!405}
!405 = distinct !{!405, !406}
!406 = distinct !{!406, !"LVerDomain"}
!407 = !{!408}
!408 = distinct !{!408, !406}
!409 = distinct !{!409, !13}
!410 = distinct !{!410, !13}
!411 = !{!412}
!412 = distinct !{!412, !413}
!413 = distinct !{!413, !"LVerDomain"}
!414 = !{!415, !416}
!415 = distinct !{!415, !413}
!416 = distinct !{!416, !413}
!417 = distinct !{!417, !13}
!418 = distinct !{!418, !13}
!419 = !{!420}
!420 = distinct !{!420, !421}
!421 = distinct !{!421, !"LVerDomain"}
!422 = !{!423, !424, !425}
!423 = distinct !{!423, !421}
!424 = distinct !{!424, !421}
!425 = distinct !{!425, !421}
!426 = distinct !{!426, !13}
!427 = distinct !{!427, !13}
!428 = !{!429}
!429 = distinct !{!429, !430, !"_ZL14encode_to_dataRK8SkPixmap: argument 0"}
!430 = distinct !{!430, !"_ZL14encode_to_dataRK8SkPixmap"}
!431 = !{i8 0, i8 2}
