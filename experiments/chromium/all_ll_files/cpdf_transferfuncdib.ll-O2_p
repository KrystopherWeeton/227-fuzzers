; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_transferfuncdib.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_transferfuncdib.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_TransferFuncDIB = type { %class.CFX_DIBBase, %"class.fxcrt::RetainPtr.4", %"class.std::__1::vector.10", %"class.fxcrt::RetainPtr.17", %"class.pdfium::span", %"class.pdfium::span", %"class.pdfium::span" }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.fxcrt::RetainPtr.4" = type { %"class.std::__1::unique_ptr.5" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.CFX_DIBBase* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { i8*, i8*, %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i8* }
%"class.fxcrt::RetainPtr.17" = type { %"class.std::__1::unique_ptr.18" }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %class.CPDF_TransferFunc* }
%class.CPDF_TransferFunc = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", i8, %"class.std::__1::vector.10", %"class.std::__1::vector.10", %"class.std::__1::vector.10" }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.21", %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CPDF_Document = type opaque
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.29", i64 }
%"class.fxcrt::UnownedPtr.29" = type { i8* }
%class.PauseIndicatorIface = type opaque
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm = comdat any

@_ZTV20CPDF_TransferFuncDIB = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_TransferFuncDIB*)* @_ZN20CPDF_TransferFuncDIBD2Ev to i8*), i8* bitcast (void (%class.CPDF_TransferFuncDIB*)* @_ZN20CPDF_TransferFuncDIBD0Ev to i8*), i8* bitcast (i8* (%class.CFX_DIBBase*)* @_ZNK11CFX_DIBBase9GetBufferEv to i8*), i8* bitcast (i8* (%class.CPDF_TransferFuncDIB*, i32)* @_ZNK20CPDF_TransferFuncDIB11GetScanlineEi to i8*), i8* bitcast (i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)* @_ZNK11CFX_DIBBase14SkipToScanlineEiP19PauseIndicatorIface to i8*)] }, align 8

@_ZN20CPDF_TransferFuncDIBC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERKNS1_I17CPDF_TransferFuncEE = hidden unnamed_addr alias void (%class.CPDF_TransferFuncDIB*, %"class.fxcrt::RetainPtr.4"*, %"class.fxcrt::RetainPtr.17"*), void (%class.CPDF_TransferFuncDIB*, %"class.fxcrt::RetainPtr.4"*, %"class.fxcrt::RetainPtr.17"*)* @_ZN20CPDF_TransferFuncDIBC2ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERKNS1_I17CPDF_TransferFuncEE
@_ZN20CPDF_TransferFuncDIBD1Ev = hidden unnamed_addr alias void (%class.CPDF_TransferFuncDIB*), void (%class.CPDF_TransferFuncDIB*)* @_ZN20CPDF_TransferFuncDIBD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CPDF_TransferFuncDIBC2ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERKNS1_I17CPDF_TransferFuncEE(%class.CPDF_TransferFuncDIB*, %"class.fxcrt::RetainPtr.4"* nocapture readonly dereferenceable(8), %"class.fxcrt::RetainPtr.17"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0
  tail call void @_ZN11CFX_DIBBaseC2Ev(%class.CFX_DIBBase* %4) #7
  %5 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV20CPDF_TransferFuncDIB, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.fxcrt::RetainPtr.4", %"class.fxcrt::RetainPtr.4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %7, align 8
  %9 = ptrtoint %class.CFX_DIBBase* %8 to i64
  %10 = bitcast %"class.fxcrt::RetainPtr.4"* %6 to i64*
  store i64 %9, i64* %10, align 8
  %11 = icmp eq %class.CFX_DIBBase* %8, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %8, i64 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = add nsw i64 %14, 1
  store i64 %15, i64* %13, align 8
  br label %16

16:                                               ; preds = %3, %12
  %17 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2
  %18 = bitcast %"class.std::__1::vector.10"* %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 24, i1 false) #7
  %19 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 3
  %20 = getelementptr inbounds %"class.fxcrt::RetainPtr.17", %"class.fxcrt::RetainPtr.17"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %21 = load %class.CPDF_TransferFunc*, %class.CPDF_TransferFunc** %20, align 8
  %22 = ptrtoint %class.CPDF_TransferFunc* %21 to i64
  %23 = bitcast %"class.fxcrt::RetainPtr.17"* %19 to i64*
  store i64 %22, i64* %23, align 8
  %24 = icmp eq %class.CPDF_TransferFunc* %21, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %16
  %26 = getelementptr inbounds %class.CPDF_TransferFunc, %class.CPDF_TransferFunc* %21, i64 0, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = add nsw i64 %27, 1
  store i64 %28, i64* %26, align 8
  br label %29

29:                                               ; preds = %16, %25
  %30 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4
  %31 = load %class.CPDF_TransferFunc*, %class.CPDF_TransferFunc** %20, align 8
  tail call void @_ZNK17CPDF_TransferFunc11GetSamplesREv(%"class.pdfium::span"* sret %30, %class.CPDF_TransferFunc* %31) #7
  %32 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5
  %33 = load %class.CPDF_TransferFunc*, %class.CPDF_TransferFunc** %20, align 8
  tail call void @_ZNK17CPDF_TransferFunc11GetSamplesGEv(%"class.pdfium::span"* sret %32, %class.CPDF_TransferFunc* %33) #7
  %34 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6
  %35 = load %class.CPDF_TransferFunc*, %class.CPDF_TransferFunc** %20, align 8
  tail call void @_ZNK17CPDF_TransferFunc11GetSamplesBEv(%"class.pdfium::span"* sret %34, %class.CPDF_TransferFunc* %35) #7
  %36 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %7, align 8
  %37 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %36, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  store i32 %38, i32* %39, align 4
  %40 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %7, align 8
  %41 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %40, i64 0, i32 3
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 3
  store i32 %42, i32* %43, align 8
  %44 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %45 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %44, align 8
  %46 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %45, i64 0, i32 1
  %47 = load i16, i16* %46, align 8
  %48 = and i16 %47, 256
  %49 = icmp eq i16 %48, 0
  br i1 %49, label %50, label %54

50:                                               ; preds = %29
  %51 = and i16 %47, 512
  %52 = icmp eq i16 %51, 0
  %53 = select i1 %52, i16 24, i16 544
  br label %54

54:                                               ; preds = %29, %50
  %55 = phi i16 [ 264, %29 ], [ %53, %50 ]
  %56 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 1
  store i16 %55, i16* %56, align 8
  %57 = and i16 %55, 56
  %58 = zext i16 %57 to i32
  %59 = mul nsw i32 %38, %58
  %60 = add nsw i32 %59, 31
  %61 = sdiv i32 %60, 32
  %62 = shl nsw i32 %61, 2
  %63 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 4
  store i32 %62, i32* %63, align 4
  %64 = zext i32 %62 to i64
  %65 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2, i32 0, i32 1
  %66 = bitcast i8** %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = bitcast %"class.std::__1::vector.10"* %17 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sub i64 %67, %69
  %71 = icmp ult i64 %70, %64
  %72 = inttoptr i64 %69 to i8*
  br i1 %71, label %73, label %75

73:                                               ; preds = %54
  %74 = sub i64 %64, %70
  tail call void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector.10"* %17, i64 %74) #7
  br label %79

75:                                               ; preds = %54
  %76 = icmp ugt i64 %70, %64
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  %78 = getelementptr inbounds i8, i8* %72, i64 %64
  store i8* %78, i8** %65, align 8
  br label %79

79:                                               ; preds = %73, %75, %77
  ret void
}

declare void @_ZN11CFX_DIBBaseC2Ev(%class.CFX_DIBBase*) unnamed_addr #1

declare void @_ZNK17CPDF_TransferFunc11GetSamplesREv(%"class.pdfium::span"* sret, %class.CPDF_TransferFunc*) local_unnamed_addr #1

declare void @_ZNK17CPDF_TransferFunc11GetSamplesGEv(%"class.pdfium::span"* sret, %class.CPDF_TransferFunc*) local_unnamed_addr #1

declare void @_ZNK17CPDF_TransferFunc11GetSamplesBEv(%"class.pdfium::span"* sret, %class.CPDF_TransferFunc*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i16 @_ZNK20CPDF_TransferFuncDIB13GetDestFormatEv(%class.CPDF_TransferFuncDIB* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %2, align 8
  %4 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %3, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = and i16 %5, 256
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %1
  %9 = and i16 %5, 512
  %10 = icmp eq i16 %9, 0
  %11 = select i1 %10, i16 24, i16 544
  br label %12

12:                                               ; preds = %1, %8
  %13 = phi i16 [ 264, %1 ], [ %11, %8 ]
  ret i16 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CPDF_TransferFuncDIBD2Ev(%class.CPDF_TransferFuncDIB*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV20CPDF_TransferFuncDIB, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_TransferFunc*, %class.CPDF_TransferFunc** %3, align 8
  store %class.CPDF_TransferFunc* null, %class.CPDF_TransferFunc** %3, align 8
  %5 = icmp eq %class.CPDF_TransferFunc* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CPDF_TransferFunc, %class.CPDF_TransferFunc* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_TransferFunc, %class.CPDF_TransferFunc* %4, i64 0, i32 0
  %13 = bitcast %class.CPDF_TransferFunc* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #7
  br label %17

17:                                               ; preds = %1, %6, %11
  %18 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i8* %19 to i64
  %23 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 %22, i64* %24, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %19) #7
  br label %25

25:                                               ; preds = %17, %21
  %26 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %27 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %26, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %26, align 8
  %28 = icmp eq %class.CFX_DIBBase* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %27, i64 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = add nsw i64 %31, -1
  store i64 %32, i64* %30, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %27, i64 0, i32 0
  %36 = bitcast %class.CFX_DIBBase* %27 to void (%"class.fxcrt::Retainable"*)***
  %37 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %37, i64 1
  %39 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %38, align 8
  tail call void %39(%"class.fxcrt::Retainable"* nonnull %35) #7
  br label %40

40:                                               ; preds = %25, %29, %34
  %41 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0
  tail call void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase* %41) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN20CPDF_TransferFuncDIBD0Ev(%class.CPDF_TransferFuncDIB*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV20CPDF_TransferFuncDIB, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_TransferFunc*, %class.CPDF_TransferFunc** %3, align 8
  store %class.CPDF_TransferFunc* null, %class.CPDF_TransferFunc** %3, align 8
  %5 = icmp eq %class.CPDF_TransferFunc* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CPDF_TransferFunc, %class.CPDF_TransferFunc* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_TransferFunc, %class.CPDF_TransferFunc* %4, i64 0, i32 0
  %13 = bitcast %class.CPDF_TransferFunc* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #7
  br label %17

17:                                               ; preds = %11, %6, %1
  %18 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = ptrtoint i8* %19 to i64
  %23 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2, i32 0, i32 1
  %24 = bitcast i8** %23 to i64*
  store i64 %22, i64* %24, align 8
  tail call void @_Z7FX_FreePv(i8* nonnull %19) #7
  br label %25

25:                                               ; preds = %21, %17
  %26 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %27 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %26, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %26, align 8
  %28 = icmp eq %class.CFX_DIBBase* %27, null
  br i1 %28, label %40, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %27, i64 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = add nsw i64 %31, -1
  store i64 %32, i64* %30, align 8
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %29
  %35 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %27, i64 0, i32 0
  %36 = bitcast %class.CFX_DIBBase* %27 to void (%"class.fxcrt::Retainable"*)***
  %37 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %37, i64 1
  %39 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %38, align 8
  tail call void %39(%"class.fxcrt::Retainable"* nonnull %35) #7
  br label %40

40:                                               ; preds = %25, %29, %34
  %41 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0
  tail call void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase* %41) #7
  %42 = bitcast %class.CPDF_TransferFuncDIB* %0 to i8*
  tail call void @_ZdlPv(i8* %42) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK20CPDF_TransferFuncDIB17TranslateScanlineEPKhPNSt3__16vectorIh16FxAllocAllocatorIhEEE(%class.CPDF_TransferFuncDIB* readonly, i8* nocapture readonly, %"class.std::__1::vector.10"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %5 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %4, align 8
  %6 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %5, i64 0, i32 1
  %7 = load i16, i16* %6, align 8
  switch i16 %7, label %387 [
    i16 1, label %28
    i16 257, label %101
    i16 8, label %140
    i16 264, label %20
    i16 24, label %8
    i16 32, label %315
    i16 544, label %316
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %387

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 1
  %14 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %2, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 1
  %17 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 0, i32 0
  %18 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 1
  %19 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 0, i32 0
  br label %269

20:                                               ; preds = %3
  %21 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %387

24:                                               ; preds = %20
  %25 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 1
  %26 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 0, i32 0
  %27 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %2, i64 0, i32 0, i32 0
  br label %249

28:                                               ; preds = %3
  %29 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %28
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

33:                                               ; preds = %28
  %34 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = load i8, i8* %35, align 1
  %37 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %41, !prof !2

40:                                               ; preds = %33
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

41:                                               ; preds = %33
  %42 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = load i8, i8* %43, align 1
  %45 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %49, !prof !2

48:                                               ; preds = %41
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

49:                                               ; preds = %41
  %50 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i8, i8* %51, align 1
  %53 = icmp ugt i64 %30, 255
  br i1 %53, label %55, label %54, !prof !5

54:                                               ; preds = %49
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

55:                                               ; preds = %49
  %56 = getelementptr inbounds i8, i8* %35, i64 255
  %57 = load i8, i8* %56, align 1
  %58 = icmp ugt i64 %38, 255
  br i1 %58, label %60, label %59, !prof !5

59:                                               ; preds = %55
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

60:                                               ; preds = %55
  %61 = getelementptr inbounds i8, i8* %43, i64 255
  %62 = load i8, i8* %61, align 1
  %63 = icmp ugt i64 %46, 255
  br i1 %63, label %65, label %64, !prof !5

64:                                               ; preds = %60
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

65:                                               ; preds = %60
  %66 = getelementptr inbounds i8, i8* %51, i64 255
  %67 = load i8, i8* %66, align 1
  %68 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  %69 = load i32, i32* %68, align 4
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %387

71:                                               ; preds = %65
  %72 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %2, i64 0, i32 0, i32 0
  br label %73

73:                                               ; preds = %71, %73
  %74 = phi i64 [ 0, %71 ], [ %97, %73 ]
  %75 = phi i32 [ 0, %71 ], [ %98, %73 ]
  %76 = lshr i32 %75, 3
  %77 = zext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = and i32 %75, 7
  %82 = xor i32 %81, 7
  %83 = shl i32 1, %82
  %84 = and i32 %83, %80
  %85 = icmp eq i32 %84, 0
  %86 = add nuw nsw i64 %74, 1
  %87 = load i8*, i8** %72, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 %74
  %89 = select i1 %85, i8 %52, i8 %67
  %90 = select i1 %85, i8 %44, i8 %62
  %91 = select i1 %85, i8 %36, i8 %57
  store i8 %89, i8* %88, align 1
  %92 = add nuw nsw i64 %74, 2
  %93 = load i8*, i8** %72, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 %86
  store i8 %90, i8* %94, align 1
  %95 = load i8*, i8** %72, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 %92
  store i8 %91, i8* %96, align 1
  %97 = add nuw nsw i64 %74, 3
  %98 = add nuw nsw i32 %75, 1
  %99 = load i32, i32* %68, align 4
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %73, label %387

101:                                              ; preds = %3
  %102 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 1
  %103 = load i64, i64* %102, align 8
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %105, label %106, !prof !2

105:                                              ; preds = %101
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

106:                                              ; preds = %101
  %107 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = load i8, i8* %108, align 1
  %110 = icmp ugt i64 %103, 255
  br i1 %110, label %112, label %111, !prof !5

111:                                              ; preds = %106
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

112:                                              ; preds = %106
  %113 = getelementptr inbounds i8, i8* %108, i64 255
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  %116 = load i32, i32* %115, align 4
  %117 = icmp sgt i32 %116, 0
  br i1 %117, label %118, label %387

118:                                              ; preds = %112
  %119 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %2, i64 0, i32 0, i32 0
  br label %120

120:                                              ; preds = %118, %120
  %121 = phi i64 [ 0, %118 ], [ %136, %120 ]
  %122 = phi i32 [ 0, %118 ], [ %137, %120 ]
  %123 = lshr i32 %122, 3
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %1, i64 %124
  %126 = load i8, i8* %125, align 1
  %127 = zext i8 %126 to i32
  %128 = and i32 %122, 7
  %129 = xor i32 %128, 7
  %130 = shl i32 1, %129
  %131 = and i32 %130, %127
  %132 = icmp eq i32 %131, 0
  %133 = load i8*, i8** %119, align 8
  %134 = getelementptr inbounds i8, i8* %133, i64 %121
  %135 = select i1 %132, i8 %109, i8 %114
  store i8 %135, i8* %134, align 1
  %136 = add nuw nsw i64 %121, 1
  %137 = add nuw nsw i32 %122, 1
  %138 = load i32, i32* %115, align 4
  %139 = icmp slt i32 %137, %138
  br i1 %139, label %120, label %387

140:                                              ; preds = %3
  %141 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %5, i64 0, i32 6
  %142 = bitcast %"class.std::__1::vector"* %141 to i64*
  %143 = load i64, i64* %142, align 8, !noalias !6
  %144 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %5, i64 0, i32 6, i32 0, i32 1
  %145 = bitcast i32** %144 to i64*
  %146 = load i64, i64* %145, align 8, !noalias !6
  %147 = sub i64 %146, %143
  %148 = ashr exact i64 %147, 2
  %149 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  %150 = load i32, i32* %149, align 4
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %152, label %387

152:                                              ; preds = %140
  %153 = inttoptr i64 %146 to i32*
  %154 = inttoptr i64 %143 to i32*
  %155 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 1
  %156 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 0, i32 0
  %157 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %2, i64 0, i32 0, i32 0
  %158 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 1
  %159 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 0, i32 0
  %160 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 1
  %161 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 0, i32 0
  br label %162

162:                                              ; preds = %243, %152
  %163 = phi i32* [ %153, %152 ], [ %248, %243 ]
  %164 = phi %class.CFX_DIBBase* [ %5, %152 ], [ %246, %243 ]
  %165 = phi i64 [ 0, %152 ], [ %245, %243 ]
  %166 = phi i8* [ %1, %152 ], [ %244, %243 ]
  %167 = phi i32 [ 0, %152 ], [ %240, %243 ]
  %168 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %164, i64 0, i32 6, i32 0, i32 0
  %169 = load i32*, i32** %168, align 8
  %170 = icmp eq i32* %169, %163
  %171 = load i8, i8* %166, align 1
  %172 = zext i8 %171 to i64
  br i1 %170, label %209, label %173

173:                                              ; preds = %162
  %174 = icmp ugt i64 %148, %172
  br i1 %174, label %176, label %175, !prof !5

175:                                              ; preds = %173
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

176:                                              ; preds = %173
  %177 = getelementptr inbounds i32, i32* %154, i64 %172
  %178 = load i32, i32* %177, align 4
  %179 = lshr i32 %178, 16
  %180 = and i32 %179, 255
  %181 = zext i32 %180 to i64
  %182 = load i64, i64* %155, align 8
  %183 = icmp ugt i64 %182, %181
  br i1 %183, label %185, label %184, !prof !5

184:                                              ; preds = %176
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

185:                                              ; preds = %176
  %186 = load i8*, i8** %156, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 %181
  %188 = load i8, i8* %187, align 1
  %189 = load i8*, i8** %157, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 %165
  store i8 %188, i8* %190, align 1
  %191 = lshr i32 %178, 8
  %192 = and i32 %191, 255
  %193 = zext i32 %192 to i64
  %194 = load i64, i64* %158, align 8
  %195 = icmp ugt i64 %194, %193
  br i1 %195, label %197, label %196, !prof !5

196:                                              ; preds = %185
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

197:                                              ; preds = %185
  %198 = add nuw nsw i64 %165, 1
  %199 = load i8*, i8** %159, align 8
  %200 = getelementptr inbounds i8, i8* %199, i64 %193
  %201 = load i8, i8* %200, align 1
  %202 = load i8*, i8** %157, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 %198
  store i8 %201, i8* %203, align 1
  %204 = and i32 %178, 255
  %205 = zext i32 %204 to i64
  %206 = load i64, i64* %160, align 8
  %207 = icmp ugt i64 %206, %205
  br i1 %207, label %232, label %208, !prof !5

208:                                              ; preds = %197
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

209:                                              ; preds = %162
  %210 = load i64, i64* %155, align 8
  %211 = icmp ugt i64 %210, %172
  br i1 %211, label %213, label %212, !prof !5

212:                                              ; preds = %209
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

213:                                              ; preds = %209
  %214 = load i8*, i8** %156, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 %172
  %216 = load i8, i8* %215, align 1
  %217 = load i8*, i8** %157, align 8
  %218 = getelementptr inbounds i8, i8* %217, i64 %165
  store i8 %216, i8* %218, align 1
  %219 = load i64, i64* %158, align 8
  %220 = icmp ugt i64 %219, %172
  br i1 %220, label %222, label %221, !prof !5

221:                                              ; preds = %213
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

222:                                              ; preds = %213
  %223 = add nuw nsw i64 %165, 1
  %224 = load i8*, i8** %159, align 8
  %225 = getelementptr inbounds i8, i8* %224, i64 %172
  %226 = load i8, i8* %225, align 1
  %227 = load i8*, i8** %157, align 8
  %228 = getelementptr inbounds i8, i8* %227, i64 %223
  store i8 %226, i8* %228, align 1
  %229 = load i64, i64* %160, align 8
  %230 = icmp ugt i64 %229, %172
  br i1 %230, label %232, label %231, !prof !5

231:                                              ; preds = %222
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

232:                                              ; preds = %222, %197
  %233 = phi i64 [ %205, %197 ], [ %172, %222 ]
  %234 = add nuw nsw i64 %165, 2
  %235 = load i8*, i8** %161, align 8
  %236 = getelementptr inbounds i8, i8* %235, i64 %233
  %237 = load i8, i8* %236, align 1
  %238 = load i8*, i8** %157, align 8
  %239 = getelementptr inbounds i8, i8* %238, i64 %234
  store i8 %237, i8* %239, align 1
  %240 = add nuw nsw i32 %167, 1
  %241 = load i32, i32* %149, align 4
  %242 = icmp slt i32 %240, %241
  br i1 %242, label %243, label %387

243:                                              ; preds = %232
  %244 = getelementptr inbounds i8, i8* %166, i64 1
  %245 = add nuw nsw i64 %165, 3
  %246 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %4, align 8
  %247 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %246, i64 0, i32 6, i32 0, i32 1
  %248 = load i32*, i32** %247, align 8
  br label %162

249:                                              ; preds = %24, %258
  %250 = phi i64 [ 0, %24 ], [ %263, %258 ]
  %251 = phi i32 [ 0, %24 ], [ %264, %258 ]
  %252 = phi i8* [ %1, %24 ], [ %259, %258 ]
  %253 = load i8, i8* %252, align 1
  %254 = zext i8 %253 to i64
  %255 = load i64, i64* %25, align 8
  %256 = icmp ugt i64 %255, %254
  br i1 %256, label %258, label %257, !prof !5

257:                                              ; preds = %249
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

258:                                              ; preds = %249
  %259 = getelementptr inbounds i8, i8* %252, i64 1
  %260 = load i8*, i8** %26, align 8
  %261 = getelementptr inbounds i8, i8* %260, i64 %254
  %262 = load i8, i8* %261, align 1
  %263 = add nuw nsw i64 %250, 1
  %264 = add nuw nsw i32 %251, 1
  %265 = load i8*, i8** %27, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 %250
  store i8 %262, i8* %266, align 1
  %267 = load i32, i32* %21, align 4
  %268 = icmp slt i32 %264, %267
  br i1 %268, label %249, label %387

269:                                              ; preds = %12, %303
  %270 = phi i64 [ 0, %12 ], [ %309, %303 ]
  %271 = phi i32 [ 0, %12 ], [ %312, %303 ]
  %272 = phi i8* [ %1, %12 ], [ %304, %303 ]
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i64
  %275 = load i64, i64* %13, align 8
  %276 = icmp ugt i64 %275, %274
  br i1 %276, label %278, label %277, !prof !5

277:                                              ; preds = %269
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

278:                                              ; preds = %269
  %279 = getelementptr inbounds i8, i8* %272, i64 1
  %280 = load i8*, i8** %14, align 8
  %281 = getelementptr inbounds i8, i8* %280, i64 %274
  %282 = load i8, i8* %281, align 1
  %283 = load i8*, i8** %15, align 8
  %284 = getelementptr inbounds i8, i8* %283, i64 %270
  store i8 %282, i8* %284, align 1
  %285 = load i8, i8* %279, align 1
  %286 = zext i8 %285 to i64
  %287 = load i64, i64* %16, align 8
  %288 = icmp ugt i64 %287, %286
  br i1 %288, label %290, label %289, !prof !5

289:                                              ; preds = %278
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

290:                                              ; preds = %278
  %291 = getelementptr inbounds i8, i8* %272, i64 2
  %292 = add nuw nsw i64 %270, 1
  %293 = load i8*, i8** %17, align 8
  %294 = getelementptr inbounds i8, i8* %293, i64 %286
  %295 = load i8, i8* %294, align 1
  %296 = load i8*, i8** %15, align 8
  %297 = getelementptr inbounds i8, i8* %296, i64 %292
  store i8 %295, i8* %297, align 1
  %298 = load i8, i8* %291, align 1
  %299 = zext i8 %298 to i64
  %300 = load i64, i64* %18, align 8
  %301 = icmp ugt i64 %300, %299
  br i1 %301, label %303, label %302, !prof !5

302:                                              ; preds = %290
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

303:                                              ; preds = %290
  %304 = getelementptr inbounds i8, i8* %272, i64 3
  %305 = add nuw nsw i64 %270, 2
  %306 = load i8*, i8** %19, align 8
  %307 = getelementptr inbounds i8, i8* %306, i64 %299
  %308 = load i8, i8* %307, align 1
  %309 = add nuw nsw i64 %270, 3
  %310 = load i8*, i8** %15, align 8
  %311 = getelementptr inbounds i8, i8* %310, i64 %305
  store i8 %308, i8* %311, align 1
  %312 = add nuw nsw i32 %271, 1
  %313 = load i32, i32* %9, align 4
  %314 = icmp slt i32 %312, %313
  br i1 %314, label %269, label %387

315:                                              ; preds = %3
  br label %316

316:                                              ; preds = %3, %315
  %317 = phi i1 [ false, %3 ], [ true, %315 ]
  %318 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 0, i32 2
  %319 = load i32, i32* %318, align 4
  %320 = icmp sgt i32 %319, 0
  br i1 %320, label %321, label %387

321:                                              ; preds = %316
  %322 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 1
  %323 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 6, i32 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %2, i64 0, i32 0, i32 0
  %325 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 1
  %326 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 5, i32 0, i32 0
  %327 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 1
  %328 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 4, i32 0, i32 0
  br label %329

329:                                              ; preds = %321, %381
  %330 = phi i32 [ 0, %321 ], [ %384, %381 ]
  %331 = phi i32 [ 0, %321 ], [ %382, %381 ]
  %332 = phi i8* [ %1, %321 ], [ %383, %381 ]
  %333 = load i8, i8* %332, align 1
  %334 = zext i8 %333 to i64
  %335 = load i64, i64* %322, align 8
  %336 = icmp ugt i64 %335, %334
  br i1 %336, label %338, label %337, !prof !5

337:                                              ; preds = %329
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

338:                                              ; preds = %329
  %339 = getelementptr inbounds i8, i8* %332, i64 1
  %340 = load i8*, i8** %323, align 8
  %341 = getelementptr inbounds i8, i8* %340, i64 %334
  %342 = load i8, i8* %341, align 1
  %343 = sext i32 %331 to i64
  %344 = load i8*, i8** %324, align 8
  %345 = getelementptr inbounds i8, i8* %344, i64 %343
  store i8 %342, i8* %345, align 1
  %346 = load i8, i8* %339, align 1
  %347 = zext i8 %346 to i64
  %348 = load i64, i64* %325, align 8
  %349 = icmp ugt i64 %348, %347
  br i1 %349, label %351, label %350, !prof !5

350:                                              ; preds = %338
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

351:                                              ; preds = %338
  %352 = getelementptr inbounds i8, i8* %332, i64 2
  %353 = add nsw i32 %331, 1
  %354 = load i8*, i8** %326, align 8
  %355 = getelementptr inbounds i8, i8* %354, i64 %347
  %356 = load i8, i8* %355, align 1
  %357 = sext i32 %353 to i64
  %358 = load i8*, i8** %324, align 8
  %359 = getelementptr inbounds i8, i8* %358, i64 %357
  store i8 %356, i8* %359, align 1
  %360 = load i8, i8* %352, align 1
  %361 = zext i8 %360 to i64
  %362 = load i64, i64* %327, align 8
  %363 = icmp ugt i64 %362, %361
  br i1 %363, label %365, label %364, !prof !5

364:                                              ; preds = %351
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !3
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  unreachable

365:                                              ; preds = %351
  %366 = add nsw i32 %331, 2
  %367 = load i8*, i8** %328, align 8
  %368 = getelementptr inbounds i8, i8* %367, i64 %361
  %369 = load i8, i8* %368, align 1
  %370 = add nsw i32 %331, 3
  %371 = sext i32 %366 to i64
  %372 = load i8*, i8** %324, align 8
  %373 = getelementptr inbounds i8, i8* %372, i64 %371
  store i8 %369, i8* %373, align 1
  br i1 %317, label %381, label %374

374:                                              ; preds = %365
  %375 = getelementptr inbounds i8, i8* %332, i64 3
  %376 = load i8, i8* %375, align 1
  %377 = add nsw i32 %331, 4
  %378 = sext i32 %370 to i64
  %379 = load i8*, i8** %324, align 8
  %380 = getelementptr inbounds i8, i8* %379, i64 %378
  store i8 %376, i8* %380, align 1
  br label %381

381:                                              ; preds = %374, %365
  %382 = phi i32 [ %370, %365 ], [ %377, %374 ]
  %383 = getelementptr inbounds i8, i8* %332, i64 4
  %384 = add nuw nsw i32 %330, 1
  %385 = load i32, i32* %318, align 4
  %386 = icmp slt i32 %384, %385
  br i1 %386, label %329, label %387

387:                                              ; preds = %381, %303, %258, %232, %120, %73, %316, %8, %20, %140, %112, %65, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK20CPDF_TransferFuncDIB11GetScanlineEi(%class.CPDF_TransferFuncDIB* readonly, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %3, align 8
  %5 = bitcast %class.CFX_DIBBase* %4 to i8* (%class.CFX_DIBBase*, i32)***
  %6 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %5, align 8
  %7 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %6, i64 3
  %8 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %7, align 8
  %9 = tail call i8* %8(%class.CFX_DIBBase* %4, i32 %1) #7
  %10 = getelementptr inbounds %class.CPDF_TransferFuncDIB, %class.CPDF_TransferFuncDIB* %0, i64 0, i32 2
  tail call void @_ZNK20CPDF_TransferFuncDIB17TranslateScanlineEPKhPNSt3__16vectorIh16FxAllocAllocatorIhEEE(%class.CPDF_TransferFuncDIB* %0, i8* %9, %"class.std::__1::vector.10"* %10)
  %11 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %10, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  ret i8* %12
}

declare i8* @_ZNK11CFX_DIBBase9GetBufferEv(%class.CFX_DIBBase*) unnamed_addr #1

declare zeroext i1 @_ZNK11CFX_DIBBase14SkipToScanlineEiP19PauseIndicatorIface(%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*) unnamed_addr #1

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIh16FxAllocAllocatorIhEE8__appendEm(%"class.std::__1::vector.10"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #7
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %178

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.10"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.10"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %39, i64 1) #7
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #7
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.10", %"class.std::__1::vector.10"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = ptrtoint i8* %54 to i64
  %56 = load i8*, i8** %6, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp eq i8* %56, %54
  br i1 %58, label %172, label %59

59:                                               ; preds = %41
  %60 = ptrtoint i8* %56 to i64
  %61 = sub i64 %60, %55
  %62 = icmp ult i64 %61, 16
  br i1 %62, label %158, label %63

63:                                               ; preds = %59
  %64 = sub i64 %8, %57
  %65 = sub i64 %64, %24
  %66 = getelementptr i8, i8* %54, i64 %65
  %67 = ptrtoint i8* %66 to i64
  %68 = getelementptr i8, i8* %43, i64 %67
  %69 = icmp ult i8* %68, %56
  %70 = icmp ult i8* %54, %44
  %71 = and i1 %69, %70
  br i1 %71, label %158, label %72

72:                                               ; preds = %63
  %73 = and i64 %61, -16
  %74 = sub i64 0, %73
  %75 = getelementptr i8, i8* %44, i64 %74
  %76 = sub i64 0, %73
  %77 = getelementptr i8, i8* %56, i64 %76
  %78 = add i64 %73, -16
  %79 = lshr exact i64 %78, 4
  %80 = add nuw nsw i64 %79, 1
  %81 = and i64 %80, 3
  %82 = icmp ult i64 %78, 48
  br i1 %82, label %135, label %83

83:                                               ; preds = %72
  %84 = sub nsw i64 %80, %81
  %85 = getelementptr i8, i8* %44, i64 -1
  %86 = getelementptr inbounds i8, i8* %85, i64 -8
  %87 = getelementptr inbounds i8, i8* %56, i64 -16
  %88 = getelementptr inbounds i8, i8* %86, i64 -7
  %89 = getelementptr i8, i8* %44, i64 -1
  %90 = getelementptr inbounds i8, i8* %89, i64 -8
  %91 = getelementptr inbounds i8, i8* %56, i64 -16
  %92 = getelementptr inbounds i8, i8* %90, i64 -7
  %93 = getelementptr i8, i8* %44, i64 -1
  %94 = getelementptr inbounds i8, i8* %93, i64 -8
  %95 = getelementptr inbounds i8, i8* %56, i64 -16
  %96 = getelementptr inbounds i8, i8* %94, i64 -7
  %97 = getelementptr i8, i8* %44, i64 -1
  %98 = getelementptr inbounds i8, i8* %97, i64 -8
  %99 = getelementptr inbounds i8, i8* %56, i64 -16
  %100 = getelementptr inbounds i8, i8* %98, i64 -7
  br label %101

101:                                              ; preds = %101, %83
  %102 = phi i64 [ 0, %83 ], [ %132, %101 ]
  %103 = phi i64 [ %84, %83 ], [ %133, %101 ]
  %104 = sub i64 0, %102
  %105 = sub i64 0, %102
  %106 = getelementptr inbounds i8, i8* %87, i64 %105
  %107 = bitcast i8* %106 to <2 x i64>*
  %108 = load <2 x i64>, <2 x i64>* %107, align 1, !alias.scope !9
  %109 = getelementptr inbounds i8, i8* %88, i64 %104
  %110 = bitcast i8* %109 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %110, align 1, !alias.scope !12, !noalias !9
  %111 = sub nuw nsw i64 -16, %102
  %112 = sub nuw nsw i64 -16, %102
  %113 = getelementptr inbounds i8, i8* %91, i64 %112
  %114 = bitcast i8* %113 to <2 x i64>*
  %115 = load <2 x i64>, <2 x i64>* %114, align 1, !alias.scope !9
  %116 = getelementptr inbounds i8, i8* %92, i64 %111
  %117 = bitcast i8* %116 to <2 x i64>*
  store <2 x i64> %115, <2 x i64>* %117, align 1, !alias.scope !12, !noalias !9
  %118 = sub nuw nsw i64 -32, %102
  %119 = sub nuw nsw i64 -32, %102
  %120 = getelementptr inbounds i8, i8* %95, i64 %119
  %121 = bitcast i8* %120 to <2 x i64>*
  %122 = load <2 x i64>, <2 x i64>* %121, align 1, !alias.scope !9
  %123 = getelementptr inbounds i8, i8* %96, i64 %118
  %124 = bitcast i8* %123 to <2 x i64>*
  store <2 x i64> %122, <2 x i64>* %124, align 1, !alias.scope !12, !noalias !9
  %125 = sub nuw nsw i64 -48, %102
  %126 = sub nuw nsw i64 -48, %102
  %127 = getelementptr inbounds i8, i8* %99, i64 %126
  %128 = bitcast i8* %127 to <2 x i64>*
  %129 = load <2 x i64>, <2 x i64>* %128, align 1, !alias.scope !9
  %130 = getelementptr inbounds i8, i8* %100, i64 %125
  %131 = bitcast i8* %130 to <2 x i64>*
  store <2 x i64> %129, <2 x i64>* %131, align 1, !alias.scope !12, !noalias !9
  %132 = add i64 %102, 64
  %133 = add i64 %103, -4
  %134 = icmp eq i64 %133, 0
  br i1 %134, label %135, label %101, !llvm.loop !14

135:                                              ; preds = %101, %72
  %136 = phi i64 [ 0, %72 ], [ %132, %101 ]
  %137 = icmp eq i64 %81, 0
  br i1 %137, label %156, label %138

138:                                              ; preds = %135
  %139 = getelementptr i8, i8* %44, i64 -1
  %140 = getelementptr inbounds i8, i8* %139, i64 -8
  %141 = getelementptr inbounds i8, i8* %56, i64 -16
  %142 = getelementptr inbounds i8, i8* %140, i64 -7
  br label %143

143:                                              ; preds = %143, %138
  %144 = phi i64 [ %136, %138 ], [ %153, %143 ]
  %145 = phi i64 [ %81, %138 ], [ %154, %143 ]
  %146 = sub i64 0, %144
  %147 = sub i64 0, %144
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  %149 = bitcast i8* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 1, !alias.scope !9
  %151 = getelementptr inbounds i8, i8* %142, i64 %146
  %152 = bitcast i8* %151 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %152, align 1, !alias.scope !12, !noalias !9
  %153 = add i64 %144, 16
  %154 = add i64 %145, -1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %143, !llvm.loop !16

156:                                              ; preds = %143, %135
  %157 = icmp eq i64 %61, %73
  br i1 %157, label %168, label %158

158:                                              ; preds = %156, %63, %59
  %159 = phi i8* [ %44, %63 ], [ %44, %59 ], [ %75, %156 ]
  %160 = phi i8* [ %56, %63 ], [ %56, %59 ], [ %77, %156 ]
  br label %161

161:                                              ; preds = %158, %161
  %162 = phi i8* [ %164, %161 ], [ %159, %158 ]
  %163 = phi i8* [ %165, %161 ], [ %160, %158 ]
  %164 = getelementptr inbounds i8, i8* %162, i64 -1
  %165 = getelementptr inbounds i8, i8* %163, i64 -1
  %166 = load i8, i8* %165, align 1
  store i8 %166, i8* %164, align 1
  %167 = icmp eq i8* %165, %54
  br i1 %167, label %168, label %161, !llvm.loop !18

168:                                              ; preds = %161, %156
  %169 = phi i8* [ %75, %156 ], [ %164, %161 ]
  %170 = ptrtoint i8* %169 to i64
  %171 = load i64, i64* %23, align 8
  br label %172

172:                                              ; preds = %41, %168
  %173 = phi i64 [ %170, %168 ], [ %45, %41 ]
  %174 = phi i64 [ %171, %168 ], [ %55, %41 ]
  store i64 %173, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %178, label %176

176:                                              ; preds = %172
  %177 = inttoptr i64 %174 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %177) #7
  br label %178

178:                                              ; preds = %176, %172, %20
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i32 -2143813251}
!4 = !{i32 -2143813230}
!5 = !{!"branch_weights", i32 2000, i32 1}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!8 = distinct !{!8, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.unroll.disable"}
!18 = distinct !{!18, !15}
