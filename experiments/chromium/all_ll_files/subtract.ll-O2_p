; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/subtract.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/subtract.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_subtract_block_c(i32, i32, i16* nocapture, i64, i8* nocapture readonly, i64, i8* nocapture readonly, i64) local_unnamed_addr #0 {
  %9 = icmp sgt i32 %0, 0
  br i1 %9, label %10, label %200

10:                                               ; preds = %8
  %11 = icmp sgt i32 %1, 0
  %12 = zext i32 %1 to i64
  %13 = and i64 %12, 4294967280
  %14 = add nsw i64 %13, -16
  %15 = lshr exact i64 %14, 4
  %16 = add nuw nsw i64 %15, 1
  %17 = icmp ult i32 %1, 16
  %18 = and i64 %12, 4294967280
  %19 = and i64 %16, 1
  %20 = icmp eq i64 %14, 0
  %21 = sub nuw nsw i64 %16, %19
  %22 = icmp eq i64 %19, 0
  %23 = icmp eq i64 %18, %12
  %24 = and i64 %12, 3
  %25 = icmp eq i64 %24, 0
  br label %26

26:                                               ; preds = %193, %10
  %27 = phi i64 [ %199, %193 ], [ 0, %10 ]
  %28 = phi i32 [ %197, %193 ], [ 0, %10 ]
  %29 = phi i16* [ %194, %193 ], [ %2, %10 ]
  %30 = phi i8* [ %195, %193 ], [ %6, %10 ]
  %31 = phi i8* [ %196, %193 ], [ %4, %10 ]
  %32 = mul i64 %27, %3
  %33 = getelementptr i16, i16* %2, i64 %32
  %34 = bitcast i16* %33 to i8*
  %35 = add i64 %32, %12
  %36 = getelementptr i16, i16* %2, i64 %35
  %37 = bitcast i16* %36 to i8*
  %38 = mul i64 %27, %5
  %39 = getelementptr i8, i8* %4, i64 %38
  %40 = add i64 %38, %12
  %41 = getelementptr i8, i8* %4, i64 %40
  %42 = mul i64 %27, %7
  %43 = getelementptr i8, i8* %6, i64 %42
  %44 = add i64 %42, %12
  %45 = getelementptr i8, i8* %6, i64 %44
  br i1 %11, label %46, label %193

46:                                               ; preds = %26
  br i1 %17, label %133, label %47

47:                                               ; preds = %46
  %48 = icmp ugt i8* %41, %34
  %49 = icmp ult i8* %39, %37
  %50 = and i1 %48, %49
  %51 = icmp ugt i8* %45, %34
  %52 = icmp ult i8* %43, %37
  %53 = and i1 %51, %52
  %54 = or i1 %50, %53
  br i1 %54, label %133, label %55

55:                                               ; preds = %47
  br i1 %20, label %107, label %56

56:                                               ; preds = %55, %56
  %57 = phi i64 [ %104, %56 ], [ 0, %55 ]
  %58 = phi i64 [ %105, %56 ], [ %21, %55 ]
  %59 = getelementptr inbounds i8, i8* %31, i64 %57
  %60 = bitcast i8* %59 to <8 x i8>*
  %61 = load <8 x i8>, <8 x i8>* %60, align 1, !alias.scope !2
  %62 = getelementptr inbounds i8, i8* %59, i64 8
  %63 = bitcast i8* %62 to <8 x i8>*
  %64 = load <8 x i8>, <8 x i8>* %63, align 1, !alias.scope !2
  %65 = zext <8 x i8> %61 to <8 x i16>
  %66 = zext <8 x i8> %64 to <8 x i16>
  %67 = getelementptr inbounds i8, i8* %30, i64 %57
  %68 = bitcast i8* %67 to <8 x i8>*
  %69 = load <8 x i8>, <8 x i8>* %68, align 1, !alias.scope !5
  %70 = getelementptr inbounds i8, i8* %67, i64 8
  %71 = bitcast i8* %70 to <8 x i8>*
  %72 = load <8 x i8>, <8 x i8>* %71, align 1, !alias.scope !5
  %73 = zext <8 x i8> %69 to <8 x i16>
  %74 = zext <8 x i8> %72 to <8 x i16>
  %75 = sub nsw <8 x i16> %65, %73
  %76 = sub nsw <8 x i16> %66, %74
  %77 = getelementptr inbounds i16, i16* %29, i64 %57
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> %75, <8 x i16>* %78, align 2, !alias.scope !7, !noalias !9
  %79 = getelementptr inbounds i16, i16* %77, i64 8
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %80, align 2, !alias.scope !7, !noalias !9
  %81 = or i64 %57, 16
  %82 = getelementptr inbounds i8, i8* %31, i64 %81
  %83 = bitcast i8* %82 to <8 x i8>*
  %84 = load <8 x i8>, <8 x i8>* %83, align 1, !alias.scope !2
  %85 = getelementptr inbounds i8, i8* %82, i64 8
  %86 = bitcast i8* %85 to <8 x i8>*
  %87 = load <8 x i8>, <8 x i8>* %86, align 1, !alias.scope !2
  %88 = zext <8 x i8> %84 to <8 x i16>
  %89 = zext <8 x i8> %87 to <8 x i16>
  %90 = getelementptr inbounds i8, i8* %30, i64 %81
  %91 = bitcast i8* %90 to <8 x i8>*
  %92 = load <8 x i8>, <8 x i8>* %91, align 1, !alias.scope !5
  %93 = getelementptr inbounds i8, i8* %90, i64 8
  %94 = bitcast i8* %93 to <8 x i8>*
  %95 = load <8 x i8>, <8 x i8>* %94, align 1, !alias.scope !5
  %96 = zext <8 x i8> %92 to <8 x i16>
  %97 = zext <8 x i8> %95 to <8 x i16>
  %98 = sub nsw <8 x i16> %88, %96
  %99 = sub nsw <8 x i16> %89, %97
  %100 = getelementptr inbounds i16, i16* %29, i64 %81
  %101 = bitcast i16* %100 to <8 x i16>*
  store <8 x i16> %98, <8 x i16>* %101, align 2, !alias.scope !7, !noalias !9
  %102 = getelementptr inbounds i16, i16* %100, i64 8
  %103 = bitcast i16* %102 to <8 x i16>*
  store <8 x i16> %99, <8 x i16>* %103, align 2, !alias.scope !7, !noalias !9
  %104 = add i64 %57, 32
  %105 = add i64 %58, -2
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %56, !llvm.loop !10

107:                                              ; preds = %56, %55
  %108 = phi i64 [ 0, %55 ], [ %104, %56 ]
  br i1 %22, label %132, label %109

109:                                              ; preds = %107
  %110 = getelementptr inbounds i8, i8* %31, i64 %108
  %111 = bitcast i8* %110 to <8 x i8>*
  %112 = load <8 x i8>, <8 x i8>* %111, align 1, !alias.scope !2
  %113 = getelementptr inbounds i8, i8* %110, i64 8
  %114 = bitcast i8* %113 to <8 x i8>*
  %115 = load <8 x i8>, <8 x i8>* %114, align 1, !alias.scope !2
  %116 = zext <8 x i8> %112 to <8 x i16>
  %117 = zext <8 x i8> %115 to <8 x i16>
  %118 = getelementptr inbounds i8, i8* %30, i64 %108
  %119 = bitcast i8* %118 to <8 x i8>*
  %120 = load <8 x i8>, <8 x i8>* %119, align 1, !alias.scope !5
  %121 = getelementptr inbounds i8, i8* %118, i64 8
  %122 = bitcast i8* %121 to <8 x i8>*
  %123 = load <8 x i8>, <8 x i8>* %122, align 1, !alias.scope !5
  %124 = zext <8 x i8> %120 to <8 x i16>
  %125 = zext <8 x i8> %123 to <8 x i16>
  %126 = sub nsw <8 x i16> %116, %124
  %127 = sub nsw <8 x i16> %117, %125
  %128 = getelementptr inbounds i16, i16* %29, i64 %108
  %129 = bitcast i16* %128 to <8 x i16>*
  store <8 x i16> %126, <8 x i16>* %129, align 2, !alias.scope !7, !noalias !9
  %130 = getelementptr inbounds i16, i16* %128, i64 8
  %131 = bitcast i16* %130 to <8 x i16>*
  store <8 x i16> %127, <8 x i16>* %131, align 2, !alias.scope !7, !noalias !9
  br label %132

132:                                              ; preds = %107, %109
  br i1 %23, label %193, label %133

133:                                              ; preds = %132, %47, %46
  %134 = phi i64 [ 0, %47 ], [ 0, %46 ], [ %18, %132 ]
  %135 = xor i64 %134, -1
  %136 = add nsw i64 %135, %12
  br i1 %25, label %151, label %137

137:                                              ; preds = %133, %137
  %138 = phi i64 [ %148, %137 ], [ %134, %133 ]
  %139 = phi i64 [ %149, %137 ], [ %24, %133 ]
  %140 = getelementptr inbounds i8, i8* %31, i64 %138
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i16
  %143 = getelementptr inbounds i8, i8* %30, i64 %138
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i16
  %146 = sub nsw i16 %142, %145
  %147 = getelementptr inbounds i16, i16* %29, i64 %138
  store i16 %146, i16* %147, align 2
  %148 = add nuw nsw i64 %138, 1
  %149 = add i64 %139, -1
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %151, label %137, !llvm.loop !12

151:                                              ; preds = %137, %133
  %152 = phi i64 [ %134, %133 ], [ %148, %137 ]
  %153 = icmp ult i64 %136, 3
  br i1 %153, label %193, label %154

154:                                              ; preds = %151, %154
  %155 = phi i64 [ %191, %154 ], [ %152, %151 ]
  %156 = getelementptr inbounds i8, i8* %31, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i16
  %159 = getelementptr inbounds i8, i8* %30, i64 %155
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i16
  %162 = sub nsw i16 %158, %161
  %163 = getelementptr inbounds i16, i16* %29, i64 %155
  store i16 %162, i16* %163, align 2
  %164 = add nuw nsw i64 %155, 1
  %165 = getelementptr inbounds i8, i8* %31, i64 %164
  %166 = load i8, i8* %165, align 1
  %167 = zext i8 %166 to i16
  %168 = getelementptr inbounds i8, i8* %30, i64 %164
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i16
  %171 = sub nsw i16 %167, %170
  %172 = getelementptr inbounds i16, i16* %29, i64 %164
  store i16 %171, i16* %172, align 2
  %173 = add nuw nsw i64 %155, 2
  %174 = getelementptr inbounds i8, i8* %31, i64 %173
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i16
  %177 = getelementptr inbounds i8, i8* %30, i64 %173
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i16
  %180 = sub nsw i16 %176, %179
  %181 = getelementptr inbounds i16, i16* %29, i64 %173
  store i16 %180, i16* %181, align 2
  %182 = add nuw nsw i64 %155, 3
  %183 = getelementptr inbounds i8, i8* %31, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i16
  %186 = getelementptr inbounds i8, i8* %30, i64 %182
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i16
  %189 = sub nsw i16 %185, %188
  %190 = getelementptr inbounds i16, i16* %29, i64 %182
  store i16 %189, i16* %190, align 2
  %191 = add nuw nsw i64 %155, 4
  %192 = icmp eq i64 %191, %12
  br i1 %192, label %193, label %154, !llvm.loop !14

193:                                              ; preds = %151, %154, %132, %26
  %194 = getelementptr inbounds i16, i16* %29, i64 %3
  %195 = getelementptr inbounds i8, i8* %30, i64 %7
  %196 = getelementptr inbounds i8, i8* %31, i64 %5
  %197 = add nuw nsw i32 %28, 1
  %198 = icmp eq i32 %197, %0
  %199 = add i64 %27, 1
  br i1 %198, label %200, label %26

200:                                              ; preds = %193, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_subtract_block_c(i32, i32, i16* nocapture, i64, i8*, i64, i8*, i64, i32) local_unnamed_addr #0 {
  %10 = icmp sgt i32 %0, 0
  br i1 %10, label %11, label %183

11:                                               ; preds = %9
  %12 = ptrtoint i8* %6 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = ptrtoint i8* %4 to i64
  %16 = shl i64 %15, 1
  %17 = inttoptr i64 %16 to i16*
  %18 = icmp sgt i32 %1, 0
  %19 = zext i32 %1 to i64
  %20 = and i64 %19, 4294967280
  %21 = add nsw i64 %20, -16
  %22 = lshr exact i64 %21, 4
  %23 = add nuw nsw i64 %22, 1
  %24 = icmp ult i32 %1, 16
  %25 = and i64 %19, 4294967280
  %26 = and i64 %23, 1
  %27 = icmp eq i64 %21, 0
  %28 = sub nuw nsw i64 %23, %26
  %29 = icmp eq i64 %26, 0
  %30 = icmp eq i64 %25, %19
  %31 = and i64 %19, 3
  %32 = icmp eq i64 %31, 0
  br label %33

33:                                               ; preds = %176, %11
  %34 = phi i64 [ %182, %176 ], [ 0, %11 ]
  %35 = phi i16* [ %178, %176 ], [ %14, %11 ]
  %36 = phi i16* [ %179, %176 ], [ %17, %11 ]
  %37 = phi i32 [ %180, %176 ], [ 0, %11 ]
  %38 = phi i16* [ %177, %176 ], [ %2, %11 ]
  %39 = mul i64 %34, %3
  %40 = getelementptr i16, i16* %2, i64 %39
  %41 = add i64 %39, %19
  %42 = getelementptr i16, i16* %2, i64 %41
  %43 = mul i64 %34, %5
  %44 = getelementptr i16, i16* %17, i64 %43
  %45 = add i64 %43, %19
  %46 = getelementptr i16, i16* %17, i64 %45
  %47 = mul i64 %34, %7
  %48 = getelementptr i16, i16* %14, i64 %47
  %49 = add i64 %47, %19
  %50 = getelementptr i16, i16* %14, i64 %49
  br i1 %18, label %51, label %176

51:                                               ; preds = %33
  br i1 %24, label %126, label %52

52:                                               ; preds = %51
  %53 = icmp ult i16* %40, %46
  %54 = icmp ult i16* %44, %42
  %55 = and i1 %53, %54
  %56 = icmp ult i16* %40, %50
  %57 = icmp ult i16* %48, %42
  %58 = and i1 %56, %57
  %59 = or i1 %55, %58
  br i1 %59, label %126, label %60

60:                                               ; preds = %52
  br i1 %27, label %104, label %61

61:                                               ; preds = %60, %61
  %62 = phi i64 [ %101, %61 ], [ 0, %60 ]
  %63 = phi i64 [ %102, %61 ], [ %28, %60 ]
  %64 = getelementptr inbounds i16, i16* %36, i64 %62
  %65 = bitcast i16* %64 to <8 x i16>*
  %66 = load <8 x i16>, <8 x i16>* %65, align 2, !alias.scope !15
  %67 = getelementptr inbounds i16, i16* %64, i64 8
  %68 = bitcast i16* %67 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !15
  %70 = getelementptr inbounds i16, i16* %35, i64 %62
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !18
  %73 = getelementptr inbounds i16, i16* %70, i64 8
  %74 = bitcast i16* %73 to <8 x i16>*
  %75 = load <8 x i16>, <8 x i16>* %74, align 2, !alias.scope !18
  %76 = sub <8 x i16> %66, %72
  %77 = sub <8 x i16> %69, %75
  %78 = getelementptr inbounds i16, i16* %38, i64 %62
  %79 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %76, <8 x i16>* %79, align 2, !alias.scope !20, !noalias !22
  %80 = getelementptr inbounds i16, i16* %78, i64 8
  %81 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %81, align 2, !alias.scope !20, !noalias !22
  %82 = or i64 %62, 16
  %83 = getelementptr inbounds i16, i16* %36, i64 %82
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !15
  %86 = getelementptr inbounds i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <8 x i16>*
  %88 = load <8 x i16>, <8 x i16>* %87, align 2, !alias.scope !15
  %89 = getelementptr inbounds i16, i16* %35, i64 %82
  %90 = bitcast i16* %89 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !18
  %92 = getelementptr inbounds i16, i16* %89, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !18
  %95 = sub <8 x i16> %85, %91
  %96 = sub <8 x i16> %88, %94
  %97 = getelementptr inbounds i16, i16* %38, i64 %82
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> %95, <8 x i16>* %98, align 2, !alias.scope !20, !noalias !22
  %99 = getelementptr inbounds i16, i16* %97, i64 8
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %100, align 2, !alias.scope !20, !noalias !22
  %101 = add i64 %62, 32
  %102 = add i64 %63, -2
  %103 = icmp eq i64 %102, 0
  br i1 %103, label %104, label %61, !llvm.loop !23

104:                                              ; preds = %61, %60
  %105 = phi i64 [ 0, %60 ], [ %101, %61 ]
  br i1 %29, label %125, label %106

106:                                              ; preds = %104
  %107 = getelementptr inbounds i16, i16* %36, i64 %105
  %108 = bitcast i16* %107 to <8 x i16>*
  %109 = load <8 x i16>, <8 x i16>* %108, align 2, !alias.scope !15
  %110 = getelementptr inbounds i16, i16* %107, i64 8
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !15
  %113 = getelementptr inbounds i16, i16* %35, i64 %105
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !18
  %116 = getelementptr inbounds i16, i16* %113, i64 8
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !18
  %119 = sub <8 x i16> %109, %115
  %120 = sub <8 x i16> %112, %118
  %121 = getelementptr inbounds i16, i16* %38, i64 %105
  %122 = bitcast i16* %121 to <8 x i16>*
  store <8 x i16> %119, <8 x i16>* %122, align 2, !alias.scope !20, !noalias !22
  %123 = getelementptr inbounds i16, i16* %121, i64 8
  %124 = bitcast i16* %123 to <8 x i16>*
  store <8 x i16> %120, <8 x i16>* %124, align 2, !alias.scope !20, !noalias !22
  br label %125

125:                                              ; preds = %104, %106
  br i1 %30, label %176, label %126

126:                                              ; preds = %125, %52, %51
  %127 = phi i64 [ 0, %52 ], [ 0, %51 ], [ %25, %125 ]
  %128 = xor i64 %127, -1
  %129 = add nsw i64 %128, %19
  br i1 %32, label %142, label %130

130:                                              ; preds = %126, %130
  %131 = phi i64 [ %139, %130 ], [ %127, %126 ]
  %132 = phi i64 [ %140, %130 ], [ %31, %126 ]
  %133 = getelementptr inbounds i16, i16* %36, i64 %131
  %134 = load i16, i16* %133, align 2
  %135 = getelementptr inbounds i16, i16* %35, i64 %131
  %136 = load i16, i16* %135, align 2
  %137 = sub i16 %134, %136
  %138 = getelementptr inbounds i16, i16* %38, i64 %131
  store i16 %137, i16* %138, align 2
  %139 = add nuw nsw i64 %131, 1
  %140 = add i64 %132, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %130, !llvm.loop !24

142:                                              ; preds = %130, %126
  %143 = phi i64 [ %127, %126 ], [ %139, %130 ]
  %144 = icmp ult i64 %129, 3
  br i1 %144, label %176, label %145

145:                                              ; preds = %142, %145
  %146 = phi i64 [ %174, %145 ], [ %143, %142 ]
  %147 = getelementptr inbounds i16, i16* %36, i64 %146
  %148 = load i16, i16* %147, align 2
  %149 = getelementptr inbounds i16, i16* %35, i64 %146
  %150 = load i16, i16* %149, align 2
  %151 = sub i16 %148, %150
  %152 = getelementptr inbounds i16, i16* %38, i64 %146
  store i16 %151, i16* %152, align 2
  %153 = add nuw nsw i64 %146, 1
  %154 = getelementptr inbounds i16, i16* %36, i64 %153
  %155 = load i16, i16* %154, align 2
  %156 = getelementptr inbounds i16, i16* %35, i64 %153
  %157 = load i16, i16* %156, align 2
  %158 = sub i16 %155, %157
  %159 = getelementptr inbounds i16, i16* %38, i64 %153
  store i16 %158, i16* %159, align 2
  %160 = add nuw nsw i64 %146, 2
  %161 = getelementptr inbounds i16, i16* %36, i64 %160
  %162 = load i16, i16* %161, align 2
  %163 = getelementptr inbounds i16, i16* %35, i64 %160
  %164 = load i16, i16* %163, align 2
  %165 = sub i16 %162, %164
  %166 = getelementptr inbounds i16, i16* %38, i64 %160
  store i16 %165, i16* %166, align 2
  %167 = add nuw nsw i64 %146, 3
  %168 = getelementptr inbounds i16, i16* %36, i64 %167
  %169 = load i16, i16* %168, align 2
  %170 = getelementptr inbounds i16, i16* %35, i64 %167
  %171 = load i16, i16* %170, align 2
  %172 = sub i16 %169, %171
  %173 = getelementptr inbounds i16, i16* %38, i64 %167
  store i16 %172, i16* %173, align 2
  %174 = add nuw nsw i64 %146, 4
  %175 = icmp eq i64 %174, %19
  br i1 %175, label %176, label %145, !llvm.loop !25

176:                                              ; preds = %142, %145, %125, %33
  %177 = getelementptr inbounds i16, i16* %38, i64 %3
  %178 = getelementptr inbounds i16, i16* %35, i64 %7
  %179 = getelementptr inbounds i16, i16* %36, i64 %5
  %180 = add nuw nsw i32 %37, 1
  %181 = icmp eq i32 %180, %0
  %182 = add i64 %34, 1
  br i1 %181, label %183, label %33

183:                                              ; preds = %176, %9
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!3, !6}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !11}
!15 = !{!16}
!16 = distinct !{!16, !17}
!17 = distinct !{!17, !"LVerDomain"}
!18 = !{!19}
!19 = distinct !{!19, !17}
!20 = !{!21}
!21 = distinct !{!21, !17}
!22 = !{!16, !19}
!23 = distinct !{!23, !11}
!24 = distinct !{!24, !13}
!25 = distinct !{!25, !11}
