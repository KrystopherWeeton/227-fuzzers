; ModuleID = '../../third_party/libjpeg_turbo/jccoefct.c'
source_filename = "../../third_party/libjpeg_turbo/jccoefct.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, void (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i32, i32)*, {}* }
%struct.jpeg_color_converter = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { void (%struct.jpeg_compress_struct*)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { {}*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, void (%struct.jpeg_compress_struct*)* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.my_coef_controller = type { %struct.jpeg_c_coef_controller, i32, i32, i32, i32, [10 x [64 x i16]*], [10 x %struct.jvirt_barray_control*] }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_c_coef_controller(%struct.jpeg_compress_struct*, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %4 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %4, i64 0, i32 0
  %6 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %5, align 8
  %7 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %8 = tail call i8* %6(%struct.jpeg_common_struct* %7, i32 1, i64 192) #3
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %10 = bitcast %struct.jpeg_c_coef_controller** %9 to i8**
  store i8* %8, i8** %10, align 8
  %11 = bitcast i8* %8 to void (%struct.jpeg_compress_struct*, i32)**
  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_coef, void (%struct.jpeg_compress_struct*, i32)** %11, align 8
  %12 = icmp eq i32 %1, 0
  br i1 %12, label %52, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %78

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %19 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %18, align 8
  %20 = getelementptr inbounds i8, i8* %8, i64 112
  %21 = bitcast i8* %20 to [10 x %struct.jvirt_barray_control*]*
  br label %22

22:                                               ; preds = %17, %22
  %23 = phi i64 [ 0, %17 ], [ %47, %22 ]
  %24 = phi %struct.jpeg_component_info* [ %19, %17 ], [ %48, %22 ]
  %25 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %26 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %25, i64 0, i32 5
  %27 = load %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)** %26, align 8
  %28 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %24, i64 0, i32 7
  %29 = load i32, i32* %28, align 4
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %24, i64 0, i32 2
  %32 = load i32, i32* %31, align 8
  %33 = sext i32 %32 to i64
  %34 = tail call i64 @jround_up(i64 %30, i64 %33) #3
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %24, i64 0, i32 8
  %37 = load i32, i32* %36, align 8
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %24, i64 0, i32 3
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = tail call i64 @jround_up(i64 %38, i64 %41) #3
  %43 = trunc i64 %42 to i32
  %44 = load i32, i32* %39, align 4
  %45 = tail call %struct.jvirt_barray_control* %27(%struct.jpeg_common_struct* %7, i32 1, i32 0, i32 %35, i32 %43, i32 %44) #3
  %46 = getelementptr inbounds [10 x %struct.jvirt_barray_control*], [10 x %struct.jvirt_barray_control*]* %21, i64 0, i64 %23
  store %struct.jvirt_barray_control* %45, %struct.jvirt_barray_control** %46, align 8
  %47 = add nuw nsw i64 %23, 1
  %48 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %24, i64 1
  %49 = load i32, i32* %14, align 4
  %50 = sext i32 %49 to i64
  %51 = icmp slt i64 %47, %50
  br i1 %51, label %22, label %78

52:                                               ; preds = %2
  %53 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %3, align 8
  %54 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %53, i64 0, i32 1
  %55 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %54, align 8
  %56 = tail call i8* %55(%struct.jpeg_common_struct* %7, i32 1, i64 1280) #3
  %57 = getelementptr inbounds i8, i8* %8, i64 32
  %58 = bitcast i8* %57 to i8**
  store i8* %56, i8** %58, align 8
  %59 = getelementptr inbounds i8, i8* %8, i64 40
  %60 = insertelement <2 x i8*> undef, i8* %56, i32 0
  %61 = shufflevector <2 x i8*> %60, <2 x i8*> undef, <2 x i32> zeroinitializer
  %62 = getelementptr i8, <2 x i8*> %61, <2 x i64> <i64 128, i64 256>
  %63 = bitcast i8* %59 to <2 x i8*>*
  store <2 x i8*> %62, <2 x i8*>* %63, align 8
  %64 = getelementptr inbounds i8, i8* %8, i64 56
  %65 = getelementptr i8, <2 x i8*> %61, <2 x i64> <i64 384, i64 512>
  %66 = bitcast i8* %64 to <2 x i8*>*
  store <2 x i8*> %65, <2 x i8*>* %66, align 8
  %67 = getelementptr inbounds i8, i8* %8, i64 72
  %68 = getelementptr i8, <2 x i8*> %61, <2 x i64> <i64 640, i64 768>
  %69 = bitcast i8* %67 to <2 x i8*>*
  store <2 x i8*> %68, <2 x i8*>* %69, align 8
  %70 = getelementptr inbounds i8, i8* %8, i64 88
  %71 = getelementptr i8, <2 x i8*> %61, <2 x i64> <i64 896, i64 1024>
  %72 = bitcast i8* %70 to <2 x i8*>*
  store <2 x i8*> %71, <2 x i8*>* %72, align 8
  %73 = getelementptr inbounds i8, i8* %56, i64 1152
  %74 = getelementptr inbounds i8, i8* %8, i64 104
  %75 = bitcast i8* %74 to i8**
  store i8* %73, i8** %75, align 8
  %76 = getelementptr inbounds i8, i8* %8, i64 112
  %77 = bitcast i8* %76 to %struct.jvirt_barray_control**
  store %struct.jvirt_barray_control* null, %struct.jvirt_barray_control** %77, align 8
  br label %78

78:                                               ; preds = %22, %13, %52
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_coef(%struct.jpeg_compress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %4 = bitcast %struct.jpeg_c_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  store i32 0, i32* %6, align 8
  %7 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %26, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 43
  %15 = load i32, i32* %14, align 8
  %16 = add i32 %15, -1
  %17 = icmp ult i32 %13, %16
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 0
  %19 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %18, align 8
  br i1 %17, label %20, label %23

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %19, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  br label %26

23:                                               ; preds = %11
  %24 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %19, i64 0, i32 18
  %25 = load i32, i32* %24, align 8
  br label %26

26:                                               ; preds = %2, %20, %23
  %27 = phi i32 [ %22, %20 ], [ %25, %23 ], [ 1, %2 ]
  %28 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 4
  store i32 %27, i32* %28, align 4
  %29 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 2
  store i32 0, i32* %29, align 4
  %30 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %7, i64 0, i32 3
  store i32 0, i32* %30, align 8
  switch i32 %1, label %73 [
    i32 0, label %31
    i32 3, label %45
    i32 2, label %59
  ]

31:                                               ; preds = %26
  %32 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 0
  %33 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %32, align 8
  %34 = icmp eq %struct.jvirt_barray_control* %33, null
  br i1 %34, label %43, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %37 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %36, align 8
  %38 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %37, i64 0, i32 5
  store i32 4, i32* %38, align 8
  %39 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %36, align 8
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 0
  %41 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %40, align 8
  %42 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %41(%struct.jpeg_common_struct* %42) #3
  br label %43

43:                                               ; preds = %31, %35
  %44 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, i8***)* @compress_data, i32 (%struct.jpeg_compress_struct*, i8***)** %44, align 8
  br label %81

45:                                               ; preds = %26
  %46 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 0
  %47 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %46, align 8
  %48 = icmp eq %struct.jvirt_barray_control* %47, null
  br i1 %48, label %49, label %57

49:                                               ; preds = %45
  %50 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %51 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %50, align 8
  %52 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %51, i64 0, i32 5
  store i32 4, i32* %52, align 8
  %53 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %50, align 8
  %54 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %53, i64 0, i32 0
  %55 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %54, align 8
  %56 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %55(%struct.jpeg_common_struct* %56) #3
  br label %57

57:                                               ; preds = %49, %45
  %58 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, i8***)* @compress_first_pass, i32 (%struct.jpeg_compress_struct*, i8***)** %58, align 8
  br label %81

59:                                               ; preds = %26
  %60 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 0
  %61 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %60, align 8
  %62 = icmp eq %struct.jvirt_barray_control* %61, null
  br i1 %62, label %63, label %71

63:                                               ; preds = %59
  %64 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %65 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %65, i64 0, i32 5
  store i32 4, i32* %66, align 8
  %67 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %67, i64 0, i32 0
  %69 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %68, align 8
  %70 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %69(%struct.jpeg_common_struct* %70) #3
  br label %71

71:                                               ; preds = %63, %59
  %72 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 0, i32 1
  store i32 (%struct.jpeg_compress_struct*, i8***)* @compress_output, i32 (%struct.jpeg_compress_struct*, i8***)** %72, align 8
  br label %81

73:                                               ; preds = %26
  %74 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %75 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %74, align 8
  %76 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %75, i64 0, i32 5
  store i32 4, i32* %76, align 8
  %77 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %74, align 8
  %78 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %77, i64 0, i32 0
  %79 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %78, align 8
  %80 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %79(%struct.jpeg_common_struct* %80) #3
  br label %81

81:                                               ; preds = %73, %71, %57, %43
  ret void
}

declare i64 @jround_up(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @compress_data(%struct.jpeg_compress_struct*, i8*** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %4 = bitcast %struct.jpeg_c_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 43
  %10 = load i32, i32* %9, align 8
  %11 = add i32 %10, -1
  %12 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %13, %15
  br i1 %16, label %17, label %165

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 2
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %20 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 61
  %22 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %23 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 0
  %24 = load i32, i32* %18, align 4
  br label %25

25:                                               ; preds = %17, %161
  %26 = phi i32 [ %15, %17 ], [ %162, %161 ]
  %27 = phi i32 [ %24, %17 ], [ 0, %161 ]
  %28 = phi i32 [ %13, %17 ], [ %163, %161 ]
  %29 = icmp ugt i32 %27, %8
  br i1 %29, label %161, label %30

30:                                               ; preds = %25
  %31 = shl nsw i32 %28, 3
  br label %32

32:                                               ; preds = %30, %156
  %33 = phi i32 [ %27, %30 ], [ %157, %156 ]
  %34 = load i32, i32* %19, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %149

36:                                               ; preds = %32
  %37 = icmp ult i32 %33, %8
  br label %38

38:                                               ; preds = %36, %143
  %39 = phi i32 [ %34, %36 ], [ %144, %143 ]
  %40 = phi i64 [ 0, %36 ], [ %146, %143 ]
  %41 = phi i32 [ 0, %36 ], [ %145, %143 ]
  %42 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %40
  %43 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %42, align 8
  %44 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 13
  %45 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 17
  %46 = select i1 %37, i32* %44, i32* %45
  %47 = load i32, i32* %46, align 4
  %48 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 16
  %49 = load i32, i32* %48, align 8
  %50 = mul i32 %49, %33
  %51 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 14
  %52 = load i32, i32* %51, align 8
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %143

54:                                               ; preds = %38
  %55 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 18
  %56 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %43, i64 0, i32 1
  %57 = sext i32 %47 to i64
  br label %58

58:                                               ; preds = %54, %134
  %59 = phi i32 [ %31, %54 ], [ %137, %134 ]
  %60 = phi i32 [ 0, %54 ], [ %138, %134 ]
  %61 = phi i32 [ %41, %54 ], [ %136, %134 ]
  %62 = load i32, i32* %20, align 8
  %63 = icmp ult i32 %62, %11
  br i1 %63, label %68, label %64

64:                                               ; preds = %58
  %65 = add nsw i32 %60, %28
  %66 = load i32, i32* %55, align 8
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %107

68:                                               ; preds = %64, %58
  %69 = load %struct.jpeg_forward_dct*, %struct.jpeg_forward_dct** %21, align 8
  %70 = getelementptr inbounds %struct.jpeg_forward_dct, %struct.jpeg_forward_dct* %69, i64 0, i32 1
  %71 = load void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)** %70, align 8
  %72 = load i32, i32* %56, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8**, i8*** %1, i64 %73
  %75 = load i8**, i8*** %74, align 8
  %76 = sext i32 %61 to i64
  %77 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %76
  %78 = load [64 x i16]*, [64 x i16]** %77, align 8
  tail call void %71(%struct.jpeg_compress_struct* %0, %struct.jpeg_component_info* %43, i8** %75, [64 x i16]* %78, i32 %59, i32 %50, i32 %47) #3
  %79 = load i32, i32* %44, align 4
  %80 = icmp sgt i32 %79, %47
  br i1 %80, label %81, label %134

81:                                               ; preds = %68
  %82 = add nsw i32 %61, %47
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %83
  %85 = bitcast [64 x i16]** %84 to i8**
  %86 = load i8*, i8** %85, align 8
  %87 = sub nsw i32 %79, %47
  %88 = sext i32 %87 to i64
  %89 = shl nsw i64 %88, 7
  tail call void @jzero_far(i8* %86, i64 %89) #3
  %90 = load i32, i32* %44, align 4
  %91 = icmp slt i32 %47, %90
  br i1 %91, label %92, label %134

92:                                               ; preds = %81, %92
  %93 = phi i64 [ %103, %92 ], [ %57, %81 ]
  %94 = add nsw i64 %93, %76
  %95 = add nsw i64 %94, -1
  %96 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %95
  %97 = load [64 x i16]*, [64 x i16]** %96, align 8
  %98 = getelementptr inbounds [64 x i16], [64 x i16]* %97, i64 0, i64 0
  %99 = load i16, i16* %98, align 2
  %100 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %94
  %101 = load [64 x i16]*, [64 x i16]** %100, align 8
  %102 = getelementptr inbounds [64 x i16], [64 x i16]* %101, i64 0, i64 0
  store i16 %99, i16* %102, align 2
  %103 = add nsw i64 %93, 1
  %104 = load i32, i32* %44, align 4
  %105 = sext i32 %104 to i64
  %106 = icmp slt i64 %103, %105
  br i1 %106, label %92, label %134

107:                                              ; preds = %64
  %108 = sext i32 %61 to i64
  %109 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %108
  %110 = bitcast [64 x i16]** %109 to i8**
  %111 = load i8*, i8** %110, align 8
  %112 = load i32, i32* %44, align 4
  %113 = sext i32 %112 to i64
  %114 = shl nsw i64 %113, 7
  tail call void @jzero_far(i8* %111, i64 %114) #3
  %115 = load i32, i32* %44, align 4
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %134

117:                                              ; preds = %107
  %118 = add nsw i32 %61, -1
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %119
  br label %121

121:                                              ; preds = %117, %121
  %122 = phi i64 [ 0, %117 ], [ %130, %121 ]
  %123 = load [64 x i16]*, [64 x i16]** %120, align 8
  %124 = getelementptr inbounds [64 x i16], [64 x i16]* %123, i64 0, i64 0
  %125 = load i16, i16* %124, align 2
  %126 = add nsw i64 %122, %108
  %127 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 5, i64 %126
  %128 = load [64 x i16]*, [64 x i16]** %127, align 8
  %129 = getelementptr inbounds [64 x i16], [64 x i16]* %128, i64 0, i64 0
  store i16 %125, i16* %129, align 2
  %130 = add nuw nsw i64 %122, 1
  %131 = load i32, i32* %44, align 4
  %132 = sext i32 %131 to i64
  %133 = icmp slt i64 %130, %132
  br i1 %133, label %121, label %134

134:                                              ; preds = %121, %92, %107, %81, %68
  %135 = phi i32 [ %115, %107 ], [ %90, %81 ], [ %79, %68 ], [ %104, %92 ], [ %131, %121 ]
  %136 = add nsw i32 %135, %61
  %137 = add i32 %59, 8
  %138 = add nuw nsw i32 %60, 1
  %139 = load i32, i32* %51, align 8
  %140 = icmp slt i32 %138, %139
  br i1 %140, label %58, label %141

141:                                              ; preds = %134
  %142 = load i32, i32* %19, align 4
  br label %143

143:                                              ; preds = %141, %38
  %144 = phi i32 [ %39, %38 ], [ %142, %141 ]
  %145 = phi i32 [ %41, %38 ], [ %136, %141 ]
  %146 = add nuw nsw i64 %40, 1
  %147 = sext i32 %144 to i64
  %148 = icmp slt i64 %146, %147
  br i1 %148, label %38, label %149

149:                                              ; preds = %143, %32
  %150 = load %struct.jpeg_entropy_encoder*, %struct.jpeg_entropy_encoder** %22, align 8
  %151 = getelementptr inbounds %struct.jpeg_entropy_encoder, %struct.jpeg_entropy_encoder* %150, i64 0, i32 1
  %152 = load i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %151, align 8
  %153 = tail call i32 %152(%struct.jpeg_compress_struct* %0, [64 x i16]** %23) #3
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %149
  store i32 %28, i32* %12, align 8
  store i32 %33, i32* %18, align 4
  br label %192

156:                                              ; preds = %149
  %157 = add i32 %33, 1
  %158 = icmp ugt i32 %157, %8
  br i1 %158, label %159, label %32

159:                                              ; preds = %156
  %160 = load i32, i32* %14, align 4
  br label %161

161:                                              ; preds = %159, %25
  %162 = phi i32 [ %160, %159 ], [ %26, %25 ]
  store i32 0, i32* %18, align 4
  %163 = add nsw i32 %28, 1
  %164 = icmp slt i32 %163, %162
  br i1 %164, label %25, label %165

165:                                              ; preds = %161, %2
  %166 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  %167 = load i32, i32* %166, align 8
  %168 = add i32 %167, 1
  store i32 %168, i32* %166, align 8
  %169 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %170 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %171 = load i32, i32* %170, align 4
  %172 = icmp sgt i32 %171, 1
  br i1 %172, label %187, label %173

173:                                              ; preds = %165
  %174 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %169, i64 0, i32 1
  %175 = load i32, i32* %174, align 8
  %176 = load i32, i32* %9, align 8
  %177 = add i32 %176, -1
  %178 = icmp ult i32 %175, %177
  %179 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 0
  %180 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %179, align 8
  br i1 %178, label %181, label %184

181:                                              ; preds = %173
  %182 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %180, i64 0, i32 3
  %183 = load i32, i32* %182, align 4
  br label %187

184:                                              ; preds = %173
  %185 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %180, i64 0, i32 18
  %186 = load i32, i32* %185, align 8
  br label %187

187:                                              ; preds = %165, %181, %184
  %188 = phi i32 [ %183, %181 ], [ %186, %184 ], [ 1, %165 ]
  %189 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %169, i64 0, i32 4
  store i32 %188, i32* %189, align 4
  %190 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %169, i64 0, i32 2
  store i32 0, i32* %190, align 4
  %191 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %169, i64 0, i32 3
  store i32 0, i32* %191, align 8
  br label %192

192:                                              ; preds = %187, %155
  %193 = phi i32 [ 0, %155 ], [ 1, %187 ]
  ret i32 %193
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @compress_first_pass(%struct.jpeg_compress_struct*, i8*** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %4 = bitcast %struct.jpeg_c_coef_controller** %3 to %struct.my_coef_controller**
  %5 = load %struct.my_coef_controller*, %struct.my_coef_controller** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 43
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 13
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %203

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 15
  %14 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %16 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %17 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 1
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 61
  br label %19

19:                                               ; preds = %12, %197
  %20 = phi i64 [ 0, %12 ], [ %198, %197 ]
  %21 = phi %struct.jpeg_component_info* [ %14, %12 ], [ %199, %197 ]
  %22 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %15, align 8
  %23 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %22, i64 0, i32 8
  %24 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %23, align 8
  %25 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %5, i64 0, i32 6, i64 %20
  %26 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %25, align 8
  %27 = load i32, i32* %17, align 8
  %28 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 %29, %27
  %31 = tail call [64 x i16]** %24(%struct.jpeg_common_struct* %16, %struct.jvirt_barray_control* %26, i32 %30, i32 %29, i32 1) #3
  %32 = load i32, i32* %17, align 8
  %33 = icmp ult i32 %32, %8
  br i1 %33, label %34, label %36

34:                                               ; preds = %19
  %35 = load i32, i32* %28, align 4
  br label %43

36:                                               ; preds = %19
  %37 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 8
  %38 = load i32, i32* %37, align 8
  %39 = load i32, i32* %28, align 4
  %40 = urem i32 %38, %39
  %41 = icmp eq i32 %40, 0
  %42 = select i1 %41, i32 %39, i32 %40
  br label %43

43:                                               ; preds = %36, %34
  %44 = phi i32 [ %35, %34 ], [ %42, %36 ]
  %45 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 7
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 0, i32 2
  %48 = load i32, i32* %47, align 8
  %49 = urem i32 %46, %48
  %50 = icmp sgt i32 %49, 0
  %51 = sub nsw i32 %48, %49
  %52 = select i1 %50, i32 %51, i32 %49
  %53 = icmp sgt i32 %44, 0
  br i1 %53, label %54, label %127

54:                                               ; preds = %43
  %55 = getelementptr inbounds i8**, i8*** %1, i64 %20
  %56 = icmp sgt i32 %52, 0
  %57 = zext i32 %46 to i64
  %58 = sext i32 %52 to i64
  %59 = shl nsw i64 %58, 7
  %60 = zext i32 %44 to i64
  %61 = zext i32 %52 to i64
  %62 = add nsw i64 %61, -1
  %63 = and i64 %61, 7
  %64 = icmp ult i64 %62, 7
  %65 = sub nsw i64 %61, %63
  %66 = icmp eq i64 %63, 0
  br label %67

67:                                               ; preds = %122, %54
  %68 = phi i64 [ 0, %54 ], [ %123, %122 ]
  %69 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %68
  %70 = load [64 x i16]*, [64 x i16]** %69, align 8
  %71 = load %struct.jpeg_forward_dct*, %struct.jpeg_forward_dct** %18, align 8
  %72 = getelementptr inbounds %struct.jpeg_forward_dct, %struct.jpeg_forward_dct* %71, i64 0, i32 1
  %73 = load void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)** %72, align 8
  %74 = load i8**, i8*** %55, align 8
  %75 = trunc i64 %68 to i32
  %76 = shl nsw i32 %75, 3
  tail call void %73(%struct.jpeg_compress_struct* %0, %struct.jpeg_component_info* %21, i8** %74, [64 x i16]* %70, i32 %76, i32 0, i32 %46) #3
  br i1 %56, label %77, label %122

77:                                               ; preds = %67
  %78 = getelementptr inbounds [64 x i16], [64 x i16]* %70, i64 %57
  %79 = bitcast [64 x i16]* %78 to i8*
  tail call void @jzero_far(i8* %79, i64 %59) #3
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 -1
  %81 = getelementptr inbounds [64 x i16], [64 x i16]* %80, i64 0, i64 0
  %82 = load i16, i16* %81, align 2
  br i1 %64, label %112, label %83

83:                                               ; preds = %77, %83
  %84 = phi i64 [ %109, %83 ], [ 0, %77 ]
  %85 = phi i64 [ %110, %83 ], [ %65, %77 ]
  %86 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %84
  %87 = getelementptr inbounds [64 x i16], [64 x i16]* %86, i64 0, i64 0
  store i16 %82, i16* %87, align 2
  %88 = or i64 %84, 1
  %89 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %88
  %90 = getelementptr inbounds [64 x i16], [64 x i16]* %89, i64 0, i64 0
  store i16 %82, i16* %90, align 2
  %91 = or i64 %84, 2
  %92 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %91
  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %92, i64 0, i64 0
  store i16 %82, i16* %93, align 2
  %94 = or i64 %84, 3
  %95 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %94
  %96 = getelementptr inbounds [64 x i16], [64 x i16]* %95, i64 0, i64 0
  store i16 %82, i16* %96, align 2
  %97 = or i64 %84, 4
  %98 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %97
  %99 = getelementptr inbounds [64 x i16], [64 x i16]* %98, i64 0, i64 0
  store i16 %82, i16* %99, align 2
  %100 = or i64 %84, 5
  %101 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %100
  %102 = getelementptr inbounds [64 x i16], [64 x i16]* %101, i64 0, i64 0
  store i16 %82, i16* %102, align 2
  %103 = or i64 %84, 6
  %104 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %103
  %105 = getelementptr inbounds [64 x i16], [64 x i16]* %104, i64 0, i64 0
  store i16 %82, i16* %105, align 2
  %106 = or i64 %84, 7
  %107 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %106
  %108 = getelementptr inbounds [64 x i16], [64 x i16]* %107, i64 0, i64 0
  store i16 %82, i16* %108, align 2
  %109 = add nuw nsw i64 %84, 8
  %110 = add i64 %85, -8
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %83

112:                                              ; preds = %83, %77
  %113 = phi i64 [ 0, %77 ], [ %109, %83 ]
  br i1 %66, label %122, label %114

114:                                              ; preds = %112, %114
  %115 = phi i64 [ %119, %114 ], [ %113, %112 ]
  %116 = phi i64 [ %120, %114 ], [ %63, %112 ]
  %117 = getelementptr inbounds [64 x i16], [64 x i16]* %78, i64 %115
  %118 = getelementptr inbounds [64 x i16], [64 x i16]* %117, i64 0, i64 0
  store i16 %82, i16* %118, align 2
  %119 = add nuw nsw i64 %115, 1
  %120 = add i64 %116, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %114, !llvm.loop !2

122:                                              ; preds = %112, %114, %67
  %123 = add nuw nsw i64 %68, 1
  %124 = icmp eq i64 %123, %60
  br i1 %124, label %125, label %67

125:                                              ; preds = %122
  %126 = load i32, i32* %17, align 8
  br label %127

127:                                              ; preds = %125, %43
  %128 = phi i32 [ %126, %125 ], [ %32, %43 ]
  %129 = icmp eq i32 %128, %8
  br i1 %129, label %130, label %197

130:                                              ; preds = %127
  %131 = add i32 %52, %46
  %132 = udiv i32 %131, %48
  %133 = load i32, i32* %28, align 4
  %134 = icmp slt i32 %44, %133
  br i1 %134, label %135, label %197

135:                                              ; preds = %130
  %136 = zext i32 %131 to i64
  %137 = shl nuw nsw i64 %136, 7
  %138 = icmp ugt i32 %48, %131
  %139 = add nsw i32 %48, -1
  %140 = sext i32 %139 to i64
  %141 = icmp sgt i32 %48, 0
  %142 = sext i32 %48 to i64
  %143 = sext i32 %44 to i64
  %144 = zext i32 %48 to i64
  %145 = add nsw i64 %144, -1
  %146 = and i64 %144, 3
  %147 = icmp ult i64 %145, 3
  %148 = sub nsw i64 %144, %146
  %149 = icmp eq i64 %146, 0
  br label %150

150:                                              ; preds = %135, %192
  %151 = phi i64 [ %143, %135 ], [ %193, %192 ]
  %152 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %151
  %153 = load [64 x i16]*, [64 x i16]** %152, align 8
  %154 = add nsw i64 %151, -1
  %155 = getelementptr inbounds [64 x i16]*, [64 x i16]** %31, i64 %154
  %156 = load [64 x i16]*, [64 x i16]** %155, align 8
  %157 = bitcast [64 x i16]* %153 to i8*
  tail call void @jzero_far(i8* %157, i64 %137) #3
  br i1 %138, label %192, label %158

158:                                              ; preds = %150, %187
  %159 = phi [64 x i16]* [ %189, %187 ], [ %156, %150 ]
  %160 = phi [64 x i16]* [ %188, %187 ], [ %153, %150 ]
  %161 = phi i32 [ %190, %187 ], [ 0, %150 ]
  %162 = getelementptr inbounds [64 x i16], [64 x i16]* %159, i64 %140, i64 0
  %163 = load i16, i16* %162, align 2
  br i1 %141, label %164, label %187

164:                                              ; preds = %158
  br i1 %147, label %178, label %165

165:                                              ; preds = %164, %165
  %166 = phi i64 [ %175, %165 ], [ 0, %164 ]
  %167 = phi i64 [ %176, %165 ], [ %148, %164 ]
  %168 = getelementptr inbounds [64 x i16], [64 x i16]* %160, i64 %166, i64 0
  store i16 %163, i16* %168, align 2
  %169 = or i64 %166, 1
  %170 = getelementptr inbounds [64 x i16], [64 x i16]* %160, i64 %169, i64 0
  store i16 %163, i16* %170, align 2
  %171 = or i64 %166, 2
  %172 = getelementptr inbounds [64 x i16], [64 x i16]* %160, i64 %171, i64 0
  store i16 %163, i16* %172, align 2
  %173 = or i64 %166, 3
  %174 = getelementptr inbounds [64 x i16], [64 x i16]* %160, i64 %173, i64 0
  store i16 %163, i16* %174, align 2
  %175 = add nuw nsw i64 %166, 4
  %176 = add i64 %167, -4
  %177 = icmp eq i64 %176, 0
  br i1 %177, label %178, label %165

178:                                              ; preds = %165, %164
  %179 = phi i64 [ 0, %164 ], [ %175, %165 ]
  br i1 %149, label %187, label %180

180:                                              ; preds = %178, %180
  %181 = phi i64 [ %184, %180 ], [ %179, %178 ]
  %182 = phi i64 [ %185, %180 ], [ %146, %178 ]
  %183 = getelementptr inbounds [64 x i16], [64 x i16]* %160, i64 %181, i64 0
  store i16 %163, i16* %183, align 2
  %184 = add nuw nsw i64 %181, 1
  %185 = add i64 %182, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %180, !llvm.loop !4

187:                                              ; preds = %178, %180, %158
  %188 = getelementptr inbounds [64 x i16], [64 x i16]* %160, i64 %142
  %189 = getelementptr inbounds [64 x i16], [64 x i16]* %159, i64 %142
  %190 = add nuw i32 %161, 1
  %191 = icmp ult i32 %190, %132
  br i1 %191, label %158, label %192

192:                                              ; preds = %187, %150
  %193 = add nsw i64 %151, 1
  %194 = load i32, i32* %28, align 4
  %195 = sext i32 %194 to i64
  %196 = icmp slt i64 %193, %195
  br i1 %196, label %150, label %197

197:                                              ; preds = %192, %130, %127
  %198 = add nuw nsw i64 %20, 1
  %199 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %21, i64 1
  %200 = load i32, i32* %9, align 4
  %201 = sext i32 %200 to i64
  %202 = icmp slt i64 %198, %201
  br i1 %202, label %19, label %203

203:                                              ; preds = %197, %2
  %204 = tail call i32 @compress_output(%struct.jpeg_compress_struct* %0, i8*** %1)
  ret i32 %204
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @compress_output(%struct.jpeg_compress_struct*, i8*** nocapture readnone) #0 {
  %3 = alloca [4 x [64 x i16]**], align 16
  %4 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 57
  %5 = bitcast %struct.jpeg_c_coef_controller** %4 to %struct.my_coef_controller**
  %6 = load %struct.my_coef_controller*, %struct.my_coef_controller** %5, align 8
  %7 = bitcast [4 x [64 x i16]**]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #3
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %9 = bitcast [4 x [64 x i16]**]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 32, i1 false)
  %10 = load i32, i32* %8, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %38

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %14 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %15 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 1
  br label %16

16:                                               ; preds = %12, %16
  %17 = phi i64 [ 0, %12 ], [ %34, %16 ]
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %17
  %19 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %18, align 8
  %20 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %13, align 8
  %21 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %20, i64 0, i32 8
  %22 = load [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %19, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 6, i64 %25
  %27 = load %struct.jvirt_barray_control*, %struct.jvirt_barray_control** %26, align 8
  %28 = load i32, i32* %15, align 8
  %29 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %19, i64 0, i32 3
  %30 = load i32, i32* %29, align 4
  %31 = mul i32 %30, %28
  %32 = tail call [64 x i16]** %22(%struct.jpeg_common_struct* %14, %struct.jvirt_barray_control* %27, i32 %31, i32 %30, i32 0) #3
  %33 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %3, i64 0, i64 %17
  store [64 x i16]** %32, [64 x i16]*** %33, align 8
  %34 = add nuw nsw i64 %17, 1
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = icmp slt i64 %34, %36
  br i1 %37, label %16, label %38

38:                                               ; preds = %16, %2
  %39 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 4
  %42 = load i32, i32* %41, align 4
  %43 = icmp slt i32 %40, %42
  br i1 %43, label %44, label %136

44:                                               ; preds = %38
  %45 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 2
  %46 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 46
  %47 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %48 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 5, i64 0
  %49 = sext i32 %40 to i64
  %50 = load i32, i32* %45, align 4
  br label %51

51:                                               ; preds = %44, %131
  %52 = phi i32 [ %42, %44 ], [ %132, %131 ]
  %53 = phi i32 [ %50, %44 ], [ 0, %131 ]
  %54 = phi i64 [ %49, %44 ], [ %133, %131 ]
  %55 = load i32, i32* %46, align 8
  %56 = icmp ult i32 %53, %55
  br i1 %56, label %57, label %131

57:                                               ; preds = %51, %125
  %58 = phi i32 [ %126, %125 ], [ %53, %51 ]
  %59 = load i32, i32* %8, align 4
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %117

61:                                               ; preds = %57, %111
  %62 = phi i32 [ %112, %111 ], [ %59, %57 ]
  %63 = phi i64 [ %114, %111 ], [ 0, %57 ]
  %64 = phi i32 [ %113, %111 ], [ 0, %57 ]
  %65 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %63
  %66 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %65, align 8
  %67 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %66, i64 0, i32 13
  %68 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %66, i64 0, i32 14
  %69 = load i32, i32* %68, align 8
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %111

71:                                               ; preds = %61
  %72 = load i32, i32* %67, align 4
  %73 = mul i32 %72, %58
  %74 = getelementptr inbounds [4 x [64 x i16]**], [4 x [64 x i16]**]* %3, i64 0, i64 %63
  %75 = load [64 x i16]**, [64 x i16]*** %74, align 8
  %76 = zext i32 %73 to i64
  br label %77

77:                                               ; preds = %71, %102
  %78 = phi i32 [ %69, %71 ], [ %103, %102 ]
  %79 = phi i32 [ %72, %71 ], [ %104, %102 ]
  %80 = phi i64 [ 0, %71 ], [ %106, %102 ]
  %81 = phi i32 [ %64, %71 ], [ %105, %102 ]
  %82 = icmp sgt i32 %79, 0
  br i1 %82, label %83, label %102

83:                                               ; preds = %77
  %84 = add nsw i64 %80, %54
  %85 = getelementptr inbounds [64 x i16]*, [64 x i16]** %75, i64 %84
  %86 = load [64 x i16]*, [64 x i16]** %85, align 8
  %87 = getelementptr inbounds [64 x i16], [64 x i16]* %86, i64 %76
  %88 = sext i32 %81 to i64
  br label %89

89:                                               ; preds = %83, %89
  %90 = phi i64 [ %88, %83 ], [ %94, %89 ]
  %91 = phi [64 x i16]* [ %87, %83 ], [ %93, %89 ]
  %92 = phi i32 [ 0, %83 ], [ %96, %89 ]
  %93 = getelementptr inbounds [64 x i16], [64 x i16]* %91, i64 1
  %94 = add nsw i64 %90, 1
  %95 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 5, i64 %90
  store [64 x i16]* %91, [64 x i16]** %95, align 8
  %96 = add nuw nsw i32 %92, 1
  %97 = load i32, i32* %67, align 4
  %98 = icmp slt i32 %96, %97
  br i1 %98, label %89, label %99

99:                                               ; preds = %89
  %100 = trunc i64 %94 to i32
  %101 = load i32, i32* %68, align 8
  br label %102

102:                                              ; preds = %99, %77
  %103 = phi i32 [ %78, %77 ], [ %101, %99 ]
  %104 = phi i32 [ %79, %77 ], [ %97, %99 ]
  %105 = phi i32 [ %81, %77 ], [ %100, %99 ]
  %106 = add nuw nsw i64 %80, 1
  %107 = sext i32 %103 to i64
  %108 = icmp slt i64 %106, %107
  br i1 %108, label %77, label %109

109:                                              ; preds = %102
  %110 = load i32, i32* %8, align 4
  br label %111

111:                                              ; preds = %109, %61
  %112 = phi i32 [ %62, %61 ], [ %110, %109 ]
  %113 = phi i32 [ %64, %61 ], [ %105, %109 ]
  %114 = add nuw nsw i64 %63, 1
  %115 = sext i32 %112 to i64
  %116 = icmp slt i64 %114, %115
  br i1 %116, label %61, label %117

117:                                              ; preds = %111, %57
  %118 = load %struct.jpeg_entropy_encoder*, %struct.jpeg_entropy_encoder** %47, align 8
  %119 = getelementptr inbounds %struct.jpeg_entropy_encoder, %struct.jpeg_entropy_encoder* %118, i64 0, i32 1
  %120 = load i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %119, align 8
  %121 = tail call i32 %120(%struct.jpeg_compress_struct* %0, [64 x i16]** %48) #3
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %125

123:                                              ; preds = %117
  %124 = trunc i64 %54 to i32
  store i32 %124, i32* %39, align 8
  store i32 %58, i32* %45, align 4
  br label %163

125:                                              ; preds = %117
  %126 = add nuw i32 %58, 1
  %127 = load i32, i32* %46, align 8
  %128 = icmp ult i32 %126, %127
  br i1 %128, label %57, label %129

129:                                              ; preds = %125
  %130 = load i32, i32* %41, align 4
  br label %131

131:                                              ; preds = %129, %51
  %132 = phi i32 [ %130, %129 ], [ %52, %51 ]
  store i32 0, i32* %45, align 4
  %133 = add nsw i64 %54, 1
  %134 = sext i32 %132 to i64
  %135 = icmp slt i64 %133, %134
  br i1 %135, label %51, label %136

136:                                              ; preds = %131, %38
  %137 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %6, i64 0, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = add i32 %138, 1
  store i32 %139, i32* %137, align 8
  %140 = load %struct.my_coef_controller*, %struct.my_coef_controller** %5, align 8
  %141 = load i32, i32* %8, align 4
  %142 = icmp sgt i32 %141, 1
  br i1 %142, label %158, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %140, i64 0, i32 1
  %145 = load i32, i32* %144, align 8
  %146 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 43
  %147 = load i32, i32* %146, align 8
  %148 = add i32 %147, -1
  %149 = icmp ult i32 %145, %148
  %150 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 0
  %151 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %150, align 8
  br i1 %149, label %152, label %155

152:                                              ; preds = %143
  %153 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %151, i64 0, i32 3
  %154 = load i32, i32* %153, align 4
  br label %158

155:                                              ; preds = %143
  %156 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %151, i64 0, i32 18
  %157 = load i32, i32* %156, align 8
  br label %158

158:                                              ; preds = %136, %152, %155
  %159 = phi i32 [ %154, %152 ], [ %157, %155 ], [ 1, %136 ]
  %160 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %140, i64 0, i32 4
  store i32 %159, i32* %160, align 4
  %161 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %140, i64 0, i32 2
  store i32 0, i32* %161, align 4
  %162 = getelementptr inbounds %struct.my_coef_controller, %struct.my_coef_controller* %140, i64 0, i32 3
  store i32 0, i32* %162, align 8
  br label %163

163:                                              ; preds = %158, %123
  %164 = phi i32 [ 0, %123 ], [ 1, %158 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #3
  ret i32 %164
}

declare void @jzero_far(i8*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
