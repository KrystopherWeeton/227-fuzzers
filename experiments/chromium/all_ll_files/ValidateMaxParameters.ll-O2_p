; ModuleID = '../../third_party/angle/src/compiler/translator/ValidateMaxParameters.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/ValidateMaxParameters.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.sh::TVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TFunction" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TVector.1"*, %"class.sh::TVariable"**, i64, %"class.sh::TType"*, %"class.sh::ImmutableString", i8, i8, i8, i8, [4 x i8] }>
%"class.sh::TSymbol.base" = type <{ %"class.sh::ImmutableString", %"class.sh::TSymbolUniqueId", i8, i8, i8 }>
%"class.sh::TSymbolUniqueId" = type { i32 }
%"class.sh::TVector.1" = type opaque
%"class.sh::TVariable" = type { %"class.sh::TSymbol.base", %"class.sh::TType"*, %"class.sh::TConstantUnion"* }
%"class.sh::TConstantUnion" = type { %union.anon.9, i32 }
%union.anon.9 = type { i32 }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.2"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.2" = type opaque
%"class.sh::TInterfaceBlock" = type { %"class.sh::TSymbol.base", %"class.sh::TFieldListCollection", i32, i32 }
%"class.sh::TFieldListCollection" = type { %"class.sh::TVector.3"*, i64, i32, %"class.std::__1::basic_string" }
%"class.sh::TVector.3" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.sh::TStructure" = type <{ %"class.sh::TSymbol.base", i8, %"class.sh::TFieldListCollection", i8, [7 x i8] }>
%"class.sh::ImmutableString" = type { i8*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh21ValidateMaxParametersEPNS_12TIntermBlockEj(%"class.sh::TIntermBlock"*, i32) local_unnamed_addr #0 {
  %3 = bitcast %"class.sh::TIntermBlock"* %0 to %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)***
  %4 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)**, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*** %3, align 8
  %5 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %4, i64 27
  %6 = load %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)*, %"class.sh::TVector"* (%"class.sh::TIntermBlock"*)** %5, align 8
  %7 = tail call %"class.sh::TVector"* %6(%"class.sh::TIntermBlock"* %0) #1
  %8 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 0
  %9 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %8, align 8
  %10 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %7, i64 0, i32 0, i32 0, i32 1
  %11 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %10, align 8
  %12 = icmp eq %"class.sh::TIntermNode"** %9, %11
  br i1 %12, label %35, label %13

13:                                               ; preds = %2
  %14 = zext i32 %1 to i64
  br label %15

15:                                               ; preds = %13, %32
  %16 = phi %"class.sh::TIntermNode"** [ %9, %13 ], [ %33, %32 ]
  %17 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %16, align 8
  %18 = bitcast %"class.sh::TIntermNode"* %17 to %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)***
  %19 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*** %18, align 8
  %20 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %19, i64 6
  %21 = load %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermFunctionDefinition"* (%"class.sh::TIntermNode"*)** %20, align 8
  %22 = tail call %"class.sh::TIntermFunctionDefinition"* %21(%"class.sh::TIntermNode"* %17) #1
  %23 = icmp eq %"class.sh::TIntermFunctionDefinition"* %22, null
  br i1 %23, label %32, label %24

24:                                               ; preds = %15
  %25 = getelementptr inbounds %"class.sh::TIntermFunctionDefinition", %"class.sh::TIntermFunctionDefinition"* %22, i64 0, i32 1
  %26 = load %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermFunctionPrototype"** %25, align 8
  %27 = getelementptr inbounds %"class.sh::TIntermFunctionPrototype", %"class.sh::TIntermFunctionPrototype"* %26, i64 0, i32 1
  %28 = load %"class.sh::TFunction"*, %"class.sh::TFunction"** %27, align 8
  %29 = getelementptr inbounds %"class.sh::TFunction", %"class.sh::TFunction"* %28, i64 0, i32 4
  %30 = load i64, i64* %29, align 8
  %31 = icmp ugt i64 %30, %14
  br i1 %31, label %35, label %32

32:                                               ; preds = %24, %15
  %33 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %16, i64 1
  %34 = icmp eq %"class.sh::TIntermNode"** %33, %11
  br i1 %34, label %35, label %15

35:                                               ; preds = %24, %32, %2
  %36 = phi i1 [ true, %2 ], [ true, %32 ], [ false, %24 ]
  ret i1 %36
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
