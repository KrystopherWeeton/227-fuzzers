; ModuleID = '../../third_party/ffmpeg/libavutil/autorename_libavutil_imgutils.c'
source_filename = "../../third_party/ffmpeg/libavutil/autorename_libavutil_imgutils.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)*, %struct.AVClass* (i8**)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVPixFmtDescriptor = type { i8*, i8, i8, i8, i64, [4 x %struct.AVComponentDescriptor], i8* }
%struct.AVComponentDescriptor = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ImgUtils = type { %struct.AVClass*, i32, i8* }

@.str = private unnamed_addr constant [57 x i8] c"Formats with a palette require a minimum alignment of 4\0A\00", align 1
@imgutils_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* null, i32 3687524, i32 8, i32 16, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 0, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null, %struct.AVClass* (i8**)* null }, align 8
@.str.1 = private unnamed_addr constant [31 x i8] c"Picture size %ux%u is invalid\0A\00", align 1
@.str.2 = private unnamed_addr constant [108 x i8] c"Picture size %ux%u exceeds specified max pixel count %ld, see the documentation if you wish to increase it\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"ret >= 0\00", align 1
@.str.5 = private unnamed_addr constant [46 x i8] c"../../third_party/ffmpeg/libavutil/imgutils.c\00", align 1
@av_image_fill_black.c_linesize = internal constant [4 x i32] zeroinitializer, align 16
@.str.6 = private unnamed_addr constant [9 x i8] c"IMGUTILS\00", align 1
@.str.7 = private unnamed_addr constant [72 x i8] c"((src_linesize) >= 0 ? (src_linesize) : (-(src_linesize))) >= bytewidth\00", align 1
@.str.8 = private unnamed_addr constant [72 x i8] c"((dst_linesize) >= 0 ? (dst_linesize) : (-(dst_linesize))) >= bytewidth\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"av_image_get_linesize failed\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @av_image_fill_max_pixsteps(i32* nocapture, i32*, %struct.AVPixFmtDescriptor* nocapture readonly) local_unnamed_addr #0 {
  %4 = bitcast i32* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 16, i1 false)
  %5 = icmp ne i32* %1, null
  br i1 %5, label %6, label %8

6:                                                ; preds = %3
  %7 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %7, i8 0, i64 16, i1 false)
  br label %8

8:                                                ; preds = %6, %3
  %9 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds i32, i32* %0, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %10, %15
  br i1 %16, label %17, label %22

17:                                               ; preds = %8
  store i32 %10, i32* %14, align 4
  br i1 %5, label %18, label %22

18:                                               ; preds = %17
  %19 = load i32, i32* %11, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %1, i64 %20
  store i32 0, i32* %21, align 4
  br label %22

22:                                               ; preds = %17, %18, %8
  %23 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 1, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 1, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %24, %29
  br i1 %30, label %31, label %36

31:                                               ; preds = %22
  store i32 %24, i32* %28, align 4
  br i1 %5, label %32, label %36

32:                                               ; preds = %31
  %33 = load i32, i32* %25, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i32, i32* %1, i64 %34
  store i32 1, i32* %35, align 4
  br label %36

36:                                               ; preds = %32, %31, %22
  %37 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 2, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 2, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i32, i32* %0, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = icmp sgt i32 %38, %43
  br i1 %44, label %45, label %50

45:                                               ; preds = %36
  store i32 %38, i32* %42, align 4
  br i1 %5, label %46, label %50

46:                                               ; preds = %45
  %47 = load i32, i32* %39, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %1, i64 %48
  store i32 2, i32* %49, align 4
  br label %50

50:                                               ; preds = %46, %45, %36
  %51 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 3, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %2, i64 0, i32 5, i64 3, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i32, i32* %0, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = icmp sgt i32 %52, %57
  br i1 %58, label %59, label %64

59:                                               ; preds = %50
  store i32 %52, i32* %56, align 4
  br i1 %5, label %60, label %64

60:                                               ; preds = %59
  %61 = load i32, i32* %53, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %1, i64 %62
  store i32 3, i32* %63, align 4
  br label %64

64:                                               ; preds = %60, %59, %50
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_get_linesize(i32, i32, i32) local_unnamed_addr #0 {
  %4 = alloca [4 x i32], align 16
  %5 = alloca [4 x i32], align 16
  %6 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %0) #8
  %7 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = bitcast [4 x i32]* %5 to i8*
  %9 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #8
  %10 = icmp eq %struct.AVPixFmtDescriptor* %6, null
  %11 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 16, i1 false)
  br i1 %10, label %92, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 4
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 8
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %17, label %92

17:                                               ; preds = %12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 16, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 16, i1 false) #8
  %18 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %19, %24
  br i1 %25, label %26, label %28

26:                                               ; preds = %17
  store i32 %19, i32* %23, align 4
  %27 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %22
  store i32 0, i32* %27, align 4
  br label %28

28:                                               ; preds = %26, %17
  %29 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 1, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 1, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = icmp sgt i32 %30, %35
  br i1 %36, label %37, label %39

37:                                               ; preds = %28
  store i32 %30, i32* %34, align 4
  %38 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %33
  store i32 1, i32* %38, align 4
  br label %39

39:                                               ; preds = %37, %28
  %40 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 2, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 2, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = icmp sgt i32 %41, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %39
  store i32 %41, i32* %45, align 4
  %49 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %44
  store i32 2, i32* %49, align 4
  br label %50

50:                                               ; preds = %48, %39
  %51 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 3, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 3, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %55
  %57 = load i32, i32* %56, align 4
  %58 = icmp sgt i32 %52, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %50
  store i32 %52, i32* %56, align 4
  %60 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %55
  store i32 3, i32* %60, align 4
  br label %61

61:                                               ; preds = %50, %59
  %62 = sext i32 %2 to i64
  %63 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %1, 0
  br i1 %65, label %92, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %62
  %68 = load i32, i32* %67, align 4
  %69 = add i32 %68, -1
  %70 = icmp ult i32 %69, 2
  br i1 %70, label %71, label %75

71:                                               ; preds = %66
  %72 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 2
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  br label %75

75:                                               ; preds = %71, %66
  %76 = phi i32 [ %74, %71 ], [ 0, %66 ]
  %77 = shl i32 1, %76
  %78 = add nsw i32 %1, -1
  %79 = add i32 %78, %77
  %80 = ashr i32 %79, %76
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %85, label %82

82:                                               ; preds = %75
  %83 = sdiv i32 2147483647, %80
  %84 = icmp slt i32 %83, %64
  br i1 %84, label %92, label %85

85:                                               ; preds = %82, %75
  %86 = mul nsw i32 %80, %64
  %87 = and i64 %14, 4
  %88 = icmp eq i64 %87, 0
  %89 = add nsw i32 %86, 7
  %90 = ashr i32 %89, 3
  %91 = select i1 %88, i32 %86, i32 %90
  br label %92

92:                                               ; preds = %85, %82, %61, %3, %12
  %93 = phi i32 [ -22, %12 ], [ -22, %3 ], [ -22, %61 ], [ -22, %82 ], [ %91, %85 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  ret i32 %93
}

declare %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_fill_linesizes(i32* nocapture, i32, i32) local_unnamed_addr #0 {
  %4 = alloca [4 x i32], align 16
  %5 = alloca [4 x i32], align 16
  %6 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %1) #8
  %7 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8
  %8 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 0
  %9 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 1
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 2
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 3
  %12 = bitcast [4 x i32]* %5 to i8*
  %13 = bitcast [4 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #8
  %14 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %15 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %16 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %17 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %18 = bitcast i32* %0 to i8*
  %19 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 16, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %18, i8 0, i64 16, i1 false)
  %20 = icmp eq %struct.AVPixFmtDescriptor* %6, null
  br i1 %20, label %99, label %21

21:                                               ; preds = %3
  %22 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %99

26:                                               ; preds = %21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 0, i64 16, i1 false) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 16, i1 false) #8
  %27 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp sgt i32 %28, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %26
  store i32 %28, i32* %32, align 4
  %36 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %31
  store i32 0, i32* %36, align 4
  br label %37

37:                                               ; preds = %35, %26
  %38 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 1, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 1, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = icmp sgt i32 %39, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %37
  store i32 %39, i32* %43, align 4
  %47 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %42
  store i32 1, i32* %47, align 4
  br label %48

48:                                               ; preds = %46, %37
  %49 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 2, i32 1
  %50 = load i32, i32* %49, align 4
  %51 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 2, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = icmp sgt i32 %50, %55
  br i1 %56, label %57, label %59

57:                                               ; preds = %48
  store i32 %50, i32* %54, align 4
  %58 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %53
  store i32 2, i32* %58, align 4
  br label %59

59:                                               ; preds = %57, %48
  %60 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 3, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 5, i64 3, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [4 x i32], [4 x i32]* %4, i64 0, i64 %64
  %66 = load i32, i32* %65, align 4
  %67 = icmp sgt i32 %61, %66
  br i1 %67, label %68, label %70

68:                                               ; preds = %59
  store i32 %61, i32* %65, align 4
  %69 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %64
  store i32 3, i32* %69, align 4
  br label %70

70:                                               ; preds = %59, %68
  %71 = icmp slt i32 %2, 0
  %72 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i64 0, i32 2
  %73 = add nsw i32 %2, -1
  %74 = load i32, i32* %8, align 16
  br i1 %71, label %99, label %75

75:                                               ; preds = %70
  %76 = load i32, i32* %14, align 16
  %77 = add i32 %76, -1
  %78 = icmp ult i32 %77, 2
  br i1 %78, label %79, label %82

79:                                               ; preds = %75
  %80 = load i8, i8* %72, align 1
  %81 = zext i8 %80 to i32
  br label %82

82:                                               ; preds = %79, %75
  %83 = phi i32 [ %81, %79 ], [ 0, %75 ]
  %84 = shl i32 1, %83
  %85 = add i32 %73, %84
  %86 = ashr i32 %85, %83
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %91, label %88

88:                                               ; preds = %82
  %89 = sdiv i32 2147483647, %86
  %90 = icmp slt i32 %89, %74
  br i1 %90, label %99, label %91

91:                                               ; preds = %82, %88
  %92 = mul nsw i32 %86, %74
  %93 = and i64 %23, 4
  %94 = icmp eq i64 %93, 0
  %95 = add nsw i32 %92, 7
  %96 = ashr i32 %95, 3
  %97 = select i1 %94, i32 %92, i32 %96
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %88, %70, %91, %115, %118, %142, %145, %169, %172, %181, %3, %21
  %100 = phi i32 [ -22, %21 ], [ -22, %3 ], [ %97, %91 ], [ -22, %70 ], [ -22, %88 ], [ -22, %115 ], [ %125, %118 ], [ -22, %142 ], [ %152, %145 ], [ -22, %169 ], [ %179, %172 ], [ 0, %181 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8
  ret i32 %100

101:                                              ; preds = %91
  store i32 %97, i32* %0, align 4
  %102 = load i32, i32* %9, align 4
  %103 = load i32, i32* %15, align 4
  %104 = add i32 %103, -1
  %105 = icmp ult i32 %104, 2
  br i1 %105, label %106, label %109

106:                                              ; preds = %101
  %107 = load i8, i8* %72, align 1
  %108 = zext i8 %107 to i32
  br label %109

109:                                              ; preds = %106, %101
  %110 = phi i32 [ %108, %106 ], [ 0, %101 ]
  %111 = shl i32 1, %110
  %112 = add i32 %73, %111
  %113 = ashr i32 %112, %110
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %118, label %115

115:                                              ; preds = %109
  %116 = sdiv i32 2147483647, %113
  %117 = icmp slt i32 %116, %102
  br i1 %117, label %99, label %118

118:                                              ; preds = %115, %109
  %119 = mul nsw i32 %113, %102
  %120 = load i64, i64* %22, align 8
  %121 = and i64 %120, 4
  %122 = icmp eq i64 %121, 0
  %123 = add nsw i32 %119, 7
  %124 = ashr i32 %123, 3
  %125 = select i1 %122, i32 %119, i32 %124
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %99, label %127

127:                                              ; preds = %118
  %128 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %125, i32* %128, align 4
  %129 = load i32, i32* %10, align 8
  %130 = load i32, i32* %16, align 8
  %131 = add i32 %130, -1
  %132 = icmp ult i32 %131, 2
  br i1 %132, label %133, label %136

133:                                              ; preds = %127
  %134 = load i8, i8* %72, align 1
  %135 = zext i8 %134 to i32
  br label %136

136:                                              ; preds = %133, %127
  %137 = phi i32 [ %135, %133 ], [ 0, %127 ]
  %138 = shl i32 1, %137
  %139 = add i32 %73, %138
  %140 = ashr i32 %139, %137
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %145, label %142

142:                                              ; preds = %136
  %143 = sdiv i32 2147483647, %140
  %144 = icmp slt i32 %143, %129
  br i1 %144, label %99, label %145

145:                                              ; preds = %142, %136
  %146 = mul nsw i32 %140, %129
  %147 = load i64, i64* %22, align 8
  %148 = and i64 %147, 4
  %149 = icmp eq i64 %148, 0
  %150 = add nsw i32 %146, 7
  %151 = ashr i32 %150, 3
  %152 = select i1 %149, i32 %146, i32 %151
  %153 = icmp slt i32 %152, 0
  br i1 %153, label %99, label %154

154:                                              ; preds = %145
  %155 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %152, i32* %155, align 4
  %156 = load i32, i32* %11, align 4
  %157 = load i32, i32* %17, align 4
  %158 = add i32 %157, -1
  %159 = icmp ult i32 %158, 2
  br i1 %159, label %160, label %163

160:                                              ; preds = %154
  %161 = load i8, i8* %72, align 1
  %162 = zext i8 %161 to i32
  br label %163

163:                                              ; preds = %160, %154
  %164 = phi i32 [ %162, %160 ], [ 0, %154 ]
  %165 = shl i32 1, %164
  %166 = add i32 %73, %165
  %167 = ashr i32 %166, %164
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %172, label %169

169:                                              ; preds = %163
  %170 = sdiv i32 2147483647, %167
  %171 = icmp slt i32 %170, %156
  br i1 %171, label %99, label %172

172:                                              ; preds = %169, %163
  %173 = mul nsw i32 %167, %156
  %174 = load i64, i64* %22, align 8
  %175 = and i64 %174, 4
  %176 = icmp eq i64 %175, 0
  %177 = add nsw i32 %173, 7
  %178 = ashr i32 %177, 3
  %179 = select i1 %176, i32 %173, i32 %178
  %180 = icmp slt i32 %179, 0
  br i1 %180, label %99, label %181

181:                                              ; preds = %172
  %182 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %179, i32* %182, align 4
  br label %99
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_fill_plane_sizes(i64* nocapture, i32, i32, i64* nocapture readonly) local_unnamed_addr #0 {
  %5 = alloca [4 x i32], align 16
  %6 = bitcast [4 x i32]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 16, i1 false)
  %7 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %1) #8
  %8 = bitcast i64* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false)
  %9 = icmp eq %struct.AVPixFmtDescriptor* %7, null
  br i1 %9, label %66, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 4
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %66

15:                                               ; preds = %10
  %16 = load i64, i64* %3, align 8
  %17 = sext i32 %2 to i64
  %18 = udiv i64 -1, %17
  %19 = icmp ugt i64 %16, %18
  br i1 %19, label %66, label %20

20:                                               ; preds = %15
  %21 = mul i64 %16, %17
  store i64 %21, i64* %0, align 8
  %22 = load i64, i64* %11, align 8
  %23 = and i64 %22, 66
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %47

25:                                               ; preds = %20
  %26 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 5, i64 0, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %28
  store i32 1, i32* %29, align 4
  %30 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 5, i64 1, i32 0
  %31 = load i32, i32* %30, align 8
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %32
  store i32 1, i32* %33, align 4
  %34 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 5, i64 2, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %36
  store i32 1, i32* %37, align 4
  %38 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 5, i64 3, i32 0
  %39 = load i32, i32* %38, align 8
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %40
  store i32 1, i32* %41, align 4
  %42 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %7, i64 0, i32 3
  %43 = add i32 %2, -1
  %44 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %66, label %49

47:                                               ; preds = %20
  %48 = getelementptr inbounds i64, i64* %0, i64 1
  store i64 1024, i64* %48, align 8
  br label %66

49:                                               ; preds = %25
  %50 = load i8, i8* %42, align 2
  %51 = zext i8 %50 to i32
  %52 = shl i32 1, %51
  %53 = add i32 %43, %52
  %54 = ashr i32 %53, %51
  %55 = getelementptr inbounds i64, i64* %3, i64 1
  %56 = load i64, i64* %55, align 8
  %57 = sext i32 %54 to i64
  %58 = udiv i64 -1, %57
  %59 = icmp ugt i64 %56, %58
  br i1 %59, label %66, label %60

60:                                               ; preds = %49
  %61 = mul i64 %56, %57
  %62 = getelementptr inbounds i64, i64* %0, i64 1
  store i64 %61, i64* %62, align 8
  %63 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %25, %49, %60, %68, %79, %85, %89, %15, %4, %10, %47
  %67 = phi i32 [ 0, %47 ], [ -22, %10 ], [ -22, %4 ], [ -22, %15 ], [ -22, %49 ], [ 0, %25 ], [ 0, %60 ], [ -22, %68 ], [ 0, %79 ], [ -22, %85 ], [ 0, %89 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  ret i32 %67

68:                                               ; preds = %60
  %69 = load i8, i8* %42, align 2
  %70 = zext i8 %69 to i32
  %71 = shl i32 1, %70
  %72 = add i32 %43, %71
  %73 = ashr i32 %72, %70
  %74 = getelementptr inbounds i64, i64* %3, i64 2
  %75 = load i64, i64* %74, align 8
  %76 = sext i32 %73 to i64
  %77 = udiv i64 -1, %76
  %78 = icmp ugt i64 %75, %77
  br i1 %78, label %66, label %79

79:                                               ; preds = %68
  %80 = mul i64 %75, %76
  %81 = getelementptr inbounds i64, i64* %0, i64 2
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %66, label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds i64, i64* %3, i64 3
  %87 = load i64, i64* %86, align 8
  %88 = icmp ugt i64 %87, %18
  br i1 %88, label %66, label %89

89:                                               ; preds = %85
  %90 = mul i64 %87, %17
  %91 = getelementptr inbounds i64, i64* %0, i64 3
  store i64 %90, i64* %91, align 8
  br label %66
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_fill_pointers(i8** nocapture, i32, i32, i8*, i32* nocapture readonly) local_unnamed_addr #0 {
  %6 = alloca [4 x i64], align 16
  %7 = alloca [4 x i64], align 16
  %8 = bitcast [4 x i64]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8
  %9 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 0
  %10 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 1
  %11 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 2
  %12 = getelementptr inbounds [4 x i64], [4 x i64]* %6, i64 0, i64 3
  %13 = bitcast [4 x i64]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8
  %14 = getelementptr inbounds [4 x i64], [4 x i64]* %7, i64 0, i64 0
  %15 = getelementptr inbounds [4 x i64], [4 x i64]* %7, i64 0, i64 1
  %16 = getelementptr inbounds [4 x i64], [4 x i64]* %7, i64 0, i64 2
  %17 = getelementptr inbounds [4 x i64], [4 x i64]* %7, i64 0, i64 3
  %18 = bitcast i8** %0 to i8*
  %19 = bitcast [4 x i64]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 32, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 32, i1 false)
  %20 = load i32, i32* %4, align 4
  %21 = sext i32 %20 to i64
  store i64 %21, i64* %9, align 16
  %22 = getelementptr inbounds i32, i32* %4, i64 1
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  store i64 %24, i64* %10, align 8
  %25 = getelementptr inbounds i32, i32* %4, i64 2
  %26 = load i32, i32* %25, align 4
  %27 = sext i32 %26 to i64
  store i64 %27, i64* %11, align 16
  %28 = getelementptr inbounds i32, i32* %4, i64 3
  %29 = load i32, i32* %28, align 4
  %30 = sext i32 %29 to i64
  store i64 %30, i64* %12, align 8
  %31 = call i32 @av_image_fill_plane_sizes(i64* nonnull %14, i32 %1, i32 %2, i64* nonnull %9)
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %46, label %33

33:                                               ; preds = %5
  %34 = load i64, i64* %14, align 16
  %35 = icmp ugt i64 %34, 2147483647
  br i1 %35, label %46, label %36

36:                                               ; preds = %33
  %37 = load i64, i64* %15, align 8
  %38 = shl i64 %34, 32
  %39 = sub nuw nsw i64 9223372032559808512, %38
  %40 = ashr exact i64 %39, 32
  %41 = icmp ugt i64 %37, %40
  br i1 %41, label %46, label %55

42:                                               ; preds = %70
  %43 = getelementptr inbounds i8, i8* %3, i64 %34
  %44 = getelementptr inbounds i8*, i8** %0, i64 1
  store i8* %43, i8** %44, align 8
  %45 = icmp eq i64 %59, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %33, %36, %55, %63, %70, %42, %48, %52, %5
  %47 = phi i32 [ %31, %5 ], [ %72, %52 ], [ %72, %48 ], [ %72, %42 ], [ %72, %70 ], [ -22, %63 ], [ -22, %55 ], [ -22, %36 ], [ -22, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8
  ret i32 %47

48:                                               ; preds = %42
  %49 = getelementptr inbounds i8, i8* %43, i64 %37
  %50 = getelementptr inbounds i8*, i8** %0, i64 2
  store i8* %49, i8** %50, align 8
  %51 = icmp eq i64 %66, 0
  br i1 %51, label %46, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %49, i64 %59
  %54 = getelementptr inbounds i8*, i8** %0, i64 3
  store i8* %53, i8** %54, align 8
  br label %46

55:                                               ; preds = %36
  %56 = trunc i64 %34 to i32
  %57 = trunc i64 %37 to i32
  %58 = add i32 %56, %57
  %59 = load i64, i64* %16, align 16
  %60 = sub nsw i32 2147483647, %58
  %61 = sext i32 %60 to i64
  %62 = icmp ugt i64 %59, %61
  br i1 %62, label %46, label %63

63:                                               ; preds = %55
  %64 = trunc i64 %59 to i32
  %65 = add i32 %58, %64
  %66 = load i64, i64* %17, align 8
  %67 = sub nsw i32 2147483647, %65
  %68 = sext i32 %67 to i64
  %69 = icmp ugt i64 %66, %68
  br i1 %69, label %46, label %70

70:                                               ; preds = %63
  %71 = trunc i64 %66 to i32
  %72 = add i32 %65, %71
  store i8* %3, i8** %0, align 8
  %73 = icmp eq i64 %37, 0
  br i1 %73, label %46, label %42
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden i32 @avpriv_set_systematic_pal2(i32* nocapture, i32) local_unnamed_addr #3 {
  br label %3

3:                                                ; preds = %38, %2
  %4 = phi i64 [ 0, %2 ], [ %48, %38 ]
  %5 = trunc i64 %4 to i32
  switch i32 %1, label %50 [
    i32 20, label %6
    i32 17, label %14
    i32 22, label %22
    i32 19, label %30
    i32 8, label %38
  ]

6:                                                ; preds = %3
  %7 = lshr i32 %5, 5
  %8 = mul nuw nsw i32 %7, 36
  %9 = lshr i32 %5, 2
  %10 = and i32 %9, 7
  %11 = mul nuw nsw i32 %10, 36
  %12 = and i32 %5, 3
  %13 = mul nuw nsw i32 %12, 85
  br label %38

14:                                               ; preds = %3
  %15 = lshr i32 %5, 6
  %16 = mul nuw nsw i32 %15, 85
  %17 = lshr i32 %5, 3
  %18 = and i32 %17, 7
  %19 = mul nuw nsw i32 %18, 36
  %20 = and i32 %5, 7
  %21 = mul nuw nsw i32 %20, 36
  br label %38

22:                                               ; preds = %3
  %23 = lshr i32 %5, 3
  %24 = mul nsw i32 %23, 255
  %25 = lshr i32 %5, 1
  %26 = and i32 %25, 3
  %27 = mul nuw nsw i32 %26, 85
  %28 = and i32 %5, 1
  %29 = mul nuw nsw i32 %28, 255
  br label %38

30:                                               ; preds = %3
  %31 = lshr i32 %5, 3
  %32 = mul nsw i32 %31, 255
  %33 = lshr i32 %5, 1
  %34 = and i32 %33, 3
  %35 = mul nuw nsw i32 %34, 85
  %36 = and i32 %5, 1
  %37 = mul nuw nsw i32 %36, 255
  br label %38

38:                                               ; preds = %3, %30, %22, %14, %6
  %39 = phi i32 [ %37, %30 ], [ %24, %22 ], [ %21, %14 ], [ %8, %6 ], [ %5, %3 ]
  %40 = phi i32 [ %35, %30 ], [ %27, %22 ], [ %19, %14 ], [ %11, %6 ], [ %5, %3 ]
  %41 = phi i32 [ %32, %30 ], [ %29, %22 ], [ %16, %14 ], [ %13, %6 ], [ %5, %3 ]
  %42 = shl i32 %40, 8
  %43 = shl i32 %39, 16
  %44 = add i32 %43, -16777216
  %45 = add i32 %44, %42
  %46 = add i32 %45, %41
  %47 = getelementptr inbounds i32, i32* %0, i64 %4
  store i32 %46, i32* %47, align 4
  %48 = add nuw nsw i64 %4, 1
  %49 = icmp eq i64 %48, 256
  br i1 %49, label %50, label %3

50:                                               ; preds = %38, %3
  %51 = phi i32 [ -22, %3 ], [ 0, %38 ]
  ret i32 %51
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_alloc(i8** nocapture, i32* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca %struct.ImgUtils, align 8
  %8 = alloca [4 x i64], align 16
  %9 = alloca [4 x i64], align 16
  %10 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #8
  %11 = bitcast [4 x i64]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #8
  %12 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 0
  %13 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 2
  %14 = bitcast [4 x i64]* %9 to i8*
  %15 = bitcast [4 x i64]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #8
  %16 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %17 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 1
  %18 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 2
  %19 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 3
  %20 = icmp eq %struct.AVPixFmtDescriptor* %10, null
  %21 = bitcast [4 x i64]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -86, i64 32, i1 false)
  br i1 %20, label %131, label %22

22:                                               ; preds = %6
  %23 = bitcast %struct.ImgUtils* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 16, i1 false) #8
  %24 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %7, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %24, align 8
  %25 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %7, i64 0, i32 1
  store i32 0, i32* %25, align 8
  %26 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %7, i64 0, i32 2
  store i8* null, i8** %26, align 8
  %27 = tail call i32 @av_image_get_linesize(i32 -1, i32 %2, i32 0) #8
  %28 = sext i32 %27 to i64
  %29 = icmp slt i32 %27, 1
  %30 = zext i32 %2 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = select i1 %29, i64 %31, i64 %28
  %33 = add nsw i64 %32, 1024
  %34 = icmp slt i32 %2, 1
  %35 = icmp slt i32 %3, 1
  %36 = or i1 %34, %35
  %37 = icmp sgt i64 %33, 2147483646
  %38 = or i1 %36, %37
  br i1 %38, label %44, label %39

39:                                               ; preds = %22
  %40 = add nuw i32 %3, 128
  %41 = zext i32 %40 to i64
  %42 = mul i64 %33, %41
  %43 = icmp ugt i64 %42, 2147483646
  br i1 %43, label %44, label %45

44:                                               ; preds = %22, %39
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %23, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %2, i32 %3) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #8
  br label %131

45:                                               ; preds = %39
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #8
  %46 = icmp sgt i32 %5, 7
  %47 = add nuw nsw i32 %2, 7
  %48 = and i32 %47, -8
  %49 = select i1 %46, i32 %48, i32 %2
  %50 = tail call i32 @av_image_fill_linesizes(i32* %1, i32 %4, i32 %49)
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %131, label %52

52:                                               ; preds = %45
  %53 = add i32 %5, -1
  %54 = sub i32 0, %5
  %55 = bitcast i32* %1 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = insertelement <4 x i32> undef, i32 %53, i32 0
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> zeroinitializer
  %59 = add <4 x i32> %58, %56
  %60 = insertelement <4 x i32> undef, i32 %54, i32 0
  %61 = shufflevector <4 x i32> %60, <4 x i32> undef, <4 x i32> zeroinitializer
  %62 = and <4 x i32> %59, %61
  %63 = shufflevector <4 x i32> %62, <4 x i32> undef, <2 x i32> <i32 0, i32 1>
  %64 = sext <2 x i32> %63 to <2 x i64>
  %65 = bitcast [4 x i64]* %8 to <2 x i64>*
  store <2 x i64> %64, <2 x i64>* %65, align 16
  %66 = bitcast i32* %1 to <4 x i32>*
  store <4 x i32> %62, <4 x i32>* %66, align 4
  %67 = shufflevector <4 x i32> %62, <4 x i32> undef, <2 x i32> <i32 2, i32 3>
  %68 = sext <2 x i32> %67 to <2 x i64>
  %69 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> %68, <2 x i64>* %69, align 16
  %70 = call i32 @av_image_fill_plane_sizes(i64* nonnull %16, i32 %4, i32 %3, i64* nonnull %12)
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %131, label %72

72:                                               ; preds = %52
  %73 = sext i32 %5 to i64
  %74 = load i64, i64* %16, align 16
  %75 = xor i64 %74, -1
  %76 = icmp ugt i64 %73, %75
  br i1 %76, label %131, label %77

77:                                               ; preds = %72
  %78 = add i64 %74, %73
  %79 = load i64, i64* %17, align 8
  %80 = xor i64 %79, -1
  %81 = icmp ugt i64 %78, %80
  br i1 %81, label %131, label %133

82:                                               ; preds = %143
  %83 = tail call i32 @av_image_fill_pointers(i8** %0, i32 %4, i32 %3, i8* nonnull %145, i32* %1)
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %82
  tail call void @av_free(i8* nonnull %145) #8
  br label %131

86:                                               ; preds = %82
  %87 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i64 0, i32 4
  %88 = load i64, i64* %87, align 8
  %89 = and i64 %88, 2
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %95, label %91

91:                                               ; preds = %86
  %92 = getelementptr inbounds i8*, i8** %0, i64 1
  %93 = bitcast i8** %92 to i32**
  %94 = load i32*, i32** %93, align 8
  br label %104

95:                                               ; preds = %86
  %96 = and i64 %88, 64
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %111, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds i8*, i8** %0, i64 1
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8* %100, null
  br i1 %101, label %111, label %102

102:                                              ; preds = %98
  %103 = bitcast i8* %100 to i32*
  br label %104

104:                                              ; preds = %102, %91
  %105 = phi i32* [ %94, %91 ], [ %103, %102 ]
  %106 = tail call i32 @avpriv_set_systematic_pal2(i32* %105, i32 %4)
  %107 = icmp slt i32 %5, 4
  br i1 %107, label %110, label %108

108:                                              ; preds = %104
  %109 = load i64, i64* %87, align 8
  br label %111

110:                                              ; preds = %104
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str, i64 0, i64 0)) #8
  tail call void @av_free(i8* nonnull %145) #8
  br label %131

111:                                              ; preds = %108, %98, %95
  %112 = phi i64 [ %109, %108 ], [ %88, %98 ], [ %88, %95 ]
  %113 = and i64 %112, 66
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %131, label %115

115:                                              ; preds = %111
  %116 = getelementptr inbounds i8*, i8** %0, i64 1
  %117 = load i8*, i8** %116, align 8
  %118 = icmp eq i8* %117, null
  br i1 %118, label %131, label %119

119:                                              ; preds = %115
  %120 = load i8*, i8** %0, align 8
  %121 = ptrtoint i8* %117 to i64
  %122 = ptrtoint i8* %120 to i64
  %123 = sub i64 %121, %122
  %124 = load i32, i32* %1, align 4
  %125 = mul nsw i32 %124, %3
  %126 = sext i32 %125 to i64
  %127 = icmp sgt i64 %123, %126
  br i1 %127, label %128, label %131

128:                                              ; preds = %119
  %129 = getelementptr inbounds i8, i8* %120, i64 %126
  %130 = sub nsw i64 %123, %126
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %129, i8 0, i64 %130, i1 false)
  br label %131

131:                                              ; preds = %72, %77, %133, %138, %44, %119, %128, %115, %111, %143, %52, %45, %6, %110, %85
  %132 = phi i32 [ %83, %85 ], [ -22, %110 ], [ -22, %6 ], [ %50, %45 ], [ %70, %52 ], [ -12, %143 ], [ %83, %111 ], [ %83, %115 ], [ %83, %128 ], [ %83, %119 ], [ -22, %44 ], [ -22, %138 ], [ -22, %133 ], [ -22, %77 ], [ -22, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #8
  ret i32 %132

133:                                              ; preds = %77
  %134 = add i64 %79, %78
  %135 = load i64, i64* %18, align 16
  %136 = xor i64 %135, -1
  %137 = icmp ugt i64 %134, %136
  br i1 %137, label %131, label %138

138:                                              ; preds = %133
  %139 = add i64 %135, %134
  %140 = load i64, i64* %19, align 8
  %141 = xor i64 %140, -1
  %142 = icmp ugt i64 %139, %141
  br i1 %142, label %131, label %143

143:                                              ; preds = %138
  %144 = add i64 %140, %139
  %145 = tail call noalias i8* @av_malloc(i64 %144) #8
  %146 = icmp eq i8* %145, null
  br i1 %146, label %131, label %82
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_check_size(i32, i32, i32, i8*) local_unnamed_addr #0 {
  %5 = alloca %struct.ImgUtils, align 8
  %6 = bitcast %struct.ImgUtils* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #8
  %7 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %5, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %7, align 8
  %8 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %5, i64 0, i32 1
  store i32 %2, i32* %8, align 8
  %9 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %5, i64 0, i32 2
  store i8* %3, i8** %9, align 8
  %10 = tail call i32 @av_image_get_linesize(i32 -1, i32 %0, i32 0) #8
  %11 = sext i32 %10 to i64
  %12 = icmp slt i32 %10, 1
  %13 = zext i32 %0 to i64
  %14 = shl nuw nsw i64 %13, 3
  %15 = select i1 %12, i64 %14, i64 %11
  %16 = add nsw i64 %15, 1024
  %17 = icmp slt i32 %0, 1
  %18 = icmp slt i32 %1, 1
  %19 = or i1 %17, %18
  %20 = icmp sgt i64 %16, 2147483646
  %21 = or i1 %19, %20
  br i1 %21, label %27, label %22

22:                                               ; preds = %4
  %23 = add nuw i32 %1, 128
  %24 = zext i32 %23 to i64
  %25 = mul i64 %16, %24
  %26 = icmp ugt i64 %25, 2147483646
  br i1 %26, label %27, label %28

27:                                               ; preds = %22, %4
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %6, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %0, i32 %1) #8
  br label %28

28:                                               ; preds = %22, %27
  %29 = phi i32 [ -22, %27 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #8
  ret i32 %29
}

declare noalias i8* @av_malloc(i64) local_unnamed_addr #2

declare void @av_free(i8*) local_unnamed_addr #2

declare void @av_log(i8*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_check_size2(i32, i32, i64, i32, i32, i8*) local_unnamed_addr #0 {
  %7 = alloca %struct.ImgUtils, align 8
  %8 = bitcast %struct.ImgUtils* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %7, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %9, align 8
  %10 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %7, i64 0, i32 1
  store i32 %4, i32* %10, align 8
  %11 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %7, i64 0, i32 2
  store i8* %5, i8** %11, align 8
  %12 = tail call i32 @av_image_get_linesize(i32 %3, i32 %0, i32 0)
  %13 = sext i32 %12 to i64
  %14 = icmp slt i32 %12, 1
  %15 = zext i32 %0 to i64
  %16 = shl nuw nsw i64 %15, 3
  %17 = select i1 %14, i64 %16, i64 %13
  %18 = add nsw i64 %17, 1024
  %19 = icmp slt i32 %0, 1
  %20 = icmp slt i32 %1, 1
  %21 = or i1 %19, %20
  %22 = icmp sgt i64 %18, 2147483646
  %23 = or i1 %21, %22
  br i1 %23, label %29, label %24

24:                                               ; preds = %6
  %25 = add nuw i32 %1, 128
  %26 = zext i32 %25 to i64
  %27 = mul i64 %18, %26
  %28 = icmp ugt i64 %27, 2147483646
  br i1 %28, label %29, label %30

29:                                               ; preds = %24, %6
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %8, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %0, i32 %1) #8
  br label %37

30:                                               ; preds = %24
  %31 = icmp eq i64 %2, 9223372036854775807
  br i1 %31, label %37, label %32

32:                                               ; preds = %30
  %33 = zext i32 %1 to i64
  %34 = mul nuw nsw i64 %33, %15
  %35 = icmp sgt i64 %34, %2
  br i1 %35, label %36, label %37

36:                                               ; preds = %32
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %8, i32 16, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.2, i64 0, i64 0), i32 %0, i32 %1, i64 %2) #8
  br label %37

37:                                               ; preds = %32, %30, %36, %29
  %38 = phi i32 [ -22, %29 ], [ -22, %36 ], [ 0, %30 ], [ 0, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8
  ret i32 %38
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind readnone ssp uwtable
define hidden i32 @av_image_check_sar(i32, i32, i64) local_unnamed_addr #4 {
  %4 = trunc i64 %2 to i32
  %5 = lshr i64 %2, 32
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %6, 1
  %8 = icmp slt i32 %4, 0
  %9 = or i1 %8, %7
  br i1 %9, label %32, label %10

10:                                               ; preds = %3
  %11 = icmp eq i32 %4, 0
  %12 = icmp eq i32 %4, %6
  %13 = or i1 %11, %12
  br i1 %13, label %32, label %14

14:                                               ; preds = %10
  %15 = icmp slt i32 %4, %6
  br i1 %15, label %16, label %22

16:                                               ; preds = %14
  %17 = zext i32 %0 to i64
  %18 = shl i64 %2, 32
  %19 = ashr exact i64 %18, 32
  %20 = ashr i64 %2, 32
  %21 = tail call i64 @av_rescale_rnd(i64 %17, i64 %19, i64 %20, i32 0) #7
  br label %28

22:                                               ; preds = %14
  %23 = zext i32 %1 to i64
  %24 = ashr i64 %2, 32
  %25 = shl i64 %2, 32
  %26 = ashr exact i64 %25, 32
  %27 = tail call i64 @av_rescale_rnd(i64 %23, i64 %24, i64 %26, i32 0) #7
  br label %28

28:                                               ; preds = %22, %16
  %29 = phi i64 [ %21, %16 ], [ %27, %22 ]
  %30 = icmp sgt i64 %29, 0
  %31 = select i1 %30, i32 0, i32 -22
  br label %32

32:                                               ; preds = %28, %10, %3
  %33 = phi i32 [ -22, %3 ], [ 0, %10 ], [ %31, %28 ]
  ret i32 %33
}

; Function Attrs: nounwind readnone
declare i64 @av_rescale_rnd(i64, i64, i64, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @av_image_copy_plane(i8*, i32, i8* readonly, i32, i32, i32) local_unnamed_addr #0 {
  %7 = sext i32 %1 to i64
  %8 = sext i32 %3 to i64
  %9 = sext i32 %4 to i64
  %10 = icmp ne i8* %0, null
  %11 = icmp ne i8* %2, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %60

13:                                               ; preds = %6
  %14 = icmp slt i64 %8, 0
  %15 = sub nsw i64 0, %8
  %16 = select i1 %14, i64 %15, i64 %8
  %17 = icmp slt i64 %16, %9
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 349) #8
  tail call void @abort() #9
  unreachable

19:                                               ; preds = %13
  %20 = icmp slt i64 %7, 0
  %21 = sub nsw i64 0, %7
  %22 = select i1 %20, i64 %21, i64 %7
  %23 = icmp slt i64 %22, %9
  br i1 %23, label %45, label %24

24:                                               ; preds = %19
  %25 = icmp sgt i32 %5, 0
  br i1 %25, label %26, label %60

26:                                               ; preds = %24
  %27 = add nsw i32 %5, -1
  %28 = and i32 %5, 3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %26, %30
  %31 = phi i32 [ %37, %30 ], [ %5, %26 ]
  %32 = phi i8* [ %35, %30 ], [ %0, %26 ]
  %33 = phi i8* [ %36, %30 ], [ %2, %26 ]
  %34 = phi i32 [ %38, %30 ], [ %28, %26 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 %9, i1 false) #8
  %35 = getelementptr inbounds i8, i8* %32, i64 %7
  %36 = getelementptr inbounds i8, i8* %33, i64 %8
  %37 = add nsw i32 %31, -1
  %38 = add i32 %34, -1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %30, !llvm.loop !2

40:                                               ; preds = %30, %26
  %41 = phi i32 [ %5, %26 ], [ %37, %30 ]
  %42 = phi i8* [ %0, %26 ], [ %35, %30 ]
  %43 = phi i8* [ %2, %26 ], [ %36, %30 ]
  %44 = icmp ult i32 %27, 3
  br i1 %44, label %60, label %46

45:                                               ; preds = %19
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 350) #8
  tail call void @abort() #9
  unreachable

46:                                               ; preds = %40, %46
  %47 = phi i32 [ %58, %46 ], [ %41, %40 ]
  %48 = phi i8* [ %56, %46 ], [ %42, %40 ]
  %49 = phi i8* [ %57, %46 ], [ %43, %40 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %49, i64 %9, i1 false) #8
  %50 = getelementptr inbounds i8, i8* %48, i64 %7
  %51 = getelementptr inbounds i8, i8* %49, i64 %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %51, i64 %9, i1 false) #8
  %52 = getelementptr inbounds i8, i8* %50, i64 %7
  %53 = getelementptr inbounds i8, i8* %51, i64 %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %53, i64 %9, i1 false) #8
  %54 = getelementptr inbounds i8, i8* %52, i64 %7
  %55 = getelementptr inbounds i8, i8* %53, i64 %8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 %9, i1 false) #8
  %56 = getelementptr inbounds i8, i8* %54, i64 %7
  %57 = getelementptr inbounds i8, i8* %55, i64 %8
  %58 = add nsw i32 %47, -4
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %46, label %60

60:                                               ; preds = %40, %46, %6, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @image_copy_plane(i8*, i64, i8* readonly, i64, i64, i32) #0 {
  %7 = icmp ne i8* %0, null
  %8 = icmp ne i8* %2, null
  %9 = and i1 %7, %8
  br i1 %9, label %10, label %57

10:                                               ; preds = %6
  %11 = icmp slt i64 %3, 0
  %12 = sub nsw i64 0, %3
  %13 = select i1 %11, i64 %12, i64 %3
  %14 = icmp slt i64 %13, %4
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 349) #8
  tail call void @abort() #9
  unreachable

16:                                               ; preds = %10
  %17 = icmp slt i64 %1, 0
  %18 = sub nsw i64 0, %1
  %19 = select i1 %17, i64 %18, i64 %1
  %20 = icmp slt i64 %19, %4
  br i1 %20, label %42, label %21

21:                                               ; preds = %16
  %22 = icmp sgt i32 %5, 0
  br i1 %22, label %23, label %57

23:                                               ; preds = %21
  %24 = add nsw i32 %5, -1
  %25 = and i32 %5, 3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %37, label %27

27:                                               ; preds = %23, %27
  %28 = phi i32 [ %34, %27 ], [ %5, %23 ]
  %29 = phi i8* [ %32, %27 ], [ %0, %23 ]
  %30 = phi i8* [ %33, %27 ], [ %2, %23 ]
  %31 = phi i32 [ %35, %27 ], [ %25, %23 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %29, i8* align 1 %30, i64 %4, i1 false)
  %32 = getelementptr inbounds i8, i8* %29, i64 %1
  %33 = getelementptr inbounds i8, i8* %30, i64 %3
  %34 = add nsw i32 %28, -1
  %35 = add i32 %31, -1
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %27, !llvm.loop !4

37:                                               ; preds = %27, %23
  %38 = phi i32 [ %5, %23 ], [ %34, %27 ]
  %39 = phi i8* [ %0, %23 ], [ %32, %27 ]
  %40 = phi i8* [ %2, %23 ], [ %33, %27 ]
  %41 = icmp ult i32 %24, 3
  br i1 %41, label %57, label %43

42:                                               ; preds = %16
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 350) #8
  tail call void @abort() #9
  unreachable

43:                                               ; preds = %37, %43
  %44 = phi i32 [ %55, %43 ], [ %38, %37 ]
  %45 = phi i8* [ %53, %43 ], [ %39, %37 ]
  %46 = phi i8* [ %54, %43 ], [ %40, %37 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %45, i8* align 1 %46, i64 %4, i1 false)
  %47 = getelementptr inbounds i8, i8* %45, i64 %1
  %48 = getelementptr inbounds i8, i8* %46, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %47, i8* align 1 %48, i64 %4, i1 false)
  %49 = getelementptr inbounds i8, i8* %47, i64 %1
  %50 = getelementptr inbounds i8, i8* %48, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %50, i64 %4, i1 false)
  %51 = getelementptr inbounds i8, i8* %49, i64 %1
  %52 = getelementptr inbounds i8, i8* %50, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %52, i64 %4, i1 false)
  %53 = getelementptr inbounds i8, i8* %51, i64 %1
  %54 = getelementptr inbounds i8, i8* %52, i64 %3
  %55 = add nsw i32 %44, -4
  %56 = icmp sgt i32 %55, 0
  br i1 %56, label %43, label %57

57:                                               ; preds = %37, %43, %21, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av_image_copy(i8** nocapture readonly, i32* nocapture readonly, i8** nocapture readonly, i32* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca [4 x i64], align 16
  %9 = alloca [4 x i64], align 16
  %10 = bitcast [4 x i64]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #8
  %11 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 0
  %12 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 1
  %13 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 2
  %14 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 3
  %15 = bitcast [4 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #8
  %16 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 0
  %17 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 1
  %18 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 2
  %19 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 3
  %20 = load i32, i32* %1, align 4
  %21 = sext i32 %20 to i64
  store i64 %21, i64* %11, align 16
  %22 = load i32, i32* %3, align 4
  %23 = sext i32 %22 to i64
  store i64 %23, i64* %16, align 16
  %24 = getelementptr inbounds i32, i32* %1, i64 1
  %25 = load i32, i32* %24, align 4
  %26 = sext i32 %25 to i64
  store i64 %26, i64* %12, align 8
  %27 = getelementptr inbounds i32, i32* %3, i64 1
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  store i64 %29, i64* %17, align 8
  %30 = getelementptr inbounds i32, i32* %1, i64 2
  %31 = load i32, i32* %30, align 4
  %32 = sext i32 %31 to i64
  store i64 %32, i64* %13, align 16
  %33 = getelementptr inbounds i32, i32* %3, i64 2
  %34 = load i32, i32* %33, align 4
  %35 = sext i32 %34 to i64
  store i64 %35, i64* %18, align 16
  %36 = getelementptr inbounds i32, i32* %1, i64 3
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  store i64 %38, i64* %14, align 8
  %39 = getelementptr inbounds i32, i32* %3, i64 3
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  store i64 %41, i64* %19, align 8
  call fastcc void @image_copy(i8** %0, i64* nonnull %11, i8** %2, i64* nonnull %16, i32 %4, i32 %5, i32 %6, void (i8*, i64, i8*, i64, i64, i32)* nonnull @image_copy_plane)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @image_copy(i8** nocapture readonly, i64* nocapture readonly, i8** nocapture readonly, i64* nocapture readonly, i32, i32, i32, void (i8*, i64, i8*, i64, i64, i32)* nocapture) unnamed_addr #0 {
  %9 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #8
  %10 = icmp eq %struct.AVPixFmtDescriptor* %9, null
  br i1 %10, label %141, label %11

11:                                               ; preds = %8
  %12 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 4
  %13 = load i64, i64* %12, align 8
  %14 = and i64 %13, 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %141

16:                                               ; preds = %11
  %17 = and i64 %13, 66
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %30

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 1
  %21 = load i8, i8* %20, align 8
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %141, label %23

23:                                               ; preds = %19
  %24 = zext i8 %21 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %52, label %28

28:                                               ; preds = %23
  %29 = sub nsw i64 %24, %26
  br label %77

30:                                               ; preds = %16
  %31 = load i8*, i8** %0, align 8
  %32 = load i64, i64* %1, align 8
  %33 = load i8*, i8** %2, align 8
  %34 = load i64, i64* %3, align 8
  %35 = sext i32 %5 to i64
  tail call void %7(i8* %31, i64 %32, i8* %33, i64 %34, i64 %35, i32 %6) #8, !callees !5
  %36 = load i64, i64* %12, align 8
  %37 = and i64 %36, 2
  %38 = icmp eq i64 %37, 0
  %39 = getelementptr inbounds i8*, i8** %0, i64 1
  %40 = load i8*, i8** %39, align 8
  br i1 %38, label %44, label %41

41:                                               ; preds = %30
  %42 = getelementptr inbounds i8*, i8** %2, i64 1
  %43 = load i8*, i8** %42, align 8
  br label %50

44:                                               ; preds = %30
  %45 = icmp eq i8* %40, null
  br i1 %45, label %141, label %46

46:                                               ; preds = %44
  %47 = getelementptr inbounds i8*, i8** %2, i64 1
  %48 = load i8*, i8** %47, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %141, label %50

50:                                               ; preds = %41, %46
  %51 = phi i8* [ %43, %41 ], [ %48, %46 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %40, i8* align 1 %51, i64 1024, i1 false)
  br label %141

52:                                               ; preds = %77, %23
  %53 = phi i32 [ undef, %23 ], [ %103, %77 ]
  %54 = phi i64 [ 0, %23 ], [ %104, %77 ]
  %55 = phi i32 [ 0, %23 ], [ %103, %77 ]
  %56 = icmp eq i64 %26, 0
  br i1 %56, label %69, label %57

57:                                               ; preds = %52, %57
  %58 = phi i64 [ %66, %57 ], [ %54, %52 ]
  %59 = phi i32 [ %65, %57 ], [ %55, %52 ]
  %60 = phi i64 [ %67, %57 ], [ %26, %52 ]
  %61 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 5, i64 %58, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = add nsw i32 %62, 1
  %64 = icmp sgt i32 %59, %63
  %65 = select i1 %64, i32 %59, i32 %63
  %66 = add nuw nsw i64 %58, 1
  %67 = add i64 %60, -1
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %57, !llvm.loop !6

69:                                               ; preds = %57, %52
  %70 = phi i32 [ %53, %52 ], [ %65, %57 ]
  %71 = icmp sgt i32 %70, 0
  br i1 %71, label %72, label %141

72:                                               ; preds = %69
  %73 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 3
  %74 = sub nsw i32 0, %6
  %75 = add i32 %6, -1
  %76 = zext i32 %70 to i64
  br label %107

77:                                               ; preds = %77, %28
  %78 = phi i64 [ 0, %28 ], [ %104, %77 ]
  %79 = phi i32 [ 0, %28 ], [ %103, %77 ]
  %80 = phi i64 [ %29, %28 ], [ %105, %77 ]
  %81 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 5, i64 %78, i32 0
  %82 = load i32, i32* %81, align 8
  %83 = add nsw i32 %82, 1
  %84 = icmp sgt i32 %79, %83
  %85 = select i1 %84, i32 %79, i32 %83
  %86 = or i64 %78, 1
  %87 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 5, i64 %86, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = add nsw i32 %88, 1
  %90 = icmp sgt i32 %85, %89
  %91 = select i1 %90, i32 %85, i32 %89
  %92 = or i64 %78, 2
  %93 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 5, i64 %92, i32 0
  %94 = load i32, i32* %93, align 8
  %95 = add nsw i32 %94, 1
  %96 = icmp sgt i32 %91, %95
  %97 = select i1 %96, i32 %91, i32 %95
  %98 = or i64 %78, 3
  %99 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %9, i64 0, i32 5, i64 %98, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = add nsw i32 %100, 1
  %102 = icmp sgt i32 %97, %101
  %103 = select i1 %102, i32 %97, i32 %101
  %104 = add nuw nsw i64 %78, 4
  %105 = add i64 %80, -4
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %52, label %77

107:                                              ; preds = %129, %72
  %108 = phi i64 [ 0, %72 ], [ %139, %129 ]
  %109 = trunc i64 %108 to i32
  %110 = tail call i32 @av_image_get_linesize(i32 %4, i32 %5, i32 %109)
  %111 = sext i32 %110 to i64
  %112 = icmp slt i32 %110, 0
  br i1 %112, label %128, label %113

113:                                              ; preds = %107
  %114 = trunc i64 %108 to i32
  %115 = add i32 %114, -1
  %116 = icmp ult i32 %115, 2
  br i1 %116, label %117, label %129

117:                                              ; preds = %113
  %118 = load i8, i8* %73, align 2
  %119 = tail call i1 @llvm.is.constant.i8(i8 %118)
  %120 = zext i8 %118 to i32
  br i1 %119, label %124, label %121

121:                                              ; preds = %117
  %122 = ashr i32 %74, %120
  %123 = sub nsw i32 0, %122
  br label %129

124:                                              ; preds = %117
  %125 = shl i32 1, %120
  %126 = add i32 %75, %125
  %127 = ashr i32 %126, %120
  br label %129

128:                                              ; preds = %107
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0)) #8
  br label %141

129:                                              ; preds = %113, %124, %121
  %130 = phi i32 [ %6, %113 ], [ %123, %121 ], [ %127, %124 ]
  %131 = getelementptr inbounds i8*, i8** %0, i64 %108
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i64, i64* %1, i64 %108
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds i8*, i8** %2, i64 %108
  %136 = load i8*, i8** %135, align 8
  %137 = getelementptr inbounds i64, i64* %3, i64 %108
  %138 = load i64, i64* %137, align 8
  tail call void %7(i8* %132, i64 %134, i8* %136, i64 %138, i64 %111, i32 %130) #8, !callees !5
  %139 = add nuw nsw i64 %108, 1
  %140 = icmp eq i64 %139, %76
  br i1 %140, label %141, label %107

141:                                              ; preds = %129, %19, %69, %11, %8, %46, %44, %50, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @av_image_copy_uc_from(i8** nocapture readonly, i64* nocapture readonly, i8** nocapture readonly, i64* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  tail call fastcc void @image_copy(i8** %0, i64* %1, i8** %2, i64* %3, i32 %4, i32 %5, i32 %6, void (i8*, i64, i8*, i64, i64, i32)* nonnull @image_copy_plane_uc_from)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @image_copy_plane_uc_from(i8*, i64, i8*, i64, i64, i32) #0 {
  %7 = tail call i32 @ff_image_copy_plane_uc_from_x86(i8* %0, i64 %1, i8* %2, i64 %3, i64 %4, i32 %5) #8
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %60

9:                                                ; preds = %6
  %10 = icmp ne i8* %0, null
  %11 = icmp ne i8* %2, null
  %12 = and i1 %10, %11
  br i1 %12, label %13, label %60

13:                                               ; preds = %9
  %14 = icmp slt i64 %3, 0
  %15 = sub nsw i64 0, %3
  %16 = select i1 %14, i64 %15, i64 %3
  %17 = icmp slt i64 %16, %4
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 349) #8
  tail call void @abort() #9
  unreachable

19:                                               ; preds = %13
  %20 = icmp slt i64 %1, 0
  %21 = sub nsw i64 0, %1
  %22 = select i1 %20, i64 %21, i64 %1
  %23 = icmp slt i64 %22, %4
  br i1 %23, label %45, label %24

24:                                               ; preds = %19
  %25 = icmp sgt i32 %5, 0
  br i1 %25, label %26, label %60

26:                                               ; preds = %24
  %27 = add nsw i32 %5, -1
  %28 = and i32 %5, 3
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %40, label %30

30:                                               ; preds = %26, %30
  %31 = phi i32 [ %37, %30 ], [ %5, %26 ]
  %32 = phi i8* [ %35, %30 ], [ %0, %26 ]
  %33 = phi i8* [ %36, %30 ], [ %2, %26 ]
  %34 = phi i32 [ %38, %30 ], [ %28, %26 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %33, i64 %4, i1 false) #8
  %35 = getelementptr inbounds i8, i8* %32, i64 %1
  %36 = getelementptr inbounds i8, i8* %33, i64 %3
  %37 = add nsw i32 %31, -1
  %38 = add i32 %34, -1
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %30, !llvm.loop !7

40:                                               ; preds = %30, %26
  %41 = phi i32 [ %5, %26 ], [ %37, %30 ]
  %42 = phi i8* [ %0, %26 ], [ %35, %30 ]
  %43 = phi i8* [ %2, %26 ], [ %36, %30 ]
  %44 = icmp ult i32 %27, 3
  br i1 %44, label %60, label %46

45:                                               ; preds = %19
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 350) #8
  tail call void @abort() #9
  unreachable

46:                                               ; preds = %40, %46
  %47 = phi i32 [ %58, %46 ], [ %41, %40 ]
  %48 = phi i8* [ %56, %46 ], [ %42, %40 ]
  %49 = phi i8* [ %57, %46 ], [ %43, %40 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %48, i8* align 1 %49, i64 %4, i1 false) #8
  %50 = getelementptr inbounds i8, i8* %48, i64 %1
  %51 = getelementptr inbounds i8, i8* %49, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %51, i64 %4, i1 false) #8
  %52 = getelementptr inbounds i8, i8* %50, i64 %1
  %53 = getelementptr inbounds i8, i8* %51, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %52, i8* align 1 %53, i64 %4, i1 false) #8
  %54 = getelementptr inbounds i8, i8* %52, i64 %1
  %55 = getelementptr inbounds i8, i8* %53, i64 %3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %55, i64 %4, i1 false) #8
  %56 = getelementptr inbounds i8, i8* %54, i64 %1
  %57 = getelementptr inbounds i8, i8* %55, i64 %3
  %58 = add nsw i32 %47, -4
  %59 = icmp sgt i32 %58, 0
  br i1 %59, label %46, label %60

60:                                               ; preds = %40, %46, %24, %9, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_fill_arrays(i8** nocapture, i32* nocapture, i8*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca %struct.ImgUtils, align 8
  %9 = bitcast %struct.ImgUtils* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #8
  %10 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %8, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %10, align 8
  %11 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %8, i64 0, i32 1
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %8, i64 0, i32 2
  store i8* null, i8** %12, align 8
  %13 = tail call i32 @av_image_get_linesize(i32 -1, i32 %4, i32 0) #8
  %14 = sext i32 %13 to i64
  %15 = icmp slt i32 %13, 1
  %16 = zext i32 %4 to i64
  %17 = shl nuw nsw i64 %16, 3
  %18 = select i1 %15, i64 %17, i64 %14
  %19 = add nsw i64 %18, 1024
  %20 = icmp slt i32 %4, 1
  %21 = icmp slt i32 %5, 1
  %22 = or i1 %20, %21
  %23 = icmp sgt i64 %19, 2147483646
  %24 = or i1 %22, %23
  br i1 %24, label %30, label %25

25:                                               ; preds = %7
  %26 = add nuw i32 %5, 128
  %27 = zext i32 %26 to i64
  %28 = mul i64 %19, %27
  %29 = icmp ugt i64 %28, 2147483646
  br i1 %29, label %30, label %31

30:                                               ; preds = %7, %25
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %9, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %4, i32 %5) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  br label %47

31:                                               ; preds = %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8
  %32 = tail call i32 @av_image_fill_linesizes(i32* %1, i32 %3, i32 %4)
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %47, label %34

34:                                               ; preds = %31
  %35 = add i32 %6, -1
  %36 = sub i32 0, %6
  %37 = bitcast i32* %1 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = insertelement <4 x i32> undef, i32 %35, i32 0
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> zeroinitializer
  %41 = add <4 x i32> %40, %38
  %42 = insertelement <4 x i32> undef, i32 %36, i32 0
  %43 = shufflevector <4 x i32> %42, <4 x i32> undef, <4 x i32> zeroinitializer
  %44 = and <4 x i32> %41, %43
  %45 = bitcast i32* %1 to <4 x i32>*
  store <4 x i32> %44, <4 x i32>* %45, align 4
  %46 = tail call i32 @av_image_fill_pointers(i8** %0, i32 %3, i32 %5, i8* %2, i32* %1)
  br label %47

47:                                               ; preds = %30, %31, %34
  %48 = phi i32 [ %46, %34 ], [ %32, %31 ], [ -22, %30 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_get_buffer_size(i32, i32, i32, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.ImgUtils, align 8
  %6 = alloca [4 x i32], align 16
  %7 = alloca [4 x i64], align 16
  %8 = alloca [4 x i64], align 16
  %9 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8
  %10 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 0
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 2
  %12 = bitcast [4 x i64]* %7 to i8*
  %13 = bitcast [4 x i32]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #8
  %14 = getelementptr inbounds [4 x i64], [4 x i64]* %7, i64 0, i64 0
  %15 = getelementptr inbounds [4 x i64], [4 x i64]* %7, i64 0, i64 2
  %16 = bitcast [4 x i64]* %8 to i8*
  %17 = bitcast [4 x i64]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #8
  %18 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 0
  %19 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 1
  %20 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 2
  %21 = getelementptr inbounds [4 x i64], [4 x i64]* %8, i64 0, i64 3
  %22 = bitcast [4 x i64]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 32, i1 false)
  %23 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %0) #8
  %24 = icmp eq %struct.AVPixFmtDescriptor* %23, null
  br i1 %24, label %92, label %25

25:                                               ; preds = %4
  %26 = bitcast %struct.ImgUtils* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 16, i1 false) #8
  %27 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %5, i64 0, i32 0
  store %struct.AVClass* @imgutils_class, %struct.AVClass** %27, align 8
  %28 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %5, i64 0, i32 1
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %struct.ImgUtils, %struct.ImgUtils* %5, i64 0, i32 2
  store i8* null, i8** %29, align 8
  %30 = tail call i32 @av_image_get_linesize(i32 -1, i32 %1, i32 0) #8
  %31 = sext i32 %30 to i64
  %32 = icmp slt i32 %30, 1
  %33 = zext i32 %1 to i64
  %34 = shl nuw nsw i64 %33, 3
  %35 = select i1 %32, i64 %34, i64 %31
  %36 = add nsw i64 %35, 1024
  %37 = icmp slt i32 %1, 1
  %38 = icmp slt i32 %2, 1
  %39 = or i1 %37, %38
  %40 = icmp sgt i64 %36, 2147483646
  %41 = or i1 %39, %40
  br i1 %41, label %47, label %42

42:                                               ; preds = %25
  %43 = add nuw i32 %2, 128
  %44 = zext i32 %43 to i64
  %45 = mul i64 %36, %44
  %46 = icmp ugt i64 %45, 2147483646
  br i1 %46, label %47, label %48

47:                                               ; preds = %25, %42
  call void (i8*, i32, i8*, ...) @av_log(i8* nonnull %26, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i32 %1, i32 %2) #8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #8
  br label %92

48:                                               ; preds = %42
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #8
  %49 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %23, i64 0, i32 4
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, 64
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %59, label %53

53:                                               ; preds = %48
  %54 = add i32 %3, -1
  %55 = add i32 %54, %1
  %56 = sub i32 0, %3
  %57 = and i32 %55, %56
  %58 = mul nsw i32 %57, %2
  br label %92

59:                                               ; preds = %48
  %60 = call i32 @av_image_fill_linesizes(i32* nonnull %10, i32 %0, i32 %1)
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %92, label %62

62:                                               ; preds = %59
  %63 = add i32 %3, -1
  %64 = sub i32 0, %3
  %65 = bitcast [4 x i32]* %6 to <2 x i32>*
  %66 = load <2 x i32>, <2 x i32>* %65, align 16
  %67 = insertelement <2 x i32> undef, i32 %63, i32 0
  %68 = shufflevector <2 x i32> %67, <2 x i32> undef, <2 x i32> zeroinitializer
  %69 = add <2 x i32> %68, %66
  %70 = insertelement <2 x i32> undef, i32 %64, i32 0
  %71 = shufflevector <2 x i32> %70, <2 x i32> undef, <2 x i32> zeroinitializer
  %72 = and <2 x i32> %69, %71
  %73 = sext <2 x i32> %72 to <2 x i64>
  %74 = bitcast [4 x i64]* %7 to <2 x i64>*
  store <2 x i64> %73, <2 x i64>* %74, align 16
  %75 = bitcast i32* %11 to <2 x i32>*
  %76 = load <2 x i32>, <2 x i32>* %75, align 8
  %77 = add <2 x i32> %68, %76
  %78 = and <2 x i32> %77, %71
  %79 = sext <2 x i32> %78 to <2 x i64>
  %80 = bitcast i64* %15 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %80, align 16
  %81 = call i32 @av_image_fill_plane_sizes(i64* nonnull %18, i32 %0, i32 %2, i64* nonnull %14)
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %92, label %83

83:                                               ; preds = %62
  %84 = load i64, i64* %18, align 16
  %85 = icmp ugt i64 %84, 2147483647
  br i1 %85, label %92, label %86

86:                                               ; preds = %83
  %87 = load i64, i64* %19, align 8
  %88 = shl i64 %84, 32
  %89 = sub nuw nsw i64 9223372032559808512, %88
  %90 = ashr exact i64 %89, 32
  %91 = icmp ugt i64 %87, %90
  br i1 %91, label %92, label %94

92:                                               ; preds = %83, %86, %94, %102, %109, %47, %62, %59, %4, %53
  %93 = phi i32 [ %58, %53 ], [ -22, %4 ], [ %60, %59 ], [ %81, %62 ], [ -22, %47 ], [ -22, %83 ], [ -22, %86 ], [ -22, %94 ], [ -22, %102 ], [ %111, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8
  ret i32 %93

94:                                               ; preds = %86
  %95 = trunc i64 %84 to i32
  %96 = trunc i64 %87 to i32
  %97 = add i32 %95, %96
  %98 = load i64, i64* %20, align 16
  %99 = sub nsw i32 2147483647, %97
  %100 = sext i32 %99 to i64
  %101 = icmp ugt i64 %98, %100
  br i1 %101, label %92, label %102

102:                                              ; preds = %94
  %103 = trunc i64 %98 to i32
  %104 = add i32 %97, %103
  %105 = load i64, i64* %21, align 8
  %106 = sub nsw i32 2147483647, %104
  %107 = sext i32 %106 to i64
  %108 = icmp ugt i64 %105, %107
  br i1 %108, label %92, label %109

109:                                              ; preds = %102
  %110 = trunc i64 %105 to i32
  %111 = add i32 %104, %110
  br label %92
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_copy_to_buffer(i8* nocapture, i32, i8** nocapture readonly, i32* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %9 = alloca [4 x i32], align 16
  %10 = bitcast [4 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #8
  %11 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 0
  %12 = bitcast [4 x i32]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 16, i1 false)
  %13 = tail call i32 @av_image_get_buffer_size(i32 %4, i32 %5, i32 %6, i32 %7)
  %14 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %4) #8
  %15 = icmp sle i32 %13, %1
  %16 = icmp sgt i32 %13, -1
  %17 = and i1 %16, %15
  %18 = icmp ne %struct.AVPixFmtDescriptor* %14, null
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %198

20:                                               ; preds = %8
  %21 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 1
  %22 = load i8, i8* %21, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %73, label %24

24:                                               ; preds = %20
  %25 = zext i8 %22 to i64
  %26 = add nsw i64 %25, -1
  %27 = and i64 %25, 3
  %28 = icmp ult i64 %26, 3
  br i1 %28, label %57, label %29

29:                                               ; preds = %24
  %30 = sub nsw i64 %25, %27
  br label %31

31:                                               ; preds = %31, %29
  %32 = phi i64 [ 0, %29 ], [ %54, %31 ]
  %33 = phi i32 [ 0, %29 ], [ %53, %31 ]
  %34 = phi i64 [ %30, %29 ], [ %55, %31 ]
  %35 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 5, i64 %32, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp sgt i32 %36, %33
  %38 = select i1 %37, i32 %36, i32 %33
  %39 = or i64 %32, 1
  %40 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 5, i64 %39, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = icmp sgt i32 %41, %38
  %43 = select i1 %42, i32 %41, i32 %38
  %44 = or i64 %32, 2
  %45 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 5, i64 %44, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = icmp sgt i32 %46, %43
  %48 = select i1 %47, i32 %46, i32 %43
  %49 = or i64 %32, 3
  %50 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 5, i64 %49, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = icmp sgt i32 %51, %48
  %53 = select i1 %52, i32 %51, i32 %48
  %54 = add nuw nsw i64 %32, 4
  %55 = add i64 %34, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %31

57:                                               ; preds = %31, %24
  %58 = phi i32 [ undef, %24 ], [ %53, %31 ]
  %59 = phi i64 [ 0, %24 ], [ %54, %31 ]
  %60 = phi i32 [ 0, %24 ], [ %53, %31 ]
  %61 = icmp eq i64 %27, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %57, %62
  %63 = phi i64 [ %70, %62 ], [ %59, %57 ]
  %64 = phi i32 [ %69, %62 ], [ %60, %57 ]
  %65 = phi i64 [ %71, %62 ], [ %27, %57 ]
  %66 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 5, i64 %63, i32 0
  %67 = load i32, i32* %66, align 8
  %68 = icmp sgt i32 %67, %64
  %69 = select i1 %68, i32 %67, i32 %64
  %70 = add nuw nsw i64 %63, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %62, !llvm.loop !8

73:                                               ; preds = %57, %62, %20
  %74 = phi i32 [ 0, %20 ], [ %58, %57 ], [ %69, %62 ]
  %75 = call i32 @av_image_fill_linesizes(i32* nonnull %11, i32 %4, i32 %5)
  %76 = icmp sgt i32 %75, -1
  br i1 %76, label %77, label %86

77:                                               ; preds = %73
  %78 = icmp slt i32 %74, 0
  br i1 %78, label %158, label %79

79:                                               ; preds = %77
  %80 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 3
  %81 = add i32 %6, -1
  %82 = add i32 %7, -1
  %83 = sub i32 0, %7
  %84 = add nuw i32 %74, 1
  %85 = zext i32 %84 to i64
  br label %87

86:                                               ; preds = %73
  tail call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.5, i64 0, i64 0), i32 525) #8
  tail call void @abort() #9
  unreachable

87:                                               ; preds = %154, %79
  %88 = phi i64 [ %156, %154 ], [ 0, %79 ]
  %89 = phi i8* [ %155, %154 ], [ %0, %79 ]
  %90 = trunc i64 %88 to i32
  %91 = add i32 %90, -1
  %92 = icmp ult i32 %91, 2
  br i1 %92, label %93, label %96

93:                                               ; preds = %87
  %94 = load i8, i8* %80, align 2
  %95 = zext i8 %94 to i32
  br label %96

96:                                               ; preds = %87, %93
  %97 = phi i32 [ %95, %93 ], [ 0, %87 ]
  %98 = shl i32 1, %97
  %99 = add i32 %81, %98
  %100 = ashr i32 %99, %97
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %102, label %154

102:                                              ; preds = %96
  %103 = getelementptr inbounds i8*, i8** %2, i64 %88
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds [4 x i32], [4 x i32]* %9, i64 0, i64 %88
  %106 = getelementptr inbounds i32, i32* %3, i64 %88
  %107 = load i32, i32* %105, align 4
  %108 = sext i32 %107 to i64
  %109 = add i32 %82, %107
  %110 = and i32 %109, %83
  %111 = sext i32 %110 to i64
  %112 = add i32 %100, -1
  %113 = and i32 %100, 3
  %114 = icmp ult i32 %112, 3
  br i1 %114, label %139, label %115

115:                                              ; preds = %102
  %116 = sub i32 %100, %113
  br label %117

117:                                              ; preds = %117, %115
  %118 = phi i8* [ %104, %115 ], [ %136, %117 ]
  %119 = phi i8* [ %89, %115 ], [ %133, %117 ]
  %120 = phi i32 [ %116, %115 ], [ %137, %117 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %119, i8* align 1 %118, i64 %108, i1 false)
  %121 = getelementptr inbounds i8, i8* %119, i64 %111
  %122 = load i32, i32* %106, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %118, i64 %123
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %124, i64 %108, i1 false)
  %125 = getelementptr inbounds i8, i8* %121, i64 %111
  %126 = load i32, i32* %106, align 4
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %124, i64 %127
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %128, i64 %108, i1 false)
  %129 = getelementptr inbounds i8, i8* %125, i64 %111
  %130 = load i32, i32* %106, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %128, i64 %131
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %132, i64 %108, i1 false)
  %133 = getelementptr inbounds i8, i8* %129, i64 %111
  %134 = load i32, i32* %106, align 4
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %132, i64 %135
  %137 = add i32 %120, -4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %117

139:                                              ; preds = %117, %102
  %140 = phi i8* [ undef, %102 ], [ %133, %117 ]
  %141 = phi i8* [ %104, %102 ], [ %136, %117 ]
  %142 = phi i8* [ %89, %102 ], [ %133, %117 ]
  %143 = icmp eq i32 %113, 0
  br i1 %143, label %154, label %144

144:                                              ; preds = %139, %144
  %145 = phi i8* [ %151, %144 ], [ %141, %139 ]
  %146 = phi i8* [ %148, %144 ], [ %142, %139 ]
  %147 = phi i32 [ %152, %144 ], [ %113, %139 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %145, i64 %108, i1 false)
  %148 = getelementptr inbounds i8, i8* %146, i64 %111
  %149 = load i32, i32* %106, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %145, i64 %150
  %152 = add i32 %147, -1
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %144, !llvm.loop !9

154:                                              ; preds = %139, %144, %96
  %155 = phi i8* [ %89, %96 ], [ %140, %139 ], [ %148, %144 ]
  %156 = add nuw nsw i64 %88, 1
  %157 = icmp eq i64 %156, %85
  br i1 %157, label %158, label %87

158:                                              ; preds = %154, %77
  %159 = phi i8* [ %0, %77 ], [ %155, %154 ]
  %160 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %14, i64 0, i32 4
  %161 = load i64, i64* %160, align 8
  %162 = and i64 %161, 2
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %198, label %164

164:                                              ; preds = %158
  %165 = bitcast i8* %159 to i32*
  %166 = getelementptr inbounds i8*, i8** %2, i64 1
  br label %167

167:                                              ; preds = %167, %164
  %168 = phi i64 [ 0, %164 ], [ %196, %167 ]
  %169 = load i8*, i8** %166, align 8
  %170 = shl nsw i64 %168, 2
  %171 = getelementptr inbounds i8, i8* %169, i64 %170
  %172 = bitcast i8* %171 to i32*
  %173 = load i32, i32* %172, align 1
  %174 = getelementptr inbounds i32, i32* %165, i64 %168
  store i32 %173, i32* %174, align 1
  %175 = or i64 %168, 1
  %176 = load i8*, i8** %166, align 8
  %177 = shl nsw i64 %175, 2
  %178 = getelementptr inbounds i8, i8* %176, i64 %177
  %179 = bitcast i8* %178 to i32*
  %180 = load i32, i32* %179, align 1
  %181 = getelementptr inbounds i32, i32* %165, i64 %175
  store i32 %180, i32* %181, align 1
  %182 = or i64 %168, 2
  %183 = load i8*, i8** %166, align 8
  %184 = shl nsw i64 %182, 2
  %185 = getelementptr inbounds i8, i8* %183, i64 %184
  %186 = bitcast i8* %185 to i32*
  %187 = load i32, i32* %186, align 1
  %188 = getelementptr inbounds i32, i32* %165, i64 %182
  store i32 %187, i32* %188, align 1
  %189 = or i64 %168, 3
  %190 = load i8*, i8** %166, align 8
  %191 = shl nsw i64 %189, 2
  %192 = getelementptr inbounds i8, i8* %190, i64 %191
  %193 = bitcast i8* %192 to i32*
  %194 = load i32, i32* %193, align 1
  %195 = getelementptr inbounds i32, i32* %165, i64 %189
  store i32 %194, i32* %195, align 1
  %196 = add nuw nsw i64 %168, 4
  %197 = icmp eq i64 %196, 256
  br i1 %197, label %198, label %167

198:                                              ; preds = %167, %158, %8
  %199 = phi i32 [ -22, %8 ], [ %13, %158 ], [ %13, %167 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #8
  ret i32 %199
}

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @av_image_fill_black(i8** readonly, i64* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [4 x [32 x i8]], align 16
  %8 = alloca [4 x i32], align 16
  %9 = alloca [4 x i64], align 16
  %10 = alloca [4 x i8*], align 16
  %11 = alloca [32 x i16], align 16
  %12 = tail call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_get(i32 %2) #8
  %13 = tail call i32 @av_pix_fmt_count_planes(i32 %2) #8
  %14 = getelementptr inbounds [4 x [32 x i8]], [4 x [32 x i8]]* %7, i64 0, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %14) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 128, i1 false)
  %15 = bitcast [4 x i32]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 16, i1 false)
  %16 = bitcast [4 x i64]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 0, i64 32, i1 false)
  %17 = icmp eq %struct.AVPixFmtDescriptor* %12, null
  %18 = add i32 %13, -1
  %19 = icmp ugt i32 %18, 3
  %20 = or i1 %17, %19
  br i1 %20, label %286, label %21

21:                                               ; preds = %6
  %22 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 4
  %23 = load i64, i64* %22, align 8
  %24 = and i64 %23, 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %286

26:                                               ; preds = %21
  %27 = and i64 %23, 32
  %28 = icmp ne i64 %27, 0
  %29 = icmp ne i32 %3, 2
  %30 = xor i1 %28, true
  %31 = and i1 %29, %30
  %32 = and i64 %23, 4
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %40

34:                                               ; preds = %26
  %35 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 1
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %126, label %38

38:                                               ; preds = %34
  %39 = zext i8 %36 to i64
  br label %111

40:                                               ; preds = %26
  %41 = tail call i32 @av_image_get_linesize(i32 %2, i32 %4, i32 0)
  %42 = sext i32 %41 to i64
  %43 = icmp eq i32 %2, 9
  %44 = sext i1 %43 to i8
  %45 = icmp eq i32 %13, 1
  br i1 %45, label %46, label %286

46:                                               ; preds = %40
  %47 = add i32 %2, -9
  %48 = icmp ult i32 %47, 2
  %49 = or i1 %48, %28
  %50 = xor i1 %49, true
  %51 = icmp slt i32 %41, 1
  %52 = or i1 %51, %50
  br i1 %52, label %286, label %53

53:                                               ; preds = %46
  %54 = icmp ne i8** %0, null
  %55 = icmp sgt i32 %5, 0
  %56 = and i1 %54, %55
  br i1 %56, label %57, label %286

57:                                               ; preds = %53
  %58 = load i8*, i8** %0, align 8
  %59 = add nsw i32 %5, -1
  %60 = and i32 %5, 7
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %71, label %62

62:                                               ; preds = %57, %62
  %63 = phi i32 [ %68, %62 ], [ %5, %57 ]
  %64 = phi i8* [ %67, %62 ], [ %58, %57 ]
  %65 = phi i32 [ %69, %62 ], [ %60, %57 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %64, i8 %44, i64 %42, i1 false)
  %66 = load i64, i64* %1, align 8
  %67 = getelementptr inbounds i8, i8* %64, i64 %66
  %68 = add nsw i32 %63, -1
  %69 = add i32 %65, -1
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %62, !llvm.loop !10

71:                                               ; preds = %62, %57
  %72 = phi i32 [ %5, %57 ], [ %68, %62 ]
  %73 = phi i8* [ %58, %57 ], [ %67, %62 ]
  %74 = icmp ult i32 %59, 7
  br i1 %74, label %286, label %75

75:                                               ; preds = %71, %75
  %76 = phi i32 [ %94, %75 ], [ %72, %71 ]
  %77 = phi i8* [ %93, %75 ], [ %73, %71 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %77, i8 %44, i64 %42, i1 false)
  %78 = load i64, i64* %1, align 8
  %79 = getelementptr inbounds i8, i8* %77, i64 %78
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 %44, i64 %42, i1 false)
  %80 = load i64, i64* %1, align 8
  %81 = getelementptr inbounds i8, i8* %79, i64 %80
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %81, i8 %44, i64 %42, i1 false)
  %82 = load i64, i64* %1, align 8
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %83, i8 %44, i64 %42, i1 false)
  %84 = load i64, i64* %1, align 8
  %85 = getelementptr inbounds i8, i8* %83, i64 %84
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %85, i8 %44, i64 %42, i1 false)
  %86 = load i64, i64* %1, align 8
  %87 = getelementptr inbounds i8, i8* %85, i64 %86
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %87, i8 %44, i64 %42, i1 false)
  %88 = load i64, i64* %1, align 8
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %89, i8 %44, i64 %42, i1 false)
  %90 = load i64, i64* %1, align 8
  %91 = getelementptr inbounds i8, i8* %89, i64 %90
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %91, i8 %44, i64 %42, i1 false)
  %92 = load i64, i64* %1, align 8
  %93 = getelementptr inbounds i8, i8* %91, i64 %92
  %94 = add nsw i32 %76, -8
  %95 = icmp sgt i32 %94, 0
  br i1 %95, label %75, label %286

96:                                               ; preds = %111
  %97 = icmp ult i64 %123, %39
  br i1 %97, label %111, label %98

98:                                               ; preds = %96
  br i1 %37, label %124, label %99

99:                                               ; preds = %98
  %100 = bitcast [4 x i8*]* %10 to i8*
  %101 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 0
  %102 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 1
  %103 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 2
  %104 = getelementptr inbounds [4 x i8*], [4 x i8*]* %10, i64 0, i64 3
  %105 = bitcast [32 x i16]* %11 to i8*
  %106 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 0
  %107 = bitcast [4 x i8*]* %10 to i8*
  %108 = getelementptr inbounds [4 x [32 x i8]], [4 x [32 x i8]]* %7, i64 0, i64 1, i64 0
  %109 = getelementptr inbounds [4 x [32 x i8]], [4 x [32 x i8]]* %7, i64 0, i64 2, i64 0
  %110 = getelementptr inbounds [4 x [32 x i8]], [4 x [32 x i8]]* %7, i64 0, i64 3, i64 0
  br label %128

111:                                              ; preds = %38, %96
  %112 = phi i64 [ 0, %38 ], [ %123, %96 ]
  %113 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 5, i64 %112, i32 0
  %114 = load i32, i32* %113, align 8
  %115 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 5, i64 %112, i32 1
  %116 = load i32, i32* %115, align 4
  %117 = sext i32 %114 to i64
  %118 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = icmp sgt i32 %119, %116
  %121 = select i1 %120, i32 %119, i32 %116
  store i32 %121, i32* %118, align 4
  %122 = icmp slt i32 %121, 33
  %123 = add nuw nsw i64 %112, 1
  br i1 %122, label %96, label %286

124:                                              ; preds = %186, %98
  %125 = icmp sgt i32 %13, 0
  br i1 %125, label %126, label %286

126:                                              ; preds = %34, %124
  %127 = zext i32 %13 to i64
  br label %216

128:                                              ; preds = %99, %186
  %129 = phi i64 [ 0, %99 ], [ %188, %186 ]
  %130 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 5, i64 %129, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 5, i64 %129, i32 1
  %133 = load i32, i32* %132, align 4
  %134 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 5, i64 %129, i32 4
  %135 = load i32, i32* %134, align 8
  %136 = sext i32 %131 to i64
  %137 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = sdiv i32 %138, %133
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %100) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %107, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %105) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %105, i8 -86, i64 64, i1 false)
  %140 = icmp sgt i32 %135, 16
  br i1 %140, label %213, label %141

141:                                              ; preds = %128
  %142 = icmp slt i32 %135, 8
  %143 = and i1 %142, %30
  %144 = icmp slt i32 %139, 1
  %145 = or i1 %143, %144
  br i1 %145, label %213, label %146

146:                                              ; preds = %141
  %147 = icmp eq i64 %129, 0
  %148 = and i1 %31, %147
  br i1 %148, label %149, label %153

149:                                              ; preds = %146
  %150 = add nsw i32 %135, -8
  %151 = shl i32 16, %150
  %152 = trunc i32 %151 to i16
  br label %168

153:                                              ; preds = %146
  %154 = trunc i64 %129 to i32
  %155 = add i32 %154, -1
  %156 = icmp ugt i32 %155, 1
  %157 = or i1 %28, %156
  br i1 %157, label %162, label %158

158:                                              ; preds = %153
  %159 = add nsw i32 %135, -8
  %160 = shl i32 128, %159
  %161 = trunc i32 %160 to i16
  br label %168

162:                                              ; preds = %153
  %163 = icmp eq i64 %129, 3
  br i1 %163, label %164, label %168

164:                                              ; preds = %162
  %165 = shl nsw i32 -1, %135
  %166 = trunc i32 %165 to i16
  %167 = xor i16 %166, -1
  br label %168

168:                                              ; preds = %149, %162, %164, %158
  %169 = phi i16 [ %152, %149 ], [ %167, %164 ], [ 0, %162 ], [ %161, %158 ]
  %170 = zext i32 %139 to i64
  %171 = add nsw i64 %170, -1
  %172 = and i64 %170, 7
  %173 = icmp ult i64 %171, 7
  br i1 %173, label %176, label %174

174:                                              ; preds = %168
  %175 = sub nsw i64 %170, %172
  br label %192

176:                                              ; preds = %192, %168
  %177 = phi i64 [ 0, %168 ], [ %210, %192 ]
  %178 = icmp eq i64 %172, 0
  br i1 %178, label %186, label %179

179:                                              ; preds = %176, %179
  %180 = phi i64 [ %183, %179 ], [ %177, %176 ]
  %181 = phi i64 [ %184, %179 ], [ %172, %176 ]
  %182 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %180
  store i16 %169, i16* %182, align 2
  %183 = add nuw nsw i64 %180, 1
  %184 = add i64 %181, -1
  %185 = icmp eq i64 %184, 0
  br i1 %185, label %186, label %179, !llvm.loop !11

186:                                              ; preds = %179, %176
  store i8* %14, i8** %101, align 16
  store i8* %108, i8** %102, align 8
  store i8* %109, i8** %103, align 16
  store i8* %110, i8** %104, align 8
  %187 = trunc i64 %129 to i32
  call void @av_write_image_line(i16* nonnull %106, i8** nonnull %101, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @av_image_fill_black.c_linesize, i64 0, i64 0), %struct.AVPixFmtDescriptor* %12, i32 0, i32 0, i32 %187, i32 %139) #8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %105) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %100) #8
  %188 = add nuw nsw i64 %129, 1
  %189 = load i8, i8* %35, align 8
  %190 = zext i8 %189 to i64
  %191 = icmp ult i64 %188, %190
  br i1 %191, label %128, label %124

192:                                              ; preds = %192, %174
  %193 = phi i64 [ 0, %174 ], [ %210, %192 ]
  %194 = phi i64 [ %175, %174 ], [ %211, %192 ]
  %195 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %193
  store i16 %169, i16* %195, align 16
  %196 = or i64 %193, 1
  %197 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %196
  store i16 %169, i16* %197, align 2
  %198 = or i64 %193, 2
  %199 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %198
  store i16 %169, i16* %199, align 4
  %200 = or i64 %193, 3
  %201 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %200
  store i16 %169, i16* %201, align 2
  %202 = or i64 %193, 4
  %203 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %202
  store i16 %169, i16* %203, align 8
  %204 = or i64 %193, 5
  %205 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %204
  store i16 %169, i16* %205, align 2
  %206 = or i64 %193, 6
  %207 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %206
  store i16 %169, i16* %207, align 4
  %208 = or i64 %193, 7
  %209 = getelementptr inbounds [32 x i16], [32 x i16]* %11, i64 0, i64 %208
  store i16 %169, i16* %209, align 2
  %210 = add nuw nsw i64 %193, 8
  %211 = add i64 %194, -8
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %176, label %192

213:                                              ; preds = %141, %128
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %105) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %100) #8
  br label %286

214:                                              ; preds = %216
  %215 = icmp eq i64 %223, %127
  br i1 %215, label %224, label %216

216:                                              ; preds = %214, %126
  %217 = phi i64 [ 0, %126 ], [ %223, %214 ]
  %218 = trunc i64 %217 to i32
  %219 = call i32 @av_image_get_linesize(i32 %2, i32 %4, i32 %218)
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %217
  store i64 %220, i64* %221, align 8
  %222 = icmp slt i32 %219, 0
  %223 = add nuw nsw i64 %217, 1
  br i1 %222, label %286, label %214

224:                                              ; preds = %214
  %225 = icmp eq i8** %0, null
  br i1 %225, label %286, label %226

226:                                              ; preds = %224
  %227 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i64 0, i32 3
  %228 = add i32 %5, -1
  %229 = zext i32 %13 to i64
  br label %230

230:                                              ; preds = %283, %226
  %231 = phi i64 [ 0, %226 ], [ %284, %283 ]
  %232 = getelementptr inbounds [4 x i64], [4 x i64]* %9, i64 0, i64 %231
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds i8*, i8** %0, i64 %231
  %235 = load i8*, i8** %234, align 8
  %236 = trunc i64 %231 to i32
  %237 = add i32 %236, -1
  %238 = icmp ult i32 %237, 2
  br i1 %238, label %239, label %242

239:                                              ; preds = %230
  %240 = load i8, i8* %227, align 2
  %241 = zext i8 %240 to i32
  br label %242

242:                                              ; preds = %230, %239
  %243 = phi i32 [ %241, %239 ], [ 0, %230 ]
  %244 = shl i32 1, %243
  %245 = add i32 %228, %244
  %246 = ashr i32 %245, %243
  %247 = icmp sgt i32 %246, 0
  br i1 %247, label %248, label %283

248:                                              ; preds = %242
  %249 = getelementptr inbounds [4 x [32 x i8]], [4 x [32 x i8]]* %7, i64 0, i64 %231, i64 0
  %250 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 %231
  %251 = getelementptr inbounds i64, i64* %1, i64 %231
  br label %252

252:                                              ; preds = %248, %278
  %253 = phi i32 [ %246, %248 ], [ %281, %278 ]
  %254 = phi i8* [ %235, %248 ], [ %280, %278 ]
  %255 = load i32, i32* %250, align 4
  %256 = sext i32 %255 to i64
  %257 = icmp eq i32 %255, 0
  br i1 %257, label %278, label %258

258:                                              ; preds = %252
  %259 = load i8, i8* %249, align 16
  br label %260

260:                                              ; preds = %258, %263
  %261 = phi i64 [ 1, %258 ], [ %267, %263 ]
  %262 = icmp eq i64 %261, %256
  br i1 %262, label %270, label %263

263:                                              ; preds = %260
  %264 = getelementptr inbounds [4 x [32 x i8]], [4 x [32 x i8]]* %7, i64 0, i64 %231, i64 %261
  %265 = load i8, i8* %264, align 1
  %266 = icmp eq i8 %265, %259
  %267 = add nuw i64 %261, 1
  br i1 %266, label %260, label %268

268:                                              ; preds = %263
  %269 = icmp eq i32 %255, 1
  br i1 %269, label %270, label %271

270:                                              ; preds = %260, %268
  call void @llvm.memset.p0i8.i64(i8* align 1 %254, i8 %259, i64 %233, i1 false) #8
  br label %278

271:                                              ; preds = %268
  %272 = icmp ult i64 %233, %256
  %273 = select i1 %272, i64 %233, i64 %256
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %254, i8* align 16 %249, i64 %273, i1 false) #8
  %274 = getelementptr inbounds i8, i8* %254, i64 %273
  %275 = trunc i64 %273 to i32
  %276 = sub i64 %233, %273
  %277 = trunc i64 %276 to i32
  call void @av_memcpy_backptr(i8* %274, i32 %275, i32 %277) #8
  br label %278

278:                                              ; preds = %252, %270, %271
  %279 = load i64, i64* %251, align 8
  %280 = getelementptr inbounds i8, i8* %254, i64 %279
  %281 = add nsw i32 %253, -1
  %282 = icmp sgt i32 %281, 0
  br i1 %282, label %252, label %283

283:                                              ; preds = %278, %242
  %284 = add nuw nsw i64 %231, 1
  %285 = icmp eq i64 %284, %229
  br i1 %285, label %286, label %230

286:                                              ; preds = %71, %75, %111, %216, %283, %224, %53, %124, %213, %40, %46, %6, %21
  %287 = phi i32 [ -22, %213 ], [ -22, %21 ], [ -22, %6 ], [ -22, %40 ], [ -22, %46 ], [ 0, %53 ], [ 0, %224 ], [ 0, %124 ], [ 0, %283 ], [ -22, %216 ], [ -22, %111 ], [ 0, %75 ], [ 0, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %14) #8
  ret i32 %287
}

declare i32 @av_pix_fmt_count_planes(i32) local_unnamed_addr #2

declare void @av_write_image_line(i16*, i8**, i32*, %struct.AVPixFmtDescriptor*, i32, i32, i32, i32) local_unnamed_addr #2

declare i8* @av_default_item_name(i8*) #2

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i8(i8) #7

declare i32 @ff_image_copy_plane_uc_from_x86(i8*, i64, i8*, i64, i64, i32) local_unnamed_addr #2

declare void @av_memcpy_backptr(i8*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{void (i8*, i64, i8*, i64, i64, i32)* @image_copy_plane, void (i8*, i64, i8*, i64, i64, i32)* @image_copy_plane_uc_from}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
