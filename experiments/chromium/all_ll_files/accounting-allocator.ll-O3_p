; ModuleID = '../../v8/src/zone/accounting-allocator.cc'
source_filename = "../../v8/src/zone/accounting-allocator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set", %"class.std::__1::set.11" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::set.11" = type { %"class.std::__1::__tree.12" }
%"class.std::__1::__tree.12" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.5", %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::Zone" = type opaque

$_ZN2v88internal19AccountingAllocator21TraceZoneCreationImplEPKNS0_4ZoneE = comdat any

$_ZN2v88internal19AccountingAllocator24TraceZoneDestructionImplEPKNS0_4ZoneE = comdat any

$_ZN2v88internal19AccountingAllocator24TraceAllocateSegmentImplEPNS0_7SegmentE = comdat any

@_ZN2v88internal15ZoneCompression16kReservationSizeE = hidden local_unnamed_addr constant i64 2147483648, align 8
@_ZN2v88internal15ZoneCompression21kReservationAlignmentE = hidden local_unnamed_addr constant i64 1, align 8
@_ZTVN2v88internal19AccountingAllocatorE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.v8::internal::AccountingAllocator"*)* @_ZN2v88internal19AccountingAllocatorD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::AccountingAllocator"*)* @_ZN2v88internal19AccountingAllocatorD0Ev to i8*), i8* bitcast (void (%"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal19AccountingAllocator21TraceZoneCreationImplEPKNS0_4ZoneE to i8*), i8* bitcast (void (%"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Zone"*)* @_ZN2v88internal19AccountingAllocator24TraceZoneDestructionImplEPKNS0_4ZoneE to i8*), i8* bitcast (void (%"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*)* @_ZN2v88internal19AccountingAllocator24TraceAllocateSegmentImplEPNS0_7SegmentE to i8*)] }, align 8

@_ZN2v88internal19AccountingAllocatorC1Ev = hidden unnamed_addr alias void (%"class.v8::internal::AccountingAllocator"*), void (%"class.v8::internal::AccountingAllocator"*)* @_ZN2v88internal19AccountingAllocatorC2Ev
@_ZN2v88internal19AccountingAllocatorD1Ev = hidden unnamed_addr alias void (%"class.v8::internal::AccountingAllocator"*), void (%"class.v8::internal::AccountingAllocator"*)* @_ZN2v88internal19AccountingAllocatorD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal19AccountingAllocatorC2Ev(%"class.v8::internal::AccountingAllocator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2v88internal19AccountingAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast i64* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19AccountingAllocatorD2Ev(%"class.v8::internal::AccountingAllocator"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2v88internal19AccountingAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.v8::base::BoundedPageAllocator"*, %"class.v8::base::BoundedPageAllocator"** %3, align 8
  store %"class.v8::base::BoundedPageAllocator"* null, %"class.v8::base::BoundedPageAllocator"** %3, align 8
  %5 = icmp eq %"class.v8::base::BoundedPageAllocator"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.v8::base::BoundedPageAllocator"* %4 to void (%"class.v8::base::BoundedPageAllocator"*)***
  %8 = load void (%"class.v8::base::BoundedPageAllocator"*)**, void (%"class.v8::base::BoundedPageAllocator"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.v8::base::BoundedPageAllocator"*)*, void (%"class.v8::base::BoundedPageAllocator"*)** %8, i64 1
  %10 = load void (%"class.v8::base::BoundedPageAllocator"*)*, void (%"class.v8::base::BoundedPageAllocator"*)** %9, align 8
  tail call void %10(%"class.v8::base::BoundedPageAllocator"* nonnull %4) #6
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %13 = load %"class.v8::internal::VirtualMemory"*, %"class.v8::internal::VirtualMemory"** %12, align 8
  store %"class.v8::internal::VirtualMemory"* null, %"class.v8::internal::VirtualMemory"** %12, align 8
  %14 = icmp eq %"class.v8::internal::VirtualMemory"* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  tail call void @_ZN2v88internal13VirtualMemoryD1Ev(%"class.v8::internal::VirtualMemory"* nonnull %13) #6
  %16 = bitcast %"class.v8::internal::VirtualMemory"* %13 to i8*
  tail call void @_ZdlPv(i8* %16) #7
  br label %17

17:                                               ; preds = %11, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19AccountingAllocatorD0Ev(%"class.v8::internal::AccountingAllocator"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN2v88internal19AccountingAllocatorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  %4 = load %"class.v8::base::BoundedPageAllocator"*, %"class.v8::base::BoundedPageAllocator"** %3, align 8
  store %"class.v8::base::BoundedPageAllocator"* null, %"class.v8::base::BoundedPageAllocator"** %3, align 8
  %5 = icmp eq %"class.v8::base::BoundedPageAllocator"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.v8::base::BoundedPageAllocator"* %4 to void (%"class.v8::base::BoundedPageAllocator"*)***
  %8 = load void (%"class.v8::base::BoundedPageAllocator"*)**, void (%"class.v8::base::BoundedPageAllocator"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.v8::base::BoundedPageAllocator"*)*, void (%"class.v8::base::BoundedPageAllocator"*)** %8, i64 1
  %10 = load void (%"class.v8::base::BoundedPageAllocator"*)*, void (%"class.v8::base::BoundedPageAllocator"*)** %9, align 8
  tail call void %10(%"class.v8::base::BoundedPageAllocator"* nonnull %4) #6
  br label %11

11:                                               ; preds = %6, %1
  %12 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %13 = load %"class.v8::internal::VirtualMemory"*, %"class.v8::internal::VirtualMemory"** %12, align 8
  store %"class.v8::internal::VirtualMemory"* null, %"class.v8::internal::VirtualMemory"** %12, align 8
  %14 = icmp eq %"class.v8::internal::VirtualMemory"* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %11
  tail call void @_ZN2v88internal13VirtualMemoryD1Ev(%"class.v8::internal::VirtualMemory"* nonnull %13) #6
  %16 = bitcast %"class.v8::internal::VirtualMemory"* %13 to i8*
  tail call void @_ZdlPv(i8* %16) #7
  br label %17

17:                                               ; preds = %11, %15
  %18 = bitcast %"class.v8::internal::AccountingAllocator"* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #7
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Segment"* @_ZN2v88internal19AccountingAllocator15AllocateSegmentEmb(%"class.v8::internal::AccountingAllocator"* nocapture, i64, i1 zeroext) local_unnamed_addr #1 align 2 {
  %4 = tail call i8* @_ZN2v88internal14AllocWithRetryEm(i64 %1) #6
  %5 = icmp eq i8* %4, null
  br i1 %5, label %24, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = atomicrmw add i64* %7, i64 %1 monotonic
  %9 = add i64 %8, %1
  %10 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i64, i64* %10 monotonic, align 8
  %12 = icmp ugt i64 %9, %11
  br i1 %12, label %13, label %20

13:                                               ; preds = %6, %17
  %14 = phi i64 [ %18, %17 ], [ %11, %6 ]
  %15 = cmpxchg weak i64* %10, i64 %14, i64 %9 monotonic monotonic
  %16 = extractvalue { i64, i1 } %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %13
  %18 = extractvalue { i64, i1 } %15, 0
  %19 = icmp ugt i64 %9, %18
  br i1 %19, label %13, label %20

20:                                               ; preds = %17, %13, %6
  %21 = bitcast i8* %4 to %"class.v8::internal::Segment"*
  %22 = getelementptr inbounds i8, i8* %4, i64 16
  %23 = bitcast i8* %22 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 16, i1 false) #6
  store i64 %1, i64* %23, align 8
  br label %24

24:                                               ; preds = %3, %20
  %25 = phi %"class.v8::internal::Segment"* [ %21, %20 ], [ null, %3 ]
  ret %"class.v8::internal::Segment"* %25
}

declare i8* @_ZN2v88internal14AllocWithRetryEm(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal19AccountingAllocator13ReturnSegmentEPNS0_7SegmentEb(%"class.v8::internal::AccountingAllocator"* nocapture, %"class.v8::internal::Segment"*, i1 zeroext) local_unnamed_addr #1 align 2 {
  tail call void @_ZN2v88internal7Segment11ZapContentsEv(%"class.v8::internal::Segment"* %1) #6
  %4 = getelementptr inbounds %"class.v8::internal::Segment", %"class.v8::internal::Segment"* %1, i64 0, i32 2
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.v8::internal::AccountingAllocator", %"class.v8::internal::AccountingAllocator"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw sub i64* %6, i64 %5 monotonic
  tail call void @_ZN2v88internal7Segment9ZapHeaderEv(%"class.v8::internal::Segment"* %1) #6
  %8 = bitcast %"class.v8::internal::Segment"* %1 to i8*
  tail call void @free(i8* %8) #6
  ret void
}

declare void @_ZN2v88internal7Segment11ZapContentsEv(%"class.v8::internal::Segment"*) local_unnamed_addr #3

declare void @_ZN2v88internal7Segment9ZapHeaderEv(%"class.v8::internal::Segment"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AccountingAllocator21TraceZoneCreationImplEPKNS0_4ZoneE(%"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Zone"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AccountingAllocator24TraceZoneDestructionImplEPKNS0_4ZoneE(%"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Zone"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal19AccountingAllocator24TraceAllocateSegmentImplEPNS0_7SegmentE(%"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN2v88internal13VirtualMemoryD1Ev(%"class.v8::internal::VirtualMemory"*) unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
