; ModuleID = '../../third_party/libaom/source/libaom/aom_dsp/x86/sad_highbd_avx2.c'
source_filename = "../../third_party/libaom/source/libaom/aom_dsp/x86/sad_highbd_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x4_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = shl nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, 3
  %15 = sext i32 %14 to i64
  %16 = sext i32 %3 to i64
  %17 = shl nsw i32 %3, 1
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %3, 3
  %20 = sext i32 %19 to i64
  %21 = inttoptr i64 %9 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 2
  %23 = getelementptr inbounds i16, i16* %10, i64 %11
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = getelementptr inbounds i16, i16* %10, i64 %13
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  %29 = getelementptr inbounds i16, i16* %10, i64 %15
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = inttoptr i64 %6 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 2
  %34 = getelementptr inbounds i16, i16* %7, i64 %16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 2
  %37 = getelementptr inbounds i16, i16* %7, i64 %18
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 2
  %40 = getelementptr inbounds i16, i16* %7, i64 %20
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 2
  %43 = sub <16 x i16> %22, %33
  %44 = sub <16 x i16> zeroinitializer, %43
  %45 = icmp slt <16 x i16> %43, zeroinitializer
  %46 = select <16 x i1> %45, <16 x i16> %44, <16 x i16> %43
  %47 = sub <16 x i16> %25, %36
  %48 = sub <16 x i16> zeroinitializer, %47
  %49 = icmp slt <16 x i16> %47, zeroinitializer
  %50 = select <16 x i1> %49, <16 x i16> %48, <16 x i16> %47
  %51 = sub <16 x i16> %28, %39
  %52 = sub <16 x i16> zeroinitializer, %51
  %53 = icmp slt <16 x i16> %51, zeroinitializer
  %54 = select <16 x i1> %53, <16 x i16> %52, <16 x i16> %51
  %55 = sub <16 x i16> %31, %42
  %56 = sub <16 x i16> zeroinitializer, %55
  %57 = icmp slt <16 x i16> %55, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i16> %56, <16 x i16> %55
  %59 = add <16 x i16> %50, %46
  %60 = add <16 x i16> %59, %54
  %61 = add <16 x i16> %60, %58
  %62 = shufflevector <16 x i16> %61, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %63 = shufflevector <16 x i16> %61, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %64 = bitcast <16 x i16> %62 to <8 x i32>
  %65 = bitcast <16 x i16> %63 to <8 x i32>
  %66 = add <8 x i32> %64, %65
  %67 = bitcast <8 x i32> %66 to <32 x i8>
  %68 = shufflevector <32 x i8> %67, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %69 = bitcast <32 x i8> %68 to <8 x i32>
  %70 = add <8 x i32> %66, %69
  %71 = bitcast <8 x i32> %70 to <4 x i64>
  %72 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %73 = shufflevector <4 x i64> %71, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %74 = bitcast <2 x i64> %72 to <4 x i32>
  %75 = bitcast <2 x i64> %73 to <4 x i32>
  %76 = add <4 x i32> %75, %74
  %77 = bitcast <4 x i32> %76 to <16 x i8>
  %78 = shufflevector <16 x i8> %77, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %79 = bitcast <16 x i8> %78 to <4 x i32>
  %80 = add <4 x i32> %76, %79
  %81 = extractelement <4 x i32> %80, i32 0
  ret i32 %81
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x8_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = shl nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, 3
  %15 = sext i32 %14 to i64
  %16 = sext i32 %3 to i64
  %17 = shl nsw i32 %3, 1
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %3, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = inttoptr i64 %9 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 2
  %27 = getelementptr inbounds i16, i16* %10, i64 %11
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 2
  %30 = getelementptr inbounds i16, i16* %10, i64 %13
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 2
  %33 = getelementptr inbounds i16, i16* %10, i64 %15
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = inttoptr i64 %6 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 2
  %38 = getelementptr inbounds i16, i16* %7, i64 %16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 2
  %41 = getelementptr inbounds i16, i16* %7, i64 %18
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 2
  %44 = getelementptr inbounds i16, i16* %7, i64 %20
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 2
  %47 = sub <16 x i16> %26, %37
  %48 = sub <16 x i16> zeroinitializer, %47
  %49 = icmp slt <16 x i16> %47, zeroinitializer
  %50 = select <16 x i1> %49, <16 x i16> %48, <16 x i16> %47
  %51 = sub <16 x i16> %29, %40
  %52 = sub <16 x i16> zeroinitializer, %51
  %53 = icmp slt <16 x i16> %51, zeroinitializer
  %54 = select <16 x i1> %53, <16 x i16> %52, <16 x i16> %51
  %55 = sub <16 x i16> %32, %43
  %56 = sub <16 x i16> zeroinitializer, %55
  %57 = icmp slt <16 x i16> %55, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i16> %56, <16 x i16> %55
  %59 = sub <16 x i16> %35, %46
  %60 = sub <16 x i16> zeroinitializer, %59
  %61 = icmp slt <16 x i16> %59, zeroinitializer
  %62 = select <16 x i1> %61, <16 x i16> %60, <16 x i16> %59
  %63 = add <16 x i16> %54, %50
  %64 = add <16 x i16> %63, %58
  %65 = add <16 x i16> %64, %62
  %66 = shufflevector <16 x i16> %65, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %67 = shufflevector <16 x i16> %65, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <16 x i16> %66 to <8 x i32>
  %69 = bitcast <16 x i16> %67 to <8 x i32>
  %70 = add <8 x i32> %68, %69
  %71 = getelementptr inbounds i16, i16* %10, i64 %22
  %72 = getelementptr inbounds i16, i16* %7, i64 %24
  %73 = bitcast i16* %71 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 2
  %75 = getelementptr inbounds i16, i16* %71, i64 %11
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 2
  %78 = getelementptr inbounds i16, i16* %71, i64 %13
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = getelementptr inbounds i16, i16* %71, i64 %15
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 2
  %84 = bitcast i16* %72 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 2
  %86 = getelementptr inbounds i16, i16* %72, i64 %16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 2
  %89 = getelementptr inbounds i16, i16* %72, i64 %18
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 2
  %92 = getelementptr inbounds i16, i16* %72, i64 %20
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 2
  %95 = sub <16 x i16> %74, %85
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %77, %88
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %80, %91
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %83, %94
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = add <16 x i16> %102, %98
  %112 = add <16 x i16> %111, %106
  %113 = add <16 x i16> %112, %110
  %114 = shufflevector <16 x i16> %113, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %115 = shufflevector <16 x i16> %113, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i16> %114 to <8 x i32>
  %117 = bitcast <16 x i16> %115 to <8 x i32>
  %118 = add <8 x i32> %70, %116
  %119 = add <8 x i32> %118, %117
  %120 = bitcast <8 x i32> %119 to <32 x i8>
  %121 = shufflevector <32 x i8> %120, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %122 = bitcast <32 x i8> %121 to <8 x i32>
  %123 = add <8 x i32> %119, %122
  %124 = bitcast <8 x i32> %123 to <4 x i64>
  %125 = shufflevector <4 x i64> %124, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %126 = shufflevector <4 x i64> %124, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %127 = bitcast <2 x i64> %125 to <4 x i32>
  %128 = bitcast <2 x i64> %126 to <4 x i32>
  %129 = add <4 x i32> %128, %127
  %130 = bitcast <4 x i32> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %132 = bitcast <16 x i8> %131 to <4 x i32>
  %133 = add <4 x i32> %129, %132
  %134 = extractelement <4 x i32> %133, i32 0
  ret i32 %134
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x16_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = shl nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, 3
  %15 = sext i32 %14 to i64
  %16 = sext i32 %3 to i64
  %17 = shl nsw i32 %3, 1
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %3, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = inttoptr i64 %9 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 2
  %27 = getelementptr inbounds i16, i16* %10, i64 %11
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 2
  %30 = getelementptr inbounds i16, i16* %10, i64 %13
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 2
  %33 = getelementptr inbounds i16, i16* %10, i64 %15
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = inttoptr i64 %6 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 2
  %38 = getelementptr inbounds i16, i16* %7, i64 %16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 2
  %41 = getelementptr inbounds i16, i16* %7, i64 %18
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 2
  %44 = getelementptr inbounds i16, i16* %7, i64 %20
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 2
  %47 = sub <16 x i16> %26, %37
  %48 = sub <16 x i16> zeroinitializer, %47
  %49 = icmp slt <16 x i16> %47, zeroinitializer
  %50 = select <16 x i1> %49, <16 x i16> %48, <16 x i16> %47
  %51 = sub <16 x i16> %29, %40
  %52 = sub <16 x i16> zeroinitializer, %51
  %53 = icmp slt <16 x i16> %51, zeroinitializer
  %54 = select <16 x i1> %53, <16 x i16> %52, <16 x i16> %51
  %55 = sub <16 x i16> %32, %43
  %56 = sub <16 x i16> zeroinitializer, %55
  %57 = icmp slt <16 x i16> %55, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i16> %56, <16 x i16> %55
  %59 = sub <16 x i16> %35, %46
  %60 = sub <16 x i16> zeroinitializer, %59
  %61 = icmp slt <16 x i16> %59, zeroinitializer
  %62 = select <16 x i1> %61, <16 x i16> %60, <16 x i16> %59
  %63 = add <16 x i16> %54, %50
  %64 = add <16 x i16> %63, %58
  %65 = add <16 x i16> %64, %62
  %66 = shufflevector <16 x i16> %65, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %67 = shufflevector <16 x i16> %65, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %68 = bitcast <16 x i16> %66 to <8 x i32>
  %69 = bitcast <16 x i16> %67 to <8 x i32>
  %70 = add <8 x i32> %68, %69
  %71 = getelementptr inbounds i16, i16* %10, i64 %22
  %72 = getelementptr inbounds i16, i16* %7, i64 %24
  %73 = bitcast i16* %71 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 2
  %75 = getelementptr inbounds i16, i16* %71, i64 %11
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 2
  %78 = getelementptr inbounds i16, i16* %71, i64 %13
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 2
  %81 = getelementptr inbounds i16, i16* %71, i64 %15
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 2
  %84 = bitcast i16* %72 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 2
  %86 = getelementptr inbounds i16, i16* %72, i64 %16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 2
  %89 = getelementptr inbounds i16, i16* %72, i64 %18
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 2
  %92 = getelementptr inbounds i16, i16* %72, i64 %20
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 2
  %95 = sub <16 x i16> %74, %85
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %77, %88
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %80, %91
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %83, %94
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = add <16 x i16> %102, %98
  %112 = add <16 x i16> %111, %106
  %113 = add <16 x i16> %112, %110
  %114 = shufflevector <16 x i16> %113, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %115 = shufflevector <16 x i16> %113, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i16> %114 to <8 x i32>
  %117 = bitcast <16 x i16> %115 to <8 x i32>
  %118 = add <8 x i32> %70, %116
  %119 = add <8 x i32> %118, %117
  %120 = getelementptr inbounds i16, i16* %71, i64 %22
  %121 = getelementptr inbounds i16, i16* %72, i64 %24
  %122 = bitcast i16* %120 to <16 x i16>*
  %123 = load <16 x i16>, <16 x i16>* %122, align 2
  %124 = getelementptr inbounds i16, i16* %120, i64 %11
  %125 = bitcast i16* %124 to <16 x i16>*
  %126 = load <16 x i16>, <16 x i16>* %125, align 2
  %127 = getelementptr inbounds i16, i16* %120, i64 %13
  %128 = bitcast i16* %127 to <16 x i16>*
  %129 = load <16 x i16>, <16 x i16>* %128, align 2
  %130 = getelementptr inbounds i16, i16* %120, i64 %15
  %131 = bitcast i16* %130 to <16 x i16>*
  %132 = load <16 x i16>, <16 x i16>* %131, align 2
  %133 = bitcast i16* %121 to <16 x i16>*
  %134 = load <16 x i16>, <16 x i16>* %133, align 2
  %135 = getelementptr inbounds i16, i16* %121, i64 %16
  %136 = bitcast i16* %135 to <16 x i16>*
  %137 = load <16 x i16>, <16 x i16>* %136, align 2
  %138 = getelementptr inbounds i16, i16* %121, i64 %18
  %139 = bitcast i16* %138 to <16 x i16>*
  %140 = load <16 x i16>, <16 x i16>* %139, align 2
  %141 = getelementptr inbounds i16, i16* %121, i64 %20
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 2
  %144 = sub <16 x i16> %123, %134
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = sub <16 x i16> %126, %137
  %149 = sub <16 x i16> zeroinitializer, %148
  %150 = icmp slt <16 x i16> %148, zeroinitializer
  %151 = select <16 x i1> %150, <16 x i16> %149, <16 x i16> %148
  %152 = sub <16 x i16> %129, %140
  %153 = sub <16 x i16> zeroinitializer, %152
  %154 = icmp slt <16 x i16> %152, zeroinitializer
  %155 = select <16 x i1> %154, <16 x i16> %153, <16 x i16> %152
  %156 = sub <16 x i16> %132, %143
  %157 = sub <16 x i16> zeroinitializer, %156
  %158 = icmp slt <16 x i16> %156, zeroinitializer
  %159 = select <16 x i1> %158, <16 x i16> %157, <16 x i16> %156
  %160 = add <16 x i16> %151, %147
  %161 = add <16 x i16> %160, %155
  %162 = add <16 x i16> %161, %159
  %163 = shufflevector <16 x i16> %162, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %164 = shufflevector <16 x i16> %162, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %165 = bitcast <16 x i16> %163 to <8 x i32>
  %166 = bitcast <16 x i16> %164 to <8 x i32>
  %167 = add <8 x i32> %119, %165
  %168 = add <8 x i32> %167, %166
  %169 = getelementptr inbounds i16, i16* %120, i64 %22
  %170 = getelementptr inbounds i16, i16* %121, i64 %24
  %171 = bitcast i16* %169 to <16 x i16>*
  %172 = load <16 x i16>, <16 x i16>* %171, align 2
  %173 = getelementptr inbounds i16, i16* %169, i64 %11
  %174 = bitcast i16* %173 to <16 x i16>*
  %175 = load <16 x i16>, <16 x i16>* %174, align 1
  %176 = getelementptr inbounds i16, i16* %169, i64 %13
  %177 = bitcast i16* %176 to <16 x i16>*
  %178 = load <16 x i16>, <16 x i16>* %177, align 1
  %179 = getelementptr inbounds i16, i16* %169, i64 %15
  %180 = bitcast i16* %179 to <16 x i16>*
  %181 = load <16 x i16>, <16 x i16>* %180, align 1
  %182 = bitcast i16* %170 to <16 x i16>*
  %183 = load <16 x i16>, <16 x i16>* %182, align 2
  %184 = getelementptr inbounds i16, i16* %170, i64 %16
  %185 = bitcast i16* %184 to <16 x i16>*
  %186 = load <16 x i16>, <16 x i16>* %185, align 1
  %187 = getelementptr inbounds i16, i16* %170, i64 %18
  %188 = bitcast i16* %187 to <16 x i16>*
  %189 = load <16 x i16>, <16 x i16>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %170, i64 %20
  %191 = bitcast i16* %190 to <16 x i16>*
  %192 = load <16 x i16>, <16 x i16>* %191, align 1
  %193 = sub <16 x i16> %172, %183
  %194 = sub <16 x i16> zeroinitializer, %193
  %195 = icmp slt <16 x i16> %193, zeroinitializer
  %196 = select <16 x i1> %195, <16 x i16> %194, <16 x i16> %193
  %197 = sub <16 x i16> %175, %186
  %198 = sub <16 x i16> zeroinitializer, %197
  %199 = icmp slt <16 x i16> %197, zeroinitializer
  %200 = select <16 x i1> %199, <16 x i16> %198, <16 x i16> %197
  %201 = sub <16 x i16> %178, %189
  %202 = sub <16 x i16> zeroinitializer, %201
  %203 = icmp slt <16 x i16> %201, zeroinitializer
  %204 = select <16 x i1> %203, <16 x i16> %202, <16 x i16> %201
  %205 = sub <16 x i16> %181, %192
  %206 = sub <16 x i16> zeroinitializer, %205
  %207 = icmp slt <16 x i16> %205, zeroinitializer
  %208 = select <16 x i1> %207, <16 x i16> %206, <16 x i16> %205
  %209 = add <16 x i16> %200, %196
  %210 = add <16 x i16> %209, %204
  %211 = add <16 x i16> %210, %208
  %212 = shufflevector <16 x i16> %211, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %213 = shufflevector <16 x i16> %211, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %214 = bitcast <16 x i16> %212 to <8 x i32>
  %215 = bitcast <16 x i16> %213 to <8 x i32>
  %216 = add <8 x i32> %168, %214
  %217 = add <8 x i32> %216, %215
  %218 = bitcast <8 x i32> %217 to <32 x i8>
  %219 = shufflevector <32 x i8> %218, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %220 = bitcast <32 x i8> %219 to <8 x i32>
  %221 = add <8 x i32> %217, %220
  %222 = bitcast <8 x i32> %221 to <4 x i64>
  %223 = shufflevector <4 x i64> %222, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %224 = shufflevector <4 x i64> %222, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %225 = bitcast <2 x i64> %223 to <4 x i32>
  %226 = bitcast <2 x i64> %224 to <4 x i32>
  %227 = add <4 x i32> %226, %225
  %228 = bitcast <4 x i32> %227 to <16 x i8>
  %229 = shufflevector <16 x i8> %228, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %230 = bitcast <16 x i8> %229 to <4 x i32>
  %231 = add <4 x i32> %227, %230
  %232 = extractelement <4 x i32> %231, i32 0
  ret i32 %232
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x32_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = shl nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, 3
  %15 = sext i32 %14 to i64
  %16 = sext i32 %3 to i64
  %17 = shl nsw i32 %3, 1
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %3, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i32 [ 0, %4 ], [ %79, %25 ]
  %27 = phi i16* [ %7, %4 ], [ %78, %25 ]
  %28 = phi i16* [ %10, %4 ], [ %77, %25 ]
  %29 = phi <8 x i32> [ zeroinitializer, %4 ], [ %76, %25 ]
  %30 = bitcast i16* %28 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %28, i64 %11
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %28, i64 %13
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %28, i64 %15
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = bitcast i16* %27 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %27, i64 %16
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %27, i64 %18
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %27, i64 %20
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = sub <16 x i16> %31, %42
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %34, %45
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %37, %48
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %40, %51
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = add <16 x i16> %59, %55
  %69 = add <16 x i16> %68, %63
  %70 = add <16 x i16> %69, %67
  %71 = shufflevector <16 x i16> %70, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %72 = shufflevector <16 x i16> %70, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i16> %71 to <8 x i32>
  %74 = bitcast <16 x i16> %72 to <8 x i32>
  %75 = add <8 x i32> %29, %73
  %76 = add <8 x i32> %75, %74
  %77 = getelementptr inbounds i16, i16* %28, i64 %22
  %78 = getelementptr inbounds i16, i16* %27, i64 %24
  %79 = add nuw nsw i32 %26, 4
  %80 = icmp ult i32 %79, 32
  br i1 %80, label %25, label %81

81:                                               ; preds = %25
  %82 = bitcast <8 x i32> %76 to <32 x i8>
  %83 = shufflevector <32 x i8> %82, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %84 = bitcast <32 x i8> %83 to <8 x i32>
  %85 = add <8 x i32> %76, %84
  %86 = bitcast <8 x i32> %85 to <4 x i64>
  %87 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %88 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %89 = bitcast <2 x i64> %87 to <4 x i32>
  %90 = bitcast <2 x i64> %88 to <4 x i32>
  %91 = add <4 x i32> %90, %89
  %92 = bitcast <4 x i32> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = add <4 x i32> %91, %94
  %96 = extractelement <4 x i32> %95, i32 0
  ret i32 %96
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = shl nsw i32 %1, 1
  %13 = sext i32 %12 to i64
  %14 = mul nsw i32 %1, 3
  %15 = sext i32 %14 to i64
  %16 = sext i32 %3 to i64
  %17 = shl nsw i32 %3, 1
  %18 = sext i32 %17 to i64
  %19 = mul nsw i32 %3, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %25, %4
  %26 = phi i32 [ 0, %4 ], [ %79, %25 ]
  %27 = phi i16* [ %7, %4 ], [ %78, %25 ]
  %28 = phi i16* [ %10, %4 ], [ %77, %25 ]
  %29 = phi <8 x i32> [ zeroinitializer, %4 ], [ %76, %25 ]
  %30 = bitcast i16* %28 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %28, i64 %11
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %28, i64 %13
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %28, i64 %15
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = bitcast i16* %27 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %27, i64 %16
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %27, i64 %18
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %27, i64 %20
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = sub <16 x i16> %31, %42
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %34, %45
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %37, %48
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %40, %51
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = add <16 x i16> %59, %55
  %69 = add <16 x i16> %68, %63
  %70 = add <16 x i16> %69, %67
  %71 = shufflevector <16 x i16> %70, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %72 = shufflevector <16 x i16> %70, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %73 = bitcast <16 x i16> %71 to <8 x i32>
  %74 = bitcast <16 x i16> %72 to <8 x i32>
  %75 = add <8 x i32> %29, %73
  %76 = add <8 x i32> %75, %74
  %77 = getelementptr inbounds i16, i16* %28, i64 %22
  %78 = getelementptr inbounds i16, i16* %27, i64 %24
  %79 = add nuw nsw i32 %26, 4
  %80 = icmp ult i32 %79, 64
  br i1 %80, label %25, label %81

81:                                               ; preds = %25
  %82 = bitcast <8 x i32> %76 to <32 x i8>
  %83 = shufflevector <32 x i8> %82, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %84 = bitcast <32 x i8> %83 to <8 x i32>
  %85 = add <8 x i32> %76, %84
  %86 = bitcast <8 x i32> %85 to <4 x i64>
  %87 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %88 = shufflevector <4 x i64> %86, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %89 = bitcast <2 x i64> %87 to <4 x i32>
  %90 = bitcast <2 x i64> %88 to <4 x i32>
  %91 = add <4 x i32> %90, %89
  %92 = bitcast <4 x i32> %91 to <16 x i8>
  %93 = shufflevector <16 x i8> %92, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %94 = bitcast <16 x i8> %93 to <4 x i32>
  %95 = add <4 x i32> %91, %94
  %96 = extractelement <4 x i32> %95, i32 0
  ret i32 %96
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x8_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 2
  %20 = sext i32 %19 to i64
  %21 = inttoptr i64 %9 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 2
  %23 = getelementptr inbounds i16, i16* %10, i64 16
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = getelementptr inbounds i16, i16* %10, i64 %11
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  %29 = getelementptr inbounds i16, i16* %26, i64 16
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = inttoptr i64 %6 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 2
  %34 = getelementptr inbounds i16, i16* %7, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 2
  %37 = getelementptr inbounds i16, i16* %7, i64 %12
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 2
  %40 = getelementptr inbounds i16, i16* %37, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 2
  %43 = sub <16 x i16> %22, %33
  %44 = sub <16 x i16> zeroinitializer, %43
  %45 = icmp slt <16 x i16> %43, zeroinitializer
  %46 = select <16 x i1> %45, <16 x i16> %44, <16 x i16> %43
  %47 = sub <16 x i16> %25, %36
  %48 = sub <16 x i16> zeroinitializer, %47
  %49 = icmp slt <16 x i16> %47, zeroinitializer
  %50 = select <16 x i1> %49, <16 x i16> %48, <16 x i16> %47
  %51 = sub <16 x i16> %28, %39
  %52 = sub <16 x i16> zeroinitializer, %51
  %53 = icmp slt <16 x i16> %51, zeroinitializer
  %54 = select <16 x i1> %53, <16 x i16> %52, <16 x i16> %51
  %55 = sub <16 x i16> %31, %42
  %56 = sub <16 x i16> zeroinitializer, %55
  %57 = icmp slt <16 x i16> %55, zeroinitializer
  %58 = select <16 x i1> %57, <16 x i16> %56, <16 x i16> %55
  %59 = add <16 x i16> %50, %46
  %60 = add <16 x i16> %59, %54
  %61 = add <16 x i16> %60, %58
  %62 = shufflevector <16 x i16> %61, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %63 = shufflevector <16 x i16> %61, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %64 = bitcast <16 x i16> %62 to <8 x i32>
  %65 = bitcast <16 x i16> %63 to <8 x i32>
  %66 = add <8 x i32> %64, %65
  %67 = getelementptr inbounds i16, i16* %10, i64 %14
  %68 = getelementptr inbounds i16, i16* %7, i64 %16
  %69 = bitcast i16* %67 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 2
  %71 = getelementptr inbounds i16, i16* %67, i64 16
  %72 = bitcast i16* %71 to <16 x i16>*
  %73 = load <16 x i16>, <16 x i16>* %72, align 2
  %74 = getelementptr inbounds i16, i16* %67, i64 %11
  %75 = bitcast i16* %74 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 2
  %77 = getelementptr inbounds i16, i16* %74, i64 16
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 2
  %80 = bitcast i16* %68 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 2
  %82 = getelementptr inbounds i16, i16* %68, i64 16
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 2
  %85 = getelementptr inbounds i16, i16* %68, i64 %12
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %85, i64 16
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 2
  %91 = sub <16 x i16> %70, %81
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = sub <16 x i16> %73, %84
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %76, %87
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %79, %90
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = add <16 x i16> %98, %94
  %108 = add <16 x i16> %107, %102
  %109 = add <16 x i16> %108, %106
  %110 = shufflevector <16 x i16> %109, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %111 = shufflevector <16 x i16> %109, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = bitcast <16 x i16> %110 to <8 x i32>
  %113 = bitcast <16 x i16> %111 to <8 x i32>
  %114 = add <8 x i32> %66, %112
  %115 = add <8 x i32> %114, %113
  %116 = getelementptr inbounds i16, i16* %10, i64 %18
  %117 = getelementptr inbounds i16, i16* %7, i64 %20
  %118 = bitcast i16* %116 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 2
  %120 = getelementptr inbounds i16, i16* %116, i64 16
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 2
  %123 = getelementptr inbounds i16, i16* %116, i64 %11
  %124 = bitcast i16* %123 to <16 x i16>*
  %125 = load <16 x i16>, <16 x i16>* %124, align 2
  %126 = getelementptr inbounds i16, i16* %123, i64 16
  %127 = bitcast i16* %126 to <16 x i16>*
  %128 = load <16 x i16>, <16 x i16>* %127, align 2
  %129 = bitcast i16* %117 to <16 x i16>*
  %130 = load <16 x i16>, <16 x i16>* %129, align 2
  %131 = getelementptr inbounds i16, i16* %117, i64 16
  %132 = bitcast i16* %131 to <16 x i16>*
  %133 = load <16 x i16>, <16 x i16>* %132, align 2
  %134 = getelementptr inbounds i16, i16* %117, i64 %12
  %135 = bitcast i16* %134 to <16 x i16>*
  %136 = load <16 x i16>, <16 x i16>* %135, align 2
  %137 = getelementptr inbounds i16, i16* %134, i64 16
  %138 = bitcast i16* %137 to <16 x i16>*
  %139 = load <16 x i16>, <16 x i16>* %138, align 2
  %140 = sub <16 x i16> %119, %130
  %141 = sub <16 x i16> zeroinitializer, %140
  %142 = icmp slt <16 x i16> %140, zeroinitializer
  %143 = select <16 x i1> %142, <16 x i16> %141, <16 x i16> %140
  %144 = sub <16 x i16> %122, %133
  %145 = sub <16 x i16> zeroinitializer, %144
  %146 = icmp slt <16 x i16> %144, zeroinitializer
  %147 = select <16 x i1> %146, <16 x i16> %145, <16 x i16> %144
  %148 = sub <16 x i16> %125, %136
  %149 = sub <16 x i16> zeroinitializer, %148
  %150 = icmp slt <16 x i16> %148, zeroinitializer
  %151 = select <16 x i1> %150, <16 x i16> %149, <16 x i16> %148
  %152 = sub <16 x i16> %128, %139
  %153 = sub <16 x i16> zeroinitializer, %152
  %154 = icmp slt <16 x i16> %152, zeroinitializer
  %155 = select <16 x i1> %154, <16 x i16> %153, <16 x i16> %152
  %156 = add <16 x i16> %147, %143
  %157 = add <16 x i16> %156, %151
  %158 = add <16 x i16> %157, %155
  %159 = shufflevector <16 x i16> %158, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %160 = shufflevector <16 x i16> %158, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = bitcast <16 x i16> %159 to <8 x i32>
  %162 = bitcast <16 x i16> %160 to <8 x i32>
  %163 = add <8 x i32> %115, %161
  %164 = add <8 x i32> %163, %162
  %165 = getelementptr inbounds i16, i16* %116, i64 %14
  %166 = getelementptr inbounds i16, i16* %117, i64 %16
  %167 = bitcast i16* %165 to <16 x i16>*
  %168 = load <16 x i16>, <16 x i16>* %167, align 2
  %169 = getelementptr inbounds i16, i16* %165, i64 16
  %170 = bitcast i16* %169 to <16 x i16>*
  %171 = load <16 x i16>, <16 x i16>* %170, align 2
  %172 = getelementptr inbounds i16, i16* %165, i64 %11
  %173 = bitcast i16* %172 to <16 x i16>*
  %174 = load <16 x i16>, <16 x i16>* %173, align 2
  %175 = getelementptr inbounds i16, i16* %172, i64 16
  %176 = bitcast i16* %175 to <16 x i16>*
  %177 = load <16 x i16>, <16 x i16>* %176, align 1
  %178 = bitcast i16* %166 to <16 x i16>*
  %179 = load <16 x i16>, <16 x i16>* %178, align 2
  %180 = getelementptr inbounds i16, i16* %166, i64 16
  %181 = bitcast i16* %180 to <16 x i16>*
  %182 = load <16 x i16>, <16 x i16>* %181, align 2
  %183 = getelementptr inbounds i16, i16* %166, i64 %12
  %184 = bitcast i16* %183 to <16 x i16>*
  %185 = load <16 x i16>, <16 x i16>* %184, align 2
  %186 = getelementptr inbounds i16, i16* %183, i64 16
  %187 = bitcast i16* %186 to <16 x i16>*
  %188 = load <16 x i16>, <16 x i16>* %187, align 1
  %189 = sub <16 x i16> %168, %179
  %190 = sub <16 x i16> zeroinitializer, %189
  %191 = icmp slt <16 x i16> %189, zeroinitializer
  %192 = select <16 x i1> %191, <16 x i16> %190, <16 x i16> %189
  %193 = sub <16 x i16> %171, %182
  %194 = sub <16 x i16> zeroinitializer, %193
  %195 = icmp slt <16 x i16> %193, zeroinitializer
  %196 = select <16 x i1> %195, <16 x i16> %194, <16 x i16> %193
  %197 = sub <16 x i16> %174, %185
  %198 = sub <16 x i16> zeroinitializer, %197
  %199 = icmp slt <16 x i16> %197, zeroinitializer
  %200 = select <16 x i1> %199, <16 x i16> %198, <16 x i16> %197
  %201 = sub <16 x i16> %177, %188
  %202 = sub <16 x i16> zeroinitializer, %201
  %203 = icmp slt <16 x i16> %201, zeroinitializer
  %204 = select <16 x i1> %203, <16 x i16> %202, <16 x i16> %201
  %205 = add <16 x i16> %196, %192
  %206 = add <16 x i16> %205, %200
  %207 = add <16 x i16> %206, %204
  %208 = shufflevector <16 x i16> %207, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %209 = shufflevector <16 x i16> %207, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %210 = bitcast <16 x i16> %208 to <8 x i32>
  %211 = bitcast <16 x i16> %209 to <8 x i32>
  %212 = add <8 x i32> %164, %210
  %213 = add <8 x i32> %212, %211
  %214 = bitcast <8 x i32> %213 to <32 x i8>
  %215 = shufflevector <32 x i8> %214, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %216 = bitcast <32 x i8> %215 to <8 x i32>
  %217 = add <8 x i32> %213, %216
  %218 = bitcast <8 x i32> %217 to <4 x i64>
  %219 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %220 = shufflevector <4 x i64> %218, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %221 = bitcast <2 x i64> %219 to <4 x i32>
  %222 = bitcast <2 x i64> %220 to <4 x i32>
  %223 = add <4 x i32> %222, %221
  %224 = bitcast <4 x i32> %223 to <16 x i8>
  %225 = shufflevector <16 x i8> %224, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %226 = bitcast <16 x i8> %225 to <4 x i32>
  %227 = add <4 x i32> %223, %226
  %228 = extractelement <4 x i32> %227, i32 0
  ret i32 %228
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x16_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 2
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %4
  %22 = phi i32 [ 0, %4 ], [ %124, %21 ]
  %23 = phi i16* [ %10, %4 ], [ %122, %21 ]
  %24 = phi i16* [ %7, %4 ], [ %123, %21 ]
  %25 = phi <8 x i32> [ zeroinitializer, %4 ], [ %121, %21 ]
  %26 = bitcast i16* %23 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %23, i64 16
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %23, i64 %11
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %31, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = bitcast i16* %24 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %24, i64 16
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %24, i64 %12
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %42, i64 16
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = sub <16 x i16> %27, %38
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %30, %41
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %33, %44
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %36, %47
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = add <16 x i16> %55, %51
  %65 = add <16 x i16> %64, %59
  %66 = add <16 x i16> %65, %63
  %67 = shufflevector <16 x i16> %66, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %68 = shufflevector <16 x i16> %66, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %69 = bitcast <16 x i16> %67 to <8 x i32>
  %70 = bitcast <16 x i16> %68 to <8 x i32>
  %71 = add <8 x i32> %25, %69
  %72 = add <8 x i32> %71, %70
  %73 = getelementptr inbounds i16, i16* %23, i64 %14
  %74 = getelementptr inbounds i16, i16* %24, i64 %16
  %75 = bitcast i16* %73 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 1
  %77 = getelementptr inbounds i16, i16* %73, i64 16
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %73, i64 %11
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %80, i64 16
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = bitcast i16* %74 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %74, i64 16
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %74, i64 %12
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %91, i64 16
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = sub <16 x i16> %76, %87
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %79, %90
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %82, %93
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %85, %96
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = add <16 x i16> %104, %100
  %114 = add <16 x i16> %113, %108
  %115 = add <16 x i16> %114, %112
  %116 = shufflevector <16 x i16> %115, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %115, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i16> %116 to <8 x i32>
  %119 = bitcast <16 x i16> %117 to <8 x i32>
  %120 = add <8 x i32> %72, %118
  %121 = add <8 x i32> %120, %119
  %122 = getelementptr inbounds i16, i16* %23, i64 %18
  %123 = getelementptr inbounds i16, i16* %24, i64 %20
  %124 = add nuw nsw i32 %22, 4
  %125 = icmp ult i32 %124, 16
  br i1 %125, label %21, label %126

126:                                              ; preds = %21
  %127 = bitcast <8 x i32> %121 to <32 x i8>
  %128 = shufflevector <32 x i8> %127, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %129 = bitcast <32 x i8> %128 to <8 x i32>
  %130 = add <8 x i32> %121, %129
  %131 = bitcast <8 x i32> %130 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = bitcast <2 x i64> %132 to <4 x i32>
  %135 = bitcast <2 x i64> %133 to <4 x i32>
  %136 = add <4 x i32> %135, %134
  %137 = bitcast <4 x i32> %136 to <16 x i8>
  %138 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = bitcast <16 x i8> %138 to <4 x i32>
  %140 = add <4 x i32> %136, %139
  %141 = extractelement <4 x i32> %140, i32 0
  ret i32 %141
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x32_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 2
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %4
  %22 = phi i32 [ 0, %4 ], [ %124, %21 ]
  %23 = phi i16* [ %10, %4 ], [ %122, %21 ]
  %24 = phi i16* [ %7, %4 ], [ %123, %21 ]
  %25 = phi <8 x i32> [ zeroinitializer, %4 ], [ %121, %21 ]
  %26 = bitcast i16* %23 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %23, i64 16
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %23, i64 %11
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %31, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = bitcast i16* %24 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %24, i64 16
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %24, i64 %12
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %42, i64 16
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = sub <16 x i16> %27, %38
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %30, %41
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %33, %44
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %36, %47
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = add <16 x i16> %55, %51
  %65 = add <16 x i16> %64, %59
  %66 = add <16 x i16> %65, %63
  %67 = shufflevector <16 x i16> %66, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %68 = shufflevector <16 x i16> %66, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %69 = bitcast <16 x i16> %67 to <8 x i32>
  %70 = bitcast <16 x i16> %68 to <8 x i32>
  %71 = add <8 x i32> %25, %69
  %72 = add <8 x i32> %71, %70
  %73 = getelementptr inbounds i16, i16* %23, i64 %14
  %74 = getelementptr inbounds i16, i16* %24, i64 %16
  %75 = bitcast i16* %73 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 1
  %77 = getelementptr inbounds i16, i16* %73, i64 16
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %73, i64 %11
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %80, i64 16
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = bitcast i16* %74 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %74, i64 16
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %74, i64 %12
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %91, i64 16
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = sub <16 x i16> %76, %87
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %79, %90
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %82, %93
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %85, %96
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = add <16 x i16> %104, %100
  %114 = add <16 x i16> %113, %108
  %115 = add <16 x i16> %114, %112
  %116 = shufflevector <16 x i16> %115, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %115, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i16> %116 to <8 x i32>
  %119 = bitcast <16 x i16> %117 to <8 x i32>
  %120 = add <8 x i32> %72, %118
  %121 = add <8 x i32> %120, %119
  %122 = getelementptr inbounds i16, i16* %23, i64 %18
  %123 = getelementptr inbounds i16, i16* %24, i64 %20
  %124 = add nuw nsw i32 %22, 4
  %125 = icmp ult i32 %124, 32
  br i1 %125, label %21, label %126

126:                                              ; preds = %21
  %127 = bitcast <8 x i32> %121 to <32 x i8>
  %128 = shufflevector <32 x i8> %127, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %129 = bitcast <32 x i8> %128 to <8 x i32>
  %130 = add <8 x i32> %121, %129
  %131 = bitcast <8 x i32> %130 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = bitcast <2 x i64> %132 to <4 x i32>
  %135 = bitcast <2 x i64> %133 to <4 x i32>
  %136 = add <4 x i32> %135, %134
  %137 = bitcast <4 x i32> %136 to <16 x i8>
  %138 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = bitcast <16 x i8> %138 to <4 x i32>
  %140 = add <4 x i32> %136, %139
  %141 = extractelement <4 x i32> %140, i32 0
  ret i32 %141
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  %17 = shl i32 %1, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 2
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %21, %4
  %22 = phi i32 [ 0, %4 ], [ %124, %21 ]
  %23 = phi i16* [ %10, %4 ], [ %122, %21 ]
  %24 = phi i16* [ %7, %4 ], [ %123, %21 ]
  %25 = phi <8 x i32> [ zeroinitializer, %4 ], [ %121, %21 ]
  %26 = bitcast i16* %23 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %23, i64 16
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %23, i64 %11
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %31, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = bitcast i16* %24 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %24, i64 16
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %24, i64 %12
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %42, i64 16
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = sub <16 x i16> %27, %38
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %30, %41
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %33, %44
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %36, %47
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = add <16 x i16> %55, %51
  %65 = add <16 x i16> %64, %59
  %66 = add <16 x i16> %65, %63
  %67 = shufflevector <16 x i16> %66, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %68 = shufflevector <16 x i16> %66, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %69 = bitcast <16 x i16> %67 to <8 x i32>
  %70 = bitcast <16 x i16> %68 to <8 x i32>
  %71 = add <8 x i32> %25, %69
  %72 = add <8 x i32> %71, %70
  %73 = getelementptr inbounds i16, i16* %23, i64 %14
  %74 = getelementptr inbounds i16, i16* %24, i64 %16
  %75 = bitcast i16* %73 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 1
  %77 = getelementptr inbounds i16, i16* %73, i64 16
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %73, i64 %11
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %80, i64 16
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = bitcast i16* %74 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %74, i64 16
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %74, i64 %12
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %91, i64 16
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = sub <16 x i16> %76, %87
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %79, %90
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %82, %93
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %85, %96
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = add <16 x i16> %104, %100
  %114 = add <16 x i16> %113, %108
  %115 = add <16 x i16> %114, %112
  %116 = shufflevector <16 x i16> %115, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %115, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i16> %116 to <8 x i32>
  %119 = bitcast <16 x i16> %117 to <8 x i32>
  %120 = add <8 x i32> %72, %118
  %121 = add <8 x i32> %120, %119
  %122 = getelementptr inbounds i16, i16* %23, i64 %18
  %123 = getelementptr inbounds i16, i16* %24, i64 %20
  %124 = add nuw nsw i32 %22, 4
  %125 = icmp ult i32 %124, 64
  br i1 %125, label %21, label %126

126:                                              ; preds = %21
  %127 = bitcast <8 x i32> %121 to <32 x i8>
  %128 = shufflevector <32 x i8> %127, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %129 = bitcast <32 x i8> %128 to <8 x i32>
  %130 = add <8 x i32> %121, %129
  %131 = bitcast <8 x i32> %130 to <4 x i64>
  %132 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %133 = shufflevector <4 x i64> %131, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %134 = bitcast <2 x i64> %132 to <4 x i32>
  %135 = bitcast <2 x i64> %133 to <4 x i32>
  %136 = add <4 x i32> %135, %134
  %137 = bitcast <4 x i32> %136 to <16 x i8>
  %138 = shufflevector <16 x i8> %137, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %139 = bitcast <16 x i8> %138 to <4 x i32>
  %140 = add <4 x i32> %136, %139
  %141 = extractelement <4 x i32> %140, i32 0
  ret i32 %141
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x16_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i32 [ 0, %4 ], [ %120, %17 ]
  %19 = phi i16* [ %10, %4 ], [ %118, %17 ]
  %20 = phi i16* [ %7, %4 ], [ %119, %17 ]
  %21 = phi <8 x i32> [ zeroinitializer, %4 ], [ %117, %17 ]
  %22 = bitcast i16* %19 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 1
  %24 = getelementptr inbounds i16, i16* %19, i64 16
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %19, i64 32
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %19, i64 48
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = bitcast i16* %20 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %20, i64 16
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %20, i64 32
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %20, i64 48
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = sub <16 x i16> %23, %34
  %45 = sub <16 x i16> zeroinitializer, %44
  %46 = icmp slt <16 x i16> %44, zeroinitializer
  %47 = select <16 x i1> %46, <16 x i16> %45, <16 x i16> %44
  %48 = sub <16 x i16> %26, %37
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %29, %40
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %32, %43
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = add <16 x i16> %51, %47
  %61 = add <16 x i16> %60, %55
  %62 = add <16 x i16> %61, %59
  %63 = shufflevector <16 x i16> %62, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %64 = shufflevector <16 x i16> %62, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i16> %63 to <8 x i32>
  %66 = bitcast <16 x i16> %64 to <8 x i32>
  %67 = add <8 x i32> %21, %65
  %68 = add <8 x i32> %67, %66
  %69 = getelementptr inbounds i16, i16* %19, i64 %11
  %70 = getelementptr inbounds i16, i16* %20, i64 %12
  %71 = bitcast i16* %69 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 1
  %73 = getelementptr inbounds i16, i16* %69, i64 16
  %74 = bitcast i16* %73 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %69, i64 32
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %69, i64 48
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = bitcast i16* %70 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %70, i64 16
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %70, i64 32
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %70, i64 48
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = sub <16 x i16> %72, %83
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %75, %86
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %78, %89
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %81, %92
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = add <16 x i16> %100, %96
  %110 = add <16 x i16> %109, %104
  %111 = add <16 x i16> %110, %108
  %112 = shufflevector <16 x i16> %111, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %113 = shufflevector <16 x i16> %111, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i16> %112 to <8 x i32>
  %115 = bitcast <16 x i16> %113 to <8 x i32>
  %116 = add <8 x i32> %68, %114
  %117 = add <8 x i32> %116, %115
  %118 = getelementptr inbounds i16, i16* %19, i64 %14
  %119 = getelementptr inbounds i16, i16* %20, i64 %16
  %120 = add nuw nsw i32 %18, 2
  %121 = icmp ult i32 %120, 16
  br i1 %121, label %17, label %122

122:                                              ; preds = %17
  %123 = bitcast <8 x i32> %117 to <32 x i8>
  %124 = shufflevector <32 x i8> %123, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %125 = bitcast <32 x i8> %124 to <8 x i32>
  %126 = add <8 x i32> %117, %125
  %127 = bitcast <8 x i32> %126 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = bitcast <2 x i64> %128 to <4 x i32>
  %131 = bitcast <2 x i64> %129 to <4 x i32>
  %132 = add <4 x i32> %131, %130
  %133 = bitcast <4 x i32> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <4 x i32>
  %136 = add <4 x i32> %132, %135
  %137 = extractelement <4 x i32> %136, i32 0
  ret i32 %137
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x32_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i32 [ 0, %4 ], [ %120, %17 ]
  %19 = phi i16* [ %10, %4 ], [ %118, %17 ]
  %20 = phi i16* [ %7, %4 ], [ %119, %17 ]
  %21 = phi <8 x i32> [ zeroinitializer, %4 ], [ %117, %17 ]
  %22 = bitcast i16* %19 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 1
  %24 = getelementptr inbounds i16, i16* %19, i64 16
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %19, i64 32
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %19, i64 48
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = bitcast i16* %20 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %20, i64 16
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %20, i64 32
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %20, i64 48
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = sub <16 x i16> %23, %34
  %45 = sub <16 x i16> zeroinitializer, %44
  %46 = icmp slt <16 x i16> %44, zeroinitializer
  %47 = select <16 x i1> %46, <16 x i16> %45, <16 x i16> %44
  %48 = sub <16 x i16> %26, %37
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %29, %40
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %32, %43
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = add <16 x i16> %51, %47
  %61 = add <16 x i16> %60, %55
  %62 = add <16 x i16> %61, %59
  %63 = shufflevector <16 x i16> %62, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %64 = shufflevector <16 x i16> %62, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i16> %63 to <8 x i32>
  %66 = bitcast <16 x i16> %64 to <8 x i32>
  %67 = add <8 x i32> %21, %65
  %68 = add <8 x i32> %67, %66
  %69 = getelementptr inbounds i16, i16* %19, i64 %11
  %70 = getelementptr inbounds i16, i16* %20, i64 %12
  %71 = bitcast i16* %69 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 1
  %73 = getelementptr inbounds i16, i16* %69, i64 16
  %74 = bitcast i16* %73 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %69, i64 32
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %69, i64 48
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = bitcast i16* %70 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %70, i64 16
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %70, i64 32
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %70, i64 48
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = sub <16 x i16> %72, %83
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %75, %86
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %78, %89
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %81, %92
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = add <16 x i16> %100, %96
  %110 = add <16 x i16> %109, %104
  %111 = add <16 x i16> %110, %108
  %112 = shufflevector <16 x i16> %111, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %113 = shufflevector <16 x i16> %111, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i16> %112 to <8 x i32>
  %115 = bitcast <16 x i16> %113 to <8 x i32>
  %116 = add <8 x i32> %68, %114
  %117 = add <8 x i32> %116, %115
  %118 = getelementptr inbounds i16, i16* %19, i64 %14
  %119 = getelementptr inbounds i16, i16* %20, i64 %16
  %120 = add nuw nsw i32 %18, 2
  %121 = icmp ult i32 %120, 32
  br i1 %121, label %17, label %122

122:                                              ; preds = %17
  %123 = bitcast <8 x i32> %117 to <32 x i8>
  %124 = shufflevector <32 x i8> %123, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %125 = bitcast <32 x i8> %124 to <8 x i32>
  %126 = add <8 x i32> %117, %125
  %127 = bitcast <8 x i32> %126 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = bitcast <2 x i64> %128 to <4 x i32>
  %131 = bitcast <2 x i64> %129 to <4 x i32>
  %132 = add <4 x i32> %131, %130
  %133 = bitcast <4 x i32> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <4 x i32>
  %136 = add <4 x i32> %132, %135
  %137 = extractelement <4 x i32> %136, i32 0
  ret i32 %137
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i32 [ 0, %4 ], [ %120, %17 ]
  %19 = phi i16* [ %10, %4 ], [ %118, %17 ]
  %20 = phi i16* [ %7, %4 ], [ %119, %17 ]
  %21 = phi <8 x i32> [ zeroinitializer, %4 ], [ %117, %17 ]
  %22 = bitcast i16* %19 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 1
  %24 = getelementptr inbounds i16, i16* %19, i64 16
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %19, i64 32
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %19, i64 48
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = bitcast i16* %20 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %20, i64 16
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %20, i64 32
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %20, i64 48
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = sub <16 x i16> %23, %34
  %45 = sub <16 x i16> zeroinitializer, %44
  %46 = icmp slt <16 x i16> %44, zeroinitializer
  %47 = select <16 x i1> %46, <16 x i16> %45, <16 x i16> %44
  %48 = sub <16 x i16> %26, %37
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %29, %40
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %32, %43
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = add <16 x i16> %51, %47
  %61 = add <16 x i16> %60, %55
  %62 = add <16 x i16> %61, %59
  %63 = shufflevector <16 x i16> %62, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %64 = shufflevector <16 x i16> %62, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i16> %63 to <8 x i32>
  %66 = bitcast <16 x i16> %64 to <8 x i32>
  %67 = add <8 x i32> %21, %65
  %68 = add <8 x i32> %67, %66
  %69 = getelementptr inbounds i16, i16* %19, i64 %11
  %70 = getelementptr inbounds i16, i16* %20, i64 %12
  %71 = bitcast i16* %69 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 1
  %73 = getelementptr inbounds i16, i16* %69, i64 16
  %74 = bitcast i16* %73 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %69, i64 32
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %69, i64 48
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = bitcast i16* %70 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %70, i64 16
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %70, i64 32
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %70, i64 48
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = sub <16 x i16> %72, %83
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %75, %86
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %78, %89
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %81, %92
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = add <16 x i16> %100, %96
  %110 = add <16 x i16> %109, %104
  %111 = add <16 x i16> %110, %108
  %112 = shufflevector <16 x i16> %111, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %113 = shufflevector <16 x i16> %111, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i16> %112 to <8 x i32>
  %115 = bitcast <16 x i16> %113 to <8 x i32>
  %116 = add <8 x i32> %68, %114
  %117 = add <8 x i32> %116, %115
  %118 = getelementptr inbounds i16, i16* %19, i64 %14
  %119 = getelementptr inbounds i16, i16* %20, i64 %16
  %120 = add nuw nsw i32 %18, 2
  %121 = icmp ult i32 %120, 64
  br i1 %121, label %17, label %122

122:                                              ; preds = %17
  %123 = bitcast <8 x i32> %117 to <32 x i8>
  %124 = shufflevector <32 x i8> %123, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %125 = bitcast <32 x i8> %124 to <8 x i32>
  %126 = add <8 x i32> %117, %125
  %127 = bitcast <8 x i32> %126 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = bitcast <2 x i64> %128 to <4 x i32>
  %131 = bitcast <2 x i64> %129 to <4 x i32>
  %132 = add <4 x i32> %131, %130
  %133 = bitcast <4 x i32> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <4 x i32>
  %136 = add <4 x i32> %132, %135
  %137 = extractelement <4 x i32> %136, i32 0
  ret i32 %137
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x128_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  %13 = shl i32 %1, 1
  %14 = sext i32 %13 to i64
  %15 = shl i32 %3, 1
  %16 = sext i32 %15 to i64
  br label %17

17:                                               ; preds = %17, %4
  %18 = phi i32 [ 0, %4 ], [ %120, %17 ]
  %19 = phi i16* [ %10, %4 ], [ %118, %17 ]
  %20 = phi i16* [ %7, %4 ], [ %119, %17 ]
  %21 = phi <8 x i32> [ zeroinitializer, %4 ], [ %117, %17 ]
  %22 = bitcast i16* %19 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 1
  %24 = getelementptr inbounds i16, i16* %19, i64 16
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 1
  %27 = getelementptr inbounds i16, i16* %19, i64 32
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %19, i64 48
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = bitcast i16* %20 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %20, i64 16
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %20, i64 32
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %20, i64 48
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = sub <16 x i16> %23, %34
  %45 = sub <16 x i16> zeroinitializer, %44
  %46 = icmp slt <16 x i16> %44, zeroinitializer
  %47 = select <16 x i1> %46, <16 x i16> %45, <16 x i16> %44
  %48 = sub <16 x i16> %26, %37
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %29, %40
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = sub <16 x i16> %32, %43
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = add <16 x i16> %51, %47
  %61 = add <16 x i16> %60, %55
  %62 = add <16 x i16> %61, %59
  %63 = shufflevector <16 x i16> %62, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %64 = shufflevector <16 x i16> %62, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %65 = bitcast <16 x i16> %63 to <8 x i32>
  %66 = bitcast <16 x i16> %64 to <8 x i32>
  %67 = add <8 x i32> %21, %65
  %68 = add <8 x i32> %67, %66
  %69 = getelementptr inbounds i16, i16* %19, i64 %11
  %70 = getelementptr inbounds i16, i16* %20, i64 %12
  %71 = bitcast i16* %69 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 1
  %73 = getelementptr inbounds i16, i16* %69, i64 16
  %74 = bitcast i16* %73 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %69, i64 32
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %69, i64 48
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = bitcast i16* %70 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %70, i64 16
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %70, i64 32
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %70, i64 48
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = sub <16 x i16> %72, %83
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %75, %86
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %78, %89
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %81, %92
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = add <16 x i16> %100, %96
  %110 = add <16 x i16> %109, %104
  %111 = add <16 x i16> %110, %108
  %112 = shufflevector <16 x i16> %111, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %113 = shufflevector <16 x i16> %111, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i16> %112 to <8 x i32>
  %115 = bitcast <16 x i16> %113 to <8 x i32>
  %116 = add <8 x i32> %68, %114
  %117 = add <8 x i32> %116, %115
  %118 = getelementptr inbounds i16, i16* %19, i64 %14
  %119 = getelementptr inbounds i16, i16* %20, i64 %16
  %120 = add nuw nsw i32 %18, 2
  %121 = icmp ult i32 %120, 128
  br i1 %121, label %17, label %122

122:                                              ; preds = %17
  %123 = bitcast <8 x i32> %117 to <32 x i8>
  %124 = shufflevector <32 x i8> %123, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %125 = bitcast <32 x i8> %124 to <8 x i32>
  %126 = add <8 x i32> %117, %125
  %127 = bitcast <8 x i32> %126 to <4 x i64>
  %128 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %129 = shufflevector <4 x i64> %127, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %130 = bitcast <2 x i64> %128 to <4 x i32>
  %131 = bitcast <2 x i64> %129 to <4 x i32>
  %132 = add <4 x i32> %131, %130
  %133 = bitcast <4 x i32> %132 to <16 x i8>
  %134 = shufflevector <16 x i8> %133, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %135 = bitcast <16 x i8> %134 to <4 x i32>
  %136 = add <4 x i32> %132, %135
  %137 = extractelement <4 x i32> %136, i32 0
  ret i32 %137
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad128x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i32 [ 0, %4 ], [ %116, %13 ]
  %15 = phi i16* [ %7, %4 ], [ %115, %13 ]
  %16 = phi i16* [ %10, %4 ], [ %114, %13 ]
  %17 = phi <8 x i32> [ zeroinitializer, %4 ], [ %113, %13 ]
  %18 = bitcast i16* %16 to <16 x i16>*
  %19 = load <16 x i16>, <16 x i16>* %18, align 1
  %20 = getelementptr inbounds i16, i16* %16, i64 16
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 1
  %23 = getelementptr inbounds i16, i16* %16, i64 32
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %16, i64 48
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = bitcast i16* %15 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %15, i64 16
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %15, i64 32
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %15, i64 48
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = sub <16 x i16> %19, %30
  %41 = sub <16 x i16> zeroinitializer, %40
  %42 = icmp slt <16 x i16> %40, zeroinitializer
  %43 = select <16 x i1> %42, <16 x i16> %41, <16 x i16> %40
  %44 = sub <16 x i16> %22, %33
  %45 = sub <16 x i16> zeroinitializer, %44
  %46 = icmp slt <16 x i16> %44, zeroinitializer
  %47 = select <16 x i1> %46, <16 x i16> %45, <16 x i16> %44
  %48 = sub <16 x i16> %25, %36
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %28, %39
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = add <16 x i16> %47, %43
  %57 = add <16 x i16> %56, %51
  %58 = add <16 x i16> %57, %55
  %59 = shufflevector <16 x i16> %58, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %60 = shufflevector <16 x i16> %58, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %61 = bitcast <16 x i16> %59 to <8 x i32>
  %62 = bitcast <16 x i16> %60 to <8 x i32>
  %63 = add <8 x i32> %17, %61
  %64 = add <8 x i32> %63, %62
  %65 = getelementptr inbounds i16, i16* %16, i64 64
  %66 = getelementptr inbounds i16, i16* %15, i64 64
  %67 = bitcast i16* %65 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %16, i64 80
  %70 = bitcast i16* %69 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 1
  %72 = getelementptr inbounds i16, i16* %16, i64 96
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %16, i64 112
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = bitcast i16* %66 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %15, i64 80
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %15, i64 96
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %15, i64 112
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = sub <16 x i16> %68, %79
  %90 = sub <16 x i16> zeroinitializer, %89
  %91 = icmp slt <16 x i16> %89, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> %89
  %93 = sub <16 x i16> %71, %82
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %74, %85
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %77, %88
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = add <16 x i16> %96, %92
  %106 = add <16 x i16> %105, %100
  %107 = add <16 x i16> %106, %104
  %108 = shufflevector <16 x i16> %107, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %107, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i16> %108 to <8 x i32>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %64, %110
  %113 = add <8 x i32> %112, %111
  %114 = getelementptr inbounds i16, i16* %16, i64 %11
  %115 = getelementptr inbounds i16, i16* %15, i64 %12
  %116 = add nuw nsw i32 %14, 1
  %117 = icmp eq i32 %116, 64
  br i1 %117, label %118, label %13

118:                                              ; preds = %13
  %119 = bitcast <8 x i32> %113 to <32 x i8>
  %120 = shufflevector <32 x i8> %119, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %121 = bitcast <32 x i8> %120 to <8 x i32>
  %122 = add <8 x i32> %113, %121
  %123 = bitcast <8 x i32> %122 to <4 x i64>
  %124 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %125 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %126 = bitcast <2 x i64> %124 to <4 x i32>
  %127 = bitcast <2 x i64> %125 to <4 x i32>
  %128 = add <4 x i32> %127, %126
  %129 = bitcast <4 x i32> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = bitcast <16 x i8> %130 to <4 x i32>
  %132 = add <4 x i32> %128, %131
  %133 = extractelement <4 x i32> %132, i32 0
  ret i32 %133
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad128x128_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = ptrtoint i8* %2 to i64
  %6 = shl i64 %5, 1
  %7 = inttoptr i64 %6 to i16*
  %8 = ptrtoint i8* %0 to i64
  %9 = shl i64 %8, 1
  %10 = inttoptr i64 %9 to i16*
  %11 = sext i32 %1 to i64
  %12 = sext i32 %3 to i64
  br label %13

13:                                               ; preds = %13, %4
  %14 = phi i32 [ 0, %4 ], [ %116, %13 ]
  %15 = phi i16* [ %7, %4 ], [ %115, %13 ]
  %16 = phi i16* [ %10, %4 ], [ %114, %13 ]
  %17 = phi <8 x i32> [ zeroinitializer, %4 ], [ %113, %13 ]
  %18 = bitcast i16* %16 to <16 x i16>*
  %19 = load <16 x i16>, <16 x i16>* %18, align 1
  %20 = getelementptr inbounds i16, i16* %16, i64 16
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 1
  %23 = getelementptr inbounds i16, i16* %16, i64 32
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %16, i64 48
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = bitcast i16* %15 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %15, i64 16
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %15, i64 32
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %15, i64 48
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = sub <16 x i16> %19, %30
  %41 = sub <16 x i16> zeroinitializer, %40
  %42 = icmp slt <16 x i16> %40, zeroinitializer
  %43 = select <16 x i1> %42, <16 x i16> %41, <16 x i16> %40
  %44 = sub <16 x i16> %22, %33
  %45 = sub <16 x i16> zeroinitializer, %44
  %46 = icmp slt <16 x i16> %44, zeroinitializer
  %47 = select <16 x i1> %46, <16 x i16> %45, <16 x i16> %44
  %48 = sub <16 x i16> %25, %36
  %49 = sub <16 x i16> zeroinitializer, %48
  %50 = icmp slt <16 x i16> %48, zeroinitializer
  %51 = select <16 x i1> %50, <16 x i16> %49, <16 x i16> %48
  %52 = sub <16 x i16> %28, %39
  %53 = sub <16 x i16> zeroinitializer, %52
  %54 = icmp slt <16 x i16> %52, zeroinitializer
  %55 = select <16 x i1> %54, <16 x i16> %53, <16 x i16> %52
  %56 = add <16 x i16> %47, %43
  %57 = add <16 x i16> %56, %51
  %58 = add <16 x i16> %57, %55
  %59 = shufflevector <16 x i16> %58, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %60 = shufflevector <16 x i16> %58, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %61 = bitcast <16 x i16> %59 to <8 x i32>
  %62 = bitcast <16 x i16> %60 to <8 x i32>
  %63 = add <8 x i32> %17, %61
  %64 = add <8 x i32> %63, %62
  %65 = getelementptr inbounds i16, i16* %16, i64 64
  %66 = getelementptr inbounds i16, i16* %15, i64 64
  %67 = bitcast i16* %65 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %16, i64 80
  %70 = bitcast i16* %69 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 1
  %72 = getelementptr inbounds i16, i16* %16, i64 96
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %16, i64 112
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = bitcast i16* %66 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %15, i64 80
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %15, i64 96
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %15, i64 112
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = sub <16 x i16> %68, %79
  %90 = sub <16 x i16> zeroinitializer, %89
  %91 = icmp slt <16 x i16> %89, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> %89
  %93 = sub <16 x i16> %71, %82
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %74, %85
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %77, %88
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = add <16 x i16> %96, %92
  %106 = add <16 x i16> %105, %100
  %107 = add <16 x i16> %106, %104
  %108 = shufflevector <16 x i16> %107, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %107, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i16> %108 to <8 x i32>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %64, %110
  %113 = add <8 x i32> %112, %111
  %114 = getelementptr inbounds i16, i16* %16, i64 %11
  %115 = getelementptr inbounds i16, i16* %15, i64 %12
  %116 = add nuw nsw i32 %14, 1
  %117 = icmp eq i32 %116, 128
  br i1 %117, label %118, label %13

118:                                              ; preds = %13
  %119 = bitcast <8 x i32> %113 to <32 x i8>
  %120 = shufflevector <32 x i8> %119, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %121 = bitcast <32 x i8> %120 to <8 x i32>
  %122 = add <8 x i32> %113, %121
  %123 = bitcast <8 x i32> %122 to <4 x i64>
  %124 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %125 = shufflevector <4 x i64> %123, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %126 = bitcast <2 x i64> %124 to <4 x i32>
  %127 = bitcast <2 x i64> %125 to <4 x i32>
  %128 = add <4 x i32> %127, %126
  %129 = bitcast <4 x i32> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %131 = bitcast <16 x i8> %130 to <4 x i32>
  %132 = add <4 x i32> %128, %131
  %133 = extractelement <4 x i32> %132, i32 0
  ret i32 %133
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_16x8_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = shl nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  %16 = mul nsw i32 %1, 6
  %17 = sext i32 %16 to i64
  %18 = sext i32 %6 to i64
  %19 = shl nsw i32 %3, 2
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %3, 6
  %22 = sext i32 %21 to i64
  %23 = inttoptr i64 %11 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = getelementptr inbounds i16, i16* %12, i64 %13
  %26 = bitcast i16* %25 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 2
  %28 = getelementptr inbounds i16, i16* %12, i64 %15
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 2
  %31 = getelementptr inbounds i16, i16* %12, i64 %17
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 2
  %34 = inttoptr i64 %8 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = getelementptr inbounds i16, i16* %9, i64 %18
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 2
  %39 = getelementptr inbounds i16, i16* %9, i64 %20
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 2
  %42 = getelementptr inbounds i16, i16* %9, i64 %22
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 2
  %45 = sub <16 x i16> %24, %35
  %46 = sub <16 x i16> zeroinitializer, %45
  %47 = icmp slt <16 x i16> %45, zeroinitializer
  %48 = select <16 x i1> %47, <16 x i16> %46, <16 x i16> %45
  %49 = sub <16 x i16> %27, %38
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = sub <16 x i16> %30, %41
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = sub <16 x i16> %33, %44
  %58 = sub <16 x i16> zeroinitializer, %57
  %59 = icmp slt <16 x i16> %57, zeroinitializer
  %60 = select <16 x i1> %59, <16 x i16> %58, <16 x i16> %57
  %61 = add <16 x i16> %52, %48
  %62 = add <16 x i16> %61, %56
  %63 = add <16 x i16> %62, %60
  %64 = shufflevector <16 x i16> %63, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %65 = shufflevector <16 x i16> %63, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i16> %64 to <8 x i32>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = add <8 x i32> %66, %67
  %69 = bitcast <8 x i32> %68 to <32 x i8>
  %70 = shufflevector <32 x i8> %69, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %71 = bitcast <32 x i8> %70 to <8 x i32>
  %72 = add <8 x i32> %68, %71
  %73 = bitcast <8 x i32> %72 to <4 x i64>
  %74 = shufflevector <4 x i64> %73, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %75 = shufflevector <4 x i64> %73, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %76 = bitcast <2 x i64> %74 to <4 x i32>
  %77 = bitcast <2 x i64> %75 to <4 x i32>
  %78 = add <4 x i32> %77, %76
  %79 = bitcast <4 x i32> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %81 = bitcast <16 x i8> %80 to <4 x i32>
  %82 = add <4 x i32> %78, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = shl i32 %83, 1
  ret i32 %84
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_16x16_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = shl nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  %16 = mul nsw i32 %1, 6
  %17 = sext i32 %16 to i64
  %18 = sext i32 %6 to i64
  %19 = shl nsw i32 %3, 2
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %3, 6
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 3
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %11 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  %29 = getelementptr inbounds i16, i16* %12, i64 %13
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = getelementptr inbounds i16, i16* %12, i64 %15
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 2
  %35 = getelementptr inbounds i16, i16* %12, i64 %17
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 2
  %38 = inttoptr i64 %8 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 2
  %40 = getelementptr inbounds i16, i16* %9, i64 %18
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 2
  %43 = getelementptr inbounds i16, i16* %9, i64 %20
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 2
  %46 = getelementptr inbounds i16, i16* %9, i64 %22
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 2
  %49 = sub <16 x i16> %28, %39
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = sub <16 x i16> %31, %42
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = sub <16 x i16> %34, %45
  %58 = sub <16 x i16> zeroinitializer, %57
  %59 = icmp slt <16 x i16> %57, zeroinitializer
  %60 = select <16 x i1> %59, <16 x i16> %58, <16 x i16> %57
  %61 = sub <16 x i16> %37, %48
  %62 = sub <16 x i16> zeroinitializer, %61
  %63 = icmp slt <16 x i16> %61, zeroinitializer
  %64 = select <16 x i1> %63, <16 x i16> %62, <16 x i16> %61
  %65 = add <16 x i16> %56, %52
  %66 = add <16 x i16> %65, %60
  %67 = add <16 x i16> %66, %64
  %68 = shufflevector <16 x i16> %67, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %69 = shufflevector <16 x i16> %67, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i16> %68 to <8 x i32>
  %71 = bitcast <16 x i16> %69 to <8 x i32>
  %72 = add <8 x i32> %70, %71
  %73 = getelementptr inbounds i16, i16* %12, i64 %24
  %74 = getelementptr inbounds i16, i16* %9, i64 %26
  %75 = bitcast i16* %73 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 2
  %77 = getelementptr inbounds i16, i16* %73, i64 %13
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 2
  %80 = getelementptr inbounds i16, i16* %73, i64 %15
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 2
  %83 = getelementptr inbounds i16, i16* %73, i64 %17
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 2
  %86 = bitcast i16* %74 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %74, i64 %18
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 2
  %91 = getelementptr inbounds i16, i16* %74, i64 %20
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 2
  %94 = getelementptr inbounds i16, i16* %74, i64 %22
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 2
  %97 = sub <16 x i16> %76, %87
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %79, %90
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %82, %93
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %85, %96
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = add <16 x i16> %104, %100
  %114 = add <16 x i16> %113, %108
  %115 = add <16 x i16> %114, %112
  %116 = shufflevector <16 x i16> %115, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %115, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i16> %116 to <8 x i32>
  %119 = bitcast <16 x i16> %117 to <8 x i32>
  %120 = add <8 x i32> %72, %118
  %121 = add <8 x i32> %120, %119
  %122 = bitcast <8 x i32> %121 to <32 x i8>
  %123 = shufflevector <32 x i8> %122, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %124 = bitcast <32 x i8> %123 to <8 x i32>
  %125 = add <8 x i32> %121, %124
  %126 = bitcast <8 x i32> %125 to <4 x i64>
  %127 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %128 = shufflevector <4 x i64> %126, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %129 = bitcast <2 x i64> %127 to <4 x i32>
  %130 = bitcast <2 x i64> %128 to <4 x i32>
  %131 = add <4 x i32> %130, %129
  %132 = bitcast <4 x i32> %131 to <16 x i8>
  %133 = shufflevector <16 x i8> %132, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %134 = bitcast <16 x i8> %133 to <4 x i32>
  %135 = add <4 x i32> %131, %134
  %136 = extractelement <4 x i32> %135, i32 0
  %137 = shl i32 %136, 1
  ret i32 %137
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_16x32_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = shl nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  %16 = mul nsw i32 %1, 6
  %17 = sext i32 %16 to i64
  %18 = sext i32 %6 to i64
  %19 = shl nsw i32 %3, 2
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %3, 6
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 3
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %11 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 2
  %29 = getelementptr inbounds i16, i16* %12, i64 %13
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = getelementptr inbounds i16, i16* %12, i64 %15
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 2
  %35 = getelementptr inbounds i16, i16* %12, i64 %17
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 2
  %38 = inttoptr i64 %8 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 2
  %40 = getelementptr inbounds i16, i16* %9, i64 %18
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 2
  %43 = getelementptr inbounds i16, i16* %9, i64 %20
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 2
  %46 = getelementptr inbounds i16, i16* %9, i64 %22
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 2
  %49 = sub <16 x i16> %28, %39
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = sub <16 x i16> %31, %42
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = sub <16 x i16> %34, %45
  %58 = sub <16 x i16> zeroinitializer, %57
  %59 = icmp slt <16 x i16> %57, zeroinitializer
  %60 = select <16 x i1> %59, <16 x i16> %58, <16 x i16> %57
  %61 = sub <16 x i16> %37, %48
  %62 = sub <16 x i16> zeroinitializer, %61
  %63 = icmp slt <16 x i16> %61, zeroinitializer
  %64 = select <16 x i1> %63, <16 x i16> %62, <16 x i16> %61
  %65 = add <16 x i16> %56, %52
  %66 = add <16 x i16> %65, %60
  %67 = add <16 x i16> %66, %64
  %68 = shufflevector <16 x i16> %67, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %69 = shufflevector <16 x i16> %67, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %70 = bitcast <16 x i16> %68 to <8 x i32>
  %71 = bitcast <16 x i16> %69 to <8 x i32>
  %72 = add <8 x i32> %70, %71
  %73 = getelementptr inbounds i16, i16* %12, i64 %24
  %74 = getelementptr inbounds i16, i16* %9, i64 %26
  %75 = bitcast i16* %73 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 2
  %77 = getelementptr inbounds i16, i16* %73, i64 %13
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 2
  %80 = getelementptr inbounds i16, i16* %73, i64 %15
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 2
  %83 = getelementptr inbounds i16, i16* %73, i64 %17
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 2
  %86 = bitcast i16* %74 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 2
  %88 = getelementptr inbounds i16, i16* %74, i64 %18
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 2
  %91 = getelementptr inbounds i16, i16* %74, i64 %20
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 2
  %94 = getelementptr inbounds i16, i16* %74, i64 %22
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 2
  %97 = sub <16 x i16> %76, %87
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %79, %90
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %82, %93
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %85, %96
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = add <16 x i16> %104, %100
  %114 = add <16 x i16> %113, %108
  %115 = add <16 x i16> %114, %112
  %116 = shufflevector <16 x i16> %115, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %117 = shufflevector <16 x i16> %115, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %118 = bitcast <16 x i16> %116 to <8 x i32>
  %119 = bitcast <16 x i16> %117 to <8 x i32>
  %120 = add <8 x i32> %72, %118
  %121 = add <8 x i32> %120, %119
  %122 = getelementptr inbounds i16, i16* %73, i64 %24
  %123 = getelementptr inbounds i16, i16* %74, i64 %26
  %124 = bitcast i16* %122 to <16 x i16>*
  %125 = load <16 x i16>, <16 x i16>* %124, align 2
  %126 = getelementptr inbounds i16, i16* %122, i64 %13
  %127 = bitcast i16* %126 to <16 x i16>*
  %128 = load <16 x i16>, <16 x i16>* %127, align 2
  %129 = getelementptr inbounds i16, i16* %122, i64 %15
  %130 = bitcast i16* %129 to <16 x i16>*
  %131 = load <16 x i16>, <16 x i16>* %130, align 2
  %132 = getelementptr inbounds i16, i16* %122, i64 %17
  %133 = bitcast i16* %132 to <16 x i16>*
  %134 = load <16 x i16>, <16 x i16>* %133, align 2
  %135 = bitcast i16* %123 to <16 x i16>*
  %136 = load <16 x i16>, <16 x i16>* %135, align 2
  %137 = getelementptr inbounds i16, i16* %123, i64 %18
  %138 = bitcast i16* %137 to <16 x i16>*
  %139 = load <16 x i16>, <16 x i16>* %138, align 2
  %140 = getelementptr inbounds i16, i16* %123, i64 %20
  %141 = bitcast i16* %140 to <16 x i16>*
  %142 = load <16 x i16>, <16 x i16>* %141, align 2
  %143 = getelementptr inbounds i16, i16* %123, i64 %22
  %144 = bitcast i16* %143 to <16 x i16>*
  %145 = load <16 x i16>, <16 x i16>* %144, align 2
  %146 = sub <16 x i16> %125, %136
  %147 = sub <16 x i16> zeroinitializer, %146
  %148 = icmp slt <16 x i16> %146, zeroinitializer
  %149 = select <16 x i1> %148, <16 x i16> %147, <16 x i16> %146
  %150 = sub <16 x i16> %128, %139
  %151 = sub <16 x i16> zeroinitializer, %150
  %152 = icmp slt <16 x i16> %150, zeroinitializer
  %153 = select <16 x i1> %152, <16 x i16> %151, <16 x i16> %150
  %154 = sub <16 x i16> %131, %142
  %155 = sub <16 x i16> zeroinitializer, %154
  %156 = icmp slt <16 x i16> %154, zeroinitializer
  %157 = select <16 x i1> %156, <16 x i16> %155, <16 x i16> %154
  %158 = sub <16 x i16> %134, %145
  %159 = sub <16 x i16> zeroinitializer, %158
  %160 = icmp slt <16 x i16> %158, zeroinitializer
  %161 = select <16 x i1> %160, <16 x i16> %159, <16 x i16> %158
  %162 = add <16 x i16> %153, %149
  %163 = add <16 x i16> %162, %157
  %164 = add <16 x i16> %163, %161
  %165 = shufflevector <16 x i16> %164, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %166 = shufflevector <16 x i16> %164, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %167 = bitcast <16 x i16> %165 to <8 x i32>
  %168 = bitcast <16 x i16> %166 to <8 x i32>
  %169 = add <8 x i32> %121, %167
  %170 = add <8 x i32> %169, %168
  %171 = getelementptr inbounds i16, i16* %122, i64 %24
  %172 = getelementptr inbounds i16, i16* %123, i64 %26
  %173 = bitcast i16* %171 to <16 x i16>*
  %174 = load <16 x i16>, <16 x i16>* %173, align 2
  %175 = getelementptr inbounds i16, i16* %171, i64 %13
  %176 = bitcast i16* %175 to <16 x i16>*
  %177 = load <16 x i16>, <16 x i16>* %176, align 1
  %178 = getelementptr inbounds i16, i16* %171, i64 %15
  %179 = bitcast i16* %178 to <16 x i16>*
  %180 = load <16 x i16>, <16 x i16>* %179, align 1
  %181 = getelementptr inbounds i16, i16* %171, i64 %17
  %182 = bitcast i16* %181 to <16 x i16>*
  %183 = load <16 x i16>, <16 x i16>* %182, align 1
  %184 = bitcast i16* %172 to <16 x i16>*
  %185 = load <16 x i16>, <16 x i16>* %184, align 2
  %186 = getelementptr inbounds i16, i16* %172, i64 %18
  %187 = bitcast i16* %186 to <16 x i16>*
  %188 = load <16 x i16>, <16 x i16>* %187, align 1
  %189 = getelementptr inbounds i16, i16* %172, i64 %20
  %190 = bitcast i16* %189 to <16 x i16>*
  %191 = load <16 x i16>, <16 x i16>* %190, align 1
  %192 = getelementptr inbounds i16, i16* %172, i64 %22
  %193 = bitcast i16* %192 to <16 x i16>*
  %194 = load <16 x i16>, <16 x i16>* %193, align 1
  %195 = sub <16 x i16> %174, %185
  %196 = sub <16 x i16> zeroinitializer, %195
  %197 = icmp slt <16 x i16> %195, zeroinitializer
  %198 = select <16 x i1> %197, <16 x i16> %196, <16 x i16> %195
  %199 = sub <16 x i16> %177, %188
  %200 = sub <16 x i16> zeroinitializer, %199
  %201 = icmp slt <16 x i16> %199, zeroinitializer
  %202 = select <16 x i1> %201, <16 x i16> %200, <16 x i16> %199
  %203 = sub <16 x i16> %180, %191
  %204 = sub <16 x i16> zeroinitializer, %203
  %205 = icmp slt <16 x i16> %203, zeroinitializer
  %206 = select <16 x i1> %205, <16 x i16> %204, <16 x i16> %203
  %207 = sub <16 x i16> %183, %194
  %208 = sub <16 x i16> zeroinitializer, %207
  %209 = icmp slt <16 x i16> %207, zeroinitializer
  %210 = select <16 x i1> %209, <16 x i16> %208, <16 x i16> %207
  %211 = add <16 x i16> %202, %198
  %212 = add <16 x i16> %211, %206
  %213 = add <16 x i16> %212, %210
  %214 = shufflevector <16 x i16> %213, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %215 = shufflevector <16 x i16> %213, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %216 = bitcast <16 x i16> %214 to <8 x i32>
  %217 = bitcast <16 x i16> %215 to <8 x i32>
  %218 = add <8 x i32> %170, %216
  %219 = add <8 x i32> %218, %217
  %220 = bitcast <8 x i32> %219 to <32 x i8>
  %221 = shufflevector <32 x i8> %220, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %222 = bitcast <32 x i8> %221 to <8 x i32>
  %223 = add <8 x i32> %219, %222
  %224 = bitcast <8 x i32> %223 to <4 x i64>
  %225 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %226 = shufflevector <4 x i64> %224, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %227 = bitcast <2 x i64> %225 to <4 x i32>
  %228 = bitcast <2 x i64> %226 to <4 x i32>
  %229 = add <4 x i32> %228, %227
  %230 = bitcast <4 x i32> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %232 = bitcast <16 x i8> %231 to <4 x i32>
  %233 = add <4 x i32> %229, %232
  %234 = extractelement <4 x i32> %233, i32 0
  %235 = shl i32 %234, 1
  ret i32 %235
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_16x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = shl nsw i32 %1, 2
  %15 = sext i32 %14 to i64
  %16 = mul nsw i32 %1, 6
  %17 = sext i32 %16 to i64
  %18 = sext i32 %6 to i64
  %19 = shl nsw i32 %3, 2
  %20 = sext i32 %19 to i64
  %21 = mul nsw i32 %3, 6
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 3
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 3
  %26 = sext i32 %25 to i64
  br label %27

27:                                               ; preds = %27, %4
  %28 = phi i32 [ 0, %4 ], [ %81, %27 ]
  %29 = phi i16* [ %9, %4 ], [ %80, %27 ]
  %30 = phi i16* [ %12, %4 ], [ %79, %27 ]
  %31 = phi <8 x i32> [ zeroinitializer, %4 ], [ %78, %27 ]
  %32 = bitcast i16* %30 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %30, i64 %13
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %30, i64 %15
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %30, i64 %17
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = bitcast i16* %29 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %29, i64 %18
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %29, i64 %20
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %29, i64 %22
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = sub <16 x i16> %33, %44
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %36, %47
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %39, %50
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %42, %53
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = add <16 x i16> %61, %57
  %71 = add <16 x i16> %70, %65
  %72 = add <16 x i16> %71, %69
  %73 = shufflevector <16 x i16> %72, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %74 = shufflevector <16 x i16> %72, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i16> %73 to <8 x i32>
  %76 = bitcast <16 x i16> %74 to <8 x i32>
  %77 = add <8 x i32> %31, %75
  %78 = add <8 x i32> %77, %76
  %79 = getelementptr inbounds i16, i16* %30, i64 %24
  %80 = getelementptr inbounds i16, i16* %29, i64 %26
  %81 = add nuw nsw i32 %28, 4
  %82 = icmp ult i32 %81, 32
  br i1 %82, label %27, label %83

83:                                               ; preds = %27
  %84 = bitcast <8 x i32> %78 to <32 x i8>
  %85 = shufflevector <32 x i8> %84, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %86 = bitcast <32 x i8> %85 to <8 x i32>
  %87 = add <8 x i32> %78, %86
  %88 = bitcast <8 x i32> %87 to <4 x i64>
  %89 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %90 = shufflevector <4 x i64> %88, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %91 = bitcast <2 x i64> %89 to <4 x i32>
  %92 = bitcast <2 x i64> %90 to <4 x i32>
  %93 = add <4 x i32> %92, %91
  %94 = bitcast <4 x i32> %93 to <16 x i8>
  %95 = shufflevector <16 x i8> %94, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %96 = bitcast <16 x i8> %95 to <4 x i32>
  %97 = add <4 x i32> %93, %96
  %98 = extractelement <4 x i32> %97, i32 0
  %99 = shl i32 %98, 1
  ret i32 %99
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_32x8_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  %19 = inttoptr i64 %11 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = getelementptr inbounds i16, i16* %12, i64 16
  %22 = bitcast i16* %21 to <16 x i16>*
  %23 = load <16 x i16>, <16 x i16>* %22, align 2
  %24 = getelementptr inbounds i16, i16* %12, i64 %13
  %25 = bitcast i16* %24 to <16 x i16>*
  %26 = load <16 x i16>, <16 x i16>* %25, align 2
  %27 = getelementptr inbounds i16, i16* %24, i64 16
  %28 = bitcast i16* %27 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 2
  %30 = inttoptr i64 %8 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 2
  %32 = getelementptr inbounds i16, i16* %9, i64 16
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 2
  %35 = getelementptr inbounds i16, i16* %9, i64 %14
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 2
  %38 = getelementptr inbounds i16, i16* %35, i64 16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 2
  %41 = sub <16 x i16> %20, %31
  %42 = sub <16 x i16> zeroinitializer, %41
  %43 = icmp slt <16 x i16> %41, zeroinitializer
  %44 = select <16 x i1> %43, <16 x i16> %42, <16 x i16> %41
  %45 = sub <16 x i16> %23, %34
  %46 = sub <16 x i16> zeroinitializer, %45
  %47 = icmp slt <16 x i16> %45, zeroinitializer
  %48 = select <16 x i1> %47, <16 x i16> %46, <16 x i16> %45
  %49 = sub <16 x i16> %26, %37
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = sub <16 x i16> %29, %40
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = add <16 x i16> %48, %44
  %58 = add <16 x i16> %57, %52
  %59 = add <16 x i16> %58, %56
  %60 = shufflevector <16 x i16> %59, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %61 = shufflevector <16 x i16> %59, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast <16 x i16> %60 to <8 x i32>
  %63 = bitcast <16 x i16> %61 to <8 x i32>
  %64 = add <8 x i32> %62, %63
  %65 = getelementptr inbounds i16, i16* %12, i64 %16
  %66 = getelementptr inbounds i16, i16* %9, i64 %18
  %67 = bitcast i16* %65 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = getelementptr inbounds i16, i16* %65, i64 16
  %70 = bitcast i16* %69 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 2
  %72 = getelementptr inbounds i16, i16* %65, i64 %13
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 2
  %75 = getelementptr inbounds i16, i16* %72, i64 16
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 2
  %78 = bitcast i16* %66 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 2
  %80 = getelementptr inbounds i16, i16* %66, i64 16
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 2
  %83 = getelementptr inbounds i16, i16* %66, i64 %14
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 2
  %86 = getelementptr inbounds i16, i16* %83, i64 16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 2
  %89 = sub <16 x i16> %68, %79
  %90 = sub <16 x i16> zeroinitializer, %89
  %91 = icmp slt <16 x i16> %89, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> %89
  %93 = sub <16 x i16> %71, %82
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %74, %85
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %77, %88
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = add <16 x i16> %96, %92
  %106 = add <16 x i16> %105, %100
  %107 = add <16 x i16> %106, %104
  %108 = shufflevector <16 x i16> %107, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %107, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i16> %108 to <8 x i32>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %64, %110
  %113 = add <8 x i32> %112, %111
  %114 = bitcast <8 x i32> %113 to <32 x i8>
  %115 = shufflevector <32 x i8> %114, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %116 = bitcast <32 x i8> %115 to <8 x i32>
  %117 = add <8 x i32> %113, %116
  %118 = bitcast <8 x i32> %117 to <4 x i64>
  %119 = shufflevector <4 x i64> %118, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %120 = shufflevector <4 x i64> %118, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %121 = bitcast <2 x i64> %119 to <4 x i32>
  %122 = bitcast <2 x i64> %120 to <4 x i32>
  %123 = add <4 x i32> %122, %121
  %124 = bitcast <4 x i32> %123 to <16 x i8>
  %125 = shufflevector <16 x i8> %124, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %126 = bitcast <16 x i8> %125 to <4 x i32>
  %127 = add <4 x i32> %123, %126
  %128 = extractelement <4 x i32> %127, i32 0
  %129 = shl i32 %128, 1
  ret i32 %129
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_32x16_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %1, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 3
  %22 = sext i32 %21 to i64
  %23 = inttoptr i64 %11 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 2
  %25 = getelementptr inbounds i16, i16* %12, i64 16
  %26 = bitcast i16* %25 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 2
  %28 = getelementptr inbounds i16, i16* %12, i64 %13
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 2
  %31 = getelementptr inbounds i16, i16* %28, i64 16
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 2
  %34 = inttoptr i64 %8 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 2
  %36 = getelementptr inbounds i16, i16* %9, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 2
  %39 = getelementptr inbounds i16, i16* %9, i64 %14
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 2
  %42 = getelementptr inbounds i16, i16* %39, i64 16
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 2
  %45 = sub <16 x i16> %24, %35
  %46 = sub <16 x i16> zeroinitializer, %45
  %47 = icmp slt <16 x i16> %45, zeroinitializer
  %48 = select <16 x i1> %47, <16 x i16> %46, <16 x i16> %45
  %49 = sub <16 x i16> %27, %38
  %50 = sub <16 x i16> zeroinitializer, %49
  %51 = icmp slt <16 x i16> %49, zeroinitializer
  %52 = select <16 x i1> %51, <16 x i16> %50, <16 x i16> %49
  %53 = sub <16 x i16> %30, %41
  %54 = sub <16 x i16> zeroinitializer, %53
  %55 = icmp slt <16 x i16> %53, zeroinitializer
  %56 = select <16 x i1> %55, <16 x i16> %54, <16 x i16> %53
  %57 = sub <16 x i16> %33, %44
  %58 = sub <16 x i16> zeroinitializer, %57
  %59 = icmp slt <16 x i16> %57, zeroinitializer
  %60 = select <16 x i1> %59, <16 x i16> %58, <16 x i16> %57
  %61 = add <16 x i16> %52, %48
  %62 = add <16 x i16> %61, %56
  %63 = add <16 x i16> %62, %60
  %64 = shufflevector <16 x i16> %63, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %65 = shufflevector <16 x i16> %63, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = bitcast <16 x i16> %64 to <8 x i32>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = add <8 x i32> %66, %67
  %69 = getelementptr inbounds i16, i16* %12, i64 %16
  %70 = getelementptr inbounds i16, i16* %9, i64 %18
  %71 = bitcast i16* %69 to <16 x i16>*
  %72 = load <16 x i16>, <16 x i16>* %71, align 2
  %73 = getelementptr inbounds i16, i16* %69, i64 16
  %74 = bitcast i16* %73 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 2
  %76 = getelementptr inbounds i16, i16* %69, i64 %13
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 2
  %79 = getelementptr inbounds i16, i16* %76, i64 16
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 2
  %82 = bitcast i16* %70 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 2
  %84 = getelementptr inbounds i16, i16* %70, i64 16
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 2
  %87 = getelementptr inbounds i16, i16* %70, i64 %14
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 2
  %90 = getelementptr inbounds i16, i16* %87, i64 16
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 2
  %93 = sub <16 x i16> %72, %83
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %75, %86
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = sub <16 x i16> %78, %89
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = sub <16 x i16> %81, %92
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = add <16 x i16> %100, %96
  %110 = add <16 x i16> %109, %104
  %111 = add <16 x i16> %110, %108
  %112 = shufflevector <16 x i16> %111, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %113 = shufflevector <16 x i16> %111, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %114 = bitcast <16 x i16> %112 to <8 x i32>
  %115 = bitcast <16 x i16> %113 to <8 x i32>
  %116 = add <8 x i32> %68, %114
  %117 = add <8 x i32> %116, %115
  %118 = getelementptr inbounds i16, i16* %12, i64 %20
  %119 = getelementptr inbounds i16, i16* %9, i64 %22
  %120 = bitcast i16* %118 to <16 x i16>*
  %121 = load <16 x i16>, <16 x i16>* %120, align 2
  %122 = getelementptr inbounds i16, i16* %118, i64 16
  %123 = bitcast i16* %122 to <16 x i16>*
  %124 = load <16 x i16>, <16 x i16>* %123, align 2
  %125 = getelementptr inbounds i16, i16* %118, i64 %13
  %126 = bitcast i16* %125 to <16 x i16>*
  %127 = load <16 x i16>, <16 x i16>* %126, align 2
  %128 = getelementptr inbounds i16, i16* %125, i64 16
  %129 = bitcast i16* %128 to <16 x i16>*
  %130 = load <16 x i16>, <16 x i16>* %129, align 2
  %131 = bitcast i16* %119 to <16 x i16>*
  %132 = load <16 x i16>, <16 x i16>* %131, align 2
  %133 = getelementptr inbounds i16, i16* %119, i64 16
  %134 = bitcast i16* %133 to <16 x i16>*
  %135 = load <16 x i16>, <16 x i16>* %134, align 2
  %136 = getelementptr inbounds i16, i16* %119, i64 %14
  %137 = bitcast i16* %136 to <16 x i16>*
  %138 = load <16 x i16>, <16 x i16>* %137, align 2
  %139 = getelementptr inbounds i16, i16* %136, i64 16
  %140 = bitcast i16* %139 to <16 x i16>*
  %141 = load <16 x i16>, <16 x i16>* %140, align 2
  %142 = sub <16 x i16> %121, %132
  %143 = sub <16 x i16> zeroinitializer, %142
  %144 = icmp slt <16 x i16> %142, zeroinitializer
  %145 = select <16 x i1> %144, <16 x i16> %143, <16 x i16> %142
  %146 = sub <16 x i16> %124, %135
  %147 = sub <16 x i16> zeroinitializer, %146
  %148 = icmp slt <16 x i16> %146, zeroinitializer
  %149 = select <16 x i1> %148, <16 x i16> %147, <16 x i16> %146
  %150 = sub <16 x i16> %127, %138
  %151 = sub <16 x i16> zeroinitializer, %150
  %152 = icmp slt <16 x i16> %150, zeroinitializer
  %153 = select <16 x i1> %152, <16 x i16> %151, <16 x i16> %150
  %154 = sub <16 x i16> %130, %141
  %155 = sub <16 x i16> zeroinitializer, %154
  %156 = icmp slt <16 x i16> %154, zeroinitializer
  %157 = select <16 x i1> %156, <16 x i16> %155, <16 x i16> %154
  %158 = add <16 x i16> %149, %145
  %159 = add <16 x i16> %158, %153
  %160 = add <16 x i16> %159, %157
  %161 = shufflevector <16 x i16> %160, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %162 = shufflevector <16 x i16> %160, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %163 = bitcast <16 x i16> %161 to <8 x i32>
  %164 = bitcast <16 x i16> %162 to <8 x i32>
  %165 = add <8 x i32> %117, %163
  %166 = add <8 x i32> %165, %164
  %167 = getelementptr inbounds i16, i16* %118, i64 %16
  %168 = getelementptr inbounds i16, i16* %119, i64 %18
  %169 = bitcast i16* %167 to <16 x i16>*
  %170 = load <16 x i16>, <16 x i16>* %169, align 2
  %171 = getelementptr inbounds i16, i16* %167, i64 16
  %172 = bitcast i16* %171 to <16 x i16>*
  %173 = load <16 x i16>, <16 x i16>* %172, align 2
  %174 = getelementptr inbounds i16, i16* %167, i64 %13
  %175 = bitcast i16* %174 to <16 x i16>*
  %176 = load <16 x i16>, <16 x i16>* %175, align 2
  %177 = getelementptr inbounds i16, i16* %174, i64 16
  %178 = bitcast i16* %177 to <16 x i16>*
  %179 = load <16 x i16>, <16 x i16>* %178, align 1
  %180 = bitcast i16* %168 to <16 x i16>*
  %181 = load <16 x i16>, <16 x i16>* %180, align 2
  %182 = getelementptr inbounds i16, i16* %168, i64 16
  %183 = bitcast i16* %182 to <16 x i16>*
  %184 = load <16 x i16>, <16 x i16>* %183, align 2
  %185 = getelementptr inbounds i16, i16* %168, i64 %14
  %186 = bitcast i16* %185 to <16 x i16>*
  %187 = load <16 x i16>, <16 x i16>* %186, align 2
  %188 = getelementptr inbounds i16, i16* %185, i64 16
  %189 = bitcast i16* %188 to <16 x i16>*
  %190 = load <16 x i16>, <16 x i16>* %189, align 1
  %191 = sub <16 x i16> %170, %181
  %192 = sub <16 x i16> zeroinitializer, %191
  %193 = icmp slt <16 x i16> %191, zeroinitializer
  %194 = select <16 x i1> %193, <16 x i16> %192, <16 x i16> %191
  %195 = sub <16 x i16> %173, %184
  %196 = sub <16 x i16> zeroinitializer, %195
  %197 = icmp slt <16 x i16> %195, zeroinitializer
  %198 = select <16 x i1> %197, <16 x i16> %196, <16 x i16> %195
  %199 = sub <16 x i16> %176, %187
  %200 = sub <16 x i16> zeroinitializer, %199
  %201 = icmp slt <16 x i16> %199, zeroinitializer
  %202 = select <16 x i1> %201, <16 x i16> %200, <16 x i16> %199
  %203 = sub <16 x i16> %179, %190
  %204 = sub <16 x i16> zeroinitializer, %203
  %205 = icmp slt <16 x i16> %203, zeroinitializer
  %206 = select <16 x i1> %205, <16 x i16> %204, <16 x i16> %203
  %207 = add <16 x i16> %198, %194
  %208 = add <16 x i16> %207, %202
  %209 = add <16 x i16> %208, %206
  %210 = shufflevector <16 x i16> %209, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %211 = shufflevector <16 x i16> %209, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %212 = bitcast <16 x i16> %210 to <8 x i32>
  %213 = bitcast <16 x i16> %211 to <8 x i32>
  %214 = add <8 x i32> %166, %212
  %215 = add <8 x i32> %214, %213
  %216 = bitcast <8 x i32> %215 to <32 x i8>
  %217 = shufflevector <32 x i8> %216, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %218 = bitcast <32 x i8> %217 to <8 x i32>
  %219 = add <8 x i32> %215, %218
  %220 = bitcast <8 x i32> %219 to <4 x i64>
  %221 = shufflevector <4 x i64> %220, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %222 = shufflevector <4 x i64> %220, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %223 = bitcast <2 x i64> %221 to <4 x i32>
  %224 = bitcast <2 x i64> %222 to <4 x i32>
  %225 = add <4 x i32> %224, %223
  %226 = bitcast <4 x i32> %225 to <16 x i8>
  %227 = shufflevector <16 x i8> %226, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %228 = bitcast <16 x i8> %227 to <4 x i32>
  %229 = add <4 x i32> %225, %228
  %230 = extractelement <4 x i32> %229, i32 0
  %231 = shl i32 %230, 1
  ret i32 %231
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_32x32_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %1, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 3
  %22 = sext i32 %21 to i64
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i32 [ 0, %4 ], [ %126, %23 ]
  %25 = phi i16* [ %12, %4 ], [ %124, %23 ]
  %26 = phi i16* [ %9, %4 ], [ %125, %23 ]
  %27 = phi <8 x i32> [ zeroinitializer, %4 ], [ %123, %23 ]
  %28 = bitcast i16* %25 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %25, i64 16
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %25, i64 %13
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %33, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = bitcast i16* %26 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %26, i64 16
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %26, i64 %14
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %44, i64 16
  %48 = bitcast i16* %47 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 1
  %50 = sub <16 x i16> %29, %40
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %32, %43
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %35, %46
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %38, %49
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = add <16 x i16> %57, %53
  %67 = add <16 x i16> %66, %61
  %68 = add <16 x i16> %67, %65
  %69 = shufflevector <16 x i16> %68, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %70 = shufflevector <16 x i16> %68, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast <16 x i16> %69 to <8 x i32>
  %72 = bitcast <16 x i16> %70 to <8 x i32>
  %73 = add <8 x i32> %27, %71
  %74 = add <8 x i32> %73, %72
  %75 = getelementptr inbounds i16, i16* %25, i64 %16
  %76 = getelementptr inbounds i16, i16* %26, i64 %18
  %77 = bitcast i16* %75 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 16
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %75, i64 %13
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %82, i64 16
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = bitcast i16* %76 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %76, i64 16
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %76, i64 %14
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %93, i64 16
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = sub <16 x i16> %78, %89
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %81, %92
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %84, %95
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %87, %98
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = add <16 x i16> %106, %102
  %116 = add <16 x i16> %115, %110
  %117 = add <16 x i16> %116, %114
  %118 = shufflevector <16 x i16> %117, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %119 = shufflevector <16 x i16> %117, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %120 = bitcast <16 x i16> %118 to <8 x i32>
  %121 = bitcast <16 x i16> %119 to <8 x i32>
  %122 = add <8 x i32> %74, %120
  %123 = add <8 x i32> %122, %121
  %124 = getelementptr inbounds i16, i16* %25, i64 %20
  %125 = getelementptr inbounds i16, i16* %26, i64 %22
  %126 = add nuw nsw i32 %24, 4
  %127 = icmp ult i32 %126, 16
  br i1 %127, label %23, label %128

128:                                              ; preds = %23
  %129 = bitcast <8 x i32> %123 to <32 x i8>
  %130 = shufflevector <32 x i8> %129, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %131 = bitcast <32 x i8> %130 to <8 x i32>
  %132 = add <8 x i32> %123, %131
  %133 = bitcast <8 x i32> %132 to <4 x i64>
  %134 = shufflevector <4 x i64> %133, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %135 = shufflevector <4 x i64> %133, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %136 = bitcast <2 x i64> %134 to <4 x i32>
  %137 = bitcast <2 x i64> %135 to <4 x i32>
  %138 = add <4 x i32> %137, %136
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <4 x i32>
  %142 = add <4 x i32> %138, %141
  %143 = extractelement <4 x i32> %142, i32 0
  %144 = shl i32 %143, 1
  ret i32 %144
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_32x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  %19 = shl i32 %1, 3
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 3
  %22 = sext i32 %21 to i64
  br label %23

23:                                               ; preds = %23, %4
  %24 = phi i32 [ 0, %4 ], [ %126, %23 ]
  %25 = phi i16* [ %12, %4 ], [ %124, %23 ]
  %26 = phi i16* [ %9, %4 ], [ %125, %23 ]
  %27 = phi <8 x i32> [ zeroinitializer, %4 ], [ %123, %23 ]
  %28 = bitcast i16* %25 to <16 x i16>*
  %29 = load <16 x i16>, <16 x i16>* %28, align 1
  %30 = getelementptr inbounds i16, i16* %25, i64 16
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %25, i64 %13
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %33, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = bitcast i16* %26 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %26, i64 16
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %26, i64 %14
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %44, i64 16
  %48 = bitcast i16* %47 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 1
  %50 = sub <16 x i16> %29, %40
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %32, %43
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %35, %46
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %38, %49
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = add <16 x i16> %57, %53
  %67 = add <16 x i16> %66, %61
  %68 = add <16 x i16> %67, %65
  %69 = shufflevector <16 x i16> %68, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %70 = shufflevector <16 x i16> %68, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %71 = bitcast <16 x i16> %69 to <8 x i32>
  %72 = bitcast <16 x i16> %70 to <8 x i32>
  %73 = add <8 x i32> %27, %71
  %74 = add <8 x i32> %73, %72
  %75 = getelementptr inbounds i16, i16* %25, i64 %16
  %76 = getelementptr inbounds i16, i16* %26, i64 %18
  %77 = bitcast i16* %75 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %75, i64 16
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %75, i64 %13
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %82, i64 16
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = bitcast i16* %76 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %76, i64 16
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %76, i64 %14
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %93, i64 16
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = sub <16 x i16> %78, %89
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %81, %92
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %84, %95
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %87, %98
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = add <16 x i16> %106, %102
  %116 = add <16 x i16> %115, %110
  %117 = add <16 x i16> %116, %114
  %118 = shufflevector <16 x i16> %117, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %119 = shufflevector <16 x i16> %117, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %120 = bitcast <16 x i16> %118 to <8 x i32>
  %121 = bitcast <16 x i16> %119 to <8 x i32>
  %122 = add <8 x i32> %74, %120
  %123 = add <8 x i32> %122, %121
  %124 = getelementptr inbounds i16, i16* %25, i64 %20
  %125 = getelementptr inbounds i16, i16* %26, i64 %22
  %126 = add nuw nsw i32 %24, 4
  %127 = icmp ult i32 %126, 32
  br i1 %127, label %23, label %128

128:                                              ; preds = %23
  %129 = bitcast <8 x i32> %123 to <32 x i8>
  %130 = shufflevector <32 x i8> %129, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %131 = bitcast <32 x i8> %130 to <8 x i32>
  %132 = add <8 x i32> %123, %131
  %133 = bitcast <8 x i32> %132 to <4 x i64>
  %134 = shufflevector <4 x i64> %133, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %135 = shufflevector <4 x i64> %133, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %136 = bitcast <2 x i64> %134 to <4 x i32>
  %137 = bitcast <2 x i64> %135 to <4 x i32>
  %138 = add <4 x i32> %137, %136
  %139 = bitcast <4 x i32> %138 to <16 x i8>
  %140 = shufflevector <16 x i8> %139, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %141 = bitcast <16 x i8> %140 to <4 x i32>
  %142 = add <4 x i32> %138, %141
  %143 = extractelement <4 x i32> %142, i32 0
  %144 = shl i32 %143, 1
  ret i32 %144
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_64x16_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi i32 [ 0, %4 ], [ %122, %19 ]
  %21 = phi i16* [ %12, %4 ], [ %120, %19 ]
  %22 = phi i16* [ %9, %4 ], [ %121, %19 ]
  %23 = phi <8 x i32> [ zeroinitializer, %4 ], [ %119, %19 ]
  %24 = bitcast i16* %21 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %21, i64 16
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %21, i64 32
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %21, i64 48
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = bitcast i16* %22 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %22, i64 16
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %22, i64 32
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %22, i64 48
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = sub <16 x i16> %25, %36
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = sub <16 x i16> %28, %39
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %31, %42
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %34, %45
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = add <16 x i16> %53, %49
  %63 = add <16 x i16> %62, %57
  %64 = add <16 x i16> %63, %61
  %65 = shufflevector <16 x i16> %64, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %64, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = bitcast <16 x i16> %66 to <8 x i32>
  %69 = add <8 x i32> %23, %67
  %70 = add <8 x i32> %69, %68
  %71 = getelementptr inbounds i16, i16* %21, i64 %13
  %72 = getelementptr inbounds i16, i16* %22, i64 %14
  %73 = bitcast i16* %71 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 16
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %71, i64 32
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %71, i64 48
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = bitcast i16* %72 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %72, i64 16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %72, i64 32
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %72, i64 48
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = sub <16 x i16> %74, %85
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %77, %88
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %80, %91
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %83, %94
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = add <16 x i16> %102, %98
  %112 = add <16 x i16> %111, %106
  %113 = add <16 x i16> %112, %110
  %114 = shufflevector <16 x i16> %113, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %115 = shufflevector <16 x i16> %113, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i16> %114 to <8 x i32>
  %117 = bitcast <16 x i16> %115 to <8 x i32>
  %118 = add <8 x i32> %70, %116
  %119 = add <8 x i32> %118, %117
  %120 = getelementptr inbounds i16, i16* %21, i64 %16
  %121 = getelementptr inbounds i16, i16* %22, i64 %18
  %122 = add nuw nsw i32 %20, 2
  %123 = icmp ult i32 %122, 8
  br i1 %123, label %19, label %124

124:                                              ; preds = %19
  %125 = bitcast <8 x i32> %119 to <32 x i8>
  %126 = shufflevector <32 x i8> %125, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %127 = bitcast <32 x i8> %126 to <8 x i32>
  %128 = add <8 x i32> %119, %127
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %131 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = bitcast <2 x i64> %130 to <4 x i32>
  %133 = bitcast <2 x i64> %131 to <4 x i32>
  %134 = add <4 x i32> %133, %132
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = shl i32 %139, 1
  ret i32 %140
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_64x32_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi i32 [ 0, %4 ], [ %122, %19 ]
  %21 = phi i16* [ %12, %4 ], [ %120, %19 ]
  %22 = phi i16* [ %9, %4 ], [ %121, %19 ]
  %23 = phi <8 x i32> [ zeroinitializer, %4 ], [ %119, %19 ]
  %24 = bitcast i16* %21 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %21, i64 16
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %21, i64 32
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %21, i64 48
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = bitcast i16* %22 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %22, i64 16
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %22, i64 32
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %22, i64 48
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = sub <16 x i16> %25, %36
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = sub <16 x i16> %28, %39
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %31, %42
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %34, %45
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = add <16 x i16> %53, %49
  %63 = add <16 x i16> %62, %57
  %64 = add <16 x i16> %63, %61
  %65 = shufflevector <16 x i16> %64, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %64, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = bitcast <16 x i16> %66 to <8 x i32>
  %69 = add <8 x i32> %23, %67
  %70 = add <8 x i32> %69, %68
  %71 = getelementptr inbounds i16, i16* %21, i64 %13
  %72 = getelementptr inbounds i16, i16* %22, i64 %14
  %73 = bitcast i16* %71 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 16
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %71, i64 32
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %71, i64 48
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = bitcast i16* %72 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %72, i64 16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %72, i64 32
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %72, i64 48
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = sub <16 x i16> %74, %85
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %77, %88
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %80, %91
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %83, %94
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = add <16 x i16> %102, %98
  %112 = add <16 x i16> %111, %106
  %113 = add <16 x i16> %112, %110
  %114 = shufflevector <16 x i16> %113, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %115 = shufflevector <16 x i16> %113, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i16> %114 to <8 x i32>
  %117 = bitcast <16 x i16> %115 to <8 x i32>
  %118 = add <8 x i32> %70, %116
  %119 = add <8 x i32> %118, %117
  %120 = getelementptr inbounds i16, i16* %21, i64 %16
  %121 = getelementptr inbounds i16, i16* %22, i64 %18
  %122 = add nuw nsw i32 %20, 2
  %123 = icmp ult i32 %122, 16
  br i1 %123, label %19, label %124

124:                                              ; preds = %19
  %125 = bitcast <8 x i32> %119 to <32 x i8>
  %126 = shufflevector <32 x i8> %125, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %127 = bitcast <32 x i8> %126 to <8 x i32>
  %128 = add <8 x i32> %119, %127
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %131 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = bitcast <2 x i64> %130 to <4 x i32>
  %133 = bitcast <2 x i64> %131 to <4 x i32>
  %134 = add <4 x i32> %133, %132
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = shl i32 %139, 1
  ret i32 %140
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_64x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi i32 [ 0, %4 ], [ %122, %19 ]
  %21 = phi i16* [ %12, %4 ], [ %120, %19 ]
  %22 = phi i16* [ %9, %4 ], [ %121, %19 ]
  %23 = phi <8 x i32> [ zeroinitializer, %4 ], [ %119, %19 ]
  %24 = bitcast i16* %21 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %21, i64 16
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %21, i64 32
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %21, i64 48
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = bitcast i16* %22 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %22, i64 16
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %22, i64 32
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %22, i64 48
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = sub <16 x i16> %25, %36
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = sub <16 x i16> %28, %39
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %31, %42
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %34, %45
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = add <16 x i16> %53, %49
  %63 = add <16 x i16> %62, %57
  %64 = add <16 x i16> %63, %61
  %65 = shufflevector <16 x i16> %64, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %64, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = bitcast <16 x i16> %66 to <8 x i32>
  %69 = add <8 x i32> %23, %67
  %70 = add <8 x i32> %69, %68
  %71 = getelementptr inbounds i16, i16* %21, i64 %13
  %72 = getelementptr inbounds i16, i16* %22, i64 %14
  %73 = bitcast i16* %71 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 16
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %71, i64 32
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %71, i64 48
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = bitcast i16* %72 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %72, i64 16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %72, i64 32
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %72, i64 48
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = sub <16 x i16> %74, %85
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %77, %88
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %80, %91
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %83, %94
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = add <16 x i16> %102, %98
  %112 = add <16 x i16> %111, %106
  %113 = add <16 x i16> %112, %110
  %114 = shufflevector <16 x i16> %113, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %115 = shufflevector <16 x i16> %113, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i16> %114 to <8 x i32>
  %117 = bitcast <16 x i16> %115 to <8 x i32>
  %118 = add <8 x i32> %70, %116
  %119 = add <8 x i32> %118, %117
  %120 = getelementptr inbounds i16, i16* %21, i64 %16
  %121 = getelementptr inbounds i16, i16* %22, i64 %18
  %122 = add nuw nsw i32 %20, 2
  %123 = icmp ult i32 %122, 32
  br i1 %123, label %19, label %124

124:                                              ; preds = %19
  %125 = bitcast <8 x i32> %119 to <32 x i8>
  %126 = shufflevector <32 x i8> %125, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %127 = bitcast <32 x i8> %126 to <8 x i32>
  %128 = add <8 x i32> %119, %127
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %131 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = bitcast <2 x i64> %130 to <4 x i32>
  %133 = bitcast <2 x i64> %131 to <4 x i32>
  %134 = add <4 x i32> %133, %132
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = shl i32 %139, 1
  ret i32 %140
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_64x128_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  %15 = shl i32 %1, 2
  %16 = sext i32 %15 to i64
  %17 = shl i32 %3, 2
  %18 = sext i32 %17 to i64
  br label %19

19:                                               ; preds = %19, %4
  %20 = phi i32 [ 0, %4 ], [ %122, %19 ]
  %21 = phi i16* [ %12, %4 ], [ %120, %19 ]
  %22 = phi i16* [ %9, %4 ], [ %121, %19 ]
  %23 = phi <8 x i32> [ zeroinitializer, %4 ], [ %119, %19 ]
  %24 = bitcast i16* %21 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %21, i64 16
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %21, i64 32
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %21, i64 48
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = bitcast i16* %22 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %22, i64 16
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %22, i64 32
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %22, i64 48
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = sub <16 x i16> %25, %36
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = sub <16 x i16> %28, %39
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %31, %42
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %34, %45
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = add <16 x i16> %53, %49
  %63 = add <16 x i16> %62, %57
  %64 = add <16 x i16> %63, %61
  %65 = shufflevector <16 x i16> %64, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %66 = shufflevector <16 x i16> %64, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %67 = bitcast <16 x i16> %65 to <8 x i32>
  %68 = bitcast <16 x i16> %66 to <8 x i32>
  %69 = add <8 x i32> %23, %67
  %70 = add <8 x i32> %69, %68
  %71 = getelementptr inbounds i16, i16* %21, i64 %13
  %72 = getelementptr inbounds i16, i16* %22, i64 %14
  %73 = bitcast i16* %71 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %71, i64 16
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %71, i64 32
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %71, i64 48
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = bitcast i16* %72 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %72, i64 16
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %72, i64 32
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %72, i64 48
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = sub <16 x i16> %74, %85
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %77, %88
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %80, %91
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %83, %94
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = add <16 x i16> %102, %98
  %112 = add <16 x i16> %111, %106
  %113 = add <16 x i16> %112, %110
  %114 = shufflevector <16 x i16> %113, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %115 = shufflevector <16 x i16> %113, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %116 = bitcast <16 x i16> %114 to <8 x i32>
  %117 = bitcast <16 x i16> %115 to <8 x i32>
  %118 = add <8 x i32> %70, %116
  %119 = add <8 x i32> %118, %117
  %120 = getelementptr inbounds i16, i16* %21, i64 %16
  %121 = getelementptr inbounds i16, i16* %22, i64 %18
  %122 = add nuw nsw i32 %20, 2
  %123 = icmp ult i32 %122, 64
  br i1 %123, label %19, label %124

124:                                              ; preds = %19
  %125 = bitcast <8 x i32> %119 to <32 x i8>
  %126 = shufflevector <32 x i8> %125, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %127 = bitcast <32 x i8> %126 to <8 x i32>
  %128 = add <8 x i32> %119, %127
  %129 = bitcast <8 x i32> %128 to <4 x i64>
  %130 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %131 = shufflevector <4 x i64> %129, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %132 = bitcast <2 x i64> %130 to <4 x i32>
  %133 = bitcast <2 x i64> %131 to <4 x i32>
  %134 = add <4 x i32> %133, %132
  %135 = bitcast <4 x i32> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %137 = bitcast <16 x i8> %136 to <4 x i32>
  %138 = add <4 x i32> %134, %137
  %139 = extractelement <4 x i32> %138, i32 0
  %140 = shl i32 %139, 1
  ret i32 %140
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_128x64_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi i32 [ 0, %4 ], [ %118, %15 ]
  %17 = phi i16* [ %9, %4 ], [ %117, %15 ]
  %18 = phi i16* [ %12, %4 ], [ %116, %15 ]
  %19 = phi <8 x i32> [ zeroinitializer, %4 ], [ %115, %15 ]
  %20 = bitcast i16* %18 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %18, i64 16
  %23 = bitcast i16* %22 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 1
  %25 = getelementptr inbounds i16, i16* %18, i64 32
  %26 = bitcast i16* %25 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %18, i64 48
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = bitcast i16* %17 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %17, i64 16
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %17, i64 32
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %17, i64 48
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = sub <16 x i16> %21, %32
  %43 = sub <16 x i16> zeroinitializer, %42
  %44 = icmp slt <16 x i16> %42, zeroinitializer
  %45 = select <16 x i1> %44, <16 x i16> %43, <16 x i16> %42
  %46 = sub <16 x i16> %24, %35
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = sub <16 x i16> %27, %38
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %30, %41
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = add <16 x i16> %49, %45
  %59 = add <16 x i16> %58, %53
  %60 = add <16 x i16> %59, %57
  %61 = shufflevector <16 x i16> %60, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %62 = shufflevector <16 x i16> %60, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = bitcast <16 x i16> %61 to <8 x i32>
  %64 = bitcast <16 x i16> %62 to <8 x i32>
  %65 = add <8 x i32> %19, %63
  %66 = add <8 x i32> %65, %64
  %67 = getelementptr inbounds i16, i16* %18, i64 64
  %68 = getelementptr inbounds i16, i16* %17, i64 64
  %69 = bitcast i16* %67 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %18, i64 80
  %72 = bitcast i16* %71 to <16 x i16>*
  %73 = load <16 x i16>, <16 x i16>* %72, align 1
  %74 = getelementptr inbounds i16, i16* %18, i64 96
  %75 = bitcast i16* %74 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 1
  %77 = getelementptr inbounds i16, i16* %18, i64 112
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = bitcast i16* %68 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %17, i64 80
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %17, i64 96
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %17, i64 112
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = sub <16 x i16> %70, %81
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = sub <16 x i16> %73, %84
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %76, %87
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %79, %90
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = add <16 x i16> %98, %94
  %108 = add <16 x i16> %107, %102
  %109 = add <16 x i16> %108, %106
  %110 = shufflevector <16 x i16> %109, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %111 = shufflevector <16 x i16> %109, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = bitcast <16 x i16> %110 to <8 x i32>
  %113 = bitcast <16 x i16> %111 to <8 x i32>
  %114 = add <8 x i32> %66, %112
  %115 = add <8 x i32> %114, %113
  %116 = getelementptr inbounds i16, i16* %18, i64 %13
  %117 = getelementptr inbounds i16, i16* %17, i64 %14
  %118 = add nuw nsw i32 %16, 1
  %119 = icmp eq i32 %118, 32
  br i1 %119, label %120, label %15

120:                                              ; preds = %15
  %121 = bitcast <8 x i32> %115 to <32 x i8>
  %122 = shufflevector <32 x i8> %121, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %123 = bitcast <32 x i8> %122 to <8 x i32>
  %124 = add <8 x i32> %115, %123
  %125 = bitcast <8 x i32> %124 to <4 x i64>
  %126 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %127 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %128 = bitcast <2 x i64> %126 to <4 x i32>
  %129 = bitcast <2 x i64> %127 to <4 x i32>
  %130 = add <4 x i32> %129, %128
  %131 = bitcast <4 x i32> %130 to <16 x i8>
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <4 x i32>
  %134 = add <4 x i32> %130, %133
  %135 = extractelement <4 x i32> %134, i32 0
  %136 = shl i32 %135, 1
  ret i32 %136
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad_skip_128x128_avx2(i8*, i32, i8*, i32) local_unnamed_addr #0 {
  %5 = shl nsw i32 %1, 1
  %6 = shl nsw i32 %3, 1
  %7 = ptrtoint i8* %2 to i64
  %8 = shl i64 %7, 1
  %9 = inttoptr i64 %8 to i16*
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  %13 = sext i32 %5 to i64
  %14 = sext i32 %6 to i64
  br label %15

15:                                               ; preds = %15, %4
  %16 = phi i32 [ 0, %4 ], [ %118, %15 ]
  %17 = phi i16* [ %9, %4 ], [ %117, %15 ]
  %18 = phi i16* [ %12, %4 ], [ %116, %15 ]
  %19 = phi <8 x i32> [ zeroinitializer, %4 ], [ %115, %15 ]
  %20 = bitcast i16* %18 to <16 x i16>*
  %21 = load <16 x i16>, <16 x i16>* %20, align 1
  %22 = getelementptr inbounds i16, i16* %18, i64 16
  %23 = bitcast i16* %22 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 1
  %25 = getelementptr inbounds i16, i16* %18, i64 32
  %26 = bitcast i16* %25 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %18, i64 48
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = bitcast i16* %17 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %17, i64 16
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %17, i64 32
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %17, i64 48
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = sub <16 x i16> %21, %32
  %43 = sub <16 x i16> zeroinitializer, %42
  %44 = icmp slt <16 x i16> %42, zeroinitializer
  %45 = select <16 x i1> %44, <16 x i16> %43, <16 x i16> %42
  %46 = sub <16 x i16> %24, %35
  %47 = sub <16 x i16> zeroinitializer, %46
  %48 = icmp slt <16 x i16> %46, zeroinitializer
  %49 = select <16 x i1> %48, <16 x i16> %47, <16 x i16> %46
  %50 = sub <16 x i16> %27, %38
  %51 = sub <16 x i16> zeroinitializer, %50
  %52 = icmp slt <16 x i16> %50, zeroinitializer
  %53 = select <16 x i1> %52, <16 x i16> %51, <16 x i16> %50
  %54 = sub <16 x i16> %30, %41
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = add <16 x i16> %49, %45
  %59 = add <16 x i16> %58, %53
  %60 = add <16 x i16> %59, %57
  %61 = shufflevector <16 x i16> %60, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %62 = shufflevector <16 x i16> %60, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %63 = bitcast <16 x i16> %61 to <8 x i32>
  %64 = bitcast <16 x i16> %62 to <8 x i32>
  %65 = add <8 x i32> %19, %63
  %66 = add <8 x i32> %65, %64
  %67 = getelementptr inbounds i16, i16* %18, i64 64
  %68 = getelementptr inbounds i16, i16* %17, i64 64
  %69 = bitcast i16* %67 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 1
  %71 = getelementptr inbounds i16, i16* %18, i64 80
  %72 = bitcast i16* %71 to <16 x i16>*
  %73 = load <16 x i16>, <16 x i16>* %72, align 1
  %74 = getelementptr inbounds i16, i16* %18, i64 96
  %75 = bitcast i16* %74 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 1
  %77 = getelementptr inbounds i16, i16* %18, i64 112
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = bitcast i16* %68 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %17, i64 80
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %17, i64 96
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %17, i64 112
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = sub <16 x i16> %70, %81
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = sub <16 x i16> %73, %84
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %76, %87
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = sub <16 x i16> %79, %90
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = add <16 x i16> %98, %94
  %108 = add <16 x i16> %107, %102
  %109 = add <16 x i16> %108, %106
  %110 = shufflevector <16 x i16> %109, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %111 = shufflevector <16 x i16> %109, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %112 = bitcast <16 x i16> %110 to <8 x i32>
  %113 = bitcast <16 x i16> %111 to <8 x i32>
  %114 = add <8 x i32> %66, %112
  %115 = add <8 x i32> %114, %113
  %116 = getelementptr inbounds i16, i16* %18, i64 %13
  %117 = getelementptr inbounds i16, i16* %17, i64 %14
  %118 = add nuw nsw i32 %16, 1
  %119 = icmp eq i32 %118, 64
  br i1 %119, label %120, label %15

120:                                              ; preds = %15
  %121 = bitcast <8 x i32> %115 to <32 x i8>
  %122 = shufflevector <32 x i8> %121, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %123 = bitcast <32 x i8> %122 to <8 x i32>
  %124 = add <8 x i32> %115, %123
  %125 = bitcast <8 x i32> %124 to <4 x i64>
  %126 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %127 = shufflevector <4 x i64> %125, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %128 = bitcast <2 x i64> %126 to <4 x i32>
  %129 = bitcast <2 x i64> %127 to <4 x i32>
  %130 = add <4 x i32> %129, %128
  %131 = bitcast <4 x i32> %130 to <16 x i8>
  %132 = shufflevector <16 x i8> %131, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %133 = bitcast <16 x i8> %132 to <4 x i32>
  %134 = add <4 x i32> %130, %133
  %135 = extractelement <4 x i32> %134, i32 0
  %136 = shl i32 %135, 1
  ret i32 %136
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x4_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = inttoptr i64 %7 to <16 x i16>*
  %16 = load <16 x i16>, <16 x i16>* %15, align 2
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds i16, i16* %8, i64 %17
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = shl nsw i32 %1, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %8, i64 %22
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = mul nsw i32 %1, 3
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i16, i16* %8, i64 %27
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 2
  %31 = inttoptr i64 %10 to <4 x i64>*
  %32 = load <4 x i64>, <4 x i64>* %31, align 2
  %33 = sext i32 %3 to i64
  %34 = getelementptr inbounds i16, i16* %11, i64 %33
  %35 = bitcast i16* %34 to <4 x i64>*
  %36 = load <4 x i64>, <4 x i64>* %35, align 2
  %37 = shl nsw i32 %3, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %11, i64 %38
  %40 = bitcast i16* %39 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 2
  %42 = mul nsw i32 %3, 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %11, i64 %43
  %45 = bitcast i16* %44 to <4 x i64>*
  %46 = load <4 x i64>, <4 x i64>* %45, align 2
  %47 = icmp eq i64 %13, 0
  br i1 %47, label %72, label %48

48:                                               ; preds = %5
  %49 = inttoptr i64 %13 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 2
  %51 = bitcast <4 x i64> %32 to <16 x i16>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %51, <16 x i16> %50) #6
  %53 = bitcast <16 x i16> %52 to <4 x i64>
  %54 = getelementptr inbounds i16, i16* %14, i64 16
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 2
  %57 = bitcast <4 x i64> %36 to <16 x i16>
  %58 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %57, <16 x i16> %56) #6
  %59 = bitcast <16 x i16> %58 to <4 x i64>
  %60 = getelementptr inbounds i16, i16* %14, i64 32
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 2
  %63 = bitcast <4 x i64> %41 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %63, <16 x i16> %62) #6
  %65 = bitcast <16 x i16> %64 to <4 x i64>
  %66 = getelementptr inbounds i16, i16* %14, i64 48
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = bitcast <4 x i64> %46 to <16 x i16>
  %70 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %69, <16 x i16> %68) #6
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  br label %72

72:                                               ; preds = %5, %48
  %73 = phi <4 x i64> [ %46, %5 ], [ %71, %48 ]
  %74 = phi <4 x i64> [ %41, %5 ], [ %65, %48 ]
  %75 = phi <4 x i64> [ %36, %5 ], [ %59, %48 ]
  %76 = phi <4 x i64> [ %32, %5 ], [ %53, %48 ]
  %77 = bitcast <4 x i64> %76 to <16 x i16>
  %78 = sub <16 x i16> %16, %77
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = bitcast <4 x i64> %75 to <16 x i16>
  %83 = sub <16 x i16> %20, %82
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = bitcast <4 x i64> %74 to <16 x i16>
  %88 = sub <16 x i16> %25, %87
  %89 = sub <16 x i16> zeroinitializer, %88
  %90 = icmp slt <16 x i16> %88, zeroinitializer
  %91 = select <16 x i1> %90, <16 x i16> %89, <16 x i16> %88
  %92 = bitcast <4 x i64> %73 to <16 x i16>
  %93 = sub <16 x i16> %30, %92
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = add <16 x i16> %91, %96
  %98 = add <16 x i16> %97, %86
  %99 = add <16 x i16> %98, %81
  %100 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i16> %100 to <8 x i32>
  %103 = bitcast <16 x i16> %101 to <8 x i32>
  %104 = add <8 x i32> %102, %103
  %105 = bitcast <8 x i32> %104 to <32 x i8>
  %106 = shufflevector <32 x i8> %105, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %107 = bitcast <32 x i8> %106 to <8 x i32>
  %108 = add <8 x i32> %104, %107
  %109 = bitcast <8 x i32> %108 to <4 x i64>
  %110 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %111 = shufflevector <4 x i64> %109, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %112 = bitcast <2 x i64> %110 to <4 x i32>
  %113 = bitcast <2 x i64> %111 to <4 x i32>
  %114 = add <4 x i32> %113, %112
  %115 = bitcast <4 x i32> %114 to <16 x i8>
  %116 = shufflevector <16 x i8> %115, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %117 = bitcast <16 x i8> %116 to <4 x i32>
  %118 = add <4 x i32> %114, %117
  %119 = extractelement <4 x i32> %118, i32 0
  ret i32 %119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x8_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = inttoptr i64 %7 to <16 x i16>*
  %16 = load <16 x i16>, <16 x i16>* %15, align 2
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds i16, i16* %8, i64 %17
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = shl nsw i32 %1, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %8, i64 %22
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = mul nsw i32 %1, 3
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i16, i16* %8, i64 %27
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 2
  %31 = inttoptr i64 %10 to <4 x i64>*
  %32 = load <4 x i64>, <4 x i64>* %31, align 2
  %33 = sext i32 %3 to i64
  %34 = getelementptr inbounds i16, i16* %11, i64 %33
  %35 = bitcast i16* %34 to <4 x i64>*
  %36 = load <4 x i64>, <4 x i64>* %35, align 2
  %37 = shl nsw i32 %3, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %11, i64 %38
  %40 = bitcast i16* %39 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 2
  %42 = mul nsw i32 %3, 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %11, i64 %43
  %45 = bitcast i16* %44 to <4 x i64>*
  %46 = load <4 x i64>, <4 x i64>* %45, align 2
  %47 = icmp eq i64 %13, 0
  br i1 %47, label %72, label %48

48:                                               ; preds = %5
  %49 = inttoptr i64 %13 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 2
  %51 = bitcast <4 x i64> %32 to <16 x i16>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %51, <16 x i16> %50) #6
  %53 = bitcast <16 x i16> %52 to <4 x i64>
  %54 = getelementptr inbounds i16, i16* %14, i64 16
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 2
  %57 = bitcast <4 x i64> %36 to <16 x i16>
  %58 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %57, <16 x i16> %56) #6
  %59 = bitcast <16 x i16> %58 to <4 x i64>
  %60 = getelementptr inbounds i16, i16* %14, i64 32
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 2
  %63 = bitcast <4 x i64> %41 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %63, <16 x i16> %62) #6
  %65 = bitcast <16 x i16> %64 to <4 x i64>
  %66 = getelementptr inbounds i16, i16* %14, i64 48
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = bitcast <4 x i64> %46 to <16 x i16>
  %70 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %69, <16 x i16> %68) #6
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  br label %72

72:                                               ; preds = %5, %48
  %73 = phi <4 x i64> [ %46, %5 ], [ %71, %48 ]
  %74 = phi <4 x i64> [ %41, %5 ], [ %65, %48 ]
  %75 = phi <4 x i64> [ %36, %5 ], [ %59, %48 ]
  %76 = phi <4 x i64> [ %32, %5 ], [ %53, %48 ]
  %77 = bitcast <4 x i64> %76 to <16 x i16>
  %78 = sub <16 x i16> %16, %77
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = bitcast <4 x i64> %75 to <16 x i16>
  %83 = sub <16 x i16> %20, %82
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = bitcast <4 x i64> %74 to <16 x i16>
  %88 = sub <16 x i16> %25, %87
  %89 = sub <16 x i16> zeroinitializer, %88
  %90 = icmp slt <16 x i16> %88, zeroinitializer
  %91 = select <16 x i1> %90, <16 x i16> %89, <16 x i16> %88
  %92 = bitcast <4 x i64> %73 to <16 x i16>
  %93 = sub <16 x i16> %30, %92
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = add <16 x i16> %91, %96
  %98 = add <16 x i16> %97, %86
  %99 = add <16 x i16> %98, %81
  %100 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i16> %100 to <8 x i32>
  %103 = bitcast <16 x i16> %101 to <8 x i32>
  %104 = add <8 x i32> %102, %103
  %105 = shl i32 %1, 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i16, i16* %8, i64 %106
  %108 = shl i32 %3, 2
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i16, i16* %11, i64 %109
  %111 = getelementptr inbounds i16, i16* %14, i64 64
  %112 = bitcast i16* %107 to <16 x i16>*
  %113 = load <16 x i16>, <16 x i16>* %112, align 2
  %114 = getelementptr inbounds i16, i16* %107, i64 %17
  %115 = bitcast i16* %114 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 2
  %117 = getelementptr inbounds i16, i16* %107, i64 %22
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 2
  %120 = getelementptr inbounds i16, i16* %107, i64 %27
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 2
  %123 = bitcast i16* %110 to <4 x i64>*
  %124 = load <4 x i64>, <4 x i64>* %123, align 2
  %125 = getelementptr inbounds i16, i16* %110, i64 %33
  %126 = bitcast i16* %125 to <4 x i64>*
  %127 = load <4 x i64>, <4 x i64>* %126, align 2
  %128 = getelementptr inbounds i16, i16* %110, i64 %38
  %129 = bitcast i16* %128 to <4 x i64>*
  %130 = load <4 x i64>, <4 x i64>* %129, align 2
  %131 = getelementptr inbounds i16, i16* %110, i64 %43
  %132 = bitcast i16* %131 to <4 x i64>*
  %133 = load <4 x i64>, <4 x i64>* %132, align 2
  %134 = icmp eq i16* %111, null
  br i1 %134, label %159, label %135

135:                                              ; preds = %72
  %136 = bitcast i16* %111 to <16 x i16>*
  %137 = load <16 x i16>, <16 x i16>* %136, align 2
  %138 = bitcast <4 x i64> %124 to <16 x i16>
  %139 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %138, <16 x i16> %137) #6
  %140 = bitcast <16 x i16> %139 to <4 x i64>
  %141 = getelementptr inbounds i16, i16* %14, i64 80
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 2
  %144 = bitcast <4 x i64> %127 to <16 x i16>
  %145 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %144, <16 x i16> %143) #6
  %146 = bitcast <16 x i16> %145 to <4 x i64>
  %147 = getelementptr inbounds i16, i16* %14, i64 96
  %148 = bitcast i16* %147 to <16 x i16>*
  %149 = load <16 x i16>, <16 x i16>* %148, align 2
  %150 = bitcast <4 x i64> %130 to <16 x i16>
  %151 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %150, <16 x i16> %149) #6
  %152 = bitcast <16 x i16> %151 to <4 x i64>
  %153 = getelementptr inbounds i16, i16* %14, i64 112
  %154 = bitcast i16* %153 to <16 x i16>*
  %155 = load <16 x i16>, <16 x i16>* %154, align 2
  %156 = bitcast <4 x i64> %133 to <16 x i16>
  %157 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %156, <16 x i16> %155) #6
  %158 = bitcast <16 x i16> %157 to <4 x i64>
  br label %159

159:                                              ; preds = %72, %135
  %160 = phi <4 x i64> [ %133, %72 ], [ %158, %135 ]
  %161 = phi <4 x i64> [ %130, %72 ], [ %152, %135 ]
  %162 = phi <4 x i64> [ %127, %72 ], [ %146, %135 ]
  %163 = phi <4 x i64> [ %124, %72 ], [ %140, %135 ]
  %164 = bitcast <4 x i64> %163 to <16 x i16>
  %165 = sub <16 x i16> %113, %164
  %166 = sub <16 x i16> zeroinitializer, %165
  %167 = icmp slt <16 x i16> %165, zeroinitializer
  %168 = select <16 x i1> %167, <16 x i16> %166, <16 x i16> %165
  %169 = bitcast <4 x i64> %162 to <16 x i16>
  %170 = sub <16 x i16> %116, %169
  %171 = sub <16 x i16> zeroinitializer, %170
  %172 = icmp slt <16 x i16> %170, zeroinitializer
  %173 = select <16 x i1> %172, <16 x i16> %171, <16 x i16> %170
  %174 = bitcast <4 x i64> %161 to <16 x i16>
  %175 = sub <16 x i16> %119, %174
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = bitcast <4 x i64> %160 to <16 x i16>
  %180 = sub <16 x i16> %122, %179
  %181 = sub <16 x i16> zeroinitializer, %180
  %182 = icmp slt <16 x i16> %180, zeroinitializer
  %183 = select <16 x i1> %182, <16 x i16> %181, <16 x i16> %180
  %184 = add <16 x i16> %178, %183
  %185 = add <16 x i16> %184, %173
  %186 = add <16 x i16> %185, %168
  %187 = shufflevector <16 x i16> %186, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %188 = shufflevector <16 x i16> %186, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast <16 x i16> %187 to <8 x i32>
  %190 = bitcast <16 x i16> %188 to <8 x i32>
  %191 = add <8 x i32> %104, %189
  %192 = add <8 x i32> %191, %190
  %193 = bitcast <8 x i32> %192 to <32 x i8>
  %194 = shufflevector <32 x i8> %193, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %195 = bitcast <32 x i8> %194 to <8 x i32>
  %196 = add <8 x i32> %192, %195
  %197 = bitcast <8 x i32> %196 to <4 x i64>
  %198 = shufflevector <4 x i64> %197, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %199 = shufflevector <4 x i64> %197, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %200 = bitcast <2 x i64> %198 to <4 x i32>
  %201 = bitcast <2 x i64> %199 to <4 x i32>
  %202 = add <4 x i32> %201, %200
  %203 = bitcast <4 x i32> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %205 = bitcast <16 x i8> %204 to <4 x i32>
  %206 = add <4 x i32> %202, %205
  %207 = extractelement <4 x i32> %206, i32 0
  ret i32 %207
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x16_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = inttoptr i64 %7 to <16 x i16>*
  %16 = load <16 x i16>, <16 x i16>* %15, align 2
  %17 = sext i32 %1 to i64
  %18 = getelementptr inbounds i16, i16* %8, i64 %17
  %19 = bitcast i16* %18 to <16 x i16>*
  %20 = load <16 x i16>, <16 x i16>* %19, align 2
  %21 = shl nsw i32 %1, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %8, i64 %22
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 2
  %26 = mul nsw i32 %1, 3
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i16, i16* %8, i64 %27
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 2
  %31 = inttoptr i64 %10 to <4 x i64>*
  %32 = load <4 x i64>, <4 x i64>* %31, align 2
  %33 = sext i32 %3 to i64
  %34 = getelementptr inbounds i16, i16* %11, i64 %33
  %35 = bitcast i16* %34 to <4 x i64>*
  %36 = load <4 x i64>, <4 x i64>* %35, align 2
  %37 = shl nsw i32 %3, 1
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %11, i64 %38
  %40 = bitcast i16* %39 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 2
  %42 = mul nsw i32 %3, 3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i16, i16* %11, i64 %43
  %45 = bitcast i16* %44 to <4 x i64>*
  %46 = load <4 x i64>, <4 x i64>* %45, align 2
  %47 = icmp eq i64 %13, 0
  br i1 %47, label %72, label %48

48:                                               ; preds = %5
  %49 = inttoptr i64 %13 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 2
  %51 = bitcast <4 x i64> %32 to <16 x i16>
  %52 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %51, <16 x i16> %50) #6
  %53 = bitcast <16 x i16> %52 to <4 x i64>
  %54 = getelementptr inbounds i16, i16* %14, i64 16
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 2
  %57 = bitcast <4 x i64> %36 to <16 x i16>
  %58 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %57, <16 x i16> %56) #6
  %59 = bitcast <16 x i16> %58 to <4 x i64>
  %60 = getelementptr inbounds i16, i16* %14, i64 32
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 2
  %63 = bitcast <4 x i64> %41 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %63, <16 x i16> %62) #6
  %65 = bitcast <16 x i16> %64 to <4 x i64>
  %66 = getelementptr inbounds i16, i16* %14, i64 48
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 2
  %69 = bitcast <4 x i64> %46 to <16 x i16>
  %70 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %69, <16 x i16> %68) #6
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  br label %72

72:                                               ; preds = %5, %48
  %73 = phi <4 x i64> [ %46, %5 ], [ %71, %48 ]
  %74 = phi <4 x i64> [ %41, %5 ], [ %65, %48 ]
  %75 = phi <4 x i64> [ %36, %5 ], [ %59, %48 ]
  %76 = phi <4 x i64> [ %32, %5 ], [ %53, %48 ]
  %77 = bitcast <4 x i64> %76 to <16 x i16>
  %78 = sub <16 x i16> %16, %77
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = bitcast <4 x i64> %75 to <16 x i16>
  %83 = sub <16 x i16> %20, %82
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = bitcast <4 x i64> %74 to <16 x i16>
  %88 = sub <16 x i16> %25, %87
  %89 = sub <16 x i16> zeroinitializer, %88
  %90 = icmp slt <16 x i16> %88, zeroinitializer
  %91 = select <16 x i1> %90, <16 x i16> %89, <16 x i16> %88
  %92 = bitcast <4 x i64> %73 to <16 x i16>
  %93 = sub <16 x i16> %30, %92
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = add <16 x i16> %91, %96
  %98 = add <16 x i16> %97, %86
  %99 = add <16 x i16> %98, %81
  %100 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i16> %100 to <8 x i32>
  %103 = bitcast <16 x i16> %101 to <8 x i32>
  %104 = add <8 x i32> %102, %103
  %105 = shl i32 %1, 2
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i16, i16* %8, i64 %106
  %108 = shl i32 %3, 2
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i16, i16* %11, i64 %109
  %111 = getelementptr inbounds i16, i16* %14, i64 64
  %112 = bitcast i16* %107 to <16 x i16>*
  %113 = load <16 x i16>, <16 x i16>* %112, align 2
  %114 = getelementptr inbounds i16, i16* %107, i64 %17
  %115 = bitcast i16* %114 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 2
  %117 = getelementptr inbounds i16, i16* %107, i64 %22
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 2
  %120 = getelementptr inbounds i16, i16* %107, i64 %27
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 2
  %123 = bitcast i16* %110 to <16 x i16>*
  %124 = load <16 x i16>, <16 x i16>* %123, align 2
  %125 = getelementptr inbounds i16, i16* %110, i64 %33
  %126 = bitcast i16* %125 to <16 x i16>*
  %127 = load <16 x i16>, <16 x i16>* %126, align 2
  %128 = getelementptr inbounds i16, i16* %110, i64 %38
  %129 = bitcast i16* %128 to <16 x i16>*
  %130 = load <16 x i16>, <16 x i16>* %129, align 2
  %131 = getelementptr inbounds i16, i16* %110, i64 %43
  %132 = bitcast i16* %131 to <16 x i16>*
  %133 = load <16 x i16>, <16 x i16>* %132, align 2
  %134 = bitcast i16* %111 to <16 x i16>*
  %135 = load <16 x i16>, <16 x i16>* %134, align 2
  %136 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %124, <16 x i16> %135) #6
  %137 = getelementptr inbounds i16, i16* %14, i64 80
  %138 = bitcast i16* %137 to <16 x i16>*
  %139 = load <16 x i16>, <16 x i16>* %138, align 2
  %140 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %127, <16 x i16> %139) #6
  %141 = getelementptr inbounds i16, i16* %14, i64 96
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 2
  %144 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %130, <16 x i16> %143) #6
  %145 = getelementptr inbounds i16, i16* %14, i64 112
  %146 = bitcast i16* %145 to <16 x i16>*
  %147 = load <16 x i16>, <16 x i16>* %146, align 2
  %148 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %133, <16 x i16> %147) #6
  %149 = sub <16 x i16> %113, %136
  %150 = sub <16 x i16> zeroinitializer, %149
  %151 = icmp slt <16 x i16> %149, zeroinitializer
  %152 = select <16 x i1> %151, <16 x i16> %150, <16 x i16> %149
  %153 = sub <16 x i16> %116, %140
  %154 = sub <16 x i16> zeroinitializer, %153
  %155 = icmp slt <16 x i16> %153, zeroinitializer
  %156 = select <16 x i1> %155, <16 x i16> %154, <16 x i16> %153
  %157 = sub <16 x i16> %119, %144
  %158 = sub <16 x i16> zeroinitializer, %157
  %159 = icmp slt <16 x i16> %157, zeroinitializer
  %160 = select <16 x i1> %159, <16 x i16> %158, <16 x i16> %157
  %161 = sub <16 x i16> %122, %148
  %162 = sub <16 x i16> zeroinitializer, %161
  %163 = icmp slt <16 x i16> %161, zeroinitializer
  %164 = select <16 x i1> %163, <16 x i16> %162, <16 x i16> %161
  %165 = add <16 x i16> %156, %152
  %166 = add <16 x i16> %165, %160
  %167 = add <16 x i16> %166, %164
  %168 = shufflevector <16 x i16> %167, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %169 = shufflevector <16 x i16> %167, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %170 = bitcast <16 x i16> %168 to <8 x i32>
  %171 = bitcast <16 x i16> %169 to <8 x i32>
  %172 = add <8 x i32> %104, %170
  %173 = add <8 x i32> %172, %171
  %174 = bitcast <8 x i32> %173 to <32 x i8>
  %175 = shufflevector <32 x i8> %174, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %176 = bitcast <32 x i8> %175 to <8 x i32>
  %177 = add <8 x i32> %173, %176
  %178 = bitcast <8 x i32> %177 to <4 x i64>
  %179 = shufflevector <4 x i64> %178, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %180 = shufflevector <4 x i64> %178, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %181 = bitcast <2 x i64> %179 to <4 x i32>
  %182 = bitcast <2 x i64> %180 to <4 x i32>
  %183 = add <4 x i32> %182, %181
  %184 = bitcast <4 x i32> %183 to <16 x i8>
  %185 = shufflevector <16 x i8> %184, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %186 = bitcast <16 x i8> %185 to <4 x i32>
  %187 = add <4 x i32> %183, %186
  %188 = extractelement <4 x i32> %187, i32 0
  %189 = shl i32 %1, 3
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i8, i8* %0, i64 %190
  %192 = shl i32 %3, 3
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %2, i64 %193
  %195 = getelementptr inbounds i8, i8* %4, i64 128
  %196 = ptrtoint i8* %191 to i64
  %197 = shl i64 %196, 1
  %198 = inttoptr i64 %197 to i16*
  %199 = ptrtoint i8* %194 to i64
  %200 = shl i64 %199, 1
  %201 = inttoptr i64 %200 to i16*
  %202 = ptrtoint i8* %195 to i64
  %203 = shl i64 %202, 1
  %204 = inttoptr i64 %203 to i16*
  %205 = inttoptr i64 %197 to <16 x i16>*
  %206 = load <16 x i16>, <16 x i16>* %205, align 2
  %207 = getelementptr inbounds i16, i16* %198, i64 %17
  %208 = bitcast i16* %207 to <16 x i16>*
  %209 = load <16 x i16>, <16 x i16>* %208, align 2
  %210 = getelementptr inbounds i16, i16* %198, i64 %22
  %211 = bitcast i16* %210 to <16 x i16>*
  %212 = load <16 x i16>, <16 x i16>* %211, align 2
  %213 = getelementptr inbounds i16, i16* %198, i64 %27
  %214 = bitcast i16* %213 to <16 x i16>*
  %215 = load <16 x i16>, <16 x i16>* %214, align 2
  %216 = inttoptr i64 %200 to <4 x i64>*
  %217 = load <4 x i64>, <4 x i64>* %216, align 2
  %218 = getelementptr inbounds i16, i16* %201, i64 %33
  %219 = bitcast i16* %218 to <4 x i64>*
  %220 = load <4 x i64>, <4 x i64>* %219, align 2
  %221 = getelementptr inbounds i16, i16* %201, i64 %38
  %222 = bitcast i16* %221 to <4 x i64>*
  %223 = load <4 x i64>, <4 x i64>* %222, align 2
  %224 = getelementptr inbounds i16, i16* %201, i64 %43
  %225 = bitcast i16* %224 to <4 x i64>*
  %226 = load <4 x i64>, <4 x i64>* %225, align 2
  %227 = icmp eq i64 %203, 0
  br i1 %227, label %252, label %228

228:                                              ; preds = %72
  %229 = inttoptr i64 %203 to <16 x i16>*
  %230 = load <16 x i16>, <16 x i16>* %229, align 2
  %231 = bitcast <4 x i64> %217 to <16 x i16>
  %232 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %231, <16 x i16> %230) #6
  %233 = bitcast <16 x i16> %232 to <4 x i64>
  %234 = getelementptr inbounds i16, i16* %204, i64 16
  %235 = bitcast i16* %234 to <16 x i16>*
  %236 = load <16 x i16>, <16 x i16>* %235, align 2
  %237 = bitcast <4 x i64> %220 to <16 x i16>
  %238 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %237, <16 x i16> %236) #6
  %239 = bitcast <16 x i16> %238 to <4 x i64>
  %240 = getelementptr inbounds i16, i16* %204, i64 32
  %241 = bitcast i16* %240 to <16 x i16>*
  %242 = load <16 x i16>, <16 x i16>* %241, align 2
  %243 = bitcast <4 x i64> %223 to <16 x i16>
  %244 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %243, <16 x i16> %242) #6
  %245 = bitcast <16 x i16> %244 to <4 x i64>
  %246 = getelementptr inbounds i16, i16* %204, i64 48
  %247 = bitcast i16* %246 to <16 x i16>*
  %248 = load <16 x i16>, <16 x i16>* %247, align 2
  %249 = bitcast <4 x i64> %226 to <16 x i16>
  %250 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %249, <16 x i16> %248) #6
  %251 = bitcast <16 x i16> %250 to <4 x i64>
  br label %252

252:                                              ; preds = %72, %228
  %253 = phi <4 x i64> [ %226, %72 ], [ %251, %228 ]
  %254 = phi <4 x i64> [ %223, %72 ], [ %245, %228 ]
  %255 = phi <4 x i64> [ %220, %72 ], [ %239, %228 ]
  %256 = phi <4 x i64> [ %217, %72 ], [ %233, %228 ]
  %257 = bitcast <4 x i64> %256 to <16 x i16>
  %258 = sub <16 x i16> %206, %257
  %259 = sub <16 x i16> zeroinitializer, %258
  %260 = icmp slt <16 x i16> %258, zeroinitializer
  %261 = select <16 x i1> %260, <16 x i16> %259, <16 x i16> %258
  %262 = bitcast <4 x i64> %255 to <16 x i16>
  %263 = sub <16 x i16> %209, %262
  %264 = sub <16 x i16> zeroinitializer, %263
  %265 = icmp slt <16 x i16> %263, zeroinitializer
  %266 = select <16 x i1> %265, <16 x i16> %264, <16 x i16> %263
  %267 = bitcast <4 x i64> %254 to <16 x i16>
  %268 = sub <16 x i16> %212, %267
  %269 = sub <16 x i16> zeroinitializer, %268
  %270 = icmp slt <16 x i16> %268, zeroinitializer
  %271 = select <16 x i1> %270, <16 x i16> %269, <16 x i16> %268
  %272 = bitcast <4 x i64> %253 to <16 x i16>
  %273 = sub <16 x i16> %215, %272
  %274 = sub <16 x i16> zeroinitializer, %273
  %275 = icmp slt <16 x i16> %273, zeroinitializer
  %276 = select <16 x i1> %275, <16 x i16> %274, <16 x i16> %273
  %277 = add <16 x i16> %271, %276
  %278 = add <16 x i16> %277, %266
  %279 = add <16 x i16> %278, %261
  %280 = shufflevector <16 x i16> %279, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %281 = shufflevector <16 x i16> %279, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %282 = bitcast <16 x i16> %280 to <8 x i32>
  %283 = bitcast <16 x i16> %281 to <8 x i32>
  %284 = add <8 x i32> %282, %283
  %285 = getelementptr inbounds i16, i16* %198, i64 %106
  %286 = getelementptr inbounds i16, i16* %201, i64 %109
  %287 = getelementptr inbounds i16, i16* %204, i64 64
  %288 = bitcast i16* %285 to <16 x i16>*
  %289 = load <16 x i16>, <16 x i16>* %288, align 2
  %290 = getelementptr inbounds i16, i16* %285, i64 %17
  %291 = bitcast i16* %290 to <16 x i16>*
  %292 = load <16 x i16>, <16 x i16>* %291, align 2
  %293 = getelementptr inbounds i16, i16* %285, i64 %22
  %294 = bitcast i16* %293 to <16 x i16>*
  %295 = load <16 x i16>, <16 x i16>* %294, align 2
  %296 = getelementptr inbounds i16, i16* %285, i64 %27
  %297 = bitcast i16* %296 to <16 x i16>*
  %298 = load <16 x i16>, <16 x i16>* %297, align 2
  %299 = bitcast i16* %286 to <16 x i16>*
  %300 = load <16 x i16>, <16 x i16>* %299, align 2
  %301 = getelementptr inbounds i16, i16* %286, i64 %33
  %302 = bitcast i16* %301 to <16 x i16>*
  %303 = load <16 x i16>, <16 x i16>* %302, align 2
  %304 = getelementptr inbounds i16, i16* %286, i64 %38
  %305 = bitcast i16* %304 to <16 x i16>*
  %306 = load <16 x i16>, <16 x i16>* %305, align 2
  %307 = getelementptr inbounds i16, i16* %286, i64 %43
  %308 = bitcast i16* %307 to <16 x i16>*
  %309 = load <16 x i16>, <16 x i16>* %308, align 2
  %310 = bitcast i16* %287 to <16 x i16>*
  %311 = load <16 x i16>, <16 x i16>* %310, align 2
  %312 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %300, <16 x i16> %311) #6
  %313 = getelementptr inbounds i16, i16* %204, i64 80
  %314 = bitcast i16* %313 to <16 x i16>*
  %315 = load <16 x i16>, <16 x i16>* %314, align 2
  %316 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %303, <16 x i16> %315) #6
  %317 = getelementptr inbounds i16, i16* %204, i64 96
  %318 = bitcast i16* %317 to <16 x i16>*
  %319 = load <16 x i16>, <16 x i16>* %318, align 2
  %320 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %306, <16 x i16> %319) #6
  %321 = getelementptr inbounds i16, i16* %204, i64 112
  %322 = bitcast i16* %321 to <16 x i16>*
  %323 = load <16 x i16>, <16 x i16>* %322, align 2
  %324 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %309, <16 x i16> %323) #6
  %325 = sub <16 x i16> %289, %312
  %326 = sub <16 x i16> zeroinitializer, %325
  %327 = icmp slt <16 x i16> %325, zeroinitializer
  %328 = select <16 x i1> %327, <16 x i16> %326, <16 x i16> %325
  %329 = sub <16 x i16> %292, %316
  %330 = sub <16 x i16> zeroinitializer, %329
  %331 = icmp slt <16 x i16> %329, zeroinitializer
  %332 = select <16 x i1> %331, <16 x i16> %330, <16 x i16> %329
  %333 = sub <16 x i16> %295, %320
  %334 = sub <16 x i16> zeroinitializer, %333
  %335 = icmp slt <16 x i16> %333, zeroinitializer
  %336 = select <16 x i1> %335, <16 x i16> %334, <16 x i16> %333
  %337 = sub <16 x i16> %298, %324
  %338 = sub <16 x i16> zeroinitializer, %337
  %339 = icmp slt <16 x i16> %337, zeroinitializer
  %340 = select <16 x i1> %339, <16 x i16> %338, <16 x i16> %337
  %341 = add <16 x i16> %332, %328
  %342 = add <16 x i16> %341, %336
  %343 = add <16 x i16> %342, %340
  %344 = shufflevector <16 x i16> %343, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %345 = shufflevector <16 x i16> %343, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %346 = bitcast <16 x i16> %344 to <8 x i32>
  %347 = bitcast <16 x i16> %345 to <8 x i32>
  %348 = add <8 x i32> %284, %346
  %349 = add <8 x i32> %348, %347
  %350 = bitcast <8 x i32> %349 to <32 x i8>
  %351 = shufflevector <32 x i8> %350, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %352 = bitcast <32 x i8> %351 to <8 x i32>
  %353 = add <8 x i32> %349, %352
  %354 = bitcast <8 x i32> %353 to <4 x i64>
  %355 = shufflevector <4 x i64> %354, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %356 = shufflevector <4 x i64> %354, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %357 = bitcast <2 x i64> %355 to <4 x i32>
  %358 = bitcast <2 x i64> %356 to <4 x i32>
  %359 = add <4 x i32> %358, %357
  %360 = bitcast <4 x i32> %359 to <16 x i8>
  %361 = shufflevector <16 x i8> %360, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %362 = bitcast <16 x i8> %361 to <4 x i32>
  %363 = add <4 x i32> %359, %362
  %364 = extractelement <4 x i32> %363, i32 0
  %365 = add i32 %364, %188
  ret i32 %365
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x32_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #3 {
  %6 = tail call i32 @aom_highbd_sad16x16_avg_avx2(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4)
  %7 = shl i32 %1, 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = shl i32 %3, 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = getelementptr inbounds i8, i8* %4, i64 256
  %14 = tail call i32 @aom_highbd_sad16x16_avg_avx2(i8* %9, i32 %1, i8* %12, i32 %3, i8* %13)
  %15 = add i32 %14, %6
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad16x64_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #3 {
  %6 = tail call i32 @aom_highbd_sad16x16_avg_avx2(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4) #6
  %7 = shl i32 %1, 4
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = shl i32 %3, 4
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = getelementptr inbounds i8, i8* %4, i64 256
  %14 = tail call i32 @aom_highbd_sad16x16_avg_avx2(i8* %9, i32 %1, i8* %12, i32 %3, i8* %13) #6
  %15 = shl i32 %1, 5
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = shl i32 %3, 5
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %2, i64 %19
  %21 = getelementptr inbounds i8, i8* %4, i64 512
  %22 = tail call i32 @aom_highbd_sad16x16_avg_avx2(i8* %17, i32 %1, i8* %20, i32 %3, i8* %21) #6
  %23 = getelementptr inbounds i8, i8* %17, i64 %8
  %24 = getelementptr inbounds i8, i8* %20, i64 %11
  %25 = getelementptr inbounds i8, i8* %4, i64 768
  %26 = tail call i32 @aom_highbd_sad16x16_avg_avx2(i8* %23, i32 %1, i8* %24, i32 %3, i8* %25) #6
  %27 = add i32 %14, %6
  %28 = add i32 %27, %22
  %29 = add i32 %28, %26
  ret i32 %29
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x8_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  %17 = shl i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %163, %5
  %26 = phi i32 [ 0, %5 ], [ %200, %163 ]
  %27 = phi i16* [ %8, %5 ], [ %197, %163 ]
  %28 = phi i16* [ %14, %5 ], [ %199, %163 ]
  %29 = phi i16* [ %11, %5 ], [ %198, %163 ]
  %30 = phi <8 x i32> [ zeroinitializer, %5 ], [ %196, %163 ]
  %31 = bitcast i16* %27 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %27, i64 16
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %27, i64 %15
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %36, i64 16
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = bitcast i16* %29 to <4 x i64>*
  %43 = load <4 x i64>, <4 x i64>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %29, i64 16
  %45 = bitcast i16* %44 to <4 x i64>*
  %46 = load <4 x i64>, <4 x i64>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %29, i64 %16
  %48 = bitcast i16* %47 to <4 x i64>*
  %49 = load <4 x i64>, <4 x i64>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %47, i64 16
  %51 = bitcast i16* %50 to <4 x i64>*
  %52 = load <4 x i64>, <4 x i64>* %51, align 1
  %53 = icmp eq i16* %28, null
  br i1 %53, label %79, label %54

54:                                               ; preds = %25
  %55 = bitcast i16* %28 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = bitcast <4 x i64> %43 to <16 x i16>
  %58 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %57, <16 x i16> %56) #6
  %59 = bitcast <16 x i16> %58 to <4 x i64>
  %60 = getelementptr inbounds i16, i16* %28, i64 16
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = bitcast <4 x i64> %46 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %63, <16 x i16> %62) #6
  %65 = bitcast <16 x i16> %64 to <4 x i64>
  %66 = getelementptr inbounds i16, i16* %28, i64 32
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = bitcast <4 x i64> %49 to <16 x i16>
  %70 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %69, <16 x i16> %68) #6
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  %72 = getelementptr inbounds i16, i16* %28, i64 48
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = bitcast <4 x i64> %52 to <16 x i16>
  %76 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %75, <16 x i16> %74) #6
  %77 = bitcast <16 x i16> %76 to <4 x i64>
  %78 = getelementptr inbounds i16, i16* %28, i64 64
  br label %79

79:                                               ; preds = %54, %25
  %80 = phi <4 x i64> [ %52, %25 ], [ %77, %54 ]
  %81 = phi <4 x i64> [ %49, %25 ], [ %71, %54 ]
  %82 = phi <4 x i64> [ %46, %25 ], [ %65, %54 ]
  %83 = phi <4 x i64> [ %43, %25 ], [ %59, %54 ]
  %84 = phi i16* [ null, %25 ], [ %78, %54 ]
  %85 = bitcast <4 x i64> %83 to <16 x i16>
  %86 = sub <16 x i16> %32, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = bitcast <4 x i64> %82 to <16 x i16>
  %91 = sub <16 x i16> %35, %90
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = bitcast <4 x i64> %81 to <16 x i16>
  %96 = sub <16 x i16> %38, %95
  %97 = sub <16 x i16> zeroinitializer, %96
  %98 = icmp slt <16 x i16> %96, zeroinitializer
  %99 = select <16 x i1> %98, <16 x i16> %97, <16 x i16> %96
  %100 = bitcast <4 x i64> %80 to <16 x i16>
  %101 = sub <16 x i16> %41, %100
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = add <16 x i16> %99, %104
  %106 = add <16 x i16> %105, %94
  %107 = add <16 x i16> %106, %89
  %108 = shufflevector <16 x i16> %107, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %107, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i16> %108 to <8 x i32>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %30, %110
  %113 = add <8 x i32> %112, %111
  %114 = getelementptr inbounds i16, i16* %27, i64 %18
  %115 = getelementptr inbounds i16, i16* %29, i64 %20
  %116 = bitcast i16* %114 to <16 x i16>*
  %117 = load <16 x i16>, <16 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %114, i64 16
  %119 = bitcast i16* %118 to <16 x i16>*
  %120 = load <16 x i16>, <16 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %114, i64 %15
  %122 = bitcast i16* %121 to <16 x i16>*
  %123 = load <16 x i16>, <16 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %121, i64 16
  %125 = bitcast i16* %124 to <16 x i16>*
  %126 = load <16 x i16>, <16 x i16>* %125, align 1
  %127 = bitcast i16* %115 to <4 x i64>*
  %128 = load <4 x i64>, <4 x i64>* %127, align 1
  %129 = getelementptr inbounds i16, i16* %115, i64 16
  %130 = bitcast i16* %129 to <4 x i64>*
  %131 = load <4 x i64>, <4 x i64>* %130, align 1
  %132 = getelementptr inbounds i16, i16* %115, i64 %16
  %133 = bitcast i16* %132 to <4 x i64>*
  %134 = load <4 x i64>, <4 x i64>* %133, align 1
  %135 = getelementptr inbounds i16, i16* %132, i64 16
  %136 = bitcast i16* %135 to <4 x i64>*
  %137 = load <4 x i64>, <4 x i64>* %136, align 1
  %138 = icmp eq i16* %84, null
  br i1 %138, label %163, label %139

139:                                              ; preds = %79
  %140 = bitcast i16* %84 to <16 x i16>*
  %141 = load <16 x i16>, <16 x i16>* %140, align 1
  %142 = bitcast <4 x i64> %128 to <16 x i16>
  %143 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %142, <16 x i16> %141) #6
  %144 = bitcast <16 x i16> %143 to <4 x i64>
  %145 = getelementptr inbounds i16, i16* %84, i64 16
  %146 = bitcast i16* %145 to <16 x i16>*
  %147 = load <16 x i16>, <16 x i16>* %146, align 1
  %148 = bitcast <4 x i64> %131 to <16 x i16>
  %149 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %148, <16 x i16> %147) #6
  %150 = bitcast <16 x i16> %149 to <4 x i64>
  %151 = getelementptr inbounds i16, i16* %84, i64 32
  %152 = bitcast i16* %151 to <16 x i16>*
  %153 = load <16 x i16>, <16 x i16>* %152, align 1
  %154 = bitcast <4 x i64> %134 to <16 x i16>
  %155 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %154, <16 x i16> %153) #6
  %156 = bitcast <16 x i16> %155 to <4 x i64>
  %157 = getelementptr inbounds i16, i16* %84, i64 48
  %158 = bitcast i16* %157 to <16 x i16>*
  %159 = load <16 x i16>, <16 x i16>* %158, align 1
  %160 = bitcast <4 x i64> %137 to <16 x i16>
  %161 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %160, <16 x i16> %159) #6
  %162 = bitcast <16 x i16> %161 to <4 x i64>
  br label %163

163:                                              ; preds = %79, %139
  %164 = phi <4 x i64> [ %137, %79 ], [ %162, %139 ]
  %165 = phi <4 x i64> [ %134, %79 ], [ %156, %139 ]
  %166 = phi <4 x i64> [ %131, %79 ], [ %150, %139 ]
  %167 = phi <4 x i64> [ %128, %79 ], [ %144, %139 ]
  %168 = bitcast <4 x i64> %167 to <16 x i16>
  %169 = sub <16 x i16> %117, %168
  %170 = sub <16 x i16> zeroinitializer, %169
  %171 = icmp slt <16 x i16> %169, zeroinitializer
  %172 = select <16 x i1> %171, <16 x i16> %170, <16 x i16> %169
  %173 = bitcast <4 x i64> %166 to <16 x i16>
  %174 = sub <16 x i16> %120, %173
  %175 = sub <16 x i16> zeroinitializer, %174
  %176 = icmp slt <16 x i16> %174, zeroinitializer
  %177 = select <16 x i1> %176, <16 x i16> %175, <16 x i16> %174
  %178 = bitcast <4 x i64> %165 to <16 x i16>
  %179 = sub <16 x i16> %123, %178
  %180 = sub <16 x i16> zeroinitializer, %179
  %181 = icmp slt <16 x i16> %179, zeroinitializer
  %182 = select <16 x i1> %181, <16 x i16> %180, <16 x i16> %179
  %183 = bitcast <4 x i64> %164 to <16 x i16>
  %184 = sub <16 x i16> %126, %183
  %185 = sub <16 x i16> zeroinitializer, %184
  %186 = icmp slt <16 x i16> %184, zeroinitializer
  %187 = select <16 x i1> %186, <16 x i16> %185, <16 x i16> %184
  %188 = add <16 x i16> %182, %187
  %189 = add <16 x i16> %188, %177
  %190 = add <16 x i16> %189, %172
  %191 = shufflevector <16 x i16> %190, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %192 = shufflevector <16 x i16> %190, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %193 = bitcast <16 x i16> %191 to <8 x i32>
  %194 = bitcast <16 x i16> %192 to <8 x i32>
  %195 = add <8 x i32> %113, %193
  %196 = add <8 x i32> %195, %194
  %197 = getelementptr inbounds i16, i16* %27, i64 %22
  %198 = getelementptr inbounds i16, i16* %29, i64 %24
  %199 = getelementptr inbounds i16, i16* %28, i64 128
  %200 = add nuw nsw i32 %26, 1
  %201 = icmp eq i32 %200, 2
  br i1 %201, label %202, label %25

202:                                              ; preds = %163
  %203 = bitcast <8 x i32> %196 to <32 x i8>
  %204 = shufflevector <32 x i8> %203, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %205 = bitcast <32 x i8> %204 to <8 x i32>
  %206 = add <8 x i32> %196, %205
  %207 = bitcast <8 x i32> %206 to <4 x i64>
  %208 = shufflevector <4 x i64> %207, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %209 = shufflevector <4 x i64> %207, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = bitcast <2 x i64> %208 to <4 x i32>
  %211 = bitcast <2 x i64> %209 to <4 x i32>
  %212 = add <4 x i32> %211, %210
  %213 = bitcast <4 x i32> %212 to <16 x i8>
  %214 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = bitcast <16 x i8> %214 to <4 x i32>
  %216 = add <4 x i32> %212, %215
  %217 = extractelement <4 x i32> %216, i32 0
  ret i32 %217
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x16_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  %17 = shl i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %163, %5
  %26 = phi i32 [ 0, %5 ], [ %200, %163 ]
  %27 = phi i16* [ %8, %5 ], [ %197, %163 ]
  %28 = phi i16* [ %14, %5 ], [ %199, %163 ]
  %29 = phi i16* [ %11, %5 ], [ %198, %163 ]
  %30 = phi <8 x i32> [ zeroinitializer, %5 ], [ %196, %163 ]
  %31 = bitcast i16* %27 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %27, i64 16
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %27, i64 %15
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %36, i64 16
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = bitcast i16* %29 to <4 x i64>*
  %43 = load <4 x i64>, <4 x i64>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %29, i64 16
  %45 = bitcast i16* %44 to <4 x i64>*
  %46 = load <4 x i64>, <4 x i64>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %29, i64 %16
  %48 = bitcast i16* %47 to <4 x i64>*
  %49 = load <4 x i64>, <4 x i64>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %47, i64 16
  %51 = bitcast i16* %50 to <4 x i64>*
  %52 = load <4 x i64>, <4 x i64>* %51, align 1
  %53 = icmp eq i16* %28, null
  br i1 %53, label %79, label %54

54:                                               ; preds = %25
  %55 = bitcast i16* %28 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = bitcast <4 x i64> %43 to <16 x i16>
  %58 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %57, <16 x i16> %56) #6
  %59 = bitcast <16 x i16> %58 to <4 x i64>
  %60 = getelementptr inbounds i16, i16* %28, i64 16
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = bitcast <4 x i64> %46 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %63, <16 x i16> %62) #6
  %65 = bitcast <16 x i16> %64 to <4 x i64>
  %66 = getelementptr inbounds i16, i16* %28, i64 32
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = bitcast <4 x i64> %49 to <16 x i16>
  %70 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %69, <16 x i16> %68) #6
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  %72 = getelementptr inbounds i16, i16* %28, i64 48
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = bitcast <4 x i64> %52 to <16 x i16>
  %76 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %75, <16 x i16> %74) #6
  %77 = bitcast <16 x i16> %76 to <4 x i64>
  %78 = getelementptr inbounds i16, i16* %28, i64 64
  br label %79

79:                                               ; preds = %54, %25
  %80 = phi <4 x i64> [ %52, %25 ], [ %77, %54 ]
  %81 = phi <4 x i64> [ %49, %25 ], [ %71, %54 ]
  %82 = phi <4 x i64> [ %46, %25 ], [ %65, %54 ]
  %83 = phi <4 x i64> [ %43, %25 ], [ %59, %54 ]
  %84 = phi i16* [ null, %25 ], [ %78, %54 ]
  %85 = bitcast <4 x i64> %83 to <16 x i16>
  %86 = sub <16 x i16> %32, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = bitcast <4 x i64> %82 to <16 x i16>
  %91 = sub <16 x i16> %35, %90
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = bitcast <4 x i64> %81 to <16 x i16>
  %96 = sub <16 x i16> %38, %95
  %97 = sub <16 x i16> zeroinitializer, %96
  %98 = icmp slt <16 x i16> %96, zeroinitializer
  %99 = select <16 x i1> %98, <16 x i16> %97, <16 x i16> %96
  %100 = bitcast <4 x i64> %80 to <16 x i16>
  %101 = sub <16 x i16> %41, %100
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = add <16 x i16> %99, %104
  %106 = add <16 x i16> %105, %94
  %107 = add <16 x i16> %106, %89
  %108 = shufflevector <16 x i16> %107, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %107, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i16> %108 to <8 x i32>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %30, %110
  %113 = add <8 x i32> %112, %111
  %114 = getelementptr inbounds i16, i16* %27, i64 %18
  %115 = getelementptr inbounds i16, i16* %29, i64 %20
  %116 = bitcast i16* %114 to <16 x i16>*
  %117 = load <16 x i16>, <16 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %114, i64 16
  %119 = bitcast i16* %118 to <16 x i16>*
  %120 = load <16 x i16>, <16 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %114, i64 %15
  %122 = bitcast i16* %121 to <16 x i16>*
  %123 = load <16 x i16>, <16 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %121, i64 16
  %125 = bitcast i16* %124 to <16 x i16>*
  %126 = load <16 x i16>, <16 x i16>* %125, align 1
  %127 = bitcast i16* %115 to <4 x i64>*
  %128 = load <4 x i64>, <4 x i64>* %127, align 1
  %129 = getelementptr inbounds i16, i16* %115, i64 16
  %130 = bitcast i16* %129 to <4 x i64>*
  %131 = load <4 x i64>, <4 x i64>* %130, align 1
  %132 = getelementptr inbounds i16, i16* %115, i64 %16
  %133 = bitcast i16* %132 to <4 x i64>*
  %134 = load <4 x i64>, <4 x i64>* %133, align 1
  %135 = getelementptr inbounds i16, i16* %132, i64 16
  %136 = bitcast i16* %135 to <4 x i64>*
  %137 = load <4 x i64>, <4 x i64>* %136, align 1
  %138 = icmp eq i16* %84, null
  br i1 %138, label %163, label %139

139:                                              ; preds = %79
  %140 = bitcast i16* %84 to <16 x i16>*
  %141 = load <16 x i16>, <16 x i16>* %140, align 1
  %142 = bitcast <4 x i64> %128 to <16 x i16>
  %143 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %142, <16 x i16> %141) #6
  %144 = bitcast <16 x i16> %143 to <4 x i64>
  %145 = getelementptr inbounds i16, i16* %84, i64 16
  %146 = bitcast i16* %145 to <16 x i16>*
  %147 = load <16 x i16>, <16 x i16>* %146, align 1
  %148 = bitcast <4 x i64> %131 to <16 x i16>
  %149 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %148, <16 x i16> %147) #6
  %150 = bitcast <16 x i16> %149 to <4 x i64>
  %151 = getelementptr inbounds i16, i16* %84, i64 32
  %152 = bitcast i16* %151 to <16 x i16>*
  %153 = load <16 x i16>, <16 x i16>* %152, align 1
  %154 = bitcast <4 x i64> %134 to <16 x i16>
  %155 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %154, <16 x i16> %153) #6
  %156 = bitcast <16 x i16> %155 to <4 x i64>
  %157 = getelementptr inbounds i16, i16* %84, i64 48
  %158 = bitcast i16* %157 to <16 x i16>*
  %159 = load <16 x i16>, <16 x i16>* %158, align 1
  %160 = bitcast <4 x i64> %137 to <16 x i16>
  %161 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %160, <16 x i16> %159) #6
  %162 = bitcast <16 x i16> %161 to <4 x i64>
  br label %163

163:                                              ; preds = %79, %139
  %164 = phi <4 x i64> [ %137, %79 ], [ %162, %139 ]
  %165 = phi <4 x i64> [ %134, %79 ], [ %156, %139 ]
  %166 = phi <4 x i64> [ %131, %79 ], [ %150, %139 ]
  %167 = phi <4 x i64> [ %128, %79 ], [ %144, %139 ]
  %168 = bitcast <4 x i64> %167 to <16 x i16>
  %169 = sub <16 x i16> %117, %168
  %170 = sub <16 x i16> zeroinitializer, %169
  %171 = icmp slt <16 x i16> %169, zeroinitializer
  %172 = select <16 x i1> %171, <16 x i16> %170, <16 x i16> %169
  %173 = bitcast <4 x i64> %166 to <16 x i16>
  %174 = sub <16 x i16> %120, %173
  %175 = sub <16 x i16> zeroinitializer, %174
  %176 = icmp slt <16 x i16> %174, zeroinitializer
  %177 = select <16 x i1> %176, <16 x i16> %175, <16 x i16> %174
  %178 = bitcast <4 x i64> %165 to <16 x i16>
  %179 = sub <16 x i16> %123, %178
  %180 = sub <16 x i16> zeroinitializer, %179
  %181 = icmp slt <16 x i16> %179, zeroinitializer
  %182 = select <16 x i1> %181, <16 x i16> %180, <16 x i16> %179
  %183 = bitcast <4 x i64> %164 to <16 x i16>
  %184 = sub <16 x i16> %126, %183
  %185 = sub <16 x i16> zeroinitializer, %184
  %186 = icmp slt <16 x i16> %184, zeroinitializer
  %187 = select <16 x i1> %186, <16 x i16> %185, <16 x i16> %184
  %188 = add <16 x i16> %182, %187
  %189 = add <16 x i16> %188, %177
  %190 = add <16 x i16> %189, %172
  %191 = shufflevector <16 x i16> %190, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %192 = shufflevector <16 x i16> %190, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %193 = bitcast <16 x i16> %191 to <8 x i32>
  %194 = bitcast <16 x i16> %192 to <8 x i32>
  %195 = add <8 x i32> %113, %193
  %196 = add <8 x i32> %195, %194
  %197 = getelementptr inbounds i16, i16* %27, i64 %22
  %198 = getelementptr inbounds i16, i16* %29, i64 %24
  %199 = getelementptr inbounds i16, i16* %28, i64 128
  %200 = add nuw nsw i32 %26, 1
  %201 = icmp eq i32 %200, 4
  br i1 %201, label %202, label %25

202:                                              ; preds = %163
  %203 = bitcast <8 x i32> %196 to <32 x i8>
  %204 = shufflevector <32 x i8> %203, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %205 = bitcast <32 x i8> %204 to <8 x i32>
  %206 = add <8 x i32> %196, %205
  %207 = bitcast <8 x i32> %206 to <4 x i64>
  %208 = shufflevector <4 x i64> %207, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %209 = shufflevector <4 x i64> %207, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = bitcast <2 x i64> %208 to <4 x i32>
  %211 = bitcast <2 x i64> %209 to <4 x i32>
  %212 = add <4 x i32> %211, %210
  %213 = bitcast <4 x i32> %212 to <16 x i8>
  %214 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = bitcast <16 x i8> %214 to <4 x i32>
  %216 = add <4 x i32> %212, %215
  %217 = extractelement <4 x i32> %216, i32 0
  ret i32 %217
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x32_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  %17 = shl i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  br label %25

25:                                               ; preds = %163, %5
  %26 = phi i32 [ 0, %5 ], [ %200, %163 ]
  %27 = phi i16* [ %8, %5 ], [ %197, %163 ]
  %28 = phi i16* [ %14, %5 ], [ %199, %163 ]
  %29 = phi i16* [ %11, %5 ], [ %198, %163 ]
  %30 = phi <8 x i32> [ zeroinitializer, %5 ], [ %196, %163 ]
  %31 = bitcast i16* %27 to <16 x i16>*
  %32 = load <16 x i16>, <16 x i16>* %31, align 1
  %33 = getelementptr inbounds i16, i16* %27, i64 16
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %27, i64 %15
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %36, i64 16
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = bitcast i16* %29 to <4 x i64>*
  %43 = load <4 x i64>, <4 x i64>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %29, i64 16
  %45 = bitcast i16* %44 to <4 x i64>*
  %46 = load <4 x i64>, <4 x i64>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %29, i64 %16
  %48 = bitcast i16* %47 to <4 x i64>*
  %49 = load <4 x i64>, <4 x i64>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %47, i64 16
  %51 = bitcast i16* %50 to <4 x i64>*
  %52 = load <4 x i64>, <4 x i64>* %51, align 1
  %53 = icmp eq i16* %28, null
  br i1 %53, label %79, label %54

54:                                               ; preds = %25
  %55 = bitcast i16* %28 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = bitcast <4 x i64> %43 to <16 x i16>
  %58 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %57, <16 x i16> %56) #6
  %59 = bitcast <16 x i16> %58 to <4 x i64>
  %60 = getelementptr inbounds i16, i16* %28, i64 16
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = bitcast <4 x i64> %46 to <16 x i16>
  %64 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %63, <16 x i16> %62) #6
  %65 = bitcast <16 x i16> %64 to <4 x i64>
  %66 = getelementptr inbounds i16, i16* %28, i64 32
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = bitcast <4 x i64> %49 to <16 x i16>
  %70 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %69, <16 x i16> %68) #6
  %71 = bitcast <16 x i16> %70 to <4 x i64>
  %72 = getelementptr inbounds i16, i16* %28, i64 48
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = bitcast <4 x i64> %52 to <16 x i16>
  %76 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %75, <16 x i16> %74) #6
  %77 = bitcast <16 x i16> %76 to <4 x i64>
  %78 = getelementptr inbounds i16, i16* %28, i64 64
  br label %79

79:                                               ; preds = %54, %25
  %80 = phi <4 x i64> [ %52, %25 ], [ %77, %54 ]
  %81 = phi <4 x i64> [ %49, %25 ], [ %71, %54 ]
  %82 = phi <4 x i64> [ %46, %25 ], [ %65, %54 ]
  %83 = phi <4 x i64> [ %43, %25 ], [ %59, %54 ]
  %84 = phi i16* [ null, %25 ], [ %78, %54 ]
  %85 = bitcast <4 x i64> %83 to <16 x i16>
  %86 = sub <16 x i16> %32, %85
  %87 = sub <16 x i16> zeroinitializer, %86
  %88 = icmp slt <16 x i16> %86, zeroinitializer
  %89 = select <16 x i1> %88, <16 x i16> %87, <16 x i16> %86
  %90 = bitcast <4 x i64> %82 to <16 x i16>
  %91 = sub <16 x i16> %35, %90
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = bitcast <4 x i64> %81 to <16 x i16>
  %96 = sub <16 x i16> %38, %95
  %97 = sub <16 x i16> zeroinitializer, %96
  %98 = icmp slt <16 x i16> %96, zeroinitializer
  %99 = select <16 x i1> %98, <16 x i16> %97, <16 x i16> %96
  %100 = bitcast <4 x i64> %80 to <16 x i16>
  %101 = sub <16 x i16> %41, %100
  %102 = sub <16 x i16> zeroinitializer, %101
  %103 = icmp slt <16 x i16> %101, zeroinitializer
  %104 = select <16 x i1> %103, <16 x i16> %102, <16 x i16> %101
  %105 = add <16 x i16> %99, %104
  %106 = add <16 x i16> %105, %94
  %107 = add <16 x i16> %106, %89
  %108 = shufflevector <16 x i16> %107, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %109 = shufflevector <16 x i16> %107, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %110 = bitcast <16 x i16> %108 to <8 x i32>
  %111 = bitcast <16 x i16> %109 to <8 x i32>
  %112 = add <8 x i32> %30, %110
  %113 = add <8 x i32> %112, %111
  %114 = getelementptr inbounds i16, i16* %27, i64 %18
  %115 = getelementptr inbounds i16, i16* %29, i64 %20
  %116 = bitcast i16* %114 to <16 x i16>*
  %117 = load <16 x i16>, <16 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %114, i64 16
  %119 = bitcast i16* %118 to <16 x i16>*
  %120 = load <16 x i16>, <16 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %114, i64 %15
  %122 = bitcast i16* %121 to <16 x i16>*
  %123 = load <16 x i16>, <16 x i16>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %121, i64 16
  %125 = bitcast i16* %124 to <16 x i16>*
  %126 = load <16 x i16>, <16 x i16>* %125, align 1
  %127 = bitcast i16* %115 to <4 x i64>*
  %128 = load <4 x i64>, <4 x i64>* %127, align 1
  %129 = getelementptr inbounds i16, i16* %115, i64 16
  %130 = bitcast i16* %129 to <4 x i64>*
  %131 = load <4 x i64>, <4 x i64>* %130, align 1
  %132 = getelementptr inbounds i16, i16* %115, i64 %16
  %133 = bitcast i16* %132 to <4 x i64>*
  %134 = load <4 x i64>, <4 x i64>* %133, align 1
  %135 = getelementptr inbounds i16, i16* %132, i64 16
  %136 = bitcast i16* %135 to <4 x i64>*
  %137 = load <4 x i64>, <4 x i64>* %136, align 1
  %138 = icmp eq i16* %84, null
  br i1 %138, label %163, label %139

139:                                              ; preds = %79
  %140 = bitcast i16* %84 to <16 x i16>*
  %141 = load <16 x i16>, <16 x i16>* %140, align 1
  %142 = bitcast <4 x i64> %128 to <16 x i16>
  %143 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %142, <16 x i16> %141) #6
  %144 = bitcast <16 x i16> %143 to <4 x i64>
  %145 = getelementptr inbounds i16, i16* %84, i64 16
  %146 = bitcast i16* %145 to <16 x i16>*
  %147 = load <16 x i16>, <16 x i16>* %146, align 1
  %148 = bitcast <4 x i64> %131 to <16 x i16>
  %149 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %148, <16 x i16> %147) #6
  %150 = bitcast <16 x i16> %149 to <4 x i64>
  %151 = getelementptr inbounds i16, i16* %84, i64 32
  %152 = bitcast i16* %151 to <16 x i16>*
  %153 = load <16 x i16>, <16 x i16>* %152, align 1
  %154 = bitcast <4 x i64> %134 to <16 x i16>
  %155 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %154, <16 x i16> %153) #6
  %156 = bitcast <16 x i16> %155 to <4 x i64>
  %157 = getelementptr inbounds i16, i16* %84, i64 48
  %158 = bitcast i16* %157 to <16 x i16>*
  %159 = load <16 x i16>, <16 x i16>* %158, align 1
  %160 = bitcast <4 x i64> %137 to <16 x i16>
  %161 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %160, <16 x i16> %159) #6
  %162 = bitcast <16 x i16> %161 to <4 x i64>
  br label %163

163:                                              ; preds = %139, %79
  %164 = phi <4 x i64> [ %137, %79 ], [ %162, %139 ]
  %165 = phi <4 x i64> [ %134, %79 ], [ %156, %139 ]
  %166 = phi <4 x i64> [ %131, %79 ], [ %150, %139 ]
  %167 = phi <4 x i64> [ %128, %79 ], [ %144, %139 ]
  %168 = bitcast <4 x i64> %167 to <16 x i16>
  %169 = sub <16 x i16> %117, %168
  %170 = sub <16 x i16> zeroinitializer, %169
  %171 = icmp slt <16 x i16> %169, zeroinitializer
  %172 = select <16 x i1> %171, <16 x i16> %170, <16 x i16> %169
  %173 = bitcast <4 x i64> %166 to <16 x i16>
  %174 = sub <16 x i16> %120, %173
  %175 = sub <16 x i16> zeroinitializer, %174
  %176 = icmp slt <16 x i16> %174, zeroinitializer
  %177 = select <16 x i1> %176, <16 x i16> %175, <16 x i16> %174
  %178 = bitcast <4 x i64> %165 to <16 x i16>
  %179 = sub <16 x i16> %123, %178
  %180 = sub <16 x i16> zeroinitializer, %179
  %181 = icmp slt <16 x i16> %179, zeroinitializer
  %182 = select <16 x i1> %181, <16 x i16> %180, <16 x i16> %179
  %183 = bitcast <4 x i64> %164 to <16 x i16>
  %184 = sub <16 x i16> %126, %183
  %185 = sub <16 x i16> zeroinitializer, %184
  %186 = icmp slt <16 x i16> %184, zeroinitializer
  %187 = select <16 x i1> %186, <16 x i16> %185, <16 x i16> %184
  %188 = add <16 x i16> %182, %187
  %189 = add <16 x i16> %188, %177
  %190 = add <16 x i16> %189, %172
  %191 = shufflevector <16 x i16> %190, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %192 = shufflevector <16 x i16> %190, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %193 = bitcast <16 x i16> %191 to <8 x i32>
  %194 = bitcast <16 x i16> %192 to <8 x i32>
  %195 = add <8 x i32> %113, %193
  %196 = add <8 x i32> %195, %194
  %197 = getelementptr inbounds i16, i16* %27, i64 %22
  %198 = getelementptr inbounds i16, i16* %29, i64 %24
  %199 = getelementptr inbounds i16, i16* %28, i64 128
  %200 = add nuw nsw i32 %26, 1
  %201 = icmp eq i32 %200, 4
  br i1 %201, label %202, label %25

202:                                              ; preds = %163
  %203 = bitcast <8 x i32> %196 to <32 x i8>
  %204 = shufflevector <32 x i8> %203, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %205 = bitcast <32 x i8> %204 to <8 x i32>
  %206 = add <8 x i32> %196, %205
  %207 = bitcast <8 x i32> %206 to <4 x i64>
  %208 = shufflevector <4 x i64> %207, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %209 = shufflevector <4 x i64> %207, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %210 = bitcast <2 x i64> %208 to <4 x i32>
  %211 = bitcast <2 x i64> %209 to <4 x i32>
  %212 = add <4 x i32> %211, %210
  %213 = bitcast <4 x i32> %212 to <16 x i8>
  %214 = shufflevector <16 x i8> %213, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %215 = bitcast <16 x i8> %214 to <4 x i32>
  %216 = add <4 x i32> %212, %215
  %217 = shl i32 %1, 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i8, i8* %0, i64 %218
  %220 = shl i32 %3, 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %2, i64 %221
  %223 = getelementptr inbounds i8, i8* %4, i64 512
  %224 = ptrtoint i8* %219 to i64
  %225 = shl i64 %224, 1
  %226 = inttoptr i64 %225 to i16*
  %227 = ptrtoint i8* %222 to i64
  %228 = shl i64 %227, 1
  %229 = inttoptr i64 %228 to i16*
  %230 = ptrtoint i8* %223 to i64
  %231 = shl i64 %230, 1
  %232 = inttoptr i64 %231 to i16*
  br label %233

233:                                              ; preds = %371, %202
  %234 = phi i32 [ 0, %202 ], [ %408, %371 ]
  %235 = phi i16* [ %226, %202 ], [ %405, %371 ]
  %236 = phi i16* [ %232, %202 ], [ %407, %371 ]
  %237 = phi i16* [ %229, %202 ], [ %406, %371 ]
  %238 = phi <8 x i32> [ zeroinitializer, %202 ], [ %404, %371 ]
  %239 = bitcast i16* %235 to <16 x i16>*
  %240 = load <16 x i16>, <16 x i16>* %239, align 1
  %241 = getelementptr inbounds i16, i16* %235, i64 16
  %242 = bitcast i16* %241 to <16 x i16>*
  %243 = load <16 x i16>, <16 x i16>* %242, align 1
  %244 = getelementptr inbounds i16, i16* %235, i64 %15
  %245 = bitcast i16* %244 to <16 x i16>*
  %246 = load <16 x i16>, <16 x i16>* %245, align 1
  %247 = getelementptr inbounds i16, i16* %244, i64 16
  %248 = bitcast i16* %247 to <16 x i16>*
  %249 = load <16 x i16>, <16 x i16>* %248, align 1
  %250 = bitcast i16* %237 to <4 x i64>*
  %251 = load <4 x i64>, <4 x i64>* %250, align 1
  %252 = getelementptr inbounds i16, i16* %237, i64 16
  %253 = bitcast i16* %252 to <4 x i64>*
  %254 = load <4 x i64>, <4 x i64>* %253, align 1
  %255 = getelementptr inbounds i16, i16* %237, i64 %16
  %256 = bitcast i16* %255 to <4 x i64>*
  %257 = load <4 x i64>, <4 x i64>* %256, align 1
  %258 = getelementptr inbounds i16, i16* %255, i64 16
  %259 = bitcast i16* %258 to <4 x i64>*
  %260 = load <4 x i64>, <4 x i64>* %259, align 1
  %261 = icmp eq i16* %236, null
  br i1 %261, label %287, label %262

262:                                              ; preds = %233
  %263 = bitcast i16* %236 to <16 x i16>*
  %264 = load <16 x i16>, <16 x i16>* %263, align 1
  %265 = bitcast <4 x i64> %251 to <16 x i16>
  %266 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %265, <16 x i16> %264) #6
  %267 = bitcast <16 x i16> %266 to <4 x i64>
  %268 = getelementptr inbounds i16, i16* %236, i64 16
  %269 = bitcast i16* %268 to <16 x i16>*
  %270 = load <16 x i16>, <16 x i16>* %269, align 1
  %271 = bitcast <4 x i64> %254 to <16 x i16>
  %272 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %271, <16 x i16> %270) #6
  %273 = bitcast <16 x i16> %272 to <4 x i64>
  %274 = getelementptr inbounds i16, i16* %236, i64 32
  %275 = bitcast i16* %274 to <16 x i16>*
  %276 = load <16 x i16>, <16 x i16>* %275, align 1
  %277 = bitcast <4 x i64> %257 to <16 x i16>
  %278 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %277, <16 x i16> %276) #6
  %279 = bitcast <16 x i16> %278 to <4 x i64>
  %280 = getelementptr inbounds i16, i16* %236, i64 48
  %281 = bitcast i16* %280 to <16 x i16>*
  %282 = load <16 x i16>, <16 x i16>* %281, align 1
  %283 = bitcast <4 x i64> %260 to <16 x i16>
  %284 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %283, <16 x i16> %282) #6
  %285 = bitcast <16 x i16> %284 to <4 x i64>
  %286 = getelementptr inbounds i16, i16* %236, i64 64
  br label %287

287:                                              ; preds = %262, %233
  %288 = phi <4 x i64> [ %260, %233 ], [ %285, %262 ]
  %289 = phi <4 x i64> [ %257, %233 ], [ %279, %262 ]
  %290 = phi <4 x i64> [ %254, %233 ], [ %273, %262 ]
  %291 = phi <4 x i64> [ %251, %233 ], [ %267, %262 ]
  %292 = phi i16* [ null, %233 ], [ %286, %262 ]
  %293 = bitcast <4 x i64> %291 to <16 x i16>
  %294 = sub <16 x i16> %240, %293
  %295 = sub <16 x i16> zeroinitializer, %294
  %296 = icmp slt <16 x i16> %294, zeroinitializer
  %297 = select <16 x i1> %296, <16 x i16> %295, <16 x i16> %294
  %298 = bitcast <4 x i64> %290 to <16 x i16>
  %299 = sub <16 x i16> %243, %298
  %300 = sub <16 x i16> zeroinitializer, %299
  %301 = icmp slt <16 x i16> %299, zeroinitializer
  %302 = select <16 x i1> %301, <16 x i16> %300, <16 x i16> %299
  %303 = bitcast <4 x i64> %289 to <16 x i16>
  %304 = sub <16 x i16> %246, %303
  %305 = sub <16 x i16> zeroinitializer, %304
  %306 = icmp slt <16 x i16> %304, zeroinitializer
  %307 = select <16 x i1> %306, <16 x i16> %305, <16 x i16> %304
  %308 = bitcast <4 x i64> %288 to <16 x i16>
  %309 = sub <16 x i16> %249, %308
  %310 = sub <16 x i16> zeroinitializer, %309
  %311 = icmp slt <16 x i16> %309, zeroinitializer
  %312 = select <16 x i1> %311, <16 x i16> %310, <16 x i16> %309
  %313 = add <16 x i16> %307, %312
  %314 = add <16 x i16> %313, %302
  %315 = add <16 x i16> %314, %297
  %316 = shufflevector <16 x i16> %315, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %317 = shufflevector <16 x i16> %315, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %318 = bitcast <16 x i16> %316 to <8 x i32>
  %319 = bitcast <16 x i16> %317 to <8 x i32>
  %320 = add <8 x i32> %238, %318
  %321 = add <8 x i32> %320, %319
  %322 = getelementptr inbounds i16, i16* %235, i64 %18
  %323 = getelementptr inbounds i16, i16* %237, i64 %20
  %324 = bitcast i16* %322 to <16 x i16>*
  %325 = load <16 x i16>, <16 x i16>* %324, align 1
  %326 = getelementptr inbounds i16, i16* %322, i64 16
  %327 = bitcast i16* %326 to <16 x i16>*
  %328 = load <16 x i16>, <16 x i16>* %327, align 1
  %329 = getelementptr inbounds i16, i16* %322, i64 %15
  %330 = bitcast i16* %329 to <16 x i16>*
  %331 = load <16 x i16>, <16 x i16>* %330, align 1
  %332 = getelementptr inbounds i16, i16* %329, i64 16
  %333 = bitcast i16* %332 to <16 x i16>*
  %334 = load <16 x i16>, <16 x i16>* %333, align 1
  %335 = bitcast i16* %323 to <4 x i64>*
  %336 = load <4 x i64>, <4 x i64>* %335, align 1
  %337 = getelementptr inbounds i16, i16* %323, i64 16
  %338 = bitcast i16* %337 to <4 x i64>*
  %339 = load <4 x i64>, <4 x i64>* %338, align 1
  %340 = getelementptr inbounds i16, i16* %323, i64 %16
  %341 = bitcast i16* %340 to <4 x i64>*
  %342 = load <4 x i64>, <4 x i64>* %341, align 1
  %343 = getelementptr inbounds i16, i16* %340, i64 16
  %344 = bitcast i16* %343 to <4 x i64>*
  %345 = load <4 x i64>, <4 x i64>* %344, align 1
  %346 = icmp eq i16* %292, null
  br i1 %346, label %371, label %347

347:                                              ; preds = %287
  %348 = bitcast i16* %292 to <16 x i16>*
  %349 = load <16 x i16>, <16 x i16>* %348, align 1
  %350 = bitcast <4 x i64> %336 to <16 x i16>
  %351 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %350, <16 x i16> %349) #6
  %352 = bitcast <16 x i16> %351 to <4 x i64>
  %353 = getelementptr inbounds i16, i16* %292, i64 16
  %354 = bitcast i16* %353 to <16 x i16>*
  %355 = load <16 x i16>, <16 x i16>* %354, align 1
  %356 = bitcast <4 x i64> %339 to <16 x i16>
  %357 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %356, <16 x i16> %355) #6
  %358 = bitcast <16 x i16> %357 to <4 x i64>
  %359 = getelementptr inbounds i16, i16* %292, i64 32
  %360 = bitcast i16* %359 to <16 x i16>*
  %361 = load <16 x i16>, <16 x i16>* %360, align 1
  %362 = bitcast <4 x i64> %342 to <16 x i16>
  %363 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %362, <16 x i16> %361) #6
  %364 = bitcast <16 x i16> %363 to <4 x i64>
  %365 = getelementptr inbounds i16, i16* %292, i64 48
  %366 = bitcast i16* %365 to <16 x i16>*
  %367 = load <16 x i16>, <16 x i16>* %366, align 1
  %368 = bitcast <4 x i64> %345 to <16 x i16>
  %369 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %368, <16 x i16> %367) #6
  %370 = bitcast <16 x i16> %369 to <4 x i64>
  br label %371

371:                                              ; preds = %347, %287
  %372 = phi <4 x i64> [ %345, %287 ], [ %370, %347 ]
  %373 = phi <4 x i64> [ %342, %287 ], [ %364, %347 ]
  %374 = phi <4 x i64> [ %339, %287 ], [ %358, %347 ]
  %375 = phi <4 x i64> [ %336, %287 ], [ %352, %347 ]
  %376 = bitcast <4 x i64> %375 to <16 x i16>
  %377 = sub <16 x i16> %325, %376
  %378 = sub <16 x i16> zeroinitializer, %377
  %379 = icmp slt <16 x i16> %377, zeroinitializer
  %380 = select <16 x i1> %379, <16 x i16> %378, <16 x i16> %377
  %381 = bitcast <4 x i64> %374 to <16 x i16>
  %382 = sub <16 x i16> %328, %381
  %383 = sub <16 x i16> zeroinitializer, %382
  %384 = icmp slt <16 x i16> %382, zeroinitializer
  %385 = select <16 x i1> %384, <16 x i16> %383, <16 x i16> %382
  %386 = bitcast <4 x i64> %373 to <16 x i16>
  %387 = sub <16 x i16> %331, %386
  %388 = sub <16 x i16> zeroinitializer, %387
  %389 = icmp slt <16 x i16> %387, zeroinitializer
  %390 = select <16 x i1> %389, <16 x i16> %388, <16 x i16> %387
  %391 = bitcast <4 x i64> %372 to <16 x i16>
  %392 = sub <16 x i16> %334, %391
  %393 = sub <16 x i16> zeroinitializer, %392
  %394 = icmp slt <16 x i16> %392, zeroinitializer
  %395 = select <16 x i1> %394, <16 x i16> %393, <16 x i16> %392
  %396 = add <16 x i16> %390, %395
  %397 = add <16 x i16> %396, %385
  %398 = add <16 x i16> %397, %380
  %399 = shufflevector <16 x i16> %398, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %400 = shufflevector <16 x i16> %398, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %401 = bitcast <16 x i16> %399 to <8 x i32>
  %402 = bitcast <16 x i16> %400 to <8 x i32>
  %403 = add <8 x i32> %321, %401
  %404 = add <8 x i32> %403, %402
  %405 = getelementptr inbounds i16, i16* %235, i64 %22
  %406 = getelementptr inbounds i16, i16* %237, i64 %24
  %407 = getelementptr inbounds i16, i16* %236, i64 128
  %408 = add nuw nsw i32 %234, 1
  %409 = icmp eq i32 %408, 4
  br i1 %409, label %410, label %233

410:                                              ; preds = %371
  %411 = extractelement <4 x i32> %216, i32 0
  %412 = bitcast <8 x i32> %404 to <32 x i8>
  %413 = shufflevector <32 x i8> %412, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %414 = bitcast <32 x i8> %413 to <8 x i32>
  %415 = add <8 x i32> %404, %414
  %416 = bitcast <8 x i32> %415 to <4 x i64>
  %417 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %418 = shufflevector <4 x i64> %416, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %419 = bitcast <2 x i64> %417 to <4 x i32>
  %420 = bitcast <2 x i64> %418 to <4 x i32>
  %421 = add <4 x i32> %420, %419
  %422 = bitcast <4 x i32> %421 to <16 x i8>
  %423 = shufflevector <16 x i8> %422, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %424 = bitcast <16 x i8> %423 to <4 x i32>
  %425 = add <4 x i32> %421, %424
  %426 = extractelement <4 x i32> %425, i32 0
  %427 = add i32 %426, %411
  ret i32 %427
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad32x64_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #3 {
  %6 = tail call i32 @aom_highbd_sad32x32_avg_avx2(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4)
  %7 = shl i32 %1, 5
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = shl i32 %3, 5
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = getelementptr inbounds i8, i8* %4, i64 1024
  %14 = tail call i32 @aom_highbd_sad32x32_avg_avx2(i8* %9, i32 %1, i8* %12, i32 %3, i8* %13)
  %15 = add i32 %14, %6
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x16_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  %17 = shl i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %159, %5
  %22 = phi i32 [ 0, %5 ], [ %196, %159 ]
  %23 = phi i16* [ %8, %5 ], [ %193, %159 ]
  %24 = phi i16* [ %14, %5 ], [ %195, %159 ]
  %25 = phi i16* [ %11, %5 ], [ %194, %159 ]
  %26 = phi <8 x i32> [ zeroinitializer, %5 ], [ %192, %159 ]
  %27 = bitcast i16* %23 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %23, i64 16
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %23, i64 32
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %23, i64 48
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = bitcast i16* %25 to <4 x i64>*
  %39 = load <4 x i64>, <4 x i64>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %25, i64 16
  %41 = bitcast i16* %40 to <4 x i64>*
  %42 = load <4 x i64>, <4 x i64>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %25, i64 32
  %44 = bitcast i16* %43 to <4 x i64>*
  %45 = load <4 x i64>, <4 x i64>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %25, i64 48
  %47 = bitcast i16* %46 to <4 x i64>*
  %48 = load <4 x i64>, <4 x i64>* %47, align 1
  %49 = icmp eq i16* %24, null
  br i1 %49, label %75, label %50

50:                                               ; preds = %21
  %51 = bitcast i16* %24 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = bitcast <4 x i64> %39 to <16 x i16>
  %54 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %53, <16 x i16> %52) #6
  %55 = bitcast <16 x i16> %54 to <4 x i64>
  %56 = getelementptr inbounds i16, i16* %24, i64 16
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = bitcast <4 x i64> %42 to <16 x i16>
  %60 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %59, <16 x i16> %58) #6
  %61 = bitcast <16 x i16> %60 to <4 x i64>
  %62 = getelementptr inbounds i16, i16* %24, i64 32
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = bitcast <4 x i64> %45 to <16 x i16>
  %66 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %65, <16 x i16> %64) #6
  %67 = bitcast <16 x i16> %66 to <4 x i64>
  %68 = getelementptr inbounds i16, i16* %24, i64 48
  %69 = bitcast i16* %68 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 1
  %71 = bitcast <4 x i64> %48 to <16 x i16>
  %72 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %71, <16 x i16> %70) #6
  %73 = bitcast <16 x i16> %72 to <4 x i64>
  %74 = getelementptr inbounds i16, i16* %24, i64 64
  br label %75

75:                                               ; preds = %50, %21
  %76 = phi <4 x i64> [ %48, %21 ], [ %73, %50 ]
  %77 = phi <4 x i64> [ %45, %21 ], [ %67, %50 ]
  %78 = phi <4 x i64> [ %42, %21 ], [ %61, %50 ]
  %79 = phi <4 x i64> [ %39, %21 ], [ %55, %50 ]
  %80 = phi i16* [ null, %21 ], [ %74, %50 ]
  %81 = bitcast <4 x i64> %79 to <16 x i16>
  %82 = sub <16 x i16> %28, %81
  %83 = sub <16 x i16> zeroinitializer, %82
  %84 = icmp slt <16 x i16> %82, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i16> %83, <16 x i16> %82
  %86 = bitcast <4 x i64> %78 to <16 x i16>
  %87 = sub <16 x i16> %31, %86
  %88 = sub <16 x i16> zeroinitializer, %87
  %89 = icmp slt <16 x i16> %87, zeroinitializer
  %90 = select <16 x i1> %89, <16 x i16> %88, <16 x i16> %87
  %91 = bitcast <4 x i64> %77 to <16 x i16>
  %92 = sub <16 x i16> %34, %91
  %93 = sub <16 x i16> zeroinitializer, %92
  %94 = icmp slt <16 x i16> %92, zeroinitializer
  %95 = select <16 x i1> %94, <16 x i16> %93, <16 x i16> %92
  %96 = bitcast <4 x i64> %76 to <16 x i16>
  %97 = sub <16 x i16> %37, %96
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = add <16 x i16> %95, %100
  %102 = add <16 x i16> %101, %90
  %103 = add <16 x i16> %102, %85
  %104 = shufflevector <16 x i16> %103, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %105 = shufflevector <16 x i16> %103, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = bitcast <16 x i16> %104 to <8 x i32>
  %107 = bitcast <16 x i16> %105 to <8 x i32>
  %108 = add <8 x i32> %26, %106
  %109 = add <8 x i32> %108, %107
  %110 = getelementptr inbounds i16, i16* %23, i64 %15
  %111 = getelementptr inbounds i16, i16* %25, i64 %16
  %112 = bitcast i16* %110 to <16 x i16>*
  %113 = load <16 x i16>, <16 x i16>* %112, align 1
  %114 = getelementptr inbounds i16, i16* %110, i64 16
  %115 = bitcast i16* %114 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %110, i64 32
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 48
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 1
  %123 = bitcast i16* %111 to <4 x i64>*
  %124 = load <4 x i64>, <4 x i64>* %123, align 1
  %125 = getelementptr inbounds i16, i16* %111, i64 16
  %126 = bitcast i16* %125 to <4 x i64>*
  %127 = load <4 x i64>, <4 x i64>* %126, align 1
  %128 = getelementptr inbounds i16, i16* %111, i64 32
  %129 = bitcast i16* %128 to <4 x i64>*
  %130 = load <4 x i64>, <4 x i64>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %111, i64 48
  %132 = bitcast i16* %131 to <4 x i64>*
  %133 = load <4 x i64>, <4 x i64>* %132, align 1
  %134 = icmp eq i16* %80, null
  br i1 %134, label %159, label %135

135:                                              ; preds = %75
  %136 = bitcast i16* %80 to <16 x i16>*
  %137 = load <16 x i16>, <16 x i16>* %136, align 1
  %138 = bitcast <4 x i64> %124 to <16 x i16>
  %139 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %138, <16 x i16> %137) #6
  %140 = bitcast <16 x i16> %139 to <4 x i64>
  %141 = getelementptr inbounds i16, i16* %80, i64 16
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 1
  %144 = bitcast <4 x i64> %127 to <16 x i16>
  %145 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %144, <16 x i16> %143) #6
  %146 = bitcast <16 x i16> %145 to <4 x i64>
  %147 = getelementptr inbounds i16, i16* %80, i64 32
  %148 = bitcast i16* %147 to <16 x i16>*
  %149 = load <16 x i16>, <16 x i16>* %148, align 1
  %150 = bitcast <4 x i64> %130 to <16 x i16>
  %151 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %150, <16 x i16> %149) #6
  %152 = bitcast <16 x i16> %151 to <4 x i64>
  %153 = getelementptr inbounds i16, i16* %80, i64 48
  %154 = bitcast i16* %153 to <16 x i16>*
  %155 = load <16 x i16>, <16 x i16>* %154, align 1
  %156 = bitcast <4 x i64> %133 to <16 x i16>
  %157 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %156, <16 x i16> %155) #6
  %158 = bitcast <16 x i16> %157 to <4 x i64>
  br label %159

159:                                              ; preds = %75, %135
  %160 = phi <4 x i64> [ %133, %75 ], [ %158, %135 ]
  %161 = phi <4 x i64> [ %130, %75 ], [ %152, %135 ]
  %162 = phi <4 x i64> [ %127, %75 ], [ %146, %135 ]
  %163 = phi <4 x i64> [ %124, %75 ], [ %140, %135 ]
  %164 = bitcast <4 x i64> %163 to <16 x i16>
  %165 = sub <16 x i16> %113, %164
  %166 = sub <16 x i16> zeroinitializer, %165
  %167 = icmp slt <16 x i16> %165, zeroinitializer
  %168 = select <16 x i1> %167, <16 x i16> %166, <16 x i16> %165
  %169 = bitcast <4 x i64> %162 to <16 x i16>
  %170 = sub <16 x i16> %116, %169
  %171 = sub <16 x i16> zeroinitializer, %170
  %172 = icmp slt <16 x i16> %170, zeroinitializer
  %173 = select <16 x i1> %172, <16 x i16> %171, <16 x i16> %170
  %174 = bitcast <4 x i64> %161 to <16 x i16>
  %175 = sub <16 x i16> %119, %174
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = bitcast <4 x i64> %160 to <16 x i16>
  %180 = sub <16 x i16> %122, %179
  %181 = sub <16 x i16> zeroinitializer, %180
  %182 = icmp slt <16 x i16> %180, zeroinitializer
  %183 = select <16 x i1> %182, <16 x i16> %181, <16 x i16> %180
  %184 = add <16 x i16> %178, %183
  %185 = add <16 x i16> %184, %173
  %186 = add <16 x i16> %185, %168
  %187 = shufflevector <16 x i16> %186, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %188 = shufflevector <16 x i16> %186, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast <16 x i16> %187 to <8 x i32>
  %190 = bitcast <16 x i16> %188 to <8 x i32>
  %191 = add <8 x i32> %109, %189
  %192 = add <8 x i32> %191, %190
  %193 = getelementptr inbounds i16, i16* %23, i64 %18
  %194 = getelementptr inbounds i16, i16* %25, i64 %20
  %195 = getelementptr inbounds i16, i16* %24, i64 128
  %196 = add nuw nsw i32 %22, 1
  %197 = icmp eq i32 %196, 8
  br i1 %197, label %198, label %21

198:                                              ; preds = %159
  %199 = bitcast <8 x i32> %192 to <32 x i8>
  %200 = shufflevector <32 x i8> %199, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %201 = bitcast <32 x i8> %200 to <8 x i32>
  %202 = add <8 x i32> %192, %201
  %203 = bitcast <8 x i32> %202 to <4 x i64>
  %204 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %205 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %206 = bitcast <2 x i64> %204 to <4 x i32>
  %207 = bitcast <2 x i64> %205 to <4 x i32>
  %208 = add <4 x i32> %207, %206
  %209 = bitcast <4 x i32> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <16 x i8> %210 to <4 x i32>
  %212 = add <4 x i32> %208, %211
  %213 = extractelement <4 x i32> %212, i32 0
  ret i32 %213
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x32_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  %17 = shl i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %159, %5
  %22 = phi i32 [ 0, %5 ], [ %196, %159 ]
  %23 = phi i16* [ %8, %5 ], [ %193, %159 ]
  %24 = phi i16* [ %14, %5 ], [ %195, %159 ]
  %25 = phi i16* [ %11, %5 ], [ %194, %159 ]
  %26 = phi <8 x i32> [ zeroinitializer, %5 ], [ %192, %159 ]
  %27 = bitcast i16* %23 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %23, i64 16
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %23, i64 32
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %23, i64 48
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = bitcast i16* %25 to <4 x i64>*
  %39 = load <4 x i64>, <4 x i64>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %25, i64 16
  %41 = bitcast i16* %40 to <4 x i64>*
  %42 = load <4 x i64>, <4 x i64>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %25, i64 32
  %44 = bitcast i16* %43 to <4 x i64>*
  %45 = load <4 x i64>, <4 x i64>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %25, i64 48
  %47 = bitcast i16* %46 to <4 x i64>*
  %48 = load <4 x i64>, <4 x i64>* %47, align 1
  %49 = icmp eq i16* %24, null
  br i1 %49, label %75, label %50

50:                                               ; preds = %21
  %51 = bitcast i16* %24 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = bitcast <4 x i64> %39 to <16 x i16>
  %54 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %53, <16 x i16> %52) #6
  %55 = bitcast <16 x i16> %54 to <4 x i64>
  %56 = getelementptr inbounds i16, i16* %24, i64 16
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = bitcast <4 x i64> %42 to <16 x i16>
  %60 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %59, <16 x i16> %58) #6
  %61 = bitcast <16 x i16> %60 to <4 x i64>
  %62 = getelementptr inbounds i16, i16* %24, i64 32
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = bitcast <4 x i64> %45 to <16 x i16>
  %66 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %65, <16 x i16> %64) #6
  %67 = bitcast <16 x i16> %66 to <4 x i64>
  %68 = getelementptr inbounds i16, i16* %24, i64 48
  %69 = bitcast i16* %68 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 1
  %71 = bitcast <4 x i64> %48 to <16 x i16>
  %72 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %71, <16 x i16> %70) #6
  %73 = bitcast <16 x i16> %72 to <4 x i64>
  %74 = getelementptr inbounds i16, i16* %24, i64 64
  br label %75

75:                                               ; preds = %50, %21
  %76 = phi <4 x i64> [ %48, %21 ], [ %73, %50 ]
  %77 = phi <4 x i64> [ %45, %21 ], [ %67, %50 ]
  %78 = phi <4 x i64> [ %42, %21 ], [ %61, %50 ]
  %79 = phi <4 x i64> [ %39, %21 ], [ %55, %50 ]
  %80 = phi i16* [ null, %21 ], [ %74, %50 ]
  %81 = bitcast <4 x i64> %79 to <16 x i16>
  %82 = sub <16 x i16> %28, %81
  %83 = sub <16 x i16> zeroinitializer, %82
  %84 = icmp slt <16 x i16> %82, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i16> %83, <16 x i16> %82
  %86 = bitcast <4 x i64> %78 to <16 x i16>
  %87 = sub <16 x i16> %31, %86
  %88 = sub <16 x i16> zeroinitializer, %87
  %89 = icmp slt <16 x i16> %87, zeroinitializer
  %90 = select <16 x i1> %89, <16 x i16> %88, <16 x i16> %87
  %91 = bitcast <4 x i64> %77 to <16 x i16>
  %92 = sub <16 x i16> %34, %91
  %93 = sub <16 x i16> zeroinitializer, %92
  %94 = icmp slt <16 x i16> %92, zeroinitializer
  %95 = select <16 x i1> %94, <16 x i16> %93, <16 x i16> %92
  %96 = bitcast <4 x i64> %76 to <16 x i16>
  %97 = sub <16 x i16> %37, %96
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = add <16 x i16> %95, %100
  %102 = add <16 x i16> %101, %90
  %103 = add <16 x i16> %102, %85
  %104 = shufflevector <16 x i16> %103, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %105 = shufflevector <16 x i16> %103, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = bitcast <16 x i16> %104 to <8 x i32>
  %107 = bitcast <16 x i16> %105 to <8 x i32>
  %108 = add <8 x i32> %26, %106
  %109 = add <8 x i32> %108, %107
  %110 = getelementptr inbounds i16, i16* %23, i64 %15
  %111 = getelementptr inbounds i16, i16* %25, i64 %16
  %112 = bitcast i16* %110 to <16 x i16>*
  %113 = load <16 x i16>, <16 x i16>* %112, align 1
  %114 = getelementptr inbounds i16, i16* %110, i64 16
  %115 = bitcast i16* %114 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %110, i64 32
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 48
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 1
  %123 = bitcast i16* %111 to <4 x i64>*
  %124 = load <4 x i64>, <4 x i64>* %123, align 1
  %125 = getelementptr inbounds i16, i16* %111, i64 16
  %126 = bitcast i16* %125 to <4 x i64>*
  %127 = load <4 x i64>, <4 x i64>* %126, align 1
  %128 = getelementptr inbounds i16, i16* %111, i64 32
  %129 = bitcast i16* %128 to <4 x i64>*
  %130 = load <4 x i64>, <4 x i64>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %111, i64 48
  %132 = bitcast i16* %131 to <4 x i64>*
  %133 = load <4 x i64>, <4 x i64>* %132, align 1
  %134 = icmp eq i16* %80, null
  br i1 %134, label %159, label %135

135:                                              ; preds = %75
  %136 = bitcast i16* %80 to <16 x i16>*
  %137 = load <16 x i16>, <16 x i16>* %136, align 1
  %138 = bitcast <4 x i64> %124 to <16 x i16>
  %139 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %138, <16 x i16> %137) #6
  %140 = bitcast <16 x i16> %139 to <4 x i64>
  %141 = getelementptr inbounds i16, i16* %80, i64 16
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 1
  %144 = bitcast <4 x i64> %127 to <16 x i16>
  %145 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %144, <16 x i16> %143) #6
  %146 = bitcast <16 x i16> %145 to <4 x i64>
  %147 = getelementptr inbounds i16, i16* %80, i64 32
  %148 = bitcast i16* %147 to <16 x i16>*
  %149 = load <16 x i16>, <16 x i16>* %148, align 1
  %150 = bitcast <4 x i64> %130 to <16 x i16>
  %151 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %150, <16 x i16> %149) #6
  %152 = bitcast <16 x i16> %151 to <4 x i64>
  %153 = getelementptr inbounds i16, i16* %80, i64 48
  %154 = bitcast i16* %153 to <16 x i16>*
  %155 = load <16 x i16>, <16 x i16>* %154, align 1
  %156 = bitcast <4 x i64> %133 to <16 x i16>
  %157 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %156, <16 x i16> %155) #6
  %158 = bitcast <16 x i16> %157 to <4 x i64>
  br label %159

159:                                              ; preds = %75, %135
  %160 = phi <4 x i64> [ %133, %75 ], [ %158, %135 ]
  %161 = phi <4 x i64> [ %130, %75 ], [ %152, %135 ]
  %162 = phi <4 x i64> [ %127, %75 ], [ %146, %135 ]
  %163 = phi <4 x i64> [ %124, %75 ], [ %140, %135 ]
  %164 = bitcast <4 x i64> %163 to <16 x i16>
  %165 = sub <16 x i16> %113, %164
  %166 = sub <16 x i16> zeroinitializer, %165
  %167 = icmp slt <16 x i16> %165, zeroinitializer
  %168 = select <16 x i1> %167, <16 x i16> %166, <16 x i16> %165
  %169 = bitcast <4 x i64> %162 to <16 x i16>
  %170 = sub <16 x i16> %116, %169
  %171 = sub <16 x i16> zeroinitializer, %170
  %172 = icmp slt <16 x i16> %170, zeroinitializer
  %173 = select <16 x i1> %172, <16 x i16> %171, <16 x i16> %170
  %174 = bitcast <4 x i64> %161 to <16 x i16>
  %175 = sub <16 x i16> %119, %174
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = bitcast <4 x i64> %160 to <16 x i16>
  %180 = sub <16 x i16> %122, %179
  %181 = sub <16 x i16> zeroinitializer, %180
  %182 = icmp slt <16 x i16> %180, zeroinitializer
  %183 = select <16 x i1> %182, <16 x i16> %181, <16 x i16> %180
  %184 = add <16 x i16> %178, %183
  %185 = add <16 x i16> %184, %173
  %186 = add <16 x i16> %185, %168
  %187 = shufflevector <16 x i16> %186, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %188 = shufflevector <16 x i16> %186, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast <16 x i16> %187 to <8 x i32>
  %190 = bitcast <16 x i16> %188 to <8 x i32>
  %191 = add <8 x i32> %109, %189
  %192 = add <8 x i32> %191, %190
  %193 = getelementptr inbounds i16, i16* %23, i64 %18
  %194 = getelementptr inbounds i16, i16* %25, i64 %20
  %195 = getelementptr inbounds i16, i16* %24, i64 128
  %196 = add nuw nsw i32 %22, 1
  %197 = icmp eq i32 %196, 16
  br i1 %197, label %198, label %21

198:                                              ; preds = %159
  %199 = bitcast <8 x i32> %192 to <32 x i8>
  %200 = shufflevector <32 x i8> %199, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %201 = bitcast <32 x i8> %200 to <8 x i32>
  %202 = add <8 x i32> %192, %201
  %203 = bitcast <8 x i32> %202 to <4 x i64>
  %204 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %205 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %206 = bitcast <2 x i64> %204 to <4 x i32>
  %207 = bitcast <2 x i64> %205 to <4 x i32>
  %208 = add <4 x i32> %207, %206
  %209 = bitcast <4 x i32> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <16 x i8> %210 to <4 x i32>
  %212 = add <4 x i32> %208, %211
  %213 = extractelement <4 x i32> %212, i32 0
  ret i32 %213
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x64_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  %17 = shl i32 %1, 1
  %18 = sext i32 %17 to i64
  %19 = shl i32 %3, 1
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %159, %5
  %22 = phi i32 [ 0, %5 ], [ %196, %159 ]
  %23 = phi i16* [ %8, %5 ], [ %193, %159 ]
  %24 = phi i16* [ %14, %5 ], [ %195, %159 ]
  %25 = phi i16* [ %11, %5 ], [ %194, %159 ]
  %26 = phi <8 x i32> [ zeroinitializer, %5 ], [ %192, %159 ]
  %27 = bitcast i16* %23 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %23, i64 16
  %30 = bitcast i16* %29 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %23, i64 32
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %23, i64 48
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = bitcast i16* %25 to <4 x i64>*
  %39 = load <4 x i64>, <4 x i64>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %25, i64 16
  %41 = bitcast i16* %40 to <4 x i64>*
  %42 = load <4 x i64>, <4 x i64>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %25, i64 32
  %44 = bitcast i16* %43 to <4 x i64>*
  %45 = load <4 x i64>, <4 x i64>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %25, i64 48
  %47 = bitcast i16* %46 to <4 x i64>*
  %48 = load <4 x i64>, <4 x i64>* %47, align 1
  %49 = icmp eq i16* %24, null
  br i1 %49, label %75, label %50

50:                                               ; preds = %21
  %51 = bitcast i16* %24 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = bitcast <4 x i64> %39 to <16 x i16>
  %54 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %53, <16 x i16> %52) #6
  %55 = bitcast <16 x i16> %54 to <4 x i64>
  %56 = getelementptr inbounds i16, i16* %24, i64 16
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = bitcast <4 x i64> %42 to <16 x i16>
  %60 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %59, <16 x i16> %58) #6
  %61 = bitcast <16 x i16> %60 to <4 x i64>
  %62 = getelementptr inbounds i16, i16* %24, i64 32
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = bitcast <4 x i64> %45 to <16 x i16>
  %66 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %65, <16 x i16> %64) #6
  %67 = bitcast <16 x i16> %66 to <4 x i64>
  %68 = getelementptr inbounds i16, i16* %24, i64 48
  %69 = bitcast i16* %68 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 1
  %71 = bitcast <4 x i64> %48 to <16 x i16>
  %72 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %71, <16 x i16> %70) #6
  %73 = bitcast <16 x i16> %72 to <4 x i64>
  %74 = getelementptr inbounds i16, i16* %24, i64 64
  br label %75

75:                                               ; preds = %50, %21
  %76 = phi <4 x i64> [ %48, %21 ], [ %73, %50 ]
  %77 = phi <4 x i64> [ %45, %21 ], [ %67, %50 ]
  %78 = phi <4 x i64> [ %42, %21 ], [ %61, %50 ]
  %79 = phi <4 x i64> [ %39, %21 ], [ %55, %50 ]
  %80 = phi i16* [ null, %21 ], [ %74, %50 ]
  %81 = bitcast <4 x i64> %79 to <16 x i16>
  %82 = sub <16 x i16> %28, %81
  %83 = sub <16 x i16> zeroinitializer, %82
  %84 = icmp slt <16 x i16> %82, zeroinitializer
  %85 = select <16 x i1> %84, <16 x i16> %83, <16 x i16> %82
  %86 = bitcast <4 x i64> %78 to <16 x i16>
  %87 = sub <16 x i16> %31, %86
  %88 = sub <16 x i16> zeroinitializer, %87
  %89 = icmp slt <16 x i16> %87, zeroinitializer
  %90 = select <16 x i1> %89, <16 x i16> %88, <16 x i16> %87
  %91 = bitcast <4 x i64> %77 to <16 x i16>
  %92 = sub <16 x i16> %34, %91
  %93 = sub <16 x i16> zeroinitializer, %92
  %94 = icmp slt <16 x i16> %92, zeroinitializer
  %95 = select <16 x i1> %94, <16 x i16> %93, <16 x i16> %92
  %96 = bitcast <4 x i64> %76 to <16 x i16>
  %97 = sub <16 x i16> %37, %96
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = add <16 x i16> %95, %100
  %102 = add <16 x i16> %101, %90
  %103 = add <16 x i16> %102, %85
  %104 = shufflevector <16 x i16> %103, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %105 = shufflevector <16 x i16> %103, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = bitcast <16 x i16> %104 to <8 x i32>
  %107 = bitcast <16 x i16> %105 to <8 x i32>
  %108 = add <8 x i32> %26, %106
  %109 = add <8 x i32> %108, %107
  %110 = getelementptr inbounds i16, i16* %23, i64 %15
  %111 = getelementptr inbounds i16, i16* %25, i64 %16
  %112 = bitcast i16* %110 to <16 x i16>*
  %113 = load <16 x i16>, <16 x i16>* %112, align 1
  %114 = getelementptr inbounds i16, i16* %110, i64 16
  %115 = bitcast i16* %114 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %110, i64 32
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 48
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 1
  %123 = bitcast i16* %111 to <4 x i64>*
  %124 = load <4 x i64>, <4 x i64>* %123, align 1
  %125 = getelementptr inbounds i16, i16* %111, i64 16
  %126 = bitcast i16* %125 to <4 x i64>*
  %127 = load <4 x i64>, <4 x i64>* %126, align 1
  %128 = getelementptr inbounds i16, i16* %111, i64 32
  %129 = bitcast i16* %128 to <4 x i64>*
  %130 = load <4 x i64>, <4 x i64>* %129, align 1
  %131 = getelementptr inbounds i16, i16* %111, i64 48
  %132 = bitcast i16* %131 to <4 x i64>*
  %133 = load <4 x i64>, <4 x i64>* %132, align 1
  %134 = icmp eq i16* %80, null
  br i1 %134, label %159, label %135

135:                                              ; preds = %75
  %136 = bitcast i16* %80 to <16 x i16>*
  %137 = load <16 x i16>, <16 x i16>* %136, align 1
  %138 = bitcast <4 x i64> %124 to <16 x i16>
  %139 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %138, <16 x i16> %137) #6
  %140 = bitcast <16 x i16> %139 to <4 x i64>
  %141 = getelementptr inbounds i16, i16* %80, i64 16
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 1
  %144 = bitcast <4 x i64> %127 to <16 x i16>
  %145 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %144, <16 x i16> %143) #6
  %146 = bitcast <16 x i16> %145 to <4 x i64>
  %147 = getelementptr inbounds i16, i16* %80, i64 32
  %148 = bitcast i16* %147 to <16 x i16>*
  %149 = load <16 x i16>, <16 x i16>* %148, align 1
  %150 = bitcast <4 x i64> %130 to <16 x i16>
  %151 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %150, <16 x i16> %149) #6
  %152 = bitcast <16 x i16> %151 to <4 x i64>
  %153 = getelementptr inbounds i16, i16* %80, i64 48
  %154 = bitcast i16* %153 to <16 x i16>*
  %155 = load <16 x i16>, <16 x i16>* %154, align 1
  %156 = bitcast <4 x i64> %133 to <16 x i16>
  %157 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %156, <16 x i16> %155) #6
  %158 = bitcast <16 x i16> %157 to <4 x i64>
  br label %159

159:                                              ; preds = %135, %75
  %160 = phi <4 x i64> [ %133, %75 ], [ %158, %135 ]
  %161 = phi <4 x i64> [ %130, %75 ], [ %152, %135 ]
  %162 = phi <4 x i64> [ %127, %75 ], [ %146, %135 ]
  %163 = phi <4 x i64> [ %124, %75 ], [ %140, %135 ]
  %164 = bitcast <4 x i64> %163 to <16 x i16>
  %165 = sub <16 x i16> %113, %164
  %166 = sub <16 x i16> zeroinitializer, %165
  %167 = icmp slt <16 x i16> %165, zeroinitializer
  %168 = select <16 x i1> %167, <16 x i16> %166, <16 x i16> %165
  %169 = bitcast <4 x i64> %162 to <16 x i16>
  %170 = sub <16 x i16> %116, %169
  %171 = sub <16 x i16> zeroinitializer, %170
  %172 = icmp slt <16 x i16> %170, zeroinitializer
  %173 = select <16 x i1> %172, <16 x i16> %171, <16 x i16> %170
  %174 = bitcast <4 x i64> %161 to <16 x i16>
  %175 = sub <16 x i16> %119, %174
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = bitcast <4 x i64> %160 to <16 x i16>
  %180 = sub <16 x i16> %122, %179
  %181 = sub <16 x i16> zeroinitializer, %180
  %182 = icmp slt <16 x i16> %180, zeroinitializer
  %183 = select <16 x i1> %182, <16 x i16> %181, <16 x i16> %180
  %184 = add <16 x i16> %178, %183
  %185 = add <16 x i16> %184, %173
  %186 = add <16 x i16> %185, %168
  %187 = shufflevector <16 x i16> %186, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %188 = shufflevector <16 x i16> %186, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %189 = bitcast <16 x i16> %187 to <8 x i32>
  %190 = bitcast <16 x i16> %188 to <8 x i32>
  %191 = add <8 x i32> %109, %189
  %192 = add <8 x i32> %191, %190
  %193 = getelementptr inbounds i16, i16* %23, i64 %18
  %194 = getelementptr inbounds i16, i16* %25, i64 %20
  %195 = getelementptr inbounds i16, i16* %24, i64 128
  %196 = add nuw nsw i32 %22, 1
  %197 = icmp eq i32 %196, 16
  br i1 %197, label %198, label %21

198:                                              ; preds = %159
  %199 = bitcast <8 x i32> %192 to <32 x i8>
  %200 = shufflevector <32 x i8> %199, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %201 = bitcast <32 x i8> %200 to <8 x i32>
  %202 = add <8 x i32> %192, %201
  %203 = bitcast <8 x i32> %202 to <4 x i64>
  %204 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %205 = shufflevector <4 x i64> %203, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %206 = bitcast <2 x i64> %204 to <4 x i32>
  %207 = bitcast <2 x i64> %205 to <4 x i32>
  %208 = add <4 x i32> %207, %206
  %209 = bitcast <4 x i32> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <16 x i8> %210 to <4 x i32>
  %212 = add <4 x i32> %208, %211
  %213 = shl i32 %1, 5
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %0, i64 %214
  %216 = shl i32 %3, 5
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %2, i64 %217
  %219 = getelementptr inbounds i8, i8* %4, i64 2048
  %220 = ptrtoint i8* %215 to i64
  %221 = shl i64 %220, 1
  %222 = inttoptr i64 %221 to i16*
  %223 = ptrtoint i8* %218 to i64
  %224 = shl i64 %223, 1
  %225 = inttoptr i64 %224 to i16*
  %226 = ptrtoint i8* %219 to i64
  %227 = shl i64 %226, 1
  %228 = inttoptr i64 %227 to i16*
  br label %229

229:                                              ; preds = %367, %198
  %230 = phi i32 [ 0, %198 ], [ %404, %367 ]
  %231 = phi i16* [ %222, %198 ], [ %401, %367 ]
  %232 = phi i16* [ %228, %198 ], [ %403, %367 ]
  %233 = phi i16* [ %225, %198 ], [ %402, %367 ]
  %234 = phi <8 x i32> [ zeroinitializer, %198 ], [ %400, %367 ]
  %235 = bitcast i16* %231 to <16 x i16>*
  %236 = load <16 x i16>, <16 x i16>* %235, align 1
  %237 = getelementptr inbounds i16, i16* %231, i64 16
  %238 = bitcast i16* %237 to <16 x i16>*
  %239 = load <16 x i16>, <16 x i16>* %238, align 1
  %240 = getelementptr inbounds i16, i16* %231, i64 32
  %241 = bitcast i16* %240 to <16 x i16>*
  %242 = load <16 x i16>, <16 x i16>* %241, align 1
  %243 = getelementptr inbounds i16, i16* %231, i64 48
  %244 = bitcast i16* %243 to <16 x i16>*
  %245 = load <16 x i16>, <16 x i16>* %244, align 1
  %246 = bitcast i16* %233 to <4 x i64>*
  %247 = load <4 x i64>, <4 x i64>* %246, align 1
  %248 = getelementptr inbounds i16, i16* %233, i64 16
  %249 = bitcast i16* %248 to <4 x i64>*
  %250 = load <4 x i64>, <4 x i64>* %249, align 1
  %251 = getelementptr inbounds i16, i16* %233, i64 32
  %252 = bitcast i16* %251 to <4 x i64>*
  %253 = load <4 x i64>, <4 x i64>* %252, align 1
  %254 = getelementptr inbounds i16, i16* %233, i64 48
  %255 = bitcast i16* %254 to <4 x i64>*
  %256 = load <4 x i64>, <4 x i64>* %255, align 1
  %257 = icmp eq i16* %232, null
  br i1 %257, label %283, label %258

258:                                              ; preds = %229
  %259 = bitcast i16* %232 to <16 x i16>*
  %260 = load <16 x i16>, <16 x i16>* %259, align 1
  %261 = bitcast <4 x i64> %247 to <16 x i16>
  %262 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %261, <16 x i16> %260) #6
  %263 = bitcast <16 x i16> %262 to <4 x i64>
  %264 = getelementptr inbounds i16, i16* %232, i64 16
  %265 = bitcast i16* %264 to <16 x i16>*
  %266 = load <16 x i16>, <16 x i16>* %265, align 1
  %267 = bitcast <4 x i64> %250 to <16 x i16>
  %268 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %267, <16 x i16> %266) #6
  %269 = bitcast <16 x i16> %268 to <4 x i64>
  %270 = getelementptr inbounds i16, i16* %232, i64 32
  %271 = bitcast i16* %270 to <16 x i16>*
  %272 = load <16 x i16>, <16 x i16>* %271, align 1
  %273 = bitcast <4 x i64> %253 to <16 x i16>
  %274 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %273, <16 x i16> %272) #6
  %275 = bitcast <16 x i16> %274 to <4 x i64>
  %276 = getelementptr inbounds i16, i16* %232, i64 48
  %277 = bitcast i16* %276 to <16 x i16>*
  %278 = load <16 x i16>, <16 x i16>* %277, align 1
  %279 = bitcast <4 x i64> %256 to <16 x i16>
  %280 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %279, <16 x i16> %278) #6
  %281 = bitcast <16 x i16> %280 to <4 x i64>
  %282 = getelementptr inbounds i16, i16* %232, i64 64
  br label %283

283:                                              ; preds = %258, %229
  %284 = phi <4 x i64> [ %256, %229 ], [ %281, %258 ]
  %285 = phi <4 x i64> [ %253, %229 ], [ %275, %258 ]
  %286 = phi <4 x i64> [ %250, %229 ], [ %269, %258 ]
  %287 = phi <4 x i64> [ %247, %229 ], [ %263, %258 ]
  %288 = phi i16* [ null, %229 ], [ %282, %258 ]
  %289 = bitcast <4 x i64> %287 to <16 x i16>
  %290 = sub <16 x i16> %236, %289
  %291 = sub <16 x i16> zeroinitializer, %290
  %292 = icmp slt <16 x i16> %290, zeroinitializer
  %293 = select <16 x i1> %292, <16 x i16> %291, <16 x i16> %290
  %294 = bitcast <4 x i64> %286 to <16 x i16>
  %295 = sub <16 x i16> %239, %294
  %296 = sub <16 x i16> zeroinitializer, %295
  %297 = icmp slt <16 x i16> %295, zeroinitializer
  %298 = select <16 x i1> %297, <16 x i16> %296, <16 x i16> %295
  %299 = bitcast <4 x i64> %285 to <16 x i16>
  %300 = sub <16 x i16> %242, %299
  %301 = sub <16 x i16> zeroinitializer, %300
  %302 = icmp slt <16 x i16> %300, zeroinitializer
  %303 = select <16 x i1> %302, <16 x i16> %301, <16 x i16> %300
  %304 = bitcast <4 x i64> %284 to <16 x i16>
  %305 = sub <16 x i16> %245, %304
  %306 = sub <16 x i16> zeroinitializer, %305
  %307 = icmp slt <16 x i16> %305, zeroinitializer
  %308 = select <16 x i1> %307, <16 x i16> %306, <16 x i16> %305
  %309 = add <16 x i16> %303, %308
  %310 = add <16 x i16> %309, %298
  %311 = add <16 x i16> %310, %293
  %312 = shufflevector <16 x i16> %311, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %313 = shufflevector <16 x i16> %311, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %314 = bitcast <16 x i16> %312 to <8 x i32>
  %315 = bitcast <16 x i16> %313 to <8 x i32>
  %316 = add <8 x i32> %234, %314
  %317 = add <8 x i32> %316, %315
  %318 = getelementptr inbounds i16, i16* %231, i64 %15
  %319 = getelementptr inbounds i16, i16* %233, i64 %16
  %320 = bitcast i16* %318 to <16 x i16>*
  %321 = load <16 x i16>, <16 x i16>* %320, align 1
  %322 = getelementptr inbounds i16, i16* %318, i64 16
  %323 = bitcast i16* %322 to <16 x i16>*
  %324 = load <16 x i16>, <16 x i16>* %323, align 1
  %325 = getelementptr inbounds i16, i16* %318, i64 32
  %326 = bitcast i16* %325 to <16 x i16>*
  %327 = load <16 x i16>, <16 x i16>* %326, align 1
  %328 = getelementptr inbounds i16, i16* %318, i64 48
  %329 = bitcast i16* %328 to <16 x i16>*
  %330 = load <16 x i16>, <16 x i16>* %329, align 1
  %331 = bitcast i16* %319 to <4 x i64>*
  %332 = load <4 x i64>, <4 x i64>* %331, align 1
  %333 = getelementptr inbounds i16, i16* %319, i64 16
  %334 = bitcast i16* %333 to <4 x i64>*
  %335 = load <4 x i64>, <4 x i64>* %334, align 1
  %336 = getelementptr inbounds i16, i16* %319, i64 32
  %337 = bitcast i16* %336 to <4 x i64>*
  %338 = load <4 x i64>, <4 x i64>* %337, align 1
  %339 = getelementptr inbounds i16, i16* %319, i64 48
  %340 = bitcast i16* %339 to <4 x i64>*
  %341 = load <4 x i64>, <4 x i64>* %340, align 1
  %342 = icmp eq i16* %288, null
  br i1 %342, label %367, label %343

343:                                              ; preds = %283
  %344 = bitcast i16* %288 to <16 x i16>*
  %345 = load <16 x i16>, <16 x i16>* %344, align 1
  %346 = bitcast <4 x i64> %332 to <16 x i16>
  %347 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %346, <16 x i16> %345) #6
  %348 = bitcast <16 x i16> %347 to <4 x i64>
  %349 = getelementptr inbounds i16, i16* %288, i64 16
  %350 = bitcast i16* %349 to <16 x i16>*
  %351 = load <16 x i16>, <16 x i16>* %350, align 1
  %352 = bitcast <4 x i64> %335 to <16 x i16>
  %353 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %352, <16 x i16> %351) #6
  %354 = bitcast <16 x i16> %353 to <4 x i64>
  %355 = getelementptr inbounds i16, i16* %288, i64 32
  %356 = bitcast i16* %355 to <16 x i16>*
  %357 = load <16 x i16>, <16 x i16>* %356, align 1
  %358 = bitcast <4 x i64> %338 to <16 x i16>
  %359 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %358, <16 x i16> %357) #6
  %360 = bitcast <16 x i16> %359 to <4 x i64>
  %361 = getelementptr inbounds i16, i16* %288, i64 48
  %362 = bitcast i16* %361 to <16 x i16>*
  %363 = load <16 x i16>, <16 x i16>* %362, align 1
  %364 = bitcast <4 x i64> %341 to <16 x i16>
  %365 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %364, <16 x i16> %363) #6
  %366 = bitcast <16 x i16> %365 to <4 x i64>
  br label %367

367:                                              ; preds = %343, %283
  %368 = phi <4 x i64> [ %341, %283 ], [ %366, %343 ]
  %369 = phi <4 x i64> [ %338, %283 ], [ %360, %343 ]
  %370 = phi <4 x i64> [ %335, %283 ], [ %354, %343 ]
  %371 = phi <4 x i64> [ %332, %283 ], [ %348, %343 ]
  %372 = bitcast <4 x i64> %371 to <16 x i16>
  %373 = sub <16 x i16> %321, %372
  %374 = sub <16 x i16> zeroinitializer, %373
  %375 = icmp slt <16 x i16> %373, zeroinitializer
  %376 = select <16 x i1> %375, <16 x i16> %374, <16 x i16> %373
  %377 = bitcast <4 x i64> %370 to <16 x i16>
  %378 = sub <16 x i16> %324, %377
  %379 = sub <16 x i16> zeroinitializer, %378
  %380 = icmp slt <16 x i16> %378, zeroinitializer
  %381 = select <16 x i1> %380, <16 x i16> %379, <16 x i16> %378
  %382 = bitcast <4 x i64> %369 to <16 x i16>
  %383 = sub <16 x i16> %327, %382
  %384 = sub <16 x i16> zeroinitializer, %383
  %385 = icmp slt <16 x i16> %383, zeroinitializer
  %386 = select <16 x i1> %385, <16 x i16> %384, <16 x i16> %383
  %387 = bitcast <4 x i64> %368 to <16 x i16>
  %388 = sub <16 x i16> %330, %387
  %389 = sub <16 x i16> zeroinitializer, %388
  %390 = icmp slt <16 x i16> %388, zeroinitializer
  %391 = select <16 x i1> %390, <16 x i16> %389, <16 x i16> %388
  %392 = add <16 x i16> %386, %391
  %393 = add <16 x i16> %392, %381
  %394 = add <16 x i16> %393, %376
  %395 = shufflevector <16 x i16> %394, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %396 = shufflevector <16 x i16> %394, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %397 = bitcast <16 x i16> %395 to <8 x i32>
  %398 = bitcast <16 x i16> %396 to <8 x i32>
  %399 = add <8 x i32> %317, %397
  %400 = add <8 x i32> %399, %398
  %401 = getelementptr inbounds i16, i16* %231, i64 %18
  %402 = getelementptr inbounds i16, i16* %233, i64 %20
  %403 = getelementptr inbounds i16, i16* %232, i64 128
  %404 = add nuw nsw i32 %230, 1
  %405 = icmp eq i32 %404, 16
  br i1 %405, label %406, label %229

406:                                              ; preds = %367
  %407 = extractelement <4 x i32> %212, i32 0
  %408 = bitcast <8 x i32> %400 to <32 x i8>
  %409 = shufflevector <32 x i8> %408, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %410 = bitcast <32 x i8> %409 to <8 x i32>
  %411 = add <8 x i32> %400, %410
  %412 = bitcast <8 x i32> %411 to <4 x i64>
  %413 = shufflevector <4 x i64> %412, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %414 = shufflevector <4 x i64> %412, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %415 = bitcast <2 x i64> %413 to <4 x i32>
  %416 = bitcast <2 x i64> %414 to <4 x i32>
  %417 = add <4 x i32> %416, %415
  %418 = bitcast <4 x i32> %417 to <16 x i8>
  %419 = shufflevector <16 x i8> %418, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %420 = bitcast <16 x i8> %419 to <4 x i32>
  %421 = add <4 x i32> %417, %420
  %422 = extractelement <4 x i32> %421, i32 0
  %423 = add i32 %422, %407
  ret i32 %423
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad64x128_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #3 {
  %6 = tail call i32 @aom_highbd_sad64x64_avg_avx2(i8* %0, i32 %1, i8* %2, i32 %3, i8* %4)
  %7 = shl i32 %1, 6
  %8 = sext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %0, i64 %8
  %10 = shl i32 %3, 6
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %2, i64 %11
  %13 = getelementptr inbounds i8, i8* %4, i64 4096
  %14 = tail call i32 @aom_highbd_sad64x64_avg_avx2(i8* %9, i32 %1, i8* %12, i32 %3, i8* %13)
  %15 = add i32 %14, %6
  ret i32 %15
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad128x64_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  br label %17

17:                                               ; preds = %155, %5
  %18 = phi i32 [ 0, %5 ], [ %192, %155 ]
  %19 = phi i16* [ %14, %5 ], [ %191, %155 ]
  %20 = phi i16* [ %11, %5 ], [ %190, %155 ]
  %21 = phi i16* [ %8, %5 ], [ %189, %155 ]
  %22 = phi <8 x i32> [ zeroinitializer, %5 ], [ %188, %155 ]
  %23 = bitcast i16* %21 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 1
  %25 = getelementptr inbounds i16, i16* %21, i64 16
  %26 = bitcast i16* %25 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %21, i64 32
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %21, i64 48
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = bitcast i16* %20 to <4 x i64>*
  %35 = load <4 x i64>, <4 x i64>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %20, i64 16
  %37 = bitcast i16* %36 to <4 x i64>*
  %38 = load <4 x i64>, <4 x i64>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %20, i64 32
  %40 = bitcast i16* %39 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %20, i64 48
  %43 = bitcast i16* %42 to <4 x i64>*
  %44 = load <4 x i64>, <4 x i64>* %43, align 1
  %45 = icmp eq i16* %19, null
  br i1 %45, label %71, label %46

46:                                               ; preds = %17
  %47 = bitcast i16* %19 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = bitcast <4 x i64> %35 to <16 x i16>
  %50 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %49, <16 x i16> %48) #6
  %51 = bitcast <16 x i16> %50 to <4 x i64>
  %52 = getelementptr inbounds i16, i16* %19, i64 16
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = bitcast <4 x i64> %38 to <16 x i16>
  %56 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %55, <16 x i16> %54) #6
  %57 = bitcast <16 x i16> %56 to <4 x i64>
  %58 = getelementptr inbounds i16, i16* %19, i64 32
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 1
  %61 = bitcast <4 x i64> %41 to <16 x i16>
  %62 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %61, <16 x i16> %60) #6
  %63 = bitcast <16 x i16> %62 to <4 x i64>
  %64 = getelementptr inbounds i16, i16* %19, i64 48
  %65 = bitcast i16* %64 to <16 x i16>*
  %66 = load <16 x i16>, <16 x i16>* %65, align 1
  %67 = bitcast <4 x i64> %44 to <16 x i16>
  %68 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %67, <16 x i16> %66) #6
  %69 = bitcast <16 x i16> %68 to <4 x i64>
  %70 = getelementptr inbounds i16, i16* %19, i64 64
  br label %71

71:                                               ; preds = %46, %17
  %72 = phi <4 x i64> [ %44, %17 ], [ %69, %46 ]
  %73 = phi <4 x i64> [ %41, %17 ], [ %63, %46 ]
  %74 = phi <4 x i64> [ %38, %17 ], [ %57, %46 ]
  %75 = phi <4 x i64> [ %35, %17 ], [ %51, %46 ]
  %76 = phi i16* [ null, %17 ], [ %70, %46 ]
  %77 = bitcast <4 x i64> %75 to <16 x i16>
  %78 = sub <16 x i16> %24, %77
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = bitcast <4 x i64> %74 to <16 x i16>
  %83 = sub <16 x i16> %27, %82
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = bitcast <4 x i64> %73 to <16 x i16>
  %88 = sub <16 x i16> %30, %87
  %89 = sub <16 x i16> zeroinitializer, %88
  %90 = icmp slt <16 x i16> %88, zeroinitializer
  %91 = select <16 x i1> %90, <16 x i16> %89, <16 x i16> %88
  %92 = bitcast <4 x i64> %72 to <16 x i16>
  %93 = sub <16 x i16> %33, %92
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = add <16 x i16> %91, %96
  %98 = add <16 x i16> %97, %86
  %99 = add <16 x i16> %98, %81
  %100 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i16> %100 to <8 x i32>
  %103 = bitcast <16 x i16> %101 to <8 x i32>
  %104 = add <8 x i32> %22, %102
  %105 = add <8 x i32> %104, %103
  %106 = getelementptr inbounds i16, i16* %21, i64 64
  %107 = getelementptr inbounds i16, i16* %20, i64 64
  %108 = bitcast i16* %106 to <16 x i16>*
  %109 = load <16 x i16>, <16 x i16>* %108, align 1
  %110 = getelementptr inbounds i16, i16* %21, i64 80
  %111 = bitcast i16* %110 to <16 x i16>*
  %112 = load <16 x i16>, <16 x i16>* %111, align 1
  %113 = getelementptr inbounds i16, i16* %21, i64 96
  %114 = bitcast i16* %113 to <16 x i16>*
  %115 = load <16 x i16>, <16 x i16>* %114, align 1
  %116 = getelementptr inbounds i16, i16* %21, i64 112
  %117 = bitcast i16* %116 to <16 x i16>*
  %118 = load <16 x i16>, <16 x i16>* %117, align 1
  %119 = bitcast i16* %107 to <4 x i64>*
  %120 = load <4 x i64>, <4 x i64>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %20, i64 80
  %122 = bitcast i16* %121 to <4 x i64>*
  %123 = load <4 x i64>, <4 x i64>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %20, i64 96
  %125 = bitcast i16* %124 to <4 x i64>*
  %126 = load <4 x i64>, <4 x i64>* %125, align 1
  %127 = getelementptr inbounds i16, i16* %20, i64 112
  %128 = bitcast i16* %127 to <4 x i64>*
  %129 = load <4 x i64>, <4 x i64>* %128, align 1
  %130 = icmp eq i16* %76, null
  br i1 %130, label %155, label %131

131:                                              ; preds = %71
  %132 = bitcast i16* %76 to <16 x i16>*
  %133 = load <16 x i16>, <16 x i16>* %132, align 1
  %134 = bitcast <4 x i64> %120 to <16 x i16>
  %135 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %134, <16 x i16> %133) #6
  %136 = bitcast <16 x i16> %135 to <4 x i64>
  %137 = getelementptr inbounds i16, i16* %76, i64 16
  %138 = bitcast i16* %137 to <16 x i16>*
  %139 = load <16 x i16>, <16 x i16>* %138, align 1
  %140 = bitcast <4 x i64> %123 to <16 x i16>
  %141 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %140, <16 x i16> %139) #6
  %142 = bitcast <16 x i16> %141 to <4 x i64>
  %143 = getelementptr inbounds i16, i16* %76, i64 32
  %144 = bitcast i16* %143 to <16 x i16>*
  %145 = load <16 x i16>, <16 x i16>* %144, align 1
  %146 = bitcast <4 x i64> %126 to <16 x i16>
  %147 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %146, <16 x i16> %145) #6
  %148 = bitcast <16 x i16> %147 to <4 x i64>
  %149 = getelementptr inbounds i16, i16* %76, i64 48
  %150 = bitcast i16* %149 to <16 x i16>*
  %151 = load <16 x i16>, <16 x i16>* %150, align 1
  %152 = bitcast <4 x i64> %129 to <16 x i16>
  %153 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %152, <16 x i16> %151) #6
  %154 = bitcast <16 x i16> %153 to <4 x i64>
  br label %155

155:                                              ; preds = %71, %131
  %156 = phi <4 x i64> [ %129, %71 ], [ %154, %131 ]
  %157 = phi <4 x i64> [ %126, %71 ], [ %148, %131 ]
  %158 = phi <4 x i64> [ %123, %71 ], [ %142, %131 ]
  %159 = phi <4 x i64> [ %120, %71 ], [ %136, %131 ]
  %160 = bitcast <4 x i64> %159 to <16 x i16>
  %161 = sub <16 x i16> %109, %160
  %162 = sub <16 x i16> zeroinitializer, %161
  %163 = icmp slt <16 x i16> %161, zeroinitializer
  %164 = select <16 x i1> %163, <16 x i16> %162, <16 x i16> %161
  %165 = bitcast <4 x i64> %158 to <16 x i16>
  %166 = sub <16 x i16> %112, %165
  %167 = sub <16 x i16> zeroinitializer, %166
  %168 = icmp slt <16 x i16> %166, zeroinitializer
  %169 = select <16 x i1> %168, <16 x i16> %167, <16 x i16> %166
  %170 = bitcast <4 x i64> %157 to <16 x i16>
  %171 = sub <16 x i16> %115, %170
  %172 = sub <16 x i16> zeroinitializer, %171
  %173 = icmp slt <16 x i16> %171, zeroinitializer
  %174 = select <16 x i1> %173, <16 x i16> %172, <16 x i16> %171
  %175 = bitcast <4 x i64> %156 to <16 x i16>
  %176 = sub <16 x i16> %118, %175
  %177 = sub <16 x i16> zeroinitializer, %176
  %178 = icmp slt <16 x i16> %176, zeroinitializer
  %179 = select <16 x i1> %178, <16 x i16> %177, <16 x i16> %176
  %180 = add <16 x i16> %174, %179
  %181 = add <16 x i16> %180, %169
  %182 = add <16 x i16> %181, %164
  %183 = shufflevector <16 x i16> %182, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %184 = shufflevector <16 x i16> %182, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %185 = bitcast <16 x i16> %183 to <8 x i32>
  %186 = bitcast <16 x i16> %184 to <8 x i32>
  %187 = add <8 x i32> %105, %185
  %188 = add <8 x i32> %187, %186
  %189 = getelementptr inbounds i16, i16* %21, i64 %15
  %190 = getelementptr inbounds i16, i16* %20, i64 %16
  %191 = getelementptr inbounds i16, i16* %19, i64 128
  %192 = add nuw nsw i32 %18, 1
  %193 = icmp eq i32 %192, 64
  br i1 %193, label %194, label %17

194:                                              ; preds = %155
  %195 = bitcast <8 x i32> %188 to <32 x i8>
  %196 = shufflevector <32 x i8> %195, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %197 = bitcast <32 x i8> %196 to <8 x i32>
  %198 = add <8 x i32> %188, %197
  %199 = bitcast <8 x i32> %198 to <4 x i64>
  %200 = shufflevector <4 x i64> %199, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %201 = shufflevector <4 x i64> %199, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %202 = bitcast <2 x i64> %200 to <4 x i32>
  %203 = bitcast <2 x i64> %201 to <4 x i32>
  %204 = add <4 x i32> %203, %202
  %205 = bitcast <4 x i32> %204 to <16 x i8>
  %206 = shufflevector <16 x i8> %205, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = bitcast <16 x i8> %206 to <4 x i32>
  %208 = add <4 x i32> %204, %207
  %209 = extractelement <4 x i32> %208, i32 0
  ret i32 %209
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @aom_highbd_sad128x128_avg_avx2(i8*, i32, i8*, i32, i8*) local_unnamed_addr #1 {
  %6 = ptrtoint i8* %0 to i64
  %7 = shl i64 %6, 1
  %8 = inttoptr i64 %7 to i16*
  %9 = ptrtoint i8* %2 to i64
  %10 = shl i64 %9, 1
  %11 = inttoptr i64 %10 to i16*
  %12 = ptrtoint i8* %4 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  %15 = sext i32 %1 to i64
  %16 = sext i32 %3 to i64
  br label %17

17:                                               ; preds = %155, %5
  %18 = phi i32 [ 0, %5 ], [ %192, %155 ]
  %19 = phi i16* [ %14, %5 ], [ %191, %155 ]
  %20 = phi i16* [ %11, %5 ], [ %190, %155 ]
  %21 = phi i16* [ %8, %5 ], [ %189, %155 ]
  %22 = phi <8 x i32> [ zeroinitializer, %5 ], [ %188, %155 ]
  %23 = bitcast i16* %21 to <16 x i16>*
  %24 = load <16 x i16>, <16 x i16>* %23, align 1
  %25 = getelementptr inbounds i16, i16* %21, i64 16
  %26 = bitcast i16* %25 to <16 x i16>*
  %27 = load <16 x i16>, <16 x i16>* %26, align 1
  %28 = getelementptr inbounds i16, i16* %21, i64 32
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = load <16 x i16>, <16 x i16>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %21, i64 48
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = bitcast i16* %20 to <4 x i64>*
  %35 = load <4 x i64>, <4 x i64>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %20, i64 16
  %37 = bitcast i16* %36 to <4 x i64>*
  %38 = load <4 x i64>, <4 x i64>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %20, i64 32
  %40 = bitcast i16* %39 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %20, i64 48
  %43 = bitcast i16* %42 to <4 x i64>*
  %44 = load <4 x i64>, <4 x i64>* %43, align 1
  %45 = icmp eq i16* %19, null
  br i1 %45, label %71, label %46

46:                                               ; preds = %17
  %47 = bitcast i16* %19 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = bitcast <4 x i64> %35 to <16 x i16>
  %50 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %49, <16 x i16> %48) #6
  %51 = bitcast <16 x i16> %50 to <4 x i64>
  %52 = getelementptr inbounds i16, i16* %19, i64 16
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = bitcast <4 x i64> %38 to <16 x i16>
  %56 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %55, <16 x i16> %54) #6
  %57 = bitcast <16 x i16> %56 to <4 x i64>
  %58 = getelementptr inbounds i16, i16* %19, i64 32
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 1
  %61 = bitcast <4 x i64> %41 to <16 x i16>
  %62 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %61, <16 x i16> %60) #6
  %63 = bitcast <16 x i16> %62 to <4 x i64>
  %64 = getelementptr inbounds i16, i16* %19, i64 48
  %65 = bitcast i16* %64 to <16 x i16>*
  %66 = load <16 x i16>, <16 x i16>* %65, align 1
  %67 = bitcast <4 x i64> %44 to <16 x i16>
  %68 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %67, <16 x i16> %66) #6
  %69 = bitcast <16 x i16> %68 to <4 x i64>
  %70 = getelementptr inbounds i16, i16* %19, i64 64
  br label %71

71:                                               ; preds = %46, %17
  %72 = phi <4 x i64> [ %44, %17 ], [ %69, %46 ]
  %73 = phi <4 x i64> [ %41, %17 ], [ %63, %46 ]
  %74 = phi <4 x i64> [ %38, %17 ], [ %57, %46 ]
  %75 = phi <4 x i64> [ %35, %17 ], [ %51, %46 ]
  %76 = phi i16* [ null, %17 ], [ %70, %46 ]
  %77 = bitcast <4 x i64> %75 to <16 x i16>
  %78 = sub <16 x i16> %24, %77
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = bitcast <4 x i64> %74 to <16 x i16>
  %83 = sub <16 x i16> %27, %82
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = bitcast <4 x i64> %73 to <16 x i16>
  %88 = sub <16 x i16> %30, %87
  %89 = sub <16 x i16> zeroinitializer, %88
  %90 = icmp slt <16 x i16> %88, zeroinitializer
  %91 = select <16 x i1> %90, <16 x i16> %89, <16 x i16> %88
  %92 = bitcast <4 x i64> %72 to <16 x i16>
  %93 = sub <16 x i16> %33, %92
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = add <16 x i16> %91, %96
  %98 = add <16 x i16> %97, %86
  %99 = add <16 x i16> %98, %81
  %100 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i16> %100 to <8 x i32>
  %103 = bitcast <16 x i16> %101 to <8 x i32>
  %104 = add <8 x i32> %22, %102
  %105 = add <8 x i32> %104, %103
  %106 = getelementptr inbounds i16, i16* %21, i64 64
  %107 = getelementptr inbounds i16, i16* %20, i64 64
  %108 = bitcast i16* %106 to <16 x i16>*
  %109 = load <16 x i16>, <16 x i16>* %108, align 1
  %110 = getelementptr inbounds i16, i16* %21, i64 80
  %111 = bitcast i16* %110 to <16 x i16>*
  %112 = load <16 x i16>, <16 x i16>* %111, align 1
  %113 = getelementptr inbounds i16, i16* %21, i64 96
  %114 = bitcast i16* %113 to <16 x i16>*
  %115 = load <16 x i16>, <16 x i16>* %114, align 1
  %116 = getelementptr inbounds i16, i16* %21, i64 112
  %117 = bitcast i16* %116 to <16 x i16>*
  %118 = load <16 x i16>, <16 x i16>* %117, align 1
  %119 = bitcast i16* %107 to <4 x i64>*
  %120 = load <4 x i64>, <4 x i64>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %20, i64 80
  %122 = bitcast i16* %121 to <4 x i64>*
  %123 = load <4 x i64>, <4 x i64>* %122, align 1
  %124 = getelementptr inbounds i16, i16* %20, i64 96
  %125 = bitcast i16* %124 to <4 x i64>*
  %126 = load <4 x i64>, <4 x i64>* %125, align 1
  %127 = getelementptr inbounds i16, i16* %20, i64 112
  %128 = bitcast i16* %127 to <4 x i64>*
  %129 = load <4 x i64>, <4 x i64>* %128, align 1
  %130 = icmp eq i16* %76, null
  br i1 %130, label %155, label %131

131:                                              ; preds = %71
  %132 = bitcast i16* %76 to <16 x i16>*
  %133 = load <16 x i16>, <16 x i16>* %132, align 1
  %134 = bitcast <4 x i64> %120 to <16 x i16>
  %135 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %134, <16 x i16> %133) #6
  %136 = bitcast <16 x i16> %135 to <4 x i64>
  %137 = getelementptr inbounds i16, i16* %76, i64 16
  %138 = bitcast i16* %137 to <16 x i16>*
  %139 = load <16 x i16>, <16 x i16>* %138, align 1
  %140 = bitcast <4 x i64> %123 to <16 x i16>
  %141 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %140, <16 x i16> %139) #6
  %142 = bitcast <16 x i16> %141 to <4 x i64>
  %143 = getelementptr inbounds i16, i16* %76, i64 32
  %144 = bitcast i16* %143 to <16 x i16>*
  %145 = load <16 x i16>, <16 x i16>* %144, align 1
  %146 = bitcast <4 x i64> %126 to <16 x i16>
  %147 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %146, <16 x i16> %145) #6
  %148 = bitcast <16 x i16> %147 to <4 x i64>
  %149 = getelementptr inbounds i16, i16* %76, i64 48
  %150 = bitcast i16* %149 to <16 x i16>*
  %151 = load <16 x i16>, <16 x i16>* %150, align 1
  %152 = bitcast <4 x i64> %129 to <16 x i16>
  %153 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %152, <16 x i16> %151) #6
  %154 = bitcast <16 x i16> %153 to <4 x i64>
  br label %155

155:                                              ; preds = %131, %71
  %156 = phi <4 x i64> [ %129, %71 ], [ %154, %131 ]
  %157 = phi <4 x i64> [ %126, %71 ], [ %148, %131 ]
  %158 = phi <4 x i64> [ %123, %71 ], [ %142, %131 ]
  %159 = phi <4 x i64> [ %120, %71 ], [ %136, %131 ]
  %160 = bitcast <4 x i64> %159 to <16 x i16>
  %161 = sub <16 x i16> %109, %160
  %162 = sub <16 x i16> zeroinitializer, %161
  %163 = icmp slt <16 x i16> %161, zeroinitializer
  %164 = select <16 x i1> %163, <16 x i16> %162, <16 x i16> %161
  %165 = bitcast <4 x i64> %158 to <16 x i16>
  %166 = sub <16 x i16> %112, %165
  %167 = sub <16 x i16> zeroinitializer, %166
  %168 = icmp slt <16 x i16> %166, zeroinitializer
  %169 = select <16 x i1> %168, <16 x i16> %167, <16 x i16> %166
  %170 = bitcast <4 x i64> %157 to <16 x i16>
  %171 = sub <16 x i16> %115, %170
  %172 = sub <16 x i16> zeroinitializer, %171
  %173 = icmp slt <16 x i16> %171, zeroinitializer
  %174 = select <16 x i1> %173, <16 x i16> %172, <16 x i16> %171
  %175 = bitcast <4 x i64> %156 to <16 x i16>
  %176 = sub <16 x i16> %118, %175
  %177 = sub <16 x i16> zeroinitializer, %176
  %178 = icmp slt <16 x i16> %176, zeroinitializer
  %179 = select <16 x i1> %178, <16 x i16> %177, <16 x i16> %176
  %180 = add <16 x i16> %174, %179
  %181 = add <16 x i16> %180, %169
  %182 = add <16 x i16> %181, %164
  %183 = shufflevector <16 x i16> %182, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %184 = shufflevector <16 x i16> %182, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %185 = bitcast <16 x i16> %183 to <8 x i32>
  %186 = bitcast <16 x i16> %184 to <8 x i32>
  %187 = add <8 x i32> %105, %185
  %188 = add <8 x i32> %187, %186
  %189 = getelementptr inbounds i16, i16* %21, i64 %15
  %190 = getelementptr inbounds i16, i16* %20, i64 %16
  %191 = getelementptr inbounds i16, i16* %19, i64 128
  %192 = add nuw nsw i32 %18, 1
  %193 = icmp eq i32 %192, 64
  br i1 %193, label %194, label %17

194:                                              ; preds = %155
  %195 = bitcast <8 x i32> %188 to <32 x i8>
  %196 = shufflevector <32 x i8> %195, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %197 = bitcast <32 x i8> %196 to <8 x i32>
  %198 = add <8 x i32> %188, %197
  %199 = bitcast <8 x i32> %198 to <4 x i64>
  %200 = shufflevector <4 x i64> %199, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %201 = shufflevector <4 x i64> %199, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %202 = bitcast <2 x i64> %200 to <4 x i32>
  %203 = bitcast <2 x i64> %201 to <4 x i32>
  %204 = add <4 x i32> %203, %202
  %205 = bitcast <4 x i32> %204 to <16 x i8>
  %206 = shufflevector <16 x i8> %205, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %207 = bitcast <16 x i8> %206 to <4 x i32>
  %208 = add <4 x i32> %204, %207
  %209 = shl i32 %1, 6
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %0, i64 %210
  %212 = shl i32 %3, 6
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %2, i64 %213
  %215 = getelementptr inbounds i8, i8* %4, i64 8192
  %216 = ptrtoint i8* %211 to i64
  %217 = shl i64 %216, 1
  %218 = inttoptr i64 %217 to i16*
  %219 = ptrtoint i8* %214 to i64
  %220 = shl i64 %219, 1
  %221 = inttoptr i64 %220 to i16*
  %222 = ptrtoint i8* %215 to i64
  %223 = shl i64 %222, 1
  %224 = inttoptr i64 %223 to i16*
  br label %225

225:                                              ; preds = %363, %194
  %226 = phi i32 [ 0, %194 ], [ %400, %363 ]
  %227 = phi i16* [ %224, %194 ], [ %399, %363 ]
  %228 = phi i16* [ %221, %194 ], [ %398, %363 ]
  %229 = phi i16* [ %218, %194 ], [ %397, %363 ]
  %230 = phi <8 x i32> [ zeroinitializer, %194 ], [ %396, %363 ]
  %231 = bitcast i16* %229 to <16 x i16>*
  %232 = load <16 x i16>, <16 x i16>* %231, align 1
  %233 = getelementptr inbounds i16, i16* %229, i64 16
  %234 = bitcast i16* %233 to <16 x i16>*
  %235 = load <16 x i16>, <16 x i16>* %234, align 1
  %236 = getelementptr inbounds i16, i16* %229, i64 32
  %237 = bitcast i16* %236 to <16 x i16>*
  %238 = load <16 x i16>, <16 x i16>* %237, align 1
  %239 = getelementptr inbounds i16, i16* %229, i64 48
  %240 = bitcast i16* %239 to <16 x i16>*
  %241 = load <16 x i16>, <16 x i16>* %240, align 1
  %242 = bitcast i16* %228 to <4 x i64>*
  %243 = load <4 x i64>, <4 x i64>* %242, align 1
  %244 = getelementptr inbounds i16, i16* %228, i64 16
  %245 = bitcast i16* %244 to <4 x i64>*
  %246 = load <4 x i64>, <4 x i64>* %245, align 1
  %247 = getelementptr inbounds i16, i16* %228, i64 32
  %248 = bitcast i16* %247 to <4 x i64>*
  %249 = load <4 x i64>, <4 x i64>* %248, align 1
  %250 = getelementptr inbounds i16, i16* %228, i64 48
  %251 = bitcast i16* %250 to <4 x i64>*
  %252 = load <4 x i64>, <4 x i64>* %251, align 1
  %253 = icmp eq i16* %227, null
  br i1 %253, label %279, label %254

254:                                              ; preds = %225
  %255 = bitcast i16* %227 to <16 x i16>*
  %256 = load <16 x i16>, <16 x i16>* %255, align 1
  %257 = bitcast <4 x i64> %243 to <16 x i16>
  %258 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %257, <16 x i16> %256) #6
  %259 = bitcast <16 x i16> %258 to <4 x i64>
  %260 = getelementptr inbounds i16, i16* %227, i64 16
  %261 = bitcast i16* %260 to <16 x i16>*
  %262 = load <16 x i16>, <16 x i16>* %261, align 1
  %263 = bitcast <4 x i64> %246 to <16 x i16>
  %264 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %263, <16 x i16> %262) #6
  %265 = bitcast <16 x i16> %264 to <4 x i64>
  %266 = getelementptr inbounds i16, i16* %227, i64 32
  %267 = bitcast i16* %266 to <16 x i16>*
  %268 = load <16 x i16>, <16 x i16>* %267, align 1
  %269 = bitcast <4 x i64> %249 to <16 x i16>
  %270 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %269, <16 x i16> %268) #6
  %271 = bitcast <16 x i16> %270 to <4 x i64>
  %272 = getelementptr inbounds i16, i16* %227, i64 48
  %273 = bitcast i16* %272 to <16 x i16>*
  %274 = load <16 x i16>, <16 x i16>* %273, align 1
  %275 = bitcast <4 x i64> %252 to <16 x i16>
  %276 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %275, <16 x i16> %274) #6
  %277 = bitcast <16 x i16> %276 to <4 x i64>
  %278 = getelementptr inbounds i16, i16* %227, i64 64
  br label %279

279:                                              ; preds = %254, %225
  %280 = phi <4 x i64> [ %252, %225 ], [ %277, %254 ]
  %281 = phi <4 x i64> [ %249, %225 ], [ %271, %254 ]
  %282 = phi <4 x i64> [ %246, %225 ], [ %265, %254 ]
  %283 = phi <4 x i64> [ %243, %225 ], [ %259, %254 ]
  %284 = phi i16* [ null, %225 ], [ %278, %254 ]
  %285 = bitcast <4 x i64> %283 to <16 x i16>
  %286 = sub <16 x i16> %232, %285
  %287 = sub <16 x i16> zeroinitializer, %286
  %288 = icmp slt <16 x i16> %286, zeroinitializer
  %289 = select <16 x i1> %288, <16 x i16> %287, <16 x i16> %286
  %290 = bitcast <4 x i64> %282 to <16 x i16>
  %291 = sub <16 x i16> %235, %290
  %292 = sub <16 x i16> zeroinitializer, %291
  %293 = icmp slt <16 x i16> %291, zeroinitializer
  %294 = select <16 x i1> %293, <16 x i16> %292, <16 x i16> %291
  %295 = bitcast <4 x i64> %281 to <16 x i16>
  %296 = sub <16 x i16> %238, %295
  %297 = sub <16 x i16> zeroinitializer, %296
  %298 = icmp slt <16 x i16> %296, zeroinitializer
  %299 = select <16 x i1> %298, <16 x i16> %297, <16 x i16> %296
  %300 = bitcast <4 x i64> %280 to <16 x i16>
  %301 = sub <16 x i16> %241, %300
  %302 = sub <16 x i16> zeroinitializer, %301
  %303 = icmp slt <16 x i16> %301, zeroinitializer
  %304 = select <16 x i1> %303, <16 x i16> %302, <16 x i16> %301
  %305 = add <16 x i16> %299, %304
  %306 = add <16 x i16> %305, %294
  %307 = add <16 x i16> %306, %289
  %308 = shufflevector <16 x i16> %307, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %309 = shufflevector <16 x i16> %307, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %310 = bitcast <16 x i16> %308 to <8 x i32>
  %311 = bitcast <16 x i16> %309 to <8 x i32>
  %312 = add <8 x i32> %230, %310
  %313 = add <8 x i32> %312, %311
  %314 = getelementptr inbounds i16, i16* %229, i64 64
  %315 = getelementptr inbounds i16, i16* %228, i64 64
  %316 = bitcast i16* %314 to <16 x i16>*
  %317 = load <16 x i16>, <16 x i16>* %316, align 1
  %318 = getelementptr inbounds i16, i16* %229, i64 80
  %319 = bitcast i16* %318 to <16 x i16>*
  %320 = load <16 x i16>, <16 x i16>* %319, align 1
  %321 = getelementptr inbounds i16, i16* %229, i64 96
  %322 = bitcast i16* %321 to <16 x i16>*
  %323 = load <16 x i16>, <16 x i16>* %322, align 1
  %324 = getelementptr inbounds i16, i16* %229, i64 112
  %325 = bitcast i16* %324 to <16 x i16>*
  %326 = load <16 x i16>, <16 x i16>* %325, align 1
  %327 = bitcast i16* %315 to <4 x i64>*
  %328 = load <4 x i64>, <4 x i64>* %327, align 1
  %329 = getelementptr inbounds i16, i16* %228, i64 80
  %330 = bitcast i16* %329 to <4 x i64>*
  %331 = load <4 x i64>, <4 x i64>* %330, align 1
  %332 = getelementptr inbounds i16, i16* %228, i64 96
  %333 = bitcast i16* %332 to <4 x i64>*
  %334 = load <4 x i64>, <4 x i64>* %333, align 1
  %335 = getelementptr inbounds i16, i16* %228, i64 112
  %336 = bitcast i16* %335 to <4 x i64>*
  %337 = load <4 x i64>, <4 x i64>* %336, align 1
  %338 = icmp eq i16* %284, null
  br i1 %338, label %363, label %339

339:                                              ; preds = %279
  %340 = bitcast i16* %284 to <16 x i16>*
  %341 = load <16 x i16>, <16 x i16>* %340, align 1
  %342 = bitcast <4 x i64> %328 to <16 x i16>
  %343 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %342, <16 x i16> %341) #6
  %344 = bitcast <16 x i16> %343 to <4 x i64>
  %345 = getelementptr inbounds i16, i16* %284, i64 16
  %346 = bitcast i16* %345 to <16 x i16>*
  %347 = load <16 x i16>, <16 x i16>* %346, align 1
  %348 = bitcast <4 x i64> %331 to <16 x i16>
  %349 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %348, <16 x i16> %347) #6
  %350 = bitcast <16 x i16> %349 to <4 x i64>
  %351 = getelementptr inbounds i16, i16* %284, i64 32
  %352 = bitcast i16* %351 to <16 x i16>*
  %353 = load <16 x i16>, <16 x i16>* %352, align 1
  %354 = bitcast <4 x i64> %334 to <16 x i16>
  %355 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %354, <16 x i16> %353) #6
  %356 = bitcast <16 x i16> %355 to <4 x i64>
  %357 = getelementptr inbounds i16, i16* %284, i64 48
  %358 = bitcast i16* %357 to <16 x i16>*
  %359 = load <16 x i16>, <16 x i16>* %358, align 1
  %360 = bitcast <4 x i64> %337 to <16 x i16>
  %361 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %360, <16 x i16> %359) #6
  %362 = bitcast <16 x i16> %361 to <4 x i64>
  br label %363

363:                                              ; preds = %339, %279
  %364 = phi <4 x i64> [ %337, %279 ], [ %362, %339 ]
  %365 = phi <4 x i64> [ %334, %279 ], [ %356, %339 ]
  %366 = phi <4 x i64> [ %331, %279 ], [ %350, %339 ]
  %367 = phi <4 x i64> [ %328, %279 ], [ %344, %339 ]
  %368 = bitcast <4 x i64> %367 to <16 x i16>
  %369 = sub <16 x i16> %317, %368
  %370 = sub <16 x i16> zeroinitializer, %369
  %371 = icmp slt <16 x i16> %369, zeroinitializer
  %372 = select <16 x i1> %371, <16 x i16> %370, <16 x i16> %369
  %373 = bitcast <4 x i64> %366 to <16 x i16>
  %374 = sub <16 x i16> %320, %373
  %375 = sub <16 x i16> zeroinitializer, %374
  %376 = icmp slt <16 x i16> %374, zeroinitializer
  %377 = select <16 x i1> %376, <16 x i16> %375, <16 x i16> %374
  %378 = bitcast <4 x i64> %365 to <16 x i16>
  %379 = sub <16 x i16> %323, %378
  %380 = sub <16 x i16> zeroinitializer, %379
  %381 = icmp slt <16 x i16> %379, zeroinitializer
  %382 = select <16 x i1> %381, <16 x i16> %380, <16 x i16> %379
  %383 = bitcast <4 x i64> %364 to <16 x i16>
  %384 = sub <16 x i16> %326, %383
  %385 = sub <16 x i16> zeroinitializer, %384
  %386 = icmp slt <16 x i16> %384, zeroinitializer
  %387 = select <16 x i1> %386, <16 x i16> %385, <16 x i16> %384
  %388 = add <16 x i16> %382, %387
  %389 = add <16 x i16> %388, %377
  %390 = add <16 x i16> %389, %372
  %391 = shufflevector <16 x i16> %390, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %392 = shufflevector <16 x i16> %390, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %393 = bitcast <16 x i16> %391 to <8 x i32>
  %394 = bitcast <16 x i16> %392 to <8 x i32>
  %395 = add <8 x i32> %313, %393
  %396 = add <8 x i32> %395, %394
  %397 = getelementptr inbounds i16, i16* %229, i64 %15
  %398 = getelementptr inbounds i16, i16* %228, i64 %16
  %399 = getelementptr inbounds i16, i16* %227, i64 128
  %400 = add nuw nsw i32 %226, 1
  %401 = icmp eq i32 %400, 64
  br i1 %401, label %402, label %225

402:                                              ; preds = %363
  %403 = extractelement <4 x i32> %208, i32 0
  %404 = bitcast <8 x i32> %396 to <32 x i8>
  %405 = shufflevector <32 x i8> %404, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55>
  %406 = bitcast <32 x i8> %405 to <8 x i32>
  %407 = add <8 x i32> %396, %406
  %408 = bitcast <8 x i32> %407 to <4 x i64>
  %409 = shufflevector <4 x i64> %408, <4 x i64> undef, <2 x i32> <i32 2, i32 3>
  %410 = shufflevector <4 x i64> %408, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %411 = bitcast <2 x i64> %409 to <4 x i32>
  %412 = bitcast <2 x i64> %410 to <4 x i32>
  %413 = add <4 x i32> %412, %411
  %414 = bitcast <4 x i32> %413 to <16 x i8>
  %415 = shufflevector <16 x i8> %414, <16 x i8> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %416 = bitcast <16 x i8> %415 to <4 x i32>
  %417 = add <4 x i32> %413, %416
  %418 = extractelement <4 x i32> %417, i32 0
  %419 = add i32 %418, %403
  ret i32 %419
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad16x4x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 0
  %11 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 1
  %12 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 2
  %13 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 3
  %14 = ptrtoint i8* %0 to i64
  %15 = shl i64 %14, 1
  %16 = inttoptr i64 %15 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %17 = bitcast i8** %2 to <4 x i64>*
  %18 = load <4 x i64>, <4 x i64>* %17, align 8
  %19 = shl <4 x i64> %18, <i64 1, i64 1, i64 1, i64 1>
  %20 = inttoptr <4 x i64> %19 to <4 x i16*>
  store <4 x i16*> %20, <4 x i16*>* %7, align 16
  %21 = sext i32 %1 to i64
  %22 = shl nsw i32 %1, 1
  %23 = sext i32 %22 to i64
  %24 = mul nsw i32 %1, 3
  %25 = sext i32 %24 to i64
  %26 = sext i32 %3 to i64
  %27 = shl nsw i32 %3, 1
  %28 = sext i32 %27 to i64
  %29 = mul nsw i32 %3, 3
  %30 = sext i32 %29 to i64
  %31 = shl i32 %3, 2
  %32 = sext i32 %31 to i64
  %33 = inttoptr i64 %15 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %16, i64 %21
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %16, i64 %23
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %16, i64 %25
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %41 = bitcast [4 x <4 x i64>]* %6 to <8 x i32>*
  %42 = load <16 x i16>, <16 x i16>* %33, align 2
  %43 = load <16 x i16>, <16 x i16>* %35, align 2
  %44 = load <16 x i16>, <16 x i16>* %37, align 2
  %45 = load <16 x i16>, <16 x i16>* %39, align 2
  %46 = extractelement <4 x i64> %19, i32 0
  %47 = inttoptr i64 %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 2
  %49 = extractelement <4 x i16*> %20, i32 0
  %50 = getelementptr inbounds i16, i16* %49, i64 %26
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 2
  %53 = getelementptr inbounds i16, i16* %49, i64 %28
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 2
  %56 = getelementptr inbounds i16, i16* %49, i64 %30
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 2
  %59 = sub <16 x i16> %42, %48
  %60 = sub <16 x i16> zeroinitializer, %59
  %61 = icmp slt <16 x i16> %59, zeroinitializer
  %62 = select <16 x i1> %61, <16 x i16> %60, <16 x i16> %59
  %63 = sub <16 x i16> %43, %52
  %64 = sub <16 x i16> zeroinitializer, %63
  %65 = icmp slt <16 x i16> %63, zeroinitializer
  %66 = select <16 x i1> %65, <16 x i16> %64, <16 x i16> %63
  %67 = sub <16 x i16> %44, %55
  %68 = sub <16 x i16> zeroinitializer, %67
  %69 = icmp slt <16 x i16> %67, zeroinitializer
  %70 = select <16 x i1> %69, <16 x i16> %68, <16 x i16> %67
  %71 = sub <16 x i16> %45, %58
  %72 = sub <16 x i16> zeroinitializer, %71
  %73 = icmp slt <16 x i16> %71, zeroinitializer
  %74 = select <16 x i1> %73, <16 x i16> %72, <16 x i16> %71
  %75 = add <16 x i16> %66, %62
  %76 = add <16 x i16> %75, %70
  %77 = add <16 x i16> %76, %74
  %78 = shufflevector <16 x i16> %77, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %79 = shufflevector <16 x i16> %77, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %80 = bitcast <16 x i16> %78 to <8 x i32>
  %81 = bitcast <16 x i16> %79 to <8 x i32>
  %82 = add <8 x i32> %80, %81
  store <8 x i32> %82, <8 x i32>* %41, align 32
  %83 = getelementptr inbounds i16, i16* %49, i64 %32
  store i16* %83, i16** %10, align 16
  %84 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %85 = bitcast <4 x i64>* %84 to <8 x i32>*
  %86 = load <16 x i16>, <16 x i16>* %33, align 2
  %87 = load <16 x i16>, <16 x i16>* %35, align 2
  %88 = load <16 x i16>, <16 x i16>* %37, align 2
  %89 = load <16 x i16>, <16 x i16>* %39, align 2
  %90 = extractelement <4 x i64> %19, i32 1
  %91 = inttoptr i64 %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 2
  %93 = extractelement <4 x i16*> %20, i32 1
  %94 = getelementptr inbounds i16, i16* %93, i64 %26
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 2
  %97 = getelementptr inbounds i16, i16* %93, i64 %28
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 2
  %100 = getelementptr inbounds i16, i16* %93, i64 %30
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 2
  %103 = sub <16 x i16> %86, %92
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %87, %96
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %88, %99
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %89, %102
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = add <16 x i16> %110, %106
  %120 = add <16 x i16> %119, %114
  %121 = add <16 x i16> %120, %118
  %122 = shufflevector <16 x i16> %121, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %123 = shufflevector <16 x i16> %121, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = bitcast <16 x i16> %122 to <8 x i32>
  %125 = bitcast <16 x i16> %123 to <8 x i32>
  %126 = add <8 x i32> %124, %125
  store <8 x i32> %126, <8 x i32>* %85, align 32
  %127 = getelementptr inbounds i16, i16* %93, i64 %32
  store i16* %127, i16** %11, align 8
  %128 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %129 = bitcast <4 x i64>* %128 to <8 x i32>*
  %130 = load i16*, i16** %12, align 16
  %131 = load <8 x i32>, <8 x i32>* %129, align 32
  %132 = load <16 x i16>, <16 x i16>* %33, align 2
  %133 = load <16 x i16>, <16 x i16>* %35, align 2
  %134 = load <16 x i16>, <16 x i16>* %37, align 2
  %135 = load <16 x i16>, <16 x i16>* %39, align 2
  %136 = bitcast i16* %130 to <16 x i16>*
  %137 = load <16 x i16>, <16 x i16>* %136, align 1
  %138 = getelementptr inbounds i16, i16* %130, i64 %26
  %139 = bitcast i16* %138 to <16 x i16>*
  %140 = load <16 x i16>, <16 x i16>* %139, align 1
  %141 = getelementptr inbounds i16, i16* %130, i64 %28
  %142 = bitcast i16* %141 to <16 x i16>*
  %143 = load <16 x i16>, <16 x i16>* %142, align 1
  %144 = getelementptr inbounds i16, i16* %130, i64 %30
  %145 = bitcast i16* %144 to <16 x i16>*
  %146 = load <16 x i16>, <16 x i16>* %145, align 1
  %147 = sub <16 x i16> %132, %137
  %148 = sub <16 x i16> zeroinitializer, %147
  %149 = icmp slt <16 x i16> %147, zeroinitializer
  %150 = select <16 x i1> %149, <16 x i16> %148, <16 x i16> %147
  %151 = sub <16 x i16> %133, %140
  %152 = sub <16 x i16> zeroinitializer, %151
  %153 = icmp slt <16 x i16> %151, zeroinitializer
  %154 = select <16 x i1> %153, <16 x i16> %152, <16 x i16> %151
  %155 = sub <16 x i16> %134, %143
  %156 = sub <16 x i16> zeroinitializer, %155
  %157 = icmp slt <16 x i16> %155, zeroinitializer
  %158 = select <16 x i1> %157, <16 x i16> %156, <16 x i16> %155
  %159 = sub <16 x i16> %135, %146
  %160 = sub <16 x i16> zeroinitializer, %159
  %161 = icmp slt <16 x i16> %159, zeroinitializer
  %162 = select <16 x i1> %161, <16 x i16> %160, <16 x i16> %159
  %163 = add <16 x i16> %154, %150
  %164 = add <16 x i16> %163, %158
  %165 = add <16 x i16> %164, %162
  %166 = shufflevector <16 x i16> %165, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %167 = shufflevector <16 x i16> %165, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %168 = bitcast <16 x i16> %166 to <8 x i32>
  %169 = bitcast <16 x i16> %167 to <8 x i32>
  %170 = add <8 x i32> %131, %168
  %171 = add <8 x i32> %170, %169
  store <8 x i32> %171, <8 x i32>* %129, align 32
  %172 = getelementptr inbounds i16, i16* %130, i64 %32
  store i16* %172, i16** %12, align 16
  %173 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %174 = bitcast <4 x i64>* %173 to <8 x i32>*
  %175 = load i16*, i16** %13, align 8
  %176 = load <8 x i32>, <8 x i32>* %174, align 32
  %177 = load <16 x i16>, <16 x i16>* %33, align 2
  %178 = load <16 x i16>, <16 x i16>* %35, align 2
  %179 = load <16 x i16>, <16 x i16>* %37, align 2
  %180 = load <16 x i16>, <16 x i16>* %39, align 2
  %181 = bitcast i16* %175 to <16 x i16>*
  %182 = load <16 x i16>, <16 x i16>* %181, align 1
  %183 = getelementptr inbounds i16, i16* %175, i64 %26
  %184 = bitcast i16* %183 to <16 x i16>*
  %185 = load <16 x i16>, <16 x i16>* %184, align 1
  %186 = getelementptr inbounds i16, i16* %175, i64 %28
  %187 = bitcast i16* %186 to <16 x i16>*
  %188 = load <16 x i16>, <16 x i16>* %187, align 1
  %189 = getelementptr inbounds i16, i16* %175, i64 %30
  %190 = bitcast i16* %189 to <16 x i16>*
  %191 = load <16 x i16>, <16 x i16>* %190, align 1
  %192 = sub <16 x i16> %177, %182
  %193 = sub <16 x i16> zeroinitializer, %192
  %194 = icmp slt <16 x i16> %192, zeroinitializer
  %195 = select <16 x i1> %194, <16 x i16> %193, <16 x i16> %192
  %196 = sub <16 x i16> %178, %185
  %197 = sub <16 x i16> zeroinitializer, %196
  %198 = icmp slt <16 x i16> %196, zeroinitializer
  %199 = select <16 x i1> %198, <16 x i16> %197, <16 x i16> %196
  %200 = sub <16 x i16> %179, %188
  %201 = sub <16 x i16> zeroinitializer, %200
  %202 = icmp slt <16 x i16> %200, zeroinitializer
  %203 = select <16 x i1> %202, <16 x i16> %201, <16 x i16> %200
  %204 = sub <16 x i16> %180, %191
  %205 = sub <16 x i16> zeroinitializer, %204
  %206 = icmp slt <16 x i16> %204, zeroinitializer
  %207 = select <16 x i1> %206, <16 x i16> %205, <16 x i16> %204
  %208 = add <16 x i16> %199, %195
  %209 = add <16 x i16> %208, %203
  %210 = add <16 x i16> %209, %207
  %211 = shufflevector <16 x i16> %210, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %212 = shufflevector <16 x i16> %210, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %213 = bitcast <16 x i16> %211 to <8 x i32>
  %214 = bitcast <16 x i16> %212 to <8 x i32>
  %215 = add <8 x i32> %176, %213
  %216 = add <8 x i32> %215, %214
  store <8 x i32> %216, <8 x i32>* %174, align 32
  %217 = load <4 x i64>, <4 x i64>* %40, align 32
  %218 = bitcast <4 x i64> %217 to <32 x i8>
  %219 = shufflevector <32 x i8> %218, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %220 = bitcast <4 x i64>* %84 to <32 x i8>*
  %221 = load <32 x i8>, <32 x i8>* %220, align 32
  %222 = shufflevector <32 x i8> %221, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %223 = bitcast <8 x i32> %171 to <32 x i8>
  %224 = shufflevector <32 x i8> %223, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %225 = bitcast <8 x i32> %216 to <32 x i8>
  %226 = shufflevector <32 x i8> %225, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %227 = bitcast <32 x i8> %219 to <8 x i32>
  %228 = bitcast <4 x i64> %217 to <8 x i32>
  %229 = add <8 x i32> %227, %228
  %230 = bitcast <8 x i32> %229 to <4 x i64>
  %231 = bitcast <32 x i8> %221 to <8 x i32>
  %232 = bitcast <32 x i8> %222 to <8 x i32>
  %233 = add <8 x i32> %232, %231
  %234 = bitcast <32 x i8> %224 to <8 x i32>
  %235 = add <8 x i32> %171, %234
  %236 = bitcast <8 x i32> %235 to <4 x i64>
  %237 = bitcast <32 x i8> %226 to <8 x i32>
  %238 = add <8 x i32> %216, %237
  %239 = and <4 x i64> %230, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %240 = and <4 x i64> %236, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %241 = bitcast <8 x i32> %233 to <32 x i8>
  %242 = and <32 x i8> %241, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %243 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %242, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %244 = bitcast <32 x i8> %243 to <4 x i64>
  %245 = bitcast <8 x i32> %238 to <32 x i8>
  %246 = and <32 x i8> %245, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %247 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %246, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %248 = bitcast <32 x i8> %247 to <4 x i64>
  %249 = or <4 x i64> %239, %244
  %250 = or <4 x i64> %240, %248
  %251 = shufflevector <4 x i64> %249, <4 x i64> %250, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %252 = shufflevector <4 x i64> %249, <4 x i64> %250, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %253 = bitcast <4 x i64> %251 to <8 x i32>
  %254 = bitcast <4 x i64> %252 to <8 x i32>
  %255 = add <8 x i32> %254, %253
  %256 = bitcast <8 x i32> %255 to <4 x i64>
  %257 = shufflevector <8 x i32> %255, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %258 = shufflevector <4 x i64> %256, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %259 = bitcast <2 x i64> %258 to <4 x i32>
  %260 = add <4 x i32> %257, %259
  %261 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %260, <4 x i32>* %261, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad16x8x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = shl nsw i32 %1, 1
  %19 = sext i32 %18 to i64
  %20 = mul nsw i32 %1, 3
  %21 = sext i32 %20 to i64
  %22 = sext i32 %3 to i64
  %23 = shl nsw i32 %3, 1
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %1, 2
  %28 = sext i32 %27 to i64
  %29 = shl i32 %3, 2
  %30 = sext i32 %29 to i64
  %31 = inttoptr i64 %11 to <16 x i16>*
  %32 = getelementptr inbounds i16, i16* %12, i64 %17
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %12, i64 %19
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %12, i64 %21
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %12, i64 %28
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %38, i64 %17
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds i16, i16* %38, i64 %19
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = getelementptr inbounds i16, i16* %38, i64 %21
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = extractelement <4 x i16*> %16, i32 0
  br label %47

47:                                               ; preds = %138, %5
  %48 = phi i16* [ %46, %5 ], [ %140, %138 ]
  %49 = phi i64 [ 0, %5 ], [ %136, %138 ]
  %50 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %49
  %51 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %49
  %52 = bitcast <4 x i64>* %51 to <8 x i32>*
  %53 = load <8 x i32>, <8 x i32>* %52, align 32
  %54 = load <16 x i16>, <16 x i16>* %31, align 2
  %55 = load <16 x i16>, <16 x i16>* %33, align 2
  %56 = load <16 x i16>, <16 x i16>* %35, align 2
  %57 = load <16 x i16>, <16 x i16>* %37, align 2
  %58 = bitcast i16* %48 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = getelementptr inbounds i16, i16* %48, i64 %22
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %48, i64 %24
  %64 = bitcast i16* %63 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %48, i64 %26
  %67 = bitcast i16* %66 to <16 x i16>*
  %68 = load <16 x i16>, <16 x i16>* %67, align 1
  %69 = sub <16 x i16> %54, %59
  %70 = sub <16 x i16> zeroinitializer, %69
  %71 = icmp slt <16 x i16> %69, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i16> %70, <16 x i16> %69
  %73 = sub <16 x i16> %55, %62
  %74 = sub <16 x i16> zeroinitializer, %73
  %75 = icmp slt <16 x i16> %73, zeroinitializer
  %76 = select <16 x i1> %75, <16 x i16> %74, <16 x i16> %73
  %77 = sub <16 x i16> %56, %65
  %78 = sub <16 x i16> zeroinitializer, %77
  %79 = icmp slt <16 x i16> %77, zeroinitializer
  %80 = select <16 x i1> %79, <16 x i16> %78, <16 x i16> %77
  %81 = sub <16 x i16> %57, %68
  %82 = sub <16 x i16> zeroinitializer, %81
  %83 = icmp slt <16 x i16> %81, zeroinitializer
  %84 = select <16 x i1> %83, <16 x i16> %82, <16 x i16> %81
  %85 = add <16 x i16> %76, %72
  %86 = add <16 x i16> %85, %80
  %87 = add <16 x i16> %86, %84
  %88 = shufflevector <16 x i16> %87, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %89 = shufflevector <16 x i16> %87, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = bitcast <16 x i16> %88 to <8 x i32>
  %91 = bitcast <16 x i16> %89 to <8 x i32>
  %92 = add <8 x i32> %53, %90
  %93 = add <8 x i32> %92, %91
  store <8 x i32> %93, <8 x i32>* %52, align 32
  %94 = getelementptr inbounds i16, i16* %48, i64 %30
  store i16* %94, i16** %50, align 8
  %95 = load <16 x i16>, <16 x i16>* %39, align 2
  %96 = load <16 x i16>, <16 x i16>* %41, align 2
  %97 = load <16 x i16>, <16 x i16>* %43, align 2
  %98 = load <16 x i16>, <16 x i16>* %45, align 2
  %99 = bitcast i16* %94 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 1
  %101 = getelementptr inbounds i16, i16* %94, i64 %22
  %102 = bitcast i16* %101 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %94, i64 %24
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = getelementptr inbounds i16, i16* %94, i64 %26
  %108 = bitcast i16* %107 to <16 x i16>*
  %109 = load <16 x i16>, <16 x i16>* %108, align 1
  %110 = sub <16 x i16> %95, %100
  %111 = sub <16 x i16> zeroinitializer, %110
  %112 = icmp slt <16 x i16> %110, zeroinitializer
  %113 = select <16 x i1> %112, <16 x i16> %111, <16 x i16> %110
  %114 = sub <16 x i16> %96, %103
  %115 = sub <16 x i16> zeroinitializer, %114
  %116 = icmp slt <16 x i16> %114, zeroinitializer
  %117 = select <16 x i1> %116, <16 x i16> %115, <16 x i16> %114
  %118 = sub <16 x i16> %97, %106
  %119 = sub <16 x i16> zeroinitializer, %118
  %120 = icmp slt <16 x i16> %118, zeroinitializer
  %121 = select <16 x i1> %120, <16 x i16> %119, <16 x i16> %118
  %122 = sub <16 x i16> %98, %109
  %123 = sub <16 x i16> zeroinitializer, %122
  %124 = icmp slt <16 x i16> %122, zeroinitializer
  %125 = select <16 x i1> %124, <16 x i16> %123, <16 x i16> %122
  %126 = add <16 x i16> %117, %113
  %127 = add <16 x i16> %126, %121
  %128 = add <16 x i16> %127, %125
  %129 = shufflevector <16 x i16> %128, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %130 = shufflevector <16 x i16> %128, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %131 = bitcast <16 x i16> %129 to <8 x i32>
  %132 = bitcast <16 x i16> %130 to <8 x i32>
  %133 = add <8 x i32> %93, %131
  %134 = add <8 x i32> %133, %132
  store <8 x i32> %134, <8 x i32>* %52, align 32
  %135 = getelementptr inbounds i16, i16* %94, i64 %30
  store i16* %135, i16** %50, align 8
  %136 = add nuw nsw i64 %49, 1
  %137 = icmp eq i64 %136, 4
  br i1 %137, label %141, label %138

138:                                              ; preds = %47
  %139 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %136
  %140 = load i16*, i16** %139, align 8
  br label %47

141:                                              ; preds = %47
  %142 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %143 = load <4 x i64>, <4 x i64>* %142, align 32
  %144 = bitcast <4 x i64> %143 to <32 x i8>
  %145 = shufflevector <32 x i8> %144, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %146 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %147 = bitcast <4 x i64>* %146 to <32 x i8>*
  %148 = load <32 x i8>, <32 x i8>* %147, align 32
  %149 = shufflevector <32 x i8> %148, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %150 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %151 = bitcast <4 x i64>* %150 to <32 x i8>*
  %152 = load <32 x i8>, <32 x i8>* %151, align 32
  %153 = shufflevector <32 x i8> %152, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %154 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %155 = bitcast <4 x i64>* %154 to <32 x i8>*
  %156 = load <32 x i8>, <32 x i8>* %155, align 32
  %157 = shufflevector <32 x i8> %156, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %158 = bitcast <32 x i8> %145 to <8 x i32>
  %159 = bitcast <4 x i64> %143 to <8 x i32>
  %160 = add <8 x i32> %158, %159
  %161 = bitcast <8 x i32> %160 to <4 x i64>
  %162 = bitcast <32 x i8> %148 to <8 x i32>
  %163 = bitcast <32 x i8> %149 to <8 x i32>
  %164 = add <8 x i32> %163, %162
  %165 = bitcast <32 x i8> %152 to <8 x i32>
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = add <8 x i32> %166, %165
  %168 = bitcast <8 x i32> %167 to <4 x i64>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = add <8 x i32> %170, %169
  %172 = and <4 x i64> %161, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %173 = and <4 x i64> %168, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %174 = bitcast <8 x i32> %164 to <32 x i8>
  %175 = and <32 x i8> %174, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %176 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %175, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %177 = bitcast <32 x i8> %176 to <4 x i64>
  %178 = bitcast <8 x i32> %171 to <32 x i8>
  %179 = and <32 x i8> %178, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %180 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %179, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %181 = bitcast <32 x i8> %180 to <4 x i64>
  %182 = or <4 x i64> %172, %177
  %183 = or <4 x i64> %173, %181
  %184 = shufflevector <4 x i64> %182, <4 x i64> %183, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %185 = shufflevector <4 x i64> %182, <4 x i64> %183, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %186 = bitcast <4 x i64> %184 to <8 x i32>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = add <8 x i32> %187, %186
  %189 = bitcast <8 x i32> %188 to <4 x i64>
  %190 = shufflevector <8 x i32> %188, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %191 = shufflevector <4 x i64> %189, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %192 = bitcast <2 x i64> %191 to <4 x i32>
  %193 = add <4 x i32> %190, %192
  %194 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %194, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad16x16x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = shl nsw i32 %1, 1
  %19 = sext i32 %18 to i64
  %20 = mul nsw i32 %1, 3
  %21 = sext i32 %20 to i64
  %22 = sext i32 %3 to i64
  %23 = shl nsw i32 %3, 1
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %1, 2
  %28 = sext i32 %27 to i64
  %29 = shl i32 %3, 2
  %30 = sext i32 %29 to i64
  %31 = inttoptr i64 %11 to <16 x i16>*
  %32 = getelementptr inbounds i16, i16* %12, i64 %17
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %12, i64 %19
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %12, i64 %21
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %12, i64 %28
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %38, i64 %17
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds i16, i16* %38, i64 %19
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = getelementptr inbounds i16, i16* %38, i64 %21
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = getelementptr inbounds i16, i16* %38, i64 %28
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = getelementptr inbounds i16, i16* %46, i64 %17
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = getelementptr inbounds i16, i16* %46, i64 %19
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = getelementptr inbounds i16, i16* %46, i64 %21
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = getelementptr inbounds i16, i16* %46, i64 %28
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = getelementptr inbounds i16, i16* %54, i64 %17
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = getelementptr inbounds i16, i16* %54, i64 %19
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = getelementptr inbounds i16, i16* %54, i64 %21
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = extractelement <4 x i16*> %16, i32 0
  br label %63

63:                                               ; preds = %236, %5
  %64 = phi i16* [ %62, %5 ], [ %238, %236 ]
  %65 = phi i64 [ 0, %5 ], [ %234, %236 ]
  %66 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %65
  %67 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %65
  %68 = bitcast <4 x i64>* %67 to <8 x i32>*
  %69 = load <8 x i32>, <8 x i32>* %68, align 32
  %70 = load <16 x i16>, <16 x i16>* %31, align 2
  %71 = load <16 x i16>, <16 x i16>* %33, align 2
  %72 = load <16 x i16>, <16 x i16>* %35, align 2
  %73 = load <16 x i16>, <16 x i16>* %37, align 2
  %74 = bitcast i16* %64 to <16 x i16>*
  %75 = load <16 x i16>, <16 x i16>* %74, align 1
  %76 = getelementptr inbounds i16, i16* %64, i64 %22
  %77 = bitcast i16* %76 to <16 x i16>*
  %78 = load <16 x i16>, <16 x i16>* %77, align 1
  %79 = getelementptr inbounds i16, i16* %64, i64 %24
  %80 = bitcast i16* %79 to <16 x i16>*
  %81 = load <16 x i16>, <16 x i16>* %80, align 1
  %82 = getelementptr inbounds i16, i16* %64, i64 %26
  %83 = bitcast i16* %82 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = sub <16 x i16> %70, %75
  %86 = sub <16 x i16> zeroinitializer, %85
  %87 = icmp slt <16 x i16> %85, zeroinitializer
  %88 = select <16 x i1> %87, <16 x i16> %86, <16 x i16> %85
  %89 = sub <16 x i16> %71, %78
  %90 = sub <16 x i16> zeroinitializer, %89
  %91 = icmp slt <16 x i16> %89, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> %89
  %93 = sub <16 x i16> %72, %81
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = sub <16 x i16> %73, %84
  %98 = sub <16 x i16> zeroinitializer, %97
  %99 = icmp slt <16 x i16> %97, zeroinitializer
  %100 = select <16 x i1> %99, <16 x i16> %98, <16 x i16> %97
  %101 = add <16 x i16> %92, %88
  %102 = add <16 x i16> %101, %96
  %103 = add <16 x i16> %102, %100
  %104 = shufflevector <16 x i16> %103, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %105 = shufflevector <16 x i16> %103, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %106 = bitcast <16 x i16> %104 to <8 x i32>
  %107 = bitcast <16 x i16> %105 to <8 x i32>
  %108 = add <8 x i32> %69, %106
  %109 = add <8 x i32> %108, %107
  store <8 x i32> %109, <8 x i32>* %68, align 32
  %110 = getelementptr inbounds i16, i16* %64, i64 %30
  store i16* %110, i16** %66, align 8
  %111 = load <16 x i16>, <16 x i16>* %39, align 2
  %112 = load <16 x i16>, <16 x i16>* %41, align 2
  %113 = load <16 x i16>, <16 x i16>* %43, align 2
  %114 = load <16 x i16>, <16 x i16>* %45, align 2
  %115 = bitcast i16* %110 to <16 x i16>*
  %116 = load <16 x i16>, <16 x i16>* %115, align 1
  %117 = getelementptr inbounds i16, i16* %110, i64 %22
  %118 = bitcast i16* %117 to <16 x i16>*
  %119 = load <16 x i16>, <16 x i16>* %118, align 1
  %120 = getelementptr inbounds i16, i16* %110, i64 %24
  %121 = bitcast i16* %120 to <16 x i16>*
  %122 = load <16 x i16>, <16 x i16>* %121, align 1
  %123 = getelementptr inbounds i16, i16* %110, i64 %26
  %124 = bitcast i16* %123 to <16 x i16>*
  %125 = load <16 x i16>, <16 x i16>* %124, align 1
  %126 = sub <16 x i16> %111, %116
  %127 = sub <16 x i16> zeroinitializer, %126
  %128 = icmp slt <16 x i16> %126, zeroinitializer
  %129 = select <16 x i1> %128, <16 x i16> %127, <16 x i16> %126
  %130 = sub <16 x i16> %112, %119
  %131 = sub <16 x i16> zeroinitializer, %130
  %132 = icmp slt <16 x i16> %130, zeroinitializer
  %133 = select <16 x i1> %132, <16 x i16> %131, <16 x i16> %130
  %134 = sub <16 x i16> %113, %122
  %135 = sub <16 x i16> zeroinitializer, %134
  %136 = icmp slt <16 x i16> %134, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i16> %135, <16 x i16> %134
  %138 = sub <16 x i16> %114, %125
  %139 = sub <16 x i16> zeroinitializer, %138
  %140 = icmp slt <16 x i16> %138, zeroinitializer
  %141 = select <16 x i1> %140, <16 x i16> %139, <16 x i16> %138
  %142 = add <16 x i16> %133, %129
  %143 = add <16 x i16> %142, %137
  %144 = add <16 x i16> %143, %141
  %145 = shufflevector <16 x i16> %144, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %146 = shufflevector <16 x i16> %144, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %147 = bitcast <16 x i16> %145 to <8 x i32>
  %148 = bitcast <16 x i16> %146 to <8 x i32>
  %149 = add <8 x i32> %109, %147
  %150 = add <8 x i32> %149, %148
  store <8 x i32> %150, <8 x i32>* %68, align 32
  %151 = getelementptr inbounds i16, i16* %110, i64 %30
  store i16* %151, i16** %66, align 8
  %152 = load <16 x i16>, <16 x i16>* %47, align 2
  %153 = load <16 x i16>, <16 x i16>* %49, align 2
  %154 = load <16 x i16>, <16 x i16>* %51, align 2
  %155 = load <16 x i16>, <16 x i16>* %53, align 2
  %156 = bitcast i16* %151 to <16 x i16>*
  %157 = load <16 x i16>, <16 x i16>* %156, align 1
  %158 = getelementptr inbounds i16, i16* %151, i64 %22
  %159 = bitcast i16* %158 to <16 x i16>*
  %160 = load <16 x i16>, <16 x i16>* %159, align 1
  %161 = getelementptr inbounds i16, i16* %151, i64 %24
  %162 = bitcast i16* %161 to <16 x i16>*
  %163 = load <16 x i16>, <16 x i16>* %162, align 1
  %164 = getelementptr inbounds i16, i16* %151, i64 %26
  %165 = bitcast i16* %164 to <16 x i16>*
  %166 = load <16 x i16>, <16 x i16>* %165, align 1
  %167 = sub <16 x i16> %152, %157
  %168 = sub <16 x i16> zeroinitializer, %167
  %169 = icmp slt <16 x i16> %167, zeroinitializer
  %170 = select <16 x i1> %169, <16 x i16> %168, <16 x i16> %167
  %171 = sub <16 x i16> %153, %160
  %172 = sub <16 x i16> zeroinitializer, %171
  %173 = icmp slt <16 x i16> %171, zeroinitializer
  %174 = select <16 x i1> %173, <16 x i16> %172, <16 x i16> %171
  %175 = sub <16 x i16> %154, %163
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = sub <16 x i16> %155, %166
  %180 = sub <16 x i16> zeroinitializer, %179
  %181 = icmp slt <16 x i16> %179, zeroinitializer
  %182 = select <16 x i1> %181, <16 x i16> %180, <16 x i16> %179
  %183 = add <16 x i16> %174, %170
  %184 = add <16 x i16> %183, %178
  %185 = add <16 x i16> %184, %182
  %186 = shufflevector <16 x i16> %185, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %187 = shufflevector <16 x i16> %185, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %188 = bitcast <16 x i16> %186 to <8 x i32>
  %189 = bitcast <16 x i16> %187 to <8 x i32>
  %190 = add <8 x i32> %150, %188
  %191 = add <8 x i32> %190, %189
  store <8 x i32> %191, <8 x i32>* %68, align 32
  %192 = getelementptr inbounds i16, i16* %151, i64 %30
  store i16* %192, i16** %66, align 8
  %193 = load <16 x i16>, <16 x i16>* %55, align 2
  %194 = load <16 x i16>, <16 x i16>* %57, align 1
  %195 = load <16 x i16>, <16 x i16>* %59, align 1
  %196 = load <16 x i16>, <16 x i16>* %61, align 1
  %197 = bitcast i16* %192 to <16 x i16>*
  %198 = load <16 x i16>, <16 x i16>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %192, i64 %22
  %200 = bitcast i16* %199 to <16 x i16>*
  %201 = load <16 x i16>, <16 x i16>* %200, align 1
  %202 = getelementptr inbounds i16, i16* %192, i64 %24
  %203 = bitcast i16* %202 to <16 x i16>*
  %204 = load <16 x i16>, <16 x i16>* %203, align 1
  %205 = getelementptr inbounds i16, i16* %192, i64 %26
  %206 = bitcast i16* %205 to <16 x i16>*
  %207 = load <16 x i16>, <16 x i16>* %206, align 1
  %208 = sub <16 x i16> %193, %198
  %209 = sub <16 x i16> zeroinitializer, %208
  %210 = icmp slt <16 x i16> %208, zeroinitializer
  %211 = select <16 x i1> %210, <16 x i16> %209, <16 x i16> %208
  %212 = sub <16 x i16> %194, %201
  %213 = sub <16 x i16> zeroinitializer, %212
  %214 = icmp slt <16 x i16> %212, zeroinitializer
  %215 = select <16 x i1> %214, <16 x i16> %213, <16 x i16> %212
  %216 = sub <16 x i16> %195, %204
  %217 = sub <16 x i16> zeroinitializer, %216
  %218 = icmp slt <16 x i16> %216, zeroinitializer
  %219 = select <16 x i1> %218, <16 x i16> %217, <16 x i16> %216
  %220 = sub <16 x i16> %196, %207
  %221 = sub <16 x i16> zeroinitializer, %220
  %222 = icmp slt <16 x i16> %220, zeroinitializer
  %223 = select <16 x i1> %222, <16 x i16> %221, <16 x i16> %220
  %224 = add <16 x i16> %215, %211
  %225 = add <16 x i16> %224, %219
  %226 = add <16 x i16> %225, %223
  %227 = shufflevector <16 x i16> %226, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %228 = shufflevector <16 x i16> %226, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %229 = bitcast <16 x i16> %227 to <8 x i32>
  %230 = bitcast <16 x i16> %228 to <8 x i32>
  %231 = add <8 x i32> %191, %229
  %232 = add <8 x i32> %231, %230
  store <8 x i32> %232, <8 x i32>* %68, align 32
  %233 = getelementptr inbounds i16, i16* %192, i64 %30
  store i16* %233, i16** %66, align 8
  %234 = add nuw nsw i64 %65, 1
  %235 = icmp eq i64 %234, 4
  br i1 %235, label %239, label %236

236:                                              ; preds = %63
  %237 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %234
  %238 = load i16*, i16** %237, align 8
  br label %63

239:                                              ; preds = %63
  %240 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %241 = load <4 x i64>, <4 x i64>* %240, align 32
  %242 = bitcast <4 x i64> %241 to <32 x i8>
  %243 = shufflevector <32 x i8> %242, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %244 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %245 = bitcast <4 x i64>* %244 to <32 x i8>*
  %246 = load <32 x i8>, <32 x i8>* %245, align 32
  %247 = shufflevector <32 x i8> %246, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %248 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %249 = bitcast <4 x i64>* %248 to <32 x i8>*
  %250 = load <32 x i8>, <32 x i8>* %249, align 32
  %251 = shufflevector <32 x i8> %250, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %252 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %253 = bitcast <4 x i64>* %252 to <32 x i8>*
  %254 = load <32 x i8>, <32 x i8>* %253, align 32
  %255 = shufflevector <32 x i8> %254, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %256 = bitcast <32 x i8> %243 to <8 x i32>
  %257 = bitcast <4 x i64> %241 to <8 x i32>
  %258 = add <8 x i32> %256, %257
  %259 = bitcast <8 x i32> %258 to <4 x i64>
  %260 = bitcast <32 x i8> %246 to <8 x i32>
  %261 = bitcast <32 x i8> %247 to <8 x i32>
  %262 = add <8 x i32> %261, %260
  %263 = bitcast <32 x i8> %250 to <8 x i32>
  %264 = bitcast <32 x i8> %251 to <8 x i32>
  %265 = add <8 x i32> %264, %263
  %266 = bitcast <8 x i32> %265 to <4 x i64>
  %267 = bitcast <32 x i8> %254 to <8 x i32>
  %268 = bitcast <32 x i8> %255 to <8 x i32>
  %269 = add <8 x i32> %268, %267
  %270 = and <4 x i64> %259, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %271 = and <4 x i64> %266, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %272 = bitcast <8 x i32> %262 to <32 x i8>
  %273 = and <32 x i8> %272, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %274 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %273, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %275 = bitcast <32 x i8> %274 to <4 x i64>
  %276 = bitcast <8 x i32> %269 to <32 x i8>
  %277 = and <32 x i8> %276, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %278 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %277, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %279 = bitcast <32 x i8> %278 to <4 x i64>
  %280 = or <4 x i64> %270, %275
  %281 = or <4 x i64> %271, %279
  %282 = shufflevector <4 x i64> %280, <4 x i64> %281, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %283 = shufflevector <4 x i64> %280, <4 x i64> %281, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %284 = bitcast <4 x i64> %282 to <8 x i32>
  %285 = bitcast <4 x i64> %283 to <8 x i32>
  %286 = add <8 x i32> %285, %284
  %287 = bitcast <8 x i32> %286 to <4 x i64>
  %288 = shufflevector <8 x i32> %286, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %289 = shufflevector <4 x i64> %287, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %290 = bitcast <2 x i64> %289 to <4 x i32>
  %291 = add <4 x i32> %288, %290
  %292 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %291, <4 x i32>* %292, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad16x32x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = shl nsw i32 %1, 1
  %19 = sext i32 %18 to i64
  %20 = mul nsw i32 %1, 3
  %21 = sext i32 %20 to i64
  %22 = sext i32 %3 to i64
  %23 = shl nsw i32 %3, 1
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %1, 2
  %28 = sext i32 %27 to i64
  %29 = shl i32 %3, 2
  %30 = sext i32 %29 to i64
  %31 = extractelement <4 x i16*> %16, i32 0
  br label %32

32:                                               ; preds = %98, %5
  %33 = phi i16* [ %31, %5 ], [ %100, %98 ]
  %34 = phi i64 [ 0, %5 ], [ %96, %98 ]
  %35 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %34
  %36 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %34
  %37 = bitcast <4 x i64>* %36 to <8 x i32>*
  %38 = load <8 x i32>, <8 x i32>* %37, align 32
  br label %39

39:                                               ; preds = %39, %32
  %40 = phi <8 x i32> [ %38, %32 ], [ %90, %39 ]
  %41 = phi i16* [ %33, %32 ], [ %92, %39 ]
  %42 = phi i32 [ 0, %32 ], [ %93, %39 ]
  %43 = phi i16* [ %12, %32 ], [ %91, %39 ]
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %43, i64 %17
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %43, i64 %19
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %43, i64 %21
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = bitcast i16* %41 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %41, i64 %22
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = getelementptr inbounds i16, i16* %41, i64 %24
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %41, i64 %26
  %64 = bitcast i16* %63 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 1
  %66 = sub <16 x i16> %45, %56
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %48, %59
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = sub <16 x i16> %51, %62
  %75 = sub <16 x i16> zeroinitializer, %74
  %76 = icmp slt <16 x i16> %74, zeroinitializer
  %77 = select <16 x i1> %76, <16 x i16> %75, <16 x i16> %74
  %78 = sub <16 x i16> %54, %65
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = add <16 x i16> %73, %69
  %83 = add <16 x i16> %82, %77
  %84 = add <16 x i16> %83, %81
  %85 = shufflevector <16 x i16> %84, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %86 = shufflevector <16 x i16> %84, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %87 = bitcast <16 x i16> %85 to <8 x i32>
  %88 = bitcast <16 x i16> %86 to <8 x i32>
  %89 = add <8 x i32> %40, %87
  %90 = add <8 x i32> %89, %88
  store <8 x i32> %90, <8 x i32>* %37, align 32
  %91 = getelementptr inbounds i16, i16* %43, i64 %28
  %92 = getelementptr inbounds i16, i16* %41, i64 %30
  store i16* %92, i16** %35, align 8
  %93 = add nuw nsw i32 %42, 4
  %94 = icmp ult i32 %93, 32
  br i1 %94, label %39, label %95

95:                                               ; preds = %39
  %96 = add nuw nsw i64 %34, 1
  %97 = icmp eq i64 %96, 4
  br i1 %97, label %101, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %96
  %100 = load i16*, i16** %99, align 8
  br label %32

101:                                              ; preds = %95
  %102 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %103 = load <4 x i64>, <4 x i64>* %102, align 32
  %104 = bitcast <4 x i64> %103 to <32 x i8>
  %105 = shufflevector <32 x i8> %104, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %106 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %107 = bitcast <4 x i64>* %106 to <32 x i8>*
  %108 = load <32 x i8>, <32 x i8>* %107, align 32
  %109 = shufflevector <32 x i8> %108, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %111 = bitcast <4 x i64>* %110 to <32 x i8>*
  %112 = load <32 x i8>, <32 x i8>* %111, align 32
  %113 = shufflevector <32 x i8> %112, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %114 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %115 = bitcast <4 x i64>* %114 to <32 x i8>*
  %116 = load <32 x i8>, <32 x i8>* %115, align 32
  %117 = shufflevector <32 x i8> %116, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <32 x i8> %105 to <8 x i32>
  %119 = bitcast <4 x i64> %103 to <8 x i32>
  %120 = add <8 x i32> %118, %119
  %121 = bitcast <8 x i32> %120 to <4 x i64>
  %122 = bitcast <32 x i8> %108 to <8 x i32>
  %123 = bitcast <32 x i8> %109 to <8 x i32>
  %124 = add <8 x i32> %123, %122
  %125 = bitcast <32 x i8> %112 to <8 x i32>
  %126 = bitcast <32 x i8> %113 to <8 x i32>
  %127 = add <8 x i32> %126, %125
  %128 = bitcast <8 x i32> %127 to <4 x i64>
  %129 = bitcast <32 x i8> %116 to <8 x i32>
  %130 = bitcast <32 x i8> %117 to <8 x i32>
  %131 = add <8 x i32> %130, %129
  %132 = and <4 x i64> %121, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %133 = and <4 x i64> %128, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %134 = bitcast <8 x i32> %124 to <32 x i8>
  %135 = and <32 x i8> %134, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %136 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %135, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %137 = bitcast <32 x i8> %136 to <4 x i64>
  %138 = bitcast <8 x i32> %131 to <32 x i8>
  %139 = and <32 x i8> %138, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %140 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %139, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %141 = bitcast <32 x i8> %140 to <4 x i64>
  %142 = or <4 x i64> %132, %137
  %143 = or <4 x i64> %133, %141
  %144 = shufflevector <4 x i64> %142, <4 x i64> %143, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %145 = shufflevector <4 x i64> %142, <4 x i64> %143, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %146 = bitcast <4 x i64> %144 to <8 x i32>
  %147 = bitcast <4 x i64> %145 to <8 x i32>
  %148 = add <8 x i32> %147, %146
  %149 = bitcast <8 x i32> %148 to <4 x i64>
  %150 = shufflevector <8 x i32> %148, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %151 = shufflevector <4 x i64> %149, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %152 = bitcast <2 x i64> %151 to <4 x i32>
  %153 = add <4 x i32> %150, %152
  %154 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad16x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = shl nsw i32 %1, 1
  %19 = sext i32 %18 to i64
  %20 = mul nsw i32 %1, 3
  %21 = sext i32 %20 to i64
  %22 = sext i32 %3 to i64
  %23 = shl nsw i32 %3, 1
  %24 = sext i32 %23 to i64
  %25 = mul nsw i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %1, 2
  %28 = sext i32 %27 to i64
  %29 = shl i32 %3, 2
  %30 = sext i32 %29 to i64
  %31 = extractelement <4 x i16*> %16, i32 0
  br label %32

32:                                               ; preds = %98, %5
  %33 = phi i16* [ %31, %5 ], [ %100, %98 ]
  %34 = phi i64 [ 0, %5 ], [ %96, %98 ]
  %35 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %34
  %36 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %34
  %37 = bitcast <4 x i64>* %36 to <8 x i32>*
  %38 = load <8 x i32>, <8 x i32>* %37, align 32
  br label %39

39:                                               ; preds = %39, %32
  %40 = phi <8 x i32> [ %38, %32 ], [ %90, %39 ]
  %41 = phi i16* [ %33, %32 ], [ %92, %39 ]
  %42 = phi i32 [ 0, %32 ], [ %93, %39 ]
  %43 = phi i16* [ %12, %32 ], [ %91, %39 ]
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %43, i64 %17
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %43, i64 %19
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %43, i64 %21
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = bitcast i16* %41 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %41, i64 %22
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = getelementptr inbounds i16, i16* %41, i64 %24
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = load <16 x i16>, <16 x i16>* %61, align 1
  %63 = getelementptr inbounds i16, i16* %41, i64 %26
  %64 = bitcast i16* %63 to <16 x i16>*
  %65 = load <16 x i16>, <16 x i16>* %64, align 1
  %66 = sub <16 x i16> %45, %56
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %48, %59
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = sub <16 x i16> %51, %62
  %75 = sub <16 x i16> zeroinitializer, %74
  %76 = icmp slt <16 x i16> %74, zeroinitializer
  %77 = select <16 x i1> %76, <16 x i16> %75, <16 x i16> %74
  %78 = sub <16 x i16> %54, %65
  %79 = sub <16 x i16> zeroinitializer, %78
  %80 = icmp slt <16 x i16> %78, zeroinitializer
  %81 = select <16 x i1> %80, <16 x i16> %79, <16 x i16> %78
  %82 = add <16 x i16> %73, %69
  %83 = add <16 x i16> %82, %77
  %84 = add <16 x i16> %83, %81
  %85 = shufflevector <16 x i16> %84, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %86 = shufflevector <16 x i16> %84, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %87 = bitcast <16 x i16> %85 to <8 x i32>
  %88 = bitcast <16 x i16> %86 to <8 x i32>
  %89 = add <8 x i32> %40, %87
  %90 = add <8 x i32> %89, %88
  store <8 x i32> %90, <8 x i32>* %37, align 32
  %91 = getelementptr inbounds i16, i16* %43, i64 %28
  %92 = getelementptr inbounds i16, i16* %41, i64 %30
  store i16* %92, i16** %35, align 8
  %93 = add nuw nsw i32 %42, 4
  %94 = icmp ult i32 %93, 64
  br i1 %94, label %39, label %95

95:                                               ; preds = %39
  %96 = add nuw nsw i64 %34, 1
  %97 = icmp eq i64 %96, 4
  br i1 %97, label %101, label %98

98:                                               ; preds = %95
  %99 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %96
  %100 = load i16*, i16** %99, align 8
  br label %32

101:                                              ; preds = %95
  %102 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %103 = load <4 x i64>, <4 x i64>* %102, align 32
  %104 = bitcast <4 x i64> %103 to <32 x i8>
  %105 = shufflevector <32 x i8> %104, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %106 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %107 = bitcast <4 x i64>* %106 to <32 x i8>*
  %108 = load <32 x i8>, <32 x i8>* %107, align 32
  %109 = shufflevector <32 x i8> %108, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %111 = bitcast <4 x i64>* %110 to <32 x i8>*
  %112 = load <32 x i8>, <32 x i8>* %111, align 32
  %113 = shufflevector <32 x i8> %112, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %114 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %115 = bitcast <4 x i64>* %114 to <32 x i8>*
  %116 = load <32 x i8>, <32 x i8>* %115, align 32
  %117 = shufflevector <32 x i8> %116, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %118 = bitcast <32 x i8> %105 to <8 x i32>
  %119 = bitcast <4 x i64> %103 to <8 x i32>
  %120 = add <8 x i32> %118, %119
  %121 = bitcast <8 x i32> %120 to <4 x i64>
  %122 = bitcast <32 x i8> %108 to <8 x i32>
  %123 = bitcast <32 x i8> %109 to <8 x i32>
  %124 = add <8 x i32> %123, %122
  %125 = bitcast <32 x i8> %112 to <8 x i32>
  %126 = bitcast <32 x i8> %113 to <8 x i32>
  %127 = add <8 x i32> %126, %125
  %128 = bitcast <8 x i32> %127 to <4 x i64>
  %129 = bitcast <32 x i8> %116 to <8 x i32>
  %130 = bitcast <32 x i8> %117 to <8 x i32>
  %131 = add <8 x i32> %130, %129
  %132 = and <4 x i64> %121, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %133 = and <4 x i64> %128, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %134 = bitcast <8 x i32> %124 to <32 x i8>
  %135 = and <32 x i8> %134, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %136 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %135, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %137 = bitcast <32 x i8> %136 to <4 x i64>
  %138 = bitcast <8 x i32> %131 to <32 x i8>
  %139 = and <32 x i8> %138, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %140 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %139, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %141 = bitcast <32 x i8> %140 to <4 x i64>
  %142 = or <4 x i64> %132, %137
  %143 = or <4 x i64> %133, %141
  %144 = shufflevector <4 x i64> %142, <4 x i64> %143, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %145 = shufflevector <4 x i64> %142, <4 x i64> %143, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %146 = bitcast <4 x i64> %144 to <8 x i32>
  %147 = bitcast <4 x i64> %145 to <8 x i32>
  %148 = add <8 x i32> %147, %146
  %149 = bitcast <8 x i32> %148 to <4 x i64>
  %150 = shufflevector <8 x i32> %148, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %151 = shufflevector <4 x i64> %149, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %152 = bitcast <2 x i64> %151 to <4 x i32>
  %153 = add <4 x i32> %150, %152
  %154 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %154, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad32x8x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %11 to <16 x i16>*
  %28 = getelementptr inbounds i16, i16* %12, i64 16
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = getelementptr inbounds i16, i16* %12, i64 %17
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = getelementptr inbounds i16, i16* %30, i64 16
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %12, i64 %20
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %34, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %34, i64 %17
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %38, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds i16, i16* %12, i64 %24
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = getelementptr inbounds i16, i16* %42, i64 16
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = getelementptr inbounds i16, i16* %42, i64 %17
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = getelementptr inbounds i16, i16* %46, i64 16
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = getelementptr inbounds i16, i16* %42, i64 %20
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = getelementptr inbounds i16, i16* %50, i64 16
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = getelementptr inbounds i16, i16* %50, i64 %17
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = getelementptr inbounds i16, i16* %54, i64 16
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = extractelement <4 x i16*> %16, i32 0
  br label %59

59:                                               ; preds = %232, %5
  %60 = phi i16* [ %58, %5 ], [ %234, %232 ]
  %61 = phi i64 [ 0, %5 ], [ %230, %232 ]
  %62 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %61
  %63 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %61
  %64 = bitcast <4 x i64>* %63 to <8 x i32>*
  %65 = load <8 x i32>, <8 x i32>* %64, align 32
  %66 = load <16 x i16>, <16 x i16>* %27, align 2
  %67 = load <16 x i16>, <16 x i16>* %29, align 2
  %68 = load <16 x i16>, <16 x i16>* %31, align 2
  %69 = load <16 x i16>, <16 x i16>* %33, align 2
  %70 = bitcast i16* %60 to <16 x i16>*
  %71 = load <16 x i16>, <16 x i16>* %70, align 1
  %72 = getelementptr inbounds i16, i16* %60, i64 16
  %73 = bitcast i16* %72 to <16 x i16>*
  %74 = load <16 x i16>, <16 x i16>* %73, align 1
  %75 = getelementptr inbounds i16, i16* %60, i64 %18
  %76 = bitcast i16* %75 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %75, i64 16
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = sub <16 x i16> %66, %71
  %82 = sub <16 x i16> zeroinitializer, %81
  %83 = icmp slt <16 x i16> %81, zeroinitializer
  %84 = select <16 x i1> %83, <16 x i16> %82, <16 x i16> %81
  %85 = sub <16 x i16> %67, %74
  %86 = sub <16 x i16> zeroinitializer, %85
  %87 = icmp slt <16 x i16> %85, zeroinitializer
  %88 = select <16 x i1> %87, <16 x i16> %86, <16 x i16> %85
  %89 = sub <16 x i16> %68, %77
  %90 = sub <16 x i16> zeroinitializer, %89
  %91 = icmp slt <16 x i16> %89, zeroinitializer
  %92 = select <16 x i1> %91, <16 x i16> %90, <16 x i16> %89
  %93 = sub <16 x i16> %69, %80
  %94 = sub <16 x i16> zeroinitializer, %93
  %95 = icmp slt <16 x i16> %93, zeroinitializer
  %96 = select <16 x i1> %95, <16 x i16> %94, <16 x i16> %93
  %97 = add <16 x i16> %88, %84
  %98 = add <16 x i16> %97, %92
  %99 = add <16 x i16> %98, %96
  %100 = shufflevector <16 x i16> %99, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %101 = shufflevector <16 x i16> %99, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %102 = bitcast <16 x i16> %100 to <8 x i32>
  %103 = bitcast <16 x i16> %101 to <8 x i32>
  %104 = add <8 x i32> %65, %102
  %105 = add <8 x i32> %104, %103
  store <8 x i32> %105, <8 x i32>* %64, align 32
  %106 = getelementptr inbounds i16, i16* %60, i64 %22
  %107 = load <16 x i16>, <16 x i16>* %35, align 2
  %108 = load <16 x i16>, <16 x i16>* %37, align 2
  %109 = load <16 x i16>, <16 x i16>* %39, align 2
  %110 = load <16 x i16>, <16 x i16>* %41, align 2
  %111 = bitcast i16* %106 to <16 x i16>*
  %112 = load <16 x i16>, <16 x i16>* %111, align 1
  %113 = getelementptr inbounds i16, i16* %106, i64 16
  %114 = bitcast i16* %113 to <16 x i16>*
  %115 = load <16 x i16>, <16 x i16>* %114, align 1
  %116 = getelementptr inbounds i16, i16* %106, i64 %18
  %117 = bitcast i16* %116 to <16 x i16>*
  %118 = load <16 x i16>, <16 x i16>* %117, align 1
  %119 = getelementptr inbounds i16, i16* %116, i64 16
  %120 = bitcast i16* %119 to <16 x i16>*
  %121 = load <16 x i16>, <16 x i16>* %120, align 1
  %122 = sub <16 x i16> %107, %112
  %123 = sub <16 x i16> zeroinitializer, %122
  %124 = icmp slt <16 x i16> %122, zeroinitializer
  %125 = select <16 x i1> %124, <16 x i16> %123, <16 x i16> %122
  %126 = sub <16 x i16> %108, %115
  %127 = sub <16 x i16> zeroinitializer, %126
  %128 = icmp slt <16 x i16> %126, zeroinitializer
  %129 = select <16 x i1> %128, <16 x i16> %127, <16 x i16> %126
  %130 = sub <16 x i16> %109, %118
  %131 = sub <16 x i16> zeroinitializer, %130
  %132 = icmp slt <16 x i16> %130, zeroinitializer
  %133 = select <16 x i1> %132, <16 x i16> %131, <16 x i16> %130
  %134 = sub <16 x i16> %110, %121
  %135 = sub <16 x i16> zeroinitializer, %134
  %136 = icmp slt <16 x i16> %134, zeroinitializer
  %137 = select <16 x i1> %136, <16 x i16> %135, <16 x i16> %134
  %138 = add <16 x i16> %129, %125
  %139 = add <16 x i16> %138, %133
  %140 = add <16 x i16> %139, %137
  %141 = shufflevector <16 x i16> %140, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %142 = shufflevector <16 x i16> %140, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %143 = bitcast <16 x i16> %141 to <8 x i32>
  %144 = bitcast <16 x i16> %142 to <8 x i32>
  %145 = add <8 x i32> %105, %143
  %146 = add <8 x i32> %145, %144
  store <8 x i32> %146, <8 x i32>* %64, align 32
  %147 = getelementptr inbounds i16, i16* %60, i64 %26
  store i16* %147, i16** %62, align 8
  %148 = load <16 x i16>, <16 x i16>* %43, align 2
  %149 = load <16 x i16>, <16 x i16>* %45, align 2
  %150 = load <16 x i16>, <16 x i16>* %47, align 2
  %151 = load <16 x i16>, <16 x i16>* %49, align 2
  %152 = bitcast i16* %147 to <16 x i16>*
  %153 = load <16 x i16>, <16 x i16>* %152, align 1
  %154 = getelementptr inbounds i16, i16* %147, i64 16
  %155 = bitcast i16* %154 to <16 x i16>*
  %156 = load <16 x i16>, <16 x i16>* %155, align 1
  %157 = getelementptr inbounds i16, i16* %147, i64 %18
  %158 = bitcast i16* %157 to <16 x i16>*
  %159 = load <16 x i16>, <16 x i16>* %158, align 1
  %160 = getelementptr inbounds i16, i16* %157, i64 16
  %161 = bitcast i16* %160 to <16 x i16>*
  %162 = load <16 x i16>, <16 x i16>* %161, align 1
  %163 = sub <16 x i16> %148, %153
  %164 = sub <16 x i16> zeroinitializer, %163
  %165 = icmp slt <16 x i16> %163, zeroinitializer
  %166 = select <16 x i1> %165, <16 x i16> %164, <16 x i16> %163
  %167 = sub <16 x i16> %149, %156
  %168 = sub <16 x i16> zeroinitializer, %167
  %169 = icmp slt <16 x i16> %167, zeroinitializer
  %170 = select <16 x i1> %169, <16 x i16> %168, <16 x i16> %167
  %171 = sub <16 x i16> %150, %159
  %172 = sub <16 x i16> zeroinitializer, %171
  %173 = icmp slt <16 x i16> %171, zeroinitializer
  %174 = select <16 x i1> %173, <16 x i16> %172, <16 x i16> %171
  %175 = sub <16 x i16> %151, %162
  %176 = sub <16 x i16> zeroinitializer, %175
  %177 = icmp slt <16 x i16> %175, zeroinitializer
  %178 = select <16 x i1> %177, <16 x i16> %176, <16 x i16> %175
  %179 = add <16 x i16> %170, %166
  %180 = add <16 x i16> %179, %174
  %181 = add <16 x i16> %180, %178
  %182 = shufflevector <16 x i16> %181, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %183 = shufflevector <16 x i16> %181, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %184 = bitcast <16 x i16> %182 to <8 x i32>
  %185 = bitcast <16 x i16> %183 to <8 x i32>
  %186 = add <8 x i32> %146, %184
  %187 = add <8 x i32> %186, %185
  store <8 x i32> %187, <8 x i32>* %64, align 32
  %188 = getelementptr inbounds i16, i16* %147, i64 %22
  %189 = load <16 x i16>, <16 x i16>* %51, align 2
  %190 = load <16 x i16>, <16 x i16>* %53, align 2
  %191 = load <16 x i16>, <16 x i16>* %55, align 2
  %192 = load <16 x i16>, <16 x i16>* %57, align 1
  %193 = bitcast i16* %188 to <16 x i16>*
  %194 = load <16 x i16>, <16 x i16>* %193, align 1
  %195 = getelementptr inbounds i16, i16* %188, i64 16
  %196 = bitcast i16* %195 to <16 x i16>*
  %197 = load <16 x i16>, <16 x i16>* %196, align 1
  %198 = getelementptr inbounds i16, i16* %188, i64 %18
  %199 = bitcast i16* %198 to <16 x i16>*
  %200 = load <16 x i16>, <16 x i16>* %199, align 1
  %201 = getelementptr inbounds i16, i16* %198, i64 16
  %202 = bitcast i16* %201 to <16 x i16>*
  %203 = load <16 x i16>, <16 x i16>* %202, align 1
  %204 = sub <16 x i16> %189, %194
  %205 = sub <16 x i16> zeroinitializer, %204
  %206 = icmp slt <16 x i16> %204, zeroinitializer
  %207 = select <16 x i1> %206, <16 x i16> %205, <16 x i16> %204
  %208 = sub <16 x i16> %190, %197
  %209 = sub <16 x i16> zeroinitializer, %208
  %210 = icmp slt <16 x i16> %208, zeroinitializer
  %211 = select <16 x i1> %210, <16 x i16> %209, <16 x i16> %208
  %212 = sub <16 x i16> %191, %200
  %213 = sub <16 x i16> zeroinitializer, %212
  %214 = icmp slt <16 x i16> %212, zeroinitializer
  %215 = select <16 x i1> %214, <16 x i16> %213, <16 x i16> %212
  %216 = sub <16 x i16> %192, %203
  %217 = sub <16 x i16> zeroinitializer, %216
  %218 = icmp slt <16 x i16> %216, zeroinitializer
  %219 = select <16 x i1> %218, <16 x i16> %217, <16 x i16> %216
  %220 = add <16 x i16> %211, %207
  %221 = add <16 x i16> %220, %215
  %222 = add <16 x i16> %221, %219
  %223 = shufflevector <16 x i16> %222, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %224 = shufflevector <16 x i16> %222, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %225 = bitcast <16 x i16> %223 to <8 x i32>
  %226 = bitcast <16 x i16> %224 to <8 x i32>
  %227 = add <8 x i32> %187, %225
  %228 = add <8 x i32> %227, %226
  store <8 x i32> %228, <8 x i32>* %64, align 32
  %229 = getelementptr inbounds i16, i16* %147, i64 %26
  store i16* %229, i16** %62, align 8
  %230 = add nuw nsw i64 %61, 1
  %231 = icmp eq i64 %230, 4
  br i1 %231, label %235, label %232

232:                                              ; preds = %59
  %233 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %230
  %234 = load i16*, i16** %233, align 8
  br label %59

235:                                              ; preds = %59
  %236 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %237 = load <4 x i64>, <4 x i64>* %236, align 32
  %238 = bitcast <4 x i64> %237 to <32 x i8>
  %239 = shufflevector <32 x i8> %238, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %240 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %241 = bitcast <4 x i64>* %240 to <32 x i8>*
  %242 = load <32 x i8>, <32 x i8>* %241, align 32
  %243 = shufflevector <32 x i8> %242, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %244 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %245 = bitcast <4 x i64>* %244 to <32 x i8>*
  %246 = load <32 x i8>, <32 x i8>* %245, align 32
  %247 = shufflevector <32 x i8> %246, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %248 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %249 = bitcast <4 x i64>* %248 to <32 x i8>*
  %250 = load <32 x i8>, <32 x i8>* %249, align 32
  %251 = shufflevector <32 x i8> %250, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %252 = bitcast <32 x i8> %239 to <8 x i32>
  %253 = bitcast <4 x i64> %237 to <8 x i32>
  %254 = add <8 x i32> %252, %253
  %255 = bitcast <8 x i32> %254 to <4 x i64>
  %256 = bitcast <32 x i8> %242 to <8 x i32>
  %257 = bitcast <32 x i8> %243 to <8 x i32>
  %258 = add <8 x i32> %257, %256
  %259 = bitcast <32 x i8> %246 to <8 x i32>
  %260 = bitcast <32 x i8> %247 to <8 x i32>
  %261 = add <8 x i32> %260, %259
  %262 = bitcast <8 x i32> %261 to <4 x i64>
  %263 = bitcast <32 x i8> %250 to <8 x i32>
  %264 = bitcast <32 x i8> %251 to <8 x i32>
  %265 = add <8 x i32> %264, %263
  %266 = and <4 x i64> %255, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %267 = and <4 x i64> %262, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %268 = bitcast <8 x i32> %258 to <32 x i8>
  %269 = and <32 x i8> %268, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %270 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %269, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %271 = bitcast <32 x i8> %270 to <4 x i64>
  %272 = bitcast <8 x i32> %265 to <32 x i8>
  %273 = and <32 x i8> %272, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %274 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %273, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %275 = bitcast <32 x i8> %274 to <4 x i64>
  %276 = or <4 x i64> %266, %271
  %277 = or <4 x i64> %267, %275
  %278 = shufflevector <4 x i64> %276, <4 x i64> %277, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %279 = shufflevector <4 x i64> %276, <4 x i64> %277, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %280 = bitcast <4 x i64> %278 to <8 x i32>
  %281 = bitcast <4 x i64> %279 to <8 x i32>
  %282 = add <8 x i32> %281, %280
  %283 = bitcast <8 x i32> %282 to <4 x i64>
  %284 = shufflevector <8 x i32> %282, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %285 = shufflevector <4 x i64> %283, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %286 = bitcast <2 x i64> %285 to <4 x i32>
  %287 = add <4 x i32> %284, %286
  %288 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %287, <4 x i32>* %288, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad32x16x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = extractelement <4 x i16*> %16, i32 0
  br label %28

28:                                               ; preds = %143, %5
  %29 = phi i16* [ %27, %5 ], [ %145, %143 ]
  %30 = phi i64 [ 0, %5 ], [ %141, %143 ]
  %31 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %30
  %32 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %30
  %33 = bitcast <4 x i64>* %32 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 32
  br label %35

35:                                               ; preds = %35, %28
  %36 = phi <8 x i32> [ %34, %28 ], [ %135, %35 ]
  %37 = phi i16* [ %29, %28 ], [ %137, %35 ]
  %38 = phi i32 [ 0, %28 ], [ %138, %35 ]
  %39 = phi i16* [ %12, %28 ], [ %136, %35 ]
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %39, i64 16
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %39, i64 %17
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %45, i64 16
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = bitcast i16* %37 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %37, i64 16
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %37, i64 %18
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %56, i64 16
  %60 = bitcast i16* %59 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = sub <16 x i16> %41, %52
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %44, %55
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %47, %58
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = sub <16 x i16> %50, %61
  %75 = sub <16 x i16> zeroinitializer, %74
  %76 = icmp slt <16 x i16> %74, zeroinitializer
  %77 = select <16 x i1> %76, <16 x i16> %75, <16 x i16> %74
  %78 = add <16 x i16> %69, %65
  %79 = add <16 x i16> %78, %73
  %80 = add <16 x i16> %79, %77
  %81 = shufflevector <16 x i16> %80, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %82 = shufflevector <16 x i16> %80, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %83 = bitcast <16 x i16> %81 to <8 x i32>
  %84 = bitcast <16 x i16> %82 to <8 x i32>
  %85 = add <8 x i32> %36, %83
  %86 = add <8 x i32> %85, %84
  store <8 x i32> %86, <8 x i32>* %33, align 32
  %87 = getelementptr inbounds i16, i16* %39, i64 %20
  %88 = getelementptr inbounds i16, i16* %37, i64 %22
  %89 = bitcast i16* %87 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %87, i64 16
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %87, i64 %17
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %94, i64 16
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = bitcast i16* %88 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %88, i64 16
  %103 = bitcast i16* %102 to <16 x i16>*
  %104 = load <16 x i16>, <16 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %88, i64 %18
  %106 = bitcast i16* %105 to <16 x i16>*
  %107 = load <16 x i16>, <16 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %105, i64 16
  %109 = bitcast i16* %108 to <16 x i16>*
  %110 = load <16 x i16>, <16 x i16>* %109, align 1
  %111 = sub <16 x i16> %90, %101
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %93, %104
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %96, %107
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = sub <16 x i16> %99, %110
  %124 = sub <16 x i16> zeroinitializer, %123
  %125 = icmp slt <16 x i16> %123, zeroinitializer
  %126 = select <16 x i1> %125, <16 x i16> %124, <16 x i16> %123
  %127 = add <16 x i16> %118, %114
  %128 = add <16 x i16> %127, %122
  %129 = add <16 x i16> %128, %126
  %130 = shufflevector <16 x i16> %129, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %131 = shufflevector <16 x i16> %129, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %132 = bitcast <16 x i16> %130 to <8 x i32>
  %133 = bitcast <16 x i16> %131 to <8 x i32>
  %134 = add <8 x i32> %86, %132
  %135 = add <8 x i32> %134, %133
  store <8 x i32> %135, <8 x i32>* %33, align 32
  %136 = getelementptr inbounds i16, i16* %39, i64 %24
  %137 = getelementptr inbounds i16, i16* %37, i64 %26
  store i16* %137, i16** %31, align 8
  %138 = add nuw nsw i32 %38, 4
  %139 = icmp ult i32 %138, 16
  br i1 %139, label %35, label %140

140:                                              ; preds = %35
  %141 = add nuw nsw i64 %30, 1
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %146, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %141
  %145 = load i16*, i16** %144, align 8
  br label %28

146:                                              ; preds = %140
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %148 = load <4 x i64>, <4 x i64>* %147, align 32
  %149 = bitcast <4 x i64> %148 to <32 x i8>
  %150 = shufflevector <32 x i8> %149, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %159 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %160 = bitcast <4 x i64>* %159 to <32 x i8>*
  %161 = load <32 x i8>, <32 x i8>* %160, align 32
  %162 = shufflevector <32 x i8> %161, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %163 = bitcast <32 x i8> %150 to <8 x i32>
  %164 = bitcast <4 x i64> %148 to <8 x i32>
  %165 = add <8 x i32> %163, %164
  %166 = bitcast <8 x i32> %165 to <4 x i64>
  %167 = bitcast <32 x i8> %153 to <8 x i32>
  %168 = bitcast <32 x i8> %154 to <8 x i32>
  %169 = add <8 x i32> %168, %167
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = bitcast <8 x i32> %172 to <4 x i64>
  %174 = bitcast <32 x i8> %161 to <8 x i32>
  %175 = bitcast <32 x i8> %162 to <8 x i32>
  %176 = add <8 x i32> %175, %174
  %177 = and <4 x i64> %166, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %178 = and <4 x i64> %173, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %179 = bitcast <8 x i32> %169 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = bitcast <8 x i32> %176 to <32 x i8>
  %184 = and <32 x i8> %183, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %185 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %184, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %186 = bitcast <32 x i8> %185 to <4 x i64>
  %187 = or <4 x i64> %177, %182
  %188 = or <4 x i64> %178, %186
  %189 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %190 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %191 = bitcast <4 x i64> %189 to <8 x i32>
  %192 = bitcast <4 x i64> %190 to <8 x i32>
  %193 = add <8 x i32> %192, %191
  %194 = bitcast <8 x i32> %193 to <4 x i64>
  %195 = shufflevector <8 x i32> %193, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %196 = shufflevector <4 x i64> %194, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %197 = bitcast <2 x i64> %196 to <4 x i32>
  %198 = add <4 x i32> %195, %197
  %199 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %199, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad32x32x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = extractelement <4 x i16*> %16, i32 0
  br label %28

28:                                               ; preds = %143, %5
  %29 = phi i16* [ %27, %5 ], [ %145, %143 ]
  %30 = phi i64 [ 0, %5 ], [ %141, %143 ]
  %31 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %30
  %32 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %30
  %33 = bitcast <4 x i64>* %32 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 32
  br label %35

35:                                               ; preds = %35, %28
  %36 = phi <8 x i32> [ %34, %28 ], [ %135, %35 ]
  %37 = phi i16* [ %29, %28 ], [ %137, %35 ]
  %38 = phi i32 [ 0, %28 ], [ %138, %35 ]
  %39 = phi i16* [ %12, %28 ], [ %136, %35 ]
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %39, i64 16
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %39, i64 %17
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %45, i64 16
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = bitcast i16* %37 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %37, i64 16
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %37, i64 %18
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %56, i64 16
  %60 = bitcast i16* %59 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = sub <16 x i16> %41, %52
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %44, %55
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %47, %58
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = sub <16 x i16> %50, %61
  %75 = sub <16 x i16> zeroinitializer, %74
  %76 = icmp slt <16 x i16> %74, zeroinitializer
  %77 = select <16 x i1> %76, <16 x i16> %75, <16 x i16> %74
  %78 = add <16 x i16> %69, %65
  %79 = add <16 x i16> %78, %73
  %80 = add <16 x i16> %79, %77
  %81 = shufflevector <16 x i16> %80, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %82 = shufflevector <16 x i16> %80, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %83 = bitcast <16 x i16> %81 to <8 x i32>
  %84 = bitcast <16 x i16> %82 to <8 x i32>
  %85 = add <8 x i32> %36, %83
  %86 = add <8 x i32> %85, %84
  store <8 x i32> %86, <8 x i32>* %33, align 32
  %87 = getelementptr inbounds i16, i16* %39, i64 %20
  %88 = getelementptr inbounds i16, i16* %37, i64 %22
  %89 = bitcast i16* %87 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %87, i64 16
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %87, i64 %17
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %94, i64 16
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = bitcast i16* %88 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %88, i64 16
  %103 = bitcast i16* %102 to <16 x i16>*
  %104 = load <16 x i16>, <16 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %88, i64 %18
  %106 = bitcast i16* %105 to <16 x i16>*
  %107 = load <16 x i16>, <16 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %105, i64 16
  %109 = bitcast i16* %108 to <16 x i16>*
  %110 = load <16 x i16>, <16 x i16>* %109, align 1
  %111 = sub <16 x i16> %90, %101
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %93, %104
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %96, %107
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = sub <16 x i16> %99, %110
  %124 = sub <16 x i16> zeroinitializer, %123
  %125 = icmp slt <16 x i16> %123, zeroinitializer
  %126 = select <16 x i1> %125, <16 x i16> %124, <16 x i16> %123
  %127 = add <16 x i16> %118, %114
  %128 = add <16 x i16> %127, %122
  %129 = add <16 x i16> %128, %126
  %130 = shufflevector <16 x i16> %129, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %131 = shufflevector <16 x i16> %129, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %132 = bitcast <16 x i16> %130 to <8 x i32>
  %133 = bitcast <16 x i16> %131 to <8 x i32>
  %134 = add <8 x i32> %86, %132
  %135 = add <8 x i32> %134, %133
  store <8 x i32> %135, <8 x i32>* %33, align 32
  %136 = getelementptr inbounds i16, i16* %39, i64 %24
  %137 = getelementptr inbounds i16, i16* %37, i64 %26
  store i16* %137, i16** %31, align 8
  %138 = add nuw nsw i32 %38, 4
  %139 = icmp ult i32 %138, 32
  br i1 %139, label %35, label %140

140:                                              ; preds = %35
  %141 = add nuw nsw i64 %30, 1
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %146, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %141
  %145 = load i16*, i16** %144, align 8
  br label %28

146:                                              ; preds = %140
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %148 = load <4 x i64>, <4 x i64>* %147, align 32
  %149 = bitcast <4 x i64> %148 to <32 x i8>
  %150 = shufflevector <32 x i8> %149, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %159 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %160 = bitcast <4 x i64>* %159 to <32 x i8>*
  %161 = load <32 x i8>, <32 x i8>* %160, align 32
  %162 = shufflevector <32 x i8> %161, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %163 = bitcast <32 x i8> %150 to <8 x i32>
  %164 = bitcast <4 x i64> %148 to <8 x i32>
  %165 = add <8 x i32> %163, %164
  %166 = bitcast <8 x i32> %165 to <4 x i64>
  %167 = bitcast <32 x i8> %153 to <8 x i32>
  %168 = bitcast <32 x i8> %154 to <8 x i32>
  %169 = add <8 x i32> %168, %167
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = bitcast <8 x i32> %172 to <4 x i64>
  %174 = bitcast <32 x i8> %161 to <8 x i32>
  %175 = bitcast <32 x i8> %162 to <8 x i32>
  %176 = add <8 x i32> %175, %174
  %177 = and <4 x i64> %166, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %178 = and <4 x i64> %173, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %179 = bitcast <8 x i32> %169 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = bitcast <8 x i32> %176 to <32 x i8>
  %184 = and <32 x i8> %183, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %185 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %184, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %186 = bitcast <32 x i8> %185 to <4 x i64>
  %187 = or <4 x i64> %177, %182
  %188 = or <4 x i64> %178, %186
  %189 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %190 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %191 = bitcast <4 x i64> %189 to <8 x i32>
  %192 = bitcast <4 x i64> %190 to <8 x i32>
  %193 = add <8 x i32> %192, %191
  %194 = bitcast <8 x i32> %193 to <4 x i64>
  %195 = shufflevector <8 x i32> %193, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %196 = shufflevector <4 x i64> %194, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %197 = bitcast <2 x i64> %196 to <4 x i32>
  %198 = add <4 x i32> %195, %197
  %199 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %199, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad32x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = shl i32 %1, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = extractelement <4 x i16*> %16, i32 0
  br label %28

28:                                               ; preds = %143, %5
  %29 = phi i16* [ %27, %5 ], [ %145, %143 ]
  %30 = phi i64 [ 0, %5 ], [ %141, %143 ]
  %31 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %30
  %32 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %30
  %33 = bitcast <4 x i64>* %32 to <8 x i32>*
  %34 = load <8 x i32>, <8 x i32>* %33, align 32
  br label %35

35:                                               ; preds = %35, %28
  %36 = phi <8 x i32> [ %34, %28 ], [ %135, %35 ]
  %37 = phi i16* [ %29, %28 ], [ %137, %35 ]
  %38 = phi i32 [ 0, %28 ], [ %138, %35 ]
  %39 = phi i16* [ %12, %28 ], [ %136, %35 ]
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %39, i64 16
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %39, i64 %17
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %45, i64 16
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = bitcast i16* %37 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %37, i64 16
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %37, i64 %18
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %56, i64 16
  %60 = bitcast i16* %59 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = sub <16 x i16> %41, %52
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %44, %55
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %47, %58
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = sub <16 x i16> %50, %61
  %75 = sub <16 x i16> zeroinitializer, %74
  %76 = icmp slt <16 x i16> %74, zeroinitializer
  %77 = select <16 x i1> %76, <16 x i16> %75, <16 x i16> %74
  %78 = add <16 x i16> %69, %65
  %79 = add <16 x i16> %78, %73
  %80 = add <16 x i16> %79, %77
  %81 = shufflevector <16 x i16> %80, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %82 = shufflevector <16 x i16> %80, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %83 = bitcast <16 x i16> %81 to <8 x i32>
  %84 = bitcast <16 x i16> %82 to <8 x i32>
  %85 = add <8 x i32> %36, %83
  %86 = add <8 x i32> %85, %84
  store <8 x i32> %86, <8 x i32>* %33, align 32
  %87 = getelementptr inbounds i16, i16* %39, i64 %20
  %88 = getelementptr inbounds i16, i16* %37, i64 %22
  %89 = bitcast i16* %87 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %87, i64 16
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %87, i64 %17
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %94, i64 16
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = bitcast i16* %88 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %88, i64 16
  %103 = bitcast i16* %102 to <16 x i16>*
  %104 = load <16 x i16>, <16 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %88, i64 %18
  %106 = bitcast i16* %105 to <16 x i16>*
  %107 = load <16 x i16>, <16 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %105, i64 16
  %109 = bitcast i16* %108 to <16 x i16>*
  %110 = load <16 x i16>, <16 x i16>* %109, align 1
  %111 = sub <16 x i16> %90, %101
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %93, %104
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %96, %107
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = sub <16 x i16> %99, %110
  %124 = sub <16 x i16> zeroinitializer, %123
  %125 = icmp slt <16 x i16> %123, zeroinitializer
  %126 = select <16 x i1> %125, <16 x i16> %124, <16 x i16> %123
  %127 = add <16 x i16> %118, %114
  %128 = add <16 x i16> %127, %122
  %129 = add <16 x i16> %128, %126
  %130 = shufflevector <16 x i16> %129, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %131 = shufflevector <16 x i16> %129, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %132 = bitcast <16 x i16> %130 to <8 x i32>
  %133 = bitcast <16 x i16> %131 to <8 x i32>
  %134 = add <8 x i32> %86, %132
  %135 = add <8 x i32> %134, %133
  store <8 x i32> %135, <8 x i32>* %33, align 32
  %136 = getelementptr inbounds i16, i16* %39, i64 %24
  %137 = getelementptr inbounds i16, i16* %37, i64 %26
  store i16* %137, i16** %31, align 8
  %138 = add nuw nsw i32 %38, 4
  %139 = icmp ult i32 %138, 64
  br i1 %139, label %35, label %140

140:                                              ; preds = %35
  %141 = add nuw nsw i64 %30, 1
  %142 = icmp eq i64 %141, 4
  br i1 %142, label %146, label %143

143:                                              ; preds = %140
  %144 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %141
  %145 = load i16*, i16** %144, align 8
  br label %28

146:                                              ; preds = %140
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %148 = load <4 x i64>, <4 x i64>* %147, align 32
  %149 = bitcast <4 x i64> %148 to <32 x i8>
  %150 = shufflevector <32 x i8> %149, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %159 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %160 = bitcast <4 x i64>* %159 to <32 x i8>*
  %161 = load <32 x i8>, <32 x i8>* %160, align 32
  %162 = shufflevector <32 x i8> %161, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %163 = bitcast <32 x i8> %150 to <8 x i32>
  %164 = bitcast <4 x i64> %148 to <8 x i32>
  %165 = add <8 x i32> %163, %164
  %166 = bitcast <8 x i32> %165 to <4 x i64>
  %167 = bitcast <32 x i8> %153 to <8 x i32>
  %168 = bitcast <32 x i8> %154 to <8 x i32>
  %169 = add <8 x i32> %168, %167
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = bitcast <8 x i32> %172 to <4 x i64>
  %174 = bitcast <32 x i8> %161 to <8 x i32>
  %175 = bitcast <32 x i8> %162 to <8 x i32>
  %176 = add <8 x i32> %175, %174
  %177 = and <4 x i64> %166, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %178 = and <4 x i64> %173, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %179 = bitcast <8 x i32> %169 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = bitcast <8 x i32> %176 to <32 x i8>
  %184 = and <32 x i8> %183, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %185 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %184, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %186 = bitcast <32 x i8> %185 to <4 x i64>
  %187 = or <4 x i64> %177, %182
  %188 = or <4 x i64> %178, %186
  %189 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %190 = shufflevector <4 x i64> %187, <4 x i64> %188, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %191 = bitcast <4 x i64> %189 to <8 x i32>
  %192 = bitcast <4 x i64> %190 to <8 x i32>
  %193 = add <8 x i32> %192, %191
  %194 = bitcast <8 x i32> %193 to <4 x i64>
  %195 = shufflevector <8 x i32> %193, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %196 = shufflevector <4 x i64> %194, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %197 = bitcast <2 x i64> %196 to <4 x i32>
  %198 = add <4 x i32> %195, %197
  %199 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %199, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad64x16x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = extractelement <4 x i16*> %16, i32 0
  br label %24

24:                                               ; preds = %139, %5
  %25 = phi i16* [ %23, %5 ], [ %141, %139 ]
  %26 = phi i64 [ 0, %5 ], [ %137, %139 ]
  %27 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %26
  %28 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %26
  %29 = bitcast <4 x i64>* %28 to <8 x i32>*
  %30 = load <8 x i32>, <8 x i32>* %29, align 32
  br label %31

31:                                               ; preds = %31, %24
  %32 = phi <8 x i32> [ %30, %24 ], [ %131, %31 ]
  %33 = phi i16* [ %25, %24 ], [ %133, %31 ]
  %34 = phi i32 [ 0, %24 ], [ %134, %31 ]
  %35 = phi i16* [ %12, %24 ], [ %132, %31 ]
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %35, i64 16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %35, i64 32
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %35, i64 48
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = bitcast i16* %33 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %33, i64 16
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %33, i64 32
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %33, i64 48
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = sub <16 x i16> %37, %48
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %40, %51
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %43, %54
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %46, %57
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = add <16 x i16> %65, %61
  %75 = add <16 x i16> %74, %69
  %76 = add <16 x i16> %75, %73
  %77 = shufflevector <16 x i16> %76, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %78 = shufflevector <16 x i16> %76, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i16> %77 to <8 x i32>
  %80 = bitcast <16 x i16> %78 to <8 x i32>
  %81 = add <8 x i32> %32, %79
  %82 = add <8 x i32> %81, %80
  store <8 x i32> %82, <8 x i32>* %29, align 32
  %83 = getelementptr inbounds i16, i16* %35, i64 %17
  %84 = getelementptr inbounds i16, i16* %33, i64 %18
  %85 = bitcast i16* %83 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 16
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %83, i64 32
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %83, i64 48
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = bitcast i16* %84 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = getelementptr inbounds i16, i16* %84, i64 16
  %99 = bitcast i16* %98 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 1
  %101 = getelementptr inbounds i16, i16* %84, i64 32
  %102 = bitcast i16* %101 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %84, i64 48
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = sub <16 x i16> %86, %97
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %89, %100
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %92, %103
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %95, %106
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = add <16 x i16> %114, %110
  %124 = add <16 x i16> %123, %118
  %125 = add <16 x i16> %124, %122
  %126 = shufflevector <16 x i16> %125, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %127 = shufflevector <16 x i16> %125, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i16> %126 to <8 x i32>
  %129 = bitcast <16 x i16> %127 to <8 x i32>
  %130 = add <8 x i32> %82, %128
  %131 = add <8 x i32> %130, %129
  store <8 x i32> %131, <8 x i32>* %29, align 32
  %132 = getelementptr inbounds i16, i16* %35, i64 %20
  %133 = getelementptr inbounds i16, i16* %33, i64 %22
  store i16* %133, i16** %27, align 8
  %134 = add nuw nsw i32 %34, 2
  %135 = icmp ult i32 %134, 16
  br i1 %135, label %31, label %136

136:                                              ; preds = %31
  %137 = add nuw nsw i64 %26, 1
  %138 = icmp eq i64 %137, 4
  br i1 %138, label %142, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %137
  %141 = load i16*, i16** %140, align 8
  br label %24

142:                                              ; preds = %136
  %143 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %144 = load <4 x i64>, <4 x i64>* %143, align 32
  %145 = bitcast <4 x i64> %144 to <32 x i8>
  %146 = shufflevector <32 x i8> %145, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %148 = bitcast <4 x i64>* %147 to <32 x i8>*
  %149 = load <32 x i8>, <32 x i8>* %148, align 32
  %150 = shufflevector <32 x i8> %149, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <32 x i8> %146 to <8 x i32>
  %160 = bitcast <4 x i64> %144 to <8 x i32>
  %161 = add <8 x i32> %159, %160
  %162 = bitcast <8 x i32> %161 to <4 x i64>
  %163 = bitcast <32 x i8> %149 to <8 x i32>
  %164 = bitcast <32 x i8> %150 to <8 x i32>
  %165 = add <8 x i32> %164, %163
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = add <8 x i32> %167, %166
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = and <4 x i64> %162, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %174 = and <4 x i64> %169, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %175 = bitcast <8 x i32> %165 to <32 x i8>
  %176 = and <32 x i8> %175, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %177 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %176, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %178 = bitcast <32 x i8> %177 to <4 x i64>
  %179 = bitcast <8 x i32> %172 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = or <4 x i64> %173, %178
  %184 = or <4 x i64> %174, %182
  %185 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %186 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = bitcast <4 x i64> %186 to <8 x i32>
  %189 = add <8 x i32> %188, %187
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = shufflevector <8 x i32> %189, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %192 = shufflevector <4 x i64> %190, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %193 = bitcast <2 x i64> %192 to <4 x i32>
  %194 = add <4 x i32> %191, %193
  %195 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad64x32x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = extractelement <4 x i16*> %16, i32 0
  br label %24

24:                                               ; preds = %139, %5
  %25 = phi i16* [ %23, %5 ], [ %141, %139 ]
  %26 = phi i64 [ 0, %5 ], [ %137, %139 ]
  %27 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %26
  %28 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %26
  %29 = bitcast <4 x i64>* %28 to <8 x i32>*
  %30 = load <8 x i32>, <8 x i32>* %29, align 32
  br label %31

31:                                               ; preds = %31, %24
  %32 = phi <8 x i32> [ %30, %24 ], [ %131, %31 ]
  %33 = phi i16* [ %25, %24 ], [ %133, %31 ]
  %34 = phi i32 [ 0, %24 ], [ %134, %31 ]
  %35 = phi i16* [ %12, %24 ], [ %132, %31 ]
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %35, i64 16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %35, i64 32
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %35, i64 48
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = bitcast i16* %33 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %33, i64 16
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %33, i64 32
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %33, i64 48
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = sub <16 x i16> %37, %48
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %40, %51
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %43, %54
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %46, %57
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = add <16 x i16> %65, %61
  %75 = add <16 x i16> %74, %69
  %76 = add <16 x i16> %75, %73
  %77 = shufflevector <16 x i16> %76, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %78 = shufflevector <16 x i16> %76, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i16> %77 to <8 x i32>
  %80 = bitcast <16 x i16> %78 to <8 x i32>
  %81 = add <8 x i32> %32, %79
  %82 = add <8 x i32> %81, %80
  store <8 x i32> %82, <8 x i32>* %29, align 32
  %83 = getelementptr inbounds i16, i16* %35, i64 %17
  %84 = getelementptr inbounds i16, i16* %33, i64 %18
  %85 = bitcast i16* %83 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 16
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %83, i64 32
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %83, i64 48
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = bitcast i16* %84 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = getelementptr inbounds i16, i16* %84, i64 16
  %99 = bitcast i16* %98 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 1
  %101 = getelementptr inbounds i16, i16* %84, i64 32
  %102 = bitcast i16* %101 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %84, i64 48
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = sub <16 x i16> %86, %97
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %89, %100
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %92, %103
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %95, %106
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = add <16 x i16> %114, %110
  %124 = add <16 x i16> %123, %118
  %125 = add <16 x i16> %124, %122
  %126 = shufflevector <16 x i16> %125, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %127 = shufflevector <16 x i16> %125, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i16> %126 to <8 x i32>
  %129 = bitcast <16 x i16> %127 to <8 x i32>
  %130 = add <8 x i32> %82, %128
  %131 = add <8 x i32> %130, %129
  store <8 x i32> %131, <8 x i32>* %29, align 32
  %132 = getelementptr inbounds i16, i16* %35, i64 %20
  %133 = getelementptr inbounds i16, i16* %33, i64 %22
  store i16* %133, i16** %27, align 8
  %134 = add nuw nsw i32 %34, 2
  %135 = icmp ult i32 %134, 32
  br i1 %135, label %31, label %136

136:                                              ; preds = %31
  %137 = add nuw nsw i64 %26, 1
  %138 = icmp eq i64 %137, 4
  br i1 %138, label %142, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %137
  %141 = load i16*, i16** %140, align 8
  br label %24

142:                                              ; preds = %136
  %143 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %144 = load <4 x i64>, <4 x i64>* %143, align 32
  %145 = bitcast <4 x i64> %144 to <32 x i8>
  %146 = shufflevector <32 x i8> %145, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %148 = bitcast <4 x i64>* %147 to <32 x i8>*
  %149 = load <32 x i8>, <32 x i8>* %148, align 32
  %150 = shufflevector <32 x i8> %149, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <32 x i8> %146 to <8 x i32>
  %160 = bitcast <4 x i64> %144 to <8 x i32>
  %161 = add <8 x i32> %159, %160
  %162 = bitcast <8 x i32> %161 to <4 x i64>
  %163 = bitcast <32 x i8> %149 to <8 x i32>
  %164 = bitcast <32 x i8> %150 to <8 x i32>
  %165 = add <8 x i32> %164, %163
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = add <8 x i32> %167, %166
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = and <4 x i64> %162, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %174 = and <4 x i64> %169, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %175 = bitcast <8 x i32> %165 to <32 x i8>
  %176 = and <32 x i8> %175, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %177 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %176, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %178 = bitcast <32 x i8> %177 to <4 x i64>
  %179 = bitcast <8 x i32> %172 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = or <4 x i64> %173, %178
  %184 = or <4 x i64> %174, %182
  %185 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %186 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = bitcast <4 x i64> %186 to <8 x i32>
  %189 = add <8 x i32> %188, %187
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = shufflevector <8 x i32> %189, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %192 = shufflevector <4 x i64> %190, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %193 = bitcast <2 x i64> %192 to <4 x i32>
  %194 = add <4 x i32> %191, %193
  %195 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad64x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = extractelement <4 x i16*> %16, i32 0
  br label %24

24:                                               ; preds = %139, %5
  %25 = phi i16* [ %23, %5 ], [ %141, %139 ]
  %26 = phi i64 [ 0, %5 ], [ %137, %139 ]
  %27 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %26
  %28 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %26
  %29 = bitcast <4 x i64>* %28 to <8 x i32>*
  %30 = load <8 x i32>, <8 x i32>* %29, align 32
  br label %31

31:                                               ; preds = %31, %24
  %32 = phi <8 x i32> [ %30, %24 ], [ %131, %31 ]
  %33 = phi i16* [ %25, %24 ], [ %133, %31 ]
  %34 = phi i32 [ 0, %24 ], [ %134, %31 ]
  %35 = phi i16* [ %12, %24 ], [ %132, %31 ]
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %35, i64 16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %35, i64 32
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %35, i64 48
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = bitcast i16* %33 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %33, i64 16
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %33, i64 32
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %33, i64 48
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = sub <16 x i16> %37, %48
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %40, %51
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %43, %54
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %46, %57
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = add <16 x i16> %65, %61
  %75 = add <16 x i16> %74, %69
  %76 = add <16 x i16> %75, %73
  %77 = shufflevector <16 x i16> %76, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %78 = shufflevector <16 x i16> %76, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i16> %77 to <8 x i32>
  %80 = bitcast <16 x i16> %78 to <8 x i32>
  %81 = add <8 x i32> %32, %79
  %82 = add <8 x i32> %81, %80
  store <8 x i32> %82, <8 x i32>* %29, align 32
  %83 = getelementptr inbounds i16, i16* %35, i64 %17
  %84 = getelementptr inbounds i16, i16* %33, i64 %18
  %85 = bitcast i16* %83 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 16
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %83, i64 32
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %83, i64 48
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = bitcast i16* %84 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = getelementptr inbounds i16, i16* %84, i64 16
  %99 = bitcast i16* %98 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 1
  %101 = getelementptr inbounds i16, i16* %84, i64 32
  %102 = bitcast i16* %101 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %84, i64 48
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = sub <16 x i16> %86, %97
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %89, %100
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %92, %103
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %95, %106
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = add <16 x i16> %114, %110
  %124 = add <16 x i16> %123, %118
  %125 = add <16 x i16> %124, %122
  %126 = shufflevector <16 x i16> %125, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %127 = shufflevector <16 x i16> %125, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i16> %126 to <8 x i32>
  %129 = bitcast <16 x i16> %127 to <8 x i32>
  %130 = add <8 x i32> %82, %128
  %131 = add <8 x i32> %130, %129
  store <8 x i32> %131, <8 x i32>* %29, align 32
  %132 = getelementptr inbounds i16, i16* %35, i64 %20
  %133 = getelementptr inbounds i16, i16* %33, i64 %22
  store i16* %133, i16** %27, align 8
  %134 = add nuw nsw i32 %34, 2
  %135 = icmp ult i32 %134, 64
  br i1 %135, label %31, label %136

136:                                              ; preds = %31
  %137 = add nuw nsw i64 %26, 1
  %138 = icmp eq i64 %137, 4
  br i1 %138, label %142, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %137
  %141 = load i16*, i16** %140, align 8
  br label %24

142:                                              ; preds = %136
  %143 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %144 = load <4 x i64>, <4 x i64>* %143, align 32
  %145 = bitcast <4 x i64> %144 to <32 x i8>
  %146 = shufflevector <32 x i8> %145, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %148 = bitcast <4 x i64>* %147 to <32 x i8>*
  %149 = load <32 x i8>, <32 x i8>* %148, align 32
  %150 = shufflevector <32 x i8> %149, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <32 x i8> %146 to <8 x i32>
  %160 = bitcast <4 x i64> %144 to <8 x i32>
  %161 = add <8 x i32> %159, %160
  %162 = bitcast <8 x i32> %161 to <4 x i64>
  %163 = bitcast <32 x i8> %149 to <8 x i32>
  %164 = bitcast <32 x i8> %150 to <8 x i32>
  %165 = add <8 x i32> %164, %163
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = add <8 x i32> %167, %166
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = and <4 x i64> %162, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %174 = and <4 x i64> %169, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %175 = bitcast <8 x i32> %165 to <32 x i8>
  %176 = and <32 x i8> %175, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %177 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %176, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %178 = bitcast <32 x i8> %177 to <4 x i64>
  %179 = bitcast <8 x i32> %172 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = or <4 x i64> %173, %178
  %184 = or <4 x i64> %174, %182
  %185 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %186 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = bitcast <4 x i64> %186 to <8 x i32>
  %189 = add <8 x i32> %188, %187
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = shufflevector <8 x i32> %189, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %192 = shufflevector <4 x i64> %190, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %193 = bitcast <2 x i64> %192 to <4 x i32>
  %194 = add <4 x i32> %191, %193
  %195 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad64x128x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = shl i32 %1, 1
  %20 = sext i32 %19 to i64
  %21 = shl i32 %3, 1
  %22 = sext i32 %21 to i64
  %23 = extractelement <4 x i16*> %16, i32 0
  br label %24

24:                                               ; preds = %139, %5
  %25 = phi i16* [ %23, %5 ], [ %141, %139 ]
  %26 = phi i64 [ 0, %5 ], [ %137, %139 ]
  %27 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %26
  %28 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %26
  %29 = bitcast <4 x i64>* %28 to <8 x i32>*
  %30 = load <8 x i32>, <8 x i32>* %29, align 32
  br label %31

31:                                               ; preds = %31, %24
  %32 = phi <8 x i32> [ %30, %24 ], [ %131, %31 ]
  %33 = phi i16* [ %25, %24 ], [ %133, %31 ]
  %34 = phi i32 [ 0, %24 ], [ %134, %31 ]
  %35 = phi i16* [ %12, %24 ], [ %132, %31 ]
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %35, i64 16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = getelementptr inbounds i16, i16* %35, i64 32
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %35, i64 48
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = bitcast i16* %33 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = getelementptr inbounds i16, i16* %33, i64 16
  %50 = bitcast i16* %49 to <16 x i16>*
  %51 = load <16 x i16>, <16 x i16>* %50, align 1
  %52 = getelementptr inbounds i16, i16* %33, i64 32
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %33, i64 48
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = sub <16 x i16> %37, %48
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %40, %51
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %43, %54
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = sub <16 x i16> %46, %57
  %71 = sub <16 x i16> zeroinitializer, %70
  %72 = icmp slt <16 x i16> %70, zeroinitializer
  %73 = select <16 x i1> %72, <16 x i16> %71, <16 x i16> %70
  %74 = add <16 x i16> %65, %61
  %75 = add <16 x i16> %74, %69
  %76 = add <16 x i16> %75, %73
  %77 = shufflevector <16 x i16> %76, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %78 = shufflevector <16 x i16> %76, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %79 = bitcast <16 x i16> %77 to <8 x i32>
  %80 = bitcast <16 x i16> %78 to <8 x i32>
  %81 = add <8 x i32> %32, %79
  %82 = add <8 x i32> %81, %80
  store <8 x i32> %82, <8 x i32>* %29, align 32
  %83 = getelementptr inbounds i16, i16* %35, i64 %17
  %84 = getelementptr inbounds i16, i16* %33, i64 %18
  %85 = bitcast i16* %83 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %83, i64 16
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = getelementptr inbounds i16, i16* %83, i64 32
  %91 = bitcast i16* %90 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %83, i64 48
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = bitcast i16* %84 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = getelementptr inbounds i16, i16* %84, i64 16
  %99 = bitcast i16* %98 to <16 x i16>*
  %100 = load <16 x i16>, <16 x i16>* %99, align 1
  %101 = getelementptr inbounds i16, i16* %84, i64 32
  %102 = bitcast i16* %101 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %84, i64 48
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = sub <16 x i16> %86, %97
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %89, %100
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %92, %103
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = sub <16 x i16> %95, %106
  %120 = sub <16 x i16> zeroinitializer, %119
  %121 = icmp slt <16 x i16> %119, zeroinitializer
  %122 = select <16 x i1> %121, <16 x i16> %120, <16 x i16> %119
  %123 = add <16 x i16> %114, %110
  %124 = add <16 x i16> %123, %118
  %125 = add <16 x i16> %124, %122
  %126 = shufflevector <16 x i16> %125, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %127 = shufflevector <16 x i16> %125, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <16 x i16> %126 to <8 x i32>
  %129 = bitcast <16 x i16> %127 to <8 x i32>
  %130 = add <8 x i32> %82, %128
  %131 = add <8 x i32> %130, %129
  store <8 x i32> %131, <8 x i32>* %29, align 32
  %132 = getelementptr inbounds i16, i16* %35, i64 %20
  %133 = getelementptr inbounds i16, i16* %33, i64 %22
  store i16* %133, i16** %27, align 8
  %134 = add nuw nsw i32 %34, 2
  %135 = icmp ult i32 %134, 128
  br i1 %135, label %31, label %136

136:                                              ; preds = %31
  %137 = add nuw nsw i64 %26, 1
  %138 = icmp eq i64 %137, 4
  br i1 %138, label %142, label %139

139:                                              ; preds = %136
  %140 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %137
  %141 = load i16*, i16** %140, align 8
  br label %24

142:                                              ; preds = %136
  %143 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %144 = load <4 x i64>, <4 x i64>* %143, align 32
  %145 = bitcast <4 x i64> %144 to <32 x i8>
  %146 = shufflevector <32 x i8> %145, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %148 = bitcast <4 x i64>* %147 to <32 x i8>*
  %149 = load <32 x i8>, <32 x i8>* %148, align 32
  %150 = shufflevector <32 x i8> %149, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %155 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %156 = bitcast <4 x i64>* %155 to <32 x i8>*
  %157 = load <32 x i8>, <32 x i8>* %156, align 32
  %158 = shufflevector <32 x i8> %157, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %159 = bitcast <32 x i8> %146 to <8 x i32>
  %160 = bitcast <4 x i64> %144 to <8 x i32>
  %161 = add <8 x i32> %159, %160
  %162 = bitcast <8 x i32> %161 to <4 x i64>
  %163 = bitcast <32 x i8> %149 to <8 x i32>
  %164 = bitcast <32 x i8> %150 to <8 x i32>
  %165 = add <8 x i32> %164, %163
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = add <8 x i32> %167, %166
  %169 = bitcast <8 x i32> %168 to <4 x i64>
  %170 = bitcast <32 x i8> %157 to <8 x i32>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = add <8 x i32> %171, %170
  %173 = and <4 x i64> %162, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %174 = and <4 x i64> %169, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %175 = bitcast <8 x i32> %165 to <32 x i8>
  %176 = and <32 x i8> %175, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %177 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %176, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %178 = bitcast <32 x i8> %177 to <4 x i64>
  %179 = bitcast <8 x i32> %172 to <32 x i8>
  %180 = and <32 x i8> %179, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %181 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %180, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %182 = bitcast <32 x i8> %181 to <4 x i64>
  %183 = or <4 x i64> %173, %178
  %184 = or <4 x i64> %174, %182
  %185 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %186 = shufflevector <4 x i64> %183, <4 x i64> %184, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %187 = bitcast <4 x i64> %185 to <8 x i32>
  %188 = bitcast <4 x i64> %186 to <8 x i32>
  %189 = add <8 x i32> %188, %187
  %190 = bitcast <8 x i32> %189 to <4 x i64>
  %191 = shufflevector <8 x i32> %189, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %192 = shufflevector <4 x i64> %190, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %193 = bitcast <2 x i64> %192 to <4 x i32>
  %194 = add <4 x i32> %191, %193
  %195 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %194, <4 x i32>* %195, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad128x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = extractelement <4 x i16*> %16, i32 0
  br label %20

20:                                               ; preds = %135, %5
  %21 = phi i16* [ %19, %5 ], [ %137, %135 ]
  %22 = phi i64 [ 0, %5 ], [ %133, %135 ]
  %23 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %22
  %24 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %22
  %25 = bitcast <4 x i64>* %24 to <8 x i32>*
  %26 = load <8 x i32>, <8 x i32>* %25, align 32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi <8 x i32> [ %26, %20 ], [ %127, %27 ]
  %29 = phi i16* [ %21, %20 ], [ %129, %27 ]
  %30 = phi i32 [ 0, %20 ], [ %130, %27 ]
  %31 = phi i16* [ %12, %20 ], [ %128, %27 ]
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %31, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %31, i64 32
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %31, i64 48
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = bitcast i16* %29 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %29, i64 16
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %29, i64 32
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %29, i64 48
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = sub <16 x i16> %33, %44
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %36, %47
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %39, %50
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %42, %53
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = add <16 x i16> %61, %57
  %71 = add <16 x i16> %70, %65
  %72 = add <16 x i16> %71, %69
  %73 = shufflevector <16 x i16> %72, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %74 = shufflevector <16 x i16> %72, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i16> %73 to <8 x i32>
  %76 = bitcast <16 x i16> %74 to <8 x i32>
  %77 = add <8 x i32> %28, %75
  %78 = add <8 x i32> %77, %76
  store <8 x i32> %78, <8 x i32>* %25, align 32
  %79 = getelementptr inbounds i16, i16* %31, i64 64
  %80 = getelementptr inbounds i16, i16* %29, i64 64
  %81 = bitcast i16* %79 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %31, i64 80
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %31, i64 96
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %31, i64 112
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = bitcast i16* %80 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %29, i64 80
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %29, i64 96
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %29, i64 112
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = sub <16 x i16> %82, %93
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %85, %96
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %88, %99
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %91, %102
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = add <16 x i16> %110, %106
  %120 = add <16 x i16> %119, %114
  %121 = add <16 x i16> %120, %118
  %122 = shufflevector <16 x i16> %121, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %123 = shufflevector <16 x i16> %121, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = bitcast <16 x i16> %122 to <8 x i32>
  %125 = bitcast <16 x i16> %123 to <8 x i32>
  %126 = add <8 x i32> %78, %124
  %127 = add <8 x i32> %126, %125
  store <8 x i32> %127, <8 x i32>* %25, align 32
  %128 = getelementptr inbounds i16, i16* %31, i64 %17
  %129 = getelementptr inbounds i16, i16* %29, i64 %18
  store i16* %129, i16** %23, align 8
  %130 = add nuw nsw i32 %30, 1
  %131 = icmp eq i32 %130, 64
  br i1 %131, label %132, label %27

132:                                              ; preds = %27
  %133 = add nuw nsw i64 %22, 1
  %134 = icmp eq i64 %133, 4
  br i1 %134, label %138, label %135

135:                                              ; preds = %132
  %136 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %133
  %137 = load i16*, i16** %136, align 8
  br label %20

138:                                              ; preds = %132
  %139 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %140 = load <4 x i64>, <4 x i64>* %139, align 32
  %141 = bitcast <4 x i64> %140 to <32 x i8>
  %142 = shufflevector <32 x i8> %141, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %143 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %144 = bitcast <4 x i64>* %143 to <32 x i8>*
  %145 = load <32 x i8>, <32 x i8>* %144, align 32
  %146 = shufflevector <32 x i8> %145, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %148 = bitcast <4 x i64>* %147 to <32 x i8>*
  %149 = load <32 x i8>, <32 x i8>* %148, align 32
  %150 = shufflevector <32 x i8> %149, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <32 x i8> %142 to <8 x i32>
  %156 = bitcast <4 x i64> %140 to <8 x i32>
  %157 = add <8 x i32> %155, %156
  %158 = bitcast <8 x i32> %157 to <4 x i64>
  %159 = bitcast <32 x i8> %145 to <8 x i32>
  %160 = bitcast <32 x i8> %146 to <8 x i32>
  %161 = add <8 x i32> %160, %159
  %162 = bitcast <32 x i8> %149 to <8 x i32>
  %163 = bitcast <32 x i8> %150 to <8 x i32>
  %164 = add <8 x i32> %163, %162
  %165 = bitcast <8 x i32> %164 to <4 x i64>
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = add <8 x i32> %167, %166
  %169 = and <4 x i64> %158, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %170 = and <4 x i64> %165, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %171 = bitcast <8 x i32> %161 to <32 x i8>
  %172 = and <32 x i8> %171, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %173 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %172, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %174 = bitcast <32 x i8> %173 to <4 x i64>
  %175 = bitcast <8 x i32> %168 to <32 x i8>
  %176 = and <32 x i8> %175, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %177 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %176, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %178 = bitcast <32 x i8> %177 to <4 x i64>
  %179 = or <4 x i64> %169, %174
  %180 = or <4 x i64> %170, %178
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %182 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %183 = bitcast <4 x i64> %181 to <8 x i32>
  %184 = bitcast <4 x i64> %182 to <8 x i32>
  %185 = add <8 x i32> %184, %183
  %186 = bitcast <8 x i32> %185 to <4 x i64>
  %187 = shufflevector <8 x i32> %185, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %188 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %189 = bitcast <2 x i64> %188 to <4 x i32>
  %190 = add <4 x i32> %187, %189
  %191 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %191, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad128x128x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #6
  %9 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = ptrtoint i8* %0 to i64
  %11 = shl i64 %10, 1
  %12 = inttoptr i64 %11 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %8, i8 0, i64 128, i1 false) #6
  %13 = bitcast i8** %2 to <4 x i64>*
  %14 = load <4 x i64>, <4 x i64>* %13, align 8
  %15 = shl <4 x i64> %14, <i64 1, i64 1, i64 1, i64 1>
  %16 = inttoptr <4 x i64> %15 to <4 x i16*>
  store <4 x i16*> %16, <4 x i16*>* %7, align 16
  %17 = sext i32 %1 to i64
  %18 = sext i32 %3 to i64
  %19 = extractelement <4 x i16*> %16, i32 0
  br label %20

20:                                               ; preds = %135, %5
  %21 = phi i16* [ %19, %5 ], [ %137, %135 ]
  %22 = phi i64 [ 0, %5 ], [ %133, %135 ]
  %23 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %22
  %24 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %22
  %25 = bitcast <4 x i64>* %24 to <8 x i32>*
  %26 = load <8 x i32>, <8 x i32>* %25, align 32
  br label %27

27:                                               ; preds = %27, %20
  %28 = phi <8 x i32> [ %26, %20 ], [ %127, %27 ]
  %29 = phi i16* [ %21, %20 ], [ %129, %27 ]
  %30 = phi i32 [ 0, %20 ], [ %130, %27 ]
  %31 = phi i16* [ %12, %20 ], [ %128, %27 ]
  %32 = bitcast i16* %31 to <16 x i16>*
  %33 = load <16 x i16>, <16 x i16>* %32, align 1
  %34 = getelementptr inbounds i16, i16* %31, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = load <16 x i16>, <16 x i16>* %35, align 1
  %37 = getelementptr inbounds i16, i16* %31, i64 32
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %31, i64 48
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = bitcast i16* %29 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = getelementptr inbounds i16, i16* %29, i64 16
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %29, i64 32
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %29, i64 48
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = sub <16 x i16> %33, %44
  %55 = sub <16 x i16> zeroinitializer, %54
  %56 = icmp slt <16 x i16> %54, zeroinitializer
  %57 = select <16 x i1> %56, <16 x i16> %55, <16 x i16> %54
  %58 = sub <16 x i16> %36, %47
  %59 = sub <16 x i16> zeroinitializer, %58
  %60 = icmp slt <16 x i16> %58, zeroinitializer
  %61 = select <16 x i1> %60, <16 x i16> %59, <16 x i16> %58
  %62 = sub <16 x i16> %39, %50
  %63 = sub <16 x i16> zeroinitializer, %62
  %64 = icmp slt <16 x i16> %62, zeroinitializer
  %65 = select <16 x i1> %64, <16 x i16> %63, <16 x i16> %62
  %66 = sub <16 x i16> %42, %53
  %67 = sub <16 x i16> zeroinitializer, %66
  %68 = icmp slt <16 x i16> %66, zeroinitializer
  %69 = select <16 x i1> %68, <16 x i16> %67, <16 x i16> %66
  %70 = add <16 x i16> %61, %57
  %71 = add <16 x i16> %70, %65
  %72 = add <16 x i16> %71, %69
  %73 = shufflevector <16 x i16> %72, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %74 = shufflevector <16 x i16> %72, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %75 = bitcast <16 x i16> %73 to <8 x i32>
  %76 = bitcast <16 x i16> %74 to <8 x i32>
  %77 = add <8 x i32> %28, %75
  %78 = add <8 x i32> %77, %76
  store <8 x i32> %78, <8 x i32>* %25, align 32
  %79 = getelementptr inbounds i16, i16* %31, i64 64
  %80 = getelementptr inbounds i16, i16* %29, i64 64
  %81 = bitcast i16* %79 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = getelementptr inbounds i16, i16* %31, i64 80
  %84 = bitcast i16* %83 to <16 x i16>*
  %85 = load <16 x i16>, <16 x i16>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %31, i64 96
  %87 = bitcast i16* %86 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %31, i64 112
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = bitcast i16* %80 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = getelementptr inbounds i16, i16* %29, i64 80
  %95 = bitcast i16* %94 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %29, i64 96
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %29, i64 112
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = sub <16 x i16> %82, %93
  %104 = sub <16 x i16> zeroinitializer, %103
  %105 = icmp slt <16 x i16> %103, zeroinitializer
  %106 = select <16 x i1> %105, <16 x i16> %104, <16 x i16> %103
  %107 = sub <16 x i16> %85, %96
  %108 = sub <16 x i16> zeroinitializer, %107
  %109 = icmp slt <16 x i16> %107, zeroinitializer
  %110 = select <16 x i1> %109, <16 x i16> %108, <16 x i16> %107
  %111 = sub <16 x i16> %88, %99
  %112 = sub <16 x i16> zeroinitializer, %111
  %113 = icmp slt <16 x i16> %111, zeroinitializer
  %114 = select <16 x i1> %113, <16 x i16> %112, <16 x i16> %111
  %115 = sub <16 x i16> %91, %102
  %116 = sub <16 x i16> zeroinitializer, %115
  %117 = icmp slt <16 x i16> %115, zeroinitializer
  %118 = select <16 x i1> %117, <16 x i16> %116, <16 x i16> %115
  %119 = add <16 x i16> %110, %106
  %120 = add <16 x i16> %119, %114
  %121 = add <16 x i16> %120, %118
  %122 = shufflevector <16 x i16> %121, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %123 = shufflevector <16 x i16> %121, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = bitcast <16 x i16> %122 to <8 x i32>
  %125 = bitcast <16 x i16> %123 to <8 x i32>
  %126 = add <8 x i32> %78, %124
  %127 = add <8 x i32> %126, %125
  store <8 x i32> %127, <8 x i32>* %25, align 32
  %128 = getelementptr inbounds i16, i16* %31, i64 %17
  %129 = getelementptr inbounds i16, i16* %29, i64 %18
  store i16* %129, i16** %23, align 8
  %130 = add nuw nsw i32 %30, 1
  %131 = icmp eq i32 %130, 128
  br i1 %131, label %132, label %27

132:                                              ; preds = %27
  %133 = add nuw nsw i64 %22, 1
  %134 = icmp eq i64 %133, 4
  br i1 %134, label %138, label %135

135:                                              ; preds = %132
  %136 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %133
  %137 = load i16*, i16** %136, align 8
  br label %20

138:                                              ; preds = %132
  %139 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %140 = load <4 x i64>, <4 x i64>* %139, align 32
  %141 = bitcast <4 x i64> %140 to <32 x i8>
  %142 = shufflevector <32 x i8> %141, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %143 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %144 = bitcast <4 x i64>* %143 to <32 x i8>*
  %145 = load <32 x i8>, <32 x i8>* %144, align 32
  %146 = shufflevector <32 x i8> %145, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %147 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %148 = bitcast <4 x i64>* %147 to <32 x i8>*
  %149 = load <32 x i8>, <32 x i8>* %148, align 32
  %150 = shufflevector <32 x i8> %149, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %151 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %152 = bitcast <4 x i64>* %151 to <32 x i8>*
  %153 = load <32 x i8>, <32 x i8>* %152, align 32
  %154 = shufflevector <32 x i8> %153, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %155 = bitcast <32 x i8> %142 to <8 x i32>
  %156 = bitcast <4 x i64> %140 to <8 x i32>
  %157 = add <8 x i32> %155, %156
  %158 = bitcast <8 x i32> %157 to <4 x i64>
  %159 = bitcast <32 x i8> %145 to <8 x i32>
  %160 = bitcast <32 x i8> %146 to <8 x i32>
  %161 = add <8 x i32> %160, %159
  %162 = bitcast <32 x i8> %149 to <8 x i32>
  %163 = bitcast <32 x i8> %150 to <8 x i32>
  %164 = add <8 x i32> %163, %162
  %165 = bitcast <8 x i32> %164 to <4 x i64>
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = add <8 x i32> %167, %166
  %169 = and <4 x i64> %158, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %170 = and <4 x i64> %165, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %171 = bitcast <8 x i32> %161 to <32 x i8>
  %172 = and <32 x i8> %171, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %173 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %172, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %174 = bitcast <32 x i8> %173 to <4 x i64>
  %175 = bitcast <8 x i32> %168 to <32 x i8>
  %176 = and <32 x i8> %175, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %177 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %176, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %178 = bitcast <32 x i8> %177 to <4 x i64>
  %179 = or <4 x i64> %169, %174
  %180 = or <4 x i64> %170, %178
  %181 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %182 = shufflevector <4 x i64> %179, <4 x i64> %180, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %183 = bitcast <4 x i64> %181 to <8 x i32>
  %184 = bitcast <4 x i64> %182 to <8 x i32>
  %185 = add <8 x i32> %184, %183
  %186 = bitcast <8 x i32> %185 to <4 x i64>
  %187 = shufflevector <8 x i32> %185, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %188 = shufflevector <4 x i64> %186, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %189 = bitcast <2 x i64> %188 to <4 x i32>
  %190 = add <4 x i32> %187, %189
  %191 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %191, align 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_16x8x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 0
  %13 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 1
  %14 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 2
  %15 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 3
  %16 = ptrtoint i8* %0 to i64
  %17 = shl i64 %16, 1
  %18 = inttoptr i64 %17 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %19 = bitcast i8** %2 to <4 x i64>*
  %20 = load <4 x i64>, <4 x i64>* %19, align 8
  %21 = shl <4 x i64> %20, <i64 1, i64 1, i64 1, i64 1>
  %22 = inttoptr <4 x i64> %21 to <4 x i16*>
  store <4 x i16*> %22, <4 x i16*>* %7, align 16
  %23 = sext i32 %8 to i64
  %24 = shl nsw i32 %1, 2
  %25 = sext i32 %24 to i64
  %26 = mul nsw i32 %1, 6
  %27 = sext i32 %26 to i64
  %28 = sext i32 %9 to i64
  %29 = shl nsw i32 %3, 2
  %30 = sext i32 %29 to i64
  %31 = mul nsw i32 %3, 6
  %32 = sext i32 %31 to i64
  %33 = shl i32 %3, 3
  %34 = sext i32 %33 to i64
  %35 = inttoptr i64 %17 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %18, i64 %23
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %18, i64 %25
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %18, i64 %27
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %43 = bitcast [4 x <4 x i64>]* %6 to <8 x i32>*
  %44 = load <16 x i16>, <16 x i16>* %35, align 2
  %45 = load <16 x i16>, <16 x i16>* %37, align 2
  %46 = load <16 x i16>, <16 x i16>* %39, align 2
  %47 = load <16 x i16>, <16 x i16>* %41, align 2
  %48 = extractelement <4 x i64> %21, i32 0
  %49 = inttoptr i64 %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 2
  %51 = extractelement <4 x i16*> %22, i32 0
  %52 = getelementptr inbounds i16, i16* %51, i64 %28
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 2
  %55 = getelementptr inbounds i16, i16* %51, i64 %30
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 2
  %58 = getelementptr inbounds i16, i16* %51, i64 %32
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 2
  %61 = sub <16 x i16> %44, %50
  %62 = sub <16 x i16> zeroinitializer, %61
  %63 = icmp slt <16 x i16> %61, zeroinitializer
  %64 = select <16 x i1> %63, <16 x i16> %62, <16 x i16> %61
  %65 = sub <16 x i16> %45, %54
  %66 = sub <16 x i16> zeroinitializer, %65
  %67 = icmp slt <16 x i16> %65, zeroinitializer
  %68 = select <16 x i1> %67, <16 x i16> %66, <16 x i16> %65
  %69 = sub <16 x i16> %46, %57
  %70 = sub <16 x i16> zeroinitializer, %69
  %71 = icmp slt <16 x i16> %69, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i16> %70, <16 x i16> %69
  %73 = sub <16 x i16> %47, %60
  %74 = sub <16 x i16> zeroinitializer, %73
  %75 = icmp slt <16 x i16> %73, zeroinitializer
  %76 = select <16 x i1> %75, <16 x i16> %74, <16 x i16> %73
  %77 = add <16 x i16> %68, %64
  %78 = add <16 x i16> %77, %72
  %79 = add <16 x i16> %78, %76
  %80 = shufflevector <16 x i16> %79, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %81 = shufflevector <16 x i16> %79, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %82 = bitcast <16 x i16> %80 to <8 x i32>
  %83 = bitcast <16 x i16> %81 to <8 x i32>
  %84 = add <8 x i32> %82, %83
  store <8 x i32> %84, <8 x i32>* %43, align 32
  %85 = getelementptr inbounds i16, i16* %51, i64 %34
  store i16* %85, i16** %12, align 16
  %86 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %87 = bitcast <4 x i64>* %86 to <8 x i32>*
  %88 = load <16 x i16>, <16 x i16>* %35, align 2
  %89 = load <16 x i16>, <16 x i16>* %37, align 2
  %90 = load <16 x i16>, <16 x i16>* %39, align 2
  %91 = load <16 x i16>, <16 x i16>* %41, align 2
  %92 = extractelement <4 x i64> %21, i32 1
  %93 = inttoptr i64 %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 2
  %95 = extractelement <4 x i16*> %22, i32 1
  %96 = getelementptr inbounds i16, i16* %95, i64 %28
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 2
  %99 = getelementptr inbounds i16, i16* %95, i64 %30
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 2
  %102 = getelementptr inbounds i16, i16* %95, i64 %32
  %103 = bitcast i16* %102 to <16 x i16>*
  %104 = load <16 x i16>, <16 x i16>* %103, align 2
  %105 = sub <16 x i16> %88, %94
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %89, %98
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %90, %101
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %91, %104
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = add <16 x i16> %112, %108
  %122 = add <16 x i16> %121, %116
  %123 = add <16 x i16> %122, %120
  %124 = shufflevector <16 x i16> %123, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %125 = shufflevector <16 x i16> %123, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = bitcast <16 x i16> %124 to <8 x i32>
  %127 = bitcast <16 x i16> %125 to <8 x i32>
  %128 = add <8 x i32> %126, %127
  store <8 x i32> %128, <8 x i32>* %87, align 32
  %129 = getelementptr inbounds i16, i16* %95, i64 %34
  store i16* %129, i16** %13, align 8
  %130 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %131 = bitcast <4 x i64>* %130 to <8 x i32>*
  %132 = load i16*, i16** %14, align 16
  %133 = load <8 x i32>, <8 x i32>* %131, align 32
  %134 = load <16 x i16>, <16 x i16>* %35, align 2
  %135 = load <16 x i16>, <16 x i16>* %37, align 2
  %136 = load <16 x i16>, <16 x i16>* %39, align 2
  %137 = load <16 x i16>, <16 x i16>* %41, align 2
  %138 = bitcast i16* %132 to <16 x i16>*
  %139 = load <16 x i16>, <16 x i16>* %138, align 1
  %140 = getelementptr inbounds i16, i16* %132, i64 %28
  %141 = bitcast i16* %140 to <16 x i16>*
  %142 = load <16 x i16>, <16 x i16>* %141, align 1
  %143 = getelementptr inbounds i16, i16* %132, i64 %30
  %144 = bitcast i16* %143 to <16 x i16>*
  %145 = load <16 x i16>, <16 x i16>* %144, align 1
  %146 = getelementptr inbounds i16, i16* %132, i64 %32
  %147 = bitcast i16* %146 to <16 x i16>*
  %148 = load <16 x i16>, <16 x i16>* %147, align 1
  %149 = sub <16 x i16> %134, %139
  %150 = sub <16 x i16> zeroinitializer, %149
  %151 = icmp slt <16 x i16> %149, zeroinitializer
  %152 = select <16 x i1> %151, <16 x i16> %150, <16 x i16> %149
  %153 = sub <16 x i16> %135, %142
  %154 = sub <16 x i16> zeroinitializer, %153
  %155 = icmp slt <16 x i16> %153, zeroinitializer
  %156 = select <16 x i1> %155, <16 x i16> %154, <16 x i16> %153
  %157 = sub <16 x i16> %136, %145
  %158 = sub <16 x i16> zeroinitializer, %157
  %159 = icmp slt <16 x i16> %157, zeroinitializer
  %160 = select <16 x i1> %159, <16 x i16> %158, <16 x i16> %157
  %161 = sub <16 x i16> %137, %148
  %162 = sub <16 x i16> zeroinitializer, %161
  %163 = icmp slt <16 x i16> %161, zeroinitializer
  %164 = select <16 x i1> %163, <16 x i16> %162, <16 x i16> %161
  %165 = add <16 x i16> %156, %152
  %166 = add <16 x i16> %165, %160
  %167 = add <16 x i16> %166, %164
  %168 = shufflevector <16 x i16> %167, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %169 = shufflevector <16 x i16> %167, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %170 = bitcast <16 x i16> %168 to <8 x i32>
  %171 = bitcast <16 x i16> %169 to <8 x i32>
  %172 = add <8 x i32> %133, %170
  %173 = add <8 x i32> %172, %171
  store <8 x i32> %173, <8 x i32>* %131, align 32
  %174 = getelementptr inbounds i16, i16* %132, i64 %34
  store i16* %174, i16** %14, align 16
  %175 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %176 = bitcast <4 x i64>* %175 to <8 x i32>*
  %177 = load i16*, i16** %15, align 8
  %178 = load <8 x i32>, <8 x i32>* %176, align 32
  %179 = load <16 x i16>, <16 x i16>* %35, align 2
  %180 = load <16 x i16>, <16 x i16>* %37, align 2
  %181 = load <16 x i16>, <16 x i16>* %39, align 2
  %182 = load <16 x i16>, <16 x i16>* %41, align 2
  %183 = bitcast i16* %177 to <16 x i16>*
  %184 = load <16 x i16>, <16 x i16>* %183, align 1
  %185 = getelementptr inbounds i16, i16* %177, i64 %28
  %186 = bitcast i16* %185 to <16 x i16>*
  %187 = load <16 x i16>, <16 x i16>* %186, align 1
  %188 = getelementptr inbounds i16, i16* %177, i64 %30
  %189 = bitcast i16* %188 to <16 x i16>*
  %190 = load <16 x i16>, <16 x i16>* %189, align 1
  %191 = getelementptr inbounds i16, i16* %177, i64 %32
  %192 = bitcast i16* %191 to <16 x i16>*
  %193 = load <16 x i16>, <16 x i16>* %192, align 1
  %194 = sub <16 x i16> %179, %184
  %195 = sub <16 x i16> zeroinitializer, %194
  %196 = icmp slt <16 x i16> %194, zeroinitializer
  %197 = select <16 x i1> %196, <16 x i16> %195, <16 x i16> %194
  %198 = sub <16 x i16> %180, %187
  %199 = sub <16 x i16> zeroinitializer, %198
  %200 = icmp slt <16 x i16> %198, zeroinitializer
  %201 = select <16 x i1> %200, <16 x i16> %199, <16 x i16> %198
  %202 = sub <16 x i16> %181, %190
  %203 = sub <16 x i16> zeroinitializer, %202
  %204 = icmp slt <16 x i16> %202, zeroinitializer
  %205 = select <16 x i1> %204, <16 x i16> %203, <16 x i16> %202
  %206 = sub <16 x i16> %182, %193
  %207 = sub <16 x i16> zeroinitializer, %206
  %208 = icmp slt <16 x i16> %206, zeroinitializer
  %209 = select <16 x i1> %208, <16 x i16> %207, <16 x i16> %206
  %210 = add <16 x i16> %201, %197
  %211 = add <16 x i16> %210, %205
  %212 = add <16 x i16> %211, %209
  %213 = shufflevector <16 x i16> %212, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %214 = shufflevector <16 x i16> %212, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %215 = bitcast <16 x i16> %213 to <8 x i32>
  %216 = bitcast <16 x i16> %214 to <8 x i32>
  %217 = add <8 x i32> %178, %215
  %218 = add <8 x i32> %217, %216
  store <8 x i32> %218, <8 x i32>* %176, align 32
  %219 = load <4 x i64>, <4 x i64>* %42, align 32
  %220 = bitcast <4 x i64> %219 to <32 x i8>
  %221 = shufflevector <32 x i8> %220, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %222 = bitcast <4 x i64>* %86 to <32 x i8>*
  %223 = load <32 x i8>, <32 x i8>* %222, align 32
  %224 = shufflevector <32 x i8> %223, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %225 = bitcast <8 x i32> %173 to <32 x i8>
  %226 = shufflevector <32 x i8> %225, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %227 = bitcast <8 x i32> %218 to <32 x i8>
  %228 = shufflevector <32 x i8> %227, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %229 = bitcast <32 x i8> %221 to <8 x i32>
  %230 = bitcast <4 x i64> %219 to <8 x i32>
  %231 = add <8 x i32> %229, %230
  %232 = bitcast <8 x i32> %231 to <4 x i64>
  %233 = bitcast <32 x i8> %223 to <8 x i32>
  %234 = bitcast <32 x i8> %224 to <8 x i32>
  %235 = add <8 x i32> %234, %233
  %236 = bitcast <32 x i8> %226 to <8 x i32>
  %237 = add <8 x i32> %173, %236
  %238 = bitcast <8 x i32> %237 to <4 x i64>
  %239 = bitcast <32 x i8> %228 to <8 x i32>
  %240 = add <8 x i32> %218, %239
  %241 = and <4 x i64> %232, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %242 = and <4 x i64> %238, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %243 = bitcast <8 x i32> %235 to <32 x i8>
  %244 = and <32 x i8> %243, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %245 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %244, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %246 = bitcast <32 x i8> %245 to <4 x i64>
  %247 = bitcast <8 x i32> %240 to <32 x i8>
  %248 = and <32 x i8> %247, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %249 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %248, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %250 = bitcast <32 x i8> %249 to <4 x i64>
  %251 = or <4 x i64> %241, %246
  %252 = or <4 x i64> %242, %250
  %253 = shufflevector <4 x i64> %251, <4 x i64> %252, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %254 = shufflevector <4 x i64> %251, <4 x i64> %252, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %255 = bitcast <4 x i64> %253 to <8 x i32>
  %256 = bitcast <4 x i64> %254 to <8 x i32>
  %257 = add <8 x i32> %256, %255
  %258 = bitcast <8 x i32> %257 to <4 x i64>
  %259 = shufflevector <8 x i32> %257, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %260 = shufflevector <4 x i64> %258, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %261 = bitcast <2 x i64> %260 to <4 x i32>
  %262 = add <4 x i32> %259, %261
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %263 = shl <4 x i32> %262, <i32 1, i32 1, i32 1, i32 1>
  %264 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %263, <4 x i32>* %264, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_16x16x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = shl nsw i32 %1, 2
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %1, 6
  %23 = sext i32 %22 to i64
  %24 = sext i32 %9 to i64
  %25 = shl nsw i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %3, 6
  %28 = sext i32 %27 to i64
  %29 = shl i32 %1, 3
  %30 = sext i32 %29 to i64
  %31 = shl i32 %3, 3
  %32 = sext i32 %31 to i64
  %33 = inttoptr i64 %13 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %14, i64 %19
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %14, i64 %21
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %14, i64 %23
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %14, i64 %30
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds i16, i16* %40, i64 %19
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = getelementptr inbounds i16, i16* %40, i64 %21
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = getelementptr inbounds i16, i16* %40, i64 %23
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = extractelement <4 x i16*> %18, i32 0
  br label %49

49:                                               ; preds = %140, %5
  %50 = phi i16* [ %48, %5 ], [ %142, %140 ]
  %51 = phi i64 [ 0, %5 ], [ %138, %140 ]
  %52 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %51
  %53 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %51
  %54 = bitcast <4 x i64>* %53 to <8 x i32>*
  %55 = load <8 x i32>, <8 x i32>* %54, align 32
  %56 = load <16 x i16>, <16 x i16>* %33, align 2
  %57 = load <16 x i16>, <16 x i16>* %35, align 2
  %58 = load <16 x i16>, <16 x i16>* %37, align 2
  %59 = load <16 x i16>, <16 x i16>* %39, align 2
  %60 = bitcast i16* %50 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = getelementptr inbounds i16, i16* %50, i64 %24
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = getelementptr inbounds i16, i16* %50, i64 %26
  %66 = bitcast i16* %65 to <16 x i16>*
  %67 = load <16 x i16>, <16 x i16>* %66, align 1
  %68 = getelementptr inbounds i16, i16* %50, i64 %28
  %69 = bitcast i16* %68 to <16 x i16>*
  %70 = load <16 x i16>, <16 x i16>* %69, align 1
  %71 = sub <16 x i16> %56, %61
  %72 = sub <16 x i16> zeroinitializer, %71
  %73 = icmp slt <16 x i16> %71, zeroinitializer
  %74 = select <16 x i1> %73, <16 x i16> %72, <16 x i16> %71
  %75 = sub <16 x i16> %57, %64
  %76 = sub <16 x i16> zeroinitializer, %75
  %77 = icmp slt <16 x i16> %75, zeroinitializer
  %78 = select <16 x i1> %77, <16 x i16> %76, <16 x i16> %75
  %79 = sub <16 x i16> %58, %67
  %80 = sub <16 x i16> zeroinitializer, %79
  %81 = icmp slt <16 x i16> %79, zeroinitializer
  %82 = select <16 x i1> %81, <16 x i16> %80, <16 x i16> %79
  %83 = sub <16 x i16> %59, %70
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = add <16 x i16> %78, %74
  %88 = add <16 x i16> %87, %82
  %89 = add <16 x i16> %88, %86
  %90 = shufflevector <16 x i16> %89, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %91 = shufflevector <16 x i16> %89, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %92 = bitcast <16 x i16> %90 to <8 x i32>
  %93 = bitcast <16 x i16> %91 to <8 x i32>
  %94 = add <8 x i32> %55, %92
  %95 = add <8 x i32> %94, %93
  store <8 x i32> %95, <8 x i32>* %54, align 32
  %96 = getelementptr inbounds i16, i16* %50, i64 %32
  store i16* %96, i16** %52, align 8
  %97 = load <16 x i16>, <16 x i16>* %41, align 2
  %98 = load <16 x i16>, <16 x i16>* %43, align 2
  %99 = load <16 x i16>, <16 x i16>* %45, align 2
  %100 = load <16 x i16>, <16 x i16>* %47, align 2
  %101 = bitcast i16* %96 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %96, i64 %24
  %104 = bitcast i16* %103 to <16 x i16>*
  %105 = load <16 x i16>, <16 x i16>* %104, align 1
  %106 = getelementptr inbounds i16, i16* %96, i64 %26
  %107 = bitcast i16* %106 to <16 x i16>*
  %108 = load <16 x i16>, <16 x i16>* %107, align 1
  %109 = getelementptr inbounds i16, i16* %96, i64 %28
  %110 = bitcast i16* %109 to <16 x i16>*
  %111 = load <16 x i16>, <16 x i16>* %110, align 1
  %112 = sub <16 x i16> %97, %102
  %113 = sub <16 x i16> zeroinitializer, %112
  %114 = icmp slt <16 x i16> %112, zeroinitializer
  %115 = select <16 x i1> %114, <16 x i16> %113, <16 x i16> %112
  %116 = sub <16 x i16> %98, %105
  %117 = sub <16 x i16> zeroinitializer, %116
  %118 = icmp slt <16 x i16> %116, zeroinitializer
  %119 = select <16 x i1> %118, <16 x i16> %117, <16 x i16> %116
  %120 = sub <16 x i16> %99, %108
  %121 = sub <16 x i16> zeroinitializer, %120
  %122 = icmp slt <16 x i16> %120, zeroinitializer
  %123 = select <16 x i1> %122, <16 x i16> %121, <16 x i16> %120
  %124 = sub <16 x i16> %100, %111
  %125 = sub <16 x i16> zeroinitializer, %124
  %126 = icmp slt <16 x i16> %124, zeroinitializer
  %127 = select <16 x i1> %126, <16 x i16> %125, <16 x i16> %124
  %128 = add <16 x i16> %119, %115
  %129 = add <16 x i16> %128, %123
  %130 = add <16 x i16> %129, %127
  %131 = shufflevector <16 x i16> %130, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %132 = shufflevector <16 x i16> %130, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %133 = bitcast <16 x i16> %131 to <8 x i32>
  %134 = bitcast <16 x i16> %132 to <8 x i32>
  %135 = add <8 x i32> %95, %133
  %136 = add <8 x i32> %135, %134
  store <8 x i32> %136, <8 x i32>* %54, align 32
  %137 = getelementptr inbounds i16, i16* %96, i64 %32
  store i16* %137, i16** %52, align 8
  %138 = add nuw nsw i64 %51, 1
  %139 = icmp eq i64 %138, 4
  br i1 %139, label %143, label %140

140:                                              ; preds = %49
  %141 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %138
  %142 = load i16*, i16** %141, align 8
  br label %49

143:                                              ; preds = %49
  %144 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %145 = load <4 x i64>, <4 x i64>* %144, align 32
  %146 = bitcast <4 x i64> %145 to <32 x i8>
  %147 = shufflevector <32 x i8> %146, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %148 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %149 = bitcast <4 x i64>* %148 to <32 x i8>*
  %150 = load <32 x i8>, <32 x i8>* %149, align 32
  %151 = shufflevector <32 x i8> %150, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %152 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %153 = bitcast <4 x i64>* %152 to <32 x i8>*
  %154 = load <32 x i8>, <32 x i8>* %153, align 32
  %155 = shufflevector <32 x i8> %154, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %156 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %157 = bitcast <4 x i64>* %156 to <32 x i8>*
  %158 = load <32 x i8>, <32 x i8>* %157, align 32
  %159 = shufflevector <32 x i8> %158, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %160 = bitcast <32 x i8> %147 to <8 x i32>
  %161 = bitcast <4 x i64> %145 to <8 x i32>
  %162 = add <8 x i32> %160, %161
  %163 = bitcast <8 x i32> %162 to <4 x i64>
  %164 = bitcast <32 x i8> %150 to <8 x i32>
  %165 = bitcast <32 x i8> %151 to <8 x i32>
  %166 = add <8 x i32> %165, %164
  %167 = bitcast <32 x i8> %154 to <8 x i32>
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = add <8 x i32> %168, %167
  %170 = bitcast <8 x i32> %169 to <4 x i64>
  %171 = bitcast <32 x i8> %158 to <8 x i32>
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = add <8 x i32> %172, %171
  %174 = and <4 x i64> %163, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %175 = and <4 x i64> %170, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %176 = bitcast <8 x i32> %166 to <32 x i8>
  %177 = and <32 x i8> %176, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %178 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %177, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %179 = bitcast <32 x i8> %178 to <4 x i64>
  %180 = bitcast <8 x i32> %173 to <32 x i8>
  %181 = and <32 x i8> %180, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %182 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %181, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %183 = bitcast <32 x i8> %182 to <4 x i64>
  %184 = or <4 x i64> %174, %179
  %185 = or <4 x i64> %175, %183
  %186 = shufflevector <4 x i64> %184, <4 x i64> %185, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %187 = shufflevector <4 x i64> %184, <4 x i64> %185, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %188 = bitcast <4 x i64> %186 to <8 x i32>
  %189 = bitcast <4 x i64> %187 to <8 x i32>
  %190 = add <8 x i32> %189, %188
  %191 = bitcast <8 x i32> %190 to <4 x i64>
  %192 = shufflevector <8 x i32> %190, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %193 = shufflevector <4 x i64> %191, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %194 = bitcast <2 x i64> %193 to <4 x i32>
  %195 = add <4 x i32> %192, %194
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %196 = shl <4 x i32> %195, <i32 1, i32 1, i32 1, i32 1>
  %197 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %197, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_16x32x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = shl nsw i32 %1, 2
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %1, 6
  %23 = sext i32 %22 to i64
  %24 = sext i32 %9 to i64
  %25 = shl nsw i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %3, 6
  %28 = sext i32 %27 to i64
  %29 = shl i32 %1, 3
  %30 = sext i32 %29 to i64
  %31 = shl i32 %3, 3
  %32 = sext i32 %31 to i64
  %33 = inttoptr i64 %13 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %14, i64 %19
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %14, i64 %21
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %14, i64 %23
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %14, i64 %30
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds i16, i16* %40, i64 %19
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = getelementptr inbounds i16, i16* %40, i64 %21
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = getelementptr inbounds i16, i16* %40, i64 %23
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = getelementptr inbounds i16, i16* %40, i64 %30
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = getelementptr inbounds i16, i16* %48, i64 %19
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = getelementptr inbounds i16, i16* %48, i64 %21
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = getelementptr inbounds i16, i16* %48, i64 %23
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = getelementptr inbounds i16, i16* %48, i64 %30
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = getelementptr inbounds i16, i16* %56, i64 %19
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = getelementptr inbounds i16, i16* %56, i64 %21
  %61 = bitcast i16* %60 to <16 x i16>*
  %62 = getelementptr inbounds i16, i16* %56, i64 %23
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = extractelement <4 x i16*> %18, i32 0
  br label %65

65:                                               ; preds = %238, %5
  %66 = phi i16* [ %64, %5 ], [ %240, %238 ]
  %67 = phi i64 [ 0, %5 ], [ %236, %238 ]
  %68 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %67
  %69 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %67
  %70 = bitcast <4 x i64>* %69 to <8 x i32>*
  %71 = load <8 x i32>, <8 x i32>* %70, align 32
  %72 = load <16 x i16>, <16 x i16>* %33, align 2
  %73 = load <16 x i16>, <16 x i16>* %35, align 2
  %74 = load <16 x i16>, <16 x i16>* %37, align 2
  %75 = load <16 x i16>, <16 x i16>* %39, align 2
  %76 = bitcast i16* %66 to <16 x i16>*
  %77 = load <16 x i16>, <16 x i16>* %76, align 1
  %78 = getelementptr inbounds i16, i16* %66, i64 %24
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %66, i64 %26
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %66, i64 %28
  %85 = bitcast i16* %84 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = sub <16 x i16> %72, %77
  %88 = sub <16 x i16> zeroinitializer, %87
  %89 = icmp slt <16 x i16> %87, zeroinitializer
  %90 = select <16 x i1> %89, <16 x i16> %88, <16 x i16> %87
  %91 = sub <16 x i16> %73, %80
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = sub <16 x i16> %74, %83
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = sub <16 x i16> %75, %86
  %100 = sub <16 x i16> zeroinitializer, %99
  %101 = icmp slt <16 x i16> %99, zeroinitializer
  %102 = select <16 x i1> %101, <16 x i16> %100, <16 x i16> %99
  %103 = add <16 x i16> %94, %90
  %104 = add <16 x i16> %103, %98
  %105 = add <16 x i16> %104, %102
  %106 = shufflevector <16 x i16> %105, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %107 = shufflevector <16 x i16> %105, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %108 = bitcast <16 x i16> %106 to <8 x i32>
  %109 = bitcast <16 x i16> %107 to <8 x i32>
  %110 = add <8 x i32> %71, %108
  %111 = add <8 x i32> %110, %109
  store <8 x i32> %111, <8 x i32>* %70, align 32
  %112 = getelementptr inbounds i16, i16* %66, i64 %32
  store i16* %112, i16** %68, align 8
  %113 = load <16 x i16>, <16 x i16>* %41, align 2
  %114 = load <16 x i16>, <16 x i16>* %43, align 2
  %115 = load <16 x i16>, <16 x i16>* %45, align 2
  %116 = load <16 x i16>, <16 x i16>* %47, align 2
  %117 = bitcast i16* %112 to <16 x i16>*
  %118 = load <16 x i16>, <16 x i16>* %117, align 1
  %119 = getelementptr inbounds i16, i16* %112, i64 %24
  %120 = bitcast i16* %119 to <16 x i16>*
  %121 = load <16 x i16>, <16 x i16>* %120, align 1
  %122 = getelementptr inbounds i16, i16* %112, i64 %26
  %123 = bitcast i16* %122 to <16 x i16>*
  %124 = load <16 x i16>, <16 x i16>* %123, align 1
  %125 = getelementptr inbounds i16, i16* %112, i64 %28
  %126 = bitcast i16* %125 to <16 x i16>*
  %127 = load <16 x i16>, <16 x i16>* %126, align 1
  %128 = sub <16 x i16> %113, %118
  %129 = sub <16 x i16> zeroinitializer, %128
  %130 = icmp slt <16 x i16> %128, zeroinitializer
  %131 = select <16 x i1> %130, <16 x i16> %129, <16 x i16> %128
  %132 = sub <16 x i16> %114, %121
  %133 = sub <16 x i16> zeroinitializer, %132
  %134 = icmp slt <16 x i16> %132, zeroinitializer
  %135 = select <16 x i1> %134, <16 x i16> %133, <16 x i16> %132
  %136 = sub <16 x i16> %115, %124
  %137 = sub <16 x i16> zeroinitializer, %136
  %138 = icmp slt <16 x i16> %136, zeroinitializer
  %139 = select <16 x i1> %138, <16 x i16> %137, <16 x i16> %136
  %140 = sub <16 x i16> %116, %127
  %141 = sub <16 x i16> zeroinitializer, %140
  %142 = icmp slt <16 x i16> %140, zeroinitializer
  %143 = select <16 x i1> %142, <16 x i16> %141, <16 x i16> %140
  %144 = add <16 x i16> %135, %131
  %145 = add <16 x i16> %144, %139
  %146 = add <16 x i16> %145, %143
  %147 = shufflevector <16 x i16> %146, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %148 = shufflevector <16 x i16> %146, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %149 = bitcast <16 x i16> %147 to <8 x i32>
  %150 = bitcast <16 x i16> %148 to <8 x i32>
  %151 = add <8 x i32> %111, %149
  %152 = add <8 x i32> %151, %150
  store <8 x i32> %152, <8 x i32>* %70, align 32
  %153 = getelementptr inbounds i16, i16* %112, i64 %32
  store i16* %153, i16** %68, align 8
  %154 = load <16 x i16>, <16 x i16>* %49, align 2
  %155 = load <16 x i16>, <16 x i16>* %51, align 2
  %156 = load <16 x i16>, <16 x i16>* %53, align 2
  %157 = load <16 x i16>, <16 x i16>* %55, align 2
  %158 = bitcast i16* %153 to <16 x i16>*
  %159 = load <16 x i16>, <16 x i16>* %158, align 1
  %160 = getelementptr inbounds i16, i16* %153, i64 %24
  %161 = bitcast i16* %160 to <16 x i16>*
  %162 = load <16 x i16>, <16 x i16>* %161, align 1
  %163 = getelementptr inbounds i16, i16* %153, i64 %26
  %164 = bitcast i16* %163 to <16 x i16>*
  %165 = load <16 x i16>, <16 x i16>* %164, align 1
  %166 = getelementptr inbounds i16, i16* %153, i64 %28
  %167 = bitcast i16* %166 to <16 x i16>*
  %168 = load <16 x i16>, <16 x i16>* %167, align 1
  %169 = sub <16 x i16> %154, %159
  %170 = sub <16 x i16> zeroinitializer, %169
  %171 = icmp slt <16 x i16> %169, zeroinitializer
  %172 = select <16 x i1> %171, <16 x i16> %170, <16 x i16> %169
  %173 = sub <16 x i16> %155, %162
  %174 = sub <16 x i16> zeroinitializer, %173
  %175 = icmp slt <16 x i16> %173, zeroinitializer
  %176 = select <16 x i1> %175, <16 x i16> %174, <16 x i16> %173
  %177 = sub <16 x i16> %156, %165
  %178 = sub <16 x i16> zeroinitializer, %177
  %179 = icmp slt <16 x i16> %177, zeroinitializer
  %180 = select <16 x i1> %179, <16 x i16> %178, <16 x i16> %177
  %181 = sub <16 x i16> %157, %168
  %182 = sub <16 x i16> zeroinitializer, %181
  %183 = icmp slt <16 x i16> %181, zeroinitializer
  %184 = select <16 x i1> %183, <16 x i16> %182, <16 x i16> %181
  %185 = add <16 x i16> %176, %172
  %186 = add <16 x i16> %185, %180
  %187 = add <16 x i16> %186, %184
  %188 = shufflevector <16 x i16> %187, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %189 = shufflevector <16 x i16> %187, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %190 = bitcast <16 x i16> %188 to <8 x i32>
  %191 = bitcast <16 x i16> %189 to <8 x i32>
  %192 = add <8 x i32> %152, %190
  %193 = add <8 x i32> %192, %191
  store <8 x i32> %193, <8 x i32>* %70, align 32
  %194 = getelementptr inbounds i16, i16* %153, i64 %32
  store i16* %194, i16** %68, align 8
  %195 = load <16 x i16>, <16 x i16>* %57, align 2
  %196 = load <16 x i16>, <16 x i16>* %59, align 1
  %197 = load <16 x i16>, <16 x i16>* %61, align 1
  %198 = load <16 x i16>, <16 x i16>* %63, align 1
  %199 = bitcast i16* %194 to <16 x i16>*
  %200 = load <16 x i16>, <16 x i16>* %199, align 1
  %201 = getelementptr inbounds i16, i16* %194, i64 %24
  %202 = bitcast i16* %201 to <16 x i16>*
  %203 = load <16 x i16>, <16 x i16>* %202, align 1
  %204 = getelementptr inbounds i16, i16* %194, i64 %26
  %205 = bitcast i16* %204 to <16 x i16>*
  %206 = load <16 x i16>, <16 x i16>* %205, align 1
  %207 = getelementptr inbounds i16, i16* %194, i64 %28
  %208 = bitcast i16* %207 to <16 x i16>*
  %209 = load <16 x i16>, <16 x i16>* %208, align 1
  %210 = sub <16 x i16> %195, %200
  %211 = sub <16 x i16> zeroinitializer, %210
  %212 = icmp slt <16 x i16> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %210
  %214 = sub <16 x i16> %196, %203
  %215 = sub <16 x i16> zeroinitializer, %214
  %216 = icmp slt <16 x i16> %214, zeroinitializer
  %217 = select <16 x i1> %216, <16 x i16> %215, <16 x i16> %214
  %218 = sub <16 x i16> %197, %206
  %219 = sub <16 x i16> zeroinitializer, %218
  %220 = icmp slt <16 x i16> %218, zeroinitializer
  %221 = select <16 x i1> %220, <16 x i16> %219, <16 x i16> %218
  %222 = sub <16 x i16> %198, %209
  %223 = sub <16 x i16> zeroinitializer, %222
  %224 = icmp slt <16 x i16> %222, zeroinitializer
  %225 = select <16 x i1> %224, <16 x i16> %223, <16 x i16> %222
  %226 = add <16 x i16> %217, %213
  %227 = add <16 x i16> %226, %221
  %228 = add <16 x i16> %227, %225
  %229 = shufflevector <16 x i16> %228, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %230 = shufflevector <16 x i16> %228, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %231 = bitcast <16 x i16> %229 to <8 x i32>
  %232 = bitcast <16 x i16> %230 to <8 x i32>
  %233 = add <8 x i32> %193, %231
  %234 = add <8 x i32> %233, %232
  store <8 x i32> %234, <8 x i32>* %70, align 32
  %235 = getelementptr inbounds i16, i16* %194, i64 %32
  store i16* %235, i16** %68, align 8
  %236 = add nuw nsw i64 %67, 1
  %237 = icmp eq i64 %236, 4
  br i1 %237, label %241, label %238

238:                                              ; preds = %65
  %239 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %236
  %240 = load i16*, i16** %239, align 8
  br label %65

241:                                              ; preds = %65
  %242 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %243 = load <4 x i64>, <4 x i64>* %242, align 32
  %244 = bitcast <4 x i64> %243 to <32 x i8>
  %245 = shufflevector <32 x i8> %244, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %246 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %247 = bitcast <4 x i64>* %246 to <32 x i8>*
  %248 = load <32 x i8>, <32 x i8>* %247, align 32
  %249 = shufflevector <32 x i8> %248, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %250 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %251 = bitcast <4 x i64>* %250 to <32 x i8>*
  %252 = load <32 x i8>, <32 x i8>* %251, align 32
  %253 = shufflevector <32 x i8> %252, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %254 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %255 = bitcast <4 x i64>* %254 to <32 x i8>*
  %256 = load <32 x i8>, <32 x i8>* %255, align 32
  %257 = shufflevector <32 x i8> %256, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %258 = bitcast <32 x i8> %245 to <8 x i32>
  %259 = bitcast <4 x i64> %243 to <8 x i32>
  %260 = add <8 x i32> %258, %259
  %261 = bitcast <8 x i32> %260 to <4 x i64>
  %262 = bitcast <32 x i8> %248 to <8 x i32>
  %263 = bitcast <32 x i8> %249 to <8 x i32>
  %264 = add <8 x i32> %263, %262
  %265 = bitcast <32 x i8> %252 to <8 x i32>
  %266 = bitcast <32 x i8> %253 to <8 x i32>
  %267 = add <8 x i32> %266, %265
  %268 = bitcast <8 x i32> %267 to <4 x i64>
  %269 = bitcast <32 x i8> %256 to <8 x i32>
  %270 = bitcast <32 x i8> %257 to <8 x i32>
  %271 = add <8 x i32> %270, %269
  %272 = and <4 x i64> %261, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %273 = and <4 x i64> %268, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %274 = bitcast <8 x i32> %264 to <32 x i8>
  %275 = and <32 x i8> %274, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %276 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %275, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %277 = bitcast <32 x i8> %276 to <4 x i64>
  %278 = bitcast <8 x i32> %271 to <32 x i8>
  %279 = and <32 x i8> %278, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %280 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %279, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %281 = bitcast <32 x i8> %280 to <4 x i64>
  %282 = or <4 x i64> %272, %277
  %283 = or <4 x i64> %273, %281
  %284 = shufflevector <4 x i64> %282, <4 x i64> %283, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %285 = shufflevector <4 x i64> %282, <4 x i64> %283, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %286 = bitcast <4 x i64> %284 to <8 x i32>
  %287 = bitcast <4 x i64> %285 to <8 x i32>
  %288 = add <8 x i32> %287, %286
  %289 = bitcast <8 x i32> %288 to <4 x i64>
  %290 = shufflevector <8 x i32> %288, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %291 = shufflevector <4 x i64> %289, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %292 = bitcast <2 x i64> %291 to <4 x i32>
  %293 = add <4 x i32> %290, %292
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %294 = shl <4 x i32> %293, <i32 1, i32 1, i32 1, i32 1>
  %295 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %294, <4 x i32>* %295, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_16x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = shl nsw i32 %1, 2
  %21 = sext i32 %20 to i64
  %22 = mul nsw i32 %1, 6
  %23 = sext i32 %22 to i64
  %24 = sext i32 %9 to i64
  %25 = shl nsw i32 %3, 2
  %26 = sext i32 %25 to i64
  %27 = mul nsw i32 %3, 6
  %28 = sext i32 %27 to i64
  %29 = shl i32 %1, 3
  %30 = sext i32 %29 to i64
  %31 = shl i32 %3, 3
  %32 = sext i32 %31 to i64
  %33 = extractelement <4 x i16*> %18, i32 0
  br label %34

34:                                               ; preds = %100, %5
  %35 = phi i16* [ %33, %5 ], [ %102, %100 ]
  %36 = phi i64 [ 0, %5 ], [ %98, %100 ]
  %37 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %36
  %38 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %36
  %39 = bitcast <4 x i64>* %38 to <8 x i32>*
  %40 = load <8 x i32>, <8 x i32>* %39, align 32
  br label %41

41:                                               ; preds = %41, %34
  %42 = phi <8 x i32> [ %40, %34 ], [ %92, %41 ]
  %43 = phi i16* [ %35, %34 ], [ %94, %41 ]
  %44 = phi i32 [ 0, %34 ], [ %95, %41 ]
  %45 = phi i16* [ %14, %34 ], [ %93, %41 ]
  %46 = bitcast i16* %45 to <16 x i16>*
  %47 = load <16 x i16>, <16 x i16>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %45, i64 %19
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %45, i64 %21
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = getelementptr inbounds i16, i16* %45, i64 %23
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = bitcast i16* %43 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %43, i64 %24
  %60 = bitcast i16* %59 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = getelementptr inbounds i16, i16* %43, i64 %26
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = getelementptr inbounds i16, i16* %43, i64 %28
  %66 = bitcast i16* %65 to <16 x i16>*
  %67 = load <16 x i16>, <16 x i16>* %66, align 1
  %68 = sub <16 x i16> %47, %58
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %50, %61
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = sub <16 x i16> %53, %64
  %77 = sub <16 x i16> zeroinitializer, %76
  %78 = icmp slt <16 x i16> %76, zeroinitializer
  %79 = select <16 x i1> %78, <16 x i16> %77, <16 x i16> %76
  %80 = sub <16 x i16> %56, %67
  %81 = sub <16 x i16> zeroinitializer, %80
  %82 = icmp slt <16 x i16> %80, zeroinitializer
  %83 = select <16 x i1> %82, <16 x i16> %81, <16 x i16> %80
  %84 = add <16 x i16> %75, %71
  %85 = add <16 x i16> %84, %79
  %86 = add <16 x i16> %85, %83
  %87 = shufflevector <16 x i16> %86, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %88 = shufflevector <16 x i16> %86, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %89 = bitcast <16 x i16> %87 to <8 x i32>
  %90 = bitcast <16 x i16> %88 to <8 x i32>
  %91 = add <8 x i32> %42, %89
  %92 = add <8 x i32> %91, %90
  store <8 x i32> %92, <8 x i32>* %39, align 32
  %93 = getelementptr inbounds i16, i16* %45, i64 %30
  %94 = getelementptr inbounds i16, i16* %43, i64 %32
  store i16* %94, i16** %37, align 8
  %95 = add nuw nsw i32 %44, 4
  %96 = icmp ult i32 %95, 32
  br i1 %96, label %41, label %97

97:                                               ; preds = %41
  %98 = add nuw nsw i64 %36, 1
  %99 = icmp eq i64 %98, 4
  br i1 %99, label %103, label %100

100:                                              ; preds = %97
  %101 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %98
  %102 = load i16*, i16** %101, align 8
  br label %34

103:                                              ; preds = %97
  %104 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %105 = load <4 x i64>, <4 x i64>* %104, align 32
  %106 = bitcast <4 x i64> %105 to <32 x i8>
  %107 = shufflevector <32 x i8> %106, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %108 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %109 = bitcast <4 x i64>* %108 to <32 x i8>*
  %110 = load <32 x i8>, <32 x i8>* %109, align 32
  %111 = shufflevector <32 x i8> %110, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %113 = bitcast <4 x i64>* %112 to <32 x i8>*
  %114 = load <32 x i8>, <32 x i8>* %113, align 32
  %115 = shufflevector <32 x i8> %114, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %116 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %117 = bitcast <4 x i64>* %116 to <32 x i8>*
  %118 = load <32 x i8>, <32 x i8>* %117, align 32
  %119 = shufflevector <32 x i8> %118, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %120 = bitcast <32 x i8> %107 to <8 x i32>
  %121 = bitcast <4 x i64> %105 to <8 x i32>
  %122 = add <8 x i32> %120, %121
  %123 = bitcast <8 x i32> %122 to <4 x i64>
  %124 = bitcast <32 x i8> %110 to <8 x i32>
  %125 = bitcast <32 x i8> %111 to <8 x i32>
  %126 = add <8 x i32> %125, %124
  %127 = bitcast <32 x i8> %114 to <8 x i32>
  %128 = bitcast <32 x i8> %115 to <8 x i32>
  %129 = add <8 x i32> %128, %127
  %130 = bitcast <8 x i32> %129 to <4 x i64>
  %131 = bitcast <32 x i8> %118 to <8 x i32>
  %132 = bitcast <32 x i8> %119 to <8 x i32>
  %133 = add <8 x i32> %132, %131
  %134 = and <4 x i64> %123, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %135 = and <4 x i64> %130, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %136 = bitcast <8 x i32> %126 to <32 x i8>
  %137 = and <32 x i8> %136, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %138 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %137, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %139 = bitcast <32 x i8> %138 to <4 x i64>
  %140 = bitcast <8 x i32> %133 to <32 x i8>
  %141 = and <32 x i8> %140, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %142 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %141, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %143 = bitcast <32 x i8> %142 to <4 x i64>
  %144 = or <4 x i64> %134, %139
  %145 = or <4 x i64> %135, %143
  %146 = shufflevector <4 x i64> %144, <4 x i64> %145, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %147 = shufflevector <4 x i64> %144, <4 x i64> %145, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %148 = bitcast <4 x i64> %146 to <8 x i32>
  %149 = bitcast <4 x i64> %147 to <8 x i32>
  %150 = add <8 x i32> %149, %148
  %151 = bitcast <8 x i32> %150 to <4 x i64>
  %152 = shufflevector <8 x i32> %150, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %153 = shufflevector <4 x i64> %151, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %154 = bitcast <2 x i64> %153 to <4 x i32>
  %155 = add <4 x i32> %152, %154
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %156 = shl <4 x i32> %155, <i32 1, i32 1, i32 1, i32 1>
  %157 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %157, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_32x8x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %3, 3
  %26 = sext i32 %25 to i64
  %27 = inttoptr i64 %13 to <16 x i16>*
  %28 = getelementptr inbounds i16, i16* %14, i64 16
  %29 = bitcast i16* %28 to <16 x i16>*
  %30 = getelementptr inbounds i16, i16* %14, i64 %19
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = getelementptr inbounds i16, i16* %30, i64 16
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %14, i64 %22
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %34, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %34, i64 %19
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %38, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = extractelement <4 x i16*> %18, i32 0
  br label %43

43:                                               ; preds = %134, %5
  %44 = phi i16* [ %42, %5 ], [ %136, %134 ]
  %45 = phi i64 [ 0, %5 ], [ %132, %134 ]
  %46 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %45
  %47 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %45
  %48 = bitcast <4 x i64>* %47 to <8 x i32>*
  %49 = load <8 x i32>, <8 x i32>* %48, align 32
  %50 = load <16 x i16>, <16 x i16>* %27, align 2
  %51 = load <16 x i16>, <16 x i16>* %29, align 2
  %52 = load <16 x i16>, <16 x i16>* %31, align 2
  %53 = load <16 x i16>, <16 x i16>* %33, align 2
  %54 = bitcast i16* %44 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %44, i64 16
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %44, i64 %20
  %60 = bitcast i16* %59 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = getelementptr inbounds i16, i16* %59, i64 16
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = sub <16 x i16> %50, %55
  %66 = sub <16 x i16> zeroinitializer, %65
  %67 = icmp slt <16 x i16> %65, zeroinitializer
  %68 = select <16 x i1> %67, <16 x i16> %66, <16 x i16> %65
  %69 = sub <16 x i16> %51, %58
  %70 = sub <16 x i16> zeroinitializer, %69
  %71 = icmp slt <16 x i16> %69, zeroinitializer
  %72 = select <16 x i1> %71, <16 x i16> %70, <16 x i16> %69
  %73 = sub <16 x i16> %52, %61
  %74 = sub <16 x i16> zeroinitializer, %73
  %75 = icmp slt <16 x i16> %73, zeroinitializer
  %76 = select <16 x i1> %75, <16 x i16> %74, <16 x i16> %73
  %77 = sub <16 x i16> %53, %64
  %78 = sub <16 x i16> zeroinitializer, %77
  %79 = icmp slt <16 x i16> %77, zeroinitializer
  %80 = select <16 x i1> %79, <16 x i16> %78, <16 x i16> %77
  %81 = add <16 x i16> %72, %68
  %82 = add <16 x i16> %81, %76
  %83 = add <16 x i16> %82, %80
  %84 = shufflevector <16 x i16> %83, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %85 = shufflevector <16 x i16> %83, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %86 = bitcast <16 x i16> %84 to <8 x i32>
  %87 = bitcast <16 x i16> %85 to <8 x i32>
  %88 = add <8 x i32> %49, %86
  %89 = add <8 x i32> %88, %87
  store <8 x i32> %89, <8 x i32>* %48, align 32
  %90 = getelementptr inbounds i16, i16* %44, i64 %24
  %91 = load <16 x i16>, <16 x i16>* %35, align 2
  %92 = load <16 x i16>, <16 x i16>* %37, align 2
  %93 = load <16 x i16>, <16 x i16>* %39, align 2
  %94 = load <16 x i16>, <16 x i16>* %41, align 2
  %95 = bitcast i16* %90 to <16 x i16>*
  %96 = load <16 x i16>, <16 x i16>* %95, align 1
  %97 = getelementptr inbounds i16, i16* %90, i64 16
  %98 = bitcast i16* %97 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %90, i64 %20
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %100, i64 16
  %104 = bitcast i16* %103 to <16 x i16>*
  %105 = load <16 x i16>, <16 x i16>* %104, align 1
  %106 = sub <16 x i16> %91, %96
  %107 = sub <16 x i16> zeroinitializer, %106
  %108 = icmp slt <16 x i16> %106, zeroinitializer
  %109 = select <16 x i1> %108, <16 x i16> %107, <16 x i16> %106
  %110 = sub <16 x i16> %92, %99
  %111 = sub <16 x i16> zeroinitializer, %110
  %112 = icmp slt <16 x i16> %110, zeroinitializer
  %113 = select <16 x i1> %112, <16 x i16> %111, <16 x i16> %110
  %114 = sub <16 x i16> %93, %102
  %115 = sub <16 x i16> zeroinitializer, %114
  %116 = icmp slt <16 x i16> %114, zeroinitializer
  %117 = select <16 x i1> %116, <16 x i16> %115, <16 x i16> %114
  %118 = sub <16 x i16> %94, %105
  %119 = sub <16 x i16> zeroinitializer, %118
  %120 = icmp slt <16 x i16> %118, zeroinitializer
  %121 = select <16 x i1> %120, <16 x i16> %119, <16 x i16> %118
  %122 = add <16 x i16> %113, %109
  %123 = add <16 x i16> %122, %117
  %124 = add <16 x i16> %123, %121
  %125 = shufflevector <16 x i16> %124, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %126 = shufflevector <16 x i16> %124, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %127 = bitcast <16 x i16> %125 to <8 x i32>
  %128 = bitcast <16 x i16> %126 to <8 x i32>
  %129 = add <8 x i32> %89, %127
  %130 = add <8 x i32> %129, %128
  store <8 x i32> %130, <8 x i32>* %48, align 32
  %131 = getelementptr inbounds i16, i16* %44, i64 %26
  store i16* %131, i16** %46, align 8
  %132 = add nuw nsw i64 %45, 1
  %133 = icmp eq i64 %132, 4
  br i1 %133, label %137, label %134

134:                                              ; preds = %43
  %135 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %132
  %136 = load i16*, i16** %135, align 8
  br label %43

137:                                              ; preds = %43
  %138 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %139 = load <4 x i64>, <4 x i64>* %138, align 32
  %140 = bitcast <4 x i64> %139 to <32 x i8>
  %141 = shufflevector <32 x i8> %140, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %142 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %143 = bitcast <4 x i64>* %142 to <32 x i8>*
  %144 = load <32 x i8>, <32 x i8>* %143, align 32
  %145 = shufflevector <32 x i8> %144, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %146 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %147 = bitcast <4 x i64>* %146 to <32 x i8>*
  %148 = load <32 x i8>, <32 x i8>* %147, align 32
  %149 = shufflevector <32 x i8> %148, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %150 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %151 = bitcast <4 x i64>* %150 to <32 x i8>*
  %152 = load <32 x i8>, <32 x i8>* %151, align 32
  %153 = shufflevector <32 x i8> %152, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %154 = bitcast <32 x i8> %141 to <8 x i32>
  %155 = bitcast <4 x i64> %139 to <8 x i32>
  %156 = add <8 x i32> %154, %155
  %157 = bitcast <8 x i32> %156 to <4 x i64>
  %158 = bitcast <32 x i8> %144 to <8 x i32>
  %159 = bitcast <32 x i8> %145 to <8 x i32>
  %160 = add <8 x i32> %159, %158
  %161 = bitcast <32 x i8> %148 to <8 x i32>
  %162 = bitcast <32 x i8> %149 to <8 x i32>
  %163 = add <8 x i32> %162, %161
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = bitcast <32 x i8> %152 to <8 x i32>
  %166 = bitcast <32 x i8> %153 to <8 x i32>
  %167 = add <8 x i32> %166, %165
  %168 = and <4 x i64> %157, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %169 = and <4 x i64> %164, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %170 = bitcast <8 x i32> %160 to <32 x i8>
  %171 = and <32 x i8> %170, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %172 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %171, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %173 = bitcast <32 x i8> %172 to <4 x i64>
  %174 = bitcast <8 x i32> %167 to <32 x i8>
  %175 = and <32 x i8> %174, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %176 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %175, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %177 = bitcast <32 x i8> %176 to <4 x i64>
  %178 = or <4 x i64> %168, %173
  %179 = or <4 x i64> %169, %177
  %180 = shufflevector <4 x i64> %178, <4 x i64> %179, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %181 = shufflevector <4 x i64> %178, <4 x i64> %179, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %182 = bitcast <4 x i64> %180 to <8 x i32>
  %183 = bitcast <4 x i64> %181 to <8 x i32>
  %184 = add <8 x i32> %183, %182
  %185 = bitcast <8 x i32> %184 to <4 x i64>
  %186 = shufflevector <8 x i32> %184, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %187 = shufflevector <4 x i64> %185, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %188 = bitcast <2 x i64> %187 to <4 x i32>
  %189 = add <4 x i32> %186, %188
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %190 = shl <4 x i32> %189, <i32 1, i32 1, i32 1, i32 1>
  %191 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %191, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_32x16x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %1, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %3, 3
  %28 = sext i32 %27 to i64
  %29 = inttoptr i64 %13 to <16 x i16>*
  %30 = getelementptr inbounds i16, i16* %14, i64 16
  %31 = bitcast i16* %30 to <16 x i16>*
  %32 = getelementptr inbounds i16, i16* %14, i64 %19
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = getelementptr inbounds i16, i16* %32, i64 16
  %35 = bitcast i16* %34 to <16 x i16>*
  %36 = getelementptr inbounds i16, i16* %14, i64 %22
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = getelementptr inbounds i16, i16* %36, i64 16
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = getelementptr inbounds i16, i16* %36, i64 %19
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = getelementptr inbounds i16, i16* %40, i64 16
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = getelementptr inbounds i16, i16* %14, i64 %26
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = getelementptr inbounds i16, i16* %44, i64 16
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = getelementptr inbounds i16, i16* %44, i64 %19
  %49 = bitcast i16* %48 to <16 x i16>*
  %50 = getelementptr inbounds i16, i16* %48, i64 16
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = getelementptr inbounds i16, i16* %44, i64 %22
  %53 = bitcast i16* %52 to <16 x i16>*
  %54 = getelementptr inbounds i16, i16* %52, i64 16
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = getelementptr inbounds i16, i16* %52, i64 %19
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = getelementptr inbounds i16, i16* %56, i64 16
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = extractelement <4 x i16*> %18, i32 0
  br label %61

61:                                               ; preds = %234, %5
  %62 = phi i16* [ %60, %5 ], [ %236, %234 ]
  %63 = phi i64 [ 0, %5 ], [ %232, %234 ]
  %64 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %63
  %65 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %63
  %66 = bitcast <4 x i64>* %65 to <8 x i32>*
  %67 = load <8 x i32>, <8 x i32>* %66, align 32
  %68 = load <16 x i16>, <16 x i16>* %29, align 2
  %69 = load <16 x i16>, <16 x i16>* %31, align 2
  %70 = load <16 x i16>, <16 x i16>* %33, align 2
  %71 = load <16 x i16>, <16 x i16>* %35, align 2
  %72 = bitcast i16* %62 to <16 x i16>*
  %73 = load <16 x i16>, <16 x i16>* %72, align 1
  %74 = getelementptr inbounds i16, i16* %62, i64 16
  %75 = bitcast i16* %74 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 1
  %77 = getelementptr inbounds i16, i16* %62, i64 %20
  %78 = bitcast i16* %77 to <16 x i16>*
  %79 = load <16 x i16>, <16 x i16>* %78, align 1
  %80 = getelementptr inbounds i16, i16* %77, i64 16
  %81 = bitcast i16* %80 to <16 x i16>*
  %82 = load <16 x i16>, <16 x i16>* %81, align 1
  %83 = sub <16 x i16> %68, %73
  %84 = sub <16 x i16> zeroinitializer, %83
  %85 = icmp slt <16 x i16> %83, zeroinitializer
  %86 = select <16 x i1> %85, <16 x i16> %84, <16 x i16> %83
  %87 = sub <16 x i16> %69, %76
  %88 = sub <16 x i16> zeroinitializer, %87
  %89 = icmp slt <16 x i16> %87, zeroinitializer
  %90 = select <16 x i1> %89, <16 x i16> %88, <16 x i16> %87
  %91 = sub <16 x i16> %70, %79
  %92 = sub <16 x i16> zeroinitializer, %91
  %93 = icmp slt <16 x i16> %91, zeroinitializer
  %94 = select <16 x i1> %93, <16 x i16> %92, <16 x i16> %91
  %95 = sub <16 x i16> %71, %82
  %96 = sub <16 x i16> zeroinitializer, %95
  %97 = icmp slt <16 x i16> %95, zeroinitializer
  %98 = select <16 x i1> %97, <16 x i16> %96, <16 x i16> %95
  %99 = add <16 x i16> %90, %86
  %100 = add <16 x i16> %99, %94
  %101 = add <16 x i16> %100, %98
  %102 = shufflevector <16 x i16> %101, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %103 = shufflevector <16 x i16> %101, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %104 = bitcast <16 x i16> %102 to <8 x i32>
  %105 = bitcast <16 x i16> %103 to <8 x i32>
  %106 = add <8 x i32> %67, %104
  %107 = add <8 x i32> %106, %105
  store <8 x i32> %107, <8 x i32>* %66, align 32
  %108 = getelementptr inbounds i16, i16* %62, i64 %24
  %109 = load <16 x i16>, <16 x i16>* %37, align 2
  %110 = load <16 x i16>, <16 x i16>* %39, align 2
  %111 = load <16 x i16>, <16 x i16>* %41, align 2
  %112 = load <16 x i16>, <16 x i16>* %43, align 2
  %113 = bitcast i16* %108 to <16 x i16>*
  %114 = load <16 x i16>, <16 x i16>* %113, align 1
  %115 = getelementptr inbounds i16, i16* %108, i64 16
  %116 = bitcast i16* %115 to <16 x i16>*
  %117 = load <16 x i16>, <16 x i16>* %116, align 1
  %118 = getelementptr inbounds i16, i16* %108, i64 %20
  %119 = bitcast i16* %118 to <16 x i16>*
  %120 = load <16 x i16>, <16 x i16>* %119, align 1
  %121 = getelementptr inbounds i16, i16* %118, i64 16
  %122 = bitcast i16* %121 to <16 x i16>*
  %123 = load <16 x i16>, <16 x i16>* %122, align 1
  %124 = sub <16 x i16> %109, %114
  %125 = sub <16 x i16> zeroinitializer, %124
  %126 = icmp slt <16 x i16> %124, zeroinitializer
  %127 = select <16 x i1> %126, <16 x i16> %125, <16 x i16> %124
  %128 = sub <16 x i16> %110, %117
  %129 = sub <16 x i16> zeroinitializer, %128
  %130 = icmp slt <16 x i16> %128, zeroinitializer
  %131 = select <16 x i1> %130, <16 x i16> %129, <16 x i16> %128
  %132 = sub <16 x i16> %111, %120
  %133 = sub <16 x i16> zeroinitializer, %132
  %134 = icmp slt <16 x i16> %132, zeroinitializer
  %135 = select <16 x i1> %134, <16 x i16> %133, <16 x i16> %132
  %136 = sub <16 x i16> %112, %123
  %137 = sub <16 x i16> zeroinitializer, %136
  %138 = icmp slt <16 x i16> %136, zeroinitializer
  %139 = select <16 x i1> %138, <16 x i16> %137, <16 x i16> %136
  %140 = add <16 x i16> %131, %127
  %141 = add <16 x i16> %140, %135
  %142 = add <16 x i16> %141, %139
  %143 = shufflevector <16 x i16> %142, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %144 = shufflevector <16 x i16> %142, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %145 = bitcast <16 x i16> %143 to <8 x i32>
  %146 = bitcast <16 x i16> %144 to <8 x i32>
  %147 = add <8 x i32> %107, %145
  %148 = add <8 x i32> %147, %146
  store <8 x i32> %148, <8 x i32>* %66, align 32
  %149 = getelementptr inbounds i16, i16* %62, i64 %28
  store i16* %149, i16** %64, align 8
  %150 = load <16 x i16>, <16 x i16>* %45, align 2
  %151 = load <16 x i16>, <16 x i16>* %47, align 2
  %152 = load <16 x i16>, <16 x i16>* %49, align 2
  %153 = load <16 x i16>, <16 x i16>* %51, align 2
  %154 = bitcast i16* %149 to <16 x i16>*
  %155 = load <16 x i16>, <16 x i16>* %154, align 1
  %156 = getelementptr inbounds i16, i16* %149, i64 16
  %157 = bitcast i16* %156 to <16 x i16>*
  %158 = load <16 x i16>, <16 x i16>* %157, align 1
  %159 = getelementptr inbounds i16, i16* %149, i64 %20
  %160 = bitcast i16* %159 to <16 x i16>*
  %161 = load <16 x i16>, <16 x i16>* %160, align 1
  %162 = getelementptr inbounds i16, i16* %159, i64 16
  %163 = bitcast i16* %162 to <16 x i16>*
  %164 = load <16 x i16>, <16 x i16>* %163, align 1
  %165 = sub <16 x i16> %150, %155
  %166 = sub <16 x i16> zeroinitializer, %165
  %167 = icmp slt <16 x i16> %165, zeroinitializer
  %168 = select <16 x i1> %167, <16 x i16> %166, <16 x i16> %165
  %169 = sub <16 x i16> %151, %158
  %170 = sub <16 x i16> zeroinitializer, %169
  %171 = icmp slt <16 x i16> %169, zeroinitializer
  %172 = select <16 x i1> %171, <16 x i16> %170, <16 x i16> %169
  %173 = sub <16 x i16> %152, %161
  %174 = sub <16 x i16> zeroinitializer, %173
  %175 = icmp slt <16 x i16> %173, zeroinitializer
  %176 = select <16 x i1> %175, <16 x i16> %174, <16 x i16> %173
  %177 = sub <16 x i16> %153, %164
  %178 = sub <16 x i16> zeroinitializer, %177
  %179 = icmp slt <16 x i16> %177, zeroinitializer
  %180 = select <16 x i1> %179, <16 x i16> %178, <16 x i16> %177
  %181 = add <16 x i16> %172, %168
  %182 = add <16 x i16> %181, %176
  %183 = add <16 x i16> %182, %180
  %184 = shufflevector <16 x i16> %183, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %185 = shufflevector <16 x i16> %183, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %186 = bitcast <16 x i16> %184 to <8 x i32>
  %187 = bitcast <16 x i16> %185 to <8 x i32>
  %188 = add <8 x i32> %148, %186
  %189 = add <8 x i32> %188, %187
  store <8 x i32> %189, <8 x i32>* %66, align 32
  %190 = getelementptr inbounds i16, i16* %149, i64 %24
  %191 = load <16 x i16>, <16 x i16>* %53, align 2
  %192 = load <16 x i16>, <16 x i16>* %55, align 2
  %193 = load <16 x i16>, <16 x i16>* %57, align 2
  %194 = load <16 x i16>, <16 x i16>* %59, align 1
  %195 = bitcast i16* %190 to <16 x i16>*
  %196 = load <16 x i16>, <16 x i16>* %195, align 1
  %197 = getelementptr inbounds i16, i16* %190, i64 16
  %198 = bitcast i16* %197 to <16 x i16>*
  %199 = load <16 x i16>, <16 x i16>* %198, align 1
  %200 = getelementptr inbounds i16, i16* %190, i64 %20
  %201 = bitcast i16* %200 to <16 x i16>*
  %202 = load <16 x i16>, <16 x i16>* %201, align 1
  %203 = getelementptr inbounds i16, i16* %200, i64 16
  %204 = bitcast i16* %203 to <16 x i16>*
  %205 = load <16 x i16>, <16 x i16>* %204, align 1
  %206 = sub <16 x i16> %191, %196
  %207 = sub <16 x i16> zeroinitializer, %206
  %208 = icmp slt <16 x i16> %206, zeroinitializer
  %209 = select <16 x i1> %208, <16 x i16> %207, <16 x i16> %206
  %210 = sub <16 x i16> %192, %199
  %211 = sub <16 x i16> zeroinitializer, %210
  %212 = icmp slt <16 x i16> %210, zeroinitializer
  %213 = select <16 x i1> %212, <16 x i16> %211, <16 x i16> %210
  %214 = sub <16 x i16> %193, %202
  %215 = sub <16 x i16> zeroinitializer, %214
  %216 = icmp slt <16 x i16> %214, zeroinitializer
  %217 = select <16 x i1> %216, <16 x i16> %215, <16 x i16> %214
  %218 = sub <16 x i16> %194, %205
  %219 = sub <16 x i16> zeroinitializer, %218
  %220 = icmp slt <16 x i16> %218, zeroinitializer
  %221 = select <16 x i1> %220, <16 x i16> %219, <16 x i16> %218
  %222 = add <16 x i16> %213, %209
  %223 = add <16 x i16> %222, %217
  %224 = add <16 x i16> %223, %221
  %225 = shufflevector <16 x i16> %224, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %226 = shufflevector <16 x i16> %224, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %227 = bitcast <16 x i16> %225 to <8 x i32>
  %228 = bitcast <16 x i16> %226 to <8 x i32>
  %229 = add <8 x i32> %189, %227
  %230 = add <8 x i32> %229, %228
  store <8 x i32> %230, <8 x i32>* %66, align 32
  %231 = getelementptr inbounds i16, i16* %149, i64 %28
  store i16* %231, i16** %64, align 8
  %232 = add nuw nsw i64 %63, 1
  %233 = icmp eq i64 %232, 4
  br i1 %233, label %237, label %234

234:                                              ; preds = %61
  %235 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %232
  %236 = load i16*, i16** %235, align 8
  br label %61

237:                                              ; preds = %61
  %238 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %239 = load <4 x i64>, <4 x i64>* %238, align 32
  %240 = bitcast <4 x i64> %239 to <32 x i8>
  %241 = shufflevector <32 x i8> %240, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %242 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %243 = bitcast <4 x i64>* %242 to <32 x i8>*
  %244 = load <32 x i8>, <32 x i8>* %243, align 32
  %245 = shufflevector <32 x i8> %244, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %246 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %247 = bitcast <4 x i64>* %246 to <32 x i8>*
  %248 = load <32 x i8>, <32 x i8>* %247, align 32
  %249 = shufflevector <32 x i8> %248, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %250 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %251 = bitcast <4 x i64>* %250 to <32 x i8>*
  %252 = load <32 x i8>, <32 x i8>* %251, align 32
  %253 = shufflevector <32 x i8> %252, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %254 = bitcast <32 x i8> %241 to <8 x i32>
  %255 = bitcast <4 x i64> %239 to <8 x i32>
  %256 = add <8 x i32> %254, %255
  %257 = bitcast <8 x i32> %256 to <4 x i64>
  %258 = bitcast <32 x i8> %244 to <8 x i32>
  %259 = bitcast <32 x i8> %245 to <8 x i32>
  %260 = add <8 x i32> %259, %258
  %261 = bitcast <32 x i8> %248 to <8 x i32>
  %262 = bitcast <32 x i8> %249 to <8 x i32>
  %263 = add <8 x i32> %262, %261
  %264 = bitcast <8 x i32> %263 to <4 x i64>
  %265 = bitcast <32 x i8> %252 to <8 x i32>
  %266 = bitcast <32 x i8> %253 to <8 x i32>
  %267 = add <8 x i32> %266, %265
  %268 = and <4 x i64> %257, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %269 = and <4 x i64> %264, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %270 = bitcast <8 x i32> %260 to <32 x i8>
  %271 = and <32 x i8> %270, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %272 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %271, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %273 = bitcast <32 x i8> %272 to <4 x i64>
  %274 = bitcast <8 x i32> %267 to <32 x i8>
  %275 = and <32 x i8> %274, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %276 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %275, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %277 = bitcast <32 x i8> %276 to <4 x i64>
  %278 = or <4 x i64> %268, %273
  %279 = or <4 x i64> %269, %277
  %280 = shufflevector <4 x i64> %278, <4 x i64> %279, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %281 = shufflevector <4 x i64> %278, <4 x i64> %279, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %282 = bitcast <4 x i64> %280 to <8 x i32>
  %283 = bitcast <4 x i64> %281 to <8 x i32>
  %284 = add <8 x i32> %283, %282
  %285 = bitcast <8 x i32> %284 to <4 x i64>
  %286 = shufflevector <8 x i32> %284, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %287 = shufflevector <4 x i64> %285, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %288 = bitcast <2 x i64> %287 to <4 x i32>
  %289 = add <4 x i32> %286, %288
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %290 = shl <4 x i32> %289, <i32 1, i32 1, i32 1, i32 1>
  %291 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %290, <4 x i32>* %291, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_32x32x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %1, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %3, 3
  %28 = sext i32 %27 to i64
  %29 = extractelement <4 x i16*> %18, i32 0
  br label %30

30:                                               ; preds = %145, %5
  %31 = phi i16* [ %29, %5 ], [ %147, %145 ]
  %32 = phi i64 [ 0, %5 ], [ %143, %145 ]
  %33 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %32
  %34 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %32
  %35 = bitcast <4 x i64>* %34 to <8 x i32>*
  %36 = load <8 x i32>, <8 x i32>* %35, align 32
  br label %37

37:                                               ; preds = %37, %30
  %38 = phi <8 x i32> [ %36, %30 ], [ %137, %37 ]
  %39 = phi i16* [ %31, %30 ], [ %139, %37 ]
  %40 = phi i32 [ 0, %30 ], [ %140, %37 ]
  %41 = phi i16* [ %14, %30 ], [ %138, %37 ]
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %41, i64 16
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %41, i64 %19
  %48 = bitcast i16* %47 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %47, i64 16
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = bitcast i16* %39 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %39, i64 16
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = getelementptr inbounds i16, i16* %39, i64 %20
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 1
  %61 = getelementptr inbounds i16, i16* %58, i64 16
  %62 = bitcast i16* %61 to <16 x i16>*
  %63 = load <16 x i16>, <16 x i16>* %62, align 1
  %64 = sub <16 x i16> %43, %54
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %46, %57
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %49, %60
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = sub <16 x i16> %52, %63
  %77 = sub <16 x i16> zeroinitializer, %76
  %78 = icmp slt <16 x i16> %76, zeroinitializer
  %79 = select <16 x i1> %78, <16 x i16> %77, <16 x i16> %76
  %80 = add <16 x i16> %71, %67
  %81 = add <16 x i16> %80, %75
  %82 = add <16 x i16> %81, %79
  %83 = shufflevector <16 x i16> %82, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %84 = shufflevector <16 x i16> %82, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %85 = bitcast <16 x i16> %83 to <8 x i32>
  %86 = bitcast <16 x i16> %84 to <8 x i32>
  %87 = add <8 x i32> %38, %85
  %88 = add <8 x i32> %87, %86
  store <8 x i32> %88, <8 x i32>* %35, align 32
  %89 = getelementptr inbounds i16, i16* %41, i64 %22
  %90 = getelementptr inbounds i16, i16* %39, i64 %24
  %91 = bitcast i16* %89 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %89, i64 16
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %89, i64 %19
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %96, i64 16
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = bitcast i16* %90 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %90, i64 16
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = getelementptr inbounds i16, i16* %90, i64 %20
  %108 = bitcast i16* %107 to <16 x i16>*
  %109 = load <16 x i16>, <16 x i16>* %108, align 1
  %110 = getelementptr inbounds i16, i16* %107, i64 16
  %111 = bitcast i16* %110 to <16 x i16>*
  %112 = load <16 x i16>, <16 x i16>* %111, align 1
  %113 = sub <16 x i16> %92, %103
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %95, %106
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = sub <16 x i16> %98, %109
  %122 = sub <16 x i16> zeroinitializer, %121
  %123 = icmp slt <16 x i16> %121, zeroinitializer
  %124 = select <16 x i1> %123, <16 x i16> %122, <16 x i16> %121
  %125 = sub <16 x i16> %101, %112
  %126 = sub <16 x i16> zeroinitializer, %125
  %127 = icmp slt <16 x i16> %125, zeroinitializer
  %128 = select <16 x i1> %127, <16 x i16> %126, <16 x i16> %125
  %129 = add <16 x i16> %120, %116
  %130 = add <16 x i16> %129, %124
  %131 = add <16 x i16> %130, %128
  %132 = shufflevector <16 x i16> %131, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %131, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = bitcast <16 x i16> %132 to <8 x i32>
  %135 = bitcast <16 x i16> %133 to <8 x i32>
  %136 = add <8 x i32> %88, %134
  %137 = add <8 x i32> %136, %135
  store <8 x i32> %137, <8 x i32>* %35, align 32
  %138 = getelementptr inbounds i16, i16* %41, i64 %26
  %139 = getelementptr inbounds i16, i16* %39, i64 %28
  store i16* %139, i16** %33, align 8
  %140 = add nuw nsw i32 %40, 4
  %141 = icmp ult i32 %140, 16
  br i1 %141, label %37, label %142

142:                                              ; preds = %37
  %143 = add nuw nsw i64 %32, 1
  %144 = icmp eq i64 %143, 4
  br i1 %144, label %148, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %143
  %147 = load i16*, i16** %146, align 8
  br label %30

148:                                              ; preds = %142
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %150 = load <4 x i64>, <4 x i64>* %149, align 32
  %151 = bitcast <4 x i64> %150 to <32 x i8>
  %152 = shufflevector <32 x i8> %151, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %158 = bitcast <4 x i64>* %157 to <32 x i8>*
  %159 = load <32 x i8>, <32 x i8>* %158, align 32
  %160 = shufflevector <32 x i8> %159, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %161 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %162 = bitcast <4 x i64>* %161 to <32 x i8>*
  %163 = load <32 x i8>, <32 x i8>* %162, align 32
  %164 = shufflevector <32 x i8> %163, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %165 = bitcast <32 x i8> %152 to <8 x i32>
  %166 = bitcast <4 x i64> %150 to <8 x i32>
  %167 = add <8 x i32> %165, %166
  %168 = bitcast <8 x i32> %167 to <4 x i64>
  %169 = bitcast <32 x i8> %155 to <8 x i32>
  %170 = bitcast <32 x i8> %156 to <8 x i32>
  %171 = add <8 x i32> %170, %169
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = bitcast <32 x i8> %160 to <8 x i32>
  %174 = add <8 x i32> %173, %172
  %175 = bitcast <8 x i32> %174 to <4 x i64>
  %176 = bitcast <32 x i8> %163 to <8 x i32>
  %177 = bitcast <32 x i8> %164 to <8 x i32>
  %178 = add <8 x i32> %177, %176
  %179 = and <4 x i64> %168, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %180 = and <4 x i64> %175, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %181 = bitcast <8 x i32> %171 to <32 x i8>
  %182 = and <32 x i8> %181, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %183 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %182, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %184 = bitcast <32 x i8> %183 to <4 x i64>
  %185 = bitcast <8 x i32> %178 to <32 x i8>
  %186 = and <32 x i8> %185, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %187 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %186, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %188 = bitcast <32 x i8> %187 to <4 x i64>
  %189 = or <4 x i64> %179, %184
  %190 = or <4 x i64> %180, %188
  %191 = shufflevector <4 x i64> %189, <4 x i64> %190, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %192 = shufflevector <4 x i64> %189, <4 x i64> %190, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %193 = bitcast <4 x i64> %191 to <8 x i32>
  %194 = bitcast <4 x i64> %192 to <8 x i32>
  %195 = add <8 x i32> %194, %193
  %196 = bitcast <8 x i32> %195 to <4 x i64>
  %197 = shufflevector <8 x i32> %195, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %198 = shufflevector <4 x i64> %196, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %199 = bitcast <2 x i64> %198 to <4 x i32>
  %200 = add <4 x i32> %197, %199
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %201 = shl <4 x i32> %200, <i32 1, i32 1, i32 1, i32 1>
  %202 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %202, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_32x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = shl i32 %1, 3
  %26 = sext i32 %25 to i64
  %27 = shl i32 %3, 3
  %28 = sext i32 %27 to i64
  %29 = extractelement <4 x i16*> %18, i32 0
  br label %30

30:                                               ; preds = %145, %5
  %31 = phi i16* [ %29, %5 ], [ %147, %145 ]
  %32 = phi i64 [ 0, %5 ], [ %143, %145 ]
  %33 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %32
  %34 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %32
  %35 = bitcast <4 x i64>* %34 to <8 x i32>*
  %36 = load <8 x i32>, <8 x i32>* %35, align 32
  br label %37

37:                                               ; preds = %37, %30
  %38 = phi <8 x i32> [ %36, %30 ], [ %137, %37 ]
  %39 = phi i16* [ %31, %30 ], [ %139, %37 ]
  %40 = phi i32 [ 0, %30 ], [ %140, %37 ]
  %41 = phi i16* [ %14, %30 ], [ %138, %37 ]
  %42 = bitcast i16* %41 to <16 x i16>*
  %43 = load <16 x i16>, <16 x i16>* %42, align 1
  %44 = getelementptr inbounds i16, i16* %41, i64 16
  %45 = bitcast i16* %44 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %41, i64 %19
  %48 = bitcast i16* %47 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %47, i64 16
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = bitcast i16* %39 to <16 x i16>*
  %54 = load <16 x i16>, <16 x i16>* %53, align 1
  %55 = getelementptr inbounds i16, i16* %39, i64 16
  %56 = bitcast i16* %55 to <16 x i16>*
  %57 = load <16 x i16>, <16 x i16>* %56, align 1
  %58 = getelementptr inbounds i16, i16* %39, i64 %20
  %59 = bitcast i16* %58 to <16 x i16>*
  %60 = load <16 x i16>, <16 x i16>* %59, align 1
  %61 = getelementptr inbounds i16, i16* %58, i64 16
  %62 = bitcast i16* %61 to <16 x i16>*
  %63 = load <16 x i16>, <16 x i16>* %62, align 1
  %64 = sub <16 x i16> %43, %54
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %46, %57
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %49, %60
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = sub <16 x i16> %52, %63
  %77 = sub <16 x i16> zeroinitializer, %76
  %78 = icmp slt <16 x i16> %76, zeroinitializer
  %79 = select <16 x i1> %78, <16 x i16> %77, <16 x i16> %76
  %80 = add <16 x i16> %71, %67
  %81 = add <16 x i16> %80, %75
  %82 = add <16 x i16> %81, %79
  %83 = shufflevector <16 x i16> %82, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %84 = shufflevector <16 x i16> %82, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %85 = bitcast <16 x i16> %83 to <8 x i32>
  %86 = bitcast <16 x i16> %84 to <8 x i32>
  %87 = add <8 x i32> %38, %85
  %88 = add <8 x i32> %87, %86
  store <8 x i32> %88, <8 x i32>* %35, align 32
  %89 = getelementptr inbounds i16, i16* %41, i64 %22
  %90 = getelementptr inbounds i16, i16* %39, i64 %24
  %91 = bitcast i16* %89 to <16 x i16>*
  %92 = load <16 x i16>, <16 x i16>* %91, align 1
  %93 = getelementptr inbounds i16, i16* %89, i64 16
  %94 = bitcast i16* %93 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %89, i64 %19
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %96, i64 16
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = bitcast i16* %90 to <16 x i16>*
  %103 = load <16 x i16>, <16 x i16>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %90, i64 16
  %105 = bitcast i16* %104 to <16 x i16>*
  %106 = load <16 x i16>, <16 x i16>* %105, align 1
  %107 = getelementptr inbounds i16, i16* %90, i64 %20
  %108 = bitcast i16* %107 to <16 x i16>*
  %109 = load <16 x i16>, <16 x i16>* %108, align 1
  %110 = getelementptr inbounds i16, i16* %107, i64 16
  %111 = bitcast i16* %110 to <16 x i16>*
  %112 = load <16 x i16>, <16 x i16>* %111, align 1
  %113 = sub <16 x i16> %92, %103
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %95, %106
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = sub <16 x i16> %98, %109
  %122 = sub <16 x i16> zeroinitializer, %121
  %123 = icmp slt <16 x i16> %121, zeroinitializer
  %124 = select <16 x i1> %123, <16 x i16> %122, <16 x i16> %121
  %125 = sub <16 x i16> %101, %112
  %126 = sub <16 x i16> zeroinitializer, %125
  %127 = icmp slt <16 x i16> %125, zeroinitializer
  %128 = select <16 x i1> %127, <16 x i16> %126, <16 x i16> %125
  %129 = add <16 x i16> %120, %116
  %130 = add <16 x i16> %129, %124
  %131 = add <16 x i16> %130, %128
  %132 = shufflevector <16 x i16> %131, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %133 = shufflevector <16 x i16> %131, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %134 = bitcast <16 x i16> %132 to <8 x i32>
  %135 = bitcast <16 x i16> %133 to <8 x i32>
  %136 = add <8 x i32> %88, %134
  %137 = add <8 x i32> %136, %135
  store <8 x i32> %137, <8 x i32>* %35, align 32
  %138 = getelementptr inbounds i16, i16* %41, i64 %26
  %139 = getelementptr inbounds i16, i16* %39, i64 %28
  store i16* %139, i16** %33, align 8
  %140 = add nuw nsw i32 %40, 4
  %141 = icmp ult i32 %140, 32
  br i1 %141, label %37, label %142

142:                                              ; preds = %37
  %143 = add nuw nsw i64 %32, 1
  %144 = icmp eq i64 %143, 4
  br i1 %144, label %148, label %145

145:                                              ; preds = %142
  %146 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %143
  %147 = load i16*, i16** %146, align 8
  br label %30

148:                                              ; preds = %142
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %150 = load <4 x i64>, <4 x i64>* %149, align 32
  %151 = bitcast <4 x i64> %150 to <32 x i8>
  %152 = shufflevector <32 x i8> %151, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %158 = bitcast <4 x i64>* %157 to <32 x i8>*
  %159 = load <32 x i8>, <32 x i8>* %158, align 32
  %160 = shufflevector <32 x i8> %159, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %161 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %162 = bitcast <4 x i64>* %161 to <32 x i8>*
  %163 = load <32 x i8>, <32 x i8>* %162, align 32
  %164 = shufflevector <32 x i8> %163, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %165 = bitcast <32 x i8> %152 to <8 x i32>
  %166 = bitcast <4 x i64> %150 to <8 x i32>
  %167 = add <8 x i32> %165, %166
  %168 = bitcast <8 x i32> %167 to <4 x i64>
  %169 = bitcast <32 x i8> %155 to <8 x i32>
  %170 = bitcast <32 x i8> %156 to <8 x i32>
  %171 = add <8 x i32> %170, %169
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = bitcast <32 x i8> %160 to <8 x i32>
  %174 = add <8 x i32> %173, %172
  %175 = bitcast <8 x i32> %174 to <4 x i64>
  %176 = bitcast <32 x i8> %163 to <8 x i32>
  %177 = bitcast <32 x i8> %164 to <8 x i32>
  %178 = add <8 x i32> %177, %176
  %179 = and <4 x i64> %168, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %180 = and <4 x i64> %175, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %181 = bitcast <8 x i32> %171 to <32 x i8>
  %182 = and <32 x i8> %181, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %183 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %182, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %184 = bitcast <32 x i8> %183 to <4 x i64>
  %185 = bitcast <8 x i32> %178 to <32 x i8>
  %186 = and <32 x i8> %185, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %187 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %186, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %188 = bitcast <32 x i8> %187 to <4 x i64>
  %189 = or <4 x i64> %179, %184
  %190 = or <4 x i64> %180, %188
  %191 = shufflevector <4 x i64> %189, <4 x i64> %190, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %192 = shufflevector <4 x i64> %189, <4 x i64> %190, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %193 = bitcast <4 x i64> %191 to <8 x i32>
  %194 = bitcast <4 x i64> %192 to <8 x i32>
  %195 = add <8 x i32> %194, %193
  %196 = bitcast <8 x i32> %195 to <4 x i64>
  %197 = shufflevector <8 x i32> %195, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %198 = shufflevector <4 x i64> %196, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %199 = bitcast <2 x i64> %198 to <4 x i32>
  %200 = add <4 x i32> %197, %199
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %201 = shl <4 x i32> %200, <i32 1, i32 1, i32 1, i32 1>
  %202 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %201, <4 x i32>* %202, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_64x16x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = extractelement <4 x i16*> %18, i32 0
  br label %26

26:                                               ; preds = %141, %5
  %27 = phi i16* [ %25, %5 ], [ %143, %141 ]
  %28 = phi i64 [ 0, %5 ], [ %139, %141 ]
  %29 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %28
  %30 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %28
  %31 = bitcast <4 x i64>* %30 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 32
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi <8 x i32> [ %32, %26 ], [ %133, %33 ]
  %35 = phi i16* [ %27, %26 ], [ %135, %33 ]
  %36 = phi i32 [ 0, %26 ], [ %136, %33 ]
  %37 = phi i16* [ %14, %26 ], [ %134, %33 ]
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %37, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %37, i64 32
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %37, i64 48
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = bitcast i16* %35 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %35, i64 16
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = getelementptr inbounds i16, i16* %35, i64 32
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %35, i64 48
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = sub <16 x i16> %39, %50
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %42, %53
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %45, %56
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %48, %59
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = add <16 x i16> %67, %63
  %77 = add <16 x i16> %76, %71
  %78 = add <16 x i16> %77, %75
  %79 = shufflevector <16 x i16> %78, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %80 = shufflevector <16 x i16> %78, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i16> %79 to <8 x i32>
  %82 = bitcast <16 x i16> %80 to <8 x i32>
  %83 = add <8 x i32> %34, %81
  %84 = add <8 x i32> %83, %82
  store <8 x i32> %84, <8 x i32>* %31, align 32
  %85 = getelementptr inbounds i16, i16* %37, i64 %19
  %86 = getelementptr inbounds i16, i16* %35, i64 %20
  %87 = bitcast i16* %85 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %85, i64 16
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %85, i64 32
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %85, i64 48
  %96 = bitcast i16* %95 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = bitcast i16* %86 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %86, i64 16
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %86, i64 32
  %104 = bitcast i16* %103 to <16 x i16>*
  %105 = load <16 x i16>, <16 x i16>* %104, align 1
  %106 = getelementptr inbounds i16, i16* %86, i64 48
  %107 = bitcast i16* %106 to <16 x i16>*
  %108 = load <16 x i16>, <16 x i16>* %107, align 1
  %109 = sub <16 x i16> %88, %99
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %91, %102
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %94, %105
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = sub <16 x i16> %97, %108
  %122 = sub <16 x i16> zeroinitializer, %121
  %123 = icmp slt <16 x i16> %121, zeroinitializer
  %124 = select <16 x i1> %123, <16 x i16> %122, <16 x i16> %121
  %125 = add <16 x i16> %116, %112
  %126 = add <16 x i16> %125, %120
  %127 = add <16 x i16> %126, %124
  %128 = shufflevector <16 x i16> %127, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %129 = shufflevector <16 x i16> %127, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %130 = bitcast <16 x i16> %128 to <8 x i32>
  %131 = bitcast <16 x i16> %129 to <8 x i32>
  %132 = add <8 x i32> %84, %130
  %133 = add <8 x i32> %132, %131
  store <8 x i32> %133, <8 x i32>* %31, align 32
  %134 = getelementptr inbounds i16, i16* %37, i64 %22
  %135 = getelementptr inbounds i16, i16* %35, i64 %24
  store i16* %135, i16** %29, align 8
  %136 = add nuw nsw i32 %36, 2
  %137 = icmp ult i32 %136, 8
  br i1 %137, label %33, label %138

138:                                              ; preds = %33
  %139 = add nuw nsw i64 %28, 1
  %140 = icmp eq i64 %139, 4
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %139
  %143 = load i16*, i16** %142, align 8
  br label %26

144:                                              ; preds = %138
  %145 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %146 = load <4 x i64>, <4 x i64>* %145, align 32
  %147 = bitcast <4 x i64> %146 to <32 x i8>
  %148 = shufflevector <32 x i8> %147, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %150 = bitcast <4 x i64>* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 32
  %152 = shufflevector <32 x i8> %151, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %157 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %158 = bitcast <4 x i64>* %157 to <32 x i8>*
  %159 = load <32 x i8>, <32 x i8>* %158, align 32
  %160 = shufflevector <32 x i8> %159, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <32 x i8> %148 to <8 x i32>
  %162 = bitcast <4 x i64> %146 to <8 x i32>
  %163 = add <8 x i32> %161, %162
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = bitcast <32 x i8> %151 to <8 x i32>
  %166 = bitcast <32 x i8> %152 to <8 x i32>
  %167 = add <8 x i32> %166, %165
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = add <8 x i32> %169, %168
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = bitcast <32 x i8> %160 to <8 x i32>
  %174 = add <8 x i32> %173, %172
  %175 = and <4 x i64> %164, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %176 = and <4 x i64> %171, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %177 = bitcast <8 x i32> %167 to <32 x i8>
  %178 = and <32 x i8> %177, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %179 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %180 = bitcast <32 x i8> %179 to <4 x i64>
  %181 = bitcast <8 x i32> %174 to <32 x i8>
  %182 = and <32 x i8> %181, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %183 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %182, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %184 = bitcast <32 x i8> %183 to <4 x i64>
  %185 = or <4 x i64> %175, %180
  %186 = or <4 x i64> %176, %184
  %187 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %188 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %189 = bitcast <4 x i64> %187 to <8 x i32>
  %190 = bitcast <4 x i64> %188 to <8 x i32>
  %191 = add <8 x i32> %190, %189
  %192 = bitcast <8 x i32> %191 to <4 x i64>
  %193 = shufflevector <8 x i32> %191, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %194 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <2 x i64> %194 to <4 x i32>
  %196 = add <4 x i32> %193, %195
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %197 = shl <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  %198 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %198, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_64x32x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = extractelement <4 x i16*> %18, i32 0
  br label %26

26:                                               ; preds = %141, %5
  %27 = phi i16* [ %25, %5 ], [ %143, %141 ]
  %28 = phi i64 [ 0, %5 ], [ %139, %141 ]
  %29 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %28
  %30 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %28
  %31 = bitcast <4 x i64>* %30 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 32
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi <8 x i32> [ %32, %26 ], [ %133, %33 ]
  %35 = phi i16* [ %27, %26 ], [ %135, %33 ]
  %36 = phi i32 [ 0, %26 ], [ %136, %33 ]
  %37 = phi i16* [ %14, %26 ], [ %134, %33 ]
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %37, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %37, i64 32
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %37, i64 48
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = bitcast i16* %35 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %35, i64 16
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = getelementptr inbounds i16, i16* %35, i64 32
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %35, i64 48
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = sub <16 x i16> %39, %50
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %42, %53
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %45, %56
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %48, %59
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = add <16 x i16> %67, %63
  %77 = add <16 x i16> %76, %71
  %78 = add <16 x i16> %77, %75
  %79 = shufflevector <16 x i16> %78, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %80 = shufflevector <16 x i16> %78, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i16> %79 to <8 x i32>
  %82 = bitcast <16 x i16> %80 to <8 x i32>
  %83 = add <8 x i32> %34, %81
  %84 = add <8 x i32> %83, %82
  store <8 x i32> %84, <8 x i32>* %31, align 32
  %85 = getelementptr inbounds i16, i16* %37, i64 %19
  %86 = getelementptr inbounds i16, i16* %35, i64 %20
  %87 = bitcast i16* %85 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %85, i64 16
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %85, i64 32
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %85, i64 48
  %96 = bitcast i16* %95 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = bitcast i16* %86 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %86, i64 16
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %86, i64 32
  %104 = bitcast i16* %103 to <16 x i16>*
  %105 = load <16 x i16>, <16 x i16>* %104, align 1
  %106 = getelementptr inbounds i16, i16* %86, i64 48
  %107 = bitcast i16* %106 to <16 x i16>*
  %108 = load <16 x i16>, <16 x i16>* %107, align 1
  %109 = sub <16 x i16> %88, %99
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %91, %102
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %94, %105
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = sub <16 x i16> %97, %108
  %122 = sub <16 x i16> zeroinitializer, %121
  %123 = icmp slt <16 x i16> %121, zeroinitializer
  %124 = select <16 x i1> %123, <16 x i16> %122, <16 x i16> %121
  %125 = add <16 x i16> %116, %112
  %126 = add <16 x i16> %125, %120
  %127 = add <16 x i16> %126, %124
  %128 = shufflevector <16 x i16> %127, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %129 = shufflevector <16 x i16> %127, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %130 = bitcast <16 x i16> %128 to <8 x i32>
  %131 = bitcast <16 x i16> %129 to <8 x i32>
  %132 = add <8 x i32> %84, %130
  %133 = add <8 x i32> %132, %131
  store <8 x i32> %133, <8 x i32>* %31, align 32
  %134 = getelementptr inbounds i16, i16* %37, i64 %22
  %135 = getelementptr inbounds i16, i16* %35, i64 %24
  store i16* %135, i16** %29, align 8
  %136 = add nuw nsw i32 %36, 2
  %137 = icmp ult i32 %136, 16
  br i1 %137, label %33, label %138

138:                                              ; preds = %33
  %139 = add nuw nsw i64 %28, 1
  %140 = icmp eq i64 %139, 4
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %139
  %143 = load i16*, i16** %142, align 8
  br label %26

144:                                              ; preds = %138
  %145 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %146 = load <4 x i64>, <4 x i64>* %145, align 32
  %147 = bitcast <4 x i64> %146 to <32 x i8>
  %148 = shufflevector <32 x i8> %147, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %150 = bitcast <4 x i64>* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 32
  %152 = shufflevector <32 x i8> %151, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %157 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %158 = bitcast <4 x i64>* %157 to <32 x i8>*
  %159 = load <32 x i8>, <32 x i8>* %158, align 32
  %160 = shufflevector <32 x i8> %159, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <32 x i8> %148 to <8 x i32>
  %162 = bitcast <4 x i64> %146 to <8 x i32>
  %163 = add <8 x i32> %161, %162
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = bitcast <32 x i8> %151 to <8 x i32>
  %166 = bitcast <32 x i8> %152 to <8 x i32>
  %167 = add <8 x i32> %166, %165
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = add <8 x i32> %169, %168
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = bitcast <32 x i8> %160 to <8 x i32>
  %174 = add <8 x i32> %173, %172
  %175 = and <4 x i64> %164, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %176 = and <4 x i64> %171, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %177 = bitcast <8 x i32> %167 to <32 x i8>
  %178 = and <32 x i8> %177, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %179 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %180 = bitcast <32 x i8> %179 to <4 x i64>
  %181 = bitcast <8 x i32> %174 to <32 x i8>
  %182 = and <32 x i8> %181, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %183 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %182, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %184 = bitcast <32 x i8> %183 to <4 x i64>
  %185 = or <4 x i64> %175, %180
  %186 = or <4 x i64> %176, %184
  %187 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %188 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %189 = bitcast <4 x i64> %187 to <8 x i32>
  %190 = bitcast <4 x i64> %188 to <8 x i32>
  %191 = add <8 x i32> %190, %189
  %192 = bitcast <8 x i32> %191 to <4 x i64>
  %193 = shufflevector <8 x i32> %191, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %194 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <2 x i64> %194 to <4 x i32>
  %196 = add <4 x i32> %193, %195
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %197 = shl <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  %198 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %198, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_64x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = extractelement <4 x i16*> %18, i32 0
  br label %26

26:                                               ; preds = %141, %5
  %27 = phi i16* [ %25, %5 ], [ %143, %141 ]
  %28 = phi i64 [ 0, %5 ], [ %139, %141 ]
  %29 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %28
  %30 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %28
  %31 = bitcast <4 x i64>* %30 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 32
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi <8 x i32> [ %32, %26 ], [ %133, %33 ]
  %35 = phi i16* [ %27, %26 ], [ %135, %33 ]
  %36 = phi i32 [ 0, %26 ], [ %136, %33 ]
  %37 = phi i16* [ %14, %26 ], [ %134, %33 ]
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %37, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %37, i64 32
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %37, i64 48
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = bitcast i16* %35 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %35, i64 16
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = getelementptr inbounds i16, i16* %35, i64 32
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %35, i64 48
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = sub <16 x i16> %39, %50
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %42, %53
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %45, %56
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %48, %59
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = add <16 x i16> %67, %63
  %77 = add <16 x i16> %76, %71
  %78 = add <16 x i16> %77, %75
  %79 = shufflevector <16 x i16> %78, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %80 = shufflevector <16 x i16> %78, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i16> %79 to <8 x i32>
  %82 = bitcast <16 x i16> %80 to <8 x i32>
  %83 = add <8 x i32> %34, %81
  %84 = add <8 x i32> %83, %82
  store <8 x i32> %84, <8 x i32>* %31, align 32
  %85 = getelementptr inbounds i16, i16* %37, i64 %19
  %86 = getelementptr inbounds i16, i16* %35, i64 %20
  %87 = bitcast i16* %85 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %85, i64 16
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %85, i64 32
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %85, i64 48
  %96 = bitcast i16* %95 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = bitcast i16* %86 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %86, i64 16
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %86, i64 32
  %104 = bitcast i16* %103 to <16 x i16>*
  %105 = load <16 x i16>, <16 x i16>* %104, align 1
  %106 = getelementptr inbounds i16, i16* %86, i64 48
  %107 = bitcast i16* %106 to <16 x i16>*
  %108 = load <16 x i16>, <16 x i16>* %107, align 1
  %109 = sub <16 x i16> %88, %99
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %91, %102
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %94, %105
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = sub <16 x i16> %97, %108
  %122 = sub <16 x i16> zeroinitializer, %121
  %123 = icmp slt <16 x i16> %121, zeroinitializer
  %124 = select <16 x i1> %123, <16 x i16> %122, <16 x i16> %121
  %125 = add <16 x i16> %116, %112
  %126 = add <16 x i16> %125, %120
  %127 = add <16 x i16> %126, %124
  %128 = shufflevector <16 x i16> %127, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %129 = shufflevector <16 x i16> %127, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %130 = bitcast <16 x i16> %128 to <8 x i32>
  %131 = bitcast <16 x i16> %129 to <8 x i32>
  %132 = add <8 x i32> %84, %130
  %133 = add <8 x i32> %132, %131
  store <8 x i32> %133, <8 x i32>* %31, align 32
  %134 = getelementptr inbounds i16, i16* %37, i64 %22
  %135 = getelementptr inbounds i16, i16* %35, i64 %24
  store i16* %135, i16** %29, align 8
  %136 = add nuw nsw i32 %36, 2
  %137 = icmp ult i32 %136, 32
  br i1 %137, label %33, label %138

138:                                              ; preds = %33
  %139 = add nuw nsw i64 %28, 1
  %140 = icmp eq i64 %139, 4
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %139
  %143 = load i16*, i16** %142, align 8
  br label %26

144:                                              ; preds = %138
  %145 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %146 = load <4 x i64>, <4 x i64>* %145, align 32
  %147 = bitcast <4 x i64> %146 to <32 x i8>
  %148 = shufflevector <32 x i8> %147, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %150 = bitcast <4 x i64>* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 32
  %152 = shufflevector <32 x i8> %151, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %157 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %158 = bitcast <4 x i64>* %157 to <32 x i8>*
  %159 = load <32 x i8>, <32 x i8>* %158, align 32
  %160 = shufflevector <32 x i8> %159, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <32 x i8> %148 to <8 x i32>
  %162 = bitcast <4 x i64> %146 to <8 x i32>
  %163 = add <8 x i32> %161, %162
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = bitcast <32 x i8> %151 to <8 x i32>
  %166 = bitcast <32 x i8> %152 to <8 x i32>
  %167 = add <8 x i32> %166, %165
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = add <8 x i32> %169, %168
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = bitcast <32 x i8> %160 to <8 x i32>
  %174 = add <8 x i32> %173, %172
  %175 = and <4 x i64> %164, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %176 = and <4 x i64> %171, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %177 = bitcast <8 x i32> %167 to <32 x i8>
  %178 = and <32 x i8> %177, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %179 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %180 = bitcast <32 x i8> %179 to <4 x i64>
  %181 = bitcast <8 x i32> %174 to <32 x i8>
  %182 = and <32 x i8> %181, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %183 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %182, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %184 = bitcast <32 x i8> %183 to <4 x i64>
  %185 = or <4 x i64> %175, %180
  %186 = or <4 x i64> %176, %184
  %187 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %188 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %189 = bitcast <4 x i64> %187 to <8 x i32>
  %190 = bitcast <4 x i64> %188 to <8 x i32>
  %191 = add <8 x i32> %190, %189
  %192 = bitcast <8 x i32> %191 to <4 x i64>
  %193 = shufflevector <8 x i32> %191, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %194 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <2 x i64> %194 to <4 x i32>
  %196 = add <4 x i32> %193, %195
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %197 = shl <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  %198 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %198, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_64x128x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = shl i32 %1, 2
  %22 = sext i32 %21 to i64
  %23 = shl i32 %3, 2
  %24 = sext i32 %23 to i64
  %25 = extractelement <4 x i16*> %18, i32 0
  br label %26

26:                                               ; preds = %141, %5
  %27 = phi i16* [ %25, %5 ], [ %143, %141 ]
  %28 = phi i64 [ 0, %5 ], [ %139, %141 ]
  %29 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %28
  %30 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %28
  %31 = bitcast <4 x i64>* %30 to <8 x i32>*
  %32 = load <8 x i32>, <8 x i32>* %31, align 32
  br label %33

33:                                               ; preds = %33, %26
  %34 = phi <8 x i32> [ %32, %26 ], [ %133, %33 ]
  %35 = phi i16* [ %27, %26 ], [ %135, %33 ]
  %36 = phi i32 [ 0, %26 ], [ %136, %33 ]
  %37 = phi i16* [ %14, %26 ], [ %134, %33 ]
  %38 = bitcast i16* %37 to <16 x i16>*
  %39 = load <16 x i16>, <16 x i16>* %38, align 1
  %40 = getelementptr inbounds i16, i16* %37, i64 16
  %41 = bitcast i16* %40 to <16 x i16>*
  %42 = load <16 x i16>, <16 x i16>* %41, align 1
  %43 = getelementptr inbounds i16, i16* %37, i64 32
  %44 = bitcast i16* %43 to <16 x i16>*
  %45 = load <16 x i16>, <16 x i16>* %44, align 1
  %46 = getelementptr inbounds i16, i16* %37, i64 48
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 1
  %49 = bitcast i16* %35 to <16 x i16>*
  %50 = load <16 x i16>, <16 x i16>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %35, i64 16
  %52 = bitcast i16* %51 to <16 x i16>*
  %53 = load <16 x i16>, <16 x i16>* %52, align 1
  %54 = getelementptr inbounds i16, i16* %35, i64 32
  %55 = bitcast i16* %54 to <16 x i16>*
  %56 = load <16 x i16>, <16 x i16>* %55, align 1
  %57 = getelementptr inbounds i16, i16* %35, i64 48
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 1
  %60 = sub <16 x i16> %39, %50
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %42, %53
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %45, %56
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = sub <16 x i16> %48, %59
  %73 = sub <16 x i16> zeroinitializer, %72
  %74 = icmp slt <16 x i16> %72, zeroinitializer
  %75 = select <16 x i1> %74, <16 x i16> %73, <16 x i16> %72
  %76 = add <16 x i16> %67, %63
  %77 = add <16 x i16> %76, %71
  %78 = add <16 x i16> %77, %75
  %79 = shufflevector <16 x i16> %78, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %80 = shufflevector <16 x i16> %78, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %81 = bitcast <16 x i16> %79 to <8 x i32>
  %82 = bitcast <16 x i16> %80 to <8 x i32>
  %83 = add <8 x i32> %34, %81
  %84 = add <8 x i32> %83, %82
  store <8 x i32> %84, <8 x i32>* %31, align 32
  %85 = getelementptr inbounds i16, i16* %37, i64 %19
  %86 = getelementptr inbounds i16, i16* %35, i64 %20
  %87 = bitcast i16* %85 to <16 x i16>*
  %88 = load <16 x i16>, <16 x i16>* %87, align 1
  %89 = getelementptr inbounds i16, i16* %85, i64 16
  %90 = bitcast i16* %89 to <16 x i16>*
  %91 = load <16 x i16>, <16 x i16>* %90, align 1
  %92 = getelementptr inbounds i16, i16* %85, i64 32
  %93 = bitcast i16* %92 to <16 x i16>*
  %94 = load <16 x i16>, <16 x i16>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %85, i64 48
  %96 = bitcast i16* %95 to <16 x i16>*
  %97 = load <16 x i16>, <16 x i16>* %96, align 1
  %98 = bitcast i16* %86 to <16 x i16>*
  %99 = load <16 x i16>, <16 x i16>* %98, align 1
  %100 = getelementptr inbounds i16, i16* %86, i64 16
  %101 = bitcast i16* %100 to <16 x i16>*
  %102 = load <16 x i16>, <16 x i16>* %101, align 1
  %103 = getelementptr inbounds i16, i16* %86, i64 32
  %104 = bitcast i16* %103 to <16 x i16>*
  %105 = load <16 x i16>, <16 x i16>* %104, align 1
  %106 = getelementptr inbounds i16, i16* %86, i64 48
  %107 = bitcast i16* %106 to <16 x i16>*
  %108 = load <16 x i16>, <16 x i16>* %107, align 1
  %109 = sub <16 x i16> %88, %99
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %91, %102
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %94, %105
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = sub <16 x i16> %97, %108
  %122 = sub <16 x i16> zeroinitializer, %121
  %123 = icmp slt <16 x i16> %121, zeroinitializer
  %124 = select <16 x i1> %123, <16 x i16> %122, <16 x i16> %121
  %125 = add <16 x i16> %116, %112
  %126 = add <16 x i16> %125, %120
  %127 = add <16 x i16> %126, %124
  %128 = shufflevector <16 x i16> %127, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %129 = shufflevector <16 x i16> %127, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %130 = bitcast <16 x i16> %128 to <8 x i32>
  %131 = bitcast <16 x i16> %129 to <8 x i32>
  %132 = add <8 x i32> %84, %130
  %133 = add <8 x i32> %132, %131
  store <8 x i32> %133, <8 x i32>* %31, align 32
  %134 = getelementptr inbounds i16, i16* %37, i64 %22
  %135 = getelementptr inbounds i16, i16* %35, i64 %24
  store i16* %135, i16** %29, align 8
  %136 = add nuw nsw i32 %36, 2
  %137 = icmp ult i32 %136, 64
  br i1 %137, label %33, label %138

138:                                              ; preds = %33
  %139 = add nuw nsw i64 %28, 1
  %140 = icmp eq i64 %139, 4
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %139
  %143 = load i16*, i16** %142, align 8
  br label %26

144:                                              ; preds = %138
  %145 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %146 = load <4 x i64>, <4 x i64>* %145, align 32
  %147 = bitcast <4 x i64> %146 to <32 x i8>
  %148 = shufflevector <32 x i8> %147, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %150 = bitcast <4 x i64>* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 32
  %152 = shufflevector <32 x i8> %151, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %157 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %158 = bitcast <4 x i64>* %157 to <32 x i8>*
  %159 = load <32 x i8>, <32 x i8>* %158, align 32
  %160 = shufflevector <32 x i8> %159, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %161 = bitcast <32 x i8> %148 to <8 x i32>
  %162 = bitcast <4 x i64> %146 to <8 x i32>
  %163 = add <8 x i32> %161, %162
  %164 = bitcast <8 x i32> %163 to <4 x i64>
  %165 = bitcast <32 x i8> %151 to <8 x i32>
  %166 = bitcast <32 x i8> %152 to <8 x i32>
  %167 = add <8 x i32> %166, %165
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = add <8 x i32> %169, %168
  %171 = bitcast <8 x i32> %170 to <4 x i64>
  %172 = bitcast <32 x i8> %159 to <8 x i32>
  %173 = bitcast <32 x i8> %160 to <8 x i32>
  %174 = add <8 x i32> %173, %172
  %175 = and <4 x i64> %164, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %176 = and <4 x i64> %171, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %177 = bitcast <8 x i32> %167 to <32 x i8>
  %178 = and <32 x i8> %177, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %179 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %180 = bitcast <32 x i8> %179 to <4 x i64>
  %181 = bitcast <8 x i32> %174 to <32 x i8>
  %182 = and <32 x i8> %181, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %183 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %182, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %184 = bitcast <32 x i8> %183 to <4 x i64>
  %185 = or <4 x i64> %175, %180
  %186 = or <4 x i64> %176, %184
  %187 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %188 = shufflevector <4 x i64> %185, <4 x i64> %186, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %189 = bitcast <4 x i64> %187 to <8 x i32>
  %190 = bitcast <4 x i64> %188 to <8 x i32>
  %191 = add <8 x i32> %190, %189
  %192 = bitcast <8 x i32> %191 to <4 x i64>
  %193 = shufflevector <8 x i32> %191, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %194 = shufflevector <4 x i64> %192, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %195 = bitcast <2 x i64> %194 to <4 x i32>
  %196 = add <4 x i32> %193, %195
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %197 = shl <4 x i32> %196, <i32 1, i32 1, i32 1, i32 1>
  %198 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %197, <4 x i32>* %198, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_128x64x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = extractelement <4 x i16*> %18, i32 0
  br label %22

22:                                               ; preds = %137, %5
  %23 = phi i16* [ %21, %5 ], [ %139, %137 ]
  %24 = phi i64 [ 0, %5 ], [ %135, %137 ]
  %25 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %24
  %26 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %24
  %27 = bitcast <4 x i64>* %26 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 32
  br label %29

29:                                               ; preds = %29, %22
  %30 = phi <8 x i32> [ %28, %22 ], [ %129, %29 ]
  %31 = phi i16* [ %23, %22 ], [ %131, %29 ]
  %32 = phi i32 [ 0, %22 ], [ %132, %29 ]
  %33 = phi i16* [ %14, %22 ], [ %130, %29 ]
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %33, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %33, i64 32
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %33, i64 48
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = bitcast i16* %31 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %31, i64 16
  %48 = bitcast i16* %47 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %31, i64 32
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %31, i64 48
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = sub <16 x i16> %35, %46
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %38, %49
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %41, %52
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %44, %55
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = add <16 x i16> %63, %59
  %73 = add <16 x i16> %72, %67
  %74 = add <16 x i16> %73, %71
  %75 = shufflevector <16 x i16> %74, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = shufflevector <16 x i16> %74, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = bitcast <16 x i16> %75 to <8 x i32>
  %78 = bitcast <16 x i16> %76 to <8 x i32>
  %79 = add <8 x i32> %30, %77
  %80 = add <8 x i32> %79, %78
  store <8 x i32> %80, <8 x i32>* %27, align 32
  %81 = getelementptr inbounds i16, i16* %33, i64 64
  %82 = getelementptr inbounds i16, i16* %31, i64 64
  %83 = bitcast i16* %81 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %33, i64 80
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %33, i64 96
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %33, i64 112
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = bitcast i16* %82 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %31, i64 80
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %31, i64 96
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %31, i64 112
  %103 = bitcast i16* %102 to <16 x i16>*
  %104 = load <16 x i16>, <16 x i16>* %103, align 1
  %105 = sub <16 x i16> %84, %95
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %87, %98
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %90, %101
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %93, %104
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = add <16 x i16> %112, %108
  %122 = add <16 x i16> %121, %116
  %123 = add <16 x i16> %122, %120
  %124 = shufflevector <16 x i16> %123, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %125 = shufflevector <16 x i16> %123, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = bitcast <16 x i16> %124 to <8 x i32>
  %127 = bitcast <16 x i16> %125 to <8 x i32>
  %128 = add <8 x i32> %80, %126
  %129 = add <8 x i32> %128, %127
  store <8 x i32> %129, <8 x i32>* %27, align 32
  %130 = getelementptr inbounds i16, i16* %33, i64 %19
  %131 = getelementptr inbounds i16, i16* %31, i64 %20
  store i16* %131, i16** %25, align 8
  %132 = add nuw nsw i32 %32, 1
  %133 = icmp eq i32 %132, 32
  br i1 %133, label %134, label %29

134:                                              ; preds = %29
  %135 = add nuw nsw i64 %24, 1
  %136 = icmp eq i64 %135, 4
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %135
  %139 = load i16*, i16** %138, align 8
  br label %22

140:                                              ; preds = %134
  %141 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %142 = load <4 x i64>, <4 x i64>* %141, align 32
  %143 = bitcast <4 x i64> %142 to <32 x i8>
  %144 = shufflevector <32 x i8> %143, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %145 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %146 = bitcast <4 x i64>* %145 to <32 x i8>*
  %147 = load <32 x i8>, <32 x i8>* %146, align 32
  %148 = shufflevector <32 x i8> %147, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %150 = bitcast <4 x i64>* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 32
  %152 = shufflevector <32 x i8> %151, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <32 x i8> %144 to <8 x i32>
  %158 = bitcast <4 x i64> %142 to <8 x i32>
  %159 = add <8 x i32> %157, %158
  %160 = bitcast <8 x i32> %159 to <4 x i64>
  %161 = bitcast <32 x i8> %147 to <8 x i32>
  %162 = bitcast <32 x i8> %148 to <8 x i32>
  %163 = add <8 x i32> %162, %161
  %164 = bitcast <32 x i8> %151 to <8 x i32>
  %165 = bitcast <32 x i8> %152 to <8 x i32>
  %166 = add <8 x i32> %165, %164
  %167 = bitcast <8 x i32> %166 to <4 x i64>
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = add <8 x i32> %169, %168
  %171 = and <4 x i64> %160, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %172 = and <4 x i64> %167, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %173 = bitcast <8 x i32> %163 to <32 x i8>
  %174 = and <32 x i8> %173, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %175 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %174, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %176 = bitcast <32 x i8> %175 to <4 x i64>
  %177 = bitcast <8 x i32> %170 to <32 x i8>
  %178 = and <32 x i8> %177, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %179 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %180 = bitcast <32 x i8> %179 to <4 x i64>
  %181 = or <4 x i64> %171, %176
  %182 = or <4 x i64> %172, %180
  %183 = shufflevector <4 x i64> %181, <4 x i64> %182, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %184 = shufflevector <4 x i64> %181, <4 x i64> %182, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %185 = bitcast <4 x i64> %183 to <8 x i32>
  %186 = bitcast <4 x i64> %184 to <8 x i32>
  %187 = add <8 x i32> %186, %185
  %188 = bitcast <8 x i32> %187 to <4 x i64>
  %189 = shufflevector <8 x i32> %187, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %190 = shufflevector <4 x i64> %188, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %191 = bitcast <2 x i64> %190 to <4 x i32>
  %192 = add <4 x i32> %189, %191
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %193 = shl <4 x i32> %192, <i32 1, i32 1, i32 1, i32 1>
  %194 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %194, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @aom_highbd_sad_skip_128x128x4d_avx2(i8*, i32, i8** nocapture readonly, i32, i32* nocapture) local_unnamed_addr #4 {
  %6 = alloca [4 x <4 x i64>], align 32
  %7 = alloca <4 x i16*>, align 16
  %8 = shl nsw i32 %1, 1
  %9 = shl nsw i32 %3, 1
  %10 = bitcast [4 x <4 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #6
  %11 = bitcast <4 x i16*>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11) #6
  %12 = ptrtoint i8* %0 to i64
  %13 = shl i64 %12, 1
  %14 = inttoptr i64 %13 to i16*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %10, i8 0, i64 128, i1 false) #6
  %15 = bitcast i8** %2 to <4 x i64>*
  %16 = load <4 x i64>, <4 x i64>* %15, align 8
  %17 = shl <4 x i64> %16, <i64 1, i64 1, i64 1, i64 1>
  %18 = inttoptr <4 x i64> %17 to <4 x i16*>
  store <4 x i16*> %18, <4 x i16*>* %7, align 16
  %19 = sext i32 %8 to i64
  %20 = sext i32 %9 to i64
  %21 = extractelement <4 x i16*> %18, i32 0
  br label %22

22:                                               ; preds = %137, %5
  %23 = phi i16* [ %21, %5 ], [ %139, %137 ]
  %24 = phi i64 [ 0, %5 ], [ %135, %137 ]
  %25 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %24
  %26 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 %24
  %27 = bitcast <4 x i64>* %26 to <8 x i32>*
  %28 = load <8 x i32>, <8 x i32>* %27, align 32
  br label %29

29:                                               ; preds = %29, %22
  %30 = phi <8 x i32> [ %28, %22 ], [ %129, %29 ]
  %31 = phi i16* [ %23, %22 ], [ %131, %29 ]
  %32 = phi i32 [ 0, %22 ], [ %132, %29 ]
  %33 = phi i16* [ %14, %22 ], [ %130, %29 ]
  %34 = bitcast i16* %33 to <16 x i16>*
  %35 = load <16 x i16>, <16 x i16>* %34, align 1
  %36 = getelementptr inbounds i16, i16* %33, i64 16
  %37 = bitcast i16* %36 to <16 x i16>*
  %38 = load <16 x i16>, <16 x i16>* %37, align 1
  %39 = getelementptr inbounds i16, i16* %33, i64 32
  %40 = bitcast i16* %39 to <16 x i16>*
  %41 = load <16 x i16>, <16 x i16>* %40, align 1
  %42 = getelementptr inbounds i16, i16* %33, i64 48
  %43 = bitcast i16* %42 to <16 x i16>*
  %44 = load <16 x i16>, <16 x i16>* %43, align 1
  %45 = bitcast i16* %31 to <16 x i16>*
  %46 = load <16 x i16>, <16 x i16>* %45, align 1
  %47 = getelementptr inbounds i16, i16* %31, i64 16
  %48 = bitcast i16* %47 to <16 x i16>*
  %49 = load <16 x i16>, <16 x i16>* %48, align 1
  %50 = getelementptr inbounds i16, i16* %31, i64 32
  %51 = bitcast i16* %50 to <16 x i16>*
  %52 = load <16 x i16>, <16 x i16>* %51, align 1
  %53 = getelementptr inbounds i16, i16* %31, i64 48
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = sub <16 x i16> %35, %46
  %57 = sub <16 x i16> zeroinitializer, %56
  %58 = icmp slt <16 x i16> %56, zeroinitializer
  %59 = select <16 x i1> %58, <16 x i16> %57, <16 x i16> %56
  %60 = sub <16 x i16> %38, %49
  %61 = sub <16 x i16> zeroinitializer, %60
  %62 = icmp slt <16 x i16> %60, zeroinitializer
  %63 = select <16 x i1> %62, <16 x i16> %61, <16 x i16> %60
  %64 = sub <16 x i16> %41, %52
  %65 = sub <16 x i16> zeroinitializer, %64
  %66 = icmp slt <16 x i16> %64, zeroinitializer
  %67 = select <16 x i1> %66, <16 x i16> %65, <16 x i16> %64
  %68 = sub <16 x i16> %44, %55
  %69 = sub <16 x i16> zeroinitializer, %68
  %70 = icmp slt <16 x i16> %68, zeroinitializer
  %71 = select <16 x i1> %70, <16 x i16> %69, <16 x i16> %68
  %72 = add <16 x i16> %63, %59
  %73 = add <16 x i16> %72, %67
  %74 = add <16 x i16> %73, %71
  %75 = shufflevector <16 x i16> %74, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %76 = shufflevector <16 x i16> %74, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %77 = bitcast <16 x i16> %75 to <8 x i32>
  %78 = bitcast <16 x i16> %76 to <8 x i32>
  %79 = add <8 x i32> %30, %77
  %80 = add <8 x i32> %79, %78
  store <8 x i32> %80, <8 x i32>* %27, align 32
  %81 = getelementptr inbounds i16, i16* %33, i64 64
  %82 = getelementptr inbounds i16, i16* %31, i64 64
  %83 = bitcast i16* %81 to <16 x i16>*
  %84 = load <16 x i16>, <16 x i16>* %83, align 1
  %85 = getelementptr inbounds i16, i16* %33, i64 80
  %86 = bitcast i16* %85 to <16 x i16>*
  %87 = load <16 x i16>, <16 x i16>* %86, align 1
  %88 = getelementptr inbounds i16, i16* %33, i64 96
  %89 = bitcast i16* %88 to <16 x i16>*
  %90 = load <16 x i16>, <16 x i16>* %89, align 1
  %91 = getelementptr inbounds i16, i16* %33, i64 112
  %92 = bitcast i16* %91 to <16 x i16>*
  %93 = load <16 x i16>, <16 x i16>* %92, align 1
  %94 = bitcast i16* %82 to <16 x i16>*
  %95 = load <16 x i16>, <16 x i16>* %94, align 1
  %96 = getelementptr inbounds i16, i16* %31, i64 80
  %97 = bitcast i16* %96 to <16 x i16>*
  %98 = load <16 x i16>, <16 x i16>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %31, i64 96
  %100 = bitcast i16* %99 to <16 x i16>*
  %101 = load <16 x i16>, <16 x i16>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %31, i64 112
  %103 = bitcast i16* %102 to <16 x i16>*
  %104 = load <16 x i16>, <16 x i16>* %103, align 1
  %105 = sub <16 x i16> %84, %95
  %106 = sub <16 x i16> zeroinitializer, %105
  %107 = icmp slt <16 x i16> %105, zeroinitializer
  %108 = select <16 x i1> %107, <16 x i16> %106, <16 x i16> %105
  %109 = sub <16 x i16> %87, %98
  %110 = sub <16 x i16> zeroinitializer, %109
  %111 = icmp slt <16 x i16> %109, zeroinitializer
  %112 = select <16 x i1> %111, <16 x i16> %110, <16 x i16> %109
  %113 = sub <16 x i16> %90, %101
  %114 = sub <16 x i16> zeroinitializer, %113
  %115 = icmp slt <16 x i16> %113, zeroinitializer
  %116 = select <16 x i1> %115, <16 x i16> %114, <16 x i16> %113
  %117 = sub <16 x i16> %93, %104
  %118 = sub <16 x i16> zeroinitializer, %117
  %119 = icmp slt <16 x i16> %117, zeroinitializer
  %120 = select <16 x i1> %119, <16 x i16> %118, <16 x i16> %117
  %121 = add <16 x i16> %112, %108
  %122 = add <16 x i16> %121, %116
  %123 = add <16 x i16> %122, %120
  %124 = shufflevector <16 x i16> %123, <16 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %125 = shufflevector <16 x i16> %123, <16 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %126 = bitcast <16 x i16> %124 to <8 x i32>
  %127 = bitcast <16 x i16> %125 to <8 x i32>
  %128 = add <8 x i32> %80, %126
  %129 = add <8 x i32> %128, %127
  store <8 x i32> %129, <8 x i32>* %27, align 32
  %130 = getelementptr inbounds i16, i16* %33, i64 %19
  %131 = getelementptr inbounds i16, i16* %31, i64 %20
  store i16* %131, i16** %25, align 8
  %132 = add nuw nsw i32 %32, 1
  %133 = icmp eq i32 %132, 64
  br i1 %133, label %134, label %29

134:                                              ; preds = %29
  %135 = add nuw nsw i64 %24, 1
  %136 = icmp eq i64 %135, 4
  br i1 %136, label %140, label %137

137:                                              ; preds = %134
  %138 = getelementptr inbounds <4 x i16*>, <4 x i16*>* %7, i64 0, i64 %135
  %139 = load i16*, i16** %138, align 8
  br label %22

140:                                              ; preds = %134
  %141 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 0
  %142 = load <4 x i64>, <4 x i64>* %141, align 32
  %143 = bitcast <4 x i64> %142 to <32 x i8>
  %144 = shufflevector <32 x i8> %143, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %145 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 1
  %146 = bitcast <4 x i64>* %145 to <32 x i8>*
  %147 = load <32 x i8>, <32 x i8>* %146, align 32
  %148 = shufflevector <32 x i8> %147, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %149 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 2
  %150 = bitcast <4 x i64>* %149 to <32 x i8>*
  %151 = load <32 x i8>, <32 x i8>* %150, align 32
  %152 = shufflevector <32 x i8> %151, <32 x i8> <i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51>
  %153 = getelementptr inbounds [4 x <4 x i64>], [4 x <4 x i64>]* %6, i64 0, i64 3
  %154 = bitcast <4 x i64>* %153 to <32 x i8>*
  %155 = load <32 x i8>, <32 x i8>* %154, align 32
  %156 = shufflevector <32 x i8> %155, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 undef, i32 undef, i32 undef, i32 undef>
  %157 = bitcast <32 x i8> %144 to <8 x i32>
  %158 = bitcast <4 x i64> %142 to <8 x i32>
  %159 = add <8 x i32> %157, %158
  %160 = bitcast <8 x i32> %159 to <4 x i64>
  %161 = bitcast <32 x i8> %147 to <8 x i32>
  %162 = bitcast <32 x i8> %148 to <8 x i32>
  %163 = add <8 x i32> %162, %161
  %164 = bitcast <32 x i8> %151 to <8 x i32>
  %165 = bitcast <32 x i8> %152 to <8 x i32>
  %166 = add <8 x i32> %165, %164
  %167 = bitcast <8 x i32> %166 to <4 x i64>
  %168 = bitcast <32 x i8> %155 to <8 x i32>
  %169 = bitcast <32 x i8> %156 to <8 x i32>
  %170 = add <8 x i32> %169, %168
  %171 = and <4 x i64> %160, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %172 = and <4 x i64> %167, <i64 4294967295, i64 4294967295, i64 4294967295, i64 4294967295>
  %173 = bitcast <8 x i32> %163 to <32 x i8>
  %174 = and <32 x i8> %173, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %175 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %174, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %176 = bitcast <32 x i8> %175 to <4 x i64>
  %177 = bitcast <8 x i32> %170 to <32 x i8>
  %178 = and <32 x i8> %177, <i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef, i8 -1, i8 -1, i8 -1, i8 -1, i8 0, i8 0, i8 0, i8 0, i8 -1, i8 -1, i8 -1, i8 -1, i8 undef, i8 undef, i8 undef, i8 undef>
  %179 = shufflevector <32 x i8> <i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 0, i8 0, i8 0, i8 0>, <32 x i8> %178, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 28, i32 29, i32 30, i32 31, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59>
  %180 = bitcast <32 x i8> %179 to <4 x i64>
  %181 = or <4 x i64> %171, %176
  %182 = or <4 x i64> %172, %180
  %183 = shufflevector <4 x i64> %181, <4 x i64> %182, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  %184 = shufflevector <4 x i64> %181, <4 x i64> %182, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  %185 = bitcast <4 x i64> %183 to <8 x i32>
  %186 = bitcast <4 x i64> %184 to <8 x i32>
  %187 = add <8 x i32> %186, %185
  %188 = bitcast <8 x i32> %187 to <4 x i64>
  %189 = shufflevector <8 x i32> %187, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %190 = shufflevector <4 x i64> %188, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %191 = bitcast <2 x i64> %190 to <4 x i32>
  %192 = add <4 x i32> %189, %191
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11) #6
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #6
  %193 = shl <4 x i32> %192, <i32 1, i32 1, i32 1, i32 1>
  %194 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %194, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16>, <16 x i16>) #5

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
