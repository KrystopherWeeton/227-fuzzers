; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_tile_common.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_tile_common.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%union.int_mv = type { i32 }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_tile_set_row(%struct.TileInfo* nocapture, %struct.VP9Common* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 33
  %5 = load i32, i32* %4, align 16
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 86
  %7 = load i32, i32* %6, align 4
  %8 = add nsw i32 %5, 7
  %9 = ashr i32 %8, 3
  %10 = mul nsw i32 %9, %2
  %11 = ashr i32 %10, %7
  %12 = shl i32 %11, 3
  %13 = icmp slt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = add nsw i32 %2, 1
  %17 = load i32, i32* %4, align 16
  %18 = load i32, i32* %6, align 4
  %19 = add nsw i32 %17, 7
  %20 = ashr i32 %19, 3
  %21 = mul nsw i32 %20, %16
  %22 = ashr i32 %21, %18
  %23 = shl i32 %22, 3
  %24 = icmp slt i32 %23, %17
  %25 = select i1 %24, i32 %23, i32 %17
  %26 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 1
  store i32 %25, i32* %26, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_tile_set_col(%struct.TileInfo* nocapture, %struct.VP9Common* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 35
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 85
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %5, 7
  %9 = ashr i32 %8, 3
  %10 = mul nsw i32 %9, %2
  %11 = ashr i32 %10, %7
  %12 = shl i32 %11, 3
  %13 = icmp slt i32 %12, %5
  %14 = select i1 %13, i32 %12, i32 %5
  %15 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 2
  store i32 %14, i32* %15, align 4
  %16 = add nsw i32 %2, 1
  %17 = load i32, i32* %4, align 8
  %18 = load i32, i32* %6, align 8
  %19 = add nsw i32 %17, 7
  %20 = ashr i32 %19, 3
  %21 = mul nsw i32 %20, %16
  %22 = ashr i32 %21, %18
  %23 = shl i32 %22, 3
  %24 = icmp slt i32 %23, %17
  %25 = select i1 %24, i32 %23, i32 %17
  %26 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 3
  store i32 %25, i32* %26, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_tile_init(%struct.TileInfo* nocapture, %struct.VP9Common* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 33
  %6 = load i32, i32* %5, align 16
  %7 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 86
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %6, 7
  %10 = ashr i32 %9, 3
  %11 = mul nsw i32 %10, %2
  %12 = ashr i32 %11, %8
  %13 = shl i32 %12, 3
  %14 = icmp slt i32 %13, %6
  %15 = select i1 %14, i32 %13, i32 %6
  %16 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 0
  store i32 %15, i32* %16, align 4
  %17 = add nsw i32 %2, 1
  %18 = load i32, i32* %5, align 16
  %19 = load i32, i32* %7, align 4
  %20 = add nsw i32 %18, 7
  %21 = ashr i32 %20, 3
  %22 = mul nsw i32 %21, %17
  %23 = ashr i32 %22, %19
  %24 = shl i32 %23, 3
  %25 = icmp slt i32 %24, %18
  %26 = select i1 %25, i32 %24, i32 %18
  %27 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 1
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 35
  %29 = load i32, i32* %28, align 8
  %30 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 85
  %31 = load i32, i32* %30, align 8
  %32 = add nsw i32 %29, 7
  %33 = ashr i32 %32, 3
  %34 = mul nsw i32 %33, %3
  %35 = ashr i32 %34, %31
  %36 = shl i32 %35, 3
  %37 = icmp slt i32 %36, %29
  %38 = select i1 %37, i32 %36, i32 %29
  %39 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 2
  store i32 %38, i32* %39, align 4
  %40 = add nsw i32 %3, 1
  %41 = load i32, i32* %28, align 8
  %42 = load i32, i32* %30, align 8
  %43 = add nsw i32 %41, 7
  %44 = ashr i32 %43, 3
  %45 = mul nsw i32 %44, %40
  %46 = ashr i32 %45, %42
  %47 = shl i32 %46, 3
  %48 = icmp slt i32 %47, %41
  %49 = select i1 %48, i32 %47, i32 %41
  %50 = getelementptr inbounds %struct.TileInfo, %struct.TileInfo* %0, i64 0, i32 3
  store i32 %49, i32* %50, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp9_get_tile_n_bits(i32, i32* nocapture, i32* nocapture) local_unnamed_addr #1 {
  %4 = add nsw i32 %0, 7
  %5 = ashr i32 %4, 3
  br label %6

6:                                                ; preds = %6, %3
  %7 = phi i32 [ 0, %3 ], [ %10, %6 ]
  %8 = shl i32 64, %7
  %9 = icmp slt i32 %8, %5
  %10 = add nuw nsw i32 %7, 1
  br i1 %9, label %6, label %11

11:                                               ; preds = %6
  store i32 %7, i32* %1, align 4
  br label %12

12:                                               ; preds = %12, %11
  %13 = phi i32 [ 1, %11 ], [ %16, %12 ]
  %14 = ashr i32 %5, %13
  %15 = icmp sgt i32 %14, 3
  %16 = add nuw nsw i32 %13, 1
  br i1 %15, label %12, label %17

17:                                               ; preds = %12
  %18 = add nsw i32 %13, -1
  store i32 %18, i32* %2, align 4
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
