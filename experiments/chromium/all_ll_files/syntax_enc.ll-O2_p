; ModuleID = '../../third_party/libwebp/src/enc/syntax_enc.c'
source_filename = "../../third_party/libwebp/src/enc/syntax_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }

@__const.PutRIFFHeader.riff = private unnamed_addr constant [12 x i8] c"RIFF\00\00\00\00WEBP", align 1
@__const.PutVP8XHeader.vp8x = private unnamed_addr constant <{ i8, i8, i8, i8, [14 x i8] }> <{ i8 86, i8 80, i8 56, i8 88, [14 x i8] zeroinitializer }>, align 16
@PutPaddingByte.pad_byte = internal constant [1 x i8] zeroinitializer, align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @VP8EncFreeBitWriters(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 9
  tail call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %2) #3
  %3 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 8
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %13

6:                                                ; preds = %1, %6
  %7 = phi i64 [ %9, %6 ], [ 0, %1 ]
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %7
  tail call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %8) #3
  %9 = add nuw nsw i64 %7, 1
  %10 = load i32, i32* %3, align 4
  %11 = sext i32 %10 to i64
  %12 = icmp slt i64 %9, %11
  br i1 %12, label %6, label %13

13:                                               ; preds = %6, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @VP8BitWriterWipeOut(%struct.VP8BitWriter*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncWrite(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = alloca [21 x i8], align 16
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca [18 x i8], align 16
  %6 = alloca [10 x i8], align 1
  %7 = alloca [12 x i8], align 1
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %9 = load %struct.WebPPicture*, %struct.WebPPicture** %8, align 8
  %10 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 9
  %11 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 8
  %12 = load i32, i32* %11, align 4
  %13 = sdiv i32 19, %12
  %14 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 12
  %15 = load i32, i32* %14, align 8
  %16 = add nsw i32 %15, 19
  %17 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 5
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 6
  %20 = load i32, i32* %19, align 4
  %21 = mul i32 %18, 7
  %22 = mul i32 %21, %20
  %23 = sdiv i32 %22, 8
  %24 = sext i32 %23 to i64
  %25 = tail call i32 @VP8BitWriterInit(%struct.VP8BitWriter* %10, i64 %24) #3
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %141, label %27

27:                                               ; preds = %1
  %28 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 0) #3
  %29 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 0) #3
  %30 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 0
  %31 = load i32, i32* %30, align 4
  %32 = icmp sgt i32 %31, 1
  %33 = zext i1 %32 to i32
  %34 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %33) #3
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %93, label %36

36:                                               ; preds = %27
  %37 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %38) #3
  %40 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 1) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %60, label %42

42:                                               ; preds = %36
  %43 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 1) #3
  %44 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 0, i32 5
  %45 = load i32, i32* %44, align 8
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %45, i32 7) #3
  %46 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 1, i32 5
  %47 = load i32, i32* %46, align 8
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %47, i32 7) #3
  %48 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 2, i32 5
  %49 = load i32, i32* %48, align 8
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %49, i32 7) #3
  %50 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 3, i32 5
  %51 = load i32, i32* %50, align 8
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %51, i32 7) #3
  %52 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 0, i32 6
  %53 = load i32, i32* %52, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %53, i32 6) #3
  %54 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 1, i32 6
  %55 = load i32, i32* %54, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %55, i32 6) #3
  %56 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 2, i32 6
  %57 = load i32, i32* %56, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %57, i32 6) #3
  %58 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 3, i32 6
  %59 = load i32, i32* %58, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %59, i32 6) #3
  br label %60

60:                                               ; preds = %42, %36
  %61 = load i32, i32* %37, align 4
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %93, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 0
  %65 = load i8, i8* %64, align 1
  %66 = icmp ne i8 %65, -1
  %67 = zext i1 %66 to i32
  %68 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %67) #3
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %63
  %71 = load i8, i8* %64, align 1
  %72 = zext i8 %71 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %72, i32 8) #3
  br label %73

73:                                               ; preds = %70, %63
  %74 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 1
  %75 = load i8, i8* %74, align 1
  %76 = icmp ne i8 %75, -1
  %77 = zext i1 %76 to i32
  %78 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %77) #3
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %83, label %80

80:                                               ; preds = %73
  %81 = load i8, i8* %74, align 1
  %82 = zext i8 %81 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %82, i32 8) #3
  br label %83

83:                                               ; preds = %80, %73
  %84 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26, i32 0, i64 2
  %85 = load i8, i8* %84, align 1
  %86 = icmp ne i8 %85, -1
  %87 = zext i1 %86 to i32
  %88 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %87) #3
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %93, label %90

90:                                               ; preds = %83
  %91 = load i8, i8* %84, align 1
  %92 = zext i8 %91 to i32
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %92, i32 8) #3
  br label %93

93:                                               ; preds = %90, %83, %60, %27
  %94 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 2, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = icmp ne i32 %95, 0
  %97 = zext i1 %96 to i32
  %98 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 2, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %99) #3
  %101 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 2, i32 1
  %102 = load i32, i32* %101, align 4
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %102, i32 6) #3
  %103 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 2, i32 2
  %104 = load i32, i32* %103, align 4
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %104, i32 3) #3
  %105 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %97) #3
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %93
  %108 = load i32, i32* %94, align 4
  %109 = icmp ne i32 %108, 0
  %110 = zext i1 %109 to i32
  %111 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 %110) #3
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %115, label %113

113:                                              ; preds = %107
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 0, i32 4) #3
  %114 = load i32, i32* %94, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %114, i32 6) #3
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 0, i32 3) #3
  br label %115

115:                                              ; preds = %113, %107, %93
  %116 = load i32, i32* %11, align 4
  switch i32 %116, label %117 [
    i32 8, label %121
    i32 4, label %120
  ]

117:                                              ; preds = %115
  %118 = icmp eq i32 %116, 2
  %119 = zext i1 %118 to i32
  br label %121

120:                                              ; preds = %115
  br label %121

121:                                              ; preds = %120, %117, %115
  %122 = phi i32 [ 3, %115 ], [ %119, %117 ], [ 2, %120 ]
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %122, i32 2) #3
  %123 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 18
  %124 = load i32, i32* %123, align 8
  tail call void @VP8PutBits(%struct.VP8BitWriter* %10, i32 %124, i32 7) #3
  %125 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 21
  %126 = load i32, i32* %125, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %126, i32 4) #3
  %127 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 22
  %128 = load i32, i32* %127, align 8
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %128, i32 4) #3
  %129 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 23
  %130 = load i32, i32* %129, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %130, i32 4) #3
  %131 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 24
  %132 = load i32, i32* %131, align 8
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %132, i32 4) #3
  %133 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 25
  %134 = load i32, i32* %133, align 4
  tail call void @VP8PutSignedBits(%struct.VP8BitWriter* %10, i32 %134, i32 4) #3
  %135 = tail call i32 @VP8PutBitUniform(%struct.VP8BitWriter* %10, i32 0) #3
  %136 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 26
  tail call void @VP8WriteProbas(%struct.VP8BitWriter* %10, %struct.VP8EncProba* %136) #3
  tail call void @VP8CodeIntraModes(%struct.VP8Encoder* %0) #3
  %137 = tail call i8* @VP8BitWriterFinish(%struct.VP8BitWriter* %10) #3
  %138 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 9, i32 7
  %139 = load i32, i32* %138, align 8
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %145, label %141

141:                                              ; preds = %121, %1
  %142 = load %struct.WebPPicture*, %struct.WebPPicture** %8, align 8
  %143 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* %142, i32 1) #3
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %491, label %145

145:                                              ; preds = %121, %141
  %146 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 9, i32 5
  %147 = load i64, i64* %146, align 8
  %148 = add i64 %147, 10
  %149 = load i32, i32* %11, align 4
  %150 = mul i32 %149, 3
  %151 = add i32 %150, -3
  %152 = sext i32 %151 to i64
  %153 = add i64 %148, %152
  %154 = icmp sgt i32 %149, 0
  br i1 %154, label %155, label %197

155:                                              ; preds = %145
  %156 = zext i32 %149 to i64
  %157 = icmp ult i32 %149, 5
  br i1 %157, label %186, label %158

158:                                              ; preds = %155
  %159 = and i64 %156, 3
  %160 = icmp eq i64 %159, 0
  %161 = select i1 %160, i64 4, i64 %159
  %162 = sub nsw i64 %156, %161
  %163 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %153, i32 0
  br label %164

164:                                              ; preds = %164, %158
  %165 = phi i64 [ 0, %158 ], [ %179, %164 ]
  %166 = phi <2 x i64> [ %163, %158 ], [ %177, %164 ]
  %167 = phi <2 x i64> [ zeroinitializer, %158 ], [ %178, %164 ]
  %168 = or i64 %165, 2
  %169 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %165, i32 5
  %170 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %168, i32 5
  %171 = bitcast i64* %169 to <12 x i64>*
  %172 = bitcast i64* %170 to <12 x i64>*
  %173 = load <12 x i64>, <12 x i64>* %171, align 8
  %174 = load <12 x i64>, <12 x i64>* %172, align 8
  %175 = shufflevector <12 x i64> %173, <12 x i64> undef, <2 x i32> <i32 0, i32 6>
  %176 = shufflevector <12 x i64> %174, <12 x i64> undef, <2 x i32> <i32 0, i32 6>
  %177 = add <2 x i64> %175, %166
  %178 = add <2 x i64> %176, %167
  %179 = add i64 %165, 4
  %180 = icmp eq i64 %179, %162
  br i1 %180, label %181, label %164, !llvm.loop !2

181:                                              ; preds = %164
  %182 = add <2 x i64> %178, %177
  %183 = shufflevector <2 x i64> %182, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %184 = add <2 x i64> %182, %183
  %185 = extractelement <2 x i64> %184, i32 0
  br label %186

186:                                              ; preds = %181, %155
  %187 = phi i64 [ 0, %155 ], [ %162, %181 ]
  %188 = phi i64 [ %153, %155 ], [ %185, %181 ]
  br label %189

189:                                              ; preds = %186, %189
  %190 = phi i64 [ %195, %189 ], [ %187, %186 ]
  %191 = phi i64 [ %194, %189 ], [ %188, %186 ]
  %192 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %190, i32 5
  %193 = load i64, i64* %192, align 8
  %194 = add i64 %193, %191
  %195 = add nuw nsw i64 %190, 1
  %196 = icmp eq i64 %195, %156
  br i1 %196, label %197, label %189, !llvm.loop !4

197:                                              ; preds = %189, %145
  %198 = phi i64 [ %153, %145 ], [ %194, %189 ]
  %199 = and i64 %198, 1
  %200 = add i64 %199, %198
  %201 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 13
  %202 = load i32, i32* %201, align 4
  %203 = icmp eq i32 %202, 0
  %204 = select i1 %203, i64 12, i64 30
  %205 = add i64 %204, %200
  br i1 %203, label %214, label %206

206:                                              ; preds = %197
  %207 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 15
  %208 = load i32, i32* %207, align 8
  %209 = and i32 %208, 1
  %210 = add i32 %208, 8
  %211 = add i32 %210, %209
  %212 = zext i32 %211 to i64
  %213 = add i64 %205, %212
  br label %214

214:                                              ; preds = %197, %206
  %215 = phi i64 [ %213, %206 ], [ %205, %197 ]
  %216 = icmp ugt i64 %215, 4294967294
  br i1 %216, label %217, label %219

217:                                              ; preds = %214
  %218 = tail call i32 @WebPEncodingSetError(%struct.WebPPicture* %9, i32 9) #3
  br label %491

219:                                              ; preds = %214
  %220 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 9, i32 4
  %221 = load i8*, i8** %220, align 8
  %222 = load %struct.WebPPicture*, %struct.WebPPicture** %8, align 8
  %223 = getelementptr inbounds [12 x i8], [12 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %223) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %223, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @__const.PutRIFFHeader.riff, i64 0, i64 0), i64 12, i1 false) #3
  %224 = getelementptr inbounds [12 x i8], [12 x i8]* %7, i64 0, i64 4
  %225 = trunc i64 %215 to i32
  %226 = trunc i64 %215 to i8
  store i8 %226, i8* %224, align 1
  %227 = lshr i32 %225, 8
  %228 = trunc i32 %227 to i8
  %229 = getelementptr inbounds [12 x i8], [12 x i8]* %7, i64 0, i64 5
  store i8 %228, i8* %229, align 1
  %230 = getelementptr inbounds [12 x i8], [12 x i8]* %7, i64 0, i64 6
  %231 = lshr i32 %225, 16
  %232 = trunc i32 %231 to i8
  store i8 %232, i8* %230, align 1
  %233 = lshr i32 %225, 24
  %234 = trunc i32 %233 to i8
  %235 = getelementptr inbounds [12 x i8], [12 x i8]* %7, i64 0, i64 7
  store i8 %234, i8* %235, align 1
  %236 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %222, i64 0, i32 15
  %237 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %236, align 8
  %238 = call i32 %237(i8* nonnull %223, i64 12, %struct.WebPPicture* %222) #3
  %239 = icmp eq i32 %238, 0
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %223) #3
  br i1 %239, label %379, label %240

240:                                              ; preds = %219
  %241 = load i32, i32* %201, align 4
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %321, label %243

243:                                              ; preds = %240
  %244 = load %struct.WebPPicture*, %struct.WebPPicture** %8, align 8
  %245 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 18, i8* nonnull %245) #3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %245, i8* align 16 getelementptr inbounds (<{ i8, i8, i8, i8, [14 x i8] }>, <{ i8, i8, i8, i8, [14 x i8] }>* @__const.PutVP8XHeader.vp8x, i64 0, i32 0), i64 18, i1 false) #3
  %246 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 4
  store i8 10, i8* %246, align 4
  %247 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 5
  store i8 0, i8* %247, align 1
  %248 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 6
  store i8 0, i8* %248, align 2
  %249 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 7
  store i8 0, i8* %249, align 1
  %250 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 8
  store i8 16, i8* %250, align 8
  %251 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 9
  store i8 0, i8* %251, align 1
  %252 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 10
  store i8 0, i8* %252, align 2
  %253 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 11
  store i8 0, i8* %253, align 1
  %254 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 12
  %255 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %244, i64 0, i32 2
  %256 = load i32, i32* %255, align 8
  %257 = add nsw i32 %256, -1
  %258 = trunc i32 %257 to i8
  store i8 %258, i8* %254, align 4
  %259 = lshr i32 %257, 8
  %260 = trunc i32 %259 to i8
  %261 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 13
  store i8 %260, i8* %261, align 1
  %262 = lshr i32 %257, 16
  %263 = trunc i32 %262 to i8
  %264 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 14
  store i8 %263, i8* %264, align 2
  %265 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 15
  %266 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %244, i64 0, i32 3
  %267 = load i32, i32* %266, align 4
  %268 = add nsw i32 %267, -1
  %269 = trunc i32 %268 to i8
  store i8 %269, i8* %265, align 1
  %270 = lshr i32 %268, 8
  %271 = trunc i32 %270 to i8
  %272 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 16
  store i8 %271, i8* %272, align 16
  %273 = lshr i32 %268, 16
  %274 = trunc i32 %273 to i8
  %275 = getelementptr inbounds [18 x i8], [18 x i8]* %5, i64 0, i64 17
  store i8 %274, i8* %275, align 1
  %276 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %244, i64 0, i32 15
  %277 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %276, align 8
  %278 = call i32 %277(i8* nonnull %245, i64 18, %struct.WebPPicture* %244) #3
  %279 = icmp eq i32 %278, 0
  call void @llvm.lifetime.end.p0i8(i64 18, i8* nonnull %245) #3
  br i1 %279, label %379, label %280

280:                                              ; preds = %243
  %281 = load i32, i32* %201, align 4
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %321, label %283

283:                                              ; preds = %280
  %284 = load %struct.WebPPicture*, %struct.WebPPicture** %8, align 8
  %285 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %285) #3
  store i64 1213221953, i64* %4, align 8
  %286 = getelementptr inbounds i8, i8* %285, i64 4
  %287 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 15
  %288 = load i32, i32* %287, align 8
  %289 = trunc i32 %288 to i8
  store i8 %289, i8* %286, align 4
  %290 = lshr i32 %288, 8
  %291 = trunc i32 %290 to i8
  %292 = getelementptr inbounds i8, i8* %285, i64 5
  store i8 %291, i8* %292, align 1
  %293 = getelementptr inbounds i8, i8* %285, i64 6
  %294 = lshr i32 %288, 16
  %295 = trunc i32 %294 to i8
  store i8 %295, i8* %293, align 2
  %296 = lshr i32 %288, 24
  %297 = trunc i32 %296 to i8
  %298 = getelementptr inbounds i8, i8* %285, i64 7
  store i8 %297, i8* %298, align 1
  %299 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %284, i64 0, i32 15
  %300 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %299, align 8
  %301 = call i32 %300(i8* nonnull %285, i64 8, %struct.WebPPicture* %284) #3
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %319, label %303

303:                                              ; preds = %283
  %304 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %299, align 8
  %305 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 14
  %306 = load i8*, i8** %305, align 8
  %307 = load i32, i32* %287, align 8
  %308 = zext i32 %307 to i64
  %309 = call i32 %304(i8* %306, i64 %308, %struct.WebPPicture* %284) #3
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %319, label %311

311:                                              ; preds = %303
  %312 = load i32, i32* %287, align 8
  %313 = and i32 %312, 1
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %320, label %315

315:                                              ; preds = %311
  %316 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %299, align 8
  %317 = call i32 %316(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @PutPaddingByte.pad_byte, i64 0, i64 0), i64 1, %struct.WebPPicture* %284) #3
  %318 = icmp eq i32 %317, 0
  br i1 %318, label %319, label %320

319:                                              ; preds = %315, %303, %283
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %285) #3
  br label %379

320:                                              ; preds = %315, %311
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %285) #3
  br label %321

321:                                              ; preds = %320, %280, %240
  %322 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %322) #3
  store i64 540561494, i64* %3, align 8
  %323 = getelementptr inbounds i8, i8* %322, i64 4
  %324 = trunc i64 %200 to i32
  %325 = trunc i64 %200 to i8
  store i8 %325, i8* %323, align 4
  %326 = lshr i32 %324, 8
  %327 = trunc i32 %326 to i8
  %328 = getelementptr inbounds i8, i8* %322, i64 5
  store i8 %327, i8* %328, align 1
  %329 = getelementptr inbounds i8, i8* %322, i64 6
  %330 = lshr i32 %324, 16
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %329, align 2
  %332 = lshr i32 %324, 24
  %333 = trunc i32 %332 to i8
  %334 = getelementptr inbounds i8, i8* %322, i64 7
  store i8 %333, i8* %334, align 1
  %335 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %236, align 8
  %336 = call i32 %335(i8* nonnull %322, i64 8, %struct.WebPPicture* %222) #3
  %337 = icmp eq i32 %336, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %322) #3
  br i1 %337, label %379, label %338

338:                                              ; preds = %321
  %339 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 4
  %340 = load i32, i32* %339, align 4
  %341 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %341) #3
  %342 = icmp ugt i64 %147, 524287
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %341, i8 -86, i64 10, i1 false) #3
  br i1 %342, label %376, label %343

343:                                              ; preds = %338
  %344 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 9
  %345 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 8
  %346 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 7
  %347 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 6
  %348 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 5
  %349 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 4
  %350 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 3
  %351 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 2
  %352 = getelementptr inbounds [10 x i8], [10 x i8]* %6, i64 0, i64 1
  %353 = shl i32 %340, 1
  %354 = trunc i64 %147 to i32
  %355 = shl i32 %354, 5
  %356 = or i32 %353, %355
  %357 = trunc i32 %356 to i8
  %358 = or i8 %357, 16
  store i8 %358, i8* %341, align 1
  %359 = lshr i32 %356, 8
  %360 = trunc i32 %359 to i8
  store i8 %360, i8* %352, align 1
  %361 = lshr i32 %356, 16
  %362 = trunc i32 %361 to i8
  store i8 %362, i8* %351, align 1
  store i8 -99, i8* %350, align 1
  store i8 1, i8* %349, align 1
  store i8 42, i8* %348, align 1
  %363 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %222, i64 0, i32 2
  %364 = load i32, i32* %363, align 8
  %365 = trunc i32 %364 to i8
  store i8 %365, i8* %347, align 1
  %366 = lshr i32 %364, 8
  %367 = trunc i32 %366 to i8
  store i8 %367, i8* %346, align 1
  %368 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %222, i64 0, i32 3
  %369 = load i32, i32* %368, align 4
  %370 = trunc i32 %369 to i8
  store i8 %370, i8* %345, align 1
  %371 = lshr i32 %369, 8
  %372 = trunc i32 %371 to i8
  store i8 %372, i8* %344, align 1
  %373 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %236, align 8
  %374 = call i32 %373(i8* nonnull %341, i64 10, %struct.WebPPicture* %222) #3
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %378

376:                                              ; preds = %343, %338
  %377 = phi i32 [ 6, %338 ], [ 8, %343 ]
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %341) #3
  br label %379

378:                                              ; preds = %343
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %341) #3
  br label %383

379:                                              ; preds = %219, %243, %319, %321, %376
  %380 = phi i32 [ 8, %219 ], [ 8, %243 ], [ 8, %321 ], [ 8, %319 ], [ %377, %376 ]
  %381 = call i32 @WebPEncodingSetError(%struct.WebPPicture* %222, i32 %380) #3
  %382 = icmp eq i32 %381, 0
  br i1 %382, label %432, label %383

383:                                              ; preds = %378, %379
  %384 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %9, i64 0, i32 15
  %385 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %384, align 8
  %386 = call i32 %385(i8* %221, i64 %147, %struct.WebPPicture* %9) #3
  %387 = icmp eq i32 %386, 0
  br i1 %387, label %432, label %388

388:                                              ; preds = %383
  %389 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 21, i8* nonnull %389) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %389, i8 -86, i64 21, i1 false) #3
  %390 = load i32, i32* %11, align 4
  %391 = icmp sgt i32 %390, 1
  br i1 %391, label %392, label %428

392:                                              ; preds = %388
  %393 = add nsw i32 %390, -1
  %394 = sext i32 %393 to i64
  br label %395

395:                                              ; preds = %402, %392
  %396 = phi i64 [ 0, %392 ], [ %418, %402 ]
  %397 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %396, i32 5
  %398 = load i64, i64* %397, align 8
  %399 = icmp ugt i64 %398, 16777215
  br i1 %399, label %400, label %402

400:                                              ; preds = %395
  %401 = call i32 @WebPEncodingSetError(%struct.WebPPicture* %9, i32 7) #3
  br label %428

402:                                              ; preds = %395
  %403 = trunc i64 %398 to i8
  %404 = trunc i64 %396 to i32
  %405 = mul nsw i32 %404, 3
  %406 = zext i32 %405 to i64
  %407 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i64 0, i64 %406
  store i8 %403, i8* %407, align 1
  %408 = lshr i64 %398, 8
  %409 = trunc i64 %408 to i8
  %410 = add nuw nsw i32 %405, 1
  %411 = zext i32 %410 to i64
  %412 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i64 0, i64 %411
  store i8 %409, i8* %412, align 1
  %413 = lshr i64 %398, 16
  %414 = trunc i64 %413 to i8
  %415 = add nuw nsw i32 %405, 2
  %416 = zext i32 %415 to i64
  %417 = getelementptr inbounds [21 x i8], [21 x i8]* %2, i64 0, i64 %416
  store i8 %414, i8* %417, align 1
  %418 = add nuw nsw i64 %396, 1
  %419 = icmp slt i64 %418, %394
  br i1 %419, label %395, label %420

420:                                              ; preds = %402
  %421 = trunc i64 %418 to i32
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %428, label %423

423:                                              ; preds = %420
  %424 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %384, align 8
  %425 = mul i64 %418, 3
  %426 = and i64 %425, 4294967295
  %427 = call i32 %424(i8* nonnull %389, i64 %426, %struct.WebPPicture* %9) #3
  br label %428

428:                                              ; preds = %388, %400, %420, %423
  %429 = phi i32 [ %401, %400 ], [ %427, %423 ], [ 1, %420 ], [ 1, %388 ]
  call void @llvm.lifetime.end.p0i8(i64 21, i8* nonnull %389) #3
  %430 = icmp ne i32 %429, 0
  %431 = zext i1 %430 to i32
  br label %432

432:                                              ; preds = %383, %379, %428
  %433 = phi i32 [ 0, %383 ], [ 0, %379 ], [ %431, %428 ]
  call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %10) #3
  %434 = load i32, i32* %11, align 4
  %435 = icmp sgt i32 %434, 0
  br i1 %435, label %436, label %471

436:                                              ; preds = %432
  %437 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %9, i64 0, i32 15
  br label %438

438:                                              ; preds = %436, %464
  %439 = phi i64 [ 0, %436 ], [ %467, %464 ]
  %440 = phi i32 [ %433, %436 ], [ %466, %464 ]
  %441 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %439
  %442 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %439, i32 4
  %443 = load i8*, i8** %442, align 8
  %444 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 10, i64 %439, i32 5
  %445 = load i64, i64* %444, align 8
  %446 = icmp eq i64 %445, 0
  br i1 %446, label %456, label %447

447:                                              ; preds = %438
  %448 = icmp eq i32 %440, 0
  br i1 %448, label %453, label %449

449:                                              ; preds = %447
  %450 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %437, align 8
  %451 = call i32 %450(i8* %443, i64 %445, %struct.WebPPicture* %9) #3
  %452 = icmp ne i32 %451, 0
  br label %453

453:                                              ; preds = %447, %449
  %454 = phi i1 [ false, %447 ], [ %452, %449 ]
  %455 = zext i1 %454 to i32
  br label %456

456:                                              ; preds = %438, %453
  %457 = phi i32 [ %455, %453 ], [ %440, %438 ]
  call void @VP8BitWriterWipeOut(%struct.VP8BitWriter* %441) #3
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %464, label %459

459:                                              ; preds = %456
  %460 = load i32, i32* %14, align 8
  %461 = add nsw i32 %460, %13
  %462 = call i32 @WebPReportProgress(%struct.WebPPicture* %9, i32 %461, i32* %14) #3
  %463 = icmp ne i32 %462, 0
  br label %464

464:                                              ; preds = %456, %459
  %465 = phi i1 [ false, %456 ], [ %463, %459 ]
  %466 = zext i1 %465 to i32
  %467 = add nuw nsw i64 %439, 1
  %468 = load i32, i32* %11, align 4
  %469 = sext i32 %468 to i64
  %470 = icmp slt i64 %467, %469
  br i1 %470, label %438, label %471

471:                                              ; preds = %464, %432
  %472 = phi i32 [ %433, %432 ], [ %466, %464 ]
  %473 = icmp ne i32 %472, 0
  %474 = icmp ne i64 %199, 0
  %475 = and i1 %474, %473
  br i1 %475, label %476, label %482

476:                                              ; preds = %471
  %477 = getelementptr inbounds %struct.WebPPicture, %struct.WebPPicture* %9, i64 0, i32 15
  %478 = load i32 (i8*, i64, %struct.WebPPicture*)*, i32 (i8*, i64, %struct.WebPPicture*)** %477, align 8
  %479 = call i32 %478(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @PutPaddingByte.pad_byte, i64 0, i64 0), i64 1, %struct.WebPPicture* %9) #3
  %480 = icmp ne i32 %479, 0
  %481 = zext i1 %480 to i32
  br label %482

482:                                              ; preds = %476, %471
  %483 = phi i32 [ %481, %476 ], [ %472, %471 ]
  %484 = add i32 %225, 8
  %485 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 29
  store i32 %484, i32* %485, align 8
  %486 = icmp eq i32 %483, 0
  br i1 %486, label %491, label %487

487:                                              ; preds = %482
  %488 = call i32 @WebPReportProgress(%struct.WebPPicture* %9, i32 %16, i32* %14) #3
  %489 = icmp ne i32 %488, 0
  %490 = zext i1 %489 to i32
  br label %491

491:                                              ; preds = %487, %482, %141, %217
  %492 = phi i32 [ %218, %217 ], [ 0, %141 ], [ 0, %482 ], [ %490, %487 ]
  ret i32 %492
}

declare i32 @WebPEncodingSetError(%struct.WebPPicture*, i32) local_unnamed_addr #2

declare i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #2

declare i32 @VP8BitWriterInit(%struct.VP8BitWriter*, i64) local_unnamed_addr #2

declare i32 @VP8PutBitUniform(%struct.VP8BitWriter*, i32) local_unnamed_addr #2

declare void @VP8PutBits(%struct.VP8BitWriter*, i32, i32) local_unnamed_addr #2

declare void @VP8WriteProbas(%struct.VP8BitWriter*, %struct.VP8EncProba*) local_unnamed_addr #2

declare void @VP8CodeIntraModes(%struct.VP8Encoder*) local_unnamed_addr #2

declare i8* @VP8BitWriterFinish(%struct.VP8BitWriter*) local_unnamed_addr #2

declare void @VP8PutSignedBits(%struct.VP8BitWriter*, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
