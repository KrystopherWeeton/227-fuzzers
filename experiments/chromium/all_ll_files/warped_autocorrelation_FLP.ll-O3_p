; ModuleID = '../../third_party/opus/src/silk/float/warped_autocorrelation_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/warped_autocorrelation_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [37 x i8] c"assertion failed: ( order & 1 ) == 0\00", align 1
@.str.1 = private unnamed_addr constant [67 x i8] c"../../third_party/opus/src/silk/float/warped_autocorrelation_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_warped_autocorrelation_FLP(float* nocapture, float* nocapture readonly, float, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [25 x double], align 16
  %7 = alloca [25 x double], align 16
  %8 = bitcast [25 x double]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %8) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 0, i64 200, i1 false)
  %9 = bitcast [25 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 200, i1 false)
  %10 = and i32 %4, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %70

12:                                               ; preds = %5
  %13 = icmp sgt i32 %3, 0
  br i1 %13, label %14, label %85

14:                                               ; preds = %12
  %15 = icmp sgt i32 %4, 0
  %16 = fpext float %2 to double
  %17 = getelementptr inbounds [25 x double], [25 x double]* %6, i64 0, i64 0
  %18 = sext i32 %4 to i64
  %19 = getelementptr inbounds [25 x double], [25 x double]* %6, i64 0, i64 %18
  %20 = getelementptr inbounds [25 x double], [25 x double]* %7, i64 0, i64 %18
  %21 = zext i32 %3 to i64
  br i1 %15, label %28, label %22

22:                                               ; preds = %14
  %23 = load double, double* %20, align 8
  %24 = and i64 %21, 1
  %25 = icmp eq i32 %3, 1
  br i1 %25, label %71, label %26

26:                                               ; preds = %22
  %27 = sub nsw i64 %21, %24
  br label %151

28:                                               ; preds = %14, %63
  %29 = phi double [ %64, %63 ], [ 0.000000e+00, %14 ]
  %30 = phi i64 [ %68, %63 ], [ 0, %14 ]
  %31 = getelementptr inbounds float, float* %1, i64 %30
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  br label %34

34:                                               ; preds = %28, %34
  %35 = phi double [ %29, %28 ], [ %49, %34 ]
  %36 = phi i64 [ 0, %28 ], [ %47, %34 ]
  %37 = phi double [ %33, %28 ], [ %52, %34 ]
  %38 = getelementptr inbounds [25 x double], [25 x double]* %6, i64 0, i64 %36
  %39 = or i64 %36, 1
  %40 = getelementptr inbounds [25 x double], [25 x double]* %6, i64 0, i64 %39
  %41 = load double, double* %40, align 8
  %42 = fsub double %41, %37
  %43 = fmul double %42, %16
  %44 = fadd double %35, %43
  store double %37, double* %38, align 16
  %45 = load double, double* %17, align 16
  %46 = getelementptr inbounds [25 x double], [25 x double]* %7, i64 0, i64 %36
  %47 = add nuw nsw i64 %36, 2
  %48 = getelementptr inbounds [25 x double], [25 x double]* %6, i64 0, i64 %47
  %49 = load double, double* %48, align 16
  %50 = fsub double %49, %44
  %51 = fmul double %50, %16
  %52 = fadd double %41, %51
  store double %44, double* %40, align 8
  %53 = insertelement <2 x double> undef, double %37, i32 0
  %54 = insertelement <2 x double> %53, double %45, i32 1
  %55 = insertelement <2 x double> undef, double %45, i32 0
  %56 = insertelement <2 x double> %55, double %44, i32 1
  %57 = fmul <2 x double> %54, %56
  %58 = bitcast double* %46 to <2 x double>*
  %59 = load <2 x double>, <2 x double>* %58, align 16
  %60 = fadd <2 x double> %59, %57
  %61 = bitcast double* %46 to <2 x double>*
  store <2 x double> %60, <2 x double>* %61, align 16
  %62 = icmp slt i64 %47, %18
  br i1 %62, label %34, label %63

63:                                               ; preds = %34
  store double %52, double* %19, align 8
  %64 = load double, double* %17, align 16
  %65 = fmul double %52, %64
  %66 = load double, double* %20, align 8
  %67 = fadd double %66, %65
  store double %67, double* %20, align 8
  %68 = add nuw nsw i64 %30, 1
  %69 = icmp eq i64 %68, %21
  br i1 %69, label %85, label %28

70:                                               ; preds = %5
  tail call void @celt_fatal(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 49) #4
  unreachable

71:                                               ; preds = %151, %22
  %72 = phi double [ undef, %22 ], [ %167, %151 ]
  %73 = phi double [ %23, %22 ], [ %167, %151 ]
  %74 = phi i64 [ 0, %22 ], [ %168, %151 ]
  %75 = icmp eq i64 %24, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %71
  %77 = getelementptr inbounds float, float* %1, i64 %74
  %78 = load float, float* %77, align 4
  %79 = fpext float %78 to double
  store double %79, double* %19, align 8
  %80 = load double, double* %17, align 16
  %81 = fmul double %80, %79
  %82 = fadd double %73, %81
  br label %83

83:                                               ; preds = %71, %76
  %84 = phi double [ %72, %71 ], [ %82, %76 ]
  store double %84, double* %20, align 8
  br label %85

85:                                               ; preds = %63, %83, %12
  %86 = icmp slt i32 %4, 0
  br i1 %86, label %179, label %87

87:                                               ; preds = %85
  %88 = add nuw i32 %4, 1
  %89 = zext i32 %88 to i64
  %90 = icmp ult i32 %88, 4
  br i1 %90, label %91, label %93

91:                                               ; preds = %149, %87
  %92 = phi i64 [ 0, %87 ], [ %94, %149 ]
  br label %171

93:                                               ; preds = %87
  %94 = and i64 %89, 4294967292
  %95 = add nsw i64 %94, -4
  %96 = lshr exact i64 %95, 2
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 1
  %99 = icmp eq i64 %95, 0
  br i1 %99, label %133, label %100

100:                                              ; preds = %93
  %101 = sub nuw nsw i64 %97, %98
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ 0, %100 ], [ %130, %102 ]
  %104 = phi i64 [ %101, %100 ], [ %131, %102 ]
  %105 = getelementptr inbounds [25 x double], [25 x double]* %7, i64 0, i64 %103
  %106 = bitcast double* %105 to <2 x double>*
  %107 = load <2 x double>, <2 x double>* %106, align 16
  %108 = getelementptr inbounds double, double* %105, i64 2
  %109 = bitcast double* %108 to <2 x double>*
  %110 = load <2 x double>, <2 x double>* %109, align 16
  %111 = fptrunc <2 x double> %107 to <2 x float>
  %112 = fptrunc <2 x double> %110 to <2 x float>
  %113 = getelementptr inbounds float, float* %0, i64 %103
  %114 = bitcast float* %113 to <2 x float>*
  store <2 x float> %111, <2 x float>* %114, align 4
  %115 = getelementptr inbounds float, float* %113, i64 2
  %116 = bitcast float* %115 to <2 x float>*
  store <2 x float> %112, <2 x float>* %116, align 4
  %117 = or i64 %103, 4
  %118 = getelementptr inbounds [25 x double], [25 x double]* %7, i64 0, i64 %117
  %119 = bitcast double* %118 to <2 x double>*
  %120 = load <2 x double>, <2 x double>* %119, align 16
  %121 = getelementptr inbounds double, double* %118, i64 2
  %122 = bitcast double* %121 to <2 x double>*
  %123 = load <2 x double>, <2 x double>* %122, align 16
  %124 = fptrunc <2 x double> %120 to <2 x float>
  %125 = fptrunc <2 x double> %123 to <2 x float>
  %126 = getelementptr inbounds float, float* %0, i64 %117
  %127 = bitcast float* %126 to <2 x float>*
  store <2 x float> %124, <2 x float>* %127, align 4
  %128 = getelementptr inbounds float, float* %126, i64 2
  %129 = bitcast float* %128 to <2 x float>*
  store <2 x float> %125, <2 x float>* %129, align 4
  %130 = add i64 %103, 8
  %131 = add i64 %104, -2
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %102, !llvm.loop !2

133:                                              ; preds = %102, %93
  %134 = phi i64 [ 0, %93 ], [ %130, %102 ]
  %135 = icmp eq i64 %98, 0
  br i1 %135, label %149, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds [25 x double], [25 x double]* %7, i64 0, i64 %134
  %138 = bitcast double* %137 to <2 x double>*
  %139 = load <2 x double>, <2 x double>* %138, align 16
  %140 = getelementptr inbounds double, double* %137, i64 2
  %141 = bitcast double* %140 to <2 x double>*
  %142 = load <2 x double>, <2 x double>* %141, align 16
  %143 = fptrunc <2 x double> %139 to <2 x float>
  %144 = fptrunc <2 x double> %142 to <2 x float>
  %145 = getelementptr inbounds float, float* %0, i64 %134
  %146 = bitcast float* %145 to <2 x float>*
  store <2 x float> %143, <2 x float>* %146, align 4
  %147 = getelementptr inbounds float, float* %145, i64 2
  %148 = bitcast float* %147 to <2 x float>*
  store <2 x float> %144, <2 x float>* %148, align 4
  br label %149

149:                                              ; preds = %133, %136
  %150 = icmp eq i64 %94, %89
  br i1 %150, label %179, label %91

151:                                              ; preds = %151, %26
  %152 = phi double [ %23, %26 ], [ %167, %151 ]
  %153 = phi i64 [ 0, %26 ], [ %168, %151 ]
  %154 = phi i64 [ %27, %26 ], [ %169, %151 ]
  %155 = getelementptr inbounds float, float* %1, i64 %153
  %156 = load float, float* %155, align 4
  %157 = fpext float %156 to double
  store double %157, double* %19, align 8
  %158 = load double, double* %17, align 16
  %159 = fmul double %158, %157
  %160 = fadd double %152, %159
  %161 = or i64 %153, 1
  %162 = getelementptr inbounds float, float* %1, i64 %161
  %163 = load float, float* %162, align 4
  %164 = fpext float %163 to double
  store double %164, double* %19, align 8
  %165 = load double, double* %17, align 16
  %166 = fmul double %165, %164
  %167 = fadd double %160, %166
  %168 = add nuw nsw i64 %153, 2
  %169 = add i64 %154, -2
  %170 = icmp eq i64 %169, 0
  br i1 %170, label %71, label %151

171:                                              ; preds = %91, %171
  %172 = phi i64 [ %177, %171 ], [ %92, %91 ]
  %173 = getelementptr inbounds [25 x double], [25 x double]* %7, i64 0, i64 %172
  %174 = load double, double* %173, align 8
  %175 = fptrunc double %174 to float
  %176 = getelementptr inbounds float, float* %0, i64 %172
  store float %175, float* %176, align 4
  %177 = add nuw nsw i64 %172, 1
  %178 = icmp eq i64 %177, %89
  br i1 %178, label %179, label %171, !llvm.loop !4

179:                                              ; preds = %171, %149, %85
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %9) #3
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %8) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
