; ModuleID = '../../base/strings/pattern.cc'
source_filename = "../../base/strings/pattern.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [17 x i8] c" 000000000000\1000\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00\1E\0F\0F\0F\00\00\00\00\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_(i8*, i64, i8*, i64) local_unnamed_addr #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 %1
  %10 = getelementptr inbounds i8, i8* %2, i64 %3
  %11 = bitcast i8** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = ptrtoint i8* %0 to i64
  store i8* %2, i8** %8, align 8
  %13 = bitcast i8** %8 to i64*
  %14 = bitcast i8** %5 to i8*
  %15 = bitcast i8** %5 to i64*
  %16 = bitcast i8** %6 to i8*
  %17 = bitcast i8** %6 to i64*
  %18 = bitcast i8** %7 to i8*
  %19 = bitcast i8** %7 to i64*
  %20 = ptrtoint i8* %10 to i64
  br label %21

21:                                               ; preds = %106, %4
  %22 = phi i8* [ %2, %4 ], [ %107, %106 ]
  %23 = phi i64 [ %12, %4 ], [ %108, %106 ]
  %24 = ptrtoint i8* %22 to i64
  %25 = icmp eq i8* %22, %10
  br i1 %25, label %41, label %26

26:                                               ; preds = %21, %34
  %27 = phi i8* [ %38, %34 ], [ %22, %21 ]
  %28 = phi i64 [ %40, %34 ], [ %24, %21 ]
  %29 = phi i8 [ %36, %34 ], [ 0, %21 ]
  %30 = phi i32 [ %35, %34 ], [ 0, %21 ]
  %31 = load i8, i8* %27, align 1
  switch i8 %31, label %41 [
    i8 63, label %32
    i8 42, label %34
  ]

32:                                               ; preds = %26
  %33 = add nsw i32 %30, 1
  br label %34

34:                                               ; preds = %32, %26
  %35 = phi i32 [ %33, %32 ], [ %30, %26 ]
  %36 = phi i8 [ %29, %32 ], [ 1, %26 ]
  %37 = call fastcc i32 @_ZN4base12_GLOBAL__N_112NextCharUTF8clEPPKcS3_(i8** nonnull %8, i8* %10) #4
  %38 = load i8*, i8** %8, align 8
  %39 = icmp eq i8* %38, %10
  %40 = ptrtoint i8* %38 to i64
  br i1 %39, label %41, label %26

41:                                               ; preds = %26, %34, %21
  %42 = phi i8* [ %10, %21 ], [ %10, %34 ], [ %27, %26 ]
  %43 = phi i64 [ %24, %21 ], [ %20, %34 ], [ %28, %26 ]
  %44 = phi i32 [ 0, %21 ], [ %35, %34 ], [ %30, %26 ]
  %45 = phi i8 [ 0, %21 ], [ %36, %34 ], [ %29, %26 ]
  %46 = and i8 %45, 1
  %47 = icmp eq i8 %46, 0
  %48 = select i1 %47, i32 %44, i32 -1
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #4
  store i64 %23, i64* %15, align 8
  %49 = inttoptr i64 %43 to i8*
  %50 = icmp eq i8* %10, %49
  br label %51

51:                                               ; preds = %101, %41
  %52 = phi i8* [ %42, %41 ], [ %49, %101 ]
  %53 = phi i64 [ %23, %41 ], [ %104, %101 ]
  %54 = phi i32 [ %48, %41 ], [ %102, %101 ]
  %55 = phi i8 [ 0, %41 ], [ %99, %101 ]
  br i1 %50, label %56, label %62

56:                                               ; preds = %78, %51
  %57 = phi i8* [ %52, %51 ], [ %10, %78 ]
  %58 = phi i64 [ %53, %51 ], [ %80, %78 ]
  %59 = phi i8 [ %55, %51 ], [ %81, %78 ]
  %60 = inttoptr i64 %58 to i8*
  %61 = icmp eq i8* %9, %60
  br i1 %61, label %106, label %98

62:                                               ; preds = %51, %78
  %63 = phi i8* [ %79, %78 ], [ %52, %51 ]
  %64 = phi i64 [ %80, %78 ], [ %53, %51 ]
  %65 = phi i64 [ %83, %78 ], [ %43, %51 ]
  %66 = phi i8* [ %79, %78 ], [ %49, %51 ]
  %67 = phi i8 [ %81, %78 ], [ %55, %51 ]
  %68 = and i8 %67, 1
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %70, label %84

70:                                               ; preds = %62
  %71 = load i8, i8* %66, align 1
  %72 = sext i8 %71 to i32
  switch i32 %72, label %73 [
    i32 63, label %106
    i32 42, label %106
  ]

73:                                               ; preds = %70
  %74 = icmp eq i8 %71, 92
  br i1 %74, label %75, label %84

75:                                               ; preds = %73
  %76 = call fastcc i32 @_ZN4base12_GLOBAL__N_112NextCharUTF8clEPPKcS3_(i8** nonnull %8, i8* %10) #4
  %77 = load i8*, i8** %8, align 8
  br label %78

78:                                               ; preds = %93, %75
  %79 = phi i8* [ %77, %75 ], [ %96, %93 ]
  %80 = phi i64 [ %64, %75 ], [ %95, %93 ]
  %81 = phi i8 [ 1, %75 ], [ 0, %93 ]
  %82 = icmp eq i8* %79, %10
  %83 = ptrtoint i8* %79 to i64
  br i1 %82, label %56, label %62

84:                                               ; preds = %73, %62
  %85 = inttoptr i64 %64 to i8*
  %86 = icmp eq i8* %9, %85
  br i1 %86, label %105, label %87

87:                                               ; preds = %84
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #4
  store i64 %65, i64* %17, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #4
  store i64 %64, i64* %19, align 8
  %88 = call fastcc i32 @_ZN4base12_GLOBAL__N_112NextCharUTF8clEPPKcS3_(i8** nonnull %6, i8* %10) #4
  %89 = call fastcc i32 @_ZN4base12_GLOBAL__N_112NextCharUTF8clEPPKcS3_(i8** nonnull %7, i8* %9) #4
  %90 = icmp eq i32 %88, %89
  %91 = icmp ne i32 %88, -1
  %92 = and i1 %91, %90
  br i1 %92, label %93, label %97

93:                                               ; preds = %87
  %94 = load i64, i64* %17, align 8
  store i64 %94, i64* %13, align 8
  %95 = load i64, i64* %19, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  %96 = inttoptr i64 %94 to i8*
  br label %78

97:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #4
  br label %98

98:                                               ; preds = %97, %56
  %99 = phi i8 [ %59, %56 ], [ 0, %97 ]
  %100 = icmp eq i32 %54, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %98
  %102 = add nsw i32 %54, -1
  store i64 %43, i64* %13, align 8
  %103 = call fastcc i32 @_ZN4base12_GLOBAL__N_112NextCharUTF8clEPPKcS3_(i8** nonnull %5, i8* %9) #4
  %104 = load i64, i64* %15, align 8
  br label %51

105:                                              ; preds = %98, %84
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #4
  br label %110

106:                                              ; preds = %56, %70, %70
  %107 = phi i8* [ %63, %70 ], [ %63, %70 ], [ %57, %56 ]
  %108 = phi i64 [ %64, %70 ], [ %64, %70 ], [ %58, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #4
  %109 = icmp eq i8* %107, %10
  br i1 %109, label %110, label %21

110:                                              ; preds = %106, %105
  %111 = phi i1 [ false, %105 ], [ true, %106 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  ret i1 %111
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN4base12MatchPatternENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_(i16*, i64, i16*, i64) local_unnamed_addr #1 {
  %5 = getelementptr inbounds i16, i16* %0, i64 %1
  %6 = getelementptr inbounds i16, i16* %2, i64 %3
  %7 = ptrtoint i16* %0 to i64
  %8 = ptrtoint i16* %2 to i64
  %9 = ptrtoint i16* %6 to i64
  %10 = ptrtoint i16* %5 to i64
  br label %11

11:                                               ; preds = %149, %4
  %12 = phi i64 [ %7, %4 ], [ %151, %149 ]
  %13 = phi i64 [ %8, %4 ], [ %150, %149 ]
  %14 = inttoptr i64 %13 to i16*
  %15 = icmp eq i16* %6, %14
  br i1 %15, label %35, label %16

16:                                               ; preds = %11, %24
  %17 = phi i64 [ %28, %24 ], [ %13, %11 ]
  %18 = phi i16* [ %27, %24 ], [ %14, %11 ]
  %19 = phi i8 [ %26, %24 ], [ 0, %11 ]
  %20 = phi i32 [ %25, %24 ], [ 0, %11 ]
  %21 = load i16, i16* %18, align 2
  switch i16 %21, label %30 [
    i16 63, label %22
    i16 42, label %24
  ]

22:                                               ; preds = %16
  %23 = add nsw i32 %20, 1
  br label %24

24:                                               ; preds = %22, %16
  %25 = phi i32 [ %23, %22 ], [ %20, %16 ]
  %26 = phi i8 [ %19, %22 ], [ 1, %16 ]
  %27 = getelementptr inbounds i16, i16* %18, i64 1
  %28 = ptrtoint i16* %27 to i64
  %29 = icmp eq i16* %27, %6
  br i1 %29, label %30, label %16

30:                                               ; preds = %16, %24
  %31 = phi i64 [ %17, %16 ], [ %9, %24 ]
  %32 = phi i32 [ %20, %16 ], [ %25, %24 ]
  %33 = phi i8 [ %19, %16 ], [ %26, %24 ]
  %34 = inttoptr i64 %31 to i16*
  br label %35

35:                                               ; preds = %30, %11
  %36 = phi i16* [ %34, %30 ], [ %14, %11 ]
  %37 = phi i64 [ %31, %30 ], [ %13, %11 ]
  %38 = phi i32 [ %32, %30 ], [ 0, %11 ]
  %39 = phi i8 [ %33, %30 ], [ 0, %11 ]
  %40 = and i8 %39, 1
  %41 = icmp eq i8 %40, 0
  %42 = select i1 %41, i32 %38, i32 -1
  %43 = inttoptr i64 %12 to i16*
  %44 = icmp eq i16* %6, %36
  br label %45

45:                                               ; preds = %145, %35
  %46 = phi i64 [ %12, %35 ], [ %148, %145 ]
  %47 = phi i16* [ %43, %35 ], [ %147, %145 ]
  %48 = phi i32 [ %42, %35 ], [ %131, %145 ]
  %49 = phi i8 [ 0, %35 ], [ %128, %145 ]
  br i1 %44, label %52, label %58

50:                                               ; preds = %69
  %51 = inttoptr i64 %70 to i16*
  br label %52

52:                                               ; preds = %50, %45
  %53 = phi i64 [ %46, %45 ], [ %70, %50 ]
  %54 = phi i64 [ %37, %45 ], [ %9, %50 ]
  %55 = phi i16* [ %47, %45 ], [ %51, %50 ]
  %56 = phi i8 [ %49, %45 ], [ %72, %50 ]
  %57 = icmp eq i16* %55, %5
  br i1 %57, label %149, label %127

58:                                               ; preds = %45, %69
  %59 = phi i64 [ %70, %69 ], [ %46, %45 ]
  %60 = phi i64 [ %73, %69 ], [ %37, %45 ]
  %61 = phi i16* [ %71, %69 ], [ %36, %45 ]
  %62 = phi i8 [ %72, %69 ], [ %49, %45 ]
  %63 = and i8 %62, 1
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %75

65:                                               ; preds = %58
  %66 = load i16, i16* %61, align 2
  switch i16 %66, label %75 [
    i16 63, label %149
    i16 42, label %149
    i16 92, label %67
  ]

67:                                               ; preds = %65
  %68 = getelementptr inbounds i16, i16* %61, i64 1
  br label %69

69:                                               ; preds = %124, %67
  %70 = phi i64 [ %126, %124 ], [ %59, %67 ]
  %71 = phi i16* [ %100, %124 ], [ %68, %67 ]
  %72 = phi i8 [ 0, %124 ], [ 1, %67 ]
  %73 = ptrtoint i16* %71 to i64
  %74 = icmp eq i16* %71, %6
  br i1 %74, label %50, label %58

75:                                               ; preds = %65, %58
  %76 = inttoptr i64 %59 to i16*
  %77 = icmp eq i16* %5, %76
  br i1 %77, label %154, label %78

78:                                               ; preds = %75
  %79 = inttoptr i64 %60 to i16*
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = and i32 %81, 64512
  %83 = icmp ne i32 %82, 55296
  %84 = sub i64 %9, %60
  %85 = icmp eq i64 %84, 2
  %86 = or i1 %85, %83
  br i1 %86, label %97, label %87

87:                                               ; preds = %78
  %88 = getelementptr inbounds i16, i16* %79, i64 1
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = and i32 %90, 64512
  %92 = icmp eq i32 %91, 56320
  br i1 %92, label %93, label %97

93:                                               ; preds = %87
  %94 = shl nuw nsw i32 %81, 10
  %95 = add nsw i32 %94, -56613888
  %96 = add nsw i32 %95, %90
  br label %97

97:                                               ; preds = %93, %87, %78
  %98 = phi i32 [ %81, %78 ], [ %96, %93 ], [ %81, %87 ]
  %99 = phi i64 [ 1, %78 ], [ 2, %93 ], [ 1, %87 ]
  %100 = getelementptr inbounds i16, i16* %79, i64 %99
  %101 = load i16, i16* %76, align 2
  %102 = zext i16 %101 to i32
  %103 = and i32 %102, 64512
  %104 = icmp ne i32 %103, 55296
  %105 = sub i64 %10, %59
  %106 = icmp eq i64 %105, 2
  %107 = or i1 %106, %104
  br i1 %107, label %118, label %108

108:                                              ; preds = %97
  %109 = getelementptr inbounds i16, i16* %76, i64 1
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = and i32 %111, 64512
  %113 = icmp eq i32 %112, 56320
  br i1 %113, label %114, label %118

114:                                              ; preds = %108
  %115 = shl nuw nsw i32 %102, 10
  %116 = add nsw i32 %115, -56613888
  %117 = add nsw i32 %116, %111
  br label %118

118:                                              ; preds = %114, %108, %97
  %119 = phi i32 [ %102, %97 ], [ %117, %114 ], [ %102, %108 ]
  %120 = phi i64 [ 1, %97 ], [ 2, %114 ], [ 1, %108 ]
  %121 = icmp eq i32 %98, %119
  %122 = icmp ne i32 %98, -1
  %123 = and i1 %122, %121
  br i1 %123, label %124, label %127

124:                                              ; preds = %118
  %125 = getelementptr inbounds i16, i16* %76, i64 %120
  %126 = ptrtoint i16* %125 to i64
  br label %69

127:                                              ; preds = %118, %52
  %128 = phi i8 [ %56, %52 ], [ 0, %118 ]
  %129 = icmp eq i32 %48, 0
  br i1 %129, label %154, label %130

130:                                              ; preds = %127
  %131 = add nsw i32 %48, -1
  %132 = inttoptr i64 %46 to i16*
  %133 = load i16, i16* %132, align 2
  %134 = and i16 %133, -1024
  %135 = icmp ne i16 %134, -10240
  %136 = sub i64 %10, %46
  %137 = icmp eq i64 %136, 2
  %138 = or i1 %137, %135
  br i1 %138, label %145, label %139

139:                                              ; preds = %130
  %140 = getelementptr inbounds i16, i16* %132, i64 1
  %141 = load i16, i16* %140, align 2
  %142 = and i16 %141, -1024
  %143 = icmp eq i16 %142, -9216
  %144 = select i1 %143, i64 2, i64 1
  br label %145

145:                                              ; preds = %139, %130
  %146 = phi i64 [ 1, %130 ], [ %144, %139 ]
  %147 = getelementptr inbounds i16, i16* %132, i64 %146
  %148 = ptrtoint i16* %147 to i64
  br label %45

149:                                              ; preds = %52, %65, %65
  %150 = phi i64 [ %60, %65 ], [ %60, %65 ], [ %54, %52 ]
  %151 = phi i64 [ %59, %65 ], [ %59, %65 ], [ %53, %52 ]
  %152 = inttoptr i64 %150 to i16*
  %153 = icmp eq i16* %6, %152
  br i1 %153, label %154, label %11

154:                                              ; preds = %149, %127, %75
  %155 = phi i1 [ false, %75 ], [ false, %127 ], [ true, %149 ]
  ret i1 %155
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @_ZN4base12_GLOBAL__N_112NextCharUTF8clEPPKcS3_(i8** nocapture, i8*) unnamed_addr #3 align 2 {
  %3 = load i8*, i8** %0, align 8
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i32
  %6 = icmp sgt i8 %4, -1
  br i1 %6, label %82, label %7

7:                                                ; preds = %2
  %8 = ptrtoint i8* %3 to i64
  %9 = ptrtoint i8* %1 to i64
  %10 = sub i64 %9, %8
  %11 = icmp eq i64 %10, 1
  br i1 %11, label %82, label %12

12:                                               ; preds = %7
  %13 = icmp ugt i8 %4, -33
  br i1 %13, label %14, label %65

14:                                               ; preds = %12
  %15 = icmp ult i8 %4, -16
  br i1 %15, label %16, label %31

16:                                               ; preds = %14
  %17 = and i32 %5, 15
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = getelementptr inbounds i8, i8* %3, i64 1
  %23 = load i8, i8* %22, align 1
  %24 = lshr i8 %23, 5
  %25 = zext i8 %24 to i32
  %26 = shl i32 1, %25
  %27 = and i32 %26, %21
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %82, label %29

29:                                               ; preds = %16
  %30 = and i8 %23, 63
  br label %56

31:                                               ; preds = %14
  %32 = add nsw i32 %5, -240
  %33 = icmp slt i32 %32, 5
  br i1 %33, label %34, label %82

34:                                               ; preds = %31
  %35 = getelementptr inbounds i8, i8* %3, i64 1
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = lshr i32 %37, 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.1, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = shl i32 1, %32
  %44 = and i32 %43, %42
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %82, label %46

46:                                               ; preds = %34
  %47 = icmp eq i64 %10, 2
  br i1 %47, label %82, label %48

48:                                               ; preds = %46
  %49 = shl nsw i32 %32, 6
  %50 = and i32 %37, 63
  %51 = or i32 %50, %49
  %52 = getelementptr inbounds i8, i8* %3, i64 2
  %53 = load i8, i8* %52, align 1
  %54 = xor i8 %53, -128
  %55 = icmp ult i8 %54, 64
  br i1 %55, label %56, label %82

56:                                               ; preds = %29, %48
  %57 = phi i32 [ %17, %29 ], [ %51, %48 ]
  %58 = phi i32 [ 2, %29 ], [ 3, %48 ]
  %59 = phi i8 [ %30, %29 ], [ %54, %48 ]
  %60 = shl nsw i32 %57, 6
  %61 = zext i8 %59 to i32
  %62 = or i32 %60, %61
  %63 = zext i32 %58 to i64
  %64 = icmp eq i64 %10, %63
  br i1 %64, label %82, label %69

65:                                               ; preds = %12
  %66 = icmp ugt i8 %4, -63
  br i1 %66, label %67, label %82

67:                                               ; preds = %65
  %68 = and i32 %5, 31
  br label %69

69:                                               ; preds = %56, %67
  %70 = phi i32 [ %62, %56 ], [ %68, %67 ]
  %71 = phi i32 [ %58, %56 ], [ 1, %67 ]
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %3, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = xor i8 %74, -128
  %76 = icmp ult i8 %75, 64
  br i1 %76, label %77, label %82

77:                                               ; preds = %69
  %78 = zext i8 %75 to i32
  %79 = shl i32 %70, 6
  %80 = or i32 %79, %78
  %81 = add nuw nsw i32 %71, 1
  br label %82

82:                                               ; preds = %77, %16, %56, %46, %34, %7, %69, %65, %48, %31, %2
  %83 = phi i32 [ %5, %2 ], [ %80, %77 ], [ -1, %16 ], [ -1, %56 ], [ -1, %46 ], [ -1, %34 ], [ -1, %7 ], [ -1, %69 ], [ -1, %65 ], [ -1, %48 ], [ -1, %31 ]
  %84 = phi i32 [ 1, %2 ], [ %81, %77 ], [ 1, %16 ], [ %58, %56 ], [ 2, %46 ], [ 1, %34 ], [ 1, %7 ], [ %71, %69 ], [ 1, %65 ], [ 2, %48 ], [ 1, %31 ]
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %3, i64 %85
  store i8* %86, i8** %0, align 8
  ret i32 %83
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
