; ModuleID = '../../third_party/pdfium/core/fxcodec/jbig2/JBig2_Segment.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/jbig2/JBig2_Segment.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CJBig2_Segment = type { i32, %union.anon, i32, %"class.std::__1::vector", i32, i32, i32, i32, i32, i32, i32, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.34" }
%union.anon = type { %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.CJBig2_SymbolDict* }
%class.CJBig2_SymbolDict = type { %"class.std::__1::vector.3", %"class.std::__1::vector.3", %"class.std::__1::vector.10" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %class.JBig2ArithCtx*, %class.JBig2ArithCtx*, %"class.std::__1::__compressed_pair.5" }
%class.JBig2ArithCtx = type { i8, i32 }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %class.JBig2ArithCtx* }
%"class.std::__1::vector.10" = type { %"class.std::__1::__vector_base.11" }
%"class.std::__1::__vector_base.11" = type { %"class.std::__1::unique_ptr.12"*, %"class.std::__1::unique_ptr.12"*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.std::__1::unique_ptr.12"* }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.CJBig2_PatternDict* }
%class.CJBig2_PatternDict = type { i32, %"class.std::__1::vector.10" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.CJBig2_Image* }
%class.CJBig2_Image = type <{ %"class.fxcrt::MaybeOwned", i32, i32, i32, [4 x i8] }>
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.15", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %class.CJBig2_HuffmanTable* }
%class.CJBig2_HuffmanTable = type { i8, i8, i32, %"class.std::__1::vector.37", %"class.std::__1::vector.44", %"class.std::__1::vector.44" }
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %struct.JBig2HuffmanCode*, %struct.JBig2HuffmanCode*, %"class.std::__1::__compressed_pair.39" }
%struct.JBig2HuffmanCode = type { i32, i32 }
%"class.std::__1::__compressed_pair.39" = type { %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.40" = type { %struct.JBig2HuffmanCode* }
%"class.std::__1::vector.44" = type { %"class.std::__1::__vector_base.45" }
%"class.std::__1::__vector_base.45" = type { i32*, i32*, %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i32* }

@_ZN14CJBig2_SegmentC1Ev = hidden unnamed_addr alias void (%class.CJBig2_Segment*), void (%class.CJBig2_Segment*)* @_ZN14CJBig2_SegmentC2Ev
@_ZN14CJBig2_SegmentD1Ev = hidden unnamed_addr alias void (%class.CJBig2_Segment*), void (%class.CJBig2_Segment*)* @_ZN14CJBig2_SegmentD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CJBig2_SegmentC2Ev(%class.CJBig2_Segment* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 0
  store i32 0, i32* %2, align 8
  %3 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 1, i32 0, i32 0
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 2
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 3
  %6 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 11
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 52, i1 false)
  %8 = bitcast %"class.std::__1::unique_ptr"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 32, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CJBig2_SegmentD2Ev(%class.CJBig2_Segment* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 14, i32 0, i32 0, i32 0
  %3 = load %class.CJBig2_HuffmanTable*, %class.CJBig2_HuffmanTable** %2, align 8
  store %class.CJBig2_HuffmanTable* null, %class.CJBig2_HuffmanTable** %2, align 8
  %4 = icmp eq %class.CJBig2_HuffmanTable* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  tail call void @_ZN19CJBig2_HuffmanTableD1Ev(%class.CJBig2_HuffmanTable* nonnull %3) #4
  %6 = getelementptr inbounds %class.CJBig2_HuffmanTable, %class.CJBig2_HuffmanTable* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %6) #5
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 13, i32 0, i32 0, i32 0
  %9 = load %class.CJBig2_Image*, %class.CJBig2_Image** %8, align 8
  store %class.CJBig2_Image* null, %class.CJBig2_Image** %8, align 8
  %10 = icmp eq %class.CJBig2_Image* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  tail call void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image* nonnull %9) #4
  %12 = bitcast %class.CJBig2_Image* %9 to i8*
  tail call void @_ZdlPv(i8* %12) #5
  br label %13

13:                                               ; preds = %7, %11
  %14 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 12, i32 0, i32 0, i32 0
  %15 = load %class.CJBig2_PatternDict*, %class.CJBig2_PatternDict** %14, align 8
  store %class.CJBig2_PatternDict* null, %class.CJBig2_PatternDict** %14, align 8
  %16 = icmp eq %class.CJBig2_PatternDict* %15, null
  br i1 %16, label %19, label %17

17:                                               ; preds = %13
  tail call void @_ZN18CJBig2_PatternDictD1Ev(%class.CJBig2_PatternDict* nonnull %15) #4
  %18 = bitcast %class.CJBig2_PatternDict* %15 to i8*
  tail call void @_ZdlPv(i8* %18) #5
  br label %19

19:                                               ; preds = %13, %17
  %20 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 11, i32 0, i32 0, i32 0
  %21 = load %class.CJBig2_SymbolDict*, %class.CJBig2_SymbolDict** %20, align 8
  store %class.CJBig2_SymbolDict* null, %class.CJBig2_SymbolDict** %20, align 8
  %22 = icmp eq %class.CJBig2_SymbolDict* %21, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  tail call void @_ZN17CJBig2_SymbolDictD1Ev(%class.CJBig2_SymbolDict* nonnull %21) #4
  %24 = bitcast %class.CJBig2_SymbolDict* %21 to i8*
  tail call void @_ZdlPv(i8* %24) #5
  br label %25

25:                                               ; preds = %19, %23
  %26 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 3, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = ptrtoint i32* %27 to i64
  %31 = getelementptr inbounds %class.CJBig2_Segment, %class.CJBig2_Segment* %0, i64 0, i32 3, i32 0, i32 1
  %32 = bitcast i32** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = bitcast i32* %27 to i8*
  tail call void @_ZdlPv(i8* %33) #5
  br label %34

34:                                               ; preds = %25, %29
  ret void
}

; Function Attrs: nounwind
declare void @_ZN12CJBig2_ImageD1Ev(%class.CJBig2_Image*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN17CJBig2_SymbolDictD1Ev(%class.CJBig2_SymbolDict*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN18CJBig2_PatternDictD1Ev(%class.CJBig2_PatternDict*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN19CJBig2_HuffmanTableD1Ev(%class.CJBig2_HuffmanTable*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
