; ModuleID = 'gen/third_party/blink/public/mojom/service_worker/service_worker_fetch_response_callback.mojom-test-utils.cc'
source_filename = "gen/third_party/blink/public/mojom/service_worker/service_worker_fetch_response_callback.mojom-test-utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter" = type { %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* }
%"class.blink::mojom::ServiceWorkerFetchResponseCallback" = type { i32 (...)** }
%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting" = type { %"class.blink::mojom::ServiceWorkerFetchResponseCallback" }
%"class.mojo::StructPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::mojom::FetchAPIResponse"* }
%"class.blink::mojom::FetchAPIResponse" = type { %"class.std::__1::vector", i16, %"class.std::__1::basic_string", i32, i64, i32, %"class.base::flat_map", %"class.absl::optional", %"class.absl::optional", %"class.mojo::StructPtr.19", i32, %"class.base::Time", %"class.absl::optional", %"class.std::__1::vector.26", %"class.mojo::StructPtr.19", %"class.mojo::StructPtr.19", %"class.mojo::StructPtr.33", i32, %"class.std::__1::basic_string", i8, i8, %"class.absl::optional.133" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.GURL*, %class.GURL*, %"class.std::__1::__compressed_pair.7" }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr.3" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.GURL* }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.11" }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.13" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.std::__1::pair"* }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.18 }
%union.anon.18 = type { %"class.std::__1::basic_string" }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.std::__1::basic_string"* }
%"class.mojo::StructPtr.19" = type { %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.blink::mojom::SerializedBlob"* }
%"class.blink::mojom::SerializedBlob" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i64, %"class.mojo::PendingRemote" }
%"class.mojo::PendingRemote" = type { %"struct.mojo::internal::PendingRemoteState" }
%"struct.mojo::internal::PendingRemoteState" = type { %"class.mojo::ScopedHandleBase", i32 }
%"class.mojo::ScopedHandleBase" = type { %"class.mojo::MessagePipeHandle" }
%"class.mojo::MessagePipeHandle" = type { %"class.mojo::Handle" }
%"class.mojo::Handle" = type { i32 }
%"class.mojo::StructPtr.33" = type { %"class.std::__1::unique_ptr.34" }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.network::mojom::ParsedHeaders"* }
%"class.network::mojom::ParsedHeaders" = type <{ %"class.std::__1::vector.37", %"class.mojo::StructPtr.85", %"struct.network::CrossOriginEmbedderPolicy", %"struct.network::CrossOriginOpenerPolicy", i8, [7 x i8], %"class.absl::optional.97", %"class.base::TimeDelta", %"class.absl::optional.97", i32, [4 x i8], %"class.std::__1::vector.109", %"class.mojo::StructPtr.123", i8, [7 x i8] }>
%"class.std::__1::vector.37" = type { %"class.std::__1::__vector_base.38" }
%"class.std::__1::__vector_base.38" = type { %"class.mojo::StructPtr.39"*, %"class.mojo::StructPtr.39"*, %"class.std::__1::__compressed_pair.80" }
%"class.mojo::StructPtr.39" = type { %"class.std::__1::unique_ptr.40" }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"class.network::mojom::ContentSecurityPolicy"* }
%"class.network::mojom::ContentSecurityPolicy" = type { %"class.mojo::StructPtr.43", %"class.base::flat_map.50", %"class.base::flat_map.60", i8, i8, i8, i32, %"class.mojo::InlinedStructPtr", i8, %"class.std::__1::vector.26", i32, %"class.mojo::StructPtr.70", %"class.std::__1::vector.26" }
%"class.mojo::StructPtr.43" = type { %"class.std::__1::unique_ptr.44" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.network::mojom::CSPSource"* }
%"class.network::mojom::CSPSource" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8], %"class.std::__1::basic_string", i8, i8, [6 x i8] }>
%"class.base::flat_map.50" = type { %"class.base::internal::flat_tree.51" }
%"class.base::internal::flat_tree.51" = type { %"class.std::__1::vector.52" }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.std::__1::pair.54"*, %"struct.std::__1::pair.54"*, %"class.std::__1::__compressed_pair.55" }
%"struct.std::__1::pair.54" = type opaque
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %"struct.std::__1::pair.54"* }
%"class.base::flat_map.60" = type { %"class.base::internal::flat_tree.61" }
%"class.base::internal::flat_tree.61" = type { %"class.std::__1::vector.62" }
%"class.std::__1::vector.62" = type { %"class.std::__1::__vector_base.63" }
%"class.std::__1::__vector_base.63" = type { %"struct.std::__1::pair.64"*, %"struct.std::__1::pair.64"*, %"class.std::__1::__compressed_pair.65" }
%"struct.std::__1::pair.64" = type opaque
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.std::__1::pair.64"* }
%"class.mojo::InlinedStructPtr" = type <{ %"class.network::mojom::ContentSecurityPolicyHeader", i32, [4 x i8] }>
%"class.network::mojom::ContentSecurityPolicyHeader" = type { %"class.std::__1::basic_string", i32, i32 }
%"class.mojo::StructPtr.70" = type { %"class.std::__1::unique_ptr.71" }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"class.network::mojom::CSPTrustedTypes"* }
%"class.network::mojom::CSPTrustedTypes" = type <{ %"class.std::__1::vector.26", i8, i8, [6 x i8] }>
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.mojo::StructPtr.39"* }
%"class.mojo::StructPtr.85" = type { %"class.std::__1::unique_ptr.86" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.network::mojom::AllowCSPFromHeaderValue"* }
%"class.network::mojom::AllowCSPFromHeaderValue" = type { i32, %"union.network::mojom::AllowCSPFromHeaderValue::Union_" }
%"union.network::mojom::AllowCSPFromHeaderValue::Union_" = type { %"class.url::Origin"* }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.89" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.89" = type { %"class.absl::optional_internal::optional_data.90" }
%"class.absl::optional_internal::optional_data.90" = type { %"class.absl::optional_internal::optional_data_base.91" }
%"class.absl::optional_internal::optional_data_base.91" = type { %"class.absl::optional_internal::optional_data_dtor_base.92" }
%"class.absl::optional_internal::optional_data_dtor_base.92" = type { i8, %union.anon.93 }
%union.anon.93 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.network::CrossOriginEmbedderPolicy" = type { i32, %"class.absl::optional", i32, %"class.absl::optional" }
%"struct.network::CrossOriginOpenerPolicy" = type { i32, %"class.absl::optional", i32, %"class.absl::optional" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.97" = type { %"class.absl::optional_internal::optional_data.98" }
%"class.absl::optional_internal::optional_data.98" = type { %"class.absl::optional_internal::optional_data_base.99" }
%"class.absl::optional_internal::optional_data_base.99" = type { %"class.absl::optional_internal::optional_data_dtor_base.100" }
%"class.absl::optional_internal::optional_data_dtor_base.100" = type { i8, %union.anon.101 }
%union.anon.101 = type { %"class.std::__1::vector.102" }
%"class.std::__1::vector.102" = type { %"class.std::__1::__vector_base.103" }
%"class.std::__1::__vector_base.103" = type { i32*, i32*, %"class.std::__1::__compressed_pair.104" }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { i32* }
%"class.std::__1::vector.109" = type { %"class.std::__1::__vector_base.110" }
%"class.std::__1::__vector_base.110" = type { %"class.mojo::StructPtr.111"*, %"class.mojo::StructPtr.111"*, %"class.std::__1::__compressed_pair.118" }
%"class.mojo::StructPtr.111" = type { %"class.std::__1::unique_ptr.112" }
%"class.std::__1::unique_ptr.112" = type { %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.network::mojom::LinkHeader"* }
%"class.network::mojom::LinkHeader" = type { %class.GURL, i32, i32, i32, %"class.absl::optional" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.mojo::StructPtr.111"* }
%"class.mojo::StructPtr.123" = type { %"class.std::__1::unique_ptr.124" }
%"class.std::__1::unique_ptr.124" = type { %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.network::mojom::TimingAllowOrigin"* }
%"class.network::mojom::TimingAllowOrigin" = type { i32, %"union.network::mojom::TimingAllowOrigin::Union_" }
%"union.network::mojom::TimingAllowOrigin::Union_" = type { %"class.std::__1::vector.26"* }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.0" }
%"class.std::__1::__compressed_pair.0" = type { %"struct.std::__1::__compressed_pair_elem.1" }
%"struct.std::__1::__compressed_pair_elem.1" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.absl::optional.133" = type { %"class.absl::optional_internal::optional_data.134" }
%"class.absl::optional_internal::optional_data.134" = type { %"class.absl::optional_internal::optional_data_base.135" }
%"class.absl::optional_internal::optional_data_base.135" = type { %"class.absl::optional_internal::optional_data_dtor_base.136" }
%"class.absl::optional_internal::optional_data_dtor_base.136" = type { i8, %union.anon.137 }
%union.anon.137 = type { %"class.net::AuthChallengeInfo" }
%"class.net::AuthChallengeInfo" = type { i8, %"class.url::Origin", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.mojo::StructPtr.141" = type { %"class.std::__1::unique_ptr.142" }
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.blink::mojom::ServiceWorkerFetchEventTiming"* }
%"class.blink::mojom::ServiceWorkerFetchEventTiming" = type { %"class.base::TimeTicks", %"class.base::TimeTicks" }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase.145" }
%"class.base::time_internal::TimeBase.145" = type { i64 }
%"class.mojo::StructPtr.149" = type { %"class.std::__1::unique_ptr.150" }
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::mojom::ServiceWorkerStreamHandle"* }
%"class.blink::mojom::ServiceWorkerStreamHandle" = type { %"class.mojo::ScopedHandleBase.153", %"class.mojo::PendingReceiver" }
%"class.mojo::ScopedHandleBase.153" = type { %"class.mojo::DataPipeConsumerHandle" }
%"class.mojo::DataPipeConsumerHandle" = type { %"class.mojo::Handle" }
%"class.mojo::PendingReceiver" = type { %"struct.mojo::internal::PendingReceiverState" }
%"struct.mojo::internal::PendingReceiverState" = type { %"class.mojo::ScopedHandleBase", %"class.mojo::ConnectionGroup::Ref" }
%"class.mojo::ConnectionGroup::Ref" = type { i32, %class.scoped_refptr }
%class.scoped_refptr = type { %"class.mojo::ConnectionGroup"* }
%"class.mojo::ConnectionGroup" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8], %"class.base::RepeatingCallback", %class.scoped_refptr.160, %"class.mojo::ConnectionGroup::Ref", %"struct.std::__1::atomic.162", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.157" }
%"struct.std::__1::__atomic_base.157" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.158 }
%class.scoped_refptr.158 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.159", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.159" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%class.scoped_refptr.160 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.161" }>
%"class.base::RefCountedThreadSafe.161" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"struct.std::__1::atomic.162" = type { %"struct.std::__1::__atomic_base.163" }
%"struct.std::__1::__atomic_base.163" = type { %"struct.std::__1::__atomic_base.164" }
%"struct.std::__1::__atomic_base.164" = type { %"struct.std::__1::__cxx_atomic_impl.165" }
%"struct.std::__1::__cxx_atomic_impl.165" = type { %"struct.std::__1::__cxx_atomic_base_impl.166" }
%"struct.std::__1::__cxx_atomic_base_impl.166" = type { i32 }

$_ZN5blink5mojom34ServiceWorkerFetchResponseCallbackD2Ev = comdat any

$_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTestingD0Ev = comdat any

@_ZTVN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTestingE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*)* @_ZN5blink5mojom34ServiceWorkerFetchResponseCallbackD2Ev to i8*), i8* bitcast (void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)* @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTestingD0Ev to i8*), i8* bitcast (void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)* @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTesting10OnResponseEN4mojo9StructPtrINS0_16FetchAPIResponseEEENS3_INS0_29ServiceWorkerFetchEventTimingEEE to i8*), i8* bitcast (void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)* @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTesting16OnResponseStreamEN4mojo9StructPtrINS0_16FetchAPIResponseEEENS3_INS0_25ServiceWorkerStreamHandleEEENS3_INS0_29ServiceWorkerFetchEventTimingEEE to i8*), i8* bitcast (void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*, %"class.mojo::StructPtr.141"*)* @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTesting10OnFallbackEN4mojo9StructPtrINS0_29ServiceWorkerFetchEventTimingEEE to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8

@_ZN5blink5mojom45ServiceWorkerFetchResponseCallbackAsyncWaiterC1EPNS0_34ServiceWorkerFetchResponseCallbackE = hidden unnamed_addr alias void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"*), void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"*)* @_ZN5blink5mojom45ServiceWorkerFetchResponseCallbackAsyncWaiterC2EPNS0_34ServiceWorkerFetchResponseCallbackE
@_ZN5blink5mojom45ServiceWorkerFetchResponseCallbackAsyncWaiterD1Ev = hidden unnamed_addr alias void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"*), void (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"*)* @_ZN5blink5mojom45ServiceWorkerFetchResponseCallbackAsyncWaiterD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTesting10OnResponseEN4mojo9StructPtrINS0_16FetchAPIResponseEEENS3_INS0_29ServiceWorkerFetchEventTimingEEE(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*, %"class.mojo::StructPtr"* nocapture, %"class.mojo::StructPtr.141"* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %"class.mojo::StructPtr", align 8
  %5 = alloca %"class.mojo::StructPtr.141", align 8
  %6 = bitcast %"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"* %0 to %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)***
  %7 = load %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)**, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*** %6, align 8
  %8 = getelementptr inbounds %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)** %7, i64 5
  %9 = load %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)** %8, align 8
  %10 = tail call %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %9(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"* %0) #7
  %11 = bitcast %"class.mojo::StructPtr"* %4 to i64*
  %12 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = bitcast %"class.mojo::StructPtr"* %1 to i64*
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %11, align 8
  store i64 0, i64* %13, align 8
  %15 = bitcast %"class.mojo::StructPtr.141"* %5 to i64*
  %16 = getelementptr inbounds %"class.mojo::StructPtr.141", %"class.mojo::StructPtr.141"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %17 = bitcast %"class.mojo::StructPtr.141"* %2 to i64*
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %15, align 8
  store i64 0, i64* %17, align 8
  %19 = bitcast %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %10 to void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)***
  %20 = load void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)**, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)*, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)** %20, i64 2
  %22 = load void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)*, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.141"*)** %21, align 8
  call void %22(%"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %10, %"class.mojo::StructPtr"* nonnull %4, %"class.mojo::StructPtr.141"* nonnull %5) #7
  %23 = load %"class.blink::mojom::ServiceWorkerFetchEventTiming"*, %"class.blink::mojom::ServiceWorkerFetchEventTiming"** %16, align 8
  store %"class.blink::mojom::ServiceWorkerFetchEventTiming"* null, %"class.blink::mojom::ServiceWorkerFetchEventTiming"** %16, align 8
  %24 = icmp eq %"class.blink::mojom::ServiceWorkerFetchEventTiming"* %23, null
  br i1 %24, label %27, label %25

25:                                               ; preds = %3
  call void @_ZN5blink5mojom29ServiceWorkerFetchEventTimingD1Ev(%"class.blink::mojom::ServiceWorkerFetchEventTiming"* nonnull %23) #7
  %26 = bitcast %"class.blink::mojom::ServiceWorkerFetchEventTiming"* %23 to i8*
  call void @_ZdlPv(i8* %26) #8
  br label %27

27:                                               ; preds = %3, %25
  %28 = load %"class.blink::mojom::FetchAPIResponse"*, %"class.blink::mojom::FetchAPIResponse"** %12, align 8
  store %"class.blink::mojom::FetchAPIResponse"* null, %"class.blink::mojom::FetchAPIResponse"** %12, align 8
  %29 = icmp eq %"class.blink::mojom::FetchAPIResponse"* %28, null
  br i1 %29, label %32, label %30

30:                                               ; preds = %27
  call void @_ZN5blink5mojom16FetchAPIResponseD1Ev(%"class.blink::mojom::FetchAPIResponse"* nonnull %28) #7
  %31 = bitcast %"class.blink::mojom::FetchAPIResponse"* %28 to i8*
  call void @_ZdlPv(i8* %31) #8
  br label %32

32:                                               ; preds = %27, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTesting16OnResponseStreamEN4mojo9StructPtrINS0_16FetchAPIResponseEEENS3_INS0_25ServiceWorkerStreamHandleEEENS3_INS0_29ServiceWorkerFetchEventTimingEEE(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*, %"class.mojo::StructPtr"* nocapture, %"class.mojo::StructPtr.149"* nocapture, %"class.mojo::StructPtr.141"* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.mojo::StructPtr", align 8
  %6 = alloca %"class.mojo::StructPtr.149", align 8
  %7 = alloca %"class.mojo::StructPtr.141", align 8
  %8 = bitcast %"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"* %0 to %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)***
  %9 = load %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)**, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*** %8, align 8
  %10 = getelementptr inbounds %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)** %9, i64 5
  %11 = load %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)** %10, align 8
  %12 = tail call %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %11(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"* %0) #7
  %13 = bitcast %"class.mojo::StructPtr"* %5 to i64*
  %14 = getelementptr inbounds %"class.mojo::StructPtr", %"class.mojo::StructPtr"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %15 = bitcast %"class.mojo::StructPtr"* %1 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %13, align 8
  store i64 0, i64* %15, align 8
  %17 = bitcast %"class.mojo::StructPtr.149"* %6 to i64*
  %18 = getelementptr inbounds %"class.mojo::StructPtr.149", %"class.mojo::StructPtr.149"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %19 = bitcast %"class.mojo::StructPtr.149"* %2 to i64*
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %17, align 8
  store i64 0, i64* %19, align 8
  %21 = bitcast %"class.mojo::StructPtr.141"* %7 to i64*
  %22 = getelementptr inbounds %"class.mojo::StructPtr.141", %"class.mojo::StructPtr.141"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = bitcast %"class.mojo::StructPtr.141"* %3 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %21, align 8
  store i64 0, i64* %23, align 8
  %25 = bitcast %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %12 to void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)***
  %26 = load void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)**, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)*, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)** %26, i64 3
  %28 = load void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)*, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr"*, %"class.mojo::StructPtr.149"*, %"class.mojo::StructPtr.141"*)** %27, align 8
  call void %28(%"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %12, %"class.mojo::StructPtr"* nonnull %5, %"class.mojo::StructPtr.149"* nonnull %6, %"class.mojo::StructPtr.141"* nonnull %7) #7
  %29 = load %"class.blink::mojom::ServiceWorkerFetchEventTiming"*, %"class.blink::mojom::ServiceWorkerFetchEventTiming"** %22, align 8
  store %"class.blink::mojom::ServiceWorkerFetchEventTiming"* null, %"class.blink::mojom::ServiceWorkerFetchEventTiming"** %22, align 8
  %30 = icmp eq %"class.blink::mojom::ServiceWorkerFetchEventTiming"* %29, null
  br i1 %30, label %33, label %31

31:                                               ; preds = %4
  call void @_ZN5blink5mojom29ServiceWorkerFetchEventTimingD1Ev(%"class.blink::mojom::ServiceWorkerFetchEventTiming"* nonnull %29) #7
  %32 = bitcast %"class.blink::mojom::ServiceWorkerFetchEventTiming"* %29 to i8*
  call void @_ZdlPv(i8* %32) #8
  br label %33

33:                                               ; preds = %4, %31
  %34 = load %"class.blink::mojom::ServiceWorkerStreamHandle"*, %"class.blink::mojom::ServiceWorkerStreamHandle"** %18, align 8
  store %"class.blink::mojom::ServiceWorkerStreamHandle"* null, %"class.blink::mojom::ServiceWorkerStreamHandle"** %18, align 8
  %35 = icmp eq %"class.blink::mojom::ServiceWorkerStreamHandle"* %34, null
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  call void @_ZN5blink5mojom25ServiceWorkerStreamHandleD1Ev(%"class.blink::mojom::ServiceWorkerStreamHandle"* nonnull %34) #7
  %37 = bitcast %"class.blink::mojom::ServiceWorkerStreamHandle"* %34 to i8*
  call void @_ZdlPv(i8* %37) #8
  br label %38

38:                                               ; preds = %33, %36
  %39 = load %"class.blink::mojom::FetchAPIResponse"*, %"class.blink::mojom::FetchAPIResponse"** %14, align 8
  store %"class.blink::mojom::FetchAPIResponse"* null, %"class.blink::mojom::FetchAPIResponse"** %14, align 8
  %40 = icmp eq %"class.blink::mojom::FetchAPIResponse"* %39, null
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  call void @_ZN5blink5mojom16FetchAPIResponseD1Ev(%"class.blink::mojom::FetchAPIResponse"* nonnull %39) #7
  %42 = bitcast %"class.blink::mojom::FetchAPIResponse"* %39 to i8*
  call void @_ZdlPv(i8* %42) #8
  br label %43

43:                                               ; preds = %38, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTesting10OnFallbackEN4mojo9StructPtrINS0_29ServiceWorkerFetchEventTimingEEE(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*, %"class.mojo::StructPtr.141"* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %"class.mojo::StructPtr.141", align 8
  %4 = bitcast %"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"* %0 to %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)***
  %5 = load %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)**, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)** %5, i64 5
  %7 = load %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)*, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* (%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*)** %6, align 8
  %8 = tail call %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %7(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"* %0) #7
  %9 = bitcast %"class.mojo::StructPtr.141"* %3 to i64*
  %10 = getelementptr inbounds %"class.mojo::StructPtr.141", %"class.mojo::StructPtr.141"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = bitcast %"class.mojo::StructPtr.141"* %1 to i64*
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %9, align 8
  store i64 0, i64* %11, align 8
  %13 = bitcast %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %8 to void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)***
  %14 = load void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)**, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)*, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)** %14, i64 4
  %16 = load void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)*, void (%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*, %"class.mojo::StructPtr.141"*)** %15, align 8
  call void %16(%"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %8, %"class.mojo::StructPtr.141"* nonnull %3) #7
  %17 = load %"class.blink::mojom::ServiceWorkerFetchEventTiming"*, %"class.blink::mojom::ServiceWorkerFetchEventTiming"** %10, align 8
  store %"class.blink::mojom::ServiceWorkerFetchEventTiming"* null, %"class.blink::mojom::ServiceWorkerFetchEventTiming"** %10, align 8
  %18 = icmp eq %"class.blink::mojom::ServiceWorkerFetchEventTiming"* %17, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %2
  call void @_ZN5blink5mojom29ServiceWorkerFetchEventTimingD1Ev(%"class.blink::mojom::ServiceWorkerFetchEventTiming"* nonnull %17) #7
  %20 = bitcast %"class.blink::mojom::ServiceWorkerFetchEventTiming"* %17 to i8*
  call void @_ZdlPv(i8* %20) #8
  br label %21

21:                                               ; preds = %2, %19
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink5mojom45ServiceWorkerFetchResponseCallbackAsyncWaiterC2EPNS0_34ServiceWorkerFetchResponseCallbackE(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"* nocapture, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"*) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter", %"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"* %0, i64 0, i32 0
  store %"class.blink::mojom::ServiceWorkerFetchResponseCallback"* %1, %"class.blink::mojom::ServiceWorkerFetchResponseCallback"** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink5mojom45ServiceWorkerFetchResponseCallbackAsyncWaiterD2Ev(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackAsyncWaiter"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom34ServiceWorkerFetchResponseCallbackD2Ev(%"class.blink::mojom::ServiceWorkerFetchResponseCallback"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5mojom55ServiceWorkerFetchResponseCallbackInterceptorForTestingD0Ev(%"class.blink::mojom::ServiceWorkerFetchResponseCallbackInterceptorForTesting"*) unnamed_addr #3 comdat align 2 {
  tail call void @llvm.trap() #9
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind
declare void @_ZN5blink5mojom29ServiceWorkerFetchEventTimingD1Ev(%"class.blink::mojom::ServiceWorkerFetchEventTiming"*) unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN5blink5mojom16FetchAPIResponseD1Ev(%"class.blink::mojom::FetchAPIResponse"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink5mojom25ServiceWorkerStreamHandleD1Ev(%"class.blink::mojom::ServiceWorkerStreamHandle"*) unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
