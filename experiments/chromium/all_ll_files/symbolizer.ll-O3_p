; ModuleID = '../../v8/src/profiler/symbolizer.cc'
source_filename = "../../v8/src/profiler/symbolizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::ProfilerStats" = type { [7 x %"struct.std::__1::atomic.82"] }
%"struct.std::__1::atomic.82" = type { %"struct.std::__1::__atomic_base.83" }
%"struct.std::__1::__atomic_base.83" = type { %"struct.std::__1::__atomic_base.84" }
%"struct.std::__1::__atomic_base.84" = type { %"struct.std::__1::__cxx_atomic_impl.85" }
%"struct.std::__1::__cxx_atomic_impl.85" = type { %"struct.std::__1::__cxx_atomic_base_impl.86" }
%"struct.std::__1::__cxx_atomic_base_impl.86" = type { i32 }
%"class.v8::internal::Symbolizer" = type { %"class.v8::internal::CodeMap"* }
%"class.v8::internal::CodeMap" = type { %"class.std::__1::multimap", %"class.std::__1::deque", %"class.v8::internal::StringsStorage"* }
%"class.std::__1::multimap" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.71" }
%"struct.std::__1::__split_buffer" = type { %"class.v8::internal::CodeEntry"***, %"class.v8::internal::CodeEntry"***, %"class.v8::internal::CodeEntry"***, %"class.std::__1::__compressed_pair.66" }
%"class.v8::internal::CodeEntry" = type { %"struct.std::__1::atomic", i8*, i8*, i32, i32, i32, i32, %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.13", i64, i64* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"class.v8::internal::SourcePositionTable"* }
%"class.v8::internal::SourcePositionTable" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::SourcePositionTable::SourcePositionTuple"*, %"struct.v8::internal::SourcePositionTable::SourcePositionTuple"*, %"class.std::__1::__compressed_pair.7" }
%"struct.v8::internal::SourcePositionTable::SourcePositionTuple" = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.v8::internal::SourcePositionTable::SourcePositionTuple"* }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.v8::internal::CodeEntry::RareData"* }
%"struct.v8::internal::CodeEntry::RareData" = type { i8*, i8*, i32, [4 x i8], %"class.std::__1::unordered_map", %"class.std::__1::unordered_set", %"class.std::__1::vector.56" }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.16", %"class.std::__1::__compressed_pair.24", %"class.std::__1::__compressed_pair.29", %"class.std::__1::__compressed_pair.31", [4 x i8] }>
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18", %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { float }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.35" }
%"class.std::__1::__hash_table.35" = type <{ %"class.std::__1::unique_ptr.36", %"class.std::__1::__compressed_pair.46", %"class.std::__1::__compressed_pair.51", %"class.std::__1::__compressed_pair.53", [4 x i8] }>
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38", %"struct.std::__1::__compressed_pair_elem.40" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"struct.std::__1::__hash_node_base.39"** }
%"struct.std::__1::__hash_node_base.39" = type { %"struct.std::__1::__hash_node_base.39"* }
%"struct.std::__1::__compressed_pair_elem.40" = type { %"class.std::__1::__bucket_list_deallocator.41" }
%"class.std::__1::__bucket_list_deallocator.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.std::__1::__hash_node_base.39" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::vector.56" = type { %"class.std::__1::__vector_base.57" }
%"class.std::__1::__vector_base.57" = type { %"struct.v8::CpuProfileDeoptFrame"*, %"struct.v8::CpuProfileDeoptFrame"*, %"class.std::__1::__compressed_pair.58" }
%"struct.v8::CpuProfileDeoptFrame" = type { i32, i64 }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.v8::CpuProfileDeoptFrame"* }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.v8::internal::CodeEntry"*** }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.v8::internal::StringsStorage" = type { %"class.v8::base::CustomMatcherTemplateHashMapImpl", %"class.v8::base::Mutex" }
%"class.v8::base::CustomMatcherTemplateHashMapImpl" = type { %"class.v8::base::TemplateHashMapImpl" }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::HashEqualityThenKeyMatcher<void *, bool (*)(void *, void *)>, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<void *, void *, v8::base::HashEqualityThenKeyMatcher<void *, bool (*)(void *, void *)>, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::HashEqualityThenKeyMatcher", %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::HashEqualityThenKeyMatcher" = type { i1 (i8*, i8*)* }
%"struct.v8::base::TemplateHashMapEntry" = type opaque
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.v8::internal::Symbolizer::SymbolizedSample" = type <{ %"class.std::__1::vector.75", i32, [4 x i8] }>
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"*, %"class.std::__1::__compressed_pair.77" }
%"struct.v8::internal::CodeEntryAndLineNumber" = type { %"class.v8::internal::CodeEntry"*, i32 }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"struct.v8::internal::CodeEntryAndLineNumber"* }
%"struct.v8::internal::TickSample" = type { i32, i8*, %union.anon, [255 x i8*], i8*, i16, %"class.v8::base::TimeTicks", %"class.v8::base::TimeDelta" }
%union.anon = type { i8* }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZZN2v88internal13ProfilerStats8InstanceEvE5stats = comdat any

@_ZN2v88internal22FLAG_prof_browser_modeE = external local_unnamed_addr global i8, align 1
@_ZZN2v88internal13ProfilerStats8InstanceEvE5stats = linkonce_odr hidden global %"class.v8::internal::ProfilerStats" zeroinitializer, comdat, align 4

@_ZN2v88internal10SymbolizerC1EPNS0_7CodeMapE = hidden unnamed_addr alias void (%"class.v8::internal::Symbolizer"*, %"class.v8::internal::CodeMap"*), void (%"class.v8::internal::Symbolizer"*, %"class.v8::internal::CodeMap"*)* @_ZN2v88internal10SymbolizerC2EPNS0_7CodeMapE

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2v88internal10SymbolizerC2EPNS0_7CodeMapE(%"class.v8::internal::Symbolizer"* nocapture, %"class.v8::internal::CodeMap"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::Symbolizer", %"class.v8::internal::Symbolizer"* %0, i64 0, i32 0
  store %"class.v8::internal::CodeMap"* %1, %"class.v8::internal::CodeMap"** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::CodeEntry"* @_ZN2v88internal10Symbolizer9FindEntryEmPm(%"class.v8::internal::Symbolizer"* nocapture readonly, i64, i64*) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.v8::internal::Symbolizer", %"class.v8::internal::Symbolizer"* %0, i64 0, i32 0
  %5 = load %"class.v8::internal::CodeMap"*, %"class.v8::internal::CodeMap"** %4, align 8
  %6 = tail call %"class.v8::internal::CodeEntry"* @_ZN2v88internal7CodeMap9FindEntryEmPm(%"class.v8::internal::CodeMap"* %5, i64 %1, i64* %2) #8
  %7 = icmp eq %"class.v8::internal::CodeEntry"* %6, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 seq_cst, align 4
  %11 = or i32 %10, 1073741824
  store atomic i32 %11, i32* %9 seq_cst, align 4
  br label %12

12:                                               ; preds = %3, %8
  ret %"class.v8::internal::CodeEntry"* %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.v8::internal::CodeEntry"* @_ZN2v88internal7CodeMap9FindEntryEmPm(%"class.v8::internal::CodeMap"*, i64, i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal10Symbolizer19SymbolizeTickSampleERKNS0_10TickSampleE(%"struct.v8::internal::Symbolizer::SymbolizedSample"* noalias sret, %"class.v8::internal::Symbolizer"* nocapture readonly, %"struct.v8::internal::TickSample"* nocapture readonly dereferenceable(2096)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.std::__1::vector.75", align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"struct.v8::internal::CodeEntryAndLineNumber", align 8
  %8 = bitcast %"class.std::__1::vector.75"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #8
  %9 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 5
  %10 = load i16, i16* %9, align 8
  %11 = and i16 %10, 255
  %12 = add nuw nsw i16 %11, 3
  %13 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %13 to i64*
  %15 = bitcast %"class.std::__1::vector.75"* %4 to i64*
  %16 = zext i16 %12 to i64
  %17 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %18 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %17 to i64*
  %19 = shl nuw nsw i16 %12, 4
  %20 = zext i16 %19 to i64
  %21 = tail call i8* @_Znwm(i64 %20) #9
  %22 = bitcast i8* %21 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  %23 = ptrtoint i8* %21 to i64
  %24 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %22, i64 %16
  %25 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %24 to i64
  %26 = ptrtoint i8* %21 to i64
  store i64 %26, i64* %15, align 8
  store i64 %23, i64* %18, align 8
  store i64 %25, i64* %14, align 8
  %27 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  %30 = ptrtoint i8* %28 to i64
  br i1 %29, label %476, label %31

31:                                               ; preds = %3
  %32 = and i16 %10, 256
  %33 = icmp eq i16 %32, 0
  br i1 %33, label %117, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 0
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 6
  br i1 %37, label %38, label %117

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 2, i32 0
  %40 = bitcast i8** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.v8::internal::Symbolizer", %"class.v8::internal::Symbolizer"* %1, i64 0, i32 0
  %43 = load %"class.v8::internal::CodeMap"*, %"class.v8::internal::CodeMap"** %42, align 8
  %44 = tail call %"class.v8::internal::CodeEntry"* @_ZN2v88internal7CodeMap9FindEntryEmPm(%"class.v8::internal::CodeMap"* %43, i64 %41, i64* null) #8
  %45 = icmp eq %"class.v8::internal::CodeEntry"* %44, null
  br i1 %45, label %54, label %46

46:                                               ; preds = %38
  %47 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 seq_cst, align 4
  %49 = or i32 %48, 1073741824
  store atomic i32 %49, i32* %47 seq_cst, align 4
  %50 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %51 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %50, align 8
  %52 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %13, align 8
  %53 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %51 to i64
  br label %54

54:                                               ; preds = %38, %46
  %55 = phi i64 [ %23, %38 ], [ %53, %46 ]
  %56 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %24, %38 ], [ %52, %46 ]
  %57 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %22, %38 ], [ %51, %46 ]
  %58 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %59 = icmp ult %"struct.v8::internal::CodeEntryAndLineNumber"* %57, %56
  %60 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %56 to i64
  br i1 %59, label %61, label %67

61:                                               ; preds = %54
  %62 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %57, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %44, %"class.v8::internal::CodeEntry"** %62, align 8
  %63 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %57, i64 0, i32 1
  store i32 0, i32* %63, align 8
  %64 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %57, i64 1
  %65 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %64 to i64
  %66 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %58 to i64*
  store i64 %65, i64* %66, align 8
  br label %281

67:                                               ; preds = %54
  %68 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %57 to i64
  %69 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %58 to i64*
  %70 = load i64, i64* %15, align 8
  %71 = sub i64 %68, %70
  %72 = ashr exact i64 %71, 4
  %73 = add nsw i64 %72, 1
  %74 = icmp ugt i64 %73, 1152921504606846975
  br i1 %74, label %75, label %77

75:                                               ; preds = %67
  %76 = bitcast %"class.std::__1::vector.75"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %76) #10
  unreachable

77:                                               ; preds = %67
  %78 = sub i64 %60, %70
  %79 = ashr exact i64 %78, 4
  %80 = icmp ult i64 %79, 576460752303423487
  br i1 %80, label %81, label %89

81:                                               ; preds = %77
  %82 = ashr exact i64 %78, 3
  %83 = icmp ult i64 %82, %73
  %84 = select i1 %83, i64 %73, i64 %82
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %94, label %86

86:                                               ; preds = %81
  %87 = icmp ugt i64 %84, 1152921504606846975
  br i1 %87, label %88, label %89

88:                                               ; preds = %86
  tail call void @abort() #10
  unreachable

89:                                               ; preds = %86, %77
  %90 = phi i64 [ %84, %86 ], [ 1152921504606846975, %77 ]
  %91 = shl i64 %90, 4
  %92 = tail call i8* @_Znwm(i64 %91) #9
  %93 = bitcast i8* %92 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  br label %94

94:                                               ; preds = %89, %81
  %95 = phi i64 [ %90, %89 ], [ 0, %81 ]
  %96 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %93, %89 ], [ null, %81 ]
  %97 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %96, i64 %72
  %98 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %96, i64 %95
  %99 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %98 to i64
  %100 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %97, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %44, %"class.v8::internal::CodeEntry"** %100, align 8
  %101 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %96, i64 %72, i32 1
  store i32 0, i32* %101, align 8
  %102 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %97, i64 1
  %103 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %102 to i64
  %104 = sub i64 %55, %70
  %105 = ashr exact i64 %104, 4
  %106 = sub nsw i64 0, %105
  %107 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %97, i64 %106
  %108 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %107 to i64
  %109 = icmp sgt i64 %104, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %94
  %111 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"* %107 to i8*
  %112 = inttoptr i64 %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 %104, i1 false) #8
  br label %113

113:                                              ; preds = %110, %94
  store i64 %108, i64* %15, align 8
  store i64 %103, i64* %69, align 8
  store i64 %99, i64* %14, align 8
  %114 = icmp eq i64 %70, 0
  br i1 %114, label %281, label %115

115:                                              ; preds = %113
  %116 = inttoptr i64 %70 to i8*
  tail call void @_ZdlPv(i8* %116) #9
  br label %281

117:                                              ; preds = %31, %34
  %118 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %118) #8
  store i64 0, i64* %5, align 8
  %119 = getelementptr inbounds %"class.v8::internal::Symbolizer", %"class.v8::internal::Symbolizer"* %1, i64 0, i32 0
  %120 = load %"class.v8::internal::CodeMap"*, %"class.v8::internal::CodeMap"** %119, align 8
  %121 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal7CodeMap9FindEntryEmPm(%"class.v8::internal::CodeMap"* %120, i64 %30, i64* nonnull %5) #8
  %122 = icmp eq %"class.v8::internal::CodeEntry"* %121, null
  br i1 %122, label %123, label %134

123:                                              ; preds = %117
  %124 = load i16, i16* %9, align 8
  %125 = and i16 %124, 256
  %126 = icmp eq i16 %125, 0
  br i1 %126, label %127, label %278

127:                                              ; preds = %123
  %128 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 2, i32 0
  %129 = bitcast i8** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = load %"class.v8::internal::CodeMap"*, %"class.v8::internal::CodeMap"** %119, align 8
  %132 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal7CodeMap9FindEntryEmPm(%"class.v8::internal::CodeMap"* %131, i64 %130, i64* nonnull %5) #8
  %133 = icmp eq %"class.v8::internal::CodeEntry"* %132, null
  br i1 %133, label %278, label %134

134:                                              ; preds = %127, %117
  %135 = phi %"class.v8::internal::CodeEntry"* [ %121, %117 ], [ %132, %127 ]
  %136 = phi i64 [ %30, %117 ], [ %130, %127 ]
  %137 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %138 = load atomic i32, i32* %137 seq_cst, align 4
  %139 = or i32 %138, 1073741824
  store atomic i32 %139, i32* %137 seq_cst, align 4
  %140 = load i64, i64* %5, align 8
  %141 = sub i64 %136, %140
  %142 = trunc i64 %141 to i32
  %143 = call i32 @_ZNK2v88internal9CodeEntry13GetSourceLineEi(%"class.v8::internal::CodeEntry"* nonnull %135, i32 %142) #8
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %148

145:                                              ; preds = %134
  %146 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %135, i64 0, i32 3
  %147 = load i32, i32* %146, align 8
  br label %148

148:                                              ; preds = %145, %134
  %149 = phi i32 [ %147, %145 ], [ %143, %134 ]
  %150 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %151 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %150, align 8
  %152 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %13, align 8
  %153 = icmp ult %"struct.v8::internal::CodeEntryAndLineNumber"* %151, %152
  %154 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %152 to i64
  br i1 %153, label %155, label %161

155:                                              ; preds = %148
  %156 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %151, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %135, %"class.v8::internal::CodeEntry"** %156, align 8
  %157 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %151, i64 0, i32 1
  store i32 %149, i32* %157, align 8
  %158 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %151, i64 1
  %159 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %158 to i64
  %160 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %150 to i64*
  store i64 %159, i64* %160, align 8
  br label %207

161:                                              ; preds = %148
  %162 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %151 to i64
  %163 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %150 to i64*
  %164 = load i64, i64* %15, align 8
  %165 = sub i64 %162, %164
  %166 = ashr exact i64 %165, 4
  %167 = add nsw i64 %166, 1
  %168 = icmp ugt i64 %167, 1152921504606846975
  br i1 %168, label %169, label %171

169:                                              ; preds = %161
  %170 = bitcast %"class.std::__1::vector.75"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %170) #10
  unreachable

171:                                              ; preds = %161
  %172 = sub i64 %154, %164
  %173 = ashr exact i64 %172, 4
  %174 = icmp ult i64 %173, 576460752303423487
  br i1 %174, label %175, label %183

175:                                              ; preds = %171
  %176 = ashr exact i64 %172, 3
  %177 = icmp ult i64 %176, %167
  %178 = select i1 %177, i64 %167, i64 %176
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %188, label %180

180:                                              ; preds = %175
  %181 = icmp ugt i64 %178, 1152921504606846975
  br i1 %181, label %182, label %183

182:                                              ; preds = %180
  call void @abort() #10
  unreachable

183:                                              ; preds = %180, %171
  %184 = phi i64 [ %178, %180 ], [ 1152921504606846975, %171 ]
  %185 = shl i64 %184, 4
  %186 = call i8* @_Znwm(i64 %185) #9
  %187 = bitcast i8* %186 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  br label %188

188:                                              ; preds = %183, %175
  %189 = phi i64 [ %184, %183 ], [ 0, %175 ]
  %190 = phi i8* [ %186, %183 ], [ null, %175 ]
  %191 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %187, %183 ], [ null, %175 ]
  %192 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %191, i64 %166
  %193 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %191, i64 %189
  %194 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %193 to i64
  %195 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %192, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %135, %"class.v8::internal::CodeEntry"** %195, align 8
  %196 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %191, i64 %166, i32 1
  store i32 %149, i32* %196, align 8
  %197 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %192, i64 1
  %198 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %197 to i64
  %199 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %191 to i64
  %200 = icmp sgt i64 %165, 0
  br i1 %200, label %201, label %203

201:                                              ; preds = %188
  %202 = inttoptr i64 %164 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %190, i8* align 8 %202, i64 %165, i1 false) #8
  br label %203

203:                                              ; preds = %201, %188
  store i64 %199, i64* %15, align 8
  store i64 %198, i64* %163, align 8
  store i64 %194, i64* %14, align 8
  %204 = icmp eq i64 %164, 0
  br i1 %204, label %207, label %205

205:                                              ; preds = %203
  %206 = inttoptr i64 %164 to i8*
  call void @_ZdlPv(i8* %206) #9
  br label %207

207:                                              ; preds = %155, %203, %205
  %208 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %135, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %209 = load atomic i32, i32* %208 seq_cst, align 4
  %210 = and i32 %209, 268435200
  %211 = icmp eq i32 %210, 82688
  br i1 %211, label %216, label %212

212:                                              ; preds = %207
  %213 = load atomic i32, i32* %208 seq_cst, align 4
  %214 = and i32 %213, 268435200
  %215 = icmp eq i32 %214, 83200
  br i1 %215, label %216, label %278

216:                                              ; preds = %212, %207
  %217 = load i16, i16* %9, align 8
  %218 = and i16 %217, 256
  %219 = icmp eq i16 %218, 0
  br i1 %219, label %220, label %278

220:                                              ; preds = %216
  call void @_ZN2v88internal13ProfilerStats9AddReasonENS1_6ReasonE(%"class.v8::internal::ProfilerStats"* nonnull @_ZZN2v88internal13ProfilerStats8InstanceEvE5stats, i32 4) #8
  %221 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry16unresolved_entryEv() #8
  %222 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %150, align 8
  %223 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %13, align 8
  %224 = icmp ult %"struct.v8::internal::CodeEntryAndLineNumber"* %222, %223
  %225 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %223 to i64
  br i1 %224, label %226, label %232

226:                                              ; preds = %220
  %227 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %222, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %221, %"class.v8::internal::CodeEntry"** %227, align 8
  %228 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %222, i64 0, i32 1
  store i32 0, i32* %228, align 8
  %229 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %222, i64 1
  %230 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %229 to i64
  %231 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %150 to i64*
  store i64 %230, i64* %231, align 8
  br label %278

232:                                              ; preds = %220
  %233 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %222 to i64
  %234 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %150 to i64*
  %235 = load i64, i64* %15, align 8
  %236 = sub i64 %233, %235
  %237 = ashr exact i64 %236, 4
  %238 = add nsw i64 %237, 1
  %239 = icmp ugt i64 %238, 1152921504606846975
  br i1 %239, label %240, label %242

240:                                              ; preds = %232
  %241 = bitcast %"class.std::__1::vector.75"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %241) #10
  unreachable

242:                                              ; preds = %232
  %243 = sub i64 %225, %235
  %244 = ashr exact i64 %243, 4
  %245 = icmp ult i64 %244, 576460752303423487
  br i1 %245, label %246, label %254

246:                                              ; preds = %242
  %247 = ashr exact i64 %243, 3
  %248 = icmp ult i64 %247, %238
  %249 = select i1 %248, i64 %238, i64 %247
  %250 = icmp eq i64 %249, 0
  br i1 %250, label %259, label %251

251:                                              ; preds = %246
  %252 = icmp ugt i64 %249, 1152921504606846975
  br i1 %252, label %253, label %254

253:                                              ; preds = %251
  call void @abort() #10
  unreachable

254:                                              ; preds = %251, %242
  %255 = phi i64 [ %249, %251 ], [ 1152921504606846975, %242 ]
  %256 = shl i64 %255, 4
  %257 = call i8* @_Znwm(i64 %256) #9
  %258 = bitcast i8* %257 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  br label %259

259:                                              ; preds = %254, %246
  %260 = phi i64 [ %255, %254 ], [ 0, %246 ]
  %261 = phi i8* [ %257, %254 ], [ null, %246 ]
  %262 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %258, %254 ], [ null, %246 ]
  %263 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %262, i64 %237
  %264 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %262, i64 %260
  %265 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %264 to i64
  %266 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %263, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %221, %"class.v8::internal::CodeEntry"** %266, align 8
  %267 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %262, i64 %237, i32 1
  store i32 0, i32* %267, align 8
  %268 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %263, i64 1
  %269 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %268 to i64
  %270 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %262 to i64
  %271 = icmp sgt i64 %236, 0
  br i1 %271, label %272, label %274

272:                                              ; preds = %259
  %273 = inttoptr i64 %235 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %261, i8* align 8 %273, i64 %236, i1 false) #8
  br label %274

274:                                              ; preds = %272, %259
  store i64 %270, i64* %15, align 8
  store i64 %269, i64* %234, align 8
  store i64 %265, i64* %14, align 8
  %275 = icmp eq i64 %235, 0
  br i1 %275, label %278, label %276

276:                                              ; preds = %274
  %277 = inttoptr i64 %235 to i8*
  call void @_ZdlPv(i8* %277) #9
  br label %278

278:                                              ; preds = %127, %123, %276, %274, %226, %212, %216
  %279 = phi i8 [ 0, %216 ], [ 0, %212 ], [ 0, %226 ], [ 0, %274 ], [ 0, %276 ], [ 1, %123 ], [ 1, %127 ]
  %280 = phi i32 [ %149, %216 ], [ %149, %212 ], [ %149, %226 ], [ %149, %274 ], [ %149, %276 ], [ 0, %123 ], [ 0, %127 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %118) #8
  br label %281

281:                                              ; preds = %115, %113, %61, %278
  %282 = phi i8 [ %279, %278 ], [ 1, %61 ], [ 1, %113 ], [ 1, %115 ]
  %283 = phi i32 [ %280, %278 ], [ 0, %61 ], [ 0, %113 ], [ 0, %115 ]
  %284 = load i16, i16* %9, align 8
  %285 = and i16 %284, 255
  %286 = icmp eq i16 %285, 0
  br i1 %286, label %476, label %287

287:                                              ; preds = %281
  %288 = bitcast i64* %6 to i8*
  %289 = getelementptr inbounds %"class.v8::internal::Symbolizer", %"class.v8::internal::Symbolizer"* %1, i64 0, i32 0
  %290 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"* %7 to i8*
  %291 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %292 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %291 to i64*
  br label %293

293:                                              ; preds = %287, %468
  %294 = phi i64 [ 0, %287 ], [ %471, %468 ]
  %295 = phi i32 [ %283, %287 ], [ %470, %468 ]
  %296 = phi i8 [ %282, %287 ], [ %469, %468 ]
  %297 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 3, i64 %294
  %298 = bitcast i8** %297 to i64*
  %299 = load i64, i64* %298, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %288) #8
  store i64 0, i64* %6, align 8
  %300 = load %"class.v8::internal::CodeMap"*, %"class.v8::internal::CodeMap"** %289, align 8
  %301 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal7CodeMap9FindEntryEmPm(%"class.v8::internal::CodeMap"* %300, i64 %299, i64* nonnull %6) #8
  %302 = icmp eq %"class.v8::internal::CodeEntry"* %301, null
  br i1 %302, label %410, label %303

303:                                              ; preds = %293
  %304 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %301, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %305 = load atomic i32, i32* %304 seq_cst, align 4
  %306 = or i32 %305, 1073741824
  store atomic i32 %306, i32* %304 seq_cst, align 4
  %307 = load i64, i64* %6, align 8
  %308 = sub i64 %299, %307
  %309 = trunc i64 %308 to i32
  %310 = call %"class.std::__1::vector.75"* @_ZNK2v88internal9CodeEntry14GetInlineStackEi(%"class.v8::internal::CodeEntry"* nonnull %301, i32 %309) #8
  %311 = icmp ne %"class.std::__1::vector.75"* %310, null
  br i1 %311, label %312, label %397

312:                                              ; preds = %303
  %313 = call i32 @_ZNK2v88internal9CodeEntry13GetSourceLineEi(%"class.v8::internal::CodeEntry"* nonnull %301, i32 %309) #8
  %314 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %310, i64 0, i32 0, i32 0
  %315 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %314, align 8
  %316 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %310, i64 0, i32 0, i32 1
  %317 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %316, align 8
  %318 = icmp eq %"struct.v8::internal::CodeEntryAndLineNumber"* %315, %317
  br i1 %318, label %319, label %339

319:                                              ; preds = %312
  %320 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %315 to i64
  %321 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %317 to i64
  br label %327

322:                                              ; preds = %394
  %323 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %316 to i64*
  %324 = load i64, i64* %323, align 8
  %325 = bitcast %"class.std::__1::vector.75"* %310 to i64*
  %326 = load i64, i64* %325, align 8
  br label %327

327:                                              ; preds = %319, %322
  %328 = phi i64 [ %326, %322 ], [ %320, %319 ]
  %329 = phi i64 [ %324, %322 ], [ %321, %319 ]
  %330 = load i64, i64* %292, align 8
  %331 = load i64, i64* %15, align 8
  %332 = sub i64 %330, %331
  %333 = ashr exact i64 %332, 4
  %334 = sub i64 %329, %328
  %335 = ashr exact i64 %334, 4
  %336 = sub nsw i64 %333, %335
  %337 = inttoptr i64 %331 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  %338 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %337, i64 %336, i32 1
  store i32 %313, i32* %338, align 8
  br label %397

339:                                              ; preds = %312, %394
  %340 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %395, %394 ], [ %315, %312 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %290)
  %341 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"* %340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %290, i8* align 8 %341, i64 16, i1 false)
  %342 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %291, align 8
  %343 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %13, align 8
  %344 = icmp eq %"struct.v8::internal::CodeEntryAndLineNumber"* %342, %343
  %345 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %343 to i64
  br i1 %344, label %350, label %346

346:                                              ; preds = %339
  %347 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"* %342 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %347, i8* nonnull align 8 %290, i64 16, i1 false) #8
  %348 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %342, i64 1
  %349 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %348 to i64
  store i64 %349, i64* %292, align 8
  br label %394

350:                                              ; preds = %339
  %351 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %342 to i64
  %352 = load i64, i64* %15, align 8
  %353 = sub i64 %351, %352
  %354 = ashr exact i64 %353, 4
  %355 = add nsw i64 %354, 1
  %356 = icmp ugt i64 %355, 1152921504606846975
  br i1 %356, label %357, label %359

357:                                              ; preds = %350
  %358 = bitcast %"class.std::__1::vector.75"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %358) #10
  unreachable

359:                                              ; preds = %350
  %360 = sub i64 %345, %352
  %361 = ashr exact i64 %360, 4
  %362 = icmp ult i64 %361, 576460752303423487
  br i1 %362, label %363, label %371

363:                                              ; preds = %359
  %364 = ashr exact i64 %360, 3
  %365 = icmp ult i64 %364, %355
  %366 = select i1 %365, i64 %355, i64 %364
  %367 = icmp eq i64 %366, 0
  br i1 %367, label %376, label %368

368:                                              ; preds = %363
  %369 = icmp ugt i64 %366, 1152921504606846975
  br i1 %369, label %370, label %371

370:                                              ; preds = %368
  call void @abort() #10
  unreachable

371:                                              ; preds = %368, %359
  %372 = phi i64 [ %366, %368 ], [ 1152921504606846975, %359 ]
  %373 = shl i64 %372, 4
  %374 = call i8* @_Znwm(i64 %373) #9
  %375 = bitcast i8* %374 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  br label %376

376:                                              ; preds = %371, %363
  %377 = phi i64 [ %372, %371 ], [ 0, %363 ]
  %378 = phi i8* [ %374, %371 ], [ null, %363 ]
  %379 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %375, %371 ], [ null, %363 ]
  %380 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %379, i64 %354
  %381 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %379, i64 %377
  %382 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %381 to i64
  %383 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"* %380 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %383, i8* nonnull align 8 %290, i64 16, i1 false) #8
  %384 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %380, i64 1
  %385 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %384 to i64
  %386 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %379 to i64
  %387 = icmp sgt i64 %353, 0
  br i1 %387, label %388, label %390

388:                                              ; preds = %376
  %389 = inttoptr i64 %352 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %378, i8* align 8 %389, i64 %353, i1 false) #8
  br label %390

390:                                              ; preds = %388, %376
  store i64 %386, i64* %15, align 8
  store i64 %385, i64* %292, align 8
  store i64 %382, i64* %14, align 8
  %391 = icmp eq i64 %352, 0
  br i1 %391, label %394, label %392

392:                                              ; preds = %390
  %393 = inttoptr i64 %352 to i8*
  call void @_ZdlPv(i8* %393) #9
  br label %394

394:                                              ; preds = %346, %390, %392
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %290)
  %395 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %340, i64 1
  %396 = icmp eq %"struct.v8::internal::CodeEntryAndLineNumber"* %395, %317
  br i1 %396, label %322, label %339

397:                                              ; preds = %327, %303
  %398 = and i8 %296, 1
  %399 = icmp eq i8 %398, 0
  br i1 %399, label %406, label %400

400:                                              ; preds = %397
  %401 = call i32 @_ZNK2v88internal9CodeEntry13GetSourceLineEi(%"class.v8::internal::CodeEntry"* nonnull %301, i32 %309) #8
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %403, label %406

403:                                              ; preds = %400
  %404 = getelementptr inbounds %"class.v8::internal::CodeEntry", %"class.v8::internal::CodeEntry"* %301, i64 0, i32 3
  %405 = load i32, i32* %404, align 8
  br label %406

406:                                              ; preds = %400, %403, %397
  %407 = phi i8 [ %296, %397 ], [ 0, %403 ], [ 0, %400 ]
  %408 = phi i32 [ %295, %397 ], [ %405, %403 ], [ %401, %400 ]
  %409 = call i32 @_ZNK2v88internal9CodeEntry13GetSourceLineEi(%"class.v8::internal::CodeEntry"* nonnull %301, i32 %309) #8
  br i1 %311, label %468, label %410

410:                                              ; preds = %406, %293
  %411 = phi i32 [ %409, %406 ], [ 0, %293 ]
  %412 = phi i8 [ %407, %406 ], [ %296, %293 ]
  %413 = phi i32 [ %408, %406 ], [ %295, %293 ]
  %414 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %291, align 8
  %415 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %13, align 8
  %416 = icmp ult %"struct.v8::internal::CodeEntryAndLineNumber"* %414, %415
  %417 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %415 to i64
  br i1 %416, label %418, label %423

418:                                              ; preds = %410
  %419 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %414, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %301, %"class.v8::internal::CodeEntry"** %419, align 8
  %420 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %414, i64 0, i32 1
  store i32 %411, i32* %420, align 8
  %421 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %414, i64 1
  %422 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %421 to i64
  store i64 %422, i64* %292, align 8
  br label %468

423:                                              ; preds = %410
  %424 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %414 to i64
  %425 = load i64, i64* %15, align 8
  %426 = sub i64 %424, %425
  %427 = ashr exact i64 %426, 4
  %428 = add nsw i64 %427, 1
  %429 = icmp ugt i64 %428, 1152921504606846975
  br i1 %429, label %430, label %432

430:                                              ; preds = %423
  %431 = bitcast %"class.std::__1::vector.75"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %431) #10
  unreachable

432:                                              ; preds = %423
  %433 = sub i64 %417, %425
  %434 = ashr exact i64 %433, 4
  %435 = icmp ult i64 %434, 576460752303423487
  br i1 %435, label %436, label %444

436:                                              ; preds = %432
  %437 = ashr exact i64 %433, 3
  %438 = icmp ult i64 %437, %428
  %439 = select i1 %438, i64 %428, i64 %437
  %440 = icmp eq i64 %439, 0
  br i1 %440, label %449, label %441

441:                                              ; preds = %436
  %442 = icmp ugt i64 %439, 1152921504606846975
  br i1 %442, label %443, label %444

443:                                              ; preds = %441
  call void @abort() #10
  unreachable

444:                                              ; preds = %441, %432
  %445 = phi i64 [ %439, %441 ], [ 1152921504606846975, %432 ]
  %446 = shl i64 %445, 4
  %447 = call i8* @_Znwm(i64 %446) #9
  %448 = bitcast i8* %447 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  br label %449

449:                                              ; preds = %444, %436
  %450 = phi i64 [ %445, %444 ], [ 0, %436 ]
  %451 = phi i8* [ %447, %444 ], [ null, %436 ]
  %452 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %448, %444 ], [ null, %436 ]
  %453 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %452, i64 %427
  %454 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %452, i64 %450
  %455 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %454 to i64
  %456 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %453, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %301, %"class.v8::internal::CodeEntry"** %456, align 8
  %457 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %452, i64 %427, i32 1
  store i32 %411, i32* %457, align 8
  %458 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %453, i64 1
  %459 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %458 to i64
  %460 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %452 to i64
  %461 = icmp sgt i64 %426, 0
  br i1 %461, label %462, label %464

462:                                              ; preds = %449
  %463 = inttoptr i64 %425 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %451, i8* align 8 %463, i64 %426, i1 false) #8
  br label %464

464:                                              ; preds = %462, %449
  store i64 %460, i64* %15, align 8
  store i64 %459, i64* %292, align 8
  store i64 %455, i64* %14, align 8
  %465 = icmp eq i64 %425, 0
  br i1 %465, label %468, label %466

466:                                              ; preds = %464
  %467 = inttoptr i64 %425 to i8*
  call void @_ZdlPv(i8* %467) #9
  br label %468

468:                                              ; preds = %406, %466, %464, %418
  %469 = phi i8 [ %407, %406 ], [ %412, %418 ], [ %412, %464 ], [ %412, %466 ]
  %470 = phi i32 [ %408, %406 ], [ %413, %418 ], [ %413, %464 ], [ %413, %466 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %288) #8
  %471 = add nuw nsw i64 %294, 1
  %472 = load i16, i16* %9, align 8
  %473 = and i16 %472, 255
  %474 = zext i16 %473 to i64
  %475 = icmp ult i64 %471, %474
  br i1 %475, label %293, label %476

476:                                              ; preds = %468, %281, %3
  %477 = phi i32 [ 0, %3 ], [ %283, %281 ], [ %470, %468 ]
  %478 = load i8, i8* @_ZN2v88internal22FLAG_prof_browser_modeE, align 1, !range !2
  %479 = icmp eq i8 %478, 0
  br i1 %479, label %571, label %480

480:                                              ; preds = %476
  %481 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 0
  %482 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %481, align 8
  %483 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %484 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %483, align 8
  %485 = icmp eq %"struct.v8::internal::CodeEntryAndLineNumber"* %482, %484
  br i1 %485, label %500, label %486

486:                                              ; preds = %480, %486
  %487 = phi i8 [ %492, %486 ], [ 1, %480 ]
  %488 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %493, %486 ], [ %482, %480 ]
  %489 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %488, i64 0, i32 0
  %490 = load %"class.v8::internal::CodeEntry"*, %"class.v8::internal::CodeEntry"** %489, align 8
  %491 = icmp eq %"class.v8::internal::CodeEntry"* %490, null
  %492 = select i1 %491, i8 %487, i8 0
  %493 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %488, i64 1
  %494 = xor i1 %491, true
  %495 = icmp eq %"struct.v8::internal::CodeEntryAndLineNumber"* %493, %484
  %496 = or i1 %495, %494
  br i1 %496, label %497, label %486

497:                                              ; preds = %486
  %498 = and i8 %492, 1
  %499 = icmp eq i8 %498, 0
  br i1 %499, label %571, label %500

500:                                              ; preds = %480, %497
  %501 = load i8*, i8** %27, align 8
  %502 = icmp eq i8* %501, null
  %503 = select i1 %502, i32 6, i32 5
  call void @_ZN2v88internal13ProfilerStats9AddReasonENS1_6ReasonE(%"class.v8::internal::ProfilerStats"* nonnull @_ZZN2v88internal13ProfilerStats8InstanceEvE5stats, i32 %503) #8
  %504 = getelementptr inbounds %"struct.v8::internal::TickSample", %"struct.v8::internal::TickSample"* %2, i64 0, i32 0
  %505 = load i32, i32* %504, align 8
  switch i32 %505, label %512 [
    i32 1, label %506
    i32 0, label %508
    i32 2, label %508
    i32 4, label %508
    i32 3, label %508
    i32 7, label %508
    i32 5, label %508
    i32 6, label %508
    i32 8, label %510
  ]

506:                                              ; preds = %500
  %507 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry8gc_entryEv() #8
  br label %513

508:                                              ; preds = %500, %500, %500, %500, %500, %500, %500
  %509 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry13program_entryEv() #8
  br label %513

510:                                              ; preds = %500
  %511 = call %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry10idle_entryEv() #8
  br label %513

512:                                              ; preds = %500
  unreachable

513:                                              ; preds = %506, %508, %510
  %514 = phi %"class.v8::internal::CodeEntry"* [ %511, %510 ], [ %509, %508 ], [ %507, %506 ]
  %515 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %483, align 8
  %516 = load %"struct.v8::internal::CodeEntryAndLineNumber"*, %"struct.v8::internal::CodeEntryAndLineNumber"** %13, align 8
  %517 = icmp ult %"struct.v8::internal::CodeEntryAndLineNumber"* %515, %516
  %518 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %516 to i64
  br i1 %517, label %519, label %525

519:                                              ; preds = %513
  %520 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %515, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %514, %"class.v8::internal::CodeEntry"** %520, align 8
  %521 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %515, i64 0, i32 1
  store i32 0, i32* %521, align 8
  %522 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %515, i64 1
  %523 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %522 to i64
  %524 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %483 to i64*
  store i64 %523, i64* %524, align 8
  br label %571

525:                                              ; preds = %513
  %526 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %515 to i64
  %527 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %483 to i64*
  %528 = load i64, i64* %15, align 8
  %529 = sub i64 %526, %528
  %530 = ashr exact i64 %529, 4
  %531 = add nsw i64 %530, 1
  %532 = icmp ugt i64 %531, 1152921504606846975
  br i1 %532, label %533, label %535

533:                                              ; preds = %525
  %534 = bitcast %"class.std::__1::vector.75"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %534) #10
  unreachable

535:                                              ; preds = %525
  %536 = sub i64 %518, %528
  %537 = ashr exact i64 %536, 4
  %538 = icmp ult i64 %537, 576460752303423487
  br i1 %538, label %539, label %547

539:                                              ; preds = %535
  %540 = ashr exact i64 %536, 3
  %541 = icmp ult i64 %540, %531
  %542 = select i1 %541, i64 %531, i64 %540
  %543 = icmp eq i64 %542, 0
  br i1 %543, label %552, label %544

544:                                              ; preds = %539
  %545 = icmp ugt i64 %542, 1152921504606846975
  br i1 %545, label %546, label %547

546:                                              ; preds = %544
  call void @abort() #10
  unreachable

547:                                              ; preds = %544, %535
  %548 = phi i64 [ %542, %544 ], [ 1152921504606846975, %535 ]
  %549 = shl i64 %548, 4
  %550 = call i8* @_Znwm(i64 %549) #9
  %551 = bitcast i8* %550 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  br label %552

552:                                              ; preds = %547, %539
  %553 = phi i64 [ %548, %547 ], [ 0, %539 ]
  %554 = phi i8* [ %550, %547 ], [ null, %539 ]
  %555 = phi %"struct.v8::internal::CodeEntryAndLineNumber"* [ %551, %547 ], [ null, %539 ]
  %556 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %555, i64 %530
  %557 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %555, i64 %553
  %558 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %557 to i64
  %559 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %556, i64 0, i32 0
  store %"class.v8::internal::CodeEntry"* %514, %"class.v8::internal::CodeEntry"** %559, align 8
  %560 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %555, i64 %530, i32 1
  store i32 0, i32* %560, align 8
  %561 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %556, i64 1
  %562 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %561 to i64
  %563 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %555 to i64
  %564 = icmp sgt i64 %529, 0
  br i1 %564, label %565, label %567

565:                                              ; preds = %552
  %566 = inttoptr i64 %528 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %554, i8* align 8 %566, i64 %529, i1 false) #8
  br label %567

567:                                              ; preds = %565, %552
  store i64 %563, i64* %15, align 8
  store i64 %562, i64* %527, align 8
  store i64 %558, i64* %14, align 8
  %568 = icmp eq i64 %528, 0
  br i1 %568, label %573, label %569

569:                                              ; preds = %567
  %570 = inttoptr i64 %528 to i8*
  call void @_ZdlPv(i8* %570) #9
  br label %571

571:                                              ; preds = %476, %497, %519, %569
  %572 = load i64, i64* %15, align 8
  br label %573

573:                                              ; preds = %571, %567
  %574 = phi i64 [ %572, %571 ], [ %563, %567 ]
  %575 = bitcast %"struct.v8::internal::Symbolizer::SymbolizedSample"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %575, i8 0, i64 24, i1 false) #8
  %576 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %4, i64 0, i32 0, i32 1
  %577 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %576 to i64*
  %578 = load i64, i64* %577, align 8
  %579 = sub i64 %578, %574
  %580 = ashr exact i64 %579, 4
  %581 = icmp eq i64 %579, 0
  br i1 %581, label %604, label %582

582:                                              ; preds = %573
  %583 = icmp ugt i64 %580, 1152921504606846975
  br i1 %583, label %584, label %586

584:                                              ; preds = %582
  %585 = bitcast %"struct.v8::internal::Symbolizer::SymbolizedSample"* %0 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %585) #10
  unreachable

586:                                              ; preds = %582
  %587 = call i8* @_Znwm(i64 %579) #9
  %588 = bitcast i8* %587 to %"struct.v8::internal::CodeEntryAndLineNumber"*
  %589 = getelementptr inbounds %"struct.v8::internal::Symbolizer::SymbolizedSample", %"struct.v8::internal::Symbolizer::SymbolizedSample"* %0, i64 0, i32 0, i32 0, i32 1
  %590 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %589 to i8**
  store i8* %587, i8** %590, align 8
  %591 = bitcast %"struct.v8::internal::Symbolizer::SymbolizedSample"* %0 to i8**
  store i8* %587, i8** %591, align 8
  %592 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %588, i64 %580
  %593 = getelementptr inbounds %"struct.v8::internal::Symbolizer::SymbolizedSample", %"struct.v8::internal::Symbolizer::SymbolizedSample"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.v8::internal::CodeEntryAndLineNumber"* %592, %"struct.v8::internal::CodeEntryAndLineNumber"** %593, align 8
  %594 = bitcast %"struct.v8::internal::CodeEntryAndLineNumber"** %589 to i64*
  %595 = ptrtoint i8* %587 to i64
  %596 = icmp sgt i64 %579, 0
  br i1 %596, label %597, label %602

597:                                              ; preds = %586
  %598 = lshr exact i64 %579, 4
  %599 = inttoptr i64 %574 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %587, i8* align 8 %599, i64 %579, i1 false) #8
  %600 = getelementptr inbounds %"struct.v8::internal::CodeEntryAndLineNumber", %"struct.v8::internal::CodeEntryAndLineNumber"* %588, i64 %598
  %601 = ptrtoint %"struct.v8::internal::CodeEntryAndLineNumber"* %600 to i64
  br label %602

602:                                              ; preds = %597, %586
  %603 = phi i64 [ %601, %597 ], [ %595, %586 ]
  store i64 %603, i64* %594, align 8
  br label %604

604:                                              ; preds = %573, %602
  %605 = getelementptr inbounds %"struct.v8::internal::Symbolizer::SymbolizedSample", %"struct.v8::internal::Symbolizer::SymbolizedSample"* %0, i64 0, i32 1
  store i32 %477, i32* %605, align 8
  %606 = icmp eq i64 %574, 0
  br i1 %606, label %609, label %607

607:                                              ; preds = %604
  store i64 %574, i64* %577, align 8
  %608 = inttoptr i64 %574 to i8*
  call void @_ZdlPv(i8* %608) #9
  br label %609

609:                                              ; preds = %604, %607
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #8
  ret void
}

declare i32 @_ZNK2v88internal9CodeEntry13GetSourceLineEi(%"class.v8::internal::CodeEntry"*, i32) local_unnamed_addr #3

declare void @_ZN2v88internal13ProfilerStats9AddReasonENS1_6ReasonE(%"class.v8::internal::ProfilerStats"*, i32) local_unnamed_addr #3

declare %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry16unresolved_entryEv() local_unnamed_addr #3

declare %"class.std::__1::vector.75"* @_ZNK2v88internal9CodeEntry14GetInlineStackEi(%"class.v8::internal::CodeEntry"*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry8gc_entryEv() local_unnamed_addr #3

declare %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry13program_entryEv() local_unnamed_addr #3

declare %"class.v8::internal::CodeEntry"* @_ZN2v88internal9CodeEntry10idle_entryEv() local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }
attributes #10 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
