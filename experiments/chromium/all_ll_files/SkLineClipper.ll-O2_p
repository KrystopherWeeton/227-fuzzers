; ModuleID = '../../third_party/skia/src/core/SkLineClipper.cpp'
source_filename = "../../third_party/skia/src/core/SkLineClipper.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN13SkLineClipper13IntersectLineEPK7SkPointRK6SkRectPS0_(%struct.SkPoint* readonly, %struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkPoint*) local_unnamed_addr #0 align 2 {
  %4 = alloca [2 x %struct.SkPoint], align 16
  %5 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %6 = bitcast float* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = bitcast %struct.SkPoint* %0 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = extractelement <2 x float> %7, i32 0
  %11 = extractelement <2 x float> %9, i32 0
  %12 = fcmp olt float %10, %11
  %13 = select i1 %12, float %10, float %11
  %14 = fcmp olt float %11, %10
  %15 = select i1 %14, float %10, float %11
  %16 = extractelement <2 x float> %7, i32 1
  %17 = extractelement <2 x float> %9, i32 1
  %18 = fcmp olt float %16, %17
  %19 = select i1 %18, float %16, float %17
  %20 = fcmp olt float %17, %16
  %21 = select i1 %20, float %16, float %17
  %22 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = fcmp ugt float %23, %13
  br i1 %24, label %42, label %25

25:                                               ; preds = %3
  %26 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %27 = load float, float* %26, align 4
  %28 = fcmp ugt float %27, %19
  br i1 %28, label %42, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %31 = load float, float* %30, align 4
  %32 = fcmp ult float %31, %15
  br i1 %32, label %42, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %35 = load float, float* %34, align 4
  %36 = fcmp ult float %35, %21
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = icmp eq %struct.SkPoint* %0, %2
  br i1 %38, label %244, label %39

39:                                               ; preds = %37
  %40 = bitcast %struct.SkPoint* %2 to i8*
  %41 = bitcast %struct.SkPoint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 16, i1 false)
  br label %244

42:                                               ; preds = %33, %3, %25, %29
  %43 = fsub float %15, %13
  %44 = fcmp ugt float %15, %23
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = fcmp olt float %15, %23
  %47 = fcmp ogt float %43, 0.000000e+00
  %48 = or i1 %46, %47
  br i1 %48, label %244, label %49

49:                                               ; preds = %42, %45
  %50 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %51 = load float, float* %50, align 4
  %52 = fcmp ugt float %51, %13
  br i1 %52, label %57, label %53

53:                                               ; preds = %49
  %54 = fcmp olt float %51, %13
  %55 = fcmp ogt float %43, 0.000000e+00
  %56 = or i1 %55, %54
  br i1 %56, label %244, label %57

57:                                               ; preds = %49, %53
  %58 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %59 = load float, float* %58, align 4
  %60 = fsub float %21, %19
  %61 = fcmp ugt float %21, %59
  br i1 %61, label %66, label %62

62:                                               ; preds = %57
  %63 = fcmp olt float %21, %59
  %64 = fcmp ogt float %60, 0.000000e+00
  %65 = or i1 %64, %63
  br i1 %65, label %244, label %66

66:                                               ; preds = %57, %62
  %67 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %68 = load float, float* %67, align 4
  %69 = fcmp ugt float %68, %19
  br i1 %69, label %74, label %70

70:                                               ; preds = %66
  %71 = fcmp olt float %68, %19
  %72 = fcmp ogt float %60, 0.000000e+00
  %73 = or i1 %72, %71
  br i1 %73, label %244, label %74

74:                                               ; preds = %66, %70
  %75 = xor i1 %20, true
  %76 = zext i1 %75 to i64
  %77 = zext i1 %20 to i64
  %78 = bitcast [2 x %struct.SkPoint]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %78) #3
  %79 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 0, i32 0
  %80 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 1, i32 0
  %81 = bitcast %struct.SkPoint* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %78, i8* align 4 %81, i64 16, i1 false)
  %82 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %76, i32 1
  %83 = load float, float* %82, align 4
  %84 = fcmp olt float %83, %59
  br i1 %84, label %85, label %122

85:                                               ; preds = %74
  %86 = fsub float %16, %17
  %87 = tail call float @llvm.fabs.f32(float %86) #3
  %88 = fcmp ugt float %87, 0x3F30000000000000
  br i1 %88, label %92, label %89

89:                                               ; preds = %85
  %90 = fadd float %10, %11
  %91 = fmul float %90, 5.000000e-01
  br label %119

92:                                               ; preds = %85
  %93 = fpext <2 x float> %9 to <2 x double>
  %94 = fpext <2 x float> %7 to <2 x double>
  %95 = fpext float %59 to double
  %96 = extractelement <2 x double> %93, i32 1
  %97 = fsub double %95, %96
  %98 = fsub <2 x double> %94, %93
  %99 = extractelement <2 x double> %98, i32 0
  %100 = fmul double %99, %97
  %101 = extractelement <2 x double> %98, i32 1
  %102 = fdiv double %100, %101
  %103 = extractelement <2 x double> %93, i32 0
  %104 = fadd double %102, %103
  %105 = bitcast double %103 to i64
  %106 = bitcast <2 x double> %94 to <2 x i64>
  %107 = extractelement <2 x i64> %106, i32 0
  %108 = select i1 %12, i64 %107, i64 %105
  %109 = bitcast i64 %108 to double
  %110 = fcmp olt double %104, %109
  br i1 %110, label %116, label %111

111:                                              ; preds = %92
  %112 = select i1 %12, i64 %105, i64 %107
  %113 = bitcast i64 %112 to double
  %114 = fcmp ogt double %104, %113
  br i1 %114, label %115, label %116

115:                                              ; preds = %111
  br label %116

116:                                              ; preds = %115, %111, %92
  %117 = phi double [ %113, %115 ], [ %104, %111 ], [ %109, %92 ]
  %118 = fptrunc double %117 to float
  br label %119

119:                                              ; preds = %89, %116
  %120 = phi float [ %91, %89 ], [ %118, %116 ]
  %121 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %76, i32 0
  store float %120, float* %121, align 8
  store float %59, float* %82, align 4
  br label %122

122:                                              ; preds = %119, %74
  %123 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %77, i32 1
  %124 = load float, float* %123, align 4
  %125 = fcmp ogt float %124, %68
  br i1 %125, label %126, label %163

126:                                              ; preds = %122
  %127 = fsub float %16, %17
  %128 = tail call float @llvm.fabs.f32(float %127) #3
  %129 = fcmp ugt float %128, 0x3F30000000000000
  br i1 %129, label %133, label %130

130:                                              ; preds = %126
  %131 = fadd float %10, %11
  %132 = fmul float %131, 5.000000e-01
  br label %160

133:                                              ; preds = %126
  %134 = fpext <2 x float> %9 to <2 x double>
  %135 = fpext <2 x float> %7 to <2 x double>
  %136 = fpext float %68 to double
  %137 = extractelement <2 x double> %134, i32 1
  %138 = fsub double %136, %137
  %139 = fsub <2 x double> %135, %134
  %140 = extractelement <2 x double> %139, i32 0
  %141 = fmul double %140, %138
  %142 = extractelement <2 x double> %139, i32 1
  %143 = fdiv double %141, %142
  %144 = extractelement <2 x double> %134, i32 0
  %145 = fadd double %143, %144
  %146 = bitcast double %144 to i64
  %147 = bitcast <2 x double> %135 to <2 x i64>
  %148 = extractelement <2 x i64> %147, i32 0
  %149 = select i1 %12, i64 %148, i64 %146
  %150 = bitcast i64 %149 to double
  %151 = fcmp olt double %145, %150
  br i1 %151, label %157, label %152

152:                                              ; preds = %133
  %153 = select i1 %12, i64 %146, i64 %148
  %154 = bitcast i64 %153 to double
  %155 = fcmp ogt double %145, %154
  br i1 %155, label %156, label %157

156:                                              ; preds = %152
  br label %157

157:                                              ; preds = %156, %152, %133
  %158 = phi double [ %154, %156 ], [ %145, %152 ], [ %150, %133 ]
  %159 = fptrunc double %158 to float
  br label %160

160:                                              ; preds = %130, %157
  %161 = phi float [ %132, %130 ], [ %159, %157 ]
  %162 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %77, i32 0
  store float %161, float* %162, align 8
  store float %68, float* %123, align 4
  br label %163

163:                                              ; preds = %160, %122
  %164 = load float, float* %79, align 16
  %165 = load float, float* %80, align 8
  %166 = fcmp olt float %164, %165
  %167 = xor i1 %166, true
  %168 = zext i1 %167 to i64
  %169 = zext i1 %166 to i64
  %170 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %169, i32 0
  %171 = load float, float* %170, align 8
  %172 = fcmp ugt float %171, %23
  br i1 %172, label %173, label %177

173:                                              ; preds = %163
  %174 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %168, i32 0
  %175 = load float, float* %174, align 8
  %176 = fcmp ult float %175, %51
  br i1 %176, label %186, label %177

177:                                              ; preds = %173, %163
  %178 = fcmp une float %164, %165
  %179 = fcmp olt float %164, %23
  %180 = or i1 %179, %178
  %181 = fcmp ogt float %164, %51
  %182 = or i1 %181, %180
  br i1 %182, label %242, label %183

183:                                              ; preds = %177
  %184 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %168, i32 0
  %185 = load float, float* %184, align 8
  br label %186

186:                                              ; preds = %183, %173
  %187 = phi float [ %185, %183 ], [ %175, %173 ]
  %188 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %168, i32 0
  %189 = fcmp olt float %187, %23
  br i1 %189, label %190, label %214

190:                                              ; preds = %186
  %191 = fsub float %10, %11
  %192 = tail call float @llvm.fabs.f32(float %191) #3
  %193 = fcmp ugt float %192, 0x3F30000000000000
  br i1 %193, label %197, label %194

194:                                              ; preds = %190
  %195 = fadd float %17, %16
  %196 = fmul float %195, 5.000000e-01
  br label %210

197:                                              ; preds = %190
  %198 = fpext float %11 to double
  %199 = fpext float %17 to double
  %200 = fpext float %10 to double
  %201 = fpext float %16 to double
  %202 = fpext float %23 to double
  %203 = fsub double %202, %198
  %204 = fsub double %201, %199
  %205 = fmul double %203, %204
  %206 = fsub double %200, %198
  %207 = fdiv double %205, %206
  %208 = fadd double %207, %199
  %209 = fptrunc double %208 to float
  br label %210

210:                                              ; preds = %194, %197
  %211 = phi float [ %196, %194 ], [ %209, %197 ]
  store float %23, float* %188, align 8
  %212 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %168, i32 1
  store float %211, float* %212, align 4
  %213 = load float, float* %170, align 8
  br label %214

214:                                              ; preds = %210, %186
  %215 = phi float [ %213, %210 ], [ %171, %186 ]
  %216 = fcmp ogt float %215, %51
  br i1 %216, label %217, label %240

217:                                              ; preds = %214
  %218 = fsub float %10, %11
  %219 = tail call float @llvm.fabs.f32(float %218) #3
  %220 = fcmp ugt float %219, 0x3F30000000000000
  br i1 %220, label %224, label %221

221:                                              ; preds = %217
  %222 = fadd float %17, %16
  %223 = fmul float %222, 5.000000e-01
  br label %237

224:                                              ; preds = %217
  %225 = fpext float %11 to double
  %226 = fpext float %17 to double
  %227 = fpext float %10 to double
  %228 = fpext float %16 to double
  %229 = fpext float %51 to double
  %230 = fsub double %229, %225
  %231 = fsub double %228, %226
  %232 = fmul double %230, %231
  %233 = fsub double %227, %225
  %234 = fdiv double %232, %233
  %235 = fadd double %234, %226
  %236 = fptrunc double %235 to float
  br label %237

237:                                              ; preds = %221, %224
  %238 = phi float [ %223, %221 ], [ %236, %224 ]
  store float %51, float* %170, align 8
  %239 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %4, i64 0, i64 %169, i32 1
  store float %238, float* %239, align 4
  br label %240

240:                                              ; preds = %237, %214
  %241 = bitcast %struct.SkPoint* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %241, i8* nonnull align 16 %78, i64 16, i1 false)
  br label %242

242:                                              ; preds = %177, %240
  %243 = phi i1 [ true, %240 ], [ false, %177 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %78) #3
  br label %244

244:                                              ; preds = %45, %53, %62, %70, %39, %37, %242
  %245 = phi i1 [ %243, %242 ], [ true, %37 ], [ true, %39 ], [ false, %70 ], [ false, %62 ], [ false, %53 ], [ false, %45 ]
  ret i1 %245
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN13SkLineClipper8ClipLineEPK7SkPointRK6SkRectPS0_b(%struct.SkPoint* nocapture readonly, %struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkPoint* nocapture, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca [2 x %struct.SkPoint], align 16
  %6 = alloca [4 x %struct.SkPoint], align 16
  %7 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 1
  %10 = load float, float* %9, align 4
  %11 = fcmp olt float %8, %10
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i64
  %14 = zext i1 %11 to i64
  %15 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %14, i32 1
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 1
  %18 = load float, float* %17, align 4
  %19 = fcmp ugt float %16, %18
  br i1 %19, label %20, label %395

20:                                               ; preds = %4
  %21 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 %13, i32 1
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 3
  %24 = load float, float* %23, align 4
  %25 = fcmp ult float %22, %24
  br i1 %25, label %26, label %395

26:                                               ; preds = %20
  %27 = bitcast [2 x %struct.SkPoint]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #3
  %28 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 0
  %29 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 0, i32 0
  %30 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 0, i32 1
  %31 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 1, i32 0
  %32 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 1, i32 1
  %33 = bitcast %struct.SkPoint* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %27, i8* align 4 %33, i64 16, i1 false)
  %34 = fcmp olt float %22, %18
  br i1 %34, label %35, label %79

35:                                               ; preds = %26
  %36 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %37 = fsub float %10, %8
  %38 = tail call float @llvm.fabs.f32(float %37) #3
  %39 = fcmp ugt float %38, 0x3F30000000000000
  %40 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %41 = load float, float* %40, align 4
  br i1 %39, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %36, i64 0, i32 0
  %44 = load float, float* %43, align 4
  %45 = fadd float %41, %44
  %46 = fmul float %45, 5.000000e-01
  br label %75

47:                                               ; preds = %35
  %48 = fpext float %41 to double
  %49 = fpext float %8 to double
  %50 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %36, i64 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = fpext float %10 to double
  %54 = fpext float %18 to double
  %55 = fsub double %54, %49
  %56 = fsub double %52, %48
  %57 = fmul double %55, %56
  %58 = fsub double %53, %49
  %59 = fdiv double %57, %58
  %60 = fadd double %59, %48
  %61 = bitcast double %48 to i64
  %62 = bitcast double %52 to i64
  %63 = fcmp olt float %51, %41
  %64 = select i1 %63, i64 %62, i64 %61
  %65 = bitcast i64 %64 to double
  %66 = fcmp olt double %60, %65
  br i1 %66, label %72, label %67

67:                                               ; preds = %47
  %68 = select i1 %63, i64 %61, i64 %62
  %69 = bitcast i64 %68 to double
  %70 = fcmp ogt double %60, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %67
  br label %72

72:                                               ; preds = %71, %67, %47
  %73 = phi double [ %69, %71 ], [ %60, %67 ], [ %65, %47 ]
  %74 = fptrunc double %73 to float
  br label %75

75:                                               ; preds = %42, %72
  %76 = phi float [ %46, %42 ], [ %74, %72 ]
  %77 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %13, i32 0
  store float %76, float* %77, align 8
  %78 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %13, i32 1
  store float %18, float* %78, align 4
  br label %79

79:                                               ; preds = %75, %26
  %80 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %14, i32 1
  %81 = load float, float* %80, align 4
  %82 = fcmp ogt float %81, %24
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1, i32 0
  %87 = load float, float* %86, align 4
  br label %132

88:                                               ; preds = %79
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 1
  %90 = fsub float %10, %8
  %91 = tail call float @llvm.fabs.f32(float %90) #3
  %92 = fcmp ugt float %91, 0x3F30000000000000
  %93 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %94 = load float, float* %93, align 4
  br i1 %92, label %100, label %95

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %89, i64 0, i32 0
  %97 = load float, float* %96, align 4
  %98 = fadd float %94, %97
  %99 = fmul float %98, 5.000000e-01
  br label %128

100:                                              ; preds = %88
  %101 = fpext float %94 to double
  %102 = fpext float %8 to double
  %103 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %89, i64 0, i32 0
  %104 = load float, float* %103, align 4
  %105 = fpext float %104 to double
  %106 = fpext float %10 to double
  %107 = fpext float %24 to double
  %108 = fsub double %107, %102
  %109 = fsub double %105, %101
  %110 = fmul double %108, %109
  %111 = fsub double %106, %102
  %112 = fdiv double %110, %111
  %113 = fadd double %112, %101
  %114 = bitcast double %101 to i64
  %115 = bitcast double %105 to i64
  %116 = fcmp olt float %104, %94
  %117 = select i1 %116, i64 %115, i64 %114
  %118 = bitcast i64 %117 to double
  %119 = fcmp olt double %113, %118
  br i1 %119, label %125, label %120

120:                                              ; preds = %100
  %121 = select i1 %116, i64 %114, i64 %115
  %122 = bitcast i64 %121 to double
  %123 = fcmp ogt double %113, %122
  br i1 %123, label %124, label %125

124:                                              ; preds = %120
  br label %125

125:                                              ; preds = %124, %120, %100
  %126 = phi double [ %122, %124 ], [ %113, %120 ], [ %118, %100 ]
  %127 = fptrunc double %126 to float
  br label %128

128:                                              ; preds = %95, %125
  %129 = phi float [ %97, %95 ], [ %104, %125 ]
  %130 = phi float [ %99, %95 ], [ %127, %125 ]
  %131 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %14, i32 0
  store float %130, float* %131, align 8
  store float %24, float* %80, align 4
  br label %132

132:                                              ; preds = %83, %128
  %133 = phi float [ %87, %83 ], [ %129, %128 ]
  %134 = phi float [ %85, %83 ], [ %94, %128 ]
  %135 = bitcast [4 x %struct.SkPoint]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %135) #3
  %136 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 0
  %137 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 0, i32 0
  %138 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 0, i32 1
  %139 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 1, i32 1
  %140 = fcmp olt float %134, %133
  %141 = xor i1 %140, true
  %142 = zext i1 %141 to i64
  %143 = zext i1 %140 to i64
  %144 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %143
  %145 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %144, i64 0, i32 0
  %146 = bitcast [4 x %struct.SkPoint]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %146, i8 -1, i64 32, i1 false)
  %147 = load float, float* %145, align 8
  %148 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 0
  %149 = load float, float* %148, align 4
  %150 = fcmp ugt float %147, %149
  br i1 %150, label %151, label %383

151:                                              ; preds = %132
  %152 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %142
  %153 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %152, i64 0, i32 0
  %154 = load float, float* %153, align 8
  %155 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %1, i64 0, i32 2
  %156 = load float, float* %155, align 4
  %157 = fcmp ult float %154, %156
  br i1 %157, label %159, label %158

158:                                              ; preds = %151
  br i1 %3, label %393, label %383

159:                                              ; preds = %151
  %160 = fcmp olt float %154, %149
  br i1 %160, label %161, label %210

161:                                              ; preds = %159
  %162 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %142, i32 1
  %163 = bitcast float* %162 to i32*
  %164 = load i32, i32* %163, align 4
  store float %149, float* %137, align 16
  %165 = bitcast float* %138 to i32*
  store i32 %164, i32* %165, align 4
  %166 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 1
  %167 = load float, float* %31, align 8
  %168 = load float, float* %29, align 16
  %169 = fsub float %167, %168
  %170 = tail call float @llvm.fabs.f32(float %169) #3
  %171 = fcmp ugt float %170, 0x3F30000000000000
  br i1 %171, label %177, label %172

172:                                              ; preds = %161
  %173 = load float, float* %30, align 4
  %174 = load float, float* %32, align 4
  %175 = fadd float %173, %174
  %176 = fmul float %175, 5.000000e-01
  br label %192

177:                                              ; preds = %161
  %178 = fpext float %168 to double
  %179 = load float, float* %30, align 4
  %180 = fpext float %179 to double
  %181 = fpext float %167 to double
  %182 = load float, float* %32, align 4
  %183 = fpext float %182 to double
  %184 = fpext float %149 to double
  %185 = fsub double %184, %178
  %186 = fsub double %183, %180
  %187 = fmul double %185, %186
  %188 = fsub double %181, %178
  %189 = fdiv double %187, %188
  %190 = fadd double %189, %180
  %191 = fptrunc double %190 to float
  br label %192

192:                                              ; preds = %177, %172
  %193 = phi float [ %174, %172 ], [ %182, %177 ]
  %194 = phi float [ %173, %172 ], [ %179, %177 ]
  %195 = phi float [ %176, %172 ], [ %191, %177 ]
  %196 = bitcast float %194 to i32
  %197 = bitcast float %193 to i32
  %198 = fcmp olt float %193, %194
  %199 = select i1 %198, i32 %197, i32 %196
  %200 = bitcast i32 %199 to float
  %201 = fcmp olt float %195, %200
  br i1 %201, label %207, label %202

202:                                              ; preds = %192
  %203 = select i1 %198, i32 %196, i32 %197
  %204 = bitcast i32 %203 to float
  %205 = fcmp ogt float %195, %204
  br i1 %205, label %206, label %207

206:                                              ; preds = %202
  br label %207

207:                                              ; preds = %192, %202, %206
  %208 = phi float [ %204, %206 ], [ %195, %202 ], [ %200, %192 ]
  %209 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %166, i64 0, i32 0
  store float %149, float* %209, align 8
  store float %208, float* %139, align 4
  br label %214

210:                                              ; preds = %159
  %211 = bitcast %struct.SkPoint* %152 to i64*
  %212 = bitcast [4 x %struct.SkPoint]* %6 to i64*
  %213 = load i64, i64* %211, align 8
  store i64 %213, i64* %212, align 16
  br label %214

214:                                              ; preds = %210, %207
  %215 = phi %struct.SkPoint* [ %166, %207 ], [ %136, %210 ]
  %216 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 1
  %217 = fcmp ogt float %147, %156
  br i1 %217, label %218, label %270

218:                                              ; preds = %214
  %219 = load float, float* %31, align 8
  %220 = load float, float* %29, align 16
  %221 = fsub float %219, %220
  %222 = tail call float @llvm.fabs.f32(float %221) #3
  %223 = fcmp ugt float %222, 0x3F30000000000000
  br i1 %223, label %229, label %224

224:                                              ; preds = %218
  %225 = load float, float* %30, align 4
  %226 = load float, float* %32, align 4
  %227 = fadd float %225, %226
  %228 = fmul float %227, 5.000000e-01
  br label %244

229:                                              ; preds = %218
  %230 = fpext float %220 to double
  %231 = load float, float* %30, align 4
  %232 = fpext float %231 to double
  %233 = fpext float %219 to double
  %234 = load float, float* %32, align 4
  %235 = fpext float %234 to double
  %236 = fpext float %156 to double
  %237 = fsub double %236, %230
  %238 = fsub double %235, %232
  %239 = fmul double %237, %238
  %240 = fsub double %233, %230
  %241 = fdiv double %239, %240
  %242 = fadd double %241, %232
  %243 = fptrunc double %242 to float
  br label %244

244:                                              ; preds = %229, %224
  %245 = phi float [ %226, %224 ], [ %234, %229 ]
  %246 = phi float [ %225, %224 ], [ %231, %229 ]
  %247 = phi float [ %228, %224 ], [ %243, %229 ]
  %248 = bitcast float %246 to i32
  %249 = bitcast float %245 to i32
  %250 = fcmp olt float %245, %246
  %251 = select i1 %250, i32 %249, i32 %248
  %252 = bitcast i32 %251 to float
  %253 = fcmp olt float %247, %252
  br i1 %253, label %259, label %254

254:                                              ; preds = %244
  %255 = select i1 %250, i32 %248, i32 %249
  %256 = bitcast i32 %255 to float
  %257 = fcmp ogt float %247, %256
  br i1 %257, label %258, label %259

258:                                              ; preds = %254
  br label %259

259:                                              ; preds = %244, %254, %258
  %260 = phi float [ %256, %258 ], [ %247, %254 ], [ %252, %244 ]
  %261 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %216, i64 0, i32 0
  store float %156, float* %261, align 4
  %262 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 1, i32 1
  store float %260, float* %262, align 4
  %263 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 2
  %264 = getelementptr inbounds [2 x %struct.SkPoint], [2 x %struct.SkPoint]* %5, i64 0, i64 %143, i32 1
  %265 = bitcast float* %264 to i32*
  %266 = load i32, i32* %265, align 4
  %267 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %263, i64 0, i32 0
  store float %156, float* %267, align 4
  %268 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %215, i64 2, i32 1
  %269 = bitcast float* %268 to i32*
  store i32 %266, i32* %269, align 4
  br label %274

270:                                              ; preds = %214
  %271 = bitcast %struct.SkPoint* %144 to i64*
  %272 = bitcast %struct.SkPoint* %216 to i64*
  %273 = load i64, i64* %271, align 8
  store i64 %273, i64* %272, align 4
  br label %274

274:                                              ; preds = %259, %270
  %275 = phi %struct.SkPoint* [ %263, %259 ], [ %216, %270 ]
  %276 = ptrtoint %struct.SkPoint* %275 to i64
  %277 = ptrtoint [4 x %struct.SkPoint]* %6 to i64
  %278 = sub i64 %276, %277
  %279 = lshr exact i64 %278, 3
  %280 = trunc i64 %279 to i32
  br i1 %140, label %385, label %281

281:                                              ; preds = %274
  %282 = icmp slt i32 %280, 0
  br i1 %282, label %393, label %283

283:                                              ; preds = %281
  %284 = add nuw nsw i64 %279, 1
  %285 = and i64 %284, 4294967295
  %286 = icmp ult i64 %285, 4
  br i1 %286, label %320, label %287

287:                                              ; preds = %283
  %288 = add nsw i64 %285, -1
  %289 = trunc i64 %288 to i32
  %290 = sub i32 %280, %289
  %291 = icmp sgt i32 %290, %280
  %292 = icmp ugt i64 %288, 4294967295
  %293 = or i1 %291, %292
  br i1 %293, label %320, label %294

294:                                              ; preds = %287
  %295 = and i64 %284, 3
  %296 = sub nsw i64 %285, %295
  br label %297

297:                                              ; preds = %297, %294
  %298 = phi i64 [ 0, %294 ], [ %316, %297 ]
  %299 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 %298
  %300 = sub nsw i64 %279, %298
  %301 = shl i64 %300, 32
  %302 = ashr exact i64 %301, 32
  %303 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %302
  %304 = bitcast %struct.SkPoint* %299 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 16
  %306 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %299, i64 2
  %307 = bitcast %struct.SkPoint* %306 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 16
  %309 = shufflevector <2 x i64> %305, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %310 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %303, i64 -1
  %311 = bitcast %struct.SkPoint* %310 to <2 x i64>*
  store <2 x i64> %309, <2 x i64>* %311, align 4
  %312 = shufflevector <2 x i64> %308, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %313 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %303, i64 -2
  %314 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %313, i64 -1
  %315 = bitcast %struct.SkPoint* %314 to <2 x i64>*
  store <2 x i64> %312, <2 x i64>* %315, align 4
  %316 = add i64 %298, 4
  %317 = icmp eq i64 %316, %296
  br i1 %317, label %318, label %297, !llvm.loop !2

318:                                              ; preds = %297
  %319 = icmp eq i64 %295, 0
  br i1 %319, label %393, label %320

320:                                              ; preds = %318, %287, %283
  %321 = phi i64 [ 0, %287 ], [ 0, %283 ], [ %296, %318 ]
  %322 = sub nsw i64 %284, %321
  %323 = xor i64 %321, -1
  %324 = add nsw i64 %285, %323
  %325 = and i64 %322, 3
  %326 = icmp eq i64 %325, 0
  br i1 %326, label %341, label %327

327:                                              ; preds = %320, %327
  %328 = phi i64 [ %338, %327 ], [ %321, %320 ]
  %329 = phi i64 [ %339, %327 ], [ %325, %320 ]
  %330 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 %328
  %331 = sub nsw i64 %279, %328
  %332 = shl i64 %331, 32
  %333 = ashr exact i64 %332, 32
  %334 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %333
  %335 = bitcast %struct.SkPoint* %330 to i64*
  %336 = bitcast %struct.SkPoint* %334 to i64*
  %337 = load i64, i64* %335, align 8
  store i64 %337, i64* %336, align 4
  %338 = add nuw nsw i64 %328, 1
  %339 = add i64 %329, -1
  %340 = icmp eq i64 %339, 0
  br i1 %340, label %341, label %327, !llvm.loop !4

341:                                              ; preds = %327, %320
  %342 = phi i64 [ %321, %320 ], [ %338, %327 ]
  %343 = icmp ult i64 %324, 3
  br i1 %343, label %393, label %344

344:                                              ; preds = %341, %344
  %345 = phi i64 [ %381, %344 ], [ %342, %341 ]
  %346 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 %345
  %347 = sub nsw i64 %279, %345
  %348 = shl i64 %347, 32
  %349 = ashr exact i64 %348, 32
  %350 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %349
  %351 = bitcast %struct.SkPoint* %346 to i64*
  %352 = bitcast %struct.SkPoint* %350 to i64*
  %353 = load i64, i64* %351, align 8
  store i64 %353, i64* %352, align 4
  %354 = add nuw nsw i64 %345, 1
  %355 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 %354
  %356 = sub nsw i64 %279, %354
  %357 = shl i64 %356, 32
  %358 = ashr exact i64 %357, 32
  %359 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %358
  %360 = bitcast %struct.SkPoint* %355 to i64*
  %361 = bitcast %struct.SkPoint* %359 to i64*
  %362 = load i64, i64* %360, align 8
  store i64 %362, i64* %361, align 4
  %363 = add nuw nsw i64 %345, 2
  %364 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 %363
  %365 = sub nsw i64 %279, %363
  %366 = shl i64 %365, 32
  %367 = ashr exact i64 %366, 32
  %368 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %367
  %369 = bitcast %struct.SkPoint* %364 to i64*
  %370 = bitcast %struct.SkPoint* %368 to i64*
  %371 = load i64, i64* %369, align 8
  store i64 %371, i64* %370, align 4
  %372 = add nuw nsw i64 %345, 3
  %373 = getelementptr inbounds [4 x %struct.SkPoint], [4 x %struct.SkPoint]* %6, i64 0, i64 %372
  %374 = sub nsw i64 %279, %372
  %375 = shl i64 %374, 32
  %376 = ashr exact i64 %375, 32
  %377 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %2, i64 %376
  %378 = bitcast %struct.SkPoint* %373 to i64*
  %379 = bitcast %struct.SkPoint* %377 to i64*
  %380 = load i64, i64* %378, align 8
  store i64 %380, i64* %379, align 4
  %381 = add nuw nsw i64 %345, 4
  %382 = icmp eq i64 %381, %285
  br i1 %382, label %393, label %344, !llvm.loop !6

383:                                              ; preds = %158, %132
  %384 = phi float [ %149, %132 ], [ %156, %158 ]
  store float %384, float* %31, align 8
  store float %384, float* %29, align 16
  br label %385

385:                                              ; preds = %383, %274
  %386 = phi i32 [ %280, %274 ], [ 1, %383 ]
  %387 = phi %struct.SkPoint* [ %136, %274 ], [ %28, %383 ]
  %388 = bitcast %struct.SkPoint* %2 to i8*
  %389 = bitcast %struct.SkPoint* %387 to i8*
  %390 = add nsw i32 %386, 1
  %391 = sext i32 %390 to i64
  %392 = shl nsw i64 %391, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %388, i8* align 4 %389, i64 %392, i1 false)
  br label %393

393:                                              ; preds = %341, %344, %318, %281, %385, %158
  %394 = phi i32 [ 0, %158 ], [ %386, %385 ], [ %280, %281 ], [ %280, %318 ], [ %280, %344 ], [ %280, %341 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %135) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #3
  br label %395

395:                                              ; preds = %20, %4, %393
  %396 = phi i32 [ %394, %393 ], [ 0, %4 ], [ 0, %20 ]
  ret i32 %396
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !3}
