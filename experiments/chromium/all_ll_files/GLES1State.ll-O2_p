; ModuleID = '../../third_party/angle/src/libANGLE/GLES1State.cpp'
source_filename = "../../third_party/angle/src/libANGLE/GLES1State.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.gl::TextureCoordF" = type { float, float, float, float }
%"struct.gl::MaterialParameters" = type { %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", float }
%"struct.angle::Color" = type { float, float, float, float }
%"struct.gl::LightModelParameters" = type <{ %"struct.angle::Color", i8, [3 x i8] }>
%"struct.gl::LightParameters" = type { i8, %"struct.angle::Color", %"struct.angle::Color", %"struct.angle::Color", %"class.angle::Vector.521", %"class.angle::Vector", float, float, float, float, float }
%"class.angle::Vector.521" = type { %"class.angle::VectorBase.522" }
%"class.angle::VectorBase.522" = type { [4 x float] }
%"class.angle::Vector" = type { %"class.angle::VectorBase" }
%"class.angle::VectorBase" = type { [3 x float] }
%"struct.gl::FogParameters" = type { i8, float, float, float, %"struct.angle::Color" }
%"struct.gl::TextureEnvironmentParameters" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", float, float, i8, [3 x i8] }>
%"struct.gl::PointParameters" = type { float, float, float, %"class.angle::Vector", float }
%"struct.gl::ClipPlaneParameters" = type { i8, %"class.angle::Vector.521" }
%"class.gl::GLES1State" = type <{ %"class.gl::State"*, %"class.angle::BitSetT.166", %"class.std::__1::vector.477", i8, i8, i8, i8, [4 x i8], %"class.std::__1::vector.485", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"struct.angle::Color", %"class.angle::Vector", %"class.std::__1::vector.490", i32, i8, [3 x i8], %"class.angle::FixedVector", %"class.angle::FixedVector", %"class.std::__1::vector.505", %"class.std::__1::vector.512", %"struct.gl::MaterialParameters", %"struct.gl::LightModelParameters", %"class.std::__1::vector.519", %"struct.gl::FogParameters", i8, [3 x i8], %"struct.gl::PointParameters", i8, [3 x i8], float, i8, [7 x i8], %"class.std::__1::vector.528", i8, i8, i8, i8, [4 x i8] }>
%"class.gl::State" = type <{ %"struct.gl::ContextID", i32, i32, %"struct.gl::Version", [4 x i8], %"struct.gl::Caps", %"class.gl::TextureCapsMap", %"struct.gl::Extensions", %"struct.gl::Limitations", %"class.egl::ShareGroup"*, %"class.gl::BufferManager"*, %"class.gl::ShaderProgramManager"*, %"class.gl::TextureManager"*, %"class.gl::RenderbufferManager"*, %"class.gl::SamplerManager"*, %"class.gl::SyncManager"*, %"class.gl::FramebufferManager"*, %"class.gl::ProgramPipelineManager"*, %"class.gl::MemoryObjectManager"*, %"class.gl::SemaphoreManager"*, i32, i32, %"struct.angle::Color", float, i32, %"struct.gl::RasterizerState", i8, [3 x i8], %"struct.gl::Rectangle", %"struct.gl::BlendState", [4 x i8], %"class.gl::BlendStateExt", %"struct.angle::Color", i8, i8, [2 x i8], float, i8, i8, [2 x i8], i32, %"struct.std::__1::array.373", i8, [3 x i8], float, %"struct.gl::DepthStencilState", i32, i32, float, i32, i32, i32, i8, i8, [2 x i8], %"struct.gl::Rectangle", float, float, i32, i32, %"class.gl::Framebuffer"*, %"class.gl::Framebuffer"*, %"class.gl::BindingPointer.374", %"class.gl::Program"*, %"class.gl::BindingPointer.376", %"class.gl::ProgramExecutable"*, i8, [7 x i8], %"class.std::__1::vector.378", %"class.gl::VertexArray"*, %"class.angle::BitSetT.148", i64, %"class.angle::PackedEnumMap.406", %"class.gl::ActiveTexturesCache", %"class.std::__1::vector.337", %"class.angle::BitSetArray", %"class.std::__1::vector.418", %"class.std::__1::vector.427", %"class.angle::PackedEnumMap.434", %"class.angle::PackedEnumMap.438", %"class.std::__1::vector.440", %"class.std::__1::vector.440", %"class.std::__1::vector.440", %"class.angle::BitSetArray.447", %"class.angle::BitSetT.448", %"class.angle::BitSetT.168", %"class.gl::BindingPointer.449", %"struct.gl::PixelUnpackState", %"struct.gl::PixelPackState", i8, [3 x i8], %"class.gl::Debug", i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, %"class.angle::BitSetT.476", i32, %"class.gl::GLES1State", %"class.angle::BitSetT.168", %"class.angle::BitSetT.535", [4 x i8], %"class.angle::BitSetT.536", %"class.angle::BitSetT.166", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.angle::BitSetArray", %"class.gl::MockOverlay"*, %"class.angle::BitSetT.147", %"class.angle::BitSetT.147", i8, [5 x i8] }>
%"struct.gl::ContextID" = type { i32 }
%"struct.gl::Version" = type { i32, i32 }
%"struct.gl::Caps" = type <{ float, float, i32, [4 x i8], i64, i32, i32, i32, i32, float, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, [4 x i8], %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"struct.gl::TypePrecision", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap", %"class.angle::PackedEnumMap.30", i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.32", %"struct.std::__1::array.32", i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, float, float, i32, i32, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { i32* }
%"struct.gl::TypePrecision" = type { %"struct.std::__1::array.28", i32 }
%"struct.std::__1::array.28" = type { [2 x i32] }
%"class.angle::PackedEnumMap" = type { %"struct.std::__1::array.29" }
%"struct.std::__1::array.29" = type { [6 x i32] }
%"class.angle::PackedEnumMap.30" = type { %"struct.std::__1::array.31" }
%"struct.std::__1::array.31" = type { [6 x i64] }
%"struct.std::__1::array.32" = type { [3 x i32] }
%"class.gl::TextureCapsMap" = type { %"class.angle::PackedEnumMap.33" }
%"class.angle::PackedEnumMap.33" = type { %"struct.std::__1::array.34" }
%"struct.std::__1::array.34" = type { [227 x %"struct.gl::TextureCaps"] }
%"struct.gl::TextureCaps" = type { i8, i8, i8, i8, i8, %"class.std::__1::set.35" }
%"class.std::__1::set.35" = type { %"class.std::__1::__tree.36" }
%"class.std::__1::__tree.36" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"struct.gl::Extensions" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, float, i8, i8, i8, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"struct.gl::Limitations" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%"class.egl::ShareGroup" = type opaque
%"class.gl::BufferManager" = type { %"class.gl::TypedResourceManager" }
%"class.gl::TypedResourceManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap" }
%"class.gl::ResourceManagerBase" = type { i32 (...)**, %"class.gl::HandleAllocator", i64 }
%"class.gl::HandleAllocator" = type <{ i32, i32, %"class.std::__1::vector", %"class.std::__1::vector.45", %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::vector.45" = type { %"class.std::__1::__vector_base.46" }
%"class.std::__1::__vector_base.46" = type { %"struct.gl::HandleAllocator::HandleRange"*, %"struct.gl::HandleAllocator::HandleRange"*, %"class.std::__1::__compressed_pair.47" }
%"struct.gl::HandleAllocator::HandleRange" = type { i32, i32 }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"struct.gl::HandleAllocator::HandleRange"* }
%"class.gl::ResourceMap" = type { i64, %"class.gl::Buffer"**, %"class.absl::flat_hash_map" }
%"class.gl::Buffer" = type { %"class.gl::RefCountObject.base.53", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.angle::Subject", %"class.gl::BufferState", %"class.rx::BufferImpl"*, %"class.angle::ObserverBinding", %"class.gl::IndexRangeCache" }
%"class.gl::RefCountObject.base.53" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::BufferID" }>
%"class.angle::RefCountObject" = type { i32 (...)**, i64 }
%"class.rx::Serial" = type { i64 }
%"struct.gl::BufferID" = type { i32 }
%"class.gl::LabeledObject" = type { i32 (...)** }
%"class.angle::ObserverInterface" = type { i32 (...)** }
%"class.angle::Subject" = type { i32 (...)**, %"class.angle::FastVector" }
%"class.angle::FastVector" = type { %"struct.std::__1::array", %"class.angle::ObserverBindingBase"**, i64, i64 }
%"struct.std::__1::array" = type { [8 x %"class.angle::ObserverBindingBase"*] }
%"class.angle::ObserverBindingBase" = type { i32 (...)**, %"class.angle::ObserverInterface"*, i64 }
%"class.gl::BufferState" = type <{ %"class.std::__1::basic_string", i8, [7 x i8], i64, i32, i32, i8, [7 x i8], i8*, i64, i64, i32, i32, i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.rx::BufferImpl" = type opaque
%"class.angle::ObserverBinding" = type { %"class.angle::ObserverBindingBase", %"class.angle::Subject"* }
%"class.gl::IndexRangeCache" = type { %"class.std::__1::map" }
%"class.std::__1::map" = type { %"class.std::__1::__tree.54" }
%"class.std::__1::__tree.54" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.55", %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.absl::flat_hash_map" = type { %"class.absl::container_internal::raw_hash_map" }
%"class.absl::container_internal::raw_hash_map" = type { %"class.absl::container_internal::raw_hash_set" }
%"class.absl::container_internal::raw_hash_set" = type { i8*, %"union.absl::container_internal::map_slot_type"*, i64, i64, %"class.absl::container_internal::CompressedTuple" }
%"union.absl::container_internal::map_slot_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, %"class.gl::Buffer"* }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage" = type { i64 }
%"class.gl::ShaderProgramManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.69", %"class.gl::ResourceMap.122" }
%"class.gl::ResourceMap.69" = type { i64, %"class.gl::Shader"**, %"class.absl::flat_hash_map.113" }
%"class.gl::Shader" = type { %"class.gl::LabeledObject", %"class.gl::ShaderState", %"class.std::__1::unique_ptr.85", %"struct.gl::Limitations", %"struct.gl::ShaderProgramID", i8, i32, i8, %"class.std::__1::basic_string", %"class.gl::BindingPointer", %"class.std::__1::unique_ptr.107", %"class.std::__1::basic_string", %"class.gl::ShaderProgramManager"*, i32, i32 }
%"class.gl::ShaderState" = type <{ %"class.std::__1::basic_string", i8, [3 x i8], i32, %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", [4 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.77", %"class.std::__1::vector.77", %"class.std::__1::vector.70", %"class.std::__1::vector.70", %"class.std::__1::vector.70", i8, [3 x i8], %"class.angle::BitSetT", i32, %struct.Optional, %struct.Optional, %struct.Optional.84, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.sh::InterfaceBlock"*, %"struct.sh::InterfaceBlock"*, %"class.std::__1::__compressed_pair.79" }
%"struct.sh::InterfaceBlock" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i32, i8, i32, i8, i8, i32, %"class.std::__1::vector.70" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.sh::InterfaceBlock"* }
%"class.std::__1::vector.70" = type { %"class.std::__1::__vector_base.71" }
%"class.std::__1::__vector_base.71" = type { %"struct.sh::ShaderVariable"*, %"struct.sh::ShaderVariable"*, %"class.std::__1::__compressed_pair.72" }
%"struct.sh::ShaderVariable" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::vector", i8, i8, %"class.std::__1::vector.70", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, i32, i8, i32, i32, i32, i8, i8, i8, i32, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.sh::ShaderVariable"* }
%"class.angle::BitSetT" = type { i32 }
%struct.Optional = type { i8, i8 }
%struct.Optional.84 = type { i8, i32 }
%"class.std::__1::unique_ptr.85" = type { %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"class.rx::ShaderImpl"* }
%"class.rx::ShaderImpl" = type opaque
%"struct.gl::ShaderProgramID" = type { i32 }
%"class.gl::BindingPointer" = type { %"class.angle::BindingPointer.91" }
%"class.angle::BindingPointer.91" = type { i32 (...)**, %"class.gl::Compiler"* }
%"class.gl::Compiler" = type { %"class.angle::RefCountObject", %"class.std::__1::unique_ptr.92", i32, i32, %struct.ShBuiltInResources, %"class.angle::PackedEnumMap.98" }
%"class.std::__1::unique_ptr.92" = type { %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { %"class.rx::CompilerImpl"* }
%"class.rx::CompilerImpl" = type opaque
%struct.ShBuiltInResources = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 (i8*, i64)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"struct.std::__1::array.32", %"struct.std::__1::array.32", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"class.angle::PackedEnumMap.98" = type { %"struct.std::__1::array.99" }
%"struct.std::__1::array.99" = type { [6 x %"class.std::__1::vector.100"] }
%"class.std::__1::vector.100" = type { %"class.std::__1::__vector_base.101" }
%"class.std::__1::__vector_base.101" = type { %"class.gl::ShCompilerInstance"*, %"class.gl::ShCompilerInstance"*, %"class.std::__1::__compressed_pair.102" }
%"class.gl::ShCompilerInstance" = type <{ i8*, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.gl::ShCompilerInstance"* }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.gl::Shader::CompilingState"* }
%"struct.gl::Shader::CompilingState" = type opaque
%"class.absl::flat_hash_map.113" = type { %"class.absl::container_internal::raw_hash_map.114" }
%"class.absl::container_internal::raw_hash_map.114" = type { %"class.absl::container_internal::raw_hash_set.115" }
%"class.absl::container_internal::raw_hash_set.115" = type { i8*, %"union.absl::container_internal::map_slot_type.116"*, i64, i64, %"class.absl::container_internal::CompressedTuple.117" }
%"union.absl::container_internal::map_slot_type.116" = type opaque
%"class.absl::container_internal::CompressedTuple.117" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.118" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.118" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.122" = type { i64, %"class.gl::Program"**, %"class.absl::flat_hash_map.241" }
%"class.absl::flat_hash_map.241" = type { %"class.absl::container_internal::raw_hash_map.242" }
%"class.absl::container_internal::raw_hash_map.242" = type { %"class.absl::container_internal::raw_hash_set.243" }
%"class.absl::container_internal::raw_hash_set.243" = type { i8*, %"union.absl::container_internal::map_slot_type.244"*, i64, i64, %"class.absl::container_internal::CompressedTuple.245" }
%"union.absl::container_internal::map_slot_type.244" = type { %"struct.std::__1::pair.627" }
%"struct.std::__1::pair.627" = type { i32, %"class.gl::Program"* }
%"class.absl::container_internal::CompressedTuple.245" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.246" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.246" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::TextureManager" = type { %"class.gl::TypedResourceManager.250" }
%"class.gl::TypedResourceManager.250" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.251" }
%"class.gl::ResourceMap.251" = type { i64, %"class.gl::Texture"**, %"class.absl::flat_hash_map.270" }
%"class.gl::Texture" = type <{ %"class.gl::RefCountObject.base.253", [4 x i8], %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::TextureState", %"class.angle::BitSetT.266", %"class.rx::TextureImpl"*, %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::basic_string", %"class.egl::Surface"*, %"class.egl::Stream"*, %"class.angle::FastVector.268", %"struct.gl::Texture::SamplerCompletenessCache", [4 x i8] }>
%"class.gl::RefCountObject.base.253" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TextureID" }>
%"struct.gl::TextureID" = type { i32 }
%"class.egl::ImageSibling" = type { %"class.gl::FramebufferAttachmentObject", %"class.std::__1::set", %"class.angle::BindingPointer" }
%"class.gl::FramebufferAttachmentObject" = type { %"class.angle::Subject", %"class.angle::ObserverInterface" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.angle::BindingPointer" = type { i32 (...)**, %"class.egl::Image"* }
%"class.egl::Image" = type <{ %"class.angle::RefCountObject.4", %"class.egl::LabeledObject", %"struct.egl::ImageState", %"class.rx::ImageImpl"*, i8, [7 x i8] }>
%"class.angle::RefCountObject.4" = type { i32 (...)**, i64 }
%"class.egl::LabeledObject" = type { i32 (...)** }
%"struct.egl::ImageState" = type { i8*, i32, %"class.gl::ImageIndex", %"class.egl::ImageSibling"*, %"class.std::__1::set.5", %"struct.gl::Format", i8, %"struct.gl::Extents", i64, i32, i32 }
%"class.gl::ImageIndex" = type { i8, i32, i32, i32 }
%"class.std::__1::set.5" = type { %"class.std::__1::__tree.6" }
%"class.std::__1::__tree.6" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.7", %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.gl::Format" = type { %"struct.gl::InternalFormat"* }
%"struct.gl::InternalFormat" = type { i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)*, i1 (%"struct.gl::Version"*, %"struct.gl::Extensions"*)* }
%"struct.gl::Extents" = type { i32, i32, i32 }
%"class.rx::ImageImpl" = type opaque
%"class.gl::TextureState" = type <{ i8, [3 x i8], %"struct.gl::SwizzleState", %"class.gl::SamplerState", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, [4 x i8], %"class.std::__1::vector.257", %"struct.gl::Rectangle", i32, [4 x i8], %"class.gl::OffsetBindingPointer", i32, i8, [3 x i8], i32, i8, [3 x i8] }>
%"struct.gl::SwizzleState" = type { i32, i32, i32, i32 }
%"class.gl::SamplerState" = type { i32, i32, i32, i32, i32, float, float, float, i32, i32, i32, %"struct.angle::ColorGeneric", %"union.gl::SamplerState::Completeness" }
%"struct.angle::ColorGeneric" = type <{ %union.anon.254, i8, [3 x i8] }>
%union.anon.254 = type { %"struct.angle::Color" }
%"union.gl::SamplerState::Completeness" = type { i32 }
%"class.std::__1::vector.257" = type { %"class.std::__1::__vector_base.258" }
%"class.std::__1::__vector_base.258" = type { %"struct.gl::ImageDesc"*, %"struct.gl::ImageDesc"*, %"class.std::__1::__compressed_pair.259" }
%"struct.gl::ImageDesc" = type <{ %"struct.gl::Extents", [4 x i8], %"struct.gl::Format", i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.259" = type { %"struct.std::__1::__compressed_pair_elem.260" }
%"struct.std::__1::__compressed_pair_elem.260" = type { %"struct.gl::ImageDesc"* }
%"class.gl::OffsetBindingPointer" = type { %"class.gl::BindingPointer.264", i64, i64 }
%"class.gl::BindingPointer.264" = type { %"class.angle::BindingPointer.265" }
%"class.angle::BindingPointer.265" = type { i32 (...)**, %"class.gl::Buffer"* }
%"class.angle::BitSetT.266" = type { i64 }
%"class.rx::TextureImpl" = type opaque
%"class.egl::Surface" = type opaque
%"class.egl::Stream" = type { %"class.egl::LabeledObject", i8*, %"class.egl::Display"*, %"class.rx::StreamProducerImpl"*, %"class.gl::Context"*, i32, i64, i64, i32, i32, i32, %"struct.std::__1::array.267", i32, i32 }
%"class.egl::Display" = type opaque
%"class.rx::StreamProducerImpl" = type opaque
%"class.gl::Context" = type <{ %"class.egl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::State", i8, i8, i8, i8, [4 x i8], %"class.gl::ErrorSet", %"class.angle::BitSetT.537", [4 x i8], %"class.std::__1::unique_ptr.538", i8*, %"struct.gl::Extensions", [4 x i8], %"class.gl::BindingPointer", %"struct.egl::Config"*, %"class.angle::PackedEnumMap.544", %"class.gl::ResourceMap.546", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.556", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.566", %"class.gl::HandleAllocator", %"class.gl::ResourceMap.576", %"class.gl::HandleAllocator", i8*, i8*, i8*, i8*, %"class.std::__1::vector.586", i8*, %"class.std::__1::vector.586", %"class.std::__1::unique_ptr.593", i8, i8, i8, i8, i32, i8, i8, i8, [5 x i8], %"class.egl::Surface"*, %"class.egl::Surface"*, %"class.egl::Display"*, i8, i8, i8, [5 x i8], %"class.gl::MemoryProgramCache"*, %"class.angle::BitSetT.536", %"class.gl::StateCache", %"class.angle::BitSetT.168", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::BitSetT.168", %"class.angle::BitSetT.536", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.angle::ObserverBinding", %"class.std::__1::vector.337", %"class.std::__1::vector.337", %"class.std::__1::vector.337", %struct.Optional.607, %struct.Optional.607, %"class.std::__1::shared_ptr.608", %"class.std::__1::unique_ptr.609", %"class.std::__1::basic_string", i64, %"class.gl::MockOverlay", i8, i8, i8, [4 x i8] }>
%"class.gl::ErrorSet" = type { %"class.gl::Context"*, %"class.std::__1::set.35" }
%"class.angle::BitSetT.537" = type { i32 }
%"class.std::__1::unique_ptr.538" = type { %"class.std::__1::__compressed_pair.539" }
%"class.std::__1::__compressed_pair.539" = type { %"struct.std::__1::__compressed_pair_elem.540" }
%"struct.std::__1::__compressed_pair_elem.540" = type { %"class.rx::ContextImpl"* }
%"class.rx::ContextImpl" = type opaque
%"struct.egl::Config" = type opaque
%"class.angle::PackedEnumMap.544" = type { %"struct.std::__1::array.545" }
%"struct.std::__1::array.545" = type { [11 x %"class.gl::BindingPointer.410"] }
%"class.gl::BindingPointer.410" = type { %"class.angle::BindingPointer.411" }
%"class.angle::BindingPointer.411" = type { i32 (...)**, %"class.gl::Texture"* }
%"class.gl::ResourceMap.546" = type { i64, %"class.gl::FenceNV"**, %"class.absl::flat_hash_map.547" }
%"class.gl::FenceNV" = type opaque
%"class.absl::flat_hash_map.547" = type { %"class.absl::container_internal::raw_hash_map.548" }
%"class.absl::container_internal::raw_hash_map.548" = type { %"class.absl::container_internal::raw_hash_set.549" }
%"class.absl::container_internal::raw_hash_set.549" = type { i8*, %"union.absl::container_internal::map_slot_type.550"*, i64, i64, %"class.absl::container_internal::CompressedTuple.551" }
%"union.absl::container_internal::map_slot_type.550" = type opaque
%"class.absl::container_internal::CompressedTuple.551" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.552" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.552" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.556" = type { i64, %"class.gl::Query"**, %"class.absl::flat_hash_map.557" }
%"class.gl::Query" = type opaque
%"class.absl::flat_hash_map.557" = type { %"class.absl::container_internal::raw_hash_map.558" }
%"class.absl::container_internal::raw_hash_map.558" = type { %"class.absl::container_internal::raw_hash_set.559" }
%"class.absl::container_internal::raw_hash_set.559" = type { i8*, %"union.absl::container_internal::map_slot_type.560"*, i64, i64, %"class.absl::container_internal::CompressedTuple.561" }
%"union.absl::container_internal::map_slot_type.560" = type opaque
%"class.absl::container_internal::CompressedTuple.561" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.562" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.562" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.566" = type { i64, %"class.gl::VertexArray"**, %"class.absl::flat_hash_map.567" }
%"class.absl::flat_hash_map.567" = type { %"class.absl::container_internal::raw_hash_map.568" }
%"class.absl::container_internal::raw_hash_map.568" = type { %"class.absl::container_internal::raw_hash_set.569" }
%"class.absl::container_internal::raw_hash_set.569" = type { i8*, %"union.absl::container_internal::map_slot_type.570"*, i64, i64, %"class.absl::container_internal::CompressedTuple.571" }
%"union.absl::container_internal::map_slot_type.570" = type opaque
%"class.absl::container_internal::CompressedTuple.571" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.572" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.572" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ResourceMap.576" = type { i64, %"class.gl::TransformFeedback"**, %"class.absl::flat_hash_map.577" }
%"class.gl::TransformFeedback" = type { %"class.gl::RefCountObject.base.452", %"class.gl::LabeledObject", %"class.gl::TransformFeedbackState", %"class.rx::TransformFeedbackImpl"* }
%"class.gl::RefCountObject.base.452" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::TransformFeedbackID" }>
%"struct.gl::TransformFeedbackID" = type { i32 }
%"class.gl::TransformFeedbackState" = type { %"class.std::__1::basic_string", i8, i8, i8, i64, i64, %"class.gl::Program"*, %"class.std::__1::vector.440" }
%"class.rx::TransformFeedbackImpl" = type opaque
%"class.absl::flat_hash_map.577" = type { %"class.absl::container_internal::raw_hash_map.578" }
%"class.absl::container_internal::raw_hash_map.578" = type { %"class.absl::container_internal::raw_hash_set.579" }
%"class.absl::container_internal::raw_hash_set.579" = type { i8*, %"union.absl::container_internal::map_slot_type.580"*, i64, i64, %"class.absl::container_internal::CompressedTuple.581" }
%"union.absl::container_internal::map_slot_type.580" = type opaque
%"class.absl::container_internal::CompressedTuple.581" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.582" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.582" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::vector.586" = type { %"class.std::__1::__vector_base.587" }
%"class.std::__1::__vector_base.587" = type { i8**, i8**, %"class.std::__1::__compressed_pair.588" }
%"class.std::__1::__compressed_pair.588" = type { %"struct.std::__1::__compressed_pair_elem.589" }
%"struct.std::__1::__compressed_pair_elem.589" = type { i8** }
%"class.std::__1::unique_ptr.593" = type { %"class.std::__1::__compressed_pair.594" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"class.gl::GLES1Renderer"* }
%"class.gl::GLES1Renderer" = type { i8, %"class.gl::ShaderProgramManager"*, %"struct.gl::GLES1Renderer::GLES1UniformBuffers", %"struct.gl::GLES1Renderer::GLES1ProgramState", i8, [4 x float], [2 x float] }
%"struct.gl::GLES1Renderer::GLES1UniformBuffers" = type { %"struct.std::__1::array.615", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.616", %"struct.std::__1::array.617", %"struct.std::__1::array.618", %"struct.std::__1::array.618", %"struct.std::__1::array.616", %"struct.std::__1::array.619", %"struct.std::__1::array.620", %"struct.std::__1::array.620", %"struct.std::__1::array.620", %"struct.std::__1::array.620", %"struct.std::__1::array.621", %"struct.std::__1::array.622", %"struct.std::__1::array.622", %"struct.std::__1::array.622", %"struct.std::__1::array.622", %"struct.std::__1::array.622", %"struct.std::__1::array.29", %"struct.std::__1::array.623", %"struct.std::__1::array.617" }
%"struct.std::__1::array.615" = type { [4 x [16 x float]] }
%"struct.std::__1::array.618" = type { [4 x float] }
%"struct.std::__1::array.616" = type { [4 x i32] }
%"struct.std::__1::array.619" = type { [8 x i32] }
%"struct.std::__1::array.620" = type { [8 x [4 x float]] }
%"struct.std::__1::array.621" = type { [8 x [3 x float]] }
%"struct.std::__1::array.622" = type { [8 x float] }
%"struct.std::__1::array.623" = type { [6 x [4 x float]] }
%"struct.std::__1::array.617" = type { [4 x [4 x float]] }
%"struct.gl::GLES1Renderer::GLES1ProgramState" = type { %"struct.gl::ShaderProgramID", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.std::__1::array.624", %"struct.std::__1::array.624", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation", %"struct.gl::UniformLocation" }
%"struct.std::__1::array.624" = type { [4 x %"struct.gl::UniformLocation"] }
%"struct.gl::UniformLocation" = type { i32 }
%"class.gl::MemoryProgramCache" = type opaque
%"class.gl::StateCache" = type <{ %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", i8, [7 x i8], i64, i64, i64, i64, i8, [7 x i8], %"class.angle::BitSetT.168", %"class.angle::BitSetArray", %"class.angle::PackedEnumMap.599", %"class.angle::PackedEnumMap.601", %"class.angle::PackedEnumMap.603", %"class.angle::PackedEnumMap.605", %"class.angle::PackedEnumMap.605", i8, [7 x i8] }>
%"class.angle::PackedEnumMap.599" = type { %"struct.std::__1::array.600" }
%"struct.std::__1::array.600" = type { [16 x i8] }
%"class.angle::PackedEnumMap.601" = type { %"struct.std::__1::array.602" }
%"struct.std::__1::array.602" = type { [12 x i8] }
%"class.angle::PackedEnumMap.603" = type { %"struct.std::__1::array.604" }
%"struct.std::__1::array.604" = type { [4 x i8] }
%"class.angle::PackedEnumMap.605" = type { %"struct.std::__1::array.606" }
%"struct.std::__1::array.606" = type { [19 x i32] }
%struct.Optional.607 = type { i8, %"class.angle::ScratchBuffer" }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.std::__1::shared_ptr.608" = type { %"class.angle::WorkerThreadPool"*, %"class.std::__1::__shared_weak_count"* }
%"class.angle::WorkerThreadPool" = type { i32 (...)** }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.609" = type { %"class.std::__1::__compressed_pair.610" }
%"class.std::__1::__compressed_pair.610" = type { %"struct.std::__1::__compressed_pair_elem.611" }
%"struct.std::__1::__compressed_pair_elem.611" = type { %"class.angle::FrameCapture"* }
%"class.angle::FrameCapture" = type opaque
%"class.gl::MockOverlay" = type { %"class.gl::overlay::Mock" }
%"class.gl::overlay::Mock" = type { i8 }
%"struct.std::__1::array.267" = type { [3 x %"struct.egl::Stream::PlaneTexture"] }
%"struct.egl::Stream::PlaneTexture" = type { i32, %"class.gl::Texture"* }
%"class.angle::FastVector.268" = type { %"struct.std::__1::array.269", %"class.rx::Serial"*, i64, i64 }
%"struct.std::__1::array.269" = type { [8 x %"class.rx::Serial"] }
%"struct.gl::Texture::SamplerCompletenessCache" = type <{ %"struct.gl::ContextID", %"class.gl::SamplerState", i8, [3 x i8] }>
%"class.absl::flat_hash_map.270" = type { %"class.absl::container_internal::raw_hash_map.271" }
%"class.absl::container_internal::raw_hash_map.271" = type { %"class.absl::container_internal::raw_hash_set.272" }
%"class.absl::container_internal::raw_hash_set.272" = type { i8*, %"union.absl::container_internal::map_slot_type.273"*, i64, i64, %"class.absl::container_internal::CompressedTuple.274" }
%"union.absl::container_internal::map_slot_type.273" = type { %"struct.std::__1::pair.629" }
%"struct.std::__1::pair.629" = type { i32, %"class.gl::Texture"* }
%"class.absl::container_internal::CompressedTuple.274" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.275" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.275" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::RenderbufferManager" = type { %"class.gl::TypedResourceManager.279" }
%"class.gl::TypedResourceManager.279" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.280" }
%"class.gl::ResourceMap.280" = type { i64, %"class.gl::Renderbuffer"**, %"class.absl::flat_hash_map.281" }
%"class.gl::Renderbuffer" = type { %"class.gl::RefCountObject.base", %"class.egl::ImageSibling", %"class.gl::LabeledObject", %"class.gl::RenderbufferState", %"class.std::__1::unique_ptr", %"class.std::__1::basic_string", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::RenderbufferID" }>
%"struct.gl::RenderbufferID" = type { i32 }
%"class.gl::RenderbufferState" = type <{ i32, i32, %"struct.gl::Format", i32, i32, i32, [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.rx::RenderbufferImpl"* }
%"class.rx::RenderbufferImpl" = type { %"class.rx::FramebufferAttachmentObjectImpl", %"class.gl::RenderbufferState"* }
%"class.rx::FramebufferAttachmentObjectImpl" = type { %"class.angle::Subject" }
%"class.absl::flat_hash_map.281" = type { %"class.absl::container_internal::raw_hash_map.282" }
%"class.absl::container_internal::raw_hash_map.282" = type { %"class.absl::container_internal::raw_hash_set.283" }
%"class.absl::container_internal::raw_hash_set.283" = type { i8*, %"union.absl::container_internal::map_slot_type.284"*, i64, i64, %"class.absl::container_internal::CompressedTuple.285" }
%"union.absl::container_internal::map_slot_type.284" = type { %"struct.std::__1::pair.631" }
%"struct.std::__1::pair.631" = type { i32, %"class.gl::Renderbuffer"* }
%"class.absl::container_internal::CompressedTuple.285" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.286" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SamplerManager" = type { %"class.gl::TypedResourceManager.290" }
%"class.gl::TypedResourceManager.290" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.291" }
%"class.gl::ResourceMap.291" = type { i64, %"class.gl::Sampler"**, %"class.absl::flat_hash_map.294" }
%"class.gl::Sampler" = type { %"class.gl::RefCountObject.base.293", %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::SamplerState", i8, %"class.rx::SamplerImpl"*, %"class.std::__1::basic_string" }
%"class.gl::RefCountObject.base.293" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::SamplerID" }>
%"struct.gl::SamplerID" = type { i32 }
%"class.rx::SamplerImpl" = type opaque
%"class.absl::flat_hash_map.294" = type { %"class.absl::container_internal::raw_hash_map.295" }
%"class.absl::container_internal::raw_hash_map.295" = type { %"class.absl::container_internal::raw_hash_set.296" }
%"class.absl::container_internal::raw_hash_set.296" = type { i8*, %"union.absl::container_internal::map_slot_type.297"*, i64, i64, %"class.absl::container_internal::CompressedTuple.298" }
%"union.absl::container_internal::map_slot_type.297" = type { %"struct.std::__1::pair.633" }
%"struct.std::__1::pair.633" = type { i32, %"class.gl::Sampler"* }
%"class.absl::container_internal::CompressedTuple.298" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.299" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.299" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SyncManager" = type { %"class.gl::TypedResourceManager.303" }
%"class.gl::TypedResourceManager.303" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.304" }
%"class.gl::ResourceMap.304" = type { i64, %"class.gl::Sync"**, %"class.absl::flat_hash_map.305" }
%"class.gl::Sync" = type opaque
%"class.absl::flat_hash_map.305" = type { %"class.absl::container_internal::raw_hash_map.306" }
%"class.absl::container_internal::raw_hash_map.306" = type { %"class.absl::container_internal::raw_hash_set.307" }
%"class.absl::container_internal::raw_hash_set.307" = type { i8*, %"union.absl::container_internal::map_slot_type.308"*, i64, i64, %"class.absl::container_internal::CompressedTuple.309" }
%"union.absl::container_internal::map_slot_type.308" = type opaque
%"class.absl::container_internal::CompressedTuple.309" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.310" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::FramebufferManager" = type { %"class.gl::TypedResourceManager.314" }
%"class.gl::TypedResourceManager.314" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.315" }
%"class.gl::ResourceMap.315" = type { i64, %"class.gl::Framebuffer"**, %"class.absl::flat_hash_map.316" }
%"class.absl::flat_hash_map.316" = type { %"class.absl::container_internal::raw_hash_map.317" }
%"class.absl::container_internal::raw_hash_map.317" = type { %"class.absl::container_internal::raw_hash_set.318" }
%"class.absl::container_internal::raw_hash_set.318" = type { i8*, %"union.absl::container_internal::map_slot_type.319"*, i64, i64, %"class.absl::container_internal::CompressedTuple.320" }
%"union.absl::container_internal::map_slot_type.319" = type { %"struct.std::__1::pair.635" }
%"struct.std::__1::pair.635" = type { i32, %"class.gl::Framebuffer"* }
%"class.absl::container_internal::CompressedTuple.320" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.321" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramPipelineManager" = type { %"class.gl::TypedResourceManager.325" }
%"class.gl::TypedResourceManager.325" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.326" }
%"class.gl::ResourceMap.326" = type { i64, %"class.gl::ProgramPipeline"**, %"class.absl::flat_hash_map.344" }
%"class.gl::ProgramPipeline" = type { %"class.gl::RefCountObject.base.328", %"class.gl::LabeledObject", %"class.angle::ObserverInterface", %"class.gl::HasAttachedShaders", %"class.std::__1::unique_ptr.329", %"class.gl::ProgramPipelineState", %"class.std::__1::vector.337", %"class.angle::ObserverBinding" }
%"class.gl::RefCountObject.base.328" = type <{ %"class.angle::RefCountObject", %"class.rx::Serial", %"struct.gl::ProgramPipelineID" }>
%"struct.gl::ProgramPipelineID" = type { i32 }
%"class.gl::HasAttachedShaders" = type { i32 (...)** }
%"class.std::__1::unique_ptr.329" = type { %"class.std::__1::__compressed_pair.330" }
%"class.std::__1::__compressed_pair.330" = type { %"struct.std::__1::__compressed_pair_elem.331" }
%"struct.std::__1::__compressed_pair_elem.331" = type { %"class.rx::ProgramPipelineImpl"* }
%"class.rx::ProgramPipelineImpl" = type opaque
%"class.gl::ProgramPipelineState" = type <{ %"class.std::__1::basic_string", %"class.gl::Program"*, %"class.angle::PackedEnumMap.335", i8, [7 x i8], %"class.gl::ProgramExecutable"*, i8, [7 x i8] }>
%"class.angle::PackedEnumMap.335" = type { %"struct.std::__1::array.336" }
%"struct.std::__1::array.336" = type { [6 x %"class.gl::Program"*] }
%"class.absl::flat_hash_map.344" = type { %"class.absl::container_internal::raw_hash_map.345" }
%"class.absl::container_internal::raw_hash_map.345" = type { %"class.absl::container_internal::raw_hash_set.346" }
%"class.absl::container_internal::raw_hash_set.346" = type { i8*, %"union.absl::container_internal::map_slot_type.347"*, i64, i64, %"class.absl::container_internal::CompressedTuple.348" }
%"union.absl::container_internal::map_slot_type.347" = type { %"struct.std::__1::pair.637" }
%"struct.std::__1::pair.637" = type { i32, %"class.gl::ProgramPipeline"* }
%"class.absl::container_internal::CompressedTuple.348" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.349" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.349" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::MemoryObjectManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.353" }
%"class.gl::ResourceMap.353" = type { i64, %"class.gl::MemoryObject"**, %"class.absl::flat_hash_map.354" }
%"class.gl::MemoryObject" = type opaque
%"class.absl::flat_hash_map.354" = type { %"class.absl::container_internal::raw_hash_map.355" }
%"class.absl::container_internal::raw_hash_map.355" = type { %"class.absl::container_internal::raw_hash_set.356" }
%"class.absl::container_internal::raw_hash_set.356" = type { i8*, %"union.absl::container_internal::map_slot_type.357"*, i64, i64, %"class.absl::container_internal::CompressedTuple.358" }
%"union.absl::container_internal::map_slot_type.357" = type opaque
%"class.absl::container_internal::CompressedTuple.358" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.359" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.359" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::SemaphoreManager" = type { %"class.gl::ResourceManagerBase", %"class.gl::ResourceMap.363" }
%"class.gl::ResourceMap.363" = type { i64, %"class.gl::Semaphore"**, %"class.absl::flat_hash_map.364" }
%"class.gl::Semaphore" = type opaque
%"class.absl::flat_hash_map.364" = type { %"class.absl::container_internal::raw_hash_map.365" }
%"class.absl::container_internal::raw_hash_map.365" = type { %"class.absl::container_internal::raw_hash_set.366" }
%"class.absl::container_internal::raw_hash_set.366" = type { i8*, %"union.absl::container_internal::map_slot_type.367"*, i64, i64, %"class.absl::container_internal::CompressedTuple.368" }
%"union.absl::container_internal::map_slot_type.367" = type opaque
%"class.absl::container_internal::CompressedTuple.368" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.369" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.369" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"struct.gl::RasterizerState" = type { i8, i8, i32, i8, float, float, i8, i8, i8, i8 }
%"struct.gl::BlendState" = type { i8, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%"class.gl::BlendStateExt" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %"class.angle::BitSetT.147", %"class.angle::BitSetT.147", i64 }
%"struct.std::__1::array.373" = type { [2 x i32] }
%"struct.gl::DepthStencilState" = type { i8, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%"struct.gl::Rectangle" = type { i32, i32, i32, i32 }
%"class.gl::Framebuffer" = type opaque
%"class.gl::BindingPointer.374" = type { %"class.angle::BindingPointer.375" }
%"class.angle::BindingPointer.375" = type { i32 (...)**, %"class.gl::Renderbuffer"* }
%"class.gl::Program" = type { %"class.gl::LabeledObject", %"class.angle::Subject", %"class.gl::HasAttachedShaders", %"class.rx::Serial", %"class.gl::ProgramState", %"class.rx::ProgramImpl"*, i8, %"class.gl::ProgramBindings", %"class.gl::ProgramAliasedBindings", %"class.gl::ProgramAliasedBindings", i8, %"class.std::__1::unique_ptr.235", i8, i32, %"class.gl::ShaderProgramManager"*, %"struct.gl::ShaderProgramID", %"class.angle::BitSetT.201" }
%"class.gl::ProgramState" = type { %"class.std::__1::basic_string", %"struct.sh::WorkGroupSize", %"class.angle::PackedEnumMap.123", i32, %"class.std::__1::vector.125", %"class.std::__1::vector.132", %"class.std::__1::vector.139", %"class.gl::Range", %"class.angle::BitSetT.147", %"class.std::__1::vector", %"class.angle::BitSetT.148", i8, i8, i8, i8, %"class.angle::BitSetT", i32, i32, i32, i32, i32, i32, %"class.gl::ProgramAliasedBindings", %"class.std::__1::shared_ptr" }
%"class.angle::PackedEnumMap.123" = type { %"struct.std::__1::array.124" }
%"struct.std::__1::array.124" = type { [6 x %"class.gl::Shader"*] }
%"class.std::__1::vector.125" = type { %"class.std::__1::__vector_base.126" }
%"class.std::__1::__vector_base.126" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.std::__1::basic_string"* }
%"class.std::__1::vector.132" = type { %"class.std::__1::__vector_base.133" }
%"class.std::__1::__vector_base.133" = type { %"struct.gl::VariableLocation"*, %"struct.gl::VariableLocation"*, %"class.std::__1::__compressed_pair.134" }
%"struct.gl::VariableLocation" = type <{ i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"struct.gl::VariableLocation"* }
%"class.std::__1::vector.139" = type { %"class.std::__1::__vector_base.140" }
%"class.std::__1::__vector_base.140" = type { %"struct.gl::BufferVariable"*, %"struct.gl::BufferVariable"*, %"class.std::__1::__compressed_pair.142" }
%"struct.gl::BufferVariable" = type <{ %"struct.gl::ActiveVariable.base", [7 x i8], %"struct.sh::ShaderVariable", i32, %"struct.sh::BlockMemberInfo", i32, [4 x i8] }>
%"struct.gl::ActiveVariable.base" = type <{ i32 (...)**, %"class.angle::BitSetT.141" }>
%"class.angle::BitSetT.141" = type { i8 }
%"struct.sh::BlockMemberInfo" = type { i32, i32, i32, i8, i32 }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"struct.gl::BufferVariable"* }
%"class.gl::Range" = type { i32, i32 }
%"class.std::__1::shared_ptr" = type { %"class.gl::ProgramExecutable"*, %"class.std::__1::__shared_weak_count"* }
%"class.rx::ProgramImpl" = type opaque
%"class.gl::ProgramBindings" = type { %"class.absl::flat_hash_map.226" }
%"class.absl::flat_hash_map.226" = type { %"class.absl::container_internal::raw_hash_map.227" }
%"class.absl::container_internal::raw_hash_map.227" = type { %"class.absl::container_internal::raw_hash_set.228" }
%"class.absl::container_internal::raw_hash_set.228" = type { i8*, %"union.absl::container_internal::map_slot_type.229"*, i64, i64, %"class.absl::container_internal::CompressedTuple.230" }
%"union.absl::container_internal::map_slot_type.229" = type opaque
%"class.absl::container_internal::CompressedTuple.230" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.231" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.231" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.gl::ProgramAliasedBindings" = type { %"class.absl::flat_hash_map.149" }
%"class.absl::flat_hash_map.149" = type { %"class.absl::container_internal::raw_hash_map.150" }
%"class.absl::container_internal::raw_hash_map.150" = type { %"class.absl::container_internal::raw_hash_set.151" }
%"class.absl::container_internal::raw_hash_set.151" = type { i8*, %"union.absl::container_internal::map_slot_type.152"*, i64, i64, %"class.absl::container_internal::CompressedTuple.153" }
%"union.absl::container_internal::map_slot_type.152" = type opaque
%"class.absl::container_internal::CompressedTuple.153" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.154" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.154" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage" }
%"class.std::__1::unique_ptr.235" = type { %"class.std::__1::__compressed_pair.236" }
%"class.std::__1::__compressed_pair.236" = type { %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"struct.gl::Program::LinkingState"* }
%"struct.gl::Program::LinkingState" = type opaque
%"class.angle::BitSetT.201" = type { i64 }
%"class.gl::BindingPointer.376" = type { %"class.angle::BindingPointer.377" }
%"class.angle::BindingPointer.377" = type { i32 (...)**, %"class.gl::ProgramPipeline"* }
%"class.gl::ProgramExecutable" = type <{ %"class.angle::Subject", %"class.gl::InfoLog", %"class.angle::BitSetT.141", %"class.angle::BitSetT.141", [6 x i8], %"class.angle::BitSetT.166", i32, [4 x i8], %"class.angle::BitSetT.148", %"class.angle::BitSetT.166", %"class.angle::BitSetArray", %"struct.std::__1::array.169", %"struct.std::__1::array.170", %"class.angle::BitSetArray", %"struct.std::__1::array.171", %"struct.std::__1::array.172", %"class.angle::BitSetArray", %"struct.std::__1::array.172", i8, [7 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.132", %"class.std::__1::vector.132", i8, [7 x i8], %"class.std::__1::vector.70", %"class.std::__1::vector.173", %"class.std::__1::vector.180", i32, [4 x i8], %"class.std::__1::vector.187", %"class.gl::Range", %"class.gl::Range", %"class.std::__1::vector.194", %"class.angle::BitSetT.201", %"class.std::__1::vector.202", %"class.gl::Range", %"class.std::__1::vector.194", %"class.std::__1::vector.194", %"class.gl::Range", %"class.std::__1::vector.209", %"class.std::__1::vector.216", %"class.std::__1::vector.216", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [3 x i8], %"class.angle::PackedEnumMap.223", %"class.angle::PackedEnumMap.223", %"class.angle::PackedEnumMap", i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, %struct.Optional.225, [6 x i8] }>
%"class.gl::InfoLog" = type { %"class.std::__1::unique_ptr.160" }
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.std::__1::basic_stringstream"* }
%"class.std::__1::basic_stringstream" = type { %"class.std::__1::basic_iostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_iostream.base" = type { %"class.std::__1::basic_istream.base", %"class.std::__1::basic_ostream.base" }
%"class.std::__1::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"struct.std::__1::array.169" = type { [96 x i32] }
%"struct.std::__1::array.170" = type { [96 x i8] }
%"struct.std::__1::array.171" = type { [96 x i8] }
%"struct.std::__1::array.172" = type { [96 x %"class.angle::BitSetT.141"] }
%"class.std::__1::vector.173" = type { %"class.std::__1::__vector_base.174" }
%"class.std::__1::__vector_base.174" = type { %"struct.gl::TransformFeedbackVarying"*, %"struct.gl::TransformFeedbackVarying"*, %"class.std::__1::__compressed_pair.175" }
%"struct.gl::TransformFeedbackVarying" = type <{ %"struct.sh::ShaderVariable", i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"struct.gl::TransformFeedbackVarying"* }
%"class.std::__1::vector.180" = type { %"class.std::__1::__vector_base.181" }
%"class.std::__1::__vector_base.181" = type { i32*, i32*, %"class.std::__1::__compressed_pair.182" }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { i32* }
%"class.std::__1::vector.187" = type { %"class.std::__1::__vector_base.188" }
%"class.std::__1::__vector_base.188" = type { %"struct.gl::LinkedUniform"*, %"struct.gl::LinkedUniform"*, %"class.std::__1::__compressed_pair.189" }
%"struct.gl::LinkedUniform" = type { %"struct.gl::ActiveVariable.base", %"struct.sh::ShaderVariable", %"struct.gl::UniformTypeInfo"*, i32, %"struct.sh::BlockMemberInfo", %"class.std::__1::vector" }
%"struct.gl::UniformTypeInfo" = type <{ i32, i32, i32, i32, i32, i8, [3 x i8], i32, i32, i32, [4 x i8], i64, i64, i64, i8, i8, i8, [5 x i8] }>
%"class.std::__1::__compressed_pair.189" = type { %"struct.std::__1::__compressed_pair_elem.190" }
%"struct.std::__1::__compressed_pair_elem.190" = type { %"struct.gl::LinkedUniform"* }
%"class.std::__1::vector.202" = type { %"class.std::__1::__vector_base.203" }
%"class.std::__1::__vector_base.203" = type { %"struct.gl::ShaderVariableBuffer"*, %"struct.gl::ShaderVariableBuffer"*, %"class.std::__1::__compressed_pair.204" }
%"struct.gl::ShaderVariableBuffer" = type { %"struct.gl::ActiveVariable.base", i32, i32, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"struct.gl::ShaderVariableBuffer"* }
%"class.std::__1::vector.194" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"struct.gl::InterfaceBlock"*, %"struct.gl::InterfaceBlock"*, %"class.std::__1::__compressed_pair.196" }
%"struct.gl::InterfaceBlock" = type <{ %"struct.gl::ShaderVariableBuffer", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i8, [3 x i8], i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.gl::InterfaceBlock"* }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.gl::SamplerBinding"*, %"struct.gl::SamplerBinding"*, %"class.std::__1::__compressed_pair.211" }
%"struct.gl::SamplerBinding" = type { i8, i32, i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"struct.gl::SamplerBinding"* }
%"class.std::__1::vector.216" = type { %"class.std::__1::__vector_base.217" }
%"class.std::__1::__vector_base.217" = type { %"struct.gl::ImageBinding"*, %"struct.gl::ImageBinding"*, %"class.std::__1::__compressed_pair.218" }
%"struct.gl::ImageBinding" = type { i8, %"class.std::__1::vector" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.gl::ImageBinding"* }
%"class.angle::PackedEnumMap.223" = type { %"struct.std::__1::array.224" }
%"struct.std::__1::array.224" = type { [6 x %"class.std::__1::vector.70"] }
%struct.Optional.225 = type { i8, i8 }
%"class.std::__1::vector.378" = type { %"class.std::__1::__vector_base.379" }
%"class.std::__1::__vector_base.379" = type { %"struct.gl::VertexAttribCurrentValueData"*, %"struct.gl::VertexAttribCurrentValueData"*, %"class.std::__1::__compressed_pair.381" }
%"struct.gl::VertexAttribCurrentValueData" = type { %union.anon.380, i32 }
%union.anon.380 = type { [4 x float] }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.382" }
%"struct.std::__1::__compressed_pair_elem.382" = type { %"struct.gl::VertexAttribCurrentValueData"* }
%"class.gl::VertexArray" = type <{ %"class.angle::ObserverInterface", %"class.gl::LabeledObject", %"class.angle::Subject", %"struct.gl::VertexArrayID", [4 x i8], %"class.gl::VertexArrayState", %"class.angle::BitSetT.400", %"struct.std::__1::array.401", %"struct.std::__1::array.403", %struct.Optional.405, %"class.rx::VertexArrayImpl"*, %"class.std::__1::vector.337", %"class.angle::BitSetT.166", %"class.gl::VertexArray::IndexRangeCache", i8, [7 x i8] }>
%"struct.gl::VertexArrayID" = type { i32 }
%"class.gl::VertexArrayState" = type { %"class.std::__1::basic_string", %"class.std::__1::vector.386", %"class.gl::SubjectBindingPointer", %"class.std::__1::vector.393", %"class.angle::BitSetT.166", %"class.angle::BitSetT.148", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166", %"class.angle::BitSetT.166" }
%"class.std::__1::vector.386" = type { %"class.std::__1::__vector_base.387" }
%"class.std::__1::__vector_base.387" = type { %"struct.gl::VertexAttribute"*, %"struct.gl::VertexAttribute"*, %"class.std::__1::__compressed_pair.388" }
%"struct.gl::VertexAttribute" = type { i8, %"struct.angle::Format"*, i8*, i32, i32, i32, i64 }
%"struct.angle::Format" = type { i32, i32, i32, void (i64, i64, i64, i8*, i64, i64, i8*, i64, i64)*, void (i8*, i8*)*, void (i8*, i8*)*, %"class.rx::FastCopyFunctionMap"*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i32 }
%"class.rx::FastCopyFunctionMap" = type { i64, %"struct.rx::FastCopyFunctionMap::Entry"* }
%"struct.rx::FastCopyFunctionMap::Entry" = type { i32, void (i8*, i8*)* }
%"class.std::__1::__compressed_pair.388" = type { %"struct.std::__1::__compressed_pair_elem.389" }
%"struct.std::__1::__compressed_pair_elem.389" = type { %"struct.gl::VertexAttribute"* }
%"class.gl::SubjectBindingPointer" = type { %"class.gl::BindingPointer.264", %"class.angle::ObserverBindingBase" }
%"class.std::__1::vector.393" = type { %"class.std::__1::__vector_base.394" }
%"class.std::__1::__vector_base.394" = type { %"class.gl::VertexBinding"*, %"class.gl::VertexBinding"*, %"class.std::__1::__compressed_pair.395" }
%"class.gl::VertexBinding" = type { i32, i32, i64, %"class.gl::BindingPointer.264", %"class.angle::BitSetT.166" }
%"class.std::__1::__compressed_pair.395" = type { %"struct.std::__1::__compressed_pair_elem.396" }
%"struct.std::__1::__compressed_pair_elem.396" = type { %"class.gl::VertexBinding"* }
%"class.angle::BitSetT.400" = type { i64 }
%"struct.std::__1::array.401" = type { [16 x %"class.angle::BitSetT.402"] }
%"class.angle::BitSetT.402" = type { i64 }
%"struct.std::__1::array.403" = type { [16 x %"class.angle::BitSetT.404"] }
%"class.angle::BitSetT.404" = type { i64 }
%struct.Optional.405 = type { i8, %"class.angle::BitSetT.400" }
%"class.rx::VertexArrayImpl" = type opaque
%"class.gl::VertexArray::IndexRangeCache" = type { i64, i32, i64, %"struct.gl::IndexRange" }
%"struct.gl::IndexRange" = type { i64, i64, i64 }
%"class.angle::BitSetT.148" = type { i64 }
%"class.angle::PackedEnumMap.406" = type { %"struct.std::__1::array.407" }
%"struct.std::__1::array.407" = type { [11 x %"class.std::__1::vector.408"] }
%"class.std::__1::vector.408" = type { %"class.std::__1::__vector_base.409" }
%"class.std::__1::__vector_base.409" = type { %"class.gl::BindingPointer.410"*, %"class.gl::BindingPointer.410"*, %"class.std::__1::__compressed_pair.412" }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.413" }
%"struct.std::__1::__compressed_pair_elem.413" = type { %"class.gl::BindingPointer.410"* }
%"class.gl::ActiveTexturesCache" = type { %"struct.std::__1::array.417" }
%"struct.std::__1::array.417" = type { [96 x %"class.gl::Texture"*] }
%"class.std::__1::vector.337" = type { %"class.std::__1::__vector_base.338" }
%"class.std::__1::__vector_base.338" = type { %"class.angle::ObserverBinding"*, %"class.angle::ObserverBinding"*, %"class.std::__1::__compressed_pair.339" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.340" }
%"struct.std::__1::__compressed_pair_elem.340" = type { %"class.angle::ObserverBinding"* }
%"class.std::__1::vector.418" = type { %"class.std::__1::__vector_base.419" }
%"class.std::__1::__vector_base.419" = type { %"class.gl::BindingPointer.420"*, %"class.gl::BindingPointer.420"*, %"class.std::__1::__compressed_pair.422" }
%"class.gl::BindingPointer.420" = type { %"class.angle::BindingPointer.421" }
%"class.angle::BindingPointer.421" = type { i32 (...)**, %"class.gl::Sampler"* }
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"class.gl::BindingPointer.420"* }
%"class.std::__1::vector.427" = type { %"class.std::__1::__vector_base.428" }
%"class.std::__1::__vector_base.428" = type { %"struct.gl::ImageUnit"*, %"struct.gl::ImageUnit"*, %"class.std::__1::__compressed_pair.429" }
%"struct.gl::ImageUnit" = type <{ %"class.gl::BindingPointer.410", i32, i8, [3 x i8], i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.429" = type { %"struct.std::__1::__compressed_pair_elem.430" }
%"struct.std::__1::__compressed_pair_elem.430" = type { %"struct.gl::ImageUnit"* }
%"class.angle::PackedEnumMap.434" = type { %"struct.std::__1::array.435" }
%"struct.std::__1::array.435" = type { [7 x %"class.gl::BindingPointer.436"] }
%"class.gl::BindingPointer.436" = type { %"class.angle::BindingPointer.437" }
%"class.angle::BindingPointer.437" = type { i32 (...)**, %"class.gl::Query"* }
%"class.angle::PackedEnumMap.438" = type { %"struct.std::__1::array.439" }
%"struct.std::__1::array.439" = type { [13 x %"class.gl::BindingPointer.264"] }
%"class.std::__1::vector.440" = type { %"class.std::__1::__vector_base.441" }
%"class.std::__1::__vector_base.441" = type { %"class.gl::OffsetBindingPointer"*, %"class.gl::OffsetBindingPointer"*, %"class.std::__1::__compressed_pair.442" }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"class.gl::OffsetBindingPointer"* }
%"class.angle::BitSetArray.447" = type { %"struct.std::__1::array.167" }
%"struct.std::__1::array.167" = type { [2 x %"class.angle::BitSetT.168"] }
%"class.angle::BitSetT.448" = type { i64 }
%"class.gl::BindingPointer.449" = type { %"class.angle::BindingPointer.450" }
%"class.angle::BindingPointer.450" = type { i32 (...)**, %"class.gl::TransformFeedback"* }
%"struct.gl::PixelUnpackState" = type { %"struct.gl::PixelStoreStateBase" }
%"struct.gl::PixelStoreStateBase" = type { i32, i32, i32, i32, i32, i32 }
%"struct.gl::PixelPackState" = type <{ %"struct.gl::PixelStoreStateBase", i8, [3 x i8] }>
%"class.gl::Debug" = type { i8, void (i32, i32, i32, i32, i32, i8*, i8*)*, i8*, %"class.std::__1::deque", i32, i8, %"class.std::__1::vector.462" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.458" }
%"struct.std::__1::__split_buffer" = type { %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"struct.gl::Debug::Message"**, %"class.std::__1::__compressed_pair.453" }
%"struct.gl::Debug::Message" = type { i32, i32, i32, i32, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"struct.gl::Debug::Message"** }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.462" = type { %"class.std::__1::__vector_base.463" }
%"class.std::__1::__vector_base.463" = type { %"struct.gl::Debug::Group"*, %"struct.gl::Debug::Group"*, %"class.std::__1::__compressed_pair.471" }
%"struct.gl::Debug::Group" = type { i32, i32, %"class.std::__1::basic_string", %"class.std::__1::vector.464" }
%"class.std::__1::vector.464" = type { %"class.std::__1::__vector_base.465" }
%"class.std::__1::__vector_base.465" = type { %"struct.gl::Debug::Control"*, %"struct.gl::Debug::Control"*, %"class.std::__1::__compressed_pair.466" }
%"struct.gl::Debug::Control" = type <{ i32, i32, i32, [4 x i8], %"class.std::__1::vector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.467" }
%"struct.std::__1::__compressed_pair_elem.467" = type { %"struct.gl::Debug::Control"* }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"struct.gl::Debug::Group"* }
%"class.angle::BitSetT.476" = type { i32 }
%"class.angle::BitSetT.168" = type { i64 }
%"class.angle::BitSetT.535" = type { i32 }
%"class.angle::BitSetT.536" = type { i64 }
%"class.angle::BitSetArray" = type { %"struct.std::__1::array.167" }
%"class.angle::BitSetT.147" = type { i8 }
%"class.angle::BitSetT.166" = type { i64 }
%"class.std::__1::vector.477" = type { %"class.std::__1::__vector_base.478" }
%"class.std::__1::__vector_base.478" = type { %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"*, %"class.std::__1::__compressed_pair.480" }
%"class.angle::BitSetT.479" = type { i32 }
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"struct.std::__1::__compressed_pair_elem.481" = type { %"class.angle::BitSetT.479"* }
%"class.std::__1::vector.485" = type { i64*, i64, %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector.490" = type { %"class.std::__1::__vector_base.491" }
%"class.std::__1::__vector_base.491" = type { %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"*, %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"struct.gl::TextureCoordF"* }
%"class.angle::FixedVector" = type { %"struct.std::__1::array.497", i64 }
%"struct.std::__1::array.497" = type { [16 x %"class.angle::Mat4"] }
%"class.angle::Mat4" = type { %"class.angle::Matrix" }
%"class.angle::Matrix" = type { %"class.std::__1::vector.498", i32, i32 }
%"class.std::__1::vector.498" = type { %"class.std::__1::__vector_base.499" }
%"class.std::__1::__vector_base.499" = type { float*, float*, %"class.std::__1::__compressed_pair.500" }
%"class.std::__1::__compressed_pair.500" = type { %"struct.std::__1::__compressed_pair_elem.501" }
%"struct.std::__1::__compressed_pair_elem.501" = type { float* }
%"class.std::__1::vector.505" = type { %"class.std::__1::__vector_base.506" }
%"class.std::__1::__vector_base.506" = type { %"class.angle::FixedVector"*, %"class.angle::FixedVector"*, %"class.std::__1::__compressed_pair.507" }
%"class.std::__1::__compressed_pair.507" = type { %"struct.std::__1::__compressed_pair_elem.508" }
%"struct.std::__1::__compressed_pair_elem.508" = type { %"class.angle::FixedVector"* }
%"class.std::__1::vector.512" = type { %"class.std::__1::__vector_base.513" }
%"class.std::__1::__vector_base.513" = type { %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*, %"class.std::__1::__compressed_pair.514" }
%"class.std::__1::__compressed_pair.514" = type { %"struct.std::__1::__compressed_pair_elem.515" }
%"struct.std::__1::__compressed_pair_elem.515" = type { %"struct.gl::TextureEnvironmentParameters"* }
%"class.std::__1::vector.519" = type { %"class.std::__1::__vector_base.520" }
%"class.std::__1::__vector_base.520" = type { %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*, %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.524" }
%"struct.std::__1::__compressed_pair_elem.524" = type { %"struct.gl::LightParameters"* }
%"class.std::__1::vector.528" = type { %"class.std::__1::__vector_base.529" }
%"class.std::__1::__vector_base.529" = type { %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*, %"class.std::__1::__compressed_pair.530" }
%"class.std::__1::__compressed_pair.530" = type { %"struct.std::__1::__compressed_pair_elem.531" }
%"struct.std::__1::__compressed_pair_elem.531" = type { %"struct.gl::ClipPlaneParameters"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__bit_iterator" = type <{ i64*, i32, [4 x i8] }>

$_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb = comdat any

$_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__15arrayIN5angle4Mat4ELm16EEC2Ev = comdat any

$_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev = comdat any

$_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm = comdat any

$_ZNSt3__16vectorIN5angle7BitSetTILm11EjN2gl11TextureTypeEEENS_9allocatorIS5_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_ = comdat any

$_ZNSt3__16vectorIN2gl13TextureCoordFENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN2gl28TextureEnvironmentParametersENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN5angle11FixedVectorINS1_4Mat4ELm16ENS_5arrayIS3_Lm16EEEEENS_9allocatorIS6_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN2gl15LightParametersENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN2gl19ClipPlaneParametersENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

@_ZN2gl13TextureCoordFC1Ev = hidden unnamed_addr alias void (%"struct.gl::TextureCoordF"*), void (%"struct.gl::TextureCoordF"*)* @_ZN2gl13TextureCoordFC2Ev
@_ZN2gl13TextureCoordFC1Effff = hidden unnamed_addr alias void (%"struct.gl::TextureCoordF"*, float, float, float, float), void (%"struct.gl::TextureCoordF"*, float, float, float, float)* @_ZN2gl13TextureCoordFC2Effff
@_ZN2gl18MaterialParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::MaterialParameters"*), void (%"struct.gl::MaterialParameters"*)* @_ZN2gl18MaterialParametersC2Ev
@_ZN2gl20LightModelParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::LightModelParameters"*), void (%"struct.gl::LightModelParameters"*)* @_ZN2gl20LightModelParametersC2Ev
@_ZN2gl15LightParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::LightParameters"*), void (%"struct.gl::LightParameters"*)* @_ZN2gl15LightParametersC2Ev
@_ZN2gl15LightParametersC1ERKS0_ = hidden unnamed_addr alias void (%"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*), void (%"struct.gl::LightParameters"*, %"struct.gl::LightParameters"*)* @_ZN2gl15LightParametersC2ERKS0_
@_ZN2gl13FogParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::FogParameters"*), void (%"struct.gl::FogParameters"*)* @_ZN2gl13FogParametersC2Ev
@_ZN2gl28TextureEnvironmentParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::TextureEnvironmentParameters"*), void (%"struct.gl::TextureEnvironmentParameters"*)* @_ZN2gl28TextureEnvironmentParametersC2Ev
@_ZN2gl28TextureEnvironmentParametersC1ERKS0_ = hidden unnamed_addr alias void (%"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*), void (%"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"*)* @_ZN2gl28TextureEnvironmentParametersC2ERKS0_
@_ZN2gl15PointParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::PointParameters"*), void (%"struct.gl::PointParameters"*)* @_ZN2gl15PointParametersC2Ev
@_ZN2gl15PointParametersC1ERKS0_ = hidden unnamed_addr alias void (%"struct.gl::PointParameters"*, %"struct.gl::PointParameters"*), void (%"struct.gl::PointParameters"*, %"struct.gl::PointParameters"*)* @_ZN2gl15PointParametersC2ERKS0_
@_ZN2gl19ClipPlaneParametersC1Ev = hidden unnamed_addr alias void (%"struct.gl::ClipPlaneParameters"*), void (%"struct.gl::ClipPlaneParameters"*)* @_ZN2gl19ClipPlaneParametersC2Ev
@_ZN2gl19ClipPlaneParametersC1EbRKN5angle6VectorILm4EfEE = hidden unnamed_addr alias void (%"struct.gl::ClipPlaneParameters"*, i1, %"class.angle::Vector.521"*), void (%"struct.gl::ClipPlaneParameters"*, i1, %"class.angle::Vector.521"*)* @_ZN2gl19ClipPlaneParametersC2EbRKN5angle6VectorILm4EfEE
@_ZN2gl19ClipPlaneParametersC1ERKS0_ = hidden unnamed_addr alias void (%"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*), void (%"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"*)* @_ZN2gl19ClipPlaneParametersC2ERKS0_
@_ZN2gl10GLES1StateC1Ev = hidden unnamed_addr alias void (%"class.gl::GLES1State"*), void (%"class.gl::GLES1State"*)* @_ZN2gl10GLES1StateC2Ev
@_ZN2gl10GLES1StateD1Ev = hidden unnamed_addr alias void (%"class.gl::GLES1State"*), void (%"class.gl::GLES1State"*)* @_ZN2gl10GLES1StateD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl13TextureCoordFC2Ev(%"struct.gl::TextureCoordF"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"struct.gl::TextureCoordF"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl13TextureCoordFC2Effff(%"struct.gl::TextureCoordF"* nocapture, float, float, float, float) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 0
  store float %1, float* %6, align 4
  %7 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 1
  store float %2, float* %7, align 4
  %8 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 2
  store float %3, float* %8, align 4
  %9 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 3
  store float %4, float* %9, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2gl13TextureCoordFeqERKS0_(%"struct.gl::TextureCoordF"* nocapture readonly, %"struct.gl::TextureCoordF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %1, i64 0, i32 0
  %6 = load float, float* %5, align 4
  %7 = fcmp oeq float %4, %6
  br i1 %7, label %8, label %26

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 1
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 4
  %13 = fcmp oeq float %10, %12
  br i1 %13, label %14, label %26

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %1, i64 0, i32 2
  %18 = load float, float* %17, align 4
  %19 = fcmp oeq float %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %0, i64 0, i32 3
  %22 = load float, float* %21, align 4
  %23 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %1, i64 0, i32 3
  %24 = load float, float* %23, align 4
  %25 = fcmp oeq float %22, %24
  br label %26

26:                                               ; preds = %20, %14, %8, %2
  %27 = phi i1 [ false, %14 ], [ false, %8 ], [ false, %2 ], [ %25, %20 ]
  ret i1 %27
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl18MaterialParametersC2Ev(%"struct.gl::MaterialParameters"* nocapture) unnamed_addr #2 align 2 {
  %2 = bitcast %"struct.gl::MaterialParameters"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl20LightModelParametersC2Ev(%"struct.gl::LightModelParameters"* nocapture) unnamed_addr #2 align 2 {
  %2 = bitcast %"struct.gl::LightModelParameters"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %2, i8 0, i64 16, i1 false) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN2gl15LightParametersC2Ev(%"struct.gl::LightParameters"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 1, i32 0
  %4 = bitcast float* %3 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %4, align 4
  %5 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 2, i32 0
  %6 = bitcast float* %5 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %6, align 4
  %7 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 3, i32 0
  %8 = bitcast float* %7 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %8, align 4
  %9 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 4
  %10 = bitcast %"class.angle::Vector.521"* %9 to i32*
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 4, i32 0, i32 0, i64 1
  %12 = bitcast float* %11 to i32*
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 4, i32 0, i32 0, i64 2
  %14 = bitcast float* %13 to i32*
  store i32 1065353216, i32* %14, align 4
  %15 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 4, i32 0, i32 0, i64 3
  %16 = bitcast float* %15 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 -1082130432>, <4 x i32>* %16, align 4
  %17 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 6
  %18 = bitcast float* %17 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.800000e+02, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %18, align 4
  %19 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 10
  store float 0.000000e+00, float* %19, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl15LightParametersC2ERKS0_(%"struct.gl::LightParameters"* nocapture, %"struct.gl::LightParameters"* nocapture readonly dereferenceable(100)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 100, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl13FogParametersC2Ev(%"struct.gl::FogParameters"* nocapture) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.gl::FogParameters", %"struct.gl::FogParameters"* %0, i64 0, i32 4
  %3 = bitcast %"struct.angle::Color"* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 16, i1 false) #14
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl28TextureEnvironmentParametersC2Ev(%"struct.gl::TextureEnvironmentParameters"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 0
  store i8 4, i8* %2, align 4
  %3 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 1
  store i8 5, i8* %3, align 1
  %4 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 2
  store i8 5, i8* %4, align 2
  %5 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 3
  store i8 3, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 4
  store i8 3, i8* %6, align 4
  %7 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 5
  store i8 1, i8* %7, align 1
  %8 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 6
  store i8 1, i8* %8, align 2
  %9 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 7
  store i8 0, i8* %9, align 1
  %10 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 8
  store i8 0, i8* %10, align 4
  %11 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 9
  store i8 3, i8* %11, align 1
  %12 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 10
  store i8 2, i8* %12, align 2
  %13 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 11
  store i8 3, i8* %13, align 1
  %14 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 12
  store i8 2, i8* %14, align 4
  %15 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 13
  store i8 2, i8* %15, align 1
  %16 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 14
  store i8 2, i8* %16, align 2
  %17 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 16, i32 0
  %18 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 17
  %19 = bitcast float* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 16, i1 false)
  store float 1.000000e+00, float* %18, align 4
  %20 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 18
  store float 1.000000e+00, float* %20, align 4
  %21 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 19
  store i8 0, i8* %21, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl28TextureEnvironmentParametersC2ERKS0_(%"struct.gl::TextureEnvironmentParameters"* nocapture, %"struct.gl::TextureEnvironmentParameters"* nocapture readonly dereferenceable(44)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 41, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_ZN2gl15PointParametersC2Ev(%"struct.gl::PointParameters"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 0
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 1
  store float 1.000000e+00, float* %3, align 4
  %4 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 2
  store float 1.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 3
  %6 = bitcast %"class.angle::Vector"* %5 to i32*
  store i32 1065353216, i32* %6, align 4
  %7 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 3, i32 0, i32 0, i64 1
  %8 = bitcast float* %7 to i32*
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 3, i32 0, i32 0, i64 2
  %10 = bitcast float* %9 to i32*
  store i32 0, i32* %10, align 4
  %11 = getelementptr inbounds %"struct.gl::PointParameters", %"struct.gl::PointParameters"* %0, i64 0, i32 4
  store float 1.000000e+00, float* %11, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl15PointParametersC2ERKS0_(%"struct.gl::PointParameters"* nocapture, %"struct.gl::PointParameters"* nocapture readonly dereferenceable(28)) unnamed_addr #2 align 2 {
  %3 = bitcast %"struct.gl::PointParameters"* %0 to i8*
  %4 = bitcast %"struct.gl::PointParameters"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 28, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN2gl19ClipPlaneParametersC2Ev(%"struct.gl::ClipPlaneParameters"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl19ClipPlaneParametersC2EbRKN5angle6VectorILm4EfEE(%"struct.gl::ClipPlaneParameters"* nocapture, i1 zeroext, %"class.angle::Vector.521"* nocapture readonly dereferenceable(16)) unnamed_addr #2 align 2 {
  %4 = zext i1 %1 to i8
  %5 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %0, i64 0, i32 0
  store i8 %4, i8* %5, align 4
  %6 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %0, i64 0, i32 1
  %7 = bitcast %"class.angle::Vector.521"* %6 to i8*
  %8 = bitcast %"class.angle::Vector.521"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl19ClipPlaneParametersC2ERKS0_(%"struct.gl::ClipPlaneParameters"* nocapture, %"struct.gl::ClipPlaneParameters"* nocapture readonly dereferenceable(20)) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 20, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(20) %"struct.gl::ClipPlaneParameters"* @_ZN2gl19ClipPlaneParametersaSERKS0_(%"struct.gl::ClipPlaneParameters"* returned, %"struct.gl::ClipPlaneParameters"* nocapture readonly dereferenceable(20)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 20, i1 false)
  ret %"struct.gl::ClipPlaneParameters"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1StateC2Ev(%"class.gl::GLES1State"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 21, i32 0
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 0
  %5 = bitcast %"class.gl::GLES1State"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 44, i1 false)
  %6 = bitcast %"class.std::__1::vector.485"* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 35, i1 false)
  %7 = bitcast float* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %7, i8 0, i64 57, i1 false)
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EEC2Ev(%"struct.std::__1::array.497"* %4) #14
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 1
  store i64 0, i64* %8, align 8
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EEC2Ev(%"struct.std::__1::array.497"* %9) #14
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 1
  %11 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 32
  %12 = bitcast %"struct.gl::LightModelParameters"* %11 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 16, i1 false) #14
  %13 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33
  %14 = bitcast %"class.std::__1::vector.519"* %13 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false) #14
  %15 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34, i32 4
  %16 = bitcast %"struct.angle::Color"* %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %16, i8 0, i64 16, i1 false) #14
  %17 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 35
  %18 = bitcast i64* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 120, i1 false)
  store i8 1, i8* %17, align 8
  %19 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 0
  store float 0.000000e+00, float* %19, align 4
  %20 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 1
  store float 1.000000e+00, float* %20, align 4
  %21 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 2
  store float 1.000000e+00, float* %21, align 4
  %22 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 3
  %23 = bitcast %"class.angle::Vector"* %22 to i32*
  store i32 1065353216, i32* %23, align 4
  %24 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 3, i32 0, i32 0, i64 1
  %25 = bitcast float* %24 to i32*
  store i32 0, i32* %25, align 4
  %26 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 3, i32 0, i32 0, i64 2
  %27 = bitcast float* %26 to i32*
  store i32 0, i32* %27, align 4
  %28 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 4
  store float 1.000000e+00, float* %28, align 4
  %29 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 38
  store i8 0, i8* %29, align 8
  %30 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 40
  store float 0.000000e+00, float* %30, align 4
  %31 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 41
  store i8 4, i8* %31, align 8
  %32 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43
  %33 = bitcast %"class.std::__1::vector.528"* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 28, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1StateD2Ev(%"class.gl::GLES1State"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43, i32 0, i32 0
  %3 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %2, align 8
  %4 = icmp eq %"struct.gl::ClipPlaneParameters"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"struct.gl::ClipPlaneParameters"* %3 to i64
  %7 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43, i32 0, i32 1
  %8 = bitcast %"struct.gl::ClipPlaneParameters"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %3, i64 0, i32 0
  tail call void @_ZdlPv(i8* %9) #15
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33, i32 0, i32 0
  %12 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %11, align 8
  %13 = icmp eq %"struct.gl::LightParameters"* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint %"struct.gl::LightParameters"* %12 to i64
  %16 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33, i32 0, i32 1
  %17 = bitcast %"struct.gl::LightParameters"** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %12, i64 0, i32 0
  tail call void @_ZdlPv(i8* %18) #15
  br label %19

19:                                               ; preds = %10, %14
  %20 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 30, i32 0, i32 0
  %21 = load %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"** %20, align 8
  %22 = icmp eq %"struct.gl::TextureEnvironmentParameters"* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint %"struct.gl::TextureEnvironmentParameters"* %21 to i64
  %25 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 30, i32 0, i32 1
  %26 = bitcast %"struct.gl::TextureEnvironmentParameters"** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %21, i64 0, i32 0
  tail call void @_ZdlPv(i8* %27) #15
  br label %28

28:                                               ; preds = %19, %23
  %29 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29
  %30 = getelementptr inbounds %"class.std::__1::vector.505", %"class.std::__1::vector.505"* %29, i64 0, i32 0, i32 0
  %31 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %30, align 8
  %32 = icmp eq %"class.angle::FixedVector"* %31, null
  br i1 %32, label %48, label %33

33:                                               ; preds = %28
  %34 = bitcast %"class.angle::FixedVector"* %31 to i8*
  %35 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 1
  %36 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %35, align 8
  %37 = icmp eq %"class.angle::FixedVector"* %36, %31
  br i1 %37, label %46, label %38

38:                                               ; preds = %33, %38
  %39 = phi %"class.angle::FixedVector"* [ %40, %38 ], [ %36, %33 ]
  %40 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %39, i64 -1
  tail call void @_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm(%"class.angle::FixedVector"* %40, i64 0) #14
  %41 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %40, i64 0, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev(%"struct.std::__1::array.497"* %41) #14
  %42 = icmp eq %"class.angle::FixedVector"* %40, %31
  br i1 %42, label %43, label %38

43:                                               ; preds = %38
  %44 = bitcast %"class.std::__1::vector.505"* %29 to i8**
  %45 = load i8*, i8** %44, align 8
  br label %46

46:                                               ; preds = %43, %33
  %47 = phi i8* [ %45, %43 ], [ %34, %33 ]
  store %"class.angle::FixedVector"* %31, %"class.angle::FixedVector"** %35, align 8
  tail call void @_ZdlPv(i8* %47) #15
  br label %48

48:                                               ; preds = %28, %46
  %49 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  tail call void @_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm(%"class.angle::FixedVector"* %49, i64 0) #14
  %50 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %49, i64 0, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev(%"struct.std::__1::array.497"* %50) #14
  %51 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  tail call void @_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm(%"class.angle::FixedVector"* %51, i64 0) #14
  %52 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %51, i64 0, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev(%"struct.std::__1::array.497"* %52) #14
  %53 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 23, i32 0, i32 0
  %54 = load %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"** %53, align 8
  %55 = icmp eq %"struct.gl::TextureCoordF"* %54, null
  br i1 %55, label %61, label %56

56:                                               ; preds = %48
  %57 = ptrtoint %"struct.gl::TextureCoordF"* %54 to i64
  %58 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 23, i32 0, i32 1
  %59 = bitcast %"struct.gl::TextureCoordF"** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast %"struct.gl::TextureCoordF"* %54 to i8*
  tail call void @_ZdlPv(i8* %60) #15
  br label %61

61:                                               ; preds = %48, %56
  %62 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8, i32 0
  %63 = load i64*, i64** %62, align 8
  %64 = icmp eq i64* %63, null
  br i1 %64, label %67, label %65

65:                                               ; preds = %61
  %66 = bitcast i64* %63 to i8*
  tail call void @_ZdlPv(i8* %66) #15
  br label %67

67:                                               ; preds = %61, %65
  %68 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 2, i32 0, i32 0
  %69 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %68, align 8
  %70 = icmp eq %"class.angle::BitSetT.479"* %69, null
  br i1 %70, label %76, label %71

71:                                               ; preds = %67
  %72 = ptrtoint %"class.angle::BitSetT.479"* %69 to i64
  %73 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 2, i32 0, i32 1
  %74 = bitcast %"class.angle::BitSetT.479"** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = bitcast %"class.angle::BitSetT.479"* %69 to i8*
  tail call void @_ZdlPv(i8* %75) #15
  br label %76

76:                                               ; preds = %67, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State10initializeEPKNS_7ContextEPKNS_5StateE(%"class.gl::GLES1State"*, %"class.gl::Context"* nocapture readonly, %"class.gl::State"*) local_unnamed_addr #2 align 2 {
  %4 = alloca %"class.angle::Mat4", align 16
  %5 = alloca %"class.angle::Mat4", align 16
  %6 = alloca %"class.angle::Mat4", align 8
  %7 = alloca %"struct.gl::ClipPlaneParameters", align 4
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  store %"class.gl::State"* %2, %"class.gl::State"** %8, align 8
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 2
  %10 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 2, i32 5, i32 112
  %11 = load i32, i32* %10, align 4
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 2, i32 0, i32 1
  %14 = bitcast %"class.angle::BitSetT.479"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"class.std::__1::vector.477"* %9 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %15, %17
  %19 = ashr exact i64 %18, 2
  %20 = icmp ult i64 %19, %12
  %21 = inttoptr i64 %17 to %"class.angle::BitSetT.479"*
  br i1 %20, label %22, label %27

22:                                               ; preds = %3
  %23 = sub nsw i64 %12, %19
  tail call void @_ZNSt3__16vectorIN5angle7BitSetTILm11EjN2gl11TextureTypeEEENS_9allocatorIS5_EEE8__appendEm(%"class.std::__1::vector.477"* %9, i64 %23) #14
  %24 = getelementptr inbounds %"class.std::__1::vector.477", %"class.std::__1::vector.477"* %9, i64 0, i32 0, i32 0
  %25 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %24, align 8
  %26 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %13, align 8
  br label %32

27:                                               ; preds = %3
  %28 = inttoptr i64 %15 to %"class.angle::BitSetT.479"*
  %29 = icmp ugt i64 %19, %12
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %21, i64 %12
  store %"class.angle::BitSetT.479"* %31, %"class.angle::BitSetT.479"** %13, align 8
  br label %32

32:                                               ; preds = %22, %27, %30
  %33 = phi %"class.angle::BitSetT.479"* [ %26, %22 ], [ %28, %27 ], [ %31, %30 ]
  %34 = phi %"class.angle::BitSetT.479"* [ %25, %22 ], [ %21, %27 ], [ %21, %30 ]
  %35 = icmp eq %"class.angle::BitSetT.479"* %34, %33
  br i1 %35, label %44, label %36

36:                                               ; preds = %32
  %37 = bitcast %"class.angle::BitSetT.479"* %34 to i8*
  %38 = ptrtoint %"class.angle::BitSetT.479"* %34 to i64
  %39 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %33, i64 -1, i32 0
  %40 = ptrtoint i32* %39 to i64
  %41 = sub i64 %40, %38
  %42 = add i64 %41, 4
  %43 = and i64 %42, -4
  call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 %43, i1 false)
  br label %44

44:                                               ; preds = %36, %32
  %45 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 3
  %46 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8
  %47 = bitcast i8* %45 to i32*
  store i32 0, i32* %47, align 8
  %48 = load i32, i32* %10, align 4
  %49 = zext i32 %48 to i64
  tail call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb(%"class.std::__1::vector.485"* %46, i64 %49, i1 zeroext false)
  %50 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 9
  %51 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  store i8 0, i8* %51, align 4
  %52 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 21, i32 0
  call void @llvm.memset.p0i8.i64(i8* align 8 %50, i8 0, i64 11, i1 false)
  %53 = bitcast float* %52 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %53, align 4
  %54 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 22
  %55 = bitcast %"class.angle::Vector"* %54 to i32*
  store i32 0, i32* %55, align 4
  %56 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 22, i32 0, i32 0, i64 1
  %57 = bitcast float* %56 to i32*
  store i32 0, i32* %57, align 4
  %58 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 22, i32 0, i32 0, i64 2
  %59 = bitcast float* %58 to i32*
  store i32 1065353216, i32* %59, align 4
  %60 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 23
  %61 = load i32, i32* %10, align 4
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 23, i32 0, i32 1
  %64 = bitcast %"struct.gl::TextureCoordF"** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = bitcast %"class.std::__1::vector.490"* %60 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %65, %67
  %69 = ashr exact i64 %68, 4
  %70 = icmp ult i64 %69, %62
  %71 = inttoptr i64 %67 to %"struct.gl::TextureCoordF"*
  br i1 %70, label %72, label %74

72:                                               ; preds = %44
  %73 = sub nsw i64 %62, %69
  tail call void @_ZNSt3__16vectorIN2gl13TextureCoordFENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.490"* %60, i64 %73) #14
  br label %78

74:                                               ; preds = %44
  %75 = icmp ugt i64 %69, %62
  br i1 %75, label %76, label %78

76:                                               ; preds = %74
  %77 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %71, i64 %62
  store %"struct.gl::TextureCoordF"* %77, %"struct.gl::TextureCoordF"** %63, align 8
  br label %78

78:                                               ; preds = %72, %74, %76
  %79 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 24
  store i32 0, i32* %79, align 8
  %80 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 30
  %81 = load i32, i32* %10, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 30, i32 0, i32 1
  %84 = bitcast %"struct.gl::TextureEnvironmentParameters"** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %"class.std::__1::vector.512"* %80 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %85, %87
  %89 = sdiv exact i64 %88, 44
  %90 = icmp ult i64 %89, %82
  %91 = inttoptr i64 %87 to %"struct.gl::TextureEnvironmentParameters"*
  br i1 %90, label %92, label %94

92:                                               ; preds = %78
  %93 = sub nsw i64 %82, %89
  tail call void @_ZNSt3__16vectorIN2gl28TextureEnvironmentParametersENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.512"* %80, i64 %93) #14
  br label %98

94:                                               ; preds = %78
  %95 = icmp ugt i64 %89, %82
  br i1 %95, label %96, label %98

96:                                               ; preds = %94
  %97 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %91, i64 %82
  store %"struct.gl::TextureEnvironmentParameters"* %97, %"struct.gl::TextureEnvironmentParameters"** %83, align 8
  br label %98

98:                                               ; preds = %92, %94, %96
  %99 = bitcast %"class.angle::Mat4"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %99) #14
  call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* nonnull %4) #14
  %100 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 0, i32 0, i64 %101
  %103 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %102, i64 0, i32 0, i32 0, i32 0, i32 0
  %104 = load float*, float** %103, align 8
  %105 = icmp eq float* %104, null
  br i1 %105, label %112, label %106

106:                                              ; preds = %98
  %107 = ptrtoint float* %104 to i64
  %108 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 0, i32 0, i64 %101, i32 0, i32 0, i32 0, i32 1
  %109 = bitcast float** %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = bitcast float* %104 to i8*
  call void @_ZdlPv(i8* %110) #15
  %111 = bitcast %"class.angle::Mat4"* %102 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 24, i1 false) #14
  br label %112

112:                                              ; preds = %106, %98
  %113 = bitcast %"class.angle::Mat4"* %4 to <2 x i64>*
  %114 = load <2 x i64>, <2 x i64>* %113, align 16
  %115 = bitcast %"class.angle::Mat4"* %102 to <2 x i64>*
  store <2 x i64> %114, <2 x i64>* %115, align 8
  %116 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %117 = bitcast float** %116 to i64*
  %118 = load i64, i64* %117, align 16
  %119 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 0, i32 0, i64 %101, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %120 = bitcast float** %119 to i64*
  store i64 %118, i64* %120, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %99, i8 0, i64 24, i1 false) #14
  %121 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 0, i32 0, i64 %101, i32 0, i32 1
  %122 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 1
  %123 = bitcast i32* %122 to i64*
  %124 = bitcast i32* %121 to i64*
  %125 = load i64, i64* %123, align 8
  store i64 %125, i64* %124, align 8
  %126 = load i64, i64* %100, align 8
  %127 = add i64 %126, 1
  store i64 %127, i64* %100, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %99) #14
  %128 = bitcast %"class.angle::Mat4"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %128) #14
  call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* nonnull %5) #14
  %129 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 0, i32 0, i64 %130
  %132 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %131, i64 0, i32 0, i32 0, i32 0, i32 0
  %133 = load float*, float** %132, align 8
  %134 = icmp eq float* %133, null
  br i1 %134, label %141, label %135

135:                                              ; preds = %112
  %136 = ptrtoint float* %133 to i64
  %137 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 0, i32 0, i64 %130, i32 0, i32 0, i32 0, i32 1
  %138 = bitcast float** %137 to i64*
  store i64 %136, i64* %138, align 8
  %139 = bitcast float* %133 to i8*
  call void @_ZdlPv(i8* %139) #15
  %140 = bitcast %"class.angle::Mat4"* %131 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %140, i8 0, i64 24, i1 false) #14
  br label %141

141:                                              ; preds = %112, %135
  %142 = bitcast %"class.angle::Mat4"* %5 to <2 x i64>*
  %143 = load <2 x i64>, <2 x i64>* %142, align 16
  %144 = bitcast %"class.angle::Mat4"* %131 to <2 x i64>*
  store <2 x i64> %143, <2 x i64>* %144, align 8
  %145 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %5, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %146 = bitcast float** %145 to i64*
  %147 = load i64, i64* %146, align 16
  %148 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 0, i32 0, i64 %130, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %149 = bitcast float** %148 to i64*
  store i64 %147, i64* %149, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %128, i8 0, i64 24, i1 false) #14
  %150 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 0, i32 0, i64 %130, i32 0, i32 1
  %151 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %5, i64 0, i32 0, i32 1
  %152 = bitcast i32* %151 to i64*
  %153 = bitcast i32* %150 to i64*
  %154 = load i64, i64* %152, align 8
  store i64 %154, i64* %153, align 8
  %155 = load i64, i64* %129, align 8
  %156 = add i64 %155, 1
  store i64 %156, i64* %129, align 8
  %157 = load i32, i32* %10, align 4
  %158 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 1
  %159 = bitcast %"class.angle::FixedVector"** %158 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29
  %162 = bitcast %"class.std::__1::vector.505"* %161 to i64*
  %163 = load i64, i64* %162, align 8
  %164 = zext i32 %157 to i64
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %128) #14
  %165 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29
  %166 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 1
  %167 = sub i64 %160, %163
  %168 = sdiv exact i64 %167, 520
  %169 = icmp ult i64 %168, %164
  %170 = inttoptr i64 %163 to %"class.angle::FixedVector"*
  %171 = inttoptr i64 %160 to %"class.angle::FixedVector"*
  br i1 %169, label %172, label %175

172:                                              ; preds = %141
  %173 = sub nsw i64 %164, %168
  call void @_ZNSt3__16vectorIN5angle11FixedVectorINS1_4Mat4ELm16ENS_5arrayIS3_Lm16EEEEENS_9allocatorIS6_EEE8__appendEm(%"class.std::__1::vector.505"* %165, i64 %173) #14
  %174 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %166, align 8
  br label %187

175:                                              ; preds = %141
  %176 = inttoptr i64 %160 to %"class.angle::FixedVector"*
  %177 = icmp ugt i64 %168, %164
  br i1 %177, label %178, label %187

178:                                              ; preds = %175
  %179 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %170, i64 %164
  %180 = icmp eq %"class.angle::FixedVector"* %179, %171
  br i1 %180, label %186, label %181

181:                                              ; preds = %178, %181
  %182 = phi %"class.angle::FixedVector"* [ %183, %181 ], [ %171, %178 ]
  %183 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %182, i64 -1
  call void @_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm(%"class.angle::FixedVector"* %183, i64 0) #14
  %184 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %183, i64 0, i32 0
  call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev(%"struct.std::__1::array.497"* %184) #14
  %185 = icmp eq %"class.angle::FixedVector"* %183, %179
  br i1 %185, label %186, label %181

186:                                              ; preds = %181, %178
  store %"class.angle::FixedVector"* %179, %"class.angle::FixedVector"** %166, align 8
  br label %187

187:                                              ; preds = %172, %175, %186
  %188 = phi %"class.angle::FixedVector"* [ %174, %172 ], [ %176, %175 ], [ %179, %186 ]
  %189 = getelementptr inbounds %"class.std::__1::vector.505", %"class.std::__1::vector.505"* %165, i64 0, i32 0, i32 0
  %190 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %189, align 8
  %191 = icmp eq %"class.angle::FixedVector"* %190, %188
  br i1 %191, label %202, label %192

192:                                              ; preds = %187
  %193 = bitcast %"class.angle::Mat4"* %6 to i8*
  %194 = bitcast %"class.angle::Mat4"* %6 to i64*
  %195 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %6, i64 0, i32 0, i32 0, i32 0, i32 1
  %196 = bitcast float** %195 to i64*
  %197 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %6, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %198 = bitcast float** %197 to i64*
  %199 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %6, i64 0, i32 0, i32 1
  %200 = bitcast i32* %199 to i64*
  %201 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  br label %285

202:                                              ; preds = %318, %187
  %203 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31, i32 0, i32 0
  %204 = bitcast float* %203 to <4 x float>*
  store <4 x float> <float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 1.000000e+00>, <4 x float>* %204, align 8
  %205 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31, i32 1, i32 0
  %206 = bitcast float* %205 to <4 x float>*
  store <4 x float> <float 0x3FE99999A0000000, float 0x3FE99999A0000000, float 0x3FE99999A0000000, float 1.000000e+00>, <4 x float>* %206, align 8
  %207 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31, i32 2, i32 0
  %208 = bitcast float* %207 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %208, align 8
  %209 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31, i32 3, i32 0
  %210 = bitcast float* %209 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %210, align 8
  %211 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31, i32 4
  %212 = bitcast float* %211 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0x3FC99999A0000000, float 0x3FC99999A0000000, float 0x3FC99999A0000000>, <4 x float>* %212, align 8
  %213 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 32, i32 0, i32 3
  store float 1.000000e+00, float* %213, align 4
  %214 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 32, i32 1
  store i8 0, i8* %214, align 4
  %215 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33
  %216 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 2, i32 5, i32 114
  %217 = load i32, i32* %216, align 4
  %218 = zext i32 %217 to i64
  %219 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33, i32 0, i32 1
  %220 = bitcast %"struct.gl::LightParameters"** %219 to i64*
  %221 = load i64, i64* %220, align 8
  %222 = bitcast %"class.std::__1::vector.519"* %215 to i64*
  %223 = load i64, i64* %222, align 8
  %224 = sub i64 %221, %223
  %225 = sdiv exact i64 %224, 100
  %226 = icmp ult i64 %225, %218
  %227 = inttoptr i64 %223 to %"struct.gl::LightParameters"*
  br i1 %226, label %228, label %232

228:                                              ; preds = %202
  %229 = sub nsw i64 %218, %225
  call void @_ZNSt3__16vectorIN2gl15LightParametersENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.519"* %215, i64 %229) #14
  %230 = getelementptr inbounds %"class.std::__1::vector.519", %"class.std::__1::vector.519"* %215, i64 0, i32 0, i32 0
  %231 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %230, align 8
  br label %236

232:                                              ; preds = %202
  %233 = icmp ugt i64 %225, %218
  br i1 %233, label %234, label %236

234:                                              ; preds = %232
  %235 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %227, i64 %218
  store %"struct.gl::LightParameters"* %235, %"struct.gl::LightParameters"** %219, align 8
  br label %236

236:                                              ; preds = %228, %232, %234
  %237 = phi %"struct.gl::LightParameters"* [ %231, %228 ], [ %227, %232 ], [ %227, %234 ]
  %238 = getelementptr inbounds %"class.std::__1::vector.519", %"class.std::__1::vector.519"* %215, i64 0, i32 0, i32 0
  %239 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %237, i64 0, i32 2, i32 0
  %240 = bitcast float* %239 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %240, align 4
  %241 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %238, align 8
  %242 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %241, i64 0, i32 3, i32 0
  %243 = bitcast float* %242 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %243, align 4
  %244 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34, i32 0
  store i8 0, i8* %244, align 8
  %245 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34, i32 1
  store float 1.000000e+00, float* %245, align 4
  %246 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34, i32 2
  store float 0.000000e+00, float* %246, align 8
  %247 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34, i32 3
  store float 1.000000e+00, float* %247, align 4
  %248 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34, i32 4, i32 0
  %249 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 35
  %250 = bitcast float* %248 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %250, i8 0, i64 16, i1 false)
  store i8 1, i8* %249, align 8
  %251 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 38
  store i8 0, i8* %251, align 8
  %252 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 40
  store float 0.000000e+00, float* %252, align 4
  %253 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 41
  store i8 4, i8* %253, align 8
  %254 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43
  %255 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 2, i32 5, i32 113
  %256 = load i32, i32* %255, align 8
  %257 = zext i32 %256 to i64
  %258 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %7, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %258) #14
  store i8 0, i8* %258, align 4
  %259 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %7, i64 0, i32 1
  %260 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43, i32 0, i32 1
  %261 = bitcast %"struct.gl::ClipPlaneParameters"** %260 to i64*
  %262 = bitcast %"class.angle::Vector.521"* %259 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %262, i8 0, i64 16, i1 false)
  %263 = load i64, i64* %261, align 8
  %264 = bitcast %"class.std::__1::vector.528"* %254 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = sub i64 %263, %265
  %267 = sdiv exact i64 %266, 20
  %268 = icmp ult i64 %267, %257
  %269 = inttoptr i64 %265 to %"struct.gl::ClipPlaneParameters"*
  br i1 %268, label %270, label %272

270:                                              ; preds = %236
  %271 = sub nsw i64 %257, %267
  call void @_ZNSt3__16vectorIN2gl19ClipPlaneParametersENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.528"* %254, i64 %271, %"struct.gl::ClipPlaneParameters"* nonnull dereferenceable(20) %7) #14
  br label %276

272:                                              ; preds = %236
  %273 = icmp ugt i64 %267, %257
  br i1 %273, label %274, label %276

274:                                              ; preds = %272
  %275 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %269, i64 %257
  store %"struct.gl::ClipPlaneParameters"* %275, %"struct.gl::ClipPlaneParameters"** %260, align 8
  br label %276

276:                                              ; preds = %270, %272, %274
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %258) #14
  %277 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 44
  %278 = getelementptr inbounds %"class.gl::Context", %"class.gl::Context"* %1, i64 0, i32 2, i32 5, i32 13
  %279 = bitcast float* %278 to i32*
  %280 = bitcast i8* %277 to i32*
  store i32 0, i32* %280, align 8
  %281 = load i32, i32* %279, align 8
  %282 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37, i32 1
  %283 = bitcast float* %282 to i32*
  store i32 %281, i32* %283, align 4
  %284 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  store i64 65535, i64* %284, align 8
  ret void

285:                                              ; preds = %192, %318
  %286 = phi %"class.angle::FixedVector"* [ %190, %192 ], [ %319, %318 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %193) #14
  call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* nonnull %6) #14
  %287 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 0, i32 1
  %288 = load i64, i64* %287, align 8
  %289 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 0, i32 0, i32 0, i64 %288
  %290 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %289, i64 0, i32 0, i32 0, i32 0, i32 0
  %291 = load float*, float** %290, align 8
  %292 = icmp eq float* %291, null
  br i1 %292, label %299, label %293

293:                                              ; preds = %285
  %294 = ptrtoint float* %291 to i64
  %295 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 0, i32 0, i32 0, i64 %288, i32 0, i32 0, i32 0, i32 1
  %296 = bitcast float** %295 to i64*
  store i64 %294, i64* %296, align 8
  %297 = bitcast float* %291 to i8*
  call void @_ZdlPv(i8* %297) #15
  %298 = bitcast %"class.angle::Mat4"* %289 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %298, i8 0, i64 24, i1 false) #14
  br label %299

299:                                              ; preds = %285, %293
  %300 = load i64, i64* %194, align 8
  %301 = bitcast %"class.angle::Mat4"* %289 to i64*
  store i64 %300, i64* %301, align 8
  %302 = load i64, i64* %196, align 8
  %303 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 0, i32 0, i32 0, i64 %288, i32 0, i32 0, i32 0, i32 1
  %304 = bitcast float** %303 to i64*
  store i64 %302, i64* %304, align 8
  %305 = load i64, i64* %198, align 8
  %306 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 0, i32 0, i32 0, i64 %288, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %307 = bitcast float** %306 to i64*
  store i64 %305, i64* %307, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %193, i8 0, i64 24, i1 false) #14
  %308 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 0, i32 0, i32 0, i64 %288, i32 0, i32 1
  %309 = bitcast i32* %308 to i64*
  %310 = load i64, i64* %200, align 8
  store i64 %310, i64* %309, align 8
  %311 = load i64, i64* %287, align 8
  %312 = add i64 %311, 1
  store i64 %312, i64* %287, align 8
  %313 = load float*, float** %201, align 8
  %314 = icmp eq float* %313, null
  br i1 %314, label %318, label %315

315:                                              ; preds = %299
  %316 = ptrtoint float* %313 to i64
  store i64 %316, i64* %196, align 8
  %317 = bitcast float* %313 to i8*
  call void @_ZdlPv(i8* %317) #15
  br label %318

318:                                              ; preds = %299, %315
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %193) #14
  %319 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %286, i64 1
  %320 = icmp eq %"class.angle::FixedVector"* %319, %188
  br i1 %320, label %202, label %285
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6resizeEmb(%"class.std::__1::vector.485"*, i64, i1 zeroext) local_unnamed_addr #2 comdat align 2 {
  %4 = alloca %"class.std::__1::vector.485", align 16
  %5 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ult i64 %6, %1
  br i1 %7, label %8, label %159

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 6
  %12 = sub i64 %1, %6
  %13 = icmp ult i64 %11, %12
  %14 = sub i64 %11, %12
  %15 = icmp ugt i64 %6, %14
  %16 = or i1 %13, %15
  br i1 %16, label %25, label %17

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 0
  %19 = load i64*, i64** %18, align 8, !noalias !2
  %20 = lshr i64 %6, 6
  %21 = getelementptr inbounds i64, i64* %19, i64 %20
  %22 = trunc i64 %6 to i32
  %23 = and i32 %22, 63
  %24 = ptrtoint i64* %21 to i64
  store i64 %1, i64* %5, align 8
  br label %86

25:                                               ; preds = %8
  %26 = bitcast %"class.std::__1::vector.485"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #14
  %27 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %4, i64 0, i32 1
  %28 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %4, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 24, i1 false) #14
  %29 = icmp slt i64 %1, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = bitcast %"class.std::__1::vector.485"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %31) #16
  unreachable

32:                                               ; preds = %25
  %33 = icmp ult i64 %11, 4611686018427387903
  br i1 %33, label %34, label %40

34:                                               ; preds = %32
  %35 = shl i64 %10, 7
  %36 = add nuw i64 %1, 63
  %37 = and i64 %36, -64
  %38 = icmp ult i64 %35, %37
  %39 = select i1 %38, i64 %37, i64 %35
  br label %40

40:                                               ; preds = %34, %32
  %41 = phi i64 [ %39, %34 ], [ 9223372036854775807, %32 ]
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.485"* nonnull %4, i64 %41)
  %42 = load i64, i64* %5, align 8
  %43 = add i64 %42, %12
  store i64 %43, i64* %27, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8
  %46 = bitcast %"class.std::__1::vector.485"* %4 to i64*
  %47 = load i64, i64* %46, align 16, !noalias !7
  %48 = icmp sgt i64 %42, 0
  br i1 %48, label %49, label %70

49:                                               ; preds = %40
  %50 = inttoptr i64 %47 to i8*
  %51 = lshr i64 %42, 6
  %52 = bitcast i64* %45 to i8*
  %53 = shl nuw nsw i64 %51, 3
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %52, i64 %53, i1 false) #14, !noalias !12
  %54 = and i64 %42, 63
  %55 = inttoptr i64 %47 to i64*
  %56 = getelementptr inbounds i64, i64* %55, i64 %51
  %57 = ptrtoint i64* %56 to i64
  %58 = icmp eq i64 %54, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %49
  %60 = getelementptr inbounds i64, i64* %45, i64 %51
  %61 = sub nuw nsw i64 64, %54
  %62 = lshr i64 -1, %61
  %63 = load i64, i64* %60, align 8, !noalias !15
  %64 = and i64 %63, %62
  %65 = xor i64 %62, -1
  %66 = load i64, i64* %56, align 8, !noalias !12
  %67 = and i64 %66, %65
  %68 = or i64 %67, %64
  store i64 %68, i64* %56, align 8, !noalias !12
  %69 = trunc i64 %54 to i32
  br label %70

70:                                               ; preds = %49, %40, %59
  %71 = phi i32 [ %69, %59 ], [ 0, %49 ], [ 0, %40 ]
  %72 = phi i64 [ %57, %59 ], [ %57, %49 ], [ %47, %40 ]
  %73 = bitcast %"class.std::__1::vector.485"* %4 to <2 x i64>*
  %74 = load <2 x i64>, <2 x i64>* %73, align 16
  %75 = bitcast %"class.std::__1::vector.485"* %0 to <2 x i64>*
  %76 = load <2 x i64>, <2 x i64>* %75, align 8
  %77 = bitcast %"class.std::__1::vector.485"* %0 to <2 x i64>*
  store <2 x i64> %74, <2 x i64>* %77, align 8
  %78 = bitcast %"class.std::__1::vector.485"* %4 to <2 x i64>*
  store <2 x i64> %76, <2 x i64>* %78, align 16
  %79 = load i64, i64* %9, align 8
  %80 = load i64, i64* %28, align 16
  store i64 %80, i64* %9, align 8
  store i64 %79, i64* %28, align 16
  %81 = extractelement <2 x i64> %76, i32 0
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %70
  %84 = inttoptr i64 %81 to i8*
  call void @_ZdlPv(i8* %84) #15
  br label %85

85:                                               ; preds = %70, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #14
  br label %86

86:                                               ; preds = %85, %17
  %87 = phi i64 [ %72, %85 ], [ %24, %17 ]
  %88 = phi i32 [ %71, %85 ], [ %23, %17 ]
  %89 = inttoptr i64 %87 to i64*
  %90 = icmp eq i64 %12, 0
  br i1 %90, label %160, label %91

91:                                               ; preds = %86
  %92 = icmp eq i32 %88, 0
  br i1 %2, label %93, label %125

93:                                               ; preds = %91
  br i1 %92, label %94, label %96

94:                                               ; preds = %93
  %95 = inttoptr i64 %87 to i8*
  br label %111

96:                                               ; preds = %93
  %97 = sub nuw nsw i32 64, %88
  %98 = zext i32 %97 to i64
  %99 = icmp ult i64 %12, %98
  %100 = select i1 %99, i64 %12, i64 %98
  %101 = zext i32 %88 to i64
  %102 = shl i64 -1, %101
  %103 = sub nsw i64 %98, %100
  %104 = lshr i64 -1, %103
  %105 = and i64 %104, %102
  %106 = load i64, i64* %89, align 8
  %107 = or i64 %106, %105
  store i64 %107, i64* %89, align 8
  %108 = sub i64 %12, %100
  %109 = getelementptr inbounds i64, i64* %89, i64 1
  %110 = bitcast i64* %109 to i8*
  br label %111

111:                                              ; preds = %96, %94
  %112 = phi i64* [ %89, %94 ], [ %109, %96 ]
  %113 = phi i8* [ %95, %94 ], [ %110, %96 ]
  %114 = phi i64 [ %12, %94 ], [ %108, %96 ]
  %115 = lshr i64 %114, 6
  %116 = shl nuw nsw i64 %115, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 -1, i64 %116, i1 false) #14
  %117 = and i64 %114, 63
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %160, label %119

119:                                              ; preds = %111
  %120 = getelementptr inbounds i64, i64* %112, i64 %115
  %121 = sub nuw nsw i64 64, %117
  %122 = lshr i64 -1, %121
  %123 = load i64, i64* %120, align 8
  %124 = or i64 %123, %122
  store i64 %124, i64* %120, align 8
  br label %160

125:                                              ; preds = %91
  br i1 %92, label %126, label %128

126:                                              ; preds = %125
  %127 = inttoptr i64 %87 to i8*
  br label %144

128:                                              ; preds = %125
  %129 = sub nuw nsw i32 64, %88
  %130 = zext i32 %129 to i64
  %131 = icmp ult i64 %12, %130
  %132 = select i1 %131, i64 %12, i64 %130
  %133 = zext i32 %88 to i64
  %134 = shl i64 -1, %133
  %135 = sub nsw i64 %130, %132
  %136 = lshr i64 -1, %135
  %137 = and i64 %136, %134
  %138 = xor i64 %137, -1
  %139 = load i64, i64* %89, align 8
  %140 = and i64 %139, %138
  store i64 %140, i64* %89, align 8
  %141 = sub i64 %12, %132
  %142 = getelementptr inbounds i64, i64* %89, i64 1
  %143 = bitcast i64* %142 to i8*
  br label %144

144:                                              ; preds = %128, %126
  %145 = phi i64* [ %89, %126 ], [ %142, %128 ]
  %146 = phi i8* [ %127, %126 ], [ %143, %128 ]
  %147 = phi i64 [ %12, %126 ], [ %141, %128 ]
  %148 = lshr i64 %147, 6
  %149 = shl nuw nsw i64 %148, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %146, i8 0, i64 %149, i1 false) #14
  %150 = and i64 %147, 63
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %160, label %152

152:                                              ; preds = %144
  %153 = getelementptr inbounds i64, i64* %145, i64 %148
  %154 = sub nuw nsw i64 64, %150
  %155 = lshr i64 -1, %154
  %156 = xor i64 %155, -1
  %157 = load i64, i64* %153, align 8
  %158 = and i64 %157, %156
  store i64 %158, i64* %153, align 8
  br label %160

159:                                              ; preds = %3
  store i64 %1, i64* %5, align 8
  br label %160

160:                                              ; preds = %152, %144, %119, %111, %86, %159
  ret void
}

declare void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"*) unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State12setAlphaFuncENS_13AlphaTestFuncEf(%"class.gl::GLES1State"* nocapture, i8 zeroext, float) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, 4096
  store i64 %6, i64* %4, align 8
  %7 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 38
  store i8 %1, i8* %7, align 8
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 40
  store float %2, float* %8, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State8setDirtyENS0_14DirtyGles1TypeE(%"class.gl::GLES1State"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = zext i32 %1 to i64
  %4 = shl i64 1, %3
  %5 = and i64 %4, 65535
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = or i64 %7, %5
  store i64 %8, i64* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State20setClientTextureUnitEj(%"class.gl::GLES1State"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 16
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 24
  store i32 %1, i32* %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2gl10GLES1State20getClientTextureUnitEv(%"class.gl::GLES1State"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 24
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State15setCurrentColorERKN5angle5ColorIfEE(%"class.gl::GLES1State"* nocapture, %"struct.angle::Color"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 8
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 21
  %7 = bitcast %"struct.angle::Color"* %6 to i8*
  %8 = bitcast %"struct.angle::Color"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(16) %"struct.angle::Color"* @_ZNK2gl10GLES1State15getCurrentColorEv(%"class.gl::GLES1State"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 21
  ret %"struct.angle::Color"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State16setCurrentNormalERKN5angle6VectorILm3EfEE(%"class.gl::GLES1State"* nocapture, %"class.angle::Vector"* nocapture readonly dereferenceable(12)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 8
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 22
  %7 = bitcast %"class.angle::Vector"* %6 to i8*
  %8 = bitcast %"class.angle::Vector"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 12, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(12) %"class.angle::Vector"* @_ZNK2gl10GLES1State16getCurrentNormalEv(%"class.gl::GLES1State"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 22
  ret %"class.angle::Vector"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State23setCurrentTextureCoordsEjRKNS_13TextureCoordFE(%"class.gl::GLES1State"* nocapture, i32, %"struct.gl::TextureCoordF"* nocapture readonly dereferenceable(16)) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, 8
  store i64 %6, i64* %4, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 23, i32 0, i32 0
  %9 = load %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"** %8, align 8
  %10 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %9, i64 %7
  %11 = bitcast %"struct.gl::TextureCoordF"* %10 to i8*
  %12 = bitcast %"struct.gl::TextureCoordF"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %11, i8* align 4 %12, i64 16, i1 false)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(16) %"struct.gl::TextureCoordF"* @_ZNK2gl10GLES1State23getCurrentTextureCoordsEj(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 23, i32 0, i32 0
  %5 = load %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"** %4, align 8
  %6 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %5, i64 %3
  ret %"struct.gl::TextureCoordF"* %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State13setMatrixModeENS_10MatrixTypeE(%"class.gl::GLES1State"* nocapture, i8 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 32
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  store i8 %1, i8* %6, align 4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i8 @_ZNK2gl10GLES1State13getMatrixModeEv(%"class.gl::GLES1State"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %3 = load i8, i8* %2, align 4
  ret i8 %3
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK2gl10GLES1State26getCurrentMatrixStackDepthEj(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %28 [
    i32 2979, label %3
    i32 2980, label %9
    i32 2981, label %15
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ult i64 %5, 2147483647
  %7 = select i1 %6, i64 %5, i64 2147483647
  %8 = trunc i64 %7 to i32
  br label %28

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = icmp ult i64 %11, 2147483647
  %13 = select i1 %12, i64 %11, i64 2147483647
  %14 = trunc i64 %13 to i32
  br label %28

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %17 = load %"class.gl::State"*, %"class.gl::State"** %16, align 8
  %18 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %17, i64 0, i32 71
  %19 = load i64, i64* %18, align 8
  %20 = and i64 %19, 4294967295
  %21 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %22 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %21, align 8
  %23 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %22, i64 %20, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %24, 2147483647
  %26 = select i1 %25, i64 %24, i64 2147483647
  %27 = trunc i64 %26 to i32
  br label %28

28:                                               ; preds = %2, %15, %9, %3
  %29 = phi i32 [ %27, %15 ], [ %14, %9 ], [ %8, %3 ], [ 0, %2 ]
  ret i32 %29
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State10pushMatrixEv(%"class.gl::GLES1State"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 32
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %6 = load i8, i8* %5, align 4
  switch i8 %6, label %20 [
    i8 0, label %7
    i8 1, label %9
    i8 2, label %11
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %22

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %22

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %13 = load %"class.gl::State"*, %"class.gl::State"** %12, align 8
  %14 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %13, i64 0, i32 71
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 4294967295
  %17 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %18 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %17, align 8
  %19 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %18, i64 %16
  br label %22

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %22

22:                                               ; preds = %7, %9, %11, %20
  %23 = phi %"class.angle::FixedVector"* [ %21, %20 ], [ %19, %11 ], [ %10, %9 ], [ %8, %7 ]
  %24 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, -1
  %27 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 0, i32 0, i64 %25, i32 0, i32 0
  %28 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 0, i32 0, i64 %26, i32 0, i32 0, i32 0, i32 0
  %29 = load float*, float** %28, align 8
  %30 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 0, i32 0, i64 %26, i32 0, i32 0, i32 0, i32 1
  %31 = load float*, float** %30, align 8
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.498"* %27, float* %29, float* %31) #14
  %32 = load i64, i64* %24, align 8
  %33 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 0, i32 0, i64 %25, i32 0, i32 1
  %34 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 0, i32 0, i64 %26, i32 0, i32 1
  %35 = bitcast i32* %34 to i64*
  %36 = bitcast i32* %33 to i64*
  %37 = load i64, i64* %35, align 8
  store i64 %37, i64* %36, align 8
  %38 = add i64 %32, 1
  store i64 %38, i64* %24, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(520) %"class.angle::FixedVector"* @_ZN2gl10GLES1State18currentMatrixStackEv(%"class.gl::GLES1State"*) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 32
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %6 = load i8, i8* %5, align 4
  switch i8 %6, label %20 [
    i8 0, label %7
    i8 1, label %9
    i8 2, label %11
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %22

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %22

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %13 = load %"class.gl::State"*, %"class.gl::State"** %12, align 8
  %14 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %13, i64 0, i32 71
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 4294967295
  %17 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %18 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %17, align 8
  %19 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %18, i64 %16
  br label %22

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %22

22:                                               ; preds = %20, %11, %9, %7
  %23 = phi %"class.angle::FixedVector"* [ %21, %20 ], [ %19, %11 ], [ %10, %9 ], [ %8, %7 ]
  ret %"class.angle::FixedVector"* %23
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State9popMatrixEv(%"class.gl::GLES1State"* nocapture) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 32
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %6 = load i8, i8* %5, align 4
  switch i8 %6, label %20 [
    i8 0, label %7
    i8 1, label %9
    i8 2, label %11
  ]

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %22

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %22

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %13 = load %"class.gl::State"*, %"class.gl::State"** %12, align 8
  %14 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %13, i64 0, i32 71
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 4294967295
  %17 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %18 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %17, align 8
  %19 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %18, i64 %16
  br label %22

20:                                               ; preds = %1
  %21 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %22

22:                                               ; preds = %7, %9, %11, %20
  %23 = phi %"class.angle::FixedVector"* [ %21, %20 ], [ %19, %11 ], [ %10, %9 ], [ %8, %7 ]
  %24 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %23, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, -1
  store i64 %26, i64* %24, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(32) %"class.angle::Mat4"* @_ZNK2gl10GLES1State18getModelviewMatrixEv(%"class.gl::GLES1State"* readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28, i32 0, i32 0, i64 %4
  ret %"class.angle::Mat4"* %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(520) %"class.angle::FixedVector"* @_ZNK2gl10GLES1State18currentMatrixStackEv(%"class.gl::GLES1State"* readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %3 = load i8, i8* %2, align 4
  switch i8 %3, label %17 [
    i8 0, label %4
    i8 1, label %6
    i8 2, label %8
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %19

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %19

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %10 = load %"class.gl::State"*, %"class.gl::State"** %9, align 8
  %11 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %10, i64 0, i32 71
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, 4294967295
  %14 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %15 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %14, align 8
  %16 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %15, i64 %13
  br label %19

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %19

19:                                               ; preds = %17, %8, %6, %4
  %20 = phi %"class.angle::FixedVector"* [ %18, %17 ], [ %16, %8 ], [ %7, %6 ], [ %5, %4 ]
  ret %"class.angle::FixedVector"* %20
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State10loadMatrixERKN5angle4Mat4E(%"class.gl::GLES1State"*, %"class.angle::Mat4"* readonly dereferenceable(32)) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 32
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %7 = load i8, i8* %6, align 4
  switch i8 %7, label %21 [
    i8 0, label %8
    i8 1, label %10
    i8 2, label %12
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %23

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %23

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %14 = load %"class.gl::State"*, %"class.gl::State"** %13, align 8
  %15 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %14, i64 0, i32 71
  %16 = load i64, i64* %15, align 8
  %17 = and i64 %16, 4294967295
  %18 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %19 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %18, align 8
  %20 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %19, i64 %17
  br label %23

21:                                               ; preds = %2
  %22 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %23

23:                                               ; preds = %8, %10, %12, %21
  %24 = phi %"class.angle::FixedVector"* [ %22, %21 ], [ %20, %12 ], [ %11, %10 ], [ %9, %8 ]
  %25 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %24, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, -1
  %28 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %24, i64 0, i32 0, i32 0, i64 %27
  %29 = icmp eq %"class.angle::Mat4"* %28, %1
  br i1 %29, label %36, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %28, i64 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %33 = load float*, float** %32, align 8
  %34 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %1, i64 0, i32 0, i32 0, i32 0, i32 1
  %35 = load float*, float** %34, align 8
  tail call void @_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.498"* %31, float* %33, float* %35) #14
  br label %36

36:                                               ; preds = %23, %30
  %37 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %24, i64 0, i32 0, i32 0, i64 %27, i32 0, i32 1
  %38 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %1, i64 0, i32 0, i32 1
  %39 = bitcast i32* %38 to i64*
  %40 = bitcast i32* %37 to i64*
  %41 = load i64, i64* %39, align 8
  store i64 %41, i64* %40, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State10multMatrixERKN5angle4Mat4E(%"class.gl::GLES1State"* nocapture, %"class.angle::Mat4"* dereferenceable(32)) local_unnamed_addr #2 align 2 {
  %3 = alloca %"class.angle::Mat4", align 8
  %4 = alloca %"class.angle::Mat4", align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, 32
  %8 = bitcast %"class.angle::Mat4"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #14
  %9 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %3, i64 0, i32 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %3, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %3, i64 0, i32 0, i32 1
  %13 = bitcast %"class.angle::Mat4"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  store i64 %7, i64* %5, align 8
  %14 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 25
  %15 = load i8, i8* %14, align 4
  switch i8 %15, label %29 [
    i8 0, label %16
    i8 1, label %18
    i8 2, label %20
  ]

16:                                               ; preds = %2
  %17 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %31

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %31

20:                                               ; preds = %2
  %21 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %22 = load %"class.gl::State"*, %"class.gl::State"** %21, align 8
  %23 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %22, i64 0, i32 71
  %24 = load i64, i64* %23, align 8
  %25 = and i64 %24, 4294967295
  %26 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %27 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %26, align 8
  %28 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %27, i64 %25
  br label %31

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %31

31:                                               ; preds = %16, %18, %20, %29
  %32 = phi %"class.angle::FixedVector"* [ %30, %29 ], [ %28, %20 ], [ %19, %18 ], [ %17, %16 ]
  %33 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %32, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, -1
  %36 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %32, i64 0, i32 0, i32 0, i64 %35
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #14
  %37 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %32, i64 0, i32 0, i32 0, i64 %35, i32 0, i32 0, i32 0, i32 1
  %38 = bitcast float** %37 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = bitcast %"class.angle::Mat4"* %36 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %39, %41
  %43 = ashr exact i64 %42, 2
  %44 = icmp eq i64 %42, 0
  br i1 %44, label %70, label %45

45:                                               ; preds = %31
  %46 = icmp ugt i64 %43, 4611686018427387903
  br i1 %46, label %47, label %49

47:                                               ; preds = %45
  %48 = bitcast %"class.angle::Mat4"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %48) #16
  unreachable

49:                                               ; preds = %45
  %50 = tail call i8* @_Znwm(i64 %42) #15
  %51 = bitcast i8* %50 to float*
  %52 = bitcast float** %10 to i8**
  store i8* %50, i8** %52, align 8
  %53 = bitcast %"class.angle::Mat4"* %3 to i8**
  store i8* %50, i8** %53, align 8
  %54 = getelementptr inbounds float, float* %51, i64 %43
  store float* %54, float** %11, align 8
  %55 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %36, i64 0, i32 0, i32 0, i32 0, i32 0
  %56 = load float*, float** %55, align 8
  %57 = load i64, i64* %38, align 8
  %58 = bitcast float** %10 to i64*
  %59 = ptrtoint i8* %50 to i64
  %60 = ptrtoint float* %56 to i64
  %61 = sub i64 %57, %60
  %62 = icmp sgt i64 %61, 0
  br i1 %62, label %63, label %68

63:                                               ; preds = %49
  %64 = lshr exact i64 %61, 2
  %65 = bitcast float* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %50, i8* align 4 %65, i64 %61, i1 false) #14
  %66 = getelementptr inbounds float, float* %51, i64 %64
  %67 = ptrtoint float* %66 to i64
  br label %68

68:                                               ; preds = %63, %49
  %69 = phi i64 [ %67, %63 ], [ %59, %49 ]
  store i64 %69, i64* %58, align 8
  br label %70

70:                                               ; preds = %31, %68
  %71 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %32, i64 0, i32 0, i32 0, i64 %35, i32 0, i32 1
  %72 = bitcast i32* %71 to i64*
  %73 = bitcast i32* %12 to i64*
  %74 = load i64, i64* %72, align 8
  store i64 %74, i64* %73, align 8
  %75 = bitcast %"class.angle::Mat4"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %75) #14
  call void @_ZN5angle4Mat47productERKS0_(%"class.angle::Mat4"* nonnull sret %4, %"class.angle::Mat4"* nonnull %3, %"class.angle::Mat4"* dereferenceable(32) %1) #14
  %76 = load i64, i64* %5, align 8
  %77 = or i64 %76, 32
  store i64 %77, i64* %5, align 8
  %78 = load i8, i8* %14, align 4
  switch i8 %78, label %92 [
    i8 0, label %79
    i8 1, label %81
    i8 2, label %83
  ]

79:                                               ; preds = %70
  %80 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %94

81:                                               ; preds = %70
  %82 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 27
  br label %94

83:                                               ; preds = %70
  %84 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 0
  %85 = load %"class.gl::State"*, %"class.gl::State"** %84, align 8
  %86 = getelementptr inbounds %"class.gl::State", %"class.gl::State"* %85, i64 0, i32 71
  %87 = load i64, i64* %86, align 8
  %88 = and i64 %87, 4294967295
  %89 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 29, i32 0, i32 0
  %90 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %89, align 8
  %91 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %90, i64 %88
  br label %94

92:                                               ; preds = %70
  %93 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 28
  br label %94

94:                                               ; preds = %79, %81, %83, %92
  %95 = phi %"class.angle::FixedVector"* [ %93, %92 ], [ %91, %83 ], [ %82, %81 ], [ %80, %79 ]
  %96 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %95, i64 0, i32 1
  %97 = load i64, i64* %96, align 8
  %98 = add i64 %97, -1
  %99 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %95, i64 0, i32 0, i32 0, i64 %98
  %100 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %99, i64 0, i32 0, i32 0, i32 0, i32 0
  %101 = load float*, float** %100, align 8
  %102 = icmp eq float* %101, null
  br i1 %102, label %109, label %103

103:                                              ; preds = %94
  %104 = ptrtoint float* %101 to i64
  %105 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %95, i64 0, i32 0, i32 0, i64 %98, i32 0, i32 0, i32 0, i32 1
  %106 = bitcast float** %105 to i64*
  store i64 %104, i64* %106, align 8
  %107 = bitcast float* %101 to i8*
  call void @_ZdlPv(i8* %107) #15
  %108 = bitcast %"class.angle::Mat4"* %99 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 24, i1 false) #14
  br label %109

109:                                              ; preds = %94, %103
  %110 = bitcast %"class.angle::Mat4"* %4 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = bitcast %"class.angle::Mat4"* %99 to i64*
  store i64 %111, i64* %112, align 8
  %113 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %114 = bitcast float** %113 to i64*
  %115 = load i64, i64* %114, align 8
  %116 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %95, i64 0, i32 0, i32 0, i64 %98, i32 0, i32 0, i32 0, i32 1
  %117 = bitcast float** %116 to i64*
  store i64 %115, i64* %117, align 8
  %118 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %119 = bitcast float** %118 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %95, i64 0, i32 0, i32 0, i64 %98, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %122 = bitcast float** %121 to i64*
  store i64 %120, i64* %122, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 0, i64 24, i1 false) #14
  %123 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %95, i64 0, i32 0, i32 0, i64 %98, i32 0, i32 1
  %124 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 1
  %125 = bitcast i32* %124 to i64*
  %126 = bitcast i32* %123 to i64*
  %127 = load i64, i64* %125, align 8
  store i64 %127, i64* %126, align 8
  %128 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %129 = load float*, float** %128, align 8
  %130 = icmp eq float* %129, null
  br i1 %130, label %134, label %131

131:                                              ; preds = %109
  %132 = ptrtoint float* %129 to i64
  store i64 %132, i64* %114, align 8
  %133 = bitcast float* %129 to i8*
  call void @_ZdlPv(i8* %133) #15
  br label %134

134:                                              ; preds = %109, %131
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %75) #14
  %135 = load float*, float** %9, align 8
  %136 = icmp eq float* %135, null
  br i1 %136, label %141, label %137

137:                                              ; preds = %134
  %138 = ptrtoint float* %135 to i64
  %139 = bitcast float** %10 to i64*
  store i64 %138, i64* %139, align 8
  %140 = bitcast float* %135 to i8*
  call void @_ZdlPv(i8* %140) #15
  br label %141

141:                                              ; preds = %134, %137
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #14
  ret void
}

declare void @_ZN5angle4Mat47productERKS0_(%"class.angle::Mat4"* sret, %"class.angle::Mat4"*, %"class.angle::Mat4"* dereferenceable(32)) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State10setLogicOpENS_16LogicalOperationE(%"class.gl::GLES1State"* nocapture, i8 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 8192
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 41
  store i8 %1, i8* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State21setClientStateEnabledENS_21ClientVertexArrayTypeEb(%"class.gl::GLES1State"* nocapture, i8 zeroext, i1 zeroext) local_unnamed_addr #2 align 2 {
  %4 = zext i1 %2 to i8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, 2
  store i64 %7, i64* %5, align 8
  switch i8 %1, label %33 [
    i8 4, label %8
    i8 1, label %10
    i8 0, label %12
    i8 2, label %14
    i8 3, label %16
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 3
  store i8 %4, i8* %9, align 8
  br label %33

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 4
  store i8 %4, i8* %11, align 1
  br label %33

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 5
  store i8 %4, i8* %13, align 2
  br label %33

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 6
  store i8 %4, i8* %15, align 1
  br label %33

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 24
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8, i32 0
  %21 = load i64*, i64** %20, align 8
  %22 = lshr i64 %19, 6
  %23 = getelementptr inbounds i64, i64* %21, i64 %22
  %24 = and i64 %19, 63
  %25 = shl i64 1, %24
  br i1 %2, label %26, label %29

26:                                               ; preds = %16
  %27 = load i64, i64* %23, align 8
  %28 = or i64 %27, %25
  store i64 %28, i64* %23, align 8
  br label %33

29:                                               ; preds = %16
  %30 = xor i64 %25, -1
  %31 = load i64, i64* %23, align 8
  %32 = and i64 %31, %30
  store i64 %32, i64* %23, align 8
  br label %33

33:                                               ; preds = %29, %26, %3, %14, %12, %10, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State23setTexCoordArrayEnabledEjb(%"class.gl::GLES1State"* nocapture, i32, i1 zeroext) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, 2
  store i64 %6, i64* %4, align 8
  %7 = zext i32 %1 to i64
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8, i32 0
  %9 = load i64*, i64** %8, align 8
  %10 = lshr i64 %7, 6
  %11 = getelementptr inbounds i64, i64* %9, i64 %10
  %12 = and i64 %7, 63
  %13 = shl i64 1, %12
  br i1 %2, label %14, label %17

14:                                               ; preds = %3
  %15 = load i64, i64* %11, align 8
  %16 = or i64 %15, %13
  br label %21

17:                                               ; preds = %3
  %18 = xor i64 %13, -1
  %19 = load i64, i64* %11, align 8
  %20 = and i64 %19, %18
  br label %21

21:                                               ; preds = %14, %17
  %22 = phi i64 [ %20, %17 ], [ %16, %14 ]
  store i64 %22, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2gl10GLES1State20isClientStateEnabledENS_21ClientVertexArrayTypeE(%"class.gl::GLES1State"* nocapture readonly, i8 zeroext) local_unnamed_addr #8 align 2 {
  switch i8 %1, label %32 [
    i8 4, label %3
    i8 1, label %7
    i8 0, label %11
    i8 2, label %15
    i8 3, label %19
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 3
  %5 = load i8, i8* %4, align 8, !range !18
  %6 = icmp ne i8 %5, 0
  br label %32

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 4
  %9 = load i8, i8* %8, align 1, !range !18
  %10 = icmp ne i8 %9, 0
  br label %32

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 5
  %13 = load i8, i8* %12, align 2, !range !18
  %14 = icmp ne i8 %13, 0
  br label %32

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 6
  %17 = load i8, i8* %16, align 1, !range !18
  %18 = icmp ne i8 %17, 0
  br label %32

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 24
  %21 = load i32, i32* %20, align 8
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = lshr i64 %22, 6
  %26 = getelementptr inbounds i64, i64* %24, i64 %25
  %27 = and i64 %22, 63
  %28 = shl i64 1, %27
  %29 = load i64, i64* %26, align 8
  %30 = and i64 %28, %29
  %31 = icmp ne i64 %30, 0
  br label %32

32:                                               ; preds = %2, %19, %15, %11, %7, %3
  %33 = phi i1 [ %31, %19 ], [ %18, %15 ], [ %14, %11 ], [ %10, %7 ], [ %6, %3 ], [ false, %2 ]
  ret i1 %33
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2gl10GLES1State22isTexCoordArrayEnabledEj(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #8 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 8, i32 0
  %5 = load i64*, i64** %4, align 8
  %6 = lshr i64 %3, 6
  %7 = getelementptr inbounds i64, i64* %5, i64 %6
  %8 = and i64 %3, 63
  %9 = shl i64 1, %8
  %10 = load i64, i64* %7, align 8
  %11 = and i64 %10, %9
  %12 = icmp ne i64 %11, 0
  ret i1 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2gl10GLES1State22isTextureTargetEnabledEjNS_11TextureTypeE(%"class.gl::GLES1State"* nocapture readonly, i32, i8 zeroext) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 2, i32 0, i32 0
  %5 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %4, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 2, i32 0, i32 1
  %7 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %6, align 8
  %8 = icmp eq %"class.angle::BitSetT.479"* %5, %7
  br i1 %8, label %17, label %9

9:                                                ; preds = %3
  %10 = zext i32 %1 to i64
  %11 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %5, i64 %10, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i8 %2 to i32
  %14 = shl i32 1, %13
  %15 = and i32 %12, %14
  %16 = icmp ne i32 %15, 0
  br label %17

17:                                               ; preds = %3, %9
  %18 = phi i1 [ %16, %9 ], [ false, %3 ]
  ret i1 %18
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(20) %"struct.gl::LightModelParameters"* @_ZN2gl10GLES1State20lightModelParametersEv(%"class.gl::GLES1State"*) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 256
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 32
  ret %"struct.gl::LightModelParameters"* %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(20) %"struct.gl::LightModelParameters"* @_ZNK2gl10GLES1State20lightModelParametersEv(%"class.gl::GLES1State"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 32
  ret %"struct.gl::LightModelParameters"* %2
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(100) %"struct.gl::LightParameters"* @_ZN2gl10GLES1State15lightParametersEj(%"class.gl::GLES1State"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 256
  store i64 %5, i64* %3, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33, i32 0, i32 0
  %8 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %7, align 8
  %9 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %8, i64 %6
  ret %"struct.gl::LightParameters"* %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(100) %"struct.gl::LightParameters"* @_ZNK2gl10GLES1State15lightParametersEj(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 33, i32 0, i32 0
  %5 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %4, align 8
  %6 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %5, i64 %3
  ret %"struct.gl::LightParameters"* %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(68) %"struct.gl::MaterialParameters"* @_ZN2gl10GLES1State18materialParametersEv(%"class.gl::GLES1State"*) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 128
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31
  ret %"struct.gl::MaterialParameters"* %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(68) %"struct.gl::MaterialParameters"* @_ZNK2gl10GLES1State18materialParametersEv(%"class.gl::GLES1State"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 31
  ret %"struct.gl::MaterialParameters"* %2
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2gl10GLES1State22isColorMaterialEnabledEv(%"class.gl::GLES1State"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 18
  %3 = load i8, i8* %2, align 1, !range !18
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State13setShadeModelENS_12ShadingModelE(%"class.gl::GLES1State"* nocapture, i8 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 1024
  store i64 %5, i64* %3, align 8
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 35
  store i8 %1, i8* %6, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State12setClipPlaneEjPKf(%"class.gl::GLES1State"* nocapture, i32, float* nocapture readonly) local_unnamed_addr #7 align 2 {
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, 16384
  store i64 %6, i64* %4, align 8
  %7 = bitcast float* %2 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %1 to i64
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43, i32 0, i32 0
  %11 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %10, align 8
  %12 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %11, i64 %9, i32 1, i32 0, i32 0, i64 0
  %13 = bitcast float* %12 to i32*
  store i32 %8, i32* %13, align 4
  %14 = getelementptr inbounds float, float* %2, i64 1
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %10, align 8
  %18 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %17, i64 %9, i32 1, i32 0, i32 0, i64 1
  %19 = bitcast float* %18 to i32*
  store i32 %16, i32* %19, align 4
  %20 = getelementptr inbounds float, float* %2, i64 2
  %21 = bitcast float* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %10, align 8
  %24 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %23, i64 %9, i32 1, i32 0, i32 0, i64 2
  %25 = bitcast float* %24 to i32*
  store i32 %22, i32* %25, align 4
  %26 = getelementptr inbounds float, float* %2, i64 3
  %27 = bitcast float* %26 to i32*
  %28 = load i32, i32* %27, align 4
  %29 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %10, align 8
  %30 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %29, i64 %9, i32 1, i32 0, i32 0, i64 3
  %31 = bitcast float* %30 to i32*
  store i32 %28, i32* %31, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK2gl10GLES1State12getClipPlaneEjPf(%"class.gl::GLES1State"* nocapture readonly, i32, float* nocapture) local_unnamed_addr #7 align 2 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 43, i32 0, i32 0
  %6 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %5, align 8
  %7 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %6, i64 %4, i32 1, i32 0, i32 0, i64 0
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast float* %2 to i32*
  store i32 %9, i32* %10, align 4
  %11 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %5, align 8
  %12 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %11, i64 %4, i32 1, i32 0, i32 0, i64 1
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds float, float* %2, i64 1
  %16 = bitcast float* %15 to i32*
  store i32 %14, i32* %16, align 4
  %17 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %5, align 8
  %18 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %17, i64 %4, i32 1, i32 0, i32 0, i64 2
  %19 = bitcast float* %18 to i32*
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds float, float* %2, i64 2
  %22 = bitcast float* %21 to i32*
  store i32 %20, i32* %22, align 4
  %23 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %5, align 8
  %24 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %23, i64 %4, i32 1, i32 0, i32 0, i64 3
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds float, float* %2, i64 3
  %28 = bitcast float* %27 to i32*
  store i32 %26, i32* %28, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(32) %"struct.gl::FogParameters"* @_ZN2gl10GLES1State13fogParametersEv(%"class.gl::GLES1State"*) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 512
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34
  ret %"struct.gl::FogParameters"* %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(32) %"struct.gl::FogParameters"* @_ZNK2gl10GLES1State13fogParametersEv(%"class.gl::GLES1State"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 34
  ret %"struct.gl::FogParameters"* %2
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(44) %"struct.gl::TextureEnvironmentParameters"* @_ZN2gl10GLES1State18textureEnvironmentEj(%"class.gl::GLES1State"* nocapture, i32) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = or i64 %4, 64
  store i64 %5, i64* %3, align 8
  %6 = zext i32 %1 to i64
  %7 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 30, i32 0, i32 0
  %8 = load %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"** %7, align 8
  %9 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %8, i64 %6
  ret %"struct.gl::TextureEnvironmentParameters"* %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden dereferenceable(44) %"struct.gl::TextureEnvironmentParameters"* @_ZNK2gl10GLES1State18textureEnvironmentEj(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 30, i32 0, i32 0
  %5 = load %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"** %4, align 8
  %6 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %5, i64 %3
  ret %"struct.gl::TextureEnvironmentParameters"* %6
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(28) %"struct.gl::PointParameters"* @_ZN2gl10GLES1State15pointParametersEv(%"class.gl::GLES1State"*) local_unnamed_addr #7 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = or i64 %3, 2048
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37
  ret %"struct.gl::PointParameters"* %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden dereferenceable(28) %"struct.gl::PointParameters"* @_ZNK2gl10GLES1State15pointParametersEv(%"class.gl::GLES1State"* readnone) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 37
  ret %"struct.gl::PointParameters"* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2gl10GLES1State28getVertexArraysAttributeMaskEv(%"class.angle::BitSetT.166"* noalias nocapture sret, %"class.gl::GLES1State"*) local_unnamed_addr #2 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %"class.angle::BitSetT.166", %"class.angle::BitSetT.166"* %0, i64 0, i32 0
  store i64 0, i64* %4, align 8
  %5 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #14
  store i32 33554692, i32* %3, align 4
  %6 = getelementptr inbounds i32, i32* %3, i64 1
  %7 = bitcast i32* %6 to i8*
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %1, i64 0, i32 24
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %1, i64 0, i32 8, i32 0
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %1, i64 0, i32 6
  %11 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %1, i64 0, i32 5
  %12 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %1, i64 0, i32 4
  %13 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %1, i64 0, i32 3
  br label %63

14:                                               ; preds = %107
  %15 = call i32 @_ZN2gl13GLES1Renderer18TexCoordArrayIndexEj(i32 0) #14
  %16 = sext i32 %15 to i64
  %17 = load i64*, i64** %9, align 8
  %18 = load i64, i64* %17, align 8
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %19, 0
  %21 = shl i64 1, %16
  %22 = xor i64 %21, -1
  %23 = and i64 %108, %22
  %24 = and i64 %21, 65535
  %25 = or i64 %108, %24
  %26 = select i1 %20, i64 %23, i64 %25
  store i64 %26, i64* %4, align 8
  %27 = call i32 @_ZN2gl13GLES1Renderer18TexCoordArrayIndexEj(i32 1) #14
  %28 = sext i32 %27 to i64
  %29 = load i64*, i64** %9, align 8
  %30 = load i64, i64* %29, align 8
  %31 = and i64 %30, 2
  %32 = icmp eq i64 %31, 0
  %33 = shl i64 1, %28
  %34 = xor i64 %33, -1
  %35 = and i64 %26, %34
  %36 = and i64 %33, 65535
  %37 = or i64 %26, %36
  %38 = select i1 %32, i64 %35, i64 %37
  store i64 %38, i64* %4, align 8
  %39 = call i32 @_ZN2gl13GLES1Renderer18TexCoordArrayIndexEj(i32 2) #14
  %40 = sext i32 %39 to i64
  %41 = load i64*, i64** %9, align 8
  %42 = load i64, i64* %41, align 8
  %43 = and i64 %42, 4
  %44 = icmp eq i64 %43, 0
  %45 = shl i64 1, %40
  %46 = xor i64 %45, -1
  %47 = and i64 %38, %46
  %48 = and i64 %45, 65535
  %49 = or i64 %38, %48
  %50 = select i1 %44, i64 %47, i64 %49
  store i64 %50, i64* %4, align 8
  %51 = call i32 @_ZN2gl13GLES1Renderer18TexCoordArrayIndexEj(i32 3) #14
  %52 = sext i32 %51 to i64
  %53 = load i64*, i64** %9, align 8
  %54 = load i64, i64* %53, align 8
  %55 = and i64 %54, 8
  %56 = icmp eq i64 %55, 0
  %57 = shl i64 1, %52
  %58 = xor i64 %57, -1
  %59 = and i64 %50, %58
  %60 = and i64 %57, 65535
  %61 = or i64 %50, %60
  %62 = select i1 %56, i64 %59, i64 %61
  store i64 %62, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #14
  ret void

63:                                               ; preds = %111, %2
  %64 = phi i64 [ 0, %2 ], [ %108, %111 ]
  %65 = phi i8 [ 4, %2 ], [ %112, %111 ]
  %66 = phi i8* [ %5, %2 ], [ %109, %111 ]
  %67 = call i32 @_ZN2gl13GLES1Renderer16VertexArrayIndexENS_21ClientVertexArrayTypeERKNS_10GLES1StateE(i8 zeroext %65, %"class.gl::GLES1State"* dereferenceable(1456) %1) #14
  %68 = sext i32 %67 to i64
  switch i8 %65, label %69 [
    i8 4, label %95
    i8 1, label %71
    i8 0, label %75
    i8 2, label %79
    i8 3, label %83
  ]

69:                                               ; preds = %63
  %70 = shl i64 1, %68
  br label %103

71:                                               ; preds = %63
  %72 = load i8, i8* %12, align 1, !range !18
  %73 = icmp eq i8 %72, 0
  %74 = shl i64 1, %68
  br i1 %73, label %103, label %99

75:                                               ; preds = %63
  %76 = load i8, i8* %11, align 2, !range !18
  %77 = icmp eq i8 %76, 0
  %78 = shl i64 1, %68
  br i1 %77, label %103, label %99

79:                                               ; preds = %63
  %80 = load i8, i8* %10, align 1, !range !18
  %81 = icmp eq i8 %80, 0
  %82 = shl i64 1, %68
  br i1 %81, label %103, label %99

83:                                               ; preds = %63
  %84 = load i32, i32* %8, align 8
  %85 = zext i32 %84 to i64
  %86 = load i64*, i64** %9, align 8
  %87 = lshr i64 %85, 6
  %88 = getelementptr inbounds i64, i64* %86, i64 %87
  %89 = and i64 %85, 63
  %90 = shl i64 1, %89
  %91 = load i64, i64* %88, align 8
  %92 = and i64 %90, %91
  %93 = icmp eq i64 %92, 0
  %94 = shl i64 1, %68
  br i1 %93, label %103, label %99

95:                                               ; preds = %63
  %96 = load i8, i8* %13, align 8, !range !18
  %97 = icmp eq i8 %96, 0
  %98 = shl i64 1, %68
  br i1 %97, label %103, label %99

99:                                               ; preds = %95, %71, %75, %79, %83
  %100 = phi i64 [ %94, %83 ], [ %98, %95 ], [ %82, %79 ], [ %78, %75 ], [ %74, %71 ]
  %101 = and i64 %100, 65535
  %102 = or i64 %64, %101
  br label %107

103:                                              ; preds = %95, %71, %75, %79, %83, %69
  %104 = phi i64 [ %70, %69 ], [ %98, %95 ], [ %94, %83 ], [ %82, %79 ], [ %78, %75 ], [ %74, %71 ]
  %105 = xor i64 %104, -1
  %106 = and i64 %64, %105
  br label %107

107:                                              ; preds = %99, %103
  %108 = phi i64 [ %106, %103 ], [ %102, %99 ]
  store i64 %108, i64* %4, align 8
  %109 = getelementptr inbounds i8, i8* %66, i64 1
  %110 = icmp eq i8* %109, %7
  br i1 %110, label %14, label %111

111:                                              ; preds = %107
  %112 = load i8, i8* %109, align 1
  br label %63
}

declare i32 @_ZN2gl13GLES1Renderer16VertexArrayIndexENS_21ClientVertexArrayTypeERKNS_10GLES1StateE(i8 zeroext, %"class.gl::GLES1State"* dereferenceable(1456)) local_unnamed_addr #6

declare i32 @_ZN2gl13GLES1Renderer18TexCoordArrayIndexEj(i32) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZNK2gl10GLES1State23getActiveAttributesMaskEv(%"class.angle::BitSetT.166"* noalias nocapture sret, %"class.gl::GLES1State"* nocapture readnone) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.angle::BitSetT.166", %"class.angle::BitSetT.166"* %0, i64 0, i32 0
  store i64 255, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2gl10GLES1State7setHintEjj(%"class.gl::GLES1State"* nocapture, i32, i32) local_unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = or i64 %5, 32768
  store i64 %6, i64* %4, align 8
  %7 = tail call zeroext i8 @_ZN2gl10FromGLenumINS_11HintSettingEEET_j(i32 %2) #14
  switch i32 %1, label %16 [
    i32 3152, label %8
    i32 3153, label %10
    i32 3154, label %12
    i32 3156, label %14
  ]

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 46
  store i8 %7, i8* %9, align 2
  br label %16

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 45
  store i8 %7, i8* %11, align 1
  br label %16

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 44
  store i8 %7, i8* %13, align 8
  br label %16

14:                                               ; preds = %3
  %15 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 47
  store i8 %7, i8* %15, align 1
  br label %16

16:                                               ; preds = %3, %14, %12, %10, %8
  ret void
}

declare zeroext i8 @_ZN2gl10FromGLenumINS_11HintSettingEEET_j(i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2gl10GLES1State7getHintEj(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #2 align 2 {
  switch i32 %1, label %15 [
    i32 3152, label %3
    i32 3153, label %5
    i32 3154, label %7
    i32 3156, label %9
  ]

3:                                                ; preds = %2
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 46
  br label %11

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 45
  br label %11

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 44
  br label %11

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 47
  br label %11

11:                                               ; preds = %3, %5, %7, %9
  %12 = phi i8* [ %10, %9 ], [ %8, %7 ], [ %6, %5 ], [ %4, %3 ]
  %13 = load i8, i8* %12, align 1
  %14 = tail call i32 @_ZN2gl8ToGLenumENS_11HintSettingE(i8 zeroext %13) #14
  br label %15

15:                                               ; preds = %11, %2
  %16 = phi i32 [ 0, %2 ], [ %14, %11 ]
  ret i32 %16
}

declare i32 @_ZN2gl8ToGLenumENS_11HintSettingE(i8 zeroext) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl10GLES1State11setAllDirtyEv(%"class.gl::GLES1State"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  store i64 65535, i64* %2, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2gl10GLES1State10clearDirtyEv(%"class.gl::GLES1State"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2gl10GLES1State7isDirtyENS0_14DirtyGles1TypeE(%"class.gl::GLES1State"* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  %3 = zext i32 %1 to i64
  %4 = getelementptr inbounds %"class.gl::GLES1State", %"class.gl::GLES1State"* %0, i64 0, i32 1, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = shl i64 1, %3
  %7 = and i64 %5, %6
  %8 = icmp ne i64 %7, 0
  ret i1 %8
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIfNS_9allocatorIfEEE6assignIPfEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector.498"*, float*, float*) local_unnamed_addr #2 comdat align 2 {
  %4 = ptrtoint float* %2 to i64
  %5 = ptrtoint float* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector.498", %"class.std::__1::vector.498"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast float** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.498"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to float*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector.498", %"class.std::__1::vector.498"* %0, i64 0, i32 0, i32 1
  %19 = bitcast float** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds float, float* %1, i64 %22
  %25 = select i1 %23, float* %24, float* %2
  %26 = ptrtoint float* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #14
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast float* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #14
  %42 = inttoptr i64 %35 to float*
  %43 = getelementptr inbounds float, float* %42, i64 %39
  %44 = ptrtoint float* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds float, float* %16, i64 %28
  store float* %48, float** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector.498", %"class.std::__1::vector.498"* %0, i64 0, i32 0, i32 1
  %53 = bitcast float** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #15
  %55 = bitcast %"class.std::__1::vector.498"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #14
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector.498"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #16
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector.498"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #16
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #15
  %75 = bitcast i8* %74 to float*
  %76 = getelementptr inbounds %"class.std::__1::vector.498", %"class.std::__1::vector.498"* %0, i64 0, i32 0, i32 1
  %77 = bitcast float** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector.498"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds float, float* %75, i64 %72
  store float* %79, float** %8, align 8
  %80 = bitcast float** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast float* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #14
  %86 = getelementptr inbounds float, float* %75, i64 %84
  %87 = ptrtoint float* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15arrayIN5angle4Mat4ELm16EEC2Ev(%"struct.std::__1::array.497"*) unnamed_addr #13 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 0
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %2) #14
  %3 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 1
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %3) #14
  %4 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 2
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %4) #14
  %5 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 3
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %5) #14
  %6 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 4
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %6) #14
  %7 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 5
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %7) #14
  %8 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 6
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %8) #14
  %9 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 7
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %9) #14
  %10 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 8
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %10) #14
  %11 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 9
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %11) #14
  %12 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 10
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %12) #14
  %13 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 11
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %13) #14
  %14 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 12
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %14) #14
  %15 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 13
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %15) #14
  %16 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 14
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %16) #14
  %17 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 15
  tail call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* %17) #14
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev(%"struct.std::__1::array.497"*) unnamed_addr #13 comdat align 2 {
  %2 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 15, i32 0, i32 0, i32 0, i32 0
  %3 = load float*, float** %2, align 8
  %4 = icmp eq float* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint float* %3 to i64
  %7 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 15, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast float** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast float* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #15
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 14, i32 0, i32 0, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = icmp eq float* %12, null
  br i1 %13, label %19, label %14

14:                                               ; preds = %10
  %15 = ptrtoint float* %12 to i64
  %16 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 14, i32 0, i32 0, i32 0, i32 1
  %17 = bitcast float** %16 to i64*
  store i64 %15, i64* %17, align 8
  %18 = bitcast float* %12 to i8*
  tail call void @_ZdlPv(i8* %18) #15
  br label %19

19:                                               ; preds = %14, %10
  %20 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 13, i32 0, i32 0, i32 0, i32 0
  %21 = load float*, float** %20, align 8
  %22 = icmp eq float* %21, null
  br i1 %22, label %28, label %23

23:                                               ; preds = %19
  %24 = ptrtoint float* %21 to i64
  %25 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 13, i32 0, i32 0, i32 0, i32 1
  %26 = bitcast float** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = bitcast float* %21 to i8*
  tail call void @_ZdlPv(i8* %27) #15
  br label %28

28:                                               ; preds = %23, %19
  %29 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 12, i32 0, i32 0, i32 0, i32 0
  %30 = load float*, float** %29, align 8
  %31 = icmp eq float* %30, null
  br i1 %31, label %37, label %32

32:                                               ; preds = %28
  %33 = ptrtoint float* %30 to i64
  %34 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 12, i32 0, i32 0, i32 0, i32 1
  %35 = bitcast float** %34 to i64*
  store i64 %33, i64* %35, align 8
  %36 = bitcast float* %30 to i8*
  tail call void @_ZdlPv(i8* %36) #15
  br label %37

37:                                               ; preds = %32, %28
  %38 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 11, i32 0, i32 0, i32 0, i32 0
  %39 = load float*, float** %38, align 8
  %40 = icmp eq float* %39, null
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = ptrtoint float* %39 to i64
  %43 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 11, i32 0, i32 0, i32 0, i32 1
  %44 = bitcast float** %43 to i64*
  store i64 %42, i64* %44, align 8
  %45 = bitcast float* %39 to i8*
  tail call void @_ZdlPv(i8* %45) #15
  br label %46

46:                                               ; preds = %41, %37
  %47 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 10, i32 0, i32 0, i32 0, i32 0
  %48 = load float*, float** %47, align 8
  %49 = icmp eq float* %48, null
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = ptrtoint float* %48 to i64
  %52 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 10, i32 0, i32 0, i32 0, i32 1
  %53 = bitcast float** %52 to i64*
  store i64 %51, i64* %53, align 8
  %54 = bitcast float* %48 to i8*
  tail call void @_ZdlPv(i8* %54) #15
  br label %55

55:                                               ; preds = %50, %46
  %56 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 9, i32 0, i32 0, i32 0, i32 0
  %57 = load float*, float** %56, align 8
  %58 = icmp eq float* %57, null
  br i1 %58, label %64, label %59

59:                                               ; preds = %55
  %60 = ptrtoint float* %57 to i64
  %61 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 9, i32 0, i32 0, i32 0, i32 1
  %62 = bitcast float** %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = bitcast float* %57 to i8*
  tail call void @_ZdlPv(i8* %63) #15
  br label %64

64:                                               ; preds = %59, %55
  %65 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 8, i32 0, i32 0, i32 0, i32 0
  %66 = load float*, float** %65, align 8
  %67 = icmp eq float* %66, null
  br i1 %67, label %73, label %68

68:                                               ; preds = %64
  %69 = ptrtoint float* %66 to i64
  %70 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 8, i32 0, i32 0, i32 0, i32 1
  %71 = bitcast float** %70 to i64*
  store i64 %69, i64* %71, align 8
  %72 = bitcast float* %66 to i8*
  tail call void @_ZdlPv(i8* %72) #15
  br label %73

73:                                               ; preds = %68, %64
  %74 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 7, i32 0, i32 0, i32 0, i32 0
  %75 = load float*, float** %74, align 8
  %76 = icmp eq float* %75, null
  br i1 %76, label %82, label %77

77:                                               ; preds = %73
  %78 = ptrtoint float* %75 to i64
  %79 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 7, i32 0, i32 0, i32 0, i32 1
  %80 = bitcast float** %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = bitcast float* %75 to i8*
  tail call void @_ZdlPv(i8* %81) #15
  br label %82

82:                                               ; preds = %77, %73
  %83 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 6, i32 0, i32 0, i32 0, i32 0
  %84 = load float*, float** %83, align 8
  %85 = icmp eq float* %84, null
  br i1 %85, label %91, label %86

86:                                               ; preds = %82
  %87 = ptrtoint float* %84 to i64
  %88 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 6, i32 0, i32 0, i32 0, i32 1
  %89 = bitcast float** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = bitcast float* %84 to i8*
  tail call void @_ZdlPv(i8* %90) #15
  br label %91

91:                                               ; preds = %86, %82
  %92 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 5, i32 0, i32 0, i32 0, i32 0
  %93 = load float*, float** %92, align 8
  %94 = icmp eq float* %93, null
  br i1 %94, label %100, label %95

95:                                               ; preds = %91
  %96 = ptrtoint float* %93 to i64
  %97 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 5, i32 0, i32 0, i32 0, i32 1
  %98 = bitcast float** %97 to i64*
  store i64 %96, i64* %98, align 8
  %99 = bitcast float* %93 to i8*
  tail call void @_ZdlPv(i8* %99) #15
  br label %100

100:                                              ; preds = %95, %91
  %101 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 4, i32 0, i32 0, i32 0, i32 0
  %102 = load float*, float** %101, align 8
  %103 = icmp eq float* %102, null
  br i1 %103, label %109, label %104

104:                                              ; preds = %100
  %105 = ptrtoint float* %102 to i64
  %106 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 4, i32 0, i32 0, i32 0, i32 1
  %107 = bitcast float** %106 to i64*
  store i64 %105, i64* %107, align 8
  %108 = bitcast float* %102 to i8*
  tail call void @_ZdlPv(i8* %108) #15
  br label %109

109:                                              ; preds = %104, %100
  %110 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 3, i32 0, i32 0, i32 0, i32 0
  %111 = load float*, float** %110, align 8
  %112 = icmp eq float* %111, null
  br i1 %112, label %118, label %113

113:                                              ; preds = %109
  %114 = ptrtoint float* %111 to i64
  %115 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 3, i32 0, i32 0, i32 0, i32 1
  %116 = bitcast float** %115 to i64*
  store i64 %114, i64* %116, align 8
  %117 = bitcast float* %111 to i8*
  tail call void @_ZdlPv(i8* %117) #15
  br label %118

118:                                              ; preds = %113, %109
  %119 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 2, i32 0, i32 0, i32 0, i32 0
  %120 = load float*, float** %119, align 8
  %121 = icmp eq float* %120, null
  br i1 %121, label %127, label %122

122:                                              ; preds = %118
  %123 = ptrtoint float* %120 to i64
  %124 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 2, i32 0, i32 0, i32 0, i32 1
  %125 = bitcast float** %124 to i64*
  store i64 %123, i64* %125, align 8
  %126 = bitcast float* %120 to i8*
  tail call void @_ZdlPv(i8* %126) #15
  br label %127

127:                                              ; preds = %122, %118
  %128 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 1, i32 0, i32 0, i32 0, i32 0
  %129 = load float*, float** %128, align 8
  %130 = icmp eq float* %129, null
  br i1 %130, label %136, label %131

131:                                              ; preds = %127
  %132 = ptrtoint float* %129 to i64
  %133 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 1, i32 0, i32 0, i32 0, i32 1
  %134 = bitcast float** %133 to i64*
  store i64 %132, i64* %134, align 8
  %135 = bitcast float* %129 to i8*
  tail call void @_ZdlPv(i8* %135) #15
  br label %136

136:                                              ; preds = %131, %127
  %137 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 0, i32 0, i32 0, i32 0, i32 0
  %138 = load float*, float** %137, align 8
  %139 = icmp eq float* %138, null
  br i1 %139, label %145, label %140

140:                                              ; preds = %136
  %141 = ptrtoint float* %138 to i64
  %142 = getelementptr inbounds %"struct.std::__1::array.497", %"struct.std::__1::array.497"* %0, i64 0, i32 0, i64 0, i32 0, i32 0, i32 0, i32 1
  %143 = bitcast float** %142 to i64*
  store i64 %141, i64* %143, align 8
  %144 = bitcast float* %138 to i8*
  tail call void @_ZdlPv(i8* %144) #15
  br label %145

145:                                              ; preds = %140, %136
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm(%"class.angle::FixedVector"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.angle::Mat4", align 16
  %4 = alloca %"class.angle::Mat4", align 16
  %5 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, %1
  br i1 %7, label %8, label %15

8:                                                ; preds = %2
  %9 = bitcast %"class.angle::Mat4"* %3 to i8*
  %10 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %3, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %11 = bitcast float** %10 to i64*
  %12 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %3, i64 0, i32 0, i32 1
  %13 = bitcast i32* %12 to i64*
  %14 = bitcast %"class.angle::Mat4"* %3 to <2 x i64>*
  br label %25

15:                                               ; preds = %39, %2
  %16 = phi i64 [ %6, %2 ], [ %48, %39 ]
  %17 = icmp ult i64 %16, %1
  br i1 %17, label %18, label %74

18:                                               ; preds = %15
  %19 = bitcast %"class.angle::Mat4"* %4 to i8*
  %20 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = bitcast float** %20 to i64*
  %22 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %4, i64 0, i32 0, i32 1
  %23 = bitcast i32* %22 to i64*
  %24 = bitcast %"class.angle::Mat4"* %4 to <2 x i64>*
  br label %50

25:                                               ; preds = %8, %39
  %26 = phi i64 [ %6, %8 ], [ %48, %39 ]
  %27 = add i64 %26, -1
  store i64 %27, i64* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #14
  call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* nonnull %3) #14
  %28 = load i64, i64* %5, align 8
  %29 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %28
  %30 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %29, i64 0, i32 0, i32 0, i32 0, i32 0
  %31 = load float*, float** %30, align 8
  %32 = icmp eq float* %31, null
  br i1 %32, label %39, label %33

33:                                               ; preds = %25
  %34 = ptrtoint float* %31 to i64
  %35 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %28, i32 0, i32 0, i32 0, i32 1
  %36 = bitcast float** %35 to i64*
  store i64 %34, i64* %36, align 8
  %37 = bitcast float* %31 to i8*
  call void @_ZdlPv(i8* %37) #15
  %38 = bitcast %"class.angle::Mat4"* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %38, i8 0, i64 24, i1 false) #14
  br label %39

39:                                               ; preds = %25, %33
  %40 = load <2 x i64>, <2 x i64>* %14, align 16
  %41 = bitcast %"class.angle::Mat4"* %29 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %41, align 8
  %42 = load i64, i64* %11, align 16
  %43 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %28, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %44 = bitcast float** %43 to i64*
  store i64 %42, i64* %44, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 0, i64 24, i1 false) #14
  %45 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %28, i32 0, i32 1
  %46 = bitcast i32* %45 to i64*
  %47 = load i64, i64* %13, align 8
  store i64 %47, i64* %46, align 8
  %48 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #14
  %49 = icmp ugt i64 %48, %1
  br i1 %49, label %25, label %15

50:                                               ; preds = %18, %62
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #14
  call void @_ZN5angle4Mat4C1Ev(%"class.angle::Mat4"* nonnull %4) #14
  %51 = load i64, i64* %5, align 8
  %52 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %51
  %53 = getelementptr inbounds %"class.angle::Mat4", %"class.angle::Mat4"* %52, i64 0, i32 0, i32 0, i32 0, i32 0
  %54 = load float*, float** %53, align 8
  %55 = icmp eq float* %54, null
  br i1 %55, label %62, label %56

56:                                               ; preds = %50
  %57 = ptrtoint float* %54 to i64
  %58 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %51, i32 0, i32 0, i32 0, i32 1
  %59 = bitcast float** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast float* %54 to i8*
  call void @_ZdlPv(i8* %60) #15
  %61 = bitcast %"class.angle::Mat4"* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %61, i8 0, i64 24, i1 false) #14
  br label %62

62:                                               ; preds = %50, %56
  %63 = load <2 x i64>, <2 x i64>* %24, align 16
  %64 = bitcast %"class.angle::Mat4"* %52 to <2 x i64>*
  store <2 x i64> %63, <2 x i64>* %64, align 8
  %65 = load i64, i64* %21, align 16
  %66 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %51, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %67 = bitcast float** %66 to i64*
  store i64 %65, i64* %67, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 0, i64 24, i1 false) #14
  %68 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %0, i64 0, i32 0, i32 0, i64 %51, i32 0, i32 1
  %69 = bitcast i32* %68 to i64*
  %70 = load i64, i64* %23, align 8
  store i64 %70, i64* %69, align 8
  %71 = load i64, i64* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #14
  %72 = add i64 %71, 1
  store i64 %72, i64* %5, align 8
  %73 = icmp ult i64 %72, %1
  br i1 %73, label %50, label %74

74:                                               ; preds = %62, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN5angle7BitSetTILm11EjN2gl11TextureTypeEEENS_9allocatorIS5_EEE8__appendEm(%"class.std::__1::vector.477"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.477", %"class.std::__1::vector.477"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.angle::BitSetT.479"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.477", %"class.std::__1::vector.477"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.angle::BitSetT.479"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.angle::BitSetT.479"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %13, i64 %18, i32 0
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #14
  %26 = ptrtoint %"class.angle::BitSetT.479"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %232

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.477"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.477"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #16
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #16
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to %"class.angle::BitSetT.479"*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"class.angle::BitSetT.479"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %57, i64 %33
  %59 = bitcast %"class.angle::BitSetT.479"* %58 to i8*
  %60 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %57, i64 %56
  %61 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %58, i64 %1
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %62, i1 false) #14
  %63 = ptrtoint %"class.angle::BitSetT.479"* %60 to i64
  %64 = ptrtoint %"class.angle::BitSetT.479"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.477", %"class.std::__1::vector.477"* %0, i64 0, i32 0, i32 0
  %66 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %65, align 8
  %67 = ptrtoint %"class.angle::BitSetT.479"* %66 to i64
  %68 = load %"class.angle::BitSetT.479"*, %"class.angle::BitSetT.479"** %6, align 8
  %69 = icmp eq %"class.angle::BitSetT.479"* %68, %66
  br i1 %69, label %225, label %70

70:                                               ; preds = %55
  %71 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 -1, i32 0
  %72 = ptrtoint i32* %71 to i64
  %73 = sub i64 %72, %67
  %74 = lshr i64 %73, 2
  %75 = add nuw nsw i64 %74, 1
  %76 = icmp ult i64 %75, 8
  br i1 %76, label %166, label %77

77:                                               ; preds = %70
  %78 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 -1, i32 0
  %79 = ptrtoint i32* %78 to i64
  %80 = sub i64 %79, %67
  %81 = lshr i64 %80, 2
  %82 = xor i64 %81, -1
  %83 = add nsw i64 %33, %82
  %84 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %57, i64 %83
  %85 = xor i64 %81, -1
  %86 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 %85
  %87 = icmp ult %"class.angle::BitSetT.479"* %84, %68
  %88 = icmp ult %"class.angle::BitSetT.479"* %86, %58
  %89 = and i1 %87, %88
  br i1 %89, label %166, label %90

90:                                               ; preds = %77
  %91 = and i64 %75, 9223372036854775800
  %92 = sub nsw i64 0, %91
  %93 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %58, i64 %92
  %94 = sub nsw i64 0, %91
  %95 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 %94
  %96 = add nsw i64 %91, -8
  %97 = lshr exact i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 1
  %100 = icmp eq i64 %96, 0
  br i1 %100, label %145, label %101

101:                                              ; preds = %90
  %102 = sub nuw nsw i64 %98, %99
  %103 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 -1
  %104 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 -1
  br label %105

105:                                              ; preds = %105, %101
  %106 = phi i64 [ 0, %101 ], [ %140, %105 ]
  %107 = phi i64 [ %102, %101 ], [ %141, %105 ]
  %108 = sub i64 0, %106
  %109 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %58, i64 %108
  %110 = sub i64 0, %106
  %111 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %103, i64 %110
  %112 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %109, i64 -1, i32 0
  %113 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %111, i64 0, i32 0
  %114 = getelementptr inbounds i32, i32* %113, i64 -3
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !19
  %117 = getelementptr inbounds i32, i32* %113, i64 -7
  %118 = bitcast i32* %117 to <4 x i32>*
  %119 = load <4 x i32>, <4 x i32>* %118, align 4, !alias.scope !19
  %120 = getelementptr inbounds i32, i32* %112, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %121, align 4, !alias.scope !22, !noalias !19
  %122 = getelementptr inbounds i32, i32* %112, i64 -7
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> %119, <4 x i32>* %123, align 4, !alias.scope !22, !noalias !19
  %124 = sub nuw nsw i64 -8, %106
  %125 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %58, i64 %124
  %126 = sub nuw nsw i64 -8, %106
  %127 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %104, i64 %126
  %128 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %125, i64 -1, i32 0
  %129 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %127, i64 0, i32 0
  %130 = getelementptr inbounds i32, i32* %129, i64 -3
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !19
  %133 = getelementptr inbounds i32, i32* %129, i64 -7
  %134 = bitcast i32* %133 to <4 x i32>*
  %135 = load <4 x i32>, <4 x i32>* %134, align 4, !alias.scope !19
  %136 = getelementptr inbounds i32, i32* %128, i64 -3
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %137, align 4, !alias.scope !22, !noalias !19
  %138 = getelementptr inbounds i32, i32* %128, i64 -7
  %139 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %135, <4 x i32>* %139, align 4, !alias.scope !22, !noalias !19
  %140 = add i64 %106, 16
  %141 = add i64 %107, -2
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %143, label %105, !llvm.loop !24

143:                                              ; preds = %105
  %144 = sub nuw nsw i64 -16, %106
  br label %145

145:                                              ; preds = %143, %90
  %146 = phi i64 [ 0, %90 ], [ %144, %143 ]
  %147 = icmp eq i64 %99, 0
  br i1 %147, label %164, label %148

148:                                              ; preds = %145
  %149 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %58, i64 %146
  %150 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %68, i64 -1
  %151 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %150, i64 %146
  %152 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %149, i64 -1, i32 0
  %153 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %151, i64 0, i32 0
  %154 = getelementptr inbounds i32, i32* %153, i64 -3
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !19
  %157 = getelementptr inbounds i32, i32* %153, i64 -7
  %158 = bitcast i32* %157 to <4 x i32>*
  %159 = load <4 x i32>, <4 x i32>* %158, align 4, !alias.scope !19
  %160 = getelementptr inbounds i32, i32* %152, i64 -3
  %161 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %161, align 4, !alias.scope !22, !noalias !19
  %162 = getelementptr inbounds i32, i32* %152, i64 -7
  %163 = bitcast i32* %162 to <4 x i32>*
  store <4 x i32> %159, <4 x i32>* %163, align 4, !alias.scope !22, !noalias !19
  br label %164

164:                                              ; preds = %145, %148
  %165 = icmp eq i64 %75, %91
  br i1 %165, label %222, label %166

166:                                              ; preds = %164, %77, %70
  %167 = phi %"class.angle::BitSetT.479"* [ %58, %77 ], [ %58, %70 ], [ %93, %164 ]
  %168 = phi %"class.angle::BitSetT.479"* [ %68, %77 ], [ %68, %70 ], [ %95, %164 ]
  %169 = getelementptr %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %168, i64 -1, i32 0
  %170 = ptrtoint i32* %169 to i64
  %171 = sub i64 %170, %67
  %172 = lshr i64 %171, 2
  %173 = add nuw nsw i64 %172, 1
  %174 = and i64 %173, 7
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %187, label %176

176:                                              ; preds = %166, %176
  %177 = phi %"class.angle::BitSetT.479"* [ %184, %176 ], [ %167, %166 ]
  %178 = phi %"class.angle::BitSetT.479"* [ %180, %176 ], [ %168, %166 ]
  %179 = phi i64 [ %185, %176 ], [ %174, %166 ]
  %180 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %178, i64 -1
  %181 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %177, i64 -1, i32 0
  %182 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %180, i64 0, i32 0
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %181, align 4
  %184 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %177, i64 -1
  %185 = add i64 %179, -1
  %186 = icmp eq i64 %185, 0
  br i1 %186, label %187, label %176, !llvm.loop !26

187:                                              ; preds = %176, %166
  %188 = phi %"class.angle::BitSetT.479"* [ undef, %166 ], [ %184, %176 ]
  %189 = phi %"class.angle::BitSetT.479"* [ %167, %166 ], [ %184, %176 ]
  %190 = phi %"class.angle::BitSetT.479"* [ %168, %166 ], [ %180, %176 ]
  %191 = icmp ult i64 %171, 28
  br i1 %191, label %222, label %192

192:                                              ; preds = %187, %192
  %193 = phi %"class.angle::BitSetT.479"* [ %220, %192 ], [ %189, %187 ]
  %194 = phi %"class.angle::BitSetT.479"* [ %216, %192 ], [ %190, %187 ]
  %195 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -1, i32 0
  %196 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -1, i32 0
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %195, align 4
  %198 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -2, i32 0
  %199 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -2, i32 0
  %200 = load i32, i32* %199, align 4
  store i32 %200, i32* %198, align 4
  %201 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -3, i32 0
  %202 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -3, i32 0
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %201, align 4
  %204 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -4, i32 0
  %205 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -4, i32 0
  %206 = load i32, i32* %205, align 4
  store i32 %206, i32* %204, align 4
  %207 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -5, i32 0
  %208 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -5, i32 0
  %209 = load i32, i32* %208, align 4
  store i32 %209, i32* %207, align 4
  %210 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -6, i32 0
  %211 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -6, i32 0
  %212 = load i32, i32* %211, align 4
  store i32 %212, i32* %210, align 4
  %213 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -7, i32 0
  %214 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -7, i32 0
  %215 = load i32, i32* %214, align 4
  store i32 %215, i32* %213, align 4
  %216 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %194, i64 -8
  %217 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -8, i32 0
  %218 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %216, i64 0, i32 0
  %219 = load i32, i32* %218, align 4
  store i32 %219, i32* %217, align 4
  %220 = getelementptr inbounds %"class.angle::BitSetT.479", %"class.angle::BitSetT.479"* %193, i64 -8
  %221 = icmp eq %"class.angle::BitSetT.479"* %216, %66
  br i1 %221, label %222, label %192, !llvm.loop !28

222:                                              ; preds = %187, %192, %164
  %223 = phi %"class.angle::BitSetT.479"* [ %93, %164 ], [ %188, %187 ], [ %220, %192 ]
  %224 = load i64, i64* %30, align 8
  br label %225

225:                                              ; preds = %55, %222
  %226 = phi %"class.angle::BitSetT.479"* [ %223, %222 ], [ %58, %55 ]
  %227 = phi i64 [ %224, %222 ], [ %67, %55 ]
  %228 = ptrtoint %"class.angle::BitSetT.479"* %226 to i64
  store i64 %228, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %229 = icmp eq i64 %227, 0
  br i1 %229, label %232, label %230

230:                                              ; preds = %225
  %231 = inttoptr i64 %227 to i8*
  tail call void @_ZdlPv(i8* %231) #15
  br label %232

232:                                              ; preds = %230, %225, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.485"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.485", align 16
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 6
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %49

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector.485"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #14
  %12 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %3, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 24, i1 false) #14
  %14 = icmp slt i64 %1, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.485"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #16
  unreachable

17:                                               ; preds = %10
  %18 = add nsw i64 %1, -1
  %19 = lshr i64 %18, 6
  %20 = add nuw nsw i64 %19, 1
  %21 = shl nuw nsw i64 %20, 3
  %22 = tail call i8* @_Znwm(i64 %21) #15
  %23 = bitcast %"class.std::__1::vector.485"* %3 to i8**
  store i8* %22, i8** %23, align 16
  store i64 0, i64* %12, align 8
  store i64 %20, i64* %13, align 16
  %24 = bitcast %"class.std::__1::vector.485"* %0 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !29
  %26 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %25, i64* %26, align 8, !alias.scope !29
  %27 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 0, i32* %27, align 8, !alias.scope !29
  %28 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 1
  %29 = load i64, i64* %28, align 8, !noalias !34
  %30 = inttoptr i64 %25 to i64*
  %31 = lshr i64 %29, 6
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = trunc i64 %29 to i32
  %34 = and i32 %33, 63
  %35 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 0
  store i64* %32, i64** %35, align 8, !alias.scope !37
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %34, i32* %36, align 8, !alias.scope !37
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.485"* nonnull %3, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5)
  %37 = load i64, i64* %24, align 8
  %38 = bitcast %"class.std::__1::vector.485"* %3 to i64*
  %39 = bitcast %"class.std::__1::vector.485"* %3 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  store i64 %37, i64* %38, align 16
  %41 = load i64, i64* %28, align 8
  %42 = bitcast %"class.std::__1::vector.485"* %0 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 8
  store i64 %41, i64* %12, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load i64, i64* %13, align 16
  store i64 %44, i64* %6, align 8
  store i64 %43, i64* %13, align 16
  %45 = icmp eq i64 %37, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %17
  %47 = inttoptr i64 %37 to i8*
  call void @_ZdlPv(i8* %47) #15
  br label %48

48:                                               ; preds = %17, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #14
  br label %49

49:                                               ; preds = %48, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.485"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #2 comdat align 2 {
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = alloca %"class.std::__1::__bit_iterator", align 8
  %7 = alloca %"class.std::__1::__bit_iterator", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = sub i64 %15, %11
  %19 = shl i64 %18, 3
  %20 = zext i32 %17 to i64
  %21 = zext i32 %13 to i64
  %22 = sub i64 %9, %21
  %23 = add i64 %22, %20
  %24 = add i64 %23, %19
  store i64 %24, i64* %8, align 8
  %25 = icmp eq i64 %9, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %3
  %27 = add i64 %9, -1
  %28 = add i64 %24, -1
  %29 = xor i64 %28, %27
  %30 = icmp ugt i64 %29, 63
  br i1 %30, label %31, label %39

31:                                               ; preds = %26, %3
  %32 = icmp ult i64 %24, 65
  %33 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = add i64 %24, -1
  %36 = lshr i64 %35, 6
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = select i1 %32, i64* %34, i64* %37
  store i64 0, i64* %38, align 8
  br label %39

39:                                               ; preds = %31, %26
  %40 = load i64, i64* %10, align 8
  %41 = load i32, i32* %12, align 8
  %42 = load i64, i64* %14, align 8
  %43 = load i32, i32* %16, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.485", %"class.std::__1::vector.485"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8, !noalias !40
  %46 = lshr i64 %9, 6
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = trunc i64 %9 to i32
  %49 = and i32 %48, 63
  %50 = ptrtoint i64* %47 to i64
  %51 = bitcast %"class.std::__1::__bit_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #14
  %52 = bitcast %"class.std::__1::__bit_iterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %53 = bitcast %"class.std::__1::__bit_iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53)
  %54 = bitcast %"class.std::__1::__bit_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  %55 = icmp eq i32 %41, %49
  br i1 %55, label %56, label %123

56:                                               ; preds = %39
  %57 = sub i64 %42, %40
  %58 = shl i64 %57, 3
  %59 = zext i32 %43 to i64
  %60 = zext i32 %41 to i64
  %61 = sub nsw i64 %59, %60
  %62 = add i64 %61, %58
  %63 = icmp sgt i64 %62, 0
  %64 = inttoptr i64 %40 to i64*
  br i1 %63, label %65, label %118

65:                                               ; preds = %56
  %66 = inttoptr i64 %40 to i8*
  %67 = icmp eq i32 %41, 0
  br i1 %67, label %92, label %68

68:                                               ; preds = %65
  %69 = sub i32 64, %41
  %70 = zext i32 %69 to i64
  %71 = icmp slt i64 %62, %70
  %72 = select i1 %71, i64 %62, i64 %70
  %73 = sub nsw i64 %62, %72
  %74 = shl i64 -1, %60
  %75 = sub nsw i64 %70, %72
  %76 = lshr i64 -1, %75
  %77 = and i64 %76, %74
  %78 = load i64, i64* %64, align 8, !noalias !43
  %79 = and i64 %78, %77
  %80 = xor i64 %77, -1
  %81 = load i64, i64* %47, align 8, !noalias !43
  %82 = and i64 %81, %80
  %83 = or i64 %82, %79
  store i64 %83, i64* %47, align 8, !noalias !43
  %84 = add nuw nsw i64 %72, %60
  %85 = sdiv i64 %84, 64
  %86 = getelementptr inbounds i64, i64* %47, i64 %85
  %87 = ptrtoint i64* %86 to i64
  %88 = srem i64 %84, 64
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds i64, i64* %64, i64 1
  %91 = bitcast i64* %90 to i8*
  br label %92

92:                                               ; preds = %68, %65
  %93 = phi i64* [ %64, %65 ], [ %90, %68 ]
  %94 = phi i32 [ 0, %65 ], [ %89, %68 ]
  %95 = phi i64 [ %50, %65 ], [ %87, %68 ]
  %96 = phi i8* [ %66, %65 ], [ %91, %68 ]
  %97 = phi i64 [ %62, %65 ], [ %73, %68 ]
  %98 = sdiv i64 %97, 64
  %99 = inttoptr i64 %95 to i8*
  %100 = shl nsw i64 %98, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %96, i64 %100, i1 false) #14, !noalias !43
  %101 = shl nsw i64 %98, 6
  %102 = sub i64 %97, %101
  %103 = inttoptr i64 %95 to i64*
  %104 = getelementptr inbounds i64, i64* %103, i64 %98
  %105 = ptrtoint i64* %104 to i64
  %106 = icmp sgt i64 %102, 0
  br i1 %106, label %107, label %118

107:                                              ; preds = %92
  %108 = getelementptr inbounds i64, i64* %93, i64 %98
  %109 = sub nsw i64 64, %102
  %110 = lshr i64 -1, %109
  %111 = load i64, i64* %108, align 8, !noalias !43
  %112 = and i64 %111, %110
  %113 = xor i64 %110, -1
  %114 = load i64, i64* %104, align 8, !noalias !43
  %115 = and i64 %114, %113
  %116 = or i64 %115, %112
  store i64 %116, i64* %104, align 8, !noalias !43
  %117 = trunc i64 %102 to i32
  br label %118

118:                                              ; preds = %107, %92, %56
  %119 = phi i32 [ %117, %107 ], [ %94, %92 ], [ %41, %56 ]
  %120 = phi i64 [ %105, %107 ], [ %105, %92 ], [ %50, %56 ]
  %121 = bitcast %"class.std::__1::__bit_iterator"* %7 to i64*
  store i64 %120, i64* %121, align 8, !alias.scope !46
  %122 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %7, i64 0, i32 1
  store i32 %119, i32* %122, align 8, !alias.scope !46
  br label %130

123:                                              ; preds = %39
  %124 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %40, i64* %124, align 8, !noalias !49
  %125 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 %41, i32* %125, align 8, !noalias !49
  %126 = bitcast %"class.std::__1::__bit_iterator"* %5 to i64*
  store i64 %42, i64* %126, align 8, !noalias !49
  %127 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %43, i32* %127, align 8, !noalias !49
  %128 = bitcast %"class.std::__1::__bit_iterator"* %6 to i64*
  store i64 %50, i64* %128, align 8, !noalias !49
  %129 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %6, i64 0, i32 1
  store i32 %49, i32* %129, align 8, !noalias !49
  call void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* nonnull sret %7, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5, %"class.std::__1::__bit_iterator"* nonnull %6) #14
  br label %130

130:                                              ; preds = %118, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* noalias sret, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #2 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2gl13TextureCoordFENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.490"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.490", %"class.std::__1::vector.490"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.gl::TextureCoordF"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.490", %"class.std::__1::vector.490"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.gl::TextureCoordF"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 4
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.gl::TextureCoordF"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %13, i64 %18, i32 0
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 16
  %25 = and i64 %24, -16
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #14
  %26 = ptrtoint %"struct.gl::TextureCoordF"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.490"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 4
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 1152921504606846975
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.490"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #16
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 4
  %41 = icmp ult i64 %40, 576460752303423487
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 3
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 1152921504606846975
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #16
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 1152921504606846975, %38 ]
  %52 = shl i64 %51, 4
  %53 = tail call i8* @_Znwm(i64 %52) #15
  %54 = bitcast i8* %53 to %"struct.gl::TextureCoordF"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"struct.gl::TextureCoordF"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %57, i64 %33
  %59 = bitcast %"struct.gl::TextureCoordF"* %58 to i8*
  %60 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %57, i64 %56
  %61 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %58, i64 %1
  %62 = shl nsw i64 %1, 4
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"struct.gl::TextureCoordF"* %60 to i64
  %64 = ptrtoint %"struct.gl::TextureCoordF"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.490", %"class.std::__1::vector.490"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"struct.gl::TextureCoordF"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 4
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"struct.gl::TextureCoordF", %"struct.gl::TextureCoordF"* %58, i64 %71
  %73 = ptrtoint %"struct.gl::TextureCoordF"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"struct.gl::TextureCoordF"* %72 to i8*
  %77 = bitcast %"struct.gl::TextureCoordF"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #14
  %78 = load %"struct.gl::TextureCoordF"*, %"struct.gl::TextureCoordF"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"struct.gl::TextureCoordF"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"struct.gl::TextureCoordF"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.gl::TextureCoordF"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #15
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2gl28TextureEnvironmentParametersENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.512"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.512", %"class.std::__1::vector.512"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.gl::TextureEnvironmentParameters"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.512", %"class.std::__1::vector.512"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.gl::TextureEnvironmentParameters"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 44
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %44, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.gl::TextureEnvironmentParameters"*
  %14 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %42, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.gl::TextureEnvironmentParameters"* %14 to i64
  br label %42

18:                                               ; preds = %12, %18
  %19 = phi %"struct.gl::TextureEnvironmentParameters"* [ %40, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 0
  store i8 4, i8* %20, align 4
  %21 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 1
  store i8 5, i8* %21, align 1
  %22 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 2
  store i8 5, i8* %22, align 2
  %23 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 3
  store i8 3, i8* %23, align 1
  %24 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 4
  store i8 3, i8* %24, align 4
  %25 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 5
  store i8 1, i8* %25, align 1
  %26 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 6
  store i8 1, i8* %26, align 2
  %27 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 7
  store i8 0, i8* %27, align 1
  %28 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 8
  store i8 0, i8* %28, align 4
  %29 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 9
  store i8 3, i8* %29, align 1
  %30 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 10
  store i8 2, i8* %30, align 2
  %31 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 11
  store i8 3, i8* %31, align 1
  %32 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 12
  store i8 2, i8* %32, align 4
  %33 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 13
  store i8 2, i8* %33, align 1
  %34 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 14
  store i8 2, i8* %34, align 2
  %35 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 16, i32 0
  %36 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 17
  %37 = bitcast float* %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %37, i8 0, i64 16, i1 false) #14
  store float 1.000000e+00, float* %36, align 4
  %38 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 18
  store float 1.000000e+00, float* %38, align 4
  %39 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 0, i32 19
  store i8 0, i8* %39, align 4
  %40 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %19, i64 1
  %41 = icmp eq %"struct.gl::TextureEnvironmentParameters"* %40, %14
  br i1 %41, label %16, label %18

42:                                               ; preds = %12, %16
  %43 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %43, i64* %7, align 8
  br label %121

44:                                               ; preds = %2
  %45 = bitcast %"class.std::__1::vector.512"* %0 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %8, %46
  %48 = sdiv exact i64 %47, 44
  %49 = add i64 %48, %1
  %50 = icmp ugt i64 %49, 419244183493398900
  br i1 %50, label %51, label %53

51:                                               ; preds = %44
  %52 = bitcast %"class.std::__1::vector.512"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %52) #16
  unreachable

53:                                               ; preds = %44
  %54 = sub i64 %5, %46
  %55 = sdiv exact i64 %54, 44
  %56 = icmp ult i64 %55, 209622091746699450
  br i1 %56, label %57, label %62

57:                                               ; preds = %53
  %58 = shl nsw i64 %55, 1
  %59 = icmp ult i64 %58, %49
  %60 = select i1 %59, i64 %49, i64 %58
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %53, %57
  %63 = phi i64 [ %60, %57 ], [ 419244183493398900, %53 ]
  %64 = mul i64 %63, 44
  %65 = tail call i8* @_Znwm(i64 %64) #15
  %66 = bitcast i8* %65 to %"struct.gl::TextureEnvironmentParameters"*
  br label %67

67:                                               ; preds = %57, %62
  %68 = phi i64 [ %63, %62 ], [ 0, %57 ]
  %69 = phi %"struct.gl::TextureEnvironmentParameters"* [ %66, %62 ], [ null, %57 ]
  %70 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %69, i64 %48
  %71 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %69, i64 %68
  %72 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %70, i64 %1
  br label %73

73:                                               ; preds = %67, %73
  %74 = phi %"struct.gl::TextureEnvironmentParameters"* [ %95, %73 ], [ %70, %67 ]
  %75 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 0
  store i8 4, i8* %75, align 4
  %76 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 1
  store i8 5, i8* %76, align 1
  %77 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 2
  store i8 5, i8* %77, align 2
  %78 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 3
  store i8 3, i8* %78, align 1
  %79 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 4
  store i8 3, i8* %79, align 4
  %80 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 5
  store i8 1, i8* %80, align 1
  %81 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 6
  store i8 1, i8* %81, align 2
  %82 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 7
  store i8 0, i8* %82, align 1
  %83 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 8
  store i8 0, i8* %83, align 4
  %84 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 9
  store i8 3, i8* %84, align 1
  %85 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 10
  store i8 2, i8* %85, align 2
  %86 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 11
  store i8 3, i8* %86, align 1
  %87 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 12
  store i8 2, i8* %87, align 4
  %88 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 13
  store i8 2, i8* %88, align 1
  %89 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 14
  store i8 2, i8* %89, align 2
  %90 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 16, i32 0
  %91 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 17
  %92 = bitcast float* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %92, i8 0, i64 16, i1 false) #14
  store float 1.000000e+00, float* %91, align 4
  %93 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 18
  store float 1.000000e+00, float* %93, align 4
  %94 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 0, i32 19
  store i8 0, i8* %94, align 4
  %95 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %74, i64 1
  %96 = icmp eq %"struct.gl::TextureEnvironmentParameters"* %72, %95
  br i1 %96, label %97, label %73

97:                                               ; preds = %73
  %98 = ptrtoint %"struct.gl::TextureEnvironmentParameters"* %71 to i64
  %99 = ptrtoint %"struct.gl::TextureEnvironmentParameters"* %72 to i64
  %100 = getelementptr inbounds %"class.std::__1::vector.512", %"class.std::__1::vector.512"* %0, i64 0, i32 0, i32 0
  %101 = load %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"** %100, align 8
  %102 = load %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"** %6, align 8
  %103 = icmp eq %"struct.gl::TextureEnvironmentParameters"* %102, %101
  br i1 %103, label %114, label %104

104:                                              ; preds = %97, %104
  %105 = phi %"struct.gl::TextureEnvironmentParameters"* [ %110, %104 ], [ %70, %97 ]
  %106 = phi %"struct.gl::TextureEnvironmentParameters"* [ %107, %104 ], [ %102, %97 ]
  %107 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %106, i64 -1
  %108 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %105, i64 -1, i32 0
  %109 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %107, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %108, i8* align 4 %109, i64 41, i1 false) #14
  %110 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %105, i64 -1
  %111 = icmp eq %"struct.gl::TextureEnvironmentParameters"* %107, %101
  br i1 %111, label %112, label %104

112:                                              ; preds = %104
  %113 = load %"struct.gl::TextureEnvironmentParameters"*, %"struct.gl::TextureEnvironmentParameters"** %100, align 8
  br label %114

114:                                              ; preds = %97, %112
  %115 = phi %"struct.gl::TextureEnvironmentParameters"* [ %110, %112 ], [ %70, %97 ]
  %116 = phi %"struct.gl::TextureEnvironmentParameters"* [ %113, %112 ], [ %101, %97 ]
  %117 = ptrtoint %"struct.gl::TextureEnvironmentParameters"* %115 to i64
  store i64 %117, i64* %45, align 8
  store i64 %99, i64* %7, align 8
  store i64 %98, i64* %4, align 8
  %118 = icmp eq %"struct.gl::TextureEnvironmentParameters"* %116, null
  br i1 %118, label %121, label %119

119:                                              ; preds = %114
  %120 = getelementptr inbounds %"struct.gl::TextureEnvironmentParameters", %"struct.gl::TextureEnvironmentParameters"* %116, i64 0, i32 0
  tail call void @_ZdlPv(i8* %120) #15
  br label %121

121:                                              ; preds = %119, %114, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN5angle11FixedVectorINS1_4Mat4ELm16ENS_5arrayIS3_Lm16EEEEENS_9allocatorIS6_EEE8__appendEm(%"class.std::__1::vector.505"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.505", %"class.std::__1::vector.505"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"class.angle::FixedVector"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.505", %"class.std::__1::vector.505"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"class.angle::FixedVector"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 520
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %27, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"class.angle::FixedVector"*
  %14 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %25, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"class.angle::FixedVector"* %14 to i64
  br label %25

18:                                               ; preds = %12, %18
  %19 = phi %"class.angle::FixedVector"* [ %23, %18 ], [ %13, %12 ]
  %20 = bitcast %"class.angle::FixedVector"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 520, i1 false) #14
  %21 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %19, i64 0, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EEC2Ev(%"struct.std::__1::array.497"* %21) #14
  %22 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %19, i64 0, i32 1
  store i64 0, i64* %22, align 8
  %23 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %19, i64 1
  %24 = icmp eq %"class.angle::FixedVector"* %23, %14
  br i1 %24, label %16, label %18

25:                                               ; preds = %12, %16
  %26 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %26, i64* %7, align 8
  br label %130

27:                                               ; preds = %2
  %28 = bitcast %"class.std::__1::vector.505"* %0 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %8, %29
  %31 = sdiv exact i64 %30, 520
  %32 = add i64 %31, %1
  %33 = icmp ugt i64 %32, 35474507834056830
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = bitcast %"class.std::__1::vector.505"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #16
  unreachable

36:                                               ; preds = %27
  %37 = sub i64 %5, %29
  %38 = sdiv exact i64 %37, 520
  %39 = icmp ult i64 %38, 17737253917028415
  br i1 %39, label %40, label %45

40:                                               ; preds = %36
  %41 = shl nsw i64 %38, 1
  %42 = icmp ult i64 %41, %32
  %43 = select i1 %42, i64 %32, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %36, %40
  %46 = phi i64 [ %43, %40 ], [ 35474507834056830, %36 ]
  %47 = mul i64 %46, 520
  %48 = tail call i8* @_Znwm(i64 %47) #15
  %49 = bitcast i8* %48 to %"class.angle::FixedVector"*
  br label %50

50:                                               ; preds = %40, %45
  %51 = phi i64 [ %46, %45 ], [ 0, %40 ]
  %52 = phi %"class.angle::FixedVector"* [ %49, %45 ], [ null, %40 ]
  %53 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %52, i64 %31
  %54 = ptrtoint %"class.angle::FixedVector"* %53 to i64
  %55 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %52, i64 %51
  %56 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %53, i64 %1
  br label %57

57:                                               ; preds = %50, %57
  %58 = phi %"class.angle::FixedVector"* [ %63, %57 ], [ %53, %50 ]
  %59 = phi i64 [ %64, %57 ], [ %54, %50 ]
  %60 = inttoptr i64 %59 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 520, i1 false) #14
  %61 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %58, i64 0, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EEC2Ev(%"struct.std::__1::array.497"* %61) #14
  %62 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %58, i64 0, i32 1
  store i64 0, i64* %62, align 8
  %63 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %58, i64 1
  %64 = ptrtoint %"class.angle::FixedVector"* %63 to i64
  %65 = icmp eq %"class.angle::FixedVector"* %56, %63
  br i1 %65, label %66, label %57

66:                                               ; preds = %57
  %67 = ptrtoint %"class.angle::FixedVector"* %55 to i64
  %68 = ptrtoint %"class.angle::FixedVector"* %56 to i64
  %69 = getelementptr inbounds %"class.std::__1::vector.505", %"class.std::__1::vector.505"* %0, i64 0, i32 0, i32 0
  %70 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %69, align 8
  %71 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %6, align 8
  %72 = icmp eq %"class.angle::FixedVector"* %71, %70
  br i1 %72, label %73, label %75

73:                                               ; preds = %66
  %74 = ptrtoint %"class.angle::FixedVector"* %70 to i64
  br label %115

75:                                               ; preds = %66, %104
  %76 = phi %"class.angle::FixedVector"* [ %109, %104 ], [ %53, %66 ]
  %77 = phi %"class.angle::FixedVector"* [ %105, %104 ], [ %71, %66 ]
  br label %78

78:                                               ; preds = %78, %75
  %79 = phi i64 [ 0, %75 ], [ %102, %78 ]
  %80 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %76, i64 -1, i32 0, i32 0, i64 %79
  %81 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %77, i64 -1, i32 0, i32 0, i64 %79
  %82 = bitcast %"class.angle::Mat4"* %80 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %82, i8 0, i64 24, i1 false) #14
  %83 = bitcast %"class.angle::Mat4"* %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %"class.angle::Mat4"* %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %77, i64 -1, i32 0, i32 0, i64 %79, i32 0, i32 0, i32 0, i32 1
  %87 = bitcast float** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %76, i64 -1, i32 0, i32 0, i64 %79, i32 0, i32 0, i32 0, i32 1
  %90 = bitcast float** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %77, i64 -1, i32 0, i32 0, i64 %79, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %92 = bitcast float** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %76, i64 -1, i32 0, i32 0, i64 %79, i32 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %95 = bitcast float** %94 to i64*
  store i64 %93, i64* %95, align 8
  %96 = bitcast %"class.angle::Mat4"* %81 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 24, i1 false) #14
  %97 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %76, i64 -1, i32 0, i32 0, i64 %79, i32 0, i32 1
  %98 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %77, i64 -1, i32 0, i32 0, i64 %79, i32 0, i32 1
  %99 = bitcast i32* %98 to i64*
  %100 = bitcast i32* %97 to i64*
  %101 = load i64, i64* %99, align 8
  store i64 %101, i64* %100, align 8
  %102 = add nuw nsw i64 %79, 1
  %103 = icmp eq i64 %102, 16
  br i1 %103, label %104, label %78

104:                                              ; preds = %78
  %105 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %77, i64 -1
  %106 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %76, i64 -1, i32 1
  %107 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %77, i64 -1, i32 1
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %106, align 8
  %109 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %76, i64 -1
  %110 = icmp eq %"class.angle::FixedVector"* %105, %70
  br i1 %110, label %111, label %75

111:                                              ; preds = %104
  %112 = ptrtoint %"class.angle::FixedVector"* %109 to i64
  %113 = load i64, i64* %28, align 8
  %114 = load %"class.angle::FixedVector"*, %"class.angle::FixedVector"** %6, align 8
  br label %115

115:                                              ; preds = %73, %111
  %116 = phi %"class.angle::FixedVector"* [ %70, %73 ], [ %114, %111 ]
  %117 = phi i64 [ %54, %73 ], [ %112, %111 ]
  %118 = phi i64 [ %74, %73 ], [ %113, %111 ]
  store i64 %117, i64* %28, align 8
  store i64 %68, i64* %7, align 8
  store i64 %67, i64* %4, align 8
  %119 = inttoptr i64 %118 to %"class.angle::FixedVector"*
  %120 = icmp eq %"class.angle::FixedVector"* %116, %119
  br i1 %120, label %126, label %121

121:                                              ; preds = %115, %121
  %122 = phi %"class.angle::FixedVector"* [ %123, %121 ], [ %116, %115 ]
  %123 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %122, i64 -1
  tail call void @_ZN5angle11FixedVectorINS_4Mat4ELm16ENSt3__15arrayIS1_Lm16EEEE6resizeEm(%"class.angle::FixedVector"* %123, i64 0) #14
  %124 = getelementptr inbounds %"class.angle::FixedVector", %"class.angle::FixedVector"* %123, i64 0, i32 0
  tail call void @_ZNSt3__15arrayIN5angle4Mat4ELm16EED2Ev(%"struct.std::__1::array.497"* %124) #14
  %125 = icmp eq %"class.angle::FixedVector"* %123, %119
  br i1 %125, label %126, label %121

126:                                              ; preds = %121, %115
  %127 = icmp eq i64 %118, 0
  br i1 %127, label %130, label %128

128:                                              ; preds = %126
  %129 = inttoptr i64 %118 to i8*
  tail call void @_ZdlPv(i8* %129) #15
  br label %130

130:                                              ; preds = %128, %126, %25
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2gl15LightParametersENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.519"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.519", %"class.std::__1::vector.519"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.gl::LightParameters"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.519", %"class.std::__1::vector.519"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.gl::LightParameters"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 100
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %42, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.gl::LightParameters"*
  %14 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %40, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.gl::LightParameters"* %14 to i64
  br label %40

18:                                               ; preds = %12, %18
  %19 = phi %"struct.gl::LightParameters"* [ %38, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 0
  store i8 0, i8* %20, align 4
  %21 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 1, i32 0
  %22 = bitcast float* %21 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %22, align 4
  %23 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 2, i32 0
  %24 = bitcast float* %23 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %24, align 4
  %25 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 3, i32 0
  %26 = bitcast float* %25 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %26, align 4
  %27 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 4
  %28 = bitcast %"class.angle::Vector.521"* %27 to i32*
  store i32 0, i32* %28, align 4
  %29 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 4, i32 0, i32 0, i64 1
  %30 = bitcast float* %29 to i32*
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 4, i32 0, i32 0, i64 2
  %32 = bitcast float* %31 to i32*
  store i32 1065353216, i32* %32, align 4
  %33 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 4, i32 0, i32 0, i64 3
  %34 = bitcast float* %33 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 -1082130432>, <4 x i32>* %34, align 4
  %35 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 6
  %36 = bitcast float* %35 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.800000e+02, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %36, align 4
  %37 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 0, i32 10
  store float 0.000000e+00, float* %37, align 4
  %38 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %19, i64 1
  %39 = icmp eq %"struct.gl::LightParameters"* %38, %14
  br i1 %39, label %16, label %18

40:                                               ; preds = %12, %16
  %41 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %41, i64* %7, align 8
  br label %117

42:                                               ; preds = %2
  %43 = bitcast %"class.std::__1::vector.519"* %0 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = sub i64 %8, %44
  %46 = sdiv exact i64 %45, 100
  %47 = add i64 %46, %1
  %48 = icmp ugt i64 %47, 184467440737095516
  br i1 %48, label %49, label %51

49:                                               ; preds = %42
  %50 = bitcast %"class.std::__1::vector.519"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %50) #16
  unreachable

51:                                               ; preds = %42
  %52 = sub i64 %5, %44
  %53 = sdiv exact i64 %52, 100
  %54 = icmp ult i64 %53, 92233720368547758
  br i1 %54, label %55, label %60

55:                                               ; preds = %51
  %56 = shl nsw i64 %53, 1
  %57 = icmp ult i64 %56, %47
  %58 = select i1 %57, i64 %47, i64 %56
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %51, %55
  %61 = phi i64 [ %58, %55 ], [ 184467440737095516, %51 ]
  %62 = mul i64 %61, 100
  %63 = tail call i8* @_Znwm(i64 %62) #15
  %64 = bitcast i8* %63 to %"struct.gl::LightParameters"*
  br label %65

65:                                               ; preds = %55, %60
  %66 = phi i64 [ %61, %60 ], [ 0, %55 ]
  %67 = phi %"struct.gl::LightParameters"* [ %64, %60 ], [ null, %55 ]
  %68 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %67, i64 %46
  %69 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %67, i64 %66
  %70 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %68, i64 %1
  br label %71

71:                                               ; preds = %65, %71
  %72 = phi %"struct.gl::LightParameters"* [ %91, %71 ], [ %68, %65 ]
  %73 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 0
  store i8 0, i8* %73, align 4
  %74 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 1, i32 0
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %75, align 4
  %76 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 2, i32 0
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %77, align 4
  %78 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 3, i32 0
  %79 = bitcast float* %78 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %79, align 4
  %80 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 4
  %81 = bitcast %"class.angle::Vector.521"* %80 to i32*
  store i32 0, i32* %81, align 4
  %82 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 4, i32 0, i32 0, i64 1
  %83 = bitcast float* %82 to i32*
  store i32 0, i32* %83, align 4
  %84 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 4, i32 0, i32 0, i64 2
  %85 = bitcast float* %84 to i32*
  store i32 1065353216, i32* %85, align 4
  %86 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 4, i32 0, i32 0, i64 3
  %87 = bitcast float* %86 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 -1082130432>, <4 x i32>* %87, align 4
  %88 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 6
  %89 = bitcast float* %88 to <4 x float>*
  store <4 x float> <float 0.000000e+00, float 1.800000e+02, float 1.000000e+00, float 0.000000e+00>, <4 x float>* %89, align 4
  %90 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 0, i32 10
  store float 0.000000e+00, float* %90, align 4
  %91 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %72, i64 1
  %92 = icmp eq %"struct.gl::LightParameters"* %70, %91
  br i1 %92, label %93, label %71

93:                                               ; preds = %71
  %94 = ptrtoint %"struct.gl::LightParameters"* %69 to i64
  %95 = ptrtoint %"struct.gl::LightParameters"* %70 to i64
  %96 = getelementptr inbounds %"class.std::__1::vector.519", %"class.std::__1::vector.519"* %0, i64 0, i32 0, i32 0
  %97 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %96, align 8
  %98 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %6, align 8
  %99 = icmp eq %"struct.gl::LightParameters"* %98, %97
  br i1 %99, label %110, label %100

100:                                              ; preds = %93, %100
  %101 = phi %"struct.gl::LightParameters"* [ %106, %100 ], [ %68, %93 ]
  %102 = phi %"struct.gl::LightParameters"* [ %103, %100 ], [ %98, %93 ]
  %103 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %102, i64 -1
  %104 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %101, i64 -1, i32 0
  %105 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %103, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %104, i8* align 4 %105, i64 100, i1 false) #14
  %106 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %101, i64 -1
  %107 = icmp eq %"struct.gl::LightParameters"* %103, %97
  br i1 %107, label %108, label %100

108:                                              ; preds = %100
  %109 = load %"struct.gl::LightParameters"*, %"struct.gl::LightParameters"** %96, align 8
  br label %110

110:                                              ; preds = %93, %108
  %111 = phi %"struct.gl::LightParameters"* [ %106, %108 ], [ %68, %93 ]
  %112 = phi %"struct.gl::LightParameters"* [ %109, %108 ], [ %97, %93 ]
  %113 = ptrtoint %"struct.gl::LightParameters"* %111 to i64
  store i64 %113, i64* %43, align 8
  store i64 %95, i64* %7, align 8
  store i64 %94, i64* %4, align 8
  %114 = icmp eq %"struct.gl::LightParameters"* %112, null
  br i1 %114, label %117, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"struct.gl::LightParameters", %"struct.gl::LightParameters"* %112, i64 0, i32 0
  tail call void @_ZdlPv(i8* %116) #15
  br label %117

117:                                              ; preds = %115, %110, %40
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2gl19ClipPlaneParametersENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.528"*, i64, %"struct.gl::ClipPlaneParameters"* dereferenceable(20)) local_unnamed_addr #2 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.528", %"class.std::__1::vector.528"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"struct.gl::ClipPlaneParameters"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.528", %"class.std::__1::vector.528"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"struct.gl::ClipPlaneParameters"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = sdiv exact i64 %10, 20
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %28, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"struct.gl::ClipPlaneParameters"*
  %15 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %2, i64 0, i32 0
  br label %21

19:                                               ; preds = %21
  %20 = ptrtoint %"struct.gl::ClipPlaneParameters"* %15 to i64
  br label %26

21:                                               ; preds = %21, %17
  %22 = phi %"struct.gl::ClipPlaneParameters"* [ %14, %17 ], [ %24, %21 ]
  %23 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %22, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 4 %18, i64 20, i1 false) #14
  %24 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %22, i64 1
  %25 = icmp eq %"struct.gl::ClipPlaneParameters"* %24, %15
  br i1 %25, label %19, label %21

26:                                               ; preds = %13, %19
  %27 = phi i64 [ %20, %19 ], [ %9, %13 ]
  store i64 %27, i64* %8, align 8
  br label %87

28:                                               ; preds = %3
  %29 = bitcast %"class.std::__1::vector.528"* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %9, %30
  %32 = sdiv exact i64 %31, 20
  %33 = add i64 %32, %1
  %34 = icmp ugt i64 %33, 922337203685477580
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::vector.528"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #16
  unreachable

37:                                               ; preds = %28
  %38 = sub i64 %6, %30
  %39 = sdiv exact i64 %38, 20
  %40 = icmp ult i64 %39, 461168601842738790
  br i1 %40, label %41, label %46

41:                                               ; preds = %37
  %42 = shl nsw i64 %39, 1
  %43 = icmp ult i64 %42, %33
  %44 = select i1 %43, i64 %33, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %37, %41
  %47 = phi i64 [ %44, %41 ], [ 922337203685477580, %37 ]
  %48 = mul i64 %47, 20
  %49 = tail call i8* @_Znwm(i64 %48) #15
  %50 = bitcast i8* %49 to %"struct.gl::ClipPlaneParameters"*
  br label %51

51:                                               ; preds = %46, %41
  %52 = phi i64 [ %47, %46 ], [ 0, %41 ]
  %53 = phi %"struct.gl::ClipPlaneParameters"* [ %50, %46 ], [ null, %41 ]
  %54 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %53, i64 %32
  %55 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %53, i64 %52
  %56 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %54, i64 %1
  %57 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %2, i64 0, i32 0
  br label %58

58:                                               ; preds = %58, %51
  %59 = phi %"struct.gl::ClipPlaneParameters"* [ %54, %51 ], [ %61, %58 ]
  %60 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %59, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %57, i64 20, i1 false) #14
  %61 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %59, i64 1
  %62 = icmp eq %"struct.gl::ClipPlaneParameters"* %56, %61
  br i1 %62, label %63, label %58

63:                                               ; preds = %58
  %64 = ptrtoint %"struct.gl::ClipPlaneParameters"* %55 to i64
  %65 = ptrtoint %"struct.gl::ClipPlaneParameters"* %56 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.528", %"class.std::__1::vector.528"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %66, align 8
  %68 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %7, align 8
  %69 = icmp eq %"struct.gl::ClipPlaneParameters"* %68, %67
  br i1 %69, label %80, label %70

70:                                               ; preds = %63, %70
  %71 = phi %"struct.gl::ClipPlaneParameters"* [ %76, %70 ], [ %54, %63 ]
  %72 = phi %"struct.gl::ClipPlaneParameters"* [ %73, %70 ], [ %68, %63 ]
  %73 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %72, i64 -1
  %74 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %71, i64 -1, i32 0
  %75 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %73, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %75, i64 20, i1 false) #14
  %76 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %71, i64 -1
  %77 = icmp eq %"struct.gl::ClipPlaneParameters"* %73, %67
  br i1 %77, label %78, label %70

78:                                               ; preds = %70
  %79 = load %"struct.gl::ClipPlaneParameters"*, %"struct.gl::ClipPlaneParameters"** %66, align 8
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi %"struct.gl::ClipPlaneParameters"* [ %76, %78 ], [ %54, %63 ]
  %82 = phi %"struct.gl::ClipPlaneParameters"* [ %79, %78 ], [ %67, %63 ]
  %83 = ptrtoint %"struct.gl::ClipPlaneParameters"* %81 to i64
  store i64 %83, i64* %29, align 8
  store i64 %65, i64* %8, align 8
  store i64 %64, i64* %5, align 8
  %84 = icmp eq %"struct.gl::ClipPlaneParameters"* %82, null
  br i1 %84, label %87, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds %"struct.gl::ClipPlaneParameters", %"struct.gl::ClipPlaneParameters"* %82, i64 0, i32 0
  tail call void @_ZdlPv(i8* %86) #15
  br label %87

87:                                               ; preds = %85, %80, %26
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3, !5}
!3 = distinct !{!3, !4, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!4 = distinct !{!4, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!5 = distinct !{!5, !6, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!6 = distinct !{!6, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!7 = !{!8, !10}
!8 = distinct !{!8, !9, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!9 = distinct !{!9, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!10 = distinct !{!10, !11, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!11 = distinct !{!11, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!14 = distinct !{!14, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!15 = !{!13, !16}
!16 = distinct !{!16, !17, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!17 = distinct !{!17, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb1EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!18 = !{i8 0, i8 2}
!19 = !{!20}
!20 = distinct !{!20, !21}
!21 = distinct !{!21, !"LVerDomain"}
!22 = !{!23}
!23 = distinct !{!23, !21}
!24 = distinct !{!24, !25}
!25 = !{!"llvm.loop.isvectorized", i32 1}
!26 = distinct !{!26, !27}
!27 = !{!"llvm.loop.unroll.disable"}
!28 = distinct !{!28, !25}
!29 = !{!30, !32}
!30 = distinct !{!30, !31, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!31 = distinct !{!31, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!32 = distinct !{!32, !33, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!33 = distinct !{!33, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!34 = !{!35}
!35 = distinct !{!35, !36, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!36 = distinct !{!36, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!37 = !{!38, !35}
!38 = distinct !{!38, !39, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!39 = distinct !{!39, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!40 = !{!41}
!41 = distinct !{!41, !42, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!42 = distinct !{!42, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!43 = !{!44}
!44 = distinct !{!44, !45, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!45 = distinct !{!45, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!46 = !{!44, !47}
!47 = distinct !{!47, !48, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!48 = distinct !{!48, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!49 = !{!47}
