; ModuleID = '../../cc/layers/surface_layer.cc'
source_filename = "../../cc/layers/surface_layer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::trace_event::TraceCategory" = type { i8, i32, i8* }
%"class.cc::SurfaceLayer" = type <{ %"class.cc::Layer", %"class.base::RepeatingCallback.456", i8, [7 x i8], %"class.viz::SurfaceRange", %"class.absl::optional.462", i8, i8, i8, i8, [4 x i8] }>
%"class.cc::Layer" = type <{ i32 (...)**, %"class.base::RefCounted", [4 x i8], %"class.cc::Layer"*, %"class.cc::LayerTreeHost"*, %"struct.cc::Layer::Inputs", %"class.std::__1::unique_ptr.416", i32, i32, i32, i32, i32, i32, %"class.gfx::Vector2dF", i8, i16, [5 x i8], %"class.std::__1::unique_ptr.430" }>
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.cc::LayerTreeHost" = type { %"class.cc::MutatorHostClient", %"class.cc::MicroBenchmarkController", %"class.base::WeakPtr", %class.scoped_refptr.10, %"class.std::__1::unique_ptr.11", i32, %"class.std::__1::unique_ptr.15", %"class.cc::LayerTreeHostClient"*, %"class.cc::LayerTreeHostSchedulingClient"*, %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.27", i32, %"class.std::__1::unique_ptr.33", %"class.cc::SwapPromiseManager", %"class.std::__1::unique_ptr.55", %"class.std::__1::unique_ptr.55", %"class.cc::LayerTreeSettings", %"class.cc::LayerTreeDebugState", i8, i8, i8, i32, i8, i8, i8, %"class.cc::TaskGraphRunner"*, %"class.gfx::RenderingPipeline"*, %"class.gfx::RenderingPipeline"*, i32, %class.scoped_refptr.70, %"struct.cc::LayerTreeHost::ViewportPropertyIds", %"struct.cc::OverscrollBehavior", %"struct.cc::BrowserControlsParams", float, float, float, float, float, float, float, float, float, i8, i8, %"class.gfx::DisplayColorSpaces", i8, %"class.viz::LocalSurfaceId", i8, i32, i32, i32, %"struct.viz::Selection", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Size", i8, i8, [4 x i32], %"class.std::__1::unique_ptr.71", i8, %"class.cc::PropertyTrees", i8, i8, %"class.gfx::Vector2dF", %class.scoped_refptr.243, %"class.base::flat_map.244", %"class.base::internal::flat_tree.254", %"class.std::__1::unordered_map", %"class.std::__1::unordered_map.285", i8, i8, %"class.cc::MutatorHost"*, %"class.cc::RasterDarkModeFilter"*, %"class.std::__1::vector.311", %"class.std::__1::unordered_map.319", %"class.std::__1::vector.343", %"struct.cc::LayerTreeHost::ScrollAnimationState", %"class.std::__1::unique_ptr.353", %"class.base::TimeTicks", %"class.cc::EventsMetricsManager", %"class.std::__1::unique_ptr.374", %"class.std::__1::vector.380", %"class.base::flat_map.388", %"class.base::WeakPtrFactory.398" }
%"class.cc::MutatorHostClient" = type { i32 (...)** }
%"class.cc::MicroBenchmarkController" = type { %"class.cc::LayerTreeHost"*, %"class.std::__1::vector", %class.scoped_refptr.1 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::unique_ptr" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::unique_ptr"* }
%class.scoped_refptr.1 = type { %"class.base::SingleThreadTaskRunner"* }
%"class.base::SingleThreadTaskRunner" = type { %"class.base::SequencedTaskRunner.base", [4 x i8] }
%"class.base::SequencedTaskRunner.base" = type { %"class.base::TaskRunner.base" }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::WeakPtr" = type { %"class.base::internal::WeakPtrBase" }
%"class.base::internal::WeakPtrBase" = type { %"class.base::internal::WeakReference", i64 }
%"class.base::internal::WeakReference" = type { %class.scoped_refptr.3 }
%class.scoped_refptr.3 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.4", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.4" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%class.scoped_refptr.10 = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.cc::UkmRecorderFactory"* }
%"class.cc::UkmRecorderFactory" = type opaque
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.cc::UIResourceManager"* }
%"class.cc::UIResourceManager" = type opaque
%"class.cc::LayerTreeHostClient" = type { i32 (...)** }
%"class.cc::LayerTreeHostSchedulingClient" = type { i32 (...)** }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.cc::Proxy"* }
%"class.cc::Proxy" = type { i32 (...)** }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.cc::TaskRunnerProvider"* }
%"class.cc::TaskRunnerProvider" = type { i32 (...)**, %class.scoped_refptr.1, %class.scoped_refptr.1 }
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"class.cc::RenderingStatsInstrumentation"* }
%"class.cc::RenderingStatsInstrumentation" = type opaque
%"class.cc::SwapPromiseManager" = type { %"class.std::__1::vector.39", %"class.std::__1::set" }
%"class.std::__1::vector.39" = type { %"class.std::__1::__vector_base.40" }
%"class.std::__1::__vector_base.40" = type { %"class.std::__1::unique_ptr.41"*, %"class.std::__1::unique_ptr.41"*, %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.502" }
%"class.std::__1::__compressed_pair.502" = type { %"struct.std::__1::__compressed_pair_elem.503" }
%"struct.std::__1::__compressed_pair_elem.503" = type { %"class.cc::SwapPromise"* }
%"class.cc::SwapPromise" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.std::__1::unique_ptr.41"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.47", %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { i64 }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.cc::LayerTreeFrameSink"* }
%"class.cc::LayerTreeFrameSink" = type { %"class.viz::SharedBitmapReporter", %"class.viz::ContextLostObserver", %"class.cc::LayerTreeFrameSinkClient"*, %class.scoped_refptr.58, %class.scoped_refptr.59, %class.scoped_refptr.1, %"class.gpu::GpuMemoryBufferManager"*, %"class.std::__1::unique_ptr.60", i64, %"class.base::WeakPtrFactory" }
%"class.viz::SharedBitmapReporter" = type { i32 (...)** }
%"class.viz::ContextLostObserver" = type { i32 (...)** }
%"class.cc::LayerTreeFrameSinkClient" = type opaque
%class.scoped_refptr.58 = type { %"class.viz::ContextProvider"* }
%"class.viz::ContextProvider" = type { i32 (...)** }
%class.scoped_refptr.59 = type { %"class.viz::RasterContextProvider"* }
%"class.viz::RasterContextProvider" = type { i32 (...)** }
%"class.gpu::GpuMemoryBufferManager" = type opaque
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %"class.cc::LayerTreeFrameSink::ContextLostForwarder"* }
%"class.cc::LayerTreeFrameSink::ContextLostForwarder" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.66 }
%class.scoped_refptr.66 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.cc::LayerTreeSettings" = type <{ i32 (...)**, %"class.viz::ResourceSettings", i8, i8, i8, i8, [2 x i8], i32, i8, i8, i8, i8, i32, float, i8, i8, [2 x i8], i32, %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i8, [3 x i8], i32, %"class.base::TimeDelta", i8, i8, [2 x i8], float, float, float, %"class.gfx::Size", %"class.gfx::Size", %"class.gfx::Size", i32, %"class.gfx::Size", i32, float, i32, i64, i8, i8, i8, [5 x i8], i64, i8, i8, [2 x i8], i32, %"struct.cc::ManagedMemoryPolicy", i64, i32, i8, i8, i8, i8, i64, i8, [7 x i8], %"class.cc::LayerTreeDebugState", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [6 x i8] }>
%"class.viz::ResourceSettings" = type { i8, i8 }
%"class.base::TimeDelta" = type { i64 }
%"struct.cc::ManagedMemoryPolicy" = type { i64, i32, i64 }
%"class.cc::LayerTreeDebugState" = type <{ i8, [7 x i8], %"class.std::__1::bitset", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, i8, i8, i8, [2 x i8] }>
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.cc::TaskGraphRunner" = type opaque
%"class.gfx::RenderingPipeline" = type { i32 (...)** }
%class.scoped_refptr.70 = type { %"class.cc::Layer"* }
%"struct.cc::LayerTreeHost::ViewportPropertyIds" = type { i32, i32, i32, i32, i32 }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"struct.cc::BrowserControlsParams" = type <{ float, float, float, float, i8, i8, i8, i8 }>
%"class.gfx::DisplayColorSpaces" = type { [6 x %"class.gfx::ColorSpace"], [6 x i32], float, %"class.absl::optional" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.gfx::HDRStaticMetadata" }
%"struct.gfx::HDRStaticMetadata" = type { double, double, double }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"struct.viz::Selection" = type { %"struct.cc::LayerSelectionBound", %"struct.cc::LayerSelectionBound" }
%"struct.cc::LayerSelectionBound" = type <{ i32, %"class.gfx::Point", %"class.gfx::Point", i32, i8, [3 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.cc::PendingPageScaleAnimation"* }
%"struct.cc::PendingPageScaleAnimation" = type opaque
%"class.cc::PropertyTrees" = type { %"class.base::flat_map", %"class.base::flat_map", %"class.base::flat_map", %"class.cc::TransformTree", %"class.cc::EffectTree", %"class.cc::ClipTree", %"class.cc::ScrollTree", i8, i8, i8, i32, i8, i8, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", %"struct.cc::PropertyTreesCachedData" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.77" }
%"class.std::__1::vector.77" = type { %"class.std::__1::__vector_base.78" }
%"class.std::__1::__vector_base.78" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.79" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.80" }
%"struct.std::__1::__compressed_pair_elem.80" = type { %"struct.std::__1::pair"* }
%"class.cc::TransformTree" = type { %"class.cc::PropertyTree", float, float, float, %"class.std::__1::vector.91", %"class.std::__1::vector.98", %"class.std::__1::vector.105" }
%"class.cc::PropertyTree" = type { i32 (...)**, %"class.std::__1::vector.84", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.84" = type { %"class.std::__1::__vector_base.85" }
%"class.std::__1::__vector_base.85" = type { %"struct.cc::TransformNode"*, %"struct.cc::TransformNode"*, %"class.std::__1::__compressed_pair.86" }
%"struct.cc::TransformNode" = type opaque
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.87" }
%"struct.std::__1::__compressed_pair_elem.87" = type { %"struct.cc::TransformNode"* }
%"class.std::__1::vector.91" = type { %"class.std::__1::__vector_base.92" }
%"class.std::__1::__vector_base.92" = type { i32*, i32*, %"class.std::__1::__compressed_pair.93" }
%"class.std::__1::__compressed_pair.93" = type { %"struct.std::__1::__compressed_pair_elem.94" }
%"struct.std::__1::__compressed_pair_elem.94" = type { i32* }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { %"struct.cc::TransformCachedNodeData"*, %"struct.cc::TransformCachedNodeData"*, %"class.std::__1::__compressed_pair.100" }
%"struct.cc::TransformCachedNodeData" = type opaque
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"struct.cc::TransformCachedNodeData"* }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"struct.cc::StickyPositionNodeData"*, %"struct.cc::StickyPositionNodeData"*, %"class.std::__1::__compressed_pair.107" }
%"struct.cc::StickyPositionNodeData" = type { i32, %"struct.cc::StickyPositionConstraint", i32, i32, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF" }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"struct.cc::StickyPositionNodeData"* }
%"class.cc::EffectTree" = type { %"class.cc::PropertyTree.112", %"class.std::__1::unordered_multimap", %"class.std::__1::vector.172" }
%"class.cc::PropertyTree.112" = type { i32 (...)**, %"class.std::__1::vector.113", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.113" = type { %"class.std::__1::__vector_base.114" }
%"class.std::__1::__vector_base.114" = type { %"struct.cc::EffectNode"*, %"struct.cc::EffectNode"*, %"class.std::__1::__compressed_pair.148" }
%"struct.cc::EffectNode" = type { i32, i32, i64, float, float, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.135", float, %"class.gfx::PointF", %"struct.cc::ElementId", %"class.gfx::MaskFilterInfo", i32, %"class.gfx::Vector2dF", %"class.viz::SubtreeCaptureId", %"class.gfx::Size", [3 x i8], i8, i32, i32, i32, i32, i32, i32, %"class.cc::DocumentTransitionSharedElementId" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.115" }
%"class.std::__1::vector.115" = type { %"class.std::__1::__vector_base.116" }
%"class.std::__1::__vector_base.116" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.130" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.123", i32, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.117, i32, %"class.absl::optional.118", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%class.sk_sp.117 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.118" = type { %"class.absl::optional_internal::optional_data.119" }
%"class.absl::optional_internal::optional_data.119" = type { %"class.absl::optional_internal::optional_data_base.120" }
%"class.absl::optional_internal::optional_data_base.120" = type { %"class.absl::optional_internal::optional_data_dtor_base.121" }
%"class.absl::optional_internal::optional_data_dtor_base.121" = type { i8, %union.anon.122 }
%union.anon.122 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.123" = type { %"class.std::__1::__vector_base.124" }
%"class.std::__1::__vector_base.124" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.125" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.cc::FilterOperation"* }
%"class.absl::optional.135" = type { %"class.absl::optional_internal::optional_data.136" }
%"class.absl::optional_internal::optional_data.136" = type { %"class.absl::optional_internal::optional_data_base.137" }
%"class.absl::optional_internal::optional_data_base.137" = type { %"class.absl::optional_internal::optional_data_dtor_base.138" }
%"class.absl::optional_internal::optional_data_dtor_base.138" = type { i8, %union.anon.139 }
%union.anon.139 = type { %"class.gfx::RRectF" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.gfx::MaskFilterInfo" = type { %"class.gfx::RRectF" }
%"class.viz::SubtreeCaptureId" = type { i32 }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree.140" }
%"class.base::internal::flat_tree.140" = type { %"class.std::__1::vector.141" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { i32*, i32*, %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i32* }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"struct.cc::EffectNode"* }
%"class.std::__1::unordered_multimap" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.153", %"class.std::__1::__compressed_pair.161", %"class.std::__1::__compressed_pair.166", %"class.std::__1::__compressed_pair.168", [4 x i8] }>
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155", %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.156" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.157" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { float }
%"class.std::__1::vector.172" = type { %"class.std::__1::__vector_base.173" }
%"class.std::__1::__vector_base.173" = type { %"class.std::__1::unique_ptr.174"*, %"class.std::__1::unique_ptr.174"*, %"class.std::__1::__compressed_pair.186" }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.cc::RenderSurfaceImpl"* }
%"class.cc::RenderSurfaceImpl" = type { i32 (...)**, %"class.cc::LayerTreeImpl"*, i64, i32, %"struct.cc::RenderSurfaceImpl::DrawProperties", %"class.gfx::Rect", i32, i8, %"class.cc::Occlusion", %"class.cc::RenderSurfaceImpl"*, %"class.std::__1::unique_ptr.177" }
%"class.cc::LayerTreeImpl" = type opaque
%"struct.cc::RenderSurfaceImpl::DrawProperties" = type { float, %"class.gfx::Transform", %"class.gfx::Transform", %"class.gfx::Rect", %"class.gfx::Rect", i8, %"class.gfx::MaskFilterInfo" }
%"class.gfx::Transform" = type { %class.SkMatrix44 }
%class.SkMatrix44 = type <{ [4 x [4 x float]], i8, [3 x i8] }>
%"class.cc::Occlusion" = type { %"class.gfx::Transform", %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion" }
%"class.cc::SimpleEnclosedRegion" = type { %"class.gfx::Rect" }
%"class.std::__1::unique_ptr.177" = type { %"class.std::__1::__compressed_pair.178" }
%"class.std::__1::__compressed_pair.178" = type { %"struct.std::__1::__compressed_pair_elem.179" }
%"struct.std::__1::__compressed_pair_elem.179" = type { %"class.cc::DamageTracker"* }
%"class.cc::DamageTracker" = type opaque
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"class.std::__1::unique_ptr.174"* }
%"class.cc::ClipTree" = type { %"class.cc::PropertyTree.191" }
%"class.cc::PropertyTree.191" = type { i32 (...)**, %"class.std::__1::vector.192", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.192" = type { %"class.std::__1::__vector_base.193" }
%"class.std::__1::__vector_base.193" = type { %"struct.cc::ClipNode"*, %"struct.cc::ClipNode"*, %"class.std::__1::__compressed_pair.194" }
%"struct.cc::ClipNode" = type opaque
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"struct.cc::ClipNode"* }
%"class.cc::ScrollTree" = type { %"class.cc::PropertyTree.199", i32, %"class.base::flat_map.207", %"class.base::flat_map.217", %"class.base::WeakPtr.227" }
%"class.cc::PropertyTree.199" = type { i32 (...)**, %"class.std::__1::vector.200", i8, %"class.cc::PropertyTrees"* }
%"class.std::__1::vector.200" = type { %"class.std::__1::__vector_base.201" }
%"class.std::__1::__vector_base.201" = type { %"struct.cc::ScrollNode"*, %"struct.cc::ScrollNode"*, %"class.std::__1::__compressed_pair.202" }
%"struct.cc::ScrollNode" = type opaque
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"struct.cc::ScrollNode"* }
%"class.base::flat_map.207" = type { %"class.base::internal::flat_tree.208" }
%"class.base::internal::flat_tree.208" = type { %"class.std::__1::vector.209" }
%"class.std::__1::vector.209" = type { %"class.std::__1::__vector_base.210" }
%"class.std::__1::__vector_base.210" = type { %"struct.std::__1::pair.211"*, %"struct.std::__1::pair.211"*, %"class.std::__1::__compressed_pair.212" }
%"struct.std::__1::pair.211" = type opaque
%"class.std::__1::__compressed_pair.212" = type { %"struct.std::__1::__compressed_pair_elem.213" }
%"struct.std::__1::__compressed_pair_elem.213" = type { %"struct.std::__1::pair.211"* }
%"class.base::flat_map.217" = type { %"class.base::internal::flat_tree.218" }
%"class.base::internal::flat_tree.218" = type { %"class.std::__1::vector.219" }
%"class.std::__1::vector.219" = type { %"class.std::__1::__vector_base.220" }
%"class.std::__1::__vector_base.220" = type { %"struct.std::__1::pair.221"*, %"struct.std::__1::pair.221"*, %"class.std::__1::__compressed_pair.222" }
%"struct.std::__1::pair.221" = type opaque
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"struct.std::__1::pair.221"* }
%"class.base::WeakPtr.227" = type { %"class.base::internal::WeakPtrBase" }
%"struct.cc::PropertyTreesCachedData" = type { i32, %"class.std::__1::vector.228", %"class.std::__1::vector.235" }
%"class.std::__1::vector.228" = type { %"class.std::__1::__vector_base.229" }
%"class.std::__1::__vector_base.229" = type { %"struct.cc::AnimationScaleData"*, %"struct.cc::AnimationScaleData"*, %"class.std::__1::__compressed_pair.230" }
%"struct.cc::AnimationScaleData" = type <{ i32, float, i8, i8, [2 x i8] }>
%"class.std::__1::__compressed_pair.230" = type { %"struct.std::__1::__compressed_pair_elem.231" }
%"struct.std::__1::__compressed_pair_elem.231" = type { %"struct.cc::AnimationScaleData"* }
%"class.std::__1::vector.235" = type { %"class.std::__1::__vector_base.236" }
%"class.std::__1::__vector_base.236" = type { %"class.std::__1::vector.237"*, %"class.std::__1::vector.237"*, %"class.std::__1::__compressed_pair.238" }
%"class.std::__1::vector.237" = type opaque
%"class.std::__1::__compressed_pair.238" = type { %"struct.std::__1::__compressed_pair_elem.239" }
%"struct.std::__1::__compressed_pair_elem.239" = type { %"class.std::__1::vector.237"* }
%class.scoped_refptr.243 = type { %"class.cc::HeadsUpDisplayLayer"* }
%"class.cc::HeadsUpDisplayLayer" = type opaque
%"class.base::flat_map.244" = type { %"class.base::internal::flat_tree.245" }
%"class.base::internal::flat_tree.245" = type { %"class.std::__1::vector.246" }
%"class.std::__1::vector.246" = type { %"class.std::__1::__vector_base.247" }
%"class.std::__1::__vector_base.247" = type { %"struct.std::__1::pair.248"*, %"struct.std::__1::pair.248"*, %"class.std::__1::__compressed_pair.249" }
%"struct.std::__1::pair.248" = type opaque
%"class.std::__1::__compressed_pair.249" = type { %"struct.std::__1::__compressed_pair_elem.250" }
%"struct.std::__1::__compressed_pair_elem.250" = type { %"struct.std::__1::pair.248"* }
%"class.base::internal::flat_tree.254" = type { %"class.std::__1::vector.255" }
%"class.std::__1::vector.255" = type { %"class.std::__1::__vector_base.256" }
%"class.std::__1::__vector_base.256" = type { %"class.cc::Layer"**, %"class.cc::Layer"**, %"class.std::__1::__compressed_pair.257" }
%"class.std::__1::__compressed_pair.257" = type { %"struct.std::__1::__compressed_pair_elem.258" }
%"struct.std::__1::__compressed_pair_elem.258" = type { %"class.cc::Layer"** }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table.262" }
%"class.std::__1::__hash_table.262" = type <{ %"class.std::__1::unique_ptr.263", %"class.std::__1::__compressed_pair.273", %"class.std::__1::__compressed_pair.278", %"class.std::__1::__compressed_pair.281", [4 x i8] }>
%"class.std::__1::unique_ptr.263" = type { %"class.std::__1::__compressed_pair.264" }
%"class.std::__1::__compressed_pair.264" = type { %"struct.std::__1::__compressed_pair_elem.265", %"struct.std::__1::__compressed_pair_elem.267" }
%"struct.std::__1::__compressed_pair_elem.265" = type { %"struct.std::__1::__hash_node_base.266"** }
%"struct.std::__1::__hash_node_base.266" = type { %"struct.std::__1::__hash_node_base.266"* }
%"struct.std::__1::__compressed_pair_elem.267" = type { %"class.std::__1::__bucket_list_deallocator.268" }
%"class.std::__1::__bucket_list_deallocator.268" = type { %"class.std::__1::__compressed_pair.269" }
%"class.std::__1::__compressed_pair.269" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.273" = type { %"struct.std::__1::__compressed_pair_elem.274" }
%"struct.std::__1::__compressed_pair_elem.274" = type { %"struct.std::__1::__hash_node_base.266" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.281" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"class.std::__1::unordered_map.285" = type { %"class.std::__1::__hash_table.286" }
%"class.std::__1::__hash_table.286" = type <{ %"class.std::__1::unique_ptr.287", %"class.std::__1::__compressed_pair.297", %"class.std::__1::__compressed_pair.302", %"class.std::__1::__compressed_pair.305", [4 x i8] }>
%"class.std::__1::unique_ptr.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289", %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"struct.std::__1::__hash_node_base.290"** }
%"struct.std::__1::__hash_node_base.290" = type { %"struct.std::__1::__hash_node_base.290"* }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.std::__1::__bucket_list_deallocator.292" }
%"class.std::__1::__bucket_list_deallocator.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"struct.std::__1::__hash_node_base.290" }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"class.cc::MutatorHost" = type { i32 (...)** }
%"class.cc::RasterDarkModeFilter" = type opaque
%"class.std::__1::vector.311" = type { %"class.std::__1::__vector_base.312" }
%"class.std::__1::__vector_base.312" = type { %"struct.std::__1::pair.313"*, %"struct.std::__1::pair.313"*, %"class.std::__1::__compressed_pair.314" }
%"struct.std::__1::pair.313" = type opaque
%"class.std::__1::__compressed_pair.314" = type { %"struct.std::__1::__compressed_pair_elem.315" }
%"struct.std::__1::__compressed_pair_elem.315" = type { %"struct.std::__1::pair.313"* }
%"class.std::__1::unordered_map.319" = type { %"class.std::__1::__hash_table.320" }
%"class.std::__1::__hash_table.320" = type <{ %"class.std::__1::unique_ptr.321", %"class.std::__1::__compressed_pair.331", %"class.std::__1::__compressed_pair.336", %"class.std::__1::__compressed_pair.339", [4 x i8] }>
%"class.std::__1::unique_ptr.321" = type { %"class.std::__1::__compressed_pair.322" }
%"class.std::__1::__compressed_pair.322" = type { %"struct.std::__1::__compressed_pair_elem.323", %"struct.std::__1::__compressed_pair_elem.325" }
%"struct.std::__1::__compressed_pair_elem.323" = type { %"struct.std::__1::__hash_node_base.324"** }
%"struct.std::__1::__hash_node_base.324" = type { %"struct.std::__1::__hash_node_base.324"* }
%"struct.std::__1::__compressed_pair_elem.325" = type { %"class.std::__1::__bucket_list_deallocator.326" }
%"class.std::__1::__bucket_list_deallocator.326" = type { %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.331" = type { %"struct.std::__1::__compressed_pair_elem.332" }
%"struct.std::__1::__compressed_pair_elem.332" = type { %"struct.std::__1::__hash_node_base.324" }
%"class.std::__1::__compressed_pair.336" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.std::__1::__compressed_pair.339" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"class.std::__1::vector.343" = type { %"class.std::__1::__vector_base.344" }
%"class.std::__1::__vector_base.344" = type { %"class.base::OnceCallback"*, %"class.base::OnceCallback"*, %"class.std::__1::__compressed_pair.345" }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::__compressed_pair.345" = type { %"struct.std::__1::__compressed_pair_elem.346" }
%"struct.std::__1::__compressed_pair_elem.346" = type { %"class.base::OnceCallback"* }
%"struct.cc::LayerTreeHost::ScrollAnimationState" = type { i8, %"class.base::OnceCallback.350" }
%"class.base::OnceCallback.350" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.351 }
%class.scoped_refptr.351 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.352", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.352" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.std::__1::unique_ptr.353" = type { %"class.std::__1::__compressed_pair.354" }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.355" }
%"struct.std::__1::__compressed_pair_elem.355" = type { %"struct.cc::BeginMainFrameMetrics"* }
%"struct.cc::BeginMainFrameMetrics" = type <{ %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.base::TimeDelta", i8, [7 x i8] }>
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.cc::EventsMetricsManager" = type { %"class.std::__1::vector.359", %"class.std::__1::vector.366" }
%"class.std::__1::vector.359" = type { %"class.std::__1::__vector_base.360" }
%"class.std::__1::__vector_base.360" = type { %"class.cc::EventsMetricsManager::ScopedMonitorImpl"**, %"class.cc::EventsMetricsManager::ScopedMonitorImpl"**, %"class.std::__1::__compressed_pair.361" }
%"class.cc::EventsMetricsManager::ScopedMonitorImpl" = type opaque
%"class.std::__1::__compressed_pair.361" = type { %"struct.std::__1::__compressed_pair_elem.362" }
%"struct.std::__1::__compressed_pair_elem.362" = type { %"class.cc::EventsMetricsManager::ScopedMonitorImpl"** }
%"class.std::__1::vector.366" = type { %"class.std::__1::__vector_base.367" }
%"class.std::__1::__vector_base.367" = type { %"class.std::__1::unique_ptr.368"*, %"class.std::__1::unique_ptr.368"*, %"class.std::__1::__compressed_pair.369" }
%"class.std::__1::unique_ptr.368" = type { %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"class.cc::EventMetrics"* }
%"class.cc::EventMetrics" = type { i32, %"class.absl::optional.494", %"class.base::TickClock"*, [6 x %"class.base::TimeTicks"] }
%"class.absl::optional.494" = type { %"class.absl::optional_internal::optional_data.495" }
%"class.absl::optional_internal::optional_data.495" = type { %"class.absl::optional_internal::optional_data_base.496" }
%"class.absl::optional_internal::optional_data_base.496" = type { %"class.absl::optional_internal::optional_data_dtor_base.497" }
%"class.absl::optional_internal::optional_data_dtor_base.497" = type { i8, %union.anon.498 }
%union.anon.498 = type { i32 }
%"class.base::TickClock" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.369" = type { %"struct.std::__1::__compressed_pair_elem.370" }
%"struct.std::__1::__compressed_pair_elem.370" = type { %"class.std::__1::unique_ptr.368"* }
%"class.std::__1::unique_ptr.374" = type { %"class.std::__1::__compressed_pair.375" }
%"class.std::__1::__compressed_pair.375" = type { %"struct.std::__1::__compressed_pair_elem.376" }
%"struct.std::__1::__compressed_pair_elem.376" = type { %"class.gfx::DelegatedInkMetadata"* }
%"class.gfx::DelegatedInkMetadata" = type <{ %"class.gfx::PointF", double, i32, [4 x i8], %"class.base::TimeTicks", %"class.gfx::RectF", %"class.base::TimeTicks", i8, [7 x i8] }>
%"class.std::__1::vector.380" = type { %"class.std::__1::__vector_base.381" }
%"class.std::__1::__vector_base.381" = type { %"class.std::__1::unique_ptr.382"*, %"class.std::__1::unique_ptr.382"*, %"class.std::__1::__compressed_pair.383" }
%"class.std::__1::unique_ptr.382" = type opaque
%"class.std::__1::__compressed_pair.383" = type { %"struct.std::__1::__compressed_pair_elem.384" }
%"struct.std::__1::__compressed_pair_elem.384" = type { %"class.std::__1::unique_ptr.382"* }
%"class.base::flat_map.388" = type { %"class.base::internal::flat_tree.389" }
%"class.base::internal::flat_tree.389" = type { %"class.std::__1::vector.390" }
%"class.std::__1::vector.390" = type { %"class.std::__1::__vector_base.391" }
%"class.std::__1::__vector_base.391" = type { %"struct.std::__1::pair.392"*, %"struct.std::__1::pair.392"*, %"class.std::__1::__compressed_pair.393" }
%"struct.std::__1::pair.392" = type opaque
%"class.std::__1::__compressed_pair.393" = type { %"struct.std::__1::__compressed_pair_elem.394" }
%"struct.std::__1::__compressed_pair_elem.394" = type { %"struct.std::__1::pair.392"* }
%"class.base::WeakPtrFactory.398" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"struct.cc::Layer::Inputs" = type { %"class.std::__1::vector.399", %"class.gfx::Rect", %"class.gfx::Size", i32, i8, i32, %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", %"struct.cc::ElementId" }
%"class.std::__1::vector.399" = type { %"class.std::__1::__vector_base.400" }
%"class.std::__1::__vector_base.400" = type { %class.scoped_refptr.70*, %class.scoped_refptr.70*, %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %class.scoped_refptr.70* }
%"class.cc::TouchActionRegion" = type { %"class.base::flat_map.406" }
%"class.base::flat_map.406" = type { %"class.base::internal::flat_tree.407" }
%"class.base::internal::flat_tree.407" = type { %"class.std::__1::vector.408" }
%"class.std::__1::vector.408" = type { %"class.std::__1::__vector_base.409" }
%"class.std::__1::__vector_base.409" = type { %"struct.std::__1::pair.410"*, %"struct.std::__1::pair.410"*, %"class.std::__1::__compressed_pair.411" }
%"struct.std::__1::pair.410" = type opaque
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.412" }
%"struct.std::__1::__compressed_pair_elem.412" = type { %"struct.std::__1::pair.410"* }
%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.std::__1::unique_ptr.416" = type { %"class.std::__1::__compressed_pair.417" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.418" }
%"struct.std::__1::__compressed_pair_elem.418" = type { %"struct.cc::Layer::LayerTreeInputs"* }
%"struct.cc::Layer::LayerTreeInputs" = type { %"class.gfx::Rect", %"class.cc::PictureLayer"*, float, i32, i8, %"class.gfx::PointF", %"class.gfx::Transform", %"class.gfx::Point3F", %"class.viz::SubtreeCaptureId", i32, %"class.cc::FilterOperations", %"class.cc::FilterOperations", %"class.absl::optional.135", float, i32, %"class.gfx::ScrollOffset", %"class.gfx::Size", %"class.gfx::RoundedCornersF", %"class.base::RepeatingCallback", %"class.std::__1::vector.419" }
%"class.cc::PictureLayer" = type opaque
%"class.gfx::Point3F" = type { float, float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.gfx::RoundedCornersF" = type { float, float, float, float }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.std::__1::vector.419" = type { %"class.std::__1::__vector_base.420" }
%"class.std::__1::__vector_base.420" = type { %"class.std::__1::unique_ptr.421"*, %"class.std::__1::unique_ptr.421"*, %"class.std::__1::__compressed_pair.422" }
%"class.std::__1::unique_ptr.421" = type opaque
%"class.std::__1::__compressed_pair.422" = type { %"struct.std::__1::__compressed_pair_elem.423" }
%"struct.std::__1::__compressed_pair_elem.423" = type { %"class.std::__1::unique_ptr.421"* }
%"class.gfx::Vector2dF" = type { float, float }
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"struct.cc::LayerDebugInfo"* }
%"struct.cc::LayerDebugInfo" = type { %"class.std::__1::basic_string", i32, i32, %"class.std::__1::vector.439", %"class.std::__1::vector.439", %"class.std::__1::vector.446" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.435 }
%union.anon.435 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::vector.439" = type { %"class.std::__1::__vector_base.440" }
%"class.std::__1::__vector_base.440" = type { i8**, i8**, %"class.std::__1::__compressed_pair.441" }
%"class.std::__1::__compressed_pair.441" = type { %"struct.std::__1::__compressed_pair_elem.442" }
%"struct.std::__1::__compressed_pair_elem.442" = type { i8** }
%"class.std::__1::vector.446" = type { %"class.std::__1::__vector_base.447" }
%"class.std::__1::__vector_base.447" = type { %"struct.cc::LayerDebugInfo::Invalidation"*, %"struct.cc::LayerDebugInfo::Invalidation"*, %"class.std::__1::__compressed_pair.448" }
%"struct.cc::LayerDebugInfo::Invalidation" = type { %"class.gfx::Rect", i8*, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.448" = type { %"struct.std::__1::__compressed_pair_elem.449" }
%"struct.std::__1::__compressed_pair_elem.449" = type { %"struct.cc::LayerDebugInfo::Invalidation"* }
%"class.base::RepeatingCallback.456" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.viz::SurfaceRange" = type { %"class.absl::optional.457", %"class.viz::SurfaceId" }
%"class.absl::optional.457" = type { %"class.absl::optional_internal::optional_data.458" }
%"class.absl::optional_internal::optional_data.458" = type { %"class.absl::optional_internal::optional_data_base.459" }
%"class.absl::optional_internal::optional_data_base.459" = type { %"class.absl::optional_internal::optional_data_dtor_base.460" }
%"class.absl::optional_internal::optional_data_dtor_base.460" = type { i8, %union.anon.461 }
%union.anon.461 = type { %"class.viz::SurfaceId" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.absl::optional.462" = type { %"class.absl::optional_internal::optional_data.463" }
%"class.absl::optional_internal::optional_data.463" = type { %"class.absl::optional_internal::optional_data_base.464" }
%"class.absl::optional_internal::optional_data_base.464" = type { %"class.absl::optional_internal::optional_data_dtor_base.465" }
%"class.absl::optional_internal::optional_data_dtor_base.465" = type { i8, %union.anon.466 }
%union.anon.466 = type { i32 }
%"class.cc::DeadlinePolicy" = type { i32, %"class.absl::optional.462" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::trace_event::TraceArguments" = type { i8, [2 x i8], [2 x i8*], [2 x %"union.base::trace_event::TraceValue"] }
%"union.base::trace_event::TraceValue" = type { i64 }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.protozero::HeapBuffered" = type { %"class.protozero::ScatteredHeapBuffer", %"class.protozero::ScatteredStreamWriter", %"class.protozero::RootMessage" }
%"class.protozero::ScatteredHeapBuffer" = type { %"class.protozero::ScatteredStreamWriter::Delegate", i64, i64, %"class.protozero::ScatteredStreamWriter"*, %"class.std::__1::vector.507", %"class.protozero::ScatteredHeapBuffer::Slice" }
%"class.protozero::ScatteredStreamWriter::Delegate" = type { i32 (...)** }
%"class.std::__1::vector.507" = type { %"class.std::__1::__vector_base.508" }
%"class.std::__1::__vector_base.508" = type { %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.protozero::ScatteredHeapBuffer::Slice"*, %"class.std::__1::__compressed_pair.515" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.516" }
%"struct.std::__1::__compressed_pair_elem.516" = type { %"class.protozero::ScatteredHeapBuffer::Slice"* }
%"class.protozero::ScatteredHeapBuffer::Slice" = type { %"class.std::__1::unique_ptr.509", i64, i64 }
%"class.std::__1::unique_ptr.509" = type { %"class.std::__1::__compressed_pair.510" }
%"class.std::__1::__compressed_pair.510" = type { %"struct.std::__1::__compressed_pair_elem.511" }
%"struct.std::__1::__compressed_pair_elem.511" = type { i8* }
%"class.protozero::ScatteredStreamWriter" = type { %"class.protozero::ScatteredStreamWriter::Delegate"*, %"struct.protozero::ContiguousMemoryRange", i8*, i64 }
%"struct.protozero::ContiguousMemoryRange" = type { i8*, i8* }
%"class.protozero::RootMessage" = type { %"class.perfetto::protos::pbzero::DebugAnnotation.base", %"class.protozero::MessageArena" }
%"class.perfetto::protos::pbzero::DebugAnnotation.base" = type { %"class.protozero::Message.base" }
%"class.protozero::Message.base" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8 }>
%"class.protozero::Message" = type <{ %"class.protozero::ScatteredStreamWriter"*, %"class.protozero::MessageArena"*, %"class.protozero::Message"*, i8*, i32, i32, i8, [7 x i8] }>
%"class.protozero::MessageArena" = type { %"class.std::__1::list" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.520" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.520" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"class.cc::LayerImpl" = type <{ i32 (...)**, i32, [4 x i8], %"class.cc::LayerTreeImpl"*, i8, [3 x i8], %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::Size", %"class.gfx::Size", i16, [2 x i8], %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.cc::ElementId", %"class.gfx::Rect", %"struct.cc::DrawProperties", %"struct.cc::PerformanceProperties", [4 x i8], %"class.std::__1::unique_ptr.430", %"class.std::__1::unique_ptr.470", i8, [7 x i8] }>
%"struct.cc::DrawProperties" = type { %"class.gfx::Transform", %"class.gfx::Transform", %"class.cc::Occlusion", float, i8, i8, i8, %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::Rect", %"class.gfx::MaskFilterInfo" }
%"struct.cc::PerformanceProperties" = type { i32, float, %"class.gfx::Transform" }
%"class.std::__1::unique_ptr.470" = type { %"class.std::__1::__compressed_pair.471" }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"class.cc::Region"* }
%"class.cc::SurfaceLayerImpl" = type <{ %"class.cc::LayerImpl.base", [7 x i8], %"class.base::RepeatingCallback.456", %"class.viz::SurfaceRange", %"class.absl::optional.462", i8, i8, i8, i8, i8, [3 x i8] }>
%"class.cc::LayerImpl.base" = type <{ i32 (...)**, i32, [4 x i8], %"class.cc::LayerTreeImpl"*, i8, [3 x i8], %"class.gfx::Size", %"class.gfx::Vector2dF", %"class.gfx::Size", %"class.gfx::Size", i16, [2 x i8], %"class.cc::Region", %"class.cc::TouchActionRegion", %"class.cc::Region", i32, i32, i32, i32, i32, i32, i32, [4 x i8], %"struct.cc::ElementId", %"class.gfx::Rect", %"struct.cc::DrawProperties", %"struct.cc::PerformanceProperties", [4 x i8], %"class.std::__1::unique_ptr.430", %"class.std::__1::unique_ptr.470", i8 }>
%"class.std::__1::vector.485" = type opaque
%class.sk_sp.486 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.487", [7 x i8] }>
%"struct.std::__1::atomic.487" = type { %"struct.std::__1::__atomic_base.488" }
%"struct.std::__1::__atomic_base.488" = type { %"struct.std::__1::__cxx_atomic_impl.489" }
%"struct.std::__1::__cxx_atomic_impl.489" = type { %"struct.std::__1::__cxx_atomic_base_impl.490" }
%"struct.std::__1::__cxx_atomic_base_impl.490" = type { i8 }
%"class.cc::MicroBenchmark" = type { i32 (...)**, %"class.base::OnceCallback.491", i8, i8, i32 }
%"class.base::OnceCallback.491" = type { %"class.base::internal::CallbackBase" }

$_ZN20trace_event_internal13AddTraceEventIRA13_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_ = comdat any

@_ZTVN2cc12SurfaceLayerE = hidden unnamed_addr constant { [19 x i8*] } { [19 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::Layer"*, i32)* @_ZN2cc5Layer18SetBackgroundColorEj to i8*), i8* bitcast (void (%"class.cc::Layer"*, %"class.gfx::Rect"*)* @_ZN2cc5Layer19SetNeedsDisplayRectERKN3gfx4RectE to i8*), i8* bitcast (void (%"class.cc::Layer"*, float)* @_ZN2cc5Layer10SetOpacityEf to i8*), i8* bitcast (i1 (%"class.cc::Layer"*)* @_ZNK2cc5Layer11HitTestableEv to i8*), i8* bitcast (i1 (%"class.cc::Layer"*)* @_ZNK2cc5Layer26IsScrollbarLayerForTestingEv to i8*), i8* bitcast (void (%"class.cc::Layer"*, %"class.gfx::Rect"*, %"class.std::__1::vector.485"*)* @_ZN2cc5Layer14CaptureContentERKN3gfx4RectEPNSt3__16vectorINS_8NodeInfoENS5_9allocatorIS7_EEEE to i8*), i8* bitcast (void (%class.sk_sp.486*, %"class.cc::Layer"*)* @_ZNK2cc5Layer10GetPictureEv to i8*), i8* bitcast (void (%"class.cc::Layer"*, %"class.cc::MicroBenchmark"*)* @_ZN2cc5Layer17RunMicroBenchmarkEPNS_14MicroBenchmarkE to i8*), i8* bitcast (%"class.cc::LayerImpl"* (%"class.cc::SurfaceLayer"*, %"class.cc::LayerTreeImpl"*)* @_ZN2cc12SurfaceLayer15CreateLayerImplEPNS_13LayerTreeImplE to i8*), i8* bitcast (void (%"class.cc::SurfaceLayer"*, %"class.cc::LayerImpl"*)* @_ZN2cc12SurfaceLayer16PushPropertiesToEPNS_9LayerImplE to i8*), i8* bitcast (i1 (%"class.cc::Layer"*)* @_ZN2cc5Layer6UpdateEv to i8*), i8* bitcast (i1 (%"class.cc::Layer"*)* @_ZN2cc5Layer28IsSnappedToPixelGridInTargetEv to i8*), i8* bitcast (void (%"class.cc::SurfaceLayer"*, %"class.cc::LayerTreeHost"*)* @_ZN2cc12SurfaceLayer16SetLayerTreeHostEPNS_13LayerTreeHostE to i8*), i8* bitcast (i1 (%"class.cc::Layer"*)* @_ZNK2cc5Layer29OpacityCanAnimateOnImplThreadEv to i8*), i8* bitcast (void (%"class.cc::SurfaceLayer"*)* @_ZN2cc12SurfaceLayerD2Ev to i8*), i8* bitcast (void (%"class.cc::SurfaceLayer"*)* @_ZN2cc12SurfaceLayerD0Ev to i8*), i8* bitcast (i1 (%"class.cc::SurfaceLayer"*)* @_ZNK2cc12SurfaceLayer18HasDrawableContentEv to i8*)] }, align 8
@_ZN4base11trace_event16CategoryRegistry11categories_E = external global [300 x %"struct.base::trace_event::TraceCategory"], align 16
@.str = private unnamed_addr constant [26 x i8] c"LocalSurfaceId.Embed.Flow\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"step\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"SetSurfaceId\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"surface_id\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"SurfaceLayer::PushPropertiesTo\00", align 1

@_ZN2cc12SurfaceLayerC1Ev = hidden unnamed_addr alias void (%"class.cc::SurfaceLayer"*), void (%"class.cc::SurfaceLayer"*)* @_ZN2cc12SurfaceLayerC2Ev
@_ZN2cc12SurfaceLayerC1EN4base17RepeatingCallbackIFvbPNS1_13WaitableEventEEEE = hidden unnamed_addr alias void (%"class.cc::SurfaceLayer"*, %"class.base::RepeatingCallback.456"*), void (%"class.cc::SurfaceLayer"*, %"class.base::RepeatingCallback.456"*)* @_ZN2cc12SurfaceLayerC2EN4base17RepeatingCallbackIFvbPNS1_13WaitableEventEEEE
@_ZN2cc12SurfaceLayerD1Ev = hidden unnamed_addr alias void (%"class.cc::SurfaceLayer"*), void (%"class.cc::SurfaceLayer"*)* @_ZN2cc12SurfaceLayerD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.cc::SurfaceLayer"* @_ZN2cc12SurfaceLayer6CreateEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 336) #9
  %2 = bitcast i8* %1 to %"class.cc::SurfaceLayer"*
  %3 = bitcast i8* %1 to %"class.cc::Layer"*
  tail call void @_ZN2cc5LayerC2Ev(%"class.cc::Layer"* nonnull %3) #10
  %4 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2cc12SurfaceLayerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 232
  %6 = bitcast i8* %5 to %"class.base::internal::BindStateBase"**
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 240
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds i8, i8* %1, i64 248
  %9 = bitcast i8* %8 to %"class.viz::SurfaceRange"*
  tail call void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"* %9) #10
  %10 = getelementptr inbounds i8, i8* %1, i64 320
  store i8 1, i8* %10, align 4
  %11 = getelementptr inbounds i8, i8* %1, i64 324
  %12 = bitcast i8* %11 to i64*
  store i64 0, i64* %12, align 4
  %13 = getelementptr inbounds i8, i8* %1, i64 8
  %14 = bitcast i8* %13 to %"class.base::subtle::RefCountedBase"*
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %14) #10
  ret %"class.cc::SurfaceLayer"* %2
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden nonnull %"class.cc::SurfaceLayer"* @_ZN2cc12SurfaceLayer6CreateEN4base17RepeatingCallbackIFvbPNS1_13WaitableEventEEEE(%"class.base::RepeatingCallback.456"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.base::RepeatingCallback.456", align 8
  %3 = tail call i8* @_Znwm(i64 336) #9
  %4 = bitcast i8* %3 to %"class.cc::SurfaceLayer"*
  %5 = getelementptr inbounds %"class.base::RepeatingCallback.456", %"class.base::RepeatingCallback.456"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = bitcast %"class.base::RepeatingCallback.456"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %5, align 8
  %8 = bitcast i8* %3 to %"class.cc::Layer"*
  tail call void @_ZN2cc5LayerC2Ev(%"class.cc::Layer"* nonnull %8) #10
  %9 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2cc12SurfaceLayerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 232
  %11 = getelementptr inbounds %"class.base::RepeatingCallback.456", %"class.base::RepeatingCallback.456"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = bitcast i8* %10 to i64*
  store i64 %7, i64* %12, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %11, align 8
  %13 = getelementptr inbounds i8, i8* %3, i64 240
  store i8 0, i8* %13, align 8
  %14 = getelementptr inbounds i8, i8* %3, i64 248
  %15 = bitcast i8* %14 to %"class.viz::SurfaceRange"*
  tail call void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"* %15) #10
  %16 = getelementptr inbounds i8, i8* %3, i64 320
  store i8 1, i8* %16, align 4
  %17 = getelementptr inbounds i8, i8* %3, i64 324
  %18 = bitcast i8* %17 to i64*
  store i64 0, i64* %18, align 4
  %19 = getelementptr inbounds i8, i8* %3, i64 8
  %20 = bitcast i8* %19 to %"class.base::subtle::RefCountedBase"*
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %20) #10
  %21 = getelementptr inbounds %"class.base::RepeatingCallback.456", %"class.base::RepeatingCallback.456"* %2, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %21) #10
  ret %"class.cc::SurfaceLayer"* %4
}

; Function Attrs: nounwind
declare void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayerC2Ev(%"class.cc::SurfaceLayer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5LayerC2Ev(%"class.cc::Layer"* %2) #10
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2cc12SurfaceLayerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %4, align 8
  %5 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 2
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  tail call void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"* %6) #10
  %7 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %7, align 4
  %8 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = bitcast i32* %8 to i64*
  store i64 0, i64* %9, align 4
  ret void
}

declare void @_ZN2cc5LayerC2Ev(%"class.cc::Layer"*) unnamed_addr #3

declare void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayerC2EN4base17RepeatingCallbackIFvbPNS1_13WaitableEventEEEE(%"class.cc::SurfaceLayer"*, %"class.base::RepeatingCallback.456"* nocapture) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5LayerC2Ev(%"class.cc::Layer"* %3) #10
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2cc12SurfaceLayerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 1
  %6 = getelementptr inbounds %"class.base::RepeatingCallback.456", %"class.base::RepeatingCallback.456"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = bitcast %"class.base::RepeatingCallback.456"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.base::RepeatingCallback.456"* %5 to i64*
  store i64 %8, i64* %9, align 8
  store %"class.base::internal::BindStateBase"* null, %"class.base::internal::BindStateBase"** %6, align 8
  %10 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 2
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  tail call void @_ZN3viz12SurfaceRangeC1Ev(%"class.viz::SurfaceRange"* %11) #10
  %12 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %12, align 4
  %13 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 1, i32 0
  %14 = bitcast i32* %13 to i64*
  store i64 0, i64* %14, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayerD2Ev(%"class.cc::SurfaceLayer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2cc12SurfaceLayerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #10
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5LayerD2Ev(%"class.cc::Layer"* %4) #10
  ret void
}

; Function Attrs: nounwind
declare void @_ZN2cc5LayerD2Ev(%"class.cc::Layer"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayerD0Ev(%"class.cc::SurfaceLayer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [19 x i8*] }, { [19 x i8*] }* @_ZTVN2cc12SurfaceLayerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 1, i32 0, i32 0
  tail call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* %3) #10
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5LayerD2Ev(%"class.cc::Layer"* %4) #10
  %5 = bitcast %"class.cc::SurfaceLayer"* %0 to i8*
  tail call void @_ZdlPv(i8* %5) #9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer12SetSurfaceIdERKN3viz9SurfaceIdERKNS_14DeadlinePolicyE(%"class.cc::SurfaceLayer"*, %"class.viz::SurfaceId"* dereferenceable(32), %"class.cc::DeadlinePolicy"* nocapture readonly dereferenceable(12)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.viz::SurfaceRange", align 8
  %6 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  %7 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1
  %8 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %7, i64 0, i32 0, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %47

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1, i32 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %15, %17
  br i1 %18, label %19, label %47

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1, i32 1, i32 0
  %21 = load i32, i32* %20, align 8
  %22 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %21, %23
  br i1 %24, label %25, label %47

25:                                               ; preds = %19
  %26 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1, i32 1, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %31, label %47

31:                                               ; preds = %25
  %32 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1, i32 1, i32 2, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = icmp eq i64 %33, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1, i32 1, i32 2, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = icmp eq i64 %39, %41
  br i1 %42, label %43, label %47

43:                                               ; preds = %37
  %44 = getelementptr inbounds %"class.cc::DeadlinePolicy", %"class.cc::DeadlinePolicy"* %2, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %149, label %47

47:                                               ; preds = %3, %31, %19, %25, %13, %43, %37
  %48 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1
  %49 = getelementptr inbounds %"class.viz::LocalSurfaceId", %"class.viz::LocalSurfaceId"* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %84, label %52

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %84, label %56

56:                                               ; preds = %52
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %56
  %61 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %84, label %64

64:                                               ; preds = %60, %56
  %65 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), align 16
  %66 = and i8 %65, 25
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %84, label %68, !prof !2

68:                                               ; preds = %64
  %69 = tail call i64 @_ZNK3viz14LocalSurfaceId15persistent_hashEv(%"class.viz::LocalSurfaceId"* %48) #10
  %70 = shl i64 %69, 1
  %71 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #10
  call void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %4, %"class.viz::SurfaceId"* %1) #10
  %72 = call i64 @_ZN20trace_event_internal13AddTraceEventIRA13_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* null, i64 0, i32 4480, i64 %70, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), [13 x i8]* nonnull dereferenceable(13) @.str.2, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), %"class.std::__1::basic_string"* nonnull dereferenceable(24) %4)
  %73 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %74 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %73, i64 0, i32 1, i32 0
  %75 = load i8, i8* %74, align 1
  %76 = icmp slt i8 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %68
  %78 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  call void @_ZdlPv(i8* %79) #9
  br label %80

80:                                               ; preds = %68, %77
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #10
  %81 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), align 16
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %84, label %83

83:                                               ; preds = %80
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 230, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i64 %72) #10
  br label %84

84:                                               ; preds = %60, %64, %47, %52, %83, %80
  %85 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  %86 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 4
  %87 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %86, align 8
  %88 = icmp eq %"class.cc::LayerTreeHost"* %87, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %84
  %90 = call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %6) #10
  br i1 %90, label %91, label %93

91:                                               ; preds = %89
  %92 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %86, align 8
  call void @_ZN2cc13LayerTreeHost18RemoveSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"* %92, %"class.viz::SurfaceRange"* dereferenceable(72) %6) #10
  br label %93

93:                                               ; preds = %84, %91, %89
  %94 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %94) #10
  %95 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %6, i64 0, i32 0
  call void @_ZN3viz12SurfaceRangeC1ERKN4absl8optionalINS_9SurfaceIdEEERKS3_(%"class.viz::SurfaceRange"* nonnull %5, %"class.absl::optional.457"* dereferenceable(40) %95, %"class.viz::SurfaceId"* dereferenceable(32) %1) #10
  %96 = load i8, i8* %94, align 8, !range !3
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %116, label %98

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %100 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %101 = load i8, i8* %100, align 8, !range !3
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %107, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %105 = bitcast %"class.viz::SurfaceId"* %104 to i8*
  %106 = bitcast %"class.viz::SurfaceId"* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 32, i1 false) #10
  br label %118

107:                                              ; preds = %98
  %108 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %109 = bitcast %"class.viz::SurfaceId"* %99 to <4 x i32>*
  %110 = load <4 x i32>, <4 x i32>* %109, align 8
  %111 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %110, <4 x i32>* %111, align 4
  %112 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %113 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %114 = bitcast %"class.base::UnguessableToken"* %112 to i8*
  %115 = bitcast %"class.base::UnguessableToken"* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %114, i8* align 8 %115, i64 16, i1 false) #10
  store i8 1, i8* %100, align 8
  br label %118

116:                                              ; preds = %93
  %117 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %117, align 8
  br label %118

118:                                              ; preds = %103, %107, %116
  %119 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 1
  %120 = bitcast %"class.viz::SurfaceId"* %7 to i8*
  %121 = bitcast %"class.viz::SurfaceId"* %119 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %120, i8* align 8 %121, i64 32, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %94) #10
  %122 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %86, align 8
  %123 = icmp eq %"class.cc::LayerTreeHost"* %122, null
  br i1 %123, label %128, label %124

124:                                              ; preds = %118
  %125 = call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %6) #10
  br i1 %125, label %126, label %128

126:                                              ; preds = %124
  %127 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %86, align 8
  call void @_ZN2cc13LayerTreeHost15AddSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"* %127, %"class.viz::SurfaceRange"* dereferenceable(72) %6) #10
  br label %128

128:                                              ; preds = %118, %126, %124
  %129 = call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %6) #10
  br i1 %129, label %133, label %130

130:                                              ; preds = %128
  %131 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %132 = bitcast i8* %131 to i64*
  store i64 1, i64* %132, align 8
  br label %143

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.cc::DeadlinePolicy", %"class.cc::DeadlinePolicy"* %2, i64 0, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %143, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %"class.cc::DeadlinePolicy", %"class.cc::DeadlinePolicy"* %2, i64 0, i32 1
  %139 = bitcast %"class.absl::optional.462"* %138 to i64*
  %140 = load i64, i64* %139, align 4
  %141 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5
  %142 = bitcast %"class.absl::optional.462"* %141 to i64*
  store i64 %140, i64* %142, align 8
  br label %143

143:                                              ; preds = %133, %137, %130
  %144 = bitcast %"class.cc::SurfaceLayer"* %0 to i1 (%"class.cc::SurfaceLayer"*)***
  %145 = load i1 (%"class.cc::SurfaceLayer"*)**, i1 (%"class.cc::SurfaceLayer"*)*** %144, align 8
  %146 = getelementptr inbounds i1 (%"class.cc::SurfaceLayer"*)*, i1 (%"class.cc::SurfaceLayer"*)** %145, i64 16
  %147 = load i1 (%"class.cc::SurfaceLayer"*)*, i1 (%"class.cc::SurfaceLayer"*)** %146, align 8
  %148 = call zeroext i1 %147(%"class.cc::SurfaceLayer"* %0) #10
  call void @_ZN2cc5Layer18UpdateDrawsContentEb(%"class.cc::Layer"* %85, i1 zeroext %148) #10
  call void @_ZN2cc5Layer14SetNeedsCommitEv(%"class.cc::Layer"* %85) #10
  br label %149

149:                                              ; preds = %43, %143
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN20trace_event_internal13AddTraceEventIRA13_KcNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEN4base11trace_event16TraceEventHandleEcPKhPS1_SG_yjySG_OT_SG_OT0_(i8 signext, i8*, i8*, i8*, i64, i32, i64, i8*, [13 x i8]* dereferenceable(13), i8*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #6 comdat {
  %12 = alloca %"class.base::trace_event::TraceArguments", align 8
  %13 = alloca %"class.base::TimeTicks", align 8
  %14 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #10
  %15 = bitcast %"class.base::TimeTicks"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  %16 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %13, i64 0, i32 0, i32 0
  %17 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #10
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #10
  %19 = bitcast %"class.base::trace_event::TraceArguments"* %12 to i64*
  store i64 -6148914691247241726, i64* %19, align 8
  %20 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 0
  store i8* %7, i8** %20, align 8
  %21 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 2, i64 1
  store i8* %9, i8** %21, align 8
  %22 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 0
  %23 = getelementptr inbounds [13 x i8], [13 x i8]* %8, i64 0, i64 0
  %24 = bitcast %"union.base::trace_event::TraceValue"* %22 to i8**
  store i8* %23, i8** %24, align 8
  %25 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 1
  %26 = bitcast %"class.std::__1::basic_string"* %10 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %27 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %26, i64 0, i32 1, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load i8*, i8** %30, align 8
  %32 = bitcast %"class.std::__1::basic_string"* %10 to i8*
  %33 = select i1 %29, i8* %31, i8* %32
  %34 = bitcast %"union.base::trace_event::TraceValue"* %25 to i8**
  store i8* %33, i8** %34, align 8
  %35 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext %0, i8* %1, i8* %2, i8* %3, i64 %4, i64 %6, i32 %14, %"class.base::TimeTicks"* nonnull dereferenceable(8) %13, %"class.base::trace_event::TraceArguments"* nonnull %12, i32 %5) #10
  %36 = load i8, i8* %18, align 8
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %72, label %38

38:                                               ; preds = %11, %67
  %39 = phi i64 [ %68, %67 ], [ 0, %11 ]
  %40 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 1, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 8
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %45 = bitcast %"union.base::trace_event::TraceValue"* %44 to %"class.base::trace_event::ConvertableToTraceFormat"**
  %46 = load %"class.base::trace_event::ConvertableToTraceFormat"*, %"class.base::trace_event::ConvertableToTraceFormat"** %45, align 8
  %47 = icmp eq %"class.base::trace_event::ConvertableToTraceFormat"* %46, null
  br i1 %47, label %67, label %48

48:                                               ; preds = %43
  %49 = bitcast %"class.base::trace_event::ConvertableToTraceFormat"* %46 to void (%"class.base::trace_event::ConvertableToTraceFormat"*)***
  %50 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)**, void (%"class.base::trace_event::ConvertableToTraceFormat"*)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %50, i64 1
  %52 = load void (%"class.base::trace_event::ConvertableToTraceFormat"*)*, void (%"class.base::trace_event::ConvertableToTraceFormat"*)** %51, align 8
  call void %52(%"class.base::trace_event::ConvertableToTraceFormat"* nonnull %46) #10
  %53 = load i8, i8* %40, align 1
  br label %54

54:                                               ; preds = %48, %38
  %55 = phi i8 [ %41, %38 ], [ %53, %48 ]
  %56 = icmp eq i8 %55, 9
  br i1 %56, label %57, label %67

57:                                               ; preds = %54
  %58 = getelementptr inbounds %"class.base::trace_event::TraceArguments", %"class.base::trace_event::TraceArguments"* %12, i64 0, i32 3, i64 %39
  %59 = bitcast %"union.base::trace_event::TraceValue"* %58 to %"class.protozero::HeapBuffered"**
  %60 = load %"class.protozero::HeapBuffered"*, %"class.protozero::HeapBuffered"** %59, align 8
  %61 = icmp eq %"class.protozero::HeapBuffered"* %60, null
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 2, i32 1
  call void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"* %63) #10
  %64 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 1
  call void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"* %64) #10
  %65 = getelementptr inbounds %"class.protozero::HeapBuffered", %"class.protozero::HeapBuffered"* %60, i64 0, i32 0
  call void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"* %65) #10
  %66 = bitcast %"class.protozero::HeapBuffered"* %60 to i8*
  call void @_ZdlPv(i8* %66) #9
  br label %67

67:                                               ; preds = %62, %57, %54, %43
  %68 = add nuw nsw i64 %39, 1
  %69 = load i8, i8* %18, align 8
  %70 = zext i8 %69 to i64
  %71 = icmp ult i64 %68, %70
  br i1 %71, label %38, label %72

72:                                               ; preds = %67, %11
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  ret i64 %35
}

declare void @_ZNK3viz9SurfaceId8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.viz::SurfaceId"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"*) local_unnamed_addr #3

declare void @_ZN2cc13LayerTreeHost18RemoveSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"*, %"class.viz::SurfaceRange"* dereferenceable(72)) local_unnamed_addr #3

declare void @_ZN3viz12SurfaceRangeC1ERKN4absl8optionalINS_9SurfaceIdEEERKS3_(%"class.viz::SurfaceRange"*, %"class.absl::optional.457"* dereferenceable(40), %"class.viz::SurfaceId"* dereferenceable(32)) unnamed_addr #3

declare void @_ZN2cc13LayerTreeHost15AddSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"*, %"class.viz::SurfaceRange"* dereferenceable(72)) local_unnamed_addr #3

declare void @_ZN2cc5Layer18UpdateDrawsContentEb(%"class.cc::Layer"*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2cc5Layer14SetNeedsCommitEv(%"class.cc::Layer"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer27SetOldestAcceptableFallbackERKN3viz9SurfaceIdE(%"class.cc::SurfaceLayer"*, %"class.viz::SurfaceId"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.viz::SurfaceRange", align 8
  %4 = alloca %"class.absl::optional.457", align 8
  %5 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  %6 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 8, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %45, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %15, label %45

15:                                               ; preds = %9
  %16 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %21, label %45

21:                                               ; preds = %15
  %22 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %23, %25
  br i1 %26, label %27, label %45

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %29, %31
  br i1 %32, label %33, label %45

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %35, %37
  br i1 %38, label %39, label %45

39:                                               ; preds = %33
  %40 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = icmp eq i64 %41, %43
  br i1 %44, label %127, label %45

45:                                               ; preds = %9, %33, %21, %27, %15, %2, %39
  %46 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  %47 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 4
  %48 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %47, align 8
  %49 = icmp eq %"class.cc::LayerTreeHost"* %48, null
  br i1 %49, label %54, label %50

50:                                               ; preds = %45
  %51 = tail call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %5) #10
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %47, align 8
  tail call void @_ZN2cc13LayerTreeHost18RemoveSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"* %53, %"class.viz::SurfaceRange"* dereferenceable(72) %5) #10
  br label %54

54:                                               ; preds = %45, %52, %50
  %55 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %55) #10
  %56 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %56) #10
  %57 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %64

60:                                               ; preds = %54
  %61 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %91, label %64

64:                                               ; preds = %60, %54
  %65 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 0
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %91, label %68

68:                                               ; preds = %64
  %69 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 1
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %91, label %72

72:                                               ; preds = %68
  %73 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %72
  %77 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %76, %72
  store i8 1, i8* %56, align 8
  %81 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  store i32 %58, i32* %81, align 8
  %82 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 1
  %83 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %82, align 4
  %85 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0
  store i32 %66, i32* %85, align 8
  %86 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 1
  store i32 %70, i32* %86, align 4
  %87 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %88 = getelementptr inbounds %"class.viz::SurfaceId", %"class.viz::SurfaceId"* %1, i64 0, i32 1, i32 2
  %89 = bitcast %"class.base::UnguessableToken"* %87 to i8*
  %90 = bitcast %"class.base::UnguessableToken"* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 16, i1 false) #10
  br label %94

91:                                               ; preds = %76, %64, %68, %60
  store i8 0, i8* %56, align 8
  %92 = getelementptr inbounds %"class.absl::optional.457", %"class.absl::optional.457"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %93 = bitcast %union.anon.461* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %93, i8 0, i64 32, i1 false) #10
  br label %94

94:                                               ; preds = %91, %80
  %95 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 1
  call void @_ZN3viz12SurfaceRangeC1ERKN4absl8optionalINS_9SurfaceIdEEERKS3_(%"class.viz::SurfaceRange"* nonnull %3, %"class.absl::optional.457"* nonnull dereferenceable(40) %4, %"class.viz::SurfaceId"* dereferenceable(32) %95) #10
  %96 = load i8, i8* %55, align 8, !range !3
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %115, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %100 = load i8, i8* %6, align 8, !range !3
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %106, label %102

102:                                              ; preds = %98
  %103 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %104 = bitcast %"class.viz::SurfaceId"* %103 to i8*
  %105 = bitcast %"class.viz::SurfaceId"* %99 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 32, i1 false) #10
  br label %116

106:                                              ; preds = %98
  %107 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %108 = bitcast %"class.viz::SurfaceId"* %99 to <4 x i32>*
  %109 = load <4 x i32>, <4 x i32>* %108, align 8
  %110 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> %109, <4 x i32>* %110, align 4
  %111 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %112 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2
  %113 = bitcast %"class.base::UnguessableToken"* %111 to i8*
  %114 = bitcast %"class.base::UnguessableToken"* %112 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %113, i8* align 8 %114, i64 16, i1 false) #10
  store i8 1, i8* %6, align 8
  br label %116

115:                                              ; preds = %94
  store i8 0, i8* %6, align 8
  br label %116

116:                                              ; preds = %102, %106, %115
  %117 = getelementptr inbounds %"class.viz::SurfaceRange", %"class.viz::SurfaceRange"* %3, i64 0, i32 1
  %118 = bitcast %"class.viz::SurfaceId"* %95 to i8*
  %119 = bitcast %"class.viz::SurfaceId"* %117 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 32, i1 false) #10
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %56) #10
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %55) #10
  %120 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %47, align 8
  %121 = icmp eq %"class.cc::LayerTreeHost"* %120, null
  br i1 %121, label %126, label %122

122:                                              ; preds = %116
  %123 = call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %5) #10
  br i1 %123, label %124, label %126

124:                                              ; preds = %122
  %125 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %47, align 8
  call void @_ZN2cc13LayerTreeHost15AddSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"* %125, %"class.viz::SurfaceRange"* dereferenceable(72) %5) #10
  br label %126

126:                                              ; preds = %116, %124, %122
  call void @_ZN2cc5Layer14SetNeedsCommitEv(%"class.cc::Layer"* %46) #10
  br label %127

127:                                              ; preds = %39, %126
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer29SetStretchContentToFillBoundsEb(%"class.cc::SurfaceLayer"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 6
  %4 = load i8, i8* %3, align 8, !range !3
  %5 = zext i8 %4 to i32
  %6 = zext i1 %1 to i32
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %3, align 8
  %10 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5Layer22SetNeedsPushPropertiesEv(%"class.cc::Layer"* %10) #10
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

declare void @_ZN2cc5Layer22SetNeedsPushPropertiesEv(%"class.cc::Layer"*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer21SetSurfaceHitTestableEb(%"class.cc::SurfaceLayer"* nocapture, i1 zeroext) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 7
  %4 = load i8, i8* %3, align 1, !range !3
  %5 = zext i8 %4 to i32
  %6 = zext i1 %1 to i32
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %3, align 1
  br label %10

10:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer23SetHasPointerEventsNoneEb(%"class.cc::SurfaceLayer"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 8
  %4 = load i8, i8* %3, align 2, !range !3
  %5 = zext i8 %4 to i32
  %6 = zext i1 %1 to i32
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = zext i1 %1 to i8
  store i8 %9, i8* %3, align 2
  %10 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5Layer22SetNeedsPushPropertiesEv(%"class.cc::Layer"* %10) #10
  tail call void @_ZN2cc5Layer14SetNeedsCommitEv(%"class.cc::Layer"* %10) #10
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2cc12SurfaceLayer15SetIsReflectionEb(%"class.cc::SurfaceLayer"* nocapture, i1 zeroext) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 9
  store i8 1, i8* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer18SetMayContainVideoEb(%"class.cc::SurfaceLayer"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = zext i1 %1 to i8
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 2
  store i8 %3, i8* %4, align 8
  %5 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5Layer14SetNeedsCommitEv(%"class.cc::Layer"* %5) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::LayerImpl"* @_ZN2cc12SurfaceLayer15CreateLayerImplEPNS_13LayerTreeImplE(%"class.cc::SurfaceLayer"*, %"class.cc::LayerTreeImpl"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::RepeatingCallback.456", align 8
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 5, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.base::RepeatingCallback.456", %"class.base::RepeatingCallback.456"* %3, i64 0, i32 0
  %7 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 1, i32 0
  call void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"* nonnull %6, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8) %7) #10
  %8 = call %"class.cc::SurfaceLayerImpl"* @_ZN2cc16SurfaceLayerImpl6CreateEPNS_13LayerTreeImplEiN4base17RepeatingCallbackIFvbPNS3_13WaitableEventEEEE(%"class.cc::LayerTreeImpl"* %1, i32 %5, %"class.base::RepeatingCallback.456"* nonnull %3) #10
  %9 = getelementptr inbounds %"class.base::RepeatingCallback.456", %"class.base::RepeatingCallback.456"* %3, i64 0, i32 0, i32 0
  call void @_ZN4base8internal12CallbackBaseD2Ev(%"class.base::internal::CallbackBase"* nonnull %9) #10
  %10 = bitcast %"class.cc::SurfaceLayerImpl"* %8 to %"class.cc::LayerImpl"*
  ret %"class.cc::LayerImpl"* %10
}

declare %"class.cc::SurfaceLayerImpl"* @_ZN2cc16SurfaceLayerImpl6CreateEPNS_13LayerTreeImplEiN4base17RepeatingCallbackIFvbPNS3_13WaitableEventEEEE(%"class.cc::LayerTreeImpl"*, i32, %"class.base::RepeatingCallback.456"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc12SurfaceLayer18HasDrawableContentEv(%"class.cc::SurfaceLayer"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  %3 = tail call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %2) #10
  br i1 %3, label %4, label %7

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  %6 = tail call zeroext i1 @_ZNK2cc5Layer18HasDrawableContentEv(%"class.cc::Layer"* %5) #10
  br label %7

7:                                                ; preds = %4, %1
  %8 = phi i1 [ false, %1 ], [ %6, %4 ]
  ret i1 %8
}

declare zeroext i1 @_ZNK2cc5Layer18HasDrawableContentEv(%"class.cc::Layer"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer16SetLayerTreeHostEPNS_13LayerTreeHostE(%"class.cc::SurfaceLayer"*, %"class.cc::LayerTreeHost"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0, i32 4
  %5 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %4, align 8
  %6 = icmp eq %"class.cc::LayerTreeHost"* %5, %1
  br i1 %6, label %22, label %7

7:                                                ; preds = %2
  %8 = icmp eq %"class.cc::LayerTreeHost"* %5, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  %11 = tail call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %10) #10
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %4, align 8
  tail call void @_ZN2cc13LayerTreeHost18RemoveSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"* %13, %"class.viz::SurfaceRange"* dereferenceable(72) %10) #10
  br label %14

14:                                               ; preds = %7, %12, %9
  tail call void @_ZN2cc5Layer16SetLayerTreeHostEPNS_13LayerTreeHostE(%"class.cc::Layer"* %3, %"class.cc::LayerTreeHost"* %1) #10
  %15 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %4, align 8
  %16 = icmp eq %"class.cc::LayerTreeHost"* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %14
  %18 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  %19 = tail call zeroext i1 @_ZNK3viz12SurfaceRange7IsValidEv(%"class.viz::SurfaceRange"* %18) #10
  br i1 %19, label %20, label %22

20:                                               ; preds = %17
  %21 = load %"class.cc::LayerTreeHost"*, %"class.cc::LayerTreeHost"** %4, align 8
  tail call void @_ZN2cc13LayerTreeHost15AddSurfaceRangeERKN3viz12SurfaceRangeE(%"class.cc::LayerTreeHost"* %21, %"class.viz::SurfaceRange"* dereferenceable(72) %18) #10
  br label %22

22:                                               ; preds = %14, %2, %20, %17
  ret void
}

declare void @_ZN2cc5Layer16SetLayerTreeHostEPNS_13LayerTreeHostE(%"class.cc::Layer"*, %"class.cc::LayerTreeHost"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc12SurfaceLayer16PushPropertiesToEPNS_9LayerImplE(%"class.cc::SurfaceLayer"*, %"class.cc::LayerImpl"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeTicks", align 8
  %4 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 0
  tail call void @_ZN2cc5Layer16PushPropertiesToEPNS_9LayerImplE(%"class.cc::Layer"* %4, %"class.cc::LayerImpl"* %1) #10
  %5 = load i8, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 32, i32 0), align 16
  %6 = and i8 %5, 25
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %14, label %8, !prof !2

8:                                                ; preds = %2
  %9 = tail call i32 @_ZN4base14PlatformThread9CurrentIdEv() #10
  %10 = bitcast %"class.base::TimeTicks"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.base::TimeTicks", %"class.base::TimeTicks"* %3, i64 0, i32 0, i32 0
  %12 = tail call i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() #10
  store i64 %12, i64* %11, align 8
  %13 = call i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext 88, i8* getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 32, i32 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8* null, i64 0, i64 0, i32 %9, %"class.base::TimeTicks"* nonnull dereferenceable(8) %3, %"class.base::trace_event::TraceArguments"* null, i32 0) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #10
  br label %14

14:                                               ; preds = %2, %8
  %15 = phi i8* [ null, %2 ], [ getelementptr inbounds ([300 x %"struct.base::trace_event::TraceCategory"], [300 x %"struct.base::trace_event::TraceCategory"]* @_ZN4base11trace_event16CategoryRegistry11categories_E, i64 0, i64 32, i32 0), %8 ]
  %16 = phi i8* [ inttoptr (i64 -6148914691236517206 to i8*), %2 ], [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), %8 ]
  %17 = phi i64 [ -6148914691236517206, %2 ], [ %13, %8 ]
  %18 = bitcast %"class.cc::LayerImpl"* %1 to %"class.cc::SurfaceLayerImpl"*
  %19 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 4
  %20 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 5
  %21 = bitcast %"class.absl::optional.462"* %20 to i64*
  %22 = load i64, i64* %21, align 4
  call void @_ZN2cc16SurfaceLayerImpl8SetRangeERKN3viz12SurfaceRangeEN4absl8optionalIjEE(%"class.cc::SurfaceLayerImpl"* %18, %"class.viz::SurfaceRange"* dereferenceable(72) %19, i64 %22) #10
  store i64 1, i64* %21, align 8
  %23 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 9
  %24 = load i8, i8* %23, align 1, !range !3
  %25 = icmp ne i8 %24, 0
  call void @_ZN2cc16SurfaceLayerImpl15SetIsReflectionEb(%"class.cc::SurfaceLayerImpl"* %18, i1 zeroext %25) #10
  %26 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 6
  %27 = load i8, i8* %26, align 8, !range !3
  %28 = icmp ne i8 %27, 0
  call void @_ZN2cc16SurfaceLayerImpl29SetStretchContentToFillBoundsEb(%"class.cc::SurfaceLayerImpl"* %18, i1 zeroext %28) #10
  %29 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 7
  %30 = load i8, i8* %29, align 1, !range !3
  %31 = icmp ne i8 %30, 0
  call void @_ZN2cc16SurfaceLayerImpl21SetSurfaceHitTestableEb(%"class.cc::SurfaceLayerImpl"* %18, i1 zeroext %31) #10
  %32 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 8
  %33 = load i8, i8* %32, align 2, !range !3
  %34 = icmp ne i8 %33, 0
  call void @_ZN2cc16SurfaceLayerImpl23SetHasPointerEventsNoneEb(%"class.cc::SurfaceLayerImpl"* %18, i1 zeroext %34) #10
  %35 = getelementptr inbounds %"class.cc::SurfaceLayer", %"class.cc::SurfaceLayer"* %0, i64 0, i32 2
  %36 = load i8, i8* %35, align 8, !range !3
  %37 = getelementptr inbounds %"class.cc::LayerImpl", %"class.cc::LayerImpl"* %1, i64 0, i32 10
  %38 = load i16, i16* %37, align 4
  %39 = shl nuw nsw i8 %36, 3
  %40 = zext i8 %39 to i16
  %41 = and i16 %38, -9
  %42 = or i16 %41, %40
  store i16 %42, i16* %37, align 4
  %43 = icmp eq i8* %15, null
  br i1 %43, label %48, label %44

44:                                               ; preds = %14
  %45 = load i8, i8* %15, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %44
  call void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8* nonnull %15, i8* %16, i64 %17) #10
  br label %48

48:                                               ; preds = %14, %44, %47
  ret void
}

declare void @_ZN2cc5Layer16PushPropertiesToEPNS_9LayerImplE(%"class.cc::Layer"*, %"class.cc::LayerImpl"*) unnamed_addr #3

declare void @_ZN2cc16SurfaceLayerImpl8SetRangeERKN3viz12SurfaceRangeEN4absl8optionalIjEE(%"class.cc::SurfaceLayerImpl"*, %"class.viz::SurfaceRange"* dereferenceable(72), i64) local_unnamed_addr #3

declare void @_ZN2cc16SurfaceLayerImpl15SetIsReflectionEb(%"class.cc::SurfaceLayerImpl"*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2cc16SurfaceLayerImpl29SetStretchContentToFillBoundsEb(%"class.cc::SurfaceLayerImpl"*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2cc16SurfaceLayerImpl21SetSurfaceHitTestableEb(%"class.cc::SurfaceLayerImpl"*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2cc16SurfaceLayerImpl23SetHasPointerEventsNoneEb(%"class.cc::SurfaceLayerImpl"*, i1 zeroext) local_unnamed_addr #3

declare void @_ZN2cc5Layer18SetBackgroundColorEj(%"class.cc::Layer"*, i32) unnamed_addr #3

declare void @_ZN2cc5Layer19SetNeedsDisplayRectERKN3gfx4RectE(%"class.cc::Layer"*, %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #3

declare void @_ZN2cc5Layer10SetOpacityEf(%"class.cc::Layer"*, float) unnamed_addr #3

declare zeroext i1 @_ZNK2cc5Layer11HitTestableEv(%"class.cc::Layer"*) unnamed_addr #3

declare zeroext i1 @_ZNK2cc5Layer26IsScrollbarLayerForTestingEv(%"class.cc::Layer"*) unnamed_addr #3

declare void @_ZN2cc5Layer14CaptureContentERKN3gfx4RectEPNSt3__16vectorINS_8NodeInfoENS5_9allocatorIS7_EEEE(%"class.cc::Layer"*, %"class.gfx::Rect"* dereferenceable(16), %"class.std::__1::vector.485"*) unnamed_addr #3

declare void @_ZNK2cc5Layer10GetPictureEv(%class.sk_sp.486* sret, %"class.cc::Layer"*) unnamed_addr #3

declare void @_ZN2cc5Layer17RunMicroBenchmarkEPNS_14MicroBenchmarkE(%"class.cc::Layer"*, %"class.cc::MicroBenchmark"*) unnamed_addr #3

declare zeroext i1 @_ZN2cc5Layer6UpdateEv(%"class.cc::Layer"*) unnamed_addr #3

declare zeroext i1 @_ZN2cc5Layer28IsSnappedToPixelGridInTargetEv(%"class.cc::Layer"*) unnamed_addr #3

declare zeroext i1 @_ZNK2cc5Layer29OpacityCanAnimateOnImplThreadEv(%"class.cc::Layer"*) unnamed_addr #3

declare i64 @_ZNK3viz14LocalSurfaceId15persistent_hashEv(%"class.viz::LocalSurfaceId"*) local_unnamed_addr #3

declare void @_ZN20trace_event_internal24UpdateTraceEventDurationEPKhPKcN4base11trace_event16TraceEventHandleE(i8*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base8internal20CallbackBaseCopyableC2ERKS1_(%"class.base::internal::CallbackBaseCopyable"*, %"class.base::internal::CallbackBaseCopyable"* dereferenceable(8)) unnamed_addr #3

declare i32 @_ZN4base14PlatformThread9CurrentIdEv() local_unnamed_addr #3

declare i64 @_ZN4base6subtle28TimeTicksNowIgnoringOverrideEv() local_unnamed_addr #3

declare i64 @_ZN20trace_event_internal37AddTraceEventWithThreadIdAndTimestampEcPKhPKcS3_yyiRKN4base9TimeTicksEPNS4_11trace_event14TraceArgumentsEj(i8 signext, i8*, i8*, i8*, i64, i64, i32, %"class.base::TimeTicks"* dereferenceable(8), %"class.base::trace_event::TraceArguments"*, i32) local_unnamed_addr #3

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN9protozero21ScatteredStreamWriterD1Ev(%"class.protozero::ScatteredStreamWriter"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9protozero19ScatteredHeapBufferD1Ev(%"class.protozero::ScatteredHeapBuffer"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN9protozero12MessageArenaD1Ev(%"class.protozero::MessageArena"*) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
