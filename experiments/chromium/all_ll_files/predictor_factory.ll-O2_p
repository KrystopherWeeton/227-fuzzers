; ModuleID = '../../third_party/blink/renderer/platform/widget/input/prediction/predictor_factory.cc'
source_filename = "../../third_party/blink/renderer/platform/widget/input/prediction/predictor_factory.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::Feature" = type { i8*, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.ui::InputPredictor" = type { i32 (...)** }
%"class.ui::LinearResampling" = type { %"class.ui::InputPredictor", %"class.std::__1::deque", %"class.base::TimeDelta", %"class.ui::LinearResampling::LatencyCalculator" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.12" }
%"struct.std::__1::__split_buffer" = type { %"struct.ui::InputPredictor::InputData"**, %"struct.ui::InputPredictor::InputData"**, %"struct.ui::InputPredictor::InputData"**, %"class.std::__1::__compressed_pair.7" }
%"struct.ui::InputPredictor::InputData" = type { %"class.gfx::PointF", %"class.base::TimeTicks" }
%"class.gfx::PointF" = type { float, float }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.ui::InputPredictor::InputData"** }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i64 }
%"class.base::TimeDelta" = type { i64 }
%"class.ui::LinearResampling::LatencyCalculator" = type { %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.ui::LeastSquaresPredictor" = type { %"class.ui::InputPredictor", %"class.std::__1::deque.23", %"class.std::__1::deque.23", %"class.std::__1::deque.35" }
%"class.std::__1::deque.23" = type { %"class.std::__1::__deque_base.24" }
%"class.std::__1::__deque_base.24" = type { %"struct.std::__1::__split_buffer.25", i64, %"class.std::__1::__compressed_pair.31" }
%"struct.std::__1::__split_buffer.25" = type { double**, double**, double**, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { double** }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.std::__1::deque.35" = type { %"class.std::__1::__deque_base.36" }
%"class.std::__1::__deque_base.36" = type { %"struct.std::__1::__split_buffer.37", i64, %"class.std::__1::__compressed_pair.43" }
%"struct.std::__1::__split_buffer.37" = type { %"class.base::TimeTicks"**, %"class.base::TimeTicks"**, %"class.base::TimeTicks"**, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.base::TimeTicks"** }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"class.ui::KalmanPredictor" = type <{ %"class.ui::InputPredictor", %"class.ui::KalmanFilter", %"class.ui::KalmanFilter", %"class.ui::KalmanFilter", %"class.std::__1::deque", i32, [4 x i8] }>
%"class.ui::KalmanFilter" = type <{ %"class.gfx::Vector3dF", %"class.gfx::Matrix3F", %"class.gfx::Matrix3F", %"class.gfx::Matrix3F", %"class.gfx::Vector3dF", [4 x i8], double, i32, [4 x i8] }>
%"class.gfx::Matrix3F" = type { [9 x float] }
%"class.gfx::Vector3dF" = type { float, float, float }
%"class.ui::LinearPredictor" = type <{ %"class.ui::InputPredictor", %"class.std::__1::deque", i64, %"class.gfx::Vector2dF", %"class.gfx::Vector2dF", float, [4 x i8] }>
%"class.gfx::Vector2dF" = type { float, float }
%"class.ui::EmptyPredictor" = type { %"class.ui::InputPredictor", %"class.absl::optional" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.65 }
%union.anon.65 = type { %"struct.ui::InputPredictor::InputData" }

@_ZN5blink16PredictorFactory18predictor_options_E = hidden local_unnamed_addr global i32 -1, align 4
@_ZN8features30kPredictorNameLinearResamplingE = external constant [0 x i8], align 1
@_ZN8features17kPredictorNameLsqE = external constant [0 x i8], align 1
@_ZN8features20kPredictorNameKalmanE = external constant [0 x i8], align 1
@_ZN8features25kPredictorNameLinearFirstE = external constant [0 x i8], align 1
@_ZN8features26kPredictorNameLinearSecondE = external constant [0 x i8], align 1
@_ZN5blink8features17kKalmanHeuristicsE = external global %"struct.base::Feature", align 8
@_ZN5blink8features22kKalmanDirectionCutOffE = external global %"struct.base::Feature", align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink16PredictorFactory24GetPredictorTypeFromNameERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %2 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features30kPredictorNameLinearResamplingE, i64 0, i64 0)) #4
  %3 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %4 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %3, i64 0, i32 1, i32 0
  %5 = load i8, i8* %4, align 1
  %6 = icmp slt i8 %5, 0
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = zext i8 %5 to i64
  %10 = select i1 %6, i64 %8, i64 %9
  %11 = icmp eq i64 %2, %10
  br i1 %11, label %12, label %19

12:                                               ; preds = %1
  %13 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features30kPredictorNameLinearResamplingE, i64 0, i64 0), i64 %2) #4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %76, label %15

15:                                               ; preds = %12
  %16 = load i8, i8* %4, align 1
  %17 = load i64, i64* %7, align 8
  %18 = zext i8 %16 to i64
  br label %19

19:                                               ; preds = %15, %1
  %20 = phi i64 [ %18, %15 ], [ %9, %1 ]
  %21 = phi i64 [ %17, %15 ], [ %8, %1 ]
  %22 = phi i8 [ %16, %15 ], [ %5, %1 ]
  %23 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features17kPredictorNameLsqE, i64 0, i64 0)) #4
  %24 = icmp slt i8 %22, 0
  %25 = select i1 %24, i64 %21, i64 %20
  %26 = icmp eq i64 %23, %25
  br i1 %26, label %27, label %34

27:                                               ; preds = %19
  %28 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features17kPredictorNameLsqE, i64 0, i64 0), i64 %23) #4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %76, label %30

30:                                               ; preds = %27
  %31 = load i8, i8* %4, align 1
  %32 = load i64, i64* %7, align 8
  %33 = zext i8 %31 to i64
  br label %34

34:                                               ; preds = %30, %19
  %35 = phi i64 [ %33, %30 ], [ %20, %19 ]
  %36 = phi i64 [ %32, %30 ], [ %21, %19 ]
  %37 = phi i8 [ %31, %30 ], [ %22, %19 ]
  %38 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features20kPredictorNameKalmanE, i64 0, i64 0)) #4
  %39 = icmp slt i8 %37, 0
  %40 = select i1 %39, i64 %36, i64 %35
  %41 = icmp eq i64 %38, %40
  br i1 %41, label %42, label %49

42:                                               ; preds = %34
  %43 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features20kPredictorNameKalmanE, i64 0, i64 0), i64 %38) #4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %76, label %45

45:                                               ; preds = %42
  %46 = load i8, i8* %4, align 1
  %47 = load i64, i64* %7, align 8
  %48 = zext i8 %46 to i64
  br label %49

49:                                               ; preds = %45, %34
  %50 = phi i64 [ %48, %45 ], [ %35, %34 ]
  %51 = phi i64 [ %47, %45 ], [ %36, %34 ]
  %52 = phi i8 [ %46, %45 ], [ %37, %34 ]
  %53 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features25kPredictorNameLinearFirstE, i64 0, i64 0)) #4
  %54 = icmp slt i8 %52, 0
  %55 = select i1 %54, i64 %51, i64 %50
  %56 = icmp eq i64 %53, %55
  br i1 %56, label %57, label %64

57:                                               ; preds = %49
  %58 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features25kPredictorNameLinearFirstE, i64 0, i64 0), i64 %53) #4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %76, label %60

60:                                               ; preds = %57
  %61 = load i8, i8* %4, align 1
  %62 = load i64, i64* %7, align 8
  %63 = zext i8 %61 to i64
  br label %64

64:                                               ; preds = %60, %49
  %65 = phi i64 [ %63, %60 ], [ %50, %49 ]
  %66 = phi i64 [ %62, %60 ], [ %51, %49 ]
  %67 = phi i8 [ %61, %60 ], [ %52, %49 ]
  %68 = tail call i64 @strlen(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features26kPredictorNameLinearSecondE, i64 0, i64 0)) #4
  %69 = icmp slt i8 %67, 0
  %70 = select i1 %69, i64 %66, i64 %65
  %71 = icmp eq i64 %68, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  %73 = tail call i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"* %0, i64 0, i64 -1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN8features26kPredictorNameLinearSecondE, i64 0, i64 0), i64 %68) #4
  %74 = icmp eq i32 %73, 0
  %75 = select i1 %74, i32 3, i32 5
  ret i32 %75

76:                                               ; preds = %64, %57, %42, %27, %12
  %77 = phi i32 [ 4, %12 ], [ 0, %27 ], [ 1, %42 ], [ 2, %57 ], [ 5, %64 ]
  ret i32 %77
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::InputPredictor"* @_ZN5blink16PredictorFactory12GetPredictorENS_16input_prediction13PredictorTypeE(i32) local_unnamed_addr #0 align 2 {
  switch i32 %0, label %27 [
    i32 4, label %2
    i32 0, label %5
    i32 1, label %8
    i32 2, label %21
    i32 3, label %24
  ]

2:                                                ; preds = %1
  %3 = tail call i8* @_Znwm(i64 80) #5
  %4 = bitcast i8* %3 to %"class.ui::LinearResampling"*
  tail call void @_ZN2ui16LinearResamplingC1Ev(%"class.ui::LinearResampling"* nonnull %4) #4
  br label %30

5:                                                ; preds = %1
  %6 = tail call i8* @_Znwm(i64 152) #5
  %7 = bitcast i8* %6 to %"class.ui::LeastSquaresPredictor"*
  tail call void @_ZN2ui21LeastSquaresPredictorC1Ev(%"class.ui::LeastSquaresPredictor"* nonnull %7) #4
  br label %30

8:                                                ; preds = %1
  %9 = load i32, i32* @_ZN5blink16PredictorFactory18predictor_options_E, align 4
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %11, label %17

11:                                               ; preds = %8
  %12 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN5blink8features17kKalmanHeuristicsE) #4
  %13 = zext i1 %12 to i32
  %14 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN5blink8features22kKalmanDirectionCutOffE) #4
  %15 = select i1 %14, i32 2, i32 0
  %16 = or i32 %15, %13
  store i32 %16, i32* @_ZN5blink16PredictorFactory18predictor_options_E, align 4
  br label %17

17:                                               ; preds = %11, %8
  %18 = phi i32 [ %16, %11 ], [ %9, %8 ]
  %19 = tail call i8* @_Znwm(i64 520) #5
  %20 = bitcast i8* %19 to %"class.ui::KalmanPredictor"*
  tail call void @_ZN2ui15KalmanPredictorC1Ej(%"class.ui::KalmanPredictor"* nonnull %20, i32 %18) #4
  br label %30

21:                                               ; preds = %1
  %22 = tail call i8* @_Znwm(i64 88) #5
  %23 = bitcast i8* %22 to %"class.ui::LinearPredictor"*
  tail call void @_ZN2ui15LinearPredictorC1ENS0_13EquationOrderE(%"class.ui::LinearPredictor"* nonnull %23, i64 2) #4
  br label %30

24:                                               ; preds = %1
  %25 = tail call i8* @_Znwm(i64 88) #5
  %26 = bitcast i8* %25 to %"class.ui::LinearPredictor"*
  tail call void @_ZN2ui15LinearPredictorC1ENS0_13EquationOrderE(%"class.ui::LinearPredictor"* nonnull %26, i64 3) #4
  br label %30

27:                                               ; preds = %1
  %28 = tail call i8* @_Znwm(i64 32) #5
  %29 = bitcast i8* %28 to %"class.ui::EmptyPredictor"*
  tail call void @_ZN2ui14EmptyPredictorC1Ev(%"class.ui::EmptyPredictor"* nonnull %29) #4
  br label %30

30:                                               ; preds = %27, %24, %21, %17, %5, %2
  %31 = phi i8* [ %28, %27 ], [ %25, %24 ], [ %22, %21 ], [ %19, %17 ], [ %6, %5 ], [ %3, %2 ]
  %32 = bitcast i8* %31 to %"class.ui::InputPredictor"*
  ret %"class.ui::InputPredictor"* %32
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink16PredictorFactory25GetKalmanPredictorOptionsEv() local_unnamed_addr #0 align 2 {
  %1 = load i32, i32* @_ZN5blink16PredictorFactory18predictor_options_E, align 4
  %2 = icmp eq i32 %1, -1
  br i1 %2, label %3, label %9

3:                                                ; preds = %0
  %4 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN5blink8features17kKalmanHeuristicsE) #4
  %5 = zext i1 %4 to i32
  %6 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN5blink8features22kKalmanDirectionCutOffE) #4
  %7 = select i1 %6, i32 2, i32 0
  %8 = or i32 %7, %5
  store i32 %8, i32* @_ZN5blink16PredictorFactory18predictor_options_E, align 4
  br label %9

9:                                                ; preds = %3, %0
  %10 = phi i32 [ %8, %3 ], [ %1, %0 ]
  ret i32 %10
}

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #1

declare i32 @_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7compareEmmPKcm(%"class.std::__1::basic_string"*, i64, i64, i8*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN2ui16LinearResamplingC1Ev(%"class.ui::LinearResampling"*) unnamed_addr #1

declare void @_ZN2ui21LeastSquaresPredictorC1Ev(%"class.ui::LeastSquaresPredictor"*) unnamed_addr #1

declare void @_ZN2ui15KalmanPredictorC1Ej(%"class.ui::KalmanPredictor"*, i32) unnamed_addr #1

declare void @_ZN2ui15LinearPredictorC1ENS0_13EquationOrderE(%"class.ui::LinearPredictor"*, i64) unnamed_addr #1

declare void @_ZN2ui14EmptyPredictorC1Ev(%"class.ui::EmptyPredictor"*) unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
