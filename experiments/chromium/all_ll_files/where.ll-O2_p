; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/where.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/where.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.TfLiteRegistration = type { i8* (%struct.TfLiteContext*, i8*, i64)*, void (%struct.TfLiteContext*, i8*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)*, i32, i8*, i32 }
%struct.TfLiteContext = type { i64, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray**)*, %struct.TfLiteTensor*, i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, void (%struct.TfLiteContext*, i8*, ...)*, i32 (%struct.TfLiteContext*, i32, i32*)*, i32 (%struct.TfLiteContext*, i32, %struct.TfLiteNode**, %struct.TfLiteRegistration**)*, i32 (%struct.TfLiteContext*, %struct.TfLiteRegistration*, %struct.TfLiteIntArray*, %struct.TfLiteDelegate*)*, i32, %struct.TfLiteExternalContext* (%struct.TfLiteContext*, i32)*, void (%struct.TfLiteContext*, i32, %struct.TfLiteExternalContext*)*, i8, i8*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i8**)*, i32 (%struct.TfLiteContext*, i64, i32*)*, i8* (%struct.TfLiteContext*, i32)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, i32, i32*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteIntArray*, %struct.TfLiteDelegateParams**, i32*)* }
%struct.TfLiteIntArray = type { i32, [0 x i32] }
%struct.TfLiteTensor = type { i32, %union.TfLitePtrUnion, %struct.TfLiteIntArray*, %struct.TfLiteQuantizationParams, i32, i64, i8*, i8*, %struct.TfLiteDelegate*, i32, i8, i8, %struct.TfLiteQuantization, %struct.TfLiteSparsity*, %struct.TfLiteIntArray* }
%union.TfLitePtrUnion = type { i32* }
%struct.TfLiteQuantizationParams = type { float, i32 }
%struct.TfLiteDelegate = type { i8*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32, %struct.TfLiteTensor*)*, void (%struct.TfLiteContext*, %struct.TfLiteDelegate*, i32*)*, i64 }
%struct.TfLiteQuantization = type { i32, i8* }
%struct.TfLiteSparsity = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteDimensionMetadata*, i32 }
%struct.TfLiteDimensionMetadata = type { i32, i32, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%struct.TfLiteNode = type { %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, i8*, i8*, i8*, i32, %struct.TfLiteDelegate* }
%struct.TfLiteExternalContext = type { i32, i32 (%struct.TfLiteContext*)* }
%struct.TfLiteDelegateParams = type { %struct.TfLiteDelegate*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray*, %struct.TfLiteIntArray* }
%"class.tflite::RuntimeShape" = type { i32, %union.anon }
%union.anon = type { i32*, [16 x i8] }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZN6tflite13reference_ops16SelectTrueCoordsIblEEvRKNS_12RuntimeShapeEPKT_PT0_ = comdat any

@.str = private unnamed_addr constant [26 x i8] c"%s:%d %s != %s (%d != %d)\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"../../third_party/tflite/src/tensorflow/lite/kernels/where.cc\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"NumInputs(node)\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"NumOutputs(node)\00", align 1
@.str.7 = private unnamed_addr constant [53 x i8] c"Condition tensor must be of type bool, but saw '%s'.\00", align 1
@_ZZN6tflite3ops7builtin14Register_WHEREEvE1r = internal global %struct.TfLiteRegistration { i8* (%struct.TfLiteContext*, i8*, i64)* null, void (%struct.TfLiteContext*, i8*)* null, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5where7PrepareEP13TfLiteContextP10TfLiteNode, i32 (%struct.TfLiteContext*, %struct.TfLiteNode*)* @_ZN6tflite3ops7builtin5where4EvalEP13TfLiteContextP10TfLiteNode, i8* (%struct.TfLiteContext*, %struct.TfLiteNode*)* null, i32 0, i8* null, i32 0 }, align 8
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin5where18ResizeOutputTensorEP13TfLiteContextPK12TfLiteTensorPS5_(%struct.TfLiteContext*, %struct.TfLiteTensor* readonly, %struct.TfLiteTensor*) local_unnamed_addr #0 {
  %4 = alloca %"class.tflite::RuntimeShape", align 8
  %5 = bitcast %"class.tflite::RuntimeShape"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #7
  %6 = icmp eq %struct.TfLiteTensor* %1, null
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 0, i32* %8, align 8, !alias.scope !2
  br label %148

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 2
  %11 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %10, align 8, !noalias !2
  %12 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 0
  %13 = load i32, i32* %12, align 4, !noalias !2
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %11, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 0
  store i32 %13, i32* %15, align 8, !alias.scope !2
  %16 = icmp sgt i32 %13, 5
  br i1 %16, label %17, label %25

17:                                               ; preds = %9
  %18 = sext i32 %13 to i64
  %19 = shl nsw i64 %18, 2
  %20 = tail call i8* @_Znam(i64 %19) #8, !noalias !2
  %21 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %22 = bitcast i32** %21 to i8**
  store i8* %20, i8** %22, align 8, !alias.scope !2
  %23 = bitcast i32* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* align 4 %23, i64 %19, i1 false) #7
  %24 = bitcast i8* %20 to i32*
  br label %34

25:                                               ; preds = %9
  %26 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %27 = sext i32 %13 to i64
  %28 = shl nsw i64 %27, 2
  %29 = bitcast %union.anon* %26 to i8*
  %30 = bitcast i32* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 4 %30, i64 %28, i1 false) #7
  %31 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1
  %32 = bitcast %union.anon* %31 to i32*
  %33 = icmp sgt i32 %13, 0
  br i1 %33, label %34, label %137

34:                                               ; preds = %25, %17
  %35 = phi i1 [ true, %17 ], [ false, %25 ]
  %36 = phi i32* [ %24, %17 ], [ %32, %25 ]
  %37 = zext i32 %13 to i64
  %38 = icmp ult i32 %13, 8
  br i1 %38, label %124, label %39

39:                                               ; preds = %34
  %40 = and i64 %37, 4294967288
  %41 = add nsw i64 %40, -8
  %42 = lshr exact i64 %41, 3
  %43 = add nuw nsw i64 %42, 1
  %44 = and i64 %43, 3
  %45 = icmp ult i64 %41, 24
  br i1 %45, label %91, label %46

46:                                               ; preds = %39
  %47 = sub nsw i64 %43, %44
  br label %48

48:                                               ; preds = %48, %46
  %49 = phi i64 [ 0, %46 ], [ %88, %48 ]
  %50 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %46 ], [ %86, %48 ]
  %51 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %46 ], [ %87, %48 ]
  %52 = phi i64 [ %47, %46 ], [ %89, %48 ]
  %53 = getelementptr inbounds i32, i32* %36, i64 %49
  %54 = bitcast i32* %53 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 4
  %56 = getelementptr inbounds i32, i32* %53, i64 4
  %57 = bitcast i32* %56 to <4 x i32>*
  %58 = load <4 x i32>, <4 x i32>* %57, align 4
  %59 = mul nsw <4 x i32> %55, %50
  %60 = mul nsw <4 x i32> %58, %51
  %61 = or i64 %49, 8
  %62 = getelementptr inbounds i32, i32* %36, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 4
  %65 = getelementptr inbounds i32, i32* %62, i64 4
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 4
  %68 = mul nsw <4 x i32> %64, %59
  %69 = mul nsw <4 x i32> %67, %60
  %70 = or i64 %49, 16
  %71 = getelementptr inbounds i32, i32* %36, i64 %70
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = getelementptr inbounds i32, i32* %71, i64 4
  %75 = bitcast i32* %74 to <4 x i32>*
  %76 = load <4 x i32>, <4 x i32>* %75, align 4
  %77 = mul nsw <4 x i32> %73, %68
  %78 = mul nsw <4 x i32> %76, %69
  %79 = or i64 %49, 24
  %80 = getelementptr inbounds i32, i32* %36, i64 %79
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4
  %83 = getelementptr inbounds i32, i32* %80, i64 4
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4
  %86 = mul nsw <4 x i32> %82, %77
  %87 = mul nsw <4 x i32> %85, %78
  %88 = add i64 %49, 32
  %89 = add i64 %52, -4
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %48, !llvm.loop !5

91:                                               ; preds = %48, %39
  %92 = phi <4 x i32> [ undef, %39 ], [ %86, %48 ]
  %93 = phi <4 x i32> [ undef, %39 ], [ %87, %48 ]
  %94 = phi i64 [ 0, %39 ], [ %88, %48 ]
  %95 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %39 ], [ %86, %48 ]
  %96 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %39 ], [ %87, %48 ]
  %97 = icmp eq i64 %44, 0
  br i1 %97, label %114, label %98

98:                                               ; preds = %91, %98
  %99 = phi i64 [ %111, %98 ], [ %94, %91 ]
  %100 = phi <4 x i32> [ %109, %98 ], [ %95, %91 ]
  %101 = phi <4 x i32> [ %110, %98 ], [ %96, %91 ]
  %102 = phi i64 [ %112, %98 ], [ %44, %91 ]
  %103 = getelementptr inbounds i32, i32* %36, i64 %99
  %104 = bitcast i32* %103 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 4
  %106 = getelementptr inbounds i32, i32* %103, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  %108 = load <4 x i32>, <4 x i32>* %107, align 4
  %109 = mul nsw <4 x i32> %105, %100
  %110 = mul nsw <4 x i32> %108, %101
  %111 = add i64 %99, 8
  %112 = add i64 %102, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %98, !llvm.loop !7

114:                                              ; preds = %98, %91
  %115 = phi <4 x i32> [ %92, %91 ], [ %109, %98 ]
  %116 = phi <4 x i32> [ %93, %91 ], [ %110, %98 ]
  %117 = mul <4 x i32> %116, %115
  %118 = shufflevector <4 x i32> %117, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %119 = mul <4 x i32> %117, %118
  %120 = shufflevector <4 x i32> %119, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %121 = mul <4 x i32> %119, %120
  %122 = extractelement <4 x i32> %121, i32 0
  %123 = icmp eq i64 %40, %37
  br i1 %123, label %135, label %124

124:                                              ; preds = %114, %34
  %125 = phi i64 [ 0, %34 ], [ %40, %114 ]
  %126 = phi i32 [ 1, %34 ], [ %122, %114 ]
  br label %127

127:                                              ; preds = %124, %127
  %128 = phi i64 [ %133, %127 ], [ %125, %124 ]
  %129 = phi i32 [ %132, %127 ], [ %126, %124 ]
  %130 = getelementptr inbounds i32, i32* %36, i64 %128
  %131 = load i32, i32* %130, align 4
  %132 = mul nsw i32 %131, %129
  %133 = add nuw nsw i64 %128, 1
  %134 = icmp eq i64 %133, %37
  br i1 %134, label %135, label %127, !llvm.loop !9

135:                                              ; preds = %127, %114
  %136 = phi i32 [ %122, %114 ], [ %132, %127 ]
  br i1 %6, label %143, label %137

137:                                              ; preds = %25, %135
  %138 = phi i32 [ %136, %135 ], [ 1, %25 ]
  %139 = phi i1 [ %35, %135 ], [ false, %25 ]
  %140 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %1, i64 0, i32 1
  %141 = bitcast %union.TfLitePtrUnion* %140 to i8**
  %142 = load i8*, i8** %141, align 8
  br label %143

143:                                              ; preds = %135, %137
  %144 = phi i32 [ %138, %137 ], [ %136, %135 ]
  %145 = phi i1 [ %139, %137 ], [ %35, %135 ]
  %146 = phi i8* [ %142, %137 ], [ null, %135 ]
  %147 = icmp sgt i32 %144, 0
  br i1 %147, label %148, label %224

148:                                              ; preds = %7, %143
  %149 = phi i8* [ null, %7 ], [ %146, %143 ]
  %150 = phi i1 [ false, %7 ], [ %145, %143 ]
  %151 = phi i32 [ 0, %7 ], [ %13, %143 ]
  %152 = phi i32 [ 1, %7 ], [ %144, %143 ]
  %153 = zext i32 %152 to i64
  %154 = icmp ult i32 %152, 8
  br i1 %154, label %155, label %158

155:                                              ; preds = %214, %148
  %156 = phi i64 [ 0, %148 ], [ %159, %214 ]
  %157 = phi i32 [ 0, %148 ], [ %222, %214 ]
  br label %241

158:                                              ; preds = %148
  %159 = and i64 %153, 4294967288
  %160 = add nsw i64 %159, -8
  %161 = lshr exact i64 %160, 3
  %162 = add nuw nsw i64 %161, 1
  %163 = and i64 %162, 1
  %164 = icmp eq i64 %160, 0
  br i1 %164, label %196, label %165

165:                                              ; preds = %158
  %166 = sub nuw nsw i64 %162, %163
  br label %167

167:                                              ; preds = %167, %165
  %168 = phi i64 [ 0, %165 ], [ %193, %167 ]
  %169 = phi <4 x i32> [ zeroinitializer, %165 ], [ %191, %167 ]
  %170 = phi <4 x i32> [ zeroinitializer, %165 ], [ %192, %167 ]
  %171 = phi i64 [ %166, %165 ], [ %194, %167 ]
  %172 = getelementptr inbounds i8, i8* %149, i64 %168
  %173 = bitcast i8* %172 to <4 x i8>*
  %174 = load <4 x i8>, <4 x i8>* %173, align 1
  %175 = getelementptr inbounds i8, i8* %172, i64 4
  %176 = bitcast i8* %175 to <4 x i8>*
  %177 = load <4 x i8>, <4 x i8>* %176, align 1
  %178 = zext <4 x i8> %174 to <4 x i32>
  %179 = zext <4 x i8> %177 to <4 x i32>
  %180 = add nuw nsw <4 x i32> %169, %178
  %181 = add nuw nsw <4 x i32> %170, %179
  %182 = or i64 %168, 8
  %183 = getelementptr inbounds i8, i8* %149, i64 %182
  %184 = bitcast i8* %183 to <4 x i8>*
  %185 = load <4 x i8>, <4 x i8>* %184, align 1
  %186 = getelementptr inbounds i8, i8* %183, i64 4
  %187 = bitcast i8* %186 to <4 x i8>*
  %188 = load <4 x i8>, <4 x i8>* %187, align 1
  %189 = zext <4 x i8> %185 to <4 x i32>
  %190 = zext <4 x i8> %188 to <4 x i32>
  %191 = add nuw nsw <4 x i32> %180, %189
  %192 = add nuw nsw <4 x i32> %181, %190
  %193 = add i64 %168, 16
  %194 = add i64 %171, -2
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %196, label %167, !llvm.loop !11

196:                                              ; preds = %167, %158
  %197 = phi <4 x i32> [ undef, %158 ], [ %191, %167 ]
  %198 = phi <4 x i32> [ undef, %158 ], [ %192, %167 ]
  %199 = phi i64 [ 0, %158 ], [ %193, %167 ]
  %200 = phi <4 x i32> [ zeroinitializer, %158 ], [ %191, %167 ]
  %201 = phi <4 x i32> [ zeroinitializer, %158 ], [ %192, %167 ]
  %202 = icmp eq i64 %163, 0
  br i1 %202, label %214, label %203

203:                                              ; preds = %196
  %204 = getelementptr inbounds i8, i8* %149, i64 %199
  %205 = getelementptr inbounds i8, i8* %204, i64 4
  %206 = bitcast i8* %205 to <4 x i8>*
  %207 = load <4 x i8>, <4 x i8>* %206, align 1
  %208 = zext <4 x i8> %207 to <4 x i32>
  %209 = add nuw nsw <4 x i32> %201, %208
  %210 = bitcast i8* %204 to <4 x i8>*
  %211 = load <4 x i8>, <4 x i8>* %210, align 1
  %212 = zext <4 x i8> %211 to <4 x i32>
  %213 = add nuw nsw <4 x i32> %200, %212
  br label %214

214:                                              ; preds = %196, %203
  %215 = phi <4 x i32> [ %197, %196 ], [ %213, %203 ]
  %216 = phi <4 x i32> [ %198, %196 ], [ %209, %203 ]
  %217 = add nuw <4 x i32> %216, %215
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %219 = add <4 x i32> %217, %218
  %220 = shufflevector <4 x i32> %219, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %221 = add <4 x i32> %219, %220
  %222 = extractelement <4 x i32> %221, i32 0
  %223 = icmp eq i64 %159, %153
  br i1 %223, label %224, label %155

224:                                              ; preds = %241, %214, %143
  %225 = phi i1 [ %145, %143 ], [ %150, %214 ], [ %150, %241 ]
  %226 = phi i32 [ %13, %143 ], [ %151, %214 ], [ %151, %241 ]
  %227 = phi i32 [ 0, %143 ], [ %222, %214 ], [ %247, %241 ]
  %228 = tail call %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32 2) #7
  %229 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %228, i64 0, i32 1, i64 0
  store i32 %227, i32* %229, align 4
  %230 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %228, i64 0, i32 1, i64 1
  store i32 %226, i32* %230, align 4
  %231 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 4
  %232 = load i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)*, i32 (%struct.TfLiteContext*, %struct.TfLiteTensor*, %struct.TfLiteIntArray*)** %231, align 8
  %233 = tail call i32 %232(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %2, %struct.TfLiteIntArray* %228) #7
  br i1 %225, label %234, label %240

234:                                              ; preds = %224
  %235 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %4, i64 0, i32 1, i32 0
  %236 = load i32*, i32** %235, align 8
  %237 = icmp eq i32* %236, null
  br i1 %237, label %240, label %238

238:                                              ; preds = %234
  %239 = bitcast i32* %236 to i8*
  tail call void @_ZdaPv(i8* %239) #8
  br label %240

240:                                              ; preds = %224, %234, %238
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #7
  ret i32 %233

241:                                              ; preds = %155, %241
  %242 = phi i64 [ %248, %241 ], [ %156, %155 ]
  %243 = phi i32 [ %247, %241 ], [ %157, %155 ]
  %244 = getelementptr inbounds i8, i8* %149, i64 %242
  %245 = load i8, i8* %244, align 1, !range !12
  %246 = zext i8 %245 to i32
  %247 = add nuw nsw i32 %243, %246
  %248 = add nuw nsw i64 %242, 1
  %249 = icmp eq i64 %248, %153
  br i1 %249, label %224, label %241, !llvm.loop !13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.TfLiteIntArray* @TfLiteIntArrayCreate(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin5where7PrepareEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %4 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %3, align 8
  %5 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %10 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %9, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %10(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 56, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 1) #7
  br label %62

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %13 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %12, align 8
  %14 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 1
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %19 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %18, align 8
  tail call void (%struct.TfLiteContext*, i8*, ...) %19(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0), i32 57, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %15, i32 1) #7
  br label %62

20:                                               ; preds = %11
  %21 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %4, i64 0, i32 1, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %29, label %24

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %26 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %25, align 8
  %27 = sext i32 %22 to i64
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %26, i64 %27
  br label %29

29:                                               ; preds = %20, %24
  %30 = phi %struct.TfLiteTensor* [ %28, %24 ], [ null, %20 ]
  %31 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %13, i64 0, i32 1, i64 0
  %32 = load i32, i32* %31, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %39, label %34

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %36 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %35, align 8
  %37 = sext i32 %32 to i64
  %38 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %36, i64 %37
  br label %39

39:                                               ; preds = %29, %34
  %40 = phi %struct.TfLiteTensor* [ %38, %34 ], [ null, %29 ]
  %41 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = icmp eq i32 %42, 6
  br i1 %43, label %48, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 5
  %46 = load void (%struct.TfLiteContext*, i8*, ...)*, void (%struct.TfLiteContext*, i8*, ...)** %45, align 8
  %47 = tail call i8* @TfLiteTypeGetName(i32 %42) #7
  tail call void (%struct.TfLiteContext*, i8*, ...) %46(%struct.TfLiteContext* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.7, i64 0, i64 0), i8* %47) #7
  br label %62

48:                                               ; preds = %39
  %49 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 0
  store i32 4, i32* %49, align 8
  %50 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %30, i64 0, i32 4
  %51 = load i32, i32* %50, align 8
  %52 = icmp eq i32 %51, 1
  br i1 %52, label %60, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 4
  %55 = load i32, i32* %54, align 8
  %56 = icmp eq i32 %55, 4
  br i1 %56, label %62, label %57

57:                                               ; preds = %53
  store i32 4, i32* %54, align 8
  %58 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %40, i64 0, i32 1
  %59 = bitcast %union.TfLitePtrUnion* %58 to i8**
  store i8* null, i8** %59, align 8
  br label %62

60:                                               ; preds = %48
  %61 = tail call i32 @_ZN6tflite3ops7builtin5where18ResizeOutputTensorEP13TfLiteContextPK12TfLiteTensorPS5_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %30, %struct.TfLiteTensor* %40)
  br label %62

62:                                               ; preds = %57, %53, %44, %60, %17, %8
  %63 = phi i32 [ 1, %8 ], [ 1, %17 ], [ 1, %44 ], [ %61, %60 ], [ 0, %53 ], [ 0, %57 ]
  ret i32 %63
}

declare i8* @TfLiteTypeGetName(i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6tflite3ops7builtin5where4EvalEP13TfLiteContextP10TfLiteNode(%struct.TfLiteContext*, %struct.TfLiteNode* nocapture readonly) #0 {
  %3 = alloca %"class.tflite::RuntimeShape", align 8
  %4 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 0
  %5 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %4, align 8
  %6 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %5, i64 0, i32 1, i64 0
  %7 = load i32, i32* %6, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %11 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %10, align 8
  %12 = sext i32 %7 to i64
  %13 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %11, i64 %12
  br label %14

14:                                               ; preds = %2, %9
  %15 = phi %struct.TfLiteTensor* [ %13, %9 ], [ null, %2 ]
  %16 = getelementptr inbounds %struct.TfLiteNode, %struct.TfLiteNode* %1, i64 0, i32 1
  %17 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %16, align 8
  %18 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %17, i64 0, i32 1, i64 0
  %19 = load i32, i32* %18, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %26, label %21

21:                                               ; preds = %14
  %22 = getelementptr inbounds %struct.TfLiteContext, %struct.TfLiteContext* %0, i64 0, i32 2
  %23 = load %struct.TfLiteTensor*, %struct.TfLiteTensor** %22, align 8
  %24 = sext i32 %19 to i64
  %25 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %23, i64 %24
  br label %26

26:                                               ; preds = %14, %21
  %27 = phi %struct.TfLiteTensor* [ %25, %21 ], [ null, %14 ]
  %28 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 0, i32 4
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 4
  br i1 %30, label %31, label %34

31:                                               ; preds = %26
  %32 = tail call i32 @_ZN6tflite3ops7builtin5where18ResizeOutputTensorEP13TfLiteContextPK12TfLiteTensorPS5_(%struct.TfLiteContext* %0, %struct.TfLiteTensor* %15, %struct.TfLiteTensor* %27)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %86

34:                                               ; preds = %31, %26
  %35 = bitcast %"class.tflite::RuntimeShape"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %35) #7
  %36 = icmp eq %struct.TfLiteTensor* %15, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 0, i32* %38, align 8, !alias.scope !14
  br label %67

39:                                               ; preds = %34
  %40 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 2
  %41 = load %struct.TfLiteIntArray*, %struct.TfLiteIntArray** %40, align 8, !noalias !14
  %42 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %41, i64 0, i32 0
  %43 = load i32, i32* %42, align 4, !noalias !14
  %44 = getelementptr inbounds %struct.TfLiteIntArray, %struct.TfLiteIntArray* %41, i64 0, i32 1, i64 0
  %45 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  store i32 %43, i32* %45, align 8, !alias.scope !14
  %46 = icmp sgt i32 %43, 5
  br i1 %46, label %47, label %54

47:                                               ; preds = %39
  %48 = sext i32 %43 to i64
  %49 = shl nsw i64 %48, 2
  %50 = tail call i8* @_Znam(i64 %49) #8, !noalias !14
  %51 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %52 = bitcast i32** %51 to i8**
  store i8* %50, i8** %52, align 8, !alias.scope !14
  %53 = bitcast i8* %50 to i32*
  br label %59

54:                                               ; preds = %39
  %55 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1
  %56 = bitcast %union.anon* %55 to i32*
  %57 = sext i32 %43 to i64
  %58 = shl nsw i64 %57, 2
  br label %59

59:                                               ; preds = %54, %47
  %60 = phi i64 [ %49, %47 ], [ %58, %54 ]
  %61 = phi i32* [ %53, %47 ], [ %56, %54 ]
  %62 = bitcast i32* %61 to i8*
  %63 = bitcast i32* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* align 4 %63, i64 %60, i1 false) #7
  %64 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %15, i64 0, i32 1
  %65 = bitcast %union.TfLitePtrUnion* %64 to i8**
  %66 = load i8*, i8** %65, align 8
  br label %67

67:                                               ; preds = %37, %59
  %68 = phi i8* [ %66, %59 ], [ null, %37 ]
  %69 = icmp eq %struct.TfLiteTensor* %27, null
  br i1 %69, label %74, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds %struct.TfLiteTensor, %struct.TfLiteTensor* %27, i64 0, i32 1
  %72 = bitcast %union.TfLitePtrUnion* %71 to i64**
  %73 = load i64*, i64** %72, align 8
  br label %74

74:                                               ; preds = %67, %70
  %75 = phi i64* [ %73, %70 ], [ null, %67 ]
  call void @_ZN6tflite13reference_ops16SelectTrueCoordsIblEEvRKNS_12RuntimeShapeEPKT_PT0_(%"class.tflite::RuntimeShape"* nonnull dereferenceable(32) %3, i8* %68, i64* %75)
  %76 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 0
  %77 = load i32, i32* %76, align 8
  %78 = icmp sgt i32 %77, 5
  br i1 %78, label %79, label %85

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %3, i64 0, i32 1, i32 0
  %81 = load i32*, i32** %80, align 8
  %82 = icmp eq i32* %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %79
  %84 = bitcast i32* %81 to i8*
  call void @_ZdaPv(i8* %84) #8
  br label %85

85:                                               ; preds = %74, %79, %83
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %35) #7
  br label %86

86:                                               ; preds = %31, %85
  %87 = phi i32 [ 0, %85 ], [ %32, %31 ]
  ret i32 %87
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite13reference_ops16SelectTrueCoordsIblEEvRKNS_12RuntimeShapeEPKT_PT0_(%"class.tflite::RuntimeShape"* dereferenceable(32), i8*, i64*) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 5
  %8 = getelementptr inbounds %"class.tflite::RuntimeShape", %"class.tflite::RuntimeShape"* %0, i64 0, i32 1
  br i1 %7, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %11 = load i32*, i32** %10, align 8
  br label %15

12:                                               ; preds = %3
  %13 = bitcast %union.anon* %8 to i32*
  %14 = icmp sgt i32 %6, 0
  br i1 %14, label %15, label %115

15:                                               ; preds = %12, %9
  %16 = phi i32* [ %11, %9 ], [ %13, %12 ]
  %17 = zext i32 %6 to i64
  %18 = icmp ult i32 %6, 8
  br i1 %18, label %104, label %19

19:                                               ; preds = %15
  %20 = and i64 %17, 4294967288
  %21 = add nsw i64 %20, -8
  %22 = lshr exact i64 %21, 3
  %23 = add nuw nsw i64 %22, 1
  %24 = and i64 %23, 3
  %25 = icmp ult i64 %21, 24
  br i1 %25, label %71, label %26

26:                                               ; preds = %19
  %27 = sub nsw i64 %23, %24
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %68, %28 ]
  %30 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %26 ], [ %66, %28 ]
  %31 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %26 ], [ %67, %28 ]
  %32 = phi i64 [ %27, %26 ], [ %69, %28 ]
  %33 = getelementptr inbounds i32, i32* %16, i64 %29
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 4
  %36 = getelementptr inbounds i32, i32* %33, i64 4
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 4
  %39 = mul nsw <4 x i32> %35, %30
  %40 = mul nsw <4 x i32> %38, %31
  %41 = or i64 %29, 8
  %42 = getelementptr inbounds i32, i32* %16, i64 %41
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4
  %45 = getelementptr inbounds i32, i32* %42, i64 4
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 4
  %48 = mul nsw <4 x i32> %44, %39
  %49 = mul nsw <4 x i32> %47, %40
  %50 = or i64 %29, 16
  %51 = getelementptr inbounds i32, i32* %16, i64 %50
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = getelementptr inbounds i32, i32* %51, i64 4
  %55 = bitcast i32* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 4
  %57 = mul nsw <4 x i32> %53, %48
  %58 = mul nsw <4 x i32> %56, %49
  %59 = or i64 %29, 24
  %60 = getelementptr inbounds i32, i32* %16, i64 %59
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 4
  %63 = getelementptr inbounds i32, i32* %60, i64 4
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4
  %66 = mul nsw <4 x i32> %62, %57
  %67 = mul nsw <4 x i32> %65, %58
  %68 = add i64 %29, 32
  %69 = add i64 %32, -4
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %28, !llvm.loop !17

71:                                               ; preds = %28, %19
  %72 = phi <4 x i32> [ undef, %19 ], [ %66, %28 ]
  %73 = phi <4 x i32> [ undef, %19 ], [ %67, %28 ]
  %74 = phi i64 [ 0, %19 ], [ %68, %28 ]
  %75 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %19 ], [ %66, %28 ]
  %76 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %19 ], [ %67, %28 ]
  %77 = icmp eq i64 %24, 0
  br i1 %77, label %94, label %78

78:                                               ; preds = %71, %78
  %79 = phi i64 [ %91, %78 ], [ %74, %71 ]
  %80 = phi <4 x i32> [ %89, %78 ], [ %75, %71 ]
  %81 = phi <4 x i32> [ %90, %78 ], [ %76, %71 ]
  %82 = phi i64 [ %92, %78 ], [ %24, %71 ]
  %83 = getelementptr inbounds i32, i32* %16, i64 %79
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4
  %86 = getelementptr inbounds i32, i32* %83, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 4
  %89 = mul nsw <4 x i32> %85, %80
  %90 = mul nsw <4 x i32> %88, %81
  %91 = add i64 %79, 8
  %92 = add i64 %82, -1
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %78, !llvm.loop !18

94:                                               ; preds = %78, %71
  %95 = phi <4 x i32> [ %72, %71 ], [ %89, %78 ]
  %96 = phi <4 x i32> [ %73, %71 ], [ %90, %78 ]
  %97 = mul <4 x i32> %96, %95
  %98 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %99 = mul <4 x i32> %97, %98
  %100 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %101 = mul <4 x i32> %99, %100
  %102 = extractelement <4 x i32> %101, i32 0
  %103 = icmp eq i64 %20, %17
  br i1 %103, label %115, label %104

104:                                              ; preds = %94, %15
  %105 = phi i64 [ 0, %15 ], [ %20, %94 ]
  %106 = phi i32 [ 1, %15 ], [ %102, %94 ]
  br label %107

107:                                              ; preds = %104, %107
  %108 = phi i64 [ %113, %107 ], [ %105, %104 ]
  %109 = phi i32 [ %112, %107 ], [ %106, %104 ]
  %110 = getelementptr inbounds i32, i32* %16, i64 %108
  %111 = load i32, i32* %110, align 4
  %112 = mul nsw i32 %111, %109
  %113 = add nuw nsw i64 %108, 1
  %114 = icmp eq i64 %113, %17
  br i1 %114, label %115, label %107, !llvm.loop !19

115:                                              ; preds = %107, %94, %12
  %116 = phi i32 [ 1, %12 ], [ %102, %94 ], [ %112, %107 ]
  %117 = sext i32 %116 to i64
  %118 = sext i32 %6 to i64
  %119 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %119) #7
  %120 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %121 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %122 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %119, i8 0, i64 24, i1 false) #7
  %123 = icmp eq i32 %6, 0
  br i1 %123, label %146, label %124

124:                                              ; preds = %115
  %125 = icmp slt i32 %6, 0
  br i1 %125, label %126, label %128

126:                                              ; preds = %124
  %127 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %127) #9
  unreachable

128:                                              ; preds = %124
  %129 = shl nsw i64 %118, 2
  %130 = tail call i8* @_Znwm(i64 %129) #8
  %131 = bitcast i8* %130 to i32*
  %132 = bitcast %"class.std::__1::vector"* %4 to i8**
  store i8* %130, i8** %132, align 8
  %133 = getelementptr inbounds i32, i32* %131, i64 %118
  store i32* %133, i32** %122, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %130, i8 0, i64 %129, i1 false)
  %134 = bitcast i32** %121 to i64*
  %135 = ptrtoint i32* %133 to i64
  store i64 %135, i64* %134, align 8
  %136 = getelementptr inbounds %union.anon, %union.anon* %8, i64 0, i32 0
  %137 = bitcast %union.anon* %8 to [5 x i32]*
  %138 = icmp sgt i32 %6, 5
  %139 = load i32*, i32** %136, align 8
  %140 = bitcast %union.anon* %8 to i32*
  %141 = select i1 %138, i32* %139, i32* %140
  %142 = load i32, i32* %141, align 4
  %143 = sdiv i32 %116, %142
  store i32 %143, i32* %131, align 4
  %144 = load i32*, i32** %120, align 8
  %145 = icmp ugt i32 %6, 1
  br i1 %145, label %149, label %146

146:                                              ; preds = %149, %128, %115
  %147 = phi i32* [ null, %115 ], [ %144, %128 ], [ %164, %149 ]
  %148 = icmp eq i32 %116, 0
  br i1 %148, label %167, label %174

149:                                              ; preds = %128, %149
  %150 = phi i64 [ %165, %149 ], [ 1, %128 ]
  %151 = phi i32* [ %164, %149 ], [ %144, %128 ]
  %152 = phi i64 [ %150, %149 ], [ 0, %128 ]
  %153 = getelementptr inbounds i32, i32* %151, i64 %152
  %154 = load i32, i32* %153, align 4
  %155 = load i32, i32* %5, align 8
  %156 = icmp sgt i32 %155, 5
  %157 = load i32*, i32** %136, align 8
  %158 = getelementptr inbounds i32, i32* %157, i64 %150
  %159 = getelementptr inbounds [5 x i32], [5 x i32]* %137, i64 0, i64 %150
  %160 = select i1 %156, i32* %158, i32* %159
  %161 = load i32, i32* %160, align 4
  %162 = sdiv i32 %154, %161
  %163 = getelementptr inbounds i32, i32* %151, i64 %150
  store i32 %162, i32* %163, align 4
  %164 = load i32*, i32** %120, align 8
  %165 = add nuw i64 %150, 1
  %166 = icmp ult i64 %165, %118
  br i1 %166, label %149, label %146

167:                                              ; preds = %200, %146
  %168 = icmp eq i32* %147, null
  br i1 %168, label %173, label %169

169:                                              ; preds = %167
  %170 = ptrtoint i32* %147 to i64
  %171 = bitcast i32** %121 to i64*
  store i64 %170, i64* %171, align 8
  %172 = bitcast i32* %147 to i8*
  tail call void @_ZdlPv(i8* %172) #8
  br label %173

173:                                              ; preds = %167, %169
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %119) #7
  ret void

174:                                              ; preds = %146, %200
  %175 = phi i64 [ %202, %200 ], [ 0, %146 ]
  %176 = phi i32 [ %201, %200 ], [ 0, %146 ]
  %177 = getelementptr inbounds i8, i8* %1, i64 %175
  %178 = load i8, i8* %177, align 1, !range !12
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %200, label %180

180:                                              ; preds = %174
  br i1 %123, label %185, label %181

181:                                              ; preds = %180
  %182 = sext i32 %176 to i64
  %183 = mul nsw i64 %182, %118
  %184 = trunc i64 %175 to i32
  br label %187

185:                                              ; preds = %187, %180
  %186 = add nsw i32 %176, 1
  br label %200

187:                                              ; preds = %181, %187
  %188 = phi i64 [ 0, %181 ], [ %198, %187 ]
  %189 = phi i32 [ %184, %181 ], [ %197, %187 ]
  %190 = getelementptr inbounds i32, i32* %147, i64 %188
  %191 = load i32, i32* %190, align 4
  %192 = sdiv i32 %189, %191
  %193 = sext i32 %192 to i64
  %194 = add i64 %188, %183
  %195 = getelementptr inbounds i64, i64* %2, i64 %194
  store i64 %193, i64* %195, align 8
  %196 = load i32, i32* %190, align 4
  %197 = srem i32 %189, %196
  %198 = add nuw i64 %188, 1
  %199 = icmp ult i64 %198, %118
  br i1 %199, label %187, label %185

200:                                              ; preds = %174, %185
  %201 = phi i32 [ %186, %185 ], [ %176, %174 ]
  %202 = add nuw i64 %175, 1
  %203 = icmp ult i64 %202, %117
  br i1 %203, label %174, label %167
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.TfLiteRegistration* @_ZN6tflite3ops7builtin14Register_WHEREEv() local_unnamed_addr #3 {
  ret %struct.TfLiteRegistration* @_ZZN6tflite3ops7builtin14Register_WHEREEvE1r
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #5

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!4 = distinct !{!4, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = distinct !{!9, !10, !6}
!10 = !{!"llvm.loop.unroll.runtime.disable"}
!11 = distinct !{!11, !6}
!12 = !{i8 0, i8 2}
!13 = distinct !{!13, !10, !6}
!14 = !{!15}
!15 = distinct !{!15, !16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor: argument 0"}
!16 = distinct !{!16, !"_ZN6tflite14GetTensorShapeEPK12TfLiteTensor"}
!17 = distinct !{!17, !6}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10, !6}
