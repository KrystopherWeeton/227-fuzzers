; ModuleID = '../../third_party/webrtc/modules/audio_coding/neteq/sync_buffer.cc'
source_filename = "../../third_party/webrtc/modules/audio_coding/neteq/sync_buffer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::SyncBuffer" = type { %"class.webrtc::AudioMultiVector", i64, i32, i64 }
%"class.webrtc::AudioMultiVector" = type { i32 (...)**, %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::AudioVector"**, %"class.webrtc::AudioVector"**, %"class.std::__1::__compressed_pair.1" }
%"class.webrtc::AudioVector" = type { i32 (...)**, %"class.std::__1::unique_ptr", i64, i64, i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i16* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"class.webrtc::AudioVector"** }
%"class.rtc::BufferT" = type { i64, i64, %"class.std::__1::unique_ptr" }
%"class.webrtc::AudioFrame" = type { i32, i64, i64, i64, i32, i64, i32, i32, i32, i64, %"class.webrtc::RtpPacketInfos", [7680 x i16], i8, %"class.absl::optional.19" }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr" }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector.5" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.24" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.7", i32, %"class.absl::optional", %"class.absl::optional.14", %"class.absl::optional.19", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.7" = type { %"class.std::__1::__vector_base.8" }
%"class.std::__1::__vector_base.8" = type { i32*, i32*, %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }
%"class.absl::optional.14" = type { %"class.absl::optional_internal::optional_data.15" }
%"class.absl::optional_internal::optional_data.15" = type { %"class.absl::optional_internal::optional_data_base.16" }
%"class.absl::optional_internal::optional_data_base.16" = type { %"class.absl::optional_internal::optional_data_dtor_base.17" }
%"class.absl::optional_internal::optional_data_dtor_base.17" = type { i8, %union.anon.18 }
%union.anon.18 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.19" }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.webrtc::RtpPacketInfo"* }
%"class.absl::optional.19" = type { %"class.absl::optional_internal::optional_data.20" }
%"class.absl::optional_internal::optional_data.20" = type { %"class.absl::optional_internal::optional_data_base.21" }
%"class.absl::optional_internal::optional_data_base.21" = type { %"class.absl::optional_internal::optional_data_dtor_base.22" }
%"class.absl::optional_internal::optional_data_dtor_base.22" = type { i8, %union.anon.23 }
%union.anon.23 = type { i64 }

$_ZN6webrtc10SyncBufferD0Ev = comdat any

@_ZTVN6webrtc10SyncBufferE = hidden unnamed_addr constant { [24 x i8*] } { [24 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::AudioMultiVector"*)* @_ZN6webrtc16AudioMultiVectorD2Ev to i8*), i8* bitcast (void (%"class.webrtc::SyncBuffer"*)* @_ZN6webrtc10SyncBufferD0Ev to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*)* @_ZN6webrtc16AudioMultiVector5ClearEv to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc16AudioMultiVector5ZerosEm to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"*)* @_ZNK6webrtc16AudioMultiVector6CopyToEPS0_ to i8*), i8* bitcast (void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*)* @_ZN6webrtc10SyncBuffer8PushBackERKNS_16AudioMultiVectorE to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc16AudioMultiVector17PushBackFromIndexERKS0_m to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc16AudioMultiVector8PopFrontEm to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc16AudioMultiVector7PopBackEm to i8*), i8* bitcast (i64 (%"class.webrtc::AudioMultiVector"*, i64, i16*)* @_ZNK6webrtc16AudioMultiVector15ReadInterleavedEmPs to i8*), i8* bitcast (i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)* @_ZNK6webrtc16AudioMultiVector24ReadInterleavedFromIndexEmmPs to i8*), i8* bitcast (i64 (%"class.webrtc::AudioMultiVector"*, i64, i16*)* @_ZNK6webrtc16AudioMultiVector22ReadInterleavedFromEndEmPs to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"*, i64, i64)* @_ZN6webrtc16AudioMultiVector11OverwriteAtERKS0_mm to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc16AudioMultiVector9CrossFadeERKS0_m to i8*), i8* bitcast (i64 (%"class.webrtc::AudioMultiVector"*)* @_ZNK6webrtc16AudioMultiVector8ChannelsEv to i8*), i8* bitcast (i64 (%"class.webrtc::AudioMultiVector"*)* @_ZNK6webrtc16AudioMultiVector4SizeEv to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc16AudioMultiVector10AssertSizeEm to i8*), i8* bitcast (i1 (%"class.webrtc::AudioMultiVector"*)* @_ZNK6webrtc16AudioMultiVector5EmptyEv to i8*), i8* bitcast (void (%"class.webrtc::AudioMultiVector"*, i64, i64)* @_ZN6webrtc16AudioMultiVector11CopyChannelEmm to i8*), i8* bitcast (void (%"class.webrtc::SyncBuffer"*, i64, i64)* @_ZN6webrtc10SyncBuffer18InsertZerosAtIndexEmm to i8*), i8* bitcast (void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)* @_ZN6webrtc10SyncBuffer14ReplaceAtIndexERKNS_16AudioMultiVectorEmm to i8*), i8* bitcast (void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64)* @_ZN6webrtc10SyncBuffer14ReplaceAtIndexERKNS_16AudioMultiVectorEm to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6webrtc10SyncBuffer12FutureLengthEv(%"class.webrtc::SyncBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %3 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %4 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %4, i64 15
  %6 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, align 8
  %7 = tail call i64 %6(%"class.webrtc::AudioMultiVector"* %2) #7
  %8 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  ret i64 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer8PushBackERKNS_16AudioMultiVectorE(%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40)) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.webrtc::AudioMultiVector"* %1 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %4 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %4, i64 15
  %6 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, align 8
  %7 = tail call i64 %6(%"class.webrtc::AudioMultiVector"* %1) #7
  %8 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc16AudioMultiVector8PushBackERKS0_(%"class.webrtc::AudioMultiVector"* %8, %"class.webrtc::AudioMultiVector"* dereferenceable(40) %1) #7
  tail call void @_ZN6webrtc16AudioMultiVector8PopFrontEm(%"class.webrtc::AudioMultiVector"* %8, i64 %7) #7
  %9 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = tail call i64 @llvm.usub.sat.i64(i64 %10, i64 %7)
  store i64 %11, i64* %9, align 8
  %12 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = icmp ult i64 %7, %13
  %15 = select i1 %14, i64 %7, i64 %13
  %16 = sub i64 %13, %15
  store i64 %16, i64* %12, align 8
  ret void
}

declare void @_ZN6webrtc16AudioMultiVector8PushBackERKS0_(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40)) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector8PopFrontEm(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer19PushBackInterleavedERKN3rtc7BufferTIsLb0EEE(%"class.webrtc::SyncBuffer"*, %"class.rtc::BufferT"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %4 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %5 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, i64 15
  %7 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %6, align 8
  %8 = tail call i64 %7(%"class.webrtc::AudioMultiVector"* %3) #7
  %9 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %"class.rtc::BufferT", %"class.rtc::BufferT"* %1, i64 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  %14 = select i1 %13, i16* null, i16* %10
  tail call void @_ZN6webrtc16AudioMultiVector19PushBackInterleavedEN3rtc9ArrayViewIKsLln4711EEE(%"class.webrtc::AudioMultiVector"* %3, i16* %14, i64 %12) #7
  %15 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %4, align 8
  %16 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %15, i64 15
  %17 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %16, align 8
  %18 = tail call i64 %17(%"class.webrtc::AudioMultiVector"* %3) #7
  %19 = sub i64 %18, %8
  tail call void @_ZN6webrtc16AudioMultiVector8PopFrontEm(%"class.webrtc::AudioMultiVector"* %3, i64 %19) #7
  %20 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ult i64 %19, %21
  %23 = select i1 %22, i64 %19, i64 %21
  %24 = sub i64 %21, %23
  store i64 %24, i64* %20, align 8
  %25 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 3
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %19, %26
  %28 = select i1 %27, i64 %19, i64 %26
  %29 = sub i64 %26, %28
  store i64 %29, i64* %25, align 8
  ret void
}

declare void @_ZN6webrtc16AudioMultiVector19PushBackInterleavedEN3rtc9ArrayViewIKsLln4711EEE(%"class.webrtc::AudioMultiVector"*, i16*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer14PushFrontZerosEm(%"class.webrtc::SyncBuffer"*, i64) local_unnamed_addr #0 align 2 {
  %3 = bitcast %"class.webrtc::SyncBuffer"* %0 to void (%"class.webrtc::SyncBuffer"*, i64, i64)***
  %4 = load void (%"class.webrtc::SyncBuffer"*, i64, i64)**, void (%"class.webrtc::SyncBuffer"*, i64, i64)*** %3, align 8
  %5 = getelementptr inbounds void (%"class.webrtc::SyncBuffer"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, i64, i64)** %4, i64 19
  %6 = load void (%"class.webrtc::SyncBuffer"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, i64, i64)** %5, align 8
  tail call void %6(%"class.webrtc::SyncBuffer"* %0, i64 %1, i64 0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer18InsertZerosAtIndexEmm(%"class.webrtc::SyncBuffer"*, i64, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %5 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %6 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %7 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %6, i64 15
  %8 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %7, align 8
  %9 = tail call i64 %8(%"class.webrtc::AudioMultiVector"* %4) #7
  %10 = icmp ult i64 %9, %2
  %11 = select i1 %10, i64 %9, i64 %2
  %12 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %13 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %12, i64 15
  %14 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %13, align 8
  %15 = tail call i64 %14(%"class.webrtc::AudioMultiVector"* %4) #7
  %16 = sub i64 %15, %11
  %17 = icmp ult i64 %16, %1
  %18 = select i1 %17, i64 %16, i64 %1
  tail call void @_ZN6webrtc16AudioMultiVector7PopBackEm(%"class.webrtc::AudioMultiVector"* %4, i64 %18) #7
  %19 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %20 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %19, i64 14
  %21 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %20, align 8
  %22 = tail call i64 %21(%"class.webrtc::AudioMultiVector"* %4) #7
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %26, label %24

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  br label %30

26:                                               ; preds = %30, %3
  %27 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp ult i64 %28, %11
  br i1 %29, label %53, label %45

30:                                               ; preds = %24, %30
  %31 = phi i64 [ 0, %24 ], [ %39, %30 ]
  %32 = load %"class.webrtc::AudioVector"**, %"class.webrtc::AudioVector"*** %25, align 8
  %33 = getelementptr inbounds %"class.webrtc::AudioVector"*, %"class.webrtc::AudioVector"** %32, i64 %31
  %34 = load %"class.webrtc::AudioVector"*, %"class.webrtc::AudioVector"** %33, align 8
  %35 = bitcast %"class.webrtc::AudioVector"* %34 to void (%"class.webrtc::AudioVector"*, i64, i64)***
  %36 = load void (%"class.webrtc::AudioVector"*, i64, i64)**, void (%"class.webrtc::AudioVector"*, i64, i64)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.webrtc::AudioVector"*, i64, i64)*, void (%"class.webrtc::AudioVector"*, i64, i64)** %36, i64 14
  %38 = load void (%"class.webrtc::AudioVector"*, i64, i64)*, void (%"class.webrtc::AudioVector"*, i64, i64)** %37, align 8
  tail call void %38(%"class.webrtc::AudioVector"* %34, i64 %18, i64 %11) #7
  %39 = add nuw i64 %31, 1
  %40 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %41 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %40, i64 14
  %42 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %41, align 8
  %43 = tail call i64 %42(%"class.webrtc::AudioMultiVector"* %4) #7
  %44 = icmp ult i64 %39, %43
  br i1 %44, label %30, label %26

45:                                               ; preds = %26
  %46 = add i64 %28, %18
  %47 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %48 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %47, i64 15
  %49 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %48, align 8
  %50 = tail call i64 %49(%"class.webrtc::AudioMultiVector"* %4) #7
  %51 = icmp ult i64 %50, %46
  %52 = select i1 %51, i64 %50, i64 %46
  store i64 %52, i64* %27, align 8
  br label %53

53:                                               ; preds = %26, %45
  %54 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = icmp eq i64 %55, 0
  %57 = icmp ult i64 %55, %11
  %58 = or i1 %56, %57
  br i1 %58, label %67, label %59

59:                                               ; preds = %53
  %60 = add i64 %55, %18
  %61 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %62 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %61, i64 15
  %63 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %62, align 8
  %64 = tail call i64 %63(%"class.webrtc::AudioMultiVector"* %4) #7
  %65 = icmp ult i64 %64, %60
  %66 = select i1 %65, i64 %64, i64 %60
  store i64 %66, i64* %54, align 8
  br label %67

67:                                               ; preds = %53, %59
  ret void
}

declare void @_ZN6webrtc16AudioMultiVector7PopBackEm(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer14set_next_indexEm(%"class.webrtc::SyncBuffer"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %4 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %5 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, i64 15
  %7 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %6, align 8
  %8 = tail call i64 %7(%"class.webrtc::AudioMultiVector"* %3) #7
  %9 = icmp ult i64 %8, %1
  %10 = select i1 %9, i64 %8, i64 %1
  %11 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer14set_dtmf_indexEm(%"class.webrtc::SyncBuffer"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %4 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %5 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, i64 15
  %7 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %6, align 8
  %8 = tail call i64 %7(%"class.webrtc::AudioMultiVector"* %3) #7
  %9 = icmp ult i64 %8, %1
  %10 = select i1 %9, i64 %8, i64 %1
  %11 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 3
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer14ReplaceAtIndexERKNS_16AudioMultiVectorEmm(%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40), i64, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %6 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %7 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %6, align 8
  %8 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %7, i64 15
  %9 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %8, align 8
  %10 = tail call i64 %9(%"class.webrtc::AudioMultiVector"* %5) #7
  %11 = icmp ult i64 %10, %3
  %12 = select i1 %11, i64 %10, i64 %3
  %13 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %6, align 8
  %14 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %13, i64 15
  %15 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %14, align 8
  %16 = tail call i64 %15(%"class.webrtc::AudioMultiVector"* %5) #7
  %17 = sub i64 %16, %12
  %18 = icmp ult i64 %17, %2
  %19 = select i1 %18, i64 %17, i64 %2
  tail call void @_ZN6webrtc16AudioMultiVector11OverwriteAtERKS0_mm(%"class.webrtc::AudioMultiVector"* %5, %"class.webrtc::AudioMultiVector"* dereferenceable(40) %1, i64 %19, i64 %12) #7
  ret void
}

declare void @_ZN6webrtc16AudioMultiVector11OverwriteAtERKS0_mm(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40), i64, i64) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer14ReplaceAtIndexERKNS_16AudioMultiVectorEm(%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40), i64) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.webrtc::AudioMultiVector"* %1 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %5 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %4, align 8
  %6 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, i64 15
  %7 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %6, align 8
  %8 = tail call i64 %7(%"class.webrtc::AudioMultiVector"* %1) #7
  %9 = bitcast %"class.webrtc::SyncBuffer"* %0 to void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)***
  %10 = load void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)**, void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)*** %9, align 8
  %11 = getelementptr inbounds void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)** %10, i64 20
  %12 = load void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)*, void (%"class.webrtc::SyncBuffer"*, %"class.webrtc::AudioMultiVector"*, i64, i64)** %11, align 8
  tail call void %12(%"class.webrtc::SyncBuffer"* %0, %"class.webrtc::AudioMultiVector"* dereferenceable(40) %1, i64 %8, i64 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer23GetNextAudioInterleavedEmPNS_10AudioFrameE(%"class.webrtc::SyncBuffer"*, i64, %"class.webrtc::AudioFrame"*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %5 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %6 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %7 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %6, i64 15
  %8 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %7, align 8
  %9 = tail call i64 %8(%"class.webrtc::AudioMultiVector"* %4) #7
  %10 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = icmp ugt i64 %12, %1
  %14 = select i1 %13, i64 %1, i64 %12
  tail call void @_ZN6webrtc10AudioFrame18ResetWithoutMutingEv(%"class.webrtc::AudioFrame"* %2) #7
  %15 = load i64, i64* %10, align 8
  %16 = tail call i16* @_ZN6webrtc10AudioFrame12mutable_dataEv(%"class.webrtc::AudioFrame"* %2) #7
  %17 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)***
  %18 = load i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)**, i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)*** %17, align 8
  %19 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)*, i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)** %18, i64 10
  %20 = load i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)*, i64 (%"class.webrtc::AudioMultiVector"*, i64, i64, i16*)** %19, align 8
  %21 = tail call i64 %20(%"class.webrtc::AudioMultiVector"* %4, i64 %15, i64 %14, i16* %16) #7
  %22 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %23 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %22, i64 14
  %24 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %23, align 8
  %25 = tail call i64 %24(%"class.webrtc::AudioMultiVector"* %4) #7
  %26 = udiv i64 %21, %25
  %27 = load i64, i64* %10, align 8
  %28 = add i64 %27, %26
  store i64 %28, i64* %10, align 8
  %29 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %5, align 8
  %30 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %29, i64 14
  %31 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %30, align 8
  %32 = tail call i64 %31(%"class.webrtc::AudioMultiVector"* %4) #7
  %33 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %2, i64 0, i32 5
  store i64 %32, i64* %33, align 8
  %34 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %2, i64 0, i32 3
  store i64 %26, i64* %34, align 8
  ret void
}

declare void @_ZN6webrtc10AudioFrame18ResetWithoutMutingEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

declare i16* @_ZN6webrtc10AudioFrame12mutable_dataEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer20IncreaseEndTimestampEj(%"class.webrtc::SyncBuffer"* nocapture, i32) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = add i32 %4, %1
  store i32 %5, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10SyncBuffer5FlushEv(%"class.webrtc::SyncBuffer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  %3 = bitcast %"class.webrtc::SyncBuffer"* %0 to i64 (%"class.webrtc::AudioMultiVector"*)***
  %4 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %3, align 8
  %5 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %4, i64 15
  %6 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %5, align 8
  %7 = tail call i64 %6(%"class.webrtc::AudioMultiVector"* %2) #7
  %8 = bitcast %"class.webrtc::SyncBuffer"* %0 to void (%"class.webrtc::AudioMultiVector"*, i64)***
  %9 = load void (%"class.webrtc::AudioMultiVector"*, i64)**, void (%"class.webrtc::AudioMultiVector"*, i64)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.webrtc::AudioMultiVector"*, i64)*, void (%"class.webrtc::AudioMultiVector"*, i64)** %9, i64 3
  %11 = load void (%"class.webrtc::AudioMultiVector"*, i64)*, void (%"class.webrtc::AudioMultiVector"*, i64)** %10, align 8
  tail call void %11(%"class.webrtc::AudioMultiVector"* %2, i64 %7) #7
  %12 = load i64 (%"class.webrtc::AudioMultiVector"*)**, i64 (%"class.webrtc::AudioMultiVector"*)*** %3, align 8
  %13 = getelementptr inbounds i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %12, i64 15
  %14 = load i64 (%"class.webrtc::AudioMultiVector"*)*, i64 (%"class.webrtc::AudioMultiVector"*)** %13, align 8
  %15 = tail call i64 %14(%"class.webrtc::AudioMultiVector"* %2) #7
  %16 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 1
  store i64 %15, i64* %16, align 8
  %17 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 2
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 3
  store i64 0, i64* %18, align 8
  ret void
}

; Function Attrs: nounwind
declare void @_ZN6webrtc16AudioMultiVectorD2Ev(%"class.webrtc::AudioMultiVector"*) unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc10SyncBufferD0Ev(%"class.webrtc::SyncBuffer"*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::SyncBuffer", %"class.webrtc::SyncBuffer"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc16AudioMultiVectorD2Ev(%"class.webrtc::AudioMultiVector"* %2) #7
  %3 = bitcast %"class.webrtc::SyncBuffer"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

declare void @_ZN6webrtc16AudioMultiVector5ClearEv(%"class.webrtc::AudioMultiVector"*) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector5ZerosEm(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

declare void @_ZNK6webrtc16AudioMultiVector6CopyToEPS0_(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"*) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector17PushBackFromIndexERKS0_m(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40), i64) unnamed_addr #1

declare i64 @_ZNK6webrtc16AudioMultiVector15ReadInterleavedEmPs(%"class.webrtc::AudioMultiVector"*, i64, i16*) unnamed_addr #1

declare i64 @_ZNK6webrtc16AudioMultiVector24ReadInterleavedFromIndexEmmPs(%"class.webrtc::AudioMultiVector"*, i64, i64, i16*) unnamed_addr #1

declare i64 @_ZNK6webrtc16AudioMultiVector22ReadInterleavedFromEndEmPs(%"class.webrtc::AudioMultiVector"*, i64, i16*) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector9CrossFadeERKS0_m(%"class.webrtc::AudioMultiVector"*, %"class.webrtc::AudioMultiVector"* dereferenceable(40), i64) unnamed_addr #1

declare i64 @_ZNK6webrtc16AudioMultiVector8ChannelsEv(%"class.webrtc::AudioMultiVector"*) unnamed_addr #1

declare i64 @_ZNK6webrtc16AudioMultiVector4SizeEv(%"class.webrtc::AudioMultiVector"*) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector10AssertSizeEm(%"class.webrtc::AudioMultiVector"*, i64) unnamed_addr #1

declare zeroext i1 @_ZNK6webrtc16AudioMultiVector5EmptyEv(%"class.webrtc::AudioMultiVector"*) unnamed_addr #1

declare void @_ZN6webrtc16AudioMultiVector11CopyChannelEmm(%"class.webrtc::AudioMultiVector"*, i64, i64) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.usub.sat.i64(i64, i64) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
