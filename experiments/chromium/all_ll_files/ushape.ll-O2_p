; ModuleID = '../../third_party/icu/source/common/ushape.cpp'
source_filename = "../../third_party/icu/source/common/ushape.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.uShapeVariables = type { i16, i32, i32, i32, i32, i32 }

@_ZL7araLink = internal unnamed_addr constant [178 x i16] [i16 4385, i16 4897, i16 5377, i16 5921, i16 6403, i16 7457, i16 7939, i16 8961, i16 9475, i16 10499, i16 11523, i16 12547, i16 13571, i16 14593, i16 15105, i16 15617, i16 16129, i16 16643, i16 17667, i16 18691, i16 19715, i16 20739, i16 21763, i16 22787, i16 23811, i16 0, i16 0, i16 0, i16 0, i16 0, i16 3, i16 24835, i16 25859, i16 26883, i16 27923, i16 28931, i16 29955, i16 30979, i16 32001, i16 32513, i16 -32509, i16 260, i16 388, i16 388, i16 388, i16 388, i16 388, i16 836, i16 260, i16 1796, i16 2052, i16 2052, i16 260, i16 0, i16 0, i16 0, i16 0, i16 0, i16 -31487, i16 -30975, i16 -30463, i16 -29951, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1540, i16 9, i16 33, i16 33, i16 0, i16 33, i16 1, i16 1, i16 3, i16 5643, i16 3595, i16 523, i16 3, i16 3, i16 1547, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 10763, i16 3, i16 14345, i16 1, i16 1, i16 1, i16 13321, i16 12809, i16 13833, i16 1, i16 1, i16 15369, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 14857, i16 1, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 15883, i16 3, i16 3, i16 3, i16 3, i16 3, i16 16907, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 19977, i16 20491, i16 3, i16 3, i16 23051, i16 3, i16 21513, i16 22027, i16 1, i16 1, i16 1, i16 -28663, i16 -30455, i16 -30967, i16 -29943, i16 -28151, i16 1, i16 -29175, i16 -21493, i16 1, i16 3, i16 3, i16 -27637, i16 3, i16 24073, i16 24585], align 16
@_ZL9presALink = internal unnamed_addr constant [275 x i8] calign 16
@_ZL9presBLink = internal unnamed_addr constant [144 x i8] c"\03\03\03\00\03\00\03\03\03\03\03\03\03\03\03\03\00\00\01\00\01\00\01\00\01\00\01\02\03\00\01\00\01\02\03\00\01\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\00\01\00\01\00\01\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\02\03\00\01\00\01\00\01\02\03\00\01\00\01\00\01\00\01\00\00\00", align 16
@_ZL13convertFBto06 = internal unnamed_addr constant [176 x i16] [i16 1649, i16 1649, i16 1659, i16 1659, i16 1659, i16 1659, i16 1662, i16 1662, i16 1662, i16 1662, i16 0, i16 0, i16 0, i16 0, i16 1658, i16 1658, i16 1658, i16 1658, i16 0, i16 0, i16 0, i16 0, i16 1657, i16 1657, i16 1657, i16 1657, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1670, i16 1670, i16 1670, i16 1670, i16 0, i16 0, i16 0, i16 0, i16 1677, i16 1677, i16 1676, i16 1676, i16 1678, i16 1678, i16 1672, i16 1672, i16 1688, i16 1688, i16 1681, i16 1681, i16 1705, i16 1705, i16 1705, i16 1705, i16 1711, i16 1711, i16 1711, i16 1711, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1722, i16 1722, i16 1723, i16 1723, i16 1723, i16 1723, i16 1728, i16 1728, i16 1729, i16 1729, i16 1729, i16 1729, i16 1726, i16 1726, i16 1726, i16 1726, i16 1746, i16 1746, i16 1747, i16 1747, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1735, i16 1735, i16 1734, i16 1734, i16 1736, i16 1736, i16 0, i16 1739, i16 1739, i16 1733, i16 1733, i16 1737, i16 1737, i16 1744, i16 1744, i16 1744, i16 1744, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1740, i16 1740, i16 1740, i16 1740], align 16
@_ZL13convertFEto06 = internal unnamed_addr constant [141 x i16] [i16 1611, i16 1611, i16 1612, i16 1612, i16 1613, i16 1613, i16 1614, i16 1614, i16 1615, i16 1615, i16 1616, i16 1616, i16 1617, i16 1617, i16 1618, i16 1618, i16 1569, i16 1570, i16 1570, i16 1571, i16 1571, i16 1572, i16 1572, i16 1573, i16 1573, i16 1574, i16 1574, i16 1574, i16 1574, i16 1575, i16 1575, i16 1576, i16 1576, i16 1576, i16 1576, i16 1577, i16 1577, i16 1578, i16 1578, i16 1578, i16 1578, i16 1579, i16 1579, i16 1579, i16 1579, i16 1580, i16 1580, i16 1580, i16 1580, i16 1581, i16 1581, i16 1581, i16 1581, i16 1582, i16 1582, i16 1582, i16 1582, i16 1583, i16 1583, i16 1584, i16 1584, i16 1585, i16 1585, i16 1586, i16 1586, i16 1587, i16 1587, i16 1587, i16 1587, i16 1588, i16 1588, i16 1588, i16 1588, i16 1589, i16 1589, i16 1589, i16 1589, i16 1590, i16 1590, i16 1590, i16 1590, i16 1591, i16 1591, i16 1591, i16 1591, i16 1592, i16 1592, i16 1592, i16 1592, i16 1593, i16 1593, i16 1593, i16 1593, i16 1594, i16 1594, i16 1594, i16 1594, i16 1601, i16 1601, i16 1601, i16 1601, i16 1602, i16 1602, i16 1602, i16 1602, i16 1603, i16 1603, i16 1603, i16 1603, i16 1604, i16 1604, i16 1604, i16 1604, i16 1605, i16 1605, i16 1605, i16 1605, i16 1606, i16 1606, i16 1606, i16 1606, i16 1607, i16 1607, i16 1607, i16 1607, i16 1608, i16 1608, i16 1609, i16 1609, i16 1610, i16 1610, i16 1610, i16 1610, i16 1628, i16 1628, i16 1629, i16 1629, i16 1630, i16 1630, i16 1631, i16 1631], align 16
@_ZL10shapeTable = internal unnamed_addr constant [4 x [4 x [4 x i8]]] [[4 x [4 x i8]] [[4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\00\01\00\03", [4 x i8] c"\00\01\00\01"], [4 x [4 x i8]] [[4 x i8] c"\00\00\02\02", [4 x i8] c"\00\00\01\02", [4 x i8] c"\00\01\01\02", [4 x i8] c"\00\01\01\03"], [4 x [4 x i8]] [[4 x i8] zeroinitializer, [4 x i8] zeroinitializer, [4 x i8] c"\00\01\00\03", [4 x i8] c"\00\01\00\03"], [4 x [4 x i8]] [[4 x i8] c"\00\00\01\02", [4 x i8] c"\00\00\01\02", [4 x i8] c"\00\01\01\02", [4 x i8] c"\00\01\01\03"]], align 16
@_ZL13IrrelevantPos = internal unnamed_addr constant [8 x i8] c"\00\02\04\06\08\0A\0C\0E", align 1
@_ZL14convertLamAlef = internal unnamed_addr constant [8 x i16] [i16 1570, i16 1570, i16 1571, i16 1571, i16 1573, i16 1573, i16 1575, i16 1575], align 16
@_ZL13yehHamzaToYeh = internal unnamed_addr constant [2 x i16] [i16 -273, i16 -272], align 2
@_ZL14tashkeelMedial = internal unnamed_addr constant [16 x i8] c"\00\01\00\00\00\00\00\01\00\01\00\01\00\01\00\01", align 16
@switch.table._ZL12shapeUnicodePDsiijP10UErrorCodei15uShapeVariables = private unnamed_addr constant [6 x i16] [i16 1628, i16 1629, i16 1628, i16 1630, i16 1628, i16 1631], align 2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @u_shapeArabic_69(i16*, i32, i16*, i32, i32, i32*) local_unnamed_addr #0 {
  %7 = alloca [300 x i16], align 16
  %8 = alloca %struct.uShapeVariables, align 8
  %9 = alloca %struct.uShapeVariables, align 8
  %10 = alloca %struct.uShapeVariables, align 8
  %11 = icmp eq i32* %5, null
  br i1 %11, label %842, label %12

12:                                               ; preds = %6
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 1
  br i1 %14, label %15, label %842

15:                                               ; preds = %12
  %16 = icmp eq i16* %0, null
  %17 = icmp slt i32 %1, -1
  %18 = or i1 %16, %17
  br i1 %18, label %49, label %19

19:                                               ; preds = %15
  %20 = icmp eq i16* %2, null
  %21 = icmp ne i32 %3, 0
  %22 = and i1 %20, %21
  %23 = icmp slt i32 %3, 0
  %24 = or i1 %23, %22
  br i1 %24, label %49, label %25

25:                                               ; preds = %19
  %26 = and i32 %4, 917504
  %27 = icmp ne i32 %26, 0
  %28 = and i32 %4, 24
  %29 = icmp eq i32 %28, 24
  %30 = and i1 %27, %29
  br i1 %30, label %49, label %31

31:                                               ; preds = %25
  %32 = icmp eq i32 %28, 16
  %33 = and i1 %27, %32
  %34 = xor i1 %33, true
  %35 = and i32 %4, 512
  %36 = icmp eq i32 %35, 0
  %37 = and i1 %36, %34
  br i1 %37, label %38, label %49

38:                                               ; preds = %31
  %39 = and i32 %4, 224
  %40 = icmp eq i32 %39, 160
  br i1 %40, label %49, label %41

41:                                               ; preds = %38
  %42 = and i32 %4, 65539
  %43 = icmp eq i32 %42, 0
  %44 = and i32 %4, 16384
  %45 = icmp eq i32 %44, 0
  %46 = and i32 %4, 65563
  %47 = icmp eq i32 %46, 24
  %48 = or i1 %47, %45
  br i1 %48, label %50, label %49

49:                                               ; preds = %41, %31, %25, %19, %38, %15
  store i32 1, i32* %5, align 4
  br label %842

50:                                               ; preds = %41
  switch i32 %42, label %51 [
    i32 0, label %52
    i32 3, label %52
    i32 2, label %52
    i32 65536, label %52
    i32 1, label %52
  ]

51:                                               ; preds = %50
  store i32 1, i32* %5, align 4
  br label %842

52:                                               ; preds = %50, %50, %50, %50, %50
  %53 = xor i1 %27, true
  br i1 %27, label %54, label %58

54:                                               ; preds = %52
  %55 = add nsw i32 %26, -262144
  %56 = lshr exact i32 %55, 17
  switch i32 %56, label %57 [
    i32 4, label %58
    i32 2, label %58
    i32 1, label %58
    i32 0, label %58
  ]

57:                                               ; preds = %54
  store i32 1, i32* %5, align 4
  br label %842

58:                                               ; preds = %52, %54, %54, %54, %54
  %59 = icmp eq i32 %1, -1
  br i1 %59, label %60, label %62

60:                                               ; preds = %58
  %61 = tail call i32 @u_strlen_69(i16* nonnull %0) #5
  br label %62

62:                                               ; preds = %60, %58
  %63 = phi i32 [ %61, %60 ], [ %1, %58 ]
  %64 = icmp slt i32 %63, 1
  br i1 %64, label %65, label %67

65:                                               ; preds = %62
  %66 = tail call i32 @u_terminateUChars_69(i16* %2, i32 %3, i32 0, i32* nonnull %5) #5
  br label %842

67:                                               ; preds = %62
  br i1 %20, label %81, label %68

68:                                               ; preds = %67
  %69 = icmp ugt i16* %0, %2
  br i1 %69, label %74, label %70

70:                                               ; preds = %68
  %71 = sext i32 %63 to i64
  %72 = getelementptr inbounds i16, i16* %0, i64 %71
  %73 = icmp ugt i16* %72, %2
  br i1 %73, label %80, label %74

74:                                               ; preds = %68, %70
  %75 = icmp ugt i16* %2, %0
  br i1 %75, label %81, label %76

76:                                               ; preds = %74
  %77 = sext i32 %3 to i64
  %78 = getelementptr inbounds i16, i16* %2, i64 %77
  %79 = icmp ugt i16* %78, %0
  br i1 %79, label %80, label %81

80:                                               ; preds = %76, %70
  store i32 1, i32* %5, align 4
  br label %842

81:                                               ; preds = %74, %67, %76
  %82 = and i32 %4, 134217728
  %83 = icmp eq i32 %82, 0
  %84 = select i1 %83, i16 8203, i16 -397
  %85 = icmp eq i32 %28, 0
  br i1 %85, label %635, label %86

86:                                               ; preds = %81
  %87 = bitcast [300 x i16]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 600, i8* nonnull %87) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %87, i8 -86, i64 600, i1 false)
  br i1 %45, label %215, label %88

88:                                               ; preds = %86
  %89 = and i32 %4, 4
  %90 = icmp eq i32 %89, 0
  %91 = and i32 %4, 16408
  %92 = icmp eq i32 %91, 16408
  %93 = select i1 %90, i32 1, i32 -1
  %94 = shl nsw i32 %63, 1
  %95 = select i1 %90, i32 -1, i32 %94
  %96 = select i1 %90, i32 %63, i32 -1
  %97 = shl nsw i32 %63, 2
  %98 = sext i32 %97 to i64
  %99 = tail call noalias i8* @uprv_malloc_69(i64 %98) #6
  %100 = bitcast i8* %99 to i16*
  %101 = icmp eq i8* %99, null
  br i1 %101, label %214, label %102

102:                                              ; preds = %88
  %103 = select i1 %90, i32 -1, i32 %63
  %104 = add i32 %103, %93
  %105 = icmp eq i32 %104, %96
  br i1 %105, label %208, label %106

106:                                              ; preds = %102
  %107 = sext i32 %104 to i64
  %108 = sext i32 %93 to i64
  br label %109

109:                                              ; preds = %106, %199
  %110 = phi i64 [ %107, %106 ], [ %205, %199 ]
  %111 = phi i32 [ 0, %106 ], [ %204, %199 ]
  %112 = phi i16 [ 0, %106 ], [ %203, %199 ]
  %113 = phi i16 [ 0, %106 ], [ %202, %199 ]
  %114 = phi i32 [ 1, %106 ], [ %201, %199 ]
  %115 = phi i32 [ %95, %106 ], [ %200, %199 ]
  %116 = getelementptr inbounds i16, i16* %0, i64 %110
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i32
  %119 = add i16 %117, -1570
  %120 = icmp ult i16 %119, 178
  br i1 %120, label %121, label %126

121:                                              ; preds = %109
  %122 = add nsw i32 %118, -1570
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %123
  %125 = load i16, i16* %124, align 2
  br label %149

126:                                              ; preds = %109
  %127 = icmp eq i16 %117, 8205
  br i1 %127, label %149, label %128

128:                                              ; preds = %126
  %129 = add i16 %117, -8301
  %130 = icmp ult i16 %129, 3
  br i1 %130, label %149, label %131

131:                                              ; preds = %128
  %132 = add i16 %117, 1200
  %133 = icmp ult i16 %132, 275
  br i1 %133, label %134, label %140

134:                                              ; preds = %131
  %135 = add nsw i32 %118, -64336
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [275 x i8], [275 x i8]* @_ZL9presALink, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i16
  br label %149

140:                                              ; preds = %131
  %141 = add i16 %117, 400
  %142 = icmp ult i16 %141, 141
  br i1 %142, label %143, label %149

143:                                              ; preds = %140
  %144 = add nsw i32 %118, -65136
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [144 x i8], [144 x i8]* @_ZL9presBLink, i64 0, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = zext i8 %147 to i16
  br label %149

149:                                              ; preds = %121, %126, %128, %134, %140, %143
  %150 = phi i16 [ %125, %121 ], [ %139, %134 ], [ %148, %143 ], [ 3, %126 ], [ 4, %128 ], [ 0, %140 ]
  br i1 %92, label %151, label %194

151:                                              ; preds = %149
  %152 = or i16 %150, %112
  %153 = and i16 %152, 192
  %154 = icmp eq i16 %153, 192
  %155 = icmp ne i32 %114, 0
  %156 = and i1 %155, %154
  br i1 %156, label %157, label %194

157:                                              ; preds = %151
  %158 = icmp ult i16 %113, %117
  %159 = select i1 %158, i16 %113, i16 %117
  %160 = add i16 %159, -2542
  %161 = sext i32 %115 to i64
  %162 = getelementptr inbounds i16, i16* %100, i64 %161
  store i16 %160, i16* %162, align 2
  %163 = zext i16 %160 to i32
  %164 = add i16 %159, -4112
  %165 = icmp ult i16 %164, 178
  br i1 %165, label %166, label %171

166:                                              ; preds = %157
  %167 = add nsw i32 %163, -1570
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %168
  %170 = load i16, i16* %169, align 2
  br label %199

171:                                              ; preds = %157
  %172 = icmp eq i16 %160, 8205
  br i1 %172, label %199, label %173

173:                                              ; preds = %171
  %174 = add i16 %159, -10843
  %175 = icmp ult i16 %174, 3
  br i1 %175, label %199, label %176

176:                                              ; preds = %173
  %177 = add i16 %159, -1342
  %178 = icmp ult i16 %177, 275
  br i1 %178, label %179, label %185

179:                                              ; preds = %176
  %180 = add nsw i32 %163, -64336
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds [275 x i8], [275 x i8]* @_ZL9presALink, i64 0, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i16
  br label %199

185:                                              ; preds = %176
  %186 = add i16 %159, -2142
  %187 = icmp ult i16 %186, 141
  br i1 %187, label %188, label %199

188:                                              ; preds = %185
  %189 = add nsw i32 %163, -65136
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [144 x i8], [144 x i8]* @_ZL9presBLink, i64 0, i64 %190
  %192 = load i8, i8* %191, align 1
  %193 = zext i8 %192 to i16
  br label %199

194:                                              ; preds = %151, %149
  %195 = add nsw i32 %115, %93
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i16, i16* %100, i64 %196
  store i16 %117, i16* %197, align 2
  %198 = add nsw i32 %111, 1
  br label %199

199:                                              ; preds = %188, %185, %179, %173, %171, %166, %194
  %200 = phi i32 [ %195, %194 ], [ %115, %166 ], [ %115, %171 ], [ %115, %173 ], [ %115, %179 ], [ %115, %185 ], [ %115, %188 ]
  %201 = phi i32 [ 1, %194 ], [ 0, %166 ], [ 0, %171 ], [ 0, %173 ], [ 0, %179 ], [ 0, %185 ], [ 0, %188 ]
  %202 = phi i16 [ %117, %194 ], [ %113, %166 ], [ %113, %171 ], [ %113, %173 ], [ %113, %179 ], [ %113, %185 ], [ %113, %188 ]
  %203 = phi i16 [ %150, %194 ], [ %170, %166 ], [ 3, %171 ], [ 4, %173 ], [ %184, %179 ], [ 0, %185 ], [ %193, %188 ]
  %204 = phi i32 [ %198, %194 ], [ %111, %166 ], [ %111, %171 ], [ %111, %173 ], [ %111, %179 ], [ %111, %185 ], [ %111, %188 ]
  %205 = add i64 %110, %108
  %206 = trunc i64 %205 to i32
  %207 = icmp eq i32 %96, %206
  br i1 %207, label %208, label %109

208:                                              ; preds = %199, %102
  %209 = phi i32 [ %95, %102 ], [ %200, %199 ]
  %210 = phi i32 [ 0, %102 ], [ %204, %199 ]
  %211 = select i1 %90, i32 0, i32 %209
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i16, i16* %100, i64 %212
  br label %215

214:                                              ; preds = %88
  store i32 7, i32* %5, align 4
  br label %632

215:                                              ; preds = %208, %86
  %216 = phi i32 [ %63, %86 ], [ %210, %208 ]
  %217 = phi i16* [ %0, %86 ], [ %213, %208 ]
  %218 = phi i8* [ null, %86 ], [ %99, %208 ]
  %219 = phi i16* [ null, %86 ], [ %100, %208 ]
  %220 = icmp eq i32 %26, 524288
  %221 = or i1 %43, %220
  br i1 %221, label %222, label %224

222:                                              ; preds = %215
  %223 = tail call fastcc i32 @_ZL13calculateSizePKDsiij(i16* %217, i32 %216, i32 %4)
  br label %224

224:                                              ; preds = %215, %222
  %225 = phi i32 [ %223, %222 ], [ %216, %215 ]
  %226 = icmp sgt i32 %225, %3
  br i1 %226, label %227, label %230

227:                                              ; preds = %224
  store i32 15, i32* %5, align 4
  %228 = icmp eq i16* %219, null
  br i1 %228, label %632, label %229

229:                                              ; preds = %227
  tail call void @uprv_free_69(i8* %218) #5
  br label %632

230:                                              ; preds = %224
  %231 = icmp sgt i32 %216, %225
  %232 = select i1 %231, i32 %216, i32 %225
  %233 = icmp slt i32 %232, 301
  br i1 %233, label %234, label %236

234:                                              ; preds = %230
  %235 = getelementptr inbounds [300 x i16], [300 x i16]* %7, i64 0, i64 0
  br label %245

236:                                              ; preds = %230
  %237 = shl nsw i32 %232, 1
  %238 = sext i32 %237 to i64
  %239 = tail call noalias i8* @uprv_malloc_69(i64 %238) #6
  %240 = bitcast i8* %239 to i16*
  %241 = icmp eq i8* %239, null
  br i1 %241, label %242, label %245

242:                                              ; preds = %236
  store i32 7, i32* %5, align 4
  %243 = icmp eq i16* %219, null
  br i1 %243, label %632, label %244

244:                                              ; preds = %242
  tail call void @uprv_free_69(i8* %218) #5
  br label %632

245:                                              ; preds = %236, %234
  %246 = phi i16* [ %235, %234 ], [ %240, %236 ]
  %247 = phi i32 [ 300, %234 ], [ %232, %236 ]
  %248 = call i16* @u_memcpy_69(i16* %246, i16* %217, i32 %216) #5
  %249 = icmp eq i16* %219, null
  br i1 %249, label %251, label %250

250:                                              ; preds = %245
  call void @uprv_free_69(i8* %218) #5
  br label %251

251:                                              ; preds = %245, %250
  %252 = icmp sgt i32 %247, %216
  br i1 %252, label %253, label %260

253:                                              ; preds = %251
  %254 = sext i32 %216 to i64
  %255 = getelementptr inbounds i16, i16* %246, i64 %254
  %256 = bitcast i16* %255 to i8*
  %257 = sub nsw i32 %247, %216
  %258 = shl nsw i32 %257, 1
  %259 = sext i32 %258 to i64
  call void @llvm.memset.p0i8.i64(i8* align 2 %256, i8 0, i64 %259, i1 false)
  br label %260

260:                                              ; preds = %253, %251
  %261 = and i32 %4, 4
  %262 = icmp eq i32 %261, 0
  br i1 %262, label %263, label %309

263:                                              ; preds = %260
  %264 = load i16, i16* %246, align 2
  %265 = icmp eq i16 %264, 32
  %266 = icmp sgt i32 %216, 0
  %267 = and i1 %266, %265
  br i1 %267, label %268, label %278

268:                                              ; preds = %263, %268
  %269 = phi i64 [ %272, %268 ], [ 0, %263 ]
  %270 = phi i32 [ %271, %268 ], [ 0, %263 ]
  %271 = add nuw nsw i32 %270, 1
  %272 = add nuw nsw i64 %269, 1
  %273 = getelementptr inbounds i16, i16* %246, i64 %272
  %274 = load i16, i16* %273, align 2
  %275 = icmp eq i16 %274, 32
  %276 = icmp slt i32 %271, %216
  %277 = and i1 %276, %275
  br i1 %277, label %268, label %278

278:                                              ; preds = %268, %263
  %279 = phi i32 [ 0, %263 ], [ %271, %268 ]
  %280 = phi i1 [ %266, %263 ], [ %276, %268 ]
  br i1 %280, label %281, label %291

281:                                              ; preds = %278
  %282 = sext i32 %216 to i64
  br label %283

283:                                              ; preds = %283, %281
  %284 = phi i64 [ %282, %281 ], [ %286, %283 ]
  %285 = phi i32 [ 0, %281 ], [ %290, %283 ]
  %286 = add nsw i64 %284, -1
  %287 = getelementptr inbounds i16, i16* %246, i64 %286
  %288 = load i16, i16* %287, align 2
  %289 = icmp eq i16 %288, 32
  %290 = add nuw nsw i32 %285, 1
  br i1 %289, label %283, label %291

291:                                              ; preds = %283, %278
  %292 = phi i32 [ 0, %278 ], [ %285, %283 ]
  %293 = xor i32 %292, -1
  %294 = add i32 %216, %293
  %295 = icmp sgt i32 %294, %279
  br i1 %295, label %296, label %309

296:                                              ; preds = %291
  %297 = sext i32 %294 to i64
  %298 = sext i32 %279 to i64
  br label %299

299:                                              ; preds = %299, %296
  %300 = phi i64 [ %298, %296 ], [ %306, %299 ]
  %301 = phi i64 [ %297, %296 ], [ %307, %299 ]
  %302 = getelementptr inbounds i16, i16* %246, i64 %300
  %303 = load i16, i16* %302, align 2
  %304 = getelementptr inbounds i16, i16* %246, i64 %301
  %305 = load i16, i16* %304, align 2
  store i16 %305, i16* %302, align 2
  store i16 %303, i16* %304, align 2
  %306 = add nuw nsw i64 %300, 1
  %307 = add nsw i64 %301, -1
  %308 = icmp slt i64 %306, %307
  br i1 %308, label %299, label %309

309:                                              ; preds = %299, %291, %260
  %310 = and i32 %4, 67108868
  %311 = icmp ne i32 %310, 67108868
  %312 = xor i1 %311, true
  %313 = zext i1 %312 to i32
  %314 = select i1 %311, i32 393216, i32 262144
  %315 = select i1 %311, i32 262144, i32 393216
  %316 = select i1 %311, i32 2, i32 3
  %317 = select i1 %311, i32 3, i32 2
  switch i32 %28, label %574 [
    i32 8, label %318
    i32 24, label %382
    i32 16, label %393
  ]

318:                                              ; preds = %309
  %319 = icmp eq i32 %26, 786432
  %320 = or i1 %319, %53
  br i1 %320, label %332, label %321

321:                                              ; preds = %318
  %322 = bitcast %struct.uShapeVariables* %8 to i8*
  %323 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %8, i64 0, i32 0
  store i16 %84, i16* %323, align 8
  %324 = getelementptr inbounds i8, i8* %322, i64 2
  %325 = bitcast i8* %324 to i16*
  store i16 0, i16* %325, align 2
  %326 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %8, i64 0, i32 1
  store i32 %317, i32* %326, align 4
  %327 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %8, i64 0, i32 2
  store i32 %316, i32* %327, align 8
  %328 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %8, i64 0, i32 3
  store i32 %315, i32* %328, align 4
  %329 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %8, i64 0, i32 4
  store i32 %314, i32* %329, align 8
  %330 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %8, i64 0, i32 5
  store i32 %313, i32* %330, align 4
  %331 = call fastcc i32 @_ZL12shapeUnicodePDsiijP10UErrorCodei15uShapeVariables(i16* %246, i32 %216, i32 %4, i32* nonnull %5, i32 2, %struct.uShapeVariables* nonnull byval(%struct.uShapeVariables) align 8 %8)
  br label %574

332:                                              ; preds = %318
  %333 = bitcast %struct.uShapeVariables* %9 to i8*
  %334 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %9, i64 0, i32 0
  store i16 %84, i16* %334, align 8
  %335 = getelementptr inbounds i8, i8* %333, i64 2
  %336 = bitcast i8* %335 to i16*
  store i16 0, i16* %336, align 2
  %337 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %9, i64 0, i32 1
  store i32 %317, i32* %337, align 4
  %338 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %9, i64 0, i32 2
  store i32 %316, i32* %338, align 8
  %339 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %9, i64 0, i32 3
  store i32 %315, i32* %339, align 4
  %340 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %9, i64 0, i32 4
  store i32 %314, i32* %340, align 8
  %341 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %9, i64 0, i32 5
  store i32 %313, i32* %341, align 4
  %342 = call fastcc i32 @_ZL12shapeUnicodePDsiijP10UErrorCodei15uShapeVariables(i16* %246, i32 %216, i32 %4, i32* nonnull %5, i32 1, %struct.uShapeVariables* nonnull byval(%struct.uShapeVariables) align 8 %9)
  %343 = icmp sgt i32 %342, 0
  %344 = and i1 %319, %343
  br i1 %344, label %345, label %574

345:                                              ; preds = %332
  %346 = zext i32 %342 to i64
  br label %347

347:                                              ; preds = %379, %345
  %348 = phi i64 [ 0, %345 ], [ %380, %379 ]
  %349 = getelementptr inbounds i16, i16* %246, i64 %348
  %350 = load i16, i16* %349, align 2
  %351 = zext i16 %350 to i64
  %352 = and i16 %350, -16
  %353 = icmp eq i16 %352, -400
  br i1 %353, label %354, label %362

354:                                              ; preds = %347
  switch i16 %350, label %355 [
    i16 -387, label %377
    i16 -395, label %368
    i16 -397, label %368
  ]

355:                                              ; preds = %354
  %356 = add nsw i64 %351, -65136
  %357 = lshr i64 43650, %356
  %358 = and i64 %357, 1
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %360, label %377

360:                                              ; preds = %355
  %361 = icmp eq i16 %350, -387
  br i1 %361, label %377, label %363

362:                                              ; preds = %347
  switch i16 %350, label %368 [
    i16 -387, label %377
    i16 -780, label %377
    i16 -781, label %377
    i16 -782, label %377
  ]

363:                                              ; preds = %360
  %364 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZL14tashkeelMedial, i64 0, i64 %356
  %365 = load i8, i8* %364, align 1
  %366 = zext i8 %365 to i32
  %367 = sub nsw i32 1, %366
  br label %372

368:                                              ; preds = %362, %354, %354
  %369 = add i16 %350, 930
  %370 = icmp ult i16 %369, 6
  %371 = zext i1 %370 to i32
  br label %372

372:                                              ; preds = %368, %363
  %373 = phi i32 [ %367, %363 ], [ %371, %368 ]
  %374 = icmp eq i32 %373, 0
  %375 = icmp eq i16 %350, -388
  %376 = or i1 %375, %374
  br i1 %376, label %379, label %377

377:                                              ; preds = %372, %354, %362, %362, %362, %362, %360, %355
  %378 = phi i16 [ 1600, %355 ], [ -387, %360 ], [ -387, %362 ], [ -387, %362 ], [ -387, %362 ], [ -387, %362 ], [ %350, %354 ], [ 32, %372 ]
  store i16 %378, i16* %349, align 2
  br label %379

379:                                              ; preds = %377, %372
  %380 = add nuw nsw i64 %348, 1
  %381 = icmp eq i64 %380, %346
  br i1 %381, label %574, label %347

382:                                              ; preds = %309
  %383 = bitcast %struct.uShapeVariables* %10 to i8*
  %384 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %10, i64 0, i32 0
  store i16 %84, i16* %384, align 8
  %385 = getelementptr inbounds i8, i8* %383, i64 2
  %386 = bitcast i8* %385 to i16*
  store i16 0, i16* %386, align 2
  %387 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %10, i64 0, i32 1
  store i32 %317, i32* %387, align 4
  %388 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %10, i64 0, i32 2
  store i32 %316, i32* %388, align 8
  %389 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %10, i64 0, i32 3
  store i32 %315, i32* %389, align 4
  %390 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %10, i64 0, i32 4
  store i32 %314, i32* %390, align 8
  %391 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %10, i64 0, i32 5
  store i32 %313, i32* %391, align 4
  %392 = call fastcc i32 @_ZL12shapeUnicodePDsiijP10UErrorCodei15uShapeVariables(i16* %246, i32 %216, i32 %4, i32* nonnull %5, i32 0, %struct.uShapeVariables* nonnull byval(%struct.uShapeVariables) align 8 %10)
  br label %574

393:                                              ; preds = %309
  %394 = and i32 %4, 58720256
  %395 = icmp eq i32 %394, 16777216
  %396 = and i32 %4, 7340032
  %397 = icmp eq i32 %396, 2097152
  %398 = icmp sgt i32 %216, 0
  br i1 %398, label %399, label %574

399:                                              ; preds = %393
  %400 = add nsw i32 %216, -1
  %401 = sext i32 %400 to i64
  %402 = zext i32 %216 to i64
  br label %403

403:                                              ; preds = %452, %399
  %404 = phi i64 [ 0, %399 ], [ %457, %452 ]
  %405 = phi i32 [ 0, %399 ], [ %456, %452 ]
  %406 = getelementptr inbounds i16, i16* %246, i64 %404
  %407 = load i16, i16* %406, align 2
  %408 = zext i16 %407 to i32
  %409 = add i16 %407, 1200
  %410 = icmp ult i16 %409, 176
  br i1 %410, label %411, label %418

411:                                              ; preds = %403
  %412 = add nsw i32 %408, -64336
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds [176 x i16], [176 x i16]* @_ZL13convertFBto06, i64 0, i64 %413
  %415 = load i16, i16* %414, align 2
  %416 = icmp eq i16 %415, 0
  br i1 %416, label %452, label %417

417:                                              ; preds = %411
  store i16 %415, i16* %406, align 2
  br label %452

418:                                              ; preds = %403
  br i1 %395, label %419, label %427

419:                                              ; preds = %418
  switch i16 %407, label %427 [
    i16 1569, label %420
    i16 -384, label %420
  ]

420:                                              ; preds = %419, %419
  %421 = icmp slt i64 %404, %401
  br i1 %421, label %422, label %427

422:                                              ; preds = %420
  %423 = add nuw nsw i64 %404, 1
  %424 = getelementptr inbounds i16, i16* %246, i64 %423
  %425 = load i16, i16* %424, align 2
  switch i16 %425, label %427 [
    i16 -272, label %426
    i16 -273, label %426
    i16 1609, label %426
  ]

426:                                              ; preds = %422, %422, %422
  store i16 32, i16* %406, align 2
  store i16 1574, i16* %424, align 2
  br label %452

427:                                              ; preds = %422, %420, %419, %418
  br i1 %397, label %428, label %444

428:                                              ; preds = %427
  switch i16 %407, label %444 [
    i16 8203, label %429
    i16 -397, label %429
  ]

429:                                              ; preds = %428, %428
  %430 = icmp slt i64 %404, %401
  br i1 %430, label %431, label %444

431:                                              ; preds = %429
  %432 = add nuw nsw i64 %404, 1
  %433 = getelementptr inbounds i16, i16* %246, i64 %432
  %434 = load i16, i16* %433, align 2
  %435 = add i16 %434, 335
  %436 = icmp ult i16 %435, 14
  br i1 %436, label %437, label %444

437:                                              ; preds = %431
  %438 = zext i16 %434 to i64
  %439 = add nsw i64 %438, -65201
  %440 = lshr i64 3276, %439
  %441 = and i64 %440, 1
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %443, label %444

443:                                              ; preds = %437
  store i16 32, i16* %406, align 2
  br label %452

444:                                              ; preds = %437, %431, %429, %428, %427
  %445 = add i16 %407, 400
  %446 = icmp ult i16 %445, 133
  br i1 %446, label %447, label %452

447:                                              ; preds = %444
  %448 = add nsw i32 %408, -65136
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds [141 x i16], [141 x i16]* @_ZL13convertFEto06, i64 0, i64 %449
  %451 = load i16, i16* %450, align 2
  store i16 %451, i16* %406, align 2
  br label %452

452:                                              ; preds = %447, %444, %443, %426, %417, %411
  %453 = phi i16 [ %407, %444 ], [ %415, %417 ], [ %407, %411 ], [ 32, %426 ], [ %451, %447 ], [ 32, %443 ]
  %454 = add i16 %453, 267
  %455 = icmp ugt i16 %454, 7
  %456 = select i1 %455, i32 %405, i32 1
  %457 = add nuw nsw i64 %404, 1
  %458 = icmp eq i64 %457, %402
  br i1 %458, label %459, label %403

459:                                              ; preds = %452
  %460 = icmp eq i32 %456, 0
  br i1 %460, label %574, label %461

461:                                              ; preds = %459
  %462 = icmp eq i32 %42, 65536
  br i1 %462, label %463, label %500

463:                                              ; preds = %461
  br i1 %311, label %464, label %470

464:                                              ; preds = %463
  %465 = call fastcc i32 @_ZL23expandCompositCharAtEndPDsiiP10UErrorCode(i16* %246, i32 %216, i32* %5) #5
  %466 = load i32, i32* %5, align 4
  %467 = icmp eq i32 %466, 20
  br i1 %467, label %468, label %500

468:                                              ; preds = %464
  store i32 0, i32* %5, align 4
  %469 = call fastcc i32 @_ZL25expandCompositCharAtBeginPDsiiP10UErrorCode(i16* %246, i32 %216, i32* %5) #5
  br label %476

470:                                              ; preds = %463
  %471 = call fastcc i32 @_ZL25expandCompositCharAtBeginPDsiiP10UErrorCode(i16* %246, i32 %216, i32* %5) #5
  %472 = load i32, i32* %5, align 4
  %473 = icmp eq i32 %472, 20
  br i1 %473, label %474, label %500

474:                                              ; preds = %470
  store i32 0, i32* %5, align 4
  %475 = call fastcc i32 @_ZL23expandCompositCharAtEndPDsiiP10UErrorCode(i16* %246, i32 %216, i32* %5) #5
  br label %476

476:                                              ; preds = %474, %468
  %477 = phi i32 [ %475, %474 ], [ %469, %468 ]
  %478 = load i32, i32* %5, align 4
  %479 = icmp eq i32 %478, 20
  br i1 %479, label %480, label %500

480:                                              ; preds = %476
  store i32 0, i32* %5, align 4
  br label %481

481:                                              ; preds = %498, %480
  %482 = phi i64 [ 0, %480 ], [ %483, %498 ]
  %483 = add nuw nsw i64 %482, 1
  %484 = getelementptr inbounds i16, i16* %246, i64 %483
  %485 = load i16, i16* %484, align 2
  %486 = add i16 %485, 267
  %487 = icmp ugt i16 %486, 7
  br i1 %487, label %498, label %488

488:                                              ; preds = %481
  %489 = getelementptr inbounds i16, i16* %246, i64 %482
  %490 = load i16, i16* %489, align 2
  %491 = icmp eq i16 %490, 32
  br i1 %491, label %492, label %497

492:                                              ; preds = %488
  store i16 1604, i16* %484, align 2
  %493 = zext i16 %485 to i64
  %494 = add nsw i64 %493, -65269
  %495 = getelementptr inbounds [8 x i16], [8 x i16]* @_ZL14convertLamAlef, i64 0, i64 %494
  %496 = load i16, i16* %495, align 2
  store i16 %496, i16* %489, align 2
  br label %498

497:                                              ; preds = %488
  store i32 20, i32* %5, align 4
  br label %498

498:                                              ; preds = %497, %492, %481
  %499 = icmp eq i64 %483, %402
  br i1 %499, label %500, label %481

500:                                              ; preds = %498, %476, %470, %464, %461
  %501 = phi i32 [ %477, %476 ], [ %216, %461 ], [ %471, %470 ], [ %465, %464 ], [ %216, %498 ]
  %502 = icmp eq i32 %42, %316
  br i1 %502, label %503, label %505

503:                                              ; preds = %500
  %504 = call fastcc i32 @_ZL23expandCompositCharAtEndPDsiiP10UErrorCode(i16* %246, i32 %216, i32* %5) #5
  br label %505

505:                                              ; preds = %503, %500
  %506 = phi i32 [ %501, %500 ], [ %504, %503 ]
  %507 = icmp eq i32 %42, %317
  br i1 %507, label %508, label %510

508:                                              ; preds = %505
  %509 = call fastcc i32 @_ZL25expandCompositCharAtBeginPDsiiP10UErrorCode(i16* %246, i32 %216, i32* %5) #5
  br label %510

510:                                              ; preds = %508, %505
  %511 = phi i32 [ %506, %505 ], [ %509, %508 ]
  %512 = icmp eq i32 %42, 1
  br i1 %512, label %513, label %532

513:                                              ; preds = %510, %530
  %514 = phi i64 [ %515, %530 ], [ 0, %510 ]
  %515 = add nuw nsw i64 %514, 1
  %516 = getelementptr inbounds i16, i16* %246, i64 %515
  %517 = load i16, i16* %516, align 2
  %518 = add i16 %517, 267
  %519 = icmp ugt i16 %518, 7
  br i1 %519, label %530, label %520

520:                                              ; preds = %513
  %521 = getelementptr inbounds i16, i16* %246, i64 %514
  %522 = load i16, i16* %521, align 2
  %523 = icmp eq i16 %522, 32
  br i1 %523, label %524, label %529

524:                                              ; preds = %520
  store i16 1604, i16* %516, align 2
  %525 = zext i16 %517 to i64
  %526 = add nsw i64 %525, -65269
  %527 = getelementptr inbounds [8 x i16], [8 x i16]* @_ZL14convertLamAlef, i64 0, i64 %526
  %528 = load i16, i16* %527, align 2
  store i16 %528, i16* %521, align 2
  br label %530

529:                                              ; preds = %520
  store i32 20, i32* %5, align 4
  br label %530

530:                                              ; preds = %529, %524, %513
  %531 = icmp eq i64 %515, %402
  br i1 %531, label %532, label %513

532:                                              ; preds = %530, %510
  %533 = phi i32 [ %511, %510 ], [ %216, %530 ]
  br i1 %43, label %534, label %574

534:                                              ; preds = %532
  %535 = call fastcc i32 @_ZL13calculateSizePKDsiij(i16* %246, i32 %216, i32 %4) #5
  %536 = shl i32 %535, 1
  %537 = add i32 %536, 2
  %538 = sext i32 %537 to i64
  %539 = call noalias i8* @uprv_malloc_69(i64 %538) #6
  %540 = bitcast i8* %539 to i16*
  %541 = icmp eq i8* %539, null
  br i1 %541, label %542, label %543

542:                                              ; preds = %534
  store i32 7, i32* %5, align 4
  br label %574

543:                                              ; preds = %534
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %539, i8 0, i64 %538, i1 false) #5
  %544 = icmp sgt i32 %535, 0
  br i1 %544, label %545, label %572

545:                                              ; preds = %543
  %546 = sext i32 %535 to i64
  br label %547

547:                                              ; preds = %562, %545
  %548 = phi i64 [ 0, %545 ], [ %567, %562 ]
  %549 = phi i32 [ 0, %545 ], [ %568, %562 ]
  %550 = getelementptr inbounds i16, i16* %246, i64 %548
  %551 = load i16, i16* %550, align 2
  %552 = add i16 %551, 267
  %553 = icmp ugt i16 %552, 7
  br i1 %553, label %562, label %554

554:                                              ; preds = %547
  %555 = zext i16 %551 to i64
  %556 = add nsw i64 %555, -65269
  %557 = getelementptr inbounds [8 x i16], [8 x i16]* @_ZL14convertLamAlef, i64 0, i64 %556
  %558 = load i16, i16* %557, align 2
  %559 = sext i32 %549 to i64
  %560 = getelementptr inbounds i16, i16* %540, i64 %559
  store i16 %558, i16* %560, align 2
  %561 = add nsw i32 %549, 1
  br label %562

562:                                              ; preds = %547, %554
  %563 = phi i32 [ %561, %554 ], [ %549, %547 ]
  %564 = phi i16 [ 1604, %554 ], [ %551, %547 ]
  %565 = sext i32 %563 to i64
  %566 = getelementptr inbounds i16, i16* %540, i64 %565
  store i16 %564, i16* %566, align 2
  %567 = add nuw nsw i64 %548, 1
  %568 = add nsw i32 %563, 1
  %569 = icmp slt i64 %567, %546
  %570 = icmp slt i32 %568, %535
  %571 = and i1 %569, %570
  br i1 %571, label %547, label %572

572:                                              ; preds = %562, %543
  %573 = call i16* @u_memcpy_69(i16* %246, i16* nonnull %540, i32 %535) #5
  call void @uprv_free_69(i8* nonnull %539) #5
  br label %574

574:                                              ; preds = %379, %572, %542, %532, %459, %393, %309, %321, %332, %382
  %575 = phi i32 [ %392, %382 ], [ %331, %321 ], [ %342, %332 ], [ 0, %309 ], [ %216, %459 ], [ 0, %542 ], [ %535, %572 ], [ %533, %532 ], [ %216, %393 ], [ %342, %379 ]
  br i1 %262, label %576, label %622

576:                                              ; preds = %574
  %577 = load i16, i16* %246, align 2
  %578 = icmp eq i16 %577, 32
  %579 = icmp sgt i32 %575, 0
  %580 = and i1 %579, %578
  br i1 %580, label %581, label %591

581:                                              ; preds = %576, %581
  %582 = phi i64 [ %585, %581 ], [ 0, %576 ]
  %583 = phi i32 [ %584, %581 ], [ 0, %576 ]
  %584 = add nuw nsw i32 %583, 1
  %585 = add nuw nsw i64 %582, 1
  %586 = getelementptr inbounds i16, i16* %246, i64 %585
  %587 = load i16, i16* %586, align 2
  %588 = icmp eq i16 %587, 32
  %589 = icmp slt i32 %584, %575
  %590 = and i1 %589, %588
  br i1 %590, label %581, label %591

591:                                              ; preds = %581, %576
  %592 = phi i32 [ 0, %576 ], [ %584, %581 ]
  %593 = phi i1 [ %579, %576 ], [ %589, %581 ]
  br i1 %593, label %594, label %604

594:                                              ; preds = %591
  %595 = sext i32 %575 to i64
  br label %596

596:                                              ; preds = %596, %594
  %597 = phi i64 [ %595, %594 ], [ %599, %596 ]
  %598 = phi i32 [ 0, %594 ], [ %603, %596 ]
  %599 = add nsw i64 %597, -1
  %600 = getelementptr inbounds i16, i16* %246, i64 %599
  %601 = load i16, i16* %600, align 2
  %602 = icmp eq i16 %601, 32
  %603 = add nuw nsw i32 %598, 1
  br i1 %602, label %596, label %604

604:                                              ; preds = %596, %591
  %605 = phi i32 [ 0, %591 ], [ %598, %596 ]
  %606 = xor i32 %605, -1
  %607 = add i32 %575, %606
  %608 = icmp sgt i32 %607, %592
  br i1 %608, label %609, label %622

609:                                              ; preds = %604
  %610 = sext i32 %607 to i64
  %611 = sext i32 %592 to i64
  br label %612

612:                                              ; preds = %612, %609
  %613 = phi i64 [ %611, %609 ], [ %619, %612 ]
  %614 = phi i64 [ %610, %609 ], [ %620, %612 ]
  %615 = getelementptr inbounds i16, i16* %246, i64 %613
  %616 = load i16, i16* %615, align 2
  %617 = getelementptr inbounds i16, i16* %246, i64 %614
  %618 = load i16, i16* %617, align 2
  store i16 %618, i16* %615, align 2
  store i16 %616, i16* %617, align 2
  %619 = add nuw nsw i64 %613, 1
  %620 = add nsw i64 %614, -1
  %621 = icmp slt i64 %619, %620
  br i1 %621, label %612, label %622

622:                                              ; preds = %612, %604, %574
  %623 = call i32 @uprv_min_69(i32 %575, i32 %3) #5
  %624 = call i16* @u_memcpy_69(i16* %2, i16* %246, i32 %623) #5
  %625 = getelementptr inbounds [300 x i16], [300 x i16]* %7, i64 0, i64 0
  %626 = icmp eq i16* %246, %625
  br i1 %626, label %629, label %627

627:                                              ; preds = %622
  %628 = bitcast i16* %246 to i8*
  call void @uprv_free_69(i8* %628) #5
  br label %629

629:                                              ; preds = %622, %627
  %630 = icmp sgt i32 %575, %3
  br i1 %630, label %631, label %634

631:                                              ; preds = %629
  store i32 15, i32* %5, align 4
  br label %632

632:                                              ; preds = %631, %214, %227, %229, %242, %244
  %633 = phi i32 [ 0, %244 ], [ 0, %242 ], [ %225, %229 ], [ %225, %227 ], [ 0, %214 ], [ %575, %631 ]
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %87) #5
  br label %842

634:                                              ; preds = %629
  call void @llvm.lifetime.end.p0i8(i64 600, i8* nonnull %87) #5
  br label %640

635:                                              ; preds = %81
  %636 = icmp sgt i32 %63, %3
  br i1 %636, label %637, label %638

637:                                              ; preds = %635
  store i32 15, i32* %5, align 4
  br label %842

638:                                              ; preds = %635
  %639 = tail call i16* @u_memcpy_69(i16* %2, i16* nonnull %0, i32 %63) #5
  br label %640

640:                                              ; preds = %634, %638
  %641 = phi i32 [ %575, %634 ], [ %63, %638 ]
  %642 = icmp eq i32 %39, 0
  br i1 %642, label %840, label %643

643:                                              ; preds = %640
  %644 = and i32 %4, 768
  %645 = icmp eq i32 %644, 256
  %646 = select i1 %645, i16 1776, i16 0
  %647 = icmp eq i32 %644, 0
  %648 = select i1 %647, i16 1632, i16 %646
  %649 = add nsw i32 %39, -32
  %650 = lshr exact i32 %649, 5
  switch i32 %650, label %840 [
    i32 0, label %730
    i32 1, label %651
    i32 2, label %830
    i32 3, label %835
  ]

651:                                              ; preds = %643
  %652 = icmp sgt i32 %641, 0
  br i1 %652, label %653, label %840

653:                                              ; preds = %651
  %654 = zext i16 %648 to i32
  %655 = sub nsw i16 48, %648
  %656 = zext i32 %641 to i64
  %657 = icmp ult i32 %641, 8
  br i1 %657, label %658, label %660

658:                                              ; preds = %728, %653
  %659 = phi i64 [ 0, %653 ], [ %661, %728 ]
  br label %818

660:                                              ; preds = %653
  %661 = and i64 %656, 4294967288
  %662 = insertelement <8 x i32> undef, i32 %654, i32 0
  %663 = shufflevector <8 x i32> %662, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %664

664:                                              ; preds = %725, %660
  %665 = phi i64 [ 0, %660 ], [ %726, %725 ]
  %666 = getelementptr inbounds i16, i16* %2, i64 %665
  %667 = bitcast i16* %666 to <8 x i16>*
  %668 = load <8 x i16>, <8 x i16>* %667, align 2
  %669 = zext <8 x i16> %668 to <8 x i32>
  %670 = sub nsw <8 x i32> %669, %663
  %671 = icmp ult <8 x i32> %670, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %672 = extractelement <8 x i1> %671, i32 0
  br i1 %672, label %673, label %676

673:                                              ; preds = %664
  %674 = extractelement <8 x i16> %668, i32 0
  %675 = add i16 %655, %674
  store i16 %675, i16* %666, align 2
  br label %676

676:                                              ; preds = %673, %664
  %677 = extractelement <8 x i1> %671, i32 1
  br i1 %677, label %678, label %683

678:                                              ; preds = %676
  %679 = extractelement <8 x i16> %668, i32 1
  %680 = add i16 %655, %679
  %681 = or i64 %665, 1
  %682 = getelementptr inbounds i16, i16* %2, i64 %681
  store i16 %680, i16* %682, align 2
  br label %683

683:                                              ; preds = %678, %676
  %684 = extractelement <8 x i1> %671, i32 2
  br i1 %684, label %685, label %690

685:                                              ; preds = %683
  %686 = extractelement <8 x i16> %668, i32 2
  %687 = add i16 %655, %686
  %688 = or i64 %665, 2
  %689 = getelementptr inbounds i16, i16* %2, i64 %688
  store i16 %687, i16* %689, align 2
  br label %690

690:                                              ; preds = %685, %683
  %691 = extractelement <8 x i1> %671, i32 3
  br i1 %691, label %692, label %697

692:                                              ; preds = %690
  %693 = extractelement <8 x i16> %668, i32 3
  %694 = add i16 %655, %693
  %695 = or i64 %665, 3
  %696 = getelementptr inbounds i16, i16* %2, i64 %695
  store i16 %694, i16* %696, align 2
  br label %697

697:                                              ; preds = %692, %690
  %698 = extractelement <8 x i1> %671, i32 4
  br i1 %698, label %699, label %704

699:                                              ; preds = %697
  %700 = extractelement <8 x i16> %668, i32 4
  %701 = add i16 %655, %700
  %702 = or i64 %665, 4
  %703 = getelementptr inbounds i16, i16* %2, i64 %702
  store i16 %701, i16* %703, align 2
  br label %704

704:                                              ; preds = %699, %697
  %705 = extractelement <8 x i1> %671, i32 5
  br i1 %705, label %706, label %711

706:                                              ; preds = %704
  %707 = extractelement <8 x i16> %668, i32 5
  %708 = add i16 %655, %707
  %709 = or i64 %665, 5
  %710 = getelementptr inbounds i16, i16* %2, i64 %709
  store i16 %708, i16* %710, align 2
  br label %711

711:                                              ; preds = %706, %704
  %712 = extractelement <8 x i1> %671, i32 6
  br i1 %712, label %713, label %718

713:                                              ; preds = %711
  %714 = extractelement <8 x i16> %668, i32 6
  %715 = add i16 %655, %714
  %716 = or i64 %665, 6
  %717 = getelementptr inbounds i16, i16* %2, i64 %716
  store i16 %715, i16* %717, align 2
  br label %718

718:                                              ; preds = %713, %711
  %719 = extractelement <8 x i1> %671, i32 7
  br i1 %719, label %720, label %725

720:                                              ; preds = %718
  %721 = extractelement <8 x i16> %668, i32 7
  %722 = add i16 %655, %721
  %723 = or i64 %665, 7
  %724 = getelementptr inbounds i16, i16* %2, i64 %723
  store i16 %722, i16* %724, align 2
  br label %725

725:                                              ; preds = %720, %718
  %726 = add i64 %665, 8
  %727 = icmp eq i64 %726, %661
  br i1 %727, label %728, label %664, !llvm.loop !2

728:                                              ; preds = %725
  %729 = icmp eq i64 %661, %656
  br i1 %729, label %840, label %658

730:                                              ; preds = %643
  %731 = add nsw i16 %648, -48
  %732 = icmp sgt i32 %641, 0
  br i1 %732, label %733, label %840

733:                                              ; preds = %730
  %734 = zext i32 %641 to i64
  %735 = icmp ult i32 %641, 8
  br i1 %735, label %804, label %736

736:                                              ; preds = %733
  %737 = and i64 %734, 4294967288
  br label %738

738:                                              ; preds = %799, %736
  %739 = phi i64 [ 0, %736 ], [ %800, %799 ]
  %740 = getelementptr inbounds i16, i16* %2, i64 %739
  %741 = bitcast i16* %740 to <8 x i16>*
  %742 = load <8 x i16>, <8 x i16>* %741, align 2
  %743 = zext <8 x i16> %742 to <8 x i32>
  %744 = add nsw <8 x i32> %743, <i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48, i32 -48>
  %745 = icmp ult <8 x i32> %744, <i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10>
  %746 = extractelement <8 x i1> %745, i32 0
  br i1 %746, label %747, label %750

747:                                              ; preds = %738
  %748 = extractelement <8 x i16> %742, i32 0
  %749 = add i16 %731, %748
  store i16 %749, i16* %740, align 2
  br label %750

750:                                              ; preds = %747, %738
  %751 = extractelement <8 x i1> %745, i32 1
  br i1 %751, label %752, label %757

752:                                              ; preds = %750
  %753 = extractelement <8 x i16> %742, i32 1
  %754 = add i16 %731, %753
  %755 = or i64 %739, 1
  %756 = getelementptr inbounds i16, i16* %2, i64 %755
  store i16 %754, i16* %756, align 2
  br label %757

757:                                              ; preds = %752, %750
  %758 = extractelement <8 x i1> %745, i32 2
  br i1 %758, label %759, label %764

759:                                              ; preds = %757
  %760 = extractelement <8 x i16> %742, i32 2
  %761 = add i16 %731, %760
  %762 = or i64 %739, 2
  %763 = getelementptr inbounds i16, i16* %2, i64 %762
  store i16 %761, i16* %763, align 2
  br label %764

764:                                              ; preds = %759, %757
  %765 = extractelement <8 x i1> %745, i32 3
  br i1 %765, label %766, label %771

766:                                              ; preds = %764
  %767 = extractelement <8 x i16> %742, i32 3
  %768 = add i16 %731, %767
  %769 = or i64 %739, 3
  %770 = getelementptr inbounds i16, i16* %2, i64 %769
  store i16 %768, i16* %770, align 2
  br label %771

771:                                              ; preds = %766, %764
  %772 = extractelement <8 x i1> %745, i32 4
  br i1 %772, label %773, label %778

773:                                              ; preds = %771
  %774 = extractelement <8 x i16> %742, i32 4
  %775 = add i16 %731, %774
  %776 = or i64 %739, 4
  %777 = getelementptr inbounds i16, i16* %2, i64 %776
  store i16 %775, i16* %777, align 2
  br label %778

778:                                              ; preds = %773, %771
  %779 = extractelement <8 x i1> %745, i32 5
  br i1 %779, label %780, label %785

780:                                              ; preds = %778
  %781 = extractelement <8 x i16> %742, i32 5
  %782 = add i16 %731, %781
  %783 = or i64 %739, 5
  %784 = getelementptr inbounds i16, i16* %2, i64 %783
  store i16 %782, i16* %784, align 2
  br label %785

785:                                              ; preds = %780, %778
  %786 = extractelement <8 x i1> %745, i32 6
  br i1 %786, label %787, label %792

787:                                              ; preds = %785
  %788 = extractelement <8 x i16> %742, i32 6
  %789 = add i16 %731, %788
  %790 = or i64 %739, 6
  %791 = getelementptr inbounds i16, i16* %2, i64 %790
  store i16 %789, i16* %791, align 2
  br label %792

792:                                              ; preds = %787, %785
  %793 = extractelement <8 x i1> %745, i32 7
  br i1 %793, label %794, label %799

794:                                              ; preds = %792
  %795 = extractelement <8 x i16> %742, i32 7
  %796 = add i16 %731, %795
  %797 = or i64 %739, 7
  %798 = getelementptr inbounds i16, i16* %2, i64 %797
  store i16 %796, i16* %798, align 2
  br label %799

799:                                              ; preds = %794, %792
  %800 = add i64 %739, 8
  %801 = icmp eq i64 %800, %737
  br i1 %801, label %802, label %738, !llvm.loop !4

802:                                              ; preds = %799
  %803 = icmp eq i64 %737, %734
  br i1 %803, label %840, label %804

804:                                              ; preds = %802, %733
  %805 = phi i64 [ 0, %733 ], [ %737, %802 ]
  br label %806

806:                                              ; preds = %804, %815
  %807 = phi i64 [ %816, %815 ], [ %805, %804 ]
  %808 = getelementptr inbounds i16, i16* %2, i64 %807
  %809 = load i16, i16* %808, align 2
  %810 = zext i16 %809 to i32
  %811 = add nsw i32 %810, -48
  %812 = icmp ult i32 %811, 10
  br i1 %812, label %813, label %815

813:                                              ; preds = %806
  %814 = add i16 %731, %809
  store i16 %814, i16* %808, align 2
  br label %815

815:                                              ; preds = %806, %813
  %816 = add nuw nsw i64 %807, 1
  %817 = icmp eq i64 %816, %734
  br i1 %817, label %840, label %806, !llvm.loop !5

818:                                              ; preds = %658, %827
  %819 = phi i64 [ %828, %827 ], [ %659, %658 ]
  %820 = getelementptr inbounds i16, i16* %2, i64 %819
  %821 = load i16, i16* %820, align 2
  %822 = zext i16 %821 to i32
  %823 = sub nsw i32 %822, %654
  %824 = icmp ult i32 %823, 10
  br i1 %824, label %825, label %827

825:                                              ; preds = %818
  %826 = add i16 %655, %821
  store i16 %826, i16* %820, align 2
  br label %827

827:                                              ; preds = %818, %825
  %828 = add nuw nsw i64 %819, 1
  %829 = icmp eq i64 %828, %656
  br i1 %829, label %840, label %818, !llvm.loop !7

830:                                              ; preds = %643
  %831 = lshr i32 %4, 2
  %832 = trunc i32 %831 to i8
  %833 = and i8 %832, 1
  %834 = xor i8 %833, 1
  call fastcc void @_ZL31_shapeToArabicDigitsWithContextPDsiDsaa(i16* %2, i32 %641, i16 zeroext %648, i8 signext %834, i8 signext 0)
  br label %840

835:                                              ; preds = %643
  %836 = lshr i32 %4, 2
  %837 = trunc i32 %836 to i8
  %838 = and i8 %837, 1
  %839 = xor i8 %838, 1
  call fastcc void @_ZL31_shapeToArabicDigitsWithContextPDsiDsaa(i16* %2, i32 %641, i16 zeroext %648, i8 signext %839, i8 signext 1)
  br label %840

840:                                              ; preds = %827, %815, %728, %802, %651, %730, %830, %835, %643, %640
  %841 = call i32 @u_terminateUChars_69(i16* %2, i32 %3, i32 %641, i32* nonnull %5) #5
  br label %842

842:                                              ; preds = %632, %6, %12, %840, %637, %80, %65, %57, %51, %49
  %843 = phi i32 [ 0, %49 ], [ %66, %65 ], [ 0, %80 ], [ %841, %840 ], [ %63, %637 ], [ 0, %57 ], [ 0, %51 ], [ 0, %12 ], [ 0, %6 ], [ %633, %632 ]
  ret i32 %843
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @u_strlen_69(i16*) local_unnamed_addr #2

declare i32 @u_terminateUChars_69(i16*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_69(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc i32 @_ZL13calculateSizePKDsiij(i16* nocapture readonly, i32, i32) unnamed_addr #4 {
  %4 = and i32 %2, 8
  %5 = or i32 %4, 16
  %6 = icmp eq i32 %5, 24
  %7 = and i32 %2, 65539
  %8 = icmp eq i32 %7, 0
  %9 = and i1 %8, %6
  %10 = and i32 %2, 917528
  %11 = icmp eq i32 %10, 524296
  %12 = or i1 %11, %9
  br i1 %12, label %13, label %75

13:                                               ; preds = %3
  %14 = and i32 %2, 4
  %15 = icmp eq i32 %14, 0
  %16 = icmp sgt i32 %1, 0
  br i1 %15, label %22, label %17

17:                                               ; preds = %13
  br i1 %16, label %18, label %177

18:                                               ; preds = %17
  %19 = add nsw i32 %1, -1
  %20 = sext i32 %19 to i64
  %21 = zext i32 %1 to i64
  br label %27

22:                                               ; preds = %13
  br i1 %16, label %23, label %177

23:                                               ; preds = %22
  %24 = add nsw i32 %1, -1
  %25 = sext i32 %24 to i64
  %26 = zext i32 %1 to i64
  br label %54

27:                                               ; preds = %50, %18
  %28 = phi i64 [ 0, %18 ], [ %52, %50 ]
  %29 = phi i32 [ %1, %18 ], [ %51, %50 ]
  %30 = getelementptr inbounds i16, i16* %0, i64 %28
  %31 = load i16, i16* %30, align 2
  switch i16 %31, label %32 [
    i16 1570, label %35
    i16 1571, label %35
    i16 1573, label %35
  ]

32:                                               ; preds = %27
  %33 = icmp eq i16 %31, 1575
  %34 = zext i1 %33 to i32
  br label %35

35:                                               ; preds = %27, %27, %27, %32
  %36 = phi i32 [ 1, %27 ], [ %34, %32 ], [ 1, %27 ], [ 1, %27 ]
  %37 = icmp ne i32 %36, 0
  %38 = icmp slt i64 %28, %20
  %39 = and i1 %38, %37
  br i1 %39, label %40, label %45

40:                                               ; preds = %35
  %41 = add nuw nsw i64 %28, 1
  %42 = getelementptr inbounds i16, i16* %0, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = icmp eq i16 %43, 1604
  br i1 %44, label %48, label %45

45:                                               ; preds = %35, %40
  %46 = and i16 %31, -16
  %47 = icmp eq i16 %46, -400
  br i1 %47, label %48, label %50

48:                                               ; preds = %45, %40
  %49 = add nsw i32 %29, -1
  br label %50

50:                                               ; preds = %45, %48
  %51 = phi i32 [ %49, %48 ], [ %29, %45 ]
  %52 = add nuw nsw i64 %28, 1
  %53 = icmp eq i64 %52, %21
  br i1 %53, label %75, label %27

54:                                               ; preds = %71, %23
  %55 = phi i64 [ 0, %23 ], [ %73, %71 ]
  %56 = phi i32 [ %1, %23 ], [ %72, %71 ]
  %57 = getelementptr inbounds i16, i16* %0, i64 %55
  %58 = load i16, i16* %57, align 2
  %59 = icmp eq i16 %58, 1604
  %60 = icmp slt i64 %55, %25
  %61 = and i1 %60, %59
  br i1 %61, label %62, label %66

62:                                               ; preds = %54
  %63 = add nuw nsw i64 %55, 1
  %64 = getelementptr inbounds i16, i16* %0, i64 %63
  %65 = load i16, i16* %64, align 2
  switch i16 %65, label %71 [
    i16 1570, label %69
    i16 1571, label %69
    i16 1573, label %69
    i16 1575, label %69
  ]

66:                                               ; preds = %54
  %67 = and i16 %58, -16
  %68 = icmp eq i16 %67, -400
  br i1 %68, label %69, label %71

69:                                               ; preds = %62, %62, %62, %62, %66
  %70 = add nsw i32 %56, -1
  br label %71

71:                                               ; preds = %62, %66, %69
  %72 = phi i32 [ %70, %69 ], [ %56, %66 ], [ %56, %62 ]
  %73 = add nuw nsw i64 %55, 1
  %74 = icmp eq i64 %73, %26
  br i1 %74, label %75, label %54

75:                                               ; preds = %50, %71, %3
  %76 = phi i32 [ %1, %3 ], [ %72, %71 ], [ %51, %50 ]
  %77 = and i32 %2, 65563
  %78 = icmp eq i32 %77, 16
  %79 = icmp sgt i32 %1, 0
  %80 = and i1 %78, %79
  br i1 %80, label %81, label %177

81:                                               ; preds = %75
  %82 = zext i32 %1 to i64
  %83 = icmp ult i32 %1, 8
  br i1 %83, label %163, label %84

84:                                               ; preds = %81
  %85 = and i64 %82, 4294967288
  %86 = insertelement <4 x i32> <i32 undef, i32 0, i32 0, i32 0>, i32 %76, i32 0
  %87 = add nsw i64 %85, -8
  %88 = lshr exact i64 %87, 3
  %89 = add nuw nsw i64 %88, 1
  %90 = and i64 %89, 1
  %91 = icmp eq i64 %87, 0
  br i1 %91, label %131, label %92

92:                                               ; preds = %84
  %93 = sub nuw nsw i64 %89, %90
  br label %94

94:                                               ; preds = %94, %92
  %95 = phi i64 [ 0, %92 ], [ %128, %94 ]
  %96 = phi <4 x i32> [ %86, %92 ], [ %126, %94 ]
  %97 = phi <4 x i32> [ zeroinitializer, %92 ], [ %127, %94 ]
  %98 = phi i64 [ %93, %92 ], [ %129, %94 ]
  %99 = getelementptr inbounds i16, i16* %0, i64 %95
  %100 = bitcast i16* %99 to <4 x i16>*
  %101 = load <4 x i16>, <4 x i16>* %100, align 2
  %102 = getelementptr inbounds i16, i16* %99, i64 4
  %103 = bitcast i16* %102 to <4 x i16>*
  %104 = load <4 x i16>, <4 x i16>* %103, align 2
  %105 = add <4 x i16> %101, <i16 267, i16 267, i16 267, i16 267>
  %106 = add <4 x i16> %104, <i16 267, i16 267, i16 267, i16 267>
  %107 = icmp ult <4 x i16> %105, <i16 8, i16 8, i16 8, i16 8>
  %108 = icmp ult <4 x i16> %106, <i16 8, i16 8, i16 8, i16 8>
  %109 = zext <4 x i1> %107 to <4 x i32>
  %110 = zext <4 x i1> %108 to <4 x i32>
  %111 = add nsw <4 x i32> %96, %109
  %112 = add nuw nsw <4 x i32> %97, %110
  %113 = or i64 %95, 8
  %114 = getelementptr inbounds i16, i16* %0, i64 %113
  %115 = bitcast i16* %114 to <4 x i16>*
  %116 = load <4 x i16>, <4 x i16>* %115, align 2
  %117 = getelementptr inbounds i16, i16* %114, i64 4
  %118 = bitcast i16* %117 to <4 x i16>*
  %119 = load <4 x i16>, <4 x i16>* %118, align 2
  %120 = add <4 x i16> %116, <i16 267, i16 267, i16 267, i16 267>
  %121 = add <4 x i16> %119, <i16 267, i16 267, i16 267, i16 267>
  %122 = icmp ult <4 x i16> %120, <i16 8, i16 8, i16 8, i16 8>
  %123 = icmp ult <4 x i16> %121, <i16 8, i16 8, i16 8, i16 8>
  %124 = zext <4 x i1> %122 to <4 x i32>
  %125 = zext <4 x i1> %123 to <4 x i32>
  %126 = add nsw <4 x i32> %111, %124
  %127 = add nuw nsw <4 x i32> %112, %125
  %128 = add i64 %95, 16
  %129 = add i64 %98, -2
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %131, label %94, !llvm.loop !8

131:                                              ; preds = %94, %84
  %132 = phi <4 x i32> [ undef, %84 ], [ %126, %94 ]
  %133 = phi <4 x i32> [ undef, %84 ], [ %127, %94 ]
  %134 = phi i64 [ 0, %84 ], [ %128, %94 ]
  %135 = phi <4 x i32> [ %86, %84 ], [ %126, %94 ]
  %136 = phi <4 x i32> [ zeroinitializer, %84 ], [ %127, %94 ]
  %137 = icmp eq i64 %90, 0
  br i1 %137, label %153, label %138

138:                                              ; preds = %131
  %139 = getelementptr inbounds i16, i16* %0, i64 %134
  %140 = getelementptr inbounds i16, i16* %139, i64 4
  %141 = bitcast i16* %140 to <4 x i16>*
  %142 = load <4 x i16>, <4 x i16>* %141, align 2
  %143 = add <4 x i16> %142, <i16 267, i16 267, i16 267, i16 267>
  %144 = icmp ult <4 x i16> %143, <i16 8, i16 8, i16 8, i16 8>
  %145 = zext <4 x i1> %144 to <4 x i32>
  %146 = add nuw nsw <4 x i32> %136, %145
  %147 = bitcast i16* %139 to <4 x i16>*
  %148 = load <4 x i16>, <4 x i16>* %147, align 2
  %149 = add <4 x i16> %148, <i16 267, i16 267, i16 267, i16 267>
  %150 = icmp ult <4 x i16> %149, <i16 8, i16 8, i16 8, i16 8>
  %151 = zext <4 x i1> %150 to <4 x i32>
  %152 = add nsw <4 x i32> %135, %151
  br label %153

153:                                              ; preds = %131, %138
  %154 = phi <4 x i32> [ %132, %131 ], [ %152, %138 ]
  %155 = phi <4 x i32> [ %133, %131 ], [ %146, %138 ]
  %156 = add <4 x i32> %155, %154
  %157 = shufflevector <4 x i32> %156, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %158 = add <4 x i32> %156, %157
  %159 = shufflevector <4 x i32> %158, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %160 = add <4 x i32> %158, %159
  %161 = extractelement <4 x i32> %160, i32 0
  %162 = icmp eq i64 %85, %82
  br i1 %162, label %177, label %163

163:                                              ; preds = %153, %81
  %164 = phi i64 [ 0, %81 ], [ %85, %153 ]
  %165 = phi i32 [ %76, %81 ], [ %161, %153 ]
  br label %166

166:                                              ; preds = %163, %166
  %167 = phi i64 [ %175, %166 ], [ %164, %163 ]
  %168 = phi i32 [ %174, %166 ], [ %165, %163 ]
  %169 = getelementptr inbounds i16, i16* %0, i64 %167
  %170 = load i16, i16* %169, align 2
  %171 = add i16 %170, 267
  %172 = icmp ult i16 %171, 8
  %173 = zext i1 %172 to i32
  %174 = add nsw i32 %168, %173
  %175 = add nuw nsw i64 %167, 1
  %176 = icmp eq i64 %175, %82
  br i1 %176, label %177, label %166, !llvm.loop !9

177:                                              ; preds = %166, %153, %22, %17, %75
  %178 = phi i32 [ %76, %75 ], [ %1, %17 ], [ %1, %22 ], [ %161, %153 ], [ %174, %166 ]
  ret i32 %178
}

declare void @uprv_free_69(i8*) local_unnamed_addr #2

declare i16* @u_memcpy_69(i16*, i16*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL12shapeUnicodePDsiijP10UErrorCodei15uShapeVariables(i16*, i32, i32, i32* nocapture, i32, %struct.uShapeVariables* nocapture readonly byval(%struct.uShapeVariables) align 8) unnamed_addr #0 {
  %7 = trunc i32 %2 to i16
  %8 = icmp sgt i16 %7, -1
  %9 = icmp sgt i32 %1, 0
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %38

11:                                               ; preds = %6
  %12 = zext i32 %1 to i64
  br label %13

13:                                               ; preds = %35, %11
  %14 = phi i64 [ 0, %11 ], [ %36, %35 ]
  %15 = getelementptr inbounds i16, i16* %0, i64 %14
  %16 = load i16, i16* %15, align 2
  %17 = zext i16 %16 to i32
  %18 = add i16 %16, 1200
  %19 = icmp ult i16 %18, 176
  br i1 %19, label %20, label %27

20:                                               ; preds = %13
  %21 = add nsw i32 %17, -64336
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [176 x i16], [176 x i16]* @_ZL13convertFBto06, i64 0, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = icmp eq i16 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %20
  store i16 %24, i16* %15, align 2
  br label %35

27:                                               ; preds = %13
  %28 = add i16 %16, 400
  %29 = icmp ult i16 %28, 141
  br i1 %29, label %30, label %35

30:                                               ; preds = %27
  %31 = add nsw i32 %17, -65136
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [141 x i16], [141 x i16]* @_ZL13convertFEto06, i64 0, i64 %32
  %34 = load i16, i16* %33, align 2
  store i16 %34, i16* %15, align 2
  br label %35

35:                                               ; preds = %27, %26, %20, %30
  %36 = add nuw nsw i64 %14, 1
  %37 = icmp eq i64 %36, %12
  br i1 %37, label %38, label %13

38:                                               ; preds = %35, %6
  %39 = add nsw i32 %1, -1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i16, i16* %0, i64 %40
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  %44 = add i16 %42, -1570
  %45 = icmp ult i16 %44, 178
  br i1 %45, label %46, label %51

46:                                               ; preds = %38
  %47 = add nsw i32 %43, -1570
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %48
  %50 = load i16, i16* %49, align 2
  br label %74

51:                                               ; preds = %38
  %52 = icmp eq i16 %42, 8205
  br i1 %52, label %74, label %53

53:                                               ; preds = %51
  %54 = add i16 %42, -8301
  %55 = icmp ult i16 %54, 3
  br i1 %55, label %74, label %56

56:                                               ; preds = %53
  %57 = add i16 %42, 1200
  %58 = icmp ult i16 %57, 275
  br i1 %58, label %59, label %65

59:                                               ; preds = %56
  %60 = add nsw i32 %43, -64336
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [275 x i8], [275 x i8]* @_ZL9presALink, i64 0, i64 %61
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i16
  br label %74

65:                                               ; preds = %56
  %66 = add i16 %42, 400
  %67 = icmp ult i16 %66, 141
  br i1 %67, label %68, label %74

68:                                               ; preds = %65
  %69 = add nsw i32 %43, -65136
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [144 x i8], [144 x i8]* @_ZL9presBLink, i64 0, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i16
  br label %74

74:                                               ; preds = %46, %51, %53, %59, %65, %68
  %75 = phi i16 [ %50, %46 ], [ %64, %59 ], [ %73, %68 ], [ 3, %51 ], [ 4, %53 ], [ 0, %65 ]
  %76 = icmp eq i32 %1, 0
  br i1 %76, label %406, label %77

77:                                               ; preds = %74
  %78 = icmp eq i32 %4, 1
  %79 = icmp eq i32 %4, 2
  %80 = icmp ne i32 %4, 2
  br label %81

81:                                               ; preds = %77, %402
  %82 = phi i16 [ 0, %77 ], [ %357, %402 ]
  %83 = phi i16 [ %75, %77 ], [ %404, %402 ]
  %84 = phi i16 [ 0, %77 ], [ %362, %402 ]
  %85 = phi i16 [ 0, %77 ], [ %361, %402 ]
  %86 = phi i32 [ 0, %77 ], [ %354, %402 ]
  %87 = phi i32 [ 0, %77 ], [ %353, %402 ]
  %88 = phi i32 [ 0, %77 ], [ %352, %402 ]
  %89 = phi i32 [ 0, %77 ], [ %351, %402 ]
  %90 = phi i32 [ -2, %77 ], [ %403, %402 ]
  %91 = phi i32 [ %39, %77 ], [ %360, %402 ]
  %92 = phi i32 [ %39, %77 ], [ %363, %402 ]
  %93 = zext i16 %83 to i32
  %94 = and i32 %93, 65280
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %135

96:                                               ; preds = %81
  %97 = sext i32 %92 to i64
  %98 = getelementptr inbounds i16, i16* %0, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = add i16 %99, -1570
  %102 = icmp ult i16 %101, 178
  br i1 %102, label %103, label %108

103:                                              ; preds = %96
  %104 = add nsw i32 %100, -1570
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %105
  %107 = load i16, i16* %106, align 2
  br label %131

108:                                              ; preds = %96
  %109 = icmp eq i16 %99, 8205
  br i1 %109, label %348, label %110

110:                                              ; preds = %108
  %111 = add i16 %99, -8301
  %112 = icmp ult i16 %111, 3
  br i1 %112, label %135, label %113

113:                                              ; preds = %110
  %114 = add i16 %99, 1200
  %115 = icmp ult i16 %114, 275
  br i1 %115, label %116, label %122

116:                                              ; preds = %113
  %117 = add nsw i32 %100, -64336
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [275 x i8], [275 x i8]* @_ZL9presALink, i64 0, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = zext i8 %120 to i16
  br label %131

122:                                              ; preds = %113
  %123 = add i16 %99, 400
  %124 = icmp ult i16 %123, 141
  br i1 %124, label %125, label %348

125:                                              ; preds = %122
  %126 = add nsw i32 %100, -65136
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds [144 x i8], [144 x i8]* @_ZL9presBLink, i64 0, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i16
  br label %131

131:                                              ; preds = %103, %116, %125
  %132 = phi i16 [ %107, %103 ], [ %121, %116 ], [ %130, %125 ]
  %133 = and i16 %132, 4
  %134 = icmp eq i16 %133, 0
  br i1 %134, label %348, label %135

135:                                              ; preds = %110, %131, %81
  %136 = icmp slt i32 %90, 0
  br i1 %136, label %137, label %195

137:                                              ; preds = %135
  %138 = add nsw i32 %92, -1
  br label %139

139:                                              ; preds = %137, %190
  %140 = phi i32 [ %192, %190 ], [ %138, %137 ]
  %141 = phi i32 [ %191, %190 ], [ %90, %137 ]
  %142 = icmp eq i32 %140, -1
  br i1 %142, label %195, label %143

143:                                              ; preds = %139
  %144 = sext i32 %140 to i64
  %145 = getelementptr inbounds i16, i16* %0, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = zext i16 %146 to i32
  %148 = add i16 %146, -1570
  %149 = icmp ult i16 %148, 178
  br i1 %149, label %150, label %155

150:                                              ; preds = %143
  %151 = add nsw i32 %147, -1570
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %152
  %154 = load i16, i16* %153, align 2
  br label %180

155:                                              ; preds = %143
  %156 = icmp eq i16 %146, 8205
  br i1 %156, label %187, label %157

157:                                              ; preds = %155
  %158 = add i16 %146, -8301
  %159 = icmp ult i16 %158, 3
  br i1 %159, label %160, label %162

160:                                              ; preds = %157
  %161 = add i32 %140, -1
  br label %190

162:                                              ; preds = %157
  %163 = add i16 %146, 1200
  %164 = icmp ult i16 %163, 275
  br i1 %164, label %165, label %171

165:                                              ; preds = %162
  %166 = add nsw i32 %147, -64336
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [275 x i8], [275 x i8]* @_ZL9presALink, i64 0, i64 %167
  %169 = load i8, i8* %168, align 1
  %170 = zext i8 %169 to i16
  br label %180

171:                                              ; preds = %162
  %172 = add i16 %146, 400
  %173 = icmp ult i16 %172, 141
  br i1 %173, label %174, label %187

174:                                              ; preds = %171
  %175 = add nsw i32 %147, -65136
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [144 x i8], [144 x i8]* @_ZL9presBLink, i64 0, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i16
  br label %180

180:                                              ; preds = %150, %165, %174
  %181 = phi i16 [ %154, %150 ], [ %170, %165 ], [ %179, %174 ]
  %182 = and i16 %181, 4
  %183 = icmp eq i16 %182, 0
  %184 = xor i1 %183, true
  %185 = zext i1 %184 to i32
  %186 = sub i32 %140, %185
  br i1 %183, label %187, label %190

187:                                              ; preds = %171, %155, %180
  %188 = phi i32 [ %186, %180 ], [ %140, %155 ], [ %140, %171 ]
  %189 = phi i16 [ %181, %180 ], [ 3, %155 ], [ 0, %171 ]
  br label %190

190:                                              ; preds = %160, %180, %187
  %191 = phi i32 [ %141, %180 ], [ %140, %187 ], [ %141, %160 ]
  %192 = phi i32 [ %186, %180 ], [ %188, %187 ], [ %161, %160 ]
  %193 = phi i16 [ %181, %180 ], [ %189, %187 ], [ 4, %160 ]
  %194 = icmp slt i32 %191, 0
  br i1 %194, label %139, label %195

195:                                              ; preds = %139, %190, %135
  %196 = phi i32 [ %90, %135 ], [ 3000, %139 ], [ %191, %190 ]
  %197 = phi i16 [ %82, %135 ], [ 0, %139 ], [ %193, %190 ]
  %198 = and i32 %93, 32
  %199 = icmp eq i32 %198, 0
  %200 = and i16 %84, 16
  %201 = icmp eq i16 %200, 0
  %202 = or i1 %201, %199
  br i1 %202, label %225, label %203

203:                                              ; preds = %195
  %204 = sext i32 %92 to i64
  %205 = getelementptr inbounds i16, i16* %0, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = add i16 %206, -1570
  %208 = icmp ult i16 %207, 6
  br i1 %208, label %209, label %225

209:                                              ; preds = %203
  %210 = trunc i16 %207 to i8
  %211 = lshr i8 43, %210
  %212 = and i8 %211, 1
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %225, label %214

214:                                              ; preds = %209
  %215 = sext i16 %207 to i64
  %216 = getelementptr inbounds [6 x i16], [6 x i16]* @switch.table._ZL12shapeUnicodePDsiijP10UErrorCodei15uShapeVariables, i64 0, i64 %215
  %217 = load i16, i16* %216, align 2
  store i16 -1, i16* %205, align 2
  %218 = sext i32 %91 to i64
  %219 = getelementptr inbounds i16, i16* %0, i64 %218
  store i16 %217, i16* %219, align 2
  %220 = add nuw nsw i16 %217, 30
  %221 = and i16 %220, 63
  %222 = zext i16 %221 to i64
  %223 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %222
  %224 = load i16, i16* %223, align 2
  br label %225

225:                                              ; preds = %209, %203, %214, %195
  %226 = phi i32 [ %92, %195 ], [ %91, %214 ], [ %92, %203 ], [ %92, %209 ]
  %227 = phi i32 [ %89, %195 ], [ 1, %214 ], [ 1, %203 ], [ 1, %209 ]
  %228 = phi i16 [ %84, %195 ], [ %85, %214 ], [ %85, %203 ], [ %85, %209 ]
  %229 = phi i16 [ %83, %195 ], [ %224, %214 ], [ 0, %203 ], [ 0, %209 ]
  %230 = icmp sgt i32 %226, 0
  br i1 %230, label %231, label %246

231:                                              ; preds = %225
  %232 = add nsw i32 %226, -1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i16, i16* %0, i64 %233
  %235 = load i16, i16* %234, align 2
  %236 = icmp eq i16 %235, 32
  br i1 %236, label %237, label %255

237:                                              ; preds = %231
  %238 = sext i32 %226 to i64
  %239 = getelementptr inbounds i16, i16* %0, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = add i16 %240, -1587
  %242 = icmp ugt i16 %241, 3
  br i1 %242, label %243, label %255

243:                                              ; preds = %237
  %244 = icmp eq i16 %240, 1574
  %245 = select i1 %244, i32 1, i32 %87
  br label %255

246:                                              ; preds = %225
  %247 = icmp eq i32 %226, 0
  br i1 %247, label %248, label %255

248:                                              ; preds = %246
  %249 = load i16, i16* %0, align 2
  %250 = add i16 %249, -1587
  %251 = icmp ugt i16 %250, 3
  br i1 %251, label %252, label %255

252:                                              ; preds = %248
  %253 = icmp eq i16 %249, 1574
  %254 = select i1 %253, i32 1, i32 %87
  br label %255

255:                                              ; preds = %231, %252, %243, %248, %237, %246
  %256 = phi i32 [ %88, %246 ], [ 1, %237 ], [ %88, %243 ], [ 1, %248 ], [ %88, %252 ], [ %88, %231 ]
  %257 = phi i32 [ %87, %246 ], [ %87, %237 ], [ %245, %243 ], [ %87, %248 ], [ %254, %252 ], [ %87, %231 ]
  %258 = zext i16 %197 to i32
  %259 = and i32 %258, 3
  %260 = zext i32 %259 to i64
  %261 = zext i16 %228 to i32
  %262 = and i32 %261, 3
  %263 = zext i32 %262 to i64
  %264 = zext i16 %229 to i32
  %265 = and i32 %264, 3
  %266 = zext i32 %265 to i64
  %267 = getelementptr inbounds [4 x [4 x [4 x i8]]], [4 x [4 x [4 x i8]]]* @_ZL10shapeTable, i64 0, i64 %260, i64 %263, i64 %266
  %268 = load i8, i8* %267, align 1
  %269 = zext i8 %268 to i32
  %270 = icmp eq i32 %265, 1
  br i1 %270, label %271, label %276

271:                                              ; preds = %255
  %272 = and i32 %269, 1
  %273 = sext i32 %226 to i64
  %274 = getelementptr inbounds i16, i16* %0, i64 %273
  %275 = load i16, i16* %274, align 2
  br label %305

276:                                              ; preds = %255
  %277 = sext i32 %226 to i64
  %278 = getelementptr inbounds i16, i16* %0, i64 %277
  %279 = load i16, i16* %278, align 2
  %280 = add i16 %279, -1611
  %281 = icmp ugt i16 %280, 7
  br i1 %281, label %305, label %282

282:                                              ; preds = %276
  %283 = and i32 %261, 2
  %284 = icmp eq i32 %283, 0
  br i1 %284, label %300, label %285

285:                                              ; preds = %282
  %286 = and i32 %258, 1
  %287 = icmp ne i32 %286, 0
  %288 = and i1 %78, %287
  br i1 %288, label %289, label %300

289:                                              ; preds = %285
  %290 = and i16 %279, -2
  %291 = icmp eq i16 %290, 1612
  br i1 %291, label %305, label %292

292:                                              ; preds = %289
  %293 = lshr i32 %258, 5
  %294 = and i32 %293, 1
  %295 = xor i32 %294, 1
  %296 = lshr i32 %261, 4
  %297 = and i32 %296, 1
  %298 = xor i32 %297, 1
  %299 = or i32 %298, %295
  br label %305

300:                                              ; preds = %282, %285
  %301 = icmp eq i16 %279, 1617
  %302 = and i1 %79, %301
  br i1 %302, label %303, label %305

303:                                              ; preds = %300
  %304 = getelementptr inbounds i16, i16* %0, i64 %277
  br label %319

305:                                              ; preds = %300, %289, %292, %276, %271
  %306 = phi i16 [ %279, %292 ], [ %279, %276 ], [ %275, %271 ], [ %279, %289 ], [ %279, %300 ]
  %307 = phi i64 [ %277, %292 ], [ %277, %276 ], [ %273, %271 ], [ %277, %289 ], [ %277, %300 ]
  %308 = phi i32 [ %299, %292 ], [ %269, %276 ], [ %272, %271 ], [ 0, %289 ], [ 0, %300 ]
  %309 = getelementptr inbounds i16, i16* %0, i64 %307
  %310 = xor i16 %306, 1536
  %311 = icmp ult i16 %310, 256
  br i1 %311, label %312, label %348

312:                                              ; preds = %305
  %313 = add i16 %306, -1611
  %314 = icmp ugt i16 %313, 7
  br i1 %314, label %331, label %315

315:                                              ; preds = %312
  %316 = icmp eq i16 %306, 1617
  %317 = or i1 %80, %316
  br i1 %317, label %319, label %318

318:                                              ; preds = %315
  store i16 -2, i16* %309, align 2
  br label %348

319:                                              ; preds = %303, %315
  %320 = phi i16* [ %304, %303 ], [ %309, %315 ]
  %321 = phi i32 [ 1, %303 ], [ %308, %315 ]
  %322 = phi i16 [ 1617, %303 ], [ %306, %315 ]
  %323 = zext i16 %322 to i64
  %324 = add nsw i64 %323, -1611
  %325 = getelementptr inbounds [8 x i8], [8 x i8]* @_ZL13IrrelevantPos, i64 0, i64 %324
  %326 = load i8, i8* %325, align 1
  %327 = zext i8 %326 to i32
  %328 = add i32 %321, 65136
  %329 = add i32 %328, %327
  %330 = trunc i32 %329 to i16
  store i16 %330, i16* %320, align 2
  br label %348

331:                                              ; preds = %312
  %332 = and i32 %264, 8
  %333 = icmp eq i32 %332, 0
  %334 = lshr i32 %264, 8
  br i1 %333, label %339, label %335

335:                                              ; preds = %331
  %336 = add i32 %308, %334
  %337 = trunc i32 %336 to i16
  %338 = add i16 %337, -1200
  store i16 %338, i16* %309, align 2
  br label %348

339:                                              ; preds = %331
  %340 = icmp ne i32 %334, 0
  %341 = and i32 %264, 4
  %342 = icmp eq i32 %341, 0
  %343 = and i1 %340, %342
  br i1 %343, label %344, label %348

344:                                              ; preds = %339
  %345 = add i32 %308, %334
  %346 = trunc i32 %345 to i16
  %347 = add i16 %346, -400
  store i16 %347, i16* %309, align 2
  br label %348

348:                                              ; preds = %122, %108, %339, %131, %305, %335, %344, %318, %319
  %349 = phi i32 [ %226, %318 ], [ %226, %319 ], [ %226, %335 ], [ %226, %344 ], [ %226, %339 ], [ %226, %305 ], [ %92, %131 ], [ %92, %108 ], [ %92, %122 ]
  %350 = phi i32 [ %196, %318 ], [ %196, %319 ], [ %196, %335 ], [ %196, %344 ], [ %196, %339 ], [ %196, %305 ], [ %90, %131 ], [ %90, %108 ], [ %90, %122 ]
  %351 = phi i32 [ %227, %318 ], [ %227, %319 ], [ %227, %335 ], [ %227, %344 ], [ %227, %339 ], [ %227, %305 ], [ %89, %131 ], [ %89, %108 ], [ %89, %122 ]
  %352 = phi i32 [ %256, %318 ], [ %256, %319 ], [ %256, %335 ], [ %256, %344 ], [ %256, %339 ], [ %256, %305 ], [ %88, %131 ], [ %88, %108 ], [ %88, %122 ]
  %353 = phi i32 [ %257, %318 ], [ %257, %319 ], [ %257, %335 ], [ %257, %344 ], [ %257, %339 ], [ %257, %305 ], [ %87, %131 ], [ %87, %108 ], [ %87, %122 ]
  %354 = phi i32 [ 1, %318 ], [ %86, %319 ], [ %86, %335 ], [ %86, %344 ], [ %86, %339 ], [ %86, %305 ], [ %86, %131 ], [ %86, %108 ], [ %86, %122 ]
  %355 = phi i16 [ %228, %318 ], [ %228, %319 ], [ %228, %335 ], [ %228, %344 ], [ %228, %339 ], [ %228, %305 ], [ %84, %131 ], [ %84, %108 ], [ %84, %122 ]
  %356 = phi i16 [ %229, %318 ], [ %229, %319 ], [ %229, %335 ], [ %229, %344 ], [ %229, %339 ], [ %229, %305 ], [ %83, %131 ], [ %83, %108 ], [ %83, %122 ]
  %357 = phi i16 [ %197, %318 ], [ %197, %319 ], [ %197, %335 ], [ %197, %344 ], [ %197, %339 ], [ %197, %305 ], [ %82, %131 ], [ %82, %108 ], [ %82, %122 ]
  %358 = and i16 %356, 4
  %359 = icmp eq i16 %358, 0
  %360 = select i1 %359, i32 %349, i32 %91
  %361 = select i1 %359, i16 %355, i16 %85
  %362 = select i1 %359, i16 %356, i16 %355
  %363 = add nsw i32 %349, -1
  %364 = icmp eq i32 %363, %350
  br i1 %364, label %402, label %365

365:                                              ; preds = %348
  %366 = icmp eq i32 %349, 0
  br i1 %366, label %406, label %367

367:                                              ; preds = %365
  %368 = sext i32 %363 to i64
  %369 = getelementptr inbounds i16, i16* %0, i64 %368
  %370 = load i16, i16* %369, align 2
  %371 = zext i16 %370 to i32
  %372 = add i16 %370, -1570
  %373 = icmp ult i16 %372, 178
  br i1 %373, label %374, label %379

374:                                              ; preds = %367
  %375 = add nsw i32 %371, -1570
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds [178 x i16], [178 x i16]* @_ZL7araLink, i64 0, i64 %376
  %378 = load i16, i16* %377, align 2
  br label %402

379:                                              ; preds = %367
  %380 = icmp eq i16 %370, 8205
  br i1 %380, label %402, label %381

381:                                              ; preds = %379
  %382 = add i16 %370, -8301
  %383 = icmp ult i16 %382, 3
  br i1 %383, label %402, label %384

384:                                              ; preds = %381
  %385 = add i16 %370, 1200
  %386 = icmp ult i16 %385, 275
  br i1 %386, label %387, label %393

387:                                              ; preds = %384
  %388 = add nsw i32 %371, -64336
  %389 = sext i32 %388 to i64
  %390 = getelementptr inbounds [275 x i8], [275 x i8]* @_ZL9presALink, i64 0, i64 %389
  %391 = load i8, i8* %390, align 1
  %392 = zext i8 %391 to i16
  br label %402

393:                                              ; preds = %384
  %394 = add i16 %370, 400
  %395 = icmp ult i16 %394, 141
  br i1 %395, label %396, label %402

396:                                              ; preds = %393
  %397 = add nsw i32 %371, -65136
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds [144 x i8], [144 x i8]* @_ZL9presBLink, i64 0, i64 %398
  %400 = load i8, i8* %399, align 1
  %401 = zext i8 %400 to i16
  br label %402

402:                                              ; preds = %396, %393, %387, %381, %379, %374, %348
  %403 = phi i32 [ -2, %348 ], [ %350, %374 ], [ %350, %379 ], [ %350, %381 ], [ %350, %387 ], [ %350, %393 ], [ %350, %396 ]
  %404 = phi i16 [ %357, %348 ], [ %378, %374 ], [ 3, %379 ], [ 4, %381 ], [ %392, %387 ], [ 0, %393 ], [ %401, %396 ]
  %405 = icmp eq i32 %349, 0
  br i1 %405, label %406, label %81

406:                                              ; preds = %365, %402, %74
  %407 = phi i32 [ 0, %74 ], [ %351, %402 ], [ %351, %365 ]
  %408 = phi i32 [ 0, %74 ], [ %352, %402 ], [ %352, %365 ]
  %409 = phi i32 [ 0, %74 ], [ %353, %402 ], [ %353, %365 ]
  %410 = phi i32 [ 0, %74 ], [ %354, %402 ], [ %354, %365 ]
  %411 = or i32 %410, %407
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %802, label %413

413:                                              ; preds = %406
  %414 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %5, i64 0, i32 1
  %415 = load i32, i32* %414, align 4
  %416 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %5, i64 0, i32 2
  %417 = load i32, i32* %416, align 8
  %418 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %5, i64 0, i32 3
  %419 = load i32, i32* %418, align 4
  %420 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %5, i64 0, i32 4
  %421 = load i32, i32* %420, align 8
  %422 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %5, i64 0, i32 5
  %423 = load i32, i32* %422, align 4
  %424 = and i32 %2, 65539
  %425 = icmp eq i32 %424, 0
  %426 = and i32 %2, 917504
  %427 = icmp eq i32 %426, 524288
  %428 = shl i32 %1, 1
  %429 = add i32 %428, 2
  %430 = sext i32 %429 to i64
  %431 = tail call noalias i8* @uprv_malloc_69(i64 %430) #6
  %432 = bitcast i8* %431 to i16*
  %433 = icmp eq i8* %431, null
  br i1 %433, label %434, label %435

434:                                              ; preds = %413
  store i32 7, i32* %3, align 4
  br label %802

435:                                              ; preds = %413
  %436 = or i1 %425, %427
  br i1 %436, label %437, label %478

437:                                              ; preds = %435
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %431, i8 0, i64 %430, i1 false) #5
  br i1 %9, label %438, label %442

438:                                              ; preds = %437
  %439 = zext i32 %1 to i64
  br label %452

440:                                              ; preds = %469
  %441 = icmp sgt i32 %471, -1
  br i1 %441, label %442, label %475

442:                                              ; preds = %437, %440
  %443 = phi i32 [ %471, %440 ], [ 0, %437 ]
  %444 = phi i32 [ %1, %440 ], [ 0, %437 ]
  %445 = zext i32 %444 to i64
  %446 = shl nuw nsw i64 %445, 1
  %447 = zext i32 %443 to i64
  %448 = shl nuw nsw i64 %447, 1
  %449 = sub nsw i64 %446, %448
  %450 = getelementptr i8, i8* %431, i64 %449
  %451 = add nuw nsw i64 %448, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %450, i8 0, i64 %451, i1 false) #5
  br label %475

452:                                              ; preds = %469, %438
  %453 = phi i64 [ 0, %438 ], [ %472, %469 ]
  %454 = phi i32 [ 0, %438 ], [ %471, %469 ]
  %455 = phi i32 [ 0, %438 ], [ %473, %469 ]
  %456 = getelementptr inbounds i16, i16* %0, i64 %453
  %457 = load i16, i16* %456, align 2
  %458 = icmp eq i16 %457, -1
  %459 = and i1 %425, %458
  %460 = icmp eq i16 %457, -2
  %461 = and i1 %427, %460
  %462 = or i1 %459, %461
  br i1 %462, label %463, label %466

463:                                              ; preds = %452
  %464 = add nsw i32 %455, -1
  %465 = add nsw i32 %454, 1
  br label %469

466:                                              ; preds = %452
  %467 = sext i32 %455 to i64
  %468 = getelementptr inbounds i16, i16* %432, i64 %467
  store i16 %457, i16* %468, align 2
  br label %469

469:                                              ; preds = %466, %463
  %470 = phi i32 [ %464, %463 ], [ %455, %466 ]
  %471 = phi i32 [ %465, %463 ], [ %454, %466 ]
  %472 = add nuw nsw i64 %453, 1
  %473 = add nsw i32 %470, 1
  %474 = icmp eq i64 %472, %439
  br i1 %474, label %440, label %452

475:                                              ; preds = %442, %440
  %476 = tail call i16* @u_memcpy_69(i16* %0, i16* nonnull %432, i32 %1) #5
  %477 = tail call i32 @u_strlen_69(i16* %0) #5
  br label %478

478:                                              ; preds = %475, %435
  %479 = phi i32 [ %477, %475 ], [ %1, %435 ]
  %480 = icmp ne i32 %424, 1
  %481 = xor i1 %9, true
  %482 = or i1 %480, %481
  %483 = select i1 %480, i32 %479, i32 %1
  br i1 %482, label %548, label %484

484:                                              ; preds = %478
  %485 = zext i32 %1 to i64
  %486 = icmp ult i32 %1, 8
  br i1 %486, label %537, label %487

487:                                              ; preds = %484
  %488 = and i64 %485, 4294967288
  br label %489

489:                                              ; preds = %532, %487
  %490 = phi i64 [ 0, %487 ], [ %533, %532 ]
  %491 = getelementptr inbounds i16, i16* %0, i64 %490
  %492 = bitcast i16* %491 to <8 x i16>*
  %493 = load <8 x i16>, <8 x i16>* %492, align 2
  %494 = icmp eq <8 x i16> %493, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %495 = extractelement <8 x i1> %494, i32 0
  br i1 %495, label %496, label %497

496:                                              ; preds = %489
  store i16 32, i16* %491, align 2
  br label %497

497:                                              ; preds = %496, %489
  %498 = extractelement <8 x i1> %494, i32 1
  br i1 %498, label %499, label %502

499:                                              ; preds = %497
  %500 = or i64 %490, 1
  %501 = getelementptr inbounds i16, i16* %0, i64 %500
  store i16 32, i16* %501, align 2
  br label %502

502:                                              ; preds = %499, %497
  %503 = extractelement <8 x i1> %494, i32 2
  br i1 %503, label %504, label %507

504:                                              ; preds = %502
  %505 = or i64 %490, 2
  %506 = getelementptr inbounds i16, i16* %0, i64 %505
  store i16 32, i16* %506, align 2
  br label %507

507:                                              ; preds = %504, %502
  %508 = extractelement <8 x i1> %494, i32 3
  br i1 %508, label %509, label %512

509:                                              ; preds = %507
  %510 = or i64 %490, 3
  %511 = getelementptr inbounds i16, i16* %0, i64 %510
  store i16 32, i16* %511, align 2
  br label %512

512:                                              ; preds = %509, %507
  %513 = extractelement <8 x i1> %494, i32 4
  br i1 %513, label %514, label %517

514:                                              ; preds = %512
  %515 = or i64 %490, 4
  %516 = getelementptr inbounds i16, i16* %0, i64 %515
  store i16 32, i16* %516, align 2
  br label %517

517:                                              ; preds = %514, %512
  %518 = extractelement <8 x i1> %494, i32 5
  br i1 %518, label %519, label %522

519:                                              ; preds = %517
  %520 = or i64 %490, 5
  %521 = getelementptr inbounds i16, i16* %0, i64 %520
  store i16 32, i16* %521, align 2
  br label %522

522:                                              ; preds = %519, %517
  %523 = extractelement <8 x i1> %494, i32 6
  br i1 %523, label %524, label %527

524:                                              ; preds = %522
  %525 = or i64 %490, 6
  %526 = getelementptr inbounds i16, i16* %0, i64 %525
  store i16 32, i16* %526, align 2
  br label %527

527:                                              ; preds = %524, %522
  %528 = extractelement <8 x i1> %494, i32 7
  br i1 %528, label %529, label %532

529:                                              ; preds = %527
  %530 = or i64 %490, 7
  %531 = getelementptr inbounds i16, i16* %0, i64 %530
  store i16 32, i16* %531, align 2
  br label %532

532:                                              ; preds = %529, %527
  %533 = add i64 %490, 8
  %534 = icmp eq i64 %533, %488
  br i1 %534, label %535, label %489, !llvm.loop !10

535:                                              ; preds = %532
  %536 = icmp eq i64 %488, %485
  br i1 %536, label %548, label %537

537:                                              ; preds = %535, %484
  %538 = phi i64 [ 0, %484 ], [ %488, %535 ]
  br label %539

539:                                              ; preds = %537, %545
  %540 = phi i64 [ %546, %545 ], [ %538, %537 ]
  %541 = getelementptr inbounds i16, i16* %0, i64 %540
  %542 = load i16, i16* %541, align 2
  %543 = icmp eq i16 %542, -1
  br i1 %543, label %544, label %545

544:                                              ; preds = %539
  store i16 32, i16* %541, align 2
  br label %545

545:                                              ; preds = %544, %539
  %546 = add nuw nsw i64 %540, 1
  %547 = icmp eq i64 %546, %485
  br i1 %547, label %548, label %539, !llvm.loop !11

548:                                              ; preds = %545, %535, %478
  %549 = phi i32 [ %483, %478 ], [ %1, %535 ], [ %1, %545 ]
  %550 = icmp eq i32 %424, %415
  br i1 %550, label %555, label %551

551:                                              ; preds = %548
  %552 = icmp eq i32 %424, 65536
  %553 = icmp eq i32 %423, 1
  %554 = and i1 %552, %553
  br i1 %554, label %555, label %557

555:                                              ; preds = %551, %548
  %556 = icmp eq i32 %426, %419
  br label %559

557:                                              ; preds = %551
  %558 = icmp eq i32 %426, %419
  br i1 %558, label %559, label %671

559:                                              ; preds = %557, %555
  %560 = phi i1 [ true, %555 ], [ false, %557 ]
  %561 = phi i1 [ %556, %555 ], [ true, %557 ]
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %431, i8 0, i64 %430, i1 false) #5
  %562 = icmp sgt i32 %1, -1
  br i1 %562, label %563, label %669

563:                                              ; preds = %559
  %564 = sext i32 %1 to i64
  br label %641

565:                                              ; preds = %658
  %566 = icmp sgt i32 %660, 0
  br i1 %566, label %567, label %669

567:                                              ; preds = %565
  %568 = zext i32 %660 to i64
  %569 = icmp ult i32 %660, 16
  br i1 %569, label %570, label %572

570:                                              ; preds = %639, %567
  %571 = phi i64 [ 0, %567 ], [ %573, %639 ]
  br label %664

572:                                              ; preds = %567
  %573 = and i64 %568, 4294967280
  %574 = add nsw i64 %573, -16
  %575 = lshr exact i64 %574, 4
  %576 = add nuw nsw i64 %575, 1
  %577 = and i64 %576, 7
  %578 = icmp ult i64 %574, 112
  br i1 %578, label %626, label %579

579:                                              ; preds = %572
  %580 = sub nsw i64 %576, %577
  br label %581

581:                                              ; preds = %581, %579
  %582 = phi i64 [ 0, %579 ], [ %623, %581 ]
  %583 = phi i64 [ %580, %579 ], [ %624, %581 ]
  %584 = getelementptr inbounds i16, i16* %432, i64 %582
  %585 = bitcast i16* %584 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %585, align 2
  %586 = getelementptr inbounds i16, i16* %584, i64 8
  %587 = bitcast i16* %586 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %587, align 2
  %588 = or i64 %582, 16
  %589 = getelementptr inbounds i16, i16* %432, i64 %588
  %590 = bitcast i16* %589 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %590, align 2
  %591 = getelementptr inbounds i16, i16* %589, i64 8
  %592 = bitcast i16* %591 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %592, align 2
  %593 = or i64 %582, 32
  %594 = getelementptr inbounds i16, i16* %432, i64 %593
  %595 = bitcast i16* %594 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %595, align 2
  %596 = getelementptr inbounds i16, i16* %594, i64 8
  %597 = bitcast i16* %596 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %597, align 2
  %598 = or i64 %582, 48
  %599 = getelementptr inbounds i16, i16* %432, i64 %598
  %600 = bitcast i16* %599 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %600, align 2
  %601 = getelementptr inbounds i16, i16* %599, i64 8
  %602 = bitcast i16* %601 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %602, align 2
  %603 = or i64 %582, 64
  %604 = getelementptr inbounds i16, i16* %432, i64 %603
  %605 = bitcast i16* %604 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %605, align 2
  %606 = getelementptr inbounds i16, i16* %604, i64 8
  %607 = bitcast i16* %606 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %607, align 2
  %608 = or i64 %582, 80
  %609 = getelementptr inbounds i16, i16* %432, i64 %608
  %610 = bitcast i16* %609 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %610, align 2
  %611 = getelementptr inbounds i16, i16* %609, i64 8
  %612 = bitcast i16* %611 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %612, align 2
  %613 = or i64 %582, 96
  %614 = getelementptr inbounds i16, i16* %432, i64 %613
  %615 = bitcast i16* %614 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %615, align 2
  %616 = getelementptr inbounds i16, i16* %614, i64 8
  %617 = bitcast i16* %616 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %617, align 2
  %618 = or i64 %582, 112
  %619 = getelementptr inbounds i16, i16* %432, i64 %618
  %620 = bitcast i16* %619 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %620, align 2
  %621 = getelementptr inbounds i16, i16* %619, i64 8
  %622 = bitcast i16* %621 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %622, align 2
  %623 = add i64 %582, 128
  %624 = add i64 %583, -8
  %625 = icmp eq i64 %624, 0
  br i1 %625, label %626, label %581, !llvm.loop !12

626:                                              ; preds = %581, %572
  %627 = phi i64 [ 0, %572 ], [ %623, %581 ]
  %628 = icmp eq i64 %577, 0
  br i1 %628, label %639, label %629

629:                                              ; preds = %626, %629
  %630 = phi i64 [ %636, %629 ], [ %627, %626 ]
  %631 = phi i64 [ %637, %629 ], [ %577, %626 ]
  %632 = getelementptr inbounds i16, i16* %432, i64 %630
  %633 = bitcast i16* %632 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %633, align 2
  %634 = getelementptr inbounds i16, i16* %632, i64 8
  %635 = bitcast i16* %634 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %635, align 2
  %636 = add i64 %630, 16
  %637 = add i64 %631, -1
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %639, label %629, !llvm.loop !13

639:                                              ; preds = %629, %626
  %640 = icmp eq i64 %573, %568
  br i1 %640, label %669, label %570

641:                                              ; preds = %658, %563
  %642 = phi i64 [ %564, %563 ], [ %661, %658 ]
  %643 = phi i32 [ 0, %563 ], [ %660, %658 ]
  %644 = phi i32 [ %1, %563 ], [ %662, %658 ]
  %645 = getelementptr inbounds i16, i16* %0, i64 %642
  %646 = load i16, i16* %645, align 2
  %647 = icmp eq i16 %646, -1
  %648 = and i1 %560, %647
  %649 = icmp eq i16 %646, -2
  %650 = and i1 %561, %649
  %651 = or i1 %648, %650
  br i1 %651, label %652, label %655

652:                                              ; preds = %641
  %653 = add nsw i32 %644, 1
  %654 = add nsw i32 %643, 1
  br label %658

655:                                              ; preds = %641
  %656 = sext i32 %644 to i64
  %657 = getelementptr inbounds i16, i16* %432, i64 %656
  store i16 %646, i16* %657, align 2
  br label %658

658:                                              ; preds = %655, %652
  %659 = phi i32 [ %653, %652 ], [ %644, %655 ]
  %660 = phi i32 [ %654, %652 ], [ %643, %655 ]
  %661 = add nsw i64 %642, -1
  %662 = add nsw i32 %659, -1
  %663 = icmp sgt i64 %642, 0
  br i1 %663, label %641, label %565

664:                                              ; preds = %570, %664
  %665 = phi i64 [ %667, %664 ], [ %571, %570 ]
  %666 = getelementptr inbounds i16, i16* %432, i64 %665
  store i16 32, i16* %666, align 2
  %667 = add nuw nsw i64 %665, 1
  %668 = icmp eq i64 %667, %568
  br i1 %668, label %669, label %664, !llvm.loop !15

669:                                              ; preds = %664, %639, %565, %559
  %670 = tail call i16* @u_memcpy_69(i16* %0, i16* nonnull %432, i32 %1) #5
  br label %671

671:                                              ; preds = %669, %557
  %672 = phi i32 [ %1, %669 ], [ %549, %557 ]
  %673 = icmp eq i32 %424, %417
  br i1 %673, label %678, label %674

674:                                              ; preds = %671
  %675 = icmp eq i32 %424, 65536
  %676 = icmp eq i32 %423, 0
  %677 = and i1 %675, %676
  br i1 %677, label %678, label %680

678:                                              ; preds = %674, %671
  %679 = icmp eq i32 %426, %421
  br label %682

680:                                              ; preds = %674
  %681 = icmp eq i32 %426, %421
  br i1 %681, label %682, label %800

682:                                              ; preds = %680, %678
  %683 = phi i1 [ true, %678 ], [ false, %680 ]
  %684 = phi i1 [ %679, %678 ], [ true, %680 ]
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %431, i8 0, i64 %430, i1 false) #5
  br i1 %9, label %685, label %689

685:                                              ; preds = %682
  %686 = zext i32 %1 to i64
  br label %768

687:                                              ; preds = %785
  %688 = icmp sgt i32 %787, -1
  br i1 %688, label %689, label %798

689:                                              ; preds = %687, %682
  %690 = phi i32 [ %787, %687 ], [ 0, %682 ]
  %691 = phi i64 [ %686, %687 ], [ 0, %682 ]
  %692 = icmp slt i32 %690, 0
  %693 = select i1 %692, i32 %690, i32 0
  %694 = sub i32 %690, %693
  %695 = zext i32 %694 to i64
  %696 = add nuw nsw i64 %695, 1
  %697 = icmp ult i64 %696, 16
  br i1 %697, label %698, label %701

698:                                              ; preds = %766, %689
  %699 = phi i64 [ %691, %689 ], [ %703, %766 ]
  %700 = phi i32 [ %690, %689 ], [ %705, %766 ]
  br label %791

701:                                              ; preds = %689
  %702 = and i64 %696, 8589934576
  %703 = sub nsw i64 %691, %702
  %704 = trunc i64 %702 to i32
  %705 = sub i32 %690, %704
  %706 = add nsw i64 %702, -16
  %707 = lshr exact i64 %706, 4
  %708 = add nuw nsw i64 %707, 1
  %709 = and i64 %708, 3
  %710 = icmp ult i64 %706, 48
  br i1 %710, label %750, label %711

711:                                              ; preds = %701
  %712 = sub nsw i64 %708, %709
  br label %713

713:                                              ; preds = %713, %711
  %714 = phi i64 [ 0, %711 ], [ %747, %713 ]
  %715 = phi i64 [ %712, %711 ], [ %748, %713 ]
  %716 = sub i64 %691, %714
  %717 = getelementptr inbounds i16, i16* %432, i64 %716
  %718 = getelementptr inbounds i16, i16* %717, i64 -7
  %719 = bitcast i16* %718 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %719, align 2
  %720 = getelementptr inbounds i16, i16* %717, i64 -8
  %721 = getelementptr inbounds i16, i16* %720, i64 -7
  %722 = bitcast i16* %721 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %722, align 2
  %723 = or i64 %714, 16
  %724 = sub i64 %691, %723
  %725 = getelementptr inbounds i16, i16* %432, i64 %724
  %726 = getelementptr inbounds i16, i16* %725, i64 -7
  %727 = bitcast i16* %726 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %727, align 2
  %728 = getelementptr inbounds i16, i16* %725, i64 -8
  %729 = getelementptr inbounds i16, i16* %728, i64 -7
  %730 = bitcast i16* %729 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %730, align 2
  %731 = or i64 %714, 32
  %732 = sub i64 %691, %731
  %733 = getelementptr inbounds i16, i16* %432, i64 %732
  %734 = getelementptr inbounds i16, i16* %733, i64 -7
  %735 = bitcast i16* %734 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %735, align 2
  %736 = getelementptr inbounds i16, i16* %733, i64 -8
  %737 = getelementptr inbounds i16, i16* %736, i64 -7
  %738 = bitcast i16* %737 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %738, align 2
  %739 = or i64 %714, 48
  %740 = sub i64 %691, %739
  %741 = getelementptr inbounds i16, i16* %432, i64 %740
  %742 = getelementptr inbounds i16, i16* %741, i64 -7
  %743 = bitcast i16* %742 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %743, align 2
  %744 = getelementptr inbounds i16, i16* %741, i64 -8
  %745 = getelementptr inbounds i16, i16* %744, i64 -7
  %746 = bitcast i16* %745 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %746, align 2
  %747 = add i64 %714, 64
  %748 = add i64 %715, -4
  %749 = icmp eq i64 %748, 0
  br i1 %749, label %750, label %713, !llvm.loop !16

750:                                              ; preds = %713, %701
  %751 = phi i64 [ 0, %701 ], [ %747, %713 ]
  %752 = icmp eq i64 %709, 0
  br i1 %752, label %766, label %753

753:                                              ; preds = %750, %753
  %754 = phi i64 [ %763, %753 ], [ %751, %750 ]
  %755 = phi i64 [ %764, %753 ], [ %709, %750 ]
  %756 = sub i64 %691, %754
  %757 = getelementptr inbounds i16, i16* %432, i64 %756
  %758 = getelementptr inbounds i16, i16* %757, i64 -7
  %759 = bitcast i16* %758 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %759, align 2
  %760 = getelementptr inbounds i16, i16* %757, i64 -8
  %761 = getelementptr inbounds i16, i16* %760, i64 -7
  %762 = bitcast i16* %761 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %762, align 2
  %763 = add i64 %754, 16
  %764 = add i64 %755, -1
  %765 = icmp eq i64 %764, 0
  br i1 %765, label %766, label %753, !llvm.loop !17

766:                                              ; preds = %753, %750
  %767 = icmp eq i64 %696, %702
  br i1 %767, label %798, label %698

768:                                              ; preds = %785, %685
  %769 = phi i64 [ 0, %685 ], [ %788, %785 ]
  %770 = phi i32 [ 0, %685 ], [ %787, %785 ]
  %771 = phi i32 [ 0, %685 ], [ %789, %785 ]
  %772 = getelementptr inbounds i16, i16* %0, i64 %769
  %773 = load i16, i16* %772, align 2
  %774 = icmp eq i16 %773, -1
  %775 = and i1 %683, %774
  %776 = icmp eq i16 %773, -2
  %777 = and i1 %684, %776
  %778 = or i1 %775, %777
  br i1 %778, label %779, label %782

779:                                              ; preds = %768
  %780 = add nsw i32 %771, -1
  %781 = add nsw i32 %770, 1
  br label %785

782:                                              ; preds = %768
  %783 = sext i32 %771 to i64
  %784 = getelementptr inbounds i16, i16* %432, i64 %783
  store i16 %773, i16* %784, align 2
  br label %785

785:                                              ; preds = %782, %779
  %786 = phi i32 [ %780, %779 ], [ %771, %782 ]
  %787 = phi i32 [ %781, %779 ], [ %770, %782 ]
  %788 = add nuw nsw i64 %769, 1
  %789 = add nsw i32 %786, 1
  %790 = icmp eq i64 %788, %686
  br i1 %790, label %687, label %768

791:                                              ; preds = %698, %791
  %792 = phi i64 [ %795, %791 ], [ %699, %698 ]
  %793 = phi i32 [ %796, %791 ], [ %700, %698 ]
  %794 = getelementptr inbounds i16, i16* %432, i64 %792
  store i16 32, i16* %794, align 2
  %795 = add nsw i64 %792, -1
  %796 = add nsw i32 %793, -1
  %797 = icmp sgt i32 %793, 0
  br i1 %797, label %791, label %798, !llvm.loop !18

798:                                              ; preds = %791, %766, %687
  %799 = tail call i16* @u_memcpy_69(i16* %0, i16* nonnull %432, i32 %1) #5
  br label %800

800:                                              ; preds = %798, %680
  %801 = phi i32 [ %1, %798 ], [ %672, %680 ]
  tail call void @uprv_free_69(i8* nonnull %431) #5
  br label %802

802:                                              ; preds = %800, %434, %406
  %803 = phi i32 [ %1, %406 ], [ 0, %434 ], [ %801, %800 ]
  %804 = or i32 %409, %408
  %805 = icmp eq i32 %804, 0
  br i1 %805, label %862, label %806

806:                                              ; preds = %802
  %807 = getelementptr inbounds %struct.uShapeVariables, %struct.uShapeVariables* %5, i64 0, i32 0
  %808 = load i16, i16* %807, align 8
  %809 = and i32 %2, 58720256
  %810 = icmp eq i32 %809, 16777216
  %811 = and i32 %2, 7340032
  %812 = icmp eq i32 %811, 2097152
  %813 = or i1 %810, %812
  %814 = and i1 %813, %9
  %815 = select i1 %813, i32 %1, i32 %803
  br i1 %814, label %816, label %862

816:                                              ; preds = %806
  %817 = zext i32 %1 to i64
  br label %818

818:                                              ; preds = %859, %816
  %819 = phi i64 [ 0, %816 ], [ %860, %859 ]
  br i1 %812, label %820, label %840

820:                                              ; preds = %818
  %821 = getelementptr inbounds i16, i16* %0, i64 %819
  %822 = load i16, i16* %821, align 2
  %823 = add i16 %822, 335
  %824 = icmp ult i16 %823, 14
  br i1 %824, label %825, label %840

825:                                              ; preds = %820
  %826 = zext i16 %822 to i64
  %827 = add nsw i64 %826, -65201
  %828 = lshr i64 3276, %827
  %829 = and i64 %828, 1
  %830 = icmp eq i64 %829, 0
  br i1 %830, label %831, label %840

831:                                              ; preds = %825
  %832 = icmp eq i64 %819, 0
  br i1 %832, label %839, label %833

833:                                              ; preds = %831
  %834 = add nsw i64 %819, -1
  %835 = getelementptr inbounds i16, i16* %0, i64 %834
  %836 = load i16, i16* %835, align 2
  %837 = icmp eq i16 %836, 32
  br i1 %837, label %838, label %839

838:                                              ; preds = %833
  store i16 %808, i16* %835, align 2
  br label %859

839:                                              ; preds = %833, %831
  store i32 20, i32* %3, align 4
  br label %859

840:                                              ; preds = %818, %825, %820
  br i1 %810, label %841, label %859

841:                                              ; preds = %840
  %842 = getelementptr inbounds i16, i16* %0, i64 %819
  %843 = load i16, i16* %842, align 2
  %844 = add i16 %843, 375
  %845 = icmp ugt i16 %844, 1
  br i1 %845, label %859, label %846

846:                                              ; preds = %841
  %847 = icmp eq i64 %819, 0
  br i1 %847, label %858, label %848

848:                                              ; preds = %846
  %849 = add nsw i64 %819, -1
  %850 = getelementptr inbounds i16, i16* %0, i64 %849
  %851 = load i16, i16* %850, align 2
  %852 = icmp eq i16 %851, 32
  br i1 %852, label %853, label %858

853:                                              ; preds = %848
  %854 = zext i16 %843 to i64
  %855 = add nsw i64 %854, -65161
  %856 = getelementptr inbounds [2 x i16], [2 x i16]* @_ZL13yehHamzaToYeh, i64 0, i64 %855
  %857 = load i16, i16* %856, align 2
  store i16 %857, i16* %842, align 2
  store i16 -384, i16* %850, align 2
  br label %859

858:                                              ; preds = %848, %846
  store i32 20, i32* %3, align 4
  br label %859

859:                                              ; preds = %840, %841, %858, %853, %839, %838
  %860 = add nuw nsw i64 %819, 1
  %861 = icmp eq i64 %860, %817
  br i1 %861, label %862, label %818

862:                                              ; preds = %859, %806, %802
  %863 = phi i32 [ %803, %802 ], [ %815, %806 ], [ %1, %859 ]
  ret i32 %863
}

declare i32 @uprv_min_69(i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL31_shapeToArabicDigitsWithContextPDsiDsaa(i16* nocapture, i32, i16 zeroext, i8 signext, i8 signext) unnamed_addr #0 {
  %6 = add i16 %2, -48
  %7 = icmp eq i8 %3, 0
  %8 = icmp sgt i32 %1, 0
  br i1 %7, label %12, label %9

9:                                                ; preds = %5
  br i1 %8, label %10, label %55

10:                                               ; preds = %9
  %11 = zext i32 %1 to i64
  br label %15

12:                                               ; preds = %5
  br i1 %8, label %13, label %55

13:                                               ; preds = %12
  %14 = sext i32 %1 to i64
  br label %35

15:                                               ; preds = %31, %10
  %16 = phi i64 [ 0, %10 ], [ %33, %31 ]
  %17 = phi i8 [ %4, %10 ], [ %32, %31 ]
  %18 = getelementptr inbounds i16, i16* %0, i64 %16
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = tail call i32 @ubidi_getClass_69(i32 %20) #5
  switch i32 %21, label %31 [
    i32 0, label %22
    i32 1, label %22
    i32 13, label %23
    i32 2, label %24
  ]

22:                                               ; preds = %15, %15
  br label %31

23:                                               ; preds = %15
  br label %31

24:                                               ; preds = %15
  %25 = icmp ne i8 %17, 0
  %26 = add nsw i32 %20, -48
  %27 = icmp ult i32 %26, 10
  %28 = and i1 %25, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %24
  %30 = add i16 %19, %6
  store i16 %30, i16* %18, align 2
  br label %31

31:                                               ; preds = %24, %22, %23, %29, %15
  %32 = phi i8 [ %17, %15 ], [ %17, %29 ], [ %17, %24 ], [ 1, %23 ], [ 0, %22 ]
  %33 = add nuw nsw i64 %16, 1
  %34 = icmp eq i64 %33, %11
  br i1 %34, label %55, label %15

35:                                               ; preds = %13, %52
  %36 = phi i64 [ %14, %13 ], [ %38, %52 ]
  %37 = phi i8 [ %4, %13 ], [ %53, %52 ]
  %38 = add nsw i64 %36, -1
  %39 = getelementptr inbounds i16, i16* %0, i64 %38
  %40 = load i16, i16* %39, align 2
  %41 = zext i16 %40 to i32
  %42 = tail call i32 @ubidi_getClass_69(i32 %41) #5
  switch i32 %42, label %52 [
    i32 0, label %43
    i32 1, label %43
    i32 13, label %44
    i32 2, label %45
  ]

43:                                               ; preds = %35, %35
  br label %52

44:                                               ; preds = %35
  br label %52

45:                                               ; preds = %35
  %46 = icmp ne i8 %37, 0
  %47 = add nsw i32 %41, -48
  %48 = icmp ult i32 %47, 10
  %49 = and i1 %46, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = add i16 %40, %6
  store i16 %51, i16* %39, align 2
  br label %52

52:                                               ; preds = %45, %35, %50, %44, %43
  %53 = phi i8 [ %37, %35 ], [ %37, %50 ], [ %37, %45 ], [ 1, %44 ], [ 0, %43 ]
  %54 = icmp sgt i64 %38, 0
  br i1 %54, label %35, label %55

55:                                               ; preds = %31, %52, %9, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL23expandCompositCharAtEndPDsiiP10UErrorCode(i16*, i32, i32* nocapture) unnamed_addr #0 {
  %4 = shl i32 %1, 1
  %5 = add i32 %4, 2
  %6 = sext i32 %5 to i64
  %7 = tail call noalias i8* @uprv_malloc_69(i64 %6) #6
  %8 = bitcast i8* %7 to i16*
  %9 = icmp eq i8* %7, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i32 7, i32* %2, align 4
  br label %168

11:                                               ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %7, i8 0, i64 %6, i1 false)
  %12 = sext i32 %1 to i64
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i64 [ %16, %13 ], [ %12, %11 ]
  %15 = phi i32 [ %20, %13 ], [ 0, %11 ]
  %16 = add nsw i64 %14, -1
  %17 = getelementptr inbounds i16, i16* %0, i64 %16
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 32
  %20 = add nuw nsw i32 %15, 1
  br i1 %19, label %13, label %21

21:                                               ; preds = %13
  %22 = xor i32 %15, -1
  %23 = add i32 %22, %1
  %24 = add nsw i32 %1, -1
  %25 = or i32 %24, %23
  %26 = icmp sgt i32 %25, -1
  %27 = icmp ne i32 %15, 0
  br i1 %26, label %28, label %73

28:                                               ; preds = %21
  %29 = sext i32 %23 to i64
  br label %30

30:                                               ; preds = %28, %64
  %31 = phi i64 [ %29, %28 ], [ %67, %64 ]
  %32 = phi i1 [ %27, %28 ], [ %72, %64 ]
  %33 = phi i32 [ %15, %28 ], [ %66, %64 ]
  %34 = phi i32 [ %24, %28 ], [ %68, %64 ]
  br i1 %32, label %35, label %51

35:                                               ; preds = %30
  %36 = getelementptr inbounds i16, i16* %0, i64 %31
  %37 = load i16, i16* %36, align 2
  %38 = add i16 %37, 267
  %39 = icmp ugt i16 %38, 7
  br i1 %39, label %59, label %40

40:                                               ; preds = %35
  %41 = sext i32 %34 to i64
  %42 = getelementptr inbounds i16, i16* %8, i64 %41
  store i16 1604, i16* %42, align 2
  %43 = zext i16 %37 to i64
  %44 = add nsw i64 %43, -65269
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* @_ZL14convertLamAlef, i64 0, i64 %44
  %46 = load i16, i16* %45, align 2
  %47 = add nsw i32 %34, -1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i16, i16* %8, i64 %48
  store i16 %46, i16* %49, align 2
  %50 = add nsw i32 %33, -1
  br label %64

51:                                               ; preds = %30
  %52 = icmp eq i32 %33, 0
  br i1 %52, label %53, label %59

53:                                               ; preds = %51
  %54 = getelementptr inbounds i16, i16* %0, i64 %31
  %55 = load i16, i16* %54, align 2
  %56 = add i16 %55, 267
  %57 = icmp ugt i16 %56, 7
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  store i32 20, i32* %2, align 4
  br label %59

59:                                               ; preds = %35, %53, %58, %51
  %60 = getelementptr inbounds i16, i16* %0, i64 %31
  %61 = load i16, i16* %60, align 2
  %62 = sext i32 %34 to i64
  %63 = getelementptr inbounds i16, i16* %8, i64 %62
  store i16 %61, i16* %63, align 2
  br label %64

64:                                               ; preds = %59, %40
  %65 = phi i32 [ %47, %40 ], [ %34, %59 ]
  %66 = phi i32 [ %50, %40 ], [ %33, %59 ]
  %67 = add i64 %31, -1
  %68 = add nsw i32 %65, -1
  %69 = trunc i64 %67 to i32
  %70 = or i32 %68, %69
  %71 = icmp sgt i32 %70, -1
  %72 = icmp sgt i32 %66, 0
  br i1 %71, label %30, label %73

73:                                               ; preds = %64, %21
  %74 = phi i32 [ %15, %21 ], [ %66, %64 ]
  %75 = phi i1 [ %27, %21 ], [ %72, %64 ]
  br i1 %75, label %76, label %166

76:                                               ; preds = %73
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds i16, i16* %8, i64 %77
  %79 = tail call i16* @u_memmove_69(i16* nonnull %8, i16* %78, i32 %1) #5
  %80 = tail call i32 @u_strlen_69(i16* nonnull %8) #5
  %81 = icmp sge i32 %80, %1
  %82 = icmp slt i32 %74, 1
  %83 = or i1 %81, %82
  br i1 %83, label %166, label %84

84:                                               ; preds = %76
  %85 = sub nsw i32 %1, %74
  %86 = sext i32 %85 to i64
  %87 = add nsw i64 %12, -1
  %88 = icmp sgt i64 %87, %86
  %89 = select i1 %88, i64 %86, i64 %87
  %90 = sub nsw i64 %12, %89
  %91 = icmp ult i64 %90, 16
  br i1 %91, label %159, label %92

92:                                               ; preds = %84
  %93 = and i64 %90, -16
  %94 = sub nsw i64 %12, %93
  %95 = add nsw i64 %93, -16
  %96 = lshr exact i64 %95, 4
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 3
  %99 = icmp ult i64 %95, 48
  br i1 %99, label %140, label %100

100:                                              ; preds = %92
  %101 = sub nsw i64 %97, %98
  br label %102

102:                                              ; preds = %102, %100
  %103 = phi i64 [ 0, %100 ], [ %137, %102 ]
  %104 = phi i64 [ %101, %100 ], [ %138, %102 ]
  %105 = xor i64 %103, -1
  %106 = add i64 %105, %12
  %107 = getelementptr inbounds i16, i16* %8, i64 %106
  %108 = getelementptr inbounds i16, i16* %107, i64 -7
  %109 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %109, align 2
  %110 = getelementptr inbounds i16, i16* %107, i64 -8
  %111 = getelementptr inbounds i16, i16* %110, i64 -7
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %112, align 2
  %113 = sub nuw nsw i64 -17, %103
  %114 = add i64 %113, %12
  %115 = getelementptr inbounds i16, i16* %8, i64 %114
  %116 = getelementptr inbounds i16, i16* %115, i64 -7
  %117 = bitcast i16* %116 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %117, align 2
  %118 = getelementptr inbounds i16, i16* %115, i64 -8
  %119 = getelementptr inbounds i16, i16* %118, i64 -7
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %120, align 2
  %121 = sub nuw nsw i64 -33, %103
  %122 = add i64 %121, %12
  %123 = getelementptr inbounds i16, i16* %8, i64 %122
  %124 = getelementptr inbounds i16, i16* %123, i64 -7
  %125 = bitcast i16* %124 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %125, align 2
  %126 = getelementptr inbounds i16, i16* %123, i64 -8
  %127 = getelementptr inbounds i16, i16* %126, i64 -7
  %128 = bitcast i16* %127 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %128, align 2
  %129 = sub nuw nsw i64 -49, %103
  %130 = add i64 %129, %12
  %131 = getelementptr inbounds i16, i16* %8, i64 %130
  %132 = getelementptr inbounds i16, i16* %131, i64 -7
  %133 = bitcast i16* %132 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %133, align 2
  %134 = getelementptr inbounds i16, i16* %131, i64 -8
  %135 = getelementptr inbounds i16, i16* %134, i64 -7
  %136 = bitcast i16* %135 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %136, align 2
  %137 = add i64 %103, 64
  %138 = add i64 %104, -4
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %102, !llvm.loop !19

140:                                              ; preds = %102, %92
  %141 = phi i64 [ 0, %92 ], [ %137, %102 ]
  %142 = icmp eq i64 %98, 0
  br i1 %142, label %157, label %143

143:                                              ; preds = %140, %143
  %144 = phi i64 [ %154, %143 ], [ %141, %140 ]
  %145 = phi i64 [ %155, %143 ], [ %98, %140 ]
  %146 = xor i64 %144, -1
  %147 = add i64 %146, %12
  %148 = getelementptr inbounds i16, i16* %8, i64 %147
  %149 = getelementptr inbounds i16, i16* %148, i64 -7
  %150 = bitcast i16* %149 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %150, align 2
  %151 = getelementptr inbounds i16, i16* %148, i64 -8
  %152 = getelementptr inbounds i16, i16* %151, i64 -7
  %153 = bitcast i16* %152 to <8 x i16>*
  store <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>, <8 x i16>* %153, align 2
  %154 = add i64 %144, 16
  %155 = add i64 %145, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %143, !llvm.loop !20

157:                                              ; preds = %143, %140
  %158 = icmp eq i64 %90, %93
  br i1 %158, label %166, label %159

159:                                              ; preds = %157, %84
  %160 = phi i64 [ %12, %84 ], [ %94, %157 ]
  br label %161

161:                                              ; preds = %159, %161
  %162 = phi i64 [ %163, %161 ], [ %160, %159 ]
  %163 = add i64 %162, -1
  %164 = getelementptr inbounds i16, i16* %8, i64 %163
  store i16 32, i16* %164, align 2
  %165 = icmp sgt i64 %163, %86
  br i1 %165, label %161, label %166, !llvm.loop !21

166:                                              ; preds = %161, %157, %76, %73
  %167 = tail call i16* @u_memcpy_69(i16* %0, i16* nonnull %8, i32 %1) #5
  tail call void @uprv_free_69(i8* nonnull %7) #5
  br label %168

168:                                              ; preds = %166, %10
  %169 = phi i32 [ 0, %10 ], [ %1, %166 ]
  ret i32 %169
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL25expandCompositCharAtBeginPDsiiP10UErrorCode(i16*, i32, i32* nocapture) unnamed_addr #0 {
  %4 = shl i32 %1, 1
  %5 = add i32 %4, 2
  %6 = sext i32 %5 to i64
  %7 = tail call noalias i8* @uprv_malloc_69(i64 %6) #6
  %8 = bitcast i8* %7 to i16*
  %9 = icmp eq i8* %7, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %3
  store i32 7, i32* %2, align 4
  br label %73

11:                                               ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %7, i8 0, i64 %6, i1 false)
  %12 = load i16, i16* %0, align 2
  %13 = icmp eq i16 %12, 32
  br i1 %13, label %14, label %22

14:                                               ; preds = %11, %14
  %15 = phi i64 [ %18, %14 ], [ 0, %11 ]
  %16 = phi i32 [ %17, %14 ], [ 0, %11 ]
  %17 = add nuw nsw i32 %16, 1
  %18 = add nuw i64 %15, 1
  %19 = getelementptr inbounds i16, i16* %0, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = icmp eq i16 %20, 32
  br i1 %21, label %14, label %22

22:                                               ; preds = %14, %11
  %23 = phi i32 [ 0, %11 ], [ %17, %14 ]
  %24 = icmp sgt i32 %1, 0
  br i1 %24, label %25, label %71

25:                                               ; preds = %22
  %26 = add nsw i32 %1, -1
  %27 = sext i32 %1 to i64
  %28 = add nsw i64 %27, -1
  br label %29

29:                                               ; preds = %25, %63
  %30 = phi i64 [ %28, %25 ], [ %66, %63 ]
  %31 = phi i32 [ %23, %25 ], [ %65, %63 ]
  %32 = phi i32 [ %26, %25 ], [ %67, %63 ]
  %33 = icmp sgt i32 %31, 0
  br i1 %33, label %34, label %50

34:                                               ; preds = %29
  %35 = getelementptr inbounds i16, i16* %0, i64 %30
  %36 = load i16, i16* %35, align 2
  %37 = add i16 %36, 267
  %38 = icmp ugt i16 %37, 7
  br i1 %38, label %58, label %39

39:                                               ; preds = %34
  %40 = sext i32 %32 to i64
  %41 = getelementptr inbounds i16, i16* %8, i64 %40
  store i16 1604, i16* %41, align 2
  %42 = zext i16 %36 to i64
  %43 = add nsw i64 %42, -65269
  %44 = getelementptr inbounds [8 x i16], [8 x i16]* @_ZL14convertLamAlef, i64 0, i64 %43
  %45 = load i16, i16* %44, align 2
  %46 = add nsw i32 %32, -1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i16, i16* %8, i64 %47
  store i16 %45, i16* %48, align 2
  %49 = add nsw i32 %31, -1
  br label %63

50:                                               ; preds = %29
  %51 = icmp eq i32 %31, 0
  br i1 %51, label %52, label %58

52:                                               ; preds = %50
  %53 = getelementptr inbounds i16, i16* %0, i64 %30
  %54 = load i16, i16* %53, align 2
  %55 = add i16 %54, 267
  %56 = icmp ugt i16 %55, 7
  br i1 %56, label %58, label %57

57:                                               ; preds = %52
  store i32 20, i32* %2, align 4
  br label %58

58:                                               ; preds = %34, %52, %57, %50
  %59 = getelementptr inbounds i16, i16* %0, i64 %30
  %60 = load i16, i16* %59, align 2
  %61 = sext i32 %32 to i64
  %62 = getelementptr inbounds i16, i16* %8, i64 %61
  store i16 %60, i16* %62, align 2
  br label %63

63:                                               ; preds = %58, %39
  %64 = phi i32 [ %46, %39 ], [ %32, %58 ]
  %65 = phi i32 [ %49, %39 ], [ %31, %58 ]
  %66 = add i64 %30, -1
  %67 = add nsw i32 %64, -1
  %68 = trunc i64 %66 to i32
  %69 = or i32 %67, %68
  %70 = icmp sgt i32 %69, -1
  br i1 %70, label %29, label %71

71:                                               ; preds = %63, %22
  %72 = tail call i16* @u_memcpy_69(i16* %0, i16* nonnull %8, i32 %1) #5
  tail call void @uprv_free_69(i8* nonnull %7) #5
  br label %73

73:                                               ; preds = %71, %10
  %74 = phi i32 [ 0, %10 ], [ %1, %71 ]
  ret i32 %74
}

declare i16* @u_memmove_69(i16*, i16*, i32) local_unnamed_addr #2

declare i32 @ubidi_getClass_69(i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = distinct !{!7, !6, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !6, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !6, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !6, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !14}
!18 = distinct !{!18, !6, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !14}
!21 = distinct !{!21, !6, !3}
