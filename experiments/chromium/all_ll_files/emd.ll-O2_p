; ModuleID = '../../third_party/opencv/src/emd.cpp'
source_filename = "../../third_party/opencv/src/emd.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CvNode1D = type { float, %struct.CvNode1D* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%"struct.opencv::PointDistribution" = type { %"class.std::__1::vector", i32, %"class.std::__1::vector.1" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"class.std::__1::vector"*, %"class.std::__1::vector"*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.std::__1::vector"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%struct.CvNode2D = type { float, [2 x %struct.CvNode2D*], i32, i32 }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { i8*, i8*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { i8* }

$_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPKfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPfEEE4typeES8_SA_SA_ = comdat any

$_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm = comdat any

@__const._ZL21icvFindBasicVariablesPPfPPcP8CvNode1DS4_ii.v0_head = private unnamed_addr constant { float, [4 x i8], %struct.CvNode1D* } { float 0xFFFFFFFFE0000000, [4 x i8] c"\AA\AA\AA\AA", %struct.CvNode1D* inttoptr (i64 -6148914691236517206 to %struct.CvNode1D*) }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z28GetDataFromPointDistributionRKN6opencv17PointDistributionE(%"class.std::__1::vector"* noalias sret, %"struct.opencv::PointDistribution"* nocapture readonly dereferenceable(56)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 24, i1 false) #8
  %6 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, 1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 2
  %11 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 2, i32 0, i32 1
  %12 = bitcast %"class.std::__1::vector"** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"class.std::__1::vector.1"* %10 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = sdiv exact i64 %16, 24
  %18 = mul i64 %17, %9
  %19 = bitcast float** %4 to i64*
  %20 = bitcast %"class.std::__1::vector"* %0 to i64*
  %21 = icmp eq i64 %18, 0
  br i1 %21, label %34, label %22

22:                                               ; preds = %2
  %23 = icmp ugt i64 %18, 4611686018427387903
  br i1 %23, label %24, label %25

24:                                               ; preds = %22
  tail call void @abort() #9
  unreachable

25:                                               ; preds = %22
  %26 = bitcast float** %3 to i64*
  %27 = shl i64 %18, 2
  %28 = tail call i8* @_Znwm(i64 %27) #10
  %29 = bitcast i8* %28 to float*
  %30 = ptrtoint i8* %28 to i64
  %31 = getelementptr inbounds float, float* %29, i64 %18
  %32 = ptrtoint float* %31 to i64
  %33 = ptrtoint i8* %28 to i64
  store i64 %33, i64* %20, align 8
  store i64 %30, i64* %26, align 8
  store i64 %32, i64* %19, align 8
  br label %34

34:                                               ; preds = %25, %2
  %35 = phi i64 [ 0, %2 ], [ %30, %25 ]
  %36 = phi float* [ null, %2 ], [ %31, %25 ]
  %37 = phi float* [ null, %2 ], [ %29, %25 ]
  %38 = icmp eq i64 %13, %15
  br i1 %38, label %124, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 0, i32 0, i32 0
  %41 = bitcast float** %3 to i64*
  %42 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %10, i64 0, i32 0, i32 0
  br label %43

43:                                               ; preds = %120, %39
  %44 = phi i64 [ %35, %39 ], [ %123, %120 ]
  %45 = phi float* [ %36, %39 ], [ %122, %120 ]
  %46 = phi float* [ %37, %39 ], [ %121, %120 ]
  %47 = phi i64 [ 0, %39 ], [ %114, %120 ]
  %48 = load float*, float** %40, align 8
  %49 = getelementptr inbounds float, float* %48, i64 %47
  %50 = icmp eq float* %46, %45
  br i1 %50, label %57, label %51

51:                                               ; preds = %43
  %52 = bitcast float* %49 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = bitcast float* %46 to i32*
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds float, float* %46, i64 1
  %56 = ptrtoint float* %55 to i64
  store i64 %56, i64* %41, align 8
  br label %106

57:                                               ; preds = %43
  %58 = ptrtoint float* %45 to i64
  %59 = load i64, i64* %20, align 8
  %60 = sub i64 %58, %59
  %61 = ashr exact i64 %60, 2
  %62 = add nsw i64 %61, 1
  %63 = icmp ugt i64 %62, 4611686018427387903
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %65) #9
  unreachable

66:                                               ; preds = %57
  %67 = icmp ult i64 %61, 2305843009213693951
  br i1 %67, label %68, label %76

68:                                               ; preds = %66
  %69 = ashr exact i64 %60, 1
  %70 = icmp ult i64 %69, %62
  %71 = select i1 %70, i64 %62, i64 %69
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %81, label %73

73:                                               ; preds = %68
  %74 = icmp ugt i64 %71, 4611686018427387903
  br i1 %74, label %75, label %76

75:                                               ; preds = %73
  tail call void @abort() #9
  unreachable

76:                                               ; preds = %73, %66
  %77 = phi i64 [ %71, %73 ], [ 4611686018427387903, %66 ]
  %78 = shl i64 %77, 2
  %79 = tail call i8* @_Znwm(i64 %78) #10
  %80 = bitcast i8* %79 to float*
  br label %81

81:                                               ; preds = %76, %68
  %82 = phi i64 [ %77, %76 ], [ 0, %68 ]
  %83 = phi float* [ %80, %76 ], [ null, %68 ]
  %84 = getelementptr inbounds float, float* %83, i64 %61
  %85 = getelementptr inbounds float, float* %83, i64 %82
  %86 = ptrtoint float* %85 to i64
  %87 = bitcast float* %49 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = bitcast float* %84 to i32*
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds float, float* %84, i64 1
  %91 = ptrtoint float* %90 to i64
  %92 = sub i64 %44, %59
  %93 = ashr exact i64 %92, 2
  %94 = sub nsw i64 0, %93
  %95 = getelementptr inbounds float, float* %84, i64 %94
  %96 = ptrtoint float* %95 to i64
  %97 = icmp sgt i64 %92, 0
  br i1 %97, label %98, label %101

98:                                               ; preds = %81
  %99 = bitcast float* %95 to i8*
  %100 = inttoptr i64 %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %100, i64 %92, i1 false) #8
  br label %101

101:                                              ; preds = %98, %81
  store i64 %96, i64* %20, align 8
  store i64 %91, i64* %41, align 8
  store i64 %86, i64* %19, align 8
  %102 = icmp eq i64 %59, 0
  br i1 %102, label %106, label %103

103:                                              ; preds = %101
  %104 = inttoptr i64 %59 to i8*
  tail call void @_ZdlPv(i8* %104) #10
  %105 = load float*, float** %3, align 8
  br label %106

106:                                              ; preds = %51, %101, %103
  %107 = phi float* [ %55, %51 ], [ %90, %101 ], [ %105, %103 ]
  %108 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %42, align 8
  %109 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 %47, i32 0, i32 0
  %110 = load float*, float** %109, align 8
  %111 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %108, i64 %47, i32 0, i32 1
  %112 = load float*, float** %111, align 8
  %113 = tail call float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPKfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPfEEE4typeES8_SA_SA_(%"class.std::__1::vector"* %0, float* %107, float* %110, float* %112)
  %114 = add nuw i64 %47, 1
  %115 = load i64, i64* %12, align 8
  %116 = load i64, i64* %14, align 8
  %117 = sub i64 %115, %116
  %118 = sdiv exact i64 %117, 24
  %119 = icmp ult i64 %114, %118
  br i1 %119, label %120, label %124

120:                                              ; preds = %106
  %121 = load float*, float** %3, align 8
  %122 = load float*, float** %4, align 8
  %123 = ptrtoint float* %121 to i64
  br label %43

124:                                              ; preds = %106, %34
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden float* @_ZNSt3__16vectorIfNS_9allocatorIfEEE6insertINS_11__wrap_iterIPKfEEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIfNS_15iterator_traitsISA_E9referenceEEE5valueENS5_IPfEEE4typeES8_SA_SA_(%"class.std::__1::vector"*, float*, float*, float*) local_unnamed_addr #0 comdat align 2 {
  %5 = bitcast float* %2 to i8*
  %6 = bitcast float* %1 to i8*
  %7 = ptrtoint float* %1 to i64
  %8 = ptrtoint float* %2 to i64
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %10 = ptrtoint float* %3 to i64
  %11 = sub i64 %10, %8
  %12 = ashr exact i64 %11, 2
  %13 = icmp sgt i64 %11, 0
  br i1 %13, label %14, label %772

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast float** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = load float*, float** %18, align 8
  %20 = ptrtoint float* %19 to i64
  %21 = sub i64 %17, %20
  %22 = ashr exact i64 %21, 2
  %23 = icmp sgt i64 %12, %22
  %24 = bitcast float** %18 to i64*
  br i1 %23, label %359, label %25

25:                                               ; preds = %14
  %26 = sub i64 %20, %7
  %27 = ashr exact i64 %26, 2
  %28 = icmp sgt i64 %12, %27
  br i1 %28, label %29, label %214

29:                                               ; preds = %25
  %30 = getelementptr inbounds float, float* %2, i64 %27
  %31 = icmp eq float* %30, %3
  br i1 %31, label %209, label %32

32:                                               ; preds = %29
  %33 = xor i64 %27, -1
  %34 = getelementptr float, float* %3, i64 %33
  %35 = ptrtoint float* %34 to i64
  %36 = sub i64 %35, %8
  %37 = lshr i64 %36, 2
  %38 = add nuw nsw i64 %37, 1
  %39 = icmp ult i64 %38, 8
  br i1 %39, label %135, label %40

40:                                               ; preds = %32
  %41 = xor i64 %27, -1
  %42 = getelementptr float, float* %3, i64 %41
  %43 = ptrtoint float* %42 to i64
  %44 = sub i64 %43, %8
  %45 = lshr i64 %44, 2
  %46 = add nuw nsw i64 %45, 1
  %47 = getelementptr float, float* %19, i64 %46
  %48 = add nsw i64 %27, %45
  %49 = add i64 %48, 1
  %50 = getelementptr float, float* %2, i64 %49
  %51 = icmp ult float* %19, %50
  %52 = icmp ult float* %30, %47
  %53 = and i1 %51, %52
  br i1 %53, label %135, label %54

54:                                               ; preds = %40
  %55 = and i64 %38, 9223372036854775800
  %56 = getelementptr float, float* %19, i64 %55
  %57 = getelementptr float, float* %30, i64 %55
  %58 = add nsw i64 %55, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 24
  br i1 %62, label %114, label %63

63:                                               ; preds = %54
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %111, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %112, %65 ]
  %68 = getelementptr float, float* %19, i64 %66
  %69 = getelementptr float, float* %30, i64 %66
  %70 = bitcast float* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 4, !alias.scope !2
  %72 = getelementptr float, float* %69, i64 4
  %73 = bitcast float* %72 to <4 x i32>*
  %74 = load <4 x i32>, <4 x i32>* %73, align 4, !alias.scope !2
  %75 = bitcast float* %68 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %75, align 4, !alias.scope !5, !noalias !2
  %76 = getelementptr float, float* %68, i64 4
  %77 = bitcast float* %76 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %77, align 4, !alias.scope !5, !noalias !2
  %78 = or i64 %66, 8
  %79 = getelementptr float, float* %19, i64 %78
  %80 = getelementptr float, float* %30, i64 %78
  %81 = bitcast float* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !2
  %83 = getelementptr float, float* %80, i64 4
  %84 = bitcast float* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 4, !alias.scope !2
  %86 = bitcast float* %79 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %86, align 4, !alias.scope !5, !noalias !2
  %87 = getelementptr float, float* %79, i64 4
  %88 = bitcast float* %87 to <4 x i32>*
  store <4 x i32> %85, <4 x i32>* %88, align 4, !alias.scope !5, !noalias !2
  %89 = or i64 %66, 16
  %90 = getelementptr float, float* %19, i64 %89
  %91 = getelementptr float, float* %30, i64 %89
  %92 = bitcast float* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !2
  %94 = getelementptr float, float* %91, i64 4
  %95 = bitcast float* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 4, !alias.scope !2
  %97 = bitcast float* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %97, align 4, !alias.scope !5, !noalias !2
  %98 = getelementptr float, float* %90, i64 4
  %99 = bitcast float* %98 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %99, align 4, !alias.scope !5, !noalias !2
  %100 = or i64 %66, 24
  %101 = getelementptr float, float* %19, i64 %100
  %102 = getelementptr float, float* %30, i64 %100
  %103 = bitcast float* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !2
  %105 = getelementptr float, float* %102, i64 4
  %106 = bitcast float* %105 to <4 x i32>*
  %107 = load <4 x i32>, <4 x i32>* %106, align 4, !alias.scope !2
  %108 = bitcast float* %101 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %108, align 4, !alias.scope !5, !noalias !2
  %109 = getelementptr float, float* %101, i64 4
  %110 = bitcast float* %109 to <4 x i32>*
  store <4 x i32> %107, <4 x i32>* %110, align 4, !alias.scope !5, !noalias !2
  %111 = add i64 %66, 32
  %112 = add i64 %67, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %65, !llvm.loop !7

114:                                              ; preds = %65, %54
  %115 = phi i64 [ 0, %54 ], [ %111, %65 ]
  %116 = icmp eq i64 %61, 0
  br i1 %116, label %133, label %117

117:                                              ; preds = %114, %117
  %118 = phi i64 [ %130, %117 ], [ %115, %114 ]
  %119 = phi i64 [ %131, %117 ], [ %61, %114 ]
  %120 = getelementptr float, float* %19, i64 %118
  %121 = getelementptr float, float* %30, i64 %118
  %122 = bitcast float* %121 to <4 x i32>*
  %123 = load <4 x i32>, <4 x i32>* %122, align 4, !alias.scope !2
  %124 = getelementptr float, float* %121, i64 4
  %125 = bitcast float* %124 to <4 x i32>*
  %126 = load <4 x i32>, <4 x i32>* %125, align 4, !alias.scope !2
  %127 = bitcast float* %120 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %127, align 4, !alias.scope !5, !noalias !2
  %128 = getelementptr float, float* %120, i64 4
  %129 = bitcast float* %128 to <4 x i32>*
  store <4 x i32> %126, <4 x i32>* %129, align 4, !alias.scope !5, !noalias !2
  %130 = add i64 %118, 8
  %131 = add i64 %119, -1
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %117, !llvm.loop !9

133:                                              ; preds = %117, %114
  %134 = icmp eq i64 %38, %55
  br i1 %134, label %206, label %135

135:                                              ; preds = %133, %40, %32
  %136 = phi float* [ %19, %40 ], [ %19, %32 ], [ %56, %133 ]
  %137 = phi float* [ %30, %40 ], [ %30, %32 ], [ %57, %133 ]
  %138 = ptrtoint float* %137 to i64
  %139 = getelementptr float, float* %3, i64 -1
  %140 = ptrtoint float* %139 to i64
  %141 = sub i64 %140, %138
  %142 = lshr i64 %141, 2
  %143 = add nuw nsw i64 %142, 1
  %144 = and i64 %143, 7
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %157, label %146

146:                                              ; preds = %135, %146
  %147 = phi float* [ %154, %146 ], [ %136, %135 ]
  %148 = phi float* [ %153, %146 ], [ %137, %135 ]
  %149 = phi i64 [ %155, %146 ], [ %144, %135 ]
  %150 = bitcast float* %147 to i32*
  %151 = bitcast float* %148 to i32*
  %152 = load i32, i32* %151, align 4
  store i32 %152, i32* %150, align 4
  %153 = getelementptr inbounds float, float* %148, i64 1
  %154 = getelementptr inbounds float, float* %147, i64 1
  %155 = add i64 %149, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %146, !llvm.loop !11

157:                                              ; preds = %146, %135
  %158 = phi float* [ undef, %135 ], [ %154, %146 ]
  %159 = phi float* [ %136, %135 ], [ %154, %146 ]
  %160 = phi float* [ %137, %135 ], [ %153, %146 ]
  %161 = icmp ult i64 %141, 28
  br i1 %161, label %206, label %162

162:                                              ; preds = %157, %162
  %163 = phi float* [ %204, %162 ], [ %159, %157 ]
  %164 = phi float* [ %203, %162 ], [ %160, %157 ]
  %165 = bitcast float* %163 to i32*
  %166 = bitcast float* %164 to i32*
  %167 = load i32, i32* %166, align 4
  store i32 %167, i32* %165, align 4
  %168 = getelementptr inbounds float, float* %164, i64 1
  %169 = getelementptr inbounds float, float* %163, i64 1
  %170 = bitcast float* %169 to i32*
  %171 = bitcast float* %168 to i32*
  %172 = load i32, i32* %171, align 4
  store i32 %172, i32* %170, align 4
  %173 = getelementptr inbounds float, float* %164, i64 2
  %174 = getelementptr inbounds float, float* %163, i64 2
  %175 = bitcast float* %174 to i32*
  %176 = bitcast float* %173 to i32*
  %177 = load i32, i32* %176, align 4
  store i32 %177, i32* %175, align 4
  %178 = getelementptr inbounds float, float* %164, i64 3
  %179 = getelementptr inbounds float, float* %163, i64 3
  %180 = bitcast float* %179 to i32*
  %181 = bitcast float* %178 to i32*
  %182 = load i32, i32* %181, align 4
  store i32 %182, i32* %180, align 4
  %183 = getelementptr inbounds float, float* %164, i64 4
  %184 = getelementptr inbounds float, float* %163, i64 4
  %185 = bitcast float* %184 to i32*
  %186 = bitcast float* %183 to i32*
  %187 = load i32, i32* %186, align 4
  store i32 %187, i32* %185, align 4
  %188 = getelementptr inbounds float, float* %164, i64 5
  %189 = getelementptr inbounds float, float* %163, i64 5
  %190 = bitcast float* %189 to i32*
  %191 = bitcast float* %188 to i32*
  %192 = load i32, i32* %191, align 4
  store i32 %192, i32* %190, align 4
  %193 = getelementptr inbounds float, float* %164, i64 6
  %194 = getelementptr inbounds float, float* %163, i64 6
  %195 = bitcast float* %194 to i32*
  %196 = bitcast float* %193 to i32*
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %195, align 4
  %198 = getelementptr inbounds float, float* %164, i64 7
  %199 = getelementptr inbounds float, float* %163, i64 7
  %200 = bitcast float* %199 to i32*
  %201 = bitcast float* %198 to i32*
  %202 = load i32, i32* %201, align 4
  store i32 %202, i32* %200, align 4
  %203 = getelementptr inbounds float, float* %164, i64 8
  %204 = getelementptr inbounds float, float* %163, i64 8
  %205 = icmp eq float* %203, %3
  br i1 %205, label %206, label %162, !llvm.loop !12

206:                                              ; preds = %157, %162, %133
  %207 = phi float* [ %56, %133 ], [ %158, %157 ], [ %204, %162 ]
  %208 = ptrtoint float* %207 to i64
  br label %209

209:                                              ; preds = %206, %29
  %210 = phi i64 [ %20, %29 ], [ %208, %206 ]
  store i64 %210, i64* %24, align 8
  %211 = icmp sgt i64 %26, 0
  br i1 %211, label %212, label %772

212:                                              ; preds = %209
  %213 = inttoptr i64 %210 to float*
  br label %214

214:                                              ; preds = %212, %25
  %215 = phi i64 [ %210, %212 ], [ %20, %25 ]
  %216 = phi float* [ %213, %212 ], [ %19, %25 ]
  %217 = phi float* [ %30, %212 ], [ %3, %25 ]
  %218 = getelementptr inbounds float, float* %1, i64 %12
  %219 = ptrtoint float* %218 to i64
  %220 = sub i64 %215, %219
  %221 = ashr exact i64 %220, 2
  %222 = getelementptr inbounds float, float* %1, i64 %221
  %223 = icmp ult float* %222, %19
  br i1 %223, label %224, label %337

224:                                              ; preds = %214
  %225 = sub nsw i64 0, %221
  %226 = getelementptr float, float* %19, i64 %225
  %227 = bitcast float* %226 to i8*
  %228 = xor i64 %7, -1
  %229 = getelementptr i8, i8* %227, i64 %228
  %230 = ptrtoint i8* %229 to i64
  %231 = lshr i64 %230, 2
  %232 = add nuw nsw i64 %231, 1
  %233 = icmp ult i64 %232, 8
  br i1 %233, label %234, label %237

234:                                              ; preds = %332, %237, %224
  %235 = phi float* [ %216, %237 ], [ %216, %224 ], [ %255, %332 ]
  %236 = phi float* [ %222, %237 ], [ %222, %224 ], [ %256, %332 ]
  br label %345

237:                                              ; preds = %224
  %238 = sub nsw i64 0, %221
  %239 = getelementptr float, float* %19, i64 %238
  %240 = bitcast float* %239 to i8*
  %241 = xor i64 %7, -1
  %242 = getelementptr i8, i8* %240, i64 %241
  %243 = ptrtoint i8* %242 to i64
  %244 = lshr i64 %243, 2
  %245 = add nuw nsw i64 %244, 1
  %246 = getelementptr float, float* %216, i64 %245
  %247 = add nsw i64 %221, %244
  %248 = add i64 %247, 1
  %249 = getelementptr float, float* %1, i64 %248
  %250 = icmp ult float* %216, %249
  %251 = icmp ult float* %222, %246
  %252 = and i1 %250, %251
  br i1 %252, label %234, label %253

253:                                              ; preds = %237
  %254 = and i64 %232, 9223372036854775800
  %255 = getelementptr float, float* %216, i64 %254
  %256 = getelementptr float, float* %222, i64 %254
  %257 = add nsw i64 %254, -8
  %258 = lshr exact i64 %257, 3
  %259 = add nuw nsw i64 %258, 1
  %260 = and i64 %259, 3
  %261 = icmp ult i64 %257, 24
  br i1 %261, label %313, label %262

262:                                              ; preds = %253
  %263 = sub nsw i64 %259, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi i64 [ 0, %262 ], [ %310, %264 ]
  %266 = phi i64 [ %263, %262 ], [ %311, %264 ]
  %267 = getelementptr float, float* %216, i64 %265
  %268 = getelementptr float, float* %222, i64 %265
  %269 = bitcast float* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 4, !alias.scope !13
  %271 = getelementptr float, float* %268, i64 4
  %272 = bitcast float* %271 to <4 x i32>*
  %273 = load <4 x i32>, <4 x i32>* %272, align 4, !alias.scope !13
  %274 = bitcast float* %267 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %274, align 4, !alias.scope !16, !noalias !13
  %275 = getelementptr float, float* %267, i64 4
  %276 = bitcast float* %275 to <4 x i32>*
  store <4 x i32> %273, <4 x i32>* %276, align 4, !alias.scope !16, !noalias !13
  %277 = or i64 %265, 8
  %278 = getelementptr float, float* %216, i64 %277
  %279 = getelementptr float, float* %222, i64 %277
  %280 = bitcast float* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 4, !alias.scope !13
  %282 = getelementptr float, float* %279, i64 4
  %283 = bitcast float* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 4, !alias.scope !13
  %285 = bitcast float* %278 to <4 x i32>*
  store <4 x i32> %281, <4 x i32>* %285, align 4, !alias.scope !16, !noalias !13
  %286 = getelementptr float, float* %278, i64 4
  %287 = bitcast float* %286 to <4 x i32>*
  store <4 x i32> %284, <4 x i32>* %287, align 4, !alias.scope !16, !noalias !13
  %288 = or i64 %265, 16
  %289 = getelementptr float, float* %216, i64 %288
  %290 = getelementptr float, float* %222, i64 %288
  %291 = bitcast float* %290 to <4 x i32>*
  %292 = load <4 x i32>, <4 x i32>* %291, align 4, !alias.scope !13
  %293 = getelementptr float, float* %290, i64 4
  %294 = bitcast float* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 4, !alias.scope !13
  %296 = bitcast float* %289 to <4 x i32>*
  store <4 x i32> %292, <4 x i32>* %296, align 4, !alias.scope !16, !noalias !13
  %297 = getelementptr float, float* %289, i64 4
  %298 = bitcast float* %297 to <4 x i32>*
  store <4 x i32> %295, <4 x i32>* %298, align 4, !alias.scope !16, !noalias !13
  %299 = or i64 %265, 24
  %300 = getelementptr float, float* %216, i64 %299
  %301 = getelementptr float, float* %222, i64 %299
  %302 = bitcast float* %301 to <4 x i32>*
  %303 = load <4 x i32>, <4 x i32>* %302, align 4, !alias.scope !13
  %304 = getelementptr float, float* %301, i64 4
  %305 = bitcast float* %304 to <4 x i32>*
  %306 = load <4 x i32>, <4 x i32>* %305, align 4, !alias.scope !13
  %307 = bitcast float* %300 to <4 x i32>*
  store <4 x i32> %303, <4 x i32>* %307, align 4, !alias.scope !16, !noalias !13
  %308 = getelementptr float, float* %300, i64 4
  %309 = bitcast float* %308 to <4 x i32>*
  store <4 x i32> %306, <4 x i32>* %309, align 4, !alias.scope !16, !noalias !13
  %310 = add i64 %265, 32
  %311 = add i64 %266, -4
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %313, label %264, !llvm.loop !18

313:                                              ; preds = %264, %253
  %314 = phi i64 [ 0, %253 ], [ %310, %264 ]
  %315 = icmp eq i64 %260, 0
  br i1 %315, label %332, label %316

316:                                              ; preds = %313, %316
  %317 = phi i64 [ %329, %316 ], [ %314, %313 ]
  %318 = phi i64 [ %330, %316 ], [ %260, %313 ]
  %319 = getelementptr float, float* %216, i64 %317
  %320 = getelementptr float, float* %222, i64 %317
  %321 = bitcast float* %320 to <4 x i32>*
  %322 = load <4 x i32>, <4 x i32>* %321, align 4, !alias.scope !13
  %323 = getelementptr float, float* %320, i64 4
  %324 = bitcast float* %323 to <4 x i32>*
  %325 = load <4 x i32>, <4 x i32>* %324, align 4, !alias.scope !13
  %326 = bitcast float* %319 to <4 x i32>*
  store <4 x i32> %322, <4 x i32>* %326, align 4, !alias.scope !16, !noalias !13
  %327 = getelementptr float, float* %319, i64 4
  %328 = bitcast float* %327 to <4 x i32>*
  store <4 x i32> %325, <4 x i32>* %328, align 4, !alias.scope !16, !noalias !13
  %329 = add i64 %317, 8
  %330 = add i64 %318, -1
  %331 = icmp eq i64 %330, 0
  br i1 %331, label %332, label %316, !llvm.loop !19

332:                                              ; preds = %316, %313
  %333 = icmp eq i64 %232, %254
  br i1 %333, label %334, label %234

334:                                              ; preds = %345, %332
  %335 = phi float* [ %255, %332 ], [ %352, %345 ]
  %336 = ptrtoint float* %335 to i64
  br label %337

337:                                              ; preds = %334, %214
  %338 = phi i64 [ %336, %334 ], [ %215, %214 ]
  store i64 %338, i64* %24, align 8
  %339 = icmp eq i64 %220, 0
  br i1 %339, label %354, label %340

340:                                              ; preds = %337
  %341 = sub nsw i64 0, %221
  %342 = getelementptr inbounds float, float* %216, i64 %341
  %343 = bitcast float* %342 to i8*
  %344 = bitcast float* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %343, i8* align 4 %344, i64 %220, i1 false) #8
  br label %354

345:                                              ; preds = %234, %345
  %346 = phi float* [ %352, %345 ], [ %235, %234 ]
  %347 = phi float* [ %351, %345 ], [ %236, %234 ]
  %348 = bitcast float* %347 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = bitcast float* %346 to i32*
  store i32 %349, i32* %350, align 4
  %351 = getelementptr inbounds float, float* %347, i64 1
  %352 = getelementptr inbounds float, float* %346, i64 1
  %353 = icmp ult float* %351, %19
  br i1 %353, label %345, label %334, !llvm.loop !20

354:                                              ; preds = %337, %340
  %355 = ptrtoint float* %217 to i64
  %356 = sub i64 %355, %8
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %772, label %358

358:                                              ; preds = %354
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %5, i64 %356, i1 false) #8
  br label %772

359:                                              ; preds = %14
  %360 = bitcast %"class.std::__1::vector"* %0 to i64*
  %361 = load i64, i64* %360, align 8
  %362 = sub i64 %20, %361
  %363 = ashr exact i64 %362, 2
  %364 = add nsw i64 %363, %12
  %365 = icmp ugt i64 %364, 4611686018427387903
  br i1 %365, label %366, label %368

366:                                              ; preds = %359
  %367 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %367) #9
  unreachable

368:                                              ; preds = %359
  %369 = sub i64 %17, %361
  %370 = ashr exact i64 %369, 2
  %371 = icmp ult i64 %370, 2305843009213693951
  br i1 %371, label %375, label %372

372:                                              ; preds = %368
  %373 = sub i64 %7, %361
  %374 = ashr exact i64 %373, 2
  br label %385

375:                                              ; preds = %368
  %376 = ashr exact i64 %369, 1
  %377 = icmp ult i64 %376, %364
  %378 = select i1 %377, i64 %364, i64 %376
  %379 = sub i64 %7, %361
  %380 = ashr exact i64 %379, 2
  %381 = icmp eq i64 %378, 0
  br i1 %381, label %391, label %382

382:                                              ; preds = %375
  %383 = icmp ugt i64 %378, 4611686018427387903
  br i1 %383, label %384, label %385

384:                                              ; preds = %382
  tail call void @abort() #9
  unreachable

385:                                              ; preds = %372, %382
  %386 = phi i64 [ 4611686018427387903, %372 ], [ %378, %382 ]
  %387 = phi i64 [ %374, %372 ], [ %380, %382 ]
  %388 = shl i64 %386, 2
  %389 = tail call i8* @_Znwm(i64 %388) #10
  %390 = bitcast i8* %389 to float*
  br label %391

391:                                              ; preds = %385, %375
  %392 = phi i64 [ %387, %385 ], [ %380, %375 ]
  %393 = phi i64 [ %386, %385 ], [ 0, %375 ]
  %394 = phi float* [ %390, %385 ], [ null, %375 ]
  %395 = getelementptr inbounds float, float* %394, i64 %392
  %396 = getelementptr inbounds float, float* %394, i64 %393
  %397 = ptrtoint float* %396 to i64
  %398 = getelementptr inbounds float, float* %395, i64 %12
  %399 = add i64 %11, -4
  %400 = lshr i64 %399, 2
  %401 = add nuw nsw i64 %400, 1
  %402 = icmp ult i64 %401, 8
  br i1 %402, label %496, label %403

403:                                              ; preds = %391
  %404 = add i64 %11, -4
  %405 = lshr i64 %404, 2
  %406 = add nsw i64 %392, %405
  %407 = add i64 %406, 1
  %408 = getelementptr float, float* %394, i64 %407
  %409 = add nuw nsw i64 %405, 1
  %410 = getelementptr float, float* %2, i64 %409
  %411 = icmp ult float* %395, %410
  %412 = icmp ugt float* %408, %2
  %413 = and i1 %411, %412
  br i1 %413, label %496, label %414

414:                                              ; preds = %403
  %415 = and i64 %401, 9223372036854775800
  %416 = getelementptr float, float* %395, i64 %415
  %417 = getelementptr float, float* %395, i64 %415
  %418 = getelementptr float, float* %2, i64 %415
  %419 = add nsw i64 %415, -8
  %420 = lshr exact i64 %419, 3
  %421 = add nuw nsw i64 %420, 1
  %422 = and i64 %421, 3
  %423 = icmp ult i64 %419, 24
  br i1 %423, label %475, label %424

424:                                              ; preds = %414
  %425 = sub nsw i64 %421, %422
  br label %426

426:                                              ; preds = %426, %424
  %427 = phi i64 [ 0, %424 ], [ %472, %426 ]
  %428 = phi i64 [ %425, %424 ], [ %473, %426 ]
  %429 = getelementptr float, float* %395, i64 %427
  %430 = getelementptr float, float* %2, i64 %427
  %431 = bitcast float* %430 to <4 x i32>*
  %432 = load <4 x i32>, <4 x i32>* %431, align 4, !alias.scope !21
  %433 = getelementptr float, float* %430, i64 4
  %434 = bitcast float* %433 to <4 x i32>*
  %435 = load <4 x i32>, <4 x i32>* %434, align 4, !alias.scope !21
  %436 = bitcast float* %429 to <4 x i32>*
  store <4 x i32> %432, <4 x i32>* %436, align 4, !alias.scope !24, !noalias !21
  %437 = getelementptr float, float* %429, i64 4
  %438 = bitcast float* %437 to <4 x i32>*
  store <4 x i32> %435, <4 x i32>* %438, align 4, !alias.scope !24, !noalias !21
  %439 = or i64 %427, 8
  %440 = getelementptr float, float* %395, i64 %439
  %441 = getelementptr float, float* %2, i64 %439
  %442 = bitcast float* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 4, !alias.scope !21
  %444 = getelementptr float, float* %441, i64 4
  %445 = bitcast float* %444 to <4 x i32>*
  %446 = load <4 x i32>, <4 x i32>* %445, align 4, !alias.scope !21
  %447 = bitcast float* %440 to <4 x i32>*
  store <4 x i32> %443, <4 x i32>* %447, align 4, !alias.scope !24, !noalias !21
  %448 = getelementptr float, float* %440, i64 4
  %449 = bitcast float* %448 to <4 x i32>*
  store <4 x i32> %446, <4 x i32>* %449, align 4, !alias.scope !24, !noalias !21
  %450 = or i64 %427, 16
  %451 = getelementptr float, float* %395, i64 %450
  %452 = getelementptr float, float* %2, i64 %450
  %453 = bitcast float* %452 to <4 x i32>*
  %454 = load <4 x i32>, <4 x i32>* %453, align 4, !alias.scope !21
  %455 = getelementptr float, float* %452, i64 4
  %456 = bitcast float* %455 to <4 x i32>*
  %457 = load <4 x i32>, <4 x i32>* %456, align 4, !alias.scope !21
  %458 = bitcast float* %451 to <4 x i32>*
  store <4 x i32> %454, <4 x i32>* %458, align 4, !alias.scope !24, !noalias !21
  %459 = getelementptr float, float* %451, i64 4
  %460 = bitcast float* %459 to <4 x i32>*
  store <4 x i32> %457, <4 x i32>* %460, align 4, !alias.scope !24, !noalias !21
  %461 = or i64 %427, 24
  %462 = getelementptr float, float* %395, i64 %461
  %463 = getelementptr float, float* %2, i64 %461
  %464 = bitcast float* %463 to <4 x i32>*
  %465 = load <4 x i32>, <4 x i32>* %464, align 4, !alias.scope !21
  %466 = getelementptr float, float* %463, i64 4
  %467 = bitcast float* %466 to <4 x i32>*
  %468 = load <4 x i32>, <4 x i32>* %467, align 4, !alias.scope !21
  %469 = bitcast float* %462 to <4 x i32>*
  store <4 x i32> %465, <4 x i32>* %469, align 4, !alias.scope !24, !noalias !21
  %470 = getelementptr float, float* %462, i64 4
  %471 = bitcast float* %470 to <4 x i32>*
  store <4 x i32> %468, <4 x i32>* %471, align 4, !alias.scope !24, !noalias !21
  %472 = add i64 %427, 32
  %473 = add i64 %428, -4
  %474 = icmp eq i64 %473, 0
  br i1 %474, label %475, label %426, !llvm.loop !26

475:                                              ; preds = %426, %414
  %476 = phi i64 [ 0, %414 ], [ %472, %426 ]
  %477 = icmp eq i64 %422, 0
  br i1 %477, label %494, label %478

478:                                              ; preds = %475, %478
  %479 = phi i64 [ %491, %478 ], [ %476, %475 ]
  %480 = phi i64 [ %492, %478 ], [ %422, %475 ]
  %481 = getelementptr float, float* %395, i64 %479
  %482 = getelementptr float, float* %2, i64 %479
  %483 = bitcast float* %482 to <4 x i32>*
  %484 = load <4 x i32>, <4 x i32>* %483, align 4, !alias.scope !21
  %485 = getelementptr float, float* %482, i64 4
  %486 = bitcast float* %485 to <4 x i32>*
  %487 = load <4 x i32>, <4 x i32>* %486, align 4, !alias.scope !21
  %488 = bitcast float* %481 to <4 x i32>*
  store <4 x i32> %484, <4 x i32>* %488, align 4, !alias.scope !24, !noalias !21
  %489 = getelementptr float, float* %481, i64 4
  %490 = bitcast float* %489 to <4 x i32>*
  store <4 x i32> %487, <4 x i32>* %490, align 4, !alias.scope !24, !noalias !21
  %491 = add i64 %479, 8
  %492 = add i64 %480, -1
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %494, label %478, !llvm.loop !27

494:                                              ; preds = %478, %475
  %495 = icmp eq i64 %401, %415
  br i1 %495, label %572, label %496

496:                                              ; preds = %494, %403, %391
  %497 = phi float* [ %395, %403 ], [ %395, %391 ], [ %416, %494 ]
  %498 = phi float* [ %395, %403 ], [ %395, %391 ], [ %417, %494 ]
  %499 = phi float* [ %2, %403 ], [ %2, %391 ], [ %418, %494 ]
  %500 = ptrtoint float* %497 to i64
  %501 = add nsw i64 %392, %12
  %502 = add nsw i64 %501, -1
  %503 = getelementptr float, float* %394, i64 %502
  %504 = ptrtoint float* %503 to i64
  %505 = sub i64 %504, %500
  %506 = lshr i64 %505, 2
  %507 = add nuw nsw i64 %506, 1
  %508 = and i64 %507, 7
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %522, label %510

510:                                              ; preds = %496, %510
  %511 = phi float* [ %518, %510 ], [ %497, %496 ]
  %512 = phi float* [ %518, %510 ], [ %498, %496 ]
  %513 = phi float* [ %519, %510 ], [ %499, %496 ]
  %514 = phi i64 [ %520, %510 ], [ %508, %496 ]
  %515 = bitcast float* %513 to i32*
  %516 = load i32, i32* %515, align 4
  %517 = bitcast float* %512 to i32*
  store i32 %516, i32* %517, align 4
  %518 = getelementptr inbounds float, float* %511, i64 1
  %519 = getelementptr inbounds float, float* %513, i64 1
  %520 = add i64 %514, -1
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %522, label %510, !llvm.loop !28

522:                                              ; preds = %510, %496
  %523 = phi float* [ %497, %496 ], [ %518, %510 ]
  %524 = phi float* [ %498, %496 ], [ %518, %510 ]
  %525 = phi float* [ %499, %496 ], [ %519, %510 ]
  %526 = icmp ult i64 %505, 28
  br i1 %526, label %572, label %527

527:                                              ; preds = %522, %527
  %528 = phi float* [ %569, %527 ], [ %523, %522 ]
  %529 = phi float* [ %569, %527 ], [ %524, %522 ]
  %530 = phi float* [ %570, %527 ], [ %525, %522 ]
  %531 = bitcast float* %530 to i32*
  %532 = load i32, i32* %531, align 4
  %533 = bitcast float* %529 to i32*
  store i32 %532, i32* %533, align 4
  %534 = getelementptr inbounds float, float* %528, i64 1
  %535 = getelementptr inbounds float, float* %530, i64 1
  %536 = bitcast float* %535 to i32*
  %537 = load i32, i32* %536, align 4
  %538 = bitcast float* %534 to i32*
  store i32 %537, i32* %538, align 4
  %539 = getelementptr inbounds float, float* %528, i64 2
  %540 = getelementptr inbounds float, float* %530, i64 2
  %541 = bitcast float* %540 to i32*
  %542 = load i32, i32* %541, align 4
  %543 = bitcast float* %539 to i32*
  store i32 %542, i32* %543, align 4
  %544 = getelementptr inbounds float, float* %528, i64 3
  %545 = getelementptr inbounds float, float* %530, i64 3
  %546 = bitcast float* %545 to i32*
  %547 = load i32, i32* %546, align 4
  %548 = bitcast float* %544 to i32*
  store i32 %547, i32* %548, align 4
  %549 = getelementptr inbounds float, float* %528, i64 4
  %550 = getelementptr inbounds float, float* %530, i64 4
  %551 = bitcast float* %550 to i32*
  %552 = load i32, i32* %551, align 4
  %553 = bitcast float* %549 to i32*
  store i32 %552, i32* %553, align 4
  %554 = getelementptr inbounds float, float* %528, i64 5
  %555 = getelementptr inbounds float, float* %530, i64 5
  %556 = bitcast float* %555 to i32*
  %557 = load i32, i32* %556, align 4
  %558 = bitcast float* %554 to i32*
  store i32 %557, i32* %558, align 4
  %559 = getelementptr inbounds float, float* %528, i64 6
  %560 = getelementptr inbounds float, float* %530, i64 6
  %561 = bitcast float* %560 to i32*
  %562 = load i32, i32* %561, align 4
  %563 = bitcast float* %559 to i32*
  store i32 %562, i32* %563, align 4
  %564 = getelementptr inbounds float, float* %528, i64 7
  %565 = getelementptr inbounds float, float* %530, i64 7
  %566 = bitcast float* %565 to i32*
  %567 = load i32, i32* %566, align 4
  %568 = bitcast float* %564 to i32*
  store i32 %567, i32* %568, align 4
  %569 = getelementptr inbounds float, float* %528, i64 8
  %570 = getelementptr inbounds float, float* %530, i64 8
  %571 = icmp eq float* %398, %569
  br i1 %571, label %572, label %527, !llvm.loop !29

572:                                              ; preds = %522, %527, %494
  %573 = load float*, float** %9, align 8
  %574 = ptrtoint float* %573 to i64
  %575 = sub i64 %7, %574
  %576 = ashr exact i64 %575, 2
  %577 = sub nsw i64 0, %576
  %578 = getelementptr inbounds float, float* %395, i64 %577
  %579 = ptrtoint float* %578 to i64
  %580 = icmp sgt i64 %575, 0
  br i1 %580, label %581, label %584

581:                                              ; preds = %572
  %582 = bitcast float* %578 to i8*
  %583 = bitcast float* %573 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %582, i8* align 4 %583, i64 %575, i1 false) #8
  br label %584

584:                                              ; preds = %581, %572
  %585 = load float*, float** %18, align 8
  %586 = icmp eq float* %585, %1
  br i1 %586, label %765, label %587

587:                                              ; preds = %584
  %588 = getelementptr float, float* %585, i64 -1
  %589 = ptrtoint float* %588 to i64
  %590 = sub i64 %589, %7
  %591 = lshr i64 %590, 2
  %592 = add nuw nsw i64 %591, 1
  %593 = icmp ult i64 %592, 8
  br i1 %593, label %690, label %594

594:                                              ; preds = %587
  %595 = add nsw i64 %392, %12
  %596 = getelementptr float, float* %585, i64 -1
  %597 = ptrtoint float* %596 to i64
  %598 = sub i64 %597, %7
  %599 = lshr i64 %598, 2
  %600 = add nsw i64 %595, %599
  %601 = add i64 %600, 1
  %602 = getelementptr float, float* %394, i64 %601
  %603 = add nuw nsw i64 %599, 1
  %604 = getelementptr float, float* %1, i64 %603
  %605 = icmp ult float* %398, %604
  %606 = icmp ugt float* %602, %1
  %607 = and i1 %605, %606
  br i1 %607, label %690, label %608

608:                                              ; preds = %594
  %609 = and i64 %592, 9223372036854775800
  %610 = getelementptr float, float* %398, i64 %609
  %611 = getelementptr float, float* %398, i64 %609
  %612 = getelementptr float, float* %1, i64 %609
  %613 = add nsw i64 %609, -8
  %614 = lshr exact i64 %613, 3
  %615 = add nuw nsw i64 %614, 1
  %616 = and i64 %615, 3
  %617 = icmp ult i64 %613, 24
  br i1 %617, label %669, label %618

618:                                              ; preds = %608
  %619 = sub nsw i64 %615, %616
  br label %620

620:                                              ; preds = %620, %618
  %621 = phi i64 [ 0, %618 ], [ %666, %620 ]
  %622 = phi i64 [ %619, %618 ], [ %667, %620 ]
  %623 = getelementptr float, float* %398, i64 %621
  %624 = getelementptr float, float* %1, i64 %621
  %625 = bitcast float* %624 to <4 x i32>*
  %626 = load <4 x i32>, <4 x i32>* %625, align 4, !alias.scope !30
  %627 = getelementptr float, float* %624, i64 4
  %628 = bitcast float* %627 to <4 x i32>*
  %629 = load <4 x i32>, <4 x i32>* %628, align 4, !alias.scope !30
  %630 = bitcast float* %623 to <4 x i32>*
  store <4 x i32> %626, <4 x i32>* %630, align 4, !alias.scope !33, !noalias !30
  %631 = getelementptr float, float* %623, i64 4
  %632 = bitcast float* %631 to <4 x i32>*
  store <4 x i32> %629, <4 x i32>* %632, align 4, !alias.scope !33, !noalias !30
  %633 = or i64 %621, 8
  %634 = getelementptr float, float* %398, i64 %633
  %635 = getelementptr float, float* %1, i64 %633
  %636 = bitcast float* %635 to <4 x i32>*
  %637 = load <4 x i32>, <4 x i32>* %636, align 4, !alias.scope !30
  %638 = getelementptr float, float* %635, i64 4
  %639 = bitcast float* %638 to <4 x i32>*
  %640 = load <4 x i32>, <4 x i32>* %639, align 4, !alias.scope !30
  %641 = bitcast float* %634 to <4 x i32>*
  store <4 x i32> %637, <4 x i32>* %641, align 4, !alias.scope !33, !noalias !30
  %642 = getelementptr float, float* %634, i64 4
  %643 = bitcast float* %642 to <4 x i32>*
  store <4 x i32> %640, <4 x i32>* %643, align 4, !alias.scope !33, !noalias !30
  %644 = or i64 %621, 16
  %645 = getelementptr float, float* %398, i64 %644
  %646 = getelementptr float, float* %1, i64 %644
  %647 = bitcast float* %646 to <4 x i32>*
  %648 = load <4 x i32>, <4 x i32>* %647, align 4, !alias.scope !30
  %649 = getelementptr float, float* %646, i64 4
  %650 = bitcast float* %649 to <4 x i32>*
  %651 = load <4 x i32>, <4 x i32>* %650, align 4, !alias.scope !30
  %652 = bitcast float* %645 to <4 x i32>*
  store <4 x i32> %648, <4 x i32>* %652, align 4, !alias.scope !33, !noalias !30
  %653 = getelementptr float, float* %645, i64 4
  %654 = bitcast float* %653 to <4 x i32>*
  store <4 x i32> %651, <4 x i32>* %654, align 4, !alias.scope !33, !noalias !30
  %655 = or i64 %621, 24
  %656 = getelementptr float, float* %398, i64 %655
  %657 = getelementptr float, float* %1, i64 %655
  %658 = bitcast float* %657 to <4 x i32>*
  %659 = load <4 x i32>, <4 x i32>* %658, align 4, !alias.scope !30
  %660 = getelementptr float, float* %657, i64 4
  %661 = bitcast float* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 4, !alias.scope !30
  %663 = bitcast float* %656 to <4 x i32>*
  store <4 x i32> %659, <4 x i32>* %663, align 4, !alias.scope !33, !noalias !30
  %664 = getelementptr float, float* %656, i64 4
  %665 = bitcast float* %664 to <4 x i32>*
  store <4 x i32> %662, <4 x i32>* %665, align 4, !alias.scope !33, !noalias !30
  %666 = add i64 %621, 32
  %667 = add i64 %622, -4
  %668 = icmp eq i64 %667, 0
  br i1 %668, label %669, label %620, !llvm.loop !35

669:                                              ; preds = %620, %608
  %670 = phi i64 [ 0, %608 ], [ %666, %620 ]
  %671 = icmp eq i64 %616, 0
  br i1 %671, label %688, label %672

672:                                              ; preds = %669, %672
  %673 = phi i64 [ %685, %672 ], [ %670, %669 ]
  %674 = phi i64 [ %686, %672 ], [ %616, %669 ]
  %675 = getelementptr float, float* %398, i64 %673
  %676 = getelementptr float, float* %1, i64 %673
  %677 = bitcast float* %676 to <4 x i32>*
  %678 = load <4 x i32>, <4 x i32>* %677, align 4, !alias.scope !30
  %679 = getelementptr float, float* %676, i64 4
  %680 = bitcast float* %679 to <4 x i32>*
  %681 = load <4 x i32>, <4 x i32>* %680, align 4, !alias.scope !30
  %682 = bitcast float* %675 to <4 x i32>*
  store <4 x i32> %678, <4 x i32>* %682, align 4, !alias.scope !33, !noalias !30
  %683 = getelementptr float, float* %675, i64 4
  %684 = bitcast float* %683 to <4 x i32>*
  store <4 x i32> %681, <4 x i32>* %684, align 4, !alias.scope !33, !noalias !30
  %685 = add i64 %673, 8
  %686 = add i64 %674, -1
  %687 = icmp eq i64 %686, 0
  br i1 %687, label %688, label %672, !llvm.loop !36

688:                                              ; preds = %672, %669
  %689 = icmp eq i64 %592, %609
  br i1 %689, label %765, label %690

690:                                              ; preds = %688, %594, %587
  %691 = phi float* [ %398, %594 ], [ %398, %587 ], [ %610, %688 ]
  %692 = phi float* [ %398, %594 ], [ %398, %587 ], [ %611, %688 ]
  %693 = phi float* [ %1, %594 ], [ %1, %587 ], [ %612, %688 ]
  %694 = ptrtoint float* %693 to i64
  %695 = getelementptr float, float* %585, i64 -1
  %696 = ptrtoint float* %695 to i64
  %697 = sub i64 %696, %694
  %698 = lshr i64 %697, 2
  %699 = add nuw nsw i64 %698, 1
  %700 = and i64 %699, 7
  %701 = icmp eq i64 %700, 0
  br i1 %701, label %714, label %702

702:                                              ; preds = %690, %702
  %703 = phi float* [ %711, %702 ], [ %691, %690 ]
  %704 = phi float* [ %711, %702 ], [ %692, %690 ]
  %705 = phi float* [ %710, %702 ], [ %693, %690 ]
  %706 = phi i64 [ %712, %702 ], [ %700, %690 ]
  %707 = bitcast float* %704 to i32*
  %708 = bitcast float* %705 to i32*
  %709 = load i32, i32* %708, align 4
  store i32 %709, i32* %707, align 4
  %710 = getelementptr inbounds float, float* %705, i64 1
  %711 = getelementptr inbounds float, float* %703, i64 1
  %712 = add i64 %706, -1
  %713 = icmp eq i64 %712, 0
  br i1 %713, label %714, label %702, !llvm.loop !37

714:                                              ; preds = %702, %690
  %715 = phi float* [ undef, %690 ], [ %711, %702 ]
  %716 = phi float* [ %691, %690 ], [ %711, %702 ]
  %717 = phi float* [ %692, %690 ], [ %711, %702 ]
  %718 = phi float* [ %693, %690 ], [ %710, %702 ]
  %719 = icmp ult i64 %697, 28
  br i1 %719, label %765, label %720

720:                                              ; preds = %714, %720
  %721 = phi float* [ %763, %720 ], [ %716, %714 ]
  %722 = phi float* [ %763, %720 ], [ %717, %714 ]
  %723 = phi float* [ %762, %720 ], [ %718, %714 ]
  %724 = bitcast float* %722 to i32*
  %725 = bitcast float* %723 to i32*
  %726 = load i32, i32* %725, align 4
  store i32 %726, i32* %724, align 4
  %727 = getelementptr inbounds float, float* %723, i64 1
  %728 = getelementptr inbounds float, float* %721, i64 1
  %729 = bitcast float* %728 to i32*
  %730 = bitcast float* %727 to i32*
  %731 = load i32, i32* %730, align 4
  store i32 %731, i32* %729, align 4
  %732 = getelementptr inbounds float, float* %723, i64 2
  %733 = getelementptr inbounds float, float* %721, i64 2
  %734 = bitcast float* %733 to i32*
  %735 = bitcast float* %732 to i32*
  %736 = load i32, i32* %735, align 4
  store i32 %736, i32* %734, align 4
  %737 = getelementptr inbounds float, float* %723, i64 3
  %738 = getelementptr inbounds float, float* %721, i64 3
  %739 = bitcast float* %738 to i32*
  %740 = bitcast float* %737 to i32*
  %741 = load i32, i32* %740, align 4
  store i32 %741, i32* %739, align 4
  %742 = getelementptr inbounds float, float* %723, i64 4
  %743 = getelementptr inbounds float, float* %721, i64 4
  %744 = bitcast float* %743 to i32*
  %745 = bitcast float* %742 to i32*
  %746 = load i32, i32* %745, align 4
  store i32 %746, i32* %744, align 4
  %747 = getelementptr inbounds float, float* %723, i64 5
  %748 = getelementptr inbounds float, float* %721, i64 5
  %749 = bitcast float* %748 to i32*
  %750 = bitcast float* %747 to i32*
  %751 = load i32, i32* %750, align 4
  store i32 %751, i32* %749, align 4
  %752 = getelementptr inbounds float, float* %723, i64 6
  %753 = getelementptr inbounds float, float* %721, i64 6
  %754 = bitcast float* %753 to i32*
  %755 = bitcast float* %752 to i32*
  %756 = load i32, i32* %755, align 4
  store i32 %756, i32* %754, align 4
  %757 = getelementptr inbounds float, float* %723, i64 7
  %758 = getelementptr inbounds float, float* %721, i64 7
  %759 = bitcast float* %758 to i32*
  %760 = bitcast float* %757 to i32*
  %761 = load i32, i32* %760, align 4
  store i32 %761, i32* %759, align 4
  %762 = getelementptr inbounds float, float* %723, i64 8
  %763 = getelementptr inbounds float, float* %721, i64 8
  %764 = icmp eq float* %762, %585
  br i1 %764, label %765, label %720, !llvm.loop !38

765:                                              ; preds = %714, %720, %688, %584
  %766 = phi float* [ %398, %584 ], [ %610, %688 ], [ %715, %714 ], [ %763, %720 ]
  %767 = ptrtoint float* %766 to i64
  %768 = load float*, float** %9, align 8
  store i64 %579, i64* %360, align 8
  store i64 %767, i64* %24, align 8
  store i64 %397, i64* %16, align 8
  %769 = icmp eq float* %768, null
  br i1 %769, label %772, label %770

770:                                              ; preds = %765
  %771 = bitcast float* %768 to i8*
  tail call void @_ZdlPv(i8* %771) #10
  br label %772

772:                                              ; preds = %770, %765, %209, %354, %358, %4
  %773 = phi float* [ %1, %4 ], [ %1, %358 ], [ %1, %354 ], [ %1, %209 ], [ %395, %765 ], [ %395, %770 ]
  ret float* %773
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_Z10cvCalcEMD2PKvS0_iPFfPKfS2_PvES0_S3_PfS3_(i8* nocapture readonly, i8* nocapture readonly, i32, float (float*, float*, i8*)* nocapture readnone, i8* nocapture readnone, i8* nocapture readnone, float*, i8* nocapture readnone) local_unnamed_addr #0 {
  %9 = alloca %struct.CvNode1D, align 8
  %10 = alloca %struct.CvNode1D, align 8
  %11 = alloca %struct.CvNode1D, align 8
  %12 = alloca %struct.CvNode1D, align 8
  %13 = alloca %struct.CvNode2D, align 8
  %14 = alloca %"class.std::__1::vector.9", align 8
  %15 = alloca %"class.std::__1::vector", align 8
  %16 = alloca %"class.std::__1::vector", align 8
  %17 = bitcast %"class.std::__1::vector.9"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #8
  %18 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %14, i64 0, i32 0, i32 0
  %19 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %14, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 0, i64 24, i1 false) #8
  %20 = bitcast i8* %0 to %"struct.opencv::PointDistribution"*
  %21 = bitcast i8* %1 to %"struct.opencv::PointDistribution"*
  %22 = getelementptr inbounds i8, i8* %0, i64 24
  %23 = bitcast i8* %22 to i32*
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 32
  %26 = getelementptr inbounds i8, i8* %0, i64 40
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = bitcast i8* %25 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %28, %30
  %32 = sdiv exact i64 %31, 24
  %33 = trunc i64 %32 to i32
  %34 = getelementptr inbounds i8, i8* %1, i64 32
  %35 = getelementptr inbounds i8, i8* %1, i64 40
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast i8* %34 to i64*
  %39 = load i64, i64* %38, align 8
  %40 = sub i64 %37, %39
  %41 = sdiv exact i64 %40, 24
  %42 = trunc i64 %41 to i32
  %43 = bitcast %"class.std::__1::vector"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #8
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 0
  %45 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %15, i64 0, i32 0, i32 1
  %46 = bitcast %"class.std::__1::vector"* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %46, i8 -86, i64 24, i1 false)
  call void @_Z28GetDataFromPointDistributionRKN6opencv17PointDistributionE(%"class.std::__1::vector"* nonnull sret %15, %"struct.opencv::PointDistribution"* dereferenceable(56) %20)
  %47 = bitcast %"class.std::__1::vector"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %47) #8
  %48 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  %49 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 1
  %50 = bitcast %"class.std::__1::vector"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %50, i8 -86, i64 24, i1 false)
  call void @_Z28GetDataFromPointDistributionRKN6opencv17PointDistributionE(%"class.std::__1::vector"* nonnull sret %16, %"struct.opencv::PointDistribution"* dereferenceable(56) %21)
  %51 = sext i32 %24 to i64
  %52 = load float*, float** %44, align 8
  %53 = load float*, float** %48, align 8
  %54 = add nsw i32 %33, 1
  %55 = add nsw i32 %42, 1
  %56 = mul i32 %55, 9
  %57 = add nsw i32 %42, %33
  %58 = mul i32 %57, 72
  %59 = sext i32 %54 to i64
  %60 = add i32 %56, 24
  %61 = mul i32 %60, %54
  %62 = add i32 %58, 400
  %63 = add i32 %62, %61
  %64 = shl i32 %24, 3
  %65 = icmp slt i32 %63, %64
  %66 = select i1 %65, i32 %64, i32 %63
  %67 = sext i32 %66 to i64
  %68 = bitcast i8** %19 to i64*
  %69 = icmp eq i32 %66, 0
  br i1 %69, label %73, label %70

70:                                               ; preds = %8
  call void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector.9"* nonnull %14, i64 %67) #8
  %71 = load i8*, i8** %18, align 8
  %72 = bitcast i8* %71 to i32*
  br label %73

73:                                               ; preds = %8, %70
  %74 = phi i32* [ %72, %70 ], [ null, %8 ]
  %75 = phi i8* [ %71, %70 ], [ null, %8 ]
  %76 = getelementptr inbounds i8, i8* %75, i64 %67
  %77 = shl nsw i64 %59, 2
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  %79 = bitcast i8* %78 to i32*
  %80 = sext i32 %55 to i64
  %81 = shl nsw i64 %80, 2
  %82 = getelementptr inbounds i8, i8* %78, i64 %81
  %83 = bitcast i8* %82 to float*
  %84 = getelementptr inbounds i8, i8* %82, i64 %77
  %85 = bitcast i8* %84 to float*
  %86 = getelementptr inbounds i8, i8* %84, i64 %81
  %87 = icmp sgt i32 %33, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %73
  %89 = add nsw i32 %24, 1
  %90 = sext i32 %89 to i64
  %91 = and i64 %32, 4294967295
  br label %100

92:                                               ; preds = %118, %73
  %93 = phi float [ 0.000000e+00, %73 ], [ %119, %118 ]
  %94 = phi i32 [ 0, %73 ], [ %120, %118 ]
  %95 = icmp sgt i32 %42, 0
  br i1 %95, label %96, label %146

96:                                               ; preds = %92
  %97 = add nsw i32 %24, 1
  %98 = sext i32 %97 to i64
  %99 = and i64 %41, 4294967295
  br label %123

100:                                              ; preds = %118, %88
  %101 = phi i64 [ 0, %88 ], [ %121, %118 ]
  %102 = phi i32 [ 0, %88 ], [ %120, %118 ]
  %103 = phi float [ 0.000000e+00, %88 ], [ %119, %118 ]
  %104 = mul nsw i64 %101, %90
  %105 = getelementptr inbounds float, float* %52, i64 %104
  %106 = load float, float* %105, align 4
  %107 = fcmp ogt float %106, 0.000000e+00
  br i1 %107, label %108, label %115

108:                                              ; preds = %100
  %109 = fadd float %103, %106
  %110 = sext i32 %102 to i64
  %111 = getelementptr inbounds float, float* %83, i64 %110
  store float %106, float* %111, align 4
  %112 = add nsw i32 %102, 1
  %113 = getelementptr inbounds i32, i32* %74, i64 %110
  %114 = trunc i64 %101 to i32
  store i32 %114, i32* %113, align 4
  br label %118

115:                                              ; preds = %100
  %116 = fcmp olt float %106, 0.000000e+00
  br i1 %116, label %117, label %118

117:                                              ; preds = %115
  call void @abort() #9
  unreachable

118:                                              ; preds = %115, %108
  %119 = phi float [ %109, %108 ], [ %103, %115 ]
  %120 = phi i32 [ %112, %108 ], [ %102, %115 ]
  %121 = add nuw nsw i64 %101, 1
  %122 = icmp eq i64 %121, %91
  br i1 %122, label %92, label %100

123:                                              ; preds = %141, %96
  %124 = phi i64 [ 0, %96 ], [ %144, %141 ]
  %125 = phi i32 [ 0, %96 ], [ %143, %141 ]
  %126 = phi float [ 0.000000e+00, %96 ], [ %142, %141 ]
  %127 = mul nsw i64 %124, %98
  %128 = getelementptr inbounds float, float* %53, i64 %127
  %129 = load float, float* %128, align 4
  %130 = fcmp ogt float %129, 0.000000e+00
  br i1 %130, label %131, label %138

131:                                              ; preds = %123
  %132 = fadd float %126, %129
  %133 = sext i32 %125 to i64
  %134 = getelementptr inbounds float, float* %85, i64 %133
  store float %129, float* %134, align 4
  %135 = add nsw i32 %125, 1
  %136 = getelementptr inbounds i32, i32* %79, i64 %133
  %137 = trunc i64 %124 to i32
  store i32 %137, i32* %136, align 4
  br label %141

138:                                              ; preds = %123
  %139 = fcmp olt float %129, 0.000000e+00
  br i1 %139, label %140, label %141

140:                                              ; preds = %138
  call void @abort() #9
  unreachable

141:                                              ; preds = %138, %131
  %142 = phi float [ %132, %131 ], [ %126, %138 ]
  %143 = phi i32 [ %135, %131 ], [ %125, %138 ]
  %144 = add nuw nsw i64 %124, 1
  %145 = icmp eq i64 %144, %99
  br i1 %145, label %146, label %123

146:                                              ; preds = %141, %92
  %147 = phi float [ 0.000000e+00, %92 ], [ %142, %141 ]
  %148 = phi i32 [ 0, %92 ], [ %143, %141 ]
  %149 = icmp eq i32 %94, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %146
  call void @abort() #9
  unreachable

151:                                              ; preds = %146
  %152 = icmp eq i32 %148, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %151
  call void @abort() #9
  unreachable

154:                                              ; preds = %151
  %155 = fsub float %93, %147
  %156 = call float @llvm.fabs.f32(float %155) #8
  %157 = fmul float %93, 0x3EE4F8B580000000
  %158 = fcmp ult float %156, %157
  br i1 %158, label %178, label %159

159:                                              ; preds = %154
  %160 = fcmp olt float %155, 0.000000e+00
  br i1 %160, label %161, label %167

161:                                              ; preds = %159
  %162 = fsub float -0.000000e+00, %155
  %163 = sext i32 %94 to i64
  %164 = getelementptr inbounds float, float* %83, i64 %163
  store float %162, float* %164, align 4
  %165 = add nsw i32 %94, 1
  %166 = getelementptr inbounds i32, i32* %74, i64 %163
  br label %172

167:                                              ; preds = %159
  %168 = sext i32 %148 to i64
  %169 = getelementptr inbounds float, float* %85, i64 %168
  store float %155, float* %169, align 4
  %170 = add nsw i32 %148, 1
  %171 = getelementptr inbounds i32, i32* %79, i64 %168
  br label %172

172:                                              ; preds = %161, %167
  %173 = phi i32* [ %166, %161 ], [ %171, %167 ]
  %174 = phi i32 [ %165, %161 ], [ %94, %167 ]
  %175 = phi i32 [ %148, %161 ], [ %170, %167 ]
  store i32 -1, i32* %173, align 4
  %176 = fcmp ogt float %93, %147
  %177 = select i1 %176, float %93, float %147
  br label %489

178:                                              ; preds = %154
  %179 = fcmp ogt float %93, %147
  %180 = select i1 %179, float %93, float %147
  %181 = icmp eq float* %6, null
  br i1 %181, label %489, label %182

182:                                              ; preds = %178
  %183 = add i32 %24, 1
  %184 = mul nsw i32 %183, %33
  %185 = mul nsw i32 %183, %42
  %186 = bitcast i8* %86 to float*
  %187 = getelementptr inbounds float, float* %186, i64 %51
  %188 = shl nsw i64 %51, 2
  call void @llvm.memset.p0i8.i64(i8* align 4 %86, i8 0, i64 %188, i1 false) #8
  %189 = bitcast float* %187 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %189, i8 0, i64 %188, i1 false) #8
  %190 = icmp sgt i32 %184, 0
  br i1 %190, label %191, label %211

191:                                              ; preds = %182
  %192 = icmp sgt i32 %24, 0
  %193 = sext i32 %183 to i64
  %194 = sext i32 %184 to i64
  %195 = zext i32 %24 to i64
  %196 = add nsw i64 %195, -1
  %197 = add nsw i64 %80, %59
  %198 = shl nsw i64 %197, 3
  %199 = shl nuw nsw i64 %195, 2
  %200 = add nsw i64 %198, %199
  %201 = getelementptr i8, i8* %75, i64 %200
  %202 = getelementptr float, float* %52, i64 %195
  %203 = icmp ult i32 %24, 8
  %204 = trunc i64 %196 to i32
  %205 = icmp ugt i64 %196, 4294967295
  %206 = and i64 %195, 4294967288
  %207 = icmp eq i64 %206, %195
  %208 = and i64 %195, 1
  %209 = icmp eq i64 %208, 0
  %210 = sub nsw i64 0, %195
  br label %236

211:                                              ; preds = %331, %182
  %212 = icmp sgt i32 %185, 0
  br i1 %212, label %213, label %434

213:                                              ; preds = %211
  %214 = icmp sgt i32 %24, 0
  %215 = sext i32 %183 to i64
  %216 = sext i32 %185 to i64
  %217 = zext i32 %24 to i64
  %218 = add nsw i64 %217, -1
  %219 = add nsw i64 %80, %59
  %220 = shl nsw i64 %219, 3
  %221 = shl nsw i64 %51, 2
  %222 = add nsw i64 %220, %221
  %223 = getelementptr i8, i8* %75, i64 %222
  %224 = shl nuw nsw i64 %217, 2
  %225 = add nsw i64 %222, %224
  %226 = getelementptr i8, i8* %75, i64 %225
  %227 = getelementptr float, float* %53, i64 %217
  %228 = icmp ult i32 %24, 8
  %229 = trunc i64 %218 to i32
  %230 = icmp ugt i64 %218, 4294967295
  %231 = and i64 %217, 4294967288
  %232 = icmp eq i64 %231, %217
  %233 = and i64 %217, 1
  %234 = icmp eq i64 %233, 0
  %235 = sub nsw i64 0, %217
  br label %335

236:                                              ; preds = %331, %191
  %237 = phi i32 [ %334, %331 ], [ 0, %191 ]
  %238 = phi i64 [ %332, %331 ], [ 0, %191 ]
  %239 = mul i32 %183, %237
  %240 = add i32 %239, 1
  %241 = sext i32 %240 to i64
  %242 = getelementptr float, float* %52, i64 %241
  %243 = bitcast float* %242 to i8*
  %244 = getelementptr float, float* %202, i64 %241
  %245 = bitcast float* %244 to i8*
  %246 = mul i32 %183, %237
  %247 = add i32 %246, 1
  %248 = getelementptr inbounds float, float* %52, i64 %238
  %249 = load float, float* %248, align 4
  br i1 %192, label %250, label %331

250:                                              ; preds = %236
  br i1 %203, label %291, label %251

251:                                              ; preds = %250
  %252 = add i32 %247, %204
  %253 = icmp slt i32 %252, %247
  %254 = or i1 %253, %205
  br i1 %254, label %291, label %255

255:                                              ; preds = %251
  %256 = icmp ult i8* %86, %245
  %257 = icmp ugt i8* %201, %243
  %258 = and i1 %256, %257
  br i1 %258, label %291, label %259

259:                                              ; preds = %255
  %260 = insertelement <4 x float> undef, float %249, i32 0
  %261 = shufflevector <4 x float> %260, <4 x float> undef, <4 x i32> zeroinitializer
  %262 = insertelement <4 x float> undef, float %249, i32 0
  %263 = shufflevector <4 x float> %262, <4 x float> undef, <4 x i32> zeroinitializer
  br label %264

264:                                              ; preds = %264, %259
  %265 = phi i64 [ 0, %259 ], [ %288, %264 ]
  %266 = or i64 %265, 1
  %267 = add i64 %266, %238
  %268 = shl i64 %267, 32
  %269 = ashr exact i64 %268, 32
  %270 = getelementptr inbounds float, float* %52, i64 %269
  %271 = bitcast float* %270 to <4 x float>*
  %272 = load <4 x float>, <4 x float>* %271, align 4, !alias.scope !39
  %273 = getelementptr inbounds float, float* %270, i64 4
  %274 = bitcast float* %273 to <4 x float>*
  %275 = load <4 x float>, <4 x float>* %274, align 4, !alias.scope !39
  %276 = fmul <4 x float> %261, %272
  %277 = fmul <4 x float> %263, %275
  %278 = getelementptr inbounds float, float* %186, i64 %265
  %279 = bitcast float* %278 to <4 x float>*
  %280 = load <4 x float>, <4 x float>* %279, align 4, !alias.scope !42, !noalias !39
  %281 = getelementptr inbounds float, float* %278, i64 4
  %282 = bitcast float* %281 to <4 x float>*
  %283 = load <4 x float>, <4 x float>* %282, align 4, !alias.scope !42, !noalias !39
  %284 = fadd <4 x float> %280, %276
  %285 = fadd <4 x float> %283, %277
  %286 = bitcast float* %278 to <4 x float>*
  store <4 x float> %284, <4 x float>* %286, align 4, !alias.scope !42, !noalias !39
  %287 = bitcast float* %281 to <4 x float>*
  store <4 x float> %285, <4 x float>* %287, align 4, !alias.scope !42, !noalias !39
  %288 = add i64 %265, 8
  %289 = icmp eq i64 %288, %206
  br i1 %289, label %290, label %264, !llvm.loop !44

290:                                              ; preds = %264
  br i1 %207, label %331, label %291

291:                                              ; preds = %290, %255, %251, %250
  %292 = phi i64 [ 0, %255 ], [ 0, %251 ], [ 0, %250 ], [ %206, %290 ]
  %293 = xor i64 %292, -1
  br i1 %209, label %305, label %294

294:                                              ; preds = %291
  %295 = or i64 %292, 1
  %296 = add i64 %295, %238
  %297 = shl i64 %296, 32
  %298 = ashr exact i64 %297, 32
  %299 = getelementptr inbounds float, float* %52, i64 %298
  %300 = load float, float* %299, align 4
  %301 = fmul float %249, %300
  %302 = getelementptr inbounds float, float* %186, i64 %292
  %303 = load float, float* %302, align 4
  %304 = fadd float %303, %301
  store float %304, float* %302, align 4
  br label %305

305:                                              ; preds = %294, %291
  %306 = phi i64 [ %295, %294 ], [ %292, %291 ]
  %307 = icmp eq i64 %293, %210
  br i1 %307, label %331, label %308

308:                                              ; preds = %305, %308
  %309 = phi i64 [ %320, %308 ], [ %306, %305 ]
  %310 = add nuw nsw i64 %309, 1
  %311 = add i64 %310, %238
  %312 = shl i64 %311, 32
  %313 = ashr exact i64 %312, 32
  %314 = getelementptr inbounds float, float* %52, i64 %313
  %315 = load float, float* %314, align 4
  %316 = fmul float %249, %315
  %317 = getelementptr inbounds float, float* %186, i64 %309
  %318 = load float, float* %317, align 4
  %319 = fadd float %318, %316
  store float %319, float* %317, align 4
  %320 = add nuw nsw i64 %309, 2
  %321 = add i64 %320, %238
  %322 = shl i64 %321, 32
  %323 = ashr exact i64 %322, 32
  %324 = getelementptr inbounds float, float* %52, i64 %323
  %325 = load float, float* %324, align 4
  %326 = fmul float %249, %325
  %327 = getelementptr inbounds float, float* %186, i64 %310
  %328 = load float, float* %327, align 4
  %329 = fadd float %328, %326
  store float %329, float* %327, align 4
  %330 = icmp eq i64 %320, %195
  br i1 %330, label %331, label %308, !llvm.loop !45

331:                                              ; preds = %305, %308, %290, %236
  %332 = add i64 %238, %193
  %333 = icmp slt i64 %332, %194
  %334 = add i32 %237, 1
  br i1 %333, label %236, label %211

335:                                              ; preds = %430, %213
  %336 = phi i32 [ %433, %430 ], [ 0, %213 ]
  %337 = phi i64 [ %431, %430 ], [ 0, %213 ]
  %338 = mul i32 %183, %336
  %339 = add i32 %338, 1
  %340 = sext i32 %339 to i64
  %341 = getelementptr float, float* %53, i64 %340
  %342 = bitcast float* %341 to i8*
  %343 = getelementptr float, float* %227, i64 %340
  %344 = bitcast float* %343 to i8*
  %345 = mul i32 %183, %336
  %346 = add i32 %345, 1
  %347 = getelementptr inbounds float, float* %53, i64 %337
  %348 = load float, float* %347, align 4
  br i1 %214, label %349, label %430

349:                                              ; preds = %335
  br i1 %228, label %390, label %350

350:                                              ; preds = %349
  %351 = add i32 %346, %229
  %352 = icmp slt i32 %351, %346
  %353 = or i1 %352, %230
  br i1 %353, label %390, label %354

354:                                              ; preds = %350
  %355 = icmp ult i8* %223, %344
  %356 = icmp ugt i8* %226, %342
  %357 = and i1 %355, %356
  br i1 %357, label %390, label %358

358:                                              ; preds = %354
  %359 = insertelement <4 x float> undef, float %348, i32 0
  %360 = shufflevector <4 x float> %359, <4 x float> undef, <4 x i32> zeroinitializer
  %361 = insertelement <4 x float> undef, float %348, i32 0
  %362 = shufflevector <4 x float> %361, <4 x float> undef, <4 x i32> zeroinitializer
  br label %363

363:                                              ; preds = %363, %358
  %364 = phi i64 [ 0, %358 ], [ %387, %363 ]
  %365 = or i64 %364, 1
  %366 = add i64 %365, %337
  %367 = shl i64 %366, 32
  %368 = ashr exact i64 %367, 32
  %369 = getelementptr inbounds float, float* %53, i64 %368
  %370 = bitcast float* %369 to <4 x float>*
  %371 = load <4 x float>, <4 x float>* %370, align 4, !alias.scope !46
  %372 = getelementptr inbounds float, float* %369, i64 4
  %373 = bitcast float* %372 to <4 x float>*
  %374 = load <4 x float>, <4 x float>* %373, align 4, !alias.scope !46
  %375 = fmul <4 x float> %360, %371
  %376 = fmul <4 x float> %362, %374
  %377 = getelementptr inbounds float, float* %187, i64 %364
  %378 = bitcast float* %377 to <4 x float>*
  %379 = load <4 x float>, <4 x float>* %378, align 4, !alias.scope !49, !noalias !46
  %380 = getelementptr inbounds float, float* %377, i64 4
  %381 = bitcast float* %380 to <4 x float>*
  %382 = load <4 x float>, <4 x float>* %381, align 4, !alias.scope !49, !noalias !46
  %383 = fadd <4 x float> %379, %375
  %384 = fadd <4 x float> %382, %376
  %385 = bitcast float* %377 to <4 x float>*
  store <4 x float> %383, <4 x float>* %385, align 4, !alias.scope !49, !noalias !46
  %386 = bitcast float* %380 to <4 x float>*
  store <4 x float> %384, <4 x float>* %386, align 4, !alias.scope !49, !noalias !46
  %387 = add i64 %364, 8
  %388 = icmp eq i64 %387, %231
  br i1 %388, label %389, label %363, !llvm.loop !51

389:                                              ; preds = %363
  br i1 %232, label %430, label %390

390:                                              ; preds = %389, %354, %350, %349
  %391 = phi i64 [ 0, %354 ], [ 0, %350 ], [ 0, %349 ], [ %231, %389 ]
  %392 = xor i64 %391, -1
  br i1 %234, label %404, label %393

393:                                              ; preds = %390
  %394 = or i64 %391, 1
  %395 = add i64 %394, %337
  %396 = shl i64 %395, 32
  %397 = ashr exact i64 %396, 32
  %398 = getelementptr inbounds float, float* %53, i64 %397
  %399 = load float, float* %398, align 4
  %400 = fmul float %348, %399
  %401 = getelementptr inbounds float, float* %187, i64 %391
  %402 = load float, float* %401, align 4
  %403 = fadd float %402, %400
  store float %403, float* %401, align 4
  br label %404

404:                                              ; preds = %393, %390
  %405 = phi i64 [ %394, %393 ], [ %391, %390 ]
  %406 = icmp eq i64 %392, %235
  br i1 %406, label %430, label %407

407:                                              ; preds = %404, %407
  %408 = phi i64 [ %419, %407 ], [ %405, %404 ]
  %409 = add nuw nsw i64 %408, 1
  %410 = add i64 %409, %337
  %411 = shl i64 %410, 32
  %412 = ashr exact i64 %411, 32
  %413 = getelementptr inbounds float, float* %53, i64 %412
  %414 = load float, float* %413, align 4
  %415 = fmul float %348, %414
  %416 = getelementptr inbounds float, float* %187, i64 %408
  %417 = load float, float* %416, align 4
  %418 = fadd float %417, %415
  store float %418, float* %416, align 4
  %419 = add nuw nsw i64 %408, 2
  %420 = add i64 %419, %337
  %421 = shl i64 %420, 32
  %422 = ashr exact i64 %421, 32
  %423 = getelementptr inbounds float, float* %53, i64 %422
  %424 = load float, float* %423, align 4
  %425 = fmul float %348, %424
  %426 = getelementptr inbounds float, float* %187, i64 %409
  %427 = load float, float* %426, align 4
  %428 = fadd float %427, %425
  store float %428, float* %426, align 4
  %429 = icmp eq i64 %419, %217
  br i1 %429, label %430, label %407, !llvm.loop !52

430:                                              ; preds = %404, %407, %389, %335
  %431 = add i64 %337, %215
  %432 = icmp slt i64 %431, %216
  %433 = add i32 %336, 1
  br i1 %432, label %335, label %434

434:                                              ; preds = %430, %211
  %435 = icmp sgt i32 %24, 0
  br i1 %435, label %436, label %483

436:                                              ; preds = %434
  %437 = and i64 %51, 4294967295
  %438 = and i64 %51, 1
  %439 = icmp eq i64 %437, 1
  br i1 %439, label %466, label %440

440:                                              ; preds = %436
  %441 = sub nsw i64 %437, %438
  br label %442

442:                                              ; preds = %442, %440
  %443 = phi i64 [ 0, %440 ], [ %463, %442 ]
  %444 = phi double [ 0.000000e+00, %440 ], [ %462, %442 ]
  %445 = phi i64 [ %441, %440 ], [ %464, %442 ]
  %446 = getelementptr inbounds float, float* %186, i64 %443
  %447 = load float, float* %446, align 4
  %448 = getelementptr inbounds float, float* %187, i64 %443
  %449 = load float, float* %448, align 4
  %450 = fsub float %447, %449
  %451 = fpext float %450 to double
  %452 = fmul double %451, %451
  %453 = fadd double %444, %452
  %454 = or i64 %443, 1
  %455 = getelementptr inbounds float, float* %186, i64 %454
  %456 = load float, float* %455, align 4
  %457 = getelementptr inbounds float, float* %187, i64 %454
  %458 = load float, float* %457, align 4
  %459 = fsub float %456, %458
  %460 = fpext float %459 to double
  %461 = fmul double %460, %460
  %462 = fadd double %453, %461
  %463 = add nuw nsw i64 %443, 2
  %464 = add i64 %445, -2
  %465 = icmp eq i64 %464, 0
  br i1 %465, label %466, label %442

466:                                              ; preds = %442, %436
  %467 = phi double [ undef, %436 ], [ %462, %442 ]
  %468 = phi i64 [ 0, %436 ], [ %463, %442 ]
  %469 = phi double [ 0.000000e+00, %436 ], [ %462, %442 ]
  %470 = icmp eq i64 %438, 0
  br i1 %470, label %480, label %471

471:                                              ; preds = %466
  %472 = getelementptr inbounds float, float* %186, i64 %468
  %473 = load float, float* %472, align 4
  %474 = getelementptr inbounds float, float* %187, i64 %468
  %475 = load float, float* %474, align 4
  %476 = fsub float %473, %475
  %477 = fpext float %476 to double
  %478 = fmul double %477, %477
  %479 = fadd double %469, %478
  br label %480

480:                                              ; preds = %466, %471
  %481 = phi double [ %467, %466 ], [ %479, %471 ]
  %482 = fptrunc double %481 to float
  br label %483

483:                                              ; preds = %480, %434
  %484 = phi float [ 0.000000e+00, %434 ], [ %482, %480 ]
  %485 = call float @sqrtf(float %484) #8
  %486 = fdiv float %485, %180
  %487 = load float, float* %6, align 4
  %488 = fcmp ugt float %487, %486
  store float %486, float* %6, align 4
  br i1 %488, label %489, label %1977

489:                                              ; preds = %178, %172, %483
  %490 = phi float [ %177, %172 ], [ %180, %483 ], [ %180, %178 ]
  %491 = phi i32 [ %175, %172 ], [ %148, %483 ], [ %148, %178 ]
  %492 = phi i32 [ %174, %172 ], [ %94, %483 ], [ %94, %178 ]
  %493 = bitcast i8* %86 to float**
  %494 = sext i32 %492 to i64
  %495 = shl nsw i64 %494, 3
  %496 = getelementptr inbounds i8, i8* %86, i64 %495
  %497 = icmp sgt i32 %492, 0
  %498 = sext i32 %491 to i64
  br i1 %497, label %499, label %560

499:                                              ; preds = %489
  %500 = shl nsw i64 %498, 2
  %501 = zext i32 %492 to i64
  %502 = add nsw i64 %501, -1
  %503 = and i64 %501, 7
  %504 = icmp ult i64 %502, 7
  br i1 %504, label %545, label %505

505:                                              ; preds = %499
  %506 = sub nsw i64 %501, %503
  br label %507

507:                                              ; preds = %507, %505
  %508 = phi i64 [ 0, %505 ], [ %542, %507 ]
  %509 = phi i8* [ %496, %505 ], [ %541, %507 ]
  %510 = phi i64 [ %506, %505 ], [ %543, %507 ]
  %511 = getelementptr inbounds float*, float** %493, i64 %508
  %512 = bitcast float** %511 to i8**
  store i8* %509, i8** %512, align 8
  %513 = getelementptr inbounds i8, i8* %509, i64 %500
  %514 = or i64 %508, 1
  %515 = getelementptr inbounds float*, float** %493, i64 %514
  %516 = bitcast float** %515 to i8**
  store i8* %513, i8** %516, align 8
  %517 = getelementptr inbounds i8, i8* %513, i64 %500
  %518 = or i64 %508, 2
  %519 = getelementptr inbounds float*, float** %493, i64 %518
  %520 = bitcast float** %519 to i8**
  store i8* %517, i8** %520, align 8
  %521 = getelementptr inbounds i8, i8* %517, i64 %500
  %522 = or i64 %508, 3
  %523 = getelementptr inbounds float*, float** %493, i64 %522
  %524 = bitcast float** %523 to i8**
  store i8* %521, i8** %524, align 8
  %525 = getelementptr inbounds i8, i8* %521, i64 %500
  %526 = or i64 %508, 4
  %527 = getelementptr inbounds float*, float** %493, i64 %526
  %528 = bitcast float** %527 to i8**
  store i8* %525, i8** %528, align 8
  %529 = getelementptr inbounds i8, i8* %525, i64 %500
  %530 = or i64 %508, 5
  %531 = getelementptr inbounds float*, float** %493, i64 %530
  %532 = bitcast float** %531 to i8**
  store i8* %529, i8** %532, align 8
  %533 = getelementptr inbounds i8, i8* %529, i64 %500
  %534 = or i64 %508, 6
  %535 = getelementptr inbounds float*, float** %493, i64 %534
  %536 = bitcast float** %535 to i8**
  store i8* %533, i8** %536, align 8
  %537 = getelementptr inbounds i8, i8* %533, i64 %500
  %538 = or i64 %508, 7
  %539 = getelementptr inbounds float*, float** %493, i64 %538
  %540 = bitcast float** %539 to i8**
  store i8* %537, i8** %540, align 8
  %541 = getelementptr inbounds i8, i8* %537, i64 %500
  %542 = add nuw nsw i64 %508, 8
  %543 = add i64 %510, -8
  %544 = icmp eq i64 %543, 0
  br i1 %544, label %545, label %507

545:                                              ; preds = %507, %499
  %546 = phi i8* [ undef, %499 ], [ %541, %507 ]
  %547 = phi i64 [ 0, %499 ], [ %542, %507 ]
  %548 = phi i8* [ %496, %499 ], [ %541, %507 ]
  %549 = icmp eq i64 %503, 0
  br i1 %549, label %560, label %550

550:                                              ; preds = %545, %550
  %551 = phi i64 [ %557, %550 ], [ %547, %545 ]
  %552 = phi i8* [ %556, %550 ], [ %548, %545 ]
  %553 = phi i64 [ %558, %550 ], [ %503, %545 ]
  %554 = getelementptr inbounds float*, float** %493, i64 %551
  %555 = bitcast float** %554 to i8**
  store i8* %552, i8** %555, align 8
  %556 = getelementptr inbounds i8, i8* %552, i64 %500
  %557 = add nuw nsw i64 %551, 1
  %558 = add i64 %553, -1
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %560, label %550, !llvm.loop !53

560:                                              ; preds = %545, %550, %489
  %561 = phi i8* [ %496, %489 ], [ %546, %545 ], [ %556, %550 ]
  %562 = bitcast i8* %561 to %struct.CvNode2D**
  %563 = add nsw i32 %492, %491
  %564 = add nsw i32 %563, 1
  %565 = sext i32 %564 to i64
  %566 = shl nsw i64 %565, 3
  %567 = getelementptr inbounds i8, i8* %561, i64 %566
  %568 = bitcast i8* %567 to %struct.CvNode2D*
  %569 = ptrtoint i8* %567 to i64
  %570 = sext i32 %563 to i64
  %571 = shl nsw i64 %570, 5
  %572 = getelementptr inbounds i8, i8* %567, i64 %571
  %573 = bitcast i8* %572 to float**
  %574 = getelementptr inbounds i8, i8* %572, i64 %495
  br i1 %497, label %575, label %711

575:                                              ; preds = %560
  %576 = shl nsw i64 %498, 2
  %577 = icmp sgt i32 %491, 0
  %578 = add nsw i32 %24, 1
  %579 = getelementptr inbounds float, float* %52, i64 1
  %580 = getelementptr inbounds float, float* %53, i64 1
  %581 = icmp sgt i32 %24, 0
  %582 = and i64 %51, 4294967295
  %583 = zext i32 %492 to i64
  %584 = zext i32 %491 to i64
  %585 = add nsw i64 %584, -1
  %586 = add nsw i64 %584, -2
  %587 = icmp eq i32 %491, 1
  %588 = and i64 %585, 3
  %589 = icmp ult i64 %586, 3
  %590 = sub nsw i64 %585, %588
  %591 = icmp eq i64 %588, 0
  %592 = and i64 %51, 1
  %593 = icmp eq i64 %582, 1
  %594 = sub nsw i64 %582, %592
  %595 = icmp eq i64 %592, 0
  br label %596

596:                                              ; preds = %707, %575
  %597 = phi i64 [ 0, %575 ], [ %709, %707 ]
  %598 = phi i8* [ %574, %575 ], [ %604, %707 ]
  %599 = phi float [ 0.000000e+00, %575 ], [ %708, %707 ]
  %600 = getelementptr inbounds i32, i32* %74, i64 %597
  %601 = load i32, i32* %600, align 4
  %602 = getelementptr inbounds float*, float** %573, i64 %597
  %603 = bitcast float** %602 to i8**
  store i8* %598, i8** %603, align 8
  %604 = getelementptr inbounds i8, i8* %598, i64 %576
  %605 = icmp sgt i32 %601, -1
  br i1 %605, label %610, label %606

606:                                              ; preds = %596
  br i1 %577, label %607, label %707

607:                                              ; preds = %606
  %608 = bitcast i8* %598 to float*
  store float 0.000000e+00, float* %608, align 4
  br i1 %587, label %707, label %609

609:                                              ; preds = %607
  br i1 %589, label %697, label %680

610:                                              ; preds = %596
  br i1 %577, label %611, label %707

611:                                              ; preds = %610
  %612 = mul nsw i32 %601, %578
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds float, float* %579, i64 %613
  br label %615

615:                                              ; preds = %676, %611
  %616 = phi i64 [ 0, %611 ], [ %678, %676 ]
  %617 = phi float [ %599, %611 ], [ %677, %676 ]
  %618 = getelementptr inbounds i32, i32* %79, i64 %616
  %619 = load i32, i32* %618, align 4
  %620 = icmp slt i32 %619, 0
  br i1 %620, label %621, label %624

621:                                              ; preds = %615
  %622 = load float*, float** %602, align 8
  %623 = getelementptr inbounds float, float* %622, i64 %616
  store float 0.000000e+00, float* %623, align 4
  br label %676

624:                                              ; preds = %615
  %625 = mul nsw i32 %619, %578
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds float, float* %580, i64 %626
  br i1 %581, label %628, label %669

628:                                              ; preds = %624
  br i1 %593, label %653, label %629

629:                                              ; preds = %628, %629
  %630 = phi i64 [ %650, %629 ], [ 0, %628 ]
  %631 = phi double [ %649, %629 ], [ 0.000000e+00, %628 ]
  %632 = phi i64 [ %651, %629 ], [ %594, %628 ]
  %633 = getelementptr inbounds float, float* %614, i64 %630
  %634 = load float, float* %633, align 4
  %635 = getelementptr inbounds float, float* %627, i64 %630
  %636 = load float, float* %635, align 4
  %637 = fsub float %634, %636
  %638 = fpext float %637 to double
  %639 = fmul double %638, %638
  %640 = fadd double %631, %639
  %641 = or i64 %630, 1
  %642 = getelementptr inbounds float, float* %614, i64 %641
  %643 = load float, float* %642, align 4
  %644 = getelementptr inbounds float, float* %627, i64 %641
  %645 = load float, float* %644, align 4
  %646 = fsub float %643, %645
  %647 = fpext float %646 to double
  %648 = fmul double %647, %647
  %649 = fadd double %640, %648
  %650 = add nuw nsw i64 %630, 2
  %651 = add i64 %632, -2
  %652 = icmp eq i64 %651, 0
  br i1 %652, label %653, label %629

653:                                              ; preds = %629, %628
  %654 = phi double [ undef, %628 ], [ %649, %629 ]
  %655 = phi i64 [ 0, %628 ], [ %650, %629 ]
  %656 = phi double [ 0.000000e+00, %628 ], [ %649, %629 ]
  br i1 %595, label %666, label %657

657:                                              ; preds = %653
  %658 = getelementptr inbounds float, float* %614, i64 %655
  %659 = load float, float* %658, align 4
  %660 = getelementptr inbounds float, float* %627, i64 %655
  %661 = load float, float* %660, align 4
  %662 = fsub float %659, %661
  %663 = fpext float %662 to double
  %664 = fmul double %663, %663
  %665 = fadd double %656, %664
  br label %666

666:                                              ; preds = %653, %657
  %667 = phi double [ %654, %653 ], [ %665, %657 ]
  %668 = fptrunc double %667 to float
  br label %669

669:                                              ; preds = %666, %624
  %670 = phi float [ 0.000000e+00, %624 ], [ %668, %666 ]
  %671 = call float @sqrtf(float %670) #8
  %672 = load float*, float** %602, align 8
  %673 = getelementptr inbounds float, float* %672, i64 %616
  store float %671, float* %673, align 4
  %674 = fcmp olt float %617, %671
  %675 = select i1 %674, float %671, float %617
  br label %676

676:                                              ; preds = %669, %621
  %677 = phi float [ %617, %621 ], [ %675, %669 ]
  %678 = add nuw nsw i64 %616, 1
  %679 = icmp eq i64 %678, %584
  br i1 %679, label %707, label %615

680:                                              ; preds = %609, %680
  %681 = phi i64 [ %694, %680 ], [ 1, %609 ]
  %682 = phi i64 [ %695, %680 ], [ %590, %609 ]
  %683 = load float*, float** %602, align 8
  %684 = getelementptr inbounds float, float* %683, i64 %681
  store float 0.000000e+00, float* %684, align 4
  %685 = add nuw nsw i64 %681, 1
  %686 = load float*, float** %602, align 8
  %687 = getelementptr inbounds float, float* %686, i64 %685
  store float 0.000000e+00, float* %687, align 4
  %688 = add nuw nsw i64 %681, 2
  %689 = load float*, float** %602, align 8
  %690 = getelementptr inbounds float, float* %689, i64 %688
  store float 0.000000e+00, float* %690, align 4
  %691 = add nuw nsw i64 %681, 3
  %692 = load float*, float** %602, align 8
  %693 = getelementptr inbounds float, float* %692, i64 %691
  store float 0.000000e+00, float* %693, align 4
  %694 = add nuw nsw i64 %681, 4
  %695 = add i64 %682, -4
  %696 = icmp eq i64 %695, 0
  br i1 %696, label %697, label %680

697:                                              ; preds = %680, %609
  %698 = phi i64 [ 1, %609 ], [ %694, %680 ]
  br i1 %591, label %707, label %699

699:                                              ; preds = %697, %699
  %700 = phi i64 [ %704, %699 ], [ %698, %697 ]
  %701 = phi i64 [ %705, %699 ], [ %588, %697 ]
  %702 = load float*, float** %602, align 8
  %703 = getelementptr inbounds float, float* %702, i64 %700
  store float 0.000000e+00, float* %703, align 4
  %704 = add nuw nsw i64 %700, 1
  %705 = add i64 %701, -1
  %706 = icmp eq i64 %705, 0
  br i1 %706, label %707, label %699, !llvm.loop !54

707:                                              ; preds = %697, %699, %676, %607, %610, %606
  %708 = phi float [ %599, %610 ], [ %599, %606 ], [ %599, %607 ], [ %677, %676 ], [ %599, %699 ], [ %599, %697 ]
  %709 = add nuw nsw i64 %597, 1
  %710 = icmp eq i64 %709, %583
  br i1 %710, label %711, label %596

711:                                              ; preds = %707, %560
  %712 = phi float [ 0.000000e+00, %560 ], [ %708, %707 ]
  %713 = phi i8* [ %574, %560 ], [ %604, %707 ]
  %714 = ptrtoint i8* %76 to i64
  %715 = ptrtoint i8* %713 to i64
  %716 = sub i64 %714, %715
  call void @llvm.memset.p0i8.i64(i8* align 1 %713, i8 0, i64 %716, i1 false) #8
  %717 = bitcast i8* %713 to %struct.CvNode2D**
  %718 = getelementptr inbounds i8, i8* %713, i64 %495
  %719 = bitcast i8* %718 to %struct.CvNode2D**
  %720 = shl nsw i64 %498, 3
  %721 = getelementptr inbounds i8, i8* %718, i64 %720
  %722 = bitcast i8* %721 to %struct.CvNode1D*
  %723 = shl nsw i64 %494, 4
  %724 = getelementptr inbounds i8, i8* %721, i64 %723
  %725 = bitcast i8* %724 to %struct.CvNode1D*
  %726 = shl nsw i64 %498, 4
  %727 = getelementptr inbounds i8, i8* %724, i64 %726
  %728 = bitcast i8* %727 to i8**
  br i1 %497, label %729, label %783

729:                                              ; preds = %711
  %730 = getelementptr inbounds i8, i8* %727, i64 %495
  %731 = zext i32 %492 to i64
  store i8* %730, i8** %728, align 8
  %732 = icmp eq i32 %492, 1
  br i1 %732, label %783, label %733

733:                                              ; preds = %729
  %734 = add nsw i64 %731, -1
  %735 = add nsw i64 %731, -2
  %736 = and i64 %734, 7
  %737 = icmp ult i64 %735, 7
  br i1 %737, label %770, label %738

738:                                              ; preds = %733
  %739 = sub nsw i64 %734, %736
  br label %740

740:                                              ; preds = %740, %738
  %741 = phi i64 [ 1, %738 ], [ %767, %740 ]
  %742 = phi i8* [ %730, %738 ], [ %765, %740 ]
  %743 = phi i64 [ %739, %738 ], [ %768, %740 ]
  %744 = getelementptr inbounds i8, i8* %742, i64 %498
  %745 = getelementptr inbounds i8*, i8** %728, i64 %741
  store i8* %744, i8** %745, align 8
  %746 = add nuw nsw i64 %741, 1
  %747 = getelementptr inbounds i8, i8* %744, i64 %498
  %748 = getelementptr inbounds i8*, i8** %728, i64 %746
  store i8* %747, i8** %748, align 8
  %749 = add nuw nsw i64 %741, 2
  %750 = getelementptr inbounds i8, i8* %747, i64 %498
  %751 = getelementptr inbounds i8*, i8** %728, i64 %749
  store i8* %750, i8** %751, align 8
  %752 = add nuw nsw i64 %741, 3
  %753 = getelementptr inbounds i8, i8* %750, i64 %498
  %754 = getelementptr inbounds i8*, i8** %728, i64 %752
  store i8* %753, i8** %754, align 8
  %755 = add nuw nsw i64 %741, 4
  %756 = getelementptr inbounds i8, i8* %753, i64 %498
  %757 = getelementptr inbounds i8*, i8** %728, i64 %755
  store i8* %756, i8** %757, align 8
  %758 = add nuw nsw i64 %741, 5
  %759 = getelementptr inbounds i8, i8* %756, i64 %498
  %760 = getelementptr inbounds i8*, i8** %728, i64 %758
  store i8* %759, i8** %760, align 8
  %761 = add nuw nsw i64 %741, 6
  %762 = getelementptr inbounds i8, i8* %759, i64 %498
  %763 = getelementptr inbounds i8*, i8** %728, i64 %761
  store i8* %762, i8** %763, align 8
  %764 = add nuw nsw i64 %741, 7
  %765 = getelementptr inbounds i8, i8* %762, i64 %498
  %766 = getelementptr inbounds i8*, i8** %728, i64 %764
  store i8* %765, i8** %766, align 8
  %767 = add nuw nsw i64 %741, 8
  %768 = add i64 %743, -8
  %769 = icmp eq i64 %768, 0
  br i1 %769, label %770, label %740

770:                                              ; preds = %740, %733
  %771 = phi i64 [ 1, %733 ], [ %767, %740 ]
  %772 = phi i8* [ %730, %733 ], [ %765, %740 ]
  %773 = icmp eq i64 %736, 0
  br i1 %773, label %783, label %774

774:                                              ; preds = %770, %774
  %775 = phi i64 [ %780, %774 ], [ %771, %770 ]
  %776 = phi i8* [ %778, %774 ], [ %772, %770 ]
  %777 = phi i64 [ %781, %774 ], [ %736, %770 ]
  %778 = getelementptr inbounds i8, i8* %776, i64 %498
  %779 = getelementptr inbounds i8*, i8** %728, i64 %775
  store i8* %778, i8** %779, align 8
  %780 = add nuw nsw i64 %775, 1
  %781 = add i64 %777, -1
  %782 = icmp eq i64 %781, 0
  br i1 %782, label %783, label %774, !llvm.loop !55

783:                                              ; preds = %770, %774, %729, %711
  %784 = bitcast %struct.CvNode1D* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %784) #8
  %785 = bitcast %struct.CvNode1D* %11 to i64*
  store i64 -6148914689804861441, i64* %785, align 8
  %786 = bitcast %struct.CvNode1D* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %786) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %786, i8* align 8 bitcast ({ float, [4 x i8], %struct.CvNode1D* }* @__const._ZL21icvFindBasicVariablesPPfPPcP8CvNode1DS4_ii.v0_head to i8*), i64 16, i1 false) #8
  %787 = fmul float %712, 0x3EE4F8B580000000
  %788 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %11, i64 0, i32 1
  %789 = bitcast %struct.CvNode1D** %788 to i8**
  store i8* %721, i8** %789, align 8
  br i1 %497, label %790, label %827

790:                                              ; preds = %783
  %791 = getelementptr inbounds i8, i8* %721, i64 16
  %792 = bitcast i8* %791 to %struct.CvNode1D*
  %793 = zext i32 %492 to i64
  %794 = add nsw i64 %793, -1
  %795 = and i64 %793, 3
  %796 = icmp ult i64 %794, 3
  br i1 %796, label %816, label %797

797:                                              ; preds = %790
  %798 = sub nsw i64 %793, %795
  br label %799

799:                                              ; preds = %799, %797
  %800 = phi i64 [ 0, %797 ], [ %813, %799 ]
  %801 = phi i64 [ %798, %797 ], [ %814, %799 ]
  %802 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %792, i64 %800
  %803 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %800, i32 1
  store %struct.CvNode1D* %802, %struct.CvNode1D** %803, align 8
  %804 = or i64 %800, 1
  %805 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %792, i64 %804
  %806 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %804, i32 1
  store %struct.CvNode1D* %805, %struct.CvNode1D** %806, align 8
  %807 = or i64 %800, 2
  %808 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %792, i64 %807
  %809 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %807, i32 1
  store %struct.CvNode1D* %808, %struct.CvNode1D** %809, align 8
  %810 = or i64 %800, 3
  %811 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %792, i64 %810
  %812 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %810, i32 1
  store %struct.CvNode1D* %811, %struct.CvNode1D** %812, align 8
  %813 = add nuw nsw i64 %800, 4
  %814 = add i64 %801, -4
  %815 = icmp eq i64 %814, 0
  br i1 %815, label %816, label %799

816:                                              ; preds = %799, %790
  %817 = phi i64 [ 0, %790 ], [ %813, %799 ]
  %818 = icmp eq i64 %795, 0
  br i1 %818, label %827, label %819

819:                                              ; preds = %816, %819
  %820 = phi i64 [ %824, %819 ], [ %817, %816 ]
  %821 = phi i64 [ %825, %819 ], [ %795, %816 ]
  %822 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %792, i64 %820
  %823 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %820, i32 1
  store %struct.CvNode1D* %822, %struct.CvNode1D** %823, align 8
  %824 = add nuw nsw i64 %820, 1
  %825 = add i64 %821, -1
  %826 = icmp eq i64 %825, 0
  br i1 %826, label %827, label %819, !llvm.loop !56

827:                                              ; preds = %816, %819, %783
  %828 = add nsw i32 %492, -1
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %829, i32 1
  store %struct.CvNode1D* null, %struct.CvNode1D** %830, align 8
  %831 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %12, i64 0, i32 1
  %832 = bitcast %struct.CvNode1D** %831 to i8**
  store i8* %724, i8** %832, align 8
  %833 = icmp sgt i32 %491, 0
  br i1 %833, label %834, label %879

834:                                              ; preds = %827
  %835 = zext i32 %491 to i64
  %836 = add nsw i64 %835, -1
  %837 = and i64 %835, 3
  %838 = icmp ult i64 %836, 3
  br i1 %838, label %866, label %839

839:                                              ; preds = %834
  %840 = sub nsw i64 %835, %837
  br label %841

841:                                              ; preds = %841, %839
  %842 = phi i64 [ 0, %839 ], [ %863, %841 ]
  %843 = phi i64 [ %840, %839 ], [ %864, %841 ]
  %844 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %842
  %845 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %844, i64 0, i32 0
  store float 0xC415AF1D80000000, float* %845, align 8
  %846 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %844, i64 1
  %847 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %842, i32 1
  store %struct.CvNode1D* %846, %struct.CvNode1D** %847, align 8
  %848 = or i64 %842, 1
  %849 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %848
  %850 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %849, i64 0, i32 0
  store float 0xC415AF1D80000000, float* %850, align 8
  %851 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %849, i64 1
  %852 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %848, i32 1
  store %struct.CvNode1D* %851, %struct.CvNode1D** %852, align 8
  %853 = or i64 %842, 2
  %854 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %853
  %855 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %854, i64 0, i32 0
  store float 0xC415AF1D80000000, float* %855, align 8
  %856 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %854, i64 1
  %857 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %853, i32 1
  store %struct.CvNode1D* %856, %struct.CvNode1D** %857, align 8
  %858 = or i64 %842, 3
  %859 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %858
  %860 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %859, i64 0, i32 0
  store float 0xC415AF1D80000000, float* %860, align 8
  %861 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %859, i64 1
  %862 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %858, i32 1
  store %struct.CvNode1D* %861, %struct.CvNode1D** %862, align 8
  %863 = add nuw nsw i64 %842, 4
  %864 = add i64 %843, -4
  %865 = icmp eq i64 %864, 0
  br i1 %865, label %866, label %841

866:                                              ; preds = %841, %834
  %867 = phi i64 [ 0, %834 ], [ %863, %841 ]
  %868 = icmp eq i64 %837, 0
  br i1 %868, label %879, label %869

869:                                              ; preds = %866, %869
  %870 = phi i64 [ %876, %869 ], [ %867, %866 ]
  %871 = phi i64 [ %877, %869 ], [ %837, %866 ]
  %872 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %870
  %873 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %872, i64 0, i32 0
  store float 0xC415AF1D80000000, float* %873, align 8
  %874 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %872, i64 1
  %875 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %870, i32 1
  store %struct.CvNode1D* %874, %struct.CvNode1D** %875, align 8
  %876 = add nuw nsw i64 %870, 1
  %877 = add i64 %871, -1
  %878 = icmp eq i64 %877, 0
  br i1 %878, label %879, label %869, !llvm.loop !57

879:                                              ; preds = %866, %869, %827
  %880 = add nsw i32 %491, -1
  %881 = sext i32 %880 to i64
  %882 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %881, i32 1
  store %struct.CvNode1D* null, %struct.CvNode1D** %882, align 8
  br i1 %497, label %883, label %947

883:                                              ; preds = %879
  %884 = zext i32 %492 to i64
  %885 = zext i32 %491 to i64
  %886 = and i64 %885, 1
  %887 = icmp eq i32 %491, 1
  %888 = sub nsw i64 %885, %886
  %889 = icmp eq i64 %886, 0
  br label %890

890:                                              ; preds = %929, %883
  %891 = phi i64 [ 0, %883 ], [ %932, %929 ]
  %892 = getelementptr inbounds float*, float** %573, i64 %891
  %893 = load float*, float** %892, align 8
  br i1 %833, label %894, label %929

894:                                              ; preds = %890
  br i1 %887, label %916, label %895

895:                                              ; preds = %894, %2016
  %896 = phi i64 [ %2017, %2016 ], [ 0, %894 ]
  %897 = phi float [ %912, %2016 ], [ 0xC415AF1D80000000, %894 ]
  %898 = phi i64 [ %2018, %2016 ], [ %888, %894 ]
  %899 = getelementptr inbounds float, float* %893, i64 %896
  %900 = load float, float* %899, align 4
  %901 = fcmp olt float %897, %900
  %902 = select i1 %901, float %900, float %897
  %903 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %896, i32 0
  %904 = load float, float* %903, align 8
  %905 = fcmp olt float %904, %900
  br i1 %905, label %906, label %907

906:                                              ; preds = %895
  store float %900, float* %903, align 8
  br label %907

907:                                              ; preds = %906, %895
  %908 = or i64 %896, 1
  %909 = getelementptr inbounds float, float* %893, i64 %908
  %910 = load float, float* %909, align 4
  %911 = fcmp olt float %902, %910
  %912 = select i1 %911, float %910, float %902
  %913 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %908, i32 0
  %914 = load float, float* %913, align 8
  %915 = fcmp olt float %914, %910
  br i1 %915, label %2015, label %2016

916:                                              ; preds = %2016, %894
  %917 = phi float [ undef, %894 ], [ %912, %2016 ]
  %918 = phi i64 [ 0, %894 ], [ %2017, %2016 ]
  %919 = phi float [ 0xC415AF1D80000000, %894 ], [ %912, %2016 ]
  br i1 %889, label %929, label %920

920:                                              ; preds = %916
  %921 = getelementptr inbounds float, float* %893, i64 %918
  %922 = load float, float* %921, align 4
  %923 = fcmp olt float %919, %922
  %924 = select i1 %923, float %922, float %919
  %925 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %918, i32 0
  %926 = load float, float* %925, align 8
  %927 = fcmp olt float %926, %922
  br i1 %927, label %928, label %929

928:                                              ; preds = %920
  store float %922, float* %925, align 8
  br label %929

929:                                              ; preds = %916, %920, %928, %890
  %930 = phi float [ 0xC415AF1D80000000, %890 ], [ %917, %916 ], [ %924, %920 ], [ %924, %928 ]
  %931 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %891, i32 0
  store float %930, float* %931, align 8
  %932 = add nuw nsw i64 %891, 1
  %933 = icmp eq i64 %932, %884
  br i1 %933, label %934, label %890

934:                                              ; preds = %929
  %935 = mul nsw i64 %494, 24
  %936 = shl nuw nsw i64 %885, 4
  %937 = add nsw i64 %935, %936
  %938 = add nsw i64 %937, %720
  %939 = add nsw i64 %938, -12
  %940 = getelementptr i8, i8* %713, i64 %939
  %941 = icmp ult i32 %491, 9
  %942 = and i64 %885, 7
  %943 = icmp eq i64 %942, 0
  %944 = select i1 %943, i64 8, i64 %942
  %945 = sub nsw i64 %885, %944
  %946 = sub nsw i64 0, %885
  br label %951

947:                                              ; preds = %1041, %879
  %948 = ptrtoint i8* %721 to i64
  %949 = ptrtoint i8* %724 to i64
  %950 = fmul float %490, 0x3EE4F8B580000000
  br label %1044

951:                                              ; preds = %934, %1041
  %952 = phi i64 [ %1042, %1041 ], [ 0, %934 ]
  %953 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %952, i32 0
  %954 = load float, float* %953, align 8
  %955 = getelementptr inbounds float*, float** %493, i64 %952
  %956 = load float*, float** %955, align 8
  %957 = bitcast float* %956 to i8*
  %958 = getelementptr inbounds float*, float** %573, i64 %952
  %959 = load float*, float** %958, align 8
  br i1 %833, label %960, label %1041

960:                                              ; preds = %951
  br i1 %941, label %1004, label %961

961:                                              ; preds = %960
  %962 = getelementptr float, float* %956, i64 %885
  %963 = bitcast float* %962 to i8*
  %964 = getelementptr float, float* %959, i64 %885
  %965 = icmp ult float* %956, %964
  %966 = icmp ult float* %959, %962
  %967 = and i1 %965, %966
  %968 = icmp ugt i8* %940, %957
  %969 = icmp ult i8* %724, %963
  %970 = and i1 %968, %969
  %971 = or i1 %967, %970
  br i1 %971, label %1004, label %972

972:                                              ; preds = %961
  %973 = insertelement <4 x float> undef, float %954, i32 0
  %974 = shufflevector <4 x float> %973, <4 x float> undef, <4 x i32> zeroinitializer
  %975 = insertelement <4 x float> undef, float %954, i32 0
  %976 = shufflevector <4 x float> %975, <4 x float> undef, <4 x i32> zeroinitializer
  br label %977

977:                                              ; preds = %977, %972
  %978 = phi i64 [ 0, %972 ], [ %1002, %977 ]
  %979 = or i64 %978, 4
  %980 = getelementptr inbounds float, float* %959, i64 %978
  %981 = bitcast float* %980 to <4 x float>*
  %982 = load <4 x float>, <4 x float>* %981, align 4, !alias.scope !58
  %983 = getelementptr inbounds float, float* %980, i64 4
  %984 = bitcast float* %983 to <4 x float>*
  %985 = load <4 x float>, <4 x float>* %984, align 4, !alias.scope !58
  %986 = fsub <4 x float> %982, %974
  %987 = fsub <4 x float> %985, %976
  %988 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %978, i32 0
  %989 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %979, i32 0
  %990 = bitcast float* %988 to <16 x float>*
  %991 = bitcast float* %989 to <16 x float>*
  %992 = load <16 x float>, <16 x float>* %990, align 8
  %993 = load <16 x float>, <16 x float>* %991, align 8
  %994 = shufflevector <16 x float> %992, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %995 = shufflevector <16 x float> %993, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %996 = fsub <4 x float> %986, %994
  %997 = fsub <4 x float> %987, %995
  %998 = getelementptr inbounds float, float* %956, i64 %978
  %999 = bitcast float* %998 to <4 x float>*
  store <4 x float> %996, <4 x float>* %999, align 4, !alias.scope !61, !noalias !63
  %1000 = getelementptr inbounds float, float* %998, i64 4
  %1001 = bitcast float* %1000 to <4 x float>*
  store <4 x float> %997, <4 x float>* %1001, align 4, !alias.scope !61, !noalias !63
  %1002 = add i64 %978, 8
  %1003 = icmp eq i64 %1002, %945
  br i1 %1003, label %1004, label %977, !llvm.loop !65

1004:                                             ; preds = %977, %961, %960
  %1005 = phi i64 [ 0, %961 ], [ 0, %960 ], [ %945, %977 ]
  %1006 = sub nsw i64 %885, %1005
  %1007 = xor i64 %1005, -1
  %1008 = and i64 %1006, 1
  %1009 = icmp eq i64 %1008, 0
  br i1 %1009, label %1019, label %1010

1010:                                             ; preds = %1004
  %1011 = getelementptr inbounds float, float* %959, i64 %1005
  %1012 = load float, float* %1011, align 4
  %1013 = fsub float %1012, %954
  %1014 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1005, i32 0
  %1015 = load float, float* %1014, align 8
  %1016 = fsub float %1013, %1015
  %1017 = getelementptr inbounds float, float* %956, i64 %1005
  store float %1016, float* %1017, align 4
  %1018 = add nuw nsw i64 %1005, 1
  br label %1019

1019:                                             ; preds = %1010, %1004
  %1020 = phi i64 [ %1018, %1010 ], [ %1005, %1004 ]
  %1021 = icmp eq i64 %1007, %946
  br i1 %1021, label %1041, label %1022

1022:                                             ; preds = %1019, %1022
  %1023 = phi i64 [ %1039, %1022 ], [ %1020, %1019 ]
  %1024 = getelementptr inbounds float, float* %959, i64 %1023
  %1025 = load float, float* %1024, align 4
  %1026 = fsub float %1025, %954
  %1027 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1023, i32 0
  %1028 = load float, float* %1027, align 8
  %1029 = fsub float %1026, %1028
  %1030 = getelementptr inbounds float, float* %956, i64 %1023
  store float %1029, float* %1030, align 4
  %1031 = add nuw nsw i64 %1023, 1
  %1032 = getelementptr inbounds float, float* %959, i64 %1031
  %1033 = load float, float* %1032, align 4
  %1034 = fsub float %1033, %954
  %1035 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1031, i32 0
  %1036 = load float, float* %1035, align 8
  %1037 = fsub float %1034, %1036
  %1038 = getelementptr inbounds float, float* %956, i64 %1031
  store float %1037, float* %1038, align 4
  %1039 = add nuw nsw i64 %1023, 2
  %1040 = icmp eq i64 %1039, %885
  br i1 %1040, label %1041, label %1022, !llvm.loop !66

1041:                                             ; preds = %1019, %1022, %951
  %1042 = add nuw nsw i64 %952, 1
  %1043 = icmp eq i64 %1042, %884
  br i1 %1043, label %947, label %951

1044:                                             ; preds = %1280, %947
  %1045 = phi %struct.CvNode2D* [ %568, %947 ], [ %1140, %1280 ]
  %1046 = phi %struct.CvNode1D* [ %725, %947 ], [ %1281, %1280 ]
  %1047 = phi %struct.CvNode1D* [ %722, %947 ], [ %1282, %1280 ]
  %1048 = phi i32 [ -1, %947 ], [ %1099, %1280 ]
  %1049 = phi %struct.CvNode1D* [ null, %947 ], [ %1101, %1280 ]
  %1050 = phi %struct.CvNode1D* [ null, %947 ], [ %1102, %1280 ]
  %1051 = icmp eq %struct.CvNode1D* %1047, null
  br i1 %1051, label %1286, label %1052

1052:                                             ; preds = %1044
  %1053 = icmp eq %struct.CvNode1D* %1046, null
  br label %1054

1054:                                             ; preds = %1097, %1052
  %1055 = phi %struct.CvNode1D* [ %1050, %1052 ], [ %1102, %1097 ]
  %1056 = phi %struct.CvNode1D* [ %1049, %1052 ], [ %1101, %1097 ]
  %1057 = phi %struct.CvNode1D* [ %11, %1052 ], [ %1058, %1097 ]
  %1058 = phi %struct.CvNode1D* [ %1047, %1052 ], [ %1104, %1097 ]
  %1059 = phi float [ 0x4415AF1D80000000, %1052 ], [ %1100, %1097 ]
  %1060 = phi i32 [ %1048, %1052 ], [ %1099, %1097 ]
  %1061 = phi i32 [ -1, %1052 ], [ %1098, %1097 ]
  %1062 = ptrtoint %struct.CvNode1D* %1058 to i64
  %1063 = sub i64 %1062, %948
  %1064 = lshr exact i64 %1063, 4
  %1065 = trunc i64 %1064 to i32
  %1066 = shl i64 %1063, 28
  %1067 = ashr exact i64 %1066, 32
  %1068 = getelementptr inbounds float*, float** %493, i64 %1067
  %1069 = load float*, float** %1068, align 8
  br i1 %1053, label %1097, label %1070

1070:                                             ; preds = %1054, %1088
  %1071 = phi %struct.CvNode1D* [ %1093, %1088 ], [ %1055, %1054 ]
  %1072 = phi %struct.CvNode1D* [ %1092, %1088 ], [ %1056, %1054 ]
  %1073 = phi %struct.CvNode1D* [ %1074, %1088 ], [ %12, %1054 ]
  %1074 = phi %struct.CvNode1D* [ %1095, %1088 ], [ %1046, %1054 ]
  %1075 = phi float [ %1091, %1088 ], [ %1059, %1054 ]
  %1076 = phi i32 [ %1090, %1088 ], [ %1060, %1054 ]
  %1077 = phi i32 [ %1089, %1088 ], [ %1061, %1054 ]
  %1078 = ptrtoint %struct.CvNode1D* %1074 to i64
  %1079 = sub i64 %1078, %949
  %1080 = shl i64 %1079, 28
  %1081 = ashr exact i64 %1080, 32
  %1082 = getelementptr inbounds float, float* %1069, i64 %1081
  %1083 = load float, float* %1082, align 4
  %1084 = fcmp ogt float %1075, %1083
  br i1 %1084, label %1085, label %1088

1085:                                             ; preds = %1070
  %1086 = lshr exact i64 %1079, 4
  %1087 = trunc i64 %1086 to i32
  br label %1088

1088:                                             ; preds = %1085, %1070
  %1089 = phi i32 [ %1065, %1085 ], [ %1077, %1070 ]
  %1090 = phi i32 [ %1087, %1085 ], [ %1076, %1070 ]
  %1091 = phi float [ %1083, %1085 ], [ %1075, %1070 ]
  %1092 = phi %struct.CvNode1D* [ %1057, %1085 ], [ %1072, %1070 ]
  %1093 = phi %struct.CvNode1D* [ %1073, %1085 ], [ %1071, %1070 ]
  %1094 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1074, i64 0, i32 1
  %1095 = load %struct.CvNode1D*, %struct.CvNode1D** %1094, align 8
  %1096 = icmp eq %struct.CvNode1D* %1095, null
  br i1 %1096, label %1097, label %1070

1097:                                             ; preds = %1088, %1054
  %1098 = phi i32 [ %1061, %1054 ], [ %1089, %1088 ]
  %1099 = phi i32 [ %1060, %1054 ], [ %1090, %1088 ]
  %1100 = phi float [ %1059, %1054 ], [ %1091, %1088 ]
  %1101 = phi %struct.CvNode1D* [ %1056, %1054 ], [ %1092, %1088 ]
  %1102 = phi %struct.CvNode1D* [ %1055, %1054 ], [ %1093, %1088 ]
  %1103 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1058, i64 0, i32 1
  %1104 = load %struct.CvNode1D*, %struct.CvNode1D** %1103, align 8
  %1105 = icmp eq %struct.CvNode1D* %1104, null
  br i1 %1105, label %1106, label %1054

1106:                                             ; preds = %1097
  %1107 = icmp slt i32 %1098, 0
  br i1 %1107, label %1286, label %1108

1108:                                             ; preds = %1106
  %1109 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1101, i64 0, i32 1
  %1110 = load %struct.CvNode1D*, %struct.CvNode1D** %1109, align 8
  %1111 = sext i32 %1098 to i64
  %1112 = getelementptr inbounds float, float* %83, i64 %1111
  %1113 = load float, float* %1112, align 4
  %1114 = sext i32 %1099 to i64
  %1115 = getelementptr inbounds float, float* %85, i64 %1114
  %1116 = load float, float* %1115, align 4
  %1117 = fadd float %950, %1116
  %1118 = fcmp olt float %1113, %1117
  %1119 = select i1 %1118, float* %1112, float* %1115
  %1120 = select i1 %1118, float* %1115, float* %1112
  %1121 = select i1 %1118, float %1113, float %1116
  store float 0.000000e+00, float* %1119, align 4
  %1122 = load float, float* %1120, align 4
  %1123 = fsub float %1122, %1121
  store float %1123, float* %1120, align 4
  %1124 = getelementptr inbounds i8*, i8** %728, i64 %1111
  %1125 = load i8*, i8** %1124, align 8
  %1126 = getelementptr inbounds i8, i8* %1125, i64 %1114
  store i8 1, i8* %1126, align 1
  %1127 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1045, i64 0, i32 0
  store float %1121, float* %1127, align 8
  %1128 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1045, i64 0, i32 2
  store i32 %1098, i32* %1128, align 8
  %1129 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1045, i64 0, i32 3
  store i32 %1099, i32* %1129, align 4
  %1130 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %717, i64 %1111
  %1131 = bitcast %struct.CvNode2D** %1130 to i64*
  %1132 = load i64, i64* %1131, align 8
  %1133 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1045, i64 0, i32 1
  %1134 = bitcast [2 x %struct.CvNode2D*]* %1133 to i64*
  store i64 %1132, i64* %1134, align 8
  %1135 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %719, i64 %1114
  %1136 = bitcast %struct.CvNode2D** %1135 to i64*
  %1137 = load i64, i64* %1136, align 8
  %1138 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1045, i64 0, i32 1, i64 1
  %1139 = bitcast %struct.CvNode2D** %1138 to i64*
  store i64 %1137, i64* %1139, align 8
  store %struct.CvNode2D* %1045, %struct.CvNode2D** %1130, align 8
  store %struct.CvNode2D* %1045, %struct.CvNode2D** %1135, align 8
  %1140 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1045, i64 1
  %1141 = load float, float* %1112, align 4
  %1142 = fcmp oeq float %1141, 0.000000e+00
  br i1 %1142, label %1143, label %1154

1143:                                             ; preds = %1108
  %1144 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1047, i64 0, i32 1
  %1145 = load %struct.CvNode1D*, %struct.CvNode1D** %1144, align 8
  %1146 = icmp eq %struct.CvNode1D* %1145, null
  br i1 %1146, label %1154, label %1147

1147:                                             ; preds = %1143
  %1148 = load %struct.CvNode1D*, %struct.CvNode1D** %1109, align 8
  %1149 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1148, i64 0, i32 1
  %1150 = bitcast %struct.CvNode1D** %1149 to i64*
  %1151 = load i64, i64* %1150, align 8
  %1152 = bitcast %struct.CvNode1D** %1109 to i64*
  store i64 %1151, i64* %1152, align 8
  %1153 = inttoptr i64 %1151 to %struct.CvNode1D*
  br label %1162

1154:                                             ; preds = %1143, %1108
  %1155 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1102, i64 0, i32 1
  %1156 = load %struct.CvNode1D*, %struct.CvNode1D** %1155, align 8
  %1157 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1156, i64 0, i32 1
  %1158 = bitcast %struct.CvNode1D** %1157 to i64*
  %1159 = load i64, i64* %1158, align 8
  %1160 = bitcast %struct.CvNode1D** %1155 to i64*
  store i64 %1159, i64* %1160, align 8
  %1161 = load %struct.CvNode1D*, %struct.CvNode1D** %1109, align 8
  br label %1162

1162:                                             ; preds = %1154, %1147
  %1163 = phi %struct.CvNode1D* [ %1153, %1147 ], [ %1161, %1154 ]
  %1164 = icmp eq %struct.CvNode1D* %1110, %1163
  br i1 %1164, label %1165, label %1224

1165:                                             ; preds = %1162
  %1166 = load %struct.CvNode1D*, %struct.CvNode1D** %831, align 8
  %1167 = icmp eq %struct.CvNode1D* %1166, null
  br i1 %1167, label %1168, label %1170

1168:                                             ; preds = %1165
  %1169 = load %struct.CvNode1D*, %struct.CvNode1D** %788, align 8
  br label %1280

1170:                                             ; preds = %1165
  %1171 = getelementptr inbounds float*, float** %573, i64 %1111
  %1172 = load %struct.CvNode1D*, %struct.CvNode1D** %788, align 8
  %1173 = icmp eq %struct.CvNode1D* %1172, null
  br label %1174

1174:                                             ; preds = %1220, %1170
  %1175 = phi %struct.CvNode1D* [ %1166, %1170 ], [ %1222, %1220 ]
  %1176 = ptrtoint %struct.CvNode1D* %1175 to i64
  %1177 = sub i64 %1176, %949
  %1178 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1175, i64 0, i32 0
  %1179 = load float, float* %1178, align 8
  %1180 = load float*, float** %1171, align 8
  %1181 = shl i64 %1177, 28
  %1182 = ashr i64 %1181, 32
  %1183 = getelementptr inbounds float, float* %1180, i64 %1182
  %1184 = load float, float* %1183, align 4
  %1185 = fcmp oeq float %1179, %1184
  br i1 %1185, label %1186, label %1220

1186:                                             ; preds = %1174
  br i1 %1173, label %1187, label %1188

1187:                                             ; preds = %1186
  store float 0xC415AF1D80000000, float* %1178, align 8
  br label %1220

1188:                                             ; preds = %1186, %1188
  %1189 = phi float [ %1199, %1188 ], [ 0xC415AF1D80000000, %1186 ]
  %1190 = phi %struct.CvNode1D* [ %1201, %1188 ], [ %1172, %1186 ]
  %1191 = ptrtoint %struct.CvNode1D* %1190 to i64
  %1192 = sub i64 %1191, %948
  %1193 = ashr exact i64 %1192, 4
  %1194 = getelementptr inbounds float*, float** %573, i64 %1193
  %1195 = load float*, float** %1194, align 8
  %1196 = getelementptr inbounds float, float* %1195, i64 %1182
  %1197 = load float, float* %1196, align 4
  %1198 = fcmp olt float %1189, %1197
  %1199 = select i1 %1198, float %1197, float %1189
  %1200 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1190, i64 0, i32 1
  %1201 = load %struct.CvNode1D*, %struct.CvNode1D** %1200, align 8
  %1202 = icmp eq %struct.CvNode1D* %1201, null
  br i1 %1202, label %1203, label %1188

1203:                                             ; preds = %1188
  %1204 = fsub float %1199, %1179
  store float %1199, float* %1178, align 8
  %1205 = call float @llvm.fabs.f32(float %1204) #8
  %1206 = fcmp uge float %1205, %787
  br i1 %1206, label %1220, label %1207

1207:                                             ; preds = %1203, %1207
  %1208 = phi %struct.CvNode1D* [ %1218, %1207 ], [ %1172, %1203 ]
  %1209 = ptrtoint %struct.CvNode1D* %1208 to i64
  %1210 = sub i64 %1209, %948
  %1211 = ashr exact i64 %1210, 4
  %1212 = getelementptr inbounds float*, float** %493, i64 %1211
  %1213 = load float*, float** %1212, align 8
  %1214 = getelementptr inbounds float, float* %1213, i64 %1182
  %1215 = load float, float* %1214, align 4
  %1216 = fadd float %1204, %1215
  store float %1216, float* %1214, align 4
  %1217 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1208, i64 0, i32 1
  %1218 = load %struct.CvNode1D*, %struct.CvNode1D** %1217, align 8
  %1219 = icmp eq %struct.CvNode1D* %1218, null
  br i1 %1219, label %1220, label %1207

1220:                                             ; preds = %1207, %1203, %1187, %1174
  %1221 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1175, i64 0, i32 1
  %1222 = load %struct.CvNode1D*, %struct.CvNode1D** %1221, align 8
  %1223 = icmp eq %struct.CvNode1D* %1222, null
  br i1 %1223, label %1280, label %1174

1224:                                             ; preds = %1162
  %1225 = load %struct.CvNode1D*, %struct.CvNode1D** %788, align 8
  %1226 = icmp eq %struct.CvNode1D* %1225, null
  %1227 = load %struct.CvNode1D*, %struct.CvNode1D** %831, align 8
  br i1 %1226, label %1280, label %1228

1228:                                             ; preds = %1224
  %1229 = icmp eq %struct.CvNode1D* %1227, null
  br label %1230

1230:                                             ; preds = %1276, %1228
  %1231 = phi %struct.CvNode1D* [ %1225, %1228 ], [ %1278, %1276 ]
  %1232 = ptrtoint %struct.CvNode1D* %1231 to i64
  %1233 = sub i64 %1232, %948
  %1234 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1231, i64 0, i32 0
  %1235 = load float, float* %1234, align 8
  %1236 = shl i64 %1233, 28
  %1237 = ashr i64 %1236, 32
  %1238 = getelementptr inbounds float*, float** %573, i64 %1237
  %1239 = load float*, float** %1238, align 8
  %1240 = getelementptr inbounds float, float* %1239, i64 %1114
  %1241 = load float, float* %1240, align 4
  %1242 = fcmp oeq float %1235, %1241
  br i1 %1242, label %1243, label %1276

1243:                                             ; preds = %1230
  br i1 %1229, label %1244, label %1245

1244:                                             ; preds = %1243
  store float 0xC415AF1D80000000, float* %1234, align 8
  br label %1276

1245:                                             ; preds = %1243, %1245
  %1246 = phi float [ %1254, %1245 ], [ 0xC415AF1D80000000, %1243 ]
  %1247 = phi %struct.CvNode1D* [ %1256, %1245 ], [ %1227, %1243 ]
  %1248 = ptrtoint %struct.CvNode1D* %1247 to i64
  %1249 = sub i64 %1248, %949
  %1250 = ashr exact i64 %1249, 4
  %1251 = getelementptr inbounds float, float* %1239, i64 %1250
  %1252 = load float, float* %1251, align 4
  %1253 = fcmp olt float %1246, %1252
  %1254 = select i1 %1253, float %1252, float %1246
  %1255 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1247, i64 0, i32 1
  %1256 = load %struct.CvNode1D*, %struct.CvNode1D** %1255, align 8
  %1257 = icmp eq %struct.CvNode1D* %1256, null
  br i1 %1257, label %1258, label %1245

1258:                                             ; preds = %1245
  %1259 = fsub float %1254, %1235
  store float %1254, float* %1234, align 8
  %1260 = call float @llvm.fabs.f32(float %1259) #8
  %1261 = fcmp uge float %1260, %787
  br i1 %1261, label %1276, label %1262

1262:                                             ; preds = %1258
  %1263 = getelementptr inbounds float*, float** %493, i64 %1237
  br label %1264

1264:                                             ; preds = %1264, %1262
  %1265 = phi %struct.CvNode1D* [ %1227, %1262 ], [ %1274, %1264 ]
  %1266 = load float*, float** %1263, align 8
  %1267 = ptrtoint %struct.CvNode1D* %1265 to i64
  %1268 = sub i64 %1267, %949
  %1269 = ashr exact i64 %1268, 4
  %1270 = getelementptr inbounds float, float* %1266, i64 %1269
  %1271 = load float, float* %1270, align 4
  %1272 = fadd float %1259, %1271
  store float %1272, float* %1270, align 4
  %1273 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1265, i64 0, i32 1
  %1274 = load %struct.CvNode1D*, %struct.CvNode1D** %1273, align 8
  %1275 = icmp eq %struct.CvNode1D* %1274, null
  br i1 %1275, label %1276, label %1264

1276:                                             ; preds = %1264, %1258, %1244, %1230
  %1277 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1231, i64 0, i32 1
  %1278 = load %struct.CvNode1D*, %struct.CvNode1D** %1277, align 8
  %1279 = icmp eq %struct.CvNode1D* %1278, null
  br i1 %1279, label %1280, label %1230

1280:                                             ; preds = %1276, %1220, %1224, %1168
  %1281 = phi %struct.CvNode1D* [ null, %1168 ], [ %1227, %1224 ], [ %1166, %1220 ], [ %1227, %1276 ]
  %1282 = phi %struct.CvNode1D* [ %1169, %1168 ], [ null, %1224 ], [ %1172, %1220 ], [ %1225, %1276 ]
  %1283 = icmp ne %struct.CvNode1D* %1282, null
  %1284 = icmp ne %struct.CvNode1D* %1281, null
  %1285 = or i1 %1284, %1283
  br i1 %1285, label %1044, label %1286

1286:                                             ; preds = %1280, %1106, %1044
  %1287 = phi %struct.CvNode2D* [ %1045, %1044 ], [ %1045, %1106 ], [ %1140, %1280 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %786) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %784) #8
  %1288 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1287, i64 1
  %1289 = icmp sgt i32 %492, 1
  %1290 = icmp sgt i32 %491, 1
  %1291 = and i1 %1289, %1290
  br i1 %1291, label %1292, label %1936

1292:                                             ; preds = %1286
  %1293 = bitcast %struct.CvNode1D* %9 to i8*
  %1294 = bitcast %struct.CvNode1D* %10 to i8*
  %1295 = icmp ne i8* %721, null
  %1296 = icmp ne i8* %724, null
  %1297 = and i1 %1296, %1295
  %1298 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %9, i64 0, i32 1
  %1299 = getelementptr inbounds i8, i8* %721, i64 16
  %1300 = bitcast i8* %1299 to %struct.CvNode1D*
  %1301 = zext i32 %492 to i64
  %1302 = add nsw i32 %492, -1
  %1303 = sext i32 %1302 to i64
  %1304 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1303, i32 1
  %1305 = getelementptr inbounds i8, i8* %724, i64 16
  %1306 = bitcast i8* %1305 to %struct.CvNode1D*
  %1307 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %10, i64 0, i32 1
  %1308 = zext i32 %491 to i64
  %1309 = add nsw i32 %491, -1
  %1310 = sext i32 %1309 to i64
  %1311 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1310, i32 1
  %1312 = bitcast i8* %724 to float*
  %1313 = getelementptr inbounds i8, i8* %724, i64 8
  %1314 = bitcast i8* %1313 to %struct.CvNode1D**
  %1315 = ptrtoint i8* %724 to i64
  %1316 = ptrtoint i8* %721 to i64
  %1317 = fmul float %712, 0xBEE4F8B580000000
  %1318 = bitcast %struct.CvNode2D* %13 to i8*
  %1319 = add nuw nsw i32 %491, %492
  %1320 = sext i32 %1319 to i64
  %1321 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %13, i64 0, i32 1
  %1322 = bitcast [2 x %struct.CvNode2D*]* %1321 to i64*
  %1323 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %13, i64 0, i32 1, i64 1
  %1324 = bitcast %struct.CvNode2D** %1323 to i64*
  %1325 = add nsw i64 %1301, -1
  %1326 = add nsw i64 %1308, -1
  %1327 = add nsw i64 %1308, -2
  %1328 = bitcast %struct.CvNode1D** %1298 to i8**
  %1329 = and i64 %1301, 3
  %1330 = icmp ult i64 %1325, 3
  %1331 = sub nsw i64 %1301, %1329
  %1332 = icmp eq i64 %1329, 0
  %1333 = bitcast %struct.CvNode1D** %1307 to i8**
  %1334 = and i64 %1326, 3
  %1335 = icmp ult i64 %1327, 3
  %1336 = sub nsw i64 %1326, %1334
  %1337 = icmp eq i64 %1334, 0
  %1338 = and i64 %1308, 1
  %1339 = icmp eq i64 %1326, 0
  %1340 = sub nsw i64 %1308, %1338
  %1341 = icmp eq i64 %1338, 0
  br label %1342

1342:                                             ; preds = %1928, %1292
  %1343 = phi i32 [ 1, %1292 ], [ %1934, %1928 ]
  %1344 = phi %struct.CvNode2D* [ %1287, %1292 ], [ %1780, %1928 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1293) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1293, i8* align 8 bitcast ({ float, [4 x i8], %struct.CvNode1D* }* @__const._ZL21icvFindBasicVariablesPPfPPcP8CvNode1DS4_ii.v0_head to i8*), i64 16, i1 false) #8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1294) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1294, i8* align 8 bitcast ({ float, [4 x i8], %struct.CvNode1D* }* @__const._ZL21icvFindBasicVariablesPPfPPcP8CvNode1DS4_ii.v0_head to i8*), i64 16, i1 false) #8
  br i1 %1297, label %1346, label %1345

1345:                                             ; preds = %1342
  call void @abort() #9
  unreachable

1346:                                             ; preds = %1342
  store i8* %721, i8** %1328, align 8
  br i1 %1330, label %1364, label %1347

1347:                                             ; preds = %1346, %1347
  %1348 = phi i64 [ %1361, %1347 ], [ 0, %1346 ]
  %1349 = phi i64 [ %1362, %1347 ], [ %1331, %1346 ]
  %1350 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1300, i64 %1348
  %1351 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1348, i32 1
  store %struct.CvNode1D* %1350, %struct.CvNode1D** %1351, align 8
  %1352 = or i64 %1348, 1
  %1353 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1300, i64 %1352
  %1354 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1352, i32 1
  store %struct.CvNode1D* %1353, %struct.CvNode1D** %1354, align 8
  %1355 = or i64 %1348, 2
  %1356 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1300, i64 %1355
  %1357 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1355, i32 1
  store %struct.CvNode1D* %1356, %struct.CvNode1D** %1357, align 8
  %1358 = or i64 %1348, 3
  %1359 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1300, i64 %1358
  %1360 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1358, i32 1
  store %struct.CvNode1D* %1359, %struct.CvNode1D** %1360, align 8
  %1361 = add nuw nsw i64 %1348, 4
  %1362 = add i64 %1349, -4
  %1363 = icmp eq i64 %1362, 0
  br i1 %1363, label %1364, label %1347

1364:                                             ; preds = %1347, %1346
  %1365 = phi i64 [ 0, %1346 ], [ %1361, %1347 ]
  br i1 %1332, label %1374, label %1366

1366:                                             ; preds = %1364, %1366
  %1367 = phi i64 [ %1371, %1366 ], [ %1365, %1364 ]
  %1368 = phi i64 [ %1372, %1366 ], [ %1329, %1364 ]
  %1369 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1300, i64 %1367
  %1370 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1367, i32 1
  store %struct.CvNode1D* %1369, %struct.CvNode1D** %1370, align 8
  %1371 = add nuw nsw i64 %1367, 1
  %1372 = add i64 %1368, -1
  %1373 = icmp eq i64 %1372, 0
  br i1 %1373, label %1374, label %1366, !llvm.loop !67

1374:                                             ; preds = %1366, %1364
  store %struct.CvNode1D* null, %struct.CvNode1D** %1304, align 8
  store i8* %1305, i8** %1333, align 8
  br i1 %1335, label %1392, label %1375

1375:                                             ; preds = %1374, %1375
  %1376 = phi i64 [ %1389, %1375 ], [ 1, %1374 ]
  %1377 = phi i64 [ %1390, %1375 ], [ %1336, %1374 ]
  %1378 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1306, i64 %1376
  %1379 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1376, i32 1
  store %struct.CvNode1D* %1378, %struct.CvNode1D** %1379, align 8
  %1380 = add nuw nsw i64 %1376, 1
  %1381 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1306, i64 %1380
  %1382 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1380, i32 1
  store %struct.CvNode1D* %1381, %struct.CvNode1D** %1382, align 8
  %1383 = add nuw nsw i64 %1376, 2
  %1384 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1306, i64 %1383
  %1385 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1383, i32 1
  store %struct.CvNode1D* %1384, %struct.CvNode1D** %1385, align 8
  %1386 = add nuw nsw i64 %1376, 3
  %1387 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1306, i64 %1386
  %1388 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1386, i32 1
  store %struct.CvNode1D* %1387, %struct.CvNode1D** %1388, align 8
  %1389 = add nuw nsw i64 %1376, 4
  %1390 = add i64 %1377, -4
  %1391 = icmp eq i64 %1390, 0
  br i1 %1391, label %1392, label %1375

1392:                                             ; preds = %1375, %1374
  %1393 = phi i64 [ 1, %1374 ], [ %1389, %1375 ]
  br i1 %1337, label %1402, label %1394

1394:                                             ; preds = %1392, %1394
  %1395 = phi i64 [ %1399, %1394 ], [ %1393, %1392 ]
  %1396 = phi i64 [ %1400, %1394 ], [ %1334, %1392 ]
  %1397 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1306, i64 %1395
  %1398 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1395, i32 1
  store %struct.CvNode1D* %1397, %struct.CvNode1D** %1398, align 8
  %1399 = add nuw nsw i64 %1395, 1
  %1400 = add i64 %1396, -1
  %1401 = icmp eq i64 %1400, 0
  br i1 %1401, label %1402, label %1394, !llvm.loop !68

1402:                                             ; preds = %1394, %1392
  store %struct.CvNode1D* null, %struct.CvNode1D** %1311, align 8
  store float 0.000000e+00, float* %1312, align 8
  store %struct.CvNode1D* null, %struct.CvNode1D** %1314, align 8
  br label %1403

1403:                                             ; preds = %1529, %1402
  %1404 = phi %struct.CvNode1D* [ null, %1402 ], [ %1530, %1529 ]
  %1405 = phi %struct.CvNode1D* [ %725, %1402 ], [ %1531, %1529 ]
  %1406 = phi i32 [ 0, %1402 ], [ %1532, %1529 ]
  %1407 = phi i32 [ 0, %1402 ], [ %1471, %1529 ]
  %1408 = icmp slt i32 %1406, %492
  %1409 = icmp slt i32 %1407, %491
  %1410 = or i1 %1408, %1409
  br i1 %1410, label %1411, label %1537

1411:                                             ; preds = %1403
  br i1 %1409, label %1412, label %1468

1412:                                             ; preds = %1411
  %1413 = icmp ne %struct.CvNode1D* %1405, null
  %1414 = zext i1 %1413 to i8
  %1415 = icmp eq %struct.CvNode1D* %1405, null
  br i1 %1415, label %1468, label %1416

1416:                                             ; preds = %1412, %1462
  %1417 = phi i32 [ %1466, %1462 ], [ %1407, %1412 ]
  %1418 = phi %struct.CvNode1D* [ %1465, %1462 ], [ %1405, %1412 ]
  %1419 = phi %struct.CvNode1D* [ %1463, %1462 ], [ %1404, %1412 ]
  %1420 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1418, i64 0, i32 0
  %1421 = load float, float* %1420, align 8
  %1422 = load %struct.CvNode1D*, %struct.CvNode1D** %1298, align 8
  %1423 = icmp eq %struct.CvNode1D* %1422, null
  br i1 %1423, label %1462, label %1424

1424:                                             ; preds = %1416
  %1425 = ptrtoint %struct.CvNode1D* %1418 to i64
  %1426 = sub i64 %1425, %1315
  %1427 = shl i64 %1426, 28
  %1428 = ashr i64 %1427, 32
  br label %1429

1429:                                             ; preds = %1456, %1424
  %1430 = phi %struct.CvNode1D* [ %9, %1424 ], [ %1459, %1456 ]
  %1431 = phi %struct.CvNode1D* [ %1422, %1424 ], [ %1460, %1456 ]
  %1432 = phi %struct.CvNode1D* [ %1419, %1424 ], [ %1457, %1456 ]
  %1433 = ptrtoint %struct.CvNode1D* %1431 to i64
  %1434 = sub i64 %1433, %1316
  %1435 = shl i64 %1434, 28
  %1436 = ashr i64 %1435, 32
  %1437 = getelementptr inbounds i8*, i8** %728, i64 %1436
  %1438 = load i8*, i8** %1437, align 8
  %1439 = getelementptr inbounds i8, i8* %1438, i64 %1428
  %1440 = load i8, i8* %1439, align 1
  %1441 = icmp eq i8 %1440, 0
  br i1 %1441, label %1454, label %1442

1442:                                             ; preds = %1429
  %1443 = getelementptr inbounds float*, float** %573, i64 %1436
  %1444 = load float*, float** %1443, align 8
  %1445 = getelementptr inbounds float, float* %1444, i64 %1428
  %1446 = load float, float* %1445, align 4
  %1447 = fsub float %1446, %1421
  %1448 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1431, i64 0, i32 0
  store float %1447, float* %1448, align 8
  %1449 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1431, i64 0, i32 1
  %1450 = bitcast %struct.CvNode1D** %1449 to i64*
  %1451 = load i64, i64* %1450, align 8
  %1452 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1430, i64 0, i32 1
  %1453 = bitcast %struct.CvNode1D** %1452 to i64*
  store i64 %1451, i64* %1453, align 8
  store %struct.CvNode1D* %1432, %struct.CvNode1D** %1449, align 8
  br label %1456

1454:                                             ; preds = %1429
  %1455 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1431, i64 0, i32 1
  br label %1456

1456:                                             ; preds = %1454, %1442
  %1457 = phi %struct.CvNode1D* [ %1431, %1442 ], [ %1432, %1454 ]
  %1458 = phi %struct.CvNode1D** [ %1452, %1442 ], [ %1455, %1454 ]
  %1459 = phi %struct.CvNode1D* [ %1430, %1442 ], [ %1431, %1454 ]
  %1460 = load %struct.CvNode1D*, %struct.CvNode1D** %1458, align 8
  %1461 = icmp eq %struct.CvNode1D* %1460, null
  br i1 %1461, label %1462, label %1429

1462:                                             ; preds = %1456, %1416
  %1463 = phi %struct.CvNode1D* [ %1419, %1416 ], [ %1457, %1456 ]
  %1464 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1418, i64 0, i32 1
  %1465 = load %struct.CvNode1D*, %struct.CvNode1D** %1464, align 8
  %1466 = add nsw i32 %1417, 1
  %1467 = icmp eq %struct.CvNode1D* %1465, null
  br i1 %1467, label %1468, label %1416

1468:                                             ; preds = %1462, %1412, %1411
  %1469 = phi %struct.CvNode1D* [ %1404, %1411 ], [ %1404, %1412 ], [ %1463, %1462 ]
  %1470 = phi %struct.CvNode1D* [ %1405, %1411 ], [ null, %1412 ], [ null, %1462 ]
  %1471 = phi i32 [ %1407, %1411 ], [ %1407, %1412 ], [ %1466, %1462 ]
  %1472 = phi i8 [ 0, %1411 ], [ %1414, %1412 ], [ %1414, %1462 ]
  br i1 %1408, label %1473, label %1529

1473:                                             ; preds = %1468
  %1474 = icmp ne %struct.CvNode1D* %1469, null
  %1475 = zext i1 %1474 to i8
  %1476 = or i8 %1472, %1475
  %1477 = icmp eq %struct.CvNode1D* %1469, null
  br i1 %1477, label %1529, label %1478

1478:                                             ; preds = %1473, %1523
  %1479 = phi i32 [ %1527, %1523 ], [ %1406, %1473 ]
  %1480 = phi %struct.CvNode1D* [ %1524, %1523 ], [ %1470, %1473 ]
  %1481 = phi %struct.CvNode1D* [ %1526, %1523 ], [ %1469, %1473 ]
  %1482 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1481, i64 0, i32 0
  %1483 = load float, float* %1482, align 8
  %1484 = ptrtoint %struct.CvNode1D* %1481 to i64
  %1485 = sub i64 %1484, %1316
  %1486 = shl i64 %1485, 28
  %1487 = ashr i64 %1486, 32
  %1488 = getelementptr inbounds float*, float** %573, i64 %1487
  %1489 = load float*, float** %1488, align 8
  %1490 = getelementptr inbounds i8*, i8** %728, i64 %1487
  %1491 = load i8*, i8** %1490, align 8
  %1492 = load %struct.CvNode1D*, %struct.CvNode1D** %1307, align 8
  %1493 = icmp eq %struct.CvNode1D* %1492, null
  br i1 %1493, label %1523, label %1494

1494:                                             ; preds = %1478, %1517
  %1495 = phi %struct.CvNode1D* [ %1520, %1517 ], [ %10, %1478 ]
  %1496 = phi %struct.CvNode1D* [ %1521, %1517 ], [ %1492, %1478 ]
  %1497 = phi %struct.CvNode1D* [ %1518, %1517 ], [ %1480, %1478 ]
  %1498 = ptrtoint %struct.CvNode1D* %1496 to i64
  %1499 = sub i64 %1498, %1315
  %1500 = shl i64 %1499, 28
  %1501 = ashr i64 %1500, 32
  %1502 = getelementptr inbounds i8, i8* %1491, i64 %1501
  %1503 = load i8, i8* %1502, align 1
  %1504 = icmp eq i8 %1503, 0
  br i1 %1504, label %1515, label %1505

1505:                                             ; preds = %1494
  %1506 = getelementptr inbounds float, float* %1489, i64 %1501
  %1507 = load float, float* %1506, align 4
  %1508 = fsub float %1507, %1483
  %1509 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1496, i64 0, i32 0
  store float %1508, float* %1509, align 8
  %1510 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1496, i64 0, i32 1
  %1511 = bitcast %struct.CvNode1D** %1510 to i64*
  %1512 = load i64, i64* %1511, align 8
  %1513 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1495, i64 0, i32 1
  %1514 = bitcast %struct.CvNode1D** %1513 to i64*
  store i64 %1512, i64* %1514, align 8
  store %struct.CvNode1D* %1497, %struct.CvNode1D** %1510, align 8
  br label %1517

1515:                                             ; preds = %1494
  %1516 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1496, i64 0, i32 1
  br label %1517

1517:                                             ; preds = %1515, %1505
  %1518 = phi %struct.CvNode1D* [ %1496, %1505 ], [ %1497, %1515 ]
  %1519 = phi %struct.CvNode1D** [ %1513, %1505 ], [ %1516, %1515 ]
  %1520 = phi %struct.CvNode1D* [ %1495, %1505 ], [ %1496, %1515 ]
  %1521 = load %struct.CvNode1D*, %struct.CvNode1D** %1519, align 8
  %1522 = icmp eq %struct.CvNode1D* %1521, null
  br i1 %1522, label %1523, label %1494

1523:                                             ; preds = %1517, %1478
  %1524 = phi %struct.CvNode1D* [ %1480, %1478 ], [ %1518, %1517 ]
  %1525 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %1481, i64 0, i32 1
  %1526 = load %struct.CvNode1D*, %struct.CvNode1D** %1525, align 8
  %1527 = add nsw i32 %1479, 1
  %1528 = icmp eq %struct.CvNode1D* %1526, null
  br i1 %1528, label %1529, label %1478

1529:                                             ; preds = %1523, %1473, %1468
  %1530 = phi %struct.CvNode1D* [ %1469, %1468 ], [ null, %1473 ], [ null, %1523 ]
  %1531 = phi %struct.CvNode1D* [ %1470, %1468 ], [ %1470, %1473 ], [ %1524, %1523 ]
  %1532 = phi i32 [ %1406, %1468 ], [ %1406, %1473 ], [ %1527, %1523 ]
  %1533 = phi i8 [ %1472, %1468 ], [ %1476, %1473 ], [ %1476, %1523 ]
  %1534 = and i8 %1533, 1
  %1535 = icmp eq i8 %1534, 0
  br i1 %1535, label %1536, label %1403

1536:                                             ; preds = %1529
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1294) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1293) #8
  br label %1936

1537:                                             ; preds = %1403
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1294) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1293) #8
  br label %1538

1538:                                             ; preds = %1599, %1537
  %1539 = phi i64 [ %1603, %1599 ], [ 0, %1537 ]
  %1540 = phi i32 [ %1602, %1599 ], [ 0, %1537 ]
  %1541 = phi i32 [ %1601, %1599 ], [ 0, %1537 ]
  %1542 = phi float [ %1600, %1599 ], [ 0x4415AF1D80000000, %1537 ]
  %1543 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %722, i64 %1539, i32 0
  %1544 = load float, float* %1543, align 8
  %1545 = getelementptr inbounds float*, float** %573, i64 %1539
  %1546 = load float*, float** %1545, align 8
  %1547 = getelementptr inbounds i8*, i8** %728, i64 %1539
  %1548 = load i8*, i8** %1547, align 8
  %1549 = trunc i64 %1539 to i32
  br i1 %1339, label %1577, label %1550

1550:                                             ; preds = %1538, %2008
  %1551 = phi i64 [ %2012, %2008 ], [ 0, %1538 ]
  %1552 = phi i32 [ %2011, %2008 ], [ %1540, %1538 ]
  %1553 = phi i32 [ %2010, %2008 ], [ %1541, %1538 ]
  %1554 = phi float [ %2009, %2008 ], [ %1542, %1538 ]
  %1555 = phi i64 [ %2013, %2008 ], [ %1340, %1538 ]
  %1556 = getelementptr inbounds i8, i8* %1548, i64 %1551
  %1557 = load i8, i8* %1556, align 1
  %1558 = icmp eq i8 %1557, 0
  br i1 %1558, label %1559, label %1569

1559:                                             ; preds = %1550
  %1560 = getelementptr inbounds float, float* %1546, i64 %1551
  %1561 = load float, float* %1560, align 4
  %1562 = fsub float %1561, %1544
  %1563 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1551, i32 0
  %1564 = load float, float* %1563, align 8
  %1565 = fsub float %1562, %1564
  %1566 = fcmp ogt float %1554, %1565
  br i1 %1566, label %1567, label %1569

1567:                                             ; preds = %1559
  %1568 = trunc i64 %1551 to i32
  br label %1569

1569:                                             ; preds = %1567, %1559, %1550
  %1570 = phi float [ %1554, %1550 ], [ %1565, %1567 ], [ %1554, %1559 ]
  %1571 = phi i32 [ %1553, %1550 ], [ %1549, %1567 ], [ %1553, %1559 ]
  %1572 = phi i32 [ %1552, %1550 ], [ %1568, %1567 ], [ %1552, %1559 ]
  %1573 = or i64 %1551, 1
  %1574 = getelementptr inbounds i8, i8* %1548, i64 %1573
  %1575 = load i8, i8* %1574, align 1
  %1576 = icmp eq i8 %1575, 0
  br i1 %1576, label %1998, label %2008

1577:                                             ; preds = %2008, %1538
  %1578 = phi float [ undef, %1538 ], [ %2009, %2008 ]
  %1579 = phi i32 [ undef, %1538 ], [ %2010, %2008 ]
  %1580 = phi i32 [ undef, %1538 ], [ %2011, %2008 ]
  %1581 = phi i64 [ 0, %1538 ], [ %2012, %2008 ]
  %1582 = phi i32 [ %1540, %1538 ], [ %2011, %2008 ]
  %1583 = phi i32 [ %1541, %1538 ], [ %2010, %2008 ]
  %1584 = phi float [ %1542, %1538 ], [ %2009, %2008 ]
  br i1 %1341, label %1599, label %1585

1585:                                             ; preds = %1577
  %1586 = getelementptr inbounds i8, i8* %1548, i64 %1581
  %1587 = load i8, i8* %1586, align 1
  %1588 = icmp eq i8 %1587, 0
  br i1 %1588, label %1589, label %1599

1589:                                             ; preds = %1585
  %1590 = getelementptr inbounds float, float* %1546, i64 %1581
  %1591 = load float, float* %1590, align 4
  %1592 = fsub float %1591, %1544
  %1593 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1581, i32 0
  %1594 = load float, float* %1593, align 8
  %1595 = fsub float %1592, %1594
  %1596 = fcmp ogt float %1584, %1595
  br i1 %1596, label %1597, label %1599

1597:                                             ; preds = %1589
  %1598 = trunc i64 %1581 to i32
  br label %1599

1599:                                             ; preds = %1597, %1589, %1585, %1577
  %1600 = phi float [ %1578, %1577 ], [ %1584, %1585 ], [ %1595, %1597 ], [ %1584, %1589 ]
  %1601 = phi i32 [ %1579, %1577 ], [ %1583, %1585 ], [ %1549, %1597 ], [ %1583, %1589 ]
  %1602 = phi i32 [ %1580, %1577 ], [ %1582, %1585 ], [ %1598, %1597 ], [ %1582, %1589 ]
  %1603 = add nuw nsw i64 %1539, 1
  %1604 = icmp eq i64 %1603, %1301
  br i1 %1604, label %1605, label %1538

1605:                                             ; preds = %1599
  %1606 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1344, i64 0, i32 2
  store i32 %1601, i32* %1606, align 8
  %1607 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1344, i64 0, i32 3
  store i32 %1602, i32* %1607, align 4
  %1608 = fcmp oeq float %1600, 0x4415AF1D80000000
  br i1 %1608, label %1609, label %1610

1609:                                             ; preds = %1605
  call void @abort() #9
  unreachable

1610:                                             ; preds = %1605
  %1611 = fcmp ult float %1600, %1317
  br i1 %1611, label %1612, label %1936

1612:                                             ; preds = %1610
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1318) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1318, i8 0, i64 32, i1 false) #8
  %1613 = load i32, i32* %1606, align 8
  %1614 = load i32, i32* %1607, align 4
  %1615 = sext i32 %1613 to i64
  %1616 = getelementptr inbounds i8*, i8** %728, i64 %1615
  %1617 = load i8*, i8** %1616, align 8
  %1618 = sext i32 %1614 to i64
  %1619 = getelementptr inbounds i8, i8* %1617, i64 %1618
  store i8 1, i8* %1619, align 1
  %1620 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %717, i64 %1615
  %1621 = bitcast %struct.CvNode2D** %1620 to i64*
  %1622 = load i64, i64* %1621, align 8
  %1623 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1344, i64 0, i32 1
  %1624 = bitcast [2 x %struct.CvNode2D*]* %1623 to i64*
  store i64 %1622, i64* %1624, align 8
  %1625 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %719, i64 %1618
  %1626 = bitcast %struct.CvNode2D** %1625 to i64*
  %1627 = load i64, i64* %1626, align 8
  %1628 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1344, i64 0, i32 1, i64 1
  %1629 = bitcast %struct.CvNode2D** %1628 to i64*
  store i64 %1627, i64* %1629, align 8
  %1630 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1344, i64 0, i32 0
  store float 0.000000e+00, float* %1630, align 8
  store %struct.CvNode2D* %1344, %struct.CvNode2D** %1620, align 8
  store %struct.CvNode2D* %1344, %struct.CvNode2D** %1625, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %86, i8 0, i64 %1320, i1 false) #8
  store %struct.CvNode2D* %1344, %struct.CvNode2D** %562, align 8
  %1631 = ptrtoint %struct.CvNode2D* %1344 to i64
  %1632 = sub i64 %1631, %569
  %1633 = ashr exact i64 %1632, 5
  %1634 = getelementptr inbounds i8, i8* %86, i64 %1633
  store i8 1, i8* %1634, align 1
  br label %1635

1635:                                             ; preds = %1736, %1612
  %1636 = phi i32 [ 1, %1612 ], [ %1738, %1736 ]
  %1637 = phi %struct.CvNode2D* [ %1344, %1612 ], [ %1739, %1736 ]
  %1638 = and i32 %1636, 1
  %1639 = icmp eq i32 %1638, 0
  br i1 %1639, label %1659, label %1640

1640:                                             ; preds = %1635
  %1641 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1637, i64 0, i32 2
  %1642 = load i32, i32* %1641, align 8
  %1643 = sext i32 %1642 to i64
  %1644 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %717, i64 %1643
  %1645 = load %struct.CvNode2D*, %struct.CvNode2D** %1644, align 8
  %1646 = icmp eq %struct.CvNode2D* %1645, null
  br i1 %1646, label %1689, label %1647

1647:                                             ; preds = %1640, %1655
  %1648 = phi %struct.CvNode2D* [ %1657, %1655 ], [ %1645, %1640 ]
  %1649 = ptrtoint %struct.CvNode2D* %1648 to i64
  %1650 = sub i64 %1649, %569
  %1651 = ashr exact i64 %1650, 5
  %1652 = getelementptr inbounds i8, i8* %86, i64 %1651
  %1653 = load i8, i8* %1652, align 1
  %1654 = icmp eq i8 %1653, 0
  br i1 %1654, label %1691, label %1655

1655:                                             ; preds = %1647
  %1656 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1648, i64 0, i32 1, i64 0
  %1657 = load %struct.CvNode2D*, %struct.CvNode2D** %1656, align 8
  %1658 = icmp eq %struct.CvNode2D* %1657, null
  br i1 %1658, label %1689, label %1647

1659:                                             ; preds = %1635
  %1660 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1637, i64 0, i32 3
  %1661 = load i32, i32* %1660, align 4
  %1662 = sext i32 %1661 to i64
  %1663 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %719, i64 %1662
  %1664 = load %struct.CvNode2D*, %struct.CvNode2D** %1663, align 8
  %1665 = icmp eq %struct.CvNode2D* %1664, null
  br i1 %1665, label %1680, label %1666

1666:                                             ; preds = %1659, %1676
  %1667 = phi %struct.CvNode2D* [ %1678, %1676 ], [ %1664, %1659 ]
  %1668 = ptrtoint %struct.CvNode2D* %1667 to i64
  %1669 = sub i64 %1668, %569
  %1670 = ashr exact i64 %1669, 5
  %1671 = getelementptr inbounds i8, i8* %86, i64 %1670
  %1672 = load i8, i8* %1671, align 1
  %1673 = icmp ne i8 %1672, 0
  %1674 = icmp ne %struct.CvNode2D* %1667, %1344
  %1675 = and i1 %1674, %1673
  br i1 %1675, label %1676, label %1680

1676:                                             ; preds = %1666
  %1677 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1667, i64 0, i32 1, i64 1
  %1678 = load %struct.CvNode2D*, %struct.CvNode2D** %1677, align 8
  %1679 = icmp eq %struct.CvNode2D* %1678, null
  br i1 %1679, label %1680, label %1666

1680:                                             ; preds = %1676, %1666, %1659
  %1681 = phi %struct.CvNode2D* [ null, %1659 ], [ null, %1676 ], [ %1667, %1666 ]
  %1682 = icmp eq %struct.CvNode2D* %1681, %1344
  br i1 %1682, label %1742, label %1683

1683:                                             ; preds = %1680
  %1684 = icmp eq %struct.CvNode2D* %1681, null
  br i1 %1684, label %1689, label %1685

1685:                                             ; preds = %1683
  %1686 = ptrtoint %struct.CvNode2D* %1681 to i64
  %1687 = sub i64 %1686, %569
  %1688 = ashr exact i64 %1687, 5
  br label %1691

1689:                                             ; preds = %1655, %1683, %1640
  %1690 = sext i32 %1636 to i64
  br label %1697

1691:                                             ; preds = %1647, %1685
  %1692 = phi i64 [ %1688, %1685 ], [ %1651, %1647 ]
  %1693 = phi %struct.CvNode2D* [ %1681, %1685 ], [ %1648, %1647 ]
  %1694 = add nsw i32 %1636, 1
  %1695 = sext i32 %1636 to i64
  %1696 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1695
  store %struct.CvNode2D* %1693, %struct.CvNode2D** %1696, align 8
  br label %1736

1697:                                             ; preds = %1716, %1689
  %1698 = phi i64 [ %1690, %1689 ], [ %1700, %1716 ]
  %1699 = and i64 %1698, 1
  %1700 = add nsw i64 %1698, -1
  %1701 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1700
  %1702 = load %struct.CvNode2D*, %struct.CvNode2D** %1701, align 8
  %1703 = ptrtoint %struct.CvNode2D* %1702 to i64
  br label %1704

1704:                                             ; preds = %1709, %1697
  %1705 = phi %struct.CvNode2D* [ %1702, %1697 ], [ %1707, %1709 ]
  %1706 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1705, i64 0, i32 1, i64 %1699
  %1707 = load %struct.CvNode2D*, %struct.CvNode2D** %1706, align 8
  %1708 = icmp eq %struct.CvNode2D* %1707, null
  br i1 %1708, label %1716, label %1709

1709:                                             ; preds = %1704
  %1710 = ptrtoint %struct.CvNode2D* %1707 to i64
  %1711 = sub i64 %1710, %569
  %1712 = ashr exact i64 %1711, 5
  %1713 = getelementptr inbounds i8, i8* %86, i64 %1712
  %1714 = load i8, i8* %1713, align 1
  %1715 = icmp eq i8 %1714, 0
  br i1 %1715, label %1721, label %1704

1716:                                             ; preds = %1704
  %1717 = sub i64 %1703, %569
  %1718 = ashr exact i64 %1717, 5
  %1719 = getelementptr inbounds i8, i8* %86, i64 %1718
  store i8 0, i8* %1719, align 1
  %1720 = icmp sgt i64 %1700, 0
  br i1 %1720, label %1697, label %1721

1721:                                             ; preds = %1716, %1709
  %1722 = phi i64 [ %1698, %1709 ], [ %1700, %1716 ]
  %1723 = trunc i64 %1722 to i32
  %1724 = shl i64 %1722, 32
  %1725 = add i64 %1724, -4294967296
  %1726 = ashr exact i64 %1725, 32
  %1727 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1726
  %1728 = bitcast %struct.CvNode2D** %1727 to i64*
  %1729 = load i64, i64* %1728, align 8
  %1730 = sub i64 %1729, %569
  %1731 = ashr exact i64 %1730, 5
  %1732 = getelementptr inbounds i8, i8* %86, i64 %1731
  store i8 0, i8* %1732, align 1
  store %struct.CvNode2D* %1707, %struct.CvNode2D** %1727, align 8
  %1733 = ptrtoint %struct.CvNode2D* %1707 to i64
  %1734 = sub i64 %1733, %569
  %1735 = ashr exact i64 %1734, 5
  br label %1736

1736:                                             ; preds = %1721, %1691
  %1737 = phi i64 [ %1735, %1721 ], [ %1692, %1691 ]
  %1738 = phi i32 [ %1723, %1721 ], [ %1694, %1691 ]
  %1739 = phi %struct.CvNode2D* [ %1707, %1721 ], [ %1693, %1691 ]
  %1740 = getelementptr inbounds i8, i8* %86, i64 %1737
  store i8 1, i8* %1740, align 1
  %1741 = icmp sgt i32 %1738, 0
  br i1 %1741, label %1635, label %1742

1742:                                             ; preds = %1736, %1680
  %1743 = phi i32 [ %1738, %1736 ], [ %1636, %1680 ]
  %1744 = icmp eq i32 %1743, 0
  br i1 %1744, label %1924, label %1745

1745:                                             ; preds = %1742
  %1746 = icmp sgt i32 %1743, 1
  br i1 %1746, label %1747, label %1778

1747:                                             ; preds = %1745
  %1748 = sext i32 %1743 to i64
  %1749 = add nsw i64 %1748, -2
  %1750 = lshr i64 %1749, 1
  %1751 = add nuw i64 %1750, 1
  %1752 = and i64 %1751, 3
  %1753 = icmp ult i64 %1749, 6
  br i1 %1753, label %1756, label %1754

1754:                                             ; preds = %1747
  %1755 = sub i64 %1751, %1752
  br label %1791

1756:                                             ; preds = %1791, %1747
  %1757 = phi float [ undef, %1747 ], [ %1825, %1791 ]
  %1758 = phi %struct.CvNode2D* [ undef, %1747 ], [ %1826, %1791 ]
  %1759 = phi i64 [ 1, %1747 ], [ %1827, %1791 ]
  %1760 = phi %struct.CvNode2D* [ null, %1747 ], [ %1826, %1791 ]
  %1761 = phi float [ 0x4415AF1D80000000, %1747 ], [ %1825, %1791 ]
  %1762 = icmp eq i64 %1752, 0
  br i1 %1762, label %1778, label %1763

1763:                                             ; preds = %1756, %1763
  %1764 = phi i64 [ %1775, %1763 ], [ %1759, %1756 ]
  %1765 = phi %struct.CvNode2D* [ %1774, %1763 ], [ %1760, %1756 ]
  %1766 = phi float [ %1773, %1763 ], [ %1761, %1756 ]
  %1767 = phi i64 [ %1776, %1763 ], [ %1752, %1756 ]
  %1768 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1764
  %1769 = load %struct.CvNode2D*, %struct.CvNode2D** %1768, align 8
  %1770 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1769, i64 0, i32 0
  %1771 = load float, float* %1770, align 8
  %1772 = fcmp ogt float %1766, %1771
  %1773 = select i1 %1772, float %1771, float %1766
  %1774 = select i1 %1772, %struct.CvNode2D* %1769, %struct.CvNode2D* %1765
  %1775 = add nuw nsw i64 %1764, 2
  %1776 = add i64 %1767, -1
  %1777 = icmp eq i64 %1776, 0
  br i1 %1777, label %1778, label %1763, !llvm.loop !69

1778:                                             ; preds = %1756, %1763, %1745
  %1779 = phi float [ 0x4415AF1D80000000, %1745 ], [ %1757, %1756 ], [ %1773, %1763 ]
  %1780 = phi %struct.CvNode2D* [ null, %1745 ], [ %1758, %1756 ], [ %1774, %1763 ]
  %1781 = icmp sgt i32 %1743, 0
  br i1 %1781, label %1782, label %1880

1782:                                             ; preds = %1778
  %1783 = sext i32 %1743 to i64
  %1784 = add nsw i64 %1783, -1
  %1785 = lshr i64 %1784, 1
  %1786 = add nuw i64 %1785, 1
  %1787 = and i64 %1786, 1
  %1788 = icmp eq i64 %1785, 0
  br i1 %1788, label %1863, label %1789

1789:                                             ; preds = %1782
  %1790 = sub nuw i64 %1786, %1787
  br label %1830

1791:                                             ; preds = %1791, %1754
  %1792 = phi i64 [ 1, %1754 ], [ %1827, %1791 ]
  %1793 = phi %struct.CvNode2D* [ null, %1754 ], [ %1826, %1791 ]
  %1794 = phi float [ 0x4415AF1D80000000, %1754 ], [ %1825, %1791 ]
  %1795 = phi i64 [ %1755, %1754 ], [ %1828, %1791 ]
  %1796 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1792
  %1797 = load %struct.CvNode2D*, %struct.CvNode2D** %1796, align 8
  %1798 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1797, i64 0, i32 0
  %1799 = load float, float* %1798, align 8
  %1800 = fcmp ogt float %1794, %1799
  %1801 = select i1 %1800, float %1799, float %1794
  %1802 = select i1 %1800, %struct.CvNode2D* %1797, %struct.CvNode2D* %1793
  %1803 = add nuw nsw i64 %1792, 2
  %1804 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1803
  %1805 = load %struct.CvNode2D*, %struct.CvNode2D** %1804, align 8
  %1806 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1805, i64 0, i32 0
  %1807 = load float, float* %1806, align 8
  %1808 = fcmp ogt float %1801, %1807
  %1809 = select i1 %1808, float %1807, float %1801
  %1810 = select i1 %1808, %struct.CvNode2D* %1805, %struct.CvNode2D* %1802
  %1811 = add nuw nsw i64 %1792, 4
  %1812 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1811
  %1813 = load %struct.CvNode2D*, %struct.CvNode2D** %1812, align 8
  %1814 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1813, i64 0, i32 0
  %1815 = load float, float* %1814, align 8
  %1816 = fcmp ogt float %1809, %1815
  %1817 = select i1 %1816, float %1815, float %1809
  %1818 = select i1 %1816, %struct.CvNode2D* %1813, %struct.CvNode2D* %1810
  %1819 = add nuw nsw i64 %1792, 6
  %1820 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1819
  %1821 = load %struct.CvNode2D*, %struct.CvNode2D** %1820, align 8
  %1822 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1821, i64 0, i32 0
  %1823 = load float, float* %1822, align 8
  %1824 = fcmp ogt float %1817, %1823
  %1825 = select i1 %1824, float %1823, float %1817
  %1826 = select i1 %1824, %struct.CvNode2D* %1821, %struct.CvNode2D* %1818
  %1827 = add nuw nsw i64 %1792, 8
  %1828 = add i64 %1795, -4
  %1829 = icmp eq i64 %1828, 0
  br i1 %1829, label %1756, label %1791

1830:                                             ; preds = %1830, %1789
  %1831 = phi i64 [ 0, %1789 ], [ %1860, %1830 ]
  %1832 = phi i64 [ %1790, %1789 ], [ %1861, %1830 ]
  %1833 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1831
  %1834 = load %struct.CvNode2D*, %struct.CvNode2D** %1833, align 8
  %1835 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1834, i64 0, i32 0
  %1836 = load float, float* %1835, align 8
  %1837 = fadd float %1779, %1836
  %1838 = or i64 %1831, 1
  %1839 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1838
  %1840 = load %struct.CvNode2D*, %struct.CvNode2D** %1839, align 8
  %1841 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1840, i64 0, i32 0
  %1842 = load float, float* %1841, align 8
  %1843 = fsub float %1842, %1779
  store float %1837, float* %1835, align 8
  %1844 = load %struct.CvNode2D*, %struct.CvNode2D** %1839, align 8
  %1845 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1844, i64 0, i32 0
  store float %1843, float* %1845, align 8
  %1846 = or i64 %1831, 2
  %1847 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1846
  %1848 = load %struct.CvNode2D*, %struct.CvNode2D** %1847, align 8
  %1849 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1848, i64 0, i32 0
  %1850 = load float, float* %1849, align 8
  %1851 = fadd float %1779, %1850
  %1852 = or i64 %1831, 3
  %1853 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1852
  %1854 = load %struct.CvNode2D*, %struct.CvNode2D** %1853, align 8
  %1855 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1854, i64 0, i32 0
  %1856 = load float, float* %1855, align 8
  %1857 = fsub float %1856, %1779
  store float %1851, float* %1849, align 8
  %1858 = load %struct.CvNode2D*, %struct.CvNode2D** %1853, align 8
  %1859 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1858, i64 0, i32 0
  store float %1857, float* %1859, align 8
  %1860 = add nuw nsw i64 %1831, 4
  %1861 = add i64 %1832, -2
  %1862 = icmp eq i64 %1861, 0
  br i1 %1862, label %1863, label %1830

1863:                                             ; preds = %1830, %1782
  %1864 = phi i64 [ 0, %1782 ], [ %1860, %1830 ]
  %1865 = icmp eq i64 %1787, 0
  br i1 %1865, label %1880, label %1866

1866:                                             ; preds = %1863
  %1867 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1864
  %1868 = load %struct.CvNode2D*, %struct.CvNode2D** %1867, align 8
  %1869 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1868, i64 0, i32 0
  %1870 = load float, float* %1869, align 8
  %1871 = fadd float %1779, %1870
  %1872 = or i64 %1864, 1
  %1873 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %562, i64 %1872
  %1874 = load %struct.CvNode2D*, %struct.CvNode2D** %1873, align 8
  %1875 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1874, i64 0, i32 0
  %1876 = load float, float* %1875, align 8
  %1877 = fsub float %1876, %1779
  store float %1871, float* %1869, align 8
  %1878 = load %struct.CvNode2D*, %struct.CvNode2D** %1873, align 8
  %1879 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1878, i64 0, i32 0
  store float %1877, float* %1879, align 8
  br label %1880

1880:                                             ; preds = %1866, %1863, %1778
  %1881 = icmp eq %struct.CvNode2D* %1780, null
  br i1 %1881, label %1882, label %1883

1882:                                             ; preds = %1880
  call void @abort() #9
  unreachable

1883:                                             ; preds = %1880
  %1884 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1780, i64 0, i32 2
  %1885 = load i32, i32* %1884, align 8
  %1886 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1780, i64 0, i32 3
  %1887 = load i32, i32* %1886, align 4
  %1888 = sext i32 %1885 to i64
  %1889 = getelementptr inbounds i8*, i8** %728, i64 %1888
  %1890 = load i8*, i8** %1889, align 8
  %1891 = sext i32 %1887 to i64
  %1892 = getelementptr inbounds i8, i8* %1890, i64 %1891
  store i8 0, i8* %1892, align 1
  %1893 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %717, i64 %1888
  %1894 = bitcast %struct.CvNode2D** %1893 to i64*
  %1895 = load i64, i64* %1894, align 8
  store i64 %1895, i64* %1322, align 8
  br label %1896

1896:                                             ; preds = %1901, %1883
  %1897 = phi %struct.CvNode2D* [ %13, %1883 ], [ %1899, %1901 ]
  %1898 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1897, i64 0, i32 1, i64 0
  %1899 = load %struct.CvNode2D*, %struct.CvNode2D** %1898, align 8
  %1900 = icmp eq %struct.CvNode2D* %1899, %1780
  br i1 %1900, label %1904, label %1901

1901:                                             ; preds = %1896
  %1902 = icmp eq %struct.CvNode2D* %1899, null
  br i1 %1902, label %1903, label %1896

1903:                                             ; preds = %1901
  call void @abort() #9
  unreachable

1904:                                             ; preds = %1896
  %1905 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1897, i64 0, i32 1, i64 0
  %1906 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1780, i64 0, i32 1, i64 0
  %1907 = bitcast %struct.CvNode2D** %1906 to i64*
  %1908 = load i64, i64* %1907, align 8
  %1909 = bitcast %struct.CvNode2D** %1905 to i64*
  store i64 %1908, i64* %1909, align 8
  %1910 = load i64, i64* %1322, align 8
  store i64 %1910, i64* %1894, align 8
  %1911 = getelementptr inbounds %struct.CvNode2D*, %struct.CvNode2D** %719, i64 %1891
  %1912 = bitcast %struct.CvNode2D** %1911 to i64*
  %1913 = load i64, i64* %1912, align 8
  store i64 %1913, i64* %1324, align 8
  %1914 = inttoptr i64 %1913 to %struct.CvNode2D*
  %1915 = icmp eq %struct.CvNode2D* %1780, %1914
  br i1 %1915, label %1928, label %1916

1916:                                             ; preds = %1904, %1919
  %1917 = phi %struct.CvNode2D* [ %1921, %1919 ], [ %1914, %1904 ]
  %1918 = icmp eq %struct.CvNode2D* %1917, null
  br i1 %1918, label %1923, label %1919

1919:                                             ; preds = %1916
  %1920 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1917, i64 0, i32 1, i64 1
  %1921 = load %struct.CvNode2D*, %struct.CvNode2D** %1920, align 8
  %1922 = icmp eq %struct.CvNode2D* %1921, %1780
  br i1 %1922, label %1925, label %1916

1923:                                             ; preds = %1916
  call void @abort() #9
  unreachable

1924:                                             ; preds = %1742
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1318) #8
  call void @abort() #9
  unreachable

1925:                                             ; preds = %1919
  %1926 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1917, i64 0, i32 1, i64 1
  %1927 = bitcast %struct.CvNode2D** %1926 to i64*
  br label %1928

1928:                                             ; preds = %1925, %1904
  %1929 = phi i64* [ %1927, %1925 ], [ %1324, %1904 ]
  %1930 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1780, i64 0, i32 1, i64 1
  %1931 = bitcast %struct.CvNode2D** %1930 to i64*
  %1932 = load i64, i64* %1931, align 8
  store i64 %1932, i64* %1929, align 8
  %1933 = load i64, i64* %1324, align 8
  store i64 %1933, i64* %1912, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1318) #8
  %1934 = add nuw nsw i32 %1343, 1
  %1935 = icmp eq i32 %1934, 500
  br i1 %1935, label %1936, label %1342

1936:                                             ; preds = %1610, %1928, %1536, %1286
  %1937 = phi %struct.CvNode2D* [ %1287, %1286 ], [ %1344, %1536 ], [ %1344, %1610 ], [ %1780, %1928 ]
  %1938 = bitcast i8* %567 to %struct.CvNode2D*
  %1939 = icmp ugt %struct.CvNode2D* %1288, %1938
  br i1 %1939, label %1940, label %1972

1940:                                             ; preds = %1936, %1968
  %1941 = phi double [ %1969, %1968 ], [ 0.000000e+00, %1936 ]
  %1942 = phi %struct.CvNode2D* [ %1970, %1968 ], [ %1938, %1936 ]
  %1943 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1942, i64 0, i32 0
  %1944 = load float, float* %1943, align 8
  %1945 = icmp eq %struct.CvNode2D* %1942, %1937
  br i1 %1945, label %1968, label %1946

1946:                                             ; preds = %1940
  %1947 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1942, i64 0, i32 3
  %1948 = load i32, i32* %1947, align 4
  %1949 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1942, i64 0, i32 2
  %1950 = load i32, i32* %1949, align 8
  %1951 = sext i32 %1950 to i64
  %1952 = getelementptr inbounds i32, i32* %74, i64 %1951
  %1953 = load i32, i32* %1952, align 4
  %1954 = sext i32 %1948 to i64
  %1955 = getelementptr inbounds i32, i32* %79, i64 %1954
  %1956 = load i32, i32* %1955, align 4
  %1957 = or i32 %1956, %1953
  %1958 = icmp sgt i32 %1957, -1
  br i1 %1958, label %1959, label %1968

1959:                                             ; preds = %1946
  %1960 = fpext float %1944 to double
  %1961 = getelementptr inbounds float*, float** %573, i64 %1951
  %1962 = load float*, float** %1961, align 8
  %1963 = getelementptr inbounds float, float* %1962, i64 %1954
  %1964 = load float, float* %1963, align 4
  %1965 = fpext float %1964 to double
  %1966 = fmul double %1960, %1965
  %1967 = fadd double %1941, %1966
  br label %1968

1968:                                             ; preds = %1946, %1959, %1940
  %1969 = phi double [ %1941, %1940 ], [ %1967, %1959 ], [ %1941, %1946 ]
  %1970 = getelementptr inbounds %struct.CvNode2D, %struct.CvNode2D* %1942, i64 1
  %1971 = icmp ult %struct.CvNode2D* %1942, %1287
  br i1 %1971, label %1940, label %1972

1972:                                             ; preds = %1968, %1936
  %1973 = phi double [ 0.000000e+00, %1936 ], [ %1969, %1968 ]
  %1974 = fpext float %490 to double
  %1975 = fdiv double %1973, %1974
  %1976 = fptrunc double %1975 to float
  br label %1977

1977:                                             ; preds = %483, %1972
  %1978 = phi float [ %1976, %1972 ], [ %486, %483 ]
  %1979 = load float*, float** %48, align 8
  %1980 = icmp eq float* %1979, null
  br i1 %1980, label %1985, label %1981

1981:                                             ; preds = %1977
  %1982 = ptrtoint float* %1979 to i64
  %1983 = bitcast float** %49 to i64*
  store i64 %1982, i64* %1983, align 8
  %1984 = bitcast float* %1979 to i8*
  call void @_ZdlPv(i8* %1984) #10
  br label %1985

1985:                                             ; preds = %1977, %1981
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %47) #8
  %1986 = load float*, float** %44, align 8
  %1987 = icmp eq float* %1986, null
  br i1 %1987, label %1992, label %1988

1988:                                             ; preds = %1985
  %1989 = ptrtoint float* %1986 to i64
  %1990 = bitcast float** %45 to i64*
  store i64 %1989, i64* %1990, align 8
  %1991 = bitcast float* %1986 to i8*
  call void @_ZdlPv(i8* %1991) #10
  br label %1992

1992:                                             ; preds = %1985, %1988
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #8
  %1993 = load i8*, i8** %18, align 8
  %1994 = icmp eq i8* %1993, null
  br i1 %1994, label %1997, label %1995

1995:                                             ; preds = %1992
  %1996 = ptrtoint i8* %1993 to i64
  store i64 %1996, i64* %68, align 8
  call void @_ZdlPv(i8* nonnull %1993) #10
  br label %1997

1997:                                             ; preds = %1992, %1995
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #8
  ret float %1978

1998:                                             ; preds = %1569
  %1999 = getelementptr inbounds float, float* %1546, i64 %1573
  %2000 = load float, float* %1999, align 4
  %2001 = fsub float %2000, %1544
  %2002 = getelementptr inbounds %struct.CvNode1D, %struct.CvNode1D* %725, i64 %1573, i32 0
  %2003 = load float, float* %2002, align 8
  %2004 = fsub float %2001, %2003
  %2005 = fcmp ogt float %1570, %2004
  br i1 %2005, label %2006, label %2008

2006:                                             ; preds = %1998
  %2007 = trunc i64 %1573 to i32
  br label %2008

2008:                                             ; preds = %2006, %1998, %1569
  %2009 = phi float [ %1570, %1569 ], [ %2004, %2006 ], [ %1570, %1998 ]
  %2010 = phi i32 [ %1571, %1569 ], [ %1549, %2006 ], [ %1571, %1998 ]
  %2011 = phi i32 [ %1572, %1569 ], [ %2007, %2006 ], [ %1572, %1998 ]
  %2012 = add nuw nsw i64 %1551, 2
  %2013 = add i64 %1555, -2
  %2014 = icmp eq i64 %2013, 0
  br i1 %2014, label %1577, label %1550

2015:                                             ; preds = %907
  store float %910, float* %913, align 8
  br label %2016

2016:                                             ; preds = %2015, %907
  %2017 = add nuw nsw i64 %896, 2
  %2018 = add i64 %898, -2
  %2019 = icmp eq i64 %2018, 0
  br i1 %2019, label %916, label %895
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { i8, double } @_ZN6opencv3EMDERKNS_17PointDistributionES2_(%"struct.opencv::PointDistribution"* nocapture readonly dereferenceable(56), %"struct.opencv::PointDistribution"* nocapture readonly dereferenceable(56)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %0, i64 0, i32 2, i32 0, i32 1
  %5 = bitcast %"class.std::__1::vector"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.1"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 24
  %11 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %0, i64 0, i32 0, i32 0, i32 1
  %12 = bitcast float** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %"struct.opencv::PointDistribution"* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %13, %15
  %17 = ashr exact i64 %16, 2
  %18 = icmp ne i64 %10, %17
  %19 = inttoptr i64 %15 to float*
  %20 = inttoptr i64 %13 to float*
  %21 = inttoptr i64 %8 to %"class.std::__1::vector"*
  %22 = inttoptr i64 %6 to %"class.std::__1::vector"*
  %23 = icmp eq float* %19, %20
  %24 = or i1 %23, %18
  br i1 %24, label %263, label %27

25:                                               ; preds = %27
  %26 = icmp eq float* %31, %20
  br i1 %26, label %34, label %27

27:                                               ; preds = %2, %25
  %28 = phi float* [ %31, %25 ], [ %19, %2 ]
  %29 = load float, float* %28, align 4
  %30 = fcmp uge float %29, 0.000000e+00
  %31 = getelementptr inbounds float, float* %28, i64 1
  br i1 %30, label %25, label %263

32:                                               ; preds = %34
  %33 = icmp eq float* %38, %20
  br i1 %33, label %263, label %34

34:                                               ; preds = %25, %32
  %35 = phi float* [ %38, %32 ], [ %19, %25 ]
  %36 = load float, float* %35, align 4
  %37 = fcmp oeq float %36, 0.000000e+00
  %38 = getelementptr inbounds float, float* %35, i64 1
  br i1 %37, label %32, label %39

39:                                               ; preds = %34
  %40 = icmp eq %"class.std::__1::vector"* %21, %22
  br i1 %40, label %58, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %0, i64 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = sext i32 %43 to i64
  br label %47

45:                                               ; preds = %47
  %46 = icmp eq %"class.std::__1::vector"* %57, %22
  br i1 %46, label %58, label %47

47:                                               ; preds = %45, %41
  %48 = phi %"class.std::__1::vector"* [ %21, %41 ], [ %57, %45 ]
  %49 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 0, i32 0, i32 1
  %50 = bitcast float** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast %"class.std::__1::vector"* %48 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = sub i64 %51, %53
  %55 = ashr exact i64 %54, 2
  %56 = icmp eq i64 %55, %44
  %57 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %48, i64 1
  br i1 %56, label %45, label %263

58:                                               ; preds = %45, %39
  %59 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 2
  %60 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 2, i32 0, i32 1
  %61 = bitcast %"class.std::__1::vector"** %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = bitcast %"class.std::__1::vector.1"* %59 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = sub i64 %62, %64
  %66 = sdiv exact i64 %65, 24
  %67 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 0, i32 0, i32 1
  %68 = bitcast float** %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = bitcast %"struct.opencv::PointDistribution"* %1 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = sub i64 %69, %71
  %73 = ashr exact i64 %72, 2
  %74 = icmp ne i64 %66, %73
  %75 = inttoptr i64 %71 to float*
  %76 = inttoptr i64 %69 to float*
  %77 = inttoptr i64 %64 to %"class.std::__1::vector"*
  %78 = inttoptr i64 %62 to %"class.std::__1::vector"*
  %79 = icmp eq float* %75, %76
  %80 = or i1 %79, %74
  br i1 %80, label %263, label %83

81:                                               ; preds = %83
  %82 = icmp eq float* %87, %76
  br i1 %82, label %90, label %83

83:                                               ; preds = %58, %81
  %84 = phi float* [ %87, %81 ], [ %75, %58 ]
  %85 = load float, float* %84, align 4
  %86 = fcmp uge float %85, 0.000000e+00
  %87 = getelementptr inbounds float, float* %84, i64 1
  br i1 %86, label %81, label %263

88:                                               ; preds = %90
  %89 = icmp eq float* %94, %76
  br i1 %89, label %263, label %90

90:                                               ; preds = %81, %88
  %91 = phi float* [ %94, %88 ], [ %75, %81 ]
  %92 = load float, float* %91, align 4
  %93 = fcmp oeq float %92, 0.000000e+00
  %94 = getelementptr inbounds float, float* %91, i64 1
  br i1 %93, label %88, label %95

95:                                               ; preds = %90
  %96 = icmp eq %"class.std::__1::vector"* %77, %78
  %97 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %1, i64 0, i32 1
  %98 = load i32, i32* %97, align 8
  br i1 %96, label %114, label %99

99:                                               ; preds = %95
  %100 = sext i32 %98 to i64
  br label %103

101:                                              ; preds = %103
  %102 = icmp eq %"class.std::__1::vector"* %113, %78
  br i1 %102, label %114, label %103

103:                                              ; preds = %101, %99
  %104 = phi %"class.std::__1::vector"* [ %77, %99 ], [ %113, %101 ]
  %105 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %104, i64 0, i32 0, i32 1
  %106 = bitcast float** %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = bitcast %"class.std::__1::vector"* %104 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = sub i64 %107, %109
  %111 = ashr exact i64 %110, 2
  %112 = icmp eq i64 %111, %100
  %113 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %104, i64 1
  br i1 %112, label %101, label %263

114:                                              ; preds = %101, %95
  %115 = getelementptr inbounds %"struct.opencv::PointDistribution", %"struct.opencv::PointDistribution"* %0, i64 0, i32 1
  %116 = load i32, i32* %115, align 8
  %117 = icmp ne i32 %116, %98
  %118 = icmp eq i32 %116, 0
  %119 = or i1 %118, %117
  br i1 %119, label %263, label %120

120:                                              ; preds = %114
  %121 = add nsw i32 %98, 1
  %122 = icmp slt i32 %121, 0
  %123 = icmp ne i64 %9, 0
  %124 = and i1 %123, %122
  br i1 %124, label %133, label %125, !prof !70

125:                                              ; preds = %120
  %126 = sext i32 %121 to i64
  %127 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %10, i64 %126) #8
  %128 = extractvalue { i64, i1 } %127, 1
  %129 = extractvalue { i64, i1 } %127, 0
  %130 = select i1 %128, i64 0, i64 %129
  %131 = xor i1 %128, true
  %132 = zext i1 %131 to i8
  br label %133

133:                                              ; preds = %125, %120
  %134 = phi i64 [ 0, %120 ], [ %130, %125 ]
  %135 = phi i8 [ 0, %120 ], [ %132, %125 ]
  %136 = icmp ne i64 %65, 0
  %137 = and i1 %136, %122
  br i1 %137, label %146, label %138, !prof !70

138:                                              ; preds = %133
  %139 = sext i32 %121 to i64
  %140 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %66, i64 %139) #8
  %141 = extractvalue { i64, i1 } %140, 1
  %142 = extractvalue { i64, i1 } %140, 0
  %143 = select i1 %141, i64 0, i64 %142
  %144 = xor i1 %141, true
  %145 = zext i1 %144 to i8
  br label %146

146:                                              ; preds = %138, %133
  %147 = phi i64 [ 0, %133 ], [ %143, %138 ]
  %148 = phi i8 [ 0, %133 ], [ %145, %138 ]
  %149 = icmp eq i8 %135, 0
  br i1 %149, label %160, label %150

150:                                              ; preds = %146
  %151 = zext i64 %134 to i65
  %152 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %151, i65 1) #8
  %153 = extractvalue { i65, i1 } %152, 1
  %154 = extractvalue { i65, i1 } %152, 0
  %155 = trunc i65 %154 to i64
  %156 = icmp slt i65 %154, 0
  %157 = or i1 %153, %156
  %158 = xor i1 %157, true
  %159 = zext i1 %158 to i8
  br label %160

160:                                              ; preds = %150, %146
  %161 = phi i64 [ %155, %150 ], [ 0, %146 ]
  %162 = phi i8 [ %159, %150 ], [ 0, %146 ]
  %163 = icmp eq i8 %148, 0
  br i1 %163, label %173, label %164

164:                                              ; preds = %160
  %165 = zext i64 %147 to i65
  %166 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %165, i65 1) #8
  %167 = extractvalue { i65, i1 } %166, 1
  %168 = extractvalue { i65, i1 } %166, 0
  %169 = trunc i65 %168 to i64
  %170 = icmp slt i65 %168, 0
  %171 = or i1 %167, %170
  %172 = xor i1 %171, true
  br label %173

173:                                              ; preds = %164, %160
  %174 = phi i64 [ %169, %164 ], [ 0, %160 ]
  %175 = phi i1 [ %172, %164 ], [ false, %160 ]
  %176 = icmp ne i8 %162, 0
  %177 = and i1 %176, %175
  %178 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %161, i64 %174) #8
  %179 = extractvalue { i64, i1 } %178, 1
  %180 = extractvalue { i64, i1 } %178, 0
  %181 = xor i1 %179, true
  %182 = select i1 %177, i64 %180, i64 0
  %183 = and i1 %177, %181
  %184 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %182, i64 9) #8
  %185 = extractvalue { i64, i1 } %184, 1
  %186 = extractvalue { i64, i1 } %184, 0
  %187 = xor i1 %185, true
  %188 = select i1 %183, i64 %186, i64 0
  %189 = and i1 %183, %187
  %190 = icmp ne i8 %135, 0
  %191 = icmp ne i8 %148, 0
  %192 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %134, i64 %147) #8
  %193 = extractvalue { i64, i1 } %192, 1
  %194 = and i1 %190, %191
  %195 = xor i1 %194, true
  %196 = or i1 %193, %195
  br i1 %196, label %213, label %197

197:                                              ; preds = %173
  %198 = extractvalue { i64, i1 } %192, 0
  %199 = zext i64 %198 to i65
  %200 = select i1 %194, i65 %199, i65 0
  %201 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %200, i65 2) #8
  %202 = extractvalue { i65, i1 } %201, 1
  %203 = extractvalue { i65, i1 } %201, 0
  %204 = trunc i65 %203 to i64
  %205 = icmp slt i65 %203, 0
  %206 = or i1 %202, %205
  %207 = xor i1 %206, true
  %208 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %204, i64 72) #8
  %209 = extractvalue { i64, i1 } %208, 1
  %210 = extractvalue { i64, i1 } %208, 0
  %211 = xor i1 %209, true
  %212 = select i1 %206, i64 0, i64 %210
  br label %213

213:                                              ; preds = %197, %173
  %214 = phi i1 [ true, %173 ], [ %211, %197 ]
  %215 = phi i1 [ false, %173 ], [ %207, %197 ]
  %216 = phi i64 [ 0, %173 ], [ %212, %197 ]
  %217 = and i1 %214, %215
  %218 = and i1 %189, %217
  %219 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %188, i64 %216) #8
  %220 = extractvalue { i64, i1 } %219, 1
  %221 = extractvalue { i64, i1 } %219, 0
  %222 = xor i1 %220, true
  %223 = select i1 %218, i64 %221, i64 0
  %224 = and i1 %218, %222
  br i1 %149, label %239, label %225

225:                                              ; preds = %213
  %226 = zext i64 %134 to i65
  %227 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %226, i65 1) #8
  %228 = extractvalue { i65, i1 } %227, 1
  %229 = extractvalue { i65, i1 } %227, 0
  %230 = trunc i65 %229 to i64
  %231 = icmp slt i65 %229, 0
  %232 = or i1 %228, %231
  %233 = xor i1 %232, true
  %234 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %230, i64 24) #8
  %235 = extractvalue { i64, i1 } %234, 1
  %236 = extractvalue { i64, i1 } %234, 0
  %237 = xor i1 %235, true
  %238 = select i1 %232, i64 0, i64 %236
  br label %239

239:                                              ; preds = %225, %213
  %240 = phi i1 [ true, %213 ], [ %237, %225 ]
  %241 = phi i1 [ false, %213 ], [ %233, %225 ]
  %242 = phi i64 [ 0, %213 ], [ %238, %225 ]
  %243 = and i1 %240, %241
  %244 = and i1 %224, %243
  %245 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %223, i64 %242) #8
  %246 = extractvalue { i64, i1 } %245, 1
  %247 = xor i1 %244, true
  %248 = or i1 %246, %247
  br i1 %248, label %263, label %249

249:                                              ; preds = %239
  %250 = extractvalue { i64, i1 } %245, 0
  %251 = zext i64 %250 to i65
  %252 = select i1 %244, i65 %251, i65 0
  %253 = tail call { i65, i1 } @llvm.sadd.with.overflow.i65(i65 %252, i65 256) #8
  %254 = extractvalue { i65, i1 } %253, 1
  %255 = extractvalue { i65, i1 } %253, 0
  %256 = icmp slt i65 %255, 0
  %257 = or i1 %254, %256
  br i1 %257, label %263, label %258

258:                                              ; preds = %249
  %259 = bitcast %"struct.opencv::PointDistribution"* %0 to i8*
  %260 = bitcast %"struct.opencv::PointDistribution"* %1 to i8*
  %261 = tail call float @_Z10cvCalcEMD2PKvS0_iPFfPKfS2_PvES0_S3_PfS3_(i8* %259, i8* %260, i32 undef, float (float*, float*, i8*)* undef, i8* undef, i8* undef, float* null, i8* undef)
  %262 = fpext float %261 to double
  br label %263

263:                                              ; preds = %27, %32, %47, %83, %88, %103, %249, %114, %239, %58, %2, %258
  %264 = phi i8 [ 1, %258 ], [ 0, %114 ], [ 0, %249 ], [ 0, %2 ], [ 0, %58 ], [ 0, %239 ], [ 0, %103 ], [ 0, %88 ], [ 0, %83 ], [ 0, %47 ], [ 0, %32 ], [ 0, %27 ]
  %265 = phi double [ %262, %258 ], [ undef, %114 ], [ undef, %249 ], [ undef, %2 ], [ undef, %58 ], [ undef, %239 ], [ undef, %103 ], [ undef, %88 ], [ undef, %83 ], [ undef, %47 ], [ undef, %32 ], [ undef, %27 ]
  %266 = insertvalue { i8, double } undef, i8 %264, 0
  %267 = insertvalue { i8, double } %266, double %265, 1
  ret { i8, double } %267
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIcNS_9allocatorIcEEE8__appendEm(%"class.std::__1::vector.9"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #8
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector.9"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector.9"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #9
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #10
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #8
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector.9", %"class.std::__1::vector.9"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #8
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #10
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #6

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #7

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #6

; Function Attrs: nounwind readnone speculatable
declare { i65, i1 } @llvm.sadd.with.overflow.i65(i65, i65) #6

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !10}
!12 = distinct !{!12, !8}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !8}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !8}
!27 = distinct !{!27, !10}
!28 = distinct !{!28, !10}
!29 = distinct !{!29, !8}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !8}
!36 = distinct !{!36, !10}
!37 = distinct !{!37, !10}
!38 = distinct !{!38, !8}
!39 = !{!40}
!40 = distinct !{!40, !41}
!41 = distinct !{!41, !"LVerDomain"}
!42 = !{!43}
!43 = distinct !{!43, !41}
!44 = distinct !{!44, !8}
!45 = distinct !{!45, !8}
!46 = !{!47}
!47 = distinct !{!47, !48}
!48 = distinct !{!48, !"LVerDomain"}
!49 = !{!50}
!50 = distinct !{!50, !48}
!51 = distinct !{!51, !8}
!52 = distinct !{!52, !8}
!53 = distinct !{!53, !10}
!54 = distinct !{!54, !10}
!55 = distinct !{!55, !10}
!56 = distinct !{!56, !10}
!57 = distinct !{!57, !10}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = !{!59, !64}
!64 = distinct !{!64, !60}
!65 = distinct !{!65, !8}
!66 = distinct !{!66, !8}
!67 = distinct !{!67, !10}
!68 = distinct !{!68, !10}
!69 = distinct !{!69, !10}
!70 = !{!"branch_weights", i32 1, i32 4001}
