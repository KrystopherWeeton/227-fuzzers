; ModuleID = '../../third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.cc'
source_filename = "../../third_party/blink/renderer/platform/instrumentation/partition_alloc_memory_dump_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StaticSingleton" = type { %"class.WTF::StaticSingleton<blink::PartitionAllocMemoryDumpProvider>::InstanceStorage" }
%"class.WTF::StaticSingleton<blink::PartitionAllocMemoryDumpProvider>::InstanceStorage" = type { [8 x i8] }
%"class.blink::PartitionAllocMemoryDumpProvider" = type { %"class.base::trace_event::MemoryDumpProvider" }
%"class.base::trace_event::MemoryDumpProvider" = type { i32 (...)** }
%"struct.base::trace_event::MemoryDumpArgs" = type { i32, i32, i64 }
%"class.base::trace_event::ProcessMemoryDump" = type { %"class.base::UnguessableToken", %"class.std::__1::map", %"class.std::__1::map.6", %"struct.base::trace_event::MemoryDumpArgs", %"class.std::__1::unique_ptr" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i64 }
%"class.std::__1::map.6" = type { %"class.std::__1::__tree.7" }
%"class.std::__1::__tree.7" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.8", %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.base::trace_event::MemoryAllocatorDump"* }
%"class.base::trace_event::MemoryAllocatorDump" = type { %"class.std::__1::basic_string", %"class.base::trace_event::MemoryAllocatorDumpGuid", i32, i32, %"class.absl::optional", %"class.std::__1::vector" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::trace_event::MemoryAllocatorDumpGuid" = type { i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon.24 }
%union.anon.24 = type { i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"struct.base::trace_event::MemoryAllocatorDump::Entry"*, %"class.std::__1::__compressed_pair.25" }
%"struct.base::trace_event::MemoryAllocatorDump::Entry" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, i64, %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.base::trace_event::MemoryAllocatorDump::Entry"* }
%"class.base::trace_event::MemoryDumpPartitionStatsDumper" = type <{ %"class.base::PartitionStatsDumper", i8*, %"class.base::trace_event::ProcessMemoryDump"*, i64, i64, i64, i64, i8, [7 x i8] }>
%"class.base::PartitionStatsDumper" = type { i32 (...)** }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

@_ZZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance = internal global %"class.WTF::StaticSingleton" zeroinitializer, align 8
@_ZGVZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance = internal global i64 0, align 8
@_ZN5blinkL23kPartitionAllocDumpNameE = internal constant [16 x i8] c"partition_alloc\00", align 16
@.str = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@_ZN4base11trace_event30MemoryDumpPartitionStatsDumper19kPartitionsDumpNameE = external local_unnamed_addr global i8*, align 8
@_ZN3WTF10Partitions24kAllocatedObjectPoolNameE = external local_unnamed_addr constant i8*, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"size\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"bytes\00", align 1
@_ZTVN5blink32PartitionAllocMemoryDumpProviderE = hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::PartitionAllocMemoryDumpProvider"*)* @_ZN5blink32PartitionAllocMemoryDumpProviderD2Ev to i8*), i8* bitcast (void (%"class.blink::PartitionAllocMemoryDumpProvider"*)* @_ZN5blink32PartitionAllocMemoryDumpProviderD0Ev to i8*), i8* bitcast (i1 (%"class.blink::PartitionAllocMemoryDumpProvider"*, %"struct.base::trace_event::MemoryDumpArgs"*, %"class.base::trace_event::ProcessMemoryDump"*)* @_ZN5blink32PartitionAllocMemoryDumpProvider12OnMemoryDumpERKN4base11trace_event14MemoryDumpArgsEPNS2_17ProcessMemoryDumpE to i8*)] }, align 8
@_ZTVN4base11trace_event30MemoryDumpPartitionStatsDumperE = external unnamed_addr constant { [4 x i8*] }, align 8

@_ZN5blink32PartitionAllocMemoryDumpProviderC1Ev = hidden unnamed_addr alias void (%"class.blink::PartitionAllocMemoryDumpProvider"*), void (%"class.blink::PartitionAllocMemoryDumpProvider"*)* @_ZN5blink32PartitionAllocMemoryDumpProviderC2Ev
@_ZN5blink32PartitionAllocMemoryDumpProviderD1Ev = hidden unnamed_addr alias void (%"class.blink::PartitionAllocMemoryDumpProvider"*), void (%"class.blink::PartitionAllocMemoryDumpProvider"*)* @_ZN5blink32PartitionAllocMemoryDumpProviderD2Ev

; Function Attrs: nofree nounwind ssp uwtable
define hidden %"class.blink::PartitionAllocMemoryDumpProvider"* @_ZN5blink32PartitionAllocMemoryDumpProvider8InstanceEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance) #11
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink32PartitionAllocMemoryDumpProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance to i32 (...)***), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance) #11
  br label %7

7:                                                ; preds = %3, %6, %0
  ret %"class.blink::PartitionAllocMemoryDumpProvider"* bitcast (%"class.WTF::StaticSingleton"* @_ZZN5blink32PartitionAllocMemoryDumpProvider8InstanceEvE10s_instance to %"class.blink::PartitionAllocMemoryDumpProvider"*)
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink32PartitionAllocMemoryDumpProvider12OnMemoryDumpERKN4base11trace_event14MemoryDumpArgsEPNS2_17ProcessMemoryDumpE(%"class.blink::PartitionAllocMemoryDumpProvider"* nocapture readnone, %"struct.base::trace_event::MemoryDumpArgs"* nocapture readonly dereferenceable(16), %"class.base::trace_event::ProcessMemoryDump"*) unnamed_addr #3 align 2 {
  %4 = alloca %"class.base::trace_event::MemoryDumpPartitionStatsDumper", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = getelementptr inbounds %"struct.base::trace_event::MemoryDumpArgs", %"struct.base::trace_event::MemoryDumpArgs"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = bitcast %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 64, i1 false)
  %10 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN4base11trace_event30MemoryDumpPartitionStatsDumperE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 1
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN5blinkL23kPartitionAllocDumpNameE, i64 0, i64 0), i8** %11, align 8
  %12 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 2
  store %"class.base::trace_event::ProcessMemoryDump"* %2, %"class.base::trace_event::ProcessMemoryDump"** %12, align 8
  %13 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 3
  %14 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 7
  %15 = icmp ne i32 %8, 0
  %16 = zext i1 %15 to i8
  %17 = bitcast i64* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 32, i1 false) #11
  store i8 %16, i8* %14, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #11
  %19 = load i8*, i8** @_ZN4base11trace_event30MemoryDumpPartitionStatsDumper19kPartitionsDumpNameE, align 8
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @_ZN5blinkL23kPartitionAllocDumpNameE, i64 0, i64 0), i8* %19) #11
  %20 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %5) #11
  %21 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %22 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %21, i64 0, i32 1, i32 0
  %23 = load i8, i8* %22, align 1
  %24 = icmp slt i8 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %3
  %26 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  call void @_ZdlPv(i8* %27) #12
  br label %28

28:                                               ; preds = %3, %25
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #11
  %29 = icmp ne i32 %8, 2
  %30 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 0
  call void @_ZN3WTF10Partitions15DumpMemoryStatsEbPN4base20PartitionStatsDumperE(i1 zeroext %29, %"class.base::PartitionStatsDumper"* nonnull %30) #11
  %31 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #11
  %32 = load i8*, i8** @_ZN3WTF10Partitions24kAllocatedObjectPoolNameE, align 8
  %33 = call i64 @strlen(i8* %32) #11
  %34 = icmp ugt i64 %33, -17
  br i1 %34, label %35, label %37

35:                                               ; preds = %28
  %36 = bitcast %"class.std::__1::basic_string"* %6 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* nonnull %36) #13
  unreachable

37:                                               ; preds = %28
  %38 = icmp ult i64 %33, 23
  br i1 %38, label %48, label %39

39:                                               ; preds = %37
  %40 = add nuw i64 %33, 16
  %41 = and i64 %40, -16
  %42 = call i8* @_Znwm(i64 %41) #12
  %43 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %42, i8** %43, align 8
  %44 = or i64 %41, -9223372036854775808
  %45 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %33, i64* %46, align 8
  %47 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %53

48:                                               ; preds = %37
  %49 = trunc i64 %33 to i8
  %50 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %50, i64 0, i32 1, i32 0
  store i8 %49, i8* %51, align 1
  %52 = icmp eq i64 %33, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %48, %39
  %54 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %50, %48 ], [ %47, %39 ]
  %55 = phi i8* [ %31, %48 ], [ %42, %39 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %55, i8* align 1 %32, i64 %33, i1 false) #11
  br label %56

56:                                               ; preds = %48, %53
  %57 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %50, %48 ], [ %54, %53 ]
  %58 = phi i8* [ %31, %48 ], [ %55, %53 ]
  %59 = getelementptr inbounds i8, i8* %58, i64 %33
  store i8 0, i8* %59, align 1
  %60 = call %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %6) #11
  %61 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %57, i64 0, i32 1, i32 0
  %62 = load i8, i8* %61, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %67

64:                                               ; preds = %56
  %65 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  call void @_ZdlPv(i8* %66) #12
  br label %67

67:                                               ; preds = %56, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #11
  %68 = getelementptr inbounds %"class.base::trace_event::MemoryDumpPartitionStatsDumper", %"class.base::trace_event::MemoryDumpPartitionStatsDumper"* %4, i64 0, i32 6
  %69 = load i64, i64* %68, align 8
  call void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"* %60, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 %69) #11
  %70 = getelementptr inbounds %"class.base::trace_event::MemoryAllocatorDump", %"class.base::trace_event::MemoryAllocatorDump"* %60, i64 0, i32 1
  %71 = getelementptr inbounds %"class.base::trace_event::MemoryAllocatorDump", %"class.base::trace_event::MemoryAllocatorDump"* %20, i64 0, i32 1
  call void @_ZN4base11trace_event17ProcessMemoryDump16AddOwnershipEdgeERKNS0_23MemoryAllocatorDumpGuidES4_(%"class.base::trace_event::ProcessMemoryDump"* %2, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8) %70, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8) %71) #11
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #11
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare %"class.base::trace_event::MemoryAllocatorDump"* @_ZN4base11trace_event17ProcessMemoryDump19CreateAllocatorDumpERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(%"class.base::trace_event::ProcessMemoryDump"*, %"class.std::__1::basic_string"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #4

declare void @_ZN3WTF10Partitions15DumpMemoryStatsEbPN4base20PartitionStatsDumperE(i1 zeroext, %"class.base::PartitionStatsDumper"*) local_unnamed_addr #4

declare void @_ZN4base11trace_event19MemoryAllocatorDump9AddScalarEPKcS3_m(%"class.base::trace_event::MemoryAllocatorDump"*, i8*, i8*, i64) local_unnamed_addr #4

declare void @_ZN4base11trace_event17ProcessMemoryDump16AddOwnershipEdgeERKNS0_23MemoryAllocatorDumpGuidES4_(%"class.base::trace_event::ProcessMemoryDump"*, %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8), %"class.base::trace_event::MemoryAllocatorDumpGuid"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink32PartitionAllocMemoryDumpProviderC2Ev(%"class.blink::PartitionAllocMemoryDumpProvider"* nocapture) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.blink::PartitionAllocMemoryDumpProvider", %"class.blink::PartitionAllocMemoryDumpProvider"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink32PartitionAllocMemoryDumpProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink32PartitionAllocMemoryDumpProviderD2Ev(%"class.blink::PartitionAllocMemoryDumpProvider"* nocapture) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink32PartitionAllocMemoryDumpProviderD0Ev(%"class.blink::PartitionAllocMemoryDumpProvider"*) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.blink::PartitionAllocMemoryDumpProvider"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #12
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { builtin nounwind }
attributes #13 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
