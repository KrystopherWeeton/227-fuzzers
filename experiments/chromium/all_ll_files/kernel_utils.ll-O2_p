; ModuleID = '../../third_party/tflite/src/tensorflow/lite/kernels/internal/kernel_utils.cc'
source_filename = "../../third_party/tflite/src/tensorflow/lite/kernels/internal/kernel_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.Eigen::internal::evaluator" = type { %"struct.Eigen::internal::unary_evaluator" }
%"struct.Eigen::internal::unary_evaluator" = type { %"class.Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_tanh_op<float>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, float>::Data" }
%"class.Eigen::internal::unary_evaluator<Eigen::CwiseUnaryOp<Eigen::internal::scalar_tanh_op<float>, const Eigen::ArrayWrapper<Eigen::Map<Eigen::Matrix<float, -1, 1, 0, -1, 1>, 0, Eigen::Stride<0, 0> > > >, Eigen::internal::IndexBased, float>::Data" = type { %"struct.Eigen::internal::evaluator.17" }
%"struct.Eigen::internal::evaluator.17" = type { %"struct.Eigen::internal::evaluator.18" }
%"struct.Eigen::internal::evaluator.18" = type { %"struct.Eigen::internal::unary_evaluator.19" }
%"struct.Eigen::internal::unary_evaluator.19" = type { %"struct.Eigen::internal::evaluator_wrapper_base" }
%"struct.Eigen::internal::evaluator_wrapper_base" = type { %"struct.Eigen::internal::evaluator.22" }
%"struct.Eigen::internal::evaluator.22" = type { %"struct.Eigen::internal::mapbase_evaluator" }
%"struct.Eigen::internal::mapbase_evaluator" = type { float*, %"class.Eigen::internal::variable_if_dynamic.4", %"class.Eigen::internal::variable_if_dynamic" }
%"class.Eigen::internal::variable_if_dynamic.4" = type { i8 }
%"class.Eigen::internal::variable_if_dynamic" = type { i64 }
%"class.Eigen::internal::generic_dense_assignment_kernel" = type { %"struct.Eigen::internal::evaluator.18"*, %"struct.Eigen::internal::evaluator"*, %"struct.Eigen::internal::assign_op"*, %"class.Eigen::ArrayWrapper"* }
%"struct.Eigen::internal::assign_op" = type { i8 }
%"class.Eigen::ArrayWrapper" = type { %"class.Eigen::Map" }
%"class.Eigen::Map" = type { %"class.Eigen::MapBase.base.5", %"class.Eigen::Stride", [5 x i8] }
%"class.Eigen::MapBase.base.5" = type { %"class.Eigen::MapBase.base" }
%"class.Eigen::MapBase.base" = type <{ float*, %"class.Eigen::internal::variable_if_dynamic", %"class.Eigen::internal::variable_if_dynamic.4" }>
%"class.Eigen::Stride" = type { %"class.Eigen::internal::variable_if_dynamic.6", %"class.Eigen::internal::variable_if_dynamic.6" }
%"class.Eigen::internal::variable_if_dynamic.6" = type { i8 }
%"class.Eigen::CwiseUnaryOp.25" = type { %"class.Eigen::ArrayWrapper", %"struct.Eigen::internal::scalar_logistic_op", [7 x i8] }
%"struct.Eigen::internal::scalar_logistic_op" = type { i8 }
%"class.tflite::CpuBackendContext" = type opaque
%"struct.Eigen::EigenBase.16" = type { i8 }

$_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf = comdat any

$_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKSB_EEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSL_ = comdat any

$_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_ = comdat any

@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12kernel_utils12RnnBatchStepEPKfS2_S2_S2_iiii21TfLiteFusedActivationPfS4_(float*, float*, float*, float* nocapture readonly, i32, i32, i32, i32, i32, float*, float*) local_unnamed_addr #0 {
  tail call void @_ZN6tflite12kernel_utils12RnnBatchStepEPKfS2_S2_S2_S2_S2_iiiii21TfLiteFusedActivationPfS4_(float* %0, float* %1, float* null, float* null, float* %2, float* %3, i32 %4, i32 0, i32 %5, i32 %6, i32 %7, i32 %8, float* %9, float* %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12kernel_utils12RnnBatchStepEPKfS2_S2_S2_S2_S2_iiiii21TfLiteFusedActivationPfS4_(float*, float*, float*, float*, float*, float* nocapture readonly, i32, i32, i32, i32, i32, i32, float*, float*) local_unnamed_addr #0 {
  %15 = icmp eq i32 %10, %8
  %16 = icmp sgt i32 %9, 0
  br i1 %15, label %30, label %17

17:                                               ; preds = %14
  br i1 %16, label %18, label %179

18:                                               ; preds = %17
  %19 = icmp eq i32 %8, 0
  %20 = sext i32 %8 to i64
  %21 = shl nuw nsw i64 %20, 2
  %22 = bitcast float* %5 to i8*
  %23 = sext i32 %10 to i64
  %24 = zext i32 %9 to i64
  %25 = add nsw i64 %24, -1
  %26 = and i64 %24, 3
  %27 = icmp ult i64 %25, 3
  br i1 %27, label %86, label %28

28:                                               ; preds = %18
  %29 = sub nsw i64 %24, %26
  br label %105

30:                                               ; preds = %14
  br i1 %16, label %31, label %75

31:                                               ; preds = %30
  %32 = icmp eq i32 %10, 0
  %33 = sext i32 %10 to i64
  %34 = shl nuw nsw i64 %33, 2
  %35 = bitcast float* %5 to i8*
  %36 = zext i32 %9 to i64
  %37 = add nsw i64 %36, -1
  %38 = and i64 %36, 3
  %39 = icmp ult i64 %37, 3
  br i1 %39, label %61, label %40

40:                                               ; preds = %31
  %41 = sub nsw i64 %36, %38
  br label %42

42:                                               ; preds = %180, %40
  %43 = phi i64 [ 0, %40 ], [ %181, %180 ]
  %44 = phi i64 [ %41, %40 ], [ %182, %180 ]
  br i1 %32, label %180, label %45

45:                                               ; preds = %42
  %46 = mul nsw i64 %43, %33
  %47 = getelementptr inbounds float, float* %13, i64 %46
  %48 = bitcast float* %47 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %35, i64 %34, i1 false) #8
  %49 = or i64 %43, 1
  %50 = mul nsw i64 %49, %33
  %51 = getelementptr inbounds float, float* %13, i64 %50
  %52 = bitcast float* %51 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %35, i64 %34, i1 false) #8
  %53 = or i64 %43, 2
  %54 = mul nsw i64 %53, %33
  %55 = getelementptr inbounds float, float* %13, i64 %54
  %56 = bitcast float* %55 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %35, i64 %34, i1 false) #8
  %57 = or i64 %43, 3
  %58 = mul nsw i64 %57, %33
  %59 = getelementptr inbounds float, float* %13, i64 %58
  %60 = bitcast float* %59 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %35, i64 %34, i1 false) #8
  br label %180

61:                                               ; preds = %180, %31
  %62 = phi i64 [ 0, %31 ], [ %181, %180 ]
  %63 = icmp eq i64 %38, 0
  br i1 %63, label %75, label %64

64:                                               ; preds = %61, %71
  %65 = phi i64 [ %72, %71 ], [ %62, %61 ]
  %66 = phi i64 [ %73, %71 ], [ %38, %61 ]
  br i1 %32, label %71, label %67

67:                                               ; preds = %64
  %68 = mul nsw i64 %65, %33
  %69 = getelementptr inbounds float, float* %13, i64 %68
  %70 = bitcast float* %69 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %70, i8* align 4 %35, i64 %34, i1 false) #8
  br label %71

71:                                               ; preds = %67, %64
  %72 = add nuw nsw i64 %65, 1
  %73 = add i64 %66, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %64, !llvm.loop !2

75:                                               ; preds = %61, %71, %30
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %1, i32 %10, i32 %6, float* %0, i32 %9, float* %13) #8
  %76 = icmp sgt i32 %7, 0
  br i1 %76, label %77, label %78

77:                                               ; preds = %75
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %3, i32 %10, i32 %7, float* %2, i32 %9, float* %13) #8
  br label %78

78:                                               ; preds = %77, %75
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %4, i32 %10, i32 %10, float* %12, i32 %9, float* %13) #8
  %79 = mul nsw i32 %9, %10
  tail call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %13, i32 %79, i32 %11, float* %13)
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %179, label %81

81:                                               ; preds = %78
  %82 = sext i32 %79 to i64
  %83 = shl nuw nsw i64 %82, 2
  %84 = bitcast float* %12 to i8*
  %85 = bitcast float* %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 %85, i64 %83, i1 false) #8
  br label %179

86:                                               ; preds = %184, %18
  %87 = phi i64 [ 0, %18 ], [ %185, %184 ]
  %88 = icmp eq i64 %26, 0
  br i1 %88, label %100, label %89

89:                                               ; preds = %86, %96
  %90 = phi i64 [ %97, %96 ], [ %87, %86 ]
  %91 = phi i64 [ %98, %96 ], [ %26, %86 ]
  br i1 %19, label %96, label %92

92:                                               ; preds = %89
  %93 = mul nsw i64 %90, %23
  %94 = getelementptr inbounds float, float* %13, i64 %93
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %22, i64 %21, i1 false) #8
  br label %96

96:                                               ; preds = %92, %89
  %97 = add nuw nsw i64 %90, 1
  %98 = add i64 %91, -1
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %100, label %89, !llvm.loop !4

100:                                              ; preds = %96, %86
  br i1 %16, label %101, label %179

101:                                              ; preds = %100
  %102 = sext i32 %10 to i64
  %103 = sext i32 %6 to i64
  %104 = zext i32 %9 to i64
  br label %131

105:                                              ; preds = %184, %28
  %106 = phi i64 [ 0, %28 ], [ %185, %184 ]
  %107 = phi i64 [ %29, %28 ], [ %186, %184 ]
  br i1 %19, label %184, label %108

108:                                              ; preds = %105
  %109 = mul nsw i64 %106, %23
  %110 = getelementptr inbounds float, float* %13, i64 %109
  %111 = bitcast float* %110 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %111, i8* align 4 %22, i64 %21, i1 false) #8
  %112 = or i64 %106, 1
  %113 = mul nsw i64 %112, %23
  %114 = getelementptr inbounds float, float* %13, i64 %113
  %115 = bitcast float* %114 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %22, i64 %21, i1 false) #8
  %116 = or i64 %106, 2
  %117 = mul nsw i64 %116, %23
  %118 = getelementptr inbounds float, float* %13, i64 %117
  %119 = bitcast float* %118 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %22, i64 %21, i1 false) #8
  %120 = or i64 %106, 3
  %121 = mul nsw i64 %120, %23
  %122 = getelementptr inbounds float, float* %13, i64 %121
  %123 = bitcast float* %122 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %123, i8* align 4 %22, i64 %21, i1 false) #8
  br label %184

124:                                              ; preds = %131
  %125 = icmp sgt i32 %7, 0
  %126 = and i1 %125, %16
  br i1 %126, label %127, label %147

127:                                              ; preds = %124
  %128 = sext i32 %10 to i64
  %129 = sext i32 %7 to i64
  %130 = zext i32 %9 to i64
  br label %139

131:                                              ; preds = %131, %101
  %132 = phi i64 [ 0, %101 ], [ %137, %131 ]
  %133 = mul nsw i64 %132, %103
  %134 = getelementptr inbounds float, float* %0, i64 %133
  %135 = mul nsw i64 %132, %102
  %136 = getelementptr inbounds float, float* %13, i64 %135
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %1, i32 %8, i32 %6, float* %134, i32 1, float* %136) #8
  %137 = add nuw nsw i64 %132, 1
  %138 = icmp eq i64 %137, %104
  br i1 %138, label %124, label %131

139:                                              ; preds = %139, %127
  %140 = phi i64 [ 0, %127 ], [ %145, %139 ]
  %141 = mul nsw i64 %140, %129
  %142 = getelementptr inbounds float, float* %2, i64 %141
  %143 = mul nsw i64 %140, %128
  %144 = getelementptr inbounds float, float* %13, i64 %143
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %3, i32 %8, i32 %7, float* %142, i32 1, float* %144) #8
  %145 = add nuw nsw i64 %140, 1
  %146 = icmp eq i64 %145, %130
  br i1 %146, label %147, label %139

147:                                              ; preds = %139, %124
  br i1 %16, label %148, label %179

148:                                              ; preds = %147
  %149 = sext i32 %10 to i64
  %150 = sext i32 %8 to i64
  %151 = zext i32 %9 to i64
  br label %159

152:                                              ; preds = %159
  br i1 %16, label %153, label %179

153:                                              ; preds = %152
  %154 = icmp eq i32 %8, 0
  %155 = sext i32 %8 to i64
  %156 = shl nuw nsw i64 %155, 2
  %157 = sext i32 %10 to i64
  %158 = zext i32 %9 to i64
  br label %167

159:                                              ; preds = %159, %148
  %160 = phi i64 [ 0, %148 ], [ %165, %159 ]
  %161 = mul nsw i64 %160, %150
  %162 = getelementptr inbounds float, float* %12, i64 %161
  %163 = mul nsw i64 %160, %149
  %164 = getelementptr inbounds float, float* %13, i64 %163
  tail call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float* %4, i32 %8, i32 %8, float* %162, i32 1, float* %164) #8
  %165 = add nuw nsw i64 %160, 1
  %166 = icmp eq i64 %165, %151
  br i1 %166, label %152, label %159

167:                                              ; preds = %176, %153
  %168 = phi i64 [ 0, %153 ], [ %177, %176 ]
  %169 = mul nsw i64 %168, %157
  %170 = getelementptr inbounds float, float* %13, i64 %169
  tail call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %170, i32 %8, i32 %11, float* %170)
  br i1 %154, label %176, label %171

171:                                              ; preds = %167
  %172 = mul nsw i64 %168, %155
  %173 = getelementptr inbounds float, float* %12, i64 %172
  %174 = bitcast float* %173 to i8*
  %175 = bitcast float* %170 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %175, i64 %156, i1 false) #8
  br label %176

176:                                              ; preds = %167, %171
  %177 = add nuw nsw i64 %168, 1
  %178 = icmp eq i64 %177, %158
  br i1 %178, label %179, label %167

179:                                              ; preds = %176, %100, %17, %147, %152, %81, %78
  ret void

180:                                              ; preds = %42, %45
  %181 = add nuw nsw i64 %43, 4
  %182 = add i64 %44, -4
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %61, label %42

184:                                              ; preds = %105, %108
  %185 = add nuw nsw i64 %106, 4
  %186 = add i64 %107, -4
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %86, label %105
}

declare void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKfiiS2_iPf(float*, i32, i32, float*, i32, float*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* noalias, i32, i32, float* noalias) local_unnamed_addr #2 comdat {
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca %"struct.Eigen::internal::evaluator", align 8
  %8 = alloca %"struct.Eigen::internal::evaluator.18", align 8
  %9 = alloca %"class.Eigen::internal::generic_dense_assignment_kernel", align 8
  %10 = alloca %"struct.Eigen::internal::assign_op", align 1
  %11 = alloca %"class.Eigen::ArrayWrapper", align 8
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca %"struct.Eigen::internal::assign_op", align 1
  %15 = alloca %"class.Eigen::CwiseUnaryOp.25", align 8
  %16 = alloca %"class.Eigen::ArrayWrapper", align 8
  %17 = alloca float, align 4
  switch i32 %2, label %283 [
    i32 6, label %232
    i32 1, label %18
    i32 2, label %50
    i32 3, label %89
    i32 4, label %128
    i32 5, label %151
  ]

18:                                               ; preds = %4
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %283

20:                                               ; preds = %18
  %21 = zext i32 %1 to i64
  %22 = bitcast float* %17 to i8*
  %23 = and i64 %21, 1
  %24 = icmp eq i32 %1, 1
  br i1 %24, label %241, label %25

25:                                               ; preds = %20
  %26 = sub nsw i64 %21, %23
  br label %27

27:                                               ; preds = %27, %25
  %28 = phi i64 [ 0, %25 ], [ %47, %27 ]
  %29 = phi i64 [ %26, %25 ], [ %48, %27 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 0.000000e+00, float* %17, align 4, !noalias !5
  %30 = getelementptr inbounds float, float* %0, i64 %28
  %31 = load float, float* %30, align 4, !alias.scope !9, !noalias !10
  %32 = fcmp ogt float %31, 0.000000e+00
  %33 = select i1 %32, float* %30, float* %17
  %34 = bitcast float* %33 to i32*
  %35 = load i32, i32* %34, align 4, !noalias !10
  %36 = getelementptr inbounds float, float* %3, i64 %28
  %37 = bitcast float* %36 to i32*
  store i32 %35, i32* %37, align 4, !alias.scope !10, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  %38 = or i64 %28, 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 0.000000e+00, float* %17, align 4, !noalias !5
  %39 = getelementptr inbounds float, float* %0, i64 %38
  %40 = load float, float* %39, align 4, !alias.scope !9, !noalias !10
  %41 = fcmp ogt float %40, 0.000000e+00
  %42 = select i1 %41, float* %39, float* %17
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4, !noalias !10
  %45 = getelementptr inbounds float, float* %3, i64 %38
  %46 = bitcast float* %45 to i32*
  store i32 %44, i32* %46, align 4, !alias.scope !10, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  %47 = add nuw nsw i64 %28, 2
  %48 = add i64 %29, -2
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %241, label %27

50:                                               ; preds = %4
  %51 = icmp sgt i32 %1, 0
  br i1 %51, label %52, label %283

52:                                               ; preds = %50
  %53 = zext i32 %1 to i64
  %54 = bitcast float* %12 to i8*
  %55 = bitcast float* %13 to i8*
  %56 = and i64 %53, 1
  %57 = icmp eq i32 %1, 1
  br i1 %57, label %253, label %58

58:                                               ; preds = %52
  %59 = sub nsw i64 %53, %56
  br label %60

60:                                               ; preds = %60, %58
  %61 = phi i64 [ 0, %58 ], [ %86, %60 ]
  %62 = phi i64 [ %59, %58 ], [ %87, %60 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54)
  store float -1.000000e+00, float* %12, align 4, !noalias !11
  %63 = getelementptr inbounds float, float* %0, i64 %61
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 1.000000e+00, float* %13, align 4, !noalias !11
  %64 = load float, float* %63, align 4, !alias.scope !15, !noalias !16
  %65 = fcmp ogt float %64, 1.000000e+00
  %66 = select i1 %65, float* %13, float* %63
  %67 = load float, float* %66, align 4, !noalias !16
  %68 = fcmp ogt float %67, -1.000000e+00
  %69 = select i1 %68, float* %66, float* %12
  %70 = bitcast float* %69 to i32*
  %71 = load i32, i32* %70, align 4, !noalias !16
  %72 = getelementptr inbounds float, float* %3, i64 %61
  %73 = bitcast float* %72 to i32*
  store i32 %71, i32* %73, align 4, !alias.scope !16, !noalias !15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54)
  %74 = or i64 %61, 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54)
  store float -1.000000e+00, float* %12, align 4, !noalias !11
  %75 = getelementptr inbounds float, float* %0, i64 %74
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 1.000000e+00, float* %13, align 4, !noalias !11
  %76 = load float, float* %75, align 4, !alias.scope !15, !noalias !16
  %77 = fcmp ogt float %76, 1.000000e+00
  %78 = select i1 %77, float* %13, float* %75
  %79 = load float, float* %78, align 4, !noalias !16
  %80 = fcmp ogt float %79, -1.000000e+00
  %81 = select i1 %80, float* %78, float* %12
  %82 = bitcast float* %81 to i32*
  %83 = load i32, i32* %82, align 4, !noalias !16
  %84 = getelementptr inbounds float, float* %3, i64 %74
  %85 = bitcast float* %84 to i32*
  store i32 %83, i32* %85, align 4, !alias.scope !16, !noalias !15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54)
  %86 = add nuw nsw i64 %61, 2
  %87 = add i64 %62, -2
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %253, label %60

89:                                               ; preds = %4
  %90 = icmp sgt i32 %1, 0
  br i1 %90, label %91, label %283

91:                                               ; preds = %89
  %92 = zext i32 %1 to i64
  %93 = bitcast float* %5 to i8*
  %94 = bitcast float* %6 to i8*
  %95 = and i64 %92, 1
  %96 = icmp eq i32 %1, 1
  br i1 %96, label %268, label %97

97:                                               ; preds = %91
  %98 = sub nsw i64 %92, %95
  br label %99

99:                                               ; preds = %99, %97
  %100 = phi i64 [ 0, %97 ], [ %125, %99 ]
  %101 = phi i64 [ %98, %97 ], [ %126, %99 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93)
  store float 0.000000e+00, float* %5, align 4, !noalias !17
  %102 = getelementptr inbounds float, float* %0, i64 %100
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94)
  store float 6.000000e+00, float* %6, align 4, !noalias !17
  %103 = load float, float* %102, align 4, !alias.scope !21, !noalias !22
  %104 = fcmp ogt float %103, 6.000000e+00
  %105 = select i1 %104, float* %6, float* %102
  %106 = load float, float* %105, align 4, !noalias !22
  %107 = fcmp ogt float %106, 0.000000e+00
  %108 = select i1 %107, float* %105, float* %5
  %109 = bitcast float* %108 to i32*
  %110 = load i32, i32* %109, align 4, !noalias !22
  %111 = getelementptr inbounds float, float* %3, i64 %100
  %112 = bitcast float* %111 to i32*
  store i32 %110, i32* %112, align 4, !alias.scope !22, !noalias !21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93)
  %113 = or i64 %100, 1
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93)
  store float 0.000000e+00, float* %5, align 4, !noalias !17
  %114 = getelementptr inbounds float, float* %0, i64 %113
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94)
  store float 6.000000e+00, float* %6, align 4, !noalias !17
  %115 = load float, float* %114, align 4, !alias.scope !21, !noalias !22
  %116 = fcmp ogt float %115, 6.000000e+00
  %117 = select i1 %116, float* %6, float* %114
  %118 = load float, float* %117, align 4, !noalias !22
  %119 = fcmp ogt float %118, 0.000000e+00
  %120 = select i1 %119, float* %117, float* %5
  %121 = bitcast float* %120 to i32*
  %122 = load i32, i32* %121, align 4, !noalias !22
  %123 = getelementptr inbounds float, float* %3, i64 %113
  %124 = bitcast float* %123 to i32*
  store i32 %122, i32* %124, align 4, !alias.scope !22, !noalias !21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93)
  %125 = add nuw nsw i64 %100, 2
  %126 = add i64 %101, -2
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %268, label %99

128:                                              ; preds = %4
  %129 = sext i32 %1 to i64
  %130 = ptrtoint float* %0 to i64
  %131 = bitcast %"class.Eigen::ArrayWrapper"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %131) #8, !noalias !23
  %132 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %11, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %3, float** %132, align 8, !noalias !23
  %133 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %11, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %129, i64* %133, align 8, !noalias !23
  %134 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %10, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %134) #8, !noalias !23
  %135 = bitcast %"struct.Eigen::internal::evaluator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %135) #8, !noalias !23
  %136 = getelementptr inbounds %"struct.Eigen::internal::evaluator", %"struct.Eigen::internal::evaluator"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %137 = bitcast i8* %136 to i64*
  store i64 -6148914691236517206, i64* %137, align 8, !noalias !23
  %138 = bitcast %"struct.Eigen::internal::evaluator"* %7 to i64*
  store i64 %130, i64* %138, align 8, !noalias !23
  %139 = getelementptr inbounds %"struct.Eigen::internal::evaluator", %"struct.Eigen::internal::evaluator"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %129, i64* %139, align 8, !noalias !23
  %140 = bitcast %"struct.Eigen::internal::evaluator.18"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %140) #8, !noalias !23
  %141 = getelementptr inbounds %"struct.Eigen::internal::evaluator.18", %"struct.Eigen::internal::evaluator.18"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %142 = bitcast i8* %141 to i64*
  store i64 -6148914691236517206, i64* %142, align 8, !noalias !23
  %143 = ptrtoint float* %3 to i64
  %144 = bitcast %"struct.Eigen::internal::evaluator.18"* %8 to i64*
  store i64 %143, i64* %144, align 8, !noalias !23
  %145 = getelementptr inbounds %"struct.Eigen::internal::evaluator.18", %"struct.Eigen::internal::evaluator.18"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  store i64 %129, i64* %145, align 8, !noalias !23
  %146 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %146) #8, !noalias !23
  %147 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %9, i64 0, i32 0
  %148 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %9, i64 0, i32 1
  %149 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %9, i64 0, i32 2
  %150 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %9, i64 0, i32 3
  store %"struct.Eigen::internal::evaluator.18"* %8, %"struct.Eigen::internal::evaluator.18"** %147, align 8, !noalias !23
  store %"struct.Eigen::internal::evaluator"* %7, %"struct.Eigen::internal::evaluator"** %148, align 8, !noalias !23
  store %"struct.Eigen::internal::assign_op"* %10, %"struct.Eigen::internal::assign_op"** %149, align 8, !noalias !23
  store %"class.Eigen::ArrayWrapper"* %11, %"class.Eigen::ArrayWrapper"** %150, align 8, !noalias !23
  call void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKSB_EEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSL_(%"class.Eigen::internal::generic_dense_assignment_kernel"* nonnull dereferenceable(32) %9) #8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %146) #8, !noalias !23
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %140) #8, !noalias !23
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %135) #8, !noalias !23
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %134) #8, !noalias !23
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %131) #8, !noalias !23
  br label %283

151:                                              ; preds = %4
  %152 = icmp sgt i32 %1, 0
  br i1 %152, label %153, label %283

153:                                              ; preds = %151
  %154 = zext i32 %1 to i64
  %155 = icmp ult i32 %1, 8
  br i1 %155, label %220, label %156

156:                                              ; preds = %153
  %157 = and i64 %154, 4294967288
  %158 = add nsw i64 %157, -8
  %159 = lshr exact i64 %158, 3
  %160 = add nuw nsw i64 %159, 1
  %161 = and i64 %160, 1
  %162 = icmp eq i64 %158, 0
  br i1 %162, label %200, label %163

163:                                              ; preds = %156
  %164 = sub nuw nsw i64 %160, %161
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ 0, %163 ], [ %197, %165 ]
  %167 = phi i64 [ %164, %163 ], [ %198, %165 ]
  %168 = getelementptr inbounds float, float* %0, i64 %166
  %169 = bitcast float* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 4, !alias.scope !27, !noalias !30
  %171 = getelementptr inbounds float, float* %168, i64 4
  %172 = bitcast float* %171 to <4 x i32>*
  %173 = load <4 x i32>, <4 x i32>* %172, align 4, !alias.scope !27, !noalias !30
  %174 = icmp slt <4 x i32> %170, zeroinitializer
  %175 = icmp slt <4 x i32> %173, zeroinitializer
  %176 = uitofp <4 x i1> %174 to <4 x float>
  %177 = uitofp <4 x i1> %175 to <4 x float>
  %178 = getelementptr inbounds float, float* %3, i64 %166
  %179 = bitcast float* %178 to <4 x float>*
  store <4 x float> %176, <4 x float>* %179, align 4, !alias.scope !30, !noalias !27
  %180 = getelementptr inbounds float, float* %178, i64 4
  %181 = bitcast float* %180 to <4 x float>*
  store <4 x float> %177, <4 x float>* %181, align 4, !alias.scope !30, !noalias !27
  %182 = or i64 %166, 8
  %183 = getelementptr inbounds float, float* %0, i64 %182
  %184 = bitcast float* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 4, !alias.scope !27, !noalias !30
  %186 = getelementptr inbounds float, float* %183, i64 4
  %187 = bitcast float* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 4, !alias.scope !27, !noalias !30
  %189 = icmp slt <4 x i32> %185, zeroinitializer
  %190 = icmp slt <4 x i32> %188, zeroinitializer
  %191 = uitofp <4 x i1> %189 to <4 x float>
  %192 = uitofp <4 x i1> %190 to <4 x float>
  %193 = getelementptr inbounds float, float* %3, i64 %182
  %194 = bitcast float* %193 to <4 x float>*
  store <4 x float> %191, <4 x float>* %194, align 4, !alias.scope !30, !noalias !27
  %195 = getelementptr inbounds float, float* %193, i64 4
  %196 = bitcast float* %195 to <4 x float>*
  store <4 x float> %192, <4 x float>* %196, align 4, !alias.scope !30, !noalias !27
  %197 = add i64 %166, 16
  %198 = add i64 %167, -2
  %199 = icmp eq i64 %198, 0
  br i1 %199, label %200, label %165, !llvm.loop !32

200:                                              ; preds = %165, %156
  %201 = phi i64 [ 0, %156 ], [ %197, %165 ]
  %202 = icmp eq i64 %161, 0
  br i1 %202, label %218, label %203

203:                                              ; preds = %200
  %204 = getelementptr inbounds float, float* %0, i64 %201
  %205 = bitcast float* %204 to <4 x i32>*
  %206 = load <4 x i32>, <4 x i32>* %205, align 4, !alias.scope !27, !noalias !30
  %207 = getelementptr inbounds float, float* %204, i64 4
  %208 = bitcast float* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4, !alias.scope !27, !noalias !30
  %210 = icmp slt <4 x i32> %206, zeroinitializer
  %211 = icmp slt <4 x i32> %209, zeroinitializer
  %212 = uitofp <4 x i1> %210 to <4 x float>
  %213 = uitofp <4 x i1> %211 to <4 x float>
  %214 = getelementptr inbounds float, float* %3, i64 %201
  %215 = bitcast float* %214 to <4 x float>*
  store <4 x float> %212, <4 x float>* %215, align 4, !alias.scope !30, !noalias !27
  %216 = getelementptr inbounds float, float* %214, i64 4
  %217 = bitcast float* %216 to <4 x float>*
  store <4 x float> %213, <4 x float>* %217, align 4, !alias.scope !30, !noalias !27
  br label %218

218:                                              ; preds = %200, %203
  %219 = icmp eq i64 %157, %154
  br i1 %219, label %283, label %220

220:                                              ; preds = %218, %153
  %221 = phi i64 [ 0, %153 ], [ %157, %218 ]
  br label %222

222:                                              ; preds = %220, %222
  %223 = phi i64 [ %230, %222 ], [ %221, %220 ]
  %224 = getelementptr inbounds float, float* %0, i64 %223
  %225 = bitcast float* %224 to i32*
  %226 = load i32, i32* %225, align 4, !alias.scope !27, !noalias !30
  %227 = icmp slt i32 %226, 0
  %228 = uitofp i1 %227 to float
  %229 = getelementptr inbounds float, float* %3, i64 %223
  store float %228, float* %229, align 4, !alias.scope !30, !noalias !27
  %230 = add nuw nsw i64 %223, 1
  %231 = icmp eq i64 %230, %154
  br i1 %231, label %283, label %222, !llvm.loop !34

232:                                              ; preds = %4
  %233 = sext i32 %1 to i64
  %234 = bitcast %"class.Eigen::CwiseUnaryOp.25"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %234) #8, !noalias !36
  %235 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp.25", %"class.Eigen::CwiseUnaryOp.25"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store float* %0, float** %235, align 8, !noalias !36
  %236 = getelementptr inbounds %"class.Eigen::CwiseUnaryOp.25", %"class.Eigen::CwiseUnaryOp.25"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %233, i64* %236, align 8, !noalias !36
  %237 = bitcast %"class.Eigen::ArrayWrapper"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %237) #8, !noalias !36
  %238 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %16, i64 0, i32 0, i32 0, i32 0, i32 0
  store float* %3, float** %238, align 8, !noalias !36
  %239 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %16, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  store i64 %233, i64* %239, align 8, !noalias !36
  %240 = getelementptr inbounds %"struct.Eigen::internal::assign_op", %"struct.Eigen::internal::assign_op"* %14, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %240) #8, !noalias !36
  call void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* nonnull dereferenceable(24) %16, %"class.Eigen::CwiseUnaryOp.25"* nonnull dereferenceable(32) %15, %"struct.Eigen::internal::assign_op"* nonnull dereferenceable(1) %14) #8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %240) #8, !noalias !36
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %237) #8, !noalias !36
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %234) #8, !noalias !36
  br label %283

241:                                              ; preds = %27, %20
  %242 = phi i64 [ 0, %20 ], [ %47, %27 ]
  %243 = icmp eq i64 %23, 0
  br i1 %243, label %283, label %244

244:                                              ; preds = %241
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22)
  store float 0.000000e+00, float* %17, align 4, !noalias !5
  %245 = getelementptr inbounds float, float* %0, i64 %242
  %246 = load float, float* %245, align 4, !alias.scope !9, !noalias !10
  %247 = fcmp ogt float %246, 0.000000e+00
  %248 = select i1 %247, float* %245, float* %17
  %249 = bitcast float* %248 to i32*
  %250 = load i32, i32* %249, align 4, !noalias !10
  %251 = getelementptr inbounds float, float* %3, i64 %242
  %252 = bitcast float* %251 to i32*
  store i32 %250, i32* %252, align 4, !alias.scope !10, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22)
  br label %283

253:                                              ; preds = %60, %52
  %254 = phi i64 [ 0, %52 ], [ %86, %60 ]
  %255 = icmp eq i64 %56, 0
  br i1 %255, label %283, label %256

256:                                              ; preds = %253
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %54)
  store float -1.000000e+00, float* %12, align 4, !noalias !11
  %257 = getelementptr inbounds float, float* %0, i64 %254
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %55)
  store float 1.000000e+00, float* %13, align 4, !noalias !11
  %258 = load float, float* %257, align 4, !alias.scope !15, !noalias !16
  %259 = fcmp ogt float %258, 1.000000e+00
  %260 = select i1 %259, float* %13, float* %257
  %261 = load float, float* %260, align 4, !noalias !16
  %262 = fcmp ogt float %261, -1.000000e+00
  %263 = select i1 %262, float* %260, float* %12
  %264 = bitcast float* %263 to i32*
  %265 = load i32, i32* %264, align 4, !noalias !16
  %266 = getelementptr inbounds float, float* %3, i64 %254
  %267 = bitcast float* %266 to i32*
  store i32 %265, i32* %267, align 4, !alias.scope !16, !noalias !15
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %54)
  br label %283

268:                                              ; preds = %99, %91
  %269 = phi i64 [ 0, %91 ], [ %125, %99 ]
  %270 = icmp eq i64 %95, 0
  br i1 %270, label %283, label %271

271:                                              ; preds = %268
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93)
  store float 0.000000e+00, float* %5, align 4, !noalias !17
  %272 = getelementptr inbounds float, float* %0, i64 %269
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94)
  store float 6.000000e+00, float* %6, align 4, !noalias !17
  %273 = load float, float* %272, align 4, !alias.scope !21, !noalias !22
  %274 = fcmp ogt float %273, 6.000000e+00
  %275 = select i1 %274, float* %6, float* %272
  %276 = load float, float* %275, align 4, !noalias !22
  %277 = fcmp ogt float %276, 0.000000e+00
  %278 = select i1 %277, float* %275, float* %5
  %279 = bitcast float* %278 to i32*
  %280 = load i32, i32* %279, align 4, !noalias !22
  %281 = getelementptr inbounds float, float* %3, i64 %269
  %282 = bitcast float* %281 to i32*
  store i32 %280, i32* %282, align 4, !alias.scope !22, !noalias !21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93)
  br label %283

283:                                              ; preds = %222, %271, %268, %256, %253, %244, %241, %218, %151, %89, %50, %18, %128, %232, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12kernel_utils12RnnBatchStepEPKfPKafS4_fS2_iiii21TfLiteFusedActivationPaS6_PfS7_S7_bPiS8_S8_Pb(float*, i8*, float, i8*, float, float* nocapture readonly, i32, i32, i32, i32, i32, i8*, i8*, float*, float*, float*, i1 zeroext, i32*, i32*, i32*, i8*) local_unnamed_addr #0 {
  tail call void @_ZN6tflite12kernel_utils12RnnBatchStepEPKfPKafS2_S4_fS4_fS2_iiiii21TfLiteFusedActivationPaS6_S6_PfS7_S7_bPiS8_S8_Pb(float* %0, i8* %1, float %2, float* null, i8* null, float 0.000000e+00, i8* %3, float %4, float* %5, i32 %6, i32 0, i32 %7, i32 %8, i32 %9, i32 %10, i8* %11, i8* null, i8* %12, float* %13, float* %14, float* %15, i1 zeroext %16, i32* %17, i32* %18, i32* %19, i8* %20)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12kernel_utils12RnnBatchStepEPKfPKafS2_S4_fS4_fS2_iiiii21TfLiteFusedActivationPaS6_S6_PfS7_S7_bPiS8_S8_Pb(float*, i8*, float, float*, i8*, float, i8*, float, float* nocapture readonly, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, float*, float*, float*, i1 zeroext, i32*, i32*, i32*, i8*) local_unnamed_addr #0 {
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca float, align 4
  %32 = alloca float, align 4
  %33 = alloca float, align 4
  %34 = alloca float, align 4
  %35 = alloca float, align 4
  %36 = alloca float, align 4
  %37 = alloca float, align 4
  %38 = alloca float, align 4
  br i1 %21, label %39, label %54

39:                                               ; preds = %26
  %40 = icmp eq float* %3, null
  %41 = sext i32 %11 to i64
  %42 = getelementptr inbounds i32, i32* %24, i64 %41
  %43 = select i1 %40, i32* %24, i32* %42
  %44 = getelementptr inbounds i32, i32* %43, i64 %41
  %45 = load i8, i8* %25, align 1, !range !40
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %54, label %47

47:                                               ; preds = %39
  %48 = bitcast i32* %24 to i8*
  %49 = shl nsw i64 %41, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %48, i8 0, i64 %49, i1 false) #8
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %1, i32* %24, i32 %11, i32 %9) #8
  br i1 %40, label %52, label %50

50:                                               ; preds = %47
  %51 = bitcast i32* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %51, i8 0, i64 %49, i1 false) #8
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %4, i32* %43, i32 %11, i32 %10) #8
  br label %52

52:                                               ; preds = %47, %50
  %53 = bitcast i32* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %53, i8 0, i64 %49, i1 false) #8
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %6, i32* %44, i32 %11, i32 %11) #8
  store i8 0, i8* %25, align 1
  br label %54

54:                                               ; preds = %39, %52, %26
  %55 = phi i32* [ %24, %52 ], [ %24, %39 ], [ null, %26 ]
  %56 = phi i32* [ %43, %52 ], [ %43, %39 ], [ null, %26 ]
  %57 = phi i32* [ %44, %52 ], [ %44, %39 ], [ null, %26 ]
  %58 = icmp eq i32 %13, %11
  %59 = icmp sgt i32 %12, 0
  br i1 %58, label %73, label %60

60:                                               ; preds = %54
  br i1 %59, label %61, label %423

61:                                               ; preds = %60
  %62 = icmp eq i32 %11, 0
  %63 = sext i32 %11 to i64
  %64 = shl nuw nsw i64 %63, 2
  %65 = bitcast float* %8 to i8*
  %66 = sext i32 %13 to i64
  %67 = zext i32 %12 to i64
  %68 = add nsw i64 %67, -1
  %69 = and i64 %67, 3
  %70 = icmp ult i64 %68, 3
  br i1 %70, label %409, label %71

71:                                               ; preds = %61
  %72 = sub nsw i64 %67, %69
  br label %428

73:                                               ; preds = %54
  br i1 %59, label %74, label %118

74:                                               ; preds = %73
  %75 = icmp eq i32 %11, 0
  %76 = sext i32 %11 to i64
  %77 = shl nuw nsw i64 %76, 2
  %78 = bitcast float* %8 to i8*
  %79 = zext i32 %12 to i64
  %80 = add nsw i64 %79, -1
  %81 = and i64 %79, 3
  %82 = icmp ult i64 %80, 3
  br i1 %82, label %104, label %83

83:                                               ; preds = %74
  %84 = sub nsw i64 %79, %81
  br label %85

85:                                               ; preds = %790, %83
  %86 = phi i64 [ 0, %83 ], [ %791, %790 ]
  %87 = phi i64 [ %84, %83 ], [ %792, %790 ]
  br i1 %75, label %790, label %88

88:                                               ; preds = %85
  %89 = mul nsw i64 %86, %76
  %90 = getelementptr inbounds float, float* %20, i64 %89
  %91 = bitcast float* %90 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %91, i8* align 4 %78, i64 %77, i1 false) #8
  %92 = or i64 %86, 1
  %93 = mul nsw i64 %92, %76
  %94 = getelementptr inbounds float, float* %20, i64 %93
  %95 = bitcast float* %94 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %95, i8* align 4 %78, i64 %77, i1 false) #8
  %96 = or i64 %86, 2
  %97 = mul nsw i64 %96, %76
  %98 = getelementptr inbounds float, float* %20, i64 %97
  %99 = bitcast float* %98 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %99, i8* align 4 %78, i64 %77, i1 false) #8
  %100 = or i64 %86, 3
  %101 = mul nsw i64 %100, %76
  %102 = getelementptr inbounds float, float* %20, i64 %101
  %103 = bitcast float* %102 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %103, i8* align 4 %78, i64 %77, i1 false) #8
  br label %790

104:                                              ; preds = %790, %74
  %105 = phi i64 [ 0, %74 ], [ %791, %790 ]
  %106 = icmp eq i64 %81, 0
  br i1 %106, label %118, label %107

107:                                              ; preds = %104, %114
  %108 = phi i64 [ %115, %114 ], [ %105, %104 ]
  %109 = phi i64 [ %116, %114 ], [ %81, %104 ]
  br i1 %75, label %114, label %110

110:                                              ; preds = %107
  %111 = mul nsw i64 %108, %76
  %112 = getelementptr inbounds float, float* %20, i64 %111
  %113 = bitcast float* %112 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %113, i8* align 4 %78, i64 %77, i1 false) #8
  br label %114

114:                                              ; preds = %110, %107
  %115 = add nuw nsw i64 %108, 1
  %116 = add i64 %109, -1
  %117 = icmp eq i64 %116, 0
  br i1 %117, label %118, label %107, !llvm.loop !41

118:                                              ; preds = %104, %114, %73
  %119 = mul nsw i32 %12, %9
  %120 = tail call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %0, i32 %119) #8
  br i1 %120, label %212, label %121

121:                                              ; preds = %118
  br i1 %59, label %122, label %204

122:                                              ; preds = %121
  %123 = bitcast float* %37 to i8*
  %124 = bitcast float* %38 to i8*
  %125 = sext i32 %9 to i64
  %126 = zext i32 %12 to i64
  br label %127

127:                                              ; preds = %139, %122
  %128 = phi i64 [ 0, %122 ], [ %140, %139 ]
  %129 = mul nsw i64 %128, %125
  br i1 %21, label %130, label %135

130:                                              ; preds = %127
  %131 = getelementptr inbounds float, float* %0, i64 %129
  %132 = getelementptr inbounds i8, i8* %15, i64 %129
  %133 = getelementptr inbounds float, float* %18, i64 %128
  %134 = getelementptr inbounds i32, i32* %22, i64 %128
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %131, i32 %9, i8* %132, float* %133, i32* %134) #8
  br label %139

135:                                              ; preds = %127
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %123) #8
  store float 0xFFFFFFFFE0000000, float* %37, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %124) #8
  store float 0xFFFFFFFFE0000000, float* %38, align 4
  %136 = getelementptr inbounds float, float* %0, i64 %129
  %137 = getelementptr inbounds i8, i8* %15, i64 %129
  %138 = getelementptr inbounds float, float* %18, i64 %128
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %136, i32 %9, i8* %137, float* nonnull %37, float* nonnull %38, float* %138) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %124) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %123) #8
  br label %139

139:                                              ; preds = %135, %130
  %140 = add nuw nsw i64 %128, 1
  %141 = icmp eq i64 %140, %126
  br i1 %141, label %142, label %127

142:                                              ; preds = %139
  br i1 %59, label %143, label %204

143:                                              ; preds = %142
  %144 = zext i32 %12 to i64
  %145 = icmp ult i32 %12, 8
  br i1 %145, label %146, label %148

146:                                              ; preds = %202, %143
  %147 = phi i64 [ 0, %143 ], [ %149, %202 ]
  br label %205

148:                                              ; preds = %143
  %149 = and i64 %144, 4294967288
  %150 = insertelement <4 x float> undef, float %2, i32 0
  %151 = shufflevector <4 x float> %150, <4 x float> undef, <4 x i32> zeroinitializer
  %152 = insertelement <4 x float> undef, float %2, i32 0
  %153 = shufflevector <4 x float> %152, <4 x float> undef, <4 x i32> zeroinitializer
  %154 = add nsw i64 %149, -8
  %155 = lshr exact i64 %154, 3
  %156 = add nuw nsw i64 %155, 1
  %157 = and i64 %156, 1
  %158 = icmp eq i64 %154, 0
  br i1 %158, label %188, label %159

159:                                              ; preds = %148
  %160 = sub nuw nsw i64 %156, %157
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i64 [ 0, %159 ], [ %185, %161 ]
  %163 = phi i64 [ %160, %159 ], [ %186, %161 ]
  %164 = getelementptr inbounds float, float* %18, i64 %162
  %165 = bitcast float* %164 to <4 x float>*
  %166 = load <4 x float>, <4 x float>* %165, align 4
  %167 = getelementptr inbounds float, float* %164, i64 4
  %168 = bitcast float* %167 to <4 x float>*
  %169 = load <4 x float>, <4 x float>* %168, align 4
  %170 = fmul <4 x float> %166, %151
  %171 = fmul <4 x float> %169, %153
  %172 = bitcast float* %164 to <4 x float>*
  store <4 x float> %170, <4 x float>* %172, align 4
  %173 = bitcast float* %167 to <4 x float>*
  store <4 x float> %171, <4 x float>* %173, align 4
  %174 = or i64 %162, 8
  %175 = getelementptr inbounds float, float* %18, i64 %174
  %176 = bitcast float* %175 to <4 x float>*
  %177 = load <4 x float>, <4 x float>* %176, align 4
  %178 = getelementptr inbounds float, float* %175, i64 4
  %179 = bitcast float* %178 to <4 x float>*
  %180 = load <4 x float>, <4 x float>* %179, align 4
  %181 = fmul <4 x float> %177, %151
  %182 = fmul <4 x float> %180, %153
  %183 = bitcast float* %175 to <4 x float>*
  store <4 x float> %181, <4 x float>* %183, align 4
  %184 = bitcast float* %178 to <4 x float>*
  store <4 x float> %182, <4 x float>* %184, align 4
  %185 = add i64 %162, 16
  %186 = add i64 %163, -2
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %161, !llvm.loop !42

188:                                              ; preds = %161, %148
  %189 = phi i64 [ 0, %148 ], [ %185, %161 ]
  %190 = icmp eq i64 %157, 0
  br i1 %190, label %202, label %191

191:                                              ; preds = %188
  %192 = getelementptr inbounds float, float* %18, i64 %189
  %193 = bitcast float* %192 to <4 x float>*
  %194 = load <4 x float>, <4 x float>* %193, align 4
  %195 = getelementptr inbounds float, float* %192, i64 4
  %196 = bitcast float* %195 to <4 x float>*
  %197 = load <4 x float>, <4 x float>* %196, align 4
  %198 = fmul <4 x float> %194, %151
  %199 = fmul <4 x float> %197, %153
  %200 = bitcast float* %192 to <4 x float>*
  store <4 x float> %198, <4 x float>* %200, align 4
  %201 = bitcast float* %195 to <4 x float>*
  store <4 x float> %199, <4 x float>* %201, align 4
  br label %202

202:                                              ; preds = %188, %191
  %203 = icmp eq i64 %149, %144
  br i1 %203, label %204, label %146

204:                                              ; preds = %205, %202, %121, %142
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %1, i32 %11, i32 %9, i8* %15, float* %18, i32 %12, float* %20, float* null, i32* %22, i32* %23, i32* %55, i8* %25, %"class.tflite::CpuBackendContext"* null) #8
  br label %212

205:                                              ; preds = %146, %205
  %206 = phi i64 [ %210, %205 ], [ %147, %146 ]
  %207 = getelementptr inbounds float, float* %18, i64 %206
  %208 = load float, float* %207, align 4
  %209 = fmul float %208, %2
  store float %209, float* %207, align 4
  %210 = add nuw nsw i64 %206, 1
  %211 = icmp eq i64 %210, %144
  br i1 %211, label %204, label %205, !llvm.loop !43

212:                                              ; preds = %204, %118
  %213 = icmp eq float* %3, null
  br i1 %213, label %308, label %214

214:                                              ; preds = %212
  %215 = mul nsw i32 %12, %10
  %216 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* nonnull %3, i32 %215) #8
  br i1 %216, label %308, label %217

217:                                              ; preds = %214
  br i1 %59, label %218, label %300

218:                                              ; preds = %217
  %219 = bitcast float* %35 to i8*
  %220 = bitcast float* %36 to i8*
  %221 = sext i32 %10 to i64
  %222 = zext i32 %12 to i64
  br label %223

223:                                              ; preds = %235, %218
  %224 = phi i64 [ 0, %218 ], [ %236, %235 ]
  %225 = mul nsw i64 %224, %221
  br i1 %21, label %226, label %231

226:                                              ; preds = %223
  %227 = getelementptr inbounds float, float* %3, i64 %225
  %228 = getelementptr inbounds i8, i8* %16, i64 %225
  %229 = getelementptr inbounds float, float* %18, i64 %224
  %230 = getelementptr inbounds i32, i32* %22, i64 %224
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %227, i32 %10, i8* %228, float* %229, i32* %230) #8
  br label %235

231:                                              ; preds = %223
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %219) #8
  store float 0xFFFFFFFFE0000000, float* %35, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %220) #8
  store float 0xFFFFFFFFE0000000, float* %36, align 4
  %232 = getelementptr inbounds float, float* %3, i64 %225
  %233 = getelementptr inbounds i8, i8* %16, i64 %225
  %234 = getelementptr inbounds float, float* %18, i64 %224
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %232, i32 %10, i8* %233, float* nonnull %35, float* nonnull %36, float* %234) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %220) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %219) #8
  br label %235

235:                                              ; preds = %231, %226
  %236 = add nuw nsw i64 %224, 1
  %237 = icmp eq i64 %236, %222
  br i1 %237, label %238, label %223

238:                                              ; preds = %235
  br i1 %59, label %239, label %300

239:                                              ; preds = %238
  %240 = zext i32 %12 to i64
  %241 = icmp ult i32 %12, 8
  br i1 %241, label %242, label %244

242:                                              ; preds = %298, %239
  %243 = phi i64 [ 0, %239 ], [ %245, %298 ]
  br label %301

244:                                              ; preds = %239
  %245 = and i64 %240, 4294967288
  %246 = insertelement <4 x float> undef, float %5, i32 0
  %247 = shufflevector <4 x float> %246, <4 x float> undef, <4 x i32> zeroinitializer
  %248 = insertelement <4 x float> undef, float %5, i32 0
  %249 = shufflevector <4 x float> %248, <4 x float> undef, <4 x i32> zeroinitializer
  %250 = add nsw i64 %245, -8
  %251 = lshr exact i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 1
  %254 = icmp eq i64 %250, 0
  br i1 %254, label %284, label %255

255:                                              ; preds = %244
  %256 = sub nuw nsw i64 %252, %253
  br label %257

257:                                              ; preds = %257, %255
  %258 = phi i64 [ 0, %255 ], [ %281, %257 ]
  %259 = phi i64 [ %256, %255 ], [ %282, %257 ]
  %260 = getelementptr inbounds float, float* %18, i64 %258
  %261 = bitcast float* %260 to <4 x float>*
  %262 = load <4 x float>, <4 x float>* %261, align 4
  %263 = getelementptr inbounds float, float* %260, i64 4
  %264 = bitcast float* %263 to <4 x float>*
  %265 = load <4 x float>, <4 x float>* %264, align 4
  %266 = fmul <4 x float> %262, %247
  %267 = fmul <4 x float> %265, %249
  %268 = bitcast float* %260 to <4 x float>*
  store <4 x float> %266, <4 x float>* %268, align 4
  %269 = bitcast float* %263 to <4 x float>*
  store <4 x float> %267, <4 x float>* %269, align 4
  %270 = or i64 %258, 8
  %271 = getelementptr inbounds float, float* %18, i64 %270
  %272 = bitcast float* %271 to <4 x float>*
  %273 = load <4 x float>, <4 x float>* %272, align 4
  %274 = getelementptr inbounds float, float* %271, i64 4
  %275 = bitcast float* %274 to <4 x float>*
  %276 = load <4 x float>, <4 x float>* %275, align 4
  %277 = fmul <4 x float> %273, %247
  %278 = fmul <4 x float> %276, %249
  %279 = bitcast float* %271 to <4 x float>*
  store <4 x float> %277, <4 x float>* %279, align 4
  %280 = bitcast float* %274 to <4 x float>*
  store <4 x float> %278, <4 x float>* %280, align 4
  %281 = add i64 %258, 16
  %282 = add i64 %259, -2
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %284, label %257, !llvm.loop !44

284:                                              ; preds = %257, %244
  %285 = phi i64 [ 0, %244 ], [ %281, %257 ]
  %286 = icmp eq i64 %253, 0
  br i1 %286, label %298, label %287

287:                                              ; preds = %284
  %288 = getelementptr inbounds float, float* %18, i64 %285
  %289 = bitcast float* %288 to <4 x float>*
  %290 = load <4 x float>, <4 x float>* %289, align 4
  %291 = getelementptr inbounds float, float* %288, i64 4
  %292 = bitcast float* %291 to <4 x float>*
  %293 = load <4 x float>, <4 x float>* %292, align 4
  %294 = fmul <4 x float> %290, %247
  %295 = fmul <4 x float> %293, %249
  %296 = bitcast float* %288 to <4 x float>*
  store <4 x float> %294, <4 x float>* %296, align 4
  %297 = bitcast float* %291 to <4 x float>*
  store <4 x float> %295, <4 x float>* %297, align 4
  br label %298

298:                                              ; preds = %284, %287
  %299 = icmp eq i64 %245, %240
  br i1 %299, label %300, label %242

300:                                              ; preds = %301, %298, %217, %238
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %4, i32 %11, i32 %10, i8* %16, float* %18, i32 %12, float* %20, float* null, i32* %22, i32* %23, i32* %56, i8* %25, %"class.tflite::CpuBackendContext"* null) #8
  br label %308

301:                                              ; preds = %242, %301
  %302 = phi i64 [ %306, %301 ], [ %243, %242 ]
  %303 = getelementptr inbounds float, float* %18, i64 %302
  %304 = load float, float* %303, align 4
  %305 = fmul float %304, %5
  store float %305, float* %303, align 4
  %306 = add nuw nsw i64 %302, 1
  %307 = icmp eq i64 %306, %240
  br i1 %307, label %300, label %301, !llvm.loop !45

308:                                              ; preds = %212, %300, %214
  %309 = mul nsw i32 %12, %11
  %310 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %19, i32 %309) #8
  br i1 %310, label %402, label %311

311:                                              ; preds = %308
  br i1 %59, label %312, label %394

312:                                              ; preds = %311
  %313 = bitcast float* %33 to i8*
  %314 = bitcast float* %34 to i8*
  %315 = sext i32 %11 to i64
  %316 = zext i32 %12 to i64
  br label %317

317:                                              ; preds = %329, %312
  %318 = phi i64 [ 0, %312 ], [ %330, %329 ]
  %319 = mul nsw i64 %318, %315
  br i1 %21, label %320, label %325

320:                                              ; preds = %317
  %321 = getelementptr inbounds float, float* %19, i64 %319
  %322 = getelementptr inbounds i8, i8* %17, i64 %319
  %323 = getelementptr inbounds float, float* %18, i64 %318
  %324 = getelementptr inbounds i32, i32* %22, i64 %318
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %321, i32 %11, i8* %322, float* %323, i32* %324) #8
  br label %329

325:                                              ; preds = %317
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %313) #8
  store float 0xFFFFFFFFE0000000, float* %33, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %314) #8
  store float 0xFFFFFFFFE0000000, float* %34, align 4
  %326 = getelementptr inbounds float, float* %19, i64 %319
  %327 = getelementptr inbounds i8, i8* %17, i64 %319
  %328 = getelementptr inbounds float, float* %18, i64 %318
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %326, i32 %11, i8* %327, float* nonnull %33, float* nonnull %34, float* %328) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %314) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %313) #8
  br label %329

329:                                              ; preds = %325, %320
  %330 = add nuw nsw i64 %318, 1
  %331 = icmp eq i64 %330, %316
  br i1 %331, label %332, label %317

332:                                              ; preds = %329
  br i1 %59, label %333, label %394

333:                                              ; preds = %332
  %334 = zext i32 %12 to i64
  %335 = icmp ult i32 %12, 8
  br i1 %335, label %336, label %338

336:                                              ; preds = %392, %333
  %337 = phi i64 [ 0, %333 ], [ %339, %392 ]
  br label %395

338:                                              ; preds = %333
  %339 = and i64 %334, 4294967288
  %340 = insertelement <4 x float> undef, float %7, i32 0
  %341 = shufflevector <4 x float> %340, <4 x float> undef, <4 x i32> zeroinitializer
  %342 = insertelement <4 x float> undef, float %7, i32 0
  %343 = shufflevector <4 x float> %342, <4 x float> undef, <4 x i32> zeroinitializer
  %344 = add nsw i64 %339, -8
  %345 = lshr exact i64 %344, 3
  %346 = add nuw nsw i64 %345, 1
  %347 = and i64 %346, 1
  %348 = icmp eq i64 %344, 0
  br i1 %348, label %378, label %349

349:                                              ; preds = %338
  %350 = sub nuw nsw i64 %346, %347
  br label %351

351:                                              ; preds = %351, %349
  %352 = phi i64 [ 0, %349 ], [ %375, %351 ]
  %353 = phi i64 [ %350, %349 ], [ %376, %351 ]
  %354 = getelementptr inbounds float, float* %18, i64 %352
  %355 = bitcast float* %354 to <4 x float>*
  %356 = load <4 x float>, <4 x float>* %355, align 4
  %357 = getelementptr inbounds float, float* %354, i64 4
  %358 = bitcast float* %357 to <4 x float>*
  %359 = load <4 x float>, <4 x float>* %358, align 4
  %360 = fmul <4 x float> %356, %341
  %361 = fmul <4 x float> %359, %343
  %362 = bitcast float* %354 to <4 x float>*
  store <4 x float> %360, <4 x float>* %362, align 4
  %363 = bitcast float* %357 to <4 x float>*
  store <4 x float> %361, <4 x float>* %363, align 4
  %364 = or i64 %352, 8
  %365 = getelementptr inbounds float, float* %18, i64 %364
  %366 = bitcast float* %365 to <4 x float>*
  %367 = load <4 x float>, <4 x float>* %366, align 4
  %368 = getelementptr inbounds float, float* %365, i64 4
  %369 = bitcast float* %368 to <4 x float>*
  %370 = load <4 x float>, <4 x float>* %369, align 4
  %371 = fmul <4 x float> %367, %341
  %372 = fmul <4 x float> %370, %343
  %373 = bitcast float* %365 to <4 x float>*
  store <4 x float> %371, <4 x float>* %373, align 4
  %374 = bitcast float* %368 to <4 x float>*
  store <4 x float> %372, <4 x float>* %374, align 4
  %375 = add i64 %352, 16
  %376 = add i64 %353, -2
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %351, !llvm.loop !46

378:                                              ; preds = %351, %338
  %379 = phi i64 [ 0, %338 ], [ %375, %351 ]
  %380 = icmp eq i64 %347, 0
  br i1 %380, label %392, label %381

381:                                              ; preds = %378
  %382 = getelementptr inbounds float, float* %18, i64 %379
  %383 = bitcast float* %382 to <4 x float>*
  %384 = load <4 x float>, <4 x float>* %383, align 4
  %385 = getelementptr inbounds float, float* %382, i64 4
  %386 = bitcast float* %385 to <4 x float>*
  %387 = load <4 x float>, <4 x float>* %386, align 4
  %388 = fmul <4 x float> %384, %341
  %389 = fmul <4 x float> %387, %343
  %390 = bitcast float* %382 to <4 x float>*
  store <4 x float> %388, <4 x float>* %390, align 4
  %391 = bitcast float* %385 to <4 x float>*
  store <4 x float> %389, <4 x float>* %391, align 4
  br label %392

392:                                              ; preds = %378, %381
  %393 = icmp eq i64 %339, %334
  br i1 %393, label %394, label %336

394:                                              ; preds = %395, %392, %311, %332
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %6, i32 %11, i32 %11, i8* %17, float* %18, i32 %12, float* %20, float* null, i32* %22, i32* %23, i32* %57, i8* %25, %"class.tflite::CpuBackendContext"* null) #8
  br label %402

395:                                              ; preds = %336, %395
  %396 = phi i64 [ %400, %395 ], [ %337, %336 ]
  %397 = getelementptr inbounds float, float* %18, i64 %396
  %398 = load float, float* %397, align 4
  %399 = fmul float %398, %7
  store float %399, float* %397, align 4
  %400 = add nuw nsw i64 %396, 1
  %401 = icmp eq i64 %400, %334
  br i1 %401, label %394, label %395, !llvm.loop !47

402:                                              ; preds = %394, %308
  call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %20, i32 %309, i32 %14, float* %20)
  %403 = icmp eq i32 %309, 0
  br i1 %403, label %789, label %404

404:                                              ; preds = %402
  %405 = sext i32 %309 to i64
  %406 = shl nuw nsw i64 %405, 2
  %407 = bitcast float* %19 to i8*
  %408 = bitcast float* %20 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %407, i8* align 4 %408, i64 %406, i1 false) #8
  br label %789

409:                                              ; preds = %794, %61
  %410 = phi i64 [ 0, %61 ], [ %795, %794 ]
  %411 = icmp eq i64 %69, 0
  br i1 %411, label %423, label %412

412:                                              ; preds = %409, %419
  %413 = phi i64 [ %420, %419 ], [ %410, %409 ]
  %414 = phi i64 [ %421, %419 ], [ %69, %409 ]
  br i1 %62, label %419, label %415

415:                                              ; preds = %412
  %416 = mul nsw i64 %413, %66
  %417 = getelementptr inbounds float, float* %20, i64 %416
  %418 = bitcast float* %417 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %418, i8* align 4 %65, i64 %64, i1 false) #8
  br label %419

419:                                              ; preds = %415, %412
  %420 = add nuw nsw i64 %413, 1
  %421 = add i64 %414, -1
  %422 = icmp eq i64 %421, 0
  br i1 %422, label %423, label %412, !llvm.loop !48

423:                                              ; preds = %409, %419, %60
  %424 = mul nsw i32 %12, %9
  %425 = tail call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %0, i32 %424) #8
  %426 = xor i1 %59, true
  %427 = or i1 %425, %426
  br i1 %427, label %551, label %447

428:                                              ; preds = %794, %71
  %429 = phi i64 [ 0, %71 ], [ %795, %794 ]
  %430 = phi i64 [ %72, %71 ], [ %796, %794 ]
  br i1 %62, label %794, label %431

431:                                              ; preds = %428
  %432 = mul nsw i64 %429, %66
  %433 = getelementptr inbounds float, float* %20, i64 %432
  %434 = bitcast float* %433 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %434, i8* align 4 %65, i64 %64, i1 false) #8
  %435 = or i64 %429, 1
  %436 = mul nsw i64 %435, %66
  %437 = getelementptr inbounds float, float* %20, i64 %436
  %438 = bitcast float* %437 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %438, i8* align 4 %65, i64 %64, i1 false) #8
  %439 = or i64 %429, 2
  %440 = mul nsw i64 %439, %66
  %441 = getelementptr inbounds float, float* %20, i64 %440
  %442 = bitcast float* %441 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %442, i8* align 4 %65, i64 %64, i1 false) #8
  %443 = or i64 %429, 3
  %444 = mul nsw i64 %443, %66
  %445 = getelementptr inbounds float, float* %20, i64 %444
  %446 = bitcast float* %445 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %446, i8* align 4 %65, i64 %64, i1 false) #8
  br label %794

447:                                              ; preds = %423
  %448 = bitcast float* %31 to i8*
  %449 = bitcast float* %32 to i8*
  %450 = sext i32 %9 to i64
  %451 = zext i32 %12 to i64
  br label %452

452:                                              ; preds = %464, %447
  %453 = phi i64 [ 0, %447 ], [ %465, %464 ]
  %454 = mul nsw i64 %453, %450
  br i1 %21, label %455, label %460

455:                                              ; preds = %452
  %456 = getelementptr inbounds float, float* %0, i64 %454
  %457 = getelementptr inbounds i8, i8* %15, i64 %454
  %458 = getelementptr inbounds float, float* %18, i64 %453
  %459 = getelementptr inbounds i32, i32* %22, i64 %453
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %456, i32 %9, i8* %457, float* %458, i32* %459) #8
  br label %464

460:                                              ; preds = %452
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %448) #8
  store float 0xFFFFFFFFE0000000, float* %31, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %449) #8
  store float 0xFFFFFFFFE0000000, float* %32, align 4
  %461 = getelementptr inbounds float, float* %0, i64 %454
  %462 = getelementptr inbounds i8, i8* %15, i64 %454
  %463 = getelementptr inbounds float, float* %18, i64 %453
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %461, i32 %9, i8* %462, float* nonnull %31, float* nonnull %32, float* %463) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %449) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %448) #8
  br label %464

464:                                              ; preds = %460, %455
  %465 = add nuw nsw i64 %453, 1
  %466 = icmp eq i64 %465, %451
  br i1 %466, label %467, label %452

467:                                              ; preds = %464
  br i1 %59, label %468, label %551

468:                                              ; preds = %467
  %469 = zext i32 %12 to i64
  %470 = icmp ult i32 %12, 8
  br i1 %470, label %471, label %473

471:                                              ; preds = %527, %468
  %472 = phi i64 [ 0, %468 ], [ %474, %527 ]
  br label %534

473:                                              ; preds = %468
  %474 = and i64 %469, 4294967288
  %475 = insertelement <4 x float> undef, float %2, i32 0
  %476 = shufflevector <4 x float> %475, <4 x float> undef, <4 x i32> zeroinitializer
  %477 = insertelement <4 x float> undef, float %2, i32 0
  %478 = shufflevector <4 x float> %477, <4 x float> undef, <4 x i32> zeroinitializer
  %479 = add nsw i64 %474, -8
  %480 = lshr exact i64 %479, 3
  %481 = add nuw nsw i64 %480, 1
  %482 = and i64 %481, 1
  %483 = icmp eq i64 %479, 0
  br i1 %483, label %513, label %484

484:                                              ; preds = %473
  %485 = sub nuw nsw i64 %481, %482
  br label %486

486:                                              ; preds = %486, %484
  %487 = phi i64 [ 0, %484 ], [ %510, %486 ]
  %488 = phi i64 [ %485, %484 ], [ %511, %486 ]
  %489 = getelementptr inbounds float, float* %18, i64 %487
  %490 = bitcast float* %489 to <4 x float>*
  %491 = load <4 x float>, <4 x float>* %490, align 4
  %492 = getelementptr inbounds float, float* %489, i64 4
  %493 = bitcast float* %492 to <4 x float>*
  %494 = load <4 x float>, <4 x float>* %493, align 4
  %495 = fmul <4 x float> %491, %476
  %496 = fmul <4 x float> %494, %478
  %497 = bitcast float* %489 to <4 x float>*
  store <4 x float> %495, <4 x float>* %497, align 4
  %498 = bitcast float* %492 to <4 x float>*
  store <4 x float> %496, <4 x float>* %498, align 4
  %499 = or i64 %487, 8
  %500 = getelementptr inbounds float, float* %18, i64 %499
  %501 = bitcast float* %500 to <4 x float>*
  %502 = load <4 x float>, <4 x float>* %501, align 4
  %503 = getelementptr inbounds float, float* %500, i64 4
  %504 = bitcast float* %503 to <4 x float>*
  %505 = load <4 x float>, <4 x float>* %504, align 4
  %506 = fmul <4 x float> %502, %476
  %507 = fmul <4 x float> %505, %478
  %508 = bitcast float* %500 to <4 x float>*
  store <4 x float> %506, <4 x float>* %508, align 4
  %509 = bitcast float* %503 to <4 x float>*
  store <4 x float> %507, <4 x float>* %509, align 4
  %510 = add i64 %487, 16
  %511 = add i64 %488, -2
  %512 = icmp eq i64 %511, 0
  br i1 %512, label %513, label %486, !llvm.loop !49

513:                                              ; preds = %486, %473
  %514 = phi i64 [ 0, %473 ], [ %510, %486 ]
  %515 = icmp eq i64 %482, 0
  br i1 %515, label %527, label %516

516:                                              ; preds = %513
  %517 = getelementptr inbounds float, float* %18, i64 %514
  %518 = bitcast float* %517 to <4 x float>*
  %519 = load <4 x float>, <4 x float>* %518, align 4
  %520 = getelementptr inbounds float, float* %517, i64 4
  %521 = bitcast float* %520 to <4 x float>*
  %522 = load <4 x float>, <4 x float>* %521, align 4
  %523 = fmul <4 x float> %519, %476
  %524 = fmul <4 x float> %522, %478
  %525 = bitcast float* %517 to <4 x float>*
  store <4 x float> %523, <4 x float>* %525, align 4
  %526 = bitcast float* %520 to <4 x float>*
  store <4 x float> %524, <4 x float>* %526, align 4
  br label %527

527:                                              ; preds = %513, %516
  %528 = icmp eq i64 %474, %469
  br i1 %528, label %529, label %471

529:                                              ; preds = %534, %527
  br i1 %59, label %530, label %551

530:                                              ; preds = %529
  %531 = sext i32 %13 to i64
  %532 = sext i32 %9 to i64
  %533 = zext i32 %12 to i64
  br label %541

534:                                              ; preds = %471, %534
  %535 = phi i64 [ %539, %534 ], [ %472, %471 ]
  %536 = getelementptr inbounds float, float* %18, i64 %535
  %537 = load float, float* %536, align 4
  %538 = fmul float %537, %2
  store float %538, float* %536, align 4
  %539 = add nuw nsw i64 %535, 1
  %540 = icmp eq i64 %539, %469
  br i1 %540, label %529, label %534, !llvm.loop !50

541:                                              ; preds = %541, %530
  %542 = phi i64 [ 0, %530 ], [ %549, %541 ]
  %543 = mul nsw i64 %542, %532
  %544 = getelementptr inbounds i8, i8* %15, i64 %543
  %545 = getelementptr inbounds float, float* %18, i64 %542
  %546 = mul nsw i64 %542, %531
  %547 = getelementptr inbounds float, float* %20, i64 %546
  %548 = getelementptr inbounds i32, i32* %22, i64 %542
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %1, i32 %11, i32 %9, i8* %544, float* %545, i32 1, float* %547, float* null, i32* %548, i32* %23, i32* %55, i8* %25, %"class.tflite::CpuBackendContext"* null) #8
  %549 = add nuw nsw i64 %542, 1
  %550 = icmp eq i64 %549, %533
  br i1 %550, label %551, label %541

551:                                              ; preds = %541, %423, %467, %529
  %552 = icmp eq float* %3, null
  br i1 %552, label %662, label %553

553:                                              ; preds = %551
  %554 = mul nsw i32 %12, %10
  %555 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* nonnull %3, i32 %554) #8
  %556 = xor i1 %59, true
  %557 = or i1 %555, %556
  br i1 %557, label %662, label %558

558:                                              ; preds = %553
  %559 = bitcast float* %29 to i8*
  %560 = bitcast float* %30 to i8*
  %561 = sext i32 %10 to i64
  %562 = zext i32 %12 to i64
  br label %563

563:                                              ; preds = %575, %558
  %564 = phi i64 [ 0, %558 ], [ %576, %575 ]
  %565 = mul nsw i64 %564, %561
  br i1 %21, label %566, label %571

566:                                              ; preds = %563
  %567 = getelementptr inbounds float, float* %3, i64 %565
  %568 = getelementptr inbounds i8, i8* %16, i64 %565
  %569 = getelementptr inbounds float, float* %18, i64 %564
  %570 = getelementptr inbounds i32, i32* %22, i64 %564
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %567, i32 %10, i8* %568, float* %569, i32* %570) #8
  br label %575

571:                                              ; preds = %563
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %559) #8
  store float 0xFFFFFFFFE0000000, float* %29, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %560) #8
  store float 0xFFFFFFFFE0000000, float* %30, align 4
  %572 = getelementptr inbounds float, float* %3, i64 %565
  %573 = getelementptr inbounds i8, i8* %16, i64 %565
  %574 = getelementptr inbounds float, float* %18, i64 %564
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %572, i32 %10, i8* %573, float* nonnull %29, float* nonnull %30, float* %574) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %560) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %559) #8
  br label %575

575:                                              ; preds = %571, %566
  %576 = add nuw nsw i64 %564, 1
  %577 = icmp eq i64 %576, %562
  br i1 %577, label %578, label %563

578:                                              ; preds = %575
  br i1 %59, label %579, label %662

579:                                              ; preds = %578
  %580 = zext i32 %12 to i64
  %581 = icmp ult i32 %12, 8
  br i1 %581, label %582, label %584

582:                                              ; preds = %638, %579
  %583 = phi i64 [ 0, %579 ], [ %585, %638 ]
  br label %645

584:                                              ; preds = %579
  %585 = and i64 %580, 4294967288
  %586 = insertelement <4 x float> undef, float %5, i32 0
  %587 = shufflevector <4 x float> %586, <4 x float> undef, <4 x i32> zeroinitializer
  %588 = insertelement <4 x float> undef, float %5, i32 0
  %589 = shufflevector <4 x float> %588, <4 x float> undef, <4 x i32> zeroinitializer
  %590 = add nsw i64 %585, -8
  %591 = lshr exact i64 %590, 3
  %592 = add nuw nsw i64 %591, 1
  %593 = and i64 %592, 1
  %594 = icmp eq i64 %590, 0
  br i1 %594, label %624, label %595

595:                                              ; preds = %584
  %596 = sub nuw nsw i64 %592, %593
  br label %597

597:                                              ; preds = %597, %595
  %598 = phi i64 [ 0, %595 ], [ %621, %597 ]
  %599 = phi i64 [ %596, %595 ], [ %622, %597 ]
  %600 = getelementptr inbounds float, float* %18, i64 %598
  %601 = bitcast float* %600 to <4 x float>*
  %602 = load <4 x float>, <4 x float>* %601, align 4
  %603 = getelementptr inbounds float, float* %600, i64 4
  %604 = bitcast float* %603 to <4 x float>*
  %605 = load <4 x float>, <4 x float>* %604, align 4
  %606 = fmul <4 x float> %602, %587
  %607 = fmul <4 x float> %605, %589
  %608 = bitcast float* %600 to <4 x float>*
  store <4 x float> %606, <4 x float>* %608, align 4
  %609 = bitcast float* %603 to <4 x float>*
  store <4 x float> %607, <4 x float>* %609, align 4
  %610 = or i64 %598, 8
  %611 = getelementptr inbounds float, float* %18, i64 %610
  %612 = bitcast float* %611 to <4 x float>*
  %613 = load <4 x float>, <4 x float>* %612, align 4
  %614 = getelementptr inbounds float, float* %611, i64 4
  %615 = bitcast float* %614 to <4 x float>*
  %616 = load <4 x float>, <4 x float>* %615, align 4
  %617 = fmul <4 x float> %613, %587
  %618 = fmul <4 x float> %616, %589
  %619 = bitcast float* %611 to <4 x float>*
  store <4 x float> %617, <4 x float>* %619, align 4
  %620 = bitcast float* %614 to <4 x float>*
  store <4 x float> %618, <4 x float>* %620, align 4
  %621 = add i64 %598, 16
  %622 = add i64 %599, -2
  %623 = icmp eq i64 %622, 0
  br i1 %623, label %624, label %597, !llvm.loop !51

624:                                              ; preds = %597, %584
  %625 = phi i64 [ 0, %584 ], [ %621, %597 ]
  %626 = icmp eq i64 %593, 0
  br i1 %626, label %638, label %627

627:                                              ; preds = %624
  %628 = getelementptr inbounds float, float* %18, i64 %625
  %629 = bitcast float* %628 to <4 x float>*
  %630 = load <4 x float>, <4 x float>* %629, align 4
  %631 = getelementptr inbounds float, float* %628, i64 4
  %632 = bitcast float* %631 to <4 x float>*
  %633 = load <4 x float>, <4 x float>* %632, align 4
  %634 = fmul <4 x float> %630, %587
  %635 = fmul <4 x float> %633, %589
  %636 = bitcast float* %628 to <4 x float>*
  store <4 x float> %634, <4 x float>* %636, align 4
  %637 = bitcast float* %631 to <4 x float>*
  store <4 x float> %635, <4 x float>* %637, align 4
  br label %638

638:                                              ; preds = %624, %627
  %639 = icmp eq i64 %585, %580
  br i1 %639, label %640, label %582

640:                                              ; preds = %645, %638
  br i1 %59, label %641, label %662

641:                                              ; preds = %640
  %642 = sext i32 %13 to i64
  %643 = sext i32 %10 to i64
  %644 = zext i32 %12 to i64
  br label %652

645:                                              ; preds = %582, %645
  %646 = phi i64 [ %650, %645 ], [ %583, %582 ]
  %647 = getelementptr inbounds float, float* %18, i64 %646
  %648 = load float, float* %647, align 4
  %649 = fmul float %648, %5
  store float %649, float* %647, align 4
  %650 = add nuw nsw i64 %646, 1
  %651 = icmp eq i64 %650, %580
  br i1 %651, label %640, label %645, !llvm.loop !52

652:                                              ; preds = %652, %641
  %653 = phi i64 [ 0, %641 ], [ %660, %652 ]
  %654 = mul nsw i64 %653, %643
  %655 = getelementptr inbounds i8, i8* %16, i64 %654
  %656 = getelementptr inbounds float, float* %18, i64 %653
  %657 = mul nsw i64 %653, %642
  %658 = getelementptr inbounds float, float* %20, i64 %657
  %659 = getelementptr inbounds i32, i32* %22, i64 %653
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %4, i32 %11, i32 %10, i8* %655, float* %656, i32 1, float* %658, float* null, i32* %659, i32* %23, i32* %56, i8* %25, %"class.tflite::CpuBackendContext"* null) #8
  %660 = add nuw nsw i64 %653, 1
  %661 = icmp eq i64 %660, %644
  br i1 %661, label %662, label %652

662:                                              ; preds = %652, %553, %578, %640, %551
  %663 = mul nsw i32 %12, %11
  %664 = call zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float* %19, i32 %663) #8
  br i1 %664, label %770, label %665

665:                                              ; preds = %662
  br i1 %59, label %666, label %789

666:                                              ; preds = %665
  %667 = bitcast float* %27 to i8*
  %668 = bitcast float* %28 to i8*
  %669 = sext i32 %11 to i64
  %670 = zext i32 %12 to i64
  br label %671

671:                                              ; preds = %683, %666
  %672 = phi i64 [ 0, %666 ], [ %684, %683 ]
  %673 = mul nsw i64 %672, %669
  br i1 %21, label %674, label %679

674:                                              ; preds = %671
  %675 = getelementptr inbounds float, float* %19, i64 %673
  %676 = getelementptr inbounds i8, i8* %17, i64 %673
  %677 = getelementptr inbounds float, float* %18, i64 %672
  %678 = getelementptr inbounds i32, i32* %22, i64 %672
  call void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float* %675, i32 %11, i8* %676, float* %677, i32* %678) #8
  br label %683

679:                                              ; preds = %671
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %667) #8
  store float 0xFFFFFFFFE0000000, float* %27, align 4
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %668) #8
  store float 0xFFFFFFFFE0000000, float* %28, align 4
  %680 = getelementptr inbounds float, float* %19, i64 %673
  %681 = getelementptr inbounds i8, i8* %17, i64 %673
  %682 = getelementptr inbounds float, float* %18, i64 %672
  call void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float* %680, i32 %11, i8* %681, float* nonnull %27, float* nonnull %28, float* %682) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %668) #8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %667) #8
  br label %683

683:                                              ; preds = %679, %674
  %684 = add nuw nsw i64 %672, 1
  %685 = icmp eq i64 %684, %670
  br i1 %685, label %686, label %671

686:                                              ; preds = %683
  br i1 %59, label %687, label %789

687:                                              ; preds = %686
  %688 = zext i32 %12 to i64
  %689 = icmp ult i32 %12, 8
  br i1 %689, label %690, label %692

690:                                              ; preds = %746, %687
  %691 = phi i64 [ 0, %687 ], [ %693, %746 ]
  br label %753

692:                                              ; preds = %687
  %693 = and i64 %688, 4294967288
  %694 = insertelement <4 x float> undef, float %7, i32 0
  %695 = shufflevector <4 x float> %694, <4 x float> undef, <4 x i32> zeroinitializer
  %696 = insertelement <4 x float> undef, float %7, i32 0
  %697 = shufflevector <4 x float> %696, <4 x float> undef, <4 x i32> zeroinitializer
  %698 = add nsw i64 %693, -8
  %699 = lshr exact i64 %698, 3
  %700 = add nuw nsw i64 %699, 1
  %701 = and i64 %700, 1
  %702 = icmp eq i64 %698, 0
  br i1 %702, label %732, label %703

703:                                              ; preds = %692
  %704 = sub nuw nsw i64 %700, %701
  br label %705

705:                                              ; preds = %705, %703
  %706 = phi i64 [ 0, %703 ], [ %729, %705 ]
  %707 = phi i64 [ %704, %703 ], [ %730, %705 ]
  %708 = getelementptr inbounds float, float* %18, i64 %706
  %709 = bitcast float* %708 to <4 x float>*
  %710 = load <4 x float>, <4 x float>* %709, align 4
  %711 = getelementptr inbounds float, float* %708, i64 4
  %712 = bitcast float* %711 to <4 x float>*
  %713 = load <4 x float>, <4 x float>* %712, align 4
  %714 = fmul <4 x float> %710, %695
  %715 = fmul <4 x float> %713, %697
  %716 = bitcast float* %708 to <4 x float>*
  store <4 x float> %714, <4 x float>* %716, align 4
  %717 = bitcast float* %711 to <4 x float>*
  store <4 x float> %715, <4 x float>* %717, align 4
  %718 = or i64 %706, 8
  %719 = getelementptr inbounds float, float* %18, i64 %718
  %720 = bitcast float* %719 to <4 x float>*
  %721 = load <4 x float>, <4 x float>* %720, align 4
  %722 = getelementptr inbounds float, float* %719, i64 4
  %723 = bitcast float* %722 to <4 x float>*
  %724 = load <4 x float>, <4 x float>* %723, align 4
  %725 = fmul <4 x float> %721, %695
  %726 = fmul <4 x float> %724, %697
  %727 = bitcast float* %719 to <4 x float>*
  store <4 x float> %725, <4 x float>* %727, align 4
  %728 = bitcast float* %722 to <4 x float>*
  store <4 x float> %726, <4 x float>* %728, align 4
  %729 = add i64 %706, 16
  %730 = add i64 %707, -2
  %731 = icmp eq i64 %730, 0
  br i1 %731, label %732, label %705, !llvm.loop !53

732:                                              ; preds = %705, %692
  %733 = phi i64 [ 0, %692 ], [ %729, %705 ]
  %734 = icmp eq i64 %701, 0
  br i1 %734, label %746, label %735

735:                                              ; preds = %732
  %736 = getelementptr inbounds float, float* %18, i64 %733
  %737 = bitcast float* %736 to <4 x float>*
  %738 = load <4 x float>, <4 x float>* %737, align 4
  %739 = getelementptr inbounds float, float* %736, i64 4
  %740 = bitcast float* %739 to <4 x float>*
  %741 = load <4 x float>, <4 x float>* %740, align 4
  %742 = fmul <4 x float> %738, %695
  %743 = fmul <4 x float> %741, %697
  %744 = bitcast float* %736 to <4 x float>*
  store <4 x float> %742, <4 x float>* %744, align 4
  %745 = bitcast float* %739 to <4 x float>*
  store <4 x float> %743, <4 x float>* %745, align 4
  br label %746

746:                                              ; preds = %732, %735
  %747 = icmp eq i64 %693, %688
  br i1 %747, label %748, label %690

748:                                              ; preds = %753, %746
  br i1 %59, label %749, label %789

749:                                              ; preds = %748
  %750 = sext i32 %13 to i64
  %751 = sext i32 %11 to i64
  %752 = zext i32 %12 to i64
  br label %760

753:                                              ; preds = %690, %753
  %754 = phi i64 [ %758, %753 ], [ %691, %690 ]
  %755 = getelementptr inbounds float, float* %18, i64 %754
  %756 = load float, float* %755, align 4
  %757 = fmul float %756, %7
  store float %757, float* %755, align 4
  %758 = add nuw nsw i64 %754, 1
  %759 = icmp eq i64 %758, %688
  br i1 %759, label %748, label %753, !llvm.loop !54

760:                                              ; preds = %760, %749
  %761 = phi i64 [ 0, %749 ], [ %768, %760 ]
  %762 = mul nsw i64 %761, %751
  %763 = getelementptr inbounds i8, i8* %17, i64 %762
  %764 = getelementptr inbounds float, float* %18, i64 %761
  %765 = mul nsw i64 %761, %750
  %766 = getelementptr inbounds float, float* %20, i64 %765
  %767 = getelementptr inbounds i32, i32* %22, i64 %761
  call void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8* %6, i32 %11, i32 %11, i8* %763, float* %764, i32 1, float* %766, float* null, i32* %767, i32* %23, i32* %57, i8* %25, %"class.tflite::CpuBackendContext"* null) #8
  %768 = add nuw nsw i64 %761, 1
  %769 = icmp eq i64 %768, %752
  br i1 %769, label %770, label %760

770:                                              ; preds = %760, %662
  br i1 %59, label %771, label %789

771:                                              ; preds = %770
  %772 = icmp eq i32 %11, 0
  %773 = sext i32 %11 to i64
  %774 = shl nuw nsw i64 %773, 2
  %775 = sext i32 %13 to i64
  %776 = zext i32 %12 to i64
  br label %777

777:                                              ; preds = %786, %771
  %778 = phi i64 [ 0, %771 ], [ %787, %786 ]
  %779 = mul nsw i64 %778, %775
  %780 = getelementptr inbounds float, float* %20, i64 %779
  call void @_ZN6tflite12tensor_utils23ApplyActivationToVectorEPKfi21TfLiteFusedActivationPf(float* %780, i32 %11, i32 %14, float* %780)
  br i1 %772, label %786, label %781

781:                                              ; preds = %777
  %782 = mul nsw i64 %778, %773
  %783 = getelementptr inbounds float, float* %19, i64 %782
  %784 = bitcast float* %783 to i8*
  %785 = bitcast float* %780 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %784, i8* align 4 %785, i64 %774, i1 false) #8
  br label %786

786:                                              ; preds = %777, %781
  %787 = add nuw nsw i64 %778, 1
  %788 = icmp eq i64 %787, %776
  br i1 %788, label %789, label %777

789:                                              ; preds = %786, %665, %686, %748, %770, %404, %402
  ret void

790:                                              ; preds = %85, %88
  %791 = add nuw nsw i64 %86, 4
  %792 = add i64 %87, -4
  %793 = icmp eq i64 %792, 0
  br i1 %793, label %104, label %85

794:                                              ; preds = %428, %431
  %795 = add nuw nsw i64 %429, 4
  %796 = add i64 %430, -4
  %797 = icmp eq i64 %796, 0
  br i1 %797, label %409, label %428
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6tflite12kernel_utils17ComputeMatrixSumsEPiS1_S1_S1_PKfiiiPKaS5_S5_(i32*, i32*, i32*, i32* nocapture readnone, float* readnone, i32, i32, i32, i8*, i8*, i8*) local_unnamed_addr #0 {
  %12 = bitcast i32* %0 to i8*
  %13 = sext i32 %5 to i64
  %14 = shl nsw i64 %13, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %12, i8 0, i64 %14, i1 false)
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %8, i32* %0, i32 %5, i32 %6) #8
  %15 = icmp eq float* %4, null
  br i1 %15, label %18, label %16

16:                                               ; preds = %11
  %17 = bitcast i32* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %14, i1 false)
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %9, i32* %1, i32 %5, i32 %7) #8
  br label %18

18:                                               ; preds = %11, %16
  %19 = bitcast i32* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 %14, i1 false)
  tail call void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8* %10, i32* %2, i32 %5, i32 %5) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN6tflite12tensor_utils18ReductionSumVectorEPKaPiii(i8*, i32*, i32, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN6tflite12tensor_utils12IsZeroVectorEPKfi(float*, i32) local_unnamed_addr #1

declare void @_ZN6tflite12tensor_utils35MatrixBatchVectorMultiplyAccumulateEPKaiiS2_PKfiPfS4_PKiPiS8_PbPNS_17CpuBackendContextE(i8*, i32, i32, i8*, float*, i32, float*, float*, i32*, i32*, i32*, i8*, %"class.tflite::CpuBackendContext"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal21dense_assignment_loopINS0_31generic_dense_assignment_kernelINS0_9evaluatorINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEEEENS3_INS_12CwiseUnaryOpINS0_14scalar_tanh_opIfEEKSB_EEEENS0_9assign_opIffEELi0EEELi3ELi0EE3runERSL_(%"class.Eigen::internal::generic_dense_assignment_kernel"* dereferenceable(32)) local_unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %0, i64 0, i32 3
  %3 = bitcast %"class.Eigen::ArrayWrapper"** %2 to %"struct.Eigen::EigenBase.16"**
  %4 = load %"struct.Eigen::EigenBase.16"*, %"struct.Eigen::EigenBase.16"** %3, align 8
  %5 = getelementptr inbounds %"struct.Eigen::EigenBase.16", %"struct.Eigen::EigenBase.16"* %4, i64 8
  %6 = bitcast %"struct.Eigen::EigenBase.16"* %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"struct.Eigen::EigenBase.16"* %4 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %9, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %1
  %13 = lshr i64 %9, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 3
  %16 = icmp slt i64 %15, %7
  %17 = select i1 %16, i64 %15, i64 %7
  br label %18

18:                                               ; preds = %1, %12
  %19 = phi i64 [ %17, %12 ], [ %7, %1 ]
  %20 = sub nsw i64 %7, %19
  %21 = sdiv i64 %20, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %22, %19
  %24 = icmp sgt i64 %19, 0
  br i1 %24, label %25, label %72

25:                                               ; preds = %18
  %26 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base"**
  %27 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %0, i64 0, i32 1
  %28 = bitcast %"struct.Eigen::internal::evaluator"** %27 to %"struct.Eigen::internal::unary_evaluator"**
  br label %29

29:                                               ; preds = %29, %25
  %30 = phi i64 [ 0, %25 ], [ %70, %29 ]
  %31 = load %"struct.Eigen::internal::evaluator_wrapper_base"*, %"struct.Eigen::internal::evaluator_wrapper_base"** %26, align 8
  %32 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base", %"struct.Eigen::internal::evaluator_wrapper_base"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load float*, float** %32, align 8
  %34 = getelementptr inbounds float, float* %33, i64 %30
  %35 = load %"struct.Eigen::internal::unary_evaluator"*, %"struct.Eigen::internal::unary_evaluator"** %28, align 8
  %36 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator", %"struct.Eigen::internal::unary_evaluator"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load float*, float** %36, align 8
  %38 = getelementptr inbounds float, float* %37, i64 %30
  %39 = load float, float* %38, align 4
  %40 = fcmp ogt float %39, 0x401F9F09E0000000
  %41 = select i1 %40, float 0x401F9F09E0000000, float %39
  %42 = fcmp olt float %41, 0xC01F9F09E0000000
  %43 = select i1 %42, float 0xC01F9F09E0000000, float %41
  %44 = tail call float @llvm.fabs.f32(float %39) #8
  %45 = fcmp olt float %44, 0x3F3A36E2E0000000
  %46 = select i1 %45, float 0xFFFFFFFFE0000000, float 0.000000e+00
  %47 = fmul float %43, %43
  %48 = fmul float %47, 0x3CB3E4B800000000
  %49 = fsub float 0x3D4C266FC0000000, %48
  %50 = fmul float %47, %49
  %51 = fadd float %50, 0xBDD7A6FFE0000000
  %52 = fmul float %47, %51
  %53 = fadd float %52, 0x3E6B800820000000
  %54 = fmul float %47, %53
  %55 = fadd float %54, 0x3EEF286940000000
  %56 = fmul float %47, %55
  %57 = fadd float %56, 0x3F44E1BDA0000000
  %58 = fmul float %47, %57
  %59 = fadd float %58, 0x3F740B3B80000000
  %60 = fmul float %43, %59
  %61 = fmul float %47, 0x3EB41A7B00000000
  %62 = fadd float %61, 0x3F1F12BAC0000000
  %63 = fmul float %47, %62
  %64 = fadd float %63, 0x3F629540A0000000
  %65 = fmul float %47, %64
  %66 = fadd float %65, 0x3F740B3BA0000000
  %67 = fdiv float %60, %66
  %68 = fcmp oeq float %46, 0.000000e+00
  %69 = select i1 %68, float %67, float %43
  store float %69, float* %34, align 4
  %70 = add nuw nsw i64 %30, 1
  %71 = icmp eq i64 %70, %19
  br i1 %71, label %72, label %29

72:                                               ; preds = %29, %18
  %73 = icmp sgt i64 %20, 3
  br i1 %73, label %74, label %78

74:                                               ; preds = %72
  %75 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base"**
  %76 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %0, i64 0, i32 1
  %77 = bitcast %"struct.Eigen::internal::evaluator"** %76 to %"struct.Eigen::internal::unary_evaluator"**
  br label %128

78:                                               ; preds = %128, %72
  %79 = icmp slt i64 %23, %7
  br i1 %79, label %80, label %127

80:                                               ; preds = %78
  %81 = bitcast %"class.Eigen::internal::generic_dense_assignment_kernel"* %0 to %"struct.Eigen::internal::evaluator_wrapper_base"**
  %82 = getelementptr inbounds %"class.Eigen::internal::generic_dense_assignment_kernel", %"class.Eigen::internal::generic_dense_assignment_kernel"* %0, i64 0, i32 1
  %83 = bitcast %"struct.Eigen::internal::evaluator"** %82 to %"struct.Eigen::internal::unary_evaluator"**
  br label %84

84:                                               ; preds = %84, %80
  %85 = phi i64 [ %23, %80 ], [ %125, %84 ]
  %86 = load %"struct.Eigen::internal::evaluator_wrapper_base"*, %"struct.Eigen::internal::evaluator_wrapper_base"** %81, align 8
  %87 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base", %"struct.Eigen::internal::evaluator_wrapper_base"* %86, i64 0, i32 0, i32 0, i32 0
  %88 = load float*, float** %87, align 8
  %89 = getelementptr inbounds float, float* %88, i64 %85
  %90 = load %"struct.Eigen::internal::unary_evaluator"*, %"struct.Eigen::internal::unary_evaluator"** %83, align 8
  %91 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator", %"struct.Eigen::internal::unary_evaluator"* %90, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %92 = load float*, float** %91, align 8
  %93 = getelementptr inbounds float, float* %92, i64 %85
  %94 = load float, float* %93, align 4
  %95 = fcmp ogt float %94, 0x401F9F09E0000000
  %96 = select i1 %95, float 0x401F9F09E0000000, float %94
  %97 = fcmp olt float %96, 0xC01F9F09E0000000
  %98 = select i1 %97, float 0xC01F9F09E0000000, float %96
  %99 = tail call float @llvm.fabs.f32(float %94) #8
  %100 = fcmp olt float %99, 0x3F3A36E2E0000000
  %101 = select i1 %100, float 0xFFFFFFFFE0000000, float 0.000000e+00
  %102 = fmul float %98, %98
  %103 = fmul float %102, 0x3CB3E4B800000000
  %104 = fsub float 0x3D4C266FC0000000, %103
  %105 = fmul float %102, %104
  %106 = fadd float %105, 0xBDD7A6FFE0000000
  %107 = fmul float %102, %106
  %108 = fadd float %107, 0x3E6B800820000000
  %109 = fmul float %102, %108
  %110 = fadd float %109, 0x3EEF286940000000
  %111 = fmul float %102, %110
  %112 = fadd float %111, 0x3F44E1BDA0000000
  %113 = fmul float %102, %112
  %114 = fadd float %113, 0x3F740B3B80000000
  %115 = fmul float %98, %114
  %116 = fmul float %102, 0x3EB41A7B00000000
  %117 = fadd float %116, 0x3F1F12BAC0000000
  %118 = fmul float %102, %117
  %119 = fadd float %118, 0x3F629540A0000000
  %120 = fmul float %102, %119
  %121 = fadd float %120, 0x3F740B3BA0000000
  %122 = fdiv float %115, %121
  %123 = fcmp oeq float %101, 0.000000e+00
  %124 = select i1 %123, float %122, float %98
  store float %124, float* %89, align 4
  %125 = add nsw i64 %85, 1
  %126 = icmp eq i64 %125, %7
  br i1 %126, label %127, label %84

127:                                              ; preds = %84, %78
  ret void

128:                                              ; preds = %74, %128
  %129 = phi i64 [ %19, %74 ], [ %169, %128 ]
  %130 = load %"struct.Eigen::internal::evaluator_wrapper_base"*, %"struct.Eigen::internal::evaluator_wrapper_base"** %75, align 8
  %131 = getelementptr inbounds %"struct.Eigen::internal::evaluator_wrapper_base", %"struct.Eigen::internal::evaluator_wrapper_base"* %130, i64 0, i32 0, i32 0, i32 0
  %132 = load float*, float** %131, align 8
  %133 = getelementptr inbounds float, float* %132, i64 %129
  %134 = load %"struct.Eigen::internal::unary_evaluator"*, %"struct.Eigen::internal::unary_evaluator"** %77, align 8
  %135 = getelementptr inbounds %"struct.Eigen::internal::unary_evaluator", %"struct.Eigen::internal::unary_evaluator"* %134, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %136 = load float*, float** %135, align 8
  %137 = getelementptr inbounds float, float* %136, i64 %129
  %138 = bitcast float* %137 to <4 x float>*
  %139 = load <4 x float>, <4 x float>* %138, align 1
  %140 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %139, <4 x float> <float 0x401F9F09E0000000, float 0x401F9F09E0000000, float 0x401F9F09E0000000, float 0x401F9F09E0000000>) #7, !srcloc !55
  %141 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %140, <4 x float> <float 0xC01F9F09E0000000, float 0xC01F9F09E0000000, float 0xC01F9F09E0000000, float 0xC01F9F09E0000000>) #7, !srcloc !56
  %142 = bitcast <4 x float> %139 to <4 x i32>
  %143 = and <4 x i32> %142, <i32 2147483647, i32 2147483647, i32 2147483647, i32 2147483647>
  %144 = bitcast <4 x i32> %143 to <4 x float>
  %145 = fcmp uge <4 x float> %144, <float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000, float 0x3F3A36E2E0000000>
  %146 = fmul <4 x float> %141, %141
  %147 = fmul <4 x float> %146, <float 0xBCB3E4B800000000, float 0xBCB3E4B800000000, float 0xBCB3E4B800000000, float 0xBCB3E4B800000000>
  %148 = fadd <4 x float> %147, <float 0x3D4C266FC0000000, float 0x3D4C266FC0000000, float 0x3D4C266FC0000000, float 0x3D4C266FC0000000>
  %149 = fmul <4 x float> %146, %148
  %150 = fadd <4 x float> %149, <float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000, float 0xBDD7A6FFE0000000>
  %151 = fmul <4 x float> %146, %150
  %152 = fadd <4 x float> %151, <float 0x3E6B800820000000, float 0x3E6B800820000000, float 0x3E6B800820000000, float 0x3E6B800820000000>
  %153 = fmul <4 x float> %146, %152
  %154 = fadd <4 x float> %153, <float 0x3EEF286940000000, float 0x3EEF286940000000, float 0x3EEF286940000000, float 0x3EEF286940000000>
  %155 = fmul <4 x float> %146, %154
  %156 = fadd <4 x float> %155, <float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000, float 0x3F44E1BDA0000000>
  %157 = fmul <4 x float> %146, %156
  %158 = fadd <4 x float> %157, <float 0x3F740B3B80000000, float 0x3F740B3B80000000, float 0x3F740B3B80000000, float 0x3F740B3B80000000>
  %159 = fmul <4 x float> %141, %158
  %160 = fmul <4 x float> %146, <float 0x3EB41A7B00000000, float 0x3EB41A7B00000000, float 0x3EB41A7B00000000, float 0x3EB41A7B00000000>
  %161 = fadd <4 x float> %160, <float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000, float 0x3F1F12BAC0000000>
  %162 = fmul <4 x float> %146, %161
  %163 = fadd <4 x float> %162, <float 0x3F629540A0000000, float 0x3F629540A0000000, float 0x3F629540A0000000, float 0x3F629540A0000000>
  %164 = fmul <4 x float> %146, %163
  %165 = fadd <4 x float> %164, <float 0x3F740B3BA0000000, float 0x3F740B3BA0000000, float 0x3F740B3BA0000000, float 0x3F740B3BA0000000>
  %166 = fdiv <4 x float> %159, %165
  %167 = select <4 x i1> %145, <4 x float> %166, <4 x float> %141
  %168 = bitcast float* %133 to <4 x float>*
  store <4 x float> %167, <4 x float>* %168, align 16
  %169 = add nsw i64 %129, 4
  %170 = icmp slt i64 %169, %23
  br i1 %170, label %128, label %78
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5Eigen8internal26call_dense_assignment_loopINS_12ArrayWrapperINS_3MapINS_6MatrixIfLin1ELi1ELi0ELin1ELi1EEELi0ENS_6StrideILi0ELi0EEEEEEENS_12CwiseUnaryOpINS0_18scalar_logistic_opIfEEKS9_EENS0_9assign_opIffEEEEvRT_RKT0_RKT1_(%"class.Eigen::ArrayWrapper"* dereferenceable(24), %"class.Eigen::CwiseUnaryOp.25"* dereferenceable(32), %"struct.Eigen::internal::assign_op"* dereferenceable(1)) local_unnamed_addr #4 comdat {
  %4 = bitcast %"class.Eigen::CwiseUnaryOp.25"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.Eigen::ArrayWrapper"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.Eigen::ArrayWrapper", %"class.Eigen::ArrayWrapper"* %0, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = and i64 %7, 3
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = lshr i64 %7, 2
  %14 = sub nsw i64 0, %13
  %15 = and i64 %14, 3
  %16 = icmp slt i64 %15, %9
  %17 = select i1 %16, i64 %15, i64 %9
  br label %18

18:                                               ; preds = %12, %3
  %19 = phi i64 [ %17, %12 ], [ %9, %3 ]
  %20 = sub nsw i64 %9, %19
  %21 = sdiv i64 %20, 4
  %22 = shl nsw i64 %21, 2
  %23 = add nsw i64 %22, %19
  %24 = icmp sgt i64 %19, 0
  br i1 %24, label %25, label %92

25:                                               ; preds = %18
  %26 = inttoptr i64 %7 to float*
  %27 = inttoptr i64 %5 to float*
  br label %28

28:                                               ; preds = %25, %88
  %29 = phi i64 [ %90, %88 ], [ 0, %25 ]
  %30 = getelementptr inbounds float, float* %26, i64 %29
  %31 = getelementptr inbounds float, float* %27, i64 %29
  %32 = load float, float* %31, align 4
  %33 = fcmp olt float %32, -9.000000e+00
  %34 = fcmp ogt float %32, 0x402F499C60000000
  %35 = select i1 %34, float 0x402F499C60000000, float %32
  %36 = fmul float %35, %35
  %37 = fmul float %36, 0x3DC806AA20000000
  %38 = fadd float %37, 0x3E7F09D960000000
  %39 = fmul float %36, %38
  %40 = fadd float %39, 0x3F0FE82760000000
  %41 = fmul float %36, %40
  %42 = fadd float %41, 0x3F816FAB00000000
  %43 = fmul float %36, %42
  %44 = fadd float %43, 0x3FCFC7E640000000
  %45 = fmul float %35, %44
  %46 = fmul float %36, 0x3D65789EA0000000
  %47 = fadd float %46, 0x3E38BE4F60000000
  %48 = fmul float %36, %47
  %49 = fadd float %48, 0x3EDA62FBA0000000
  %50 = fmul float %36, %49
  %51 = fadd float %50, 0x3F5BE2A7E0000000
  %52 = fmul float %36, %51
  %53 = fadd float %52, 0x3FBDE7C300000000
  %54 = fmul float %36, %53
  %55 = fadd float %54, 0x3FEFC7E680000000
  %56 = fdiv float %45, %55
  %57 = fadd float %56, 5.000000e-01
  br i1 %33, label %58, label %88, !prof !57

58:                                               ; preds = %28
  %59 = fcmp ogt float %32, 0x40561814C0000000
  %60 = select i1 %59, float 0x40561814C0000000, float %32
  %61 = fcmp olt float %60, 0xC0561814A0000000
  %62 = select i1 %61, float 0xC0561814A0000000, float %60
  %63 = fmul float %62, 0x3FF7154760000000
  %64 = fadd float %63, 5.000000e-01
  %65 = tail call float @llvm.floor.f32(float %64) #8
  %66 = fmul float %65, 0x3FE6300000000000
  %67 = fsub float %62, %66
  %68 = fmul float %65, 0x3F2BD01060000000
  %69 = fadd float %68, %67
  %70 = fmul float %69, %69
  %71 = fmul float %69, 0x3F2A0D2CE0000000
  %72 = fadd float %71, 0x3F56E879C0000000
  %73 = fmul float %69, %72
  %74 = fadd float %73, 0x3F81112100000000
  %75 = fmul float %69, %74
  %76 = fadd float %75, 0x3FA5553820000000
  %77 = fmul float %69, %76
  %78 = fadd float %77, 0x3FC5555540000000
  %79 = fmul float %69, %78
  %80 = fadd float %79, 5.000000e-01
  %81 = fmul float %70, %80
  %82 = fadd float %69, %81
  %83 = fadd float %82, 1.000000e+00
  %84 = fptosi float %65 to i32
  %85 = tail call float @ldexpf(float %83, i32 %84) #8
  %86 = fcmp olt float %85, %32
  %87 = select i1 %86, float %32, float %85
  br label %88

88:                                               ; preds = %58, %28
  %89 = phi float [ %87, %58 ], [ %57, %28 ]
  store float %89, float* %30, align 4
  %90 = add nuw i64 %29, 1
  %91 = icmp eq i64 %90, %19
  br i1 %91, label %92, label %28

92:                                               ; preds = %88, %18
  %93 = icmp sgt i64 %20, 3
  br i1 %93, label %94, label %169

94:                                               ; preds = %92
  %95 = inttoptr i64 %7 to float*
  %96 = inttoptr i64 %5 to float*
  br label %97

97:                                               ; preds = %94, %164
  %98 = phi i64 [ %167, %164 ], [ %19, %94 ]
  %99 = getelementptr inbounds float, float* %95, i64 %98
  %100 = getelementptr inbounds float, float* %96, i64 %98
  %101 = bitcast float* %100 to <4 x float>*
  %102 = load <4 x float>, <4 x float>* %101, align 1
  %103 = fcmp olt <4 x float> %102, <float -9.000000e+00, float -9.000000e+00, float -9.000000e+00, float -9.000000e+00>
  %104 = bitcast <4 x i1> %103 to i4
  %105 = icmp eq i4 %104, 0
  %106 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %102, <4 x float> <float 0x402F499C60000000, float 0x402F499C60000000, float 0x402F499C60000000, float 0x402F499C60000000>) #7, !srcloc !55
  %107 = fmul <4 x float> %106, %106
  %108 = fmul <4 x float> %107, <float 0x3DC806AA20000000, float 0x3DC806AA20000000, float 0x3DC806AA20000000, float 0x3DC806AA20000000>
  %109 = fadd <4 x float> %108, <float 0x3E7F09D960000000, float 0x3E7F09D960000000, float 0x3E7F09D960000000, float 0x3E7F09D960000000>
  %110 = fmul <4 x float> %107, %109
  %111 = fadd <4 x float> %110, <float 0x3F0FE82760000000, float 0x3F0FE82760000000, float 0x3F0FE82760000000, float 0x3F0FE82760000000>
  %112 = fmul <4 x float> %107, %111
  %113 = fadd <4 x float> %112, <float 0x3F816FAB00000000, float 0x3F816FAB00000000, float 0x3F816FAB00000000, float 0x3F816FAB00000000>
  %114 = fmul <4 x float> %107, %113
  %115 = fadd <4 x float> %114, <float 0x3FCFC7E640000000, float 0x3FCFC7E640000000, float 0x3FCFC7E640000000, float 0x3FCFC7E640000000>
  %116 = fmul <4 x float> %106, %115
  %117 = fmul <4 x float> %107, <float 0x3D65789EA0000000, float 0x3D65789EA0000000, float 0x3D65789EA0000000, float 0x3D65789EA0000000>
  %118 = fadd <4 x float> %117, <float 0x3E38BE4F60000000, float 0x3E38BE4F60000000, float 0x3E38BE4F60000000, float 0x3E38BE4F60000000>
  %119 = fmul <4 x float> %107, %118
  %120 = fadd <4 x float> %119, <float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000, float 0x3EDA62FBA0000000>
  %121 = fmul <4 x float> %107, %120
  %122 = fadd <4 x float> %121, <float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000, float 0x3F5BE2A7E0000000>
  %123 = fmul <4 x float> %107, %122
  %124 = fadd <4 x float> %123, <float 0x3FBDE7C300000000, float 0x3FBDE7C300000000, float 0x3FBDE7C300000000, float 0x3FBDE7C300000000>
  %125 = fmul <4 x float> %107, %124
  %126 = fadd <4 x float> %125, <float 0x3FEFC7E680000000, float 0x3FEFC7E680000000, float 0x3FEFC7E680000000, float 0x3FEFC7E680000000>
  %127 = fdiv <4 x float> %116, %126
  %128 = fadd <4 x float> %127, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  br i1 %105, label %164, label %129, !prof !58

129:                                              ; preds = %97
  %130 = tail call <4 x float> asm "minps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %102, <4 x float> <float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000, float 0x40561814C0000000>) #7, !srcloc !55
  %131 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %130, <4 x float> <float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000, float 0xC0561814A0000000>) #7, !srcloc !56
  %132 = fmul <4 x float> %131, <float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000, float 0x3FF7154760000000>
  %133 = fadd <4 x float> %132, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %134 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %133) #8
  %135 = sitofp <4 x i32> %134 to <4 x float>
  %136 = fcmp olt <4 x float> %133, %135
  %137 = select <4 x i1> %136, <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float> zeroinitializer
  %138 = fsub <4 x float> %135, %137
  %139 = fmul <4 x float> %138, <float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000, float 0x3FE6300000000000>
  %140 = fsub <4 x float> %131, %139
  %141 = fmul <4 x float> %138, <float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000, float 0xBF2BD01060000000>
  %142 = fsub <4 x float> %140, %141
  %143 = fmul <4 x float> %142, %142
  %144 = fmul <4 x float> %142, <float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000, float 0x3F2A0D2CE0000000>
  %145 = fadd <4 x float> %144, <float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000, float 0x3F56E879C0000000>
  %146 = fmul <4 x float> %142, %145
  %147 = fadd <4 x float> %146, <float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000, float 0x3F81112100000000>
  %148 = fmul <4 x float> %142, %147
  %149 = fadd <4 x float> %148, <float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000, float 0x3FA5553820000000>
  %150 = fmul <4 x float> %142, %149
  %151 = fadd <4 x float> %150, <float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000, float 0x3FC5555540000000>
  %152 = fmul <4 x float> %142, %151
  %153 = fadd <4 x float> %152, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %154 = fmul <4 x float> %143, %153
  %155 = fadd <4 x float> %142, %154
  %156 = fadd <4 x float> %155, <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>
  %157 = fadd <4 x float> %138, <float 1.270000e+02, float 1.270000e+02, float 1.270000e+02, float 1.270000e+02>
  %158 = tail call <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float> %157) #8
  %159 = shl <4 x i32> %158, <i32 23, i32 23, i32 23, i32 23>
  %160 = bitcast <4 x i32> %159 to <4 x float>
  %161 = fmul <4 x float> %156, %160
  %162 = tail call <4 x float> asm "maxps $1, $0", "=x,x,0,~{dirflag},~{fpsr},~{flags}"(<4 x float> %161, <4 x float> %102) #7, !srcloc !56
  %163 = select <4 x i1> %103, <4 x float> %162, <4 x float> %128
  br label %164

164:                                              ; preds = %97, %129
  %165 = phi <4 x float> [ %163, %129 ], [ %128, %97 ]
  %166 = bitcast float* %99 to <4 x float>*
  store <4 x float> %165, <4 x float>* %166, align 16
  %167 = add nsw i64 %98, 4
  %168 = icmp slt i64 %167, %23
  br i1 %168, label %97, label %169

169:                                              ; preds = %164, %92
  %170 = icmp slt i64 %23, %9
  br i1 %170, label %171, label %238

171:                                              ; preds = %169
  %172 = inttoptr i64 %7 to float*
  %173 = inttoptr i64 %5 to float*
  br label %174

174:                                              ; preds = %171, %234
  %175 = phi i64 [ %236, %234 ], [ %23, %171 ]
  %176 = getelementptr inbounds float, float* %172, i64 %175
  %177 = getelementptr inbounds float, float* %173, i64 %175
  %178 = load float, float* %177, align 4
  %179 = fcmp olt float %178, -9.000000e+00
  %180 = fcmp ogt float %178, 0x402F499C60000000
  %181 = select i1 %180, float 0x402F499C60000000, float %178
  %182 = fmul float %181, %181
  %183 = fmul float %182, 0x3DC806AA20000000
  %184 = fadd float %183, 0x3E7F09D960000000
  %185 = fmul float %182, %184
  %186 = fadd float %185, 0x3F0FE82760000000
  %187 = fmul float %182, %186
  %188 = fadd float %187, 0x3F816FAB00000000
  %189 = fmul float %182, %188
  %190 = fadd float %189, 0x3FCFC7E640000000
  %191 = fmul float %181, %190
  %192 = fmul float %182, 0x3D65789EA0000000
  %193 = fadd float %192, 0x3E38BE4F60000000
  %194 = fmul float %182, %193
  %195 = fadd float %194, 0x3EDA62FBA0000000
  %196 = fmul float %182, %195
  %197 = fadd float %196, 0x3F5BE2A7E0000000
  %198 = fmul float %182, %197
  %199 = fadd float %198, 0x3FBDE7C300000000
  %200 = fmul float %182, %199
  %201 = fadd float %200, 0x3FEFC7E680000000
  %202 = fdiv float %191, %201
  %203 = fadd float %202, 5.000000e-01
  br i1 %179, label %204, label %234, !prof !57

204:                                              ; preds = %174
  %205 = fcmp ogt float %178, 0x40561814C0000000
  %206 = select i1 %205, float 0x40561814C0000000, float %178
  %207 = fcmp olt float %206, 0xC0561814A0000000
  %208 = select i1 %207, float 0xC0561814A0000000, float %206
  %209 = fmul float %208, 0x3FF7154760000000
  %210 = fadd float %209, 5.000000e-01
  %211 = tail call float @llvm.floor.f32(float %210) #8
  %212 = fmul float %211, 0x3FE6300000000000
  %213 = fsub float %208, %212
  %214 = fmul float %211, 0x3F2BD01060000000
  %215 = fadd float %214, %213
  %216 = fmul float %215, %215
  %217 = fmul float %215, 0x3F2A0D2CE0000000
  %218 = fadd float %217, 0x3F56E879C0000000
  %219 = fmul float %215, %218
  %220 = fadd float %219, 0x3F81112100000000
  %221 = fmul float %215, %220
  %222 = fadd float %221, 0x3FA5553820000000
  %223 = fmul float %215, %222
  %224 = fadd float %223, 0x3FC5555540000000
  %225 = fmul float %215, %224
  %226 = fadd float %225, 5.000000e-01
  %227 = fmul float %216, %226
  %228 = fadd float %215, %227
  %229 = fadd float %228, 1.000000e+00
  %230 = fptosi float %211 to i32
  %231 = tail call float @ldexpf(float %229, i32 %230) #8
  %232 = fcmp olt float %231, %178
  %233 = select i1 %232, float %178, float %231
  br label %234

234:                                              ; preds = %204, %174
  %235 = phi float [ %233, %204 ], [ %203, %174 ]
  store float %235, float* %176, align 4
  %236 = add i64 %175, 1
  %237 = icmp eq i64 %236, %9
  br i1 %237, label %238, label %174

238:                                              ; preds = %234, %169
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nofree nounwind
declare float @ldexpf(float, i32) local_unnamed_addr #6

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.cvttps2dq(<4 x float>) #7

declare void @_ZN6tflite12tensor_utils24AsymmetricQuantizeFloatsEPKfiPaPfPi(float*, i32, i8*, float*, i32*) local_unnamed_addr #1

declare void @_ZN6tflite12tensor_utils23SymmetricQuantizeFloatsEPKfiPaPfS4_S4_(float*, i32, i8*, float*, float*, float*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = !{!6, !8}
!6 = distinct !{!6, !7, !"_ZN6tflite12tensor_utils17ApplyReluToVectorEPKfiPf: argument 0"}
!7 = distinct !{!7, !"_ZN6tflite12tensor_utils17ApplyReluToVectorEPKfiPf"}
!8 = distinct !{!8, !7, !"_ZN6tflite12tensor_utils17ApplyReluToVectorEPKfiPf: argument 1"}
!9 = !{!6}
!10 = !{!8}
!11 = !{!12, !14}
!12 = distinct !{!12, !13, !"_ZN6tflite12tensor_utils18ApplyRelu1ToVectorEPKfiPf: argument 0"}
!13 = distinct !{!13, !"_ZN6tflite12tensor_utils18ApplyRelu1ToVectorEPKfiPf"}
!14 = distinct !{!14, !13, !"_ZN6tflite12tensor_utils18ApplyRelu1ToVectorEPKfiPf: argument 1"}
!15 = !{!12}
!16 = !{!14}
!17 = !{!18, !20}
!18 = distinct !{!18, !19, !"_ZN6tflite12tensor_utils18ApplyRelu6ToVectorEPKfiPf: argument 0"}
!19 = distinct !{!19, !"_ZN6tflite12tensor_utils18ApplyRelu6ToVectorEPKfiPf"}
!20 = distinct !{!20, !19, !"_ZN6tflite12tensor_utils18ApplyRelu6ToVectorEPKfiPf: argument 1"}
!21 = !{!18}
!22 = !{!20}
!23 = !{!24, !26}
!24 = distinct !{!24, !25, !"_ZN6tflite12tensor_utils17ApplyTanhToVectorEPKfiPf: argument 0"}
!25 = distinct !{!25, !"_ZN6tflite12tensor_utils17ApplyTanhToVectorEPKfiPf"}
!26 = distinct !{!26, !25, !"_ZN6tflite12tensor_utils17ApplyTanhToVectorEPKfiPf: argument 1"}
!27 = !{!28}
!28 = distinct !{!28, !29, !"_ZN6tflite12tensor_utils20ApplySignbitToVectorEPKfiPf: argument 0"}
!29 = distinct !{!29, !"_ZN6tflite12tensor_utils20ApplySignbitToVectorEPKfiPf"}
!30 = !{!31}
!31 = distinct !{!31, !29, !"_ZN6tflite12tensor_utils20ApplySignbitToVectorEPKfiPf: argument 1"}
!32 = distinct !{!32, !33}
!33 = !{!"llvm.loop.isvectorized", i32 1}
!34 = distinct !{!34, !35, !33}
!35 = !{!"llvm.loop.unroll.runtime.disable"}
!36 = !{!37, !39}
!37 = distinct !{!37, !38, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 0"}
!38 = distinct !{!38, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf"}
!39 = distinct !{!39, !38, !"_ZN6tflite12tensor_utils20ApplySigmoidToVectorEPKfiPf: argument 1"}
!40 = !{i8 0, i8 2}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !33}
!43 = distinct !{!43, !35, !33}
!44 = distinct !{!44, !33}
!45 = distinct !{!45, !35, !33}
!46 = distinct !{!46, !33}
!47 = distinct !{!47, !35, !33}
!48 = distinct !{!48, !3}
!49 = distinct !{!49, !33}
!50 = distinct !{!50, !35, !33}
!51 = distinct !{!51, !33}
!52 = distinct !{!52, !35, !33}
!53 = distinct !{!53, !33}
!54 = distinct !{!54, !35, !33}
!55 = !{i32 5418444}
!56 = !{i32 5420337}
!57 = !{!"branch_weights", i32 1, i32 2000}
!58 = !{!"branch_weights", i32 2000, i32 1}
