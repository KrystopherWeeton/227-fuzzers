; ModuleID = '../../third_party/blink/renderer/core/inspector/inspector_audits_issue.cc'
source_filename = "../../third_party/blink/renderer/core/inspector/inspector_audits_issue.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::AuditsIssue" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::protocol::Audits::InspectorIssue"* }
%"class.blink::protocol::Audits::InspectorIssue" = type { %"class.crdtp::ProtocolObject", %"class.WTF::String", %"class.std::__1::unique_ptr.1" }
%"class.crdtp::ProtocolObject" = type { %"class.crdtp::Serializable" }
%"class.crdtp::Serializable" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.blink::protocol::Audits::InspectorIssueDetails"* }
%"class.blink::protocol::Audits::InspectorIssueDetails" = type { %"class.crdtp::ProtocolObject.4", %"class.crdtp::detail::PtrMaybe", %"class.crdtp::detail::PtrMaybe.43", %"class.crdtp::detail::PtrMaybe.63", %"class.crdtp::detail::PtrMaybe.73", %"class.crdtp::detail::PtrMaybe.83", %"class.crdtp::detail::PtrMaybe.104", %"class.crdtp::detail::PtrMaybe.114", %"class.crdtp::detail::PtrMaybe.124", %"class.crdtp::detail::PtrMaybe.134", %"class.crdtp::detail::PtrMaybe.163", %"class.crdtp::detail::PtrMaybe.173", %"class.crdtp::detail::PtrMaybe.183" }
%"class.crdtp::ProtocolObject.4" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe" = type { %"class.std::__1::unique_ptr.7" }
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.blink::protocol::Audits::SameSiteCookieIssueDetails"* }
%"class.blink::protocol::Audits::SameSiteCookieIssueDetails" = type { %"class.crdtp::ProtocolObject.10", %"class.crdtp::detail::PtrMaybe.13", %"class.crdtp::detail::ValueMaybe", %"class.std::__1::unique_ptr.21", %"class.std::__1::unique_ptr.21", %"class.WTF::String", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::PtrMaybe.30" }
%"class.crdtp::ProtocolObject.10" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.13" = type { %"class.std::__1::unique_ptr.14" }
%"class.std::__1::unique_ptr.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.blink::protocol::Audits::AffectedCookie"* }
%"class.blink::protocol::Audits::AffectedCookie" = type { %"class.crdtp::ProtocolObject.17", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.17" = type { %"class.crdtp::Serializable" }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.WTF::String"*, %"class.WTF::String"*, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.WTF::String"* }
%"class.crdtp::detail::ValueMaybe" = type { i8, %"class.WTF::String" }
%"class.crdtp::detail::PtrMaybe.30" = type { %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.blink::protocol::Audits::AffectedRequest"* }
%"class.blink::protocol::Audits::AffectedRequest" = type { %"class.crdtp::ProtocolObject.34", %"class.WTF::String", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.34" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.43" = type { %"class.std::__1::unique_ptr.44" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %"class.blink::protocol::Audits::MixedContentIssueDetails"* }
%"class.blink::protocol::Audits::MixedContentIssueDetails" = type { %"class.crdtp::ProtocolObject.47", %"class.crdtp::detail::ValueMaybe", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.30", %"class.crdtp::detail::PtrMaybe.50" }
%"class.crdtp::ProtocolObject.47" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.50" = type { %"class.std::__1::unique_ptr.51" }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %"class.blink::protocol::Audits::AffectedFrame"* }
%"class.blink::protocol::Audits::AffectedFrame" = type { %"class.crdtp::ProtocolObject.54", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.54" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.63" = type { %"class.std::__1::unique_ptr.64" }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.blink::protocol::Audits::BlockedByResponseIssueDetails"* }
%"class.blink::protocol::Audits::BlockedByResponseIssueDetails" = type { %"class.crdtp::ProtocolObject.67", %"class.std::__1::unique_ptr.31", %"class.crdtp::detail::PtrMaybe.50", %"class.crdtp::detail::PtrMaybe.50", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.67" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.73" = type { %"class.std::__1::unique_ptr.74" }
%"class.std::__1::unique_ptr.74" = type { %"class.std::__1::__compressed_pair.75" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %"class.blink::protocol::Audits::HeavyAdIssueDetails"* }
%"class.blink::protocol::Audits::HeavyAdIssueDetails" = type { %"class.crdtp::ProtocolObject.77", %"class.WTF::String", %"class.WTF::String", %"class.std::__1::unique_ptr.51" }
%"class.crdtp::ProtocolObject.77" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.83" = type { %"class.std::__1::unique_ptr.84" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"class.blink::protocol::Audits::ContentSecurityPolicyIssueDetails"* }
%"class.blink::protocol::Audits::ContentSecurityPolicyIssueDetails" = type { %"class.crdtp::ProtocolObject.87", %"class.crdtp::detail::ValueMaybe", %"class.WTF::String", i8, %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.50", %"class.crdtp::detail::PtrMaybe.90", %"class.crdtp::detail::ValueMaybe.100" }
%"class.crdtp::ProtocolObject.87" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.90" = type { %"class.std::__1::unique_ptr.91" }
%"class.std::__1::unique_ptr.91" = type { %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { %"class.blink::protocol::Audits::SourceCodeLocation"* }
%"class.blink::protocol::Audits::SourceCodeLocation" = type { %"class.crdtp::ProtocolObject.94", %"class.crdtp::detail::ValueMaybe", %"class.WTF::String", i32, i32 }
%"class.crdtp::ProtocolObject.94" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::ValueMaybe.100" = type { i8, i32 }
%"class.crdtp::detail::PtrMaybe.104" = type { %"class.std::__1::unique_ptr.105" }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %"class.blink::protocol::Audits::SharedArrayBufferIssueDetails"* }
%"class.blink::protocol::Audits::SharedArrayBufferIssueDetails" = type { %"class.crdtp::ProtocolObject.108", %"class.std::__1::unique_ptr.91", i8, %"class.WTF::String" }
%"class.crdtp::ProtocolObject.108" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.114" = type { %"class.std::__1::unique_ptr.115" }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.blink::protocol::Audits::TrustedWebActivityIssueDetails"* }
%"class.blink::protocol::Audits::TrustedWebActivityIssueDetails" = type { %"class.crdtp::ProtocolObject.118", %"class.WTF::String", %"class.WTF::String", %"class.crdtp::detail::ValueMaybe.100", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.118" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.124" = type { %"class.std::__1::unique_ptr.125" }
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"class.blink::protocol::Audits::LowTextContrastIssueDetails"* }
%"class.blink::protocol::Audits::LowTextContrastIssueDetails" = type { %"class.crdtp::ProtocolObject.128", i32, %"class.WTF::String", double, double, double, %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.128" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.134" = type { %"class.std::__1::unique_ptr.135" }
%"class.std::__1::unique_ptr.135" = type { %"class.std::__1::__compressed_pair.136" }
%"class.std::__1::__compressed_pair.136" = type { %"struct.std::__1::__compressed_pair_elem.137" }
%"struct.std::__1::__compressed_pair_elem.137" = type { %"class.blink::protocol::Audits::CorsIssueDetails"* }
%"class.blink::protocol::Audits::CorsIssueDetails" = type { %"class.crdtp::ProtocolObject.138", %"class.std::__1::unique_ptr.141", i8, %"class.std::__1::unique_ptr.31", %"class.crdtp::detail::PtrMaybe.90", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::PtrMaybe.150" }
%"class.crdtp::ProtocolObject.138" = type { %"class.crdtp::Serializable" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::protocol::Network::CorsErrorStatus"* }
%"class.blink::protocol::Network::CorsErrorStatus" = type { %"class.crdtp::ProtocolObject.144", %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.144" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.150" = type { %"class.std::__1::unique_ptr.151" }
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"class.blink::protocol::Network::ClientSecurityState"* }
%"class.blink::protocol::Network::ClientSecurityState" = type { %"class.crdtp::ProtocolObject.154", i8, %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.154" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.163" = type { %"class.std::__1::unique_ptr.164" }
%"class.std::__1::unique_ptr.164" = type { %"class.std::__1::__compressed_pair.165" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.166" }
%"struct.std::__1::__compressed_pair_elem.166" = type { %"class.blink::protocol::Audits::AttributionReportingIssueDetails"* }
%"class.blink::protocol::Audits::AttributionReportingIssueDetails" = type { %"class.crdtp::ProtocolObject.167", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.50", %"class.crdtp::detail::PtrMaybe.30", %"class.crdtp::detail::ValueMaybe.100", %"class.crdtp::detail::ValueMaybe" }
%"class.crdtp::ProtocolObject.167" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.173" = type { %"class.std::__1::unique_ptr.174" }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.blink::protocol::Audits::QuirksModeIssueDetails"* }
%"class.blink::protocol::Audits::QuirksModeIssueDetails" = type { %"class.crdtp::ProtocolObject.177", i8, i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%"class.crdtp::ProtocolObject.177" = type { %"class.crdtp::Serializable" }
%"class.crdtp::detail::PtrMaybe.183" = type { %"class.std::__1::unique_ptr.184" }
%"class.std::__1::unique_ptr.184" = type { %"class.std::__1::__compressed_pair.185" }
%"class.std::__1::__compressed_pair.185" = type { %"struct.std::__1::__compressed_pair_elem.186" }
%"struct.std::__1::__compressed_pair_elem.186" = type { %"class.blink::protocol::Audits::NavigatorUserAgentIssueDetails"* }
%"class.blink::protocol::Audits::NavigatorUserAgentIssueDetails" = type { %"class.crdtp::ProtocolObject.187", %"class.WTF::String", %"class.crdtp::detail::PtrMaybe.90" }
%"class.crdtp::ProtocolObject.187" = type { %"class.crdtp::Serializable" }
%"class.blink::ExecutionContext" = type <{ %"class.blink::Supplementable", %"class.blink::MojoBindingContext", %"class.blink::ConsoleLogger", %"class.blink::UseCounter", %"class.blink::FeatureContext", %"class.v8::Isolate"*, %"class.blink::SecurityContext", %"class.blink::Member.227", i32, i8, [3 x i8], %"class.blink::HeapVector", i32, i8, i8, i8, i8, i8, i8, [6 x i8], %"class.blink::Member.233", %"class.blink::Member.235", %"class.blink::DOMTimerCoordinator", i32, [4 x i8], %"class.std::__1::unique_ptr.244", %"class.blink::Member.250", %"class.blink::Member.252", i8, [7 x i8] }>
%"class.blink::Supplementable" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type opaque
%"class.blink::MojoBindingContext" = type { %"class.blink::ContextLifecycleNotifier", %"class.blink::Supplementable.203" }
%"class.blink::ContextLifecycleNotifier" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapObserverSet" }
%"class.blink::HeapObserverSet" = type { i32, [4 x i8], %"class.blink::HeapHashSet" }
%"class.blink::HeapHashSet" = type { %"class.WTF::HashSet" }
%"class.WTF::HashSet" = type { %"class.WTF::HashTable.201" }
%"class.WTF::HashTable.201" = type <{ %"class.blink::WeakMember"*, i32, i32, i32, [4 x i8] }>
%"class.blink::WeakMember" = type opaque
%"class.blink::Supplementable.203" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::HeapHashMap.204" }
%"class.blink::HeapHashMap.204" = type { %"class.WTF::HashMap.207" }
%"class.WTF::HashMap.207" = type { %"class.WTF::HashTable.208" }
%"class.WTF::HashTable.208" = type <{ %"struct.WTF::KeyValuePair.210"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.210" = type { i8*, %"class.blink::Member.364" }
%"class.blink::Member.364" = type { %"class.blink::MemberBase.365" }
%"class.blink::MemberBase.365" = type { %"class.blink::Supplement"* }
%"class.blink::Supplement" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.366" }
%"class.blink::Member.366" = type { %"class.blink::MemberBase.367" }
%"class.blink::MemberBase.367" = type { %"class.blink::MojoBindingContext"* }
%"class.blink::ConsoleLogger" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::UseCounter" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::FeatureContext" = type { i32 (...)** }
%"class.v8::Isolate" = type { i8 }
%"class.blink::SecurityContext" = type { i32 (...)**, i32, %class.scoped_refptr.211, %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.212", %"class.std::__1::unique_ptr.218", %"class.std::__1::unique_ptr.218", %"class.blink::Member", i32, [4 x i8], %"class.WTF::HashSet.224", i32, i32 }
%class.scoped_refptr.211 = type { %"class.blink::SecurityOrigin"* }
%"class.blink::SecurityOrigin" = type opaque
%"class.std::__1::unique_ptr.212" = type { %"class.std::__1::__compressed_pair.213" }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"class.blink::PermissionsPolicy"* }
%"class.blink::PermissionsPolicy" = type opaque
%"class.std::__1::unique_ptr.218" = type { %"class.std::__1::__compressed_pair.219" }
%"class.std::__1::__compressed_pair.219" = type { %"struct.std::__1::__compressed_pair_elem.220" }
%"struct.std::__1::__compressed_pair_elem.220" = type { %"class.blink::DocumentPolicy"* }
%"class.blink::DocumentPolicy" = type opaque
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ExecutionContext"* }
%"class.WTF::HashSet.224" = type { %"class.WTF::HashTable.225" }
%"class.WTF::HashTable.225" = type <{ i32*, i32, i32, i32, [4 x i8] }>
%"class.blink::Member.227" = type { %"class.blink::MemberBase.228" }
%"class.blink::MemberBase.228" = type { %"class.blink::Agent"* }
%"class.blink::Agent" = type opaque
%"class.blink::HeapVector" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::Member.231"*, i32, i32 }
%"class.blink::Member.231" = type opaque
%"class.blink::Member.233" = type { %"class.blink::MemberBase.234" }
%"class.blink::MemberBase.234" = type { %"class.blink::PublicURLManager"* }
%"class.blink::PublicURLManager" = type opaque
%"class.blink::Member.235" = type { %"class.blink::MemberBase.236" }
%"class.blink::MemberBase.236" = type { %"class.blink::ContentSecurityPolicyDelegate"* }
%"class.blink::ContentSecurityPolicyDelegate" = type opaque
%"class.blink::DOMTimerCoordinator" = type { %"class.blink::HeapHashMap.237", i32, i32 }
%"class.blink::HeapHashMap.237" = type { %"class.WTF::HashMap.240" }
%"class.WTF::HashMap.240" = type { %"class.WTF::HashTable.241" }
%"class.WTF::HashTable.241" = type <{ %"struct.WTF::KeyValuePair.243"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.243" = type opaque
%"class.std::__1::unique_ptr.244" = type { %"class.std::__1::__compressed_pair.245" }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.blink::PolicyContainer"* }
%"class.blink::PolicyContainer" = type opaque
%"class.blink::Member.250" = type { %"class.blink::MemberBase.251" }
%"class.blink::MemberBase.251" = type { %"class.blink::OriginTrialContext"* }
%"class.blink::OriginTrialContext" = type opaque
%"class.blink::Member.252" = type { %"class.blink::MemberBase.253" }
%"class.blink::MemberBase.253" = type { %"class.blink::ContentSecurityPolicy"* }
%"class.blink::ContentSecurityPolicy" = type opaque
%"class.blink::SourceLocation" = type <{ %"class.WTF::String", i32, i32, %"class.std::__1::unique_ptr.261", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.261" = type { %"class.std::__1::__compressed_pair.262" }
%"class.std::__1::__compressed_pair.262" = type { %"struct.std::__1::__compressed_pair_elem.263" }
%"struct.std::__1::__compressed_pair_elem.263" = type { %"class.v8_inspector::V8StackTrace"* }
%"class.v8_inspector::V8StackTrace" = type { i32 (...)** }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::Element" = type { %"class.blink::ContainerNode", %"class.blink::Animatable", %"class.blink::QualifiedName", %"class.blink::Member.293" }
%"class.blink::ContainerNode" = type { %"class.blink::Node", %"class.blink::Member.284", %"class.blink::Member.284" }
%"class.blink::Node" = type { %"class.blink::EventTarget", i32, %"class.blink::Member.284", %"class.blink::Member.286", %"class.blink::Member.284", %"class.blink::Member.284", %"class.blink::Member.288" }
%"class.blink::EventTarget" = type { %"class.blink::ScriptWrappable" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member.286" = type { %"class.blink::MemberBase.287" }
%"class.blink::MemberBase.287" = type { %"class.blink::TreeScope"* }
%"class.blink::TreeScope" = type { %"class.blink::GarbageCollectedMixin", %"class.blink::Member.309", %"class.blink::Member.311", %"class.blink::Member.286", %"class.blink::Member.313", %"class.blink::Member.313", %"class.blink::Member.337", %"class.blink::Member.339", %"class.blink::Member.341", %"class.blink::RadioButtonGroupScope", %"class.blink::Member.346", %"class.blink::HeapVector.348" }
%"class.blink::Member.309" = type { %"class.blink::MemberBase.310" }
%"class.blink::MemberBase.310" = type { %"class.blink::ContainerNode"* }
%"class.blink::Member.311" = type { %"class.blink::MemberBase.312" }
%"class.blink::MemberBase.312" = type { %"class.blink::Document"* }
%"class.blink::Document" = type opaque
%"class.blink::Member.313" = type { %"class.blink::MemberBase.314" }
%"class.blink::MemberBase.314" = type { %"class.blink::TreeOrderedMap"* }
%"class.blink::TreeOrderedMap" = type { %"class.blink::HeapHashMap.317" }
%"class.blink::HeapHashMap.317" = type { %"class.WTF::HashMap.320" }
%"class.WTF::HashMap.320" = type { %"class.WTF::HashTable.321" }
%"class.WTF::HashTable.321" = type <{ %"struct.WTF::KeyValuePair.323"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.323" = type { %"class.WTF::AtomicString", %"class.blink::Member.324" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::Member.324" = type { %"class.blink::MemberBase.325" }
%"class.blink::MemberBase.325" = type { %"class.blink::TreeOrderedMap::MapEntry"* }
%"class.blink::TreeOrderedMap::MapEntry" = type { %"class.blink::Member.328", i32, %"class.blink::HeapVector.330" }
%"class.blink::Member.328" = type { %"class.blink::MemberBase.329" }
%"class.blink::MemberBase.329" = type { %"class.blink::Element"* }
%"class.blink::HeapVector.330" = type { %"class.WTF::Vector.333" }
%"class.WTF::Vector.333" = type { %"class.WTF::VectorBuffer.334" }
%"class.WTF::VectorBuffer.334" = type { %"class.WTF::VectorBufferBase.335" }
%"class.WTF::VectorBufferBase.335" = type { %"class.blink::Member.328"*, i32, i32 }
%"class.blink::Member.337" = type { %"class.blink::MemberBase.338" }
%"class.blink::MemberBase.338" = type { %"class.blink::IdTargetObserverRegistry"* }
%"class.blink::IdTargetObserverRegistry" = type opaque
%"class.blink::Member.339" = type { %"class.blink::MemberBase.340" }
%"class.blink::MemberBase.340" = type { %"class.blink::ScopedStyleResolver"* }
%"class.blink::ScopedStyleResolver" = type opaque
%"class.blink::Member.341" = type { %"class.blink::MemberBase.342" }
%"class.blink::MemberBase.342" = type { %"class.blink::DOMSelection"* }
%"class.blink::DOMSelection" = type opaque
%"class.blink::RadioButtonGroupScope" = type { %"class.blink::Member.343" }
%"class.blink::Member.343" = type { %"class.blink::MemberBase.344" }
%"class.blink::MemberBase.344" = type { %"class.blink::HeapHashMap.345"* }
%"class.blink::HeapHashMap.345" = type opaque
%"class.blink::Member.346" = type { %"class.blink::MemberBase.347" }
%"class.blink::MemberBase.347" = type { %"class.blink::SVGTreeScopeResources"* }
%"class.blink::SVGTreeScopeResources" = type opaque
%"class.blink::HeapVector.348" = type { %"class.WTF::Vector.351" }
%"class.WTF::Vector.351" = type { %"class.WTF::VectorBuffer.352" }
%"class.WTF::VectorBuffer.352" = type { %"class.WTF::VectorBufferBase.353" }
%"class.WTF::VectorBufferBase.353" = type { %"class.blink::Member.354"*, i32, i32 }
%"class.blink::Member.354" = type opaque
%"class.blink::Member.288" = type { %"class.blink::MemberBase.289" }
%"class.blink::MemberBase.289" = type { %"class.blink::NodeData"* }
%"class.blink::NodeData" = type { i16, %"class.WTF::ConcurrentlyReadBitField" }
%"class.WTF::ConcurrentlyReadBitField" = type { %"class.WTF::SingleThreadedBitField" }
%"class.WTF::SingleThreadedBitField" = type { i16 }
%"class.blink::Member.284" = type { %"class.blink::MemberBase.285" }
%"class.blink::MemberBase.285" = type { %"class.blink::Node"* }
%"class.blink::Animatable" = type { i32 (...)** }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.292 }
%class.scoped_refptr.292 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.blink::Member.293" = type { %"class.blink::MemberBase.294" }
%"class.blink::MemberBase.294" = type { %"class.blink::ElementData"* }
%"class.blink::ElementData" = type { %"class.WTF::ConcurrentlyReadBitField.297", %"class.blink::Member.299", %"class.blink::SpaceSplitString", %"class.WTF::AtomicString" }
%"class.WTF::ConcurrentlyReadBitField.297" = type { %"class.WTF::SingleThreadedBitField.298" }
%"class.WTF::SingleThreadedBitField.298" = type { i32 }
%"class.blink::Member.299" = type { %"class.blink::MemberBase.300" }
%"class.blink::MemberBase.300" = type { %"class.blink::CSSPropertyValueSet"* }
%"class.blink::CSSPropertyValueSet" = type opaque
%"class.blink::SpaceSplitString" = type { %class.scoped_refptr.301 }
%class.scoped_refptr.301 = type { %"class.blink::SpaceSplitString::Data"* }
%"class.blink::SpaceSplitString::Data" = type { %"class.WTF::RefCounted.302", %"class.WTF::AtomicString", %"class.WTF::Vector.304" }
%"class.WTF::RefCounted.302" = type { %"class.base::RefCounted.303" }
%"class.base::RefCounted.303" = type { %"class.base::subtle::RefCountedBase" }
%"class.WTF::Vector.304" = type { %"class.WTF::VectorBuffer.305" }
%"class.WTF::VectorBuffer.305" = type { %"class.WTF::VectorBufferBase.306", [32 x i8] }
%"class.WTF::VectorBufferBase.306" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.absl::optional.356" = type { %"class.absl::optional_internal::optional_data.357" }
%"class.absl::optional_internal::optional_data.357" = type { %"class.absl::optional_internal::optional_data_base.358" }
%"class.absl::optional_internal::optional_data_base.358" = type { %"class.absl::optional_internal::optional_data_dtor_base.359" }
%"class.absl::optional_internal::optional_data_dtor_base.359" = type { i8, %union.anon.360 }
%union.anon.360 = type { %"class.WTF::String" }

$_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_ = comdat any

@_ZN5blink8protocol6Audits22InspectorIssueCodeEnum15QuirksModeIssueE = external constant [0 x i8], align 1
@_ZN5blink8protocol7Network13CorsErrorEnum18CorsDisabledSchemeE = external constant [0 x i8], align 1
@_ZN5blink8protocol7Network13CorsErrorEnum27NoCorsRedirectModeNotFollowE = external constant [0 x i8], align 1
@_ZN5blink8protocol7Network13CorsErrorEnum16DisallowedByModeE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits22InspectorIssueCodeEnum9CorsIssueE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits22InspectorIssueCodeEnum25AttributionReportingIssueE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits22InspectorIssueCodeEnum23NavigatorUserAgentIssueE = external constant [0 x i8], align 1
@_ZTVN5blink8protocol6Audits22QuirksModeIssueDetailsE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits21InspectorIssueDetailsE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits14InspectorIssueE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits18SourceCodeLocationE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits15AffectedRequestE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol7Network15CorsErrorStatusE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits16CorsIssueDetailsE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits32AttributionReportingIssueDetailsE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum24PermissionPolicyDisabledE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum31InvalidAttributionSourceEventIdE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum36AttributionSourceUntrustworthyOriginE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum22InvalidAttributionDataE = external constant [0 x i8], align 1
@_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum30AttributionUntrustworthyOriginE = external constant [0 x i8], align 1
@_ZTVN5blink8protocol6Audits13AffectedFrameE = external unnamed_addr constant { [5 x i8*] }, align 8
@_ZTVN5blink8protocol6Audits30NavigatorUserAgentIssueDetailsE = external unnamed_addr constant { [5 x i8*] }, align 8

@_ZN5blink11AuditsIssueC1ENSt3__110unique_ptrINS_8protocol6Audits14InspectorIssueENS1_14default_deleteIS5_EEEE = hidden unnamed_addr alias void (%"class.blink::AuditsIssue"*, %"class.blink::protocol::Audits::InspectorIssue"*), void (%"class.blink::AuditsIssue"*, %"class.blink::protocol::Audits::InspectorIssue"*)* @_ZN5blink11AuditsIssueC2ENSt3__110unique_ptrINS_8protocol6Audits14InspectorIssueENS1_14default_deleteIS5_EEEE
@_ZN5blink11AuditsIssueC1EOS0_ = hidden unnamed_addr alias void (%"class.blink::AuditsIssue"*, %"class.blink::AuditsIssue"*), void (%"class.blink::AuditsIssue"*, %"class.blink::AuditsIssue"*)* @_ZN5blink11AuditsIssueC2EOS0_
@_ZN5blink11AuditsIssueD1Ev = hidden unnamed_addr alias void (%"class.blink::AuditsIssue"*), void (%"class.blink::AuditsIssue"*)* @_ZN5blink11AuditsIssueD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssueC2ENSt3__110unique_ptrINS_8protocol6Audits14InspectorIssueENS1_14default_deleteIS5_EEEE(%"class.blink::AuditsIssue"* nocapture, %"class.blink::protocol::Audits::InspectorIssue"*) unnamed_addr #0 align 2 {
  %3 = ptrtoint %"class.blink::protocol::Audits::InspectorIssue"* %1 to i64
  %4 = bitcast %"class.blink::AuditsIssue"* %0 to i64*
  store i64 %3, i64* %4, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssueC2EOS0_(%"class.blink::AuditsIssue"* nocapture, %"class.blink::AuditsIssue"* nocapture dereferenceable(8)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.blink::AuditsIssue"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %3, align 8
  %6 = bitcast %"class.blink::AuditsIssue"* %0 to i64*
  store i64 %5, i64* %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(8) %"class.blink::AuditsIssue"* @_ZN5blink11AuditsIssueaSEOS0_(%"class.blink::AuditsIssue"* returned, %"class.blink::AuditsIssue"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = bitcast %"class.blink::AuditsIssue"* %1 to i64*
  %5 = load i64, i64* %4, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %3, align 8
  %6 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %7 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %6, align 8
  %8 = bitcast %"class.blink::AuditsIssue"* %0 to i64*
  store i64 %5, i64* %8, align 8
  %9 = icmp eq %"class.blink::protocol::Audits::InspectorIssue"* %7, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %2
  %11 = bitcast %"class.blink::protocol::Audits::InspectorIssue"* %7 to void (%"class.blink::protocol::Audits::InspectorIssue"*)***
  %12 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)**, void (%"class.blink::protocol::Audits::InspectorIssue"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %12, i64 2
  %14 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %13, align 8
  tail call void %14(%"class.blink::protocol::Audits::InspectorIssue"* nonnull %7) #10
  br label %15

15:                                               ; preds = %2, %10
  ret %"class.blink::AuditsIssue"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssueD2Ev(%"class.blink::AuditsIssue"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %2, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %2, align 8
  %4 = icmp eq %"class.blink::protocol::Audits::InspectorIssue"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = bitcast %"class.blink::protocol::Audits::InspectorIssue"* %3 to void (%"class.blink::protocol::Audits::InspectorIssue"*)***
  %7 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)**, void (%"class.blink::protocol::Audits::InspectorIssue"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %7, i64 2
  %9 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %8, align 8
  tail call void %9(%"class.blink::protocol::Audits::InspectorIssue"* nonnull %3) #10
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden %"class.blink::protocol::Audits::InspectorIssue"* @_ZN5blink11AuditsIssue9TakeIssueEv(%"class.blink::AuditsIssue"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %3 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %2, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %2, align 8
  ret %"class.blink::protocol::Audits::InspectorIssue"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssue21ReportQuirksModeIssueEPNS_16ExecutionContextEbiN3WTF6StringES4_S4_(%"class.blink::ExecutionContext"*, i1 zeroext, i32, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.blink::AuditsIssue", align 8
  %9 = tail call i8* @_Znwm(i64 40) #11
  %10 = bitcast i8* %9 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits22QuirksModeIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds i8, i8* %9, i64 8
  %12 = getelementptr inbounds i8, i8* %9, i64 12
  %13 = getelementptr inbounds i8, i8* %9, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %13, i8 0, i64 24, i1 false) #10
  %14 = zext i1 %1 to i8
  store i8 %14, i8* %11, align 8
  %15 = bitcast i8* %12 to i32*
  store i32 %2, i32* %15, align 4
  %16 = getelementptr inbounds i8, i8* %9, i64 16
  %17 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %17, label %35, label %18

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %35

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #10
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %33, !prof !2

32:                                               ; preds = %23
  tail call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %23
  %34 = trunc i33 %29 to i32
  store i32 %34, i32* %24, align 4
  br label %35

35:                                               ; preds = %6, %18, %33
  %36 = ptrtoint %"class.WTF::StringImpl"* %3 to i64
  %37 = bitcast i8* %16 to i64*
  store i64 %36, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %9, i64 24
  %39 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %39, label %57, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %42 = load atomic i32, i32* %41 monotonic, align 4
  %43 = and i32 %42, 2
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %57

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = zext i32 %47 to i33
  %49 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %48, i33 1) #10
  %50 = extractvalue { i33, i1 } %49, 1
  %51 = extractvalue { i33, i1 } %49, 0
  %52 = icmp slt i33 %51, 0
  %53 = or i1 %50, %52
  br i1 %53, label %54, label %55, !prof !2

54:                                               ; preds = %45
  tail call void @llvm.trap() #10
  unreachable

55:                                               ; preds = %45
  %56 = trunc i33 %51 to i32
  store i32 %56, i32* %46, align 4
  br label %57

57:                                               ; preds = %35, %40, %55
  %58 = ptrtoint %"class.WTF::StringImpl"* %4 to i64
  %59 = bitcast i8* %38 to i64*
  store i64 %58, i64* %59, align 8
  %60 = getelementptr inbounds i8, i8* %9, i64 32
  %61 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %61, label %79, label %62

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %64 = load atomic i32, i32* %63 monotonic, align 4
  %65 = and i32 %64, 2
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %79

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  %70 = zext i32 %69 to i33
  %71 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %70, i33 1) #10
  %72 = extractvalue { i33, i1 } %71, 1
  %73 = extractvalue { i33, i1 } %71, 0
  %74 = icmp slt i33 %73, 0
  %75 = or i1 %72, %74
  br i1 %75, label %76, label %77, !prof !2

76:                                               ; preds = %67
  tail call void @llvm.trap() #10
  unreachable

77:                                               ; preds = %67
  %78 = trunc i33 %73 to i32
  store i32 %78, i32* %68, align 4
  br label %79

79:                                               ; preds = %77, %62, %57
  %80 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %81 = bitcast i8* %60 to i64*
  store i64 %80, i64* %81, align 8
  %82 = ptrtoint i8* %9 to i64
  %83 = tail call i8* @_Znwm(i64 104) #11
  %84 = bitcast i8* %83 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits21InspectorIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %84, align 8
  %85 = getelementptr inbounds i8, i8* %83, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %85, i8 0, i64 96, i1 false) #10
  %86 = getelementptr inbounds i8, i8* %83, i64 88
  %87 = bitcast i8* %86 to i64*
  store i64 %82, i64* %87, align 8
  %88 = ptrtoint i8* %83 to i64
  %89 = tail call i8* @_Znwm(i64 24) #11
  %90 = bitcast i8* %89 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits14InspectorIssueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %90, align 8
  %91 = getelementptr inbounds i8, i8* %89, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 16, i1 false) #10
  %92 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #10
  %93 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum15QuirksModeIssueE, i64 0, i64 0)) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum15QuirksModeIssueE, i64 0, i64 0), i64 %93) #10
  %94 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %95 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %96 = icmp eq %"class.WTF::StringImpl"* %95, null
  br i1 %96, label %112, label %97

97:                                               ; preds = %79
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %99 = load atomic i32, i32* %98 monotonic, align 4
  %100 = and i32 %99, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %112

102:                                              ; preds = %97
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %95, i64 0, i32 0
  %104 = load i32, i32* %103, align 4
  %105 = zext i32 %104 to i33
  %106 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %105, i33 1) #10
  %107 = extractvalue { i33, i1 } %106, 1
  %108 = extractvalue { i33, i1 } %106, 0
  %109 = icmp slt i33 %108, 0
  %110 = or i1 %107, %109
  br i1 %110, label %111, label %115, !prof !2

111:                                              ; preds = %102
  call void @llvm.trap() #10
  unreachable

112:                                              ; preds = %97, %79
  %113 = ptrtoint %"class.WTF::StringImpl"* %95 to i64
  %114 = bitcast i8* %91 to i64*
  store i64 %113, i64* %114, align 8
  br label %135

115:                                              ; preds = %102
  %116 = trunc i33 %108 to i32
  store i32 %116, i32* %103, align 4
  %117 = bitcast i8* %91 to %"class.WTF::StringImpl"**
  %118 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %117, align 8
  %119 = ptrtoint %"class.WTF::StringImpl"* %95 to i64
  %120 = bitcast i8* %91 to i64*
  store i64 %119, i64* %120, align 8
  %121 = icmp eq %"class.WTF::StringImpl"* %118, null
  br i1 %121, label %135, label %122

122:                                              ; preds = %115
  %123 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %124 = load atomic i32, i32* %123 monotonic, align 4
  %125 = and i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %118, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  br i1 %126, label %129, label %131

129:                                              ; preds = %122
  %130 = add i32 %128, -1
  store i32 %130, i32* %127, align 4
  br label %131

131:                                              ; preds = %129, %122
  %132 = phi i32 [ %130, %129 ], [ %128, %122 ]
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %131
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %118) #10
  br label %135

135:                                              ; preds = %112, %115, %131, %134
  %136 = getelementptr inbounds i8, i8* %89, i64 16
  %137 = bitcast i8* %136 to %"class.blink::protocol::Audits::InspectorIssueDetails"**
  %138 = load %"class.blink::protocol::Audits::InspectorIssueDetails"*, %"class.blink::protocol::Audits::InspectorIssueDetails"** %137, align 8
  %139 = bitcast i8* %136 to i64*
  store i64 %88, i64* %139, align 8
  %140 = icmp eq %"class.blink::protocol::Audits::InspectorIssueDetails"* %138, null
  br i1 %140, label %146, label %141

141:                                              ; preds = %135
  %142 = bitcast %"class.blink::protocol::Audits::InspectorIssueDetails"* %138 to void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)***
  %143 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)**, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*** %142, align 8
  %144 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %143, i64 2
  %145 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %144, align 8
  call void %145(%"class.blink::protocol::Audits::InspectorIssueDetails"* nonnull %138) #10
  br label %146

146:                                              ; preds = %135, %141
  %147 = ptrtoint i8* %89 to i64
  %148 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %94, align 8
  %149 = icmp eq %"class.WTF::StringImpl"* %148, null
  br i1 %149, label %163, label %150

150:                                              ; preds = %146
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %152 = load atomic i32, i32* %151 monotonic, align 4
  %153 = and i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %148, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  br i1 %154, label %157, label %159

157:                                              ; preds = %150
  %158 = add i32 %156, -1
  store i32 %158, i32* %155, align 4
  br label %159

159:                                              ; preds = %157, %150
  %160 = phi i32 [ %158, %157 ], [ %156, %150 ]
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %163

162:                                              ; preds = %159
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %148) #10
  br label %163

163:                                              ; preds = %162, %159, %146
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #10
  %164 = bitcast %"class.blink::AuditsIssue"* %8 to i64*
  store i64 %147, i64* %164, align 8
  %165 = bitcast %"class.blink::ExecutionContext"* %0 to void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)***
  %166 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)**, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*** %165, align 8
  %167 = getelementptr inbounds void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %166, i64 31
  %168 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %167, align 8
  call void %168(%"class.blink::ExecutionContext"* %0, %"class.blink::AuditsIssue"* nonnull %8) #10
  %169 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %170 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %169, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %169, align 8
  %171 = icmp eq %"class.blink::protocol::Audits::InspectorIssue"* %170, null
  br i1 %171, label %177, label %172

172:                                              ; preds = %163
  %173 = bitcast %"class.blink::protocol::Audits::InspectorIssue"* %170 to void (%"class.blink::protocol::Audits::InspectorIssue"*)***
  %174 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)**, void (%"class.blink::protocol::Audits::InspectorIssue"*)*** %173, align 8
  %175 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %174, i64 2
  %176 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %175, align 8
  call void %176(%"class.blink::protocol::Audits::InspectorIssue"* nonnull %170) #10
  br label %177

177:                                              ; preds = %172, %163
  br i1 %61, label %191, label %178

178:                                              ; preds = %177
  %179 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %180 = load atomic i32, i32* %179 monotonic, align 4
  %181 = and i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %184 = load i32, i32* %183, align 4
  br i1 %182, label %185, label %187

185:                                              ; preds = %178
  %186 = add i32 %184, -1
  store i32 %186, i32* %183, align 4
  br label %187

187:                                              ; preds = %185, %178
  %188 = phi i32 [ %186, %185 ], [ %184, %178 ]
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %190, label %191

190:                                              ; preds = %187
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #10
  br label %191

191:                                              ; preds = %177, %187, %190
  br i1 %39, label %205, label %192

192:                                              ; preds = %191
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %194 = load atomic i32, i32* %193 monotonic, align 4
  %195 = and i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %198 = load i32, i32* %197, align 4
  br i1 %196, label %199, label %201

199:                                              ; preds = %192
  %200 = add i32 %198, -1
  store i32 %200, i32* %197, align 4
  br label %201

201:                                              ; preds = %199, %192
  %202 = phi i32 [ %200, %199 ], [ %198, %192 ]
  %203 = icmp eq i32 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %201
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #10
  br label %205

205:                                              ; preds = %191, %201, %204
  br i1 %17, label %219, label %206

206:                                              ; preds = %205
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load atomic i32, i32* %207 monotonic, align 4
  %209 = and i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %212 = load i32, i32* %211, align 4
  br i1 %210, label %213, label %215

213:                                              ; preds = %206
  %214 = add i32 %212, -1
  store i32 %214, i32* %211, align 4
  br label %215

215:                                              ; preds = %213, %206
  %216 = phi i32 [ %214, %213 ], [ %212, %206 ]
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %219

218:                                              ; preds = %215
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %219

219:                                              ; preds = %205, %215, %218
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink31RendererCorsIssueCodeToProtocolENS_21RendererCorsIssueCodeE(i32) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::String", align 8
  switch i32 %0, label %5 [
    i32 1, label %6
    i32 2, label %3
    i32 0, label %4
  ]

3:                                                ; preds = %1
  br label %6

4:                                                ; preds = %1
  br label %6

5:                                                ; preds = %1
  unreachable

6:                                                ; preds = %1, %4, %3
  %7 = phi i8* [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol7Network13CorsErrorEnum16DisallowedByModeE, i64 0, i64 0), %4 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol7Network13CorsErrorEnum27NoCorsRedirectModeNotFollowE, i64 0, i64 0), %3 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol7Network13CorsErrorEnum18CorsDisabledSchemeE, i64 0, i64 0), %1 ]
  %8 = tail call i64 @strlen(i8* nonnull %7) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* %7, i64 %8) #10
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  ret %"class.WTF::StringImpl"* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden noalias nonnull %"class.blink::protocol::Audits::SourceCodeLocation"* @_ZN5blink22CreateProtocolLocationERKNS_14SourceLocationE(%"class.blink::SourceLocation"* nocapture readonly dereferenceable(32)) local_unnamed_addr #0 {
  %2 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %3 = tail call i8* @_Znwm(i64 40) #11
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits18SourceCodeLocationE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  store i8 0, i8* %5, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #10
  %7 = bitcast i8* %3 to %"class.blink::protocol::Audits::SourceCodeLocation"*
  %8 = getelementptr inbounds i8, i8* %3, i64 24
  %9 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  %20 = zext i32 %19 to i33
  %21 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %20, i33 1) #10
  %22 = extractvalue { i33, i1 } %21, 1
  %23 = extractvalue { i33, i1 } %21, 0
  %24 = icmp slt i33 %23, 0
  %25 = or i1 %22, %24
  br i1 %25, label %26, label %27, !prof !2

26:                                               ; preds = %17
  tail call void @llvm.trap() #10
  unreachable

27:                                               ; preds = %17
  %28 = trunc i33 %23 to i32
  store i32 %28, i32* %18, align 4
  br label %29

29:                                               ; preds = %1, %12, %27
  %30 = ptrtoint %"class.WTF::StringImpl"* %10 to i64
  %31 = bitcast i8* %8 to i64*
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %0, i64 0, i32 1
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, -1
  %35 = getelementptr inbounds i8, i8* %3, i64 32
  %36 = bitcast i8* %35 to i32*
  store i32 %34, i32* %36, align 8
  %37 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %0, i64 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds i8, i8* %3, i64 36
  %40 = bitcast i8* %39 to i32*
  store i32 %38, i32* %40, align 4
  %41 = getelementptr inbounds %"class.blink::SourceLocation", %"class.blink::SourceLocation"* %0, i64 0, i32 4
  %42 = load i32, i32* %41, align 8
  %43 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %43) #10
  %44 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 12
  %45 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 2
  %46 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 3
  %47 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 13
  %48 = icmp slt i32 %42, 0
  %49 = sub i32 0, %42
  %50 = select i1 %48, i32 %49, i32 %42
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %43, i8 -86, i64 32, i1 false) #10
  store i8* %44, i8** %45, align 8
  %51 = urem i32 %50, 10
  %52 = udiv i32 %50, 10
  %53 = trunc i32 %51 to i8
  %54 = or i8 %53, 48
  store i8 %54, i8* %44, align 4
  %55 = icmp ugt i32 %50, 9
  br i1 %55, label %56, label %85

56:                                               ; preds = %29
  %57 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 11
  store i8* %57, i8** %45, align 8
  %58 = urem i32 %52, 10
  %59 = trunc i32 %58 to i8
  %60 = or i8 %59, 48
  store i8 %60, i8* %57, align 1
  %61 = icmp ugt i32 %50, 99
  br i1 %61, label %62, label %85

62:                                               ; preds = %56
  %63 = udiv i32 %50, 100
  %64 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 10
  store i8* %64, i8** %45, align 8
  %65 = urem i32 %63, 10
  %66 = trunc i32 %65 to i8
  %67 = or i8 %66, 48
  store i8 %67, i8* %64, align 2
  %68 = icmp ugt i32 %50, 999
  br i1 %68, label %69, label %85

69:                                               ; preds = %62
  %70 = udiv i32 %50, 1000
  %71 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %2, i64 0, i32 0, i64 9
  store i8* %71, i8** %45, align 8
  %72 = urem i32 %70, 10
  %73 = trunc i32 %72 to i8
  %74 = or i8 %73, 48
  store i8 %74, i8* %71, align 1
  %75 = icmp ugt i32 %50, 9999
  br i1 %75, label %76, label %85

76:                                               ; preds = %69, %76
  %77 = phi i32 [ %79, %76 ], [ %70, %69 ]
  %78 = load i8*, i8** %45, align 8
  %79 = udiv i32 %77, 10
  %80 = getelementptr inbounds i8, i8* %78, i64 -1
  store i8* %80, i8** %45, align 8
  %81 = urem i32 %79, 10
  %82 = trunc i32 %81 to i8
  %83 = or i8 %82, 48
  store i8 %83, i8* %80, align 1
  %84 = icmp ugt i32 %77, 99
  br i1 %84, label %76, label %85

85:                                               ; preds = %76, %69, %62, %56, %29
  br i1 %48, label %86, label %89

86:                                               ; preds = %85
  %87 = load i8*, i8** %45, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 -1
  store i8* %88, i8** %45, align 8
  store i8 45, i8* %88, align 1
  br label %89

89:                                               ; preds = %85, %86
  %90 = bitcast i8** %45 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = ptrtoint i8* %47 to i64
  %93 = sub i64 %92, %91
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %46, align 8
  %95 = inttoptr i64 %91 to i8*
  %96 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %95, i32 %94) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %43) #10
  %97 = icmp eq %"class.WTF::StringImpl"* %96, null
  br i1 %97, label %115, label %98

98:                                               ; preds = %89
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %100 = load atomic i32, i32* %99 monotonic, align 4
  %101 = and i32 %100, 2
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %117

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i33
  %107 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %106, i33 1) #10
  %108 = extractvalue { i33, i1 } %107, 1
  %109 = extractvalue { i33, i1 } %107, 0
  %110 = icmp slt i33 %109, 0
  %111 = or i1 %108, %110
  br i1 %111, label %112, label %113, !prof !2

112:                                              ; preds = %103
  call void @llvm.trap() #10
  unreachable

113:                                              ; preds = %103
  %114 = trunc i33 %109 to i32
  store i32 %114, i32* %104, align 4
  br label %117

115:                                              ; preds = %89
  %116 = bitcast i8* %6 to i64*
  store i64 0, i64* %116, align 8
  store i8 1, i8* %5, align 8
  br label %159

117:                                              ; preds = %113, %98
  %118 = load atomic i32, i32* %99 monotonic, align 4
  %119 = and i32 %118, 2
  %120 = icmp eq i32 %119, 0
  br i1 %120, label %121, label %133

121:                                              ; preds = %117
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = zext i32 %123 to i33
  %125 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %124, i33 1) #10
  %126 = extractvalue { i33, i1 } %125, 1
  %127 = extractvalue { i33, i1 } %125, 0
  %128 = icmp slt i33 %127, 0
  %129 = or i1 %126, %128
  br i1 %129, label %130, label %131, !prof !2

130:                                              ; preds = %121
  call void @llvm.trap() #10
  unreachable

131:                                              ; preds = %121
  %132 = trunc i33 %127 to i32
  store i32 %132, i32* %122, align 4
  br label %133

133:                                              ; preds = %117, %131
  %134 = ptrtoint %"class.WTF::StringImpl"* %96 to i64
  %135 = bitcast i8* %6 to i64*
  store i64 %134, i64* %135, align 8
  store i8 1, i8* %5, align 8
  %136 = load atomic i32, i32* %99 monotonic, align 4
  %137 = and i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %96, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  br i1 %138, label %141, label %143

141:                                              ; preds = %133
  %142 = add i32 %140, -1
  store i32 %142, i32* %139, align 4
  br label %143

143:                                              ; preds = %141, %133
  %144 = phi i32 [ %142, %141 ], [ %140, %133 ]
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %143
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #10
  %147 = load i32, i32* %139, align 4
  br label %148

148:                                              ; preds = %143, %146
  %149 = phi i32 [ %144, %143 ], [ %147, %146 ]
  %150 = load atomic i32, i32* %99 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %155

153:                                              ; preds = %148
  %154 = add i32 %149, -1
  store i32 %154, i32* %139, align 4
  br label %155

155:                                              ; preds = %153, %148
  %156 = phi i32 [ %154, %153 ], [ %149, %148 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %96) #10
  br label %159

159:                                              ; preds = %115, %155, %158
  ret %"class.blink::protocol::Audits::SourceCodeLocation"* %7
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssue15ReportCorsIssueEPNS_16ExecutionContextElNS_21RendererCorsIssueCodeEN3WTF6StringES5_S5_(%"class.blink::ExecutionContext"*, i64, i32, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.blink::AuditsIssue", align 8
  %9 = tail call %"class.WTF::StringImpl"* @_ZN5blink18IdentifiersFactory20SubresourceRequestIdEm(i64 %1) #10
  %10 = tail call i8* @_Znwm(i64 32) #11
  %11 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits15AffectedRequestE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  %13 = bitcast i8* %12 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %13, align 8
  %14 = getelementptr inbounds i8, i8* %10, i64 16
  store i8 0, i8* %14, align 8
  %15 = getelementptr inbounds i8, i8* %10, i64 24
  %16 = bitcast i8* %15 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %16, align 8
  %17 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %17, label %33, label %18

18:                                               ; preds = %6
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %20 = load atomic i32, i32* %19 monotonic, align 4
  %21 = and i32 %20, 2
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %33

23:                                               ; preds = %18
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i33
  %27 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %26, i33 1) #10
  %28 = extractvalue { i33, i1 } %27, 1
  %29 = extractvalue { i33, i1 } %27, 0
  %30 = icmp slt i33 %29, 0
  %31 = or i1 %28, %30
  br i1 %31, label %32, label %36, !prof !2

32:                                               ; preds = %23
  tail call void @llvm.trap() #10
  unreachable

33:                                               ; preds = %18, %6
  %34 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %35 = bitcast i8* %12 to i64*
  store i64 %34, i64* %35, align 8
  br label %55

36:                                               ; preds = %23
  %37 = trunc i33 %29 to i32
  store i32 %37, i32* %24, align 4
  %38 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %13, align 8
  %39 = ptrtoint %"class.WTF::StringImpl"* %9 to i64
  %40 = bitcast i8* %12 to i64*
  store i64 %39, i64* %40, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %38, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %36
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %38, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %38) #10
  br label %55

55:                                               ; preds = %33, %36, %51, %54
  %56 = icmp eq %"class.WTF::StringImpl"* %3, null
  br i1 %56, label %74, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i33
  %66 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %65, i33 1) #10
  %67 = extractvalue { i33, i1 } %66, 1
  %68 = extractvalue { i33, i1 } %66, 0
  %69 = icmp slt i33 %68, 0
  %70 = or i1 %67, %69
  br i1 %70, label %71, label %72, !prof !2

71:                                               ; preds = %62
  tail call void @llvm.trap() #10
  unreachable

72:                                               ; preds = %62
  %73 = trunc i33 %68 to i32
  store i32 %73, i32* %63, align 4
  br label %74

74:                                               ; preds = %72, %57, %55
  %75 = bitcast i8* %14 to %"class.crdtp::detail::ValueMaybe"*
  tail call void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"* %75, %"class.WTF::StringImpl"* %3) #10
  %76 = ptrtoint i8* %10 to i64
  %77 = tail call i8* @_Znwm(i64 24) #11
  %78 = bitcast i8* %77 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol7Network15CorsErrorStatusE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %78, align 8
  %79 = getelementptr inbounds i8, i8* %77, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %79, i8 0, i64 16, i1 false) #10
  %80 = tail call %"class.WTF::StringImpl"* @_ZN5blink31RendererCorsIssueCodeToProtocolENS_21RendererCorsIssueCodeE(i32 %2)
  %81 = icmp eq %"class.WTF::StringImpl"* %80, null
  br i1 %81, label %99, label %82

82:                                               ; preds = %74
  %83 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %89 = load i32, i32* %88, align 4
  %90 = zext i32 %89 to i33
  %91 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %90, i33 1) #10
  %92 = extractvalue { i33, i1 } %91, 1
  %93 = extractvalue { i33, i1 } %91, 0
  %94 = icmp slt i33 %93, 0
  %95 = or i1 %92, %94
  br i1 %95, label %96, label %97, !prof !2

96:                                               ; preds = %87
  tail call void @llvm.trap() #10
  unreachable

97:                                               ; preds = %87
  %98 = trunc i33 %93 to i32
  store i32 %98, i32* %88, align 4
  br label %99

99:                                               ; preds = %97, %82, %74
  %100 = ptrtoint %"class.WTF::StringImpl"* %80 to i64
  %101 = bitcast i8* %79 to i64*
  %102 = bitcast i8* %79 to %"class.WTF::StringImpl"**
  %103 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %102, align 8
  store i64 %100, i64* %101, align 8
  %104 = icmp eq %"class.WTF::StringImpl"* %103, null
  br i1 %104, label %118, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %107 = load atomic i32, i32* %106 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %103, i64 0, i32 0
  %111 = load i32, i32* %110, align 4
  br i1 %109, label %112, label %114

112:                                              ; preds = %105
  %113 = add i32 %111, -1
  store i32 %113, i32* %110, align 4
  br label %114

114:                                              ; preds = %112, %105
  %115 = phi i32 [ %113, %112 ], [ %111, %105 ]
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %103) #10
  br label %118

118:                                              ; preds = %99, %114, %117
  %119 = getelementptr inbounds i8, i8* %77, i64 16
  %120 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %120, label %138, label %121

121:                                              ; preds = %118
  %122 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %123 = load atomic i32, i32* %122 monotonic, align 4
  %124 = and i32 %123, 2
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %138

126:                                              ; preds = %121
  %127 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %128 = load i32, i32* %127, align 4
  %129 = zext i32 %128 to i33
  %130 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %129, i33 1) #10
  %131 = extractvalue { i33, i1 } %130, 1
  %132 = extractvalue { i33, i1 } %130, 0
  %133 = icmp slt i33 %132, 0
  %134 = or i1 %131, %133
  br i1 %134, label %135, label %136, !prof !2

135:                                              ; preds = %126
  tail call void @llvm.trap() #10
  unreachable

136:                                              ; preds = %126
  %137 = trunc i33 %132 to i32
  store i32 %137, i32* %127, align 4
  br label %138

138:                                              ; preds = %136, %121, %118
  %139 = ptrtoint %"class.WTF::StringImpl"* %5 to i64
  %140 = bitcast i8* %119 to i64*
  %141 = bitcast i8* %119 to %"class.WTF::StringImpl"**
  %142 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %141, align 8
  store i64 %139, i64* %140, align 8
  %143 = icmp eq %"class.WTF::StringImpl"* %142, null
  br i1 %143, label %157, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %146 = load atomic i32, i32* %145 monotonic, align 4
  %147 = and i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %142, i64 0, i32 0
  %150 = load i32, i32* %149, align 4
  br i1 %148, label %151, label %153

151:                                              ; preds = %144
  %152 = add i32 %150, -1
  store i32 %152, i32* %149, align 4
  br label %153

153:                                              ; preds = %151, %144
  %154 = phi i32 [ %152, %151 ], [ %150, %144 ]
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %153
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %142) #10
  br label %157

157:                                              ; preds = %138, %153, %156
  %158 = ptrtoint i8* %77 to i64
  br i1 %81, label %172, label %159

159:                                              ; preds = %157
  %160 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %161 = load atomic i32, i32* %160 monotonic, align 4
  %162 = and i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %80, i64 0, i32 0
  %165 = load i32, i32* %164, align 4
  br i1 %163, label %166, label %168

166:                                              ; preds = %159
  %167 = add i32 %165, -1
  store i32 %167, i32* %164, align 4
  br label %168

168:                                              ; preds = %166, %159
  %169 = phi i32 [ %167, %166 ], [ %165, %159 ]
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %80) #10
  br label %172

172:                                              ; preds = %171, %168, %157
  %173 = tail call i8* @_Znwm(i64 80) #11
  %174 = bitcast i8* %173 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits16CorsIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %174, align 8
  %175 = getelementptr inbounds i8, i8* %173, i64 8
  %176 = bitcast i8* %175 to i64*
  %177 = getelementptr inbounds i8, i8* %173, i64 24
  %178 = getelementptr inbounds i8, i8* %173, i64 48
  %179 = bitcast i8* %178 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %179, align 8
  %180 = getelementptr inbounds i8, i8* %173, i64 56
  store i8 0, i8* %180, align 8
  %181 = getelementptr inbounds i8, i8* %173, i64 64
  %182 = getelementptr inbounds i8, i8* %173, i64 32
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %182, i8 0, i64 9, i1 false) #10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %181, i8 0, i64 16, i1 false) #10
  %183 = bitcast i8* %177 to i64*
  %184 = getelementptr inbounds i8, i8* %173, i64 16
  store i8 0, i8* %184, align 8
  store i64 %76, i64* %183, align 8
  store i64 %158, i64* %176, align 8
  %185 = ptrtoint i8* %173 to i64
  %186 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %186, label %204, label %187

187:                                              ; preds = %172
  %188 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %189 = load atomic i32, i32* %188 monotonic, align 4
  %190 = and i32 %189, 2
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %192, label %204

192:                                              ; preds = %187
  %193 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %194 = load i32, i32* %193, align 4
  %195 = zext i32 %194 to i33
  %196 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %195, i33 1) #10
  %197 = extractvalue { i33, i1 } %196, 1
  %198 = extractvalue { i33, i1 } %196, 0
  %199 = icmp slt i33 %198, 0
  %200 = or i1 %197, %199
  br i1 %200, label %201, label %202, !prof !2

201:                                              ; preds = %192
  tail call void @llvm.trap() #10
  unreachable

202:                                              ; preds = %192
  %203 = trunc i33 %198 to i32
  store i32 %203, i32* %193, align 4
  br label %204

204:                                              ; preds = %172, %187, %202
  %205 = getelementptr inbounds i8, i8* %173, i64 40
  %206 = bitcast i8* %205 to %"class.crdtp::detail::ValueMaybe"*
  tail call void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"* %206, %"class.WTF::StringImpl"* %4) #10
  %207 = tail call %"class.blink::SourceLocation"* @_ZN5blink14SourceLocation7CaptureEPNS_16ExecutionContextE(%"class.blink::ExecutionContext"* %0) #10
  %208 = icmp eq %"class.blink::SourceLocation"* %207, null
  br i1 %208, label %222, label %209

209:                                              ; preds = %204
  %210 = tail call %"class.blink::protocol::Audits::SourceCodeLocation"* @_ZN5blink22CreateProtocolLocationERKNS_14SourceLocationE(%"class.blink::SourceLocation"* nonnull dereferenceable(32) %207)
  %211 = ptrtoint %"class.blink::protocol::Audits::SourceCodeLocation"* %210 to i64
  %212 = getelementptr inbounds i8, i8* %173, i64 32
  %213 = bitcast i8* %212 to %"class.blink::protocol::Audits::SourceCodeLocation"**
  %214 = load %"class.blink::protocol::Audits::SourceCodeLocation"*, %"class.blink::protocol::Audits::SourceCodeLocation"** %213, align 8
  %215 = bitcast i8* %212 to i64*
  store i64 %211, i64* %215, align 8
  %216 = icmp eq %"class.blink::protocol::Audits::SourceCodeLocation"* %214, null
  br i1 %216, label %222, label %217

217:                                              ; preds = %209
  %218 = bitcast %"class.blink::protocol::Audits::SourceCodeLocation"* %214 to void (%"class.blink::protocol::Audits::SourceCodeLocation"*)***
  %219 = load void (%"class.blink::protocol::Audits::SourceCodeLocation"*)**, void (%"class.blink::protocol::Audits::SourceCodeLocation"*)*** %218, align 8
  %220 = getelementptr inbounds void (%"class.blink::protocol::Audits::SourceCodeLocation"*)*, void (%"class.blink::protocol::Audits::SourceCodeLocation"*)** %219, i64 2
  %221 = load void (%"class.blink::protocol::Audits::SourceCodeLocation"*)*, void (%"class.blink::protocol::Audits::SourceCodeLocation"*)** %220, align 8
  tail call void %221(%"class.blink::protocol::Audits::SourceCodeLocation"* nonnull %214) #10
  br label %222

222:                                              ; preds = %209, %217, %204
  %223 = tail call i8* @_Znwm(i64 104) #11
  %224 = bitcast i8* %223 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits21InspectorIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %224, align 8
  %225 = getelementptr inbounds i8, i8* %223, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %225, i8 0, i64 96, i1 false) #10
  %226 = getelementptr inbounds i8, i8* %223, i64 72
  %227 = bitcast i8* %226 to i64*
  store i64 %185, i64* %227, align 8
  %228 = ptrtoint i8* %223 to i64
  %229 = tail call i8* @_Znwm(i64 24) #11
  %230 = bitcast i8* %229 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits14InspectorIssueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %230, align 8
  %231 = getelementptr inbounds i8, i8* %229, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %231, i8 0, i64 16, i1 false) #10
  %232 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %232) #10
  %233 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum9CorsIssueE, i64 0, i64 0)) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum9CorsIssueE, i64 0, i64 0), i64 %233) #10
  %234 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %235 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %234, align 8
  %236 = icmp eq %"class.WTF::StringImpl"* %235, null
  br i1 %236, label %252, label %237

237:                                              ; preds = %222
  %238 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load atomic i32, i32* %238 monotonic, align 4
  %240 = and i32 %239, 2
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %252

242:                                              ; preds = %237
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 0
  %244 = load i32, i32* %243, align 4
  %245 = zext i32 %244 to i33
  %246 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %245, i33 1) #10
  %247 = extractvalue { i33, i1 } %246, 1
  %248 = extractvalue { i33, i1 } %246, 0
  %249 = icmp slt i33 %248, 0
  %250 = or i1 %247, %249
  br i1 %250, label %251, label %255, !prof !2

251:                                              ; preds = %242
  call void @llvm.trap() #10
  unreachable

252:                                              ; preds = %237, %222
  %253 = ptrtoint %"class.WTF::StringImpl"* %235 to i64
  %254 = bitcast i8* %231 to i64*
  store i64 %253, i64* %254, align 8
  br label %275

255:                                              ; preds = %242
  %256 = trunc i33 %248 to i32
  store i32 %256, i32* %243, align 4
  %257 = bitcast i8* %231 to %"class.WTF::StringImpl"**
  %258 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %257, align 8
  %259 = ptrtoint %"class.WTF::StringImpl"* %235 to i64
  %260 = bitcast i8* %231 to i64*
  store i64 %259, i64* %260, align 8
  %261 = icmp eq %"class.WTF::StringImpl"* %258, null
  br i1 %261, label %275, label %262

262:                                              ; preds = %255
  %263 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %264 = load atomic i32, i32* %263 monotonic, align 4
  %265 = and i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %258, i64 0, i32 0
  %268 = load i32, i32* %267, align 4
  br i1 %266, label %269, label %271

269:                                              ; preds = %262
  %270 = add i32 %268, -1
  store i32 %270, i32* %267, align 4
  br label %271

271:                                              ; preds = %269, %262
  %272 = phi i32 [ %270, %269 ], [ %268, %262 ]
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %275

274:                                              ; preds = %271
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %258) #10
  br label %275

275:                                              ; preds = %252, %255, %271, %274
  %276 = getelementptr inbounds i8, i8* %229, i64 16
  %277 = bitcast i8* %276 to %"class.blink::protocol::Audits::InspectorIssueDetails"**
  %278 = load %"class.blink::protocol::Audits::InspectorIssueDetails"*, %"class.blink::protocol::Audits::InspectorIssueDetails"** %277, align 8
  %279 = bitcast i8* %276 to i64*
  store i64 %228, i64* %279, align 8
  %280 = icmp eq %"class.blink::protocol::Audits::InspectorIssueDetails"* %278, null
  br i1 %280, label %286, label %281

281:                                              ; preds = %275
  %282 = bitcast %"class.blink::protocol::Audits::InspectorIssueDetails"* %278 to void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)***
  %283 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)**, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*** %282, align 8
  %284 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %283, i64 2
  %285 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %284, align 8
  call void %285(%"class.blink::protocol::Audits::InspectorIssueDetails"* nonnull %278) #10
  br label %286

286:                                              ; preds = %275, %281
  %287 = ptrtoint i8* %229 to i64
  %288 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %234, align 8
  %289 = icmp eq %"class.WTF::StringImpl"* %288, null
  br i1 %289, label %303, label %290

290:                                              ; preds = %286
  %291 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %288, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %292 = load atomic i32, i32* %291 monotonic, align 4
  %293 = and i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %288, i64 0, i32 0
  %296 = load i32, i32* %295, align 4
  br i1 %294, label %297, label %299

297:                                              ; preds = %290
  %298 = add i32 %296, -1
  store i32 %298, i32* %295, align 4
  br label %299

299:                                              ; preds = %297, %290
  %300 = phi i32 [ %298, %297 ], [ %296, %290 ]
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %303

302:                                              ; preds = %299
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %288) #10
  br label %303

303:                                              ; preds = %302, %299, %286
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %232) #10
  %304 = bitcast %"class.blink::AuditsIssue"* %8 to i64*
  store i64 %287, i64* %304, align 8
  %305 = bitcast %"class.blink::ExecutionContext"* %0 to void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)***
  %306 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)**, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*** %305, align 8
  %307 = getelementptr inbounds void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %306, i64 31
  %308 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %307, align 8
  call void %308(%"class.blink::ExecutionContext"* %0, %"class.blink::AuditsIssue"* nonnull %8) #10
  %309 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %8, i64 0, i32 0, i32 0, i32 0, i32 0
  %310 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %309, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %309, align 8
  %311 = icmp eq %"class.blink::protocol::Audits::InspectorIssue"* %310, null
  br i1 %311, label %317, label %312

312:                                              ; preds = %303
  %313 = bitcast %"class.blink::protocol::Audits::InspectorIssue"* %310 to void (%"class.blink::protocol::Audits::InspectorIssue"*)***
  %314 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)**, void (%"class.blink::protocol::Audits::InspectorIssue"*)*** %313, align 8
  %315 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %314, i64 2
  %316 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %315, align 8
  call void %316(%"class.blink::protocol::Audits::InspectorIssue"* nonnull %310) #10
  br label %317

317:                                              ; preds = %303, %312
  br i1 %208, label %320, label %318

318:                                              ; preds = %317
  call void @_ZN5blink14SourceLocationD1Ev(%"class.blink::SourceLocation"* nonnull %207) #10
  %319 = bitcast %"class.blink::SourceLocation"* %207 to i8*
  call void @free(i8* %319) #10
  br label %320

320:                                              ; preds = %318, %317
  br i1 %17, label %334, label %321

321:                                              ; preds = %320
  %322 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %323 = load atomic i32, i32* %322 monotonic, align 4
  %324 = and i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %327 = load i32, i32* %326, align 4
  br i1 %325, label %328, label %330

328:                                              ; preds = %321
  %329 = add i32 %327, -1
  store i32 %329, i32* %326, align 4
  br label %330

330:                                              ; preds = %328, %321
  %331 = phi i32 [ %329, %328 ], [ %327, %321 ]
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %334

333:                                              ; preds = %330
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %9) #10
  br label %334

334:                                              ; preds = %320, %330, %333
  br i1 %120, label %348, label %335

335:                                              ; preds = %334
  %336 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %337 = load atomic i32, i32* %336 monotonic, align 4
  %338 = and i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %341 = load i32, i32* %340, align 4
  br i1 %339, label %342, label %344

342:                                              ; preds = %335
  %343 = add i32 %341, -1
  store i32 %343, i32* %340, align 4
  br label %344

344:                                              ; preds = %342, %335
  %345 = phi i32 [ %343, %342 ], [ %341, %335 ]
  %346 = icmp eq i32 %345, 0
  br i1 %346, label %347, label %348

347:                                              ; preds = %344
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #10
  br label %348

348:                                              ; preds = %334, %344, %347
  br i1 %186, label %362, label %349

349:                                              ; preds = %348
  %350 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %351 = load atomic i32, i32* %350 monotonic, align 4
  %352 = and i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 0
  %355 = load i32, i32* %354, align 4
  br i1 %353, label %356, label %358

356:                                              ; preds = %349
  %357 = add i32 %355, -1
  store i32 %357, i32* %354, align 4
  br label %358

358:                                              ; preds = %356, %349
  %359 = phi i32 [ %357, %356 ], [ %355, %349 ]
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %361, label %362

361:                                              ; preds = %358
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %4) #10
  br label %362

362:                                              ; preds = %348, %358, %361
  br i1 %56, label %376, label %363

363:                                              ; preds = %362
  %364 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %365 = load atomic i32, i32* %364 monotonic, align 4
  %366 = and i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 0
  %369 = load i32, i32* %368, align 4
  br i1 %367, label %370, label %372

370:                                              ; preds = %363
  %371 = add i32 %369, -1
  store i32 %371, i32* %368, align 4
  br label %372

372:                                              ; preds = %370, %363
  %373 = phi i32 [ %371, %370 ], [ %369, %363 ]
  %374 = icmp eq i32 %373, 0
  br i1 %374, label %375, label %376

375:                                              ; preds = %372
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %3) #10
  br label %376

376:                                              ; preds = %362, %372, %375
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink18IdentifiersFactory20SubresourceRequestIdEm(i64) local_unnamed_addr #3

declare %"class.blink::SourceLocation"* @_ZN5blink14SourceLocation7CaptureEPNS_16ExecutionContextE(%"class.blink::ExecutionContext"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssue22ReportAttributionIssueEPNS_16ExecutionContextENS_29AttributionReportingIssueTypeERKN4absl8optionalIN4base16UnguessableTokenEEEPNS_7ElementERKNS5_IN3WTF6StringEEESH_(%"class.blink::ExecutionContext"*, i32, %"class.absl::optional"* dereferenceable(24), %"class.blink::Element"*, %"class.absl::optional.356"* nocapture readonly dereferenceable(16), %"class.absl::optional.356"* nocapture readonly dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.WTF::String", align 8
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.blink::AuditsIssue", align 8
  %10 = tail call i8* @_Znwm(i64 56) #11
  %11 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits32AttributionReportingIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 8
  %13 = getelementptr inbounds i8, i8* %10, i64 36
  %14 = bitcast i8* %13 to i32*
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %10, i64 40
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds i8, i8* %10, i64 48
  %17 = bitcast i8* %16 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 25, i1 false) #10
  %18 = bitcast %"class.WTF::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  switch i32 %1, label %23 [
    i32 0, label %24
    i32 1, label %19
    i32 3, label %20
    i32 2, label %21
    i32 4, label %22
  ]

19:                                               ; preds = %6
  br label %24

20:                                               ; preds = %6
  br label %24

21:                                               ; preds = %6
  br label %24

22:                                               ; preds = %6
  br label %24

23:                                               ; preds = %6
  unreachable

24:                                               ; preds = %6, %19, %20, %21, %22
  %25 = phi i8* [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum31InvalidAttributionSourceEventIdE, i64 0, i64 0), %19 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum36AttributionSourceUntrustworthyOriginE, i64 0, i64 0), %20 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum22InvalidAttributionDataE, i64 0, i64 0), %21 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum30AttributionUntrustworthyOriginE, i64 0, i64 0), %22 ], [ getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits33AttributionReportingIssueTypeEnum24PermissionPolicyDisabledE, i64 0, i64 0), %6 ]
  %26 = tail call i64 @strlen(i8* nonnull %25) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %7, i8* %25, i64 %26) #10
  %27 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %28 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  %29 = icmp eq %"class.WTF::StringImpl"* %28, null
  br i1 %29, label %47, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %47

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = zext i32 %37 to i33
  %39 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %38, i33 1) #10
  %40 = extractvalue { i33, i1 } %39, 1
  %41 = extractvalue { i33, i1 } %39, 0
  %42 = icmp slt i33 %41, 0
  %43 = or i1 %40, %42
  br i1 %43, label %44, label %45, !prof !2

44:                                               ; preds = %35
  call void @llvm.trap() #10
  unreachable

45:                                               ; preds = %35
  %46 = trunc i33 %41 to i32
  store i32 %46, i32* %36, align 4
  br label %47

47:                                               ; preds = %45, %30, %24
  %48 = ptrtoint %"class.WTF::StringImpl"* %28 to i64
  %49 = bitcast i8* %12 to i64*
  %50 = bitcast i8* %12 to %"class.WTF::StringImpl"**
  %51 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %50, align 8
  store i64 %48, i64* %49, align 8
  %52 = icmp eq %"class.WTF::StringImpl"* %51, null
  br i1 %52, label %66, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %51, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  br i1 %57, label %60, label %62

60:                                               ; preds = %53
  %61 = add i32 %59, -1
  store i32 %61, i32* %58, align 4
  br label %62

62:                                               ; preds = %60, %53
  %63 = phi i32 [ %61, %60 ], [ %59, %53 ]
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %51) #10
  br label %66

66:                                               ; preds = %47, %62, %65
  %67 = ptrtoint i8* %10 to i64
  br i1 %29, label %81, label %68

68:                                               ; preds = %66
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = and i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  br i1 %72, label %75, label %77

75:                                               ; preds = %68
  %76 = add i32 %74, -1
  store i32 %76, i32* %73, align 4
  br label %77

77:                                               ; preds = %75, %68
  %78 = phi i32 [ %76, %75 ], [ %74, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %28) #10
  br label %81

81:                                               ; preds = %80, %77, %66
  %82 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %83 = load i8, i8* %82, align 8, !range !3
  %84 = icmp eq i8 %83, 0
  br i1 %84, label %154, label %85

85:                                               ; preds = %81
  %86 = call i8* @_Znwm(i64 16) #11
  %87 = bitcast i8* %86 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits13AffectedFrameE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %87, align 8
  %88 = getelementptr inbounds i8, i8* %86, i64 8
  %89 = bitcast i8* %88 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %89, align 8
  %90 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %2, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %91 = call %"class.WTF::StringImpl"* @_ZN5blink18IdentifiersFactory11IdFromTokenERKN4base16UnguessableTokenE(%"class.base::UnguessableToken"* dereferenceable(16) %90) #10
  %92 = icmp eq %"class.WTF::StringImpl"* %91, null
  br i1 %92, label %110, label %93

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %95 = load atomic i32, i32* %94 monotonic, align 4
  %96 = and i32 %95, 2
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %110

98:                                               ; preds = %93
  %99 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = zext i32 %100 to i33
  %102 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %101, i33 1) #10
  %103 = extractvalue { i33, i1 } %102, 1
  %104 = extractvalue { i33, i1 } %102, 0
  %105 = icmp slt i33 %104, 0
  %106 = or i1 %103, %105
  br i1 %106, label %107, label %108, !prof !2

107:                                              ; preds = %98
  call void @llvm.trap() #10
  unreachable

108:                                              ; preds = %98
  %109 = trunc i33 %104 to i32
  store i32 %109, i32* %99, align 4
  br label %110

110:                                              ; preds = %108, %93, %85
  %111 = ptrtoint %"class.WTF::StringImpl"* %91 to i64
  %112 = bitcast i8* %88 to i64*
  %113 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %89, align 8
  store i64 %111, i64* %112, align 8
  %114 = icmp eq %"class.WTF::StringImpl"* %113, null
  br i1 %114, label %128, label %115

115:                                              ; preds = %110
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %113, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  br i1 %119, label %122, label %124

122:                                              ; preds = %115
  %123 = add i32 %121, -1
  store i32 %123, i32* %120, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %123, %122 ], [ %121, %115 ]
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %128

127:                                              ; preds = %124
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %113) #10
  br label %128

128:                                              ; preds = %110, %124, %127
  %129 = ptrtoint i8* %86 to i64
  %130 = getelementptr inbounds i8, i8* %10, i64 16
  %131 = bitcast i8* %130 to %"class.blink::protocol::Audits::AffectedFrame"**
  %132 = load %"class.blink::protocol::Audits::AffectedFrame"*, %"class.blink::protocol::Audits::AffectedFrame"** %131, align 8
  %133 = bitcast i8* %130 to i64*
  store i64 %129, i64* %133, align 8
  %134 = icmp eq %"class.blink::protocol::Audits::AffectedFrame"* %132, null
  br i1 %134, label %140, label %135

135:                                              ; preds = %128
  %136 = bitcast %"class.blink::protocol::Audits::AffectedFrame"* %132 to void (%"class.blink::protocol::Audits::AffectedFrame"*)***
  %137 = load void (%"class.blink::protocol::Audits::AffectedFrame"*)**, void (%"class.blink::protocol::Audits::AffectedFrame"*)*** %136, align 8
  %138 = getelementptr inbounds void (%"class.blink::protocol::Audits::AffectedFrame"*)*, void (%"class.blink::protocol::Audits::AffectedFrame"*)** %137, i64 2
  %139 = load void (%"class.blink::protocol::Audits::AffectedFrame"*)*, void (%"class.blink::protocol::Audits::AffectedFrame"*)** %138, align 8
  call void %139(%"class.blink::protocol::Audits::AffectedFrame"* nonnull %132) #10
  br label %140

140:                                              ; preds = %128, %135
  br i1 %92, label %154, label %141

141:                                              ; preds = %140
  %142 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %143 = load atomic i32, i32* %142 monotonic, align 4
  %144 = and i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %91, i64 0, i32 0
  %147 = load i32, i32* %146, align 4
  br i1 %145, label %148, label %150

148:                                              ; preds = %141
  %149 = add i32 %147, -1
  store i32 %149, i32* %146, align 4
  br label %150

150:                                              ; preds = %148, %141
  %151 = phi i32 [ %149, %148 ], [ %147, %141 ]
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %150
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %91) #10
  br label %154

154:                                              ; preds = %81, %140, %150, %153
  %155 = icmp eq %"class.blink::Element"* %3, null
  br i1 %155, label %160, label %156

156:                                              ; preds = %154
  %157 = getelementptr inbounds %"class.blink::Element", %"class.blink::Element"* %3, i64 0, i32 0, i32 0
  %158 = call i32 @_ZN5blink10DOMNodeIds9IdForNodeEPNS_4NodeE(%"class.blink::Node"* %157) #10
  store i32 %158, i32* %14, align 4
  %159 = getelementptr inbounds i8, i8* %10, i64 32
  store i8 1, i8* %159, align 4
  br label %160

160:                                              ; preds = %154, %156
  %161 = getelementptr inbounds %"class.absl::optional.356", %"class.absl::optional.356"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %162 = load i8, i8* %161, align 8, !range !3
  %163 = icmp eq i8 %162, 0
  br i1 %163, label %224, label %164

164:                                              ; preds = %160
  %165 = call i8* @_Znwm(i64 32) #11
  %166 = bitcast i8* %165 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits15AffectedRequestE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %166, align 8
  %167 = getelementptr inbounds i8, i8* %165, i64 8
  %168 = bitcast i8* %167 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %168, align 8
  %169 = getelementptr inbounds i8, i8* %165, i64 16
  store i8 0, i8* %169, align 8
  %170 = getelementptr inbounds i8, i8* %165, i64 24
  %171 = bitcast i8* %170 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %171, align 8
  %172 = getelementptr inbounds %"class.absl::optional.356", %"class.absl::optional.356"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %173 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %172, align 8
  %174 = icmp eq %"class.WTF::StringImpl"* %173, null
  br i1 %174, label %190, label %175

175:                                              ; preds = %164
  %176 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %173, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %177 = load atomic i32, i32* %176 monotonic, align 4
  %178 = and i32 %177, 2
  %179 = icmp eq i32 %178, 0
  br i1 %179, label %180, label %190

180:                                              ; preds = %175
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %173, i64 0, i32 0
  %182 = load i32, i32* %181, align 4
  %183 = zext i32 %182 to i33
  %184 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %183, i33 1) #10
  %185 = extractvalue { i33, i1 } %184, 1
  %186 = extractvalue { i33, i1 } %184, 0
  %187 = icmp slt i33 %186, 0
  %188 = or i1 %185, %187
  br i1 %188, label %189, label %193, !prof !2

189:                                              ; preds = %180
  call void @llvm.trap() #10
  unreachable

190:                                              ; preds = %175, %164
  %191 = ptrtoint %"class.WTF::StringImpl"* %173 to i64
  %192 = bitcast i8* %167 to i64*
  store i64 %191, i64* %192, align 8
  br label %212

193:                                              ; preds = %180
  %194 = trunc i33 %186 to i32
  store i32 %194, i32* %181, align 4
  %195 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %168, align 8
  %196 = ptrtoint %"class.WTF::StringImpl"* %173 to i64
  %197 = bitcast i8* %167 to i64*
  store i64 %196, i64* %197, align 8
  %198 = icmp eq %"class.WTF::StringImpl"* %195, null
  br i1 %198, label %212, label %199

199:                                              ; preds = %193
  %200 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %201 = load atomic i32, i32* %200 monotonic, align 4
  %202 = and i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %195, i64 0, i32 0
  %205 = load i32, i32* %204, align 4
  br i1 %203, label %206, label %208

206:                                              ; preds = %199
  %207 = add i32 %205, -1
  store i32 %207, i32* %204, align 4
  br label %208

208:                                              ; preds = %206, %199
  %209 = phi i32 [ %207, %206 ], [ %205, %199 ]
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %212

211:                                              ; preds = %208
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %195) #10
  br label %212

212:                                              ; preds = %190, %193, %208, %211
  %213 = ptrtoint i8* %165 to i64
  %214 = getelementptr inbounds i8, i8* %10, i64 24
  %215 = bitcast i8* %214 to %"class.blink::protocol::Audits::AffectedRequest"**
  %216 = load %"class.blink::protocol::Audits::AffectedRequest"*, %"class.blink::protocol::Audits::AffectedRequest"** %215, align 8
  %217 = bitcast i8* %214 to i64*
  store i64 %213, i64* %217, align 8
  %218 = icmp eq %"class.blink::protocol::Audits::AffectedRequest"* %216, null
  br i1 %218, label %224, label %219

219:                                              ; preds = %212
  %220 = bitcast %"class.blink::protocol::Audits::AffectedRequest"* %216 to void (%"class.blink::protocol::Audits::AffectedRequest"*)***
  %221 = load void (%"class.blink::protocol::Audits::AffectedRequest"*)**, void (%"class.blink::protocol::Audits::AffectedRequest"*)*** %220, align 8
  %222 = getelementptr inbounds void (%"class.blink::protocol::Audits::AffectedRequest"*)*, void (%"class.blink::protocol::Audits::AffectedRequest"*)** %221, i64 2
  %223 = load void (%"class.blink::protocol::Audits::AffectedRequest"*)*, void (%"class.blink::protocol::Audits::AffectedRequest"*)** %222, align 8
  call void %223(%"class.blink::protocol::Audits::AffectedRequest"* nonnull %216) #10
  br label %224

224:                                              ; preds = %160, %212, %219
  %225 = getelementptr inbounds %"class.absl::optional.356", %"class.absl::optional.356"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %226 = load i8, i8* %225, align 8, !range !3
  %227 = icmp eq i8 %226, 0
  br i1 %227, label %251, label %228

228:                                              ; preds = %224
  %229 = getelementptr inbounds %"class.absl::optional.356", %"class.absl::optional.356"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %229, align 8
  %231 = icmp eq %"class.WTF::StringImpl"* %230, null
  br i1 %231, label %249, label %232

232:                                              ; preds = %228
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %234 = load atomic i32, i32* %233 monotonic, align 4
  %235 = and i32 %234, 2
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %237, label %249

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 0
  %239 = load i32, i32* %238, align 4
  %240 = zext i32 %239 to i33
  %241 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %240, i33 1) #10
  %242 = extractvalue { i33, i1 } %241, 1
  %243 = extractvalue { i33, i1 } %241, 0
  %244 = icmp slt i33 %243, 0
  %245 = or i1 %242, %244
  br i1 %245, label %246, label %247, !prof !2

246:                                              ; preds = %237
  call void @llvm.trap() #10
  unreachable

247:                                              ; preds = %237
  %248 = trunc i33 %243 to i32
  store i32 %248, i32* %238, align 4
  br label %249

249:                                              ; preds = %228, %232, %247
  %250 = bitcast i8* %15 to %"class.crdtp::detail::ValueMaybe"*
  call void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"* %250, %"class.WTF::StringImpl"* %230) #10
  br label %251

251:                                              ; preds = %249, %224
  %252 = call i8* @_Znwm(i64 104) #11
  %253 = bitcast i8* %252 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits21InspectorIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %253, align 8
  %254 = getelementptr inbounds i8, i8* %252, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %254, i8 0, i64 96, i1 false) #10
  %255 = getelementptr inbounds i8, i8* %252, i64 80
  %256 = bitcast i8* %255 to i64*
  store i64 %67, i64* %256, align 8
  %257 = ptrtoint i8* %252 to i64
  %258 = call i8* @_Znwm(i64 24) #11
  %259 = bitcast i8* %258 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits14InspectorIssueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %259, align 8
  %260 = getelementptr inbounds i8, i8* %258, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %260, i8 0, i64 16, i1 false) #10
  %261 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %261) #10
  %262 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum25AttributionReportingIssueE, i64 0, i64 0)) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %8, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum25AttributionReportingIssueE, i64 0, i64 0), i64 %262) #10
  %263 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %264 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %263, align 8
  %265 = icmp eq %"class.WTF::StringImpl"* %264, null
  br i1 %265, label %281, label %266

266:                                              ; preds = %251
  %267 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %264, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %268 = load atomic i32, i32* %267 monotonic, align 4
  %269 = and i32 %268, 2
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %281

271:                                              ; preds = %266
  %272 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %264, i64 0, i32 0
  %273 = load i32, i32* %272, align 4
  %274 = zext i32 %273 to i33
  %275 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %274, i33 1) #10
  %276 = extractvalue { i33, i1 } %275, 1
  %277 = extractvalue { i33, i1 } %275, 0
  %278 = icmp slt i33 %277, 0
  %279 = or i1 %276, %278
  br i1 %279, label %280, label %284, !prof !2

280:                                              ; preds = %271
  call void @llvm.trap() #10
  unreachable

281:                                              ; preds = %266, %251
  %282 = ptrtoint %"class.WTF::StringImpl"* %264 to i64
  %283 = bitcast i8* %260 to i64*
  store i64 %282, i64* %283, align 8
  br label %304

284:                                              ; preds = %271
  %285 = trunc i33 %277 to i32
  store i32 %285, i32* %272, align 4
  %286 = bitcast i8* %260 to %"class.WTF::StringImpl"**
  %287 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %286, align 8
  %288 = ptrtoint %"class.WTF::StringImpl"* %264 to i64
  %289 = bitcast i8* %260 to i64*
  store i64 %288, i64* %289, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %287, null
  br i1 %290, label %304, label %291

291:                                              ; preds = %284
  %292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %293 = load atomic i32, i32* %292 monotonic, align 4
  %294 = and i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %287, i64 0, i32 0
  %297 = load i32, i32* %296, align 4
  br i1 %295, label %298, label %300

298:                                              ; preds = %291
  %299 = add i32 %297, -1
  store i32 %299, i32* %296, align 4
  br label %300

300:                                              ; preds = %298, %291
  %301 = phi i32 [ %299, %298 ], [ %297, %291 ]
  %302 = icmp eq i32 %301, 0
  br i1 %302, label %303, label %304

303:                                              ; preds = %300
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %287) #10
  br label %304

304:                                              ; preds = %281, %284, %300, %303
  %305 = getelementptr inbounds i8, i8* %258, i64 16
  %306 = bitcast i8* %305 to %"class.blink::protocol::Audits::InspectorIssueDetails"**
  %307 = load %"class.blink::protocol::Audits::InspectorIssueDetails"*, %"class.blink::protocol::Audits::InspectorIssueDetails"** %306, align 8
  %308 = bitcast i8* %305 to i64*
  store i64 %257, i64* %308, align 8
  %309 = icmp eq %"class.blink::protocol::Audits::InspectorIssueDetails"* %307, null
  br i1 %309, label %315, label %310

310:                                              ; preds = %304
  %311 = bitcast %"class.blink::protocol::Audits::InspectorIssueDetails"* %307 to void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)***
  %312 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)**, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*** %311, align 8
  %313 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %312, i64 2
  %314 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %313, align 8
  call void %314(%"class.blink::protocol::Audits::InspectorIssueDetails"* nonnull %307) #10
  br label %315

315:                                              ; preds = %304, %310
  %316 = ptrtoint i8* %258 to i64
  %317 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %263, align 8
  %318 = icmp eq %"class.WTF::StringImpl"* %317, null
  br i1 %318, label %332, label %319

319:                                              ; preds = %315
  %320 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %317, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %321 = load atomic i32, i32* %320 monotonic, align 4
  %322 = and i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %317, i64 0, i32 0
  %325 = load i32, i32* %324, align 4
  br i1 %323, label %326, label %328

326:                                              ; preds = %319
  %327 = add i32 %325, -1
  store i32 %327, i32* %324, align 4
  br label %328

328:                                              ; preds = %326, %319
  %329 = phi i32 [ %327, %326 ], [ %325, %319 ]
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %332

331:                                              ; preds = %328
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %317) #10
  br label %332

332:                                              ; preds = %331, %328, %315
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %261) #10
  %333 = bitcast %"class.blink::AuditsIssue"* %9 to i64*
  store i64 %316, i64* %333, align 8
  %334 = bitcast %"class.blink::ExecutionContext"* %0 to void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)***
  %335 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)**, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*** %334, align 8
  %336 = getelementptr inbounds void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %335, i64 31
  %337 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %336, align 8
  call void %337(%"class.blink::ExecutionContext"* %0, %"class.blink::AuditsIssue"* nonnull %9) #10
  %338 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %9, i64 0, i32 0, i32 0, i32 0, i32 0
  %339 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %338, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %338, align 8
  %340 = icmp eq %"class.blink::protocol::Audits::InspectorIssue"* %339, null
  br i1 %340, label %346, label %341

341:                                              ; preds = %332
  %342 = bitcast %"class.blink::protocol::Audits::InspectorIssue"* %339 to void (%"class.blink::protocol::Audits::InspectorIssue"*)***
  %343 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)**, void (%"class.blink::protocol::Audits::InspectorIssue"*)*** %342, align 8
  %344 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %343, i64 2
  %345 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %344, align 8
  call void %345(%"class.blink::protocol::Audits::InspectorIssue"* nonnull %339) #10
  br label %346

346:                                              ; preds = %341, %332
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink18IdentifiersFactory11IdFromTokenERKN4base16UnguessableTokenE(%"class.base::UnguessableToken"* dereferenceable(16)) local_unnamed_addr #3

declare i32 @_ZN5blink10DOMNodeIds9IdForNodeEPNS_4NodeE(%"class.blink::Node"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11AuditsIssue30ReportNavigatorUserAgentAccessEPNS_16ExecutionContextEN3WTF6StringE(%"class.blink::ExecutionContext"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::String", align 8
  %4 = alloca %"class.WTF::String", align 8
  %5 = alloca %"class.blink::AuditsIssue", align 8
  %6 = tail call i8* @_Znwm(i64 24) #11
  %7 = bitcast i8* %6 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits30NavigatorUserAgentIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %6, i64 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 16, i1 false) #10
  %9 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #10
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #10
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %2, %10, %25
  %28 = ptrtoint %"class.WTF::StringImpl"* %1 to i64
  %29 = bitcast i8* %8 to i64*
  store i64 %28, i64* %29, align 8
  %30 = ptrtoint i8* %6 to i64
  %31 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #10
  %32 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %33 = tail call %"class.WTF::StringImpl"* @_ZN5blink19GetCurrentScriptUrlEi(i32 5) #10
  store %"class.WTF::StringImpl"* %33, %"class.WTF::StringImpl"** %32, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %33, null
  br i1 %34, label %35, label %39

35:                                               ; preds = %27
  %36 = tail call %"class.WTF::StringImpl"* @_ZN5blink19GetCurrentScriptUrlEi(i32 200) #10
  %37 = ptrtoint %"class.WTF::StringImpl"* %36 to i64
  %38 = bitcast %"class.WTF::String"* %3 to i64*
  store i64 %37, i64* %38, align 8
  br label %61

39:                                               ; preds = %27
  %40 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %59

43:                                               ; preds = %39
  %44 = tail call %"class.WTF::StringImpl"* @_ZN5blink19GetCurrentScriptUrlEi(i32 200) #10
  %45 = ptrtoint %"class.WTF::StringImpl"* %44 to i64
  %46 = bitcast %"class.WTF::String"* %3 to i64*
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %33, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %55

53:                                               ; preds = %43
  %54 = add i32 %52, -1
  store i32 %54, i32* %51, align 4
  br label %55

55:                                               ; preds = %53, %43
  %56 = phi i32 [ %54, %53 ], [ %52, %43 ]
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %33) #10
  br label %59

59:                                               ; preds = %39, %58, %55
  %60 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  br label %61

61:                                               ; preds = %35, %59
  %62 = phi %"class.WTF::StringImpl"* [ %60, %59 ], [ %36, %35 ]
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %72, label %64

64:                                               ; preds = %61
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %72, label %68

68:                                               ; preds = %64
  %69 = tail call noalias i8* @malloc(i64 32) #10
  %70 = bitcast i8* %69 to %"class.blink::SourceLocation"*
  call void @_ZN5blink14SourceLocationC1ERKN3WTF6StringEjjNSt3__110unique_ptrIN12v8_inspector12V8StackTraceENS5_14default_deleteIS8_EEEEi(%"class.blink::SourceLocation"* %70, %"class.WTF::String"* nonnull dereferenceable(8) %3, i32 1, i32 0, %"class.v8_inspector::V8StackTrace"* null, i32 0) #10
  %71 = ptrtoint i8* %69 to i64
  br label %75

72:                                               ; preds = %61, %64
  %73 = tail call %"class.blink::SourceLocation"* @_ZN5blink14SourceLocation7CaptureEPNS_16ExecutionContextE(%"class.blink::ExecutionContext"* %0) #10
  %74 = ptrtoint %"class.blink::SourceLocation"* %73 to i64
  br label %75

75:                                               ; preds = %72, %68
  %76 = phi i64 [ %74, %72 ], [ %71, %68 ]
  %77 = inttoptr i64 %76 to %"class.blink::SourceLocation"*
  %78 = icmp eq i64 %76, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %75
  %80 = call %"class.blink::protocol::Audits::SourceCodeLocation"* @_ZN5blink22CreateProtocolLocationERKNS_14SourceLocationE(%"class.blink::SourceLocation"* nonnull dereferenceable(32) %77)
  %81 = ptrtoint %"class.blink::protocol::Audits::SourceCodeLocation"* %80 to i64
  %82 = getelementptr inbounds i8, i8* %6, i64 16
  %83 = bitcast i8* %82 to %"class.blink::protocol::Audits::SourceCodeLocation"**
  %84 = load %"class.blink::protocol::Audits::SourceCodeLocation"*, %"class.blink::protocol::Audits::SourceCodeLocation"** %83, align 8
  %85 = bitcast i8* %82 to i64*
  store i64 %81, i64* %85, align 8
  %86 = icmp eq %"class.blink::protocol::Audits::SourceCodeLocation"* %84, null
  br i1 %86, label %92, label %87

87:                                               ; preds = %79
  %88 = bitcast %"class.blink::protocol::Audits::SourceCodeLocation"* %84 to void (%"class.blink::protocol::Audits::SourceCodeLocation"*)***
  %89 = load void (%"class.blink::protocol::Audits::SourceCodeLocation"*)**, void (%"class.blink::protocol::Audits::SourceCodeLocation"*)*** %88, align 8
  %90 = getelementptr inbounds void (%"class.blink::protocol::Audits::SourceCodeLocation"*)*, void (%"class.blink::protocol::Audits::SourceCodeLocation"*)** %89, i64 2
  %91 = load void (%"class.blink::protocol::Audits::SourceCodeLocation"*)*, void (%"class.blink::protocol::Audits::SourceCodeLocation"*)** %90, align 8
  call void %91(%"class.blink::protocol::Audits::SourceCodeLocation"* nonnull %84) #10
  br label %92

92:                                               ; preds = %79, %87, %75
  %93 = call i8* @_Znwm(i64 104) #11
  %94 = bitcast i8* %93 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits21InspectorIssueDetailsE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %94, align 8
  %95 = getelementptr inbounds i8, i8* %93, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 88, i1 false) #10
  %96 = getelementptr inbounds i8, i8* %93, i64 96
  %97 = bitcast i8* %96 to i64*
  store i64 %30, i64* %97, align 8
  %98 = ptrtoint i8* %93 to i64
  %99 = call i8* @_Znwm(i64 24) #11
  %100 = bitcast i8* %99 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN5blink8protocol6Audits14InspectorIssueE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %100, align 8
  %101 = getelementptr inbounds i8, i8* %99, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %101, i8 0, i64 16, i1 false) #10
  %102 = bitcast %"class.WTF::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #10
  %103 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum23NavigatorUserAgentIssueE, i64 0, i64 0)) #12
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %4, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN5blink8protocol6Audits22InspectorIssueCodeEnum23NavigatorUserAgentIssueE, i64 0, i64 0), i64 %103) #10
  %104 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %105 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %106 = icmp eq %"class.WTF::StringImpl"* %105, null
  br i1 %106, label %122, label %107

107:                                              ; preds = %92
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = and i32 %109, 2
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %122

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %105, i64 0, i32 0
  %114 = load i32, i32* %113, align 4
  %115 = zext i32 %114 to i33
  %116 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #10
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %125, !prof !2

121:                                              ; preds = %112
  call void @llvm.trap() #10
  unreachable

122:                                              ; preds = %107, %92
  %123 = ptrtoint %"class.WTF::StringImpl"* %105 to i64
  %124 = bitcast i8* %101 to i64*
  store i64 %123, i64* %124, align 8
  br label %145

125:                                              ; preds = %112
  %126 = trunc i33 %118 to i32
  store i32 %126, i32* %113, align 4
  %127 = bitcast i8* %101 to %"class.WTF::StringImpl"**
  %128 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %127, align 8
  %129 = ptrtoint %"class.WTF::StringImpl"* %105 to i64
  %130 = bitcast i8* %101 to i64*
  store i64 %129, i64* %130, align 8
  %131 = icmp eq %"class.WTF::StringImpl"* %128, null
  br i1 %131, label %145, label %132

132:                                              ; preds = %125
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %128, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %134 = load atomic i32, i32* %133 monotonic, align 4
  %135 = and i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %128, i64 0, i32 0
  %138 = load i32, i32* %137, align 4
  br i1 %136, label %139, label %141

139:                                              ; preds = %132
  %140 = add i32 %138, -1
  store i32 %140, i32* %137, align 4
  br label %141

141:                                              ; preds = %139, %132
  %142 = phi i32 [ %140, %139 ], [ %138, %132 ]
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %141
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %128) #10
  br label %145

145:                                              ; preds = %122, %125, %141, %144
  %146 = getelementptr inbounds i8, i8* %99, i64 16
  %147 = bitcast i8* %146 to %"class.blink::protocol::Audits::InspectorIssueDetails"**
  %148 = load %"class.blink::protocol::Audits::InspectorIssueDetails"*, %"class.blink::protocol::Audits::InspectorIssueDetails"** %147, align 8
  %149 = bitcast i8* %146 to i64*
  store i64 %98, i64* %149, align 8
  %150 = icmp eq %"class.blink::protocol::Audits::InspectorIssueDetails"* %148, null
  br i1 %150, label %156, label %151

151:                                              ; preds = %145
  %152 = bitcast %"class.blink::protocol::Audits::InspectorIssueDetails"* %148 to void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)***
  %153 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)**, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*** %152, align 8
  %154 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %153, i64 2
  %155 = load void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)*, void (%"class.blink::protocol::Audits::InspectorIssueDetails"*)** %154, align 8
  call void %155(%"class.blink::protocol::Audits::InspectorIssueDetails"* nonnull %148) #10
  br label %156

156:                                              ; preds = %145, %151
  %157 = ptrtoint i8* %99 to i64
  %158 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %104, align 8
  %159 = icmp eq %"class.WTF::StringImpl"* %158, null
  br i1 %159, label %173, label %160

160:                                              ; preds = %156
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = and i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %158, i64 0, i32 0
  %166 = load i32, i32* %165, align 4
  br i1 %164, label %167, label %169

167:                                              ; preds = %160
  %168 = add i32 %166, -1
  store i32 %168, i32* %165, align 4
  br label %169

169:                                              ; preds = %167, %160
  %170 = phi i32 [ %168, %167 ], [ %166, %160 ]
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %173

172:                                              ; preds = %169
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %158) #10
  br label %173

173:                                              ; preds = %172, %169, %156
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #10
  %174 = bitcast %"class.blink::AuditsIssue"* %5 to i64*
  store i64 %157, i64* %174, align 8
  %175 = bitcast %"class.blink::ExecutionContext"* %0 to void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)***
  %176 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)**, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*** %175, align 8
  %177 = getelementptr inbounds void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %176, i64 31
  %178 = load void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)*, void (%"class.blink::ExecutionContext"*, %"class.blink::AuditsIssue"*)** %177, align 8
  call void %178(%"class.blink::ExecutionContext"* %0, %"class.blink::AuditsIssue"* nonnull %5) #10
  %179 = getelementptr inbounds %"class.blink::AuditsIssue", %"class.blink::AuditsIssue"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %180 = load %"class.blink::protocol::Audits::InspectorIssue"*, %"class.blink::protocol::Audits::InspectorIssue"** %179, align 8
  store %"class.blink::protocol::Audits::InspectorIssue"* null, %"class.blink::protocol::Audits::InspectorIssue"** %179, align 8
  %181 = icmp eq %"class.blink::protocol::Audits::InspectorIssue"* %180, null
  br i1 %181, label %187, label %182

182:                                              ; preds = %173
  %183 = bitcast %"class.blink::protocol::Audits::InspectorIssue"* %180 to void (%"class.blink::protocol::Audits::InspectorIssue"*)***
  %184 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)**, void (%"class.blink::protocol::Audits::InspectorIssue"*)*** %183, align 8
  %185 = getelementptr inbounds void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %184, i64 2
  %186 = load void (%"class.blink::protocol::Audits::InspectorIssue"*)*, void (%"class.blink::protocol::Audits::InspectorIssue"*)** %185, align 8
  call void %186(%"class.blink::protocol::Audits::InspectorIssue"* nonnull %180) #10
  br label %187

187:                                              ; preds = %173, %182
  br i1 %78, label %190, label %188

188:                                              ; preds = %187
  call void @_ZN5blink14SourceLocationD1Ev(%"class.blink::SourceLocation"* nonnull %77) #10
  %189 = inttoptr i64 %76 to i8*
  call void @free(i8* %189) #10
  br label %190

190:                                              ; preds = %187, %188
  %191 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %32, align 8
  %192 = icmp eq %"class.WTF::StringImpl"* %191, null
  br i1 %192, label %206, label %193

193:                                              ; preds = %190
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %195 = load atomic i32, i32* %194 monotonic, align 4
  %196 = and i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %191, i64 0, i32 0
  %199 = load i32, i32* %198, align 4
  br i1 %197, label %200, label %202

200:                                              ; preds = %193
  %201 = add i32 %199, -1
  store i32 %201, i32* %198, align 4
  br label %202

202:                                              ; preds = %200, %193
  %203 = phi i32 [ %201, %200 ], [ %199, %193 ]
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %191) #10
  br label %206

206:                                              ; preds = %205, %202, %190
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #10
  br i1 %9, label %220, label %207

207:                                              ; preds = %206
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %209 = load atomic i32, i32* %208 monotonic, align 4
  %210 = and i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %213 = load i32, i32* %212, align 4
  br i1 %211, label %214, label %216

214:                                              ; preds = %207
  %215 = add i32 %213, -1
  store i32 %215, i32* %212, align 4
  br label %216

216:                                              ; preds = %214, %207
  %217 = phi i32 [ %215, %214 ], [ %213, %207 ]
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %219, label %220

219:                                              ; preds = %216
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %220

220:                                              ; preds = %206, %216, %219
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN5blink19GetCurrentScriptUrlEi(i32) local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #3

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5crdtp6detail10ValueMaybeIN3WTF6StringEEaSES3_(%"class.crdtp::detail::ValueMaybe"*, %"class.WTF::StringImpl"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe"* %0, i64 0, i32 1
  %4 = icmp eq %"class.WTF::StringImpl"* %1, null
  br i1 %4, label %22, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = and i32 %7, 2
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %22

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = zext i32 %12 to i33
  %14 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %13, i33 1) #10
  %15 = extractvalue { i33, i1 } %14, 1
  %16 = extractvalue { i33, i1 } %14, 0
  %17 = icmp slt i33 %16, 0
  %18 = or i1 %15, %17
  br i1 %18, label %19, label %20, !prof !2

19:                                               ; preds = %10
  tail call void @llvm.trap() #10
  unreachable

20:                                               ; preds = %10
  %21 = trunc i33 %16 to i32
  store i32 %21, i32* %11, align 4
  br label %22

22:                                               ; preds = %20, %5, %2
  %23 = ptrtoint %"class.WTF::StringImpl"* %1 to i64
  %24 = bitcast %"class.WTF::String"* %3 to i64*
  %25 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 %23, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %22
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #10
  br label %41

41:                                               ; preds = %22, %37, %40
  %42 = getelementptr inbounds %"class.crdtp::detail::ValueMaybe", %"class.crdtp::detail::ValueMaybe"* %0, i64 0, i32 0
  store i8 1, i8* %42, align 8
  br i1 %4, label %56, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load atomic i32, i32* %44 monotonic, align 4
  %46 = and i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %1, i64 0, i32 0
  %49 = load i32, i32* %48, align 4
  br i1 %47, label %50, label %52

50:                                               ; preds = %43
  %51 = add i32 %49, -1
  store i32 %51, i32* %48, align 4
  br label %52

52:                                               ; preds = %50, %43
  %53 = phi i32 [ %51, %50 ], [ %49, %43 ]
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %1) #10
  br label %56

56:                                               ; preds = %41, %52, %55
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN5blink14SourceLocationD1Ev(%"class.blink::SourceLocation"*) unnamed_addr #8

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #8

declare void @_ZN5blink14SourceLocationC1ERKN3WTF6StringEjjNSt3__110unique_ptrIN12v8_inspector12V8StackTraceENS5_14default_deleteIS8_EEEEi(%"class.blink::SourceLocation"*, %"class.WTF::String"* dereferenceable(8), i32, i32, %"class.v8_inspector::V8StackTrace"*, i32) unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
