; ModuleID = '../../third_party/blink/renderer/core/editing/state_machines/backward_code_point_state_machine.cc'
source_filename = "../../third_party/blink/renderer/core/editing/state_machines/backward_code_point_state_machine.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::BackwardCodePointStateMachine" = type { i32, i32 }

@_ZN5blink29BackwardCodePointStateMachineC1Ev = hidden unnamed_addr alias void (%"class.blink::BackwardCodePointStateMachine"*), void (%"class.blink::BackwardCodePointStateMachine"*)* @_ZN5blink29BackwardCodePointStateMachineC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink29BackwardCodePointStateMachineC2Ev(%"class.blink::BackwardCodePointStateMachine"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN5blink29BackwardCodePointStateMachine21FeedPrecedingCodeUnitEDs(%"class.blink::BackwardCodePointStateMachine"* nocapture, i16 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  switch i32 %4, label %25 [
    i32 0, label %5
    i32 1, label %15
    i32 2, label %23
  ]

5:                                                ; preds = %2
  %6 = and i16 %1, -1024
  %7 = icmp eq i16 %6, -10240
  %8 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 0
  br i1 %7, label %9, label %10

9:                                                ; preds = %5
  store i32 0, i32* %8, align 4
  store i32 2, i32* %3, align 4
  br label %25

10:                                               ; preds = %5
  %11 = load i32, i32* %8, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %8, align 4
  %13 = icmp eq i16 %6, -9216
  br i1 %13, label %14, label %25

14:                                               ; preds = %10
  store i32 1, i32* %3, align 4
  br label %25

15:                                               ; preds = %2
  %16 = and i16 %1, -1024
  %17 = icmp eq i16 %16, -10240
  %18 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 0
  br i1 %17, label %19, label %22

19:                                               ; preds = %15
  %20 = load i32, i32* %18, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %18, align 4
  store i32 0, i32* %3, align 4
  br label %25

22:                                               ; preds = %15
  store i32 0, i32* %18, align 4
  store i32 2, i32* %3, align 4
  br label %25

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 0
  store i32 0, i32* %24, align 4
  br label %25

25:                                               ; preds = %2, %10, %23, %22, %19, %14, %9
  %26 = phi i32 [ 0, %23 ], [ 3, %19 ], [ 0, %22 ], [ 0, %9 ], [ 1, %14 ], [ 3, %10 ], [ 0, %2 ]
  ret i32 %26
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZN5blink29BackwardCodePointStateMachine21FeedFollowingCodeUnitEDs(%"class.blink::BackwardCodePointStateMachine"* nocapture readnone, i16 zeroext) local_unnamed_addr #2 align 2 {
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5blink29BackwardCodePointStateMachine19AtCodePointBoundaryEv(%"class.blink::BackwardCodePointStateMachine"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5blink29BackwardCodePointStateMachine17GetBoundaryOffsetEv(%"class.blink::BackwardCodePointStateMachine"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = sub nsw i32 0, %3
  ret i32 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink29BackwardCodePointStateMachine5ResetEv(%"class.blink::BackwardCodePointStateMachine"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 0
  store i32 0, i32* %2, align 4
  %3 = getelementptr inbounds %"class.blink::BackwardCodePointStateMachine", %"class.blink::BackwardCodePointStateMachine"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 4
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
