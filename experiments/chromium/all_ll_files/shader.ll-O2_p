; ModuleID = '../../components/viz/service/display/shader.cc'
source_filename = "../../components/viz/service/display/shader.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.viz::VertexShader" = type { i8, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32 }
%"class.viz::FragmentShader" = type { i32 (...)**, i32, i8, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32, i32, i32, i32, i32, i8, i32, i32, i8, i32, i8, i32, i8, i32, i32, i32, i32, i8, i32, i32, i32, %"class.gfx::ColorTransform"*, i8, i32, i8, i32, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i32, i32 }
%"class.gfx::ColorTransform" = type { i32 (...)** }
%"class.gpu::gles2::GLES2Interface" = type { %"class.gpu::InterfaceBase" }
%"class.gpu::InterfaceBase" = type { i32 (...)** }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8**, i8**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8** }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { i32* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

@.str = private unnamed_addr constant [19 x i8] c"vertexTexTransform\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"texMatrix\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"yaTexScale\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"yaTexOffset\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"uvTexScale\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"uvTexOffset\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"matrix\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"opacity\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"viewport\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"edge\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"quad\00", align 1
@.str.11 = private unnamed_addr constant [33 x i8] c"#define TexCoordPrecision highp\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"void main() {\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"#define NUM_QUADS %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"attribute float a_index;\0A\00", align 1
@.str.15 = private unnamed_addr constant [42 x i8] c"  // Compute indices for uniform arrays.\0A\00", align 1
@.str.16 = private unnamed_addr constant [36 x i8] c"  int vertex_index = int(a_index);\0A\00", align 1
@.str.17 = private unnamed_addr constant [41 x i8] c"  int quad_index = int(a_index * 0.25);\0A\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"  \0A\00", align 1
@.str.19 = private unnamed_addr constant [46 x i8] c"attribute TexCoordPrecision vec4 a_position;\0A\00", align 1
@.str.20 = private unnamed_addr constant [28 x i8] c"  // Compute the position.\0A\00", align 1
@.str.21 = private unnamed_addr constant [26 x i8] c"  vec4 pos = a_position;\0A\00", align 1
@.str.22 = private unnamed_addr constant [41 x i8] c"uniform TexCoordPrecision vec2 quad[4];\0A\00", align 1
@.str.23 = private unnamed_addr constant [68 x i8] c"  vec4 pos = vec4(quad[vertex_index], a_position.z, a_position.w);\0A\00", align 1
@.str.24 = private unnamed_addr constant [33 x i8] c"uniform mat4 matrix[NUM_QUADS];\0A\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"  gl_Position = matrix[quad_index] * pos;\0A\00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c"uniform mat4 matrix;\0A\00", align 1
@.str.27 = private unnamed_addr constant [31 x i8] c"  gl_Position = matrix * pos;\0A\00", align 1
@.str.28 = private unnamed_addr constant [41 x i8] c"uniform TexCoordPrecision vec3 edge[8];\0A\00", align 1
@.str.29 = private unnamed_addr constant [24 x i8] c"uniform vec4 viewport;\0A\00", align 1
@.str.30 = private unnamed_addr constant [68 x i8] c"varying TexCoordPrecision vec4 edge_dist[2];  // 8 edge distances.\0A\00", align 1
@.str.31 = private unnamed_addr constant [41 x i8] c"  // Compute anti-aliasing properties.\0A\0A\00", align 1
@.str.32 = private unnamed_addr constant [64 x i8] c"  vec2 ndc_pos = 0.5 * (1.0 + gl_Position.xy / gl_Position.w);\0A\00", align 1
@.str.33 = private unnamed_addr constant [69 x i8] c"  vec3 screen_pos = vec3(viewport.xy + viewport.zw * ndc_pos, 1.0);\0A\00", align 1
@.str.34 = private unnamed_addr constant [49 x i8] c"  edge_dist[0] = vec4(dot(edge[0], screen_pos),\0A\00", align 1
@.str.35 = private unnamed_addr constant [49 x i8] c"                      dot(edge[1], screen_pos),\0A\00", align 1
@.str.36 = private unnamed_addr constant [49 x i8] c"                      dot(edge[2], screen_pos),\0A\00", align 1
@.str.37 = private unnamed_addr constant [66 x i8] c"                      dot(edge[3], screen_pos)) * gl_Position.w;\0A\00", align 1
@.str.38 = private unnamed_addr constant [49 x i8] c"  edge_dist[1] = vec4(dot(edge[4], screen_pos),\0A\00", align 1
@.str.39 = private unnamed_addr constant [49 x i8] c"                      dot(edge[5], screen_pos),\0A\00", align 1
@.str.40 = private unnamed_addr constant [49 x i8] c"                      dot(edge[6], screen_pos),\0A\00", align 1
@.str.41 = private unnamed_addr constant [66 x i8] c"                      dot(edge[7], screen_pos)) * gl_Position.w;\0A\00", align 1
@.str.42 = private unnamed_addr constant [46 x i8] c"varying TexCoordPrecision vec2 v_uvTexCoord;\0A\00", align 1
@.str.43 = private unnamed_addr constant [46 x i8] c"varying TexCoordPrecision vec2 v_yaTexCoord;\0A\00", align 1
@.str.44 = private unnamed_addr constant [44 x i8] c"varying TexCoordPrecision vec2 v_texCoord;\0A\00", align 1
@.str.45 = private unnamed_addr constant [35 x i8] c"  // Compute texture coordinates.\0A\00", align 1
@.str.46 = private unnamed_addr constant [27 x i8] c"  vec2 texCoord = pos.xy;\0A\00", align 1
@.str.47 = private unnamed_addr constant [46 x i8] c"attribute TexCoordPrecision vec2 a_texCoord;\0A\00", align 1
@.str.48 = private unnamed_addr constant [31 x i8] c"  vec2 texCoord = a_texCoord;\0A\00", align 1
@.str.49 = private unnamed_addr constant [36 x i8] c"  texCoord = texCoord + vec2(0.5);\0A\00", align 1
@.str.50 = private unnamed_addr constant [63 x i8] c"uniform TexCoordPrecision vec4 vertexTexTransform[NUM_QUADS];\0A\00", align 1
@.str.51 = private unnamed_addr constant [37 x i8] c"  TexCoordPrecision vec4 texTrans =\0A\00", align 1
@.str.52 = private unnamed_addr constant [39 x i8] c"      vertexTexTransform[quad_index];\0A\00", align 1
@.str.53 = private unnamed_addr constant [52 x i8] c"  texCoord = texCoord * texTrans.zw + texTrans.xy;\0A\00", align 1
@.str.54 = private unnamed_addr constant [52 x i8] c"uniform TexCoordPrecision vec4 vertexTexTransform;\0A\00", align 1
@.str.55 = private unnamed_addr constant [49 x i8] c"  texCoord = texCoord * vertexTexTransform.zw +\0A\00", align 1
@.str.56 = private unnamed_addr constant [37 x i8] c"             vertexTexTransform.xy;\0A\00", align 1
@.str.57 = private unnamed_addr constant [43 x i8] c"uniform TexCoordPrecision mat4 texMatrix;\0A\00", align 1
@.str.58 = private unnamed_addr constant [60 x i8] c"  texCoord = (texMatrix * vec4(texCoord.xy, 0.0, 1.0)).xy;\0A\00", align 1
@.str.59 = private unnamed_addr constant [45 x i8] c"uniform TexCoordPrecision vec2 uvTexOffset;\0A\00", align 1
@.str.60 = private unnamed_addr constant [44 x i8] c"uniform TexCoordPrecision vec2 uvTexScale;\0A\00", align 1
@.str.61 = private unnamed_addr constant [45 x i8] c"uniform TexCoordPrecision vec2 yaTexOffset;\0A\00", align 1
@.str.62 = private unnamed_addr constant [44 x i8] c"uniform TexCoordPrecision vec2 yaTexScale;\0A\00", align 1
@.str.63 = private unnamed_addr constant [55 x i8] c"  v_yaTexCoord = texCoord * yaTexScale + yaTexOffset;\0A\00", align 1
@.str.64 = private unnamed_addr constant [55 x i8] c"  v_uvTexCoord = texCoord * uvTexScale + uvTexOffset;\0A\00", align 1
@.str.65 = private unnamed_addr constant [26 x i8] c"  v_texCoord = texCoord;\0A\00", align 1
@.str.66 = private unnamed_addr constant [24 x i8] c"varying float v_alpha;\0A\00", align 1
@.str.67 = private unnamed_addr constant [39 x i8] c"uniform float opacity[NUM_QUADS * 4];\0A\00", align 1
@.str.68 = private unnamed_addr constant [27 x i8] c"uniform float opacity[4];\0A\00", align 1
@.str.69 = private unnamed_addr constant [36 x i8] c"  v_alpha = opacity[vertex_index];\0A\00", align 1
@.str.70 = private unnamed_addr constant [47 x i8] c"uniform TexCoordPrecision vec2 dummy_uniform;\0A\00", align 1
@.str.71 = private unnamed_addr constant [47 x i8] c"varying TexCoordPrecision vec2 dummy_varying;\0A\00", align 1
@.str.72 = private unnamed_addr constant [34 x i8] c"  dummy_varying = dummy_uniform;\0A\00", align 1
@.str.73 = private unnamed_addr constant [3 x i8] c"}\0A\00", align 1
@_ZTVN3viz14FragmentShaderE = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.viz::FragmentShader"*, %"class.gpu::gles2::GLES2Interface"*, i32, i32*)* @_ZN3viz14FragmentShader4InitEPN3gpu5gles214GLES2InterfaceEjPi to i8*), i8* bitcast (void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)* @_ZNK3viz14FragmentShader15GetShaderSourceEv to i8*)] }, align 8
@.str.74 = private unnamed_addr constant [18 x i8] c"s_backdropTexture\00", align 1
@.str.75 = private unnamed_addr constant [26 x i8] c"s_originalBackdropTexture\00", align 1
@.str.76 = private unnamed_addr constant [13 x i8] c"backdropRect\00", align 1
@.str.77 = private unnamed_addr constant [7 x i8] c"s_mask\00", align 1
@.str.78 = private unnamed_addr constant [18 x i8] c"maskTexCoordScale\00", align 1
@.str.79 = private unnamed_addr constant [19 x i8] c"maskTexCoordOffset\00", align 1
@.str.80 = private unnamed_addr constant [12 x i8] c"colorMatrix\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"colorOffset\00", align 1
@.str.82 = private unnamed_addr constant [6 x i8] c"alpha\00", align 1
@.str.83 = private unnamed_addr constant [17 x i8] c"background_color\00", align 1
@.str.84 = private unnamed_addr constant [15 x i8] c"tex_clamp_rect\00", align 1
@.str.85 = private unnamed_addr constant [10 x i8] c"s_texture\00", align 1
@.str.86 = private unnamed_addr constant [21 x i8] c"fragmentTexTransform\00", align 1
@.str.87 = private unnamed_addr constant [10 x i8] c"y_texture\00", align 1
@.str.88 = private unnamed_addr constant [11 x i8] c"uv_texture\00", align 1
@.str.89 = private unnamed_addr constant [10 x i8] c"u_texture\00", align 1
@.str.90 = private unnamed_addr constant [10 x i8] c"v_texture\00", align 1
@.str.91 = private unnamed_addr constant [10 x i8] c"a_texture\00", align 1
@.str.92 = private unnamed_addr constant [14 x i8] c"ya_clamp_rect\00", align 1
@.str.93 = private unnamed_addr constant [14 x i8] c"uv_clamp_rect\00", align 1
@.str.94 = private unnamed_addr constant [20 x i8] c"resource_multiplier\00", align 1
@.str.95 = private unnamed_addr constant [16 x i8] c"resource_offset\00", align 1
@.str.96 = private unnamed_addr constant [6 x i8] c"color\00", align 1
@.str.97 = private unnamed_addr constant [20 x i8] c"output_color_matrix\00", align 1
@.str.98 = private unnamed_addr constant [18 x i8] c"tint_color_matrix\00", align 1
@.str.99 = private unnamed_addr constant [18 x i8] c"roundedCornerRect\00", align 1
@.str.100 = private unnamed_addr constant [20 x i8] c"roundedCornerRadius\00", align 1
@_ZZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE9kUniforms = internal unnamed_addr constant %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.101, i32 0, i64 6), i64 67 }, align 8
@.str.101 = private unnamed_addr constant [75 x i8] c"[]() { uniform vec4 roundedCornerRect; uniform vec4 roundedCornerRadius; }\00", align 1
@_ZZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE18kFunctionRcUtility = internal unnamed_addr constant %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([958 x i8], [958 x i8]* @.str.102, i32 0, i64 6), i64 950 }, align 8
@.str.102 = private unnamed_addr constant [958 x i8] c"[]() { vec4 IsCorner(vec2 rcCoord) { if (rcCoord.x < roundedCornerRadius.x && rcCoord.y < roundedCornerRadius.x) { return vec4(1.0, 0.0, 0.0, 0.0); } if (rcCoord.x > roundedCornerRect.z - roundedCornerRadius.y && rcCoord.y < roundedCornerRadius.y) { return vec4(0.0, 1.0, 0.0, 0.0); } if (rcCoord.x > roundedCornerRect.z - roundedCornerRadius.z && rcCoord.y > roundedCornerRect.w - roundedCornerRadius.z) { return vec4(0.0, 0.0, 1.0, 0.0); } if (rcCoord.x < roundedCornerRadius.w && rcCoord.y > roundedCornerRect.w - roundedCornerRadius.w) { return vec4(0.0, 0.0, 0.0, 1.0); } return vec4(0.0, 0.0, 0.0, 0.0); } vec2 GetCenter(vec4 corner, float radius) { if (corner.x == 1.0) { return vec2(radius, radius); } else if (corner.y == 1.0) { return vec2(roundedCornerRect.z - radius, radius); } else if (corner.z == 1.0) { return vec2(roundedCornerRect.z - radius, roundedCornerRect.w - radius); } else { return vec2(radius, roundedCornerRect.w - radius); } } }\00", align 1
@_ZZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE27kFunctionApplyRoundedCorner = internal unnamed_addr constant %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([441 x i8], [441 x i8]* @.str.103, i32 0, i64 6), i64 433 }, align 8
@.str.103 = private unnamed_addr constant [441 x i8] c"[]() { vec4 ApplyRoundedCorner(vec4 src) { vec2 rcCoord = gl_FragCoord.xy - roundedCornerRect.xy; vec4 isCorner = IsCorner(rcCoord); float r = dot(isCorner, roundedCornerRadius); if (r == 0.0) return src; RoundedCornerPrecision vec2 cornerCenter = GetCenter(isCorner, r); vec2 cxy = rcCoord - cornerCenter; float fragDst = length(cxy); float alpha = smoothstep(r - 1.0, r + 1.0, fragDst); return vec4(0.0) * alpha + src * (1.0 - alpha); } }\00", align 1
@.str.104 = private unnamed_addr constant [25 x i8] c"precision mediump float;\00", align 1
@.str.105 = private unnamed_addr constant [129 x i8] c"\0A#ifdef GL_FRAGMENT_PRECISION_HIGH\0A  #define RoundedCornerPrecision highp\0A#else\0A  #define RoundedCornerPrecision mediump\0A#endif\0A\00", align 1
@_ZZNK3viz14FragmentShader21SetBlendModeFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE9kUniforms = internal unnamed_addr constant %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([136 x i8], [136 x i8]* @.str.106, i32 0, i64 6), i64 128 }, align 8
@.str.106 = private unnamed_addr constant [136 x i8] c"[]() { uniform sampler2D s_backdropTexture; uniform sampler2D s_originalBackdropTexture; uniform TexCoordPrecision vec4 backdropRect; }\00", align 1
@.str.107 = private unnamed_addr constant [365 x i8] c"[]() { vec4 ApplyBlendMode(vec4 src, float mask) { TexCoordPrecision vec2 bgTexCoord = gl_FragCoord.xy - backdropRect.xy; bgTexCoord *= backdropRect.zw; vec4 backdrop = texture2D(s_backdropTexture, bgTexCoord); vec4 original_backdrop = texture2D(s_originalBackdropTexture, bgTexCoord); vec4 dst = mix(original_backdrop, backdrop, mask); return Blend(src, dst); } }\00", align 1
@.str.108 = private unnamed_addr constant [222 x i8] c"[]() { vec4 ApplyBlendMode(vec4 src) { TexCoordPrecision vec2 bgTexCoord = gl_FragCoord.xy - backdropRect.xy; bgTexCoord *= backdropRect.zw; vec4 dst = texture2D(s_backdropTexture, bgTexCoord); return Blend(src, dst); } }\00", align 1
@.str.109 = private unnamed_addr constant [498 x i8] c"[]() { vec3 hardLight(vec4 src, vec4 dst) { vec3 result; result.r = (2.0 * src.r <= src.a) ? (2.0 * src.r * dst.r) : (src.a * dst.a - 2.0 * (dst.a - dst.r) * (src.a - src.r)); result.g = (2.0 * src.g <= src.a) ? (2.0 * src.g * dst.g) : (src.a * dst.a - 2.0 * (dst.a - dst.g) * (src.a - src.g)); result.b = (2.0 * src.b <= src.a) ? (2.0 * src.b * dst.b) : (src.a * dst.a - 2.0 * (dst.a - dst.b) * (src.a - src.b)); result.rgb += src.rgb * (1.0 - dst.a) + dst.rgb * (1.0 - src.a); return result; } }\00", align 1
@.str.110 = private unnamed_addr constant [329 x i8] c"[]() { float getColorDodgeComponent(float srcc, float srca, float dstc, float dsta) { if (0.0 == dstc) return srcc * (1.0 - dsta); float d = srca - srcc; if (0.0 == d) return srca * dsta + srcc * (1.0 - dsta) + dstc * (1.0 - srca); d = min(dsta, dstc * srca / d); return d * srca + srcc * (1.0 - dsta) + dstc * (1.0 - srca); } }\00", align 1
@.str.111 = private unnamed_addr constant [333 x i8] c"[]() { float getColorBurnComponent(float srcc, float srca, float dstc, float dsta) { if (dsta == dstc) return srca * dsta + srcc * (1.0 - dsta) + dstc * (1.0 - srca); if (0.0 == srcc) return dstc * (1.0 - srca); float d = max(0.0, dsta - (dsta - dstc) * srca / srcc); return srca * d + srcc * (1.0 - dsta) + dstc * (1.0 - srca); } }\00", align 1
@.str.112 = private unnamed_addr constant [649 x i8] c"[]() { float getSoftLightComponent(float srcc, float srca, float dstc, float dsta) { if (2.0 * srcc <= srca) { return (dstc * dstc * (srca - 2.0 * srcc)) / dsta + (1.0 - dsta) * srcc + dstc * (-srca + 2.0 * srcc + 1.0); } else if (4.0 * dstc <= dsta) { float DSqd = dstc * dstc; float DCub = DSqd * dstc; float DaSqd = dsta * dsta; float DaCub = DaSqd * dsta; return (-DaCub * srcc + DaSqd * (srcc - dstc * (3.0 * srca - 6.0 * srcc - 1.0)) + 12.0 * dsta * DSqd * (srca - 2.0 * srcc) - 16.0 * DCub * (srca - 2.0 * srcc)) / DaSqd; } else { return -sqrt(dsta * dstc) * (srca - 2.0 * srcc) - dsta * srcc + dstc * (srca - 2.0 * srcc + 1.0) + srcc; } } }\00", align 1
@.str.113 = private unnamed_addr constant [688 x i8] c"[]() { float luminance(vec3 color) { return dot(vec3(0.3, 0.59, 0.11), color); } vec3 set_luminance(vec3 hueSat, float alpha, vec3 lumColor) { float diff = luminance(lumColor - hueSat); vec3 outColor = hueSat + diff; float outLum = luminance(outColor); float minComp = min(min(outColor.r, outColor.g), outColor.b); float maxComp = max(max(outColor.r, outColor.g), outColor.b); if (minComp < 0.0 && outLum != minComp) { outColor = outLum + ((outColor - vec3(outLum, outLum, outLum)) * outLum) / (outLum - minComp); } if (maxComp > alpha && maxComp != outLum) { outColor = outLum + ((outColor - vec3(outLum, outLum, outLum)) * (alpha - outLum)) / (maxComp - outLum); } return outColor; } }\00", align 1
@.str.114 = private unnamed_addr constant [1279 x i8] c"[]() { float saturation(vec3 color) { return max(max(color.r, color.g), color.b) - min(min(color.r, color.g), color.b); } vec3 set_saturation_helper(float minComp, float midComp, float maxComp, float sat) { if (minComp < maxComp) { vec3 result; result.r = 0.0; result.g = sat * (midComp - minComp) / (maxComp - minComp); result.b = sat; return result; } else { return vec3(0, 0, 0); } } vec3 set_saturation(vec3 hueLumColor, vec3 satColor) { float sat = saturation(satColor); if (hueLumColor.r <= hueLumColor.g) { if (hueLumColor.g <= hueLumColor.b) { hueLumColor.rgb = set_saturation_helper(hueLumColor.r, hueLumColor.g, hueLumColor.b, sat); } else if (hueLumColor.r <= hueLumColor.b) { hueLumColor.rbg = set_saturation_helper(hueLumColor.r, hueLumColor.b, hueLumColor.g, sat); } else { hueLumColor.brg = set_saturation_helper(hueLumColor.b, hueLumColor.r, hueLumColor.g, sat); } } else if (hueLumColor.r <= hueLumColor.b) { hueLumColor.grb = set_saturation_helper(hueLumColor.g, hueLumColor.r, hueLumColor.b, sat); } else if (hueLumColor.g <= hueLumColor.b) { hueLumColor.gbr = set_saturation_helper(hueLumColor.g, hueLumColor.b, hueLumColor.r, sat); } else { hueLumColor.bgr = set_saturation_helper(hueLumColor.b, hueLumColor.g, hueLumColor.r, sat); } return hueLumColor; } }\00", align 1
@.ref.tmp = private constant [2 x %"class.base::BasicStringPiece"] [%"class.base::BasicStringPiece" { i8* getelementptr inbounds ([688 x i8], [688 x i8]* @.str.113, i32 0, i64 6), i64 680 }, %"class.base::BasicStringPiece" { i8* getelementptr inbounds ([1279 x i8], [1279 x i8]* @.str.114, i32 0, i64 6), i64 1271 }], align 8
@.str.115 = private unnamed_addr constant [49 x i8] c"vec4 Blend(vec4 src, vec4 dst) {    vec4 result;\00", align 1
@.str.116 = private unnamed_addr constant [20 x i8] c"    return result;}\00", align 1
@.str.117 = private unnamed_addr constant [26 x i8] c"result.a = src.a * dst.a;\00", align 1
@.str.118 = private unnamed_addr constant [42 x i8] c"result.a = src.a + (1.0 - src.a) * dst.a;\00", align 1
@.str.119 = private unnamed_addr constant [48 x i8] c"result.rgb = src.rgb + dst.rgb * (1.0 - src.a);\00", align 1
@.str.120 = private unnamed_addr constant [30 x i8] c"result.rgb = dst.rgb * src.a;\00", align 1
@.str.121 = private unnamed_addr constant [50 x i8] c"result.rgb = src.rgb + (1.0 - src.rgb) * dst.rgb;\00", align 1
@.str.122 = private unnamed_addr constant [104 x i8] c"result.rgb = max((1.0 - src.a) * dst.rgb + src.rgb,                 (1.0 - dst.a) * src.rgb + dst.rgb);\00", align 1
@.str.123 = private unnamed_addr constant [34 x i8] c"result.rgb = hardLight(dst, src);\00", align 1
@.str.124 = private unnamed_addr constant [104 x i8] c"result.rgb = min((1.0 - src.a) * dst.rgb + src.rgb,                 (1.0 - dst.a) * src.rgb + dst.rgb);\00", align 1
@.str.125 = private unnamed_addr constant [187 x i8] c"result.r = getColorDodgeComponent(src.r, src.a, dst.r, dst.a);result.g = getColorDodgeComponent(src.g, src.a, dst.g, dst.a);result.b = getColorDodgeComponent(src.b, src.a, dst.b, dst.a);\00", align 1
@.str.126 = private unnamed_addr constant [184 x i8] c"result.r = getColorBurnComponent(src.r, src.a, dst.r, dst.a);result.g = getColorBurnComponent(src.g, src.a, dst.g, dst.a);result.b = getColorBurnComponent(src.b, src.a, dst.b, dst.a);\00", align 1
@.str.127 = private unnamed_addr constant [34 x i8] c"result.rgb = hardLight(src, dst);\00", align 1
@.str.128 = private unnamed_addr constant [241 x i8] c"if (0.0 == dst.a) {  result.rgb = src.rgb;} else {  result.r = getSoftLightComponent(src.r, src.a, dst.r, dst.a);  result.g = getSoftLightComponent(src.g, src.a, dst.g, dst.a);  result.b = getSoftLightComponent(src.b, src.a, dst.b, dst.a);}\00", align 1
@.str.129 = private unnamed_addr constant [81 x i8] c"result.rgb = src.rgb + dst.rgb -    2.0 * min(src.rgb * dst.a, dst.rgb * src.a);\00", align 1
@.str.130 = private unnamed_addr constant [58 x i8] c"result.rgb = dst.rgb + src.rgb - 2.0 * dst.rgb * src.rgb;\00", align 1
@.str.131 = private unnamed_addr constant [87 x i8] c"result.rgb = (1.0 - src.a) * dst.rgb +    (1.0 - dst.a) * src.rgb + src.rgb * dst.rgb;\00", align 1
@.str.132 = private unnamed_addr constant [274 x i8] c"vec4 dstSrcAlpha = dst * src.a;result.rgb =    set_luminance(set_saturation(src.rgb * dst.a,                                 dstSrcAlpha.rgb),                  dstSrcAlpha.a,                  dstSrcAlpha.rgb);result.rgb += (1.0 - src.a) * dst.rgb + (1.0 - dst.a) * src.rgb;\00", align 1
@.str.133 = private unnamed_addr constant [298 x i8] c"vec4 dstSrcAlpha = dst * src.a;result.rgb = set_luminance(set_saturation(dstSrcAlpha.rgb,                                          src.rgb * dst.a),                           dstSrcAlpha.a,                           dstSrcAlpha.rgb);result.rgb += (1.0 - src.a) * dst.rgb + (1.0 - dst.a) * src.rgb;\00", align 1
@.str.134 = private unnamed_addr constant [224 x i8] c"vec4 srcDstAlpha = src * dst.a;result.rgb = set_luminance(srcDstAlpha.rgb,                           srcDstAlpha.a,                           dst.rgb * src.a);result.rgb += (1.0 - src.a) * dst.rgb + (1.0 - dst.a) * src.rgb;\00", align 1
@.str.135 = private unnamed_addr constant [224 x i8] c"vec4 srcDstAlpha = src * dst.a;result.rgb = set_luminance(dst.rgb * src.a,                           srcDstAlpha.a,                           srcDstAlpha.rgb);result.rgb += (1.0 - src.a) * dst.rgb + (1.0 - dst.a) * src.rgb;\00", align 1
@.str.136 = private unnamed_addr constant [35 x i8] c"result = vec4(1.0, 0.0, 0.0, 1.0);\00", align 1
@.str.137 = private unnamed_addr constant [26 x i8] c"precision mediump float;\0A\00", align 1
@.str.138 = private unnamed_addr constant [30 x i8] c"uniform sampler2D s_texture;\0A\00", align 1
@.str.139 = private unnamed_addr constant [32 x i8] c"uniform SamplerType s_texture;\0A\00", align 1
@.str.140 = private unnamed_addr constant [54 x i8] c"uniform TexCoordPrecision vec4 fragmentTexTransform;\0A\00", align 1
@.str.141 = private unnamed_addr constant [33 x i8] c"  // Transformed texture lookup\0A\00", align 1
@.str.142 = private unnamed_addr constant [37 x i8] c"  TexCoordPrecision vec2 texCoord =\0A\00", align 1
@.str.143 = private unnamed_addr constant [63 x i8] c"      clamp(v_texCoord, 0.0, 1.0) * fragmentTexTransform.zw +\0A\00", align 1
@.str.144 = private unnamed_addr constant [31 x i8] c"     fragmentTexTransform.xy;\0A\00", align 1
@.str.145 = private unnamed_addr constant [55 x i8] c"  vec4 texColor = TextureLookup(s_texture, texCoord);\0A\00", align 1
@.str.146 = private unnamed_addr constant [21 x i8] c"  // Texture lookup\0A\00", align 1
@.str.147 = private unnamed_addr constant [53 x i8] c"  vec4 texColor = texture2D(s_texture, v_texCoord);\0A\00", align 1
@.str.148 = private unnamed_addr constant [49 x i8] c"  TexCoordPrecision vec2 texCoord = v_texCoord;\0A\00", align 1
@.str.149 = private unnamed_addr constant [30 x i8] c"uniform vec4 tex_clamp_rect;\0A\00", align 1
@.str.150 = private unnamed_addr constant [37 x i8] c"  texCoord = max(tex_clamp_rect.xy,\0A\00", align 1
@.str.151 = private unnamed_addr constant [42 x i8] c"      min(tex_clamp_rect.zw, texCoord));\0A\00", align 1
@.str.152 = private unnamed_addr constant [32 x i8] c"uniform SamplerType y_texture;\0A\00", align 1
@.str.153 = private unnamed_addr constant [48 x i8] c"  // YUV texture lookup and conversion to RGB.\0A\00", align 1
@.str.154 = private unnamed_addr constant [21 x i8] c"  vec2 ya_clamped =\0A\00", align 1
@.str.155 = private unnamed_addr constant [67 x i8] c"      max(ya_clamp_rect.xy, min(ya_clamp_rect.zw, v_yaTexCoord));\0A\00", align 1
@.str.156 = private unnamed_addr constant [21 x i8] c"  vec2 uv_clamped =\0A\00", align 1
@.str.157 = private unnamed_addr constant [67 x i8] c"      max(uv_clamp_rect.xy, min(uv_clamp_rect.zw, v_uvTexCoord));\0A\00", align 1
@.str.158 = private unnamed_addr constant [18 x i8] c"  vec4 texColor;\0A\00", align 1
@.str.159 = private unnamed_addr constant [21 x i8] c"  texColor.w = 1.0;\0A\00", align 1
@.str.160 = private unnamed_addr constant [56 x i8] c"  texColor.x = TextureLookup(y_texture, ya_clamped).x;\0A\00", align 1
@.str.161 = private unnamed_addr constant [33 x i8] c"uniform SamplerType uv_texture;\0A\00", align 1
@.str.162 = private unnamed_addr constant [59 x i8] c"  texColor.yz = TextureLookup(uv_texture, uv_clamped).xy;\0A\00", align 1
@.str.163 = private unnamed_addr constant [32 x i8] c"uniform SamplerType u_texture;\0A\00", align 1
@.str.164 = private unnamed_addr constant [32 x i8] c"uniform SamplerType v_texture;\0A\00", align 1
@.str.165 = private unnamed_addr constant [56 x i8] c"  texColor.y = TextureLookup(u_texture, uv_clamped).x;\0A\00", align 1
@.str.166 = private unnamed_addr constant [56 x i8] c"  texColor.z = TextureLookup(v_texture, uv_clamped).x;\0A\00", align 1
@.str.167 = private unnamed_addr constant [32 x i8] c"uniform SamplerType a_texture;\0A\00", align 1
@.str.168 = private unnamed_addr constant [29 x i8] c"uniform vec4 ya_clamp_rect;\0A\00", align 1
@.str.169 = private unnamed_addr constant [29 x i8] c"uniform vec4 uv_clamp_rect;\0A\00", align 1
@.str.170 = private unnamed_addr constant [36 x i8] c"uniform float resource_multiplier;\0A\00", align 1
@.str.171 = private unnamed_addr constant [32 x i8] c"uniform float resource_offset;\0A\00", align 1
@.str.172 = private unnamed_addr constant [42 x i8] c"  texColor.xyz -= vec3(resource_offset);\0A\00", align 1
@.str.173 = private unnamed_addr constant [40 x i8] c"  texColor.xyz *= resource_multiplier;\0A\00", align 1
@.str.174 = private unnamed_addr constant [21 x i8] c"uniform vec4 color;\0A\00", align 1
@.str.175 = private unnamed_addr constant [20 x i8] c"  // Uniform color\0A\00", align 1
@.str.176 = private unnamed_addr constant [26 x i8] c"  vec4 texColor = color;\0A\00", align 1
@.str.177 = private unnamed_addr constant [27 x i8] c"  // un-premultiply alpha\0A\00", align 1
@.str.178 = private unnamed_addr constant [53 x i8] c"  if (texColor.a > 0.0) texColor.rgb /= texColor.a;\0A\00", align 1
@.str.179 = private unnamed_addr constant [51 x i8] c"  texColor.rgb = DoColorConversion(texColor.xyz);\0A\00", align 1
@.str.180 = private unnamed_addr constant [31 x i8] c"  texColor.rgb *= texColor.a;\0A\00", align 1
@.str.181 = private unnamed_addr constant [24 x i8] c"  // Premultiply alpha\0A\00", align 1
@.str.182 = private unnamed_addr constant [27 x i8] c"uniform mat4 colorMatrix;\0A\00", align 1
@.str.183 = private unnamed_addr constant [27 x i8] c"uniform vec4 colorOffset;\0A\00", align 1
@.str.184 = private unnamed_addr constant [25 x i8] c"  // Apply color matrix\0A\00", align 1
@.str.185 = private unnamed_addr constant [50 x i8] c"  float nonZeroAlpha = max(texColor.a, 0.00001);\0A\00", align 1
@.str.186 = private unnamed_addr constant [63 x i8] c"  texColor = vec4(texColor.rgb / nonZeroAlpha, nonZeroAlpha);\0A\00", align 1
@.str.187 = private unnamed_addr constant [52 x i8] c"  texColor = colorMatrix * texColor + colorOffset;\0A\00", align 1
@.str.188 = private unnamed_addr constant [41 x i8] c"  texColor = clamp(texColor, 0.0, 1.0);\0A\00", align 1
@.str.189 = private unnamed_addr constant [29 x i8] c"uniform SamplerType s_mask;\0A\00", align 1
@.str.190 = private unnamed_addr constant [33 x i8] c"uniform vec2 maskTexCoordScale;\0A\00", align 1
@.str.191 = private unnamed_addr constant [34 x i8] c"uniform vec2 maskTexCoordOffset;\0A\00", align 1
@.str.192 = private unnamed_addr constant [20 x i8] c"  // Read the mask\0A\00", align 1
@.str.193 = private unnamed_addr constant [41 x i8] c"  TexCoordPrecision vec2 maskTexCoord =\0A\00", align 1
@.str.194 = private unnamed_addr constant [71 x i8] c"      vec2(maskTexCoordOffset.x + v_texCoord.x * maskTexCoordScale.x,\0A\00", align 1
@.str.195 = private unnamed_addr constant [72 x i8] c"           maskTexCoordOffset.y + v_texCoord.y * maskTexCoordScale.y);\0A\00", align 1
@.str.196 = private unnamed_addr constant [57 x i8] c"  vec4 maskColor = TextureLookup(s_mask, maskTexCoord);\0A\00", align 1
@.str.197 = private unnamed_addr constant [17 x i8] c"  // Compute AA\0A\00", align 1
@.str.198 = private unnamed_addr constant [46 x i8] c"  vec4 d4 = min(edge_dist[0], edge_dist[1]);\0A\00", align 1
@.str.199 = private unnamed_addr constant [32 x i8] c"  vec2 d2 = min(d4.xz, d4.yw);\0A\00", align 1
@.str.200 = private unnamed_addr constant [65 x i8] c"  float aa = clamp(gl_FragCoord.w * min(d2.x, d2.y), 0.0, 1.0);\0A\00", align 1
@.str.201 = private unnamed_addr constant [32 x i8] c"uniform vec4 background_color;\0A\00", align 1
@.str.202 = private unnamed_addr constant [46 x i8] c"  // Apply uniform background color blending\0A\00", align 1
@.str.203 = private unnamed_addr constant [54 x i8] c"  texColor += background_color * (1.0 - texColor.a);\0A\00", align 1
@.str.204 = private unnamed_addr constant [35 x i8] c"uniform mat4 output_color_matrix;\0A\00", align 1
@.str.205 = private unnamed_addr constant [36 x i8] c"  // Apply the output color matrix\0A\00", align 1
@.str.206 = private unnamed_addr constant [46 x i8] c"  texColor = output_color_matrix * texColor;\0A\00", align 1
@.str.207 = private unnamed_addr constant [33 x i8] c"uniform mat4 tint_color_matrix;\0A\00", align 1
@.str.208 = private unnamed_addr constant [34 x i8] c"  // Apply the tint color matrix\0A\00", align 1
@.str.209 = private unnamed_addr constant [44 x i8] c"  texColor = tint_color_matrix * texColor;\0A\00", align 1
@.str.210 = private unnamed_addr constant [22 x i8] c"uniform float alpha;\0A\00", align 1
@.str.211 = private unnamed_addr constant [55 x i8] c"  // Apply alpha from uniform, varying, aa, and mask.\0A\00", align 1
@.str.212 = private unnamed_addr constant [22 x i8] c"  texColor = texColor\00", align 1
@.str.213 = private unnamed_addr constant [11 x i8] c" * v_alpha\00", align 1
@.str.214 = private unnamed_addr constant [9 x i8] c" * alpha\00", align 1
@.str.215 = private unnamed_addr constant [6 x i8] c" * aa\00", align 1
@.str.216 = private unnamed_addr constant [15 x i8] c" * maskColor.a\00", align 1
@.str.217 = private unnamed_addr constant [42 x i8] c" * TextureLookup(a_texture, ya_clamped).x\00", align 1
@.str.218 = private unnamed_addr constant [3 x i8] c";\0A\00", align 1
@.str.219 = private unnamed_addr constant [31 x i8] c"  // Write the fragment color\0A\00", align 1
@.str.220 = private unnamed_addr constant [28 x i8] c"  gl_FragColor = texColor;\0A\00", align 1
@.str.221 = private unnamed_addr constant [43 x i8] c"  gl_FragColor = vec4(texColor.rgb, 1.0);\0A\00", align 1
@.str.222 = private unnamed_addr constant [57 x i8] c"  gl_FragColor = ApplyBlendMode(texColor, maskColor.w);\0A\00", align 1
@.str.223 = private unnamed_addr constant [44 x i8] c"  gl_FragColor = ApplyBlendMode(texColor);\0A\00", align 1
@.str.224 = private unnamed_addr constant [52 x i8] c"  gl_FragColor = ApplyRoundedCorner(gl_FragColor);\0A\00", align 1
@.str.225 = private unnamed_addr constant [63 x i8] c"#define SamplerType sampler2D\0A#define TextureLookup texture2D\0A\00", align 1
@.str.226 = private unnamed_addr constant [117 x i8] c"#extension GL_ARB_texture_rectangle : require\0A#define SamplerType sampler2DRect\0A#define TextureLookup texture2DRect\0A\00", align 1
@.str.227 = private unnamed_addr constant [173 x i8] c"#extension GL_OES_EGL_image_external : enable\0A#extension GL_NV_EGL_stream_consumer_external : enable\0A#define SamplerType samplerExternalOES\0A#define TextureLookup texture2D\0A\00", align 1
@.str.228 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.229 = private unnamed_addr constant [118 x i8] c"#ifdef GL_FRAGMENT_PRECISION_HIGH\0A  #define TexCoordPrecision highp\0A#else\0A  #define TexCoordPrecision mediump\0A#endif\0A\00", align 1
@.str.230 = private unnamed_addr constant [35 x i8] c"#define TexCoordPrecision mediump\0A\00", align 1
@.str.231 = private unnamed_addr constant [29 x i8] c"#define LutLookup texture2D\0A\00", align 1
@switch.table._ZNK3viz14FragmentShader15GetShaderStringEv = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.225, i64 0, i64 0), i8* getelementptr inbounds ([117 x i8], [117 x i8]* @.str.226, i64 0, i64 0), i8* getelementptr inbounds ([173 x i8], [173 x i8]* @.str.227, i64 0, i64 0)], align 8
@switch.table._ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv = private unnamed_addr constant [17 x i64] [i64 47, i64 29, i64 49, i64 33, i64 103, i64 103, i64 186, i64 183, i64 33, i64 240, i64 80, i64 57, i64 86, i64 273, i64 297, i64 223, i64 223], align 8
@switch.table._ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv.236 = private unnamed_addr constant [17 x i8*] [i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.119, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.120, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.121, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.123, i64 0, i64 0), i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.124, i64 0, i64 0), i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.122, i64 0, i64 0), i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.125, i64 0, i64 0), i8* getelementptr inbounds ([184 x i8], [184 x i8]* @.str.126, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.127, i64 0, i64 0), i8* getelementptr inbounds ([241 x i8], [241 x i8]* @.str.128, i64 0, i64 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.129, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.130, i64 0, i64 0), i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.131, i64 0, i64 0), i8* getelementptr inbounds ([274 x i8], [274 x i8]* @.str.132, i64 0, i64 0), i8* getelementptr inbounds ([298 x i8], [298 x i8]* @.str.133, i64 0, i64 0), i8* getelementptr inbounds ([224 x i8], [224 x i8]* @.str.134, i64 0, i64 0), i8* getelementptr inbounds ([224 x i8], [224 x i8]* @.str.135, i64 0, i64 0)], align 8

@_ZN3viz12VertexShaderC1Ev = hidden unnamed_addr alias void (%"class.viz::VertexShader"*), void (%"class.viz::VertexShader"*)* @_ZN3viz12VertexShaderC2Ev
@_ZN3viz14FragmentShaderC1Ev = hidden unnamed_addr alias void (%"class.viz::FragmentShader"*), void (%"class.viz::FragmentShader"*)* @_ZN3viz14FragmentShaderC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3viz25TexCoordPrecisionRequiredEPN3gpu5gles214GLES2InterfaceEPiiRKN3gfx5PointE(%"class.gpu::gles2::GLES2Interface"*, i32* nocapture, i32, %"class.gfx::Point"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %3, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %1, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %4
  %14 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  store i64 60129542158, i64* %5, align 8
  %15 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #9
  store i32 10, i32* %6, align 4
  %16 = bitcast i64* %5 to i32*
  %17 = bitcast %"class.gpu::gles2::GLES2Interface"* %0 to void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)***
  %18 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)**, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)** %18, i64 111
  %20 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)** %19, align 8
  call void %20(%"class.gpu::gles2::GLES2Interface"* %0, i32 35632, i32 36337, i32* nonnull %16, i32* nonnull %6) #9
  %21 = load i32, i32* %6, align 4
  %22 = shl i32 1, %21
  store i32 %22, i32* %1, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  br label %23

23:                                               ; preds = %4, %13
  %24 = phi i32 [ %22, %13 ], [ %11, %4 ]
  %25 = icmp slt i32 %24, %2
  %26 = select i1 %25, i32 %2, i32 %24
  %27 = icmp slt i32 %26, %8
  %28 = icmp slt i32 %26, %10
  %29 = or i1 %27, %28
  %30 = select i1 %29, i32 2, i32 1
  ret i32 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN3viz25TexCoordPrecisionRequiredEPN3gpu5gles214GLES2InterfaceEPiiRKN3gfx4SizeE(%"class.gpu::gles2::GLES2Interface"*, i32* nocapture, i32, %"class.gfx::Size"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %3, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %3, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %1, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %4
  %14 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #9
  store i64 60129542158, i64* %5, align 8
  %15 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #9
  store i32 10, i32* %6, align 4
  %16 = bitcast i64* %5 to i32*
  %17 = bitcast %"class.gpu::gles2::GLES2Interface"* %0 to void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)***
  %18 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)**, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)** %18, i64 111
  %20 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i32*, i32*)** %19, align 8
  call void %20(%"class.gpu::gles2::GLES2Interface"* %0, i32 35632, i32 36337, i32* nonnull %16, i32* nonnull %6) #9
  %21 = load i32, i32* %6, align 4
  %22 = shl i32 1, %21
  store i32 %22, i32* %1, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #9
  br label %23

23:                                               ; preds = %4, %13
  %24 = phi i32 [ %22, %13 ], [ %11, %4 ]
  %25 = icmp slt i32 %24, %2
  %26 = select i1 %25, i32 %2, i32 %24
  %27 = icmp slt i32 %26, %8
  %28 = icmp slt i32 %26, %10
  %29 = or i1 %27, %28
  %30 = select i1 %29, i32 2, i32 1
  ret i32 %30
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz12VertexShaderC2Ev(%"class.viz::VertexShader"* nocapture) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 0
  store i8 0, i8* %2, align 4
  %3 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 1
  %4 = bitcast i32* %3 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 -1>, <4 x i32>* %4, align 4
  %5 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 5
  store i32 -1, i32* %5, align 4
  %6 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 6
  store i8 0, i8* %6, align 4
  %7 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 7
  %8 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 13
  %9 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 -1, i64 24, i1 false)
  store i8 0, i8* %8, align 4
  %10 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 14
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 15
  %12 = bitcast i32* %11 to <4 x i32>*
  store <4 x i32> <i32 -1, i32 0, i32 -1, i32 -1>, <4 x i32>* %12, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz12VertexShader4InitEPN3gpu5gles214GLES2InterfaceEjPi(%"class.viz::VertexShader"* nocapture, %"class.gpu::gles2::GLES2Interface"*, i32, i32* nocapture) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector.1", align 8
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #9
  %11 = bitcast %"class.std::__1::vector.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #9
  %14 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 3
  %15 = load i32, i32* %14, align 4
  switch i32 %15, label %38 [
    i32 3, label %27
    i32 1, label %16
    i32 2, label %16
  ]

16:                                               ; preds = %4, %4
  %17 = bitcast i8*** %9 to i64*
  %18 = bitcast %"class.std::__1::vector"* %5 to i64*
  %19 = bitcast i8*** %10 to i64*
  %20 = tail call i8* @_Znwm(i64 8) #10
  %21 = bitcast i8* %20 to i8**
  %22 = getelementptr inbounds i8, i8* %20, i64 8
  %23 = bitcast i8* %22 to i8**
  %24 = ptrtoint i8* %22 to i64
  %25 = bitcast i8* %20 to i64*
  store i64 ptrtoint ([19 x i8]* @.str to i64), i64* %25, align 8
  %26 = ptrtoint i8* %20 to i64
  store i64 %26, i64* %18, align 8
  store i64 %24, i64* %17, align 8
  store i64 %24, i64* %19, align 8
  br label %38

27:                                               ; preds = %4
  %28 = bitcast i8*** %9 to i64*
  %29 = bitcast %"class.std::__1::vector"* %5 to i64*
  %30 = bitcast i8*** %10 to i64*
  %31 = tail call i8* @_Znwm(i64 8) #10
  %32 = bitcast i8* %31 to i8**
  %33 = getelementptr inbounds i8, i8* %31, i64 8
  %34 = bitcast i8* %33 to i8**
  %35 = ptrtoint i8* %33 to i64
  %36 = bitcast i8* %31 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.1 to i64), i64* %36, align 8
  %37 = ptrtoint i8* %31 to i64
  store i64 %37, i64* %29, align 8
  store i64 %35, i64* %28, align 8
  store i64 %35, i64* %30, align 8
  br label %38

38:                                               ; preds = %27, %16, %4
  %39 = phi i8** [ %34, %27 ], [ %23, %16 ], [ null, %4 ]
  %40 = phi i64 [ %35, %27 ], [ %24, %16 ], [ 0, %4 ]
  %41 = phi i8* [ %31, %27 ], [ %20, %16 ], [ null, %4 ]
  %42 = phi i8** [ %32, %27 ], [ %21, %16 ], [ null, %4 ]
  %43 = phi i64 [ %37, %27 ], [ %26, %16 ], [ 0, %4 ]
  %44 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 6
  %45 = load i8, i8* %44, align 4, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %286, label %47

47:                                               ; preds = %38
  %48 = ptrtoint i8** %39 to i64
  %49 = bitcast i8*** %9 to i64*
  %50 = bitcast %"class.std::__1::vector"* %5 to i64*
  %51 = sub i64 %48, %43
  %52 = ashr exact i64 %51, 3
  %53 = add nsw i64 %52, 1
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %57

55:                                               ; preds = %47
  %56 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %56) #11
  unreachable

57:                                               ; preds = %47
  %58 = ptrtoint i8** %39 to i64
  %59 = bitcast i8*** %10 to i64*
  %60 = sub i64 %58, %43
  %61 = ashr exact i64 %60, 3
  %62 = icmp ult i64 %61, 1152921504606846975
  br i1 %62, label %63, label %71

63:                                               ; preds = %57
  %64 = ashr exact i64 %60, 2
  %65 = icmp ult i64 %64, %53
  %66 = select i1 %65, i64 %53, i64 %64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %63
  %69 = icmp ugt i64 %66, 2305843009213693951
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #11
  unreachable

71:                                               ; preds = %68, %57
  %72 = phi i64 [ %66, %68 ], [ 2305843009213693951, %57 ]
  %73 = shl i64 %72, 3
  %74 = tail call i8* @_Znwm(i64 %73) #10
  %75 = bitcast i8* %74 to i8**
  br label %76

76:                                               ; preds = %71, %63
  %77 = phi i64 [ %72, %71 ], [ 0, %63 ]
  %78 = phi i8** [ %75, %71 ], [ null, %63 ]
  %79 = getelementptr inbounds i8*, i8** %78, i64 %52
  %80 = getelementptr inbounds i8*, i8** %78, i64 %77
  %81 = ptrtoint i8** %80 to i64
  %82 = bitcast i8** %79 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.2 to i64), i64* %82, align 8
  %83 = getelementptr inbounds i8*, i8** %79, i64 1
  %84 = ptrtoint i8** %83 to i64
  %85 = ptrtoint i8** %42 to i64
  %86 = sub i64 %40, %85
  %87 = ashr exact i64 %86, 3
  %88 = sub nsw i64 0, %87
  %89 = getelementptr inbounds i8*, i8** %79, i64 %88
  %90 = ptrtoint i8** %89 to i64
  %91 = icmp sgt i64 %86, 0
  br i1 %91, label %92, label %94

92:                                               ; preds = %76
  %93 = bitcast i8** %89 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %41, i64 %86, i1 false) #9
  br label %94

94:                                               ; preds = %92, %76
  store i64 %90, i64* %50, align 8
  store i64 %84, i64* %49, align 8
  store i64 %81, i64* %59, align 8
  %95 = icmp eq i8** %42, null
  br i1 %95, label %97, label %96

96:                                               ; preds = %94
  tail call void @_ZdlPv(i8* %41) #10
  br label %97

97:                                               ; preds = %94, %96
  %98 = icmp ult i8** %83, %80
  br i1 %98, label %99, label %106

99:                                               ; preds = %97
  %100 = bitcast i8** %83 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.3 to i64), i64* %100, align 8
  %101 = getelementptr inbounds i8*, i8** %83, i64 1
  %102 = ptrtoint i8** %101 to i64
  %103 = bitcast i8*** %9 to i64*
  store i64 %102, i64* %103, align 8
  %104 = load i8**, i8*** %10, align 8
  %105 = ptrtoint i8** %104 to i64
  br label %157

106:                                              ; preds = %97
  %107 = ptrtoint i8** %83 to i64
  %108 = bitcast i8*** %9 to i64*
  %109 = bitcast %"class.std::__1::vector"* %5 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = sub i64 %107, %110
  %112 = ashr exact i64 %111, 3
  %113 = add nsw i64 %112, 1
  %114 = icmp ugt i64 %113, 2305843009213693951
  br i1 %114, label %115, label %117

115:                                              ; preds = %106
  %116 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %116) #11
  unreachable

117:                                              ; preds = %106
  %118 = bitcast i8*** %10 to i64*
  %119 = sub i64 %81, %110
  %120 = ashr exact i64 %119, 3
  %121 = icmp ult i64 %120, 1152921504606846975
  br i1 %121, label %122, label %130

122:                                              ; preds = %117
  %123 = ashr exact i64 %119, 2
  %124 = icmp ult i64 %123, %113
  %125 = select i1 %124, i64 %113, i64 %123
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %135, label %127

127:                                              ; preds = %122
  %128 = icmp ugt i64 %125, 2305843009213693951
  br i1 %128, label %129, label %130

129:                                              ; preds = %127
  tail call void @abort() #11
  unreachable

130:                                              ; preds = %127, %117
  %131 = phi i64 [ %125, %127 ], [ 2305843009213693951, %117 ]
  %132 = shl i64 %131, 3
  %133 = tail call i8* @_Znwm(i64 %132) #10
  %134 = bitcast i8* %133 to i8**
  br label %135

135:                                              ; preds = %130, %122
  %136 = phi i64 [ %131, %130 ], [ 0, %122 ]
  %137 = phi i8** [ %134, %130 ], [ null, %122 ]
  %138 = getelementptr inbounds i8*, i8** %137, i64 %112
  %139 = getelementptr inbounds i8*, i8** %137, i64 %136
  %140 = ptrtoint i8** %139 to i64
  %141 = bitcast i8** %138 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.3 to i64), i64* %141, align 8
  %142 = getelementptr inbounds i8*, i8** %138, i64 1
  %143 = ptrtoint i8** %142 to i64
  %144 = sub i64 %84, %110
  %145 = ashr exact i64 %144, 3
  %146 = sub nsw i64 0, %145
  %147 = getelementptr inbounds i8*, i8** %138, i64 %146
  %148 = ptrtoint i8** %147 to i64
  %149 = icmp sgt i64 %144, 0
  br i1 %149, label %150, label %153

150:                                              ; preds = %135
  %151 = bitcast i8** %147 to i8*
  %152 = inttoptr i64 %110 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %151, i8* align 8 %152, i64 %144, i1 false) #9
  br label %153

153:                                              ; preds = %150, %135
  store i64 %148, i64* %109, align 8
  store i64 %143, i64* %108, align 8
  store i64 %140, i64* %118, align 8
  %154 = icmp eq i64 %110, 0
  br i1 %154, label %157, label %155

155:                                              ; preds = %153
  %156 = inttoptr i64 %110 to i8*
  tail call void @_ZdlPv(i8* %156) #10
  br label %157

157:                                              ; preds = %99, %153, %155
  %158 = phi i64 [ %105, %99 ], [ %140, %153 ], [ %140, %155 ]
  %159 = phi i64 [ %90, %99 ], [ %148, %153 ], [ %148, %155 ]
  %160 = phi i64 [ %102, %99 ], [ %143, %153 ], [ %143, %155 ]
  %161 = phi i8** [ %104, %99 ], [ %139, %153 ], [ %139, %155 ]
  %162 = phi i8** [ %101, %99 ], [ %142, %153 ], [ %142, %155 ]
  %163 = icmp ult i8** %162, %161
  br i1 %163, label %164, label %171

164:                                              ; preds = %157
  %165 = bitcast i8** %162 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.4 to i64), i64* %165, align 8
  %166 = getelementptr inbounds i8*, i8** %162, i64 1
  %167 = ptrtoint i8** %166 to i64
  %168 = bitcast i8*** %9 to i64*
  store i64 %167, i64* %168, align 8
  %169 = load i8**, i8*** %10, align 8
  %170 = ptrtoint i8** %169 to i64
  br label %222

171:                                              ; preds = %157
  %172 = ptrtoint i8** %162 to i64
  %173 = bitcast i8*** %9 to i64*
  %174 = bitcast %"class.std::__1::vector"* %5 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %172, %175
  %177 = ashr exact i64 %176, 3
  %178 = add nsw i64 %177, 1
  %179 = icmp ugt i64 %178, 2305843009213693951
  br i1 %179, label %180, label %182

180:                                              ; preds = %171
  %181 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %181) #11
  unreachable

182:                                              ; preds = %171
  %183 = bitcast i8*** %10 to i64*
  %184 = sub i64 %158, %175
  %185 = ashr exact i64 %184, 3
  %186 = icmp ult i64 %185, 1152921504606846975
  br i1 %186, label %187, label %195

187:                                              ; preds = %182
  %188 = ashr exact i64 %184, 2
  %189 = icmp ult i64 %188, %178
  %190 = select i1 %189, i64 %178, i64 %188
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %200, label %192

192:                                              ; preds = %187
  %193 = icmp ugt i64 %190, 2305843009213693951
  br i1 %193, label %194, label %195

194:                                              ; preds = %192
  tail call void @abort() #11
  unreachable

195:                                              ; preds = %192, %182
  %196 = phi i64 [ %190, %192 ], [ 2305843009213693951, %182 ]
  %197 = shl i64 %196, 3
  %198 = tail call i8* @_Znwm(i64 %197) #10
  %199 = bitcast i8* %198 to i8**
  br label %200

200:                                              ; preds = %195, %187
  %201 = phi i64 [ %196, %195 ], [ 0, %187 ]
  %202 = phi i8** [ %199, %195 ], [ null, %187 ]
  %203 = getelementptr inbounds i8*, i8** %202, i64 %177
  %204 = getelementptr inbounds i8*, i8** %202, i64 %201
  %205 = ptrtoint i8** %204 to i64
  %206 = bitcast i8** %203 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.4 to i64), i64* %206, align 8
  %207 = getelementptr inbounds i8*, i8** %203, i64 1
  %208 = ptrtoint i8** %207 to i64
  %209 = sub i64 %160, %175
  %210 = ashr exact i64 %209, 3
  %211 = sub nsw i64 0, %210
  %212 = getelementptr inbounds i8*, i8** %203, i64 %211
  %213 = ptrtoint i8** %212 to i64
  %214 = icmp sgt i64 %209, 0
  br i1 %214, label %215, label %218

215:                                              ; preds = %200
  %216 = bitcast i8** %212 to i8*
  %217 = inttoptr i64 %175 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %216, i8* align 8 %217, i64 %209, i1 false) #9
  br label %218

218:                                              ; preds = %215, %200
  store i64 %213, i64* %174, align 8
  store i64 %208, i64* %173, align 8
  store i64 %205, i64* %183, align 8
  %219 = icmp eq i64 %175, 0
  br i1 %219, label %222, label %220

220:                                              ; preds = %218
  %221 = inttoptr i64 %175 to i8*
  tail call void @_ZdlPv(i8* %221) #10
  br label %222

222:                                              ; preds = %164, %218, %220
  %223 = phi i64 [ %170, %164 ], [ %205, %218 ], [ %205, %220 ]
  %224 = phi i64 [ %159, %164 ], [ %213, %218 ], [ %213, %220 ]
  %225 = phi i64 [ %167, %164 ], [ %208, %218 ], [ %208, %220 ]
  %226 = phi i8** [ %169, %164 ], [ %204, %218 ], [ %204, %220 ]
  %227 = phi i8** [ %166, %164 ], [ %207, %218 ], [ %207, %220 ]
  %228 = icmp ult i8** %227, %226
  br i1 %228, label %229, label %235

229:                                              ; preds = %222
  %230 = bitcast i8** %227 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.5 to i64), i64* %230, align 8
  %231 = getelementptr inbounds i8*, i8** %227, i64 1
  %232 = ptrtoint i8** %231 to i64
  %233 = bitcast i8*** %9 to i64*
  store i64 %232, i64* %233, align 8
  %234 = load i8**, i8*** %10, align 8
  br label %286

235:                                              ; preds = %222
  %236 = ptrtoint i8** %227 to i64
  %237 = bitcast i8*** %9 to i64*
  %238 = bitcast %"class.std::__1::vector"* %5 to i64*
  %239 = load i64, i64* %238, align 8
  %240 = sub i64 %236, %239
  %241 = ashr exact i64 %240, 3
  %242 = add nsw i64 %241, 1
  %243 = icmp ugt i64 %242, 2305843009213693951
  br i1 %243, label %244, label %246

244:                                              ; preds = %235
  %245 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %245) #11
  unreachable

246:                                              ; preds = %235
  %247 = bitcast i8*** %10 to i64*
  %248 = sub i64 %223, %239
  %249 = ashr exact i64 %248, 3
  %250 = icmp ult i64 %249, 1152921504606846975
  br i1 %250, label %251, label %259

251:                                              ; preds = %246
  %252 = ashr exact i64 %248, 2
  %253 = icmp ult i64 %252, %242
  %254 = select i1 %253, i64 %242, i64 %252
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %264, label %256

256:                                              ; preds = %251
  %257 = icmp ugt i64 %254, 2305843009213693951
  br i1 %257, label %258, label %259

258:                                              ; preds = %256
  tail call void @abort() #11
  unreachable

259:                                              ; preds = %256, %246
  %260 = phi i64 [ %254, %256 ], [ 2305843009213693951, %246 ]
  %261 = shl i64 %260, 3
  %262 = tail call i8* @_Znwm(i64 %261) #10
  %263 = bitcast i8* %262 to i8**
  br label %264

264:                                              ; preds = %259, %251
  %265 = phi i64 [ %260, %259 ], [ 0, %251 ]
  %266 = phi i8** [ %263, %259 ], [ null, %251 ]
  %267 = getelementptr inbounds i8*, i8** %266, i64 %241
  %268 = getelementptr inbounds i8*, i8** %266, i64 %265
  %269 = ptrtoint i8** %268 to i64
  %270 = bitcast i8** %267 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.5 to i64), i64* %270, align 8
  %271 = getelementptr inbounds i8*, i8** %267, i64 1
  %272 = ptrtoint i8** %271 to i64
  %273 = sub i64 %225, %239
  %274 = ashr exact i64 %273, 3
  %275 = sub nsw i64 0, %274
  %276 = getelementptr inbounds i8*, i8** %267, i64 %275
  %277 = ptrtoint i8** %276 to i64
  %278 = icmp sgt i64 %273, 0
  br i1 %278, label %279, label %282

279:                                              ; preds = %264
  %280 = bitcast i8** %276 to i8*
  %281 = inttoptr i64 %239 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %280, i8* align 8 %281, i64 %273, i1 false) #9
  br label %282

282:                                              ; preds = %279, %264
  store i64 %277, i64* %238, align 8
  store i64 %272, i64* %237, align 8
  store i64 %269, i64* %247, align 8
  %283 = icmp eq i64 %239, 0
  br i1 %283, label %286, label %284

284:                                              ; preds = %282
  %285 = inttoptr i64 %239 to i8*
  tail call void @_ZdlPv(i8* %285) #10
  br label %286

286:                                              ; preds = %284, %282, %229, %38
  %287 = phi i64 [ %277, %284 ], [ %277, %282 ], [ %224, %229 ], [ %43, %38 ]
  %288 = phi i64 [ %272, %284 ], [ %272, %282 ], [ %232, %229 ], [ %40, %38 ]
  %289 = phi i8** [ %268, %284 ], [ %268, %282 ], [ %234, %229 ], [ %39, %38 ]
  %290 = phi i8** [ %271, %284 ], [ %271, %282 ], [ %231, %229 ], [ %39, %38 ]
  %291 = icmp ult i8** %290, %289
  %292 = ptrtoint i8** %289 to i64
  br i1 %291, label %293, label %298

293:                                              ; preds = %286
  %294 = bitcast i8** %290 to i64*
  store i64 ptrtoint ([7 x i8]* @.str.6 to i64), i64* %294, align 8
  %295 = getelementptr inbounds i8*, i8** %290, i64 1
  %296 = ptrtoint i8** %295 to i64
  %297 = bitcast i8*** %9 to i64*
  store i64 %296, i64* %297, align 8
  br label %349

298:                                              ; preds = %286
  %299 = ptrtoint i8** %290 to i64
  %300 = bitcast i8*** %9 to i64*
  %301 = bitcast %"class.std::__1::vector"* %5 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = sub i64 %299, %302
  %304 = ashr exact i64 %303, 3
  %305 = add nsw i64 %304, 1
  %306 = icmp ugt i64 %305, 2305843009213693951
  br i1 %306, label %307, label %309

307:                                              ; preds = %298
  %308 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %308) #11
  unreachable

309:                                              ; preds = %298
  %310 = bitcast i8*** %10 to i64*
  %311 = sub i64 %292, %302
  %312 = ashr exact i64 %311, 3
  %313 = icmp ult i64 %312, 1152921504606846975
  br i1 %313, label %314, label %322

314:                                              ; preds = %309
  %315 = ashr exact i64 %311, 2
  %316 = icmp ult i64 %315, %305
  %317 = select i1 %316, i64 %305, i64 %315
  %318 = icmp eq i64 %317, 0
  br i1 %318, label %327, label %319

319:                                              ; preds = %314
  %320 = icmp ugt i64 %317, 2305843009213693951
  br i1 %320, label %321, label %322

321:                                              ; preds = %319
  tail call void @abort() #11
  unreachable

322:                                              ; preds = %319, %309
  %323 = phi i64 [ %317, %319 ], [ 2305843009213693951, %309 ]
  %324 = shl i64 %323, 3
  %325 = tail call i8* @_Znwm(i64 %324) #10
  %326 = bitcast i8* %325 to i8**
  br label %327

327:                                              ; preds = %322, %314
  %328 = phi i64 [ %323, %322 ], [ 0, %314 ]
  %329 = phi i8** [ %326, %322 ], [ null, %314 ]
  %330 = getelementptr inbounds i8*, i8** %329, i64 %304
  %331 = getelementptr inbounds i8*, i8** %329, i64 %328
  %332 = ptrtoint i8** %331 to i64
  %333 = bitcast i8** %330 to i64*
  store i64 ptrtoint ([7 x i8]* @.str.6 to i64), i64* %333, align 8
  %334 = getelementptr inbounds i8*, i8** %330, i64 1
  %335 = ptrtoint i8** %334 to i64
  %336 = sub i64 %288, %302
  %337 = ashr exact i64 %336, 3
  %338 = sub nsw i64 0, %337
  %339 = getelementptr inbounds i8*, i8** %330, i64 %338
  %340 = ptrtoint i8** %339 to i64
  %341 = icmp sgt i64 %336, 0
  br i1 %341, label %342, label %345

342:                                              ; preds = %327
  %343 = bitcast i8** %339 to i8*
  %344 = inttoptr i64 %302 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %343, i8* align 8 %344, i64 %336, i1 false) #9
  br label %345

345:                                              ; preds = %342, %327
  store i64 %340, i64* %301, align 8
  store i64 %335, i64* %300, align 8
  store i64 %332, i64* %310, align 8
  %346 = icmp eq i64 %302, 0
  br i1 %346, label %349, label %347

347:                                              ; preds = %345
  %348 = inttoptr i64 %302 to i8*
  tail call void @_ZdlPv(i8* %348) #10
  br label %349

349:                                              ; preds = %293, %345, %347
  %350 = phi i64 [ %287, %293 ], [ %340, %345 ], [ %340, %347 ]
  %351 = phi i8** [ %295, %293 ], [ %334, %345 ], [ %334, %347 ]
  %352 = phi i64 [ %296, %293 ], [ %335, %345 ], [ %335, %347 ]
  %353 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 14
  %354 = load i8, i8* %353, align 1, !range !2
  %355 = icmp eq i8 %354, 0
  br i1 %355, label %416, label %356

356:                                              ; preds = %349
  %357 = load i8**, i8*** %10, align 8
  %358 = icmp ult i8** %351, %357
  %359 = ptrtoint i8** %357 to i64
  br i1 %358, label %360, label %365

360:                                              ; preds = %356
  %361 = bitcast i8** %351 to i64*
  store i64 ptrtoint ([8 x i8]* @.str.7 to i64), i64* %361, align 8
  %362 = getelementptr inbounds i8*, i8** %351, i64 1
  %363 = ptrtoint i8** %362 to i64
  %364 = bitcast i8*** %9 to i64*
  store i64 %363, i64* %364, align 8
  br label %416

365:                                              ; preds = %356
  %366 = ptrtoint i8** %351 to i64
  %367 = bitcast i8*** %9 to i64*
  %368 = bitcast %"class.std::__1::vector"* %5 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = sub i64 %366, %369
  %371 = ashr exact i64 %370, 3
  %372 = add nsw i64 %371, 1
  %373 = icmp ugt i64 %372, 2305843009213693951
  br i1 %373, label %374, label %376

374:                                              ; preds = %365
  %375 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %375) #11
  unreachable

376:                                              ; preds = %365
  %377 = bitcast i8*** %10 to i64*
  %378 = sub i64 %359, %369
  %379 = ashr exact i64 %378, 3
  %380 = icmp ult i64 %379, 1152921504606846975
  br i1 %380, label %381, label %389

381:                                              ; preds = %376
  %382 = ashr exact i64 %378, 2
  %383 = icmp ult i64 %382, %372
  %384 = select i1 %383, i64 %372, i64 %382
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %394, label %386

386:                                              ; preds = %381
  %387 = icmp ugt i64 %384, 2305843009213693951
  br i1 %387, label %388, label %389

388:                                              ; preds = %386
  tail call void @abort() #11
  unreachable

389:                                              ; preds = %386, %376
  %390 = phi i64 [ %384, %386 ], [ 2305843009213693951, %376 ]
  %391 = shl i64 %390, 3
  %392 = tail call i8* @_Znwm(i64 %391) #10
  %393 = bitcast i8* %392 to i8**
  br label %394

394:                                              ; preds = %389, %381
  %395 = phi i64 [ %390, %389 ], [ 0, %381 ]
  %396 = phi i8** [ %393, %389 ], [ null, %381 ]
  %397 = getelementptr inbounds i8*, i8** %396, i64 %371
  %398 = getelementptr inbounds i8*, i8** %396, i64 %395
  %399 = ptrtoint i8** %398 to i64
  %400 = bitcast i8** %397 to i64*
  store i64 ptrtoint ([8 x i8]* @.str.7 to i64), i64* %400, align 8
  %401 = getelementptr inbounds i8*, i8** %397, i64 1
  %402 = ptrtoint i8** %401 to i64
  %403 = sub i64 %352, %369
  %404 = ashr exact i64 %403, 3
  %405 = sub nsw i64 0, %404
  %406 = getelementptr inbounds i8*, i8** %397, i64 %405
  %407 = ptrtoint i8** %406 to i64
  %408 = icmp sgt i64 %403, 0
  br i1 %408, label %409, label %412

409:                                              ; preds = %394
  %410 = bitcast i8** %406 to i8*
  %411 = inttoptr i64 %369 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %410, i8* align 8 %411, i64 %403, i1 false) #9
  br label %412

412:                                              ; preds = %409, %394
  store i64 %407, i64* %368, align 8
  store i64 %402, i64* %367, align 8
  store i64 %399, i64* %377, align 8
  %413 = icmp eq i64 %369, 0
  br i1 %413, label %416, label %414

414:                                              ; preds = %412
  %415 = inttoptr i64 %369 to i8*
  tail call void @_ZdlPv(i8* %415) #10
  br label %416

416:                                              ; preds = %414, %412, %360, %349
  %417 = phi i64 [ %407, %414 ], [ %407, %412 ], [ %350, %360 ], [ %350, %349 ]
  %418 = phi i8** [ %401, %414 ], [ %401, %412 ], [ %362, %360 ], [ %351, %349 ]
  %419 = phi i64 [ %402, %414 ], [ %402, %412 ], [ %363, %360 ], [ %352, %349 ]
  %420 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 16
  %421 = load i32, i32* %420, align 4
  %422 = icmp eq i32 %421, 1
  br i1 %422, label %423, label %548

423:                                              ; preds = %416
  %424 = load i8**, i8*** %10, align 8
  %425 = icmp ult i8** %418, %424
  %426 = ptrtoint i8** %424 to i64
  br i1 %425, label %427, label %434

427:                                              ; preds = %423
  %428 = bitcast i8** %418 to i64*
  store i64 ptrtoint ([9 x i8]* @.str.8 to i64), i64* %428, align 8
  %429 = getelementptr inbounds i8*, i8** %418, i64 1
  %430 = ptrtoint i8** %429 to i64
  %431 = bitcast i8*** %9 to i64*
  store i64 %430, i64* %431, align 8
  %432 = load i8**, i8*** %10, align 8
  %433 = ptrtoint i8** %432 to i64
  br label %485

434:                                              ; preds = %423
  %435 = ptrtoint i8** %418 to i64
  %436 = bitcast i8*** %9 to i64*
  %437 = bitcast %"class.std::__1::vector"* %5 to i64*
  %438 = load i64, i64* %437, align 8
  %439 = sub i64 %435, %438
  %440 = ashr exact i64 %439, 3
  %441 = add nsw i64 %440, 1
  %442 = icmp ugt i64 %441, 2305843009213693951
  br i1 %442, label %443, label %445

443:                                              ; preds = %434
  %444 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %444) #11
  unreachable

445:                                              ; preds = %434
  %446 = bitcast i8*** %10 to i64*
  %447 = sub i64 %426, %438
  %448 = ashr exact i64 %447, 3
  %449 = icmp ult i64 %448, 1152921504606846975
  br i1 %449, label %450, label %458

450:                                              ; preds = %445
  %451 = ashr exact i64 %447, 2
  %452 = icmp ult i64 %451, %441
  %453 = select i1 %452, i64 %441, i64 %451
  %454 = icmp eq i64 %453, 0
  br i1 %454, label %463, label %455

455:                                              ; preds = %450
  %456 = icmp ugt i64 %453, 2305843009213693951
  br i1 %456, label %457, label %458

457:                                              ; preds = %455
  tail call void @abort() #11
  unreachable

458:                                              ; preds = %455, %445
  %459 = phi i64 [ %453, %455 ], [ 2305843009213693951, %445 ]
  %460 = shl i64 %459, 3
  %461 = tail call i8* @_Znwm(i64 %460) #10
  %462 = bitcast i8* %461 to i8**
  br label %463

463:                                              ; preds = %458, %450
  %464 = phi i64 [ %459, %458 ], [ 0, %450 ]
  %465 = phi i8** [ %462, %458 ], [ null, %450 ]
  %466 = getelementptr inbounds i8*, i8** %465, i64 %440
  %467 = getelementptr inbounds i8*, i8** %465, i64 %464
  %468 = ptrtoint i8** %467 to i64
  %469 = bitcast i8** %466 to i64*
  store i64 ptrtoint ([9 x i8]* @.str.8 to i64), i64* %469, align 8
  %470 = getelementptr inbounds i8*, i8** %466, i64 1
  %471 = ptrtoint i8** %470 to i64
  %472 = sub i64 %419, %438
  %473 = ashr exact i64 %472, 3
  %474 = sub nsw i64 0, %473
  %475 = getelementptr inbounds i8*, i8** %466, i64 %474
  %476 = ptrtoint i8** %475 to i64
  %477 = icmp sgt i64 %472, 0
  br i1 %477, label %478, label %481

478:                                              ; preds = %463
  %479 = bitcast i8** %475 to i8*
  %480 = inttoptr i64 %438 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %479, i8* align 8 %480, i64 %472, i1 false) #9
  br label %481

481:                                              ; preds = %478, %463
  store i64 %476, i64* %437, align 8
  store i64 %471, i64* %436, align 8
  store i64 %468, i64* %446, align 8
  %482 = icmp eq i64 %438, 0
  br i1 %482, label %485, label %483

483:                                              ; preds = %481
  %484 = inttoptr i64 %438 to i8*
  tail call void @_ZdlPv(i8* %484) #10
  br label %485

485:                                              ; preds = %427, %481, %483
  %486 = phi i64 [ %433, %427 ], [ %468, %481 ], [ %468, %483 ]
  %487 = phi i64 [ %417, %427 ], [ %476, %481 ], [ %476, %483 ]
  %488 = phi i64 [ %430, %427 ], [ %471, %481 ], [ %471, %483 ]
  %489 = phi i8** [ %432, %427 ], [ %467, %481 ], [ %467, %483 ]
  %490 = phi i8** [ %429, %427 ], [ %470, %481 ], [ %470, %483 ]
  %491 = icmp ult i8** %490, %489
  br i1 %491, label %492, label %497

492:                                              ; preds = %485
  %493 = bitcast i8** %490 to i64*
  store i64 ptrtoint ([5 x i8]* @.str.9 to i64), i64* %493, align 8
  %494 = getelementptr inbounds i8*, i8** %490, i64 1
  %495 = ptrtoint i8** %494 to i64
  %496 = bitcast i8*** %9 to i64*
  store i64 %495, i64* %496, align 8
  br label %548

497:                                              ; preds = %485
  %498 = ptrtoint i8** %490 to i64
  %499 = bitcast i8*** %9 to i64*
  %500 = bitcast %"class.std::__1::vector"* %5 to i64*
  %501 = load i64, i64* %500, align 8
  %502 = sub i64 %498, %501
  %503 = ashr exact i64 %502, 3
  %504 = add nsw i64 %503, 1
  %505 = icmp ugt i64 %504, 2305843009213693951
  br i1 %505, label %506, label %508

506:                                              ; preds = %497
  %507 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %507) #11
  unreachable

508:                                              ; preds = %497
  %509 = bitcast i8*** %10 to i64*
  %510 = sub i64 %486, %501
  %511 = ashr exact i64 %510, 3
  %512 = icmp ult i64 %511, 1152921504606846975
  br i1 %512, label %513, label %521

513:                                              ; preds = %508
  %514 = ashr exact i64 %510, 2
  %515 = icmp ult i64 %514, %504
  %516 = select i1 %515, i64 %504, i64 %514
  %517 = icmp eq i64 %516, 0
  br i1 %517, label %526, label %518

518:                                              ; preds = %513
  %519 = icmp ugt i64 %516, 2305843009213693951
  br i1 %519, label %520, label %521

520:                                              ; preds = %518
  tail call void @abort() #11
  unreachable

521:                                              ; preds = %518, %508
  %522 = phi i64 [ %516, %518 ], [ 2305843009213693951, %508 ]
  %523 = shl i64 %522, 3
  %524 = tail call i8* @_Znwm(i64 %523) #10
  %525 = bitcast i8* %524 to i8**
  br label %526

526:                                              ; preds = %521, %513
  %527 = phi i64 [ %522, %521 ], [ 0, %513 ]
  %528 = phi i8** [ %525, %521 ], [ null, %513 ]
  %529 = getelementptr inbounds i8*, i8** %528, i64 %503
  %530 = getelementptr inbounds i8*, i8** %528, i64 %527
  %531 = ptrtoint i8** %530 to i64
  %532 = bitcast i8** %529 to i64*
  store i64 ptrtoint ([5 x i8]* @.str.9 to i64), i64* %532, align 8
  %533 = getelementptr inbounds i8*, i8** %529, i64 1
  %534 = ptrtoint i8** %533 to i64
  %535 = sub i64 %488, %501
  %536 = ashr exact i64 %535, 3
  %537 = sub nsw i64 0, %536
  %538 = getelementptr inbounds i8*, i8** %529, i64 %537
  %539 = ptrtoint i8** %538 to i64
  %540 = icmp sgt i64 %535, 0
  br i1 %540, label %541, label %544

541:                                              ; preds = %526
  %542 = bitcast i8** %538 to i8*
  %543 = inttoptr i64 %501 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %542, i8* align 8 %543, i64 %535, i1 false) #9
  br label %544

544:                                              ; preds = %541, %526
  store i64 %539, i64* %500, align 8
  store i64 %534, i64* %499, align 8
  store i64 %531, i64* %509, align 8
  %545 = icmp eq i64 %501, 0
  br i1 %545, label %548, label %546

546:                                              ; preds = %544
  %547 = inttoptr i64 %501 to i8*
  tail call void @_ZdlPv(i8* %547) #10
  br label %548

548:                                              ; preds = %546, %544, %492, %416
  %549 = phi i64 [ %539, %546 ], [ %539, %544 ], [ %487, %492 ], [ %417, %416 ]
  %550 = phi i64 [ %534, %546 ], [ %534, %544 ], [ %495, %492 ], [ %419, %416 ]
  %551 = phi i8** [ %533, %546 ], [ %533, %544 ], [ %494, %492 ], [ %418, %416 ]
  %552 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 1
  %553 = load i32, i32* %552, align 4
  %554 = icmp eq i32 %553, 1
  br i1 %554, label %557, label %555

555:                                              ; preds = %548
  %556 = bitcast i8*** %9 to i64*
  br label %617

557:                                              ; preds = %548
  %558 = load i8**, i8*** %10, align 8
  %559 = icmp ult i8** %551, %558
  %560 = ptrtoint i8** %558 to i64
  br i1 %559, label %561, label %566

561:                                              ; preds = %557
  %562 = bitcast i8** %551 to i64*
  store i64 ptrtoint ([5 x i8]* @.str.10 to i64), i64* %562, align 8
  %563 = getelementptr inbounds i8*, i8** %551, i64 1
  %564 = ptrtoint i8** %563 to i64
  %565 = bitcast i8*** %9 to i64*
  store i64 %564, i64* %565, align 8
  br label %617

566:                                              ; preds = %557
  %567 = ptrtoint i8** %551 to i64
  %568 = bitcast i8*** %9 to i64*
  %569 = bitcast %"class.std::__1::vector"* %5 to i64*
  %570 = load i64, i64* %569, align 8
  %571 = sub i64 %567, %570
  %572 = ashr exact i64 %571, 3
  %573 = add nsw i64 %572, 1
  %574 = icmp ugt i64 %573, 2305843009213693951
  br i1 %574, label %575, label %577

575:                                              ; preds = %566
  %576 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %576) #11
  unreachable

577:                                              ; preds = %566
  %578 = bitcast i8*** %10 to i64*
  %579 = sub i64 %560, %570
  %580 = ashr exact i64 %579, 3
  %581 = icmp ult i64 %580, 1152921504606846975
  br i1 %581, label %582, label %590

582:                                              ; preds = %577
  %583 = ashr exact i64 %579, 2
  %584 = icmp ult i64 %583, %573
  %585 = select i1 %584, i64 %573, i64 %583
  %586 = icmp eq i64 %585, 0
  br i1 %586, label %595, label %587

587:                                              ; preds = %582
  %588 = icmp ugt i64 %585, 2305843009213693951
  br i1 %588, label %589, label %590

589:                                              ; preds = %587
  tail call void @abort() #11
  unreachable

590:                                              ; preds = %587, %577
  %591 = phi i64 [ %585, %587 ], [ 2305843009213693951, %577 ]
  %592 = shl i64 %591, 3
  %593 = tail call i8* @_Znwm(i64 %592) #10
  %594 = bitcast i8* %593 to i8**
  br label %595

595:                                              ; preds = %590, %582
  %596 = phi i64 [ %591, %590 ], [ 0, %582 ]
  %597 = phi i8** [ %594, %590 ], [ null, %582 ]
  %598 = getelementptr inbounds i8*, i8** %597, i64 %572
  %599 = getelementptr inbounds i8*, i8** %597, i64 %596
  %600 = ptrtoint i8** %599 to i64
  %601 = bitcast i8** %598 to i64*
  store i64 ptrtoint ([5 x i8]* @.str.10 to i64), i64* %601, align 8
  %602 = getelementptr inbounds i8*, i8** %598, i64 1
  %603 = ptrtoint i8** %602 to i64
  %604 = sub i64 %550, %570
  %605 = ashr exact i64 %604, 3
  %606 = sub nsw i64 0, %605
  %607 = getelementptr inbounds i8*, i8** %598, i64 %606
  %608 = ptrtoint i8** %607 to i64
  %609 = icmp sgt i64 %604, 0
  br i1 %609, label %610, label %613

610:                                              ; preds = %595
  %611 = bitcast i8** %607 to i8*
  %612 = inttoptr i64 %570 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %611, i8* align 8 %612, i64 %604, i1 false) #9
  br label %613

613:                                              ; preds = %610, %595
  store i64 %608, i64* %569, align 8
  store i64 %603, i64* %568, align 8
  store i64 %600, i64* %578, align 8
  %614 = icmp eq i64 %570, 0
  br i1 %614, label %617, label %615

615:                                              ; preds = %613
  %616 = inttoptr i64 %570 to i8*
  tail call void @_ZdlPv(i8* %616) #10
  br label %617

617:                                              ; preds = %555, %615, %613, %561
  %618 = phi i64* [ %556, %555 ], [ %568, %615 ], [ %568, %613 ], [ %565, %561 ]
  %619 = phi i64 [ %549, %555 ], [ %608, %615 ], [ %608, %613 ], [ %549, %561 ]
  %620 = phi i64 [ %550, %555 ], [ %603, %615 ], [ %603, %613 ], [ %564, %561 ]
  %621 = sub i64 %620, %619
  %622 = ashr exact i64 %621, 3
  %623 = bitcast i32** %13 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = bitcast %"class.std::__1::vector.1"* %6 to i64*
  %626 = load i64, i64* %625, align 8
  %627 = sub i64 %624, %626
  %628 = ashr exact i64 %627, 2
  %629 = icmp ugt i64 %622, %628
  %630 = inttoptr i64 %626 to i32*
  br i1 %629, label %631, label %639

631:                                              ; preds = %617
  %632 = bitcast %"class.std::__1::vector"* %5 to i64*
  %633 = sub nsw i64 %622, %628
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"* nonnull %6, i64 %633) #9
  %634 = load i64, i64* %618, align 8
  %635 = load i64, i64* %632, align 8
  %636 = load i32*, i32** %12, align 8
  %637 = sub i64 %634, %635
  %638 = ashr exact i64 %637, 3
  br label %643

639:                                              ; preds = %617
  %640 = icmp ult i64 %622, %628
  br i1 %640, label %641, label %643

641:                                              ; preds = %639
  %642 = getelementptr inbounds i32, i32* %630, i64 %622
  store i32* %642, i32** %13, align 8
  br label %643

643:                                              ; preds = %631, %639, %641
  %644 = phi i64 [ %638, %631 ], [ %622, %639 ], [ %622, %641 ]
  %645 = phi i64 [ %637, %631 ], [ %621, %639 ], [ %621, %641 ]
  %646 = phi i32* [ %636, %631 ], [ %630, %639 ], [ %630, %641 ]
  %647 = phi i64 [ %635, %631 ], [ %619, %639 ], [ %619, %641 ]
  %648 = inttoptr i64 %647 to i8**
  %649 = icmp eq i64 %645, 0
  br i1 %649, label %664, label %650

650:                                              ; preds = %643
  %651 = bitcast %"class.gpu::gles2::GLES2Interface"* %1 to void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)***
  br label %652

652:                                              ; preds = %652, %650
  %653 = phi i64 [ 0, %650 ], [ %662, %652 ]
  %654 = load i32, i32* %3, align 4
  %655 = add nsw i32 %654, 1
  store i32 %655, i32* %3, align 4
  %656 = getelementptr inbounds i32, i32* %646, i64 %653
  store i32 %654, i32* %656, align 4
  %657 = getelementptr inbounds i8*, i8** %648, i64 %653
  %658 = load i8*, i8** %657, align 8
  %659 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)**, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)*** %651, align 8
  %660 = getelementptr inbounds void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)** %659, i64 310
  %661 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)** %660, align 8
  call void %661(%"class.gpu::gles2::GLES2Interface"* %1, i32 %2, i32 %654, i8* %658) #9
  %662 = add nuw i64 %653, 1
  %663 = icmp eq i64 %662, %644
  br i1 %663, label %664, label %652

664:                                              ; preds = %652, %643
  %665 = load i32, i32* %14, align 4
  switch i32 %665, label %674 [
    i32 3, label %670
    i32 1, label %666
    i32 2, label %666
  ]

666:                                              ; preds = %664, %664
  %667 = load i32*, i32** %12, align 8
  %668 = load i32, i32* %667, align 4
  %669 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 4
  store i32 %668, i32* %669, align 4
  br label %674

670:                                              ; preds = %664
  %671 = load i32*, i32** %12, align 8
  %672 = load i32, i32* %671, align 4
  %673 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 5
  store i32 %672, i32* %673, align 4
  br label %674

674:                                              ; preds = %664, %670, %666
  %675 = phi i64 [ 0, %664 ], [ 1, %666 ], [ 1, %670 ]
  %676 = load i8, i8* %44, align 4, !range !2
  %677 = icmp eq i8 %676, 0
  br i1 %677, label %678, label %680

678:                                              ; preds = %674
  %679 = load i32*, i32** %12, align 8
  br label %698

680:                                              ; preds = %674
  %681 = add nuw nsw i64 %675, 1
  %682 = load i32*, i32** %12, align 8
  %683 = getelementptr inbounds i32, i32* %682, i64 %675
  %684 = load i32, i32* %683, align 4
  %685 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 7
  store i32 %684, i32* %685, align 4
  %686 = or i64 %675, 2
  %687 = getelementptr inbounds i32, i32* %682, i64 %681
  %688 = load i32, i32* %687, align 4
  %689 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 8
  store i32 %688, i32* %689, align 4
  %690 = add nuw nsw i64 %686, 1
  %691 = getelementptr inbounds i32, i32* %682, i64 %686
  %692 = load i32, i32* %691, align 4
  %693 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 9
  store i32 %692, i32* %693, align 4
  %694 = add nuw nsw i64 %686, 2
  %695 = getelementptr inbounds i32, i32* %682, i64 %690
  %696 = load i32, i32* %695, align 4
  %697 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 10
  store i32 %696, i32* %697, align 4
  br label %698

698:                                              ; preds = %678, %680
  %699 = phi i32* [ %682, %680 ], [ %679, %678 ]
  %700 = phi i64 [ %694, %680 ], [ %675, %678 ]
  %701 = add nsw i64 %700, 1
  %702 = getelementptr inbounds i32, i32* %699, i64 %700
  %703 = load i32, i32* %702, align 4
  %704 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 11
  store i32 %703, i32* %704, align 4
  %705 = load i8, i8* %353, align 1, !range !2
  %706 = icmp eq i8 %705, 0
  br i1 %706, label %712, label %707

707:                                              ; preds = %698
  %708 = add nsw i64 %700, 2
  %709 = getelementptr inbounds i32, i32* %699, i64 %701
  %710 = load i32, i32* %709, align 4
  %711 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 15
  store i32 %710, i32* %711, align 4
  br label %712

712:                                              ; preds = %698, %707
  %713 = phi i64 [ %708, %707 ], [ %701, %698 ]
  %714 = load i32, i32* %420, align 4
  %715 = icmp eq i32 %714, 1
  br i1 %715, label %716, label %725

716:                                              ; preds = %712
  %717 = add i64 %713, 1
  %718 = getelementptr inbounds i32, i32* %699, i64 %713
  %719 = load i32, i32* %718, align 4
  %720 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 17
  store i32 %719, i32* %720, align 4
  %721 = add i64 %713, 2
  %722 = getelementptr inbounds i32, i32* %699, i64 %717
  %723 = load i32, i32* %722, align 4
  %724 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 18
  store i32 %723, i32* %724, align 4
  br label %725

725:                                              ; preds = %716, %712
  %726 = phi i64 [ %721, %716 ], [ %713, %712 ]
  %727 = load i32, i32* %552, align 4
  %728 = icmp eq i32 %727, 1
  br i1 %728, label %729, label %733

729:                                              ; preds = %725
  %730 = getelementptr inbounds i32, i32* %699, i64 %726
  %731 = load i32, i32* %730, align 4
  %732 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %0, i64 0, i32 12
  store i32 %731, i32* %732, align 4
  br label %733

733:                                              ; preds = %729, %725
  %734 = icmp eq i32* %699, null
  br i1 %734, label %738, label %735

735:                                              ; preds = %733
  %736 = ptrtoint i32* %699 to i64
  store i64 %736, i64* %623, align 8
  %737 = bitcast i32* %699 to i8*
  call void @_ZdlPv(i8* %737) #10
  br label %738

738:                                              ; preds = %733, %735
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  %739 = load i8**, i8*** %8, align 8
  %740 = icmp eq i8** %739, null
  br i1 %740, label %744, label %741

741:                                              ; preds = %738
  %742 = ptrtoint i8** %739 to i64
  store i64 %742, i64* %618, align 8
  %743 = bitcast i8** %739 to i8*
  call void @_ZdlPv(i8* %743) #10
  br label %744

744:                                              ; preds = %738, %741
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz12VertexShader15GetShaderStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.viz::VertexShader"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = tail call i8* @_Znwm(i64 48) #10
  store i8* %9, i8** %7, align 8
  %10 = bitcast i64* %8 to <2 x i64>*
  store <2 x i64> <i64 32, i64 -9223372036854775760>, <2 x i64>* %10, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %9, i8* align 1 getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i64 0, i64 0), i64 32, i1 false) #9
  %11 = getelementptr inbounds i8, i8* %9, i64 32
  store i8 0, i8* %11, align 1
  %12 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #9
  %13 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 24, i1 false)
  store i8 14, i8* %16, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %12, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i64 14, i1 false) #9
  %18 = getelementptr inbounds i8, i8* %12, i64 14
  store i8 0, i8* %18, align 2
  %19 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 0
  %20 = load i8, i8* %19, align 4, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %43, label %22

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %23) #9
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* nonnull sret %5, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i32 9) #9
  %24 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %25 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %24, i64 0, i32 1, i32 0
  %26 = load i8, i8* %25, align 1
  %27 = icmp slt i8 %26, 0
  %28 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = zext i8 %26 to i64
  %33 = select i1 %27, i8* %29, i8* %23
  %34 = select i1 %27, i64 %31, i64 %32
  %35 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %33, i64 %34) #9
  %36 = load i8, i8* %25, align 1
  %37 = icmp slt i8 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %22
  %39 = load i8*, i8** %28, align 8
  call void @_ZdlPv(i8* %39) #10
  br label %40

40:                                               ; preds = %38, %22
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %23) #9
  %41 = load i8, i8* %19, align 4
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %51

43:                                               ; preds = %2, %40
  %44 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 14
  %45 = load i8, i8* %44, align 1, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %61

51:                                               ; preds = %43, %40, %47
  %52 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0)) #9
  %53 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i64 0, i64 0)) #9
  %54 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16, i64 0, i64 0)) #9
  %55 = load i8, i8* %19, align 4, !range !2
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %51
  %58 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.17, i64 0, i64 0)) #9
  br label %59

59:                                               ; preds = %51, %57
  %60 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)) #9
  br label %61

61:                                               ; preds = %47, %59
  %62 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i64 0, i64 0)) #9
  %63 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.20, i64 0, i64 0)) #9
  %64 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  switch i32 %65, label %71 [
    i32 0, label %68
    i32 1, label %66
  ]

66:                                               ; preds = %61
  %67 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.22, i64 0, i64 0)) #9
  br label %68

68:                                               ; preds = %61, %66
  %69 = phi i8* [ getelementptr inbounds ([68 x i8], [68 x i8]* @.str.23, i64 0, i64 0), %66 ], [ getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0), %61 ]
  %70 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %69) #9
  br label %71

71:                                               ; preds = %68, %61
  %72 = load i8, i8* %19, align 4, !range !2
  %73 = icmp eq i8 %72, 0
  %74 = select i1 %73, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i64 0, i64 0)
  %75 = select i1 %73, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i64 0, i64 0)
  %76 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %74) #9
  %77 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %75) #9
  %78 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 16
  %79 = load i32, i32* %78, align 4
  %80 = icmp eq i32 %79, 1
  br i1 %80, label %81, label %96

81:                                               ; preds = %71
  %82 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.28, i64 0, i64 0)) #9
  %83 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i64 0, i64 0)) #9
  %84 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.30, i64 0, i64 0)) #9
  %85 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.31, i64 0, i64 0)) #9
  %86 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i64 0, i64 0)) #9
  %87 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.33, i64 0, i64 0)) #9
  %88 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.34, i64 0, i64 0)) #9
  %89 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.35, i64 0, i64 0)) #9
  %90 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.36, i64 0, i64 0)) #9
  %91 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.37, i64 0, i64 0)) #9
  %92 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.38, i64 0, i64 0)) #9
  %93 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.39, i64 0, i64 0)) #9
  %94 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.40, i64 0, i64 0)) #9
  %95 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.41, i64 0, i64 0)) #9
  br label %96

96:                                               ; preds = %81, %71
  %97 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 2
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %148, label %100

100:                                              ; preds = %96
  %101 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 6
  %102 = load i8, i8* %101, align 4, !range !2
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %100
  %105 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.42, i64 0, i64 0)) #9
  br label %106

106:                                              ; preds = %100, %104
  %107 = phi i8* [ getelementptr inbounds ([46 x i8], [46 x i8]* @.str.43, i64 0, i64 0), %104 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.44, i64 0, i64 0), %100 ]
  %108 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %107) #9
  %109 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.45, i64 0, i64 0)) #9
  %110 = load i32, i32* %97, align 4
  switch i32 %110, label %116 [
    i32 2, label %111
    i32 1, label %113
  ]

111:                                              ; preds = %106
  %112 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.47, i64 0, i64 0)) #9
  br label %113

113:                                              ; preds = %106, %111
  %114 = phi i8* [ getelementptr inbounds ([31 x i8], [31 x i8]* @.str.48, i64 0, i64 0), %111 ], [ getelementptr inbounds ([27 x i8], [27 x i8]* @.str.46, i64 0, i64 0), %106 ]
  %115 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %114) #9
  br label %116

116:                                              ; preds = %113, %106
  %117 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 3
  %118 = load i32, i32* %117, align 4
  switch i32 %118, label %136 [
    i32 3, label %131
    i32 2, label %119
    i32 1, label %121
  ]

119:                                              ; preds = %116
  %120 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.49, i64 0, i64 0)) #9
  br label %121

121:                                              ; preds = %116, %119
  %122 = load i8, i8* %19, align 4, !range !2
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %128, label %124

124:                                              ; preds = %121
  %125 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.50, i64 0, i64 0)) #9
  %126 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.51, i64 0, i64 0)) #9
  %127 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.52, i64 0, i64 0)) #9
  br label %133

128:                                              ; preds = %121
  %129 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.54, i64 0, i64 0)) #9
  %130 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.55, i64 0, i64 0)) #9
  br label %133

131:                                              ; preds = %116
  %132 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.57, i64 0, i64 0)) #9
  br label %133

133:                                              ; preds = %131, %128, %124
  %134 = phi i8* [ getelementptr inbounds ([52 x i8], [52 x i8]* @.str.53, i64 0, i64 0), %124 ], [ getelementptr inbounds ([37 x i8], [37 x i8]* @.str.56, i64 0, i64 0), %128 ], [ getelementptr inbounds ([60 x i8], [60 x i8]* @.str.58, i64 0, i64 0), %131 ]
  %135 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %134) #9
  br label %136

136:                                              ; preds = %133, %116
  %137 = load i8, i8* %101, align 4, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %145, label %139

139:                                              ; preds = %136
  %140 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.59, i64 0, i64 0)) #9
  %141 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.60, i64 0, i64 0)) #9
  %142 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.61, i64 0, i64 0)) #9
  %143 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.62, i64 0, i64 0)) #9
  %144 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.63, i64 0, i64 0)) #9
  br label %145

145:                                              ; preds = %136, %139
  %146 = phi i8* [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.64, i64 0, i64 0), %139 ], [ getelementptr inbounds ([26 x i8], [26 x i8]* @.str.65, i64 0, i64 0), %136 ]
  %147 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %146) #9
  br label %148

148:                                              ; preds = %145, %96
  %149 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 14
  %150 = load i8, i8* %149, align 1, !range !2
  %151 = icmp eq i8 %150, 0
  br i1 %151, label %159, label %152

152:                                              ; preds = %148
  %153 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.66, i64 0, i64 0)) #9
  %154 = load i8, i8* %19, align 4, !range !2
  %155 = icmp eq i8 %154, 0
  %156 = select i1 %155, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.68, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.67, i64 0, i64 0)
  %157 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %156) #9
  %158 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.69, i64 0, i64 0)) #9
  br label %159

159:                                              ; preds = %148, %152
  %160 = getelementptr inbounds %"class.viz::VertexShader", %"class.viz::VertexShader"* %1, i64 0, i32 13
  %161 = load i8, i8* %160, align 4, !range !2
  %162 = icmp eq i8 %161, 0
  br i1 %162, label %167, label %163

163:                                              ; preds = %159
  %164 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.70, i64 0, i64 0)) #9
  %165 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.71, i64 0, i64 0)) #9
  %166 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.72, i64 0, i64 0)) #9
  br label %167

167:                                              ; preds = %159, %163
  %168 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.73, i64 0, i64 0)) #9
  %169 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %170 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %171 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %172 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %172, i8 0, i64 24, i1 false) #9, !alias.scope !3
  %173 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %174 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %173, i64 0, i32 1, i32 0
  %175 = load i8, i8* %174, align 1, !noalias !3
  %176 = icmp slt i8 %175, 0
  %177 = load i64, i64* %8, align 8, !noalias !3
  %178 = zext i8 %175 to i64
  %179 = select i1 %176, i64 %177, i64 %178
  %180 = load i8, i8* %16, align 1, !noalias !3
  %181 = icmp slt i8 %180, 0
  %182 = load i64, i64* %14, align 8, !noalias !3
  %183 = zext i8 %180 to i64
  %184 = select i1 %181, i64 %182, i64 %183
  %185 = load i8*, i8** %7, align 8, !noalias !3
  %186 = select i1 %176, i8* %185, i8* %6
  %187 = add i64 %184, %179
  %188 = icmp ugt i64 %187, -17
  br i1 %188, label %189, label %191

189:                                              ; preds = %167
  %190 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %190) #11
  unreachable

191:                                              ; preds = %167
  %192 = icmp ult i64 %187, 23
  br i1 %192, label %193, label %197

193:                                              ; preds = %191
  %194 = trunc i64 %179 to i8
  %195 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %196 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %195, i64 0, i32 1, i32 0
  store i8 %194, i8* %196, align 1, !alias.scope !3
  br label %202

197:                                              ; preds = %191
  %198 = add nuw i64 %187, 16
  %199 = and i64 %198, -16
  %200 = call i8* @_Znwm(i64 %199) #10
  store i8* %200, i8** %169, align 8, !alias.scope !3
  %201 = or i64 %199, -9223372036854775808
  store i64 %201, i64* %171, align 8, !alias.scope !3
  store i64 %179, i64* %170, align 8, !alias.scope !3
  br label %202

202:                                              ; preds = %197, %193
  %203 = phi i8* [ %172, %193 ], [ %200, %197 ]
  %204 = icmp eq i64 %179, 0
  br i1 %204, label %206, label %205

205:                                              ; preds = %202
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %203, i8* align 1 %186, i64 %179, i1 false) #9
  br label %206

206:                                              ; preds = %202, %205
  %207 = getelementptr inbounds i8, i8* %203, i64 %179
  store i8 0, i8* %207, align 1
  %208 = load i8*, i8** %13, align 8, !noalias !3
  %209 = select i1 %181, i8* %208, i8* %12
  %210 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %209, i64 %184) #9
  %211 = load i8, i8* %16, align 1
  %212 = icmp slt i8 %211, 0
  br i1 %212, label %213, label %215

213:                                              ; preds = %206
  %214 = load i8*, i8** %13, align 8
  call void @_ZdlPv(i8* %214) #10
  br label %215

215:                                              ; preds = %206, %213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #9
  %216 = load i8, i8* %174, align 1
  %217 = icmp slt i8 %216, 0
  br i1 %217, label %218, label %220

218:                                              ; preds = %215
  %219 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %219) #10
  br label %220

220:                                              ; preds = %215, %218
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #9
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3viz14FragmentShaderC2Ev(%"class.viz::FragmentShader"*) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3viz14FragmentShaderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 4
  %5 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 3
  %6 = bitcast i32* %5 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 0, i32 -1>, <4 x i32>* %6, align 8
  %7 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 7
  store i32 -1, i32* %7, align 8
  %8 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 8
  store i32 -1, i32* %8, align 4
  %9 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 9
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 10
  store i32 -1, i32* %10, align 4
  %11 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 11
  store i32 -1, i32* %11, align 8
  %12 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 12
  store i8 0, i8* %12, align 4
  %13 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 13
  store i32 -1, i32* %13, align 8
  %14 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 14
  store i32 0, i32* %14, align 4
  %15 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 15
  store i32 -1, i32* %15, align 8
  %16 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 16
  store i32 -1, i32* %16, align 4
  %17 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 17
  store i32 -1, i32* %17, align 8
  %18 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 18
  store i8 0, i8* %18, align 4
  %19 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 19
  store i32 -1, i32* %19, align 8
  %20 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 20
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 21
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 22
  store i32 -1, i32* %22, align 4
  %23 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 23
  store i8 0, i8* %23, align 8
  %24 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 24
  store i32 -1, i32* %24, align 4
  %25 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 25
  store i8 0, i8* %25, align 8
  %26 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 26
  store i32 -1, i32* %26, align 4
  %27 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 27
  %28 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 31
  store i32 0, i32* %28, align 8
  %29 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 32
  %30 = bitcast i32* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 13, i1 false)
  store i32 1, i32* %29, align 4
  %31 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 33
  store i32 0, i32* %31, align 8
  %32 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 34
  store %"class.gfx::ColorTransform"* null, %"class.gfx::ColorTransform"** %32, align 8
  %33 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 35
  store i8 0, i8* %33, align 8
  %34 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 36
  store i32 -1, i32* %34, align 4
  %35 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 37
  store i8 0, i8* %35, align 8
  %36 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 38
  %37 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 46
  %38 = bitcast i32* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 -1, i64 32, i1 false)
  store i8 0, i8* %37, align 4
  %39 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 47
  %40 = bitcast i32* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %40, i8 -1, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz14FragmentShader15GetShaderStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.viz::FragmentShader"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 27
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 1
  %8 = icmp eq i32 %4, 0
  %9 = and i1 %8, %7
  %10 = select i1 %9, i32 1, i32 %4
  %11 = bitcast %"class.viz::FragmentShader"* %1 to void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)***
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 -86, i64 24, i1 false)
  %13 = load void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)**, void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)*** %11, align 8
  %14 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)*, void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)** %13, i64 1
  %15 = load void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)*, void (%"class.std::__1::basic_string"*, %"class.viz::FragmentShader"*)** %14, align 8
  tail call void %15(%"class.std::__1::basic_string"* sret %0, %"class.viz::FragmentShader"* %1) #9
  tail call void @_ZNK3viz14FragmentShader21SetBlendModeFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* %1, %"class.std::__1::basic_string"* %0)
  tail call void @_ZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* %1, %"class.std::__1::basic_string"* %0)
  %16 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 28
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, -1
  %19 = icmp ult i32 %18, 3
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds [3 x i8*], [3 x i8*]* @switch.table._ZNK3viz14FragmentShader15GetShaderStringEv, i64 0, i64 %21
  %23 = load i8*, i8** %22, align 8
  %24 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* %0, i64 0, i8* nonnull %23) #9
  br label %25

25:                                               ; preds = %2, %20
  %26 = icmp eq i32 %10, 1
  %27 = select i1 %26, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.230, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.228, i64 0, i64 0)
  %28 = icmp eq i32 %10, 2
  %29 = select i1 %28, i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.229, i64 0, i64 0), i8* %27
  %30 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* %0, i64 0, i8* %29) #9
  %31 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"* %0, i64 0, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.231, i64 0, i64 0)) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz14FragmentShader21SetBlendModeFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* nocapture readonly, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca [3 x %"class.base::BasicStringPiece"], align 8
  %5 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 29
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %49, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 30
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i8* getelementptr inbounds ([222 x i8], [222 x i8]* @.str.108, i64 0, i64 6), i8* getelementptr inbounds ([365 x i8], [365 x i8]* @.str.107, i64 0, i64 6)
  %13 = select i1 %11, i64 214, i64 357
  %14 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %14) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 0, i64 24, i1 false) #9
  %15 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  %17 = load i8, i8* %16, align 1
  %18 = icmp slt i8 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %8
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  br label %24

22:                                               ; preds = %8
  %23 = zext i8 %17 to i64
  br label %24

24:                                               ; preds = %19, %22
  %25 = phi i64 [ %21, %19 ], [ %23, %22 ]
  %26 = add i64 %25, 1024
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* nonnull %3, i64 %26) #9
  %27 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.104, i64 0, i64 0)) #9
  call void @_ZNK3viz14FragmentShader21AppendHelperFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* %0, %"class.std::__1::basic_string"* nonnull %3)
  call void @_ZNK3viz14FragmentShader19AppendBlendFunctionEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* %0, %"class.std::__1::basic_string"* nonnull %3)
  %28 = bitcast [3 x %"class.base::BasicStringPiece"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %28) #9
  %29 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %28, i8* align 8 bitcast (%"class.base::BasicStringPiece"* @_ZZNK3viz14FragmentShader21SetBlendModeFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE9kUniforms to i8*), i64 16, i1 false)
  %30 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 1, i32 0
  store i8* %12, i8** %30, align 8
  %31 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 1, i32 1
  store i64 %13, i64* %31, align 8
  %32 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 2, i32 0
  %33 = load i8, i8* %16, align 1
  %34 = icmp slt i8 %33, 0
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %38 = select i1 %34, i8* %36, i8* %37
  store i8* %38, i8** %32, align 8
  %39 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 2, i32 1
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = zext i8 %33 to i64
  %43 = select i1 %34, i64 %41, i64 %42
  store i64 %43, i64* %39, align 8
  call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull %3, i64 3, %"class.base::BasicStringPiece"* nonnull %29) #9
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %28) #9
  %44 = load i8, i8* %16, align 1
  %45 = icmp slt i8 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %24
  %47 = load i8*, i8** %35, align 8
  call void @_ZdlPv(i8* %47) #10
  br label %48

48:                                               ; preds = %46, %24
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* nonnull align 8 %14, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %14) #9
  br label %49

49:                                               ; preds = %2, %48
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* nocapture readonly, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca [4 x %"class.base::BasicStringPiece"], align 8
  %5 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 46
  %6 = load i8, i8* %5, align 4, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %47, label %8

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 0, i64 24, i1 false) #9
  %10 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %11 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %10, i64 0, i32 1, i32 0
  %12 = load i8, i8* %11, align 1
  %13 = icmp slt i8 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  br label %19

17:                                               ; preds = %8
  %18 = zext i8 %12 to i64
  br label %19

19:                                               ; preds = %14, %17
  %20 = phi i64 [ %16, %14 ], [ %18, %17 ]
  %21 = add i64 %20, 2048
  call void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"* nonnull %3, i64 %21) #9
  %22 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.104, i64 0, i64 0)) #9
  %23 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.105, i64 0, i64 0)) #9
  %24 = bitcast [4 x %"class.base::BasicStringPiece"]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %24) #9
  %25 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* align 8 bitcast (%"class.base::BasicStringPiece"* @_ZZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE9kUniforms to i8*), i64 16, i1 false)
  %26 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 1
  %27 = bitcast %"class.base::BasicStringPiece"* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 bitcast (%"class.base::BasicStringPiece"* @_ZZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE18kFunctionRcUtility to i8*), i64 16, i1 false)
  %28 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 2
  %29 = bitcast %"class.base::BasicStringPiece"* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 bitcast (%"class.base::BasicStringPiece"* @_ZZNK3viz14FragmentShader25SetRoundedCornerFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEE27kFunctionApplyRoundedCorner to i8*), i64 16, i1 false)
  %30 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 3, i32 0
  %31 = load i8, i8* %11, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %36 = select i1 %32, i8* %34, i8* %35
  store i8* %36, i8** %30, align 8
  %37 = getelementptr inbounds [4 x %"class.base::BasicStringPiece"], [4 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 3, i32 1
  %38 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = zext i8 %31 to i64
  %41 = select i1 %32, i64 %39, i64 %40
  store i64 %41, i64* %37, align 8
  call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull %3, i64 4, %"class.base::BasicStringPiece"* nonnull %25) #9
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %24) #9
  %42 = load i8, i8* %11, align 1
  %43 = icmp slt i8 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %19
  %45 = load i8*, i8** %33, align 8
  call void @_ZdlPv(i8* %45) #10
  br label %46

46:                                               ; preds = %44, %19
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* nonnull align 8 %9, i64 24, i1 false) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  br label %47

47:                                               ; preds = %2, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3viz14FragmentShader4InitEPN3gpu5gles214GLES2InterfaceEjPi(%"class.viz::FragmentShader"*, %"class.gpu::gles2::GLES2Interface"*, i32, i32* nocapture) unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = alloca %"class.std::__1::vector.1", align 8
  %7 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 24, i1 false) #9
  %11 = bitcast %"class.std::__1::vector.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #9
  %12 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %6, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 24, i1 false) #9
  %14 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 29
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %90, label %17

17:                                               ; preds = %4
  %18 = bitcast i8*** %9 to i64*
  %19 = bitcast %"class.std::__1::vector"* %5 to i64*
  %20 = bitcast i8*** %10 to i64*
  %21 = tail call i8* @_Znwm(i64 8) #10
  %22 = getelementptr inbounds i8, i8* %21, i64 8
  %23 = ptrtoint i8* %22 to i64
  %24 = bitcast i8* %21 to i64*
  store i64 ptrtoint ([18 x i8]* @.str.74 to i64), i64* %24, align 8
  %25 = ptrtoint i8* %21 to i64
  store i64 %25, i64* %19, align 8
  store i64 %23, i64* %18, align 8
  store i64 %23, i64* %20, align 8
  %26 = bitcast i8*** %9 to i64*
  %27 = bitcast %"class.std::__1::vector"* %5 to i64*
  %28 = bitcast i8*** %10 to i64*
  %29 = tail call i8* @_Znwm(i64 16) #10
  %30 = getelementptr inbounds i8, i8* %29, i64 8
  %31 = getelementptr inbounds i8, i8* %29, i64 16
  %32 = ptrtoint i8* %31 to i64
  %33 = bitcast i8* %30 to i64*
  store i64 ptrtoint ([26 x i8]* @.str.75 to i64), i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %29, i64 16
  %35 = ptrtoint i8* %34 to i64
  %36 = ptrtoint i8* %29 to i64
  %37 = bitcast i8* %21 to i64*
  %38 = bitcast i8* %29 to i64*
  %39 = load i64, i64* %37, align 8
  store i64 %39, i64* %38, align 8
  store i64 %36, i64* %27, align 8
  store i64 %35, i64* %26, align 8
  store i64 %32, i64* %28, align 8
  tail call void @_ZdlPv(i8* nonnull %21) #10
  %40 = ptrtoint i8* %34 to i64
  %41 = bitcast i8*** %9 to i64*
  %42 = bitcast %"class.std::__1::vector"* %5 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %40, %43
  %45 = ashr exact i64 %44, 3
  %46 = add nsw i64 %45, 1
  %47 = icmp ugt i64 %46, 2305843009213693951
  br i1 %47, label %48, label %50

48:                                               ; preds = %17
  %49 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %49) #11
  unreachable

50:                                               ; preds = %17
  %51 = bitcast i8*** %10 to i64*
  %52 = sub i64 %32, %43
  %53 = ashr exact i64 %52, 3
  %54 = icmp ult i64 %53, 1152921504606846975
  br i1 %54, label %55, label %63

55:                                               ; preds = %50
  %56 = ashr exact i64 %52, 2
  %57 = icmp ult i64 %56, %46
  %58 = select i1 %57, i64 %46, i64 %56
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %68, label %60

60:                                               ; preds = %55
  %61 = icmp ugt i64 %58, 2305843009213693951
  br i1 %61, label %62, label %63

62:                                               ; preds = %60
  tail call void @abort() #11
  unreachable

63:                                               ; preds = %60, %50
  %64 = phi i64 [ %58, %60 ], [ 2305843009213693951, %50 ]
  %65 = shl i64 %64, 3
  %66 = tail call i8* @_Znwm(i64 %65) #10
  %67 = bitcast i8* %66 to i8**
  br label %68

68:                                               ; preds = %63, %55
  %69 = phi i64 [ %64, %63 ], [ 0, %55 ]
  %70 = phi i8** [ %67, %63 ], [ null, %55 ]
  %71 = getelementptr inbounds i8*, i8** %70, i64 %45
  %72 = getelementptr inbounds i8*, i8** %70, i64 %69
  %73 = ptrtoint i8** %72 to i64
  %74 = bitcast i8** %71 to i64*
  store i64 ptrtoint ([13 x i8]* @.str.76 to i64), i64* %74, align 8
  %75 = getelementptr inbounds i8*, i8** %71, i64 1
  %76 = ptrtoint i8** %75 to i64
  %77 = sub i64 %35, %43
  %78 = ashr exact i64 %77, 3
  %79 = sub nsw i64 0, %78
  %80 = getelementptr inbounds i8*, i8** %71, i64 %79
  %81 = ptrtoint i8** %80 to i64
  %82 = icmp sgt i64 %77, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %68
  %84 = bitcast i8** %80 to i8*
  %85 = inttoptr i64 %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 %77, i1 false) #9
  br label %86

86:                                               ; preds = %83, %68
  store i64 %81, i64* %42, align 8
  store i64 %76, i64* %41, align 8
  store i64 %73, i64* %51, align 8
  %87 = icmp eq i64 %43, 0
  br i1 %87, label %90, label %88

88:                                               ; preds = %86
  %89 = inttoptr i64 %43 to i8*
  tail call void @_ZdlPv(i8* %89) #10
  br label %90

90:                                               ; preds = %4, %88, %86
  %91 = phi i8** [ null, %4 ], [ %75, %88 ], [ %75, %86 ]
  %92 = phi i64 [ 0, %4 ], [ %76, %88 ], [ %76, %86 ]
  %93 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 14
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %284, label %96

96:                                               ; preds = %90
  %97 = load i8**, i8*** %10, align 8
  %98 = icmp ult i8** %91, %97
  %99 = ptrtoint i8** %97 to i64
  br i1 %98, label %100, label %107

100:                                              ; preds = %96
  %101 = bitcast i8** %91 to i64*
  store i64 ptrtoint ([7 x i8]* @.str.77 to i64), i64* %101, align 8
  %102 = getelementptr inbounds i8*, i8** %91, i64 1
  %103 = ptrtoint i8** %102 to i64
  %104 = bitcast i8*** %9 to i64*
  store i64 %103, i64* %104, align 8
  %105 = load i8**, i8*** %10, align 8
  %106 = ptrtoint i8** %105 to i64
  br label %158

107:                                              ; preds = %96
  %108 = ptrtoint i8** %91 to i64
  %109 = bitcast i8*** %9 to i64*
  %110 = bitcast %"class.std::__1::vector"* %5 to i64*
  %111 = load i64, i64* %110, align 8
  %112 = sub i64 %108, %111
  %113 = ashr exact i64 %112, 3
  %114 = add nsw i64 %113, 1
  %115 = icmp ugt i64 %114, 2305843009213693951
  br i1 %115, label %116, label %118

116:                                              ; preds = %107
  %117 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %117) #11
  unreachable

118:                                              ; preds = %107
  %119 = bitcast i8*** %10 to i64*
  %120 = sub i64 %99, %111
  %121 = ashr exact i64 %120, 3
  %122 = icmp ult i64 %121, 1152921504606846975
  br i1 %122, label %123, label %131

123:                                              ; preds = %118
  %124 = ashr exact i64 %120, 2
  %125 = icmp ult i64 %124, %114
  %126 = select i1 %125, i64 %114, i64 %124
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %136, label %128

128:                                              ; preds = %123
  %129 = icmp ugt i64 %126, 2305843009213693951
  br i1 %129, label %130, label %131

130:                                              ; preds = %128
  tail call void @abort() #11
  unreachable

131:                                              ; preds = %128, %118
  %132 = phi i64 [ %126, %128 ], [ 2305843009213693951, %118 ]
  %133 = shl i64 %132, 3
  %134 = tail call i8* @_Znwm(i64 %133) #10
  %135 = bitcast i8* %134 to i8**
  br label %136

136:                                              ; preds = %131, %123
  %137 = phi i64 [ %132, %131 ], [ 0, %123 ]
  %138 = phi i8** [ %135, %131 ], [ null, %123 ]
  %139 = getelementptr inbounds i8*, i8** %138, i64 %113
  %140 = getelementptr inbounds i8*, i8** %138, i64 %137
  %141 = ptrtoint i8** %140 to i64
  %142 = bitcast i8** %139 to i64*
  store i64 ptrtoint ([7 x i8]* @.str.77 to i64), i64* %142, align 8
  %143 = getelementptr inbounds i8*, i8** %139, i64 1
  %144 = ptrtoint i8** %143 to i64
  %145 = sub i64 %92, %111
  %146 = ashr exact i64 %145, 3
  %147 = sub nsw i64 0, %146
  %148 = getelementptr inbounds i8*, i8** %139, i64 %147
  %149 = ptrtoint i8** %148 to i64
  %150 = icmp sgt i64 %145, 0
  br i1 %150, label %151, label %154

151:                                              ; preds = %136
  %152 = bitcast i8** %148 to i8*
  %153 = inttoptr i64 %111 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 %145, i1 false) #9
  br label %154

154:                                              ; preds = %151, %136
  store i64 %149, i64* %110, align 8
  store i64 %144, i64* %109, align 8
  store i64 %141, i64* %119, align 8
  %155 = icmp eq i64 %111, 0
  br i1 %155, label %158, label %156

156:                                              ; preds = %154
  %157 = inttoptr i64 %111 to i8*
  tail call void @_ZdlPv(i8* %157) #10
  br label %158

158:                                              ; preds = %100, %154, %156
  %159 = phi i64 [ %106, %100 ], [ %141, %154 ], [ %141, %156 ]
  %160 = phi i64 [ %103, %100 ], [ %144, %154 ], [ %144, %156 ]
  %161 = phi i8** [ %105, %100 ], [ %140, %154 ], [ %140, %156 ]
  %162 = phi i8** [ %102, %100 ], [ %143, %154 ], [ %143, %156 ]
  %163 = icmp ult i8** %162, %161
  br i1 %163, label %164, label %171

164:                                              ; preds = %158
  %165 = bitcast i8** %162 to i64*
  store i64 ptrtoint ([18 x i8]* @.str.78 to i64), i64* %165, align 8
  %166 = getelementptr inbounds i8*, i8** %162, i64 1
  %167 = ptrtoint i8** %166 to i64
  %168 = bitcast i8*** %9 to i64*
  store i64 %167, i64* %168, align 8
  %169 = load i8**, i8*** %10, align 8
  %170 = ptrtoint i8** %169 to i64
  br label %222

171:                                              ; preds = %158
  %172 = ptrtoint i8** %162 to i64
  %173 = bitcast i8*** %9 to i64*
  %174 = bitcast %"class.std::__1::vector"* %5 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = sub i64 %172, %175
  %177 = ashr exact i64 %176, 3
  %178 = add nsw i64 %177, 1
  %179 = icmp ugt i64 %178, 2305843009213693951
  br i1 %179, label %180, label %182

180:                                              ; preds = %171
  %181 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %181) #11
  unreachable

182:                                              ; preds = %171
  %183 = bitcast i8*** %10 to i64*
  %184 = sub i64 %159, %175
  %185 = ashr exact i64 %184, 3
  %186 = icmp ult i64 %185, 1152921504606846975
  br i1 %186, label %187, label %195

187:                                              ; preds = %182
  %188 = ashr exact i64 %184, 2
  %189 = icmp ult i64 %188, %178
  %190 = select i1 %189, i64 %178, i64 %188
  %191 = icmp eq i64 %190, 0
  br i1 %191, label %200, label %192

192:                                              ; preds = %187
  %193 = icmp ugt i64 %190, 2305843009213693951
  br i1 %193, label %194, label %195

194:                                              ; preds = %192
  tail call void @abort() #11
  unreachable

195:                                              ; preds = %192, %182
  %196 = phi i64 [ %190, %192 ], [ 2305843009213693951, %182 ]
  %197 = shl i64 %196, 3
  %198 = tail call i8* @_Znwm(i64 %197) #10
  %199 = bitcast i8* %198 to i8**
  br label %200

200:                                              ; preds = %195, %187
  %201 = phi i64 [ %196, %195 ], [ 0, %187 ]
  %202 = phi i8** [ %199, %195 ], [ null, %187 ]
  %203 = getelementptr inbounds i8*, i8** %202, i64 %177
  %204 = getelementptr inbounds i8*, i8** %202, i64 %201
  %205 = ptrtoint i8** %204 to i64
  %206 = bitcast i8** %203 to i64*
  store i64 ptrtoint ([18 x i8]* @.str.78 to i64), i64* %206, align 8
  %207 = getelementptr inbounds i8*, i8** %203, i64 1
  %208 = ptrtoint i8** %207 to i64
  %209 = sub i64 %160, %175
  %210 = ashr exact i64 %209, 3
  %211 = sub nsw i64 0, %210
  %212 = getelementptr inbounds i8*, i8** %203, i64 %211
  %213 = ptrtoint i8** %212 to i64
  %214 = icmp sgt i64 %209, 0
  br i1 %214, label %215, label %218

215:                                              ; preds = %200
  %216 = bitcast i8** %212 to i8*
  %217 = inttoptr i64 %175 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %216, i8* align 8 %217, i64 %209, i1 false) #9
  br label %218

218:                                              ; preds = %215, %200
  store i64 %213, i64* %174, align 8
  store i64 %208, i64* %173, align 8
  store i64 %205, i64* %183, align 8
  %219 = icmp eq i64 %175, 0
  br i1 %219, label %222, label %220

220:                                              ; preds = %218
  %221 = inttoptr i64 %175 to i8*
  tail call void @_ZdlPv(i8* %221) #10
  br label %222

222:                                              ; preds = %164, %218, %220
  %223 = phi i64 [ %170, %164 ], [ %205, %218 ], [ %205, %220 ]
  %224 = phi i64 [ %167, %164 ], [ %208, %218 ], [ %208, %220 ]
  %225 = phi i8** [ %169, %164 ], [ %204, %218 ], [ %204, %220 ]
  %226 = phi i8** [ %166, %164 ], [ %207, %218 ], [ %207, %220 ]
  %227 = icmp ult i8** %226, %225
  br i1 %227, label %228, label %233

228:                                              ; preds = %222
  %229 = bitcast i8** %226 to i64*
  store i64 ptrtoint ([19 x i8]* @.str.79 to i64), i64* %229, align 8
  %230 = getelementptr inbounds i8*, i8** %226, i64 1
  %231 = ptrtoint i8** %230 to i64
  %232 = bitcast i8*** %9 to i64*
  store i64 %231, i64* %232, align 8
  br label %284

233:                                              ; preds = %222
  %234 = ptrtoint i8** %226 to i64
  %235 = bitcast i8*** %9 to i64*
  %236 = bitcast %"class.std::__1::vector"* %5 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = sub i64 %234, %237
  %239 = ashr exact i64 %238, 3
  %240 = add nsw i64 %239, 1
  %241 = icmp ugt i64 %240, 2305843009213693951
  br i1 %241, label %242, label %244

242:                                              ; preds = %233
  %243 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %243) #11
  unreachable

244:                                              ; preds = %233
  %245 = bitcast i8*** %10 to i64*
  %246 = sub i64 %223, %237
  %247 = ashr exact i64 %246, 3
  %248 = icmp ult i64 %247, 1152921504606846975
  br i1 %248, label %249, label %257

249:                                              ; preds = %244
  %250 = ashr exact i64 %246, 2
  %251 = icmp ult i64 %250, %240
  %252 = select i1 %251, i64 %240, i64 %250
  %253 = icmp eq i64 %252, 0
  br i1 %253, label %262, label %254

254:                                              ; preds = %249
  %255 = icmp ugt i64 %252, 2305843009213693951
  br i1 %255, label %256, label %257

256:                                              ; preds = %254
  tail call void @abort() #11
  unreachable

257:                                              ; preds = %254, %244
  %258 = phi i64 [ %252, %254 ], [ 2305843009213693951, %244 ]
  %259 = shl i64 %258, 3
  %260 = tail call i8* @_Znwm(i64 %259) #10
  %261 = bitcast i8* %260 to i8**
  br label %262

262:                                              ; preds = %257, %249
  %263 = phi i64 [ %258, %257 ], [ 0, %249 ]
  %264 = phi i8** [ %261, %257 ], [ null, %249 ]
  %265 = getelementptr inbounds i8*, i8** %264, i64 %239
  %266 = getelementptr inbounds i8*, i8** %264, i64 %263
  %267 = ptrtoint i8** %266 to i64
  %268 = bitcast i8** %265 to i64*
  store i64 ptrtoint ([19 x i8]* @.str.79 to i64), i64* %268, align 8
  %269 = getelementptr inbounds i8*, i8** %265, i64 1
  %270 = ptrtoint i8** %269 to i64
  %271 = sub i64 %224, %237
  %272 = ashr exact i64 %271, 3
  %273 = sub nsw i64 0, %272
  %274 = getelementptr inbounds i8*, i8** %265, i64 %273
  %275 = ptrtoint i8** %274 to i64
  %276 = icmp sgt i64 %271, 0
  br i1 %276, label %277, label %280

277:                                              ; preds = %262
  %278 = bitcast i8** %274 to i8*
  %279 = inttoptr i64 %237 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %278, i8* align 8 %279, i64 %271, i1 false) #9
  br label %280

280:                                              ; preds = %277, %262
  store i64 %275, i64* %236, align 8
  store i64 %270, i64* %235, align 8
  store i64 %267, i64* %245, align 8
  %281 = icmp eq i64 %237, 0
  br i1 %281, label %284, label %282

282:                                              ; preds = %280
  %283 = inttoptr i64 %237 to i8*
  tail call void @_ZdlPv(i8* %283) #10
  br label %284

284:                                              ; preds = %282, %280, %228, %90
  %285 = phi i8** [ %269, %282 ], [ %269, %280 ], [ %230, %228 ], [ %91, %90 ]
  %286 = phi i64 [ %270, %282 ], [ %270, %280 ], [ %231, %228 ], [ %92, %90 ]
  %287 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 18
  %288 = load i8, i8* %287, align 4, !range !2
  %289 = icmp eq i8 %288, 0
  br i1 %289, label %414, label %290

290:                                              ; preds = %284
  %291 = load i8**, i8*** %10, align 8
  %292 = icmp ult i8** %285, %291
  %293 = ptrtoint i8** %291 to i64
  br i1 %292, label %294, label %301

294:                                              ; preds = %290
  %295 = bitcast i8** %285 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.80 to i64), i64* %295, align 8
  %296 = getelementptr inbounds i8*, i8** %285, i64 1
  %297 = ptrtoint i8** %296 to i64
  %298 = bitcast i8*** %9 to i64*
  store i64 %297, i64* %298, align 8
  %299 = load i8**, i8*** %10, align 8
  %300 = ptrtoint i8** %299 to i64
  br label %352

301:                                              ; preds = %290
  %302 = ptrtoint i8** %285 to i64
  %303 = bitcast i8*** %9 to i64*
  %304 = bitcast %"class.std::__1::vector"* %5 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = sub i64 %302, %305
  %307 = ashr exact i64 %306, 3
  %308 = add nsw i64 %307, 1
  %309 = icmp ugt i64 %308, 2305843009213693951
  br i1 %309, label %310, label %312

310:                                              ; preds = %301
  %311 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %311) #11
  unreachable

312:                                              ; preds = %301
  %313 = bitcast i8*** %10 to i64*
  %314 = sub i64 %293, %305
  %315 = ashr exact i64 %314, 3
  %316 = icmp ult i64 %315, 1152921504606846975
  br i1 %316, label %317, label %325

317:                                              ; preds = %312
  %318 = ashr exact i64 %314, 2
  %319 = icmp ult i64 %318, %308
  %320 = select i1 %319, i64 %308, i64 %318
  %321 = icmp eq i64 %320, 0
  br i1 %321, label %330, label %322

322:                                              ; preds = %317
  %323 = icmp ugt i64 %320, 2305843009213693951
  br i1 %323, label %324, label %325

324:                                              ; preds = %322
  tail call void @abort() #11
  unreachable

325:                                              ; preds = %322, %312
  %326 = phi i64 [ %320, %322 ], [ 2305843009213693951, %312 ]
  %327 = shl i64 %326, 3
  %328 = tail call i8* @_Znwm(i64 %327) #10
  %329 = bitcast i8* %328 to i8**
  br label %330

330:                                              ; preds = %325, %317
  %331 = phi i64 [ %326, %325 ], [ 0, %317 ]
  %332 = phi i8** [ %329, %325 ], [ null, %317 ]
  %333 = getelementptr inbounds i8*, i8** %332, i64 %307
  %334 = getelementptr inbounds i8*, i8** %332, i64 %331
  %335 = ptrtoint i8** %334 to i64
  %336 = bitcast i8** %333 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.80 to i64), i64* %336, align 8
  %337 = getelementptr inbounds i8*, i8** %333, i64 1
  %338 = ptrtoint i8** %337 to i64
  %339 = sub i64 %286, %305
  %340 = ashr exact i64 %339, 3
  %341 = sub nsw i64 0, %340
  %342 = getelementptr inbounds i8*, i8** %333, i64 %341
  %343 = ptrtoint i8** %342 to i64
  %344 = icmp sgt i64 %339, 0
  br i1 %344, label %345, label %348

345:                                              ; preds = %330
  %346 = bitcast i8** %342 to i8*
  %347 = inttoptr i64 %305 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %346, i8* align 8 %347, i64 %339, i1 false) #9
  br label %348

348:                                              ; preds = %345, %330
  store i64 %343, i64* %304, align 8
  store i64 %338, i64* %303, align 8
  store i64 %335, i64* %313, align 8
  %349 = icmp eq i64 %305, 0
  br i1 %349, label %352, label %350

350:                                              ; preds = %348
  %351 = inttoptr i64 %305 to i8*
  tail call void @_ZdlPv(i8* %351) #10
  br label %352

352:                                              ; preds = %294, %348, %350
  %353 = phi i64 [ %300, %294 ], [ %335, %348 ], [ %335, %350 ]
  %354 = phi i64 [ %297, %294 ], [ %338, %348 ], [ %338, %350 ]
  %355 = phi i8** [ %299, %294 ], [ %334, %348 ], [ %334, %350 ]
  %356 = phi i8** [ %296, %294 ], [ %337, %348 ], [ %337, %350 ]
  %357 = icmp ult i8** %356, %355
  br i1 %357, label %358, label %363

358:                                              ; preds = %352
  %359 = bitcast i8** %356 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.81 to i64), i64* %359, align 8
  %360 = getelementptr inbounds i8*, i8** %356, i64 1
  %361 = ptrtoint i8** %360 to i64
  %362 = bitcast i8*** %9 to i64*
  store i64 %361, i64* %362, align 8
  br label %414

363:                                              ; preds = %352
  %364 = ptrtoint i8** %356 to i64
  %365 = bitcast i8*** %9 to i64*
  %366 = bitcast %"class.std::__1::vector"* %5 to i64*
  %367 = load i64, i64* %366, align 8
  %368 = sub i64 %364, %367
  %369 = ashr exact i64 %368, 3
  %370 = add nsw i64 %369, 1
  %371 = icmp ugt i64 %370, 2305843009213693951
  br i1 %371, label %372, label %374

372:                                              ; preds = %363
  %373 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %373) #11
  unreachable

374:                                              ; preds = %363
  %375 = bitcast i8*** %10 to i64*
  %376 = sub i64 %353, %367
  %377 = ashr exact i64 %376, 3
  %378 = icmp ult i64 %377, 1152921504606846975
  br i1 %378, label %379, label %387

379:                                              ; preds = %374
  %380 = ashr exact i64 %376, 2
  %381 = icmp ult i64 %380, %370
  %382 = select i1 %381, i64 %370, i64 %380
  %383 = icmp eq i64 %382, 0
  br i1 %383, label %392, label %384

384:                                              ; preds = %379
  %385 = icmp ugt i64 %382, 2305843009213693951
  br i1 %385, label %386, label %387

386:                                              ; preds = %384
  tail call void @abort() #11
  unreachable

387:                                              ; preds = %384, %374
  %388 = phi i64 [ %382, %384 ], [ 2305843009213693951, %374 ]
  %389 = shl i64 %388, 3
  %390 = tail call i8* @_Znwm(i64 %389) #10
  %391 = bitcast i8* %390 to i8**
  br label %392

392:                                              ; preds = %387, %379
  %393 = phi i64 [ %388, %387 ], [ 0, %379 ]
  %394 = phi i8** [ %391, %387 ], [ null, %379 ]
  %395 = getelementptr inbounds i8*, i8** %394, i64 %369
  %396 = getelementptr inbounds i8*, i8** %394, i64 %393
  %397 = ptrtoint i8** %396 to i64
  %398 = bitcast i8** %395 to i64*
  store i64 ptrtoint ([12 x i8]* @.str.81 to i64), i64* %398, align 8
  %399 = getelementptr inbounds i8*, i8** %395, i64 1
  %400 = ptrtoint i8** %399 to i64
  %401 = sub i64 %354, %367
  %402 = ashr exact i64 %401, 3
  %403 = sub nsw i64 0, %402
  %404 = getelementptr inbounds i8*, i8** %395, i64 %403
  %405 = ptrtoint i8** %404 to i64
  %406 = icmp sgt i64 %401, 0
  br i1 %406, label %407, label %410

407:                                              ; preds = %392
  %408 = bitcast i8** %404 to i8*
  %409 = inttoptr i64 %367 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %408, i8* align 8 %409, i64 %401, i1 false) #9
  br label %410

410:                                              ; preds = %407, %392
  store i64 %405, i64* %366, align 8
  store i64 %400, i64* %365, align 8
  store i64 %397, i64* %375, align 8
  %411 = icmp eq i64 %367, 0
  br i1 %411, label %414, label %412

412:                                              ; preds = %410
  %413 = inttoptr i64 %367 to i8*
  tail call void @_ZdlPv(i8* %413) #10
  br label %414

414:                                              ; preds = %412, %410, %358, %284
  %415 = phi i8** [ %399, %412 ], [ %399, %410 ], [ %360, %358 ], [ %285, %284 ]
  %416 = phi i64 [ %400, %412 ], [ %400, %410 ], [ %361, %358 ], [ %286, %284 ]
  %417 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 21
  %418 = load i8, i8* %417, align 8, !range !2
  %419 = icmp eq i8 %418, 0
  br i1 %419, label %480, label %420

420:                                              ; preds = %414
  %421 = load i8**, i8*** %10, align 8
  %422 = icmp ult i8** %415, %421
  %423 = ptrtoint i8** %421 to i64
  br i1 %422, label %424, label %429

424:                                              ; preds = %420
  %425 = bitcast i8** %415 to i64*
  store i64 ptrtoint ([6 x i8]* @.str.82 to i64), i64* %425, align 8
  %426 = getelementptr inbounds i8*, i8** %415, i64 1
  %427 = ptrtoint i8** %426 to i64
  %428 = bitcast i8*** %9 to i64*
  store i64 %427, i64* %428, align 8
  br label %480

429:                                              ; preds = %420
  %430 = ptrtoint i8** %415 to i64
  %431 = bitcast i8*** %9 to i64*
  %432 = bitcast %"class.std::__1::vector"* %5 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = sub i64 %430, %433
  %435 = ashr exact i64 %434, 3
  %436 = add nsw i64 %435, 1
  %437 = icmp ugt i64 %436, 2305843009213693951
  br i1 %437, label %438, label %440

438:                                              ; preds = %429
  %439 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %439) #11
  unreachable

440:                                              ; preds = %429
  %441 = bitcast i8*** %10 to i64*
  %442 = sub i64 %423, %433
  %443 = ashr exact i64 %442, 3
  %444 = icmp ult i64 %443, 1152921504606846975
  br i1 %444, label %445, label %453

445:                                              ; preds = %440
  %446 = ashr exact i64 %442, 2
  %447 = icmp ult i64 %446, %436
  %448 = select i1 %447, i64 %436, i64 %446
  %449 = icmp eq i64 %448, 0
  br i1 %449, label %458, label %450

450:                                              ; preds = %445
  %451 = icmp ugt i64 %448, 2305843009213693951
  br i1 %451, label %452, label %453

452:                                              ; preds = %450
  tail call void @abort() #11
  unreachable

453:                                              ; preds = %450, %440
  %454 = phi i64 [ %448, %450 ], [ 2305843009213693951, %440 ]
  %455 = shl i64 %454, 3
  %456 = tail call i8* @_Znwm(i64 %455) #10
  %457 = bitcast i8* %456 to i8**
  br label %458

458:                                              ; preds = %453, %445
  %459 = phi i64 [ %454, %453 ], [ 0, %445 ]
  %460 = phi i8** [ %457, %453 ], [ null, %445 ]
  %461 = getelementptr inbounds i8*, i8** %460, i64 %435
  %462 = getelementptr inbounds i8*, i8** %460, i64 %459
  %463 = ptrtoint i8** %462 to i64
  %464 = bitcast i8** %461 to i64*
  store i64 ptrtoint ([6 x i8]* @.str.82 to i64), i64* %464, align 8
  %465 = getelementptr inbounds i8*, i8** %461, i64 1
  %466 = ptrtoint i8** %465 to i64
  %467 = sub i64 %416, %433
  %468 = ashr exact i64 %467, 3
  %469 = sub nsw i64 0, %468
  %470 = getelementptr inbounds i8*, i8** %461, i64 %469
  %471 = ptrtoint i8** %470 to i64
  %472 = icmp sgt i64 %467, 0
  br i1 %472, label %473, label %476

473:                                              ; preds = %458
  %474 = bitcast i8** %470 to i8*
  %475 = inttoptr i64 %433 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %474, i8* align 8 %475, i64 %467, i1 false) #9
  br label %476

476:                                              ; preds = %473, %458
  store i64 %471, i64* %432, align 8
  store i64 %466, i64* %431, align 8
  store i64 %463, i64* %441, align 8
  %477 = icmp eq i64 %433, 0
  br i1 %477, label %480, label %478

478:                                              ; preds = %476
  %479 = inttoptr i64 %433 to i8*
  tail call void @_ZdlPv(i8* %479) #10
  br label %480

480:                                              ; preds = %478, %476, %424, %414
  %481 = phi i8** [ %465, %478 ], [ %465, %476 ], [ %426, %424 ], [ %415, %414 ]
  %482 = phi i64 [ %466, %478 ], [ %466, %476 ], [ %427, %424 ], [ %416, %414 ]
  %483 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 23
  %484 = load i8, i8* %483, align 8, !range !2
  %485 = icmp eq i8 %484, 0
  br i1 %485, label %546, label %486

486:                                              ; preds = %480
  %487 = load i8**, i8*** %10, align 8
  %488 = icmp ult i8** %481, %487
  %489 = ptrtoint i8** %487 to i64
  br i1 %488, label %490, label %495

490:                                              ; preds = %486
  %491 = bitcast i8** %481 to i64*
  store i64 ptrtoint ([17 x i8]* @.str.83 to i64), i64* %491, align 8
  %492 = getelementptr inbounds i8*, i8** %481, i64 1
  %493 = ptrtoint i8** %492 to i64
  %494 = bitcast i8*** %9 to i64*
  store i64 %493, i64* %494, align 8
  br label %546

495:                                              ; preds = %486
  %496 = ptrtoint i8** %481 to i64
  %497 = bitcast i8*** %9 to i64*
  %498 = bitcast %"class.std::__1::vector"* %5 to i64*
  %499 = load i64, i64* %498, align 8
  %500 = sub i64 %496, %499
  %501 = ashr exact i64 %500, 3
  %502 = add nsw i64 %501, 1
  %503 = icmp ugt i64 %502, 2305843009213693951
  br i1 %503, label %504, label %506

504:                                              ; preds = %495
  %505 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %505) #11
  unreachable

506:                                              ; preds = %495
  %507 = bitcast i8*** %10 to i64*
  %508 = sub i64 %489, %499
  %509 = ashr exact i64 %508, 3
  %510 = icmp ult i64 %509, 1152921504606846975
  br i1 %510, label %511, label %519

511:                                              ; preds = %506
  %512 = ashr exact i64 %508, 2
  %513 = icmp ult i64 %512, %502
  %514 = select i1 %513, i64 %502, i64 %512
  %515 = icmp eq i64 %514, 0
  br i1 %515, label %524, label %516

516:                                              ; preds = %511
  %517 = icmp ugt i64 %514, 2305843009213693951
  br i1 %517, label %518, label %519

518:                                              ; preds = %516
  tail call void @abort() #11
  unreachable

519:                                              ; preds = %516, %506
  %520 = phi i64 [ %514, %516 ], [ 2305843009213693951, %506 ]
  %521 = shl i64 %520, 3
  %522 = tail call i8* @_Znwm(i64 %521) #10
  %523 = bitcast i8* %522 to i8**
  br label %524

524:                                              ; preds = %519, %511
  %525 = phi i64 [ %520, %519 ], [ 0, %511 ]
  %526 = phi i8** [ %523, %519 ], [ null, %511 ]
  %527 = getelementptr inbounds i8*, i8** %526, i64 %501
  %528 = getelementptr inbounds i8*, i8** %526, i64 %525
  %529 = ptrtoint i8** %528 to i64
  %530 = bitcast i8** %527 to i64*
  store i64 ptrtoint ([17 x i8]* @.str.83 to i64), i64* %530, align 8
  %531 = getelementptr inbounds i8*, i8** %527, i64 1
  %532 = ptrtoint i8** %531 to i64
  %533 = sub i64 %482, %499
  %534 = ashr exact i64 %533, 3
  %535 = sub nsw i64 0, %534
  %536 = getelementptr inbounds i8*, i8** %527, i64 %535
  %537 = ptrtoint i8** %536 to i64
  %538 = icmp sgt i64 %533, 0
  br i1 %538, label %539, label %542

539:                                              ; preds = %524
  %540 = bitcast i8** %536 to i8*
  %541 = inttoptr i64 %499 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %540, i8* align 8 %541, i64 %533, i1 false) #9
  br label %542

542:                                              ; preds = %539, %524
  store i64 %537, i64* %498, align 8
  store i64 %532, i64* %497, align 8
  store i64 %529, i64* %507, align 8
  %543 = icmp eq i64 %499, 0
  br i1 %543, label %546, label %544

544:                                              ; preds = %542
  %545 = inttoptr i64 %499 to i8*
  tail call void @_ZdlPv(i8* %545) #10
  br label %546

546:                                              ; preds = %544, %542, %490, %480
  %547 = phi i8** [ %531, %544 ], [ %531, %542 ], [ %492, %490 ], [ %481, %480 ]
  %548 = phi i64 [ %532, %544 ], [ %532, %542 ], [ %493, %490 ], [ %482, %480 ]
  %549 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 25
  %550 = load i8, i8* %549, align 8, !range !2
  %551 = icmp eq i8 %550, 0
  br i1 %551, label %612, label %552

552:                                              ; preds = %546
  %553 = load i8**, i8*** %10, align 8
  %554 = icmp ult i8** %547, %553
  %555 = ptrtoint i8** %553 to i64
  br i1 %554, label %556, label %561

556:                                              ; preds = %552
  %557 = bitcast i8** %547 to i64*
  store i64 ptrtoint ([15 x i8]* @.str.84 to i64), i64* %557, align 8
  %558 = getelementptr inbounds i8*, i8** %547, i64 1
  %559 = ptrtoint i8** %558 to i64
  %560 = bitcast i8*** %9 to i64*
  store i64 %559, i64* %560, align 8
  br label %612

561:                                              ; preds = %552
  %562 = ptrtoint i8** %547 to i64
  %563 = bitcast i8*** %9 to i64*
  %564 = bitcast %"class.std::__1::vector"* %5 to i64*
  %565 = load i64, i64* %564, align 8
  %566 = sub i64 %562, %565
  %567 = ashr exact i64 %566, 3
  %568 = add nsw i64 %567, 1
  %569 = icmp ugt i64 %568, 2305843009213693951
  br i1 %569, label %570, label %572

570:                                              ; preds = %561
  %571 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %571) #11
  unreachable

572:                                              ; preds = %561
  %573 = bitcast i8*** %10 to i64*
  %574 = sub i64 %555, %565
  %575 = ashr exact i64 %574, 3
  %576 = icmp ult i64 %575, 1152921504606846975
  br i1 %576, label %577, label %585

577:                                              ; preds = %572
  %578 = ashr exact i64 %574, 2
  %579 = icmp ult i64 %578, %568
  %580 = select i1 %579, i64 %568, i64 %578
  %581 = icmp eq i64 %580, 0
  br i1 %581, label %590, label %582

582:                                              ; preds = %577
  %583 = icmp ugt i64 %580, 2305843009213693951
  br i1 %583, label %584, label %585

584:                                              ; preds = %582
  tail call void @abort() #11
  unreachable

585:                                              ; preds = %582, %572
  %586 = phi i64 [ %580, %582 ], [ 2305843009213693951, %572 ]
  %587 = shl i64 %586, 3
  %588 = tail call i8* @_Znwm(i64 %587) #10
  %589 = bitcast i8* %588 to i8**
  br label %590

590:                                              ; preds = %585, %577
  %591 = phi i64 [ %586, %585 ], [ 0, %577 ]
  %592 = phi i8** [ %589, %585 ], [ null, %577 ]
  %593 = getelementptr inbounds i8*, i8** %592, i64 %567
  %594 = getelementptr inbounds i8*, i8** %592, i64 %591
  %595 = ptrtoint i8** %594 to i64
  %596 = bitcast i8** %593 to i64*
  store i64 ptrtoint ([15 x i8]* @.str.84 to i64), i64* %596, align 8
  %597 = getelementptr inbounds i8*, i8** %593, i64 1
  %598 = ptrtoint i8** %597 to i64
  %599 = sub i64 %548, %565
  %600 = ashr exact i64 %599, 3
  %601 = sub nsw i64 0, %600
  %602 = getelementptr inbounds i8*, i8** %593, i64 %601
  %603 = ptrtoint i8** %602 to i64
  %604 = icmp sgt i64 %599, 0
  br i1 %604, label %605, label %608

605:                                              ; preds = %590
  %606 = bitcast i8** %602 to i8*
  %607 = inttoptr i64 %565 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %606, i8* align 8 %607, i64 %599, i1 false) #9
  br label %608

608:                                              ; preds = %605, %590
  store i64 %603, i64* %564, align 8
  store i64 %598, i64* %563, align 8
  store i64 %595, i64* %573, align 8
  %609 = icmp eq i64 %565, 0
  br i1 %609, label %612, label %610

610:                                              ; preds = %608
  %611 = inttoptr i64 %565 to i8*
  tail call void @_ZdlPv(i8* %611) #10
  br label %612

612:                                              ; preds = %610, %608, %556, %546
  %613 = phi i8** [ %597, %610 ], [ %597, %608 ], [ %558, %556 ], [ %547, %546 ]
  %614 = phi i64 [ %598, %610 ], [ %598, %608 ], [ %559, %556 ], [ %548, %546 ]
  %615 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 5
  %616 = load i32, i32* %615, align 8
  switch i32 %616, label %1382 [
    i32 0, label %617
    i32 1, label %743
    i32 2, label %1322
  ]

617:                                              ; preds = %612
  %618 = load i8**, i8*** %10, align 8
  %619 = icmp ult i8** %613, %618
  %620 = ptrtoint i8** %618 to i64
  br i1 %619, label %621, label %626

621:                                              ; preds = %617
  %622 = bitcast i8** %613 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.85 to i64), i64* %622, align 8
  %623 = getelementptr inbounds i8*, i8** %613, i64 1
  %624 = ptrtoint i8** %623 to i64
  %625 = bitcast i8*** %9 to i64*
  store i64 %624, i64* %625, align 8
  br label %677

626:                                              ; preds = %617
  %627 = ptrtoint i8** %613 to i64
  %628 = bitcast i8*** %9 to i64*
  %629 = bitcast %"class.std::__1::vector"* %5 to i64*
  %630 = load i64, i64* %629, align 8
  %631 = sub i64 %627, %630
  %632 = ashr exact i64 %631, 3
  %633 = add nsw i64 %632, 1
  %634 = icmp ugt i64 %633, 2305843009213693951
  br i1 %634, label %635, label %637

635:                                              ; preds = %626
  %636 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %636) #11
  unreachable

637:                                              ; preds = %626
  %638 = bitcast i8*** %10 to i64*
  %639 = sub i64 %620, %630
  %640 = ashr exact i64 %639, 3
  %641 = icmp ult i64 %640, 1152921504606846975
  br i1 %641, label %642, label %650

642:                                              ; preds = %637
  %643 = ashr exact i64 %639, 2
  %644 = icmp ult i64 %643, %633
  %645 = select i1 %644, i64 %633, i64 %643
  %646 = icmp eq i64 %645, 0
  br i1 %646, label %655, label %647

647:                                              ; preds = %642
  %648 = icmp ugt i64 %645, 2305843009213693951
  br i1 %648, label %649, label %650

649:                                              ; preds = %647
  tail call void @abort() #11
  unreachable

650:                                              ; preds = %647, %637
  %651 = phi i64 [ %645, %647 ], [ 2305843009213693951, %637 ]
  %652 = shl i64 %651, 3
  %653 = tail call i8* @_Znwm(i64 %652) #10
  %654 = bitcast i8* %653 to i8**
  br label %655

655:                                              ; preds = %650, %642
  %656 = phi i64 [ %651, %650 ], [ 0, %642 ]
  %657 = phi i8** [ %654, %650 ], [ null, %642 ]
  %658 = getelementptr inbounds i8*, i8** %657, i64 %632
  %659 = getelementptr inbounds i8*, i8** %657, i64 %656
  %660 = ptrtoint i8** %659 to i64
  %661 = bitcast i8** %658 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.85 to i64), i64* %661, align 8
  %662 = getelementptr inbounds i8*, i8** %658, i64 1
  %663 = ptrtoint i8** %662 to i64
  %664 = sub i64 %614, %630
  %665 = ashr exact i64 %664, 3
  %666 = sub nsw i64 0, %665
  %667 = getelementptr inbounds i8*, i8** %658, i64 %666
  %668 = ptrtoint i8** %667 to i64
  %669 = icmp sgt i64 %664, 0
  br i1 %669, label %670, label %673

670:                                              ; preds = %655
  %671 = bitcast i8** %667 to i8*
  %672 = inttoptr i64 %630 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %671, i8* align 8 %672, i64 %664, i1 false) #9
  br label %673

673:                                              ; preds = %670, %655
  store i64 %668, i64* %629, align 8
  store i64 %663, i64* %628, align 8
  store i64 %660, i64* %638, align 8
  %674 = icmp eq i64 %630, 0
  br i1 %674, label %677, label %675

675:                                              ; preds = %673
  %676 = inttoptr i64 %630 to i8*
  tail call void @_ZdlPv(i8* %676) #10
  br label %677

677:                                              ; preds = %621, %673, %675
  %678 = phi i8** [ %623, %621 ], [ %662, %673 ], [ %662, %675 ]
  %679 = phi i64 [ %624, %621 ], [ %663, %673 ], [ %663, %675 ]
  %680 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 9
  %681 = load i8, i8* %680, align 8, !range !2
  %682 = icmp eq i8 %681, 0
  br i1 %682, label %1382, label %683

683:                                              ; preds = %677
  %684 = load i8**, i8*** %10, align 8
  %685 = icmp ult i8** %678, %684
  %686 = ptrtoint i8** %684 to i64
  br i1 %685, label %687, label %692

687:                                              ; preds = %683
  %688 = bitcast i8** %678 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.86 to i64), i64* %688, align 8
  %689 = getelementptr inbounds i8*, i8** %678, i64 1
  %690 = ptrtoint i8** %689 to i64
  %691 = bitcast i8*** %9 to i64*
  store i64 %690, i64* %691, align 8
  br label %1382

692:                                              ; preds = %683
  %693 = ptrtoint i8** %678 to i64
  %694 = bitcast i8*** %9 to i64*
  %695 = bitcast %"class.std::__1::vector"* %5 to i64*
  %696 = load i64, i64* %695, align 8
  %697 = sub i64 %693, %696
  %698 = ashr exact i64 %697, 3
  %699 = add nsw i64 %698, 1
  %700 = icmp ugt i64 %699, 2305843009213693951
  br i1 %700, label %701, label %703

701:                                              ; preds = %692
  %702 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %702) #11
  unreachable

703:                                              ; preds = %692
  %704 = bitcast i8*** %10 to i64*
  %705 = sub i64 %686, %696
  %706 = ashr exact i64 %705, 3
  %707 = icmp ult i64 %706, 1152921504606846975
  br i1 %707, label %708, label %716

708:                                              ; preds = %703
  %709 = ashr exact i64 %705, 2
  %710 = icmp ult i64 %709, %699
  %711 = select i1 %710, i64 %699, i64 %709
  %712 = icmp eq i64 %711, 0
  br i1 %712, label %721, label %713

713:                                              ; preds = %708
  %714 = icmp ugt i64 %711, 2305843009213693951
  br i1 %714, label %715, label %716

715:                                              ; preds = %713
  tail call void @abort() #11
  unreachable

716:                                              ; preds = %713, %703
  %717 = phi i64 [ %711, %713 ], [ 2305843009213693951, %703 ]
  %718 = shl i64 %717, 3
  %719 = tail call i8* @_Znwm(i64 %718) #10
  %720 = bitcast i8* %719 to i8**
  br label %721

721:                                              ; preds = %716, %708
  %722 = phi i64 [ %717, %716 ], [ 0, %708 ]
  %723 = phi i8** [ %720, %716 ], [ null, %708 ]
  %724 = getelementptr inbounds i8*, i8** %723, i64 %698
  %725 = getelementptr inbounds i8*, i8** %723, i64 %722
  %726 = ptrtoint i8** %725 to i64
  %727 = bitcast i8** %724 to i64*
  store i64 ptrtoint ([21 x i8]* @.str.86 to i64), i64* %727, align 8
  %728 = getelementptr inbounds i8*, i8** %724, i64 1
  %729 = ptrtoint i8** %728 to i64
  %730 = sub i64 %679, %696
  %731 = ashr exact i64 %730, 3
  %732 = sub nsw i64 0, %731
  %733 = getelementptr inbounds i8*, i8** %724, i64 %732
  %734 = ptrtoint i8** %733 to i64
  %735 = icmp sgt i64 %730, 0
  br i1 %735, label %736, label %739

736:                                              ; preds = %721
  %737 = bitcast i8** %733 to i8*
  %738 = inttoptr i64 %696 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %737, i8* align 8 %738, i64 %730, i1 false) #9
  br label %739

739:                                              ; preds = %736, %721
  store i64 %734, i64* %695, align 8
  store i64 %729, i64* %694, align 8
  store i64 %726, i64* %704, align 8
  %740 = icmp eq i64 %696, 0
  br i1 %740, label %1382, label %741

741:                                              ; preds = %739
  %742 = inttoptr i64 %696 to i8*
  tail call void @_ZdlPv(i8* %742) #10
  br label %1382

743:                                              ; preds = %612
  %744 = load i8**, i8*** %10, align 8
  %745 = icmp ult i8** %613, %744
  %746 = ptrtoint i8** %744 to i64
  br i1 %745, label %747, label %752

747:                                              ; preds = %743
  %748 = bitcast i8** %613 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.87 to i64), i64* %748, align 8
  %749 = getelementptr inbounds i8*, i8** %613, i64 1
  %750 = ptrtoint i8** %749 to i64
  %751 = bitcast i8*** %9 to i64*
  store i64 %750, i64* %751, align 8
  br label %803

752:                                              ; preds = %743
  %753 = ptrtoint i8** %613 to i64
  %754 = bitcast i8*** %9 to i64*
  %755 = bitcast %"class.std::__1::vector"* %5 to i64*
  %756 = load i64, i64* %755, align 8
  %757 = sub i64 %753, %756
  %758 = ashr exact i64 %757, 3
  %759 = add nsw i64 %758, 1
  %760 = icmp ugt i64 %759, 2305843009213693951
  br i1 %760, label %761, label %763

761:                                              ; preds = %752
  %762 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %762) #11
  unreachable

763:                                              ; preds = %752
  %764 = bitcast i8*** %10 to i64*
  %765 = sub i64 %746, %756
  %766 = ashr exact i64 %765, 3
  %767 = icmp ult i64 %766, 1152921504606846975
  br i1 %767, label %768, label %776

768:                                              ; preds = %763
  %769 = ashr exact i64 %765, 2
  %770 = icmp ult i64 %769, %759
  %771 = select i1 %770, i64 %759, i64 %769
  %772 = icmp eq i64 %771, 0
  br i1 %772, label %781, label %773

773:                                              ; preds = %768
  %774 = icmp ugt i64 %771, 2305843009213693951
  br i1 %774, label %775, label %776

775:                                              ; preds = %773
  tail call void @abort() #11
  unreachable

776:                                              ; preds = %773, %763
  %777 = phi i64 [ %771, %773 ], [ 2305843009213693951, %763 ]
  %778 = shl i64 %777, 3
  %779 = tail call i8* @_Znwm(i64 %778) #10
  %780 = bitcast i8* %779 to i8**
  br label %781

781:                                              ; preds = %776, %768
  %782 = phi i64 [ %777, %776 ], [ 0, %768 ]
  %783 = phi i8** [ %780, %776 ], [ null, %768 ]
  %784 = getelementptr inbounds i8*, i8** %783, i64 %758
  %785 = getelementptr inbounds i8*, i8** %783, i64 %782
  %786 = ptrtoint i8** %785 to i64
  %787 = bitcast i8** %784 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.87 to i64), i64* %787, align 8
  %788 = getelementptr inbounds i8*, i8** %784, i64 1
  %789 = ptrtoint i8** %788 to i64
  %790 = sub i64 %614, %756
  %791 = ashr exact i64 %790, 3
  %792 = sub nsw i64 0, %791
  %793 = getelementptr inbounds i8*, i8** %784, i64 %792
  %794 = ptrtoint i8** %793 to i64
  %795 = icmp sgt i64 %790, 0
  br i1 %795, label %796, label %799

796:                                              ; preds = %781
  %797 = bitcast i8** %793 to i8*
  %798 = inttoptr i64 %756 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %797, i8* align 8 %798, i64 %790, i1 false) #9
  br label %799

799:                                              ; preds = %796, %781
  store i64 %794, i64* %755, align 8
  store i64 %789, i64* %754, align 8
  store i64 %786, i64* %764, align 8
  %800 = icmp eq i64 %756, 0
  br i1 %800, label %803, label %801

801:                                              ; preds = %799
  %802 = inttoptr i64 %756 to i8*
  tail call void @_ZdlPv(i8* %802) #10
  br label %803

803:                                              ; preds = %747, %799, %801
  %804 = phi i8** [ %749, %747 ], [ %788, %799 ], [ %788, %801 ]
  %805 = phi i64 [ %750, %747 ], [ %789, %799 ], [ %789, %801 ]
  %806 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 32
  %807 = load i32, i32* %806, align 4
  %808 = icmp eq i32 %807, 1
  br i1 %808, label %809, label %873

809:                                              ; preds = %803
  %810 = load i8**, i8*** %10, align 8
  %811 = icmp ult i8** %804, %810
  %812 = ptrtoint i8** %810 to i64
  br i1 %811, label %813, label %818

813:                                              ; preds = %809
  %814 = bitcast i8** %804 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.88 to i64), i64* %814, align 8
  %815 = getelementptr inbounds i8*, i8** %804, i64 1
  %816 = ptrtoint i8** %815 to i64
  %817 = bitcast i8*** %9 to i64*
  store i64 %816, i64* %817, align 8
  br label %869

818:                                              ; preds = %809
  %819 = ptrtoint i8** %804 to i64
  %820 = bitcast i8*** %9 to i64*
  %821 = bitcast %"class.std::__1::vector"* %5 to i64*
  %822 = load i64, i64* %821, align 8
  %823 = sub i64 %819, %822
  %824 = ashr exact i64 %823, 3
  %825 = add nsw i64 %824, 1
  %826 = icmp ugt i64 %825, 2305843009213693951
  br i1 %826, label %827, label %829

827:                                              ; preds = %818
  %828 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %828) #11
  unreachable

829:                                              ; preds = %818
  %830 = bitcast i8*** %10 to i64*
  %831 = sub i64 %812, %822
  %832 = ashr exact i64 %831, 3
  %833 = icmp ult i64 %832, 1152921504606846975
  br i1 %833, label %834, label %842

834:                                              ; preds = %829
  %835 = ashr exact i64 %831, 2
  %836 = icmp ult i64 %835, %825
  %837 = select i1 %836, i64 %825, i64 %835
  %838 = icmp eq i64 %837, 0
  br i1 %838, label %847, label %839

839:                                              ; preds = %834
  %840 = icmp ugt i64 %837, 2305843009213693951
  br i1 %840, label %841, label %842

841:                                              ; preds = %839
  tail call void @abort() #11
  unreachable

842:                                              ; preds = %839, %829
  %843 = phi i64 [ %837, %839 ], [ 2305843009213693951, %829 ]
  %844 = shl i64 %843, 3
  %845 = tail call i8* @_Znwm(i64 %844) #10
  %846 = bitcast i8* %845 to i8**
  br label %847

847:                                              ; preds = %842, %834
  %848 = phi i64 [ %843, %842 ], [ 0, %834 ]
  %849 = phi i8** [ %846, %842 ], [ null, %834 ]
  %850 = getelementptr inbounds i8*, i8** %849, i64 %824
  %851 = getelementptr inbounds i8*, i8** %849, i64 %848
  %852 = ptrtoint i8** %851 to i64
  %853 = bitcast i8** %850 to i64*
  store i64 ptrtoint ([11 x i8]* @.str.88 to i64), i64* %853, align 8
  %854 = getelementptr inbounds i8*, i8** %850, i64 1
  %855 = ptrtoint i8** %854 to i64
  %856 = sub i64 %805, %822
  %857 = ashr exact i64 %856, 3
  %858 = sub nsw i64 0, %857
  %859 = getelementptr inbounds i8*, i8** %850, i64 %858
  %860 = ptrtoint i8** %859 to i64
  %861 = icmp sgt i64 %856, 0
  br i1 %861, label %862, label %865

862:                                              ; preds = %847
  %863 = bitcast i8** %859 to i8*
  %864 = inttoptr i64 %822 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %863, i8* align 8 %864, i64 %856, i1 false) #9
  br label %865

865:                                              ; preds = %862, %847
  store i64 %860, i64* %821, align 8
  store i64 %855, i64* %820, align 8
  store i64 %852, i64* %830, align 8
  %866 = icmp eq i64 %822, 0
  br i1 %866, label %869, label %867

867:                                              ; preds = %865
  %868 = inttoptr i64 %822 to i8*
  tail call void @_ZdlPv(i8* %868) #10
  br label %869

869:                                              ; preds = %813, %865, %867
  %870 = phi i8** [ %815, %813 ], [ %854, %865 ], [ %854, %867 ]
  %871 = phi i64 [ %816, %813 ], [ %855, %865 ], [ %855, %867 ]
  %872 = load i32, i32* %806, align 4
  br label %873

873:                                              ; preds = %869, %803
  %874 = phi i8** [ %870, %869 ], [ %804, %803 ]
  %875 = phi i64 [ %871, %869 ], [ %805, %803 ]
  %876 = phi i32 [ %872, %869 ], [ %807, %803 ]
  %877 = icmp eq i32 %876, 2
  br i1 %877, label %878, label %1002

878:                                              ; preds = %873
  %879 = load i8**, i8*** %10, align 8
  %880 = icmp ult i8** %874, %879
  %881 = ptrtoint i8** %879 to i64
  br i1 %880, label %882, label %889

882:                                              ; preds = %878
  %883 = bitcast i8** %874 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.89 to i64), i64* %883, align 8
  %884 = getelementptr inbounds i8*, i8** %874, i64 1
  %885 = ptrtoint i8** %884 to i64
  %886 = bitcast i8*** %9 to i64*
  store i64 %885, i64* %886, align 8
  %887 = load i8**, i8*** %10, align 8
  %888 = ptrtoint i8** %887 to i64
  br label %940

889:                                              ; preds = %878
  %890 = ptrtoint i8** %874 to i64
  %891 = bitcast i8*** %9 to i64*
  %892 = bitcast %"class.std::__1::vector"* %5 to i64*
  %893 = load i64, i64* %892, align 8
  %894 = sub i64 %890, %893
  %895 = ashr exact i64 %894, 3
  %896 = add nsw i64 %895, 1
  %897 = icmp ugt i64 %896, 2305843009213693951
  br i1 %897, label %898, label %900

898:                                              ; preds = %889
  %899 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %899) #11
  unreachable

900:                                              ; preds = %889
  %901 = bitcast i8*** %10 to i64*
  %902 = sub i64 %881, %893
  %903 = ashr exact i64 %902, 3
  %904 = icmp ult i64 %903, 1152921504606846975
  br i1 %904, label %905, label %913

905:                                              ; preds = %900
  %906 = ashr exact i64 %902, 2
  %907 = icmp ult i64 %906, %896
  %908 = select i1 %907, i64 %896, i64 %906
  %909 = icmp eq i64 %908, 0
  br i1 %909, label %918, label %910

910:                                              ; preds = %905
  %911 = icmp ugt i64 %908, 2305843009213693951
  br i1 %911, label %912, label %913

912:                                              ; preds = %910
  tail call void @abort() #11
  unreachable

913:                                              ; preds = %910, %900
  %914 = phi i64 [ %908, %910 ], [ 2305843009213693951, %900 ]
  %915 = shl i64 %914, 3
  %916 = tail call i8* @_Znwm(i64 %915) #10
  %917 = bitcast i8* %916 to i8**
  br label %918

918:                                              ; preds = %913, %905
  %919 = phi i64 [ %914, %913 ], [ 0, %905 ]
  %920 = phi i8** [ %917, %913 ], [ null, %905 ]
  %921 = getelementptr inbounds i8*, i8** %920, i64 %895
  %922 = getelementptr inbounds i8*, i8** %920, i64 %919
  %923 = ptrtoint i8** %922 to i64
  %924 = bitcast i8** %921 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.89 to i64), i64* %924, align 8
  %925 = getelementptr inbounds i8*, i8** %921, i64 1
  %926 = ptrtoint i8** %925 to i64
  %927 = sub i64 %875, %893
  %928 = ashr exact i64 %927, 3
  %929 = sub nsw i64 0, %928
  %930 = getelementptr inbounds i8*, i8** %921, i64 %929
  %931 = ptrtoint i8** %930 to i64
  %932 = icmp sgt i64 %927, 0
  br i1 %932, label %933, label %936

933:                                              ; preds = %918
  %934 = bitcast i8** %930 to i8*
  %935 = inttoptr i64 %893 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %934, i8* align 8 %935, i64 %927, i1 false) #9
  br label %936

936:                                              ; preds = %933, %918
  store i64 %931, i64* %892, align 8
  store i64 %926, i64* %891, align 8
  store i64 %923, i64* %901, align 8
  %937 = icmp eq i64 %893, 0
  br i1 %937, label %940, label %938

938:                                              ; preds = %936
  %939 = inttoptr i64 %893 to i8*
  tail call void @_ZdlPv(i8* %939) #10
  br label %940

940:                                              ; preds = %882, %936, %938
  %941 = phi i64 [ %888, %882 ], [ %923, %936 ], [ %923, %938 ]
  %942 = phi i64 [ %885, %882 ], [ %926, %936 ], [ %926, %938 ]
  %943 = phi i8** [ %887, %882 ], [ %922, %936 ], [ %922, %938 ]
  %944 = phi i8** [ %884, %882 ], [ %925, %936 ], [ %925, %938 ]
  %945 = icmp ult i8** %944, %943
  br i1 %945, label %946, label %951

946:                                              ; preds = %940
  %947 = bitcast i8** %944 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.90 to i64), i64* %947, align 8
  %948 = getelementptr inbounds i8*, i8** %944, i64 1
  %949 = ptrtoint i8** %948 to i64
  %950 = bitcast i8*** %9 to i64*
  store i64 %949, i64* %950, align 8
  br label %1002

951:                                              ; preds = %940
  %952 = ptrtoint i8** %944 to i64
  %953 = bitcast i8*** %9 to i64*
  %954 = bitcast %"class.std::__1::vector"* %5 to i64*
  %955 = load i64, i64* %954, align 8
  %956 = sub i64 %952, %955
  %957 = ashr exact i64 %956, 3
  %958 = add nsw i64 %957, 1
  %959 = icmp ugt i64 %958, 2305843009213693951
  br i1 %959, label %960, label %962

960:                                              ; preds = %951
  %961 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %961) #11
  unreachable

962:                                              ; preds = %951
  %963 = bitcast i8*** %10 to i64*
  %964 = sub i64 %941, %955
  %965 = ashr exact i64 %964, 3
  %966 = icmp ult i64 %965, 1152921504606846975
  br i1 %966, label %967, label %975

967:                                              ; preds = %962
  %968 = ashr exact i64 %964, 2
  %969 = icmp ult i64 %968, %958
  %970 = select i1 %969, i64 %958, i64 %968
  %971 = icmp eq i64 %970, 0
  br i1 %971, label %980, label %972

972:                                              ; preds = %967
  %973 = icmp ugt i64 %970, 2305843009213693951
  br i1 %973, label %974, label %975

974:                                              ; preds = %972
  tail call void @abort() #11
  unreachable

975:                                              ; preds = %972, %962
  %976 = phi i64 [ %970, %972 ], [ 2305843009213693951, %962 ]
  %977 = shl i64 %976, 3
  %978 = tail call i8* @_Znwm(i64 %977) #10
  %979 = bitcast i8* %978 to i8**
  br label %980

980:                                              ; preds = %975, %967
  %981 = phi i64 [ %976, %975 ], [ 0, %967 ]
  %982 = phi i8** [ %979, %975 ], [ null, %967 ]
  %983 = getelementptr inbounds i8*, i8** %982, i64 %957
  %984 = getelementptr inbounds i8*, i8** %982, i64 %981
  %985 = ptrtoint i8** %984 to i64
  %986 = bitcast i8** %983 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.90 to i64), i64* %986, align 8
  %987 = getelementptr inbounds i8*, i8** %983, i64 1
  %988 = ptrtoint i8** %987 to i64
  %989 = sub i64 %942, %955
  %990 = ashr exact i64 %989, 3
  %991 = sub nsw i64 0, %990
  %992 = getelementptr inbounds i8*, i8** %983, i64 %991
  %993 = ptrtoint i8** %992 to i64
  %994 = icmp sgt i64 %989, 0
  br i1 %994, label %995, label %998

995:                                              ; preds = %980
  %996 = bitcast i8** %992 to i8*
  %997 = inttoptr i64 %955 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %996, i8* align 8 %997, i64 %989, i1 false) #9
  br label %998

998:                                              ; preds = %995, %980
  store i64 %993, i64* %954, align 8
  store i64 %988, i64* %953, align 8
  store i64 %985, i64* %963, align 8
  %999 = icmp eq i64 %955, 0
  br i1 %999, label %1002, label %1000

1000:                                             ; preds = %998
  %1001 = inttoptr i64 %955 to i8*
  tail call void @_ZdlPv(i8* %1001) #10
  br label %1002

1002:                                             ; preds = %1000, %998, %946, %873
  %1003 = phi i8** [ %987, %1000 ], [ %987, %998 ], [ %948, %946 ], [ %874, %873 ]
  %1004 = phi i64 [ %988, %1000 ], [ %988, %998 ], [ %949, %946 ], [ %875, %873 ]
  %1005 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 31
  %1006 = load i32, i32* %1005, align 8
  %1007 = icmp eq i32 %1006, 2
  br i1 %1007, label %1008, label %1068

1008:                                             ; preds = %1002
  %1009 = load i8**, i8*** %10, align 8
  %1010 = icmp ult i8** %1003, %1009
  %1011 = ptrtoint i8** %1009 to i64
  br i1 %1010, label %1012, label %1017

1012:                                             ; preds = %1008
  %1013 = bitcast i8** %1003 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.91 to i64), i64* %1013, align 8
  %1014 = getelementptr inbounds i8*, i8** %1003, i64 1
  %1015 = ptrtoint i8** %1014 to i64
  %1016 = bitcast i8*** %9 to i64*
  store i64 %1015, i64* %1016, align 8
  br label %1068

1017:                                             ; preds = %1008
  %1018 = ptrtoint i8** %1003 to i64
  %1019 = bitcast i8*** %9 to i64*
  %1020 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1021 = load i64, i64* %1020, align 8
  %1022 = sub i64 %1018, %1021
  %1023 = ashr exact i64 %1022, 3
  %1024 = add nsw i64 %1023, 1
  %1025 = icmp ugt i64 %1024, 2305843009213693951
  br i1 %1025, label %1026, label %1028

1026:                                             ; preds = %1017
  %1027 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1027) #11
  unreachable

1028:                                             ; preds = %1017
  %1029 = bitcast i8*** %10 to i64*
  %1030 = sub i64 %1011, %1021
  %1031 = ashr exact i64 %1030, 3
  %1032 = icmp ult i64 %1031, 1152921504606846975
  br i1 %1032, label %1033, label %1041

1033:                                             ; preds = %1028
  %1034 = ashr exact i64 %1030, 2
  %1035 = icmp ult i64 %1034, %1024
  %1036 = select i1 %1035, i64 %1024, i64 %1034
  %1037 = icmp eq i64 %1036, 0
  br i1 %1037, label %1046, label %1038

1038:                                             ; preds = %1033
  %1039 = icmp ugt i64 %1036, 2305843009213693951
  br i1 %1039, label %1040, label %1041

1040:                                             ; preds = %1038
  tail call void @abort() #11
  unreachable

1041:                                             ; preds = %1038, %1028
  %1042 = phi i64 [ %1036, %1038 ], [ 2305843009213693951, %1028 ]
  %1043 = shl i64 %1042, 3
  %1044 = tail call i8* @_Znwm(i64 %1043) #10
  %1045 = bitcast i8* %1044 to i8**
  br label %1046

1046:                                             ; preds = %1041, %1033
  %1047 = phi i64 [ %1042, %1041 ], [ 0, %1033 ]
  %1048 = phi i8** [ %1045, %1041 ], [ null, %1033 ]
  %1049 = getelementptr inbounds i8*, i8** %1048, i64 %1023
  %1050 = getelementptr inbounds i8*, i8** %1048, i64 %1047
  %1051 = ptrtoint i8** %1050 to i64
  %1052 = bitcast i8** %1049 to i64*
  store i64 ptrtoint ([10 x i8]* @.str.91 to i64), i64* %1052, align 8
  %1053 = getelementptr inbounds i8*, i8** %1049, i64 1
  %1054 = ptrtoint i8** %1053 to i64
  %1055 = sub i64 %1004, %1021
  %1056 = ashr exact i64 %1055, 3
  %1057 = sub nsw i64 0, %1056
  %1058 = getelementptr inbounds i8*, i8** %1049, i64 %1057
  %1059 = ptrtoint i8** %1058 to i64
  %1060 = icmp sgt i64 %1055, 0
  br i1 %1060, label %1061, label %1064

1061:                                             ; preds = %1046
  %1062 = bitcast i8** %1058 to i8*
  %1063 = inttoptr i64 %1021 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1062, i8* align 8 %1063, i64 %1055, i1 false) #9
  br label %1064

1064:                                             ; preds = %1061, %1046
  store i64 %1059, i64* %1020, align 8
  store i64 %1054, i64* %1019, align 8
  store i64 %1051, i64* %1029, align 8
  %1065 = icmp eq i64 %1021, 0
  br i1 %1065, label %1068, label %1066

1066:                                             ; preds = %1064
  %1067 = inttoptr i64 %1021 to i8*
  tail call void @_ZdlPv(i8* %1067) #10
  br label %1068

1068:                                             ; preds = %1066, %1064, %1012, %1002
  %1069 = phi i64 [ %1054, %1066 ], [ %1054, %1064 ], [ %1015, %1012 ], [ %1004, %1002 ]
  %1070 = phi i8** [ %1053, %1066 ], [ %1053, %1064 ], [ %1014, %1012 ], [ %1003, %1002 ]
  %1071 = load i8**, i8*** %10, align 8
  %1072 = icmp ult i8** %1070, %1071
  %1073 = ptrtoint i8** %1071 to i64
  br i1 %1072, label %1074, label %1081

1074:                                             ; preds = %1068
  %1075 = bitcast i8** %1070 to i64*
  store i64 ptrtoint ([14 x i8]* @.str.92 to i64), i64* %1075, align 8
  %1076 = getelementptr inbounds i8*, i8** %1070, i64 1
  %1077 = ptrtoint i8** %1076 to i64
  %1078 = bitcast i8*** %9 to i64*
  store i64 %1077, i64* %1078, align 8
  %1079 = load i8**, i8*** %10, align 8
  %1080 = ptrtoint i8** %1079 to i64
  br label %1132

1081:                                             ; preds = %1068
  %1082 = ptrtoint i8** %1070 to i64
  %1083 = bitcast i8*** %9 to i64*
  %1084 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1085 = load i64, i64* %1084, align 8
  %1086 = sub i64 %1082, %1085
  %1087 = ashr exact i64 %1086, 3
  %1088 = add nsw i64 %1087, 1
  %1089 = icmp ugt i64 %1088, 2305843009213693951
  br i1 %1089, label %1090, label %1092

1090:                                             ; preds = %1081
  %1091 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1091) #11
  unreachable

1092:                                             ; preds = %1081
  %1093 = bitcast i8*** %10 to i64*
  %1094 = sub i64 %1073, %1085
  %1095 = ashr exact i64 %1094, 3
  %1096 = icmp ult i64 %1095, 1152921504606846975
  br i1 %1096, label %1097, label %1105

1097:                                             ; preds = %1092
  %1098 = ashr exact i64 %1094, 2
  %1099 = icmp ult i64 %1098, %1088
  %1100 = select i1 %1099, i64 %1088, i64 %1098
  %1101 = icmp eq i64 %1100, 0
  br i1 %1101, label %1110, label %1102

1102:                                             ; preds = %1097
  %1103 = icmp ugt i64 %1100, 2305843009213693951
  br i1 %1103, label %1104, label %1105

1104:                                             ; preds = %1102
  tail call void @abort() #11
  unreachable

1105:                                             ; preds = %1102, %1092
  %1106 = phi i64 [ %1100, %1102 ], [ 2305843009213693951, %1092 ]
  %1107 = shl i64 %1106, 3
  %1108 = tail call i8* @_Znwm(i64 %1107) #10
  %1109 = bitcast i8* %1108 to i8**
  br label %1110

1110:                                             ; preds = %1105, %1097
  %1111 = phi i64 [ %1106, %1105 ], [ 0, %1097 ]
  %1112 = phi i8** [ %1109, %1105 ], [ null, %1097 ]
  %1113 = getelementptr inbounds i8*, i8** %1112, i64 %1087
  %1114 = getelementptr inbounds i8*, i8** %1112, i64 %1111
  %1115 = ptrtoint i8** %1114 to i64
  %1116 = bitcast i8** %1113 to i64*
  store i64 ptrtoint ([14 x i8]* @.str.92 to i64), i64* %1116, align 8
  %1117 = getelementptr inbounds i8*, i8** %1113, i64 1
  %1118 = ptrtoint i8** %1117 to i64
  %1119 = sub i64 %1069, %1085
  %1120 = ashr exact i64 %1119, 3
  %1121 = sub nsw i64 0, %1120
  %1122 = getelementptr inbounds i8*, i8** %1113, i64 %1121
  %1123 = ptrtoint i8** %1122 to i64
  %1124 = icmp sgt i64 %1119, 0
  br i1 %1124, label %1125, label %1128

1125:                                             ; preds = %1110
  %1126 = bitcast i8** %1122 to i8*
  %1127 = inttoptr i64 %1085 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1126, i8* align 8 %1127, i64 %1119, i1 false) #9
  br label %1128

1128:                                             ; preds = %1125, %1110
  store i64 %1123, i64* %1084, align 8
  store i64 %1118, i64* %1083, align 8
  store i64 %1115, i64* %1093, align 8
  %1129 = icmp eq i64 %1085, 0
  br i1 %1129, label %1132, label %1130

1130:                                             ; preds = %1128
  %1131 = inttoptr i64 %1085 to i8*
  tail call void @_ZdlPv(i8* %1131) #10
  br label %1132

1132:                                             ; preds = %1074, %1128, %1130
  %1133 = phi i64 [ %1080, %1074 ], [ %1115, %1128 ], [ %1115, %1130 ]
  %1134 = phi i64 [ %1077, %1074 ], [ %1118, %1128 ], [ %1118, %1130 ]
  %1135 = phi i8** [ %1079, %1074 ], [ %1114, %1128 ], [ %1114, %1130 ]
  %1136 = phi i8** [ %1076, %1074 ], [ %1117, %1128 ], [ %1117, %1130 ]
  %1137 = icmp ult i8** %1136, %1135
  br i1 %1137, label %1138, label %1145

1138:                                             ; preds = %1132
  %1139 = bitcast i8** %1136 to i64*
  store i64 ptrtoint ([14 x i8]* @.str.93 to i64), i64* %1139, align 8
  %1140 = getelementptr inbounds i8*, i8** %1136, i64 1
  %1141 = ptrtoint i8** %1140 to i64
  %1142 = bitcast i8*** %9 to i64*
  store i64 %1141, i64* %1142, align 8
  %1143 = load i8**, i8*** %10, align 8
  %1144 = ptrtoint i8** %1143 to i64
  br label %1196

1145:                                             ; preds = %1132
  %1146 = ptrtoint i8** %1136 to i64
  %1147 = bitcast i8*** %9 to i64*
  %1148 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1149 = load i64, i64* %1148, align 8
  %1150 = sub i64 %1146, %1149
  %1151 = ashr exact i64 %1150, 3
  %1152 = add nsw i64 %1151, 1
  %1153 = icmp ugt i64 %1152, 2305843009213693951
  br i1 %1153, label %1154, label %1156

1154:                                             ; preds = %1145
  %1155 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1155) #11
  unreachable

1156:                                             ; preds = %1145
  %1157 = bitcast i8*** %10 to i64*
  %1158 = sub i64 %1133, %1149
  %1159 = ashr exact i64 %1158, 3
  %1160 = icmp ult i64 %1159, 1152921504606846975
  br i1 %1160, label %1161, label %1169

1161:                                             ; preds = %1156
  %1162 = ashr exact i64 %1158, 2
  %1163 = icmp ult i64 %1162, %1152
  %1164 = select i1 %1163, i64 %1152, i64 %1162
  %1165 = icmp eq i64 %1164, 0
  br i1 %1165, label %1174, label %1166

1166:                                             ; preds = %1161
  %1167 = icmp ugt i64 %1164, 2305843009213693951
  br i1 %1167, label %1168, label %1169

1168:                                             ; preds = %1166
  tail call void @abort() #11
  unreachable

1169:                                             ; preds = %1166, %1156
  %1170 = phi i64 [ %1164, %1166 ], [ 2305843009213693951, %1156 ]
  %1171 = shl i64 %1170, 3
  %1172 = tail call i8* @_Znwm(i64 %1171) #10
  %1173 = bitcast i8* %1172 to i8**
  br label %1174

1174:                                             ; preds = %1169, %1161
  %1175 = phi i64 [ %1170, %1169 ], [ 0, %1161 ]
  %1176 = phi i8** [ %1173, %1169 ], [ null, %1161 ]
  %1177 = getelementptr inbounds i8*, i8** %1176, i64 %1151
  %1178 = getelementptr inbounds i8*, i8** %1176, i64 %1175
  %1179 = ptrtoint i8** %1178 to i64
  %1180 = bitcast i8** %1177 to i64*
  store i64 ptrtoint ([14 x i8]* @.str.93 to i64), i64* %1180, align 8
  %1181 = getelementptr inbounds i8*, i8** %1177, i64 1
  %1182 = ptrtoint i8** %1181 to i64
  %1183 = sub i64 %1134, %1149
  %1184 = ashr exact i64 %1183, 3
  %1185 = sub nsw i64 0, %1184
  %1186 = getelementptr inbounds i8*, i8** %1177, i64 %1185
  %1187 = ptrtoint i8** %1186 to i64
  %1188 = icmp sgt i64 %1183, 0
  br i1 %1188, label %1189, label %1192

1189:                                             ; preds = %1174
  %1190 = bitcast i8** %1186 to i8*
  %1191 = inttoptr i64 %1149 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1190, i8* align 8 %1191, i64 %1183, i1 false) #9
  br label %1192

1192:                                             ; preds = %1189, %1174
  store i64 %1187, i64* %1148, align 8
  store i64 %1182, i64* %1147, align 8
  store i64 %1179, i64* %1157, align 8
  %1193 = icmp eq i64 %1149, 0
  br i1 %1193, label %1196, label %1194

1194:                                             ; preds = %1192
  %1195 = inttoptr i64 %1149 to i8*
  tail call void @_ZdlPv(i8* %1195) #10
  br label %1196

1196:                                             ; preds = %1138, %1192, %1194
  %1197 = phi i64 [ %1144, %1138 ], [ %1179, %1192 ], [ %1179, %1194 ]
  %1198 = phi i64 [ %1141, %1138 ], [ %1182, %1192 ], [ %1182, %1194 ]
  %1199 = phi i8** [ %1143, %1138 ], [ %1178, %1192 ], [ %1178, %1194 ]
  %1200 = phi i8** [ %1140, %1138 ], [ %1181, %1192 ], [ %1181, %1194 ]
  %1201 = icmp ult i8** %1200, %1199
  br i1 %1201, label %1202, label %1209

1202:                                             ; preds = %1196
  %1203 = bitcast i8** %1200 to i64*
  store i64 ptrtoint ([20 x i8]* @.str.94 to i64), i64* %1203, align 8
  %1204 = getelementptr inbounds i8*, i8** %1200, i64 1
  %1205 = ptrtoint i8** %1204 to i64
  %1206 = bitcast i8*** %9 to i64*
  store i64 %1205, i64* %1206, align 8
  %1207 = load i8**, i8*** %10, align 8
  %1208 = ptrtoint i8** %1207 to i64
  br label %1260

1209:                                             ; preds = %1196
  %1210 = ptrtoint i8** %1200 to i64
  %1211 = bitcast i8*** %9 to i64*
  %1212 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1213 = load i64, i64* %1212, align 8
  %1214 = sub i64 %1210, %1213
  %1215 = ashr exact i64 %1214, 3
  %1216 = add nsw i64 %1215, 1
  %1217 = icmp ugt i64 %1216, 2305843009213693951
  br i1 %1217, label %1218, label %1220

1218:                                             ; preds = %1209
  %1219 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1219) #11
  unreachable

1220:                                             ; preds = %1209
  %1221 = bitcast i8*** %10 to i64*
  %1222 = sub i64 %1197, %1213
  %1223 = ashr exact i64 %1222, 3
  %1224 = icmp ult i64 %1223, 1152921504606846975
  br i1 %1224, label %1225, label %1233

1225:                                             ; preds = %1220
  %1226 = ashr exact i64 %1222, 2
  %1227 = icmp ult i64 %1226, %1216
  %1228 = select i1 %1227, i64 %1216, i64 %1226
  %1229 = icmp eq i64 %1228, 0
  br i1 %1229, label %1238, label %1230

1230:                                             ; preds = %1225
  %1231 = icmp ugt i64 %1228, 2305843009213693951
  br i1 %1231, label %1232, label %1233

1232:                                             ; preds = %1230
  tail call void @abort() #11
  unreachable

1233:                                             ; preds = %1230, %1220
  %1234 = phi i64 [ %1228, %1230 ], [ 2305843009213693951, %1220 ]
  %1235 = shl i64 %1234, 3
  %1236 = tail call i8* @_Znwm(i64 %1235) #10
  %1237 = bitcast i8* %1236 to i8**
  br label %1238

1238:                                             ; preds = %1233, %1225
  %1239 = phi i64 [ %1234, %1233 ], [ 0, %1225 ]
  %1240 = phi i8** [ %1237, %1233 ], [ null, %1225 ]
  %1241 = getelementptr inbounds i8*, i8** %1240, i64 %1215
  %1242 = getelementptr inbounds i8*, i8** %1240, i64 %1239
  %1243 = ptrtoint i8** %1242 to i64
  %1244 = bitcast i8** %1241 to i64*
  store i64 ptrtoint ([20 x i8]* @.str.94 to i64), i64* %1244, align 8
  %1245 = getelementptr inbounds i8*, i8** %1241, i64 1
  %1246 = ptrtoint i8** %1245 to i64
  %1247 = sub i64 %1198, %1213
  %1248 = ashr exact i64 %1247, 3
  %1249 = sub nsw i64 0, %1248
  %1250 = getelementptr inbounds i8*, i8** %1241, i64 %1249
  %1251 = ptrtoint i8** %1250 to i64
  %1252 = icmp sgt i64 %1247, 0
  br i1 %1252, label %1253, label %1256

1253:                                             ; preds = %1238
  %1254 = bitcast i8** %1250 to i8*
  %1255 = inttoptr i64 %1213 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1254, i8* align 8 %1255, i64 %1247, i1 false) #9
  br label %1256

1256:                                             ; preds = %1253, %1238
  store i64 %1251, i64* %1212, align 8
  store i64 %1246, i64* %1211, align 8
  store i64 %1243, i64* %1221, align 8
  %1257 = icmp eq i64 %1213, 0
  br i1 %1257, label %1260, label %1258

1258:                                             ; preds = %1256
  %1259 = inttoptr i64 %1213 to i8*
  tail call void @_ZdlPv(i8* %1259) #10
  br label %1260

1260:                                             ; preds = %1202, %1256, %1258
  %1261 = phi i64 [ %1208, %1202 ], [ %1243, %1256 ], [ %1243, %1258 ]
  %1262 = phi i64 [ %1205, %1202 ], [ %1246, %1256 ], [ %1246, %1258 ]
  %1263 = phi i8** [ %1207, %1202 ], [ %1242, %1256 ], [ %1242, %1258 ]
  %1264 = phi i8** [ %1204, %1202 ], [ %1245, %1256 ], [ %1245, %1258 ]
  %1265 = icmp ult i8** %1264, %1263
  br i1 %1265, label %1266, label %1271

1266:                                             ; preds = %1260
  %1267 = bitcast i8** %1264 to i64*
  store i64 ptrtoint ([16 x i8]* @.str.95 to i64), i64* %1267, align 8
  %1268 = getelementptr inbounds i8*, i8** %1264, i64 1
  %1269 = ptrtoint i8** %1268 to i64
  %1270 = bitcast i8*** %9 to i64*
  store i64 %1269, i64* %1270, align 8
  br label %1382

1271:                                             ; preds = %1260
  %1272 = ptrtoint i8** %1264 to i64
  %1273 = bitcast i8*** %9 to i64*
  %1274 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1275 = load i64, i64* %1274, align 8
  %1276 = sub i64 %1272, %1275
  %1277 = ashr exact i64 %1276, 3
  %1278 = add nsw i64 %1277, 1
  %1279 = icmp ugt i64 %1278, 2305843009213693951
  br i1 %1279, label %1280, label %1282

1280:                                             ; preds = %1271
  %1281 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1281) #11
  unreachable

1282:                                             ; preds = %1271
  %1283 = bitcast i8*** %10 to i64*
  %1284 = sub i64 %1261, %1275
  %1285 = ashr exact i64 %1284, 3
  %1286 = icmp ult i64 %1285, 1152921504606846975
  br i1 %1286, label %1287, label %1295

1287:                                             ; preds = %1282
  %1288 = ashr exact i64 %1284, 2
  %1289 = icmp ult i64 %1288, %1278
  %1290 = select i1 %1289, i64 %1278, i64 %1288
  %1291 = icmp eq i64 %1290, 0
  br i1 %1291, label %1300, label %1292

1292:                                             ; preds = %1287
  %1293 = icmp ugt i64 %1290, 2305843009213693951
  br i1 %1293, label %1294, label %1295

1294:                                             ; preds = %1292
  tail call void @abort() #11
  unreachable

1295:                                             ; preds = %1292, %1282
  %1296 = phi i64 [ %1290, %1292 ], [ 2305843009213693951, %1282 ]
  %1297 = shl i64 %1296, 3
  %1298 = tail call i8* @_Znwm(i64 %1297) #10
  %1299 = bitcast i8* %1298 to i8**
  br label %1300

1300:                                             ; preds = %1295, %1287
  %1301 = phi i64 [ %1296, %1295 ], [ 0, %1287 ]
  %1302 = phi i8** [ %1299, %1295 ], [ null, %1287 ]
  %1303 = getelementptr inbounds i8*, i8** %1302, i64 %1277
  %1304 = getelementptr inbounds i8*, i8** %1302, i64 %1301
  %1305 = ptrtoint i8** %1304 to i64
  %1306 = bitcast i8** %1303 to i64*
  store i64 ptrtoint ([16 x i8]* @.str.95 to i64), i64* %1306, align 8
  %1307 = getelementptr inbounds i8*, i8** %1303, i64 1
  %1308 = ptrtoint i8** %1307 to i64
  %1309 = sub i64 %1262, %1275
  %1310 = ashr exact i64 %1309, 3
  %1311 = sub nsw i64 0, %1310
  %1312 = getelementptr inbounds i8*, i8** %1303, i64 %1311
  %1313 = ptrtoint i8** %1312 to i64
  %1314 = icmp sgt i64 %1309, 0
  br i1 %1314, label %1315, label %1318

1315:                                             ; preds = %1300
  %1316 = bitcast i8** %1312 to i8*
  %1317 = inttoptr i64 %1275 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1316, i8* align 8 %1317, i64 %1309, i1 false) #9
  br label %1318

1318:                                             ; preds = %1315, %1300
  store i64 %1313, i64* %1274, align 8
  store i64 %1308, i64* %1273, align 8
  store i64 %1305, i64* %1283, align 8
  %1319 = icmp eq i64 %1275, 0
  br i1 %1319, label %1382, label %1320

1320:                                             ; preds = %1318
  %1321 = inttoptr i64 %1275 to i8*
  tail call void @_ZdlPv(i8* %1321) #10
  br label %1382

1322:                                             ; preds = %612
  %1323 = load i8**, i8*** %10, align 8
  %1324 = icmp ult i8** %613, %1323
  %1325 = ptrtoint i8** %1323 to i64
  br i1 %1324, label %1326, label %1331

1326:                                             ; preds = %1322
  %1327 = bitcast i8** %613 to i64*
  store i64 ptrtoint ([6 x i8]* @.str.96 to i64), i64* %1327, align 8
  %1328 = getelementptr inbounds i8*, i8** %613, i64 1
  %1329 = ptrtoint i8** %1328 to i64
  %1330 = bitcast i8*** %9 to i64*
  store i64 %1329, i64* %1330, align 8
  br label %1382

1331:                                             ; preds = %1322
  %1332 = ptrtoint i8** %613 to i64
  %1333 = bitcast i8*** %9 to i64*
  %1334 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1335 = load i64, i64* %1334, align 8
  %1336 = sub i64 %1332, %1335
  %1337 = ashr exact i64 %1336, 3
  %1338 = add nsw i64 %1337, 1
  %1339 = icmp ugt i64 %1338, 2305843009213693951
  br i1 %1339, label %1340, label %1342

1340:                                             ; preds = %1331
  %1341 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1341) #11
  unreachable

1342:                                             ; preds = %1331
  %1343 = bitcast i8*** %10 to i64*
  %1344 = sub i64 %1325, %1335
  %1345 = ashr exact i64 %1344, 3
  %1346 = icmp ult i64 %1345, 1152921504606846975
  br i1 %1346, label %1347, label %1355

1347:                                             ; preds = %1342
  %1348 = ashr exact i64 %1344, 2
  %1349 = icmp ult i64 %1348, %1338
  %1350 = select i1 %1349, i64 %1338, i64 %1348
  %1351 = icmp eq i64 %1350, 0
  br i1 %1351, label %1360, label %1352

1352:                                             ; preds = %1347
  %1353 = icmp ugt i64 %1350, 2305843009213693951
  br i1 %1353, label %1354, label %1355

1354:                                             ; preds = %1352
  tail call void @abort() #11
  unreachable

1355:                                             ; preds = %1352, %1342
  %1356 = phi i64 [ %1350, %1352 ], [ 2305843009213693951, %1342 ]
  %1357 = shl i64 %1356, 3
  %1358 = tail call i8* @_Znwm(i64 %1357) #10
  %1359 = bitcast i8* %1358 to i8**
  br label %1360

1360:                                             ; preds = %1355, %1347
  %1361 = phi i64 [ %1356, %1355 ], [ 0, %1347 ]
  %1362 = phi i8** [ %1359, %1355 ], [ null, %1347 ]
  %1363 = getelementptr inbounds i8*, i8** %1362, i64 %1337
  %1364 = getelementptr inbounds i8*, i8** %1362, i64 %1361
  %1365 = ptrtoint i8** %1364 to i64
  %1366 = bitcast i8** %1363 to i64*
  store i64 ptrtoint ([6 x i8]* @.str.96 to i64), i64* %1366, align 8
  %1367 = getelementptr inbounds i8*, i8** %1363, i64 1
  %1368 = ptrtoint i8** %1367 to i64
  %1369 = sub i64 %614, %1335
  %1370 = ashr exact i64 %1369, 3
  %1371 = sub nsw i64 0, %1370
  %1372 = getelementptr inbounds i8*, i8** %1363, i64 %1371
  %1373 = ptrtoint i8** %1372 to i64
  %1374 = icmp sgt i64 %1369, 0
  br i1 %1374, label %1375, label %1378

1375:                                             ; preds = %1360
  %1376 = bitcast i8** %1372 to i8*
  %1377 = inttoptr i64 %1335 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1376, i8* align 8 %1377, i64 %1369, i1 false) #9
  br label %1378

1378:                                             ; preds = %1375, %1360
  store i64 %1373, i64* %1334, align 8
  store i64 %1368, i64* %1333, align 8
  store i64 %1365, i64* %1343, align 8
  %1379 = icmp eq i64 %1335, 0
  br i1 %1379, label %1382, label %1380

1380:                                             ; preds = %1378
  %1381 = inttoptr i64 %1335 to i8*
  tail call void @_ZdlPv(i8* %1381) #10
  br label %1382

1382:                                             ; preds = %1380, %1378, %1326, %1320, %1318, %1266, %741, %739, %687, %677, %612
  %1383 = phi i8** [ %1367, %1380 ], [ %1367, %1378 ], [ %1328, %1326 ], [ %1307, %1320 ], [ %1307, %1318 ], [ %1268, %1266 ], [ %728, %741 ], [ %728, %739 ], [ %689, %687 ], [ %678, %677 ], [ %613, %612 ]
  %1384 = phi i64 [ %1368, %1380 ], [ %1368, %1378 ], [ %1329, %1326 ], [ %1308, %1320 ], [ %1308, %1318 ], [ %1269, %1266 ], [ %729, %741 ], [ %729, %739 ], [ %690, %687 ], [ %679, %677 ], [ %614, %612 ]
  %1385 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 35
  %1386 = load i8, i8* %1385, align 8, !range !2
  %1387 = icmp eq i8 %1386, 0
  br i1 %1387, label %1446, label %1388

1388:                                             ; preds = %1382
  %1389 = load i8**, i8*** %10, align 8
  %1390 = icmp ult i8** %1383, %1389
  %1391 = ptrtoint i8** %1389 to i64
  br i1 %1390, label %1392, label %1396

1392:                                             ; preds = %1388
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.97, i64 0, i64 0), i8** %1383, align 8
  %1393 = getelementptr inbounds i8*, i8** %1383, i64 1
  %1394 = ptrtoint i8** %1393 to i64
  %1395 = bitcast i8*** %9 to i64*
  store i64 %1394, i64* %1395, align 8
  br label %1446

1396:                                             ; preds = %1388
  %1397 = ptrtoint i8** %1383 to i64
  %1398 = bitcast i8*** %9 to i64*
  %1399 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1400 = load i64, i64* %1399, align 8
  %1401 = sub i64 %1397, %1400
  %1402 = ashr exact i64 %1401, 3
  %1403 = add nsw i64 %1402, 1
  %1404 = icmp ugt i64 %1403, 2305843009213693951
  br i1 %1404, label %1405, label %1407

1405:                                             ; preds = %1396
  %1406 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1406) #11
  unreachable

1407:                                             ; preds = %1396
  %1408 = bitcast i8*** %10 to i64*
  %1409 = sub i64 %1391, %1400
  %1410 = ashr exact i64 %1409, 3
  %1411 = icmp ult i64 %1410, 1152921504606846975
  br i1 %1411, label %1412, label %1420

1412:                                             ; preds = %1407
  %1413 = ashr exact i64 %1409, 2
  %1414 = icmp ult i64 %1413, %1403
  %1415 = select i1 %1414, i64 %1403, i64 %1413
  %1416 = icmp eq i64 %1415, 0
  br i1 %1416, label %1425, label %1417

1417:                                             ; preds = %1412
  %1418 = icmp ugt i64 %1415, 2305843009213693951
  br i1 %1418, label %1419, label %1420

1419:                                             ; preds = %1417
  tail call void @abort() #11
  unreachable

1420:                                             ; preds = %1417, %1407
  %1421 = phi i64 [ %1415, %1417 ], [ 2305843009213693951, %1407 ]
  %1422 = shl i64 %1421, 3
  %1423 = tail call i8* @_Znwm(i64 %1422) #10
  %1424 = bitcast i8* %1423 to i8**
  br label %1425

1425:                                             ; preds = %1420, %1412
  %1426 = phi i64 [ %1421, %1420 ], [ 0, %1412 ]
  %1427 = phi i8** [ %1424, %1420 ], [ null, %1412 ]
  %1428 = getelementptr inbounds i8*, i8** %1427, i64 %1402
  %1429 = getelementptr inbounds i8*, i8** %1427, i64 %1426
  %1430 = ptrtoint i8** %1429 to i64
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.97, i64 0, i64 0), i8** %1428, align 8
  %1431 = getelementptr inbounds i8*, i8** %1428, i64 1
  %1432 = ptrtoint i8** %1431 to i64
  %1433 = sub i64 %1384, %1400
  %1434 = ashr exact i64 %1433, 3
  %1435 = sub nsw i64 0, %1434
  %1436 = getelementptr inbounds i8*, i8** %1428, i64 %1435
  %1437 = ptrtoint i8** %1436 to i64
  %1438 = icmp sgt i64 %1433, 0
  br i1 %1438, label %1439, label %1442

1439:                                             ; preds = %1425
  %1440 = bitcast i8** %1436 to i8*
  %1441 = inttoptr i64 %1400 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1440, i8* align 8 %1441, i64 %1433, i1 false) #9
  br label %1442

1442:                                             ; preds = %1439, %1425
  store i64 %1437, i64* %1399, align 8
  store i64 %1432, i64* %1398, align 8
  store i64 %1430, i64* %1408, align 8
  %1443 = icmp eq i64 %1400, 0
  br i1 %1443, label %1446, label %1444

1444:                                             ; preds = %1442
  %1445 = inttoptr i64 %1400 to i8*
  tail call void @_ZdlPv(i8* %1445) #10
  br label %1446

1446:                                             ; preds = %1444, %1442, %1392, %1382
  %1447 = phi i8** [ %1431, %1444 ], [ %1431, %1442 ], [ %1393, %1392 ], [ %1383, %1382 ]
  %1448 = phi i64 [ %1432, %1444 ], [ %1432, %1442 ], [ %1394, %1392 ], [ %1384, %1382 ]
  %1449 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 37
  %1450 = load i8, i8* %1449, align 8, !range !2
  %1451 = icmp eq i8 %1450, 0
  br i1 %1451, label %1510, label %1452

1452:                                             ; preds = %1446
  %1453 = load i8**, i8*** %10, align 8
  %1454 = icmp ult i8** %1447, %1453
  %1455 = ptrtoint i8** %1453 to i64
  br i1 %1454, label %1456, label %1460

1456:                                             ; preds = %1452
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.98, i64 0, i64 0), i8** %1447, align 8
  %1457 = getelementptr inbounds i8*, i8** %1447, i64 1
  %1458 = ptrtoint i8** %1457 to i64
  %1459 = bitcast i8*** %9 to i64*
  store i64 %1458, i64* %1459, align 8
  br label %1510

1460:                                             ; preds = %1452
  %1461 = ptrtoint i8** %1447 to i64
  %1462 = bitcast i8*** %9 to i64*
  %1463 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1464 = load i64, i64* %1463, align 8
  %1465 = sub i64 %1461, %1464
  %1466 = ashr exact i64 %1465, 3
  %1467 = add nsw i64 %1466, 1
  %1468 = icmp ugt i64 %1467, 2305843009213693951
  br i1 %1468, label %1469, label %1471

1469:                                             ; preds = %1460
  %1470 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1470) #11
  unreachable

1471:                                             ; preds = %1460
  %1472 = bitcast i8*** %10 to i64*
  %1473 = sub i64 %1455, %1464
  %1474 = ashr exact i64 %1473, 3
  %1475 = icmp ult i64 %1474, 1152921504606846975
  br i1 %1475, label %1476, label %1484

1476:                                             ; preds = %1471
  %1477 = ashr exact i64 %1473, 2
  %1478 = icmp ult i64 %1477, %1467
  %1479 = select i1 %1478, i64 %1467, i64 %1477
  %1480 = icmp eq i64 %1479, 0
  br i1 %1480, label %1489, label %1481

1481:                                             ; preds = %1476
  %1482 = icmp ugt i64 %1479, 2305843009213693951
  br i1 %1482, label %1483, label %1484

1483:                                             ; preds = %1481
  tail call void @abort() #11
  unreachable

1484:                                             ; preds = %1481, %1471
  %1485 = phi i64 [ %1479, %1481 ], [ 2305843009213693951, %1471 ]
  %1486 = shl i64 %1485, 3
  %1487 = tail call i8* @_Znwm(i64 %1486) #10
  %1488 = bitcast i8* %1487 to i8**
  br label %1489

1489:                                             ; preds = %1484, %1476
  %1490 = phi i64 [ %1485, %1484 ], [ 0, %1476 ]
  %1491 = phi i8** [ %1488, %1484 ], [ null, %1476 ]
  %1492 = getelementptr inbounds i8*, i8** %1491, i64 %1466
  %1493 = getelementptr inbounds i8*, i8** %1491, i64 %1490
  %1494 = ptrtoint i8** %1493 to i64
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.98, i64 0, i64 0), i8** %1492, align 8
  %1495 = getelementptr inbounds i8*, i8** %1492, i64 1
  %1496 = ptrtoint i8** %1495 to i64
  %1497 = sub i64 %1448, %1464
  %1498 = ashr exact i64 %1497, 3
  %1499 = sub nsw i64 0, %1498
  %1500 = getelementptr inbounds i8*, i8** %1492, i64 %1499
  %1501 = ptrtoint i8** %1500 to i64
  %1502 = icmp sgt i64 %1497, 0
  br i1 %1502, label %1503, label %1506

1503:                                             ; preds = %1489
  %1504 = bitcast i8** %1500 to i8*
  %1505 = inttoptr i64 %1464 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1504, i8* align 8 %1505, i64 %1497, i1 false) #9
  br label %1506

1506:                                             ; preds = %1503, %1489
  store i64 %1501, i64* %1463, align 8
  store i64 %1496, i64* %1462, align 8
  store i64 %1494, i64* %1472, align 8
  %1507 = icmp eq i64 %1464, 0
  br i1 %1507, label %1510, label %1508

1508:                                             ; preds = %1506
  %1509 = inttoptr i64 %1464 to i8*
  tail call void @_ZdlPv(i8* %1509) #10
  br label %1510

1510:                                             ; preds = %1508, %1506, %1456, %1446
  %1511 = phi i64 [ %1496, %1508 ], [ %1496, %1506 ], [ %1458, %1456 ], [ %1448, %1446 ]
  %1512 = phi i8** [ %1495, %1508 ], [ %1495, %1506 ], [ %1457, %1456 ], [ %1447, %1446 ]
  %1513 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 46
  %1514 = load i8, i8* %1513, align 4, !range !2
  %1515 = icmp eq i8 %1514, 0
  br i1 %1515, label %1516, label %1518

1516:                                             ; preds = %1510
  %1517 = bitcast i8*** %9 to i64*
  br label %1638

1518:                                             ; preds = %1510
  %1519 = load i8**, i8*** %10, align 8
  %1520 = icmp ult i8** %1512, %1519
  %1521 = ptrtoint i8** %1519 to i64
  br i1 %1520, label %1522, label %1528

1522:                                             ; preds = %1518
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.99, i64 0, i64 0), i8** %1512, align 8
  %1523 = getelementptr inbounds i8*, i8** %1512, i64 1
  %1524 = ptrtoint i8** %1523 to i64
  %1525 = bitcast i8*** %9 to i64*
  store i64 %1524, i64* %1525, align 8
  %1526 = load i8**, i8*** %10, align 8
  %1527 = ptrtoint i8** %1526 to i64
  br label %1578

1528:                                             ; preds = %1518
  %1529 = ptrtoint i8** %1512 to i64
  %1530 = bitcast i8*** %9 to i64*
  %1531 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1532 = load i64, i64* %1531, align 8
  %1533 = sub i64 %1529, %1532
  %1534 = ashr exact i64 %1533, 3
  %1535 = add nsw i64 %1534, 1
  %1536 = icmp ugt i64 %1535, 2305843009213693951
  br i1 %1536, label %1537, label %1539

1537:                                             ; preds = %1528
  %1538 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1538) #11
  unreachable

1539:                                             ; preds = %1528
  %1540 = bitcast i8*** %10 to i64*
  %1541 = sub i64 %1521, %1532
  %1542 = ashr exact i64 %1541, 3
  %1543 = icmp ult i64 %1542, 1152921504606846975
  br i1 %1543, label %1544, label %1552

1544:                                             ; preds = %1539
  %1545 = ashr exact i64 %1541, 2
  %1546 = icmp ult i64 %1545, %1535
  %1547 = select i1 %1546, i64 %1535, i64 %1545
  %1548 = icmp eq i64 %1547, 0
  br i1 %1548, label %1557, label %1549

1549:                                             ; preds = %1544
  %1550 = icmp ugt i64 %1547, 2305843009213693951
  br i1 %1550, label %1551, label %1552

1551:                                             ; preds = %1549
  tail call void @abort() #11
  unreachable

1552:                                             ; preds = %1549, %1539
  %1553 = phi i64 [ %1547, %1549 ], [ 2305843009213693951, %1539 ]
  %1554 = shl i64 %1553, 3
  %1555 = tail call i8* @_Znwm(i64 %1554) #10
  %1556 = bitcast i8* %1555 to i8**
  br label %1557

1557:                                             ; preds = %1552, %1544
  %1558 = phi i64 [ %1553, %1552 ], [ 0, %1544 ]
  %1559 = phi i8** [ %1556, %1552 ], [ null, %1544 ]
  %1560 = getelementptr inbounds i8*, i8** %1559, i64 %1534
  %1561 = getelementptr inbounds i8*, i8** %1559, i64 %1558
  %1562 = ptrtoint i8** %1561 to i64
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.99, i64 0, i64 0), i8** %1560, align 8
  %1563 = getelementptr inbounds i8*, i8** %1560, i64 1
  %1564 = ptrtoint i8** %1563 to i64
  %1565 = sub i64 %1511, %1532
  %1566 = ashr exact i64 %1565, 3
  %1567 = sub nsw i64 0, %1566
  %1568 = getelementptr inbounds i8*, i8** %1560, i64 %1567
  %1569 = ptrtoint i8** %1568 to i64
  %1570 = icmp sgt i64 %1565, 0
  br i1 %1570, label %1571, label %1574

1571:                                             ; preds = %1557
  %1572 = bitcast i8** %1568 to i8*
  %1573 = inttoptr i64 %1532 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1572, i8* align 8 %1573, i64 %1565, i1 false) #9
  br label %1574

1574:                                             ; preds = %1571, %1557
  store i64 %1569, i64* %1531, align 8
  store i64 %1564, i64* %1530, align 8
  store i64 %1562, i64* %1540, align 8
  %1575 = icmp eq i64 %1532, 0
  br i1 %1575, label %1578, label %1576

1576:                                             ; preds = %1574
  %1577 = inttoptr i64 %1532 to i8*
  tail call void @_ZdlPv(i8* %1577) #10
  br label %1578

1578:                                             ; preds = %1522, %1574, %1576
  %1579 = phi i64 [ %1527, %1522 ], [ %1562, %1574 ], [ %1562, %1576 ]
  %1580 = phi i64 [ %1524, %1522 ], [ %1564, %1574 ], [ %1564, %1576 ]
  %1581 = phi i8** [ %1526, %1522 ], [ %1561, %1574 ], [ %1561, %1576 ]
  %1582 = phi i8** [ %1523, %1522 ], [ %1563, %1574 ], [ %1563, %1576 ]
  %1583 = icmp ult i8** %1582, %1581
  br i1 %1583, label %1584, label %1588

1584:                                             ; preds = %1578
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.100, i64 0, i64 0), i8** %1582, align 8
  %1585 = getelementptr inbounds i8*, i8** %1582, i64 1
  %1586 = ptrtoint i8** %1585 to i64
  %1587 = bitcast i8*** %9 to i64*
  store i64 %1586, i64* %1587, align 8
  br label %1638

1588:                                             ; preds = %1578
  %1589 = ptrtoint i8** %1582 to i64
  %1590 = bitcast i8*** %9 to i64*
  %1591 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1592 = load i64, i64* %1591, align 8
  %1593 = sub i64 %1589, %1592
  %1594 = ashr exact i64 %1593, 3
  %1595 = add nsw i64 %1594, 1
  %1596 = icmp ugt i64 %1595, 2305843009213693951
  br i1 %1596, label %1597, label %1599

1597:                                             ; preds = %1588
  %1598 = bitcast %"class.std::__1::vector"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1598) #11
  unreachable

1599:                                             ; preds = %1588
  %1600 = bitcast i8*** %10 to i64*
  %1601 = sub i64 %1579, %1592
  %1602 = ashr exact i64 %1601, 3
  %1603 = icmp ult i64 %1602, 1152921504606846975
  br i1 %1603, label %1604, label %1612

1604:                                             ; preds = %1599
  %1605 = ashr exact i64 %1601, 2
  %1606 = icmp ult i64 %1605, %1595
  %1607 = select i1 %1606, i64 %1595, i64 %1605
  %1608 = icmp eq i64 %1607, 0
  br i1 %1608, label %1617, label %1609

1609:                                             ; preds = %1604
  %1610 = icmp ugt i64 %1607, 2305843009213693951
  br i1 %1610, label %1611, label %1612

1611:                                             ; preds = %1609
  tail call void @abort() #11
  unreachable

1612:                                             ; preds = %1609, %1599
  %1613 = phi i64 [ %1607, %1609 ], [ 2305843009213693951, %1599 ]
  %1614 = shl i64 %1613, 3
  %1615 = tail call i8* @_Znwm(i64 %1614) #10
  %1616 = bitcast i8* %1615 to i8**
  br label %1617

1617:                                             ; preds = %1612, %1604
  %1618 = phi i64 [ %1613, %1612 ], [ 0, %1604 ]
  %1619 = phi i8** [ %1616, %1612 ], [ null, %1604 ]
  %1620 = getelementptr inbounds i8*, i8** %1619, i64 %1594
  %1621 = getelementptr inbounds i8*, i8** %1619, i64 %1618
  %1622 = ptrtoint i8** %1621 to i64
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.100, i64 0, i64 0), i8** %1620, align 8
  %1623 = getelementptr inbounds i8*, i8** %1620, i64 1
  %1624 = ptrtoint i8** %1623 to i64
  %1625 = sub i64 %1580, %1592
  %1626 = ashr exact i64 %1625, 3
  %1627 = sub nsw i64 0, %1626
  %1628 = getelementptr inbounds i8*, i8** %1620, i64 %1627
  %1629 = ptrtoint i8** %1628 to i64
  %1630 = icmp sgt i64 %1625, 0
  br i1 %1630, label %1631, label %1634

1631:                                             ; preds = %1617
  %1632 = bitcast i8** %1628 to i8*
  %1633 = inttoptr i64 %1592 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1632, i8* align 8 %1633, i64 %1625, i1 false) #9
  br label %1634

1634:                                             ; preds = %1631, %1617
  store i64 %1629, i64* %1591, align 8
  store i64 %1624, i64* %1590, align 8
  store i64 %1622, i64* %1600, align 8
  %1635 = icmp eq i64 %1592, 0
  br i1 %1635, label %1638, label %1636

1636:                                             ; preds = %1634
  %1637 = inttoptr i64 %1592 to i8*
  tail call void @_ZdlPv(i8* %1637) #10
  br label %1638

1638:                                             ; preds = %1516, %1636, %1634, %1584
  %1639 = phi i64* [ %1517, %1516 ], [ %1590, %1636 ], [ %1590, %1634 ], [ %1587, %1584 ]
  %1640 = phi i64 [ %1511, %1516 ], [ %1624, %1636 ], [ %1624, %1634 ], [ %1586, %1584 ]
  %1641 = bitcast %"class.std::__1::vector"* %5 to i64*
  %1642 = load i64, i64* %1641, align 8
  %1643 = sub i64 %1640, %1642
  %1644 = ashr exact i64 %1643, 3
  %1645 = bitcast i32** %13 to i64*
  %1646 = load i64, i64* %1645, align 8
  %1647 = bitcast %"class.std::__1::vector.1"* %6 to i64*
  %1648 = load i64, i64* %1647, align 8
  %1649 = sub i64 %1646, %1648
  %1650 = ashr exact i64 %1649, 2
  %1651 = icmp ugt i64 %1644, %1650
  %1652 = inttoptr i64 %1648 to i32*
  br i1 %1651, label %1653, label %1660

1653:                                             ; preds = %1638
  %1654 = sub nsw i64 %1644, %1650
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"* nonnull %6, i64 %1654) #9
  %1655 = load i64, i64* %1639, align 8
  %1656 = load i64, i64* %1641, align 8
  %1657 = load i32*, i32** %12, align 8
  %1658 = sub i64 %1655, %1656
  %1659 = ashr exact i64 %1658, 3
  br label %1664

1660:                                             ; preds = %1638
  %1661 = icmp ult i64 %1644, %1650
  br i1 %1661, label %1662, label %1664

1662:                                             ; preds = %1660
  %1663 = getelementptr inbounds i32, i32* %1652, i64 %1644
  store i32* %1663, i32** %13, align 8
  br label %1664

1664:                                             ; preds = %1653, %1660, %1662
  %1665 = phi i64 [ %1659, %1653 ], [ %1644, %1660 ], [ %1644, %1662 ]
  %1666 = phi i64 [ %1658, %1653 ], [ %1643, %1660 ], [ %1643, %1662 ]
  %1667 = phi i32* [ %1657, %1653 ], [ %1652, %1660 ], [ %1652, %1662 ]
  %1668 = phi i64 [ %1656, %1653 ], [ %1642, %1660 ], [ %1642, %1662 ]
  %1669 = inttoptr i64 %1668 to i8**
  %1670 = icmp eq i64 %1666, 0
  br i1 %1670, label %1685, label %1671

1671:                                             ; preds = %1664
  %1672 = bitcast %"class.gpu::gles2::GLES2Interface"* %1 to void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)***
  br label %1673

1673:                                             ; preds = %1673, %1671
  %1674 = phi i64 [ 0, %1671 ], [ %1683, %1673 ]
  %1675 = load i32, i32* %3, align 4
  %1676 = add nsw i32 %1675, 1
  store i32 %1676, i32* %3, align 4
  %1677 = getelementptr inbounds i32, i32* %1667, i64 %1674
  store i32 %1675, i32* %1677, align 4
  %1678 = getelementptr inbounds i8*, i8** %1669, i64 %1674
  %1679 = load i8*, i8** %1678, align 8
  %1680 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)**, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)*** %1672, align 8
  %1681 = getelementptr inbounds void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)** %1680, i64 310
  %1682 = load void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)*, void (%"class.gpu::gles2::GLES2Interface"*, i32, i32, i8*)** %1681, align 8
  call void %1682(%"class.gpu::gles2::GLES2Interface"* %1, i32 %2, i32 %1675, i8* %1679) #9
  %1683 = add nuw i64 %1674, 1
  %1684 = icmp eq i64 %1683, %1665
  br i1 %1684, label %1685, label %1673

1685:                                             ; preds = %1673, %1664
  %1686 = load i32, i32* %14, align 8
  %1687 = icmp eq i32 %1686, 0
  br i1 %1687, label %1698, label %1688

1688:                                             ; preds = %1685
  %1689 = load i32*, i32** %12, align 8
  %1690 = load i32, i32* %1689, align 4
  %1691 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 6
  store i32 %1690, i32* %1691, align 4
  %1692 = getelementptr inbounds i32, i32* %1689, i64 1
  %1693 = load i32, i32* %1692, align 4
  %1694 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 7
  store i32 %1693, i32* %1694, align 8
  %1695 = getelementptr inbounds i32, i32* %1689, i64 2
  %1696 = load i32, i32* %1695, align 4
  %1697 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 8
  store i32 %1696, i32* %1697, align 4
  br label %1698

1698:                                             ; preds = %1685, %1688
  %1699 = phi i64 [ 3, %1688 ], [ 0, %1685 ]
  %1700 = load i32, i32* %93, align 4
  %1701 = icmp eq i32 %1700, 0
  br i1 %1701, label %1716, label %1702

1702:                                             ; preds = %1698
  %1703 = add nuw nsw i64 %1699, 1
  %1704 = load i32*, i32** %12, align 8
  %1705 = getelementptr inbounds i32, i32* %1704, i64 %1699
  %1706 = load i32, i32* %1705, align 4
  %1707 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 15
  store i32 %1706, i32* %1707, align 8
  %1708 = add nuw nsw i64 %1699, 2
  %1709 = getelementptr inbounds i32, i32* %1704, i64 %1703
  %1710 = load i32, i32* %1709, align 4
  %1711 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 16
  store i32 %1710, i32* %1711, align 4
  %1712 = add nuw nsw i64 %1699, 3
  %1713 = getelementptr inbounds i32, i32* %1704, i64 %1708
  %1714 = load i32, i32* %1713, align 4
  %1715 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 17
  store i32 %1714, i32* %1715, align 8
  br label %1716

1716:                                             ; preds = %1698, %1702
  %1717 = phi i64 [ %1712, %1702 ], [ %1699, %1698 ]
  %1718 = load i8, i8* %287, align 4, !range !2
  %1719 = icmp eq i8 %1718, 0
  br i1 %1719, label %1730, label %1720

1720:                                             ; preds = %1716
  %1721 = add nuw nsw i64 %1717, 1
  %1722 = load i32*, i32** %12, align 8
  %1723 = getelementptr inbounds i32, i32* %1722, i64 %1717
  %1724 = load i32, i32* %1723, align 4
  %1725 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 19
  store i32 %1724, i32* %1725, align 8
  %1726 = add nuw nsw i64 %1717, 2
  %1727 = getelementptr inbounds i32, i32* %1722, i64 %1721
  %1728 = load i32, i32* %1727, align 4
  %1729 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 20
  store i32 %1728, i32* %1729, align 4
  br label %1730

1730:                                             ; preds = %1716, %1720
  %1731 = phi i64 [ %1726, %1720 ], [ %1717, %1716 ]
  %1732 = load i8, i8* %417, align 8, !range !2
  %1733 = icmp eq i8 %1732, 0
  br i1 %1733, label %1740, label %1734

1734:                                             ; preds = %1730
  %1735 = add nuw nsw i64 %1731, 1
  %1736 = load i32*, i32** %12, align 8
  %1737 = getelementptr inbounds i32, i32* %1736, i64 %1731
  %1738 = load i32, i32* %1737, align 4
  %1739 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 22
  store i32 %1738, i32* %1739, align 4
  br label %1740

1740:                                             ; preds = %1730, %1734
  %1741 = phi i64 [ %1735, %1734 ], [ %1731, %1730 ]
  %1742 = load i8, i8* %483, align 8, !range !2
  %1743 = icmp eq i8 %1742, 0
  br i1 %1743, label %1750, label %1744

1744:                                             ; preds = %1740
  %1745 = add nuw nsw i64 %1741, 1
  %1746 = load i32*, i32** %12, align 8
  %1747 = getelementptr inbounds i32, i32* %1746, i64 %1741
  %1748 = load i32, i32* %1747, align 4
  %1749 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 24
  store i32 %1748, i32* %1749, align 4
  br label %1750

1750:                                             ; preds = %1740, %1744
  %1751 = phi i64 [ %1745, %1744 ], [ %1741, %1740 ]
  %1752 = load i8, i8* %549, align 8, !range !2
  %1753 = icmp eq i8 %1752, 0
  br i1 %1753, label %1760, label %1754

1754:                                             ; preds = %1750
  %1755 = add nuw nsw i64 %1751, 1
  %1756 = load i32*, i32** %12, align 8
  %1757 = getelementptr inbounds i32, i32* %1756, i64 %1751
  %1758 = load i32, i32* %1757, align 4
  %1759 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 26
  store i32 %1758, i32* %1759, align 4
  br label %1760

1760:                                             ; preds = %1750, %1754
  %1761 = phi i64 [ %1755, %1754 ], [ %1751, %1750 ]
  %1762 = load i32, i32* %615, align 8
  switch i32 %1762, label %1833 [
    i32 0, label %1763
    i32 1, label %1777
    i32 2, label %1827
  ]

1763:                                             ; preds = %1760
  %1764 = add nuw nsw i64 %1761, 1
  %1765 = load i32*, i32** %12, align 8
  %1766 = getelementptr inbounds i32, i32* %1765, i64 %1761
  %1767 = load i32, i32* %1766, align 4
  %1768 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 10
  store i32 %1767, i32* %1768, align 4
  %1769 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 9
  %1770 = load i8, i8* %1769, align 8, !range !2
  %1771 = icmp eq i8 %1770, 0
  br i1 %1771, label %1833, label %1772

1772:                                             ; preds = %1763
  %1773 = add nuw nsw i64 %1761, 2
  %1774 = getelementptr inbounds i32, i32* %1765, i64 %1764
  %1775 = load i32, i32* %1774, align 4
  %1776 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 11
  store i32 %1775, i32* %1776, align 8
  br label %1833

1777:                                             ; preds = %1760
  %1778 = add nuw nsw i64 %1761, 1
  %1779 = load i32*, i32** %12, align 8
  %1780 = getelementptr inbounds i32, i32* %1779, i64 %1761
  %1781 = load i32, i32* %1780, align 4
  %1782 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 39
  store i32 %1781, i32* %1782, align 8
  %1783 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 32
  %1784 = load i32, i32* %1783, align 4
  switch i32 %1784, label %1799 [
    i32 1, label %1785
    i32 2, label %1790
  ]

1785:                                             ; preds = %1777
  %1786 = add nuw nsw i64 %1761, 2
  %1787 = getelementptr inbounds i32, i32* %1779, i64 %1778
  %1788 = load i32, i32* %1787, align 4
  %1789 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 42
  store i32 %1788, i32* %1789, align 4
  br label %1799

1790:                                             ; preds = %1777
  %1791 = add nuw nsw i64 %1761, 2
  %1792 = getelementptr inbounds i32, i32* %1779, i64 %1778
  %1793 = load i32, i32* %1792, align 4
  %1794 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 40
  store i32 %1793, i32* %1794, align 4
  %1795 = add nuw nsw i64 %1761, 3
  %1796 = getelementptr inbounds i32, i32* %1779, i64 %1791
  %1797 = load i32, i32* %1796, align 4
  %1798 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 41
  store i32 %1797, i32* %1798, align 8
  br label %1799

1799:                                             ; preds = %1777, %1785, %1790
  %1800 = phi i64 [ %1795, %1790 ], [ %1786, %1785 ], [ %1778, %1777 ]
  %1801 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 31
  %1802 = load i32, i32* %1801, align 8
  %1803 = icmp eq i32 %1802, 2
  br i1 %1803, label %1804, label %1809

1804:                                             ; preds = %1799
  %1805 = add nuw nsw i64 %1800, 1
  %1806 = getelementptr inbounds i32, i32* %1779, i64 %1800
  %1807 = load i32, i32* %1806, align 4
  %1808 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 43
  store i32 %1807, i32* %1808, align 8
  br label %1809

1809:                                             ; preds = %1804, %1799
  %1810 = phi i64 [ %1805, %1804 ], [ %1800, %1799 ]
  %1811 = add nuw nsw i64 %1810, 1
  %1812 = getelementptr inbounds i32, i32* %1779, i64 %1810
  %1813 = load i32, i32* %1812, align 4
  %1814 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 44
  store i32 %1813, i32* %1814, align 4
  %1815 = add nuw nsw i64 %1810, 2
  %1816 = getelementptr inbounds i32, i32* %1779, i64 %1811
  %1817 = load i32, i32* %1816, align 4
  %1818 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 45
  store i32 %1817, i32* %1818, align 8
  %1819 = add nuw nsw i64 %1810, 3
  %1820 = getelementptr inbounds i32, i32* %1779, i64 %1815
  %1821 = load i32, i32* %1820, align 4
  %1822 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 49
  store i32 %1821, i32* %1822, align 8
  %1823 = add nuw nsw i64 %1810, 4
  %1824 = getelementptr inbounds i32, i32* %1779, i64 %1819
  %1825 = load i32, i32* %1824, align 4
  %1826 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 50
  store i32 %1825, i32* %1826, align 4
  br label %1833

1827:                                             ; preds = %1760
  %1828 = add nuw nsw i64 %1761, 1
  %1829 = load i32*, i32** %12, align 8
  %1830 = getelementptr inbounds i32, i32* %1829, i64 %1761
  %1831 = load i32, i32* %1830, align 4
  %1832 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 13
  store i32 %1831, i32* %1832, align 8
  br label %1833

1833:                                             ; preds = %1763, %1772, %1760, %1827, %1809
  %1834 = phi i64 [ %1761, %1760 ], [ %1828, %1827 ], [ %1823, %1809 ], [ %1773, %1772 ], [ %1764, %1763 ]
  %1835 = load i8, i8* %1385, align 8, !range !2
  %1836 = icmp eq i8 %1835, 0
  br i1 %1836, label %1843, label %1837

1837:                                             ; preds = %1833
  %1838 = add nuw nsw i64 %1834, 1
  %1839 = load i32*, i32** %12, align 8
  %1840 = getelementptr inbounds i32, i32* %1839, i64 %1834
  %1841 = load i32, i32* %1840, align 4
  %1842 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 36
  store i32 %1841, i32* %1842, align 4
  br label %1843

1843:                                             ; preds = %1833, %1837
  %1844 = phi i64 [ %1838, %1837 ], [ %1834, %1833 ]
  %1845 = load i8, i8* %1449, align 8, !range !2
  %1846 = icmp eq i8 %1845, 0
  br i1 %1846, label %1853, label %1847

1847:                                             ; preds = %1843
  %1848 = add nuw nsw i64 %1844, 1
  %1849 = load i32*, i32** %12, align 8
  %1850 = getelementptr inbounds i32, i32* %1849, i64 %1844
  %1851 = load i32, i32* %1850, align 4
  %1852 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 38
  store i32 %1851, i32* %1852, align 4
  br label %1853

1853:                                             ; preds = %1843, %1847
  %1854 = phi i64 [ %1848, %1847 ], [ %1844, %1843 ]
  %1855 = load i8, i8* %1513, align 4, !range !2
  %1856 = icmp eq i8 %1855, 0
  br i1 %1856, label %1857, label %1859

1857:                                             ; preds = %1853
  %1858 = load i32*, i32** %12, align 8
  br label %1868

1859:                                             ; preds = %1853
  %1860 = add nuw nsw i64 %1854, 1
  %1861 = load i32*, i32** %12, align 8
  %1862 = getelementptr inbounds i32, i32* %1861, i64 %1854
  %1863 = load i32, i32* %1862, align 4
  %1864 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 47
  store i32 %1863, i32* %1864, align 8
  %1865 = getelementptr inbounds i32, i32* %1861, i64 %1860
  %1866 = load i32, i32* %1865, align 4
  %1867 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 48
  store i32 %1866, i32* %1867, align 4
  br label %1868

1868:                                             ; preds = %1857, %1859
  %1869 = phi i32* [ %1858, %1857 ], [ %1861, %1859 ]
  %1870 = icmp eq i32* %1869, null
  br i1 %1870, label %1874, label %1871

1871:                                             ; preds = %1868
  %1872 = ptrtoint i32* %1869 to i64
  store i64 %1872, i64* %1645, align 8
  %1873 = bitcast i32* %1869 to i8*
  call void @_ZdlPv(i8* %1873) #10
  br label %1874

1874:                                             ; preds = %1868, %1871
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #9
  %1875 = load i8**, i8*** %8, align 8
  %1876 = icmp eq i8** %1875, null
  br i1 %1876, label %1880, label %1877

1877:                                             ; preds = %1874
  %1878 = ptrtoint i8** %1875 to i64
  store i64 %1878, i64* %1639, align 8
  %1879 = bitcast i8** %1875 to i8*
  call void @_ZdlPv(i8* %1879) #10
  br label %1880

1880:                                             ; preds = %1874, %1877
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  ret void
}

declare void @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEm(%"class.std::__1::basic_string"*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz14FragmentShader21AppendHelperFunctionsEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* nocapture readonly, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 29
  %4 = load i32, i32* %3, align 8
  switch i32 %4, label %16 [
    i32 4, label %5
    i32 9, label %5
    i32 7, label %7
    i32 8, label %9
    i32 10, label %11
    i32 14, label %13
    i32 15, label %13
    i32 16, label %14
    i32 17, label %14
  ]

5:                                                ; preds = %2, %2
  %6 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([498 x i8], [498 x i8]* @.str.109, i64 0, i64 6), i64 490) #9
  br label %16

7:                                                ; preds = %2
  %8 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([329 x i8], [329 x i8]* @.str.110, i64 0, i64 6), i64 321) #9
  br label %16

9:                                                ; preds = %2
  %10 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([333 x i8], [333 x i8]* @.str.111, i64 0, i64 6), i64 325) #9
  br label %16

11:                                               ; preds = %2
  %12 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([649 x i8], [649 x i8]* @.str.112, i64 0, i64 6), i64 641) #9
  br label %16

13:                                               ; preds = %2, %2
  tail call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %1, i64 2, %"class.base::BasicStringPiece"* getelementptr inbounds ([2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* @.ref.tmp, i64 0, i64 0)) #9
  br label %16

14:                                               ; preds = %2, %2
  %15 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([688 x i8], [688 x i8]* @.str.113, i64 0, i64 6), i64 680) #9
  br label %16

16:                                               ; preds = %2, %14, %13, %11, %9, %7, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz14FragmentShader19AppendBlendFunctionEPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.viz::FragmentShader"* nocapture readonly, %"class.std::__1::basic_string"*) local_unnamed_addr #0 align 2 {
  %3 = alloca [2 x %"class.base::BasicStringPiece"], align 8
  %4 = tail call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.115, i64 0, i64 0)) #9
  %5 = bitcast [2 x %"class.base::BasicStringPiece"]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #9
  %6 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0
  %7 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 29
  %8 = load i32, i32* %7, align 8
  %9 = icmp eq i32 %8, 2
  %10 = select i1 %9, i64 25, i64 41
  %11 = select i1 %9, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.117, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.118, i64 0, i64 0)
  %12 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0, i32 0
  store i8* %11, i8** %12, align 8
  %13 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 0, i32 1
  store i64 %10, i64* %13, align 8
  %14 = add i32 %8, -1
  %15 = icmp ult i32 %14, 17
  br i1 %15, label %16, label %23

16:                                               ; preds = %2
  %17 = sext i32 %14 to i64
  %18 = getelementptr inbounds [17 x i64], [17 x i64]* @switch.table._ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv, i64 0, i64 %17
  %19 = load i64, i64* %18, align 8
  %20 = sext i32 %14 to i64
  %21 = getelementptr inbounds [17 x i8*], [17 x i8*]* @switch.table._ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv.236, i64 0, i64 %20
  %22 = load i8*, i8** %21, align 8
  br label %23

23:                                               ; preds = %2, %16
  %24 = phi i64 [ %19, %16 ], [ 34, %2 ]
  %25 = phi i8* [ %22, %16 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.136, i64 0, i64 0), %2 ]
  %26 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 1, i32 0
  store i8* %25, i8** %26, align 8
  %27 = getelementptr inbounds [2 x %"class.base::BasicStringPiece"], [2 x %"class.base::BasicStringPiece"]* %3, i64 0, i64 1, i32 1
  store i64 %24, i64* %27, align 8
  call void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"* %1, i64 2, %"class.base::BasicStringPiece"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #9
  %28 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* %1, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.116, i64 0, i64 0)) #9
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK3viz14FragmentShader28GetBlendFunctionBodyForAlphaEv(%"class.viz::FragmentShader"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 29
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 2
  %5 = select i1 %4, i64 25, i64 41
  %6 = select i1 %4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.117, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.118, i64 0, i64 0)
  %7 = insertvalue { i8*, i64 } undef, i8* %6, 0
  %8 = insertvalue { i8*, i64 } %7, i64 %5, 1
  ret { i8*, i64 } %8
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv(%"class.viz::FragmentShader"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %0, i64 0, i32 29
  %3 = load i32, i32* %2, align 8
  %4 = add i32 %3, -1
  %5 = icmp ult i32 %4, 17
  br i1 %5, label %6, label %13

6:                                                ; preds = %1
  %7 = sext i32 %4 to i64
  %8 = getelementptr inbounds [17 x i64], [17 x i64]* @switch.table._ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv, i64 0, i64 %7
  %9 = load i64, i64* %8, align 8
  %10 = sext i32 %4 to i64
  %11 = getelementptr inbounds [17 x i8*], [17 x i8*]* @switch.table._ZNK3viz14FragmentShader26GetBlendFunctionBodyForRGBEv.236, i64 0, i64 %10
  %12 = load i8*, i8** %11, align 8
  br label %13

13:                                               ; preds = %1, %6
  %14 = phi i64 [ %9, %6 ], [ 34, %1 ]
  %15 = phi i8* [ %12, %6 ], [ getelementptr inbounds ([35 x i8], [35 x i8]* @.str.136, i64 0, i64 0), %1 ]
  %16 = insertvalue { i8*, i64 } undef, i8* %15, 0
  %17 = insertvalue { i8*, i64 } %16, i64 %14, 1
  ret { i8*, i64 } %17
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3viz14FragmentShader15GetShaderSourceEv(%"class.std::__1::basic_string"* noalias sret, %"class.viz::FragmentShader"* readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = alloca %"class.std::__1::basic_string", align 8
  %7 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #9
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = tail call i8* @_Znwm(i64 32) #10
  store i8* %10, i8** %8, align 8
  %11 = bitcast i64* %9 to <2 x i64>*
  store <2 x i64> <i64 25, i64 -9223372036854775776>, <2 x i64>* %11, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %10, i8* align 1 getelementptr inbounds ([26 x i8], [26 x i8]* @.str.137, i64 0, i64 0), i64 25, i1 false) #9
  %12 = getelementptr inbounds i8, i8* %10, i64 25
  store i8 0, i8* %12, align 1
  %13 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #9
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 24, i1 false)
  store i8 14, i8* %17, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i64 14, i1 false) #9
  %19 = getelementptr inbounds i8, i8* %13, i64 14
  store i8 0, i8* %19, align 2
  %20 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 5
  %21 = load i32, i32* %20, align 8
  switch i32 %21, label %96 [
    i32 0, label %22
    i32 1, label %51
    i32 2, label %90
  ]

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 12
  %24 = load i8, i8* %23, align 4, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = select i1 %25, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.139, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.138, i64 0, i64 0)
  %27 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* %26) #9
  %28 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.44, i64 0, i64 0)) #9
  %29 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 9
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %38, label %32

32:                                               ; preds = %22
  %33 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.140, i64 0, i64 0)) #9
  %34 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.141, i64 0, i64 0)) #9
  %35 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.142, i64 0, i64 0)) #9
  %36 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.143, i64 0, i64 0)) #9
  %37 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.144, i64 0, i64 0)) #9
  br label %93

38:                                               ; preds = %22
  %39 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.146, i64 0, i64 0)) #9
  %40 = load i8, i8* %23, align 4, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %93

42:                                               ; preds = %38
  %43 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.148, i64 0, i64 0)) #9
  %44 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 25
  %45 = load i8, i8* %44, align 8, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %93, label %47

47:                                               ; preds = %42
  %48 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.149, i64 0, i64 0)) #9
  %49 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.150, i64 0, i64 0)) #9
  %50 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.151, i64 0, i64 0)) #9
  br label %93

51:                                               ; preds = %2
  %52 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.152, i64 0, i64 0)) #9
  %53 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.153, i64 0, i64 0)) #9
  %54 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.154, i64 0, i64 0)) #9
  %55 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.155, i64 0, i64 0)) #9
  %56 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.156, i64 0, i64 0)) #9
  %57 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.157, i64 0, i64 0)) #9
  %58 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.158, i64 0, i64 0)) #9
  %59 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.159, i64 0, i64 0)) #9
  %60 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.160, i64 0, i64 0)) #9
  %61 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 32
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %68

64:                                               ; preds = %51
  %65 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.161, i64 0, i64 0)) #9
  %66 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.162, i64 0, i64 0)) #9
  %67 = load i32, i32* %61, align 4
  br label %68

68:                                               ; preds = %64, %51
  %69 = phi i32 [ %67, %64 ], [ %62, %51 ]
  %70 = icmp eq i32 %69, 2
  br i1 %70, label %71, label %76

71:                                               ; preds = %68
  %72 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.163, i64 0, i64 0)) #9
  %73 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.164, i64 0, i64 0)) #9
  %74 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.165, i64 0, i64 0)) #9
  %75 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.166, i64 0, i64 0)) #9
  br label %76

76:                                               ; preds = %71, %68
  %77 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 31
  %78 = load i32, i32* %77, align 8
  %79 = icmp eq i32 %78, 2
  br i1 %79, label %80, label %82

80:                                               ; preds = %76
  %81 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.167, i64 0, i64 0)) #9
  br label %82

82:                                               ; preds = %76, %80
  %83 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.168, i64 0, i64 0)) #9
  %84 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.169, i64 0, i64 0)) #9
  %85 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.170, i64 0, i64 0)) #9
  %86 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.171, i64 0, i64 0)) #9
  %87 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.43, i64 0, i64 0)) #9
  %88 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.42, i64 0, i64 0)) #9
  %89 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.172, i64 0, i64 0)) #9
  br label %93

90:                                               ; preds = %2
  %91 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.174, i64 0, i64 0)) #9
  %92 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.175, i64 0, i64 0)) #9
  br label %93

93:                                               ; preds = %47, %42, %38, %82, %90, %32
  %94 = phi i8* [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.145, i64 0, i64 0), %32 ], [ getelementptr inbounds ([26 x i8], [26 x i8]* @.str.176, i64 0, i64 0), %90 ], [ getelementptr inbounds ([40 x i8], [40 x i8]* @.str.173, i64 0, i64 0), %82 ], [ getelementptr inbounds ([53 x i8], [53 x i8]* @.str.147, i64 0, i64 0), %38 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.145, i64 0, i64 0), %42 ], [ getelementptr inbounds ([55 x i8], [55 x i8]* @.str.145, i64 0, i64 0), %47 ]
  %95 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %94) #9
  br label %96

96:                                               ; preds = %93, %2
  %97 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 33
  %98 = load i32, i32* %97, align 8
  switch i32 %98, label %140 [
    i32 1, label %99
    i32 0, label %133
  ]

99:                                               ; preds = %96
  %100 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %100) #9
  %101 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 34
  %102 = load %"class.gfx::ColorTransform"*, %"class.gfx::ColorTransform"** %101, align 8
  %103 = bitcast %"class.gfx::ColorTransform"* %102 to void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)***
  %104 = load void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)**, void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)*** %103, align 8
  %105 = getelementptr inbounds void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)*, void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)** %104, i64 5
  %106 = load void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)*, void (%"class.std::__1::basic_string"*, %"class.gfx::ColorTransform"*)** %105, align 8
  call void %106(%"class.std::__1::basic_string"* nonnull sret %5, %"class.gfx::ColorTransform"* %102) #9
  %107 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %108 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %107, i64 0, i32 1, i32 0
  %109 = load i8, i8* %108, align 1
  %110 = icmp slt i8 %109, 0
  %111 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %114 = load i64, i64* %113, align 8
  %115 = zext i8 %109 to i64
  %116 = select i1 %110, i8* %112, i8* %100
  %117 = select i1 %110, i64 %114, i64 %115
  %118 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %3, i8* %116, i64 %117) #9
  %119 = load i8, i8* %108, align 1
  %120 = icmp slt i8 %119, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %99
  %122 = load i8*, i8** %111, align 8
  call void @_ZdlPv(i8* %122) #10
  br label %123

123:                                              ; preds = %99, %121
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %100) #9
  %124 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 3
  %125 = load i32, i32* %124, align 8
  %126 = icmp eq i32 %125, 1
  br i1 %126, label %130, label %127

127:                                              ; preds = %123
  %128 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.177, i64 0, i64 0)) #9
  %129 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.178, i64 0, i64 0)) #9
  br label %130

130:                                              ; preds = %123, %127
  %131 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.179, i64 0, i64 0)) #9
  %132 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.180, i64 0, i64 0)) #9
  br label %140

133:                                              ; preds = %96
  %134 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 3
  %135 = load i32, i32* %134, align 8
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %137, label %140

137:                                              ; preds = %133
  %138 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.181, i64 0, i64 0)) #9
  %139 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.180, i64 0, i64 0)) #9
  br label %140

140:                                              ; preds = %133, %137, %96, %130
  %141 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 18
  %142 = load i8, i8* %141, align 4, !range !2
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %153, label %144

144:                                              ; preds = %140
  %145 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.182, i64 0, i64 0)) #9
  %146 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.183, i64 0, i64 0)) #9
  %147 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.184, i64 0, i64 0)) #9
  %148 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.185, i64 0, i64 0)) #9
  %149 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.186, i64 0, i64 0)) #9
  %150 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.187, i64 0, i64 0)) #9
  %151 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.180, i64 0, i64 0)) #9
  %152 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.188, i64 0, i64 0)) #9
  br label %153

153:                                              ; preds = %140, %144
  %154 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 14
  %155 = load i32, i32* %154, align 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %166, label %157

157:                                              ; preds = %153
  %158 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.189, i64 0, i64 0)) #9
  %159 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.190, i64 0, i64 0)) #9
  %160 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.191, i64 0, i64 0)) #9
  %161 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.192, i64 0, i64 0)) #9
  %162 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.193, i64 0, i64 0)) #9
  %163 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.194, i64 0, i64 0)) #9
  %164 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.195, i64 0, i64 0)) #9
  %165 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.196, i64 0, i64 0)) #9
  br label %166

166:                                              ; preds = %153, %157
  %167 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 1
  %168 = load i32, i32* %167, align 8
  %169 = icmp eq i32 %168, 1
  br i1 %169, label %170, label %176

170:                                              ; preds = %166
  %171 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.30, i64 0, i64 0)) #9
  %172 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.197, i64 0, i64 0)) #9
  %173 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.198, i64 0, i64 0)) #9
  %174 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.199, i64 0, i64 0)) #9
  %175 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.200, i64 0, i64 0)) #9
  br label %176

176:                                              ; preds = %170, %166
  %177 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 23
  %178 = load i8, i8* %177, align 8, !range !2
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %184, label %180

180:                                              ; preds = %176
  %181 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.201, i64 0, i64 0)) #9
  %182 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.202, i64 0, i64 0)) #9
  %183 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.203, i64 0, i64 0)) #9
  br label %184

184:                                              ; preds = %176, %180
  %185 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 35
  %186 = load i8, i8* %185, align 8, !range !2
  %187 = icmp eq i8 %186, 0
  br i1 %187, label %192, label %188

188:                                              ; preds = %184
  %189 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.204, i64 0, i64 0)) #9
  %190 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.205, i64 0, i64 0)) #9
  %191 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.206, i64 0, i64 0)) #9
  br label %192

192:                                              ; preds = %184, %188
  %193 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 37
  %194 = load i8, i8* %193, align 8, !range !2
  %195 = icmp eq i8 %194, 0
  br i1 %195, label %200, label %196

196:                                              ; preds = %192
  %197 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.207, i64 0, i64 0)) #9
  %198 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.208, i64 0, i64 0)) #9
  %199 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.209, i64 0, i64 0)) #9
  br label %200

200:                                              ; preds = %192, %196
  %201 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 21
  %202 = load i8, i8* %201, align 8, !range !2
  %203 = icmp eq i8 %202, 0
  br i1 %203, label %206, label %204

204:                                              ; preds = %200
  %205 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.210, i64 0, i64 0)) #9
  br label %206

206:                                              ; preds = %200, %204
  %207 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 2
  %208 = load i8, i8* %207, align 4, !range !2
  %209 = icmp eq i8 %208, 0
  br i1 %209, label %214, label %210

210:                                              ; preds = %206
  %211 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %3, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.66, i64 0, i64 0)) #9
  %212 = load i8, i8* %207, align 4
  %213 = icmp eq i8 %212, 0
  br i1 %213, label %214, label %223

214:                                              ; preds = %206, %210
  %215 = load i32, i32* %167, align 8
  %216 = icmp eq i32 %215, 1
  br i1 %216, label %223, label %217

217:                                              ; preds = %214
  %218 = load i8, i8* %201, align 8, !range !2
  %219 = icmp eq i8 %218, 0
  br i1 %219, label %220, label %223

220:                                              ; preds = %217
  %221 = load i32, i32* %154, align 4
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %272, label %223

223:                                              ; preds = %220, %217, %210, %214
  %224 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.211, i64 0, i64 0)) #9
  %225 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %225) #9
  %226 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %227 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %228 = bitcast %"class.std::__1::basic_string"* %6 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %229 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %228, i64 0, i32 1, i32 0
  %230 = bitcast %"class.std::__1::basic_string"* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %230, i8 -86, i64 24, i1 false)
  store i8 21, i8* %229, align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %225, i8* align 1 getelementptr inbounds ([22 x i8], [22 x i8]* @.str.212, i64 0, i64 0), i64 21, i1 false) #9
  %231 = getelementptr inbounds i8, i8* %225, i64 21
  store i8 0, i8* %231, align 1
  %232 = load i8, i8* %207, align 4, !range !2
  %233 = icmp eq i8 %232, 0
  br i1 %233, label %236, label %234

234:                                              ; preds = %223
  %235 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.213, i64 0, i64 0)) #9
  br label %236

236:                                              ; preds = %223, %234
  %237 = load i8, i8* %201, align 8, !range !2
  %238 = icmp eq i8 %237, 0
  br i1 %238, label %241, label %239

239:                                              ; preds = %236
  %240 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.214, i64 0, i64 0)) #9
  br label %241

241:                                              ; preds = %236, %239
  %242 = load i32, i32* %167, align 8
  %243 = icmp eq i32 %242, 1
  br i1 %243, label %244, label %246

244:                                              ; preds = %241
  %245 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.215, i64 0, i64 0)) #9
  br label %246

246:                                              ; preds = %244, %241
  %247 = load i32, i32* %154, align 4
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %251, label %249

249:                                              ; preds = %246
  %250 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.216, i64 0, i64 0)) #9
  br label %251

251:                                              ; preds = %246, %249
  %252 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 31
  %253 = load i32, i32* %252, align 8
  %254 = icmp eq i32 %253, 2
  br i1 %254, label %255, label %257

255:                                              ; preds = %251
  %256 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.217, i64 0, i64 0)) #9
  br label %257

257:                                              ; preds = %255, %251
  %258 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.218, i64 0, i64 0)) #9
  %259 = load i8, i8* %229, align 1
  %260 = icmp slt i8 %259, 0
  %261 = load i8*, i8** %226, align 8
  %262 = load i64, i64* %227, align 8
  %263 = zext i8 %259 to i64
  %264 = select i1 %260, i8* %261, i8* %225
  %265 = select i1 %260, i64 %262, i64 %263
  %266 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %264, i64 %265) #9
  %267 = load i8, i8* %229, align 1
  %268 = icmp slt i8 %267, 0
  br i1 %268, label %269, label %271

269:                                              ; preds = %257
  %270 = load i8*, i8** %226, align 8
  call void @_ZdlPv(i8* %270) #10
  br label %271

271:                                              ; preds = %257, %269
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %225) #9
  br label %272

272:                                              ; preds = %220, %271
  %273 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.219, i64 0, i64 0)) #9
  %274 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 4
  %275 = load i32, i32* %274, align 4
  switch i32 %275, label %292 [
    i32 0, label %289
    i32 1, label %276
    i32 2, label %277
  ]

276:                                              ; preds = %272
  br label %289

277:                                              ; preds = %272
  %278 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 29
  %279 = load i32, i32* %278, align 8
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %289, label %281

281:                                              ; preds = %277
  %282 = load i32, i32* %154, align 4
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %289, label %284

284:                                              ; preds = %281
  %285 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 30
  %286 = load i8, i8* %285, align 4, !range !2
  %287 = icmp eq i8 %286, 0
  %288 = select i1 %287, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.223, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.222, i64 0, i64 0)
  br label %289

289:                                              ; preds = %281, %284, %277, %272, %276
  %290 = phi i8* [ getelementptr inbounds ([43 x i8], [43 x i8]* @.str.221, i64 0, i64 0), %276 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.220, i64 0, i64 0), %272 ], [ getelementptr inbounds ([28 x i8], [28 x i8]* @.str.220, i64 0, i64 0), %277 ], [ %288, %284 ], [ getelementptr inbounds ([44 x i8], [44 x i8]* @.str.223, i64 0, i64 0), %281 ]
  %291 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* %290) #9
  br label %292

292:                                              ; preds = %289, %272
  %293 = getelementptr inbounds %"class.viz::FragmentShader", %"class.viz::FragmentShader"* %1, i64 0, i32 46
  %294 = load i8, i8* %293, align 4, !range !2
  %295 = icmp eq i8 %294, 0
  br i1 %295, label %298, label %296

296:                                              ; preds = %292
  %297 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.224, i64 0, i64 0)) #9
  br label %298

298:                                              ; preds = %292, %296
  %299 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.73, i64 0, i64 0)) #9
  %300 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %301 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %302 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %303 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %303, i8 0, i64 24, i1 false) #9, !alias.scope !6
  %304 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %305 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %304, i64 0, i32 1, i32 0
  %306 = load i8, i8* %305, align 1, !noalias !6
  %307 = icmp slt i8 %306, 0
  %308 = load i64, i64* %9, align 8, !noalias !6
  %309 = zext i8 %306 to i64
  %310 = select i1 %307, i64 %308, i64 %309
  %311 = load i8, i8* %17, align 1, !noalias !6
  %312 = icmp slt i8 %311, 0
  %313 = load i64, i64* %15, align 8, !noalias !6
  %314 = zext i8 %311 to i64
  %315 = select i1 %312, i64 %313, i64 %314
  %316 = load i8*, i8** %8, align 8, !noalias !6
  %317 = select i1 %307, i8* %316, i8* %7
  %318 = add i64 %315, %310
  %319 = icmp ugt i64 %318, -17
  br i1 %319, label %320, label %322

320:                                              ; preds = %298
  %321 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %321) #11
  unreachable

322:                                              ; preds = %298
  %323 = icmp ult i64 %318, 23
  br i1 %323, label %324, label %328

324:                                              ; preds = %322
  %325 = trunc i64 %310 to i8
  %326 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %327 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %326, i64 0, i32 1, i32 0
  store i8 %325, i8* %327, align 1, !alias.scope !6
  br label %333

328:                                              ; preds = %322
  %329 = add nuw i64 %318, 16
  %330 = and i64 %329, -16
  %331 = call i8* @_Znwm(i64 %330) #10
  store i8* %331, i8** %300, align 8, !alias.scope !6
  %332 = or i64 %330, -9223372036854775808
  store i64 %332, i64* %302, align 8, !alias.scope !6
  store i64 %310, i64* %301, align 8, !alias.scope !6
  br label %333

333:                                              ; preds = %328, %324
  %334 = phi i8* [ %303, %324 ], [ %331, %328 ]
  %335 = icmp eq i64 %310, 0
  br i1 %335, label %337, label %336

336:                                              ; preds = %333
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %334, i8* align 1 %317, i64 %310, i1 false) #9
  br label %337

337:                                              ; preds = %333, %336
  %338 = getelementptr inbounds i8, i8* %334, i64 %310
  store i8 0, i8* %338, align 1
  %339 = load i8*, i8** %14, align 8, !noalias !6
  %340 = select i1 %312, i8* %339, i8* %13
  %341 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* %0, i8* %340, i64 %315) #9
  %342 = load i8, i8* %17, align 1
  %343 = icmp slt i8 %342, 0
  br i1 %343, label %344, label %346

344:                                              ; preds = %337
  %345 = load i8*, i8** %14, align 8
  call void @_ZdlPv(i8* %345) #10
  br label %346

346:                                              ; preds = %337, %344
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #9
  %347 = load i8, i8* %305, align 1
  %348 = icmp slt i8 %347, 0
  br i1 %348, label %349, label %351

349:                                              ; preds = %346
  %350 = load i8*, i8** %8, align 8
  call void @_ZdlPv(i8* %350) #10
  br label %351

351:                                              ; preds = %346, %349
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #9
  ret void
}

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKc(%"class.std::__1::basic_string"*, i64, i8*) local_unnamed_addr #3

declare void @_ZN4base9StrAppendEPNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_4spanIKNS_16BasicStringPieceIcS3_EELm18446744073709551615EEE(%"class.std::__1::basic_string"*, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #9
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #6

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_: argument 0"}
!5 = distinct !{!5, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EERKS9_SB_"}
