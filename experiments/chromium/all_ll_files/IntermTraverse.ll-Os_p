; ModuleID = '../../third_party/swiftshader/src/OpenGL/compiler/IntermTraverse.cpp'
source_filename = "../../third_party/swiftshader/src/OpenGL/compiler/IntermTraverse.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.TIntermSymbol = type { %class.TIntermTyped, i32, %"class.std::__1::basic_string" }
%class.TIntermTyped = type { %class.TIntermNode, %class.TType }
%class.TIntermNode = type { i32 (...)**, %struct.TSourceLoc }
%struct.TSourceLoc = type { i32, i32, i32, i32 }
%class.TType = type { i8, i8, i8, i8, i8, i8, i32, i32, %class.TType*, %class.TInterfaceBlock*, %struct.TLayoutQualifier, %class.TStructure*, %"class.std::__1::basic_string"* }
%class.TInterfaceBlock = type <{ %class.TFieldListCollection, %"class.std::__1::basic_string"*, i32, i32, i32, [4 x i8] }>
%class.TFieldListCollection = type { i32 (...)**, %"class.std::__1::basic_string"*, %class.TVector*, %"class.std::__1::basic_string", i64 }
%class.TVector = type { %"class.std::__1::vector.4" }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %class.TField**, %class.TField**, %"class.std::__1::__compressed_pair.6" }
%class.TField = type { %class.TType*, %"class.std::__1::basic_string"*, %struct.TSourceLoc }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7", %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.TField** }
%"struct.std::__1::__compressed_pair_elem.8" = type { %class.pool_allocator.9 }
%class.pool_allocator.9 = type { %class.TPoolAllocator* }
%class.TPoolAllocator = type { i64, i64, i64, i64, i64, %"struct.TPoolAllocator::tHeader"*, %"struct.TPoolAllocator::tHeader"*, %"class.std::__1::vector", i32, i64 }
%"struct.TPoolAllocator::tHeader" = type { %"struct.TPoolAllocator::tHeader"*, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.TPoolAllocator::tAllocState"*, %"struct.TPoolAllocator::tAllocState"*, %"class.std::__1::__compressed_pair.1" }
%"struct.TPoolAllocator::tAllocState" = type { i64, %"struct.TPoolAllocator::tHeader"* }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.TPoolAllocator::tAllocState"* }
%struct.TLayoutQualifier = type { i32, i32, i32 }
%class.TStructure = type <{ %class.TFieldListCollection, i32, i32, i8, [7 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.0" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, pool_allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::__compressed_pair_elem.0" = type { %class.pool_allocator }
%class.pool_allocator = type { %class.TPoolAllocator* }
%class.TIntermTraverser = type { i32 (...)**, i8, i8, i8, i8, i32, %class.TVector.10, %"class.std::__1::vector.17" }
%class.TVector.10 = type { %"class.std::__1::vector.11" }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %class.TIntermNode**, %class.TIntermNode**, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14", %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.TIntermNode** }
%"struct.std::__1::__compressed_pair_elem.15" = type { %class.pool_allocator.16 }
%class.pool_allocator.16 = type { %class.TPoolAllocator* }
%"class.std::__1::vector.17" = type { %"class.std::__1::__vector_base.18" }
%"class.std::__1::__vector_base.18" = type { %"struct.TIntermTraverser::ParentBlock"*, %"struct.TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.19" }
%"struct.TIntermTraverser::ParentBlock" = type { %class.TIntermAggregate*, i64 }
%class.TIntermAggregate = type <{ %class.TIntermOperator.base, [4 x i8], %class.TVector.10, %"class.std::__1::basic_string", i8, i8, i8, i8, %struct.TSourceLoc, [4 x i8] }>
%class.TIntermOperator.base = type <{ %class.TIntermTyped, i32 }>
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.TIntermTraverser::ParentBlock"* }
%class.TIntermConstantUnion = type { %class.TIntermTyped, %class.ConstantUnion* }
%class.ConstantUnion = type <{ %union.anon.24, i8, [3 x i8] }>
%union.anon.24 = type { i32 }
%class.TIntermBinary = type { %class.TIntermOperator.base, %class.TIntermTyped*, %class.TIntermTyped* }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.TIntermUnary = type { %class.TIntermOperator.base, %class.TIntermTyped* }
%class.TIntermSelection = type { %class.TIntermTyped, %class.TIntermTyped*, %class.TIntermNode*, %class.TIntermNode* }
%class.TIntermSwitch = type { %class.TIntermNode, %class.TIntermTyped*, %class.TIntermAggregate* }
%class.TIntermCase = type { %class.TIntermNode, %class.TIntermTyped* }
%class.TIntermLoop = type <{ %class.TIntermNode, i32, [4 x i8], %class.TIntermNode*, %class.TIntermTyped*, %class.TIntermTyped*, %class.TIntermNode*, i8, [7 x i8] }>
%class.TIntermBranch = type { %class.TIntermNode, i32, %class.TIntermTyped* }

$_ZN11TIntermNode10getAsTypedEv = comdat any

$_ZN11TIntermNode18getAsConstantUnionEv = comdat any

$_ZN11TIntermNode14getAsAggregateEv = comdat any

$_ZN11TIntermNode15getAsBinaryNodeEv = comdat any

$_ZN11TIntermNode14getAsUnaryNodeEv = comdat any

$_ZN11TIntermNode18getAsSelectionNodeEv = comdat any

$_ZN11TIntermNode15getAsSymbolNodeEv = comdat any

$_ZN11TIntermLoop13getAsLoopNodeEv = comdat any

$_ZN11TIntermNode15getAsBranchNodeEv = comdat any

$_ZN11TIntermNode15getAsSwitchNodeEv = comdat any

$_ZN11TIntermNode13getAsCaseNodeEv = comdat any

$_ZN11TIntermLoopD0Ev = comdat any

$_ZN11TIntermNode13getAsLoopNodeEv = comdat any

$_ZN13TIntermBranch15getAsBranchNodeEv = comdat any

$_ZN13TIntermBranchD0Ev = comdat any

$_ZN12TIntermTyped10getAsTypedEv = comdat any

$_ZN13TIntermSymbol15getAsSymbolNodeEv = comdat any

$_ZN13TIntermSymbolD2Ev = comdat any

$_ZN13TIntermSymbolD0Ev = comdat any

$_ZN12TIntermTyped7setTypeERK5TType = comdat any

$_ZN20TIntermConstantUnion18getAsConstantUnionEv = comdat any

$_ZN20TIntermConstantUnionD0Ev = comdat any

$_ZN13TIntermBinary15getAsBinaryNodeEv = comdat any

$_ZN13TIntermBinaryD0Ev = comdat any

$_ZN13TIntermBinary7setTypeERK5TType = comdat any

$_ZN12TIntermUnary14getAsUnaryNodeEv = comdat any

$_ZN12TIntermUnaryD0Ev = comdat any

$_ZN12TIntermUnary7setTypeERK5TType = comdat any

$_ZN16TIntermAggregate14getAsAggregateEv = comdat any

$_ZN16TIntermAggregateD2Ev = comdat any

$_ZN16TIntermAggregateD0Ev = comdat any

$_ZN16TIntermAggregate7setTypeERK5TType = comdat any

$_ZN16TIntermSelection18getAsSelectionNodeEv = comdat any

$_ZN16TIntermSelectionD0Ev = comdat any

$_ZN13TIntermSwitch15getAsSwitchNodeEv = comdat any

$_ZN11TIntermNodeD2Ev = comdat any

$_ZN13TIntermSwitchD0Ev = comdat any

$_ZN11TIntermCase13getAsCaseNodeEv = comdat any

$_ZN11TIntermCaseD0Ev = comdat any

@_ZTV11TIntermLoop = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermLoop*, %class.TIntermTraverser*)* @_ZN11TIntermLoop8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermNode*)* @_ZN11TIntermNode10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermLoop*)* @_ZN11TIntermLoop13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermLoop*)* @_ZN11TIntermLoopD0Ev to i8*)] }, align 8
@_ZTV13TIntermBranch = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermBranch*, %class.TIntermTraverser*)* @_ZN13TIntermBranch8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermNode*)* @_ZN11TIntermNode10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermBranch*)* @_ZN13TIntermBranch15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermBranch*)* @_ZN13TIntermBranchD0Ev to i8*)] }, align 8
@_ZTV13TIntermSymbol = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermSymbol*, %class.TIntermTraverser*)* @_ZN13TIntermSymbol8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermTyped*)* @_ZN12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermSymbol*)* @_ZN13TIntermSymbol15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermSymbol*)* @_ZN13TIntermSymbolD2Ev to i8*), i8* bitcast (void (%class.TIntermSymbol*)* @_ZN13TIntermSymbolD0Ev to i8*), i8* bitcast (void (%class.TIntermTyped*, %class.TType*)* @_ZN12TIntermTyped7setTypeERK5TType to i8*)] }, align 8
@_ZTV20TIntermConstantUnion = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermConstantUnion*, %class.TIntermTraverser*)* @_ZN20TIntermConstantUnion8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermTyped*)* @_ZN12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermConstantUnion*)* @_ZN20TIntermConstantUnion18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermConstantUnion*)* @_ZN20TIntermConstantUnionD0Ev to i8*), i8* bitcast (void (%class.TIntermTyped*, %class.TType*)* @_ZN12TIntermTyped7setTypeERK5TType to i8*)] }, align 8
@_ZTV13TIntermBinary = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermBinary*, %class.TIntermTraverser*)* @_ZN13TIntermBinary8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermTyped*)* @_ZN12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermBinary*)* @_ZN13TIntermBinary15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermBinary*)* @_ZN13TIntermBinaryD0Ev to i8*), i8* bitcast (void (%class.TIntermBinary*, %class.TType*)* @_ZN13TIntermBinary7setTypeERK5TType to i8*)] }, align 8
@_ZTV12TIntermUnary = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermUnary*, %class.TIntermTraverser*)* @_ZN12TIntermUnary8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermTyped*)* @_ZN12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermUnary*)* @_ZN12TIntermUnary14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermUnary*)* @_ZN12TIntermUnaryD0Ev to i8*), i8* bitcast (void (%class.TIntermUnary*, %class.TType*)* @_ZN12TIntermUnary7setTypeERK5TType to i8*)] }, align 8
@_ZTV16TIntermAggregate = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermAggregate*, %class.TIntermTraverser*)* @_ZN16TIntermAggregate8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermTyped*)* @_ZN12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermAggregate*)* @_ZN16TIntermAggregate14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermAggregate*)* @_ZN16TIntermAggregateD2Ev to i8*), i8* bitcast (void (%class.TIntermAggregate*)* @_ZN16TIntermAggregateD0Ev to i8*), i8* bitcast (void (%class.TIntermAggregate*, %class.TType*)* @_ZN16TIntermAggregate7setTypeERK5TType to i8*)] }, align 8
@_ZTV16TIntermSelection = hidden unnamed_addr constant { [17 x i8*] } { [17 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermSelection*, %class.TIntermTraverser*)* @_ZN16TIntermSelection8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermTyped*)* @_ZN12TIntermTyped10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermSelection*)* @_ZN16TIntermSelection18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermSelection*)* @_ZN16TIntermSelectionD0Ev to i8*), i8* bitcast (void (%class.TIntermTyped*, %class.TType*)* @_ZN12TIntermTyped7setTypeERK5TType to i8*)] }, align 8
@_ZTV13TIntermSwitch = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermSwitch*, %class.TIntermTraverser*)* @_ZN13TIntermSwitch8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermNode*)* @_ZN11TIntermNode10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermSwitch*)* @_ZN13TIntermSwitch15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermSwitch*)* @_ZN13TIntermSwitchD0Ev to i8*)] }, align 8
@_ZTV11TIntermCase = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.TIntermCase*, %class.TIntermTraverser*)* @_ZN11TIntermCase8traverseEP16TIntermTraverser to i8*), i8* bitcast (%class.TIntermTyped* (%class.TIntermNode*)* @_ZN11TIntermNode10getAsTypedEv to i8*), i8* bitcast (%class.TIntermConstantUnion* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsConstantUnionEv to i8*), i8* bitcast (%class.TIntermAggregate* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsAggregateEv to i8*), i8* bitcast (%class.TIntermBinary* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBinaryNodeEv to i8*), i8* bitcast (%class.TIntermUnary* (%class.TIntermNode*)* @_ZN11TIntermNode14getAsUnaryNodeEv to i8*), i8* bitcast (%class.TIntermSelection* (%class.TIntermNode*)* @_ZN11TIntermNode18getAsSelectionNodeEv to i8*), i8* bitcast (%class.TIntermSymbol* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSymbolNodeEv to i8*), i8* bitcast (%class.TIntermLoop* (%class.TIntermNode*)* @_ZN11TIntermNode13getAsLoopNodeEv to i8*), i8* bitcast (%class.TIntermBranch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsBranchNodeEv to i8*), i8* bitcast (%class.TIntermSwitch* (%class.TIntermNode*)* @_ZN11TIntermNode15getAsSwitchNodeEv to i8*), i8* bitcast (%class.TIntermCase* (%class.TIntermCase*)* @_ZN11TIntermCase13getAsCaseNodeEv to i8*), i8* bitcast (void (%class.TIntermNode*)* @_ZN11TIntermNodeD2Ev to i8*), i8* bitcast (void (%class.TIntermCase*)* @_ZN11TIntermCaseD0Ev to i8*)] }, align 8

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN13TIntermSymbol8traverseEP16TIntermTraverser(%class.TIntermSymbol*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = bitcast %class.TIntermTraverser* %1 to void (%class.TIntermTraverser*, %class.TIntermSymbol*)***
  %4 = load void (%class.TIntermTraverser*, %class.TIntermSymbol*)**, void (%class.TIntermTraverser*, %class.TIntermSymbol*)*** %3, align 8
  %5 = getelementptr inbounds void (%class.TIntermTraverser*, %class.TIntermSymbol*)*, void (%class.TIntermTraverser*, %class.TIntermSymbol*)** %4, i64 2
  %6 = load void (%class.TIntermTraverser*, %class.TIntermSymbol*)*, void (%class.TIntermTraverser*, %class.TIntermSymbol*)** %5, align 8
  tail call void %6(%class.TIntermTraverser* %1, %class.TIntermSymbol* %0) #5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN20TIntermConstantUnion8traverseEP16TIntermTraverser(%class.TIntermConstantUnion*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = bitcast %class.TIntermTraverser* %1 to void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)***
  %4 = load void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)**, void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)*** %3, align 8
  %5 = getelementptr inbounds void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)*, void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)** %4, i64 3
  %6 = load void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)*, void (%class.TIntermTraverser*, %class.TIntermConstantUnion*)** %5, align 8
  tail call void %6(%class.TIntermTraverser* %1, %class.TIntermConstantUnion* %0) #5
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN13TIntermBinary8traverseEP16TIntermTraverser(%class.TIntermBinary*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %8, i64 4
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermBinary* %0) #5
  br i1 %11, label %12, label %166

12:                                               ; preds = %6, %2
  %13 = ptrtoint %class.TIntermBinary* %0 to i64
  %14 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %19 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %20 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %class.TIntermNode**, %class.TIntermNode*** %20, align 8
  %22 = icmp eq %class.TIntermNode** %19, %21
  %23 = ptrtoint %class.TIntermNode** %21 to i64
  br i1 %22, label %29, label %24

24:                                               ; preds = %12
  %25 = bitcast %class.TIntermNode** %19 to i64*
  store i64 %13, i64* %25, align 8
  %26 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %19, i64 1
  %27 = ptrtoint %class.TIntermNode** %26 to i64
  %28 = bitcast %class.TIntermNode*** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %82

29:                                               ; preds = %12
  %30 = ptrtoint %class.TIntermNode** %19 to i64
  %31 = bitcast %class.TIntermNode*** %18 to i64*
  %32 = bitcast %"class.std::__1::vector.11"* %17 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #6
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %class.TIntermNode*** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %45, %40
  %51 = phi i64 [ %48, %45 ], [ 2305843009213693951, %40 ]
  %52 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %53 = load %class.TPoolAllocator*, %class.TPoolAllocator** %52, align 8
  %54 = shl i64 %51, 3
  %55 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %53, i64 %54) #5
  %56 = bitcast i8* %55 to %class.TIntermNode**
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i64 [ %51, %50 ], [ 0, %45 ]
  %59 = phi %class.TIntermNode** [ %56, %50 ], [ null, %45 ]
  %60 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %35
  %61 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %58
  %62 = ptrtoint %class.TIntermNode** %61 to i64
  %63 = bitcast %class.TIntermNode** %60 to i64*
  store i64 %13, i64* %63, align 8
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %60, i64 1
  %65 = ptrtoint %class.TIntermNode** %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %67 = load %class.TIntermNode**, %class.TIntermNode*** %66, align 8
  %68 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %69 = icmp eq %class.TIntermNode** %68, %67
  br i1 %69, label %79, label %70

70:                                               ; preds = %57, %70
  %71 = phi %class.TIntermNode** [ %73, %70 ], [ %60, %57 ]
  %72 = phi %class.TIntermNode** [ %74, %70 ], [ %68, %57 ]
  %73 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %71, i64 -1
  %74 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %72, i64 -1
  %75 = bitcast %class.TIntermNode** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.TIntermNode** %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = icmp eq %class.TIntermNode** %74, %67
  br i1 %78, label %79, label %70

79:                                               ; preds = %70, %57
  %80 = phi %class.TIntermNode** [ %60, %57 ], [ %73, %70 ]
  %81 = ptrtoint %class.TIntermNode** %80 to i64
  store i64 %81, i64* %32, align 8
  store i64 %65, i64* %31, align 8
  store i64 %62, i64* %41, align 8
  br label %82

82:                                               ; preds = %24, %79
  %83 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 4
  %84 = load i8, i8* %83, align 1, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %114, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 2
  %88 = load %class.TIntermTyped*, %class.TIntermTyped** %87, align 8
  %89 = icmp eq %class.TIntermTyped* %88, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %88, i64 0, i32 0
  %92 = bitcast %class.TIntermTyped* %88 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %93 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %92, align 8
  %94 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %93, align 8
  tail call void %94(%class.TIntermNode* %91, %class.TIntermTraverser* %1) #5
  br label %95

95:                                               ; preds = %86, %90
  %96 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 2
  %97 = load i8, i8* %96, align 1, !range !2
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %105, label %99

99:                                               ; preds = %95
  %100 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)***
  %101 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*** %100, align 8
  %102 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %101, i64 4
  %103 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %102, align 8
  %104 = tail call zeroext i1 %103(%class.TIntermTraverser* %1, i32 1, %class.TIntermBinary* %0) #5
  br i1 %104, label %105, label %161

105:                                              ; preds = %99, %95
  %106 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 1
  %107 = load %class.TIntermTyped*, %class.TIntermTyped** %106, align 8
  %108 = icmp eq %class.TIntermTyped* %107, null
  br i1 %108, label %147, label %109

109:                                              ; preds = %105
  %110 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %107, i64 0, i32 0
  %111 = bitcast %class.TIntermTyped* %107 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %112 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %111, align 8
  %113 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %112, align 8
  tail call void %113(%class.TIntermNode* %110, %class.TIntermTraverser* %1) #5
  br label %147

114:                                              ; preds = %82
  %115 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 1
  %116 = load %class.TIntermTyped*, %class.TIntermTyped** %115, align 8
  %117 = icmp eq %class.TIntermTyped* %116, null
  br i1 %117, label %123, label %118

118:                                              ; preds = %114
  %119 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %116, i64 0, i32 0
  %120 = bitcast %class.TIntermTyped* %116 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %121 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %120, align 8
  %122 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %121, align 8
  tail call void %122(%class.TIntermNode* %119, %class.TIntermTraverser* %1) #5
  br label %123

123:                                              ; preds = %114, %118
  %124 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 2
  %125 = load i8, i8* %124, align 1, !range !2
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %133, label %127

127:                                              ; preds = %123
  %128 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)***
  %129 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*** %128, align 8
  %130 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %129, i64 4
  %131 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %130, align 8
  %132 = tail call zeroext i1 %131(%class.TIntermTraverser* %1, i32 1, %class.TIntermBinary* %0) #5
  br i1 %132, label %133, label %142

133:                                              ; preds = %127, %123
  %134 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 2
  %135 = load %class.TIntermTyped*, %class.TIntermTyped** %134, align 8
  %136 = icmp eq %class.TIntermTyped* %135, null
  br i1 %136, label %147, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %135, i64 0, i32 0
  %139 = bitcast %class.TIntermTyped* %135 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %140 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %139, align 8
  %141 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %140, align 8
  tail call void %141(%class.TIntermNode* %138, %class.TIntermTraverser* %1) #5
  br label %147

142:                                              ; preds = %127
  %143 = load i32, i32* %14, align 4
  %144 = add nsw i32 %143, -1
  store i32 %144, i32* %14, align 4
  %145 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %146 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %145, i64 -1
  store %class.TIntermNode** %146, %class.TIntermNode*** %18, align 8
  br label %166

147:                                              ; preds = %133, %105, %137, %109
  %148 = load i32, i32* %14, align 4
  %149 = add nsw i32 %148, -1
  store i32 %149, i32* %14, align 4
  %150 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %151 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %150, i64 -1
  store %class.TIntermNode** %151, %class.TIntermNode*** %18, align 8
  %152 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %153 = load i8, i8* %152, align 2, !range !2
  %154 = icmp eq i8 %153, 0
  br i1 %154, label %166, label %155

155:                                              ; preds = %147
  %156 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)***
  %157 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*** %156, align 8
  %158 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %157, i64 4
  %159 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBinary*)** %158, align 8
  %160 = tail call zeroext i1 %159(%class.TIntermTraverser* %1, i32 2, %class.TIntermBinary* %0) #5
  br label %166

161:                                              ; preds = %99
  %162 = load i32, i32* %14, align 4
  %163 = add nsw i32 %162, -1
  store i32 %163, i32* %14, align 4
  %164 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %165 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %164, i64 -1
  store %class.TIntermNode** %165, %class.TIntermNode*** %18, align 8
  br label %166

166:                                              ; preds = %142, %161, %6, %147, %155
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN12TIntermUnary8traverseEP16TIntermTraverser(%class.TIntermUnary*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)** %8, i64 5
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermUnary* %0) #5
  br i1 %11, label %12, label %102

12:                                               ; preds = %2, %6
  %13 = ptrtoint %class.TIntermUnary* %0 to i64
  %14 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %19 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %20 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %class.TIntermNode**, %class.TIntermNode*** %20, align 8
  %22 = icmp eq %class.TIntermNode** %19, %21
  %23 = ptrtoint %class.TIntermNode** %21 to i64
  br i1 %22, label %29, label %24

24:                                               ; preds = %12
  %25 = bitcast %class.TIntermNode** %19 to i64*
  store i64 %13, i64* %25, align 8
  %26 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %19, i64 1
  %27 = ptrtoint %class.TIntermNode** %26 to i64
  %28 = bitcast %class.TIntermNode*** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %82

29:                                               ; preds = %12
  %30 = ptrtoint %class.TIntermNode** %19 to i64
  %31 = bitcast %class.TIntermNode*** %18 to i64*
  %32 = bitcast %"class.std::__1::vector.11"* %17 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #6
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %class.TIntermNode*** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %45, %40
  %51 = phi i64 [ %48, %45 ], [ 2305843009213693951, %40 ]
  %52 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %53 = load %class.TPoolAllocator*, %class.TPoolAllocator** %52, align 8
  %54 = shl i64 %51, 3
  %55 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %53, i64 %54) #5
  %56 = bitcast i8* %55 to %class.TIntermNode**
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i64 [ %51, %50 ], [ 0, %45 ]
  %59 = phi %class.TIntermNode** [ %56, %50 ], [ null, %45 ]
  %60 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %35
  %61 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %58
  %62 = ptrtoint %class.TIntermNode** %61 to i64
  %63 = bitcast %class.TIntermNode** %60 to i64*
  store i64 %13, i64* %63, align 8
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %60, i64 1
  %65 = ptrtoint %class.TIntermNode** %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %67 = load %class.TIntermNode**, %class.TIntermNode*** %66, align 8
  %68 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %69 = icmp eq %class.TIntermNode** %68, %67
  br i1 %69, label %79, label %70

70:                                               ; preds = %57, %70
  %71 = phi %class.TIntermNode** [ %73, %70 ], [ %60, %57 ]
  %72 = phi %class.TIntermNode** [ %74, %70 ], [ %68, %57 ]
  %73 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %71, i64 -1
  %74 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %72, i64 -1
  %75 = bitcast %class.TIntermNode** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.TIntermNode** %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = icmp eq %class.TIntermNode** %74, %67
  br i1 %78, label %79, label %70

79:                                               ; preds = %70, %57
  %80 = phi %class.TIntermNode** [ %60, %57 ], [ %73, %70 ]
  %81 = ptrtoint %class.TIntermNode** %80 to i64
  store i64 %81, i64* %32, align 8
  store i64 %65, i64* %31, align 8
  store i64 %62, i64* %41, align 8
  br label %82

82:                                               ; preds = %24, %79
  %83 = getelementptr inbounds %class.TIntermUnary, %class.TIntermUnary* %0, i64 0, i32 1
  %84 = bitcast %class.TIntermTyped** %83 to %class.TIntermNode**
  %85 = load %class.TIntermNode*, %class.TIntermNode** %84, align 8
  %86 = bitcast %class.TIntermNode* %85 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %87 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %86, align 8
  %88 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %87, align 8
  tail call void %88(%class.TIntermNode* %85, %class.TIntermTraverser* %1) #5
  %89 = load i32, i32* %14, align 4
  %90 = add nsw i32 %89, -1
  store i32 %90, i32* %14, align 4
  %91 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %92 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %91, i64 -1
  store %class.TIntermNode** %92, %class.TIntermNode*** %18, align 8
  %93 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %94 = load i8, i8* %93, align 2, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %102, label %96

96:                                               ; preds = %82
  %97 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)***
  %98 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)*** %97, align 8
  %99 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)** %98, i64 5
  %100 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermUnary*)** %99, align 8
  %101 = tail call zeroext i1 %100(%class.TIntermTraverser* %1, i32 2, %class.TIntermUnary* %0) #5
  br label %102

102:                                              ; preds = %6, %82, %96
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN16TIntermAggregate8traverseEP16TIntermTraverser(%class.TIntermAggregate*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %8, i64 7
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermAggregate* %0) #5
  br i1 %11, label %12, label %180

12:                                               ; preds = %6, %2
  %13 = ptrtoint %class.TIntermAggregate* %0 to i64
  %14 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %19 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %20 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %class.TIntermNode**, %class.TIntermNode*** %20, align 8
  %22 = icmp eq %class.TIntermNode** %19, %21
  %23 = ptrtoint %class.TIntermNode** %21 to i64
  br i1 %22, label %29, label %24

24:                                               ; preds = %12
  %25 = bitcast %class.TIntermNode** %19 to i64*
  store i64 %13, i64* %25, align 8
  %26 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %19, i64 1
  %27 = ptrtoint %class.TIntermNode** %26 to i64
  %28 = bitcast %class.TIntermNode*** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %82

29:                                               ; preds = %12
  %30 = ptrtoint %class.TIntermNode** %19 to i64
  %31 = bitcast %class.TIntermNode*** %18 to i64*
  %32 = bitcast %"class.std::__1::vector.11"* %17 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #6
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %class.TIntermNode*** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %45, %40
  %51 = phi i64 [ %48, %45 ], [ 2305843009213693951, %40 ]
  %52 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %53 = load %class.TPoolAllocator*, %class.TPoolAllocator** %52, align 8
  %54 = shl i64 %51, 3
  %55 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %53, i64 %54) #5
  %56 = bitcast i8* %55 to %class.TIntermNode**
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i64 [ %51, %50 ], [ 0, %45 ]
  %59 = phi %class.TIntermNode** [ %56, %50 ], [ null, %45 ]
  %60 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %35
  %61 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %58
  %62 = ptrtoint %class.TIntermNode** %61 to i64
  %63 = bitcast %class.TIntermNode** %60 to i64*
  store i64 %13, i64* %63, align 8
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %60, i64 1
  %65 = ptrtoint %class.TIntermNode** %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %67 = load %class.TIntermNode**, %class.TIntermNode*** %66, align 8
  %68 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %69 = icmp eq %class.TIntermNode** %68, %67
  br i1 %69, label %79, label %70

70:                                               ; preds = %57, %70
  %71 = phi %class.TIntermNode** [ %73, %70 ], [ %60, %57 ]
  %72 = phi %class.TIntermNode** [ %74, %70 ], [ %68, %57 ]
  %73 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %71, i64 -1
  %74 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %72, i64 -1
  %75 = bitcast %class.TIntermNode** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.TIntermNode** %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = icmp eq %class.TIntermNode** %74, %67
  br i1 %78, label %79, label %70

79:                                               ; preds = %70, %57
  %80 = phi %class.TIntermNode** [ %60, %57 ], [ %73, %70 ]
  %81 = ptrtoint %class.TIntermNode** %80 to i64
  store i64 %81, i64* %32, align 8
  store i64 %65, i64* %31, align 8
  store i64 %62, i64* %41, align 8
  br label %82

82:                                               ; preds = %24, %79
  %83 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 4
  %84 = load i8, i8* %83, align 1, !range !2
  %85 = icmp eq i8 %84, 0
  %86 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0
  br i1 %85, label %124, label %87

87:                                               ; preds = %82
  %88 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %89 = load %class.TIntermNode**, %class.TIntermNode*** %88, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %86, i64 0, i32 0, i32 0
  %91 = load %class.TIntermNode**, %class.TIntermNode*** %90, align 8
  %92 = icmp eq %class.TIntermNode** %89, %91
  br i1 %92, label %162, label %93

93:                                               ; preds = %87
  %94 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 2
  %95 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)***
  br label %96

96:                                               ; preds = %93, %120
  %97 = phi i8 [ 1, %93 ], [ %121, %120 ]
  %98 = phi %class.TIntermNode** [ %89, %93 ], [ %99, %120 ]
  %99 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %98, i64 -1
  %100 = load %class.TIntermNode*, %class.TIntermNode** %99, align 8
  %101 = bitcast %class.TIntermNode* %100 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %102 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %101, align 8
  %103 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %102, align 8
  tail call void %103(%class.TIntermNode* %100, %class.TIntermTraverser* %1) #5
  %104 = and i8 %97, 1
  %105 = icmp eq i8 %104, 0
  br i1 %105, label %120, label %106

106:                                              ; preds = %96
  %107 = load i8, i8* %94, align 1, !range !2
  %108 = icmp eq i8 %107, 0
  br i1 %108, label %120, label %109

109:                                              ; preds = %106
  %110 = load %class.TIntermNode*, %class.TIntermNode** %99, align 8
  %111 = load %class.TIntermNode**, %class.TIntermNode*** %90, align 8
  %112 = load %class.TIntermNode*, %class.TIntermNode** %111, align 8
  %113 = icmp eq %class.TIntermNode* %110, %112
  br i1 %113, label %120, label %114

114:                                              ; preds = %109
  %115 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*** %95, align 8
  %116 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %115, i64 7
  %117 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %116, align 8
  %118 = tail call zeroext i1 %117(%class.TIntermTraverser* %1, i32 1, %class.TIntermAggregate* %0) #5
  %119 = zext i1 %118 to i8
  br label %120

120:                                              ; preds = %109, %106, %96, %114
  %121 = phi i8 [ %119, %114 ], [ %97, %109 ], [ %97, %106 ], [ %97, %96 ]
  %122 = load %class.TIntermNode**, %class.TIntermNode*** %90, align 8
  %123 = icmp eq %class.TIntermNode** %99, %122
  br i1 %123, label %162, label %96

124:                                              ; preds = %82
  %125 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %86, i64 0, i32 0, i32 0
  %126 = load %class.TIntermNode**, %class.TIntermNode*** %125, align 8
  %127 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %128 = load %class.TIntermNode**, %class.TIntermNode*** %127, align 8
  %129 = icmp eq %class.TIntermNode** %126, %128
  br i1 %129, label %162, label %130

130:                                              ; preds = %124
  %131 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 2
  %132 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)***
  br label %133

133:                                              ; preds = %130, %157
  %134 = phi i8 [ 1, %130 ], [ %158, %157 ]
  %135 = phi %class.TIntermNode** [ %126, %130 ], [ %159, %157 ]
  %136 = load %class.TIntermNode*, %class.TIntermNode** %135, align 8
  %137 = bitcast %class.TIntermNode* %136 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %138 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %137, align 8
  %139 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %138, align 8
  tail call void %139(%class.TIntermNode* %136, %class.TIntermTraverser* %1) #5
  %140 = and i8 %134, 1
  %141 = icmp eq i8 %140, 0
  br i1 %141, label %157, label %142

142:                                              ; preds = %133
  %143 = load i8, i8* %131, align 1, !range !2
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %157, label %145

145:                                              ; preds = %142
  %146 = load %class.TIntermNode*, %class.TIntermNode** %135, align 8
  %147 = load %class.TIntermNode**, %class.TIntermNode*** %127, align 8
  %148 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %147, i64 -1
  %149 = load %class.TIntermNode*, %class.TIntermNode** %148, align 8
  %150 = icmp eq %class.TIntermNode* %146, %149
  br i1 %150, label %157, label %151

151:                                              ; preds = %145
  %152 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*** %132, align 8
  %153 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %152, i64 7
  %154 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %153, align 8
  %155 = tail call zeroext i1 %154(%class.TIntermTraverser* %1, i32 1, %class.TIntermAggregate* %0) #5
  %156 = zext i1 %155 to i8
  br label %157

157:                                              ; preds = %145, %142, %133, %151
  %158 = phi i8 [ %156, %151 ], [ %134, %145 ], [ %134, %142 ], [ %134, %133 ]
  %159 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %135, i64 1
  %160 = load %class.TIntermNode**, %class.TIntermNode*** %127, align 8
  %161 = icmp eq %class.TIntermNode** %159, %160
  br i1 %161, label %162, label %133

162:                                              ; preds = %120, %157, %87, %124
  %163 = phi i8 [ 1, %124 ], [ 1, %87 ], [ %158, %157 ], [ %121, %120 ]
  %164 = load i32, i32* %14, align 4
  %165 = add nsw i32 %164, -1
  store i32 %165, i32* %14, align 4
  %166 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %167 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %166, i64 -1
  store %class.TIntermNode** %167, %class.TIntermNode*** %18, align 8
  %168 = and i8 %163, 1
  %169 = icmp eq i8 %168, 0
  br i1 %169, label %180, label %170

170:                                              ; preds = %162
  %171 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %172 = load i8, i8* %171, align 2, !range !2
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %180, label %174

174:                                              ; preds = %170
  %175 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)***
  %176 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*** %175, align 8
  %177 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %176, i64 7
  %178 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermAggregate*)** %177, align 8
  %179 = tail call zeroext i1 %178(%class.TIntermTraverser* %1, i32 2, %class.TIntermAggregate* %0) #5
  br label %180

180:                                              ; preds = %6, %170, %162, %174
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN16TIntermSelection8traverseEP16TIntermTraverser(%class.TIntermSelection*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)** %8, i64 6
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermSelection* %0) #5
  br i1 %11, label %12, label %145

12:                                               ; preds = %2, %6
  %13 = ptrtoint %class.TIntermSelection* %0 to i64
  %14 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %19 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %20 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %class.TIntermNode**, %class.TIntermNode*** %20, align 8
  %22 = icmp eq %class.TIntermNode** %19, %21
  %23 = ptrtoint %class.TIntermNode** %21 to i64
  br i1 %22, label %29, label %24

24:                                               ; preds = %12
  %25 = bitcast %class.TIntermNode** %19 to i64*
  store i64 %13, i64* %25, align 8
  %26 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %19, i64 1
  %27 = ptrtoint %class.TIntermNode** %26 to i64
  %28 = bitcast %class.TIntermNode*** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %82

29:                                               ; preds = %12
  %30 = ptrtoint %class.TIntermNode** %19 to i64
  %31 = bitcast %class.TIntermNode*** %18 to i64*
  %32 = bitcast %"class.std::__1::vector.11"* %17 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #6
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %class.TIntermNode*** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %45, %40
  %51 = phi i64 [ %48, %45 ], [ 2305843009213693951, %40 ]
  %52 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %53 = load %class.TPoolAllocator*, %class.TPoolAllocator** %52, align 8
  %54 = shl i64 %51, 3
  %55 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %53, i64 %54) #5
  %56 = bitcast i8* %55 to %class.TIntermNode**
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i64 [ %51, %50 ], [ 0, %45 ]
  %59 = phi %class.TIntermNode** [ %56, %50 ], [ null, %45 ]
  %60 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %35
  %61 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %58
  %62 = ptrtoint %class.TIntermNode** %61 to i64
  %63 = bitcast %class.TIntermNode** %60 to i64*
  store i64 %13, i64* %63, align 8
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %60, i64 1
  %65 = ptrtoint %class.TIntermNode** %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %67 = load %class.TIntermNode**, %class.TIntermNode*** %66, align 8
  %68 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %69 = icmp eq %class.TIntermNode** %68, %67
  br i1 %69, label %79, label %70

70:                                               ; preds = %57, %70
  %71 = phi %class.TIntermNode** [ %73, %70 ], [ %60, %57 ]
  %72 = phi %class.TIntermNode** [ %74, %70 ], [ %68, %57 ]
  %73 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %71, i64 -1
  %74 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %72, i64 -1
  %75 = bitcast %class.TIntermNode** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.TIntermNode** %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = icmp eq %class.TIntermNode** %74, %67
  br i1 %78, label %79, label %70

79:                                               ; preds = %70, %57
  %80 = phi %class.TIntermNode** [ %60, %57 ], [ %73, %70 ]
  %81 = ptrtoint %class.TIntermNode** %80 to i64
  store i64 %81, i64* %32, align 8
  store i64 %65, i64* %31, align 8
  store i64 %62, i64* %41, align 8
  br label %82

82:                                               ; preds = %24, %79
  %83 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 4
  %84 = load i8, i8* %83, align 1, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %109, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %class.TIntermSelection, %class.TIntermSelection* %0, i64 0, i32 3
  %88 = load %class.TIntermNode*, %class.TIntermNode** %87, align 8
  %89 = icmp eq %class.TIntermNode* %88, null
  br i1 %89, label %94, label %90

90:                                               ; preds = %86
  %91 = bitcast %class.TIntermNode* %88 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %92 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %91, align 8
  %93 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %92, align 8
  tail call void %93(%class.TIntermNode* nonnull %88, %class.TIntermTraverser* %1) #5
  br label %94

94:                                               ; preds = %86, %90
  %95 = getelementptr inbounds %class.TIntermSelection, %class.TIntermSelection* %0, i64 0, i32 2
  %96 = load %class.TIntermNode*, %class.TIntermNode** %95, align 8
  %97 = icmp eq %class.TIntermNode* %96, null
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = bitcast %class.TIntermNode* %96 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %100 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %99, align 8
  %101 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %100, align 8
  tail call void %101(%class.TIntermNode* nonnull %96, %class.TIntermTraverser* %1) #5
  br label %102

102:                                              ; preds = %94, %98
  %103 = getelementptr inbounds %class.TIntermSelection, %class.TIntermSelection* %0, i64 0, i32 1
  %104 = bitcast %class.TIntermTyped** %103 to %class.TIntermNode**
  %105 = load %class.TIntermNode*, %class.TIntermNode** %104, align 8
  %106 = bitcast %class.TIntermNode* %105 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %107 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %106, align 8
  %108 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %107, align 8
  tail call void %108(%class.TIntermNode* %105, %class.TIntermTraverser* %1) #5
  br label %131

109:                                              ; preds = %82
  %110 = getelementptr inbounds %class.TIntermSelection, %class.TIntermSelection* %0, i64 0, i32 1
  %111 = bitcast %class.TIntermTyped** %110 to %class.TIntermNode**
  %112 = load %class.TIntermNode*, %class.TIntermNode** %111, align 8
  %113 = bitcast %class.TIntermNode* %112 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %114 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %113, align 8
  %115 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %114, align 8
  tail call void %115(%class.TIntermNode* %112, %class.TIntermTraverser* %1) #5
  %116 = getelementptr inbounds %class.TIntermSelection, %class.TIntermSelection* %0, i64 0, i32 2
  %117 = load %class.TIntermNode*, %class.TIntermNode** %116, align 8
  %118 = icmp eq %class.TIntermNode* %117, null
  br i1 %118, label %123, label %119

119:                                              ; preds = %109
  %120 = bitcast %class.TIntermNode* %117 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %121 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %120, align 8
  %122 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %121, align 8
  tail call void %122(%class.TIntermNode* nonnull %117, %class.TIntermTraverser* %1) #5
  br label %123

123:                                              ; preds = %109, %119
  %124 = getelementptr inbounds %class.TIntermSelection, %class.TIntermSelection* %0, i64 0, i32 3
  %125 = load %class.TIntermNode*, %class.TIntermNode** %124, align 8
  %126 = icmp eq %class.TIntermNode* %125, null
  br i1 %126, label %131, label %127

127:                                              ; preds = %123
  %128 = bitcast %class.TIntermNode* %125 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %129 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %128, align 8
  %130 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %129, align 8
  tail call void %130(%class.TIntermNode* nonnull %125, %class.TIntermTraverser* %1) #5
  br label %131

131:                                              ; preds = %123, %127, %102
  %132 = load i32, i32* %14, align 4
  %133 = add nsw i32 %132, -1
  store i32 %133, i32* %14, align 4
  %134 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %135 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %134, i64 -1
  store %class.TIntermNode** %135, %class.TIntermNode*** %18, align 8
  %136 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %137 = load i8, i8* %136, align 2, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %145, label %139

139:                                              ; preds = %131
  %140 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)***
  %141 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)*** %140, align 8
  %142 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)** %141, i64 6
  %143 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSelection*)** %142, align 8
  %144 = tail call zeroext i1 %143(%class.TIntermTraverser* %1, i32 2, %class.TIntermSelection* %0) #5
  br label %145

145:                                              ; preds = %6, %131, %139
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN13TIntermSwitch8traverseEP16TIntermTraverser(%class.TIntermSwitch*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)** %8, i64 10
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermSwitch* %0) #5
  br i1 %11, label %12, label %110

12:                                               ; preds = %6, %2
  %13 = ptrtoint %class.TIntermSwitch* %0 to i64
  %14 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %19 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %20 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %class.TIntermNode**, %class.TIntermNode*** %20, align 8
  %22 = icmp eq %class.TIntermNode** %19, %21
  %23 = ptrtoint %class.TIntermNode** %21 to i64
  br i1 %22, label %29, label %24

24:                                               ; preds = %12
  %25 = bitcast %class.TIntermNode** %19 to i64*
  store i64 %13, i64* %25, align 8
  %26 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %19, i64 1
  %27 = ptrtoint %class.TIntermNode** %26 to i64
  %28 = bitcast %class.TIntermNode*** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %82

29:                                               ; preds = %12
  %30 = ptrtoint %class.TIntermNode** %19 to i64
  %31 = bitcast %class.TIntermNode*** %18 to i64*
  %32 = bitcast %"class.std::__1::vector.11"* %17 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #6
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %class.TIntermNode*** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %45, %40
  %51 = phi i64 [ %48, %45 ], [ 2305843009213693951, %40 ]
  %52 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %53 = load %class.TPoolAllocator*, %class.TPoolAllocator** %52, align 8
  %54 = shl i64 %51, 3
  %55 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %53, i64 %54) #5
  %56 = bitcast i8* %55 to %class.TIntermNode**
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i64 [ %51, %50 ], [ 0, %45 ]
  %59 = phi %class.TIntermNode** [ %56, %50 ], [ null, %45 ]
  %60 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %35
  %61 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %58
  %62 = ptrtoint %class.TIntermNode** %61 to i64
  %63 = bitcast %class.TIntermNode** %60 to i64*
  store i64 %13, i64* %63, align 8
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %60, i64 1
  %65 = ptrtoint %class.TIntermNode** %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %67 = load %class.TIntermNode**, %class.TIntermNode*** %66, align 8
  %68 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %69 = icmp eq %class.TIntermNode** %68, %67
  br i1 %69, label %79, label %70

70:                                               ; preds = %57, %70
  %71 = phi %class.TIntermNode** [ %73, %70 ], [ %60, %57 ]
  %72 = phi %class.TIntermNode** [ %74, %70 ], [ %68, %57 ]
  %73 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %71, i64 -1
  %74 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %72, i64 -1
  %75 = bitcast %class.TIntermNode** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.TIntermNode** %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = icmp eq %class.TIntermNode** %74, %67
  br i1 %78, label %79, label %70

79:                                               ; preds = %70, %57
  %80 = phi %class.TIntermNode** [ %60, %57 ], [ %73, %70 ]
  %81 = ptrtoint %class.TIntermNode** %80 to i64
  store i64 %81, i64* %32, align 8
  store i64 %65, i64* %31, align 8
  store i64 %62, i64* %41, align 8
  br label %82

82:                                               ; preds = %24, %79
  %83 = phi %class.TIntermNode** [ %19, %24 ], [ %60, %79 ]
  %84 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 2
  %85 = load i8, i8* %84, align 1, !range !2
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %97, label %87

87:                                               ; preds = %82
  %88 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)***
  %89 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*** %88, align 8
  %90 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)** %89, i64 10
  %91 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)** %90, align 8
  %92 = tail call zeroext i1 %91(%class.TIntermTraverser* %1, i32 1, %class.TIntermSwitch* %0) #5
  %93 = load i32, i32* %14, align 4
  %94 = add nsw i32 %93, -1
  store i32 %94, i32* %14, align 4
  %95 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %96 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %95, i64 -1
  store %class.TIntermNode** %96, %class.TIntermNode*** %18, align 8
  br i1 %92, label %100, label %110

97:                                               ; preds = %82
  %98 = load i32, i32* %14, align 4
  %99 = add nsw i32 %98, -1
  store i32 %99, i32* %14, align 4
  store %class.TIntermNode** %83, %class.TIntermNode*** %18, align 8
  br label %100

100:                                              ; preds = %87, %97
  %101 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %102 = load i8, i8* %101, align 2, !range !2
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %100
  %105 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)***
  %106 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*** %105, align 8
  %107 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)** %106, i64 10
  %108 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermSwitch*)** %107, align 8
  %109 = tail call zeroext i1 %108(%class.TIntermTraverser* %1, i32 2, %class.TIntermSwitch* %0) #5
  br label %110

110:                                              ; preds = %87, %6, %100, %104
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN11TIntermCase8traverseEP16TIntermTraverser(%class.TIntermCase*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)** %8, i64 11
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermCase* %0) #5
  br i1 %11, label %12, label %31

12:                                               ; preds = %2, %6
  %13 = getelementptr inbounds %class.TIntermCase, %class.TIntermCase* %0, i64 0, i32 1
  %14 = load %class.TIntermTyped*, %class.TIntermTyped** %13, align 8
  %15 = icmp eq %class.TIntermTyped* %14, null
  br i1 %15, label %21, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %14, i64 0, i32 0
  %18 = bitcast %class.TIntermTyped* %14 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %19 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %18, align 8
  %20 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %19, align 8
  tail call void %20(%class.TIntermNode* %17, %class.TIntermTraverser* %1) #5
  br label %21

21:                                               ; preds = %16, %12
  %22 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %23 = load i8, i8* %22, align 2, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %21
  %26 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)***
  %27 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)*** %26, align 8
  %28 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)** %27, i64 11
  %29 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermCase*)** %28, align 8
  %30 = tail call zeroext i1 %29(%class.TIntermTraverser* %1, i32 2, %class.TIntermCase* %0) #5
  br label %31

31:                                               ; preds = %6, %21, %25
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN11TIntermLoop8traverseEP16TIntermTraverser(%class.TIntermLoop*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)** %8, i64 8
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermLoop* %0) #5
  br i1 %11, label %12, label %152

12:                                               ; preds = %2, %6
  %13 = ptrtoint %class.TIntermLoop* %0 to i64
  %14 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = add nsw i32 %15, 1
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %19 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %20 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %21 = load %class.TIntermNode**, %class.TIntermNode*** %20, align 8
  %22 = icmp eq %class.TIntermNode** %19, %21
  %23 = ptrtoint %class.TIntermNode** %21 to i64
  br i1 %22, label %29, label %24

24:                                               ; preds = %12
  %25 = bitcast %class.TIntermNode** %19 to i64*
  store i64 %13, i64* %25, align 8
  %26 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %19, i64 1
  %27 = ptrtoint %class.TIntermNode** %26 to i64
  %28 = bitcast %class.TIntermNode*** %18 to i64*
  store i64 %27, i64* %28, align 8
  br label %82

29:                                               ; preds = %12
  %30 = ptrtoint %class.TIntermNode** %19 to i64
  %31 = bitcast %class.TIntermNode*** %18 to i64*
  %32 = bitcast %"class.std::__1::vector.11"* %17 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %30, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, 1
  %37 = icmp ugt i64 %36, 2305843009213693951
  br i1 %37, label %38, label %40

38:                                               ; preds = %29
  %39 = bitcast %"class.std::__1::vector.11"* %17 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %39) #6
  unreachable

40:                                               ; preds = %29
  %41 = bitcast %class.TIntermNode*** %20 to i64*
  %42 = sub i64 %23, %33
  %43 = ashr exact i64 %42, 3
  %44 = icmp ult i64 %43, 1152921504606846975
  br i1 %44, label %45, label %50

45:                                               ; preds = %40
  %46 = ashr exact i64 %42, 2
  %47 = icmp ult i64 %46, %36
  %48 = select i1 %47, i64 %36, i64 %46
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %57, label %50

50:                                               ; preds = %45, %40
  %51 = phi i64 [ %48, %45 ], [ 2305843009213693951, %40 ]
  %52 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %53 = load %class.TPoolAllocator*, %class.TPoolAllocator** %52, align 8
  %54 = shl i64 %51, 3
  %55 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %53, i64 %54) #5
  %56 = bitcast i8* %55 to %class.TIntermNode**
  br label %57

57:                                               ; preds = %50, %45
  %58 = phi i64 [ %51, %50 ], [ 0, %45 ]
  %59 = phi %class.TIntermNode** [ %56, %50 ], [ null, %45 ]
  %60 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %35
  %61 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %59, i64 %58
  %62 = ptrtoint %class.TIntermNode** %61 to i64
  %63 = bitcast %class.TIntermNode** %60 to i64*
  store i64 %13, i64* %63, align 8
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %60, i64 1
  %65 = ptrtoint %class.TIntermNode** %64 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %17, i64 0, i32 0, i32 0
  %67 = load %class.TIntermNode**, %class.TIntermNode*** %66, align 8
  %68 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %69 = icmp eq %class.TIntermNode** %68, %67
  br i1 %69, label %79, label %70

70:                                               ; preds = %57, %70
  %71 = phi %class.TIntermNode** [ %73, %70 ], [ %60, %57 ]
  %72 = phi %class.TIntermNode** [ %74, %70 ], [ %68, %57 ]
  %73 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %71, i64 -1
  %74 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %72, i64 -1
  %75 = bitcast %class.TIntermNode** %74 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %class.TIntermNode** %73 to i64*
  store i64 %76, i64* %77, align 8
  %78 = icmp eq %class.TIntermNode** %74, %67
  br i1 %78, label %79, label %70

79:                                               ; preds = %70, %57
  %80 = phi %class.TIntermNode** [ %60, %57 ], [ %73, %70 ]
  %81 = ptrtoint %class.TIntermNode** %80 to i64
  store i64 %81, i64* %32, align 8
  store i64 %65, i64* %31, align 8
  store i64 %62, i64* %41, align 8
  br label %82

82:                                               ; preds = %24, %79
  %83 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 4
  %84 = load i8, i8* %83, align 1, !range !2
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %112, label %86

86:                                               ; preds = %82
  %87 = getelementptr inbounds %class.TIntermLoop, %class.TIntermLoop* %0, i64 0, i32 5
  %88 = load %class.TIntermTyped*, %class.TIntermTyped** %87, align 8
  %89 = icmp eq %class.TIntermTyped* %88, null
  br i1 %89, label %95, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %88, i64 0, i32 0
  %92 = bitcast %class.TIntermTyped* %88 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %93 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %92, align 8
  %94 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %93, align 8
  tail call void %94(%class.TIntermNode* %91, %class.TIntermTraverser* %1) #5
  br label %95

95:                                               ; preds = %86, %90
  %96 = getelementptr inbounds %class.TIntermLoop, %class.TIntermLoop* %0, i64 0, i32 6
  %97 = load %class.TIntermNode*, %class.TIntermNode** %96, align 8
  %98 = icmp eq %class.TIntermNode* %97, null
  br i1 %98, label %103, label %99

99:                                               ; preds = %95
  %100 = bitcast %class.TIntermNode* %97 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %101 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %100, align 8
  %102 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %101, align 8
  tail call void %102(%class.TIntermNode* nonnull %97, %class.TIntermTraverser* %1) #5
  br label %103

103:                                              ; preds = %95, %99
  %104 = getelementptr inbounds %class.TIntermLoop, %class.TIntermLoop* %0, i64 0, i32 4
  %105 = load %class.TIntermTyped*, %class.TIntermTyped** %104, align 8
  %106 = icmp eq %class.TIntermTyped* %105, null
  br i1 %106, label %138, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %105, i64 0, i32 0
  %109 = bitcast %class.TIntermTyped* %105 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %110 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %109, align 8
  %111 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %110, align 8
  tail call void %111(%class.TIntermNode* %108, %class.TIntermTraverser* %1) #5
  br label %138

112:                                              ; preds = %82
  %113 = getelementptr inbounds %class.TIntermLoop, %class.TIntermLoop* %0, i64 0, i32 4
  %114 = load %class.TIntermTyped*, %class.TIntermTyped** %113, align 8
  %115 = icmp eq %class.TIntermTyped* %114, null
  br i1 %115, label %121, label %116

116:                                              ; preds = %112
  %117 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %114, i64 0, i32 0
  %118 = bitcast %class.TIntermTyped* %114 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %119 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %118, align 8
  %120 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %119, align 8
  tail call void %120(%class.TIntermNode* %117, %class.TIntermTraverser* %1) #5
  br label %121

121:                                              ; preds = %112, %116
  %122 = getelementptr inbounds %class.TIntermLoop, %class.TIntermLoop* %0, i64 0, i32 6
  %123 = load %class.TIntermNode*, %class.TIntermNode** %122, align 8
  %124 = icmp eq %class.TIntermNode* %123, null
  br i1 %124, label %129, label %125

125:                                              ; preds = %121
  %126 = bitcast %class.TIntermNode* %123 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %127 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %126, align 8
  %128 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %127, align 8
  tail call void %128(%class.TIntermNode* nonnull %123, %class.TIntermTraverser* %1) #5
  br label %129

129:                                              ; preds = %121, %125
  %130 = getelementptr inbounds %class.TIntermLoop, %class.TIntermLoop* %0, i64 0, i32 5
  %131 = load %class.TIntermTyped*, %class.TIntermTyped** %130, align 8
  %132 = icmp eq %class.TIntermTyped* %131, null
  br i1 %132, label %138, label %133

133:                                              ; preds = %129
  %134 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %131, i64 0, i32 0
  %135 = bitcast %class.TIntermTyped* %131 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %136 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %135, align 8
  %137 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %136, align 8
  tail call void %137(%class.TIntermNode* %134, %class.TIntermTraverser* %1) #5
  br label %138

138:                                              ; preds = %103, %129, %133, %107
  %139 = load i32, i32* %14, align 4
  %140 = add nsw i32 %139, -1
  store i32 %140, i32* %14, align 4
  %141 = load %class.TIntermNode**, %class.TIntermNode*** %18, align 8
  %142 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %141, i64 -1
  store %class.TIntermNode** %142, %class.TIntermNode*** %18, align 8
  %143 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %144 = load i8, i8* %143, align 2, !range !2
  %145 = icmp eq i8 %144, 0
  br i1 %145, label %152, label %146

146:                                              ; preds = %138
  %147 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)***
  %148 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)*** %147, align 8
  %149 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)** %148, i64 8
  %150 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermLoop*)** %149, align 8
  %151 = tail call zeroext i1 %150(%class.TIntermTraverser* %1, i32 2, %class.TIntermLoop* %0) #5
  br label %152

152:                                              ; preds = %6, %138, %146
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN13TIntermBranch8traverseEP16TIntermTraverser(%class.TIntermBranch*, %class.TIntermTraverser*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 1
  %4 = load i8, i8* %3, align 8, !range !2
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)***
  %8 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)*** %7, align 8
  %9 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)** %8, i64 9
  %10 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)** %9, align 8
  %11 = tail call zeroext i1 %10(%class.TIntermTraverser* %1, i32 0, %class.TIntermBranch* %0) #5
  br i1 %11, label %12, label %106

12:                                               ; preds = %2, %6
  %13 = getelementptr inbounds %class.TIntermBranch, %class.TIntermBranch* %0, i64 0, i32 2
  %14 = load %class.TIntermTyped*, %class.TIntermTyped** %13, align 8
  %15 = icmp eq %class.TIntermTyped* %14, null
  br i1 %15, label %96, label %16

16:                                               ; preds = %12
  %17 = ptrtoint %class.TIntermBranch* %0 to i64
  %18 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 5
  %19 = load i32, i32* %18, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %18, align 4
  %21 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0
  %22 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 1
  %23 = load %class.TIntermNode**, %class.TIntermNode*** %22, align 8
  %24 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = load %class.TIntermNode**, %class.TIntermNode*** %24, align 8
  %26 = icmp eq %class.TIntermNode** %23, %25
  %27 = ptrtoint %class.TIntermNode** %25 to i64
  br i1 %26, label %33, label %28

28:                                               ; preds = %16
  %29 = bitcast %class.TIntermNode** %23 to i64*
  store i64 %17, i64* %29, align 8
  %30 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %23, i64 1
  %31 = ptrtoint %class.TIntermNode** %30 to i64
  %32 = bitcast %class.TIntermNode*** %22 to i64*
  store i64 %31, i64* %32, align 8
  br label %86

33:                                               ; preds = %16
  %34 = ptrtoint %class.TIntermNode** %23 to i64
  %35 = bitcast %class.TIntermNode*** %22 to i64*
  %36 = bitcast %"class.std::__1::vector.11"* %21 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sub i64 %34, %37
  %39 = ashr exact i64 %38, 3
  %40 = add nsw i64 %39, 1
  %41 = icmp ugt i64 %40, 2305843009213693951
  br i1 %41, label %42, label %44

42:                                               ; preds = %33
  %43 = bitcast %"class.std::__1::vector.11"* %21 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %43) #6
  unreachable

44:                                               ; preds = %33
  %45 = bitcast %class.TIntermNode*** %24 to i64*
  %46 = sub i64 %27, %37
  %47 = ashr exact i64 %46, 3
  %48 = icmp ult i64 %47, 1152921504606846975
  br i1 %48, label %49, label %54

49:                                               ; preds = %44
  %50 = ashr exact i64 %46, 2
  %51 = icmp ult i64 %50, %40
  %52 = select i1 %51, i64 %40, i64 %50
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %61, label %54

54:                                               ; preds = %49, %44
  %55 = phi i64 [ %52, %49 ], [ 2305843009213693951, %44 ]
  %56 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 6, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %57 = load %class.TPoolAllocator*, %class.TPoolAllocator** %56, align 8
  %58 = shl i64 %55, 3
  %59 = tail call i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator* %57, i64 %58) #5
  %60 = bitcast i8* %59 to %class.TIntermNode**
  br label %61

61:                                               ; preds = %54, %49
  %62 = phi i64 [ %55, %54 ], [ 0, %49 ]
  %63 = phi %class.TIntermNode** [ %60, %54 ], [ null, %49 ]
  %64 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %63, i64 %39
  %65 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %63, i64 %62
  %66 = ptrtoint %class.TIntermNode** %65 to i64
  %67 = bitcast %class.TIntermNode** %64 to i64*
  store i64 %17, i64* %67, align 8
  %68 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %64, i64 1
  %69 = ptrtoint %class.TIntermNode** %68 to i64
  %70 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %21, i64 0, i32 0, i32 0
  %71 = load %class.TIntermNode**, %class.TIntermNode*** %70, align 8
  %72 = load %class.TIntermNode**, %class.TIntermNode*** %22, align 8
  %73 = icmp eq %class.TIntermNode** %72, %71
  br i1 %73, label %83, label %74

74:                                               ; preds = %61, %74
  %75 = phi %class.TIntermNode** [ %77, %74 ], [ %64, %61 ]
  %76 = phi %class.TIntermNode** [ %78, %74 ], [ %72, %61 ]
  %77 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %75, i64 -1
  %78 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %76, i64 -1
  %79 = bitcast %class.TIntermNode** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = bitcast %class.TIntermNode** %77 to i64*
  store i64 %80, i64* %81, align 8
  %82 = icmp eq %class.TIntermNode** %78, %71
  br i1 %82, label %83, label %74

83:                                               ; preds = %74, %61
  %84 = phi %class.TIntermNode** [ %64, %61 ], [ %77, %74 ]
  %85 = ptrtoint %class.TIntermNode** %84 to i64
  store i64 %85, i64* %36, align 8
  store i64 %69, i64* %35, align 8
  store i64 %66, i64* %45, align 8
  br label %86

86:                                               ; preds = %83, %28
  %87 = bitcast %class.TIntermTyped** %13 to %class.TIntermNode**
  %88 = load %class.TIntermNode*, %class.TIntermNode** %87, align 8
  %89 = bitcast %class.TIntermNode* %88 to void (%class.TIntermNode*, %class.TIntermTraverser*)***
  %90 = load void (%class.TIntermNode*, %class.TIntermTraverser*)**, void (%class.TIntermNode*, %class.TIntermTraverser*)*** %89, align 8
  %91 = load void (%class.TIntermNode*, %class.TIntermTraverser*)*, void (%class.TIntermNode*, %class.TIntermTraverser*)** %90, align 8
  tail call void %91(%class.TIntermNode* %88, %class.TIntermTraverser* %1) #5
  %92 = load i32, i32* %18, align 4
  %93 = add nsw i32 %92, -1
  store i32 %93, i32* %18, align 4
  %94 = load %class.TIntermNode**, %class.TIntermNode*** %22, align 8
  %95 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %94, i64 -1
  store %class.TIntermNode** %95, %class.TIntermNode*** %22, align 8
  br label %96

96:                                               ; preds = %86, %12
  %97 = getelementptr inbounds %class.TIntermTraverser, %class.TIntermTraverser* %1, i64 0, i32 3
  %98 = load i8, i8* %97, align 2, !range !2
  %99 = icmp eq i8 %98, 0
  br i1 %99, label %106, label %100

100:                                              ; preds = %96
  %101 = bitcast %class.TIntermTraverser* %1 to i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)***
  %102 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)**, i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)*** %101, align 8
  %103 = getelementptr inbounds i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)** %102, i64 9
  %104 = load i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)*, i1 (%class.TIntermTraverser*, i32, %class.TIntermBranch*)** %103, align 8
  %105 = tail call zeroext i1 %104(%class.TIntermTraverser* %1, i32 2, %class.TIntermBranch* %0) #5
  br label %106

106:                                              ; preds = %6, %96, %100
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermTyped* @_ZN11TIntermNode10getAsTypedEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermTyped* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermConstantUnion* @_ZN11TIntermNode18getAsConstantUnionEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermConstantUnion* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermAggregate* @_ZN11TIntermNode14getAsAggregateEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermAggregate* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermBinary* @_ZN11TIntermNode15getAsBinaryNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermBinary* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermUnary* @_ZN11TIntermNode14getAsUnaryNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermUnary* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermSelection* @_ZN11TIntermNode18getAsSelectionNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermSelection* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermSymbol* @_ZN11TIntermNode15getAsSymbolNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermSymbol* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermLoop* @_ZN11TIntermLoop13getAsLoopNodeEv(%class.TIntermLoop*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermLoop* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermBranch* @_ZN11TIntermNode15getAsBranchNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermBranch* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermSwitch* @_ZN11TIntermNode15getAsSwitchNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermSwitch* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermCase* @_ZN11TIntermNode13getAsCaseNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermCase* null
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN11TIntermLoopD0Ev(%class.TIntermLoop*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermLoop* @_ZN11TIntermNode13getAsLoopNodeEv(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermLoop* null
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermBranch* @_ZN13TIntermBranch15getAsBranchNodeEv(%class.TIntermBranch*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermBranch* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TIntermBranchD0Ev(%class.TIntermBranch*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermTyped* @_ZN12TIntermTyped10getAsTypedEv(%class.TIntermTyped*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermTyped* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermSymbol* @_ZN13TIntermSymbol15getAsSymbolNodeEv(%class.TIntermSymbol*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermSymbol* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TIntermSymbolD2Ev(%class.TIntermSymbol*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %class.TIntermSymbol, %class.TIntermSymbol* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV13TIntermSymbol, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TIntermSymbolD0Ev(%class.TIntermSymbol*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %class.TIntermSymbol, %class.TIntermSymbol* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV13TIntermSymbol, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN12TIntermTyped7setTypeERK5TType(%class.TIntermTyped*, %class.TType* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %0, i64 0, i32 1, i32 0
  %4 = getelementptr inbounds %class.TType, %class.TType* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermConstantUnion* @_ZN20TIntermConstantUnion18getAsConstantUnionEv(%class.TIntermConstantUnion*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermConstantUnion* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN20TIntermConstantUnionD0Ev(%class.TIntermConstantUnion*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermBinary* @_ZN13TIntermBinary15getAsBinaryNodeEv(%class.TIntermBinary*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermBinary* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TIntermBinaryD0Ev(%class.TIntermBinary*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TIntermBinary7setTypeERK5TType(%class.TIntermBinary*, %class.TType* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = getelementptr inbounds %class.TType, %class.TType* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  %5 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 1
  %6 = load %class.TIntermTyped*, %class.TIntermTyped** %5, align 8
  %7 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %6, i64 0, i32 1, i32 2
  %8 = load i8, i8* %7, align 2
  %9 = icmp eq i8 %8, 2
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 2
  %12 = load %class.TIntermTyped*, %class.TIntermTyped** %11, align 8
  %13 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %12, i64 0, i32 1, i32 2
  %14 = load i8, i8* %13, align 2
  %15 = icmp eq i8 %14, 2
  br i1 %15, label %16, label %18

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.TIntermBinary, %class.TIntermBinary* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i8 2, i8* %17, align 2
  br label %18

18:                                               ; preds = %16, %10, %2
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermUnary* @_ZN12TIntermUnary14getAsUnaryNodeEv(%class.TIntermUnary*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermUnary* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN12TIntermUnaryD0Ev(%class.TIntermUnary*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN12TIntermUnary7setTypeERK5TType(%class.TIntermUnary*, %class.TType* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.TIntermUnary, %class.TIntermUnary* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = getelementptr inbounds %class.TType, %class.TType* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  %5 = getelementptr inbounds %class.TIntermUnary, %class.TIntermUnary* %0, i64 0, i32 1
  %6 = load %class.TIntermTyped*, %class.TIntermTyped** %5, align 8
  %7 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %6, i64 0, i32 1, i32 2
  %8 = load i8, i8* %7, align 2
  %9 = icmp eq i8 %8, 2
  br i1 %9, label %10, label %12

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.TIntermUnary, %class.TIntermUnary* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i8 2, i8* %11, align 2
  br label %12

12:                                               ; preds = %10, %2
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermAggregate* @_ZN16TIntermAggregate14getAsAggregateEv(%class.TIntermAggregate*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermAggregate* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN16TIntermAggregateD2Ev(%class.TIntermAggregate*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV16TIntermAggregate, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.TIntermNode**, %class.TIntermNode*** %3, align 8
  %5 = icmp eq %class.TIntermNode** %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %class.TIntermNode** %4 to i64
  %8 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %class.TIntermNode*** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN16TIntermAggregateD0Ev(%class.TIntermAggregate*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [17 x i8*] }, { [17 x i8*] }* @_ZTV16TIntermAggregate, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %class.TIntermNode**, %class.TIntermNode*** %3, align 8
  %5 = icmp eq %class.TIntermNode** %4, null
  br i1 %5, label %10, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %class.TIntermNode** %4 to i64
  %8 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %9 = bitcast %class.TIntermNode*** %8 to i64*
  store i64 %7, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN16TIntermAggregate7setTypeERK5TType(%class.TIntermAggregate*, %class.TType* dereferenceable(64)) unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %4 = getelementptr inbounds %class.TType, %class.TType* %1, i64 0, i32 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false)
  %5 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 2
  br i1 %7, label %36, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %10 = load %class.TIntermNode**, %class.TIntermNode*** %9, align 8
  %11 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %12 = load %class.TIntermNode**, %class.TIntermNode*** %11, align 8
  %13 = icmp eq %class.TIntermNode** %10, %12
  br i1 %13, label %34, label %16

14:                                               ; preds = %25
  %15 = icmp eq %class.TIntermNode** %33, %12
  br i1 %15, label %34, label %16

16:                                               ; preds = %8, %14
  %17 = phi %class.TIntermNode** [ %33, %14 ], [ %10, %8 ]
  %18 = load %class.TIntermNode*, %class.TIntermNode** %17, align 8
  %19 = bitcast %class.TIntermNode* %18 to %class.TIntermTyped* (%class.TIntermNode*)***
  %20 = load %class.TIntermTyped* (%class.TIntermNode*)**, %class.TIntermTyped* (%class.TIntermNode*)*** %19, align 8
  %21 = getelementptr inbounds %class.TIntermTyped* (%class.TIntermNode*)*, %class.TIntermTyped* (%class.TIntermNode*)** %20, i64 1
  %22 = load %class.TIntermTyped* (%class.TIntermNode*)*, %class.TIntermTyped* (%class.TIntermNode*)** %21, align 8
  %23 = tail call %class.TIntermTyped* %22(%class.TIntermNode* %18) #5
  %24 = icmp eq %class.TIntermTyped* %23, null
  br i1 %24, label %36, label %25

25:                                               ; preds = %16
  %26 = load %class.TIntermTyped* (%class.TIntermNode*)**, %class.TIntermTyped* (%class.TIntermNode*)*** %19, align 8
  %27 = getelementptr inbounds %class.TIntermTyped* (%class.TIntermNode*)*, %class.TIntermTyped* (%class.TIntermNode*)** %26, i64 1
  %28 = load %class.TIntermTyped* (%class.TIntermNode*)*, %class.TIntermTyped* (%class.TIntermNode*)** %27, align 8
  %29 = tail call %class.TIntermTyped* %28(%class.TIntermNode* %18) #5
  %30 = getelementptr inbounds %class.TIntermTyped, %class.TIntermTyped* %29, i64 0, i32 1, i32 2
  %31 = load i8, i8* %30, align 2
  %32 = icmp eq i8 %31, 2
  %33 = getelementptr inbounds %class.TIntermNode*, %class.TIntermNode** %17, i64 1
  br i1 %32, label %14, label %36

34:                                               ; preds = %14, %8
  %35 = getelementptr inbounds %class.TIntermAggregate, %class.TIntermAggregate* %0, i64 0, i32 0, i32 0, i32 1, i32 2
  store i8 2, i8* %35, align 2
  br label %36

36:                                               ; preds = %25, %16, %2, %34
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermSelection* @_ZN16TIntermSelection18getAsSelectionNodeEv(%class.TIntermSelection*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermSelection* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN16TIntermSelectionD0Ev(%class.TIntermSelection*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermSwitch* @_ZN13TIntermSwitch15getAsSwitchNodeEv(%class.TIntermSwitch*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermSwitch* %0
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN11TIntermNodeD2Ev(%class.TIntermNode*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN13TIntermSwitchD0Ev(%class.TIntermSwitch*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden %class.TIntermCase* @_ZN11TIntermCase13getAsCaseNodeEv(%class.TIntermCase*) unnamed_addr #0 comdat align 2 {
  ret %class.TIntermCase* %0
}

; Function Attrs: inlinehint nounwind optsize ssp uwtable
define linkonce_odr hidden void @_ZN11TIntermCaseD0Ev(%class.TIntermCase*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: noreturn optsize
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: optsize
declare i8* @_ZN14TPoolAllocator8allocateEm(%class.TPoolAllocator*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind optsize }
attributes #6 = { noreturn nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
