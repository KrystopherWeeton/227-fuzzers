; ModuleID = '../../third_party/swiftshader/third_party/astc-encoder/Source/astc_partition_tables.cpp'
source_filename = "../../third_party/swiftshader/third_party/astc-encoder/Source/astc_partition_tables.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.block_size_descriptor = type { i32, i32, i32, i32, i32, [87 x %struct.decimation_table*], [2048 x %struct.block_mode], [3073 x %struct.partition_info] }
%struct.decimation_table = type { i32, [216 x i8], [216 x [4 x i8]], [216 x [4 x i8]] }
%struct.block_mode = type { i8, i8, i8, i8 }
%struct.partition_info = type { i32, [216 x i8] }

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_Z21init_partition_tablesP21block_size_descriptor(%struct.block_size_descriptor* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 7, i64 1024
  %3 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 7, i64 2048
  %4 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 7, i64 3072
  tail call fastcc void @_ZL28generate_one_partition_tablePK21block_size_descriptoriiP14partition_info(%struct.block_size_descriptor* %0, i32 1, i32 0, %struct.partition_info* %4) #4
  br label %11

5:                                                ; preds = %11
  %6 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 7, i64 0
  %7 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  tail call fastcc void @_ZL34partition_table_zap_equal_elementsiP14partition_info(i32 %8, %struct.partition_info* %6) #4
  %9 = load i32, i32* %7, align 4
  tail call fastcc void @_ZL34partition_table_zap_equal_elementsiP14partition_info(i32 %9, %struct.partition_info* %2) #4
  %10 = load i32, i32* %7, align 4
  tail call fastcc void @_ZL34partition_table_zap_equal_elementsiP14partition_info(i32 %10, %struct.partition_info* %3) #4
  ret void

11:                                               ; preds = %11, %1
  %12 = phi i64 [ 0, %1 ], [ %17, %11 ]
  %13 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 7, i64 %12
  %14 = trunc i64 %12 to i32
  tail call fastcc void @_ZL28generate_one_partition_tablePK21block_size_descriptoriiP14partition_info(%struct.block_size_descriptor* %0, i32 2, i32 %14, %struct.partition_info* %13) #4
  %15 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %2, i64 %12
  tail call fastcc void @_ZL28generate_one_partition_tablePK21block_size_descriptoriiP14partition_info(%struct.block_size_descriptor* %0, i32 3, i32 %14, %struct.partition_info* %15) #4
  %16 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 %12
  tail call fastcc void @_ZL28generate_one_partition_tablePK21block_size_descriptoriiP14partition_info(%struct.block_size_descriptor* %0, i32 4, i32 %14, %struct.partition_info* %16) #4
  %17 = add nuw nsw i64 %12, 1
  %18 = icmp eq i64 %17, 1024
  br i1 %18, label %5, label %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZL28generate_one_partition_tablePK21block_size_descriptoriiP14partition_info(%struct.block_size_descriptor* nocapture readonly, i32, i32, %struct.partition_info* nocapture) unnamed_addr #0 {
  %5 = alloca [4 x i32], align 16
  %6 = bitcast [4 x i32]* %5 to i8*
  %7 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %191

12:                                               ; preds = %4
  %13 = icmp slt i32 %8, 32
  %14 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 0, i32 1, i64 0
  %15 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 1
  %16 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %0, i64 0, i32 0
  %17 = shl i32 %1, 10
  %18 = add i32 %2, -1024
  %19 = add i32 %18, %17
  %20 = lshr i32 %19, 15
  %21 = xor i32 %20, %19
  %22 = mul i32 %21, -287438703
  %23 = lshr i32 %22, 5
  %24 = xor i32 %23, %22
  %25 = mul i32 %24, 65537
  %26 = lshr i32 %25, 7
  %27 = xor i32 %26, %25
  %28 = lshr i32 %27, 3
  %29 = xor i32 %28, %27
  %30 = shl i32 %29, 6
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 17
  %33 = xor i32 %32, %31
  %34 = and i32 %33, 15
  %35 = lshr i32 %33, 4
  %36 = and i32 %35, 15
  %37 = lshr i32 %33, 8
  %38 = and i32 %37, 15
  %39 = lshr i32 %33, 12
  %40 = and i32 %39, 15
  %41 = lshr i32 %31, 16
  %42 = and i32 %41, 15
  %43 = lshr i32 %31, 20
  %44 = and i32 %43, 15
  %45 = lshr i32 %31, 24
  %46 = and i32 %45, 15
  %47 = lshr i32 %31, 28
  %48 = lshr i32 %31, 18
  %49 = and i32 %48, 15
  %50 = lshr i32 %31, 22
  %51 = and i32 %50, 15
  %52 = lshr i32 %31, 26
  %53 = and i32 %52, 15
  %54 = lshr i32 %31, 30
  %55 = shl i32 %33, 2
  %56 = and i32 %55, 12
  %57 = or i32 %56, %54
  %58 = mul nuw nsw i32 %34, %34
  %59 = mul nuw nsw i32 %36, %36
  %60 = mul nuw nsw i32 %38, %38
  %61 = mul nuw nsw i32 %40, %40
  %62 = mul nuw nsw i32 %42, %42
  %63 = mul nuw nsw i32 %44, %44
  %64 = mul nuw nsw i32 %46, %46
  %65 = mul nuw nsw i32 %47, %47
  %66 = mul nuw nsw i32 %49, %49
  %67 = mul nuw nsw i32 %51, %51
  %68 = mul nuw nsw i32 %53, %53
  %69 = mul nuw nsw i32 %57, %57
  %70 = and i32 %19, 1
  %71 = icmp eq i32 %70, 0
  %72 = and i32 %19, 2
  %73 = icmp eq i32 %72, 0
  %74 = select i1 %73, i32 5, i32 4
  %75 = icmp eq i32 %1, 3
  %76 = select i1 %75, i32 6, i32 5
  %77 = and i32 %19, 16
  %78 = icmp eq i32 %77, 0
  %79 = lshr i32 %33, 14
  %80 = lshr i32 %33, 10
  %81 = lshr i32 %33, 6
  %82 = lshr i32 %33, 2
  %83 = icmp slt i32 %1, 4
  %84 = icmp slt i32 %1, 3
  %85 = icmp slt i32 %1, 2
  %86 = load i32, i32* %15, align 4
  %87 = zext i1 %13 to i32
  %88 = select i1 %71, i32 %76, i32 %74
  %89 = select i1 %71, i32 %74, i32 %76
  %90 = select i1 %78, i32 %89, i32 %88
  %91 = lshr i32 %58, %88
  %92 = lshr i32 %59, %89
  %93 = lshr i32 %60, %88
  %94 = lshr i32 %61, %89
  %95 = lshr i32 %62, %88
  %96 = lshr i32 %63, %89
  %97 = lshr i32 %64, %88
  %98 = lshr i32 %65, %89
  %99 = lshr i32 %66, %90
  %100 = lshr i32 %67, %90
  %101 = lshr i32 %68, %90
  %102 = lshr i32 %69, %90
  br label %103

103:                                              ; preds = %12, %184
  %104 = phi i32 [ %10, %12 ], [ %185, %184 ]
  %105 = phi i32 [ %86, %12 ], [ %186, %184 ]
  %106 = phi i32 [ %86, %12 ], [ %187, %184 ]
  %107 = phi i32 [ 0, %12 ], [ %189, %184 ]
  %108 = phi i8* [ %14, %12 ], [ %188, %184 ]
  %109 = icmp sgt i32 %106, 0
  br i1 %109, label %110, label %184

110:                                              ; preds = %103
  %111 = load i32, i32* %16, align 8
  %112 = shl nuw i32 %107, %87
  %113 = mul nsw i32 %101, %112
  %114 = mul nsw i32 %102, %112
  %115 = mul nsw i32 %99, %112
  %116 = mul nsw i32 %100, %112
  br label %117

117:                                              ; preds = %110, %176
  %118 = phi i32 [ %105, %110 ], [ %177, %176 ]
  %119 = phi i32 [ %111, %110 ], [ %178, %176 ]
  %120 = phi i32 [ 0, %110 ], [ %180, %176 ]
  %121 = phi i8* [ %108, %110 ], [ %179, %176 ]
  %122 = icmp sgt i32 %119, 0
  br i1 %122, label %123, label %176

123:                                              ; preds = %117
  %124 = shl nuw i32 %120, %87
  %125 = mul nsw i32 %92, %124
  %126 = mul nsw i32 %94, %124
  %127 = mul nsw i32 %96, %124
  %128 = mul nsw i32 %98, %124
  br label %129

129:                                              ; preds = %123, %168
  %130 = phi i32 [ 0, %123 ], [ %171, %168 ]
  %131 = phi i8* [ %121, %123 ], [ %170, %168 ]
  %132 = shl nuw i32 %130, %87
  %133 = mul nsw i32 %91, %132
  %134 = add i32 %133, %79
  %135 = add i32 %134, %125
  %136 = add i32 %135, %113
  %137 = mul nsw i32 %93, %132
  %138 = add i32 %137, %80
  %139 = add i32 %138, %126
  %140 = add i32 %139, %114
  %141 = mul nsw i32 %95, %132
  %142 = add i32 %141, %81
  %143 = add i32 %142, %127
  %144 = add i32 %143, %115
  %145 = mul nsw i32 %97, %132
  %146 = add i32 %145, %82
  %147 = add i32 %146, %128
  %148 = add i32 %147, %116
  %149 = and i32 %136, 63
  %150 = and i32 %140, 63
  %151 = and i32 %144, 63
  %152 = and i32 %148, 63
  %153 = select i1 %83, i32 0, i32 %152
  %154 = select i1 %84, i32 0, i32 %151
  %155 = select i1 %85, i32 0, i32 %150
  %156 = icmp ult i32 %149, %155
  %157 = icmp ult i32 %149, %154
  %158 = or i1 %156, %157
  %159 = icmp ult i32 %149, %153
  %160 = or i1 %159, %158
  br i1 %160, label %161, label %168

161:                                              ; preds = %129
  %162 = icmp ult i32 %155, %154
  %163 = icmp ult i32 %155, %153
  %164 = or i1 %162, %163
  br i1 %164, label %165, label %168

165:                                              ; preds = %161
  %166 = icmp ult i32 %154, %153
  %167 = select i1 %166, i8 3, i8 2
  br label %168

168:                                              ; preds = %129, %161, %165
  %169 = phi i8 [ 0, %129 ], [ 1, %161 ], [ %167, %165 ]
  %170 = getelementptr inbounds i8, i8* %131, i64 1
  store i8 %169, i8* %131, align 1
  %171 = add nuw nsw i32 %130, 1
  %172 = load i32, i32* %16, align 8
  %173 = icmp slt i32 %171, %172
  br i1 %173, label %129, label %174

174:                                              ; preds = %168
  %175 = load i32, i32* %15, align 4
  br label %176

176:                                              ; preds = %174, %117
  %177 = phi i32 [ %118, %117 ], [ %175, %174 ]
  %178 = phi i32 [ %119, %117 ], [ %172, %174 ]
  %179 = phi i8* [ %121, %117 ], [ %170, %174 ]
  %180 = add nuw nsw i32 %120, 1
  %181 = icmp slt i32 %180, %177
  br i1 %181, label %117, label %182

182:                                              ; preds = %176
  %183 = load i32, i32* %9, align 8
  br label %184

184:                                              ; preds = %182, %103
  %185 = phi i32 [ %104, %103 ], [ %183, %182 ]
  %186 = phi i32 [ %105, %103 ], [ %177, %182 ]
  %187 = phi i32 [ %106, %103 ], [ %177, %182 ]
  %188 = phi i8* [ %108, %103 ], [ %179, %182 ]
  %189 = add nuw nsw i32 %107, 1
  %190 = icmp slt i32 %189, %185
  br i1 %190, label %103, label %191

191:                                              ; preds = %184, %4
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %192 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 0
  %193 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 1
  %194 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 2
  %195 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 16, i1 false)
  %196 = icmp sgt i32 %8, 0
  br i1 %196, label %197, label %212

197:                                              ; preds = %191
  %198 = zext i32 %8 to i64
  br label %199

199:                                              ; preds = %199, %197
  %200 = phi i64 [ 0, %197 ], [ %207, %199 ]
  %201 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 0, i32 1, i64 %200
  %202 = load i8, i8* %201, align 1
  %203 = zext i8 %202 to i64
  %204 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %203
  %205 = load i32, i32* %204, align 4
  %206 = add nsw i32 %205, 1
  store i32 %206, i32* %204, align 4
  %207 = add nuw nsw i64 %200, 1
  %208 = icmp eq i64 %207, %198
  br i1 %208, label %209, label %199

209:                                              ; preds = %199
  %210 = load i32, i32* %192, align 16
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %214

212:                                              ; preds = %191, %209
  %213 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 0, i32 0
  store i32 0, i32* %213, align 4
  br label %230

214:                                              ; preds = %209
  %215 = load i32, i32* %193, align 4
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %219

217:                                              ; preds = %214
  %218 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 0, i32 0
  store i32 1, i32* %218, align 4
  br label %230

219:                                              ; preds = %214
  %220 = load i32, i32* %194, align 8
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %224

222:                                              ; preds = %219
  %223 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 0, i32 0
  store i32 2, i32* %223, align 4
  br label %230

224:                                              ; preds = %219
  %225 = load i32, i32* %195, align 4
  %226 = icmp eq i32 %225, 0
  %227 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %3, i64 0, i32 0
  br i1 %226, label %228, label %229

228:                                              ; preds = %224
  store i32 3, i32* %227, align 4
  br label %230

229:                                              ; preds = %224
  store i32 4, i32* %227, align 4
  br label %230

230:                                              ; preds = %217, %228, %229, %222, %212
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind optsize ssp uwtable
define internal fastcc void @_ZL34partition_table_zap_equal_elementsiP14partition_info(i32, %struct.partition_info* nocapture) unnamed_addr #0 {
  %3 = alloca [4 x i32], align 16
  %4 = tail call i8* @_Znam(i64 57344) #6
  %5 = bitcast i8* %4 to i64*
  %6 = bitcast [4 x i32]* %3 to i8*
  %7 = icmp sgt i32 %0, 0
  %8 = zext i32 %0 to i64
  br label %9

9:                                                ; preds = %39, %2
  %10 = phi i64 [ 0, %2 ], [ %40, %39 ]
  %11 = mul nuw nsw i64 %10, 7
  %12 = getelementptr inbounds i64, i64* %5, i64 %11
  %13 = bitcast i64* %12 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 56, i1 false) #5
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -1, i64 16, i1 false) #5
  br i1 %7, label %14, label %39

14:                                               ; preds = %9, %25
  %15 = phi i64 [ %37, %25 ], [ 0, %9 ]
  %16 = phi i32 [ %27, %25 ], [ 0, %9 ]
  %17 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %1, i64 %10, i32 1, i64 %15
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i64
  %20 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, -1
  br i1 %22, label %23, label %25

23:                                               ; preds = %14
  %24 = add nsw i32 %16, 1
  store i32 %16, i32* %20, align 4
  br label %25

25:                                               ; preds = %23, %14
  %26 = phi i32 [ %16, %23 ], [ %21, %14 ]
  %27 = phi i32 [ %24, %23 ], [ %16, %14 ]
  %28 = sext i32 %26 to i64
  %29 = shl nuw i64 %15, 1
  %30 = and i64 %29, 62
  %31 = shl i64 %28, %30
  %32 = lshr i64 %15, 5
  %33 = and i64 %32, 134217727
  %34 = getelementptr inbounds i64, i64* %12, i64 %33
  %35 = load i64, i64* %34, align 8
  %36 = or i64 %31, %35
  store i64 %36, i64* %34, align 8
  %37 = add nuw nsw i64 %15, 1
  %38 = icmp eq i64 %37, %8
  br i1 %38, label %39, label %14

39:                                               ; preds = %25, %9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  %40 = add nuw nsw i64 %10, 1
  %41 = icmp eq i64 %40, 1024
  br i1 %41, label %42, label %9

42:                                               ; preds = %39, %96
  %43 = phi i64 [ %97, %96 ], [ 0, %39 ]
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %96, label %45

45:                                               ; preds = %42
  %46 = mul nuw nsw i64 %43, 7
  %47 = getelementptr inbounds i64, i64* %5, i64 %46
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 1
  %50 = getelementptr inbounds i64, i64* %47, i64 2
  %51 = getelementptr inbounds i64, i64* %47, i64 3
  %52 = getelementptr inbounds i64, i64* %47, i64 4
  %53 = getelementptr inbounds i64, i64* %47, i64 5
  %54 = getelementptr inbounds i64, i64* %47, i64 6
  br label %55

55:                                               ; preds = %93, %45
  %56 = phi i64 [ 0, %45 ], [ %94, %93 ]
  %57 = mul nuw nsw i64 %56, 7
  %58 = getelementptr inbounds i64, i64* %5, i64 %57
  %59 = load i64, i64* %58, align 8
  %60 = icmp eq i64 %48, %59
  br i1 %60, label %61, label %93

61:                                               ; preds = %55
  %62 = load i64, i64* %49, align 8
  %63 = getelementptr inbounds i64, i64* %58, i64 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp eq i64 %62, %64
  br i1 %65, label %66, label %93

66:                                               ; preds = %61
  %67 = load i64, i64* %50, align 8
  %68 = getelementptr inbounds i64, i64* %58, i64 2
  %69 = load i64, i64* %68, align 8
  %70 = icmp eq i64 %67, %69
  br i1 %70, label %71, label %93

71:                                               ; preds = %66
  %72 = load i64, i64* %51, align 8
  %73 = getelementptr inbounds i64, i64* %58, i64 3
  %74 = load i64, i64* %73, align 8
  %75 = icmp eq i64 %72, %74
  br i1 %75, label %76, label %93

76:                                               ; preds = %71
  %77 = load i64, i64* %52, align 8
  %78 = getelementptr inbounds i64, i64* %58, i64 4
  %79 = load i64, i64* %78, align 8
  %80 = icmp eq i64 %77, %79
  br i1 %80, label %81, label %93

81:                                               ; preds = %76
  %82 = load i64, i64* %53, align 8
  %83 = getelementptr inbounds i64, i64* %58, i64 5
  %84 = load i64, i64* %83, align 8
  %85 = icmp eq i64 %82, %84
  br i1 %85, label %86, label %93

86:                                               ; preds = %81
  %87 = load i64, i64* %54, align 8
  %88 = getelementptr inbounds i64, i64* %58, i64 6
  %89 = load i64, i64* %88, align 8
  %90 = icmp eq i64 %87, %89
  br i1 %90, label %91, label %93

91:                                               ; preds = %86
  %92 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %1, i64 %43, i32 0
  store i32 0, i32* %92, align 4
  br label %96

93:                                               ; preds = %86, %81, %76, %71, %66, %61, %55
  %94 = add nuw nsw i64 %56, 1
  %95 = icmp eq i64 %94, %43
  br i1 %95, label %96, label %55

96:                                               ; preds = %93, %42, %91
  %97 = add nuw nsw i64 %43, 1
  %98 = icmp eq i64 %97, 1024
  br i1 %98, label %99, label %42

99:                                               ; preds = %96
  tail call void @_ZdaPv(i8* nonnull %4) #6
  ret void
}

; Function Attrs: nobuiltin nofree optsize
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind optsize
declare void @_ZdaPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nobuiltin nofree optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { optsize }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind optsize }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
