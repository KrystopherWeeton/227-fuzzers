; ModuleID = '../../cc/layers/append_quads_data.cc'
source_filename = "../../cc/layers/append_quads_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::AppendQuadsData" = type { i64, i64, i64, i64, i64, i64, i64, %"class.absl::optional", i8, %"class.std::__1::vector" }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"*, %"class.std::__1::__compressed_pair" }
%"class.viz::SurfaceId" = type { %"class.viz::FrameSinkId", %"class.viz::LocalSurfaceId" }
%"class.viz::FrameSinkId" = type { i32, i32 }
%"class.viz::LocalSurfaceId" = type { i32, i32, %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.viz::SurfaceId"* }

@_ZN2cc15AppendQuadsDataC1Ev = hidden unnamed_addr alias void (%"class.cc::AppendQuadsData"*), void (%"class.cc::AppendQuadsData"*)* @_ZN2cc15AppendQuadsDataC2Ev
@_ZN2cc15AppendQuadsDataD1Ev = hidden unnamed_addr alias void (%"class.cc::AppendQuadsData"*), void (%"class.cc::AppendQuadsData"*)* @_ZN2cc15AppendQuadsDataD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc15AppendQuadsDataC2Ev(%"class.cc::AppendQuadsData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::AppendQuadsData", %"class.cc::AppendQuadsData"* %0, i64 0, i32 8
  store i8 0, i8* %2, align 8
  %3 = getelementptr inbounds %"class.cc::AppendQuadsData", %"class.cc::AppendQuadsData"* %0, i64 0, i32 9
  %4 = bitcast %"class.std::__1::vector"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #3
  %5 = bitcast %"class.cc::AppendQuadsData"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 57, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc15AppendQuadsDataD2Ev(%"class.cc::AppendQuadsData"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::AppendQuadsData", %"class.cc::AppendQuadsData"* %0, i64 0, i32 9, i32 0, i32 0
  %3 = load %"class.viz::SurfaceId"*, %"class.viz::SurfaceId"** %2, align 8
  %4 = icmp eq %"class.viz::SurfaceId"* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %"class.viz::SurfaceId"* %3 to i64
  %7 = getelementptr inbounds %"class.cc::AppendQuadsData", %"class.cc::AppendQuadsData"* %0, i64 0, i32 9, i32 0, i32 1
  %8 = bitcast %"class.viz::SurfaceId"** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %"class.viz::SurfaceId"* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #4
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }
attributes #4 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
