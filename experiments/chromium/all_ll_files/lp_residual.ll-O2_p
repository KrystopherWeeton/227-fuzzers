; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/lp_residual.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/lp_residual.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.std::__1::array" = type { [5 x float] }
%"struct.std::__1::array.2" = type { [4 x float] }

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad36ComputeAndPostProcessLpcCoefficientsEN3rtc9ArrayViewIKfLln4711EEENS2_IfLl5EEE(float*, i64, float*) local_unnamed_addr #0 {
  %4 = bitcast float* %2 to i8*
  %5 = alloca %"struct.std::__1::array", align 4
  %6 = alloca %"struct.std::__1::array.2", align 4
  %7 = bitcast %"struct.std::__1::array"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %7) #3
  %8 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 0
  %9 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 1
  %10 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 2
  %11 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 3
  %12 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 4
  %13 = icmp eq i64 %1, 0
  %14 = select i1 %13, float* null, float* %0
  %15 = getelementptr inbounds float, float* %14, i64 %1
  %16 = bitcast %"struct.std::__1::array"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %16, i8 -1, i64 20, i1 false)
  br i1 %13, label %78, label %17

17:                                               ; preds = %3
  %18 = ptrtoint float* %0 to i64
  %19 = add i64 %1, -1
  %20 = getelementptr float, float* %14, i64 %19
  %21 = ptrtoint float* %20 to i64
  %22 = sub i64 %21, %18
  %23 = lshr i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = and i64 %24, 7
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %37, label %27

27:                                               ; preds = %17, %27
  %28 = phi float [ %33, %27 ], [ 0.000000e+00, %17 ]
  %29 = phi float* [ %34, %27 ], [ %0, %17 ]
  %30 = phi i64 [ %35, %27 ], [ %25, %17 ]
  %31 = load float, float* %29, align 4
  %32 = fmul float %31, %31
  %33 = fadd float %28, %32
  %34 = getelementptr inbounds float, float* %29, i64 1
  %35 = add i64 %30, -1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %27, !llvm.loop !2

37:                                               ; preds = %27, %17
  %38 = phi float [ undef, %17 ], [ %33, %27 ]
  %39 = phi float [ 0.000000e+00, %17 ], [ %33, %27 ]
  %40 = phi float* [ %0, %17 ], [ %34, %27 ]
  %41 = icmp ult i64 %22, 28
  br i1 %41, label %78, label %42

42:                                               ; preds = %37, %42
  %43 = phi float [ %75, %42 ], [ %39, %37 ]
  %44 = phi float* [ %76, %42 ], [ %40, %37 ]
  %45 = load float, float* %44, align 4
  %46 = fmul float %45, %45
  %47 = fadd float %43, %46
  %48 = getelementptr inbounds float, float* %44, i64 1
  %49 = load float, float* %48, align 4
  %50 = fmul float %49, %49
  %51 = fadd float %47, %50
  %52 = getelementptr inbounds float, float* %44, i64 2
  %53 = load float, float* %52, align 4
  %54 = fmul float %53, %53
  %55 = fadd float %51, %54
  %56 = getelementptr inbounds float, float* %44, i64 3
  %57 = load float, float* %56, align 4
  %58 = fmul float %57, %57
  %59 = fadd float %55, %58
  %60 = getelementptr inbounds float, float* %44, i64 4
  %61 = load float, float* %60, align 4
  %62 = fmul float %61, %61
  %63 = fadd float %59, %62
  %64 = getelementptr inbounds float, float* %44, i64 5
  %65 = load float, float* %64, align 4
  %66 = fmul float %65, %65
  %67 = fadd float %63, %66
  %68 = getelementptr inbounds float, float* %44, i64 6
  %69 = load float, float* %68, align 4
  %70 = fmul float %69, %69
  %71 = fadd float %67, %70
  %72 = getelementptr inbounds float, float* %44, i64 7
  %73 = load float, float* %72, align 4
  %74 = fmul float %73, %73
  %75 = fadd float %71, %74
  %76 = getelementptr inbounds float, float* %44, i64 8
  %77 = icmp eq float* %76, %15
  br i1 %77, label %78, label %42

78:                                               ; preds = %37, %42, %3
  %79 = phi float [ 0.000000e+00, %3 ], [ %38, %37 ], [ %75, %42 ]
  store float %79, float* %8, align 4
  %80 = getelementptr inbounds float, float* %15, i64 -1
  %81 = icmp eq float* %80, %14
  br i1 %81, label %144, label %82

82:                                               ; preds = %78
  %83 = load float, float* %14, align 4
  %84 = shl nsw i64 %1, 2
  %85 = add i64 %84, -8
  %86 = lshr exact i64 %85, 2
  %87 = add nuw nsw i64 %86, 1
  %88 = and i64 %87, 7
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %101, label %90

90:                                               ; preds = %82, %90
  %91 = phi float [ %96, %90 ], [ %83, %82 ]
  %92 = phi float [ %98, %90 ], [ 0.000000e+00, %82 ]
  %93 = phi float* [ %95, %90 ], [ %14, %82 ]
  %94 = phi i64 [ %99, %90 ], [ %88, %82 ]
  %95 = getelementptr inbounds float, float* %93, i64 1
  %96 = load float, float* %95, align 4
  %97 = fmul float %91, %96
  %98 = fadd float %92, %97
  %99 = add i64 %94, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %90, !llvm.loop !4

101:                                              ; preds = %90, %82
  %102 = phi float [ undef, %82 ], [ %98, %90 ]
  %103 = phi float [ %83, %82 ], [ %96, %90 ]
  %104 = phi float [ 0.000000e+00, %82 ], [ %98, %90 ]
  %105 = phi float* [ %14, %82 ], [ %95, %90 ]
  %106 = icmp ult i64 %85, 28
  br i1 %106, label %144, label %107

107:                                              ; preds = %101, %107
  %108 = phi float [ %140, %107 ], [ %103, %101 ]
  %109 = phi float [ %142, %107 ], [ %104, %101 ]
  %110 = phi float* [ %139, %107 ], [ %105, %101 ]
  %111 = getelementptr inbounds float, float* %110, i64 1
  %112 = load float, float* %111, align 4
  %113 = fmul float %108, %112
  %114 = fadd float %109, %113
  %115 = getelementptr inbounds float, float* %110, i64 2
  %116 = load float, float* %115, align 4
  %117 = fmul float %112, %116
  %118 = fadd float %114, %117
  %119 = getelementptr inbounds float, float* %110, i64 3
  %120 = load float, float* %119, align 4
  %121 = fmul float %116, %120
  %122 = fadd float %118, %121
  %123 = getelementptr inbounds float, float* %110, i64 4
  %124 = load float, float* %123, align 4
  %125 = fmul float %120, %124
  %126 = fadd float %122, %125
  %127 = getelementptr inbounds float, float* %110, i64 5
  %128 = load float, float* %127, align 4
  %129 = fmul float %124, %128
  %130 = fadd float %126, %129
  %131 = getelementptr inbounds float, float* %110, i64 6
  %132 = load float, float* %131, align 4
  %133 = fmul float %128, %132
  %134 = fadd float %130, %133
  %135 = getelementptr inbounds float, float* %110, i64 7
  %136 = load float, float* %135, align 4
  %137 = fmul float %132, %136
  %138 = fadd float %134, %137
  %139 = getelementptr inbounds float, float* %110, i64 8
  %140 = load float, float* %139, align 4
  %141 = fmul float %136, %140
  %142 = fadd float %138, %141
  %143 = icmp eq float* %139, %80
  br i1 %143, label %144, label %107

144:                                              ; preds = %101, %107, %78
  %145 = phi float [ 0.000000e+00, %78 ], [ %102, %101 ], [ %142, %107 ]
  store float %145, float* %9, align 4
  %146 = getelementptr inbounds float, float* %15, i64 -2
  %147 = icmp eq float* %146, %14
  br i1 %147, label %204, label %148

148:                                              ; preds = %144
  %149 = getelementptr inbounds float, float* %14, i64 2
  %150 = shl nsw i64 %1, 2
  %151 = add i64 %150, -12
  %152 = lshr exact i64 %151, 2
  %153 = add nuw nsw i64 %152, 1
  %154 = and i64 %153, 3
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %169, label %156

156:                                              ; preds = %148, %156
  %157 = phi float [ %164, %156 ], [ 0.000000e+00, %148 ]
  %158 = phi float* [ %166, %156 ], [ %149, %148 ]
  %159 = phi float* [ %165, %156 ], [ %14, %148 ]
  %160 = phi i64 [ %167, %156 ], [ %154, %148 ]
  %161 = load float, float* %159, align 4
  %162 = load float, float* %158, align 4
  %163 = fmul float %161, %162
  %164 = fadd float %157, %163
  %165 = getelementptr inbounds float, float* %159, i64 1
  %166 = getelementptr inbounds float, float* %158, i64 1
  %167 = add i64 %160, -1
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %156, !llvm.loop !5

169:                                              ; preds = %156, %148
  %170 = phi float [ undef, %148 ], [ %164, %156 ]
  %171 = phi float [ 0.000000e+00, %148 ], [ %164, %156 ]
  %172 = phi float* [ %149, %148 ], [ %166, %156 ]
  %173 = phi float* [ %14, %148 ], [ %165, %156 ]
  %174 = icmp ult i64 %151, 12
  br i1 %174, label %204, label %175

175:                                              ; preds = %169, %175
  %176 = phi float [ %200, %175 ], [ %171, %169 ]
  %177 = phi float* [ %202, %175 ], [ %172, %169 ]
  %178 = phi float* [ %201, %175 ], [ %173, %169 ]
  %179 = load float, float* %178, align 4
  %180 = load float, float* %177, align 4
  %181 = fmul float %179, %180
  %182 = fadd float %176, %181
  %183 = getelementptr inbounds float, float* %178, i64 1
  %184 = getelementptr inbounds float, float* %177, i64 1
  %185 = load float, float* %183, align 4
  %186 = load float, float* %184, align 4
  %187 = fmul float %185, %186
  %188 = fadd float %182, %187
  %189 = getelementptr inbounds float, float* %178, i64 2
  %190 = getelementptr inbounds float, float* %177, i64 2
  %191 = load float, float* %189, align 4
  %192 = load float, float* %190, align 4
  %193 = fmul float %191, %192
  %194 = fadd float %188, %193
  %195 = getelementptr inbounds float, float* %178, i64 3
  %196 = getelementptr inbounds float, float* %177, i64 3
  %197 = load float, float* %195, align 4
  %198 = load float, float* %196, align 4
  %199 = fmul float %197, %198
  %200 = fadd float %194, %199
  %201 = getelementptr inbounds float, float* %178, i64 4
  %202 = getelementptr inbounds float, float* %177, i64 4
  %203 = icmp eq float* %201, %146
  br i1 %203, label %204, label %175

204:                                              ; preds = %169, %175, %144
  %205 = phi float [ 0.000000e+00, %144 ], [ %170, %169 ], [ %200, %175 ]
  store float %205, float* %10, align 4
  %206 = getelementptr inbounds float, float* %15, i64 -3
  %207 = icmp eq float* %206, %14
  br i1 %207, label %264, label %208

208:                                              ; preds = %204
  %209 = getelementptr inbounds float, float* %14, i64 3
  %210 = shl nsw i64 %1, 2
  %211 = add i64 %210, -16
  %212 = lshr exact i64 %211, 2
  %213 = add nuw nsw i64 %212, 1
  %214 = and i64 %213, 3
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %229, label %216

216:                                              ; preds = %208, %216
  %217 = phi float [ %224, %216 ], [ 0.000000e+00, %208 ]
  %218 = phi float* [ %226, %216 ], [ %209, %208 ]
  %219 = phi float* [ %225, %216 ], [ %14, %208 ]
  %220 = phi i64 [ %227, %216 ], [ %214, %208 ]
  %221 = load float, float* %219, align 4
  %222 = load float, float* %218, align 4
  %223 = fmul float %221, %222
  %224 = fadd float %217, %223
  %225 = getelementptr inbounds float, float* %219, i64 1
  %226 = getelementptr inbounds float, float* %218, i64 1
  %227 = add i64 %220, -1
  %228 = icmp eq i64 %227, 0
  br i1 %228, label %229, label %216, !llvm.loop !6

229:                                              ; preds = %216, %208
  %230 = phi float [ undef, %208 ], [ %224, %216 ]
  %231 = phi float [ 0.000000e+00, %208 ], [ %224, %216 ]
  %232 = phi float* [ %209, %208 ], [ %226, %216 ]
  %233 = phi float* [ %14, %208 ], [ %225, %216 ]
  %234 = icmp ult i64 %211, 12
  br i1 %234, label %264, label %235

235:                                              ; preds = %229, %235
  %236 = phi float [ %260, %235 ], [ %231, %229 ]
  %237 = phi float* [ %262, %235 ], [ %232, %229 ]
  %238 = phi float* [ %261, %235 ], [ %233, %229 ]
  %239 = load float, float* %238, align 4
  %240 = load float, float* %237, align 4
  %241 = fmul float %239, %240
  %242 = fadd float %236, %241
  %243 = getelementptr inbounds float, float* %238, i64 1
  %244 = getelementptr inbounds float, float* %237, i64 1
  %245 = load float, float* %243, align 4
  %246 = load float, float* %244, align 4
  %247 = fmul float %245, %246
  %248 = fadd float %242, %247
  %249 = getelementptr inbounds float, float* %238, i64 2
  %250 = getelementptr inbounds float, float* %237, i64 2
  %251 = load float, float* %249, align 4
  %252 = load float, float* %250, align 4
  %253 = fmul float %251, %252
  %254 = fadd float %248, %253
  %255 = getelementptr inbounds float, float* %238, i64 3
  %256 = getelementptr inbounds float, float* %237, i64 3
  %257 = load float, float* %255, align 4
  %258 = load float, float* %256, align 4
  %259 = fmul float %257, %258
  %260 = fadd float %254, %259
  %261 = getelementptr inbounds float, float* %238, i64 4
  %262 = getelementptr inbounds float, float* %237, i64 4
  %263 = icmp eq float* %261, %206
  br i1 %263, label %264, label %235

264:                                              ; preds = %229, %235, %204
  %265 = phi float [ 0.000000e+00, %204 ], [ %230, %229 ], [ %260, %235 ]
  store float %265, float* %11, align 4
  %266 = getelementptr inbounds float, float* %15, i64 -4
  %267 = icmp eq float* %266, %14
  br i1 %267, label %324, label %268

268:                                              ; preds = %264
  %269 = getelementptr inbounds float, float* %14, i64 4
  %270 = shl nsw i64 %1, 2
  %271 = add i64 %270, -20
  %272 = lshr exact i64 %271, 2
  %273 = add nuw nsw i64 %272, 1
  %274 = and i64 %273, 3
  %275 = icmp eq i64 %274, 0
  br i1 %275, label %289, label %276

276:                                              ; preds = %268, %276
  %277 = phi float [ %284, %276 ], [ 0.000000e+00, %268 ]
  %278 = phi float* [ %286, %276 ], [ %269, %268 ]
  %279 = phi float* [ %285, %276 ], [ %14, %268 ]
  %280 = phi i64 [ %287, %276 ], [ %274, %268 ]
  %281 = load float, float* %279, align 4
  %282 = load float, float* %278, align 4
  %283 = fmul float %281, %282
  %284 = fadd float %277, %283
  %285 = getelementptr inbounds float, float* %279, i64 1
  %286 = getelementptr inbounds float, float* %278, i64 1
  %287 = add i64 %280, -1
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %289, label %276, !llvm.loop !7

289:                                              ; preds = %276, %268
  %290 = phi float [ undef, %268 ], [ %284, %276 ]
  %291 = phi float [ 0.000000e+00, %268 ], [ %284, %276 ]
  %292 = phi float* [ %269, %268 ], [ %286, %276 ]
  %293 = phi float* [ %14, %268 ], [ %285, %276 ]
  %294 = icmp ult i64 %271, 12
  br i1 %294, label %324, label %295

295:                                              ; preds = %289, %295
  %296 = phi float [ %320, %295 ], [ %291, %289 ]
  %297 = phi float* [ %322, %295 ], [ %292, %289 ]
  %298 = phi float* [ %321, %295 ], [ %293, %289 ]
  %299 = load float, float* %298, align 4
  %300 = load float, float* %297, align 4
  %301 = fmul float %299, %300
  %302 = fadd float %296, %301
  %303 = getelementptr inbounds float, float* %298, i64 1
  %304 = getelementptr inbounds float, float* %297, i64 1
  %305 = load float, float* %303, align 4
  %306 = load float, float* %304, align 4
  %307 = fmul float %305, %306
  %308 = fadd float %302, %307
  %309 = getelementptr inbounds float, float* %298, i64 2
  %310 = getelementptr inbounds float, float* %297, i64 2
  %311 = load float, float* %309, align 4
  %312 = load float, float* %310, align 4
  %313 = fmul float %311, %312
  %314 = fadd float %308, %313
  %315 = getelementptr inbounds float, float* %298, i64 3
  %316 = getelementptr inbounds float, float* %297, i64 3
  %317 = load float, float* %315, align 4
  %318 = load float, float* %316, align 4
  %319 = fmul float %317, %318
  %320 = fadd float %314, %319
  %321 = getelementptr inbounds float, float* %298, i64 4
  %322 = getelementptr inbounds float, float* %297, i64 4
  %323 = icmp eq float* %321, %266
  br i1 %323, label %324, label %295

324:                                              ; preds = %289, %295, %264
  %325 = phi float [ 0.000000e+00, %264 ], [ %290, %289 ], [ %320, %295 ]
  store float %325, float* %12, align 4
  %326 = fcmp oeq float %79, 0.000000e+00
  br i1 %326, label %327, label %328

327:                                              ; preds = %324
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 20, i1 false)
  br label %499

328:                                              ; preds = %324
  %329 = fmul float %79, 0x3FF00068E0000000
  store float %329, float* %8, align 4
  %330 = insertelement <4 x float> undef, float %145, i32 0
  %331 = insertelement <4 x float> %330, float %205, i32 1
  %332 = insertelement <4 x float> %331, float %265, i32 2
  %333 = insertelement <4 x float> %332, float %325, i32 3
  %334 = fmul <4 x float> %333, <float 0x3F10C6F7A0000000, float 0x3F30C6F7A0000000, float 0x3F42DFD6A0000000, float 0x3F50C6F7A0000000>
  %335 = fsub <4 x float> %333, %334
  %336 = bitcast float* %9 to <4 x float>*
  store <4 x float> %335, <4 x float>* %336, align 4
  %337 = bitcast %"struct.std::__1::array.2"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %337) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %337, i8 0, i64 16, i1 false)
  %338 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 0
  %339 = fmul float %329, 0x3F50624DE0000000
  br label %340

340:                                              ; preds = %441, %328
  %341 = phi i64 [ %372, %441 ], [ 0, %328 ]
  %342 = phi float [ %444, %441 ], [ %329, %328 ]
  %343 = add nuw i64 %341, 1
  %344 = lshr i64 %343, 1
  switch i64 %341, label %345 [
    i64 4, label %473
    i64 0, label %370
  ]

345:                                              ; preds = %340
  %346 = add nsw i64 %341, -1
  %347 = and i64 %341, 3
  %348 = icmp ult i64 %346, 3
  br i1 %348, label %351, label %349

349:                                              ; preds = %345
  %350 = sub nsw i64 %341, %347
  br label %389

351:                                              ; preds = %389, %345
  %352 = phi float [ undef, %345 ], [ %423, %389 ]
  %353 = phi i64 [ 0, %345 ], [ %424, %389 ]
  %354 = phi float [ 0.000000e+00, %345 ], [ %423, %389 ]
  %355 = icmp eq i64 %347, 0
  br i1 %355, label %370, label %356

356:                                              ; preds = %351, %356
  %357 = phi i64 [ %367, %356 ], [ %353, %351 ]
  %358 = phi float [ %366, %356 ], [ %354, %351 ]
  %359 = phi i64 [ %368, %356 ], [ %347, %351 ]
  %360 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %357
  %361 = load float, float* %360, align 4
  %362 = sub nsw i64 %341, %357
  %363 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %362
  %364 = load float, float* %363, align 4
  %365 = fmul float %361, %364
  %366 = fadd float %358, %365
  %367 = add nuw nsw i64 %357, 1
  %368 = add i64 %359, -1
  %369 = icmp eq i64 %368, 0
  br i1 %369, label %370, label %356, !llvm.loop !8

370:                                              ; preds = %351, %356, %340
  %371 = phi float [ 0.000000e+00, %340 ], [ %352, %351 ], [ %366, %356 ]
  %372 = add nuw nsw i64 %341, 1
  %373 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %372
  %374 = load float, float* %373, align 4
  %375 = fadd float %371, %374
  %376 = tail call float @llvm.fabs.f32(float %342) #3
  %377 = fcmp olt float %376, 0x3EB0C6F7A0000000
  %378 = tail call float @llvm.copysign.f32(float 0x3EB0C6F7A0000000, float %342) #3
  %379 = select i1 %377, float %378, float %342
  %380 = fsub float -0.000000e+00, %379
  %381 = fdiv float %375, %380
  %382 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %341
  store float %381, float* %382, align 4
  %383 = icmp ult i64 %372, 2
  br i1 %383, label %441, label %384

384:                                              ; preds = %370
  %385 = and i64 %344, 1
  %386 = icmp eq i64 %344, 1
  br i1 %386, label %427, label %387

387:                                              ; preds = %384
  %388 = sub nsw i64 %344, %385
  br label %446

389:                                              ; preds = %389, %349
  %390 = phi i64 [ 0, %349 ], [ %424, %389 ]
  %391 = phi float [ 0.000000e+00, %349 ], [ %423, %389 ]
  %392 = phi i64 [ %350, %349 ], [ %425, %389 ]
  %393 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %390
  %394 = load float, float* %393, align 4
  %395 = sub nsw i64 %341, %390
  %396 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %395
  %397 = load float, float* %396, align 4
  %398 = fmul float %394, %397
  %399 = fadd float %391, %398
  %400 = or i64 %390, 1
  %401 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %400
  %402 = load float, float* %401, align 4
  %403 = sub nsw i64 %341, %400
  %404 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %403
  %405 = load float, float* %404, align 4
  %406 = fmul float %402, %405
  %407 = fadd float %399, %406
  %408 = or i64 %390, 2
  %409 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %408
  %410 = load float, float* %409, align 4
  %411 = sub nsw i64 %341, %408
  %412 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %411
  %413 = load float, float* %412, align 4
  %414 = fmul float %410, %413
  %415 = fadd float %407, %414
  %416 = or i64 %390, 3
  %417 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %416
  %418 = load float, float* %417, align 4
  %419 = sub nsw i64 %341, %416
  %420 = getelementptr inbounds %"struct.std::__1::array", %"struct.std::__1::array"* %5, i64 0, i32 0, i64 %419
  %421 = load float, float* %420, align 4
  %422 = fmul float %418, %421
  %423 = fadd float %415, %422
  %424 = add nuw nsw i64 %390, 4
  %425 = add i64 %392, -4
  %426 = icmp eq i64 %425, 0
  br i1 %426, label %351, label %389

427:                                              ; preds = %446, %384
  %428 = phi i64 [ 0, %384 ], [ %470, %446 ]
  %429 = icmp eq i64 %385, 0
  br i1 %429, label %441, label %430

430:                                              ; preds = %427
  %431 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %428
  %432 = load float, float* %431, align 4
  %433 = xor i64 %428, -1
  %434 = add nsw i64 %341, %433
  %435 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %434
  %436 = load float, float* %435, align 4
  %437 = fmul float %381, %436
  %438 = fadd float %432, %437
  store float %438, float* %431, align 4
  %439 = fmul float %381, %432
  %440 = fadd float %436, %439
  store float %440, float* %435, align 4
  br label %441

441:                                              ; preds = %430, %427, %370
  %442 = fmul float %381, %381
  %443 = fmul float %379, %442
  %444 = fsub float %379, %443
  %445 = fcmp uge float %444, %339
  br i1 %445, label %340, label %473

446:                                              ; preds = %446, %387
  %447 = phi i64 [ 0, %387 ], [ %470, %446 ]
  %448 = phi i64 [ %388, %387 ], [ %471, %446 ]
  %449 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %447
  %450 = load float, float* %449, align 4
  %451 = xor i64 %447, -1
  %452 = add nsw i64 %341, %451
  %453 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %452
  %454 = load float, float* %453, align 4
  %455 = fmul float %381, %454
  %456 = fadd float %450, %455
  store float %456, float* %449, align 4
  %457 = fmul float %381, %450
  %458 = fadd float %454, %457
  store float %458, float* %453, align 4
  %459 = or i64 %447, 1
  %460 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %459
  %461 = load float, float* %460, align 4
  %462 = sub nuw nsw i64 -2, %447
  %463 = add nsw i64 %341, %462
  %464 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 %463
  %465 = load float, float* %464, align 4
  %466 = fmul float %381, %465
  %467 = fadd float %461, %466
  store float %467, float* %460, align 4
  %468 = fmul float %381, %461
  %469 = fadd float %465, %468
  store float %469, float* %464, align 4
  %470 = add nuw nsw i64 %447, 2
  %471 = add i64 %448, -2
  %472 = icmp eq i64 %471, 0
  br i1 %472, label %427, label %446

473:                                              ; preds = %340, %441
  %474 = load float, float* %338, align 4
  %475 = fmul float %474, 0x3FECCCCCC0000000
  store float %475, float* %338, align 4
  %476 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 1
  %477 = load float, float* %476, align 4
  %478 = fmul float %477, 0x3FE9EB8500000000
  store float %478, float* %476, align 4
  %479 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 2
  %480 = load float, float* %479, align 4
  %481 = fmul float %480, 0x3FE753F7A0000000
  store float %481, float* %479, align 4
  %482 = getelementptr inbounds %"struct.std::__1::array.2", %"struct.std::__1::array.2"* %6, i64 0, i32 0, i64 3
  %483 = load float, float* %482, align 4
  %484 = fmul float %483, 0x3FE4FEC540000000
  %485 = fmul float %475, 0x3FE99999A0000000
  %486 = fmul float %478, 0x3FE99999A0000000
  %487 = fmul float %481, 0x3FE99999A0000000
  %488 = insertelement <4 x float> undef, float %475, i32 0
  %489 = insertelement <4 x float> %488, float %485, i32 1
  %490 = insertelement <4 x float> %489, float %486, i32 2
  %491 = insertelement <4 x float> %490, float %487, i32 3
  %492 = insertelement <4 x float> <float 0x3FE99999A0000000, float undef, float undef, float undef>, float %478, i32 1
  %493 = insertelement <4 x float> %492, float %481, i32 2
  %494 = insertelement <4 x float> %493, float %484, i32 3
  %495 = fadd <4 x float> %491, %494
  %496 = bitcast float* %2 to <4 x float>*
  store <4 x float> %495, <4 x float>* %496, align 4
  %497 = fmul float %484, 0x3FE99999A0000000
  %498 = getelementptr inbounds float, float* %2, i64 4
  store float %497, float* %498, align 4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %337) #3
  br label %499

499:                                              ; preds = %327, %473
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %7) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc7rnn_vad17ComputeLpResidualEN3rtc9ArrayViewIKfLl5EEENS2_IS3_Lln4711EEENS2_IfLln4711EEE(float*, float*, i64, float*, i64) local_unnamed_addr #0 {
  %6 = bitcast float* %1 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = bitcast float* %3 to i32*
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds float, float* %1, i64 1
  %10 = load float, float* %9, align 4
  %11 = load float, float* %1, align 4
  %12 = load float, float* %0, align 4
  %13 = fmul float %11, %12
  %14 = fadd float %10, %13
  %15 = getelementptr inbounds float, float* %3, i64 1
  store float %14, float* %15, align 4
  %16 = getelementptr inbounds float, float* %1, i64 2
  %17 = load float, float* %16, align 4
  %18 = getelementptr inbounds float, float* %1, i64 1
  %19 = load float, float* %18, align 4
  %20 = load float, float* %0, align 4
  %21 = fmul float %19, %20
  %22 = fadd float %17, %21
  %23 = getelementptr inbounds float, float* %0, i64 1
  %24 = load float, float* %1, align 4
  %25 = load float, float* %23, align 4
  %26 = fmul float %24, %25
  %27 = fadd float %22, %26
  %28 = getelementptr inbounds float, float* %3, i64 2
  store float %27, float* %28, align 4
  %29 = getelementptr inbounds float, float* %1, i64 3
  %30 = load float, float* %29, align 4
  %31 = getelementptr inbounds float, float* %1, i64 2
  %32 = load float, float* %31, align 4
  %33 = load float, float* %0, align 4
  %34 = fmul float %32, %33
  %35 = fadd float %30, %34
  %36 = getelementptr inbounds float, float* %0, i64 1
  %37 = getelementptr inbounds float, float* %1, i64 1
  %38 = load float, float* %37, align 4
  %39 = load float, float* %36, align 4
  %40 = fmul float %38, %39
  %41 = fadd float %35, %40
  %42 = getelementptr inbounds float, float* %0, i64 2
  %43 = load float, float* %1, align 4
  %44 = load float, float* %42, align 4
  %45 = fmul float %43, %44
  %46 = fadd float %41, %45
  %47 = getelementptr inbounds float, float* %3, i64 3
  store float %46, float* %47, align 4
  %48 = getelementptr inbounds float, float* %1, i64 4
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds float, float* %1, i64 3
  %51 = load float, float* %50, align 4
  %52 = load float, float* %0, align 4
  %53 = fmul float %51, %52
  %54 = fadd float %49, %53
  %55 = getelementptr inbounds float, float* %0, i64 1
  %56 = getelementptr inbounds float, float* %1, i64 2
  %57 = load float, float* %56, align 4
  %58 = load float, float* %55, align 4
  %59 = fmul float %57, %58
  %60 = fadd float %54, %59
  %61 = getelementptr inbounds float, float* %0, i64 2
  %62 = getelementptr inbounds float, float* %1, i64 1
  %63 = load float, float* %62, align 4
  %64 = load float, float* %61, align 4
  %65 = fmul float %63, %64
  %66 = fadd float %60, %65
  %67 = getelementptr inbounds float, float* %0, i64 3
  %68 = load float, float* %1, align 4
  %69 = load float, float* %67, align 4
  %70 = fmul float %68, %69
  %71 = fadd float %66, %70
  %72 = getelementptr inbounds float, float* %3, i64 4
  store float %71, float* %72, align 4
  %73 = icmp ugt i64 %4, 5
  br i1 %73, label %74, label %155

74:                                               ; preds = %5
  %75 = getelementptr inbounds float, float* %0, i64 1
  %76 = getelementptr inbounds float, float* %0, i64 2
  %77 = getelementptr inbounds float, float* %0, i64 3
  %78 = getelementptr inbounds float, float* %0, i64 4
  %79 = add i64 %4, -5
  %80 = icmp ult i64 %79, 4
  br i1 %80, label %81, label %84

81:                                               ; preds = %153, %84, %74
  %82 = phi i64 [ 5, %84 ], [ 5, %74 ], [ %101, %153 ]
  %83 = phi float* [ %1, %84 ], [ %1, %74 ], [ %102, %153 ]
  br label %156

84:                                               ; preds = %74
  %85 = getelementptr float, float* %3, i64 5
  %86 = bitcast float* %85 to i8*
  %87 = getelementptr float, float* %3, i64 %4
  %88 = getelementptr float, float* %1, i64 %4
  %89 = getelementptr float, float* %0, i64 4
  %90 = bitcast float* %89 to i8*
  %91 = getelementptr i8, i8* %90, i64 1
  %92 = icmp ult float* %85, %88
  %93 = icmp ugt float* %87, %1
  %94 = and i1 %92, %93
  %95 = icmp ugt i8* %91, %86
  %96 = icmp ult float* %78, %87
  %97 = and i1 %95, %96
  %98 = or i1 %94, %97
  br i1 %98, label %81, label %99

99:                                               ; preds = %84
  %100 = and i64 %79, -4
  %101 = add i64 %100, 5
  %102 = getelementptr float, float* %1, i64 %100
  %103 = load float, float* %0, align 4, !alias.scope !9
  %104 = insertelement <4 x float> undef, float %103, i32 0
  %105 = shufflevector <4 x float> %104, <4 x float> undef, <4 x i32> zeroinitializer
  %106 = load float, float* %75, align 4, !alias.scope !9
  %107 = insertelement <4 x float> undef, float %106, i32 0
  %108 = shufflevector <4 x float> %107, <4 x float> undef, <4 x i32> zeroinitializer
  %109 = load float, float* %76, align 4, !alias.scope !9
  %110 = insertelement <4 x float> undef, float %109, i32 0
  %111 = shufflevector <4 x float> %110, <4 x float> undef, <4 x i32> zeroinitializer
  %112 = load float, float* %77, align 4, !alias.scope !9
  %113 = insertelement <4 x float> undef, float %112, i32 0
  %114 = shufflevector <4 x float> %113, <4 x float> undef, <4 x i32> zeroinitializer
  %115 = load float, float* %78, align 4, !alias.scope !9
  %116 = insertelement <4 x float> undef, float %115, i32 0
  %117 = shufflevector <4 x float> %116, <4 x float> undef, <4 x i32> zeroinitializer
  br label %118

118:                                              ; preds = %118, %99
  %119 = phi i64 [ 0, %99 ], [ %151, %118 ]
  %120 = add i64 %119, 5
  %121 = getelementptr float, float* %1, i64 %119
  %122 = getelementptr inbounds float, float* %1, i64 %120
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 4, !alias.scope !12
  %125 = getelementptr inbounds float, float* %121, i64 4
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 4, !alias.scope !12
  %128 = fmul <4 x float> %127, %105
  %129 = fadd <4 x float> %124, %128
  %130 = getelementptr inbounds float, float* %121, i64 3
  %131 = bitcast float* %130 to <4 x float>*
  %132 = load <4 x float>, <4 x float>* %131, align 4, !alias.scope !12
  %133 = fmul <4 x float> %132, %108
  %134 = fadd <4 x float> %129, %133
  %135 = getelementptr inbounds float, float* %121, i64 2
  %136 = bitcast float* %135 to <4 x float>*
  %137 = load <4 x float>, <4 x float>* %136, align 4, !alias.scope !12
  %138 = fmul <4 x float> %137, %111
  %139 = fadd <4 x float> %134, %138
  %140 = getelementptr inbounds float, float* %121, i64 1
  %141 = bitcast float* %140 to <4 x float>*
  %142 = load <4 x float>, <4 x float>* %141, align 4, !alias.scope !12
  %143 = fmul <4 x float> %142, %114
  %144 = fadd <4 x float> %139, %143
  %145 = bitcast float* %121 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 4, !alias.scope !12
  %147 = fmul <4 x float> %146, %117
  %148 = fadd <4 x float> %144, %147
  %149 = getelementptr inbounds float, float* %3, i64 %120
  %150 = bitcast float* %149 to <4 x float>*
  store <4 x float> %148, <4 x float>* %150, align 4, !alias.scope !14, !noalias !16
  %151 = add i64 %119, 4
  %152 = icmp eq i64 %151, %100
  br i1 %152, label %153, label %118, !llvm.loop !17

153:                                              ; preds = %118
  %154 = icmp eq i64 %79, %100
  br i1 %154, label %155, label %81

155:                                              ; preds = %156, %153, %5
  ret void

156:                                              ; preds = %81, %156
  %157 = phi i64 [ %186, %156 ], [ %82, %81 ]
  %158 = phi float* [ %187, %156 ], [ %83, %81 ]
  %159 = getelementptr inbounds float, float* %1, i64 %157
  %160 = load float, float* %159, align 4
  %161 = getelementptr inbounds float, float* %158, i64 4
  %162 = load float, float* %161, align 4
  %163 = load float, float* %0, align 4
  %164 = fmul float %162, %163
  %165 = fadd float %160, %164
  %166 = getelementptr inbounds float, float* %158, i64 3
  %167 = load float, float* %166, align 4
  %168 = load float, float* %75, align 4
  %169 = fmul float %167, %168
  %170 = fadd float %165, %169
  %171 = getelementptr inbounds float, float* %158, i64 2
  %172 = load float, float* %171, align 4
  %173 = load float, float* %76, align 4
  %174 = fmul float %172, %173
  %175 = fadd float %170, %174
  %176 = getelementptr inbounds float, float* %158, i64 1
  %177 = load float, float* %176, align 4
  %178 = load float, float* %77, align 4
  %179 = fmul float %177, %178
  %180 = fadd float %175, %179
  %181 = load float, float* %158, align 4
  %182 = load float, float* %78, align 4
  %183 = fmul float %181, %182
  %184 = fadd float %180, %183
  %185 = getelementptr inbounds float, float* %3, i64 %157
  store float %184, float* %185, align 4
  %186 = add nuw i64 %157, 1
  %187 = getelementptr inbounds float, float* %158, i64 1
  %188 = icmp eq i64 %186, %4
  br i1 %188, label %155, label %156, !llvm.loop !19
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.copysign.f32(float, float) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = !{!15}
!15 = distinct !{!15, !11}
!16 = !{!13, !10}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = distinct !{!19, !18}
