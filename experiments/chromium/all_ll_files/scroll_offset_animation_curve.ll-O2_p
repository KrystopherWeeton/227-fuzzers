; ModuleID = '../../cc/animation/scroll_offset_animation_curve.cc'
source_filename = "../../cc/animation/scroll_offset_animation_curve.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.absl::optional_internal::empty_struct" = type { i8 }
%"class.cc::ScrollOffsetAnimationCurve" = type { %"class.gfx::AnimationCurve", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.base::TimeDelta", %"class.base::TimeDelta", %"class.std::__1::unique_ptr", i32, %"class.absl::optional.1", i8, %"class.cc::ScrollOffsetAnimationCurve::Target"* }
%"class.gfx::AnimationCurve" = type { i32 (...)** }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.gfx::TimingFunction"* }
%"class.gfx::TimingFunction" = type { i32 (...)** }
%"class.absl::optional.1" = type { %"class.absl::optional_internal::optional_data.2" }
%"class.absl::optional_internal::optional_data.2" = type { %"class.absl::optional_internal::optional_data_base.3" }
%"class.absl::optional_internal::optional_data_base.3" = type { %"class.absl::optional_internal::optional_data_dtor_base.4" }
%"class.absl::optional_internal::optional_data_dtor_base.4" = type { i8, %union.anon.5 }
%union.anon.5 = type { i32 }
%"class.cc::ScrollOffsetAnimationCurve::Target" = type { i32 (...)** }
%"class.gfx::CubicBezierTimingFunction" = type <{ %"class.gfx::TimingFunction", %"class.gfx::CubicBezier", i32, [4 x i8] }>
%"class.gfx::CubicBezier" = type { double, double, double, double, double, double, double, double, double, double, [11 x double] }
%"class.gfx::LinearTimingFunction" = type { %"class.gfx::TimingFunction" }
%"class.gfx::Vector2dF" = type { float, float }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.gfx::KeyframeModel" = type opaque

$_ZNK4base9TimeDeltamiES0_ = comdat any

$_ZNK4base9TimeDeltadvES0_ = comdat any

@_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E = hidden local_unnamed_addr global { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } } { i8 0, [7 x i8] undef, { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } undef }, align 8
@_ZTVN2cc26ScrollOffsetAnimationCurveE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZN2cc26ScrollOffsetAnimationCurveD2Ev to i8*), i8* bitcast (void (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZN2cc26ScrollOffsetAnimationCurveD0Ev to i8*), i8* bitcast (i64 (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZNK2cc26ScrollOffsetAnimationCurve8DurationEv to i8*), i8* bitcast (i32 (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZNK2cc26ScrollOffsetAnimationCurve4TypeEv to i8*), i8* bitcast (i8* (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZNK2cc26ScrollOffsetAnimationCurve8TypeNameEv to i8*), i8* bitcast (%"class.gfx::AnimationCurve"* (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZNK2cc26ScrollOffsetAnimationCurve5CloneEv to i8*), i8* bitcast (void (%"class.cc::ScrollOffsetAnimationCurve"*, i64, i32, %"class.gfx::KeyframeModel"*)* @_ZNK2cc26ScrollOffsetAnimationCurve4TickEN4base9TimeDeltaEiPN3gfx13KeyframeModelE to i8*), i8* bitcast (i1 (%"class.gfx::AnimationCurve"*)* @_ZNK3gfx14AnimationCurve22PreservesAxisAlignmentEv to i8*), i8* bitcast (i1 (%"class.gfx::AnimationCurve"*, float*)* @_ZNK3gfx14AnimationCurve12MaximumScaleEPf to i8*), i8* bitcast (i64 (%"class.gfx::AnimationCurve"*)* @_ZNK3gfx14AnimationCurve12TickIntervalEv to i8*)] }, align 8
@.str = private unnamed_addr constant [13 x i8] c"ScrollOffset\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"delta_ != other.delta_\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"!is_zero() || !a.is_zero()\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN2cc26ScrollOffsetAnimationCurveC1ERKN3gfx12ScrollOffsetENS0_13AnimationTypeEN4absl8optionalINS0_16DurationBehaviorEEE = hidden unnamed_addr alias void (%"class.cc::ScrollOffsetAnimationCurve"*, %"class.gfx::ScrollOffset"*, i32, i64), void (%"class.cc::ScrollOffsetAnimationCurve"*, %"class.gfx::ScrollOffset"*, i32, i64)* @_ZN2cc26ScrollOffsetAnimationCurveC2ERKN3gfx12ScrollOffsetENS0_13AnimationTypeEN4absl8optionalINS0_16DurationBehaviorEEE
@_ZN2cc26ScrollOffsetAnimationCurveC1ERKN3gfx12ScrollOffsetENSt3__110unique_ptrINS1_14TimingFunctionENS5_14default_deleteIS7_EEEENS0_13AnimationTypeEN4absl8optionalINS0_16DurationBehaviorEEE = hidden unnamed_addr alias void (%"class.cc::ScrollOffsetAnimationCurve"*, %"class.gfx::ScrollOffset"*, %"class.gfx::TimingFunction"*, i32, i64), void (%"class.cc::ScrollOffsetAnimationCurve"*, %"class.gfx::ScrollOffset"*, %"class.gfx::TimingFunction"*, i32, i64)* @_ZN2cc26ScrollOffsetAnimationCurveC2ERKN3gfx12ScrollOffsetENSt3__110unique_ptrINS1_14TimingFunctionENS5_14default_deleteIS7_EEEENS0_13AnimationTypeEN4absl8optionalINS0_16DurationBehaviorEEE
@_ZN2cc26ScrollOffsetAnimationCurveD1Ev = hidden unnamed_addr alias void (%"class.cc::ScrollOffsetAnimationCurve"*), void (%"class.cc::ScrollOffsetAnimationCurve"*)* @_ZN2cc26ScrollOffsetAnimationCurveD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurveC2ERKN3gfx12ScrollOffsetENS0_13AnimationTypeEN4absl8optionalINS0_16DurationBehaviorEEE(%"class.cc::ScrollOffsetAnimationCurve"* nocapture, %"class.gfx::ScrollOffset"* nocapture readonly dereferenceable(8), i32, i64) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2cc26ScrollOffsetAnimationCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %9 = bitcast %"class.gfx::ScrollOffset"* %1 to i64*
  %10 = bitcast %"class.gfx::ScrollOffset"* %8 to i64*
  %11 = load i64, i64* %9, align 4
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  %13 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5
  %14 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 6
  %15 = bitcast i64* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false)
  store i32 %2, i32* %14, align 8
  %16 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7
  %17 = bitcast %"class.absl::optional.1"* %16 to i64*
  store i64 %3, i64* %17, align 4
  %18 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 8
  store i8 0, i8* %18, align 4
  %19 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 9
  store %"class.cc::ScrollOffsetAnimationCurve::Target"* null, %"class.cc::ScrollOffsetAnimationCurve::Target"** %19, align 8
  switch i32 %2, label %54 [
    i32 1, label %20
    i32 0, label %31
    i32 2, label %42
  ]

20:                                               ; preds = %4
  %21 = tail call %"class.gfx::CubicBezierTimingFunction"* @_ZN3gfx25CubicBezierTimingFunction12CreatePresetENS0_8EaseTypeE(i32 3) #13
  %22 = getelementptr inbounds %"class.gfx::CubicBezierTimingFunction", %"class.gfx::CubicBezierTimingFunction"* %21, i64 0, i32 0
  %23 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %23, align 8
  store %"class.gfx::TimingFunction"* %22, %"class.gfx::TimingFunction"** %23, align 8
  %25 = icmp eq %"class.gfx::TimingFunction"* %24, null
  br i1 %25, label %54, label %26

26:                                               ; preds = %20
  %27 = bitcast %"class.gfx::TimingFunction"* %24 to void (%"class.gfx::TimingFunction"*)***
  %28 = load void (%"class.gfx::TimingFunction"*)**, void (%"class.gfx::TimingFunction"*)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %28, i64 1
  %30 = load void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %29, align 8
  tail call void %30(%"class.gfx::TimingFunction"* nonnull %24) #13
  br label %54

31:                                               ; preds = %4
  %32 = tail call %"class.gfx::LinearTimingFunction"* @_ZN3gfx20LinearTimingFunction6CreateEv() #13
  %33 = getelementptr inbounds %"class.gfx::LinearTimingFunction", %"class.gfx::LinearTimingFunction"* %32, i64 0, i32 0
  %34 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %35 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %34, align 8
  store %"class.gfx::TimingFunction"* %33, %"class.gfx::TimingFunction"** %34, align 8
  %36 = icmp eq %"class.gfx::TimingFunction"* %35, null
  br i1 %36, label %54, label %37

37:                                               ; preds = %31
  %38 = bitcast %"class.gfx::TimingFunction"* %35 to void (%"class.gfx::TimingFunction"*)***
  %39 = load void (%"class.gfx::TimingFunction"*)**, void (%"class.gfx::TimingFunction"*)*** %38, align 8
  %40 = getelementptr inbounds void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %39, i64 1
  %41 = load void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %40, align 8
  tail call void %41(%"class.gfx::TimingFunction"* nonnull %35) #13
  br label %54

42:                                               ; preds = %4
  %43 = bitcast %"class.std::__1::unique_ptr"* %13 to i64*
  %44 = tail call %"class.gfx::CubicBezierTimingFunction"* @_ZN3gfx25CubicBezierTimingFunction6CreateEdddd(double 2.500000e-01, double 0.000000e+00, double 0.000000e+00, double 1.000000e+00) #13
  %45 = ptrtoint %"class.gfx::CubicBezierTimingFunction"* %44 to i64
  %46 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %13, i64 0, i32 0, i32 0, i32 0
  %47 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %46, align 8
  store i64 %45, i64* %43, align 8
  %48 = icmp eq %"class.gfx::TimingFunction"* %47, null
  br i1 %48, label %54, label %49

49:                                               ; preds = %42
  %50 = bitcast %"class.gfx::TimingFunction"* %47 to void (%"class.gfx::TimingFunction"*)***
  %51 = load void (%"class.gfx::TimingFunction"*)**, void (%"class.gfx::TimingFunction"*)*** %50, align 8
  %52 = getelementptr inbounds void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %51, i64 1
  %53 = load void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %52, align 8
  tail call void %53(%"class.gfx::TimingFunction"* nonnull %47) #13
  br label %54

54:                                               ; preds = %42, %49, %31, %37, %20, %26, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.gfx::CubicBezierTimingFunction"* @_ZN3gfx25CubicBezierTimingFunction12CreatePresetENS0_8EaseTypeE(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.gfx::LinearTimingFunction"* @_ZN3gfx20LinearTimingFunction6CreateEv() local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurveC2ERKN3gfx12ScrollOffsetENSt3__110unique_ptrINS1_14TimingFunctionENS5_14default_deleteIS7_EEEENS0_13AnimationTypeEN4absl8optionalINS0_16DurationBehaviorEEE(%"class.cc::ScrollOffsetAnimationCurve"* nocapture, %"class.gfx::ScrollOffset"* nocapture readonly dereferenceable(8), %"class.gfx::TimingFunction"*, i32, i64) unnamed_addr #0 align 2 {
  %6 = ptrtoint %"class.gfx::TimingFunction"* %2 to i64
  %7 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2cc26ScrollOffsetAnimationCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 0
  store float 0.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 1
  store float 0.000000e+00, float* %9, align 4
  %10 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %11 = bitcast %"class.gfx::ScrollOffset"* %1 to i64*
  %12 = bitcast %"class.gfx::ScrollOffset"* %10 to i64*
  %13 = load i64, i64* %11, align 4
  store i64 %13, i64* %12, align 8
  %14 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  %15 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5
  %16 = bitcast %"class.std::__1::unique_ptr"* %15 to i64*
  %17 = bitcast i64* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 16, i1 false)
  store i64 %6, i64* %16, align 8
  %18 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 6
  store i32 %3, i32* %18, align 8
  %19 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7
  %20 = bitcast %"class.absl::optional.1"* %19 to i64*
  store i64 %4, i64* %20, align 4
  %21 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 8
  store i8 0, i8* %21, align 4
  %22 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 9
  store %"class.cc::ScrollOffsetAnimationCurve::Target"* null, %"class.cc::ScrollOffsetAnimationCurve::Target"** %22, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurveD2Ev(%"class.cc::ScrollOffsetAnimationCurve"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2cc26ScrollOffsetAnimationCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %3, align 8
  store %"class.gfx::TimingFunction"* null, %"class.gfx::TimingFunction"** %3, align 8
  %5 = icmp eq %"class.gfx::TimingFunction"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.gfx::TimingFunction"* %4 to void (%"class.gfx::TimingFunction"*)***
  %8 = load void (%"class.gfx::TimingFunction"*)**, void (%"class.gfx::TimingFunction"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %8, i64 1
  %10 = load void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %9, align 8
  tail call void %10(%"class.gfx::TimingFunction"* nonnull %4) #13
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurveD0Ev(%"class.cc::ScrollOffsetAnimationCurve"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2cc26ScrollOffsetAnimationCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %3, align 8
  store %"class.gfx::TimingFunction"* null, %"class.gfx::TimingFunction"** %3, align 8
  %5 = icmp eq %"class.gfx::TimingFunction"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.gfx::TimingFunction"* %4 to void (%"class.gfx::TimingFunction"*)***
  %8 = load void (%"class.gfx::TimingFunction"*)**, void (%"class.gfx::TimingFunction"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %8, i64 1
  %10 = load void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %9, align 8
  tail call void %10(%"class.gfx::TimingFunction"* nonnull %4) #13
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.cc::ScrollOffsetAnimationCurve"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2cc26ScrollOffsetAnimationCurve24EaseInOutSegmentDurationERKN3gfx9Vector2dFENS0_16DurationBehaviorEN4base9TimeDeltaE(%"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), i32, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = load i8, i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 0), align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %44

7:                                                ; preds = %3
  switch i32 %1, label %41 [
    i32 2, label %23
    i32 0, label %8
  ]

8:                                                ; preds = %7
  %9 = bitcast %"class.gfx::Vector2dF"* %0 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %10)
  %12 = extractelement <2 x float> %11, i32 0
  %13 = extractelement <2 x float> %11, i32 1
  %14 = fcmp ogt float %12, %13
  %15 = extractelement <2 x float> %10, i32 0
  %16 = extractelement <2 x float> %10, i32 1
  %17 = select i1 %14, float %15, float %16
  %18 = tail call float @llvm.fabs.f32(float %17) #13
  %19 = tail call float @sqrtf(float %18) #13
  %20 = fcmp oge float %19, 4.200000e+01
  %21 = select i1 %20, float 4.200000e+01, float %19
  %22 = fpext float %21 to double
  br label %41

23:                                               ; preds = %7
  %24 = bitcast %"class.gfx::Vector2dF"* %0 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %25)
  %27 = extractelement <2 x float> %26, i32 0
  %28 = extractelement <2 x float> %26, i32 1
  %29 = fcmp ogt float %27, %28
  %30 = extractelement <2 x float> %25, i32 0
  %31 = extractelement <2 x float> %25, i32 1
  %32 = select i1 %29, float %30, float %31
  %33 = tail call float @llvm.fabs.f32(float %32) #13
  %34 = fpext float %33 to double
  %35 = fmul double %34, 0x3F91111111111111
  %36 = fsub double 1.400000e+01, %35
  %37 = fcmp olt double %36, 6.000000e+00
  %38 = select i1 %37, double 6.000000e+00, double %36
  %39 = fcmp ogt double %38, 1.200000e+01
  %40 = select i1 %39, double 1.200000e+01, double %38
  br label %41

41:                                               ; preds = %7, %23, %8
  %42 = phi double [ %40, %23 ], [ %22, %8 ], [ 9.000000e+00, %7 ]
  %43 = fdiv double %42, 6.000000e+01
  br label %46

44:                                               ; preds = %3
  %45 = load double, double* bitcast (i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) to double*), align 8
  br label %46

46:                                               ; preds = %44, %41
  %47 = phi double [ %43, %41 ], [ %45, %44 ]
  %48 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #13
  %49 = fmul double %47, 1.000000e+06
  %50 = fcmp ult double %49, 0xC3E0000000000000
  %51 = fcmp ugt double %49, 0x43DFFFFFFFFFFFFF
  %52 = fcmp ogt double %49, 0xC3E0000000000000
  %53 = select i1 %52, double %49, double 0xC3E0000000000000
  %54 = fptosi double %53 to i64
  %55 = select i1 %50, i64 0, i64 9223372036854775807
  %56 = select i1 %51, i64 %55, i64 %54
  %57 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %56, i64* %57, align 8
  %58 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %4, i64 %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #13
  %59 = icmp sgt i64 %58, 0
  %60 = select i1 %59, i64 %58, i64 0
  ret i64 %60
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = add i64 %1, -9223372036854775807
  %7 = icmp ult i64 %6, 2
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp sgt i64 %1, -1
  %12 = select i1 %11, i64 -9223372036854775808, i64 9223372036854775807
  %13 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %10, i64 %1) #13
  %14 = extractvalue { i64, i1 } %13, 1
  %15 = extractvalue { i64, i1 } %13, 0
  %16 = select i1 %14, i64 %12, i64 %15, !prof !3
  ret i64 %16

17:                                               ; preds = %2
  %18 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #13
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  %23 = icmp eq i64 %21, %1
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* null, i8** %19, align 8
  br label %34

25:                                               ; preds = %17
  %26 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #13
  %27 = tail call i8* @_ZN7logging15CheckOpValueStrEl(i64 %1) #13
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %26, i8* %27) #13
  %28 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  store i8* %29, i8** %19, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %34, label %31

31:                                               ; preds = %25
  %32 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #13
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i32 387, %"class.logging::CheckOpResult"* nonnull %4) #13
  %33 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #13
  br label %34

34:                                               ; preds = %24, %25, %31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #13
  %35 = icmp slt i64 %1, 0
  %36 = select i1 %35, i64 9223372036854775807, i64 -9223372036854775808
  ret i64 %36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2cc26ScrollOffsetAnimationCurve31EaseInOutBoundedSegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaES6_(%"class.cc::ScrollOffsetAnimationCurve"*, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), i64, i64) local_unnamed_addr #4 align 2 {
  %5 = tail call double @_ZN2cc26ScrollOffsetAnimationCurve17CalculateVelocityEN4base9TimeDeltaE(%"class.cc::ScrollOffsetAnimationCurve"* %0, i64 %2)
  %6 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %7 = load i8, i8* %6, align 4, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %4
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #15
  unreachable

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = tail call i64 @_ZN2cc26ScrollOffsetAnimationCurve24EaseInOutSegmentDurationERKN3gfx9Vector2dFENS0_16DurationBehaviorEN4base9TimeDeltaE(%"class.gfx::Vector2dF"* dereferenceable(8) %1, i32 %12, i64 %3)
  %14 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = extractelement <2 x float> %15, i32 0
  %17 = tail call float @llvm.fabs.f32(float %16) #13
  %18 = extractelement <2 x float> %15, i32 1
  %19 = tail call float @llvm.fabs.f32(float %18) #13
  %20 = fcmp ogt float %17, %19
  %21 = select i1 %20, float %16, float %18
  %22 = fpext float %21 to double
  %23 = tail call double @llvm.fabs.f64(double %22) #13
  %24 = fcmp olt double %23, 0x3F847AE140000000
  br i1 %24, label %41, label %25

25:                                               ; preds = %10
  %26 = tail call double @llvm.fabs.f64(double %5) #13
  %27 = fcmp olt double %26, 0x3F847AE140000000
  br i1 %27, label %41, label %28

28:                                               ; preds = %25
  %29 = fdiv double %22, %5
  %30 = fmul double %29, 2.500000e+00
  %31 = fcmp olt double %30, 0.000000e+00
  br i1 %31, label %41, label %32

32:                                               ; preds = %28
  %33 = fmul double %30, 1.000000e+06
  %34 = fcmp ult double %33, 0xC3E0000000000000
  %35 = fcmp ugt double %33, 0x43DFFFFFFFFFFFFF
  %36 = fcmp ogt double %33, 0xC3E0000000000000
  %37 = select i1 %36, double %33, double 0xC3E0000000000000
  %38 = fptosi double %37 to i64
  %39 = select i1 %34, i64 0, i64 9223372036854775807
  %40 = select i1 %35, i64 %39, i64 %38
  br label %41

41:                                               ; preds = %10, %25, %28, %32
  %42 = phi i64 [ %40, %32 ], [ 0, %10 ], [ 9223372036854775807, %25 ], [ 9223372036854775807, %28 ]
  %43 = icmp slt i64 %42, %13
  %44 = select i1 %43, i64 %42, i64 %13
  ret i64 %44
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN2cc26ScrollOffsetAnimationCurve17CalculateVelocityEN4base9TimeDeltaE(%"class.cc::ScrollOffsetAnimationCurve"*, i64) local_unnamed_addr #4 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3
  %7 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 4, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %6, i64 %8)
  %10 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %11 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %10, align 8
  %12 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = load i64, i64* %7, align 8
  %14 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %3, i64 %13)
  %15 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %14, i64* %15, align 8
  %16 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %4, i64 %9)
  %17 = bitcast %"class.gfx::TimingFunction"* %11 to double (%"class.gfx::TimingFunction"*, double)***
  %18 = load double (%"class.gfx::TimingFunction"*, double)**, double (%"class.gfx::TimingFunction"*, double)*** %17, align 8
  %19 = getelementptr inbounds double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %18, i64 4
  %20 = load double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %19, align 8
  %21 = call double %20(%"class.gfx::TimingFunction"* %11, double %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  %22 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 0
  %23 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 0
  %24 = bitcast float* %22 to <2 x float>*
  %25 = load <2 x float>, <2 x float>* %24, align 4
  %26 = bitcast float* %23 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 4
  %28 = fsub <2 x float> %25, %27
  %29 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %28)
  %30 = extractelement <2 x float> %29, i32 0
  %31 = extractelement <2 x float> %29, i32 1
  %32 = fcmp ogt float %30, %31
  %33 = extractelement <2 x float> %28, i32 0
  %34 = extractelement <2 x float> %28, i32 1
  %35 = select i1 %32, float %33, float %34
  %36 = fpext float %35 to double
  %37 = add i64 %9, -9223372036854775807
  %38 = icmp ult i64 %37, 2
  br i1 %38, label %42, label %39

39:                                               ; preds = %2
  %40 = sitofp i64 %9 to double
  %41 = fdiv double %40, 1.000000e+06
  br label %45

42:                                               ; preds = %2
  %43 = icmp slt i64 %9, 0
  %44 = select i1 %43, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %45

45:                                               ; preds = %39, %42
  %46 = phi double [ %44, %42 ], [ %41, %39 ]
  %47 = fdiv double %36, %46
  %48 = fmul double %21, %47
  ret double %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2cc26ScrollOffsetAnimationCurve15SegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaEN4absl8optionalIdEE(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readonly, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), i64, i8, double) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.base::TimeDelta", align 8
  %7 = alloca %"class.base::TimeDelta", align 8
  %8 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 6
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %94 [
    i32 1, label %10
    i32 0, label %19
    i32 2, label %56
  ]

10:                                               ; preds = %5
  %11 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 4, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %10
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #15
  unreachable

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7, i32 0, i32 0, i32 0, i32 1, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = tail call i64 @_ZN2cc26ScrollOffsetAnimationCurve24EaseInOutSegmentDurationERKN3gfx9Vector2dFENS0_16DurationBehaviorEN4base9TimeDeltaE(%"class.gfx::Vector2dF"* dereferenceable(8) %1, i32 %17, i64 %2)
  br label %95

19:                                               ; preds = %5
  %20 = icmp eq i8 %3, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %19
  tail call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #15
  unreachable

22:                                               ; preds = %19
  %23 = load i8, i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 0), align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22
  %26 = load double, double* bitcast (i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) to double*), align 8
  br label %41

27:                                               ; preds = %22
  %28 = fptrunc double %4 to float
  %29 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %30 = load <2 x float>, <2 x float>* %29, align 4
  %31 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %30)
  %32 = extractelement <2 x float> %31, i32 0
  %33 = extractelement <2 x float> %31, i32 1
  %34 = fcmp ogt float %32, %33
  %35 = extractelement <2 x float> %30, i32 0
  %36 = extractelement <2 x float> %30, i32 1
  %37 = select i1 %34, float %35, float %36
  %38 = fdiv float %37, %28
  %39 = tail call float @llvm.fabs.f32(float %38) #13
  %40 = fpext float %39 to double
  br label %41

41:                                               ; preds = %25, %27
  %42 = phi double [ %26, %25 ], [ %40, %27 ]
  %43 = bitcast %"class.base::TimeDelta"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #13
  %44 = fmul double %42, 1.000000e+06
  %45 = fcmp ult double %44, 0xC3E0000000000000
  %46 = fcmp ugt double %44, 0x43DFFFFFFFFFFFFF
  %47 = fcmp ogt double %44, 0xC3E0000000000000
  %48 = select i1 %47, double %44, double 0xC3E0000000000000
  %49 = fptosi double %48 to i64
  %50 = select i1 %45, i64 0, i64 9223372036854775807
  %51 = select i1 %46, i64 %50, i64 %49
  %52 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %7, i64 0, i32 0
  store i64 %51, i64* %52, align 8
  %53 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %7, i64 %2) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #13
  %54 = icmp sgt i64 %53, 0
  %55 = select i1 %54, i64 %53, i64 0
  br label %95

56:                                               ; preds = %5
  %57 = bitcast %"class.base::TimeDelta"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #13
  %58 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %6, i64 0, i32 0
  store i64 0, i64* %58, align 8
  %59 = load i8, i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 0), align 8, !range !2
  %60 = icmp eq i8 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %56
  %62 = load double, double* bitcast (i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) to double*), align 8
  %63 = fmul double %62, 1.000000e+06
  br label %82

64:                                               ; preds = %56
  %65 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %66)
  %68 = extractelement <2 x float> %67, i32 0
  %69 = extractelement <2 x float> %67, i32 1
  %70 = fcmp ogt float %68, %69
  %71 = extractelement <2 x float> %66, i32 0
  %72 = extractelement <2 x float> %66, i32 1
  %73 = select i1 %70, float %71, float %72
  %74 = tail call float @llvm.fabs.f32(float %73) #13
  %75 = fpext float %74 to double
  %76 = fmul double %75, 1.500000e+00
  %77 = fcmp olt double %76, 2.000000e+02
  %78 = select i1 %77, double 2.000000e+02, double %76
  %79 = fcmp ogt double %78, 5.000000e+02
  %80 = select i1 %79, double 5.000000e+02, double %78
  %81 = fmul double %80, 1.000000e+03
  br label %82

82:                                               ; preds = %61, %64
  %83 = phi double [ %63, %61 ], [ %81, %64 ]
  %84 = fcmp ult double %83, 0xC3E0000000000000
  %85 = fcmp ugt double %83, 0x43DFFFFFFFFFFFFF
  %86 = fcmp ogt double %83, 0xC3E0000000000000
  %87 = select i1 %86, double %83, double 0xC3E0000000000000
  %88 = fptosi double %87 to i64
  %89 = select i1 %84, i64 0, i64 9223372036854775807
  %90 = select i1 %85, i64 %89, i64 %88
  store i64 %90, i64* %58, align 8
  %91 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %6, i64 %2) #13
  %92 = icmp sgt i64 %91, 0
  %93 = select i1 %92, i64 %91, i64 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #13
  br label %95

94:                                               ; preds = %5
  unreachable

95:                                               ; preds = %82, %41, %15
  %96 = phi i64 [ %93, %82 ], [ %55, %41 ], [ %18, %15 ]
  ret i64 %96
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2cc26ScrollOffsetAnimationCurve21LinearSegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaEf(%"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), i64, float) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = load i8, i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 0), align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = load double, double* bitcast (i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) to double*), align 8
  br label %22

9:                                                ; preds = %3
  %10 = bitcast %"class.gfx::Vector2dF"* %0 to <2 x float>*
  %11 = load <2 x float>, <2 x float>* %10, align 4
  %12 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %11)
  %13 = extractelement <2 x float> %12, i32 0
  %14 = extractelement <2 x float> %12, i32 1
  %15 = fcmp ogt float %13, %14
  %16 = extractelement <2 x float> %11, i32 0
  %17 = extractelement <2 x float> %11, i32 1
  %18 = select i1 %15, float %16, float %17
  %19 = fdiv float %18, %2
  %20 = tail call float @llvm.fabs.f32(float %19) #13
  %21 = fpext float %20 to double
  br label %22

22:                                               ; preds = %9, %7
  %23 = phi double [ %8, %7 ], [ %21, %9 ]
  %24 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #13
  %25 = fmul double %23, 1.000000e+06
  %26 = fcmp ult double %25, 0xC3E0000000000000
  %27 = fcmp ugt double %25, 0x43DFFFFFFFFFFFFF
  %28 = fcmp ogt double %25, 0xC3E0000000000000
  %29 = select i1 %28, double %25, double 0xC3E0000000000000
  %30 = fptosi double %29 to i64
  %31 = select i1 %26, i64 0, i64 9223372036854775807
  %32 = select i1 %27, i64 %31, i64 %30
  %33 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %4, i64 %1)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #13
  %35 = icmp sgt i64 %34, 0
  %36 = select i1 %35, i64 %34, i64 0
  ret i64 %36
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN2cc26ScrollOffsetAnimationCurve22ImpulseSegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaE(%"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), i64) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = bitcast %"class.base::TimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #13
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 0, i64* %5, align 8
  %6 = load i8, i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 0), align 8, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = load double, double* bitcast (i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0) to double*), align 8
  %10 = fmul double %9, 1.000000e+06
  br label %29

11:                                               ; preds = %2
  %12 = bitcast %"class.gfx::Vector2dF"* %0 to <2 x float>*
  %13 = load <2 x float>, <2 x float>* %12, align 4
  %14 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %13)
  %15 = extractelement <2 x float> %14, i32 0
  %16 = extractelement <2 x float> %14, i32 1
  %17 = fcmp ogt float %15, %16
  %18 = extractelement <2 x float> %13, i32 0
  %19 = extractelement <2 x float> %13, i32 1
  %20 = select i1 %17, float %18, float %19
  %21 = tail call float @llvm.fabs.f32(float %20) #13
  %22 = fpext float %21 to double
  %23 = fmul double %22, 1.500000e+00
  %24 = fcmp olt double %23, 2.000000e+02
  %25 = select i1 %24, double 2.000000e+02, double %23
  %26 = fcmp ogt double %25, 5.000000e+02
  %27 = select i1 %26, double 5.000000e+02, double %25
  %28 = fmul double %27, 1.000000e+03
  br label %29

29:                                               ; preds = %11, %8
  %30 = phi double [ %28, %11 ], [ %10, %8 ]
  %31 = fcmp ult double %30, 0xC3E0000000000000
  %32 = fcmp ugt double %30, 0x43DFFFFFFFFFFFFF
  %33 = fcmp ogt double %30, 0xC3E0000000000000
  %34 = select i1 %33, double %30, double 0xC3E0000000000000
  %35 = fptosi double %34 to i64
  %36 = select i1 %31, i64 0, i64 9223372036854775807
  %37 = select i1 %32, i64 %36, i64 %35
  store i64 %37, i64* %5, align 8
  %38 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %3, i64 %1) #13
  %39 = icmp sgt i64 %38, 0
  %40 = select i1 %39, i64 %38, i64 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #13
  ret i64 %40
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurve15SetInitialValueERKN3gfx12ScrollOffsetEN4base9TimeDeltaEf(%"class.cc::ScrollOffsetAnimationCurve"* nocapture, %"class.gfx::ScrollOffset"* nocapture readonly dereferenceable(8), i64, float) local_unnamed_addr #4 align 2 {
  %5 = alloca <2 x float>, align 8
  %6 = bitcast <2 x float>* %5 to %"class.gfx::Vector2dF"*
  %7 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %8 = bitcast %"class.gfx::ScrollOffset"* %1 to i64*
  %9 = bitcast %"class.gfx::ScrollOffset"* %7 to i64*
  %10 = load i64, i64* %8, align 4
  store i64 %10, i64* %9, align 8
  %11 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 8
  store i8 1, i8* %11, align 4
  %12 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 0
  %14 = bitcast float* %13 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = bitcast %"class.gfx::ScrollOffset"* %1 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 4
  %18 = fsub <2 x float> %15, %17
  store <2 x float> %18, <2 x float>* %5, align 8
  %19 = fpext float %3 to double
  %20 = call i64 @_ZN2cc26ScrollOffsetAnimationCurve15SegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaEN4absl8optionalIdEE(%"class.cc::ScrollOffsetAnimationCurve"* %0, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %6, i64 %2, i8 1, double %19)
  %21 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  store i64 %20, i64* %21, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc26ScrollOffsetAnimationCurve18HasSetInitialValueEv(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 8
  %3 = load i8, i8* %2, align 4, !range !2
  %4 = icmp ne i8 %3, 0
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurve15ApplyAdjustmentERKN3gfx9Vector2dFE(%"class.cc::ScrollOffsetAnimationCurve"* nocapture, %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %4 = bitcast %"class.gfx::ScrollOffset"* %3 to <2 x float>*
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = fadd <2 x float> %5, %7
  %9 = bitcast %"class.gfx::ScrollOffset"* %3 to <2 x float>*
  store <2 x float> %8, <2 x float>* %9, align 8
  %10 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %11 = bitcast %"class.gfx::ScrollOffset"* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = bitcast %"class.gfx::Vector2dF"* %1 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = fadd <2 x float> %12, %14
  %16 = bitcast %"class.gfx::ScrollOffset"* %10 to <2 x float>*
  store <2 x float> %15, <2 x float>* %16, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden <2 x float> @_ZNK2cc26ScrollOffsetAnimationCurve8GetValueEN4base9TimeDeltaE(%"class.cc::ScrollOffsetAnimationCurve"*, i64) local_unnamed_addr #4 align 2 {
  %3 = alloca %"class.base::TimeDelta", align 8
  %4 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %3, i64 0, i32 0
  store i64 %1, i64* %4, align 8
  %5 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3
  %6 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 4, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %5, i64 %7)
  %9 = load i64, i64* %6, align 8
  %10 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %3, i64 %9) #13
  store i64 %10, i64* %4, align 8
  %11 = icmp eq i64 %8, 0
  %12 = icmp sge i64 %10, %8
  %13 = or i1 %11, %12
  br i1 %13, label %14, label %18

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %16 = bitcast %"class.gfx::ScrollOffset"* %15 to <2 x float>*
  %17 = load <2 x float>, <2 x float>* %16, align 8
  br label %45

18:                                               ; preds = %2
  %19 = icmp slt i64 %10, 1
  br i1 %19, label %20, label %24

20:                                               ; preds = %18
  %21 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %22 = bitcast %"class.gfx::ScrollOffset"* %21 to <2 x float>*
  %23 = load <2 x float>, <2 x float>* %22, align 8
  br label %45

24:                                               ; preds = %18
  %25 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %26 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %25, align 8
  %27 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %3, i64 %8)
  %28 = bitcast %"class.gfx::TimingFunction"* %26 to double (%"class.gfx::TimingFunction"*, double)***
  %29 = load double (%"class.gfx::TimingFunction"*, double)**, double (%"class.gfx::TimingFunction"*, double)*** %28, align 8
  %30 = getelementptr inbounds double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %29, i64 3
  %31 = load double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %30, align 8
  %32 = call double %31(%"class.gfx::TimingFunction"* %26, double %27) #13
  %33 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 0
  %34 = load float, float* %33, align 4
  %35 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 0
  %36 = load float, float* %35, align 4
  %37 = call float @_ZN3gfx5Tween17FloatValueBetweenEdff(double %32, float %34, float %36) #13
  %38 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 1
  %39 = load float, float* %38, align 4
  %40 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 1
  %41 = load float, float* %40, align 4
  %42 = call float @_ZN3gfx5Tween17FloatValueBetweenEdff(double %32, float %39, float %41) #13
  %43 = insertelement <2 x float> undef, float %37, i32 0
  %44 = insertelement <2 x float> %43, float %42, i32 1
  br label %45

45:                                               ; preds = %24, %20, %14
  %46 = phi <2 x float> [ %17, %14 ], [ %23, %20 ], [ %44, %24 ]
  ret <2 x float> %46
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %0, i64 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = or i64 %6, %1
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %2
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i32 302, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0)) #13
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #13
  %12 = load i64, i64* %5, align 8
  br label %13

13:                                               ; preds = %2, %9
  %14 = phi i64 [ %6, %2 ], [ %12, %9 ]
  %15 = add i64 %14, -9223372036854775807
  %16 = add i64 %1, -9223372036854775807
  %17 = or i64 %15, %16
  %18 = icmp ult i64 %17, 2
  br i1 %18, label %19, label %24

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i32 303, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0)) #13
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #13
  %22 = load i64, i64* %5, align 8
  %23 = add i64 %22, -9223372036854775807
  br label %24

24:                                               ; preds = %13, %19
  %25 = phi i64 [ %15, %13 ], [ %23, %19 ]
  %26 = phi i64 [ %14, %13 ], [ %22, %19 ]
  %27 = icmp ult i64 %25, 2
  %28 = icmp slt i64 %26, 0
  %29 = select i1 %28, double 0xFFF0000000000000, double 0x7FF0000000000000
  %30 = sitofp i64 %26 to double
  %31 = select i1 %27, double %29, double %30
  %32 = icmp ult i64 %16, 2
  %33 = icmp slt i64 %1, 0
  %34 = select i1 %33, double 0xFFF0000000000000, double 0x7FF0000000000000
  %35 = sitofp i64 %1 to double
  %36 = select i1 %32, double %34, double %35
  %37 = fdiv double %31, %36
  ret double %37
}

declare float @_ZN3gfx5Tween17FloatValueBetweenEdff(double, float, float) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK2cc26ScrollOffsetAnimationCurve8DurationEv(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readonly) unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_ZNK2cc26ScrollOffsetAnimationCurve4TypeEv(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readnone) unnamed_addr #7 align 2 {
  ret i32 6
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_ZNK2cc26ScrollOffsetAnimationCurve8TypeNameEv(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readnone) unnamed_addr #7 align 2 {
  ret i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.gfx::AnimationCurve"* @_ZNK2cc26ScrollOffsetAnimationCurve5CloneEv(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %3 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %2, align 8
  %4 = bitcast %"class.gfx::TimingFunction"* %3 to %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)***
  %5 = load %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)**, %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)*, %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)** %5, i64 5
  %7 = load %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)*, %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)** %6, align 8
  %8 = tail call %"class.gfx::TimingFunction"* %7(%"class.gfx::TimingFunction"* %3) #13
  %9 = ptrtoint %"class.gfx::TimingFunction"* %8 to i64
  %10 = tail call i8* @_Znwm(i64 72) #14
  %11 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7
  %14 = bitcast %"class.absl::optional.1"* %13 to i64*
  %15 = load i64, i64* %14, align 4
  %16 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2cc26ScrollOffsetAnimationCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %16, align 8
  %17 = getelementptr inbounds i8, i8* %10, i64 8
  %18 = getelementptr inbounds i8, i8* %10, i64 24
  %19 = getelementptr inbounds i8, i8* %10, i64 40
  %20 = bitcast i8* %19 to i64*
  store i64 %9, i64* %20, align 8
  %21 = getelementptr inbounds i8, i8* %10, i64 48
  %22 = bitcast i8* %21 to i32*
  store i32 %12, i32* %22, align 8
  %23 = getelementptr inbounds i8, i8* %10, i64 52
  %24 = bitcast i8* %23 to i64*
  store i64 %15, i64* %24, align 4
  %25 = getelementptr inbounds i8, i8* %10, i64 60
  %26 = getelementptr inbounds i8, i8* %10, i64 64
  %27 = bitcast i8* %26 to %"class.cc::ScrollOffsetAnimationCurve::Target"**
  store %"class.cc::ScrollOffsetAnimationCurve::Target"* null, %"class.cc::ScrollOffsetAnimationCurve::Target"** %27, align 8
  %28 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %29 = bitcast %"class.gfx::ScrollOffset"* %28 to <2 x i64>*
  %30 = load <2 x i64>, <2 x i64>* %29, align 4
  %31 = bitcast i8* %17 to <2 x i64>*
  store <2 x i64> %30, <2 x i64>* %31, align 8
  %32 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  %33 = bitcast i64* %32 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 8
  %35 = bitcast i8* %18 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %35, align 8
  %36 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 8
  %37 = load i8, i8* %36, align 4, !range !2
  store i8 %37, i8* %25, align 4
  %38 = bitcast i8* %10 to %"class.gfx::AnimationCurve"*
  ret %"class.gfx::AnimationCurve"* %38
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.cc::ScrollOffsetAnimationCurve"* @_ZNK2cc26ScrollOffsetAnimationCurve33CloneToScrollOffsetAnimationCurveEv(%"class.cc::ScrollOffsetAnimationCurve"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %3 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %2, align 8
  %4 = bitcast %"class.gfx::TimingFunction"* %3 to %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)***
  %5 = load %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)**, %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)*** %4, align 8
  %6 = getelementptr inbounds %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)*, %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)** %5, i64 5
  %7 = load %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)*, %"class.gfx::TimingFunction"* (%"class.gfx::TimingFunction"*)** %6, align 8
  %8 = tail call %"class.gfx::TimingFunction"* %7(%"class.gfx::TimingFunction"* %3) #13
  %9 = ptrtoint %"class.gfx::TimingFunction"* %8 to i64
  %10 = tail call i8* @_Znwm(i64 72) #14
  %11 = bitcast i8* %10 to %"class.cc::ScrollOffsetAnimationCurve"*
  %12 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 6
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 7
  %15 = bitcast %"class.absl::optional.1"* %14 to i64*
  %16 = load i64, i64* %15, align 4
  %17 = bitcast i8* %10 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN2cc26ScrollOffsetAnimationCurveE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %17, align 8
  %18 = getelementptr inbounds i8, i8* %10, i64 8
  %19 = getelementptr inbounds i8, i8* %10, i64 24
  %20 = getelementptr inbounds i8, i8* %10, i64 40
  %21 = bitcast i8* %20 to i64*
  store i64 %9, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %10, i64 48
  %23 = bitcast i8* %22 to i32*
  store i32 %13, i32* %23, align 8
  %24 = getelementptr inbounds i8, i8* %10, i64 52
  %25 = bitcast i8* %24 to i64*
  store i64 %16, i64* %25, align 4
  %26 = getelementptr inbounds i8, i8* %10, i64 60
  %27 = getelementptr inbounds i8, i8* %10, i64 64
  %28 = bitcast i8* %27 to %"class.cc::ScrollOffsetAnimationCurve::Target"**
  store %"class.cc::ScrollOffsetAnimationCurve::Target"* null, %"class.cc::ScrollOffsetAnimationCurve::Target"** %28, align 8
  %29 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %30 = bitcast %"class.gfx::ScrollOffset"* %29 to <2 x i64>*
  %31 = load <2 x i64>, <2 x i64>* %30, align 4
  %32 = bitcast i8* %18 to <2 x i64>*
  store <2 x i64> %31, <2 x i64>* %32, align 8
  %33 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  %34 = bitcast i64* %33 to <2 x i64>*
  %35 = load <2 x i64>, <2 x i64>* %34, align 8
  %36 = bitcast i8* %19 to <2 x i64>*
  store <2 x i64> %35, <2 x i64>* %36, align 8
  %37 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 8
  %38 = load i8, i8* %37, align 4, !range !2
  store i8 %38, i8* %26, align 4
  ret %"class.cc::ScrollOffsetAnimationCurve"* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc26ScrollOffsetAnimationCurve4TickEN4base9TimeDeltaEiPN3gfx13KeyframeModelE(%"class.cc::ScrollOffsetAnimationCurve"*, i64, i32, %"class.gfx::KeyframeModel"*) unnamed_addr #4 align 2 {
  %5 = alloca %"class.base::TimeDelta", align 8
  %6 = alloca <2 x float>, align 8
  %7 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 9
  %8 = load %"class.cc::ScrollOffsetAnimationCurve::Target"*, %"class.cc::ScrollOffsetAnimationCurve::Target"** %7, align 8
  %9 = icmp eq %"class.cc::ScrollOffsetAnimationCurve::Target"* %8, null
  br i1 %9, label %60, label %10

10:                                               ; preds = %4
  %11 = bitcast <2 x float>* %6 to %"class.gfx::ScrollOffset"*
  %12 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  %13 = bitcast %"class.base::TimeDelta"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %5, i64 0, i32 0
  store i64 %1, i64* %14, align 8
  %15 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3
  %16 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 4, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %15, i64 %17) #13
  %19 = load i64, i64* %16, align 8
  %20 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %5, i64 %19) #13
  store i64 %20, i64* %14, align 8
  %21 = icmp eq i64 %18, 0
  %22 = icmp sge i64 %20, %18
  %23 = or i1 %21, %22
  br i1 %23, label %24, label %28

24:                                               ; preds = %10
  %25 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %26 = bitcast %"class.gfx::ScrollOffset"* %25 to <2 x float>*
  %27 = load <2 x float>, <2 x float>* %26, align 8
  br label %55

28:                                               ; preds = %10
  %29 = icmp slt i64 %20, 1
  br i1 %29, label %30, label %34

30:                                               ; preds = %28
  %31 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %32 = bitcast %"class.gfx::ScrollOffset"* %31 to <2 x float>*
  %33 = load <2 x float>, <2 x float>* %32, align 8
  br label %55

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %36 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %35, align 8
  %37 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %5, i64 %18) #13
  %38 = bitcast %"class.gfx::TimingFunction"* %36 to double (%"class.gfx::TimingFunction"*, double)***
  %39 = load double (%"class.gfx::TimingFunction"*, double)**, double (%"class.gfx::TimingFunction"*, double)*** %38, align 8
  %40 = getelementptr inbounds double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %39, i64 3
  %41 = load double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %40, align 8
  %42 = call double %41(%"class.gfx::TimingFunction"* %36, double %37) #13
  %43 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 0
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 0
  %46 = load float, float* %45, align 4
  %47 = call float @_ZN3gfx5Tween17FloatValueBetweenEdff(double %42, float %44, float %46) #13
  %48 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 1
  %49 = load float, float* %48, align 4
  %50 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 1
  %51 = load float, float* %50, align 4
  %52 = call float @_ZN3gfx5Tween17FloatValueBetweenEdff(double %42, float %49, float %51) #13
  %53 = insertelement <2 x float> undef, float %47, i32 0
  %54 = insertelement <2 x float> %53, float %52, i32 1
  br label %55

55:                                               ; preds = %24, %30, %34
  %56 = phi <2 x float> [ %27, %24 ], [ %33, %30 ], [ %54, %34 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  store <2 x float> %56, <2 x float>* %6, align 8
  %57 = bitcast %"class.cc::ScrollOffsetAnimationCurve::Target"* %8 to void (%"class.cc::ScrollOffsetAnimationCurve::Target"*, %"class.gfx::ScrollOffset"*, i32, %"class.gfx::KeyframeModel"*)***
  %58 = load void (%"class.cc::ScrollOffsetAnimationCurve::Target"*, %"class.gfx::ScrollOffset"*, i32, %"class.gfx::KeyframeModel"*)**, void (%"class.cc::ScrollOffsetAnimationCurve::Target"*, %"class.gfx::ScrollOffset"*, i32, %"class.gfx::KeyframeModel"*)*** %57, align 8
  %59 = load void (%"class.cc::ScrollOffsetAnimationCurve::Target"*, %"class.gfx::ScrollOffset"*, i32, %"class.gfx::KeyframeModel"*)*, void (%"class.cc::ScrollOffsetAnimationCurve::Target"*, %"class.gfx::ScrollOffset"*, i32, %"class.gfx::KeyframeModel"*)** %58, align 8
  call void %59(%"class.cc::ScrollOffsetAnimationCurve::Target"* nonnull %8, %"class.gfx::ScrollOffset"* nonnull dereferenceable(8) %11, i32 %2, %"class.gfx::KeyframeModel"* %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  br label %60

60:                                               ; preds = %4, %55
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurve30SetAnimationDurationForTestingEN4base9TimeDeltaE(i64) local_unnamed_addr #0 align 2 {
  %2 = alloca [7 x i8], align 1
  %3 = getelementptr inbounds [7 x i8], [7 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %3)
  %4 = add i64 %0, -9223372036854775807
  %5 = icmp ult i64 %4, 2
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = sitofp i64 %0 to double
  %8 = fdiv double %7, 1.000000e+06
  br label %12

9:                                                ; preds = %1
  %10 = icmp slt i64 %0, 0
  %11 = select i1 %10, double 0xFFF0000000000000, double 0x7FF0000000000000
  br label %12

12:                                               ; preds = %6, %9
  %13 = phi double [ %11, %9 ], [ %8, %6 ]
  store i8 1, i8* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 0), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 1, i64 0), i8* nonnull align 1 %3, i64 7, i1 false)
  store double %13, double* bitcast ({ { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } }* getelementptr inbounds ({ i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }, { i8, [7 x i8], { { <{ %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct", %"struct.absl::optional_internal::empty_struct" }> } } }* @_ZN2cc26ScrollOffsetAnimationCurve31animation_duration_for_testing_E, i64 0, i32 2) to double*), align 8
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc26ScrollOffsetAnimationCurve12UpdateTargetEN4base9TimeDeltaERKN3gfx12ScrollOffsetE(%"class.cc::ScrollOffsetAnimationCurve"*, i64, %"class.gfx::ScrollOffset"* nocapture readonly dereferenceable(8)) local_unnamed_addr #4 align 2 {
  %4 = alloca %"class.base::TimeDelta", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = alloca i64, align 8
  %7 = alloca <2 x float>, align 8
  %8 = bitcast <2 x float>* %7 to %"class.gfx::Vector2dF"*
  store i64 %1, i64* %6, align 8
  %9 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 6
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %220, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 4
  %14 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %13, i64 %1)
  %15 = icmp sgt i64 %14, 0
  %16 = select i1 %15, i64 %14, i64 0
  %17 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %13, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp sgt i64 %18, %1
  %20 = bitcast i64* %6 to %"class.base::TimeDelta"*
  %21 = select i1 %19, %"class.base::TimeDelta"* %13, %"class.base::TimeDelta"* %20
  %22 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %21, i64 0, i32 0
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %6, align 8
  %24 = load i32, i32* %9, align 8
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %46

26:                                               ; preds = %12
  %27 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %28 = bitcast %"class.gfx::ScrollOffset"* %27 to <2 x float>*
  %29 = load <2 x float>, <2 x float>* %28, align 4
  %30 = bitcast %"class.gfx::ScrollOffset"* %2 to <2 x float>*
  %31 = load <2 x float>, <2 x float>* %30, align 4
  %32 = fsub <2 x float> %29, %31
  %33 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %32)
  %34 = extractelement <2 x float> %33, i32 0
  %35 = extractelement <2 x float> %33, i32 1
  %36 = fcmp ogt float %34, %35
  %37 = extractelement <2 x float> %32, i32 0
  %38 = extractelement <2 x float> %32, i32 1
  %39 = select i1 %36, float %37, float %38
  %40 = tail call float @llvm.fabs.f32(float %39) #13
  %41 = fcmp olt float %40, 0x3F847AE140000000
  br i1 %41, label %42, label %46

42:                                               ; preds = %26
  %43 = bitcast %"class.gfx::ScrollOffset"* %2 to i64*
  %44 = bitcast %"class.gfx::ScrollOffset"* %27 to i64*
  %45 = load i64, i64* %43, align 4
  store i64 %45, i64* %44, align 8
  br label %220

46:                                               ; preds = %12, %26
  %47 = bitcast %"class.base::TimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47)
  %48 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %4, i64 0, i32 0
  store i64 %23, i64* %48, align 8
  %49 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3
  %50 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 4, i32 0
  %51 = tail call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %49, i64 %18) #13
  %52 = load i64, i64* %50, align 8
  %53 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* nonnull %4, i64 %52) #13
  store i64 %53, i64* %48, align 8
  %54 = icmp eq i64 %51, 0
  %55 = icmp sge i64 %53, %51
  %56 = or i1 %54, %55
  br i1 %56, label %57, label %61

57:                                               ; preds = %46
  %58 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %59 = bitcast %"class.gfx::ScrollOffset"* %58 to <2 x float>*
  %60 = load <2 x float>, <2 x float>* %59, align 8
  br label %88

61:                                               ; preds = %46
  %62 = icmp slt i64 %53, 1
  br i1 %62, label %63, label %67

63:                                               ; preds = %61
  %64 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %65 = bitcast %"class.gfx::ScrollOffset"* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 8
  br label %88

67:                                               ; preds = %61
  %68 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %69 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %68, align 8
  %70 = call double @_ZNK4base9TimeDeltadvES0_(%"class.base::TimeDelta"* nonnull %4, i64 %51) #13
  %71 = bitcast %"class.gfx::TimingFunction"* %69 to double (%"class.gfx::TimingFunction"*, double)***
  %72 = load double (%"class.gfx::TimingFunction"*, double)**, double (%"class.gfx::TimingFunction"*, double)*** %71, align 8
  %73 = getelementptr inbounds double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %72, i64 3
  %74 = load double (%"class.gfx::TimingFunction"*, double)*, double (%"class.gfx::TimingFunction"*, double)** %73, align 8
  %75 = call double %74(%"class.gfx::TimingFunction"* %69, double %70) #13
  %76 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 0
  %77 = load float, float* %76, align 4
  %78 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 0
  %79 = load float, float* %78, align 4
  %80 = call float @_ZN3gfx5Tween17FloatValueBetweenEdff(double %75, float %77, float %79) #13
  %81 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1, i32 1
  %82 = load float, float* %81, align 4
  %83 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 1
  %84 = load float, float* %83, align 4
  %85 = call float @_ZN3gfx5Tween17FloatValueBetweenEdff(double %75, float %82, float %84) #13
  %86 = insertelement <2 x float> undef, float %80, i32 0
  %87 = insertelement <2 x float> %86, float %85, i32 1
  br label %88

88:                                               ; preds = %57, %63, %67
  %89 = phi <2 x float> [ %60, %57 ], [ %66, %63 ], [ %87, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47)
  %90 = bitcast <2 x float>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #13
  %91 = getelementptr inbounds %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset"* %2, i64 0, i32 0
  %92 = load float, float* %91, align 4
  %93 = extractelement <2 x float> %89, i32 0
  %94 = fsub float %92, %93
  %95 = getelementptr inbounds %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset"* %2, i64 0, i32 1
  %96 = load float, float* %95, align 4
  %97 = extractelement <2 x float> %89, i32 1
  %98 = fsub float %96, %97
  %99 = insertelement <2 x float> undef, float %94, i32 0
  %100 = insertelement <2 x float> %99, float %98, i32 1
  store <2 x float> %100, <2 x float>* %7, align 8
  %101 = call float @llvm.fabs.f32(float %94) #13
  %102 = call float @llvm.fabs.f32(float %98) #13
  %103 = fcmp ogt float %101, %102
  %104 = select i1 %103, float %94, float %98
  %105 = call float @llvm.fabs.f32(float %104) #13
  %106 = fcmp olt float %105, 0x3F847AE140000000
  br i1 %106, label %107, label %113

107:                                              ; preds = %88
  store i64 %23, i64* %17, align 8
  %108 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  store i64 %23, i64* %108, align 8
  %109 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %110 = bitcast %"class.gfx::ScrollOffset"* %2 to i64*
  %111 = bitcast %"class.gfx::ScrollOffset"* %109 to i64*
  %112 = load i64, i64* %110, align 4
  store i64 %112, i64* %111, align 8
  br label %219

113:                                              ; preds = %88
  %114 = load i64, i64* %50, align 8
  %115 = call i64 @_ZNK4base9TimeDeltamiES0_(%"class.base::TimeDelta"* %49, i64 %114)
  %116 = icmp eq i64 %115, 0
  br i1 %116, label %117, label %124

117:                                              ; preds = %113
  %118 = call i64 @_ZN2cc26ScrollOffsetAnimationCurve15SegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaEN4absl8optionalIdEE(%"class.cc::ScrollOffsetAnimationCurve"* %0, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %8, i64 %16, i8 0, double undef)
  %119 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %121 = bitcast %"class.gfx::ScrollOffset"* %2 to i64*
  %122 = bitcast %"class.gfx::ScrollOffset"* %120 to i64*
  %123 = load i64, i64* %121, align 4
  store i64 %123, i64* %122, align 8
  br label %219

124:                                              ; preds = %113
  %125 = call i64 @_ZN2cc26ScrollOffsetAnimationCurve31EaseInOutBoundedSegmentDurationERKN3gfx9Vector2dFEN4base9TimeDeltaES6_(%"class.cc::ScrollOffsetAnimationCurve"* %0, %"class.gfx::Vector2dF"* nonnull dereferenceable(8) %8, i64 %23, i64 %16)
  %126 = add i64 %125, -9223372036854775807
  %127 = icmp ult i64 %126, 2
  br i1 %127, label %128, label %130

128:                                              ; preds = %124
  %129 = icmp slt i64 %125, 0
  br i1 %129, label %134, label %140

130:                                              ; preds = %124
  %131 = sitofp i64 %125 to double
  %132 = fdiv double %131, 1.000000e+06
  %133 = fcmp olt double %132, 0x3F847AE140000000
  br i1 %133, label %134, label %140

134:                                              ; preds = %128, %130
  %135 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %136 = bitcast %"class.gfx::ScrollOffset"* %2 to i64*
  %137 = bitcast %"class.gfx::ScrollOffset"* %135 to i64*
  %138 = load i64, i64* %136, align 4
  store i64 %138, i64* %137, align 8
  %139 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %49, i64 0, i32 0
  store i64 %23, i64* %139, align 8
  br label %219

140:                                              ; preds = %128, %130
  %141 = phi double [ %132, %130 ], [ 0x7FF0000000000000, %128 ]
  %142 = call double @_ZN2cc26ScrollOffsetAnimationCurve17CalculateVelocityEN4base9TimeDeltaE(%"class.cc::ScrollOffsetAnimationCurve"* %0, i64 %23)
  %143 = fpext float %104 to double
  %144 = fdiv double %141, %143
  %145 = fmul double %142, %144
  %146 = load i32, i32* %9, align 8
  %147 = icmp eq i32 %146, 2
  br i1 %147, label %148, label %175

148:                                              ; preds = %140
  %149 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 0
  %150 = load float, float* %149, align 4
  %151 = fsub float %150, %93
  %152 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2, i32 1
  %153 = load float, float* %152, align 4
  %154 = fsub float %153, %97
  %155 = load float, float* %91, align 4
  %156 = fsub float %155, %93
  %157 = load float, float* %95, align 4
  %158 = fsub float %157, %97
  %159 = fsub float %151, %156
  %160 = call float @llvm.fabs.f32(float %159) #13
  %161 = fcmp olt float %160, 0x3F847AE140000000
  br i1 %161, label %162, label %166

162:                                              ; preds = %148
  %163 = fcmp oge float %154, 0.000000e+00
  %164 = fcmp oge float %158, 0.000000e+00
  %165 = xor i1 %163, %164
  br i1 %165, label %174, label %175

166:                                              ; preds = %148
  %167 = fsub float %154, %158
  %168 = call float @llvm.fabs.f32(float %167) #13
  %169 = fcmp olt float %168, 0x3F847AE140000000
  br i1 %169, label %170, label %175

170:                                              ; preds = %166
  %171 = fcmp oge float %151, 0.000000e+00
  %172 = fcmp oge float %156, 0.000000e+00
  %173 = xor i1 %171, %172
  br i1 %173, label %174, label %175

174:                                              ; preds = %162, %170
  br label %175

175:                                              ; preds = %166, %174, %170, %162, %140
  %176 = phi double [ %145, %140 ], [ 0.000000e+00, %174 ], [ %145, %170 ], [ %145, %162 ], [ %145, %166 ]
  %177 = fcmp olt double %176, -1.000000e+03
  %178 = select i1 %177, double -1.000000e+03, double %176
  %179 = fcmp ogt double %178, 1.000000e+03
  %180 = select i1 %179, double 1.000000e+03, double %178
  %181 = fmul double %180, 4.200000e-01
  %182 = call %"class.gfx::CubicBezierTimingFunction"* @_ZN3gfx25CubicBezierTimingFunction6CreateEdddd(double 4.200000e-01, double %181, double 5.800000e-01, double 1.000000e+00) #13
  %183 = ptrtoint %"class.gfx::CubicBezierTimingFunction"* %182 to i64
  %184 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 5
  %185 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %184, i64 0, i32 0, i32 0, i32 0
  %186 = load %"class.gfx::TimingFunction"*, %"class.gfx::TimingFunction"** %185, align 8
  %187 = bitcast %"class.std::__1::unique_ptr"* %184 to i64*
  store i64 %183, i64* %187, align 8
  %188 = icmp eq %"class.gfx::TimingFunction"* %186, null
  br i1 %188, label %194, label %189

189:                                              ; preds = %175
  %190 = bitcast %"class.gfx::TimingFunction"* %186 to void (%"class.gfx::TimingFunction"*)***
  %191 = load void (%"class.gfx::TimingFunction"*)**, void (%"class.gfx::TimingFunction"*)*** %190, align 8
  %192 = getelementptr inbounds void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %191, i64 1
  %193 = load void (%"class.gfx::TimingFunction"*)*, void (%"class.gfx::TimingFunction"*)** %192, align 8
  call void %193(%"class.gfx::TimingFunction"* nonnull %186) #13
  br label %194

194:                                              ; preds = %189, %175
  %195 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 1
  %196 = bitcast %"class.gfx::ScrollOffset"* %195 to <2 x float>*
  store <2 x float> %89, <2 x float>* %196, align 8
  %197 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 2
  %198 = bitcast %"class.gfx::ScrollOffset"* %2 to i64*
  %199 = bitcast %"class.gfx::ScrollOffset"* %197 to i64*
  %200 = load i64, i64* %198, align 4
  store i64 %200, i64* %199, align 8
  br i1 %127, label %208, label %201

201:                                              ; preds = %194
  %202 = icmp slt i64 %125, 0
  %203 = select i1 %202, i64 -9223372036854775808, i64 9223372036854775807
  %204 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %23, i64 %125) #13
  %205 = extractvalue { i64, i1 } %204, 1
  %206 = extractvalue { i64, i1 } %204, 0
  %207 = select i1 %205, i64 %203, i64 %206, !prof !3
  br label %216

208:                                              ; preds = %194
  %209 = add i64 %23, -9223372036854775807
  %210 = icmp ugt i64 %209, 1
  %211 = icmp eq i64 %23, %125
  %212 = or i1 %210, %211
  br i1 %212, label %216, label %213

213:                                              ; preds = %208
  %214 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %214) #13
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0)) #13
  %215 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #13
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %214) #13
  br label %216

216:                                              ; preds = %201, %208, %213
  %217 = phi i64 [ %207, %201 ], [ 9223372036854775807, %208 ], [ 9223372036854775807, %213 ]
  %218 = getelementptr inbounds %"class.cc::ScrollOffsetAnimationCurve", %"class.cc::ScrollOffsetAnimationCurve"* %0, i64 0, i32 3, i32 0
  store i64 %217, i64* %218, align 8
  store i64 %23, i64* %17, align 8
  br label %219

219:                                              ; preds = %117, %216, %134, %107
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #13
  br label %220

220:                                              ; preds = %42, %219, %3
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.cc::ScrollOffsetAnimationCurve"* @_ZN2cc26ScrollOffsetAnimationCurve28ToScrollOffsetAnimationCurveEPKN3gfx14AnimationCurveE(%"class.gfx::AnimationCurve"* readnone) local_unnamed_addr #7 align 2 {
  %2 = bitcast %"class.gfx::AnimationCurve"* %0 to %"class.cc::ScrollOffsetAnimationCurve"*
  ret %"class.cc::ScrollOffsetAnimationCurve"* %2
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %"class.cc::ScrollOffsetAnimationCurve"* @_ZN2cc26ScrollOffsetAnimationCurve28ToScrollOffsetAnimationCurveEPN3gfx14AnimationCurveE(%"class.gfx::AnimationCurve"* readnone) local_unnamed_addr #7 align 2 {
  %2 = bitcast %"class.gfx::AnimationCurve"* %0 to %"class.cc::ScrollOffsetAnimationCurve"*
  ret %"class.cc::ScrollOffsetAnimationCurve"* %2
}

declare zeroext i1 @_ZNK3gfx14AnimationCurve22PreservesAxisAlignmentEv(%"class.gfx::AnimationCurve"*) unnamed_addr #2

declare zeroext i1 @_ZNK3gfx14AnimationCurve12MaximumScaleEPf(%"class.gfx::AnimationCurve"*, float*) unnamed_addr #2

declare i64 @_ZNK3gfx14AnimationCurve12TickIntervalEv(%"class.gfx::AnimationCurve"*) unnamed_addr #2

declare %"class.gfx::CubicBezierTimingFunction"* @_ZN3gfx25CubicBezierTimingFunction6CreateEdddd(double, double, double, double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #10

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #11

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #10

declare i8* @_ZN7logging15CheckOpValueStrEl(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #10

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #10

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #12

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { builtin nounwind }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
