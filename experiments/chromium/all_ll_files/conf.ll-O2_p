; ModuleID = '../../third_party/boringssl/src/crypto/conf/conf.c'
source_filename = "../../third_party/boringssl/src/crypto/conf/conf.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.conf_st = type { %struct.lhash_st_CONF_VALUE* }
%struct.lhash_st_CONF_VALUE = type opaque
%struct.lhash_st = type opaque
%struct.conf_value_st = type { i8*, i8*, i8* }
%struct.LHASH_DOALL_CONF_VALUE = type { void (%struct.conf_value_st*)*, void (%struct.conf_value_st*, i8*)*, i8* }
%struct.stack_st_CONF_VALUE = type opaque
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%struct.buf_mem_st = type { i64, i8*, i64 }

@.str = private unnamed_addr constant [51 x i8] c"../../third_party/boringssl/src/crypto/conf/conf.c\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@CONF_type_default = internal unnamed_addr constant [256 x i16] [i16 8, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 16, i16 16, i16 0, i16 0, i16 16, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 16, i16 512, i16 64, i16 128, i16 0, i16 512, i16 512, i16 64, i16 0, i16 0, i16 512, i16 512, i16 512, i16 512, i16 512, i16 512, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 0, i16 512, i16 0, i16 0, i16 0, i16 512, i16 512, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 0, i16 32, i16 0, i16 512, i16 256, i16 64, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 0, i16 512, i16 0, i16 512, i16 0, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096, i16 4096], align 16
@.str.3 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"line \00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.conf_st* @NCONF_new(i8* readnone) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %3, label %12

3:                                                ; preds = %1
  %4 = tail call i8* @OPENSSL_malloc(i64 8) #9
  %5 = icmp eq i8* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %3
  %7 = bitcast i8* %4 to %struct.conf_st*
  %8 = tail call %struct.lhash_st* @lh_new(i32 (i8*)* bitcast (i32 (%struct.conf_value_st*)* @conf_value_hash to i32 (i8*)*), i32 (i8*, i8*)* bitcast (i32 (%struct.conf_value_st*, %struct.conf_value_st*)* @conf_value_cmp to i32 (i8*, i8*)*)) #9
  %9 = bitcast i8* %4 to %struct.lhash_st**
  store %struct.lhash_st* %8, %struct.lhash_st** %9, align 8
  %10 = icmp eq %struct.lhash_st* %8, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %6
  tail call void @OPENSSL_free(i8* nonnull %4) #9
  br label %12

12:                                               ; preds = %6, %3, %1, %11
  %13 = phi %struct.conf_st* [ null, %11 ], [ null, %1 ], [ null, %3 ], [ %7, %6 ]
  ret %struct.conf_st* %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @conf_value_hash(%struct.conf_value_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = tail call i32 @lh_strhash(i8* %3) #9
  %5 = shl i32 %4, 2
  %6 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i32 @lh_strhash(i8* %7) #9
  %9 = xor i32 %8, %5
  ret i32 %9
}

; Function Attrs: nounwind readonly ssp uwtable
define internal i32 @conf_value_cmp(%struct.conf_value_st* nocapture readonly, %struct.conf_value_st* nocapture readonly) #3 {
  %3 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %1, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = tail call i32 @strcmp(i8* %4, i8* %6) #10
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %26

11:                                               ; preds = %8, %2
  %12 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %13, null
  %15 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %1, i64 0, i32 1
  %16 = load i8*, i8** %15, align 8
  br i1 %14, label %21, label %17

17:                                               ; preds = %11
  %18 = icmp eq i8* %16, null
  br i1 %18, label %21, label %19

19:                                               ; preds = %17
  %20 = tail call i32 @strcmp(i8* nonnull %13, i8* nonnull %16) #10
  br label %26

21:                                               ; preds = %11, %17
  %22 = phi i8* [ null, %17 ], [ %16, %11 ]
  %23 = icmp eq i8* %13, %22
  %24 = select i1 %14, i32 -1, i32 1
  %25 = select i1 %23, i32 0, i32 %24
  ret i32 %25

26:                                               ; preds = %8, %19
  %27 = phi i32 [ %20, %19 ], [ %9, %8 ]
  ret i32 %27
}

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.conf_value_st* @CONF_VALUE_new() local_unnamed_addr #0 {
  %1 = tail call i8* @OPENSSL_malloc(i64 24) #9
  %2 = icmp eq i8* %1, null
  br i1 %2, label %3, label %4

3:                                                ; preds = %0
  tail call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 130) #9
  br label %6

4:                                                ; preds = %0
  %5 = bitcast i8* %1 to %struct.conf_value_st*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %1, i8 0, i64 24, i1 false) #9
  br label %6

6:                                                ; preds = %4, %3
  %7 = phi %struct.conf_value_st* [ %5, %4 ], [ null, %3 ]
  ret %struct.conf_value_st* %7
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @NCONF_free(%struct.conf_st*) local_unnamed_addr #0 {
  %2 = alloca %struct.LHASH_DOALL_CONF_VALUE, align 8
  %3 = icmp eq %struct.conf_st* %0, null
  br i1 %3, label %17, label %4

4:                                                ; preds = %1
  %5 = getelementptr inbounds %struct.conf_st, %struct.conf_st* %0, i64 0, i32 0
  %6 = load %struct.lhash_st_CONF_VALUE*, %struct.lhash_st_CONF_VALUE** %5, align 8
  %7 = icmp eq %struct.lhash_st_CONF_VALUE* %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %4
  %9 = bitcast %struct.LHASH_DOALL_CONF_VALUE* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  %10 = getelementptr inbounds %struct.LHASH_DOALL_CONF_VALUE, %struct.LHASH_DOALL_CONF_VALUE* %2, i64 0, i32 0
  %11 = getelementptr inbounds %struct.LHASH_DOALL_CONF_VALUE, %struct.LHASH_DOALL_CONF_VALUE* %2, i64 0, i32 1
  store void (%struct.conf_value_st*)* @value_free, void (%struct.conf_value_st*)** %10, align 8
  %12 = bitcast %struct.lhash_st_CONF_VALUE* %6 to %struct.lhash_st*
  %13 = bitcast void (%struct.conf_value_st*, i8*)** %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false) #9
  call void @lh_doall_arg(%struct.lhash_st* nonnull %12, void (i8*, i8*)* nonnull @lh_CONF_VALUE_call_doall, i8* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  %14 = bitcast %struct.conf_st* %0 to %struct.lhash_st**
  %15 = load %struct.lhash_st*, %struct.lhash_st** %14, align 8
  call void @lh_free(%struct.lhash_st* %15) #9
  %16 = bitcast %struct.conf_st* %0 to i8*
  call void @OPENSSL_free(i8* nonnull %16) #9
  br label %17

17:                                               ; preds = %1, %4, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @value_free(%struct.conf_value_st*) #0 {
  %2 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @OPENSSL_free(i8* nonnull %3) #9
  br label %6

6:                                                ; preds = %5, %1
  %7 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %15, label %10

10:                                               ; preds = %6
  tail call void @OPENSSL_free(i8* nonnull %8) #9
  %11 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 2
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %22, label %14

14:                                               ; preds = %10
  tail call void @OPENSSL_free(i8* nonnull %12) #9
  br label %22

15:                                               ; preds = %6
  %16 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %0, i64 0, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %15
  %20 = bitcast i8* %17 to %struct.stack_st_CONF_VALUE*
  %21 = bitcast %struct.stack_st_CONF_VALUE* %20 to %struct.stack_st*
  tail call void @sk_free(%struct.stack_st* nonnull %21) #9
  br label %22

22:                                               ; preds = %10, %14, %15, %19
  %23 = bitcast %struct.conf_value_st* %0 to i8*
  tail call void @OPENSSL_free(i8* %23) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.stack_st_CONF_VALUE* @NCONF_get_section(%struct.conf_st* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = alloca %struct.conf_value_st, align 8
  %4 = bitcast %struct.conf_value_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #9
  %5 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %3, i64 0, i32 0
  %6 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %3, i64 0, i32 1
  %7 = bitcast i8** %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 16, i1 false) #9
  store i8* %1, i8** %5, align 8
  %8 = bitcast %struct.conf_st* %0 to %struct.lhash_st**
  %9 = load %struct.lhash_st*, %struct.lhash_st** %8, align 8
  %10 = call i8* @lh_retrieve(%struct.lhash_st* %9, i8* nonnull %4, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #9
  %11 = icmp eq i8* %10, null
  br i1 %11, label %16, label %12

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %10, i64 16
  %14 = bitcast i8* %13 to %struct.stack_st_CONF_VALUE**
  %15 = load %struct.stack_st_CONF_VALUE*, %struct.stack_st_CONF_VALUE** %14, align 8
  br label %16

16:                                               ; preds = %2, %12
  %17 = phi %struct.stack_st_CONF_VALUE* [ %15, %12 ], [ null, %2 ]
  ret %struct.stack_st_CONF_VALUE* %17
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @NCONF_get_string(%struct.conf_st* nocapture readonly, i8*, i8*) local_unnamed_addr #0 {
  %4 = alloca %struct.conf_value_st, align 8
  %5 = bitcast %struct.conf_value_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #9
  %6 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 0
  %7 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 1
  %8 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 2
  %9 = bitcast i8** %8 to i64*
  store i64 0, i64* %9, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  %10 = bitcast %struct.conf_st* %0 to %struct.lhash_st**
  %11 = load %struct.lhash_st*, %struct.lhash_st** %10, align 8
  %12 = call i8* @lh_retrieve(%struct.lhash_st* %11, i8* nonnull %5, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  %13 = icmp eq i8* %12, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %3
  %15 = getelementptr inbounds i8, i8* %12, i64 16
  %16 = bitcast i8* %15 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %3, %14
  %19 = phi i8* [ %17, %14 ], [ null, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #9
  ret i8* %19
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NCONF_load(%struct.conf_st* nocapture readonly, i8*, i64*) local_unnamed_addr #0 {
  %4 = tail call %struct.bio_st* @BIO_new_file(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #9
  %5 = icmp eq %struct.bio_st* %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @ERR_put_error(i32 13, i32 0, i32 2, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 743) #9
  br label %10

7:                                                ; preds = %3
  %8 = tail call fastcc i32 @def_load_bio(%struct.conf_st* %0, %struct.bio_st* nonnull %4, i64* %2)
  %9 = tail call i32 @BIO_free(%struct.bio_st* nonnull %4) #9
  br label %10

10:                                               ; preds = %7, %6
  %11 = phi i32 [ 0, %6 ], [ %8, %7 ]
  ret i32 %11
}

declare %struct.bio_st* @BIO_new_file(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @def_load_bio(%struct.conf_st* nocapture readonly, %struct.bio_st*, i64*) unnamed_addr #0 {
  %4 = alloca %struct.conf_value_st, align 8
  %5 = alloca %struct.conf_value_st, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [24 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = getelementptr inbounds [24 x i8], [24 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #9
  %10 = bitcast i8** %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #9
  store i8* null, i8** %8, align 8
  %11 = tail call %struct.buf_mem_st* @BUF_MEM_new() #9
  %12 = icmp eq %struct.buf_mem_st* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %3
  tail call void @ERR_put_error(i32 13, i32 0, i32 7, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 537) #9
  br label %497

14:                                               ; preds = %3
  %15 = tail call i8* @OPENSSL_strdup(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #9
  store i8* %15, i8** %8, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  tail call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 543) #9
  call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %11) #9
  br label %497

18:                                               ; preds = %14
  %19 = tail call fastcc %struct.conf_value_st* @NCONF_new_section(%struct.conf_st* %0, i8* nonnull %15)
  %20 = icmp eq %struct.conf_value_st* %19, null
  br i1 %20, label %37, label %21

21:                                               ; preds = %18
  %22 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %11, i64 512) #9
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %38, label %24

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %11, i64 0, i32 1
  %26 = bitcast %struct.conf_value_st* %4 to i8*
  %27 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 0
  %28 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %4, i64 0, i32 1
  %29 = bitcast i8** %28 to i8*
  %30 = bitcast %struct.conf_st* %0 to %struct.lhash_st**
  %31 = bitcast i8** %6 to i8*
  %32 = bitcast i8** %6 to %struct.conf_value_st**
  %33 = bitcast %struct.conf_value_st* %5 to i8*
  %34 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %5, i64 0, i32 0
  %35 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %5, i64 0, i32 1
  %36 = bitcast i8** %35 to i8*
  br label %300

37:                                               ; preds = %18
  tail call void @ERR_put_error(i32 13, i32 0, i32 104, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 549) #9
  br label %490

38:                                               ; preds = %296, %98, %21
  %39 = phi i64 [ 0, %21 ], [ %80, %98 ], [ %80, %296 ]
  call void @ERR_put_error(i32 13, i32 0, i32 7, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 557) #9
  br label %490

40:                                               ; preds = %300, %98
  %41 = phi i64 [ 0, %300 ], [ %101, %98 ]
  %42 = phi i64 [ %302, %300 ], [ %80, %98 ]
  %43 = phi i32 [ 0, %300 ], [ %100, %98 ]
  %44 = phi i32 [ 0, %300 ], [ %99, %98 ]
  %45 = load i8*, i8** %25, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 %41
  store i8 0, i8* %46, align 1
  %47 = call i32 @BIO_gets(%struct.bio_st* %1, i8* %46, i32 511) #9
  %48 = getelementptr inbounds i8, i8* %46, i64 511
  store i8 0, i8* %48, align 1
  %49 = call i64 @strlen(i8* %46) #10
  %50 = trunc i64 %49 to i32
  %51 = icmp ne i32 %50, 0
  %52 = or i32 %43, %50
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %484, label %54

54:                                               ; preds = %40
  %55 = icmp sgt i32 %50, 0
  br i1 %55, label %56, label %70

56:                                               ; preds = %54
  %57 = shl i64 %49, 32
  %58 = ashr exact i64 %57, 32
  br label %59

59:                                               ; preds = %56, %66
  %60 = phi i64 [ %58, %56 ], [ %62, %66 ]
  %61 = phi i32 [ %50, %56 ], [ %63, %66 ]
  %62 = add nsw i64 %60, -1
  %63 = add nsw i32 %61, -1
  %64 = getelementptr inbounds i8, i8* %46, i64 %62
  %65 = load i8, i8* %64, align 1
  switch i8 %65, label %68 [
    i8 13, label %66
    i8 10, label %66
  ]

66:                                               ; preds = %59, %59
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %59, label %70

68:                                               ; preds = %59
  %69 = trunc i64 %60 to i32
  br label %70

70:                                               ; preds = %66, %68, %54
  %71 = phi i32 [ %50, %54 ], [ %69, %68 ], [ %63, %66 ]
  %72 = icmp eq i32 %71, %50
  %73 = and i1 %51, %72
  br i1 %73, label %78, label %74

74:                                               ; preds = %70
  %75 = sext i32 %71 to i64
  %76 = getelementptr inbounds i8, i8* %46, i64 %75
  store i8 0, i8* %76, align 1
  %77 = add nsw i64 %42, 1
  br label %78

78:                                               ; preds = %70, %74
  %79 = phi i32 [ 0, %74 ], [ 1, %70 ]
  %80 = phi i64 [ %77, %74 ], [ %42, %70 ]
  %81 = add nsw i32 %71, %44
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %96

83:                                               ; preds = %78
  %84 = load i8*, i8** %25, align 8
  %85 = add nsw i32 %81, -1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = icmp eq i8 %88, 92
  br i1 %89, label %90, label %96

90:                                               ; preds = %83
  %91 = icmp slt i32 %81, 2
  br i1 %91, label %98, label %92

92:                                               ; preds = %90
  %93 = getelementptr inbounds i8, i8* %87, i64 -1
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 92
  br i1 %95, label %96, label %98

96:                                               ; preds = %83, %92, %78
  %97 = icmp eq i32 %79, 0
  br i1 %97, label %105, label %98

98:                                               ; preds = %92, %90, %481, %456, %96, %234
  %99 = phi i32 [ %81, %96 ], [ 0, %234 ], [ 0, %456 ], [ 0, %481 ], [ %85, %90 ], [ %85, %92 ]
  %100 = phi i32 [ 1, %96 ], [ 0, %234 ], [ 0, %456 ], [ 0, %481 ], [ 1, %90 ], [ 1, %92 ]
  %101 = sext i32 %99 to i64
  %102 = add nsw i64 %101, 512
  %103 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %11, i64 %102) #9
  %104 = icmp eq i64 %103, 0
  br i1 %104, label %38, label %40

105:                                              ; preds = %96
  %106 = load i8*, i8** %25, align 8
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i64
  %109 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %108
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = and i32 %111, 2048
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %222

114:                                              ; preds = %105
  %115 = and i32 %111, 16
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %120, label %126

117:                                              ; preds = %126
  %118 = and i32 %133, 16
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %126

120:                                              ; preds = %117, %114
  %121 = phi i16 [ %110, %114 ], [ %132, %117 ]
  %122 = phi i8 [ %107, %114 ], [ %129, %117 ]
  %123 = phi i8* [ %106, %114 ], [ %128, %117 ]
  %124 = trunc i16 %121 to i8
  %125 = icmp slt i8 %124, 0
  br i1 %125, label %222, label %136

126:                                              ; preds = %114, %117
  %127 = phi i8* [ %128, %117 ], [ %106, %114 ]
  %128 = getelementptr inbounds i8, i8* %127, i64 1
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = zext i16 %132 to i32
  %134 = and i32 %133, 2048
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %117, label %222

136:                                              ; preds = %120, %168
  %137 = phi i16 [ %173, %168 ], [ %121, %120 ]
  %138 = phi i8 [ %170, %168 ], [ %122, %120 ]
  %139 = phi i8* [ %169, %168 ], [ %123, %120 ]
  %140 = zext i16 %137 to i32
  %141 = and i32 %140, 1024
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %176, label %143

143:                                              ; preds = %136
  %144 = getelementptr inbounds i8, i8* %139, i64 1
  %145 = load i8, i8* %144, align 1
  %146 = icmp eq i8 %145, 0
  br i1 %146, label %161, label %147

147:                                              ; preds = %143, %156
  %148 = phi i8 [ %159, %156 ], [ %145, %143 ]
  %149 = phi i8* [ %158, %156 ], [ %144, %143 ]
  %150 = phi i8* [ %157, %156 ], [ %139, %143 ]
  %151 = icmp eq i8 %148, %138
  br i1 %151, label %152, label %156

152:                                              ; preds = %147
  %153 = getelementptr inbounds i8, i8* %150, i64 2
  %154 = load i8, i8* %153, align 1
  %155 = icmp eq i8 %154, %138
  br i1 %155, label %156, label %161

156:                                              ; preds = %152, %147
  %157 = phi i8* [ %149, %147 ], [ %153, %152 ]
  %158 = getelementptr inbounds i8, i8* %157, i64 1
  %159 = load i8, i8* %158, align 1
  %160 = icmp eq i8 %159, 0
  br i1 %160, label %161, label %147

161:                                              ; preds = %156, %152, %143
  %162 = phi i8* [ %139, %143 ], [ %157, %156 ], [ %150, %152 ]
  %163 = phi i8* [ %144, %143 ], [ %158, %156 ], [ %149, %152 ]
  %164 = phi i8 [ 0, %143 ], [ 0, %156 ], [ %138, %152 ]
  %165 = icmp eq i8 %164, %138
  %166 = getelementptr inbounds i8, i8* %162, i64 2
  %167 = select i1 %165, i8* %166, i8* %163
  br label %168

168:                                              ; preds = %190, %220, %211, %201, %161
  %169 = phi i8* [ %167, %161 ], [ %216, %211 ], [ %221, %220 ], [ %207, %201 ], [ %191, %190 ]
  %170 = load i8, i8* %169, align 1
  %171 = zext i8 %170 to i64
  %172 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %171
  %173 = load i16, i16* %172, align 2
  %174 = trunc i16 %173 to i8
  %175 = icmp slt i8 %174, 0
  br i1 %175, label %222, label %136

176:                                              ; preds = %136
  %177 = and i32 %140, 64
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %208, label %179

179:                                              ; preds = %176
  %180 = getelementptr inbounds i8, i8* %139, i64 1
  %181 = load i8, i8* %180, align 1
  %182 = icmp ne i8 %181, 0
  %183 = icmp ne i8 %181, %138
  %184 = and i1 %183, %182
  br i1 %184, label %185, label %201

185:                                              ; preds = %179, %194
  %186 = phi i8 [ %197, %194 ], [ %181, %179 ]
  %187 = phi i8* [ %196, %194 ], [ %180, %179 ]
  %188 = phi i8* [ %195, %194 ], [ %139, %179 ]
  %189 = icmp eq i8 %186, 92
  br i1 %189, label %190, label %194

190:                                              ; preds = %185
  %191 = getelementptr inbounds i8, i8* %188, i64 2
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 0
  br i1 %193, label %168, label %194

194:                                              ; preds = %190, %185
  %195 = phi i8* [ %191, %190 ], [ %187, %185 ]
  %196 = getelementptr inbounds i8, i8* %195, i64 1
  %197 = load i8, i8* %196, align 1
  %198 = icmp ne i8 %197, 0
  %199 = icmp ne i8 %197, %138
  %200 = and i1 %199, %198
  br i1 %200, label %185, label %201

201:                                              ; preds = %194, %179
  %202 = phi i8* [ %139, %179 ], [ %195, %194 ]
  %203 = phi i8* [ %180, %179 ], [ %196, %194 ]
  %204 = phi i8 [ %181, %179 ], [ %197, %194 ]
  %205 = icmp eq i8 %204, %138
  %206 = getelementptr inbounds i8, i8* %202, i64 2
  %207 = select i1 %205, i8* %206, i8* %203
  br label %168

208:                                              ; preds = %176
  %209 = and i32 %140, 32
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %217, label %211

211:                                              ; preds = %208
  %212 = getelementptr inbounds i8, i8* %139, i64 1
  %213 = load i8, i8* %212, align 1
  %214 = icmp eq i8 %213, 0
  %215 = getelementptr inbounds i8, i8* %139, i64 2
  %216 = select i1 %214, i8* %212, i8* %215
  br label %168

217:                                              ; preds = %208
  %218 = and i32 %140, 8
  %219 = icmp eq i32 %218, 0
  br i1 %219, label %220, label %224

220:                                              ; preds = %217
  %221 = getelementptr inbounds i8, i8* %139, i64 1
  br label %168

222:                                              ; preds = %126, %168, %120, %105
  %223 = phi i8* [ %106, %105 ], [ %123, %120 ], [ %169, %168 ], [ %128, %126 ]
  store i8 0, i8* %223, align 1
  br label %224

224:                                              ; preds = %217, %222
  br label %225

225:                                              ; preds = %224, %225
  %226 = phi i8* [ %233, %225 ], [ %106, %224 ]
  %227 = load i8, i8* %226, align 1
  %228 = zext i8 %227 to i64
  %229 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %228
  %230 = load i16, i16* %229, align 2
  %231 = and i16 %230, 24
  %232 = icmp eq i16 %231, 16
  %233 = getelementptr inbounds i8, i8* %226, i64 1
  br i1 %232, label %225, label %234

234:                                              ; preds = %225
  switch i8 %227, label %303 [
    i8 0, label %98
    i8 91, label %235
  ]

235:                                              ; preds = %234, %235
  %236 = phi i8* [ %243, %235 ], [ %233, %234 ]
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i64
  %239 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %238
  %240 = load i16, i16* %239, align 2
  %241 = and i16 %240, 24
  %242 = icmp eq i16 %241, 16
  %243 = getelementptr inbounds i8, i8* %236, i64 1
  br i1 %242, label %235, label %244

244:                                              ; preds = %235, %280
  %245 = phi i8 [ %272, %280 ], [ %237, %235 ]
  %246 = phi i8* [ %271, %280 ], [ %236, %235 ]
  br label %247

247:                                              ; preds = %262, %244
  %248 = phi i8 [ %245, %244 ], [ %264, %262 ]
  %249 = phi i8* [ %246, %244 ], [ %263, %262 ]
  %250 = zext i8 %248 to i64
  %251 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %250
  %252 = load i16, i16* %251, align 2
  %253 = zext i16 %252 to i32
  %254 = and i32 %253, 32
  %255 = icmp eq i32 %254, 0
  br i1 %255, label %265, label %256

256:                                              ; preds = %247
  %257 = getelementptr inbounds i8, i8* %249, i64 1
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 0
  %260 = getelementptr inbounds i8, i8* %249, i64 2
  %261 = select i1 %259, i8* %257, i8* %260
  br label %262

262:                                              ; preds = %268, %256
  %263 = phi i8* [ %261, %256 ], [ %269, %268 ]
  %264 = load i8, i8* %263, align 1
  br label %247

265:                                              ; preds = %247
  %266 = and i32 %253, 775
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %270, label %268

268:                                              ; preds = %265
  %269 = getelementptr inbounds i8, i8* %249, i64 1
  br label %262

270:                                              ; preds = %265, %270
  %271 = phi i8* [ %278, %270 ], [ %249, %265 ]
  %272 = load i8, i8* %271, align 1
  %273 = zext i8 %272 to i64
  %274 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %273
  %275 = load i16, i16* %274, align 2
  %276 = and i16 %275, 24
  %277 = icmp eq i16 %276, 16
  %278 = getelementptr inbounds i8, i8* %271, i64 1
  br i1 %277, label %270, label %279

279:                                              ; preds = %270
  switch i8 %272, label %280 [
    i8 93, label %283
    i8 0, label %282
  ]

280:                                              ; preds = %279
  %281 = icmp eq i8* %246, %271
  br i1 %281, label %282, label %244

282:                                              ; preds = %279, %280
  call void @ERR_put_error(i32 13, i32 0, i32 101, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 626) #9
  br label %490

283:                                              ; preds = %279
  store i8 0, i8* %249, align 1
  %284 = call fastcc i32 @str_copy(%struct.conf_st* %0, i8* null, i8** nonnull %8, i8* %236)
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %490, label %286

286:                                              ; preds = %283
  %287 = load i8*, i8** %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 0, i64 16, i1 false) #9
  store i8* %287, i8** %34, align 8
  %288 = load %struct.lhash_st*, %struct.lhash_st** %30, align 8
  %289 = call i8* @lh_retrieve(%struct.lhash_st* %288, i8* nonnull %33, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  %290 = bitcast i8* %289 to %struct.conf_value_st*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #9
  %291 = icmp eq i8* %289, null
  br i1 %291, label %292, label %296

292:                                              ; preds = %286
  %293 = call fastcc %struct.conf_value_st* @NCONF_new_section(%struct.conf_st* %0, i8* %287)
  %294 = icmp eq %struct.conf_value_st* %293, null
  br i1 %294, label %295, label %296

295:                                              ; preds = %292
  call void @ERR_put_error(i32 13, i32 0, i32 104, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 637) #9
  br label %490

296:                                              ; preds = %286, %292
  %297 = phi %struct.conf_value_st* [ %293, %292 ], [ %290, %286 ]
  %298 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %11, i64 512) #9
  %299 = icmp eq i64 %298, 0
  br i1 %299, label %38, label %300

300:                                              ; preds = %24, %296
  %301 = phi %struct.conf_value_st* [ %19, %24 ], [ %297, %296 ]
  %302 = phi i64 [ 0, %24 ], [ %80, %296 ]
  br label %40

303:                                              ; preds = %234, %316
  %304 = phi i16 [ %321, %316 ], [ %230, %234 ]
  %305 = phi i8 [ %318, %316 ], [ %227, %234 ]
  %306 = phi i8* [ %317, %316 ], [ %226, %234 ]
  %307 = zext i16 %304 to i32
  %308 = and i32 %307, 32
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %322, label %310

310:                                              ; preds = %303
  %311 = getelementptr inbounds i8, i8* %306, i64 1
  %312 = load i8, i8* %311, align 1
  %313 = icmp eq i8 %312, 0
  %314 = getelementptr inbounds i8, i8* %306, i64 2
  %315 = select i1 %313, i8* %311, i8* %314
  br label %316

316:                                              ; preds = %325, %310
  %317 = phi i8* [ %315, %310 ], [ %326, %325 ]
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i64
  %320 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %319
  %321 = load i16, i16* %320, align 2
  br label %303

322:                                              ; preds = %303
  %323 = and i32 %307, 775
  %324 = icmp eq i32 %323, 0
  br i1 %324, label %327, label %325

325:                                              ; preds = %322
  %326 = getelementptr inbounds i8, i8* %306, i64 1
  br label %316

327:                                              ; preds = %322
  %328 = icmp eq i8 %305, 58
  br i1 %328, label %329, label %357

329:                                              ; preds = %327
  %330 = getelementptr inbounds i8, i8* %306, i64 1
  %331 = load i8, i8* %330, align 1
  %332 = icmp eq i8 %331, 58
  br i1 %332, label %333, label %357

333:                                              ; preds = %329
  store i8 0, i8* %306, align 1
  %334 = getelementptr inbounds i8, i8* %306, i64 2
  br label %335

335:                                              ; preds = %355, %333
  %336 = phi i8* [ %334, %333 ], [ %356, %355 ]
  %337 = load i8, i8* %336, align 1
  %338 = zext i8 %337 to i64
  %339 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %338
  %340 = load i16, i16* %339, align 2
  %341 = zext i16 %340 to i32
  %342 = and i32 %341, 32
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %350, label %344

344:                                              ; preds = %335
  %345 = getelementptr inbounds i8, i8* %336, i64 1
  %346 = load i8, i8* %345, align 1
  %347 = icmp eq i8 %346, 0
  %348 = getelementptr inbounds i8, i8* %336, i64 2
  %349 = select i1 %347, i8* %345, i8* %348
  br label %355

350:                                              ; preds = %335
  %351 = and i32 %341, 775
  %352 = icmp eq i32 %351, 0
  br i1 %352, label %357, label %353

353:                                              ; preds = %350
  %354 = getelementptr inbounds i8, i8* %336, i64 1
  br label %355

355:                                              ; preds = %353, %344
  %356 = phi i8* [ %349, %344 ], [ %354, %353 ]
  br label %335

357:                                              ; preds = %350, %329, %327
  %358 = phi i8 [ 58, %329 ], [ %305, %327 ], [ %337, %350 ]
  %359 = phi i8* [ %306, %329 ], [ %306, %327 ], [ %336, %350 ]
  %360 = phi i8* [ null, %329 ], [ null, %327 ], [ %226, %350 ]
  %361 = phi i8* [ %226, %329 ], [ %226, %327 ], [ %334, %350 ]
  %362 = zext i8 %358 to i64
  %363 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %362
  %364 = load i16, i16* %363, align 2
  %365 = and i16 %364, 24
  %366 = icmp eq i16 %365, 16
  %367 = getelementptr inbounds i8, i8* %359, i64 1
  br i1 %366, label %368, label %377

368:                                              ; preds = %357, %368
  %369 = phi i8* [ %376, %368 ], [ %367, %357 ]
  %370 = load i8, i8* %369, align 1
  %371 = zext i8 %370 to i64
  %372 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %371
  %373 = load i16, i16* %372, align 2
  %374 = and i16 %373, 24
  %375 = icmp eq i16 %374, 16
  %376 = getelementptr inbounds i8, i8* %369, i64 1
  br i1 %375, label %368, label %377

377:                                              ; preds = %368, %357
  %378 = phi i8 [ %358, %357 ], [ %370, %368 ]
  %379 = phi i8* [ %367, %357 ], [ %376, %368 ]
  %380 = icmp eq i8 %378, 61
  br i1 %380, label %382, label %381

381:                                              ; preds = %377
  call void @ERR_put_error(i32 13, i32 0, i32 102, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 654) #9
  br label %490

382:                                              ; preds = %377
  store i8 0, i8* %359, align 1
  br label %383

383:                                              ; preds = %383, %382
  %384 = phi i8* [ %379, %382 ], [ %391, %383 ]
  %385 = load i8, i8* %384, align 1
  %386 = zext i8 %385 to i64
  %387 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %386
  %388 = load i16, i16* %387, align 2
  %389 = and i16 %388, 24
  %390 = icmp eq i16 %389, 16
  %391 = getelementptr inbounds i8, i8* %384, i64 1
  br i1 %390, label %383, label %392

392:                                              ; preds = %383, %392
  %393 = phi i8* [ %396, %392 ], [ %379, %383 ]
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 0
  %396 = getelementptr inbounds i8, i8* %393, i64 1
  br i1 %395, label %397, label %392

397:                                              ; preds = %392, %401
  %398 = phi i8* [ %399, %401 ], [ %393, %392 ]
  %399 = getelementptr inbounds i8, i8* %398, i64 -1
  %400 = icmp eq i8* %399, %384
  br i1 %400, label %408, label %401

401:                                              ; preds = %397
  %402 = load i8, i8* %399, align 1
  %403 = zext i8 %402 to i64
  %404 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %403
  %405 = load i16, i16* %404, align 2
  %406 = and i16 %405, 16
  %407 = icmp eq i16 %406, 0
  br i1 %407, label %408, label %397

408:                                              ; preds = %401, %397
  store i8 0, i8* %398, align 1
  %409 = call i8* @OPENSSL_malloc(i64 24) #9
  %410 = icmp eq i8* %409, null
  br i1 %410, label %411, label %412

411:                                              ; preds = %408
  call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 130) #9
  br label %490

412:                                              ; preds = %408
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %409, i8 0, i64 24, i1 false) #9
  %413 = icmp eq i8* %360, null
  %414 = load i8*, i8** %8, align 8
  %415 = select i1 %413, i8* %414, i8* %360
  %416 = call i8* @OPENSSL_strdup(i8* %361) #9
  %417 = getelementptr inbounds i8, i8* %409, i64 8
  %418 = bitcast i8* %417 to i8**
  store i8* %416, i8** %418, align 8
  %419 = icmp eq i8* %416, null
  br i1 %419, label %420, label %422

420:                                              ; preds = %412
  %421 = bitcast i8* %409 to %struct.conf_value_st*
  call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 678) #9
  br label %490

422:                                              ; preds = %412
  %423 = getelementptr inbounds i8, i8* %409, i64 16
  %424 = bitcast i8* %423 to i8**
  %425 = call fastcc i32 @str_copy(%struct.conf_st* %0, i8* %415, i8** %424, i8* %384)
  %426 = icmp eq i32 %425, 0
  br i1 %426, label %488, label %427

427:                                              ; preds = %422
  %428 = call i32 @strcmp(i8* %415, i8* %414) #10
  %429 = icmp eq i32 %428, 0
  br i1 %429, label %440, label %430

430:                                              ; preds = %427
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %29, i8 0, i64 16, i1 false) #9
  store i8* %415, i8** %27, align 8
  %431 = load %struct.lhash_st*, %struct.lhash_st** %30, align 8
  %432 = call i8* @lh_retrieve(%struct.lhash_st* %431, i8* nonnull %26, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  %433 = bitcast i8* %432 to %struct.conf_value_st*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #9
  %434 = icmp eq i8* %432, null
  br i1 %434, label %435, label %440

435:                                              ; preds = %430
  %436 = call fastcc %struct.conf_value_st* @NCONF_new_section(%struct.conf_st* %0, i8* %415)
  %437 = icmp eq %struct.conf_value_st* %436, null
  br i1 %437, label %438, label %440

438:                                              ; preds = %435
  %439 = bitcast i8* %409 to %struct.conf_value_st*
  call void @ERR_put_error(i32 13, i32 0, i32 104, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 690) #9
  br label %490

440:                                              ; preds = %430, %427, %435
  %441 = phi %struct.conf_value_st* [ %436, %435 ], [ %301, %427 ], [ %433, %430 ]
  %442 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %441, i64 0, i32 2
  %443 = bitcast i8** %442 to %struct.stack_st**
  %444 = load %struct.stack_st*, %struct.stack_st** %443, align 8
  %445 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %441, i64 0, i32 0
  %446 = load i8*, i8** %445, align 8
  %447 = call i8* @OPENSSL_strdup(i8* %446) #9
  %448 = bitcast i8* %409 to i8**
  store i8* %447, i8** %448, align 8
  %449 = call i64 @sk_push(%struct.stack_st* %444, i8* nonnull %409) #9
  %450 = icmp eq i64 %449, 0
  br i1 %450, label %482, label %451

451:                                              ; preds = %440
  %452 = load %struct.lhash_st*, %struct.lhash_st** %30, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #9
  store i8* null, i8** %6, align 8
  %453 = call i32 @lh_insert(%struct.lhash_st* %452, i8** nonnull %6, i8* nonnull %409, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  %454 = load %struct.conf_value_st*, %struct.conf_value_st** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #9
  %455 = icmp eq i32 %453, 0
  br i1 %455, label %482, label %456

456:                                              ; preds = %451
  %457 = icmp eq %struct.conf_value_st* %454, null
  br i1 %457, label %98, label %458

458:                                              ; preds = %456
  %459 = bitcast %struct.conf_value_st* %454 to i8*
  %460 = call i8* @sk_delete_ptr(%struct.stack_st* %444, i8* nonnull %459) #9
  %461 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %454, i64 0, i32 0
  %462 = load i8*, i8** %461, align 8
  %463 = icmp eq i8* %462, null
  br i1 %463, label %465, label %464

464:                                              ; preds = %458
  call void @OPENSSL_free(i8* nonnull %462) #9
  br label %465

465:                                              ; preds = %464, %458
  %466 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %454, i64 0, i32 1
  %467 = load i8*, i8** %466, align 8
  %468 = icmp eq i8* %467, null
  br i1 %468, label %474, label %469

469:                                              ; preds = %465
  call void @OPENSSL_free(i8* nonnull %467) #9
  %470 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %454, i64 0, i32 2
  %471 = load i8*, i8** %470, align 8
  %472 = icmp eq i8* %471, null
  br i1 %472, label %481, label %473

473:                                              ; preds = %469
  call void @OPENSSL_free(i8* nonnull %471) #9
  br label %481

474:                                              ; preds = %465
  %475 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %454, i64 0, i32 2
  %476 = load i8*, i8** %475, align 8
  %477 = icmp eq i8* %476, null
  br i1 %477, label %481, label %478

478:                                              ; preds = %474
  %479 = bitcast i8* %476 to %struct.stack_st_CONF_VALUE*
  %480 = bitcast %struct.stack_st_CONF_VALUE* %479 to %struct.stack_st*
  call void @sk_free(%struct.stack_st* nonnull %480) #9
  br label %481

481:                                              ; preds = %478, %474, %473, %469
  call void @OPENSSL_free(i8* nonnull %459) #9
  br label %98

482:                                              ; preds = %440, %451
  %483 = bitcast i8* %409 to %struct.conf_value_st*
  call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 697) #9
  br label %490

484:                                              ; preds = %40
  call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %11) #9
  %485 = load i8*, i8** %8, align 8
  %486 = icmp eq i8* %485, null
  br i1 %486, label %517, label %487

487:                                              ; preds = %484
  call void @OPENSSL_free(i8* nonnull %485) #9
  br label %517

488:                                              ; preds = %422
  %489 = bitcast i8* %409 to %struct.conf_value_st*
  br label %490

490:                                              ; preds = %283, %37, %488, %295, %282, %411, %482, %438, %420, %381, %38
  %491 = phi i8* [ %409, %488 ], [ null, %295 ], [ null, %282 ], [ null, %411 ], [ null, %38 ], [ %409, %482 ], [ %409, %438 ], [ %409, %420 ], [ null, %381 ], [ null, %37 ], [ null, %283 ]
  %492 = phi %struct.conf_value_st* [ %489, %488 ], [ null, %295 ], [ null, %282 ], [ null, %411 ], [ null, %38 ], [ %483, %482 ], [ %439, %438 ], [ %421, %420 ], [ null, %381 ], [ null, %37 ], [ null, %283 ]
  %493 = phi i64 [ %80, %488 ], [ %80, %295 ], [ %80, %282 ], [ %80, %411 ], [ %39, %38 ], [ %80, %482 ], [ %80, %438 ], [ %80, %420 ], [ %80, %381 ], [ 0, %37 ], [ %80, %283 ]
  %494 = load i8*, i8** %8, align 8
  call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %11) #9
  %495 = icmp eq i8* %494, null
  br i1 %495, label %497, label %496

496:                                              ; preds = %490
  call void @OPENSSL_free(i8* nonnull %494) #9
  br label %497

497:                                              ; preds = %17, %13, %490, %496
  %498 = phi i64 [ 0, %13 ], [ %493, %490 ], [ %493, %496 ], [ 0, %17 ]
  %499 = phi i8* [ null, %13 ], [ %491, %490 ], [ %491, %496 ], [ null, %17 ]
  %500 = phi %struct.conf_value_st* [ null, %13 ], [ %492, %490 ], [ %492, %496 ], [ null, %17 ]
  %501 = icmp eq i64* %2, null
  br i1 %501, label %503, label %502

502:                                              ; preds = %497
  store i64 %498, i64* %2, align 8
  br label %503

503:                                              ; preds = %497, %502
  %504 = call i32 (i8*, i64, i8*, ...) @BIO_snprintf(i8* nonnull %9, i64 24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i64 %498) #9
  call void (i32, ...) @ERR_add_error_data(i32 2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* nonnull %9) #9
  %505 = icmp eq %struct.conf_value_st* %500, null
  br i1 %505, label %517, label %506

506:                                              ; preds = %503
  %507 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %500, i64 0, i32 1
  %508 = load i8*, i8** %507, align 8
  %509 = icmp eq i8* %508, null
  br i1 %509, label %511, label %510

510:                                              ; preds = %506
  call void @OPENSSL_free(i8* nonnull %508) #9
  br label %511

511:                                              ; preds = %506, %510
  %512 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %500, i64 0, i32 2
  %513 = load i8*, i8** %512, align 8
  %514 = icmp eq i8* %513, null
  br i1 %514, label %516, label %515

515:                                              ; preds = %511
  call void @OPENSSL_free(i8* nonnull %513) #9
  br label %516

516:                                              ; preds = %515, %511
  call void @OPENSSL_free(i8* nonnull %499) #9
  br label %517

517:                                              ; preds = %516, %503, %487, %484
  %518 = phi i32 [ 1, %484 ], [ 1, %487 ], [ 0, %503 ], [ 0, %516 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #9
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #9
  ret i32 %518
}

declare i32 @BIO_free(%struct.bio_st*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @NCONF_load_bio(%struct.conf_st* nocapture readonly, %struct.bio_st*, i64*) local_unnamed_addr #0 {
  %4 = tail call fastcc i32 @def_load_bio(%struct.conf_st* %0, %struct.bio_st* %1, i64* %2)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @CONF_parse_list(i8*, i8 signext, i32, i32 (i8*, i32, i8*)* nocapture, i8*) local_unnamed_addr #0 {
  %6 = icmp eq i8* %0, null
  br i1 %6, label %10, label %7

7:                                                ; preds = %5
  %8 = icmp ne i32 %2, 0
  %9 = sext i8 %1 to i32
  br label %11

10:                                               ; preds = %5
  tail call void @ERR_put_error(i32 13, i32 0, i32 100, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 764) #9
  br label %76

11:                                               ; preds = %73, %7
  %12 = phi i8* [ %75, %73 ], [ %0, %7 ]
  br i1 %8, label %13, label %31

13:                                               ; preds = %11
  %14 = load i8, i8* %12, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %31, label %16

16:                                               ; preds = %13
  %17 = tail call i16** @__ctype_b_loc() #11
  %18 = load i16*, i16** %17, align 8
  br label %19

19:                                               ; preds = %16, %27
  %20 = phi i8 [ %14, %16 ], [ %29, %27 ]
  %21 = phi i8* [ %12, %16 ], [ %28, %27 ]
  %22 = zext i8 %20 to i64
  %23 = getelementptr inbounds i16, i16* %18, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = and i16 %24, 8192
  %26 = icmp eq i16 %25, 0
  br i1 %26, label %31, label %27

27:                                               ; preds = %19
  %28 = getelementptr inbounds i8, i8* %21, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %19

31:                                               ; preds = %27, %19, %13, %11
  %32 = phi i8* [ %12, %11 ], [ %12, %13 ], [ %28, %27 ], [ %21, %19 ]
  %33 = tail call i8* @strchr(i8* %32, i32 %9) #10
  %34 = icmp eq i8* %33, %32
  br i1 %34, label %38, label %35

35:                                               ; preds = %31
  %36 = load i8, i8* %32, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %35, %31
  %39 = tail call i32 %3(i8* null, i32 0, i8* %4) #9
  br label %70

40:                                               ; preds = %35
  %41 = icmp eq i8* %33, null
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds i8, i8* %33, i64 -1
  br label %48

44:                                               ; preds = %40
  %45 = tail call i64 @strlen(i8* %32) #10
  %46 = getelementptr inbounds i8, i8* %32, i64 -1
  %47 = getelementptr inbounds i8, i8* %46, i64 %45
  br label %48

48:                                               ; preds = %44, %42
  %49 = phi i8* [ %43, %42 ], [ %47, %44 ]
  br i1 %8, label %50, label %62

50:                                               ; preds = %48
  %51 = tail call i16** @__ctype_b_loc() #11
  %52 = load i16*, i16** %51, align 8
  br label %53

53:                                               ; preds = %53, %50
  %54 = phi i8* [ %61, %53 ], [ %49, %50 ]
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds i16, i16* %52, i64 %56
  %58 = load i16, i16* %57, align 2
  %59 = and i16 %58, 8192
  %60 = icmp eq i16 %59, 0
  %61 = getelementptr inbounds i8, i8* %54, i64 -1
  br i1 %60, label %62, label %53

62:                                               ; preds = %53, %48
  %63 = phi i8* [ %49, %48 ], [ %54, %53 ]
  %64 = ptrtoint i8* %63 to i64
  %65 = ptrtoint i8* %32 to i64
  %66 = sub i64 %64, %65
  %67 = trunc i64 %66 to i32
  %68 = add i32 %67, 1
  %69 = tail call i32 %3(i8* %32, i32 %68, i8* %4) #9
  br label %70

70:                                               ; preds = %62, %38
  %71 = phi i32 [ %39, %38 ], [ %69, %62 ]
  %72 = icmp slt i32 %71, 1
  br i1 %72, label %76, label %73

73:                                               ; preds = %70
  %74 = icmp eq i8* %33, null
  %75 = getelementptr inbounds i8, i8* %33, i64 1
  br i1 %74, label %76, label %11

76:                                               ; preds = %73, %70, %10
  %77 = phi i32 [ 0, %10 ], [ 1, %73 ], [ %71, %70 ]
  ret i32 %77
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #5

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @CONF_modules_load_file(i8* nocapture readnone, i8* nocapture readnone, i64) local_unnamed_addr #7 {
  ret i32 1
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @CONF_modules_free() local_unnamed_addr #7 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @OPENSSL_config(i8* nocapture) local_unnamed_addr #7 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @OPENSSL_no_config() local_unnamed_addr #7 {
  ret void
}

declare %struct.lhash_st* @lh_new(i32 (i8*)*, i32 (i8*, i8*)*) local_unnamed_addr #2

declare i32 @lh_strhash(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @lh_doall_arg(%struct.lhash_st*, void (i8*, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @lh_CONF_VALUE_call_doall(i8*, i8* nocapture readonly) #8 {
  %3 = bitcast i8* %1 to void (%struct.conf_value_st*)**
  %4 = load void (%struct.conf_value_st*)*, void (%struct.conf_value_st*)** %3, align 8
  %5 = bitcast i8* %0 to %struct.conf_value_st*
  tail call void %4(%struct.conf_value_st* %5) #9
  ret void
}

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #2

declare void @lh_free(%struct.lhash_st*) local_unnamed_addr #2

declare i8* @lh_retrieve(%struct.lhash_st*, i8*, i32 (i32 (i8*)*, i8*)*, i32 (i32 (i8*, i8*)*, i8*, i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @lh_CONF_VALUE_call_hash_func(i32 (i8*)* nocapture, i8*) #8 {
  %3 = bitcast i32 (i8*)* %0 to i32 (%struct.conf_value_st*)*
  %4 = bitcast i8* %1 to %struct.conf_value_st*
  %5 = tail call i32 %3(%struct.conf_value_st* %4) #9
  ret i32 %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal i32 @lh_CONF_VALUE_call_cmp_func(i32 (i8*, i8*)* nocapture, i8*, i8*) #8 {
  %4 = bitcast i32 (i8*, i8*)* %0 to i32 (%struct.conf_value_st*, %struct.conf_value_st*)*
  %5 = bitcast i8* %1 to %struct.conf_value_st*
  %6 = bitcast i8* %2 to %struct.conf_value_st*
  %7 = tail call i32 %4(%struct.conf_value_st* %5, %struct.conf_value_st* %6) #9
  ret i32 %7
}

declare %struct.buf_mem_st* @BUF_MEM_new() local_unnamed_addr #2

declare i8* @OPENSSL_strdup(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.conf_value_st* @NCONF_new_section(%struct.conf_st* nocapture readonly, i8*) unnamed_addr #0 {
  %3 = alloca i8*, align 8
  %4 = tail call %struct.stack_st* @sk_new_null() #9
  %5 = tail call i8* @OPENSSL_malloc(i64 24) #9
  %6 = icmp eq i8* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %2
  tail call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 130) #9
  %8 = icmp eq %struct.stack_st* %4, null
  br i1 %8, label %56, label %9

9:                                                ; preds = %7
  tail call void @sk_free(%struct.stack_st* nonnull %4) #9
  br label %56

10:                                               ; preds = %2
  %11 = bitcast i8* %5 to %struct.conf_value_st*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %5, i8 0, i64 24, i1 false) #9
  %12 = icmp eq %struct.stack_st* %4, null
  br i1 %12, label %55, label %13

13:                                               ; preds = %10
  %14 = tail call i8* @OPENSSL_strdup(i8* %1) #9
  %15 = bitcast i8* %5 to i8**
  store i8* %14, i8** %15, align 8
  %16 = icmp eq i8* %14, null
  br i1 %16, label %54, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %5, i64 8
  %19 = bitcast i8* %18 to i8**
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds i8, i8* %5, i64 16
  %21 = bitcast i8* %20 to %struct.stack_st**
  store %struct.stack_st* %4, %struct.stack_st** %21, align 8
  %22 = bitcast %struct.conf_st* %0 to %struct.lhash_st**
  %23 = load %struct.lhash_st*, %struct.lhash_st** %22, align 8
  %24 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #9
  store i8* null, i8** %3, align 8
  %25 = call i32 @lh_insert(%struct.lhash_st* %23, i8** nonnull %3, i8* nonnull %5, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  %26 = bitcast i8** %3 to %struct.conf_value_st**
  %27 = load %struct.conf_value_st*, %struct.conf_value_st** %26, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #9
  %28 = icmp eq i32 %25, 0
  br i1 %28, label %54, label %29

29:                                               ; preds = %17
  %30 = icmp eq %struct.conf_value_st* %27, null
  br i1 %30, label %56, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %27, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  call void @OPENSSL_free(i8* nonnull %33) #9
  br label %36

36:                                               ; preds = %35, %31
  %37 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %27, i64 0, i32 1
  %38 = load i8*, i8** %37, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %36
  call void @OPENSSL_free(i8* nonnull %38) #9
  %41 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %27, i64 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %42, null
  br i1 %43, label %52, label %44

44:                                               ; preds = %40
  call void @OPENSSL_free(i8* nonnull %42) #9
  br label %52

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %27, i64 0, i32 2
  %47 = load i8*, i8** %46, align 8
  %48 = icmp eq i8* %47, null
  br i1 %48, label %52, label %49

49:                                               ; preds = %45
  %50 = bitcast i8* %47 to %struct.stack_st_CONF_VALUE*
  %51 = bitcast %struct.stack_st_CONF_VALUE* %50 to %struct.stack_st*
  call void @sk_free(%struct.stack_st* nonnull %51) #9
  br label %52

52:                                               ; preds = %40, %44, %45, %49
  %53 = bitcast %struct.conf_value_st* %27 to i8*
  call void @OPENSSL_free(i8* nonnull %53) #9
  br label %56

54:                                               ; preds = %13, %17
  call void @sk_free(%struct.stack_st* nonnull %4) #9
  br label %55

55:                                               ; preds = %10, %54
  call void @OPENSSL_free(i8* nonnull %5) #9
  br label %56

56:                                               ; preds = %9, %7, %55, %29, %52
  %57 = phi %struct.conf_value_st* [ %11, %52 ], [ %11, %29 ], [ null, %55 ], [ null, %7 ], [ null, %9 ]
  ret %struct.conf_value_st* %57
}

declare i64 @BUF_MEM_grow(%struct.buf_mem_st*, i64) local_unnamed_addr #2

declare i32 @BIO_gets(%struct.bio_st*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @str_copy(%struct.conf_st* nocapture readonly, i8*, i8** nocapture, i8*) unnamed_addr #0 {
  %5 = alloca %struct.conf_value_st, align 8
  %6 = tail call %struct.buf_mem_st* @BUF_MEM_new() #9
  %7 = icmp eq %struct.buf_mem_st* %6, null
  br i1 %7, label %271, label %8

8:                                                ; preds = %4
  %9 = tail call i64 @strlen(i8* %3) #10
  %10 = shl i64 %9, 32
  %11 = add i64 %10, 4294967296
  %12 = ashr exact i64 %11, 32
  %13 = tail call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %6, i64 %12) #9
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %270, label %15

15:                                               ; preds = %8
  %16 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %6, i64 0, i32 1
  %17 = bitcast %struct.conf_value_st* %5 to i8*
  %18 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %5, i64 0, i32 0
  %19 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %5, i64 0, i32 1
  %20 = getelementptr inbounds %struct.conf_value_st, %struct.conf_value_st* %5, i64 0, i32 2
  %21 = bitcast i8** %20 to i64*
  %22 = bitcast %struct.conf_st* %0 to %struct.lhash_st**
  %23 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %6, i64 0, i32 0
  br label %24

24:                                               ; preds = %251, %15
  %25 = phi i8* [ %204, %251 ], [ %3, %15 ]
  %26 = phi i32 [ %192, %251 ], [ 0, %15 ]
  %27 = phi i32 [ %252, %251 ], [ 0, %15 ]
  br label %28

28:                                               ; preds = %130, %24
  %29 = phi i8* [ %25, %24 ], [ %131, %130 ]
  %30 = phi i32 [ %27, %24 ], [ %132, %130 ]
  %31 = load i8, i8* %29, align 1
  %32 = zext i8 %31 to i64
  %33 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = and i32 %35, 64
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %90, label %38

38:                                               ; preds = %28
  %39 = getelementptr inbounds i8, i8* %29, i64 1
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %41
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = and i32 %44, 8
  %46 = icmp ne i32 %45, 0
  %47 = icmp eq i8 %40, %31
  %48 = or i1 %47, %46
  br i1 %48, label %83, label %49

49:                                               ; preds = %38
  %50 = sext i32 %30 to i64
  br label %51

51:                                               ; preds = %49, %64
  %52 = phi i8 [ %40, %49 ], [ %72, %64 ]
  %53 = phi i64 [ %50, %49 ], [ %68, %64 ]
  %54 = phi i32 [ %44, %49 ], [ %76, %64 ]
  %55 = phi i8* [ %39, %49 ], [ %71, %64 ]
  %56 = phi i32 [ %30, %49 ], [ %69, %64 ]
  %57 = phi i8* [ %29, %49 ], [ %66, %64 ]
  %58 = and i32 %54, 32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %64, label %60

60:                                               ; preds = %51
  %61 = getelementptr inbounds i8, i8* %57, i64 2
  %62 = load i8, i8* %61, align 1
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %81, label %64

64:                                               ; preds = %51, %60
  %65 = phi i8 [ %62, %60 ], [ %52, %51 ]
  %66 = phi i8* [ %61, %60 ], [ %55, %51 ]
  %67 = load i8*, i8** %16, align 8
  %68 = add i64 %53, 1
  %69 = add nsw i32 %56, 1
  %70 = getelementptr inbounds i8, i8* %67, i64 %53
  store i8 %65, i8* %70, align 1
  %71 = getelementptr inbounds i8, i8* %66, i64 1
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %73
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = and i32 %76, 8
  %78 = icmp ne i32 %77, 0
  %79 = icmp eq i8 %72, %31
  %80 = or i1 %79, %78
  br i1 %80, label %83, label %51

81:                                               ; preds = %60
  %82 = trunc i64 %53 to i32
  br label %83

83:                                               ; preds = %64, %81, %38
  %84 = phi i8 [ %40, %38 ], [ 0, %81 ], [ %72, %64 ]
  %85 = phi i32 [ %30, %38 ], [ %82, %81 ], [ %69, %64 ]
  %86 = phi i8* [ %39, %38 ], [ %61, %81 ], [ %71, %64 ]
  %87 = icmp eq i8 %84, %31
  %88 = getelementptr inbounds i8, i8* %86, i64 1
  %89 = select i1 %87, i8* %88, i8* %86
  br label %130

90:                                               ; preds = %28
  %91 = and i32 %35, 1024
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %133, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds i8, i8* %29, i64 1
  %95 = load i8, i8* %94, align 1
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %122, label %97

97:                                               ; preds = %93
  %98 = sext i32 %30 to i64
  br label %99

99:                                               ; preds = %97, %110
  %100 = phi i64 [ %98, %97 ], [ %114, %110 ]
  %101 = phi i8 [ %95, %97 ], [ %118, %110 ]
  %102 = phi i8* [ %94, %97 ], [ %117, %110 ]
  %103 = phi i32 [ %30, %97 ], [ %115, %110 ]
  %104 = phi i8* [ %29, %97 ], [ %112, %110 ]
  %105 = icmp eq i8 %101, %31
  br i1 %105, label %106, label %110

106:                                              ; preds = %99
  %107 = getelementptr inbounds i8, i8* %104, i64 2
  %108 = load i8, i8* %107, align 1
  %109 = icmp eq i8 %108, %31
  br i1 %109, label %110, label %120

110:                                              ; preds = %106, %99
  %111 = phi i8 [ %101, %99 ], [ %31, %106 ]
  %112 = phi i8* [ %102, %99 ], [ %107, %106 ]
  %113 = load i8*, i8** %16, align 8
  %114 = add i64 %100, 1
  %115 = add nsw i32 %103, 1
  %116 = getelementptr inbounds i8, i8* %113, i64 %100
  store i8 %111, i8* %116, align 1
  %117 = getelementptr inbounds i8, i8* %112, i64 1
  %118 = load i8, i8* %117, align 1
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %122, label %99

120:                                              ; preds = %106
  %121 = trunc i64 %100 to i32
  br label %122

122:                                              ; preds = %110, %120, %93
  %123 = phi i8* [ %29, %93 ], [ %104, %120 ], [ %112, %110 ]
  %124 = phi i32 [ %30, %93 ], [ %121, %120 ], [ %115, %110 ]
  %125 = phi i8* [ %94, %93 ], [ %102, %120 ], [ %117, %110 ]
  %126 = phi i8 [ 0, %93 ], [ %31, %120 ], [ 0, %110 ]
  %127 = icmp eq i8 %126, %31
  %128 = getelementptr inbounds i8, i8* %123, i64 2
  %129 = select i1 %127, i8* %128, i8* %125
  br label %130

130:                                              ; preds = %122, %83, %253, %144
  %131 = phi i8* [ %138, %144 ], [ %155, %253 ], [ %89, %83 ], [ %129, %122 ]
  %132 = phi i32 [ %147, %144 ], [ %255, %253 ], [ %85, %83 ], [ %124, %122 ]
  br label %28

133:                                              ; preds = %90
  %134 = and i32 %35, 32
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %150, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds i8, i8* %29, i64 1
  %138 = getelementptr inbounds i8, i8* %29, i64 2
  %139 = load i8, i8* %137, align 1
  switch i8 %139, label %143 [
    i8 0, label %258
    i8 114, label %144
    i8 110, label %140
    i8 98, label %141
    i8 116, label %142
  ]

140:                                              ; preds = %136
  br label %144

141:                                              ; preds = %136
  br label %144

142:                                              ; preds = %136
  br label %144

143:                                              ; preds = %136
  br label %144

144:                                              ; preds = %136, %143, %141, %142, %140
  %145 = phi i8 [ 10, %140 ], [ 8, %141 ], [ 9, %142 ], [ 13, %136 ], [ %139, %143 ]
  %146 = load i8*, i8** %16, align 8
  %147 = add nsw i32 %30, 1
  %148 = sext i32 %30 to i64
  %149 = getelementptr inbounds i8, i8* %146, i64 %148
  store i8 %145, i8* %149, align 1
  br label %130

150:                                              ; preds = %133
  %151 = and i32 %35, 8
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %258

153:                                              ; preds = %150
  %154 = icmp eq i8 %31, 36
  %155 = getelementptr inbounds i8, i8* %29, i64 1
  br i1 %154, label %156, label %253

156:                                              ; preds = %153
  %157 = load i8, i8* %155, align 1
  %158 = icmp eq i8 %157, 40
  %159 = select i1 %158, i32 41, i32 0
  %160 = icmp eq i8 %157, 123
  %161 = select i1 %160, i32 125, i32 %159
  %162 = icmp ne i32 %161, 0
  %163 = getelementptr inbounds i8, i8* %29, i64 2
  %164 = select i1 %162, i8* %163, i8* %155
  br label %165

165:                                              ; preds = %165, %156
  %166 = phi i8* [ %164, %156 ], [ %173, %165 ]
  %167 = load i8, i8* %166, align 1
  %168 = zext i8 %167 to i64
  %169 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = and i16 %170, 263
  %172 = icmp eq i16 %171, 0
  %173 = getelementptr inbounds i8, i8* %166, i64 1
  br i1 %172, label %174, label %165

174:                                              ; preds = %165
  %175 = icmp eq i8 %167, 58
  br i1 %175, label %176, label %190

176:                                              ; preds = %174
  %177 = load i8, i8* %173, align 1
  %178 = icmp eq i8 %177, 58
  br i1 %178, label %179, label %190

179:                                              ; preds = %176
  store i8 0, i8* %166, align 1
  %180 = getelementptr inbounds i8, i8* %166, i64 2
  br label %181

181:                                              ; preds = %181, %179
  %182 = phi i8* [ %180, %179 ], [ %189, %181 ]
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i64
  %185 = getelementptr inbounds [256 x i16], [256 x i16]* @CONF_type_default, i64 0, i64 %184
  %186 = load i16, i16* %185, align 2
  %187 = and i16 %186, 263
  %188 = icmp eq i16 %187, 0
  %189 = getelementptr inbounds i8, i8* %182, i64 1
  br i1 %188, label %190, label %181

190:                                              ; preds = %181, %176, %174
  %191 = phi i8 [ 58, %176 ], [ %167, %174 ], [ %183, %181 ]
  %192 = phi i32 [ %26, %176 ], [ %26, %174 ], [ 58, %181 ]
  %193 = phi i8* [ %166, %176 ], [ %166, %174 ], [ %182, %181 ]
  %194 = phi i8* [ null, %176 ], [ null, %174 ], [ %166, %181 ]
  %195 = phi i8* [ %164, %176 ], [ %164, %174 ], [ %180, %181 ]
  %196 = phi i8* [ %1, %176 ], [ %1, %174 ], [ %164, %181 ]
  store i8 0, i8* %193, align 1
  br i1 %162, label %197, label %203

197:                                              ; preds = %190
  %198 = sext i8 %191 to i32
  %199 = icmp eq i32 %161, %198
  br i1 %199, label %201, label %200

200:                                              ; preds = %197
  call void @ERR_put_error(i32 13, i32 0, i32 103, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 308) #9
  br label %270

201:                                              ; preds = %197
  %202 = getelementptr inbounds i8, i8* %193, i64 1
  br label %203

203:                                              ; preds = %201, %190
  %204 = phi i8* [ %202, %201 ], [ %193, %190 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %17) #9
  store i64 0, i64* %21, align 8
  store i8* %196, i8** %18, align 8
  store i8* %195, i8** %19, align 8
  %205 = load %struct.lhash_st*, %struct.lhash_st** %22, align 8
  %206 = call i8* @lh_retrieve(%struct.lhash_st* %205, i8* nonnull %17, i32 (i32 (i8*)*, i8*)* nonnull @lh_CONF_VALUE_call_hash_func, i32 (i32 (i8*, i8*)*, i8*, i8*)* nonnull @lh_CONF_VALUE_call_cmp_func) #9
  %207 = icmp eq i8* %206, null
  br i1 %207, label %212, label %208

208:                                              ; preds = %203
  %209 = getelementptr inbounds i8, i8* %206, i64 16
  %210 = bitcast i8* %209 to i8**
  %211 = load i8*, i8** %210, align 8
  br label %212

212:                                              ; preds = %203, %208
  %213 = phi i8* [ %211, %208 ], [ null, %203 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %17) #9
  %214 = icmp eq i8* %194, null
  br i1 %214, label %217, label %215

215:                                              ; preds = %212
  %216 = trunc i32 %192 to i8
  store i8 %216, i8* %194, align 1
  br label %217

217:                                              ; preds = %212, %215
  store i8 %191, i8* %193, align 1
  %218 = icmp eq i8* %213, null
  br i1 %218, label %219, label %220

219:                                              ; preds = %217
  call void @ERR_put_error(i32 13, i32 0, i32 105, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 327) #9
  br label %270

220:                                              ; preds = %217
  %221 = call i64 @strlen(i8* nonnull %213) #10
  %222 = load i64, i64* %23, align 8
  %223 = ptrtoint i8* %204 to i64
  %224 = ptrtoint i8* %29 to i64
  %225 = sub i64 %224, %223
  %226 = add i64 %221, %225
  %227 = add i64 %226, %222
  %228 = icmp ugt i64 %227, 65536
  br i1 %228, label %229, label %230

229:                                              ; preds = %220
  call void @ERR_put_error(i32 13, i32 0, i32 106, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 332) #9
  br label %270

230:                                              ; preds = %220
  %231 = call i64 @BUF_MEM_grow_clean(%struct.buf_mem_st* nonnull %6, i64 %227) #9
  %232 = icmp eq i64 %231, 0
  br i1 %232, label %238, label %233

233:                                              ; preds = %230
  %234 = load i8, i8* %213, align 1
  %235 = icmp eq i8 %234, 0
  br i1 %235, label %251, label %236

236:                                              ; preds = %233
  %237 = sext i32 %30 to i64
  br label %239

238:                                              ; preds = %230
  call void @ERR_put_error(i32 13, i32 0, i32 65, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str, i64 0, i64 0), i32 336) #9
  br label %270

239:                                              ; preds = %236, %239
  %240 = phi i64 [ %237, %236 ], [ %245, %239 ]
  %241 = phi i8 [ %234, %236 ], [ %247, %239 ]
  %242 = phi i8* [ %213, %236 ], [ %243, %239 ]
  %243 = getelementptr inbounds i8, i8* %242, i64 1
  %244 = load i8*, i8** %16, align 8
  %245 = add i64 %240, 1
  %246 = getelementptr inbounds i8, i8* %244, i64 %240
  store i8 %241, i8* %246, align 1
  %247 = load i8, i8* %243, align 1
  %248 = icmp eq i8 %247, 0
  br i1 %248, label %249, label %239

249:                                              ; preds = %239
  %250 = trunc i64 %245 to i32
  br label %251

251:                                              ; preds = %249, %233
  %252 = phi i32 [ %30, %233 ], [ %250, %249 ]
  store i8 %191, i8* %193, align 1
  br label %24

253:                                              ; preds = %153
  %254 = load i8*, i8** %16, align 8
  %255 = add nsw i32 %30, 1
  %256 = sext i32 %30 to i64
  %257 = getelementptr inbounds i8, i8* %254, i64 %256
  store i8 %31, i8* %257, align 1
  br label %130

258:                                              ; preds = %136, %150
  %259 = load i8*, i8** %16, align 8
  %260 = sext i32 %30 to i64
  %261 = getelementptr inbounds i8, i8* %259, i64 %260
  store i8 0, i8* %261, align 1
  %262 = load i8*, i8** %2, align 8
  %263 = icmp eq i8* %262, null
  br i1 %263, label %265, label %264

264:                                              ; preds = %258
  call void @OPENSSL_free(i8* nonnull %262) #9
  br label %265

265:                                              ; preds = %258, %264
  %266 = bitcast i8** %16 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = bitcast i8** %2 to i64*
  store i64 %267, i64* %268, align 8
  %269 = bitcast %struct.buf_mem_st* %6 to i8*
  call void @OPENSSL_free(i8* nonnull %269) #9
  br label %271

270:                                              ; preds = %238, %229, %200, %219, %8
  call void @BUF_MEM_free(%struct.buf_mem_st* nonnull %6) #9
  br label %271

271:                                              ; preds = %4, %270, %265
  %272 = phi i32 [ 1, %265 ], [ 0, %270 ], [ 0, %4 ]
  ret i32 %272
}

declare void @BUF_MEM_free(%struct.buf_mem_st*) local_unnamed_addr #2

declare i32 @BIO_snprintf(i8*, i64, i8*, ...) local_unnamed_addr #2

declare void @ERR_add_error_data(i32, ...) local_unnamed_addr #2

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

declare i32 @lh_insert(%struct.lhash_st*, i8**, i8*, i32 (i32 (i8*)*, i8*)*, i32 (i32 (i8*, i8*)*, i8*, i8*)*) local_unnamed_addr #2

declare i64 @BUF_MEM_grow_clean(%struct.buf_mem_st*, i64) local_unnamed_addr #2

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare i8* @sk_delete_ptr(%struct.stack_st*, i8*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
