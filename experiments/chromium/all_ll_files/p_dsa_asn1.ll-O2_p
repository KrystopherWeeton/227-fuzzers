; ModuleID = '../../third_party/boringssl/src/crypto/evp/p_dsa_asn1.c'
source_filename = "../../third_party/boringssl/src/crypto/evp/p_dsa_asn1.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type { i32, [9 x i8], i8, {}*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, {}*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%struct.dsa_st = type { i64, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, i32, %union.crypto_mutex_st, %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st*, i32, %struct.crypto_ex_data_st }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.bn_mont_ctx_st = type { %struct.bignum_st, %struct.bignum_st, [2 x i64] }
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%struct.bignum_ctx = type opaque

@dsa_asn1_meth = hidden constant { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* } { i32 116, [9 x i8] c"*\86H\CE8\04\01\00\00", i8 7, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)* @dsa_pub_decode, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)* @dsa_pub_encode, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)* @dsa_pub_cmp, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)* @dsa_priv_decode, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)* @dsa_priv_encode, i32 (%struct.evp_pkey_st*, i8*, i64)* null, i32 (%struct.evp_pkey_st*, i8*, i64)* null, i32 (%struct.evp_pkey_st*, i8*, i64*)* null, i32 (%struct.evp_pkey_st*, i8*, i64*)* null, i32 (%struct.evp_pkey_st*)* null, i32 (%struct.evp_pkey_st*)* @int_dsa_size, i32 (%struct.evp_pkey_st*)* @dsa_bits, i32 (%struct.evp_pkey_st*)* @dsa_missing_parameters, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)* @dsa_copy_parameters, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)* @dsa_cmp_parameters, void (%struct.evp_pkey_st*)* @int_dsa_free }, align 8
@.str = private unnamed_addr constant [56 x i8] c"../../third_party/boringssl/src/crypto/evp/p_dsa_asn1.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_pub_decode(%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*) #0 {
  %4 = tail call i64 @CBS_len(%struct.cbs_st* %1) #4
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = tail call %struct.dsa_st* @DSA_new() #4
  %8 = icmp eq %struct.dsa_st* %7, null
  br i1 %8, label %33, label %15

9:                                                ; preds = %3
  %10 = tail call %struct.dsa_st* @DSA_parse_parameters(%struct.cbs_st* %1) #4
  %11 = icmp eq %struct.dsa_st* %10, null
  br i1 %11, label %28, label %12

12:                                               ; preds = %9
  %13 = tail call i64 @CBS_len(%struct.cbs_st* %1) #4
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %28

15:                                               ; preds = %12, %6
  %16 = phi %struct.dsa_st* [ %7, %6 ], [ %10, %12 ]
  %17 = tail call %struct.bignum_st* @BN_new() #4
  %18 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %16, i64 0, i32 4
  store %struct.bignum_st* %17, %struct.bignum_st** %18, align 8
  %19 = icmp eq %struct.bignum_st* %17, null
  br i1 %19, label %31, label %20

20:                                               ; preds = %15
  %21 = tail call i32 @BN_parse_asn1_unsigned(%struct.cbs_st* %2, %struct.bignum_st* nonnull %17) #4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %28, label %23

23:                                               ; preds = %20
  %24 = tail call i64 @CBS_len(%struct.cbs_st* %2) #4
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %28

26:                                               ; preds = %23
  %27 = tail call i32 @EVP_PKEY_assign_DSA(%struct.evp_pkey_st* %0, %struct.dsa_st* nonnull %16) #4
  br label %33

28:                                               ; preds = %20, %23, %9, %12
  %29 = phi i32 [ 80, %12 ], [ 80, %9 ], [ 92, %23 ], [ 92, %20 ]
  %30 = phi %struct.dsa_st* [ %10, %12 ], [ %10, %9 ], [ %16, %23 ], [ %16, %20 ]
  tail call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 %29) #4
  br label %31

31:                                               ; preds = %28, %15
  %32 = phi %struct.dsa_st* [ %16, %15 ], [ %30, %28 ]
  tail call void @DSA_free(%struct.dsa_st* %32) #4
  br label %33

33:                                               ; preds = %6, %31, %26
  %34 = phi i32 [ 0, %31 ], [ 1, %26 ], [ 0, %6 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_pub_encode(%struct.cbb_st*, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = alloca %struct.cbb_st, align 8
  %6 = alloca %struct.cbb_st, align 8
  %7 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %8 = bitcast %union.anon* %7 to %struct.dsa_st**
  %9 = load %struct.dsa_st*, %struct.dsa_st** %8, align 8
  %10 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %9, i64 0, i32 1
  %11 = load %struct.bignum_st*, %struct.bignum_st** %10, align 8
  %12 = icmp eq %struct.bignum_st* %11, null
  br i1 %12, label %21, label %13

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %9, i64 0, i32 2
  %15 = load %struct.bignum_st*, %struct.bignum_st** %14, align 8
  %16 = icmp eq %struct.bignum_st* %15, null
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %9, i64 0, i32 3
  %19 = load %struct.bignum_st*, %struct.bignum_st** %18, align 8
  %20 = icmp ne %struct.bignum_st* %19, null
  br label %21

21:                                               ; preds = %13, %2, %17
  %22 = phi i1 [ false, %13 ], [ false, %2 ], [ %20, %17 ]
  %23 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %23) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %23, i8 -86, i64 32, i1 false)
  %24 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %24, i8 -86, i64 32, i1 false)
  %25 = bitcast %struct.cbb_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %25, i8 -86, i64 32, i1 false)
  %26 = bitcast %struct.cbb_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 32, i1 false)
  %27 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 536870928) #4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %56, label %29

29:                                               ; preds = %21
  %30 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %4, i32 536870928) #4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %56, label %32

32:                                               ; preds = %29
  %33 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %4, %struct.cbb_st* nonnull %5, i32 6) #4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %56, label %35

35:                                               ; preds = %32
  %36 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %5, i8* getelementptr inbounds ({ i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }, { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }* @dsa_asn1_meth, i64 0, i32 1, i64 0), i64 7) #4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %56, label %38

38:                                               ; preds = %35
  br i1 %22, label %39, label %42

39:                                               ; preds = %38
  %40 = call i32 @DSA_marshal_parameters(%struct.cbb_st* nonnull %4, %struct.dsa_st* %9) #4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %56, label %42

42:                                               ; preds = %39, %38
  %43 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %6, i32 3) #4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %56, label %45

45:                                               ; preds = %42
  %46 = call i32 @CBB_add_u8(%struct.cbb_st* nonnull %6, i8 zeroext 0) #4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %56, label %48

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %9, i64 0, i32 4
  %50 = load %struct.bignum_st*, %struct.bignum_st** %49, align 8
  %51 = call i32 @BN_marshal_asn1(%struct.cbb_st* nonnull %6, %struct.bignum_st* %50) #4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %48
  %54 = call i32 @CBB_flush(%struct.cbb_st* %0) #4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %39, %53, %48, %45, %42, %35, %32, %29, %21
  call void @ERR_put_error(i32 6, i32 0, i32 105, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 120) #4
  br label %57

57:                                               ; preds = %53, %56
  %58 = phi i32 [ 0, %56 ], [ 1, %53 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %23) #4
  ret i32 %58
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_pub_cmp(%struct.evp_pkey_st* nocapture readonly, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %4 = bitcast %union.anon* %3 to %struct.dsa_st**
  %5 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %6 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %5, i64 0, i32 4
  %7 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  %8 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %9 = bitcast %union.anon* %8 to %struct.dsa_st**
  %10 = load %struct.dsa_st*, %struct.dsa_st** %9, align 8
  %11 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %10, i64 0, i32 4
  %12 = load %struct.bignum_st*, %struct.bignum_st** %11, align 8
  %13 = tail call i32 @BN_cmp(%struct.bignum_st* %7, %struct.bignum_st* %12) #4
  %14 = icmp eq i32 %13, 0
  %15 = zext i1 %14 to i32
  ret i32 %15
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_priv_decode(%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*) #0 {
  %4 = tail call %struct.dsa_st* @DSA_parse_parameters(%struct.cbs_st* %1) #4
  %5 = icmp eq %struct.dsa_st* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @CBS_len(%struct.cbs_st* %1) #4
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %10, label %9

9:                                                ; preds = %6, %3
  tail call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 134) #4
  br label %46

10:                                               ; preds = %6
  %11 = tail call %struct.bignum_st* @BN_new() #4
  %12 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 5
  store %struct.bignum_st* %11, %struct.bignum_st** %12, align 8
  %13 = tail call %struct.bignum_st* @BN_new() #4
  %14 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 4
  store %struct.bignum_st* %13, %struct.bignum_st** %14, align 8
  %15 = load %struct.bignum_st*, %struct.bignum_st** %12, align 8
  %16 = icmp eq %struct.bignum_st* %15, null
  %17 = icmp eq %struct.bignum_st* %13, null
  %18 = or i1 %17, %16
  br i1 %18, label %46, label %19

19:                                               ; preds = %10
  %20 = tail call i32 @BN_parse_asn1_unsigned(%struct.cbs_st* %2, %struct.bignum_st* nonnull %15) #4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %31, label %22

22:                                               ; preds = %19
  %23 = tail call i64 @CBS_len(%struct.cbs_st* %2) #4
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %22
  %26 = load %struct.bignum_st*, %struct.bignum_st** %12, align 8
  %27 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 2
  %28 = load %struct.bignum_st*, %struct.bignum_st** %27, align 8
  %29 = tail call i32 @BN_cmp(%struct.bignum_st* %26, %struct.bignum_st* %28) #4
  %30 = icmp sgt i32 %29, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %22, %19, %25
  tail call void @ERR_put_error(i32 6, i32 0, i32 102, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 151) #4
  br label %46

32:                                               ; preds = %25
  %33 = tail call %struct.bignum_ctx* @BN_CTX_new() #4
  %34 = icmp eq %struct.bignum_ctx* %33, null
  br i1 %34, label %46, label %35

35:                                               ; preds = %32
  %36 = load %struct.bignum_st*, %struct.bignum_st** %14, align 8
  %37 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 3
  %38 = load %struct.bignum_st*, %struct.bignum_st** %37, align 8
  %39 = load %struct.bignum_st*, %struct.bignum_st** %12, align 8
  %40 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 1
  %41 = load %struct.bignum_st*, %struct.bignum_st** %40, align 8
  %42 = tail call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %36, %struct.bignum_st* %38, %struct.bignum_st* %39, %struct.bignum_st* %41, %struct.bignum_ctx* nonnull %33, %struct.bn_mont_ctx_st* null) #4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %35
  tail call void @BN_CTX_free(%struct.bignum_ctx* nonnull %33) #4
  %45 = tail call i32 @EVP_PKEY_assign_DSA(%struct.evp_pkey_st* %0, %struct.dsa_st* nonnull %4) #4
  br label %48

46:                                               ; preds = %35, %32, %10, %31, %9
  %47 = phi %struct.bignum_ctx* [ null, %9 ], [ null, %10 ], [ null, %31 ], [ null, %32 ], [ %33, %35 ]
  tail call void @BN_CTX_free(%struct.bignum_ctx* %47) #4
  tail call void @DSA_free(%struct.dsa_st* %4) #4
  br label %48

48:                                               ; preds = %46, %44
  %49 = phi i32 [ 0, %46 ], [ 1, %44 ]
  ret i32 %49
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_priv_encode(%struct.cbb_st*, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = alloca %struct.cbb_st, align 8
  %4 = alloca %struct.cbb_st, align 8
  %5 = alloca %struct.cbb_st, align 8
  %6 = alloca %struct.cbb_st, align 8
  %7 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %8 = bitcast %union.anon* %7 to %struct.dsa_st**
  %9 = load %struct.dsa_st*, %struct.dsa_st** %8, align 8
  %10 = icmp eq %struct.dsa_st* %9, null
  br i1 %10, label %15, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %9, i64 0, i32 5
  %13 = load %struct.bignum_st*, %struct.bignum_st** %12, align 8
  %14 = icmp eq %struct.bignum_st* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %11, %2
  tail call void @ERR_put_error(i32 6, i32 0, i32 118, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 176) #4
  br label %51

16:                                               ; preds = %11
  %17 = bitcast %struct.cbb_st* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %17) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 32, i1 false)
  %18 = bitcast %struct.cbb_st* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 32, i1 false)
  %19 = bitcast %struct.cbb_st* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 32, i1 false)
  %20 = bitcast %struct.cbb_st* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 32, i1 false)
  %21 = call i32 @CBB_add_asn1(%struct.cbb_st* %0, %struct.cbb_st* nonnull %3, i32 536870928) #4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %48, label %23

23:                                               ; preds = %16
  %24 = call i32 @CBB_add_asn1_uint64(%struct.cbb_st* nonnull %3, i64 0) #4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %48, label %26

26:                                               ; preds = %23
  %27 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %4, i32 536870928) #4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %48, label %29

29:                                               ; preds = %26
  %30 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %4, %struct.cbb_st* nonnull %5, i32 6) #4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %48, label %32

32:                                               ; preds = %29
  %33 = call i32 @CBB_add_bytes(%struct.cbb_st* nonnull %5, i8* getelementptr inbounds ({ i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }, { i32, [9 x i8], i8, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.cbs_st*, %struct.cbs_st*)*, i32 (%struct.cbb_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*, i8*, i64*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, i32 (%struct.evp_pkey_st*, %struct.evp_pkey_st*)*, void (%struct.evp_pkey_st*)* }* @dsa_asn1_meth, i64 0, i32 1, i64 0), i64 7) #4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %48, label %35

35:                                               ; preds = %32
  %36 = call i32 @DSA_marshal_parameters(%struct.cbb_st* nonnull %4, %struct.dsa_st* nonnull %9) #4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %35
  %39 = call i32 @CBB_add_asn1(%struct.cbb_st* nonnull %3, %struct.cbb_st* nonnull %6, i32 4) #4
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %38
  %42 = load %struct.bignum_st*, %struct.bignum_st** %12, align 8
  %43 = call i32 @BN_marshal_asn1(%struct.cbb_st* nonnull %6, %struct.bignum_st* %42) #4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %41
  %46 = call i32 @CBB_flush(%struct.cbb_st* %0) #4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %45, %41, %38, %35, %32, %29, %26, %23, %16
  call void @ERR_put_error(i32 6, i32 0, i32 105, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 191) #4
  br label %49

49:                                               ; preds = %45, %48
  %50 = phi i32 [ 0, %48 ], [ 1, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %17) #4
  br label %51

51:                                               ; preds = %49, %15
  %52 = phi i32 [ 0, %15 ], [ %50, %49 ]
  ret i32 %52
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @int_dsa_size(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.dsa_st**
  %4 = load %struct.dsa_st*, %struct.dsa_st** %3, align 8
  %5 = tail call i32 @DSA_size(%struct.dsa_st* %4) #4
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_bits(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.dsa_st**
  %4 = load %struct.dsa_st*, %struct.dsa_st** %3, align 8
  %5 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 1
  %6 = load %struct.bignum_st*, %struct.bignum_st** %5, align 8
  %7 = tail call i32 @BN_num_bits(%struct.bignum_st* %6) #4
  ret i32 %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @dsa_missing_parameters(%struct.evp_pkey_st* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.dsa_st**
  %4 = load %struct.dsa_st*, %struct.dsa_st** %3, align 8
  %5 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 1
  %6 = load %struct.bignum_st*, %struct.bignum_st** %5, align 8
  %7 = icmp eq %struct.bignum_st* %6, null
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 2
  %10 = load %struct.bignum_st*, %struct.bignum_st** %9, align 8
  %11 = icmp eq %struct.bignum_st* %10, null
  br i1 %11, label %17, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %4, i64 0, i32 3
  %14 = load %struct.bignum_st*, %struct.bignum_st** %13, align 8
  %15 = icmp eq %struct.bignum_st* %14, null
  %16 = zext i1 %15 to i32
  ret i32 %16

17:                                               ; preds = %1, %8
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_copy_parameters(%struct.evp_pkey_st* nocapture readonly, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %4 = bitcast %union.anon* %3 to %struct.dsa_st**
  %5 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %6 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %5, i64 0, i32 1
  %7 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %8 = bitcast %union.anon* %7 to %struct.dsa_st**
  %9 = load %struct.dsa_st*, %struct.dsa_st** %8, align 8
  %10 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %9, i64 0, i32 1
  %11 = load %struct.bignum_st*, %struct.bignum_st** %10, align 8
  %12 = tail call %struct.bignum_st* @BN_dup(%struct.bignum_st* %11) #4
  %13 = icmp eq %struct.bignum_st* %12, null
  br i1 %13, label %34, label %14

14:                                               ; preds = %2
  %15 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  tail call void @BN_free(%struct.bignum_st* %15) #4
  store %struct.bignum_st* %12, %struct.bignum_st** %6, align 8
  %16 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %17 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %16, i64 0, i32 2
  %18 = load %struct.dsa_st*, %struct.dsa_st** %8, align 8
  %19 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %18, i64 0, i32 2
  %20 = load %struct.bignum_st*, %struct.bignum_st** %19, align 8
  %21 = tail call %struct.bignum_st* @BN_dup(%struct.bignum_st* %20) #4
  %22 = icmp eq %struct.bignum_st* %21, null
  br i1 %22, label %34, label %23

23:                                               ; preds = %14
  %24 = load %struct.bignum_st*, %struct.bignum_st** %17, align 8
  tail call void @BN_free(%struct.bignum_st* %24) #4
  store %struct.bignum_st* %21, %struct.bignum_st** %17, align 8
  %25 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %26 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %25, i64 0, i32 3
  %27 = load %struct.dsa_st*, %struct.dsa_st** %8, align 8
  %28 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %27, i64 0, i32 3
  %29 = load %struct.bignum_st*, %struct.bignum_st** %28, align 8
  %30 = tail call %struct.bignum_st* @BN_dup(%struct.bignum_st* %29) #4
  %31 = icmp eq %struct.bignum_st* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %23
  %33 = load %struct.bignum_st*, %struct.bignum_st** %26, align 8
  tail call void @BN_free(%struct.bignum_st* %33) #4
  store %struct.bignum_st* %30, %struct.bignum_st** %26, align 8
  br label %34

34:                                               ; preds = %2, %14, %23, %32
  %35 = phi i32 [ 1, %32 ], [ 0, %23 ], [ 0, %14 ], [ 0, %2 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @dsa_cmp_parameters(%struct.evp_pkey_st* nocapture readonly, %struct.evp_pkey_st* nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %4 = bitcast %union.anon* %3 to %struct.dsa_st**
  %5 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %6 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %5, i64 0, i32 1
  %7 = load %struct.bignum_st*, %struct.bignum_st** %6, align 8
  %8 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %1, i64 0, i32 2
  %9 = bitcast %union.anon* %8 to %struct.dsa_st**
  %10 = load %struct.dsa_st*, %struct.dsa_st** %9, align 8
  %11 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %10, i64 0, i32 1
  %12 = load %struct.bignum_st*, %struct.bignum_st** %11, align 8
  %13 = tail call i32 @BN_cmp(%struct.bignum_st* %7, %struct.bignum_st* %12) #4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %34

15:                                               ; preds = %2
  %16 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %17 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %16, i64 0, i32 2
  %18 = load %struct.bignum_st*, %struct.bignum_st** %17, align 8
  %19 = load %struct.dsa_st*, %struct.dsa_st** %9, align 8
  %20 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %19, i64 0, i32 2
  %21 = load %struct.bignum_st*, %struct.bignum_st** %20, align 8
  %22 = tail call i32 @BN_cmp(%struct.bignum_st* %18, %struct.bignum_st* %21) #4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %34

24:                                               ; preds = %15
  %25 = load %struct.dsa_st*, %struct.dsa_st** %4, align 8
  %26 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %25, i64 0, i32 3
  %27 = load %struct.bignum_st*, %struct.bignum_st** %26, align 8
  %28 = load %struct.dsa_st*, %struct.dsa_st** %9, align 8
  %29 = getelementptr inbounds %struct.dsa_st, %struct.dsa_st* %28, i64 0, i32 3
  %30 = load %struct.bignum_st*, %struct.bignum_st** %29, align 8
  %31 = tail call i32 @BN_cmp(%struct.bignum_st* %27, %struct.bignum_st* %30) #4
  %32 = icmp eq i32 %31, 0
  %33 = zext i1 %32 to i32
  br label %34

34:                                               ; preds = %24, %15, %2
  %35 = phi i32 [ 0, %15 ], [ 0, %2 ], [ %33, %24 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define internal void @int_dsa_free(%struct.evp_pkey_st* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.evp_pkey_st, %struct.evp_pkey_st* %0, i64 0, i32 2
  %3 = bitcast %union.anon* %2 to %struct.dsa_st**
  %4 = load %struct.dsa_st*, %struct.dsa_st** %3, align 8
  tail call void @DSA_free(%struct.dsa_st* %4) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64 @CBS_len(%struct.cbs_st*) local_unnamed_addr #3

declare %struct.dsa_st* @DSA_new() local_unnamed_addr #3

declare %struct.dsa_st* @DSA_parse_parameters(%struct.cbs_st*) local_unnamed_addr #3

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #3

declare %struct.bignum_st* @BN_new() local_unnamed_addr #3

declare i32 @BN_parse_asn1_unsigned(%struct.cbs_st*, %struct.bignum_st*) local_unnamed_addr #3

declare i32 @EVP_PKEY_assign_DSA(%struct.evp_pkey_st*, %struct.dsa_st*) local_unnamed_addr #3

declare void @DSA_free(%struct.dsa_st*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @CBB_add_asn1(%struct.cbb_st*, %struct.cbb_st*, i32) local_unnamed_addr #3

declare i32 @CBB_add_bytes(%struct.cbb_st*, i8*, i64) local_unnamed_addr #3

declare i32 @DSA_marshal_parameters(%struct.cbb_st*, %struct.dsa_st*) local_unnamed_addr #3

declare i32 @CBB_add_u8(%struct.cbb_st*, i8 zeroext) local_unnamed_addr #3

declare i32 @BN_marshal_asn1(%struct.cbb_st*, %struct.bignum_st*) local_unnamed_addr #3

declare i32 @CBB_flush(%struct.cbb_st*) local_unnamed_addr #3

declare i32 @BN_cmp(%struct.bignum_st*, %struct.bignum_st*) local_unnamed_addr #3

declare %struct.bignum_ctx* @BN_CTX_new() local_unnamed_addr #3

declare i32 @BN_mod_exp_mont_consttime(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*, %struct.bn_mont_ctx_st*) local_unnamed_addr #3

declare void @BN_CTX_free(%struct.bignum_ctx*) local_unnamed_addr #3

declare i32 @CBB_add_asn1_uint64(%struct.cbb_st*, i64) local_unnamed_addr #3

declare i32 @DSA_size(%struct.dsa_st*) local_unnamed_addr #3

declare i32 @BN_num_bits(%struct.bignum_st*) local_unnamed_addr #3

declare %struct.bignum_st* @BN_dup(%struct.bignum_st*) local_unnamed_addr #3

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
