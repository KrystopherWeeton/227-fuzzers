; ModuleID = '../../third_party/unrar/src/strfn.cpp'
source_filename = "../../third_party/unrar/src/strfn.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [1 x i32] zeroinitializer, align 4
@_ZZ7GetWidePKcE8StrTable = internal global [4 x [2048 x i32]] zeroinitializer, align 16
@_ZZ7GetWidePKcE6StrNum = internal unnamed_addr global i32 0, align 4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @_Z11NullToEmptyPKc(i8* readnone) local_unnamed_addr #0 {
  %2 = icmp eq i8* %0, null
  %3 = select i1 %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), i8* %0
  ret i8* %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32* @_Z11NullToEmptyPKw(i32* readnone) local_unnamed_addr #0 {
  %2 = icmp eq i32* %0, null
  %3 = select i1 %2, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @.str.1, i64 0, i64 0), i32* %0
  ret i32* %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z8IntToExtPKcPcm(i8* readonly, i8*, i64) local_unnamed_addr #1 {
  %4 = icmp eq i8* %1, %0
  %5 = icmp eq i64 %2, 0
  %6 = or i1 %4, %5
  br i1 %6, label %23, label %7

7:                                                ; preds = %3
  %8 = add i64 %2, -1
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %21, label %10

10:                                               ; preds = %7, %16
  %11 = phi i64 [ %19, %16 ], [ %8, %7 ]
  %12 = phi i8* [ %17, %16 ], [ %0, %7 ]
  %13 = phi i8* [ %18, %16 ], [ %1, %7 ]
  %14 = load i8, i8* %12, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds i8, i8* %12, i64 1
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %14, i8* %13, align 1
  %19 = add i64 %11, -1
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %21, label %10

21:                                               ; preds = %16, %10, %7
  %22 = phi i8* [ %1, %7 ], [ %18, %16 ], [ %13, %10 ]
  store i8 0, i8* %22, align 1
  br label %23

23:                                               ; preds = %21, %3
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z8strncpyzPcPKcm(i8* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #1 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %21, label %5

5:                                                ; preds = %3
  %6 = add i64 %2, -1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %5, %14
  %9 = phi i64 [ %17, %14 ], [ %6, %5 ]
  %10 = phi i8* [ %15, %14 ], [ %1, %5 ]
  %11 = phi i8* [ %16, %14 ], [ %0, %5 ]
  %12 = load i8, i8* %10, align 1
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds i8, i8* %10, i64 1
  %16 = getelementptr inbounds i8, i8* %11, i64 1
  store i8 %12, i8* %11, align 1
  %17 = add i64 %9, -1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %8

19:                                               ; preds = %14, %8, %5
  %20 = phi i8* [ %0, %5 ], [ %11, %8 ], [ %16, %14 ]
  store i8 0, i8* %20, align 1
  br label %21

21:                                               ; preds = %3, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z13ArcCharToWidePKcPwm13ACTW_ENCODING(i8*, i32*, i64, i32) local_unnamed_addr #2 {
  %5 = icmp eq i32 %3, 2
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = tail call zeroext i1 @_Z9UtfToWidePKcPwm(i8* %0, i32* %1, i64 %2) #12
  br label %10

8:                                                ; preds = %4
  %9 = tail call zeroext i1 @_Z10CharToWidePKcPwm(i8* %0, i32* %1, i64 %2) #12
  br label %10

10:                                               ; preds = %8, %6
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %10
  %13 = add i64 %2, -1
  %14 = getelementptr inbounds i32, i32* %1, i64 %13
  store i32 0, i32* %14, align 4
  br label %15

15:                                               ; preds = %10, %12
  ret void
}

declare zeroext i1 @_Z9UtfToWidePKcPwm(i8*, i32*, i64) local_unnamed_addr #3

declare zeroext i1 @_Z10CharToWidePKcPwm(i8*, i32*, i64) local_unnamed_addr #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_Z8stricompPKcS0_(i8* readonly, i8* readonly) local_unnamed_addr #4 {
  br label %3

3:                                                ; preds = %33, %2
  %4 = phi i8* [ %0, %2 ], [ %34, %33 ]
  %5 = phi i8* [ %1, %2 ], [ %35, %33 ]
  %6 = load i8, i8* %4, align 1
  %7 = sext i8 %6 to i32
  %8 = add nsw i32 %7, 128
  %9 = icmp ult i32 %8, 384
  br i1 %9, label %10, label %16

10:                                               ; preds = %3
  %11 = tail call i32** @__ctype_toupper_loc() #13
  %12 = load i32*, i32** %11, align 8
  %13 = sext i8 %6 to i64
  %14 = getelementptr inbounds i32, i32* %12, i64 %13
  %15 = load i32, i32* %14, align 4
  br label %16

16:                                               ; preds = %3, %10
  %17 = phi i32 [ %15, %10 ], [ %7, %3 ]
  %18 = load i8, i8* %5, align 1
  %19 = sext i8 %18 to i32
  %20 = add nsw i32 %19, 128
  %21 = icmp ult i32 %20, 384
  br i1 %21, label %22, label %28

22:                                               ; preds = %16
  %23 = tail call i32** @__ctype_toupper_loc() #13
  %24 = load i32*, i32** %23, align 8
  %25 = sext i8 %18 to i64
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  %27 = load i32, i32* %26, align 4
  br label %28

28:                                               ; preds = %16, %22
  %29 = phi i32 [ %27, %22 ], [ %19, %16 ]
  %30 = icmp eq i32 %17, %29
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  %32 = icmp eq i8 %6, 0
  br i1 %32, label %39, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds i8, i8* %4, i64 1
  %35 = getelementptr inbounds i8, i8* %5, i64 1
  br label %3

36:                                               ; preds = %28
  %37 = icmp ult i8* %4, %5
  %38 = select i1 %37, i32 -1, i32 1
  br label %39

39:                                               ; preds = %31, %36
  %40 = phi i32 [ %38, %36 ], [ 0, %31 ]
  ret i32 %40
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_Z9strnicompPKcS0_m(i8* readonly, i8* readonly, i64) local_unnamed_addr #4 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %45, label %5

5:                                                ; preds = %3, %39
  %6 = phi i8* [ %40, %39 ], [ %0, %3 ]
  %7 = phi i8* [ %41, %39 ], [ %1, %3 ]
  %8 = phi i64 [ %37, %39 ], [ %2, %3 ]
  %9 = load i8, i8* %6, align 1
  %10 = sext i8 %9 to i32
  %11 = add nsw i32 %10, 128
  %12 = icmp ult i32 %11, 384
  br i1 %12, label %13, label %19

13:                                               ; preds = %5
  %14 = tail call i32** @__ctype_toupper_loc() #13
  %15 = load i32*, i32** %14, align 8
  %16 = sext i8 %9 to i64
  %17 = getelementptr inbounds i32, i32* %15, i64 %16
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %5, %13
  %20 = phi i32 [ %18, %13 ], [ %10, %5 ]
  %21 = load i8, i8* %7, align 1
  %22 = sext i8 %21 to i32
  %23 = add nsw i32 %22, 128
  %24 = icmp ult i32 %23, 384
  br i1 %24, label %25, label %31

25:                                               ; preds = %19
  %26 = tail call i32** @__ctype_toupper_loc() #13
  %27 = load i32*, i32** %26, align 8
  %28 = sext i8 %21 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %28
  %30 = load i32, i32* %29, align 4
  br label %31

31:                                               ; preds = %19, %25
  %32 = phi i32 [ %30, %25 ], [ %22, %19 ]
  %33 = icmp eq i32 %20, %32
  br i1 %33, label %34, label %42

34:                                               ; preds = %31
  %35 = icmp eq i8 %9, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %34
  %37 = add i64 %8, -1
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = getelementptr inbounds i8, i8* %6, i64 1
  %41 = getelementptr inbounds i8, i8* %7, i64 1
  br label %5

42:                                               ; preds = %31
  %43 = icmp ult i8* %6, %7
  %44 = select i1 %43, i32 -1, i32 1
  br label %45

45:                                               ; preds = %34, %36, %3, %42
  %46 = phi i32 [ %44, %42 ], [ 0, %3 ], [ 0, %36 ], [ 0, %34 ]
  ret i32 %46
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32* @_Z9RemoveEOLPw(i32* returned) local_unnamed_addr #5 {
  %2 = tail call i64 @wcslen(i32* %0) #14
  %3 = trunc i64 %2 to i32
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = shl i64 %2, 32
  %7 = ashr exact i64 %6, 32
  br label %8

8:                                                ; preds = %5, %14
  %9 = phi i64 [ %7, %5 ], [ %10, %14 ]
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds i32, i32* %0, i64 %10
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %13 [
    i32 13, label %14
    i32 10, label %14
    i32 32, label %14
    i32 9, label %14
  ]

13:                                               ; preds = %14, %8, %1
  ret i32* %0

14:                                               ; preds = %8, %8, %8, %8
  store i32 0, i32* %11, align 4
  %15 = icmp sgt i64 %10, 0
  br i1 %15, label %8, label %13
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @wcslen(i32* nocapture) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nofree nounwind ssp uwtable
define hidden i32* @_Z8RemoveLFPw(i32* returned) local_unnamed_addr #5 {
  %2 = tail call i64 @wcslen(i32* %0) #14
  %3 = trunc i64 %2 to i32
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = shl i64 %2, 32
  %7 = ashr exact i64 %6, 32
  br label %8

8:                                                ; preds = %5, %14
  %9 = phi i64 [ %7, %5 ], [ %10, %14 ]
  %10 = add nsw i64 %9, -1
  %11 = getelementptr inbounds i32, i32* %0, i64 %10
  %12 = load i32, i32* %11, align 4
  switch i32 %12, label %13 [
    i32 13, label %14
    i32 10, label %14
  ]

13:                                               ; preds = %14, %8, %1
  ret i32* %0

14:                                               ; preds = %8, %8
  store i32 0, i32* %11, align 4
  %15 = icmp sgt i64 %10, 0
  br i1 %15, label %8, label %13
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i8 @_Z10loctolowerh(i8 zeroext) local_unnamed_addr #4 {
  %2 = tail call i32** @__ctype_tolower_loc() #13
  %3 = load i32*, i32** %2, align 8
  %4 = zext i8 %0 to i64
  %5 = getelementptr inbounds i32, i32* %3, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  ret i8 %7
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i8 @_Z10loctoupperh(i8 zeroext) local_unnamed_addr #4 {
  %2 = tail call i32** @__ctype_toupper_loc() #13
  %3 = load i32*, i32** %2, align 8
  %4 = zext i8 %0 to i64
  %5 = getelementptr inbounds i32, i32* %3, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = trunc i32 %6 to i8
  ret i8 %7
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i8 @_Z8etoupperh(i8 zeroext) local_unnamed_addr #4 {
  %2 = icmp eq i8 %0, 105
  br i1 %2, label %10, label %3

3:                                                ; preds = %1
  %4 = tail call i32** @__ctype_toupper_loc() #13
  %5 = load i32*, i32** %4, align 8
  %6 = zext i8 %0 to i64
  %7 = getelementptr inbounds i32, i32* %5, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = trunc i32 %8 to i8
  br label %10

10:                                               ; preds = %1, %3
  %11 = phi i8 [ %9, %3 ], [ 73, %1 ]
  ret i8 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden signext i32 @_Z9etoupperww(i32 signext) local_unnamed_addr #2 {
  %2 = icmp eq i32 %0, 105
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = tail call i32 @_Z8toupperwi(i32 %0) #12
  br label %5

5:                                                ; preds = %1, %3
  %6 = phi i32 [ %4, %3 ], [ 73, %1 ]
  ret i32 %6
}

declare i32 @_Z8toupperwi(i32) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_Z7IsDigiti(i32) local_unnamed_addr #0 {
  %2 = add i32 %0, -48
  %3 = icmp ult i32 %2, 10
  ret i1 %3
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_Z7IsSpacei(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 32
  %3 = icmp eq i32 %0, 9
  %4 = or i1 %2, %3
  ret i1 %4
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_Z7IsAlphai(i32) local_unnamed_addr #0 {
  %2 = and i32 %0, -33
  %3 = add i32 %2, -65
  %4 = icmp ult i32 %3, 26
  ret i1 %4
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z8BinToHexPKhmPcPwm(i8* nocapture readonly, i64, i8*, i32*, i64) local_unnamed_addr #1 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %5
  %8 = icmp eq i8* %2, null
  %9 = add i64 %4, -2
  %10 = icmp eq i32* %3, null
  br label %17

11:                                               ; preds = %57, %5
  %12 = phi i32 [ 0, %5 ], [ %58, %57 ]
  %13 = phi i32 [ 0, %5 ], [ %47, %57 ]
  %14 = icmp ne i8* %2, null
  %15 = icmp ne i64 %4, 0
  %16 = and i1 %14, %15
  br i1 %16, label %62, label %65

17:                                               ; preds = %7, %57
  %18 = phi i64 [ 0, %7 ], [ %60, %57 ]
  %19 = phi i32 [ 0, %7 ], [ %47, %57 ]
  %20 = phi i32 [ 0, %7 ], [ %58, %57 ]
  %21 = phi i32 [ 0, %7 ], [ %59, %57 ]
  %22 = getelementptr inbounds i8, i8* %0, i64 %18
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = lshr i32 %24, 4
  %26 = and i32 %24, 15
  %27 = icmp ugt i8 %23, -97
  %28 = add nuw nsw i32 %25, 87
  %29 = or i32 %25, 48
  %30 = select i1 %27, i32 %28, i32 %29
  %31 = icmp ugt i32 %26, 9
  %32 = add nuw nsw i32 %26, 87
  %33 = or i32 %26, 48
  %34 = select i1 %31, i32 %32, i32 %33
  br i1 %8, label %46, label %35

35:                                               ; preds = %17
  %36 = zext i32 %19 to i64
  %37 = icmp ugt i64 %9, %36
  br i1 %37, label %38, label %46

38:                                               ; preds = %35
  %39 = trunc i32 %30 to i8
  %40 = add i32 %19, 1
  %41 = getelementptr inbounds i8, i8* %2, i64 %36
  store i8 %39, i8* %41, align 1
  %42 = trunc i32 %34 to i8
  %43 = add i32 %19, 2
  %44 = zext i32 %40 to i64
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  store i8 %42, i8* %45, align 1
  br label %46

46:                                               ; preds = %17, %38, %35
  %47 = phi i32 [ %43, %38 ], [ %19, %35 ], [ %19, %17 ]
  br i1 %10, label %57, label %48

48:                                               ; preds = %46
  %49 = zext i32 %20 to i64
  %50 = icmp ugt i64 %9, %49
  br i1 %50, label %51, label %57

51:                                               ; preds = %48
  %52 = add i32 %20, 1
  %53 = getelementptr inbounds i32, i32* %3, i64 %49
  store i32 %30, i32* %53, align 4
  %54 = add i32 %20, 2
  %55 = zext i32 %52 to i64
  %56 = getelementptr inbounds i32, i32* %3, i64 %55
  store i32 %34, i32* %56, align 4
  br label %57

57:                                               ; preds = %46, %51, %48
  %58 = phi i32 [ %54, %51 ], [ %20, %48 ], [ %20, %46 ]
  %59 = add i32 %21, 1
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %60, %1
  br i1 %61, label %17, label %11

62:                                               ; preds = %11
  %63 = zext i32 %13 to i64
  %64 = getelementptr inbounds i8, i8* %2, i64 %63
  store i8 0, i8* %64, align 1
  br label %65

65:                                               ; preds = %62, %11
  %66 = icmp ne i32* %3, null
  %67 = and i1 %66, %15
  br i1 %67, label %68, label %71

68:                                               ; preds = %65
  %69 = zext i32 %12 to i64
  %70 = getelementptr inbounds i32, i32* %3, i64 %69
  store i32 0, i32* %70, align 4
  br label %71

71:                                               ; preds = %68, %65
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @_Z9GetDigitsj(i32) local_unnamed_addr #0 {
  %2 = icmp ugt i32 %0, 9
  br i1 %2, label %3, label %9

3:                                                ; preds = %1, %3
  %4 = phi i32 [ %7, %3 ], [ 1, %1 ]
  %5 = phi i32 [ %6, %3 ], [ %0, %1 ]
  %6 = udiv i32 %5, 10
  %7 = add i32 %4, 1
  %8 = icmp ugt i32 %5, 99
  br i1 %8, label %3, label %9

9:                                                ; preds = %3, %1
  %10 = phi i32 [ 1, %1 ], [ %7, %3 ]
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z8LowAsciiPKc(i8* nocapture readonly) local_unnamed_addr #8 {
  %2 = load i8, i8* %0, align 1
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %13, label %8

4:                                                ; preds = %8
  %5 = getelementptr inbounds i8, i8* %0, i64 %12
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1, %4
  %9 = phi i8 [ %6, %4 ], [ %2, %1 ]
  %10 = phi i64 [ %12, %4 ], [ 0, %1 ]
  %11 = icmp slt i8 %9, 0
  %12 = add i64 %10, 1
  br i1 %11, label %13, label %4

13:                                               ; preds = %8, %4, %1
  %14 = phi i1 [ true, %1 ], [ true, %4 ], [ false, %8 ]
  ret i1 %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_Z8LowAsciiPKw(i32* nocapture readonly) local_unnamed_addr #8 {
  %2 = load i32, i32* %0, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %13, label %8

4:                                                ; preds = %8
  %5 = getelementptr inbounds i32, i32* %0, i64 %12
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %13, label %8

8:                                                ; preds = %1, %4
  %9 = phi i32 [ %6, %4 ], [ %2, %1 ]
  %10 = phi i64 [ %12, %4 ], [ 0, %1 ]
  %11 = icmp ugt i32 %9, 127
  %12 = add i64 %10, 1
  br i1 %11, label %13, label %4

13:                                               ; preds = %8, %4, %1
  %14 = phi i1 [ true, %1 ], [ true, %4 ], [ false, %8 ]
  ret i1 %14
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_Z9wcsicompcPKwS0_(i32* readonly, i32* readonly) local_unnamed_addr #4 {
  %3 = tail call i32 @wcscmp(i32* %0, i32* %1) #14
  ret i32 %3
}

; Function Attrs: nounwind readonly
declare i32 @wcscmp(i32*, i32*) local_unnamed_addr #9

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @_Z10wcsnicompcPKwS0_m(i32* readonly, i32* readonly, i64) local_unnamed_addr #4 {
  %4 = tail call i32 @wcsncmp(i32* %0, i32* %1, i64 %2) #14
  ret i32 %4
}

; Function Attrs: nounwind readonly
declare i32 @wcsncmp(i32*, i32*, i64) local_unnamed_addr #9

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z8wcsncpyzPwPKwm(i32* nocapture, i32* nocapture readonly, i64) local_unnamed_addr #1 {
  %4 = icmp eq i64 %2, 0
  br i1 %4, label %21, label %5

5:                                                ; preds = %3
  %6 = add i64 %2, -1
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %19, label %8

8:                                                ; preds = %5, %14
  %9 = phi i64 [ %17, %14 ], [ %6, %5 ]
  %10 = phi i32* [ %15, %14 ], [ %1, %5 ]
  %11 = phi i32* [ %16, %14 ], [ %0, %5 ]
  %12 = load i32, i32* %10, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %19, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds i32, i32* %10, i64 1
  %16 = getelementptr inbounds i32, i32* %11, i64 1
  store i32 %12, i32* %11, align 4
  %17 = add i64 %9, -1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %8

19:                                               ; preds = %14, %8, %5
  %20 = phi i32* [ %0, %5 ], [ %11, %8 ], [ %16, %14 ]
  store i32 0, i32* %20, align 4
  br label %21

21:                                               ; preds = %3, %19
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_Z8strncatzPcPKcm(i8* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #5 {
  %4 = tail call i64 @strlen(i8* %0) #14
  %5 = icmp ult i64 %4, %2
  br i1 %5, label %6, label %26

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %0, i64 %4
  %8 = sub i64 %2, %4
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, -1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %10, %19
  %14 = phi i64 [ %22, %19 ], [ %11, %10 ]
  %15 = phi i8* [ %20, %19 ], [ %1, %10 ]
  %16 = phi i8* [ %21, %19 ], [ %7, %10 ]
  %17 = load i8, i8* %15, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds i8, i8* %15, i64 1
  %21 = getelementptr inbounds i8, i8* %16, i64 1
  store i8 %17, i8* %16, align 1
  %22 = add i64 %14, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %13

24:                                               ; preds = %19, %13, %10
  %25 = phi i8* [ %7, %10 ], [ %21, %19 ], [ %16, %13 ]
  store i8 0, i8* %25, align 1
  br label %26

26:                                               ; preds = %24, %6, %3
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #7

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_Z8wcsncatzPwPKwm(i32* nocapture, i32* nocapture readonly, i64) local_unnamed_addr #5 {
  %4 = tail call i64 @wcslen(i32* %0) #14
  %5 = icmp ult i64 %4, %2
  br i1 %5, label %6, label %26

6:                                                ; preds = %3
  %7 = getelementptr inbounds i32, i32* %0, i64 %4
  %8 = sub i64 %2, %4
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %26, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, -1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %24, label %13

13:                                               ; preds = %10, %19
  %14 = phi i64 [ %22, %19 ], [ %11, %10 ]
  %15 = phi i32* [ %20, %19 ], [ %1, %10 ]
  %16 = phi i32* [ %21, %19 ], [ %7, %10 ]
  %17 = load i32, i32* %15, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds i32, i32* %15, i64 1
  %21 = getelementptr inbounds i32, i32* %16, i64 1
  store i32 %17, i32* %16, align 4
  %22 = add i64 %14, -1
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %13

24:                                               ; preds = %19, %13, %10
  %25 = phi i32* [ %7, %10 ], [ %21, %19 ], [ %16, %13 ]
  store i32 0, i32* %25, align 4
  br label %26

26:                                               ; preds = %24, %6, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_Z4itoalPcm(i64, i8* nocapture, i64) local_unnamed_addr #10 {
  %4 = alloca [50 x i8], align 16
  %5 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 50, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 50, i1 false)
  %6 = icmp slt i64 %0, 0
  %7 = lshr i64 %0, 63
  %8 = sub nsw i64 0, %0
  %9 = select i1 %6, i64 %8, i64 %0
  %10 = sub i64 %2, %7
  br label %11

11:                                               ; preds = %16, %3
  %12 = phi i64 [ %9, %3 ], [ %21, %16 ]
  %13 = phi i64 [ 0, %3 ], [ %14, %16 ]
  %14 = add nuw i64 %13, 1
  %15 = icmp ult i64 %14, %10
  br i1 %15, label %16, label %24

16:                                               ; preds = %11
  %17 = srem i64 %12, 10
  %18 = trunc i64 %17 to i8
  %19 = add nsw i8 %18, 48
  %20 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 %13
  store i8 %19, i8* %20, align 1
  %21 = sdiv i64 %12, 10
  %22 = add i64 %12, 9
  %23 = icmp ugt i64 %22, 18
  br i1 %23, label %11, label %24

24:                                               ; preds = %11, %16
  %25 = phi i64 [ %13, %11 ], [ %14, %16 ]
  br i1 %6, label %26, label %29

26:                                               ; preds = %24
  %27 = add nuw i64 %25, 1
  %28 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 %25
  store i8 45, i8* %28, align 1
  br label %31

29:                                               ; preds = %24
  %30 = icmp eq i64 %25, 0
  br i1 %30, label %103, label %31

31:                                               ; preds = %26, %29
  %32 = phi i64 [ %27, %26 ], [ %25, %29 ]
  %33 = icmp ult i64 %32, 32
  br i1 %33, label %34, label %36

34:                                               ; preds = %101, %31
  %35 = phi i64 [ 0, %31 ], [ %37, %101 ]
  br label %106

36:                                               ; preds = %31
  %37 = and i64 %32, -32
  %38 = add i64 %37, -32
  %39 = lshr exact i64 %38, 5
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %82, label %43

43:                                               ; preds = %36
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %79, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %80, %45 ]
  %48 = xor i64 %46, -1
  %49 = add i64 %32, %48
  %50 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 %49
  %51 = getelementptr inbounds i8, i8* %50, i64 -15
  %52 = bitcast i8* %51 to <16 x i8>*
  %53 = load <16 x i8>, <16 x i8>* %52, align 1
  %54 = shufflevector <16 x i8> %53, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %55 = getelementptr inbounds i8, i8* %50, i64 -31
  %56 = bitcast i8* %55 to <16 x i8>*
  %57 = load <16 x i8>, <16 x i8>* %56, align 1
  %58 = shufflevector <16 x i8> %57, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %59 = getelementptr inbounds i8, i8* %1, i64 %46
  %60 = bitcast i8* %59 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %60, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 16
  %62 = bitcast i8* %61 to <16 x i8>*
  store <16 x i8> %58, <16 x i8>* %62, align 1
  %63 = or i64 %46, 32
  %64 = sub nuw nsw i64 -33, %46
  %65 = add i64 %32, %64
  %66 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 %65
  %67 = getelementptr inbounds i8, i8* %66, i64 -15
  %68 = bitcast i8* %67 to <16 x i8>*
  %69 = load <16 x i8>, <16 x i8>* %68, align 1
  %70 = shufflevector <16 x i8> %69, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %71 = getelementptr inbounds i8, i8* %66, i64 -31
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1
  %74 = shufflevector <16 x i8> %73, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %75 = getelementptr inbounds i8, i8* %1, i64 %63
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %76, align 1
  %77 = getelementptr inbounds i8, i8* %75, i64 16
  %78 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %74, <16 x i8>* %78, align 1
  %79 = add i64 %46, 64
  %80 = add i64 %47, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %45, !llvm.loop !2

82:                                               ; preds = %45, %36
  %83 = phi i64 [ 0, %36 ], [ %79, %45 ]
  %84 = icmp eq i64 %41, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %82
  %86 = xor i64 %83, -1
  %87 = add i64 %32, %86
  %88 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 %87
  %89 = getelementptr inbounds i8, i8* %88, i64 -15
  %90 = bitcast i8* %89 to <16 x i8>*
  %91 = load <16 x i8>, <16 x i8>* %90, align 1
  %92 = shufflevector <16 x i8> %91, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %93 = getelementptr inbounds i8, i8* %88, i64 -31
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1
  %96 = shufflevector <16 x i8> %95, <16 x i8> undef, <16 x i32> <i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %97 = getelementptr inbounds i8, i8* %1, i64 %83
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %98, align 1
  %99 = getelementptr inbounds i8, i8* %97, i64 16
  %100 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %96, <16 x i8>* %100, align 1
  br label %101

101:                                              ; preds = %82, %85
  %102 = icmp eq i64 %32, %37
  br i1 %102, label %103, label %34

103:                                              ; preds = %106, %101, %29
  %104 = phi i64 [ 0, %29 ], [ %32, %101 ], [ %32, %106 ]
  %105 = getelementptr inbounds i8, i8* %1, i64 %104
  store i8 0, i8* %105, align 1
  call void @llvm.lifetime.end.p0i8(i64 50, i8* nonnull %5) #12
  ret void

106:                                              ; preds = %34, %106
  %107 = phi i64 [ %113, %106 ], [ %35, %34 ]
  %108 = xor i64 %107, -1
  %109 = add i64 %32, %108
  %110 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = getelementptr inbounds i8, i8* %1, i64 %107
  store i8 %111, i8* %112, align 1
  %113 = add nuw i64 %107, 1
  %114 = icmp eq i64 %113, %32
  br i1 %114, label %103, label %106, !llvm.loop !4
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind ssp uwtable writeonly
define hidden void @_Z4itoalPwm(i64, i32* nocapture, i64) local_unnamed_addr #10 {
  %4 = alloca [50 x i32], align 16
  %5 = bitcast [50 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 -86, i64 200, i1 false)
  %6 = icmp slt i64 %0, 0
  %7 = lshr i64 %0, 63
  %8 = sub nsw i64 0, %0
  %9 = select i1 %6, i64 %8, i64 %0
  %10 = sub i64 %2, %7
  br label %11

11:                                               ; preds = %16, %3
  %12 = phi i64 [ %9, %3 ], [ %21, %16 ]
  %13 = phi i64 [ 0, %3 ], [ %14, %16 ]
  %14 = add nuw i64 %13, 1
  %15 = icmp ult i64 %14, %10
  br i1 %15, label %16, label %24

16:                                               ; preds = %11
  %17 = srem i64 %12, 10
  %18 = trunc i64 %17 to i32
  %19 = add nsw i32 %18, 48
  %20 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %13
  store i32 %19, i32* %20, align 4
  %21 = sdiv i64 %12, 10
  %22 = add i64 %12, 9
  %23 = icmp ugt i64 %22, 18
  br i1 %23, label %11, label %24

24:                                               ; preds = %11, %16
  %25 = phi i64 [ %13, %11 ], [ %14, %16 ]
  br i1 %6, label %26, label %29

26:                                               ; preds = %24
  %27 = add nuw i64 %25, 1
  %28 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %25
  store i32 45, i32* %28, align 4
  br label %31

29:                                               ; preds = %24
  %30 = icmp eq i64 %25, 0
  br i1 %30, label %103, label %31

31:                                               ; preds = %26, %29
  %32 = phi i64 [ %27, %26 ], [ %25, %29 ]
  %33 = icmp ult i64 %32, 8
  br i1 %33, label %34, label %36

34:                                               ; preds = %101, %31
  %35 = phi i64 [ 0, %31 ], [ %37, %101 ]
  br label %106

36:                                               ; preds = %31
  %37 = and i64 %32, -8
  %38 = add i64 %37, -8
  %39 = lshr exact i64 %38, 3
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %82, label %43

43:                                               ; preds = %36
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %79, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %80, %45 ]
  %48 = xor i64 %46, -1
  %49 = add i64 %32, %48
  %50 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %49
  %51 = getelementptr inbounds i32, i32* %50, i64 -3
  %52 = bitcast i32* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 4
  %54 = shufflevector <4 x i32> %53, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %55 = getelementptr inbounds i32, i32* %50, i64 -7
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 4
  %58 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %59 = getelementptr inbounds i32, i32* %1, i64 %46
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %54, <4 x i32>* %60, align 4
  %61 = getelementptr inbounds i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %58, <4 x i32>* %62, align 4
  %63 = or i64 %46, 8
  %64 = sub nuw nsw i64 -9, %46
  %65 = add i64 %32, %64
  %66 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %65
  %67 = getelementptr inbounds i32, i32* %66, i64 -3
  %68 = bitcast i32* %67 to <4 x i32>*
  %69 = load <4 x i32>, <4 x i32>* %68, align 4
  %70 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %71 = getelementptr inbounds i32, i32* %66, i64 -7
  %72 = bitcast i32* %71 to <4 x i32>*
  %73 = load <4 x i32>, <4 x i32>* %72, align 4
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %75 = getelementptr inbounds i32, i32* %1, i64 %63
  %76 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %70, <4 x i32>* %76, align 4
  %77 = getelementptr inbounds i32, i32* %75, i64 4
  %78 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %78, align 4
  %79 = add i64 %46, 16
  %80 = add i64 %47, -2
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %45, !llvm.loop !6

82:                                               ; preds = %45, %36
  %83 = phi i64 [ 0, %36 ], [ %79, %45 ]
  %84 = icmp eq i64 %41, 0
  br i1 %84, label %101, label %85

85:                                               ; preds = %82
  %86 = xor i64 %83, -1
  %87 = add i64 %32, %86
  %88 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %87
  %89 = getelementptr inbounds i32, i32* %88, i64 -3
  %90 = bitcast i32* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 4
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %93 = getelementptr inbounds i32, i32* %88, i64 -7
  %94 = bitcast i32* %93 to <4 x i32>*
  %95 = load <4 x i32>, <4 x i32>* %94, align 4
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %97 = getelementptr inbounds i32, i32* %1, i64 %83
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %98, align 4
  %99 = getelementptr inbounds i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %100, align 4
  br label %101

101:                                              ; preds = %82, %85
  %102 = icmp eq i64 %32, %37
  br i1 %102, label %103, label %34

103:                                              ; preds = %106, %101, %29
  %104 = phi i64 [ 0, %29 ], [ %32, %101 ], [ %32, %106 ]
  %105 = getelementptr inbounds i32, i32* %1, i64 %104
  store i32 0, i32* %105, align 4
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %5) #12
  ret void

106:                                              ; preds = %34, %106
  %107 = phi i64 [ %113, %106 ], [ %35, %34 ]
  %108 = xor i64 %107, -1
  %109 = add i64 %32, %108
  %110 = getelementptr inbounds [50 x i32], [50 x i32]* %4, i64 0, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %1, i64 %107
  store i32 %111, i32* %112, align 4
  %113 = add nuw i64 %107, 1
  %114 = icmp eq i64 %113, %32
  br i1 %114, label %103, label %106, !llvm.loop !7
}

; Function Attrs: nounwind ssp uwtable
define hidden nonnull i32* @_Z7GetWidePKc(i8*) local_unnamed_addr #2 {
  %2 = load i32, i32* @_ZZ7GetWidePKcE6StrNum, align 4
  %3 = add i32 %2, 1
  %4 = icmp ugt i32 %3, 3
  %5 = select i1 %4, i32 0, i32 %3
  store i32 %5, i32* @_ZZ7GetWidePKcE6StrNum, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [4 x [2048 x i32]], [4 x [2048 x i32]]* @_ZZ7GetWidePKcE8StrTable, i64 0, i64 %6, i64 0
  %8 = tail call zeroext i1 @_Z10CharToWidePKcPwm(i8* %0, i32* %7, i64 2048) #12
  %9 = getelementptr inbounds [4 x [2048 x i32]], [4 x [2048 x i32]]* @_ZZ7GetWidePKcE8StrTable, i64 0, i64 %6, i64 2047
  store i32 0, i32* %9, align 4
  ret i32* %7
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32* @_Z11GetCmdParamPKwPwm(i32* readonly, i32*, i64) local_unnamed_addr #1 {
  br label %4

4:                                                ; preds = %10, %3
  %5 = phi i32* [ %0, %3 ], [ %11, %10 ]
  %6 = load i32, i32* %5, align 4
  switch i32 %6, label %7 [
    i32 32, label %10
    i32 9, label %10
    i32 0, label %54
  ]

7:                                                ; preds = %4
  %8 = icmp ne i32* %1, null
  %9 = add i64 %2, -1
  br label %12

10:                                               ; preds = %4, %4
  %11 = getelementptr inbounds i32, i32* %5, i64 1
  br label %4

12:                                               ; preds = %7, %41
  %13 = phi i32 [ %6, %7 ], [ %46, %41 ]
  %14 = phi i8 [ 0, %7 ], [ %44, %41 ]
  %15 = phi i64 [ 0, %7 ], [ %43, %41 ]
  %16 = phi i32* [ %5, %7 ], [ %45, %41 ]
  %17 = and i8 %14, 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %12
  switch i32 %13, label %35 [
    i32 32, label %48
    i32 9, label %48
    i32 34, label %22
  ]

20:                                               ; preds = %12
  %21 = icmp eq i32 %13, 34
  br i1 %21, label %22, label %35

22:                                               ; preds = %19, %20
  %23 = getelementptr inbounds i32, i32* %16, i64 1
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, 34
  br i1 %25, label %26, label %32

26:                                               ; preds = %22
  %27 = icmp ult i64 %15, %9
  %28 = and i1 %8, %27
  br i1 %28, label %29, label %41

29:                                               ; preds = %26
  %30 = add nuw i64 %15, 1
  %31 = getelementptr inbounds i32, i32* %1, i64 %15
  store i32 34, i32* %31, align 4
  br label %41

32:                                               ; preds = %22
  %33 = xor i1 %18, true
  %34 = zext i1 %33 to i8
  br label %41

35:                                               ; preds = %19, %20
  %36 = icmp ult i64 %15, %9
  %37 = and i1 %8, %36
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = add nuw i64 %15, 1
  %40 = getelementptr inbounds i32, i32* %1, i64 %15
  store i32 %13, i32* %40, align 4
  br label %41

41:                                               ; preds = %29, %26, %35, %38, %32
  %42 = phi i32* [ %16, %32 ], [ %16, %38 ], [ %16, %35 ], [ %23, %26 ], [ %23, %29 ]
  %43 = phi i64 [ %15, %32 ], [ %39, %38 ], [ %15, %35 ], [ %15, %26 ], [ %30, %29 ]
  %44 = phi i8 [ %34, %32 ], [ %14, %38 ], [ %14, %35 ], [ %14, %26 ], [ %14, %29 ]
  %45 = getelementptr inbounds i32, i32* %42, i64 1
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %12

48:                                               ; preds = %41, %19, %19
  %49 = phi i32* [ %45, %41 ], [ %16, %19 ], [ %16, %19 ]
  %50 = phi i64 [ %43, %41 ], [ %15, %19 ], [ %15, %19 ]
  %51 = icmp eq i32* %1, null
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i32, i32* %1, i64 %50
  store i32 0, i32* %53, align 4
  br label %54

54:                                               ; preds = %4, %52, %48
  %55 = phi i32* [ %49, %48 ], [ %49, %52 ], [ null, %4 ]
  ret i32* %55
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_Z16PrintfPrepareFmtPKwPwm(i32* nocapture readonly, i32* nocapture, i64) local_unnamed_addr #1 {
  %4 = load i32, i32* %0, align 4
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %210, label %6

6:                                                ; preds = %3
  %7 = add i64 %2, -1
  br label %8

8:                                                ; preds = %6, %196
  %9 = phi i32 [ %4, %6 ], [ %208, %196 ]
  %10 = phi i32 [ 0, %6 ], [ %204, %196 ]
  %11 = phi i32 [ 0, %6 ], [ %200, %196 ]
  %12 = zext i32 %10 to i64
  %13 = icmp ugt i64 %7, %12
  br i1 %13, label %14, label %210

14:                                               ; preds = %8
  %15 = icmp eq i32 %9, 37
  br i1 %15, label %16, label %196

16:                                               ; preds = %14
  %17 = icmp eq i32 %11, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = add i32 %11, -1
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %0, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, 37
  br i1 %23, label %196, label %24

24:                                               ; preds = %18, %16
  br label %25

25:                                               ; preds = %34, %24
  %26 = phi i32 [ %11, %24 ], [ %27, %34 ]
  %27 = add i32 %26, 1
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %0, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = add i32 %30, -48
  %32 = icmp ult i32 %31, 10
  br i1 %32, label %34, label %33

33:                                               ; preds = %25
  switch i32 %30, label %196 [
    i32 45, label %34
    i32 115, label %35
  ]

34:                                               ; preds = %33, %25
  br label %25

35:                                               ; preds = %33
  %36 = zext i32 %27 to i64
  %37 = sub i32 1, %11
  %38 = add i32 %37, %27
  %39 = zext i32 %38 to i64
  %40 = sub i64 %2, %39
  %41 = icmp ugt i64 %40, %12
  br i1 %41, label %42, label %196

42:                                               ; preds = %35
  %43 = icmp ult i32 %11, %27
  br i1 %43, label %44, label %189

44:                                               ; preds = %42
  %45 = zext i32 %11 to i64
  %46 = sub nsw i64 %36, %45
  %47 = icmp ult i64 %46, 8
  br i1 %47, label %133, label %48

48:                                               ; preds = %44
  %49 = xor i64 %45, -1
  %50 = add nsw i64 %49, %36
  %51 = trunc i64 %50 to i32
  %52 = xor i32 %10, -1
  %53 = icmp ult i32 %52, %51
  %54 = icmp ugt i64 %50, 4294967295
  %55 = or i1 %53, %54
  br i1 %55, label %133, label %56

56:                                               ; preds = %48
  %57 = getelementptr i32, i32* %0, i64 %45
  %58 = getelementptr i32, i32* %0, i64 %36
  %59 = getelementptr i32, i32* %1, i64 %12
  %60 = add nuw nsw i64 %12, %36
  %61 = sub nsw i64 %60, %45
  %62 = getelementptr i32, i32* %1, i64 %61
  %63 = icmp ult i32* %57, %62
  %64 = icmp ult i32* %59, %58
  %65 = and i1 %63, %64
  br i1 %65, label %133, label %66

66:                                               ; preds = %56
  %67 = and i64 %46, -8
  %68 = add nsw i64 %67, %45
  %69 = trunc i64 %67 to i32
  %70 = add i32 %10, %69
  %71 = add nsw i64 %67, -8
  %72 = lshr exact i64 %71, 3
  %73 = add nuw nsw i64 %72, 1
  %74 = and i64 %73, 1
  %75 = icmp eq i64 %71, 0
  br i1 %75, label %113, label %76

76:                                               ; preds = %66
  %77 = sub nuw nsw i64 %73, %74
  br label %78

78:                                               ; preds = %78, %76
  %79 = phi i64 [ 0, %76 ], [ %110, %78 ]
  %80 = phi i64 [ %77, %76 ], [ %111, %78 ]
  %81 = add i64 %79, %45
  %82 = trunc i64 %79 to i32
  %83 = add i32 %10, %82
  %84 = getelementptr inbounds i32, i32* %0, i64 %81
  %85 = bitcast i32* %84 to <4 x i32>*
  %86 = load <4 x i32>, <4 x i32>* %85, align 4, !alias.scope !8, !noalias !11
  %87 = getelementptr inbounds i32, i32* %84, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 4, !alias.scope !8, !noalias !11
  %90 = zext i32 %83 to i64
  %91 = getelementptr inbounds i32, i32* %1, i64 %90
  %92 = bitcast i32* %91 to <4 x i32>*
  store <4 x i32> %86, <4 x i32>* %92, align 4, !alias.scope !11
  %93 = getelementptr inbounds i32, i32* %91, i64 4
  %94 = bitcast i32* %93 to <4 x i32>*
  store <4 x i32> %89, <4 x i32>* %94, align 4, !alias.scope !11
  %95 = or i64 %79, 8
  %96 = add i64 %95, %45
  %97 = trunc i64 %95 to i32
  %98 = add i32 %10, %97
  %99 = getelementptr inbounds i32, i32* %0, i64 %96
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !8, !noalias !11
  %102 = getelementptr inbounds i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !8, !noalias !11
  %105 = zext i32 %98 to i64
  %106 = getelementptr inbounds i32, i32* %1, i64 %105
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %107, align 4, !alias.scope !11
  %108 = getelementptr inbounds i32, i32* %106, i64 4
  %109 = bitcast i32* %108 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %109, align 4, !alias.scope !11
  %110 = add i64 %79, 16
  %111 = add i64 %80, -2
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %78, !llvm.loop !13

113:                                              ; preds = %78, %66
  %114 = phi i64 [ 0, %66 ], [ %110, %78 ]
  %115 = icmp eq i64 %74, 0
  br i1 %115, label %131, label %116

116:                                              ; preds = %113
  %117 = add i64 %114, %45
  %118 = trunc i64 %114 to i32
  %119 = add i32 %10, %118
  %120 = getelementptr inbounds i32, i32* %0, i64 %117
  %121 = bitcast i32* %120 to <4 x i32>*
  %122 = load <4 x i32>, <4 x i32>* %121, align 4, !alias.scope !8, !noalias !11
  %123 = getelementptr inbounds i32, i32* %120, i64 4
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 4, !alias.scope !8, !noalias !11
  %126 = zext i32 %119 to i64
  %127 = getelementptr inbounds i32, i32* %1, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> %122, <4 x i32>* %128, align 4, !alias.scope !11
  %129 = getelementptr inbounds i32, i32* %127, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %125, <4 x i32>* %130, align 4, !alias.scope !11
  br label %131

131:                                              ; preds = %113, %116
  %132 = icmp eq i64 %46, %67
  br i1 %132, label %186, label %133

133:                                              ; preds = %131, %56, %48, %44
  %134 = phi i64 [ %45, %56 ], [ %45, %48 ], [ %45, %44 ], [ %68, %131 ]
  %135 = phi i32 [ %10, %56 ], [ %10, %48 ], [ %10, %44 ], [ %70, %131 ]
  %136 = sub nsw i64 %36, %134
  %137 = xor i64 %134, -1
  %138 = add nsw i64 %137, %36
  %139 = and i64 %136, 3
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %153, label %141

141:                                              ; preds = %133, %141
  %142 = phi i64 [ %145, %141 ], [ %134, %133 ]
  %143 = phi i32 [ %148, %141 ], [ %135, %133 ]
  %144 = phi i64 [ %151, %141 ], [ %139, %133 ]
  %145 = add nuw nsw i64 %142, 1
  %146 = getelementptr inbounds i32, i32* %0, i64 %142
  %147 = load i32, i32* %146, align 4
  %148 = add i32 %143, 1
  %149 = zext i32 %143 to i64
  %150 = getelementptr inbounds i32, i32* %1, i64 %149
  store i32 %147, i32* %150, align 4
  %151 = add i64 %144, -1
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %153, label %141, !llvm.loop !14

153:                                              ; preds = %141, %133
  %154 = phi i32 [ undef, %133 ], [ %148, %141 ]
  %155 = phi i64 [ %134, %133 ], [ %145, %141 ]
  %156 = phi i32 [ %135, %133 ], [ %148, %141 ]
  %157 = icmp ult i64 %138, 3
  br i1 %157, label %186, label %158

158:                                              ; preds = %153, %158
  %159 = phi i64 [ %179, %158 ], [ %155, %153 ]
  %160 = phi i32 [ %182, %158 ], [ %156, %153 ]
  %161 = add nuw nsw i64 %159, 1
  %162 = getelementptr inbounds i32, i32* %0, i64 %159
  %163 = load i32, i32* %162, align 4
  %164 = add i32 %160, 1
  %165 = zext i32 %160 to i64
  %166 = getelementptr inbounds i32, i32* %1, i64 %165
  store i32 %163, i32* %166, align 4
  %167 = add nuw nsw i64 %159, 2
  %168 = getelementptr inbounds i32, i32* %0, i64 %161
  %169 = load i32, i32* %168, align 4
  %170 = add i32 %160, 2
  %171 = zext i32 %164 to i64
  %172 = getelementptr inbounds i32, i32* %1, i64 %171
  store i32 %169, i32* %172, align 4
  %173 = add nuw nsw i64 %159, 3
  %174 = getelementptr inbounds i32, i32* %0, i64 %167
  %175 = load i32, i32* %174, align 4
  %176 = add i32 %160, 3
  %177 = zext i32 %170 to i64
  %178 = getelementptr inbounds i32, i32* %1, i64 %177
  store i32 %175, i32* %178, align 4
  %179 = add nuw nsw i64 %159, 4
  %180 = getelementptr inbounds i32, i32* %0, i64 %173
  %181 = load i32, i32* %180, align 4
  %182 = add i32 %160, 4
  %183 = zext i32 %176 to i64
  %184 = getelementptr inbounds i32, i32* %1, i64 %183
  store i32 %181, i32* %184, align 4
  %185 = icmp eq i64 %179, %36
  br i1 %185, label %186, label %158, !llvm.loop !16

186:                                              ; preds = %153, %158, %131
  %187 = phi i32 [ %70, %131 ], [ %154, %153 ], [ %182, %158 ]
  %188 = zext i32 %187 to i64
  br label %189

189:                                              ; preds = %186, %42
  %190 = phi i64 [ %188, %186 ], [ %12, %42 ]
  %191 = phi i32 [ %27, %186 ], [ %11, %42 ]
  %192 = phi i32 [ %187, %186 ], [ %10, %42 ]
  %193 = add i32 %192, 1
  %194 = getelementptr inbounds i32, i32* %1, i64 %190
  store i32 108, i32* %194, align 4
  %195 = zext i32 %193 to i64
  br label %196

196:                                              ; preds = %33, %35, %189, %18, %14
  %197 = phi i64 [ %12, %35 ], [ %195, %189 ], [ %12, %18 ], [ %12, %14 ], [ %12, %33 ]
  %198 = phi i32 [ %11, %35 ], [ %191, %189 ], [ %11, %18 ], [ %11, %14 ], [ %11, %33 ]
  %199 = phi i32 [ %10, %35 ], [ %193, %189 ], [ %10, %18 ], [ %10, %14 ], [ %10, %33 ]
  %200 = add i32 %198, 1
  %201 = zext i32 %198 to i64
  %202 = getelementptr inbounds i32, i32* %0, i64 %201
  %203 = load i32, i32* %202, align 4
  %204 = add i32 %199, 1
  %205 = getelementptr inbounds i32, i32* %1, i64 %197
  store i32 %203, i32* %205, align 4
  %206 = zext i32 %200 to i64
  %207 = getelementptr inbounds i32, i32* %0, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %8

210:                                              ; preds = %8, %196, %3
  %211 = phi i32 [ 0, %3 ], [ %204, %196 ], [ %10, %8 ]
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i32, i32* %1, i64 %212
  store i32 0, i32* %213, align 4
  ret void
}

; Function Attrs: nounwind readnone
declare i32** @__ctype_toupper_loc() local_unnamed_addr #11

; Function Attrs: nounwind readnone
declare i32** @__ctype_tolower_loc() local_unnamed_addr #11

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { nounwind readnone }
attributes #14 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.unroll.disable"}
!16 = distinct !{!16, !3}
