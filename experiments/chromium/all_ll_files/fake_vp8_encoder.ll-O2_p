; ModuleID = '../../third_party/webrtc/test/fake_vp8_encoder.cc'
source_filename = "../../third_party/webrtc/test/fake_vp8_encoder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::test::FakeVp8Encoder" = type { %"class.webrtc::test::FakeEncoder", %"class.webrtc::SequenceChecker", %"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride", %"class.std::__1::unique_ptr" }
%"class.webrtc::test::FakeEncoder" = type { %"class.webrtc::VideoEncoder", %"struct.webrtc::test::FakeEncoder::FrameInfo", %"class.webrtc::Clock"*, %"class.webrtc::VideoCodec", %"class.webrtc::EncodedImageCallback"*, %"struct.webrtc::VideoEncoder::RateControlParameters", i32, i8, i32, %"class.webrtc::Mutex", [3 x i8], %"class.absl::optional", i64 }
%"class.webrtc::VideoEncoder" = type { i32 (...)** }
%"struct.webrtc::test::FakeEncoder::FrameInfo" = type { i8, %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"*, %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"*, %"class.std::__1::__compressed_pair" }
%"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer" = type { i32, i32 }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* }
%"class.webrtc::VideoCodec" = type { i32, i16, i16, i32, i32, i32, i32, i8, i32, i8, [3 x %"struct.webrtc::SpatialLayer"], [5 x %"struct.webrtc::SpatialLayer"], i32, i8, %"class.absl::optional", %"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds", i8, %"union.webrtc::VideoCodecUnion", %"class.std::__1::basic_string" }
%"struct.webrtc::SpatialLayer" = type { i16, i16, float, i8, i32, i32, i32, i32, i8 }
%"struct.webrtc::VideoCodec::TimingFrameTriggerThresholds" = type { i64, i16 }
%"union.webrtc::VideoCodecUnion" = type { %"struct.webrtc::VideoCodecVP9" }
%"struct.webrtc::VideoCodecVP9" = type { i32, i8, i8, i8, i32, i8, i8, i8, i8, i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.3 }
%union.anon.3 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.webrtc::EncodedImageCallback" = type { i32 (...)** }
%"struct.webrtc::VideoEncoder::RateControlParameters" = type { i32 (...)**, %"class.webrtc::VideoBitrateAllocation", %"class.webrtc::VideoBitrateAllocation", double, %"class.webrtc::DataRate" }
%"class.webrtc::VideoBitrateAllocation" = type <{ i32, [5 x [4 x %"class.absl::optional.7"]], i8, [3 x i8] }>
%"class.absl::optional.7" = type { %"class.absl::optional_internal::optional_data.8" }
%"class.absl::optional_internal::optional_data.8" = type { %"class.absl::optional_internal::optional_data_base.9" }
%"class.absl::optional_internal::optional_data_base.9" = type { %"class.absl::optional_internal::optional_data_dtor_base.10" }
%"class.absl::optional_internal::optional_data_dtor_base.10" = type { i8, %union.anon.11 }
%union.anon.11 = type { i32 }
%"class.webrtc::DataRate" = type { %"class.webrtc::rtc_units_impl::RelativeUnit" }
%"class.webrtc::rtc_units_impl::RelativeUnit" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.webrtc::Mutex" = type { %"class.webrtc::MutexImpl" }
%"class.webrtc::MutexImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.webrtc::SequenceChecker" = type { i8 }
%"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride" = type { %"class.webrtc::FecControllerOverride" }
%"class.webrtc::FecControllerOverride" = type { i32 (...)** }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.webrtc::Vp8FrameBufferController"* }
%"class.webrtc::Vp8FrameBufferController" = type { i32 (...)** }
%"class.webrtc::Clock" = type { i32 (...)** }
%"struct.webrtc::VideoEncoder::Settings" = type { %"struct.webrtc::VideoEncoder::Capabilities", i32, i64 }
%"struct.webrtc::VideoEncoder::Capabilities" = type { i8 }
%"class.webrtc::Vp8TemporalLayersFactory" = type { %"class.webrtc::Vp8FrameBufferControllerFactory" }
%"class.webrtc::Vp8FrameBufferControllerFactory" = type { i32 (...)** }
%"struct.webrtc::CodecSpecificInfo" = type { i32, %"union.webrtc::CodecSpecificInfoUnion", i8, %"class.absl::optional.15", %"class.absl::optional.43" }
%"union.webrtc::CodecSpecificInfoUnion" = type { %"struct.webrtc::CodecSpecificInfoVP9" }
%"struct.webrtc::CodecSpecificInfoVP9" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i64, i64, i8, [8 x i16], [8 x i16], %"struct.webrtc::GofInfoVP9", i8, [3 x i8], i8 }
%"struct.webrtc::GofInfoVP9" = type { i64, [255 x i8], [255 x i8], [255 x i8], [255 x [3 x i8]], i16 }
%"class.absl::optional.15" = type { %"class.absl::optional_internal::optional_data.16" }
%"class.absl::optional_internal::optional_data.16" = type { %"class.absl::optional_internal::optional_data_base.17" }
%"class.absl::optional_internal::optional_data_base.17" = type { %"class.absl::optional_internal::optional_data_dtor_base.18" }
%"class.absl::optional_internal::optional_data_dtor_base.18" = type { i8, %union.anon.19 }
%union.anon.19 = type { %"struct.webrtc::GenericFrameInfo" }
%"struct.webrtc::GenericFrameInfo" = type { %"struct.webrtc::FrameDependencyTemplate", %"class.absl::InlinedVector.30", %"class.std::__1::vector.37", %"class.std::__1::bitset" }
%"struct.webrtc::FrameDependencyTemplate" = type { i32, i32, %"class.absl::InlinedVector", %"class.absl::InlinedVector.23", %"class.absl::InlinedVector.23" }
%"class.absl::InlinedVector" = type { %"class.absl::inlined_vector_internal::Storage" }
%"class.absl::inlined_vector_internal::Storage" = type { %"class.absl::container_internal::CompressedTuple", %"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" }
%"class.absl::container_internal::CompressedTuple" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.22" }
%"struct.absl::container_internal::internal_compressed_tuple::Storage.22" = type { i64 }
%"union.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication, 10, std::__1::allocator<webrtc::DecodeTargetIndication> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.23" = type { %"class.absl::inlined_vector_internal::Storage.24" }
%"class.absl::inlined_vector_internal::Storage.24" = type { %"class.absl::container_internal::CompressedTuple.25", %"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" }
%"class.absl::container_internal::CompressedTuple.25" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.26" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.26" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.22" }
%"union.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<int, 4, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.30" = type { %"class.absl::inlined_vector_internal::Storage.31" }
%"class.absl::inlined_vector_internal::Storage.31" = type { %"class.absl::container_internal::CompressedTuple.32", %"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" }
%"class.absl::container_internal::CompressedTuple.32" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.33" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.33" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.22" }
%"union.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated", [48 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::CodecBufferUsage, 8, std::__1::allocator<webrtc::CodecBufferUsage> >::Allocated" = type { %"struct.webrtc::CodecBufferUsage"*, i64 }
%"struct.webrtc::CodecBufferUsage" = type <{ i32, i8, i8, [2 x i8] }>
%"class.std::__1::vector.37" = type { i64*, i64, %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { i64 }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.absl::optional.43" = type { %"class.absl::optional_internal::optional_data.44" }
%"class.absl::optional_internal::optional_data.44" = type { %"class.absl::optional_internal::optional_data_base.45" }
%"class.absl::optional_internal::optional_data_base.45" = type { %"class.absl::optional_internal::optional_data_dtor_base.46" }
%"class.absl::optional_internal::optional_data_dtor_base.46" = type { i8, %union.anon.47 }
%union.anon.47 = type { %"struct.webrtc::FrameDependencyStructure" }
%"struct.webrtc::FrameDependencyStructure" = type { i32, i32, i32, %"class.absl::InlinedVector.48", %"class.absl::InlinedVector.50", %"class.std::__1::vector.57" }
%"class.absl::InlinedVector.48" = type { %"class.absl::inlined_vector_internal::Storage.49" }
%"class.absl::inlined_vector_internal::Storage.49" = type { %"class.absl::container_internal::CompressedTuple.25", %"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" }
%"union.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated", [24 x i8] }
%"struct.absl::inlined_vector_internal::Storage<int, 10, std::__1::allocator<int> >::Allocated" = type { i32*, i64 }
%"class.absl::InlinedVector.50" = type { %"class.absl::inlined_vector_internal::Storage.51" }
%"class.absl::inlined_vector_internal::Storage.51" = type { %"class.absl::container_internal::CompressedTuple.52", %"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" }
%"class.absl::container_internal::CompressedTuple.52" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.53" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.53" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.22" }
%"union.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated", [16 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::RenderResolution, 4, std::__1::allocator<webrtc::RenderResolution> >::Allocated" = type { %"class.webrtc::RenderResolution"*, i64 }
%"class.webrtc::RenderResolution" = type { i32, i32 }
%"class.std::__1::vector.57" = type { %"class.std::__1::__vector_base.58" }
%"class.std::__1::__vector_base.58" = type { %"struct.webrtc::FrameDependencyTemplate"*, %"struct.webrtc::FrameDependencyTemplate"*, %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"struct.webrtc::FrameDependencyTemplate"* }
%"class.webrtc::EncodedImage" = type <{ i32, i32, i64, i64, i32, i32, i8, [3 x i8], i32, %"struct.webrtc::VideoPlayoutDelay", %"struct.webrtc::EncodedImage::Timing", %"class.rtc::scoped_refptr", i64, i32, %"class.absl::optional", [4 x i8], %"class.std::__1::map", %"class.absl::optional.71", %"class.absl::optional.81", [4 x i8], %"class.webrtc::RtpPacketInfos", i8, [7 x i8] }>
%"struct.webrtc::VideoPlayoutDelay" = type { i32, i32 }
%"struct.webrtc::EncodedImage::Timing" = type { i8, i64, i64, i64, i64, i64, i64, i64, i64 }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::EncodedImageBufferInterface"* }
%"class.webrtc::EncodedImageBufferInterface" = type { %"class.rtc::RefCountInterface" }
%"class.rtc::RefCountInterface" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.64", %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"class.absl::optional.71" = type { %"class.absl::optional_internal::optional_data.72" }
%"class.absl::optional_internal::optional_data.72" = type { %"class.absl::optional_internal::optional_data_base.73" }
%"class.absl::optional_internal::optional_data_base.73" = type { %"class.absl::optional_internal::optional_data_dtor_base.74" }
%"class.absl::optional_internal::optional_data_dtor_base.74" = type { i8, %union.anon.75 }
%union.anon.75 = type { %"class.webrtc::ColorSpace" }
%"class.webrtc::ColorSpace" = type { i8, i8, i8, i32, i32, i32, %"class.absl::optional.76" }
%"class.absl::optional.76" = type { %"class.absl::optional_internal::optional_data.77" }
%"class.absl::optional_internal::optional_data.77" = type { %"class.absl::optional_internal::optional_data_base.78" }
%"class.absl::optional_internal::optional_data_base.78" = type { %"class.absl::optional_internal::optional_data_dtor_base.79" }
%"class.absl::optional_internal::optional_data_dtor_base.79" = type { i8, %union.anon.80 }
%union.anon.80 = type { %"struct.webrtc::HdrMetadata" }
%"struct.webrtc::HdrMetadata" = type { %"struct.webrtc::HdrMasteringMetadata", i32, i32 }
%"struct.webrtc::HdrMasteringMetadata" = type { %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", %"struct.webrtc::HdrMasteringMetadata::Chromaticity", float, float }
%"struct.webrtc::HdrMasteringMetadata::Chromaticity" = type { float, float }
%"class.absl::optional.81" = type { %"class.absl::optional_internal::optional_data.82" }
%"class.absl::optional_internal::optional_data.82" = type { %"class.absl::optional_internal::optional_data_base.83" }
%"class.absl::optional_internal::optional_data_base.83" = type { %"class.absl::optional_internal::optional_data_dtor_base.84" }
%"class.absl::optional_internal::optional_data_dtor_base.84" = type { i8, %union.anon.85 }
%union.anon.85 = type { i16 }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr.86" }
%"class.rtc::scoped_refptr.86" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector.88" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.87" }
%"struct.std::__1::__atomic_base.87" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.88" = type { %"class.std::__1::__vector_base.89" }
%"class.std::__1::__vector_base.89" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.113" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.90", i32, %"class.absl::optional.97", %"class.absl::optional.102", %"class.absl::optional.107", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.90" = type { %"class.std::__1::__vector_base.91" }
%"class.std::__1::__vector_base.91" = type { i32*, i32*, %"class.std::__1::__compressed_pair.92" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.93" }
%"struct.std::__1::__compressed_pair_elem.93" = type { i32* }
%"class.absl::optional.97" = type { %"class.absl::optional_internal::optional_data.98" }
%"class.absl::optional_internal::optional_data.98" = type { %"class.absl::optional_internal::optional_data_base.99" }
%"class.absl::optional_internal::optional_data_base.99" = type { %"class.absl::optional_internal::optional_data_dtor_base.100" }
%"class.absl::optional_internal::optional_data_dtor_base.100" = type { i8, %union.anon.101 }
%union.anon.101 = type { i8 }
%"class.absl::optional.102" = type { %"class.absl::optional_internal::optional_data.103" }
%"class.absl::optional_internal::optional_data.103" = type { %"class.absl::optional_internal::optional_data_base.104" }
%"class.absl::optional_internal::optional_data_base.104" = type { %"class.absl::optional_internal::optional_data_dtor_base.105" }
%"class.absl::optional_internal::optional_data_dtor_base.105" = type { i8, %union.anon.106 }
%union.anon.106 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.107" }
%"class.absl::optional.107" = type { %"class.absl::optional_internal::optional_data.108" }
%"class.absl::optional_internal::optional_data.108" = type { %"class.absl::optional_internal::optional_data_base.109" }
%"class.absl::optional_internal::optional_data_base.109" = type { %"class.absl::optional_internal::optional_data_dtor_base.110" }
%"class.absl::optional_internal::optional_data_dtor_base.110" = type { i8, %union.anon.111 }
%union.anon.111 = type { i64 }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase.112" }
%"class.webrtc::rtc_units_impl::UnitBase.112" = type { i64 }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.114" }
%"struct.std::__1::__compressed_pair_elem.114" = type { %"class.webrtc::RtpPacketInfo"* }
%"class.rtc::scoped_refptr.118" = type { %"class.webrtc::EncodedImageBuffer"* }
%"class.webrtc::EncodedImageBuffer" = type { %"class.webrtc::EncodedImageBufferInterface", i64, i8* }
%"struct.webrtc::Vp8FrameConfig" = type <{ i8, [3 x i8], i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, [3 x i8] }>
%"struct.webrtc::VideoEncoder::EncoderInfo" = type { %"struct.webrtc::VideoEncoder::ScalingSettings", i32, i8, i8, %"class.std::__1::basic_string", i8, i8, i8, [5 x %"class.absl::InlinedVector.124"], %"class.std::__1::vector.131", i8, %"class.absl::InlinedVector.138" }
%"struct.webrtc::VideoEncoder::ScalingSettings" = type { %"class.absl::optional.119", i32 }
%"class.absl::optional.119" = type { %"class.absl::optional_internal::optional_data.120" }
%"class.absl::optional_internal::optional_data.120" = type { %"class.absl::optional_internal::optional_data_base.121" }
%"class.absl::optional_internal::optional_data_base.121" = type { %"class.absl::optional_internal::optional_data_dtor_base.122" }
%"class.absl::optional_internal::optional_data_dtor_base.122" = type { i8, %union.anon.123 }
%union.anon.123 = type { %"struct.webrtc::VideoEncoder::QpThresholds" }
%"struct.webrtc::VideoEncoder::QpThresholds" = type { i32, i32 }
%"class.absl::InlinedVector.124" = type { %"class.absl::inlined_vector_internal::Storage.125" }
%"class.absl::inlined_vector_internal::Storage.125" = type { %"class.absl::container_internal::CompressedTuple.126", %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data" }
%"class.absl::container_internal::CompressedTuple.126" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.127" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.127" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.22" }
%"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Allocated" }
%"struct.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Allocated" = type { i8*, i64 }
%"class.std::__1::vector.131" = type { %"class.std::__1::__vector_base.132" }
%"class.std::__1::__vector_base.132" = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"*, %"class.std::__1::__compressed_pair.133" }
%"struct.webrtc::VideoEncoder::ResolutionBitrateLimits" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"struct.webrtc::VideoEncoder::ResolutionBitrateLimits"* }
%"class.absl::InlinedVector.138" = type { %"class.absl::inlined_vector_internal::Storage.139" }
%"class.absl::inlined_vector_internal::Storage.139" = type { %"class.absl::container_internal::CompressedTuple.140", %"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data" }
%"class.absl::container_internal::CompressedTuple.140" = type { %"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.141" }
%"struct.absl::container_internal::internal_compressed_tuple::CompressedTupleImpl.141" = type { %"struct.absl::container_internal::internal_compressed_tuple::Storage.22" }
%"union.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Data" = type { %"struct.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Allocated", [8 x i8] }
%"struct.absl::inlined_vector_internal::Storage<webrtc::VideoFrameBuffer::Type, 5, std::__1::allocator<webrtc::VideoFrameBuffer::Type> >::Allocated" = type { i32*, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.webrtc::VideoFrame" = type { i16, %"class.rtc::scoped_refptr.145", i32, i64, i64, i32, %"class.absl::optional.71", %"class.absl::optional", %"class.absl::optional.146", %"class.webrtc::RtpPacketInfos", %"class.absl::optional.151" }
%"class.rtc::scoped_refptr.145" = type { %"class.webrtc::VideoFrameBuffer"* }
%"class.webrtc::VideoFrameBuffer" = type { %"class.rtc::RefCountInterface" }
%"class.absl::optional.146" = type { %"class.absl::optional_internal::optional_data.147" }
%"class.absl::optional_internal::optional_data.147" = type { %"class.absl::optional_internal::optional_data_base.148" }
%"class.absl::optional_internal::optional_data_base.148" = type { %"class.absl::optional_internal::optional_data_dtor_base.149" }
%"class.absl::optional_internal::optional_data_dtor_base.149" = type { i8, %union.anon.150 }
%union.anon.150 = type { %"struct.webrtc::VideoFrame::UpdateRect" }
%"struct.webrtc::VideoFrame::UpdateRect" = type { i32, i32, i32, i32 }
%"class.absl::optional.151" = type { %"class.absl::optional_internal::optional_data.152" }
%"class.absl::optional_internal::optional_data.152" = type { %"class.absl::optional_internal::optional_data_base.153" }
%"class.absl::optional_internal::optional_data_base.153" = type { %"class.absl::optional_internal::optional_data_dtor_base.154" }
%"class.absl::optional_internal::optional_data_dtor_base.154" = type { i8, %union.anon.155 }
%union.anon.155 = type { %"struct.webrtc::VideoFrame::ProcessingTime" }
%"struct.webrtc::VideoFrame::ProcessingTime" = type { %"class.webrtc::Timestamp", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.156" = type opaque
%"struct.webrtc::VideoEncoder::LossNotification" = type { i32, i32, %"class.absl::optional.157", %"class.absl::optional.157" }
%"class.absl::optional.157" = type { %"class.absl::optional_internal::optional_data.158" }
%"class.absl::optional_internal::optional_data.158" = type { %"class.absl::optional_internal::optional_data_base.159" }
%"class.absl::optional_internal::optional_data_base.159" = type { %"class.absl::optional_internal::optional_data_dtor_base.160" }
%"class.absl::optional_internal::optional_data_dtor_base.160" = type { i8, %union.anon.161 }
%union.anon.161 = type { i8 }

$_ZN6webrtc4test14FakeVp8EncoderD2Ev = comdat any

$_ZN6webrtc4test14FakeVp8EncoderD0Ev = comdat any

$_ZN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverride13SetFecAllowedEb = comdat any

$_ZN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverrideD0Ev = comdat any

$_ZN6webrtc21FecControllerOverrideD2Ev = comdat any

$_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_ = comdat any

$_ZTVN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverrideE = comdat any

@_ZTVN6webrtc4test14FakeVp8EncoderE = hidden unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::test::FakeVp8Encoder"*)* @_ZN6webrtc4test14FakeVp8EncoderD2Ev to i8*), i8* bitcast (void (%"class.webrtc::test::FakeVp8Encoder"*)* @_ZN6webrtc4test14FakeVp8EncoderD0Ev to i8*), i8* bitcast (void (%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::FecControllerOverride"*)* @_ZN6webrtc4test11FakeEncoder24SetFecControllerOverrideEPNS_21FecControllerOverrideE to i8*), i8* bitcast (i32 (%"class.webrtc::VideoEncoder"*, %"class.webrtc::VideoCodec"*, i32, i64)* @_ZN6webrtc12VideoEncoder10InitEncodeEPKNS_10VideoCodecEim to i8*), i8* bitcast (i32 (%"class.webrtc::test::FakeVp8Encoder"*, %"class.webrtc::VideoCodec"*, %"struct.webrtc::VideoEncoder::Settings"*)* @_ZN6webrtc4test14FakeVp8Encoder10InitEncodeEPKNS_10VideoCodecERKNS_12VideoEncoder8SettingsE to i8*), i8* bitcast (i32 (%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::EncodedImageCallback"*)* @_ZN6webrtc4test11FakeEncoder30RegisterEncodeCompleteCallbackEPNS_20EncodedImageCallbackE to i8*), i8* bitcast (i32 (%"class.webrtc::test::FakeVp8Encoder"*)* @_ZN6webrtc4test14FakeVp8Encoder7ReleaseEv to i8*), i8* bitcast (i32 (%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::VideoFrame"*, %"class.std::__1::vector.156"*)* @_ZN6webrtc4test11FakeEncoder6EncodeERKNS_10VideoFrameEPKNSt3__16vectorINS_14VideoFrameTypeENS5_9allocatorIS7_EEEE to i8*), i8* bitcast (void (%"class.webrtc::test::FakeEncoder"*, %"struct.webrtc::VideoEncoder::RateControlParameters"*)* @_ZN6webrtc4test11FakeEncoder8SetRatesERKNS_12VideoEncoder21RateControlParametersE to i8*), i8* bitcast (void (%"class.webrtc::VideoEncoder"*, float)* @_ZN6webrtc12VideoEncoder22OnPacketLossRateUpdateEf to i8*), i8* bitcast (void (%"class.webrtc::VideoEncoder"*, i64)* @_ZN6webrtc12VideoEncoder11OnRttUpdateEl to i8*), i8* bitcast (void (%"class.webrtc::VideoEncoder"*, %"struct.webrtc::VideoEncoder::LossNotification"*)* @_ZN6webrtc12VideoEncoder18OnLossNotificationERKNS0_16LossNotificationE to i8*), i8* bitcast (void (%"struct.webrtc::VideoEncoder::EncoderInfo"*, %"class.webrtc::test::FakeVp8Encoder"*)* @_ZNK6webrtc4test14FakeVp8Encoder14GetEncoderInfoEv to i8*), i8* bitcast (void (%"struct.webrtc::CodecSpecificInfo"*, %"class.webrtc::test::FakeVp8Encoder"*, %"class.webrtc::EncodedImage"*, %"class.rtc::scoped_refptr.118"*)* @_ZN6webrtc4test14FakeVp8Encoder10EncodeHookERNS_12EncodedImageEN3rtc13scoped_refptrINS_18EncodedImageBufferEEE to i8*)] }, align 8
@.str = private unnamed_addr constant [15 x i8] c"FakeVp8Encoder\00", align 1
@_ZTVN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverrideE = linkonce_odr hidden unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride"*, i1)* @_ZN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverride13SetFecAllowedEb to i8*), i8* bitcast (void (%"class.webrtc::FecControllerOverride"*)* @_ZN6webrtc21FecControllerOverrideD2Ev to i8*), i8* bitcast (void (%"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride"*)* @_ZN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverrideD0Ev to i8*)] }, comdat, align 8
@_ZTVN6webrtc24Vp8TemporalLayersFactoryE = external unnamed_addr constant { [6 x i8*] }, align 8
@_ZTVN6webrtc4test11FakeEncoderE = external unnamed_addr constant { [16 x i8*] }, align 8

@_ZN6webrtc4test14FakeVp8EncoderC1EPNS_5ClockE = hidden unnamed_addr alias void (%"class.webrtc::test::FakeVp8Encoder"*, %"class.webrtc::Clock"*), void (%"class.webrtc::test::FakeVp8Encoder"*, %"class.webrtc::Clock"*)* @_ZN6webrtc4test14FakeVp8EncoderC2EPNS_5ClockE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4test14FakeVp8EncoderC2EPNS_5ClockE(%"class.webrtc::test::FakeVp8Encoder"*, %"class.webrtc::Clock"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0
  tail call void @_ZN6webrtc4test11FakeEncoderC2EPNS_5ClockE(%"class.webrtc::test::FakeEncoder"* %3, %"class.webrtc::Clock"* %1) #7
  %4 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN6webrtc4test14FakeVp8EncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 2, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverrideE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 3
  %7 = bitcast %"class.std::__1::unique_ptr"* %6 to i64*
  store i64 0, i64* %7, align 8
  ret void
}

declare void @_ZN6webrtc4test11FakeEncoderC2EPNS_5ClockE(%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::Clock"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc4test14FakeVp8Encoder10InitEncodeEPKNS_10VideoCodecERKNS_12VideoEncoder8SettingsE(%"class.webrtc::test::FakeVp8Encoder"*, %"class.webrtc::VideoCodec"*, %"struct.webrtc::VideoEncoder::Settings"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.webrtc::Vp8TemporalLayersFactory", align 8
  %5 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0
  %6 = tail call i32 @_ZN6webrtc4test11FakeEncoder10InitEncodeEPKNS_10VideoCodecERKNS_12VideoEncoder8SettingsE(%"class.webrtc::test::FakeEncoder"* %5, %"class.webrtc::VideoCodec"* %1, %"struct.webrtc::VideoEncoder::Settings"* dereferenceable(16) %2) #7
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %25

8:                                                ; preds = %3
  %9 = bitcast %"class.webrtc::Vp8TemporalLayersFactory"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = getelementptr inbounds %"class.webrtc::Vp8TemporalLayersFactory", %"class.webrtc::Vp8TemporalLayersFactory"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6webrtc24Vp8TemporalLayersFactoryE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 2, i32 0
  %12 = call %"class.webrtc::Vp8FrameBufferController"* @_ZN6webrtc24Vp8TemporalLayersFactory6CreateERKNS_10VideoCodecERKNS_12VideoEncoder8SettingsEPNS_21FecControllerOverrideE(%"class.webrtc::Vp8TemporalLayersFactory"* nonnull %4, %"class.webrtc::VideoCodec"* dereferenceable(376) %1, %"struct.webrtc::VideoEncoder::Settings"* dereferenceable(16) %2, %"class.webrtc::FecControllerOverride"* %11) #7
  %13 = ptrtoint %"class.webrtc::Vp8FrameBufferController"* %12 to i64
  %14 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 3
  %15 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %14, i64 0, i32 0, i32 0, i32 0
  %16 = load %"class.webrtc::Vp8FrameBufferController"*, %"class.webrtc::Vp8FrameBufferController"** %15, align 8
  %17 = bitcast %"class.std::__1::unique_ptr"* %14 to i64*
  store i64 %13, i64* %17, align 8
  %18 = icmp eq %"class.webrtc::Vp8FrameBufferController"* %16, null
  br i1 %18, label %24, label %19

19:                                               ; preds = %8
  %20 = bitcast %"class.webrtc::Vp8FrameBufferController"* %16 to void (%"class.webrtc::Vp8FrameBufferController"*)***
  %21 = load void (%"class.webrtc::Vp8FrameBufferController"*)**, void (%"class.webrtc::Vp8FrameBufferController"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*)*, void (%"class.webrtc::Vp8FrameBufferController"*)** %21, i64 1
  %23 = load void (%"class.webrtc::Vp8FrameBufferController"*)*, void (%"class.webrtc::Vp8FrameBufferController"*)** %22, align 8
  call void %23(%"class.webrtc::Vp8FrameBufferController"* nonnull %16) #7
  br label %24

24:                                               ; preds = %19, %8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  br label %25

25:                                               ; preds = %3, %24
  ret i32 %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i32 @_ZN6webrtc4test11FakeEncoder10InitEncodeEPKNS_10VideoCodecERKNS_12VideoEncoder8SettingsE(%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::VideoCodec"*, %"struct.webrtc::VideoEncoder::Settings"* dereferenceable(16)) unnamed_addr #1

declare %"class.webrtc::Vp8FrameBufferController"* @_ZN6webrtc24Vp8TemporalLayersFactory6CreateERKNS_10VideoCodecERKNS_12VideoEncoder8SettingsEPNS_21FecControllerOverrideE(%"class.webrtc::Vp8TemporalLayersFactory"*, %"class.webrtc::VideoCodec"* dereferenceable(376), %"struct.webrtc::VideoEncoder::Settings"* dereferenceable(16), %"class.webrtc::FecControllerOverride"*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc4test14FakeVp8Encoder7ReleaseEv(%"class.webrtc::test::FakeVp8Encoder"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0
  %3 = tail call i32 @_ZN6webrtc4test11FakeEncoder7ReleaseEv(%"class.webrtc::test::FakeEncoder"* %2) #7
  ret i32 %3
}

declare i32 @_ZN6webrtc4test11FakeEncoder7ReleaseEv(%"class.webrtc::test::FakeEncoder"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4test14FakeVp8Encoder21PopulateCodecSpecificEmNS_14VideoFrameTypeEij(%"struct.webrtc::CodecSpecificInfo"* noalias sret, %"class.webrtc::test::FakeVp8Encoder"* nocapture readonly, i64, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %7 = bitcast %"struct.webrtc::CodecSpecificInfo"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 -86, i64 1992, i1 false)
  tail call void @_ZN6webrtc17CodecSpecificInfoC1Ev(%"struct.webrtc::CodecSpecificInfo"* %0) #7
  %8 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %0, i64 0, i32 0
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %0, i64 0, i32 1, i32 0, i32 3
  store i8 -1, i8* %9, align 1
  %10 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %0, i64 0, i32 1, i32 0, i32 0
  store i8 0, i8* %10, align 8
  %11 = icmp eq i64 %2, 0
  %12 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %13 = load %"class.webrtc::Vp8FrameBufferController"*, %"class.webrtc::Vp8FrameBufferController"** %12, align 8
  %14 = sext i32 %4 to i64
  br i1 %11, label %21, label %15

15:                                               ; preds = %6
  %16 = icmp eq i32 %3, 3
  %17 = bitcast %"class.webrtc::Vp8FrameBufferController"* %13 to void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)***
  %18 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)**, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)** %18, i64 8
  %20 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)** %19, align 8
  tail call void %20(%"class.webrtc::Vp8FrameBufferController"* %13, i64 %14, i32 %5, i64 %2, i1 zeroext %16, i32 -1, %"struct.webrtc::CodecSpecificInfo"* %0) #7
  br label %26

21:                                               ; preds = %6
  %22 = bitcast %"class.webrtc::Vp8FrameBufferController"* %13 to void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)***
  %23 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)**, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)** %23, i64 9
  %25 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)** %24, align 8
  tail call void %25(%"class.webrtc::Vp8FrameBufferController"* %13, i64 %14, i32 %5) #7
  br label %26

26:                                               ; preds = %15, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN6webrtc17CodecSpecificInfoC1Ev(%"struct.webrtc::CodecSpecificInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4test14FakeVp8Encoder10EncodeHookERNS_12EncodedImageEN3rtc13scoped_refptrINS_18EncodedImageBufferEEE(%"struct.webrtc::CodecSpecificInfo"* noalias sret, %"class.webrtc::test::FakeVp8Encoder"* nocapture readonly, %"class.webrtc::EncodedImage"* nocapture readonly dereferenceable(272), %"class.rtc::scoped_refptr.118"* nocapture readonly) unnamed_addr #0 align 2 {
  %5 = alloca %"struct.webrtc::Vp8FrameConfig", align 4
  %6 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 14
  %7 = bitcast %"class.absl::optional"* %6 to i64*
  %8 = load i64, i64* %7, align 4
  %9 = trunc i64 %8 to i8
  %10 = lshr i64 %8, 32
  %11 = icmp eq i8 %9, 0
  %12 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %1, i64 0, i32 3, i32 0, i32 0, i32 0
  %13 = load %"class.webrtc::Vp8FrameBufferController"*, %"class.webrtc::Vp8FrameBufferController"** %12, align 8
  %14 = and i64 %10, 255
  %15 = select i1 %11, i64 0, i64 %14
  %16 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 13
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"struct.webrtc::Vp8FrameConfig", %"struct.webrtc::Vp8FrameConfig"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %18) #7
  %19 = bitcast %"class.webrtc::Vp8FrameBufferController"* %13 to void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)***
  %20 = load void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)**, void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)*** %19, align 8
  %21 = getelementptr inbounds void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)*, void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)** %20, i64 7
  %22 = load void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)*, void (%"struct.webrtc::Vp8FrameConfig"*, %"class.webrtc::Vp8FrameBufferController"*, i64, i32)** %21, align 8
  call void %22(%"struct.webrtc::Vp8FrameConfig"* nonnull sret %5, %"class.webrtc::Vp8FrameBufferController"* %13, i64 %15, i32 %17) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %18) #7
  %23 = bitcast %"struct.webrtc::CodecSpecificInfo"* %0 to i8*
  %24 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 12
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 4
  %27 = load i32, i32* %26, align 8
  %28 = load i32, i32* %16, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 -86, i64 1992, i1 false) #7, !alias.scope !2
  call void @_ZN6webrtc17CodecSpecificInfoC1Ev(%"struct.webrtc::CodecSpecificInfo"* %0) #7
  %29 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %0, i64 0, i32 0
  store i32 1, i32* %29, align 8, !alias.scope !2
  %30 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %0, i64 0, i32 1, i32 0, i32 3
  store i8 -1, i8* %30, align 1, !alias.scope !2
  %31 = getelementptr inbounds %"struct.webrtc::CodecSpecificInfo", %"struct.webrtc::CodecSpecificInfo"* %0, i64 0, i32 1, i32 0, i32 0
  store i8 0, i8* %31, align 8, !alias.scope !2
  %32 = icmp eq i64 %25, 0
  %33 = load %"class.webrtc::Vp8FrameBufferController"*, %"class.webrtc::Vp8FrameBufferController"** %12, align 8, !noalias !2
  br i1 %32, label %40, label %34

34:                                               ; preds = %4
  %35 = icmp eq i32 %27, 3
  %36 = bitcast %"class.webrtc::Vp8FrameBufferController"* %33 to void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)***
  %37 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)**, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)** %37, i64 8
  %39 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32, i64, i1, i32, %"struct.webrtc::CodecSpecificInfo"*)** %38, align 8
  call void %39(%"class.webrtc::Vp8FrameBufferController"* %33, i64 %15, i32 %28, i64 %25, i1 zeroext %35, i32 -1, %"struct.webrtc::CodecSpecificInfo"* %0) #7
  br label %45

40:                                               ; preds = %4
  %41 = bitcast %"class.webrtc::Vp8FrameBufferController"* %33 to void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)***
  %42 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)**, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)*** %41, align 8
  %43 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)** %42, i64 9
  %44 = load void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)*, void (%"class.webrtc::Vp8FrameBufferController"*, i64, i32)** %43, align 8
  call void %44(%"class.webrtc::Vp8FrameBufferController"* %33, i64 %15, i32 %28) #7
  br label %45

45:                                               ; preds = %34, %40
  %46 = getelementptr inbounds %"class.rtc::scoped_refptr.118", %"class.rtc::scoped_refptr.118"* %3, i64 0, i32 0
  %47 = load %"class.webrtc::EncodedImageBuffer"*, %"class.webrtc::EncodedImageBuffer"** %46, align 8
  %48 = bitcast %"class.webrtc::EncodedImageBuffer"* %47 to i8* (%"class.webrtc::EncodedImageBuffer"*)***
  %49 = load i8* (%"class.webrtc::EncodedImageBuffer"*)**, i8* (%"class.webrtc::EncodedImageBuffer"*)*** %48, align 8
  %50 = getelementptr inbounds i8* (%"class.webrtc::EncodedImageBuffer"*)*, i8* (%"class.webrtc::EncodedImageBuffer"*)** %49, i64 5
  %51 = load i8* (%"class.webrtc::EncodedImageBuffer"*)*, i8* (%"class.webrtc::EncodedImageBuffer"*)** %50, align 8
  %52 = call i8* %51(%"class.webrtc::EncodedImageBuffer"* %47) #7
  %53 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %"class.webrtc::EncodedImage", %"class.webrtc::EncodedImage"* %2, i64 0, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* %26, align 8
  %58 = icmp eq i32 %57, 3
  %59 = xor i1 %58, true
  %60 = zext i1 %59 to i8
  store i8 %60, i8* %52, align 1
  br i1 %58, label %61, label %74

61:                                               ; preds = %45
  %62 = lshr i32 %56, 8
  %63 = trunc i32 %62 to i8
  %64 = and i8 %63, 63
  %65 = getelementptr inbounds i8, i8* %52, i64 9
  store i8 %64, i8* %65, align 1
  %66 = trunc i32 %56 to i8
  %67 = getelementptr inbounds i8, i8* %52, i64 8
  store i8 %66, i8* %67, align 1
  %68 = lshr i32 %54, 8
  %69 = trunc i32 %68 to i8
  %70 = and i8 %69, 63
  %71 = getelementptr inbounds i8, i8* %52, i64 7
  store i8 %70, i8* %71, align 1
  %72 = trunc i32 %54 to i8
  %73 = getelementptr inbounds i8, i8* %52, i64 6
  store i8 %72, i8* %73, align 1
  br label %74

74:                                               ; preds = %45, %61
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6webrtc4test14FakeVp8Encoder14GetEncoderInfoEv(%"struct.webrtc::VideoEncoder::EncoderInfo"* noalias sret, %"class.webrtc::test::FakeVp8Encoder"*) unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 -86, i64 240, i1 false)
  tail call void @_ZN6webrtc12VideoEncoder11EncoderInfoC1Ev(%"struct.webrtc::VideoEncoder::EncoderInfo"* %0) #7
  %5 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 4
  %6 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 14, i64* %11, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  br label %16

14:                                               ; preds = %2
  store i8 14, i8* %7, align 1
  %15 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  br label %16

16:                                               ; preds = %10, %14
  %17 = phi i8* [ %13, %10 ], [ %15, %14 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i64 14, i1 false) #7
  %18 = getelementptr inbounds i8, i8* %17, i64 14
  store i8 0, i8* %18, align 1
  %19 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %1, i64 0, i32 0, i32 9, i32 0, i32 0
  %20 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %19) #7
  %21 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %1, i64 0, i32 0, i32 3, i32 9
  %22 = load i8, i8* %21, align 8
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %48, %16
  %25 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %19) #7
  ret void

26:                                               ; preds = %16, %48
  %27 = phi i64 [ %49, %48 ], [ 0, %16 ]
  %28 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %1, i64 0, i32 0, i32 3, i32 10, i64 %27, i32 3
  %29 = load i8, i8* %28, align 4
  %30 = zext i8 %29 to i32
  %31 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 %27
  %32 = getelementptr inbounds %"class.absl::InlinedVector.124", %"class.absl::InlinedVector.124"* %31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 %27, i32 0, i32 1, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  call void @_ZdlPv(i8* %38) #8
  br label %39

39:                                               ; preds = %26, %36
  store i64 0, i64* %32, align 8
  %40 = icmp eq i8 %29, 0
  br i1 %40, label %48, label %41

41:                                               ; preds = %39
  %42 = getelementptr inbounds %"class.absl::InlinedVector.124", %"class.absl::InlinedVector.124"* %31, i64 0, i32 0
  %43 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 %27, i32 0, i32 1, i32 0, i32 0
  %44 = bitcast i8** %43 to i64*
  %45 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 %27, i32 0, i32 1, i32 0, i32 1
  %46 = getelementptr inbounds %"struct.webrtc::VideoEncoder::EncoderInfo", %"struct.webrtc::VideoEncoder::EncoderInfo"* %0, i64 0, i32 8, i64 %27, i32 0, i32 1
  %47 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %46 to i64
  br label %53

48:                                               ; preds = %76, %39
  %49 = add nuw nsw i64 %27, 1
  %50 = load i8, i8* %21, align 8
  %51 = zext i8 %50 to i64
  %52 = icmp ult i64 %49, %51
  br i1 %52, label %26, label %24

53:                                               ; preds = %79, %41
  %54 = phi i64 [ 0, %41 ], [ %80, %79 ]
  %55 = phi i32 [ 0, %41 ], [ %77, %79 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #7
  %56 = sub nsw i32 %30, %55
  %57 = sdiv i32 255, %56
  %58 = trunc i32 %57 to i8
  store i8 %58, i8* %3, align 1
  %59 = and i64 %54, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %64, label %61

61:                                               ; preds = %53
  %62 = load i64, i64* %44, align 8, !noalias !5
  %63 = load i64, i64* %45, align 8, !noalias !5
  br label %64

64:                                               ; preds = %53, %61
  %65 = phi i64 [ %62, %61 ], [ %47, %53 ]
  %66 = phi i64 [ %63, %61 ], [ 4, %53 ]
  %67 = lshr i64 %54, 1
  %68 = icmp eq i64 %67, %66
  br i1 %68, label %74, label %69, !prof !8

69:                                               ; preds = %64
  %70 = inttoptr i64 %65 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 %67
  store i8 %58, i8* %71, align 1
  %72 = load i64, i64* %32, align 8
  %73 = add i64 %72, 2
  store i64 %73, i64* %32, align 8
  br label %76

74:                                               ; preds = %64
  %75 = call dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage.125"* %42, i8* nonnull dereferenceable(1) %3) #7
  br label %76

76:                                               ; preds = %69, %74
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #7
  %77 = add nuw nsw i32 %55, 1
  %78 = icmp eq i32 %77, %30
  br i1 %78, label %48, label %79

79:                                               ; preds = %76
  %80 = load i64, i64* %32, align 8, !noalias !5
  br label %53
}

declare void @_ZN6webrtc12VideoEncoder11EncoderInfoC1Ev(%"struct.webrtc::VideoEncoder::EncoderInfo"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc4test14FakeVp8EncoderD2Ev(%"class.webrtc::test::FakeVp8Encoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN6webrtc4test14FakeVp8EncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.webrtc::Vp8FrameBufferController"*, %"class.webrtc::Vp8FrameBufferController"** %3, align 8
  store %"class.webrtc::Vp8FrameBufferController"* null, %"class.webrtc::Vp8FrameBufferController"** %3, align 8
  %5 = icmp eq %"class.webrtc::Vp8FrameBufferController"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.webrtc::Vp8FrameBufferController"* %4 to void (%"class.webrtc::Vp8FrameBufferController"*)***
  %8 = load void (%"class.webrtc::Vp8FrameBufferController"*)**, void (%"class.webrtc::Vp8FrameBufferController"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*)*, void (%"class.webrtc::Vp8FrameBufferController"*)** %8, i64 1
  %10 = load void (%"class.webrtc::Vp8FrameBufferController"*)*, void (%"class.webrtc::Vp8FrameBufferController"*)** %9, align 8
  tail call void %10(%"class.webrtc::Vp8FrameBufferController"* nonnull %4) #7
  br label %11

11:                                               ; preds = %1, %6
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN6webrtc4test11FakeEncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 9, i32 0, i32 0
  %13 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %12) #7
  %14 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 5
  tail call void @_ZN6webrtc12VideoEncoder21RateControlParametersD1Ev(%"struct.webrtc::VideoEncoder::RateControlParameters"* %14) #7
  %15 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 3, i32 18
  %16 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZdlPv(i8* %22) #8
  br label %23

23:                                               ; preds = %20, %11
  %24 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %25 = load %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"*, %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"** %24, align 8
  %26 = icmp eq %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = ptrtoint %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* %25 to i64
  %29 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %30 = bitcast %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* %25 to i8*
  tail call void @_ZdlPv(i8* %31) #8
  br label %32

32:                                               ; preds = %23, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc4test14FakeVp8EncoderD0Ev(%"class.webrtc::test::FakeVp8Encoder"*) unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN6webrtc4test14FakeVp8EncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %4 = load %"class.webrtc::Vp8FrameBufferController"*, %"class.webrtc::Vp8FrameBufferController"** %3, align 8
  store %"class.webrtc::Vp8FrameBufferController"* null, %"class.webrtc::Vp8FrameBufferController"** %3, align 8
  %5 = icmp eq %"class.webrtc::Vp8FrameBufferController"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.webrtc::Vp8FrameBufferController"* %4 to void (%"class.webrtc::Vp8FrameBufferController"*)***
  %8 = load void (%"class.webrtc::Vp8FrameBufferController"*)**, void (%"class.webrtc::Vp8FrameBufferController"*)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.webrtc::Vp8FrameBufferController"*)*, void (%"class.webrtc::Vp8FrameBufferController"*)** %8, i64 1
  %10 = load void (%"class.webrtc::Vp8FrameBufferController"*)*, void (%"class.webrtc::Vp8FrameBufferController"*)** %9, align 8
  tail call void %10(%"class.webrtc::Vp8FrameBufferController"* nonnull %4) #7
  br label %11

11:                                               ; preds = %6, %1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN6webrtc4test11FakeEncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %12 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 9, i32 0, i32 0
  %13 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %12) #7
  %14 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 5
  tail call void @_ZN6webrtc12VideoEncoder21RateControlParametersD1Ev(%"struct.webrtc::VideoEncoder::RateControlParameters"* %14) #7
  %15 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 3, i32 18
  %16 = bitcast %"class.std::__1::basic_string"* %15 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %17 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %16, i64 0, i32 1, i32 0
  %18 = load i8, i8* %17, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %23

20:                                               ; preds = %11
  %21 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  tail call void @_ZdlPv(i8* %22) #8
  br label %23

23:                                               ; preds = %20, %11
  %24 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 0
  %25 = load %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"*, %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"** %24, align 8
  %26 = icmp eq %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = ptrtoint %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* %25 to i64
  %29 = getelementptr inbounds %"class.webrtc::test::FakeVp8Encoder", %"class.webrtc::test::FakeVp8Encoder"* %0, i64 0, i32 0, i32 1, i32 1, i32 0, i32 1
  %30 = bitcast %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast %"struct.webrtc::test::FakeEncoder::FrameInfo::SpatialLayer"* %25 to i8*
  tail call void @_ZdlPv(i8* %31) #8
  br label %32

32:                                               ; preds = %23, %27
  %33 = bitcast %"class.webrtc::test::FakeVp8Encoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %33) #8
  ret void
}

declare void @_ZN6webrtc4test11FakeEncoder24SetFecControllerOverrideEPNS_21FecControllerOverrideE(%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::FecControllerOverride"*) unnamed_addr #1

declare i32 @_ZN6webrtc12VideoEncoder10InitEncodeEPKNS_10VideoCodecEim(%"class.webrtc::VideoEncoder"*, %"class.webrtc::VideoCodec"*, i32, i64) unnamed_addr #1

declare i32 @_ZN6webrtc4test11FakeEncoder30RegisterEncodeCompleteCallbackEPNS_20EncodedImageCallbackE(%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::EncodedImageCallback"*) unnamed_addr #1

declare i32 @_ZN6webrtc4test11FakeEncoder6EncodeERKNS_10VideoFrameEPKNSt3__16vectorINS_14VideoFrameTypeENS5_9allocatorIS7_EEEE(%"class.webrtc::test::FakeEncoder"*, %"class.webrtc::VideoFrame"* dereferenceable(176), %"class.std::__1::vector.156"*) unnamed_addr #1

declare void @_ZN6webrtc4test11FakeEncoder8SetRatesERKNS_12VideoEncoder21RateControlParametersE(%"class.webrtc::test::FakeEncoder"*, %"struct.webrtc::VideoEncoder::RateControlParameters"* dereferenceable(360)) unnamed_addr #1

declare void @_ZN6webrtc12VideoEncoder22OnPacketLossRateUpdateEf(%"class.webrtc::VideoEncoder"*, float) unnamed_addr #1

declare void @_ZN6webrtc12VideoEncoder11OnRttUpdateEl(%"class.webrtc::VideoEncoder"*, i64) unnamed_addr #1

declare void @_ZN6webrtc12VideoEncoder18OnLossNotificationERKNS0_16LossNotificationE(%"class.webrtc::VideoEncoder"*, %"struct.webrtc::VideoEncoder::LossNotification"* dereferenceable(12)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverride13SetFecAllowedEb(%"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride"*, i1 zeroext) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc4test14FakeVp8Encoder25FakeFecControllerOverrideD0Ev(%"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride"*) unnamed_addr #0 comdat align 2 {
  %2 = bitcast %"class.webrtc::test::FakeVp8Encoder::FakeFecControllerOverride"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN6webrtc21FecControllerOverrideD2Ev(%"class.webrtc::FecControllerOverride"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN6webrtc12VideoEncoder21RateControlParametersD1Ev(%"struct.webrtc::VideoEncoder::RateControlParameters"*) unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15EmplaceBackSlowIJhEEERhDpOT_(%"class.absl::inlined_vector_internal::Storage.125"*, i8* dereferenceable(1)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8, !noalias !9
  %5 = and i64 %4, 1
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 1, i32 0, i32 0
  %9 = bitcast i8** %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !9
  %11 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 1, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !9
  %13 = shl i64 %12, 1
  br label %17

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 1
  %16 = ptrtoint %"union.absl::inlined_vector_internal::Storage<unsigned char, 4, std::__1::allocator<unsigned char> >::Data"* %15 to i64
  br label %17

17:                                               ; preds = %7, %14
  %18 = phi i64 [ %16, %14 ], [ %10, %7 ]
  %19 = phi i64 [ 8, %14 ], [ %13, %7 ]
  %20 = lshr i64 %4, 1
  %21 = tail call i8* @_Znwm(i64 %19) #8
  %22 = ptrtoint i8* %21 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %20
  %24 = load i8, i8* %1, align 1
  store i8 %24, i8* %23, align 1
  %25 = icmp eq i64 %20, 0
  br i1 %25, label %156, label %26

26:                                               ; preds = %17
  %27 = inttoptr i64 %18 to i8*
  %28 = icmp ult i64 %4, 64
  br i1 %28, label %115, label %29

29:                                               ; preds = %26
  %30 = getelementptr i8, i8* %21, i64 %20
  %31 = getelementptr i8, i8* %27, i64 %20
  %32 = icmp ult i8* %21, %31
  %33 = icmp ugt i8* %30, %27
  %34 = and i1 %32, %33
  br i1 %34, label %115, label %35

35:                                               ; preds = %29
  %36 = and i64 %20, 9223372036854775776
  %37 = getelementptr i8, i8* %27, i64 %36
  %38 = add nsw i64 %36, -32
  %39 = lshr exact i64 %38, 5
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 3
  %42 = icmp ult i64 %38, 96
  br i1 %42, label %94, label %43

43:                                               ; preds = %35
  %44 = sub nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %91, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %92, %45 ]
  %48 = getelementptr i8, i8* %27, i64 %46
  %49 = getelementptr inbounds i8, i8* %21, i64 %46
  %50 = bitcast i8* %48 to <16 x i8>*
  %51 = load <16 x i8>, <16 x i8>* %50, align 1, !alias.scope !12
  %52 = getelementptr i8, i8* %48, i64 16
  %53 = bitcast i8* %52 to <16 x i8>*
  %54 = load <16 x i8>, <16 x i8>* %53, align 1, !alias.scope !12
  %55 = bitcast i8* %49 to <16 x i8>*
  store <16 x i8> %51, <16 x i8>* %55, align 1, !alias.scope !15, !noalias !12
  %56 = getelementptr inbounds i8, i8* %49, i64 16
  %57 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %54, <16 x i8>* %57, align 1, !alias.scope !15, !noalias !12
  %58 = or i64 %46, 32
  %59 = getelementptr i8, i8* %27, i64 %58
  %60 = getelementptr inbounds i8, i8* %21, i64 %58
  %61 = bitcast i8* %59 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !12
  %63 = getelementptr i8, i8* %59, i64 16
  %64 = bitcast i8* %63 to <16 x i8>*
  %65 = load <16 x i8>, <16 x i8>* %64, align 1, !alias.scope !12
  %66 = bitcast i8* %60 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %66, align 1, !alias.scope !15, !noalias !12
  %67 = getelementptr inbounds i8, i8* %60, i64 16
  %68 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %65, <16 x i8>* %68, align 1, !alias.scope !15, !noalias !12
  %69 = or i64 %46, 64
  %70 = getelementptr i8, i8* %27, i64 %69
  %71 = getelementptr inbounds i8, i8* %21, i64 %69
  %72 = bitcast i8* %70 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !12
  %74 = getelementptr i8, i8* %70, i64 16
  %75 = bitcast i8* %74 to <16 x i8>*
  %76 = load <16 x i8>, <16 x i8>* %75, align 1, !alias.scope !12
  %77 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %77, align 1, !alias.scope !15, !noalias !12
  %78 = getelementptr inbounds i8, i8* %71, i64 16
  %79 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %76, <16 x i8>* %79, align 1, !alias.scope !15, !noalias !12
  %80 = or i64 %46, 96
  %81 = getelementptr i8, i8* %27, i64 %80
  %82 = getelementptr inbounds i8, i8* %21, i64 %80
  %83 = bitcast i8* %81 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !12
  %85 = getelementptr i8, i8* %81, i64 16
  %86 = bitcast i8* %85 to <16 x i8>*
  %87 = load <16 x i8>, <16 x i8>* %86, align 1, !alias.scope !12
  %88 = bitcast i8* %82 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %88, align 1, !alias.scope !15, !noalias !12
  %89 = getelementptr inbounds i8, i8* %82, i64 16
  %90 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %87, <16 x i8>* %90, align 1, !alias.scope !15, !noalias !12
  %91 = add i64 %46, 128
  %92 = add i64 %47, -4
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %94, label %45, !llvm.loop !17

94:                                               ; preds = %45, %35
  %95 = phi i64 [ 0, %35 ], [ %91, %45 ]
  %96 = icmp eq i64 %41, 0
  br i1 %96, label %113, label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %110, %97 ], [ %95, %94 ]
  %99 = phi i64 [ %111, %97 ], [ %41, %94 ]
  %100 = getelementptr i8, i8* %27, i64 %98
  %101 = getelementptr inbounds i8, i8* %21, i64 %98
  %102 = bitcast i8* %100 to <16 x i8>*
  %103 = load <16 x i8>, <16 x i8>* %102, align 1, !alias.scope !12
  %104 = getelementptr i8, i8* %100, i64 16
  %105 = bitcast i8* %104 to <16 x i8>*
  %106 = load <16 x i8>, <16 x i8>* %105, align 1, !alias.scope !12
  %107 = bitcast i8* %101 to <16 x i8>*
  store <16 x i8> %103, <16 x i8>* %107, align 1, !alias.scope !15, !noalias !12
  %108 = getelementptr inbounds i8, i8* %101, i64 16
  %109 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %106, <16 x i8>* %109, align 1, !alias.scope !15, !noalias !12
  %110 = add i64 %98, 32
  %111 = add i64 %99, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %97, !llvm.loop !19

113:                                              ; preds = %97, %94
  %114 = icmp eq i64 %20, %36
  br i1 %114, label %156, label %115

115:                                              ; preds = %113, %29, %26
  %116 = phi i8* [ %27, %29 ], [ %27, %26 ], [ %37, %113 ]
  %117 = phi i64 [ 0, %29 ], [ 0, %26 ], [ %36, %113 ]
  %118 = xor i64 %117, -1
  %119 = add nsw i64 %20, %118
  %120 = and i64 %20, 3
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %132, label %122

122:                                              ; preds = %115, %122
  %123 = phi i8* [ %128, %122 ], [ %116, %115 ]
  %124 = phi i64 [ %129, %122 ], [ %117, %115 ]
  %125 = phi i64 [ %130, %122 ], [ %120, %115 ]
  %126 = getelementptr inbounds i8, i8* %21, i64 %124
  %127 = load i8, i8* %123, align 1
  store i8 %127, i8* %126, align 1
  %128 = getelementptr inbounds i8, i8* %123, i64 1
  %129 = add nuw nsw i64 %124, 1
  %130 = add i64 %125, -1
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %122, !llvm.loop !21

132:                                              ; preds = %122, %115
  %133 = phi i8* [ %116, %115 ], [ %128, %122 ]
  %134 = phi i64 [ %117, %115 ], [ %129, %122 ]
  %135 = icmp ult i64 %119, 3
  br i1 %135, label %156, label %136

136:                                              ; preds = %132, %136
  %137 = phi i8* [ %153, %136 ], [ %133, %132 ]
  %138 = phi i64 [ %154, %136 ], [ %134, %132 ]
  %139 = getelementptr inbounds i8, i8* %21, i64 %138
  %140 = load i8, i8* %137, align 1
  store i8 %140, i8* %139, align 1
  %141 = getelementptr inbounds i8, i8* %137, i64 1
  %142 = add nuw nsw i64 %138, 1
  %143 = getelementptr inbounds i8, i8* %21, i64 %142
  %144 = load i8, i8* %141, align 1
  store i8 %144, i8* %143, align 1
  %145 = getelementptr inbounds i8, i8* %137, i64 2
  %146 = add nuw nsw i64 %138, 2
  %147 = getelementptr inbounds i8, i8* %21, i64 %146
  %148 = load i8, i8* %145, align 1
  store i8 %148, i8* %147, align 1
  %149 = getelementptr inbounds i8, i8* %137, i64 3
  %150 = add nuw nsw i64 %138, 3
  %151 = getelementptr inbounds i8, i8* %21, i64 %150
  %152 = load i8, i8* %149, align 1
  store i8 %152, i8* %151, align 1
  %153 = getelementptr inbounds i8, i8* %137, i64 4
  %154 = add nuw nsw i64 %138, 4
  %155 = icmp eq i64 %154, %20
  br i1 %155, label %156, label %136, !llvm.loop !22

156:                                              ; preds = %132, %136, %113, %17
  br i1 %6, label %161, label %157

157:                                              ; preds = %156
  %158 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 1, i32 0, i32 0
  %159 = load i8*, i8** %158, align 8
  tail call void @_ZdlPv(i8* %159) #8
  %160 = load i64, i64* %3, align 8
  br label %161

161:                                              ; preds = %157, %156
  %162 = phi i64 [ %160, %157 ], [ %4, %156 ]
  %163 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 1, i32 0, i32 0
  %164 = bitcast i8** %163 to i64*
  store i64 %22, i64* %164, align 8
  %165 = getelementptr inbounds %"class.absl::inlined_vector_internal::Storage.125", %"class.absl::inlined_vector_internal::Storage.125"* %0, i64 0, i32 1, i32 0, i32 1
  store i64 %19, i64* %165, align 8
  %166 = or i64 %162, 1
  %167 = add i64 %166, 2
  store i64 %167, i64* %3, align 8
  ret i8* %23
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6webrtc4test14FakeVp8Encoder21PopulateCodecSpecificEmNS_14VideoFrameTypeEij: argument 0"}
!4 = distinct !{!4, !"_ZN6webrtc4test14FakeVp8Encoder21PopulateCodecSpecificEmNS_14VideoFrameTypeEij"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!7 = distinct !{!7, !"_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!8 = !{!"branch_weights", i32 1, i32 2000}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15MakeStorageViewEv: argument 0"}
!11 = distinct !{!11, !"_ZN4absl23inlined_vector_internal7StorageIhLm4ENSt3__19allocatorIhEEE15MakeStorageViewEv"}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = distinct !{!19, !20}
!20 = !{!"llvm.loop.unroll.disable"}
!21 = distinct !{!21, !20}
!22 = distinct !{!22, !18}
