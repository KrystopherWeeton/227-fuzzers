; ModuleID = '../../chrome/browser/ui/commander/fuzzy_finder.cc'
source_filename = "../../chrome/browser/ui/commander/fuzzy_finder.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.commander::FuzzyFinder" = type { %"class.std::__1::basic_string", %"class.std::__1::vector", %"class.std::__1::vector", %"class.std::__1::vector.6", %"class.std::__1::vector.12" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%"class.std::__1::vector.6" = type { i64*, i64, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { i64 }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { i64*, i64*, %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { i64* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon }
%struct.anon = type { %"struct.std::__1::__padding", i8 }
%"struct.std::__1::__padding" = type { [1 x i8] }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { %"class.gfx::Range"*, %"class.gfx::Range"*, %"class.std::__1::__compressed_pair.18" }
%"class.gfx::Range" = type { i32, i32 }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.gfx::Range"* }
%"class.base::i18n::UTF16CharIterator" = type { %"class.base::BasicStringPiece", i64, i64, i32, i32 }
%"class.base::BasicStringPiece" = type { i16*, i64 }
%"class.std::__1::vector.23" = type { %"class.std::__1::__vector_base.24" }
%"class.std::__1::__vector_base.24" = type { %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"*, %"class.std::__1::__compressed_pair.25" }
%"struct.(anonymous namespace)::MatchRecord" = type <{ %"class.gfx::Range", i32, i32, i8, [3 x i8] }>
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"struct.(anonymous namespace)::MatchRecord"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.std::__1::__bit_iterator" = type <{ i64*, i32, [4 x i8] }>

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE6assignEmRKb = comdat any

$_ZNSt3__16vectorImNS_9allocatorImEEE6assignEmRKm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm = comdat any

$_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_ = comdat any

@_ZN9commander11FuzzyFinderC1ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE = hidden unnamed_addr alias void (%"class.commander::FuzzyFinder"*, %"class.std::__1::basic_string"*), void (%"class.commander::FuzzyFinder"*, %"class.std::__1::basic_string"*)* @_ZN9commander11FuzzyFinderC2ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE
@_ZN9commander11FuzzyFinderD1Ev = hidden unnamed_addr alias void (%"class.commander::FuzzyFinder"*), void (%"class.commander::FuzzyFinder"*)* @_ZN9commander11FuzzyFinderD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11FuzzyFinderC2ERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEE(%"class.commander::FuzzyFinder"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %11 = select i1 %7, i16* %9, i16* %10
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %6 to i64
  %15 = select i1 %7, i64 %13, i64 %14
  tail call void @_ZN4base4i18n8FoldCaseENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret %3, i16* %11, i64 %15) #8
  %16 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 1
  %17 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 2
  %18 = bitcast %"class.commander::FuzzyFinder"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %19 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %18, i64 0, i32 1, i32 1
  %20 = bitcast %"class.std::__1::vector"* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 96, i1 false)
  %21 = load i8, i8* %19, align 1
  %22 = icmp slt i8 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  br label %28

26:                                               ; preds = %2
  %27 = zext i8 %21 to i64
  br label %28

28:                                               ; preds = %23, %26
  %29 = phi i64 [ %25, %23 ], [ %27, %26 ]
  %30 = icmp ult i64 %29, 17
  br i1 %30, label %31, label %81

31:                                               ; preds = %28
  br i1 %22, label %32, label %35

32:                                               ; preds = %31
  %33 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  br label %37

35:                                               ; preds = %31
  %36 = zext i8 %21 to i64
  br label %37

37:                                               ; preds = %32, %35
  %38 = phi i64 [ %34, %32 ], [ %36, %35 ]
  %39 = shl i64 %38, 10
  %40 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %41 = bitcast i32** %40 to i64*
  %42 = icmp eq i64 %39, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %37
  %44 = icmp ugt i64 %39, 4611686018427387903
  br i1 %44, label %45, label %46

45:                                               ; preds = %43
  tail call void @abort() #9
  unreachable

46:                                               ; preds = %43
  %47 = shl i64 %38, 12
  %48 = tail call i8* @_Znwm(i64 %47) #10
  %49 = bitcast i8* %48 to i32*
  %50 = getelementptr inbounds i32, i32* %49, i64 %39
  %51 = ptrtoint i32* %50 to i64
  %52 = insertelement <2 x i8*> undef, i8* %48, i32 0
  %53 = shufflevector <2 x i8*> %52, <2 x i8*> undef, <2 x i32> zeroinitializer
  %54 = ptrtoint <2 x i8*> %53 to <2 x i64>
  %55 = bitcast %"class.std::__1::vector"* %16 to <2 x i64>*
  store <2 x i64> %54, <2 x i64>* %55, align 8
  store i64 %51, i64* %41, align 8
  br label %56

56:                                               ; preds = %46, %37
  br i1 %22, label %57, label %60

57:                                               ; preds = %56
  %58 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  br label %62

60:                                               ; preds = %56
  %61 = zext i8 %21 to i64
  br label %62

62:                                               ; preds = %57, %60
  %63 = phi i64 [ %59, %57 ], [ %61, %60 ]
  %64 = shl i64 %63, 10
  %65 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %66 = bitcast i32** %65 to i64*
  %67 = icmp eq i64 %64, 0
  br i1 %67, label %81, label %68

68:                                               ; preds = %62
  %69 = icmp ugt i64 %64, 4611686018427387903
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #9
  unreachable

71:                                               ; preds = %68
  %72 = shl i64 %63, 12
  %73 = tail call i8* @_Znwm(i64 %72) #10
  %74 = bitcast i8* %73 to i32*
  %75 = getelementptr inbounds i32, i32* %74, i64 %64
  %76 = ptrtoint i32* %75 to i64
  %77 = insertelement <2 x i8*> undef, i8* %73, i32 0
  %78 = shufflevector <2 x i8*> %77, <2 x i8*> undef, <2 x i32> zeroinitializer
  %79 = ptrtoint <2 x i8*> %78 to <2 x i64>
  %80 = bitcast %"class.std::__1::vector"* %17 to <2 x i64>*
  store <2 x i64> %79, <2 x i64>* %80, align 8
  store i64 %76, i64* %66, align 8
  br label %81

81:                                               ; preds = %71, %62, %28
  ret void
}

declare void @_ZN4base4i18n8FoldCaseENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret, i16*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN9commander11FuzzyFinderD2Ev(%"class.commander::FuzzyFinder"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 4, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i64* %3 to i64
  %7 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 4, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #10
  br label %10

10:                                               ; preds = %1, %5
  %11 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 3, i32 0
  %12 = load i64*, i64** %11, align 8
  %13 = icmp eq i64* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %10
  %15 = bitcast i64* %12 to i8*
  tail call void @_ZdlPv(i8* %15) #10
  br label %16

16:                                               ; preds = %10, %14
  %17 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 2, i32 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %25, label %20

20:                                               ; preds = %16
  %21 = ptrtoint i32* %18 to i64
  %22 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 2, i32 0, i32 1
  %23 = bitcast i32** %22 to i64*
  store i64 %21, i64* %23, align 8
  %24 = bitcast i32* %18 to i8*
  tail call void @_ZdlPv(i8* %24) #10
  br label %25

25:                                               ; preds = %16, %20
  %26 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 1, i32 0, i32 0
  %27 = load i32*, i32** %26, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = ptrtoint i32* %27 to i64
  %31 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 1, i32 0, i32 1
  %32 = bitcast i32** %31 to i64*
  store i64 %30, i64* %32, align 8
  %33 = bitcast i32* %27 to i8*
  tail call void @_ZdlPv(i8* %33) #10
  br label %34

34:                                               ; preds = %25, %29
  %35 = bitcast %"class.commander::FuzzyFinder"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %36 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %35, i64 0, i32 1, i32 1
  %37 = load i8, i8* %36, align 1
  %38 = icmp slt i8 %37, 0
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = bitcast %"class.commander::FuzzyFinder"* %0 to i8**
  %41 = load i8*, i8** %40, align 8
  tail call void @_ZdlPv(i8* %41) #10
  br label %42

42:                                               ; preds = %34, %39
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN9commander11FuzzyFinder4FindERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEEPNS1_6vectorIN3gfx5RangeENS5_ISC_EEEE(%"class.commander::FuzzyFinder"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector.16"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.base::i18n::UTF16CharIterator", align 8
  %5 = alloca %"class.base::i18n::UTF16CharIterator", align 8
  %6 = alloca %"class.std::__1::vector.23", align 8
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = bitcast %"class.std::__1::vector.16"* %2 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 1
  %11 = bitcast %"class.gfx::Range"** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0
  %13 = bitcast %"class.commander::FuzzyFinder"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %14 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %13, i64 0, i32 1, i32 1
  %15 = load i8, i8* %14, align 1
  %16 = icmp slt i8 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  br label %22

20:                                               ; preds = %3
  %21 = zext i8 %15 to i64
  br label %22

22:                                               ; preds = %17, %20
  %23 = phi i64 [ %19, %17 ], [ %21, %20 ]
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %1092, label %25

25:                                               ; preds = %22
  %26 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #8
  %27 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %27, i64 0, i32 1, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %34 = select i1 %30, i16* %32, i16* %33
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = zext i8 %29 to i64
  %38 = select i1 %30, i64 %36, i64 %37
  call void @_ZN4base4i18n8FoldCaseENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %7, i16* %34, i64 %38) #8
  %39 = load i8, i8* %14, align 1
  %40 = icmp slt i8 %39, 0
  br i1 %40, label %41, label %44

41:                                               ; preds = %25
  %42 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  br label %46

44:                                               ; preds = %25
  %45 = zext i8 %39 to i64
  br label %46

46:                                               ; preds = %41, %44
  %47 = phi i64 [ %43, %41 ], [ %45, %44 ]
  %48 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %49 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %48, i64 0, i32 1, i32 1
  %50 = load i8, i8* %49, align 1
  %51 = icmp slt i8 %50, 0
  %52 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = zext i8 %50 to i64
  %55 = select i1 %51, i64 %53, i64 %54
  %56 = icmp ugt i64 %47, %55
  br i1 %56, label %1084, label %57

57:                                               ; preds = %46
  %58 = icmp eq i64 %47, %55
  br i1 %58, label %59, label %157

59:                                               ; preds = %57
  %60 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = zext i8 %39 to i64
  %63 = select i1 %40, i64 %61, i64 %62
  %64 = icmp eq i64 %47, %63
  br i1 %64, label %65, label %1084

65:                                               ; preds = %59
  %66 = icmp eq i64 %47, 0
  br i1 %66, label %88, label %67

67:                                               ; preds = %65
  %68 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load i16*, i16** %68, align 8
  %70 = bitcast %"class.commander::FuzzyFinder"* %0 to i16*
  %71 = select i1 %40, i16* %69, i16* %70
  %72 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i16*, i16** %72, align 8
  %74 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %75 = select i1 %51, i16* %73, i16* %74
  br label %76

76:                                               ; preds = %83, %67
  %77 = phi i64 [ %84, %83 ], [ %47, %67 ]
  %78 = phi i16* [ %86, %83 ], [ %71, %67 ]
  %79 = phi i16* [ %85, %83 ], [ %75, %67 ]
  %80 = load i16, i16* %79, align 2
  %81 = load i16, i16* %78, align 2
  %82 = icmp eq i16 %81, %80
  br i1 %82, label %83, label %1084

83:                                               ; preds = %76
  %84 = add i64 %77, -1
  %85 = getelementptr inbounds i16, i16* %79, i64 1
  %86 = getelementptr inbounds i16, i16* %78, i64 1
  %87 = icmp eq i64 %84, 0
  br i1 %87, label %88, label %76

88:                                               ; preds = %83, %65
  %89 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %90 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %91 = load %"class.gfx::Range"*, %"class.gfx::Range"** %90, align 8
  %92 = icmp ult %"class.gfx::Range"* %89, %91
  %93 = ptrtoint %"class.gfx::Range"* %91 to i64
  br i1 %92, label %94, label %100

94:                                               ; preds = %88
  %95 = trunc i64 %47 to i32
  %96 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %89, i64 0, i32 0
  store i32 0, i32* %96, align 4
  %97 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %89, i64 0, i32 1
  store i32 %95, i32* %97, align 4
  %98 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %89, i64 1
  %99 = ptrtoint %"class.gfx::Range"* %98 to i64
  store i64 %99, i64* %11, align 8
  br label %1084

100:                                              ; preds = %88
  %101 = ptrtoint %"class.gfx::Range"* %89 to i64
  %102 = load i64, i64* %8, align 8
  %103 = sub i64 %101, %102
  %104 = ashr exact i64 %103, 3
  %105 = add nsw i64 %104, 1
  %106 = icmp ugt i64 %105, 2305843009213693951
  br i1 %106, label %107, label %109

107:                                              ; preds = %100
  %108 = bitcast %"class.std::__1::vector.16"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %108) #9
  unreachable

109:                                              ; preds = %100
  %110 = bitcast %"class.gfx::Range"** %90 to i64*
  %111 = sub i64 %93, %102
  %112 = ashr exact i64 %111, 3
  %113 = icmp ult i64 %112, 1152921504606846975
  br i1 %113, label %114, label %122

114:                                              ; preds = %109
  %115 = ashr exact i64 %111, 2
  %116 = icmp ult i64 %115, %105
  %117 = select i1 %116, i64 %105, i64 %115
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %127, label %119

119:                                              ; preds = %114
  %120 = icmp ugt i64 %117, 2305843009213693951
  br i1 %120, label %121, label %122

121:                                              ; preds = %119
  call void @abort() #9
  unreachable

122:                                              ; preds = %119, %109
  %123 = phi i64 [ %117, %119 ], [ 2305843009213693951, %109 ]
  %124 = shl i64 %123, 3
  %125 = call i8* @_Znwm(i64 %124) #10
  %126 = bitcast i8* %125 to %"class.gfx::Range"*
  br label %127

127:                                              ; preds = %122, %114
  %128 = phi i64 [ %123, %122 ], [ 0, %114 ]
  %129 = phi %"class.gfx::Range"* [ %126, %122 ], [ null, %114 ]
  %130 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %129, i64 %104
  %131 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %129, i64 %128
  %132 = ptrtoint %"class.gfx::Range"* %131 to i64
  %133 = trunc i64 %47 to i32
  %134 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %130, i64 0, i32 0
  store i32 0, i32* %134, align 4
  %135 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %129, i64 %104, i32 1
  store i32 %133, i32* %135, align 4
  %136 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %130, i64 1
  %137 = ptrtoint %"class.gfx::Range"* %136 to i64
  %138 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  %139 = load %"class.gfx::Range"*, %"class.gfx::Range"** %138, align 8
  %140 = load i64, i64* %11, align 8
  %141 = ptrtoint %"class.gfx::Range"* %139 to i64
  %142 = sub i64 %140, %141
  %143 = ashr exact i64 %142, 3
  %144 = sub nsw i64 0, %143
  %145 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %130, i64 %144
  %146 = ptrtoint %"class.gfx::Range"* %145 to i64
  %147 = icmp sgt i64 %142, 0
  br i1 %147, label %148, label %152

148:                                              ; preds = %127
  %149 = bitcast %"class.gfx::Range"* %145 to i8*
  %150 = bitcast %"class.gfx::Range"* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %150, i64 %142, i1 false) #8
  %151 = load %"class.gfx::Range"*, %"class.gfx::Range"** %138, align 8
  br label %152

152:                                              ; preds = %148, %127
  %153 = phi %"class.gfx::Range"* [ %139, %127 ], [ %151, %148 ]
  store i64 %146, i64* %8, align 8
  store i64 %137, i64* %11, align 8
  store i64 %132, i64* %110, align 8
  %154 = icmp eq %"class.gfx::Range"* %153, null
  br i1 %154, label %1084, label %155

155:                                              ; preds = %152
  %156 = bitcast %"class.gfx::Range"* %153 to i8*
  call void @_ZdlPv(i8* %156) #10
  br label %1084

157:                                              ; preds = %57
  %158 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %159 = load i16*, i16** %158, align 8
  %160 = bitcast %"class.std::__1::basic_string"* %7 to i16*
  %161 = select i1 %51, i16* %159, i16* %160
  %162 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = load i16*, i16** %162, align 8
  %164 = bitcast %"class.commander::FuzzyFinder"* %0 to i16*
  %165 = select i1 %40, i16* %163, i16* %164
  %166 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = zext i8 %39 to i64
  %169 = select i1 %40, i64 %167, i64 %168
  %170 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16* %161, i64 %55, i16* %165, i64 %169, i32 0) #8
  br i1 %170, label %171, label %248

171:                                              ; preds = %157
  %172 = load i8, i8* %14, align 1
  %173 = icmp slt i8 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %171
  %175 = load i64, i64* %166, align 8
  br label %178

176:                                              ; preds = %171
  %177 = zext i8 %172 to i64
  br label %178

178:                                              ; preds = %174, %176
  %179 = phi i64 [ %175, %174 ], [ %177, %176 ]
  %180 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %181 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %182 = load %"class.gfx::Range"*, %"class.gfx::Range"** %181, align 8
  %183 = icmp ult %"class.gfx::Range"* %180, %182
  %184 = ptrtoint %"class.gfx::Range"* %182 to i64
  br i1 %183, label %185, label %191

185:                                              ; preds = %178
  %186 = trunc i64 %179 to i32
  %187 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %180, i64 0, i32 0
  store i32 0, i32* %187, align 4
  %188 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %180, i64 0, i32 1
  store i32 %186, i32* %188, align 4
  %189 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %180, i64 1
  %190 = ptrtoint %"class.gfx::Range"* %189 to i64
  store i64 %190, i64* %11, align 8
  br label %1084

191:                                              ; preds = %178
  %192 = ptrtoint %"class.gfx::Range"* %180 to i64
  %193 = load i64, i64* %8, align 8
  %194 = sub i64 %192, %193
  %195 = ashr exact i64 %194, 3
  %196 = add nsw i64 %195, 1
  %197 = icmp ugt i64 %196, 2305843009213693951
  br i1 %197, label %198, label %200

198:                                              ; preds = %191
  %199 = bitcast %"class.std::__1::vector.16"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %199) #9
  unreachable

200:                                              ; preds = %191
  %201 = bitcast %"class.gfx::Range"** %181 to i64*
  %202 = sub i64 %184, %193
  %203 = ashr exact i64 %202, 3
  %204 = icmp ult i64 %203, 1152921504606846975
  br i1 %204, label %205, label %213

205:                                              ; preds = %200
  %206 = ashr exact i64 %202, 2
  %207 = icmp ult i64 %206, %196
  %208 = select i1 %207, i64 %196, i64 %206
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %218, label %210

210:                                              ; preds = %205
  %211 = icmp ugt i64 %208, 2305843009213693951
  br i1 %211, label %212, label %213

212:                                              ; preds = %210
  call void @abort() #9
  unreachable

213:                                              ; preds = %210, %200
  %214 = phi i64 [ %208, %210 ], [ 2305843009213693951, %200 ]
  %215 = shl i64 %214, 3
  %216 = call i8* @_Znwm(i64 %215) #10
  %217 = bitcast i8* %216 to %"class.gfx::Range"*
  br label %218

218:                                              ; preds = %213, %205
  %219 = phi i64 [ %214, %213 ], [ 0, %205 ]
  %220 = phi %"class.gfx::Range"* [ %217, %213 ], [ null, %205 ]
  %221 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %220, i64 %195
  %222 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %220, i64 %219
  %223 = ptrtoint %"class.gfx::Range"* %222 to i64
  %224 = trunc i64 %179 to i32
  %225 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %221, i64 0, i32 0
  store i32 0, i32* %225, align 4
  %226 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %220, i64 %195, i32 1
  store i32 %224, i32* %226, align 4
  %227 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %221, i64 1
  %228 = ptrtoint %"class.gfx::Range"* %227 to i64
  %229 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  %230 = load %"class.gfx::Range"*, %"class.gfx::Range"** %229, align 8
  %231 = load i64, i64* %11, align 8
  %232 = ptrtoint %"class.gfx::Range"* %230 to i64
  %233 = sub i64 %231, %232
  %234 = ashr exact i64 %233, 3
  %235 = sub nsw i64 0, %234
  %236 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %221, i64 %235
  %237 = ptrtoint %"class.gfx::Range"* %236 to i64
  %238 = icmp sgt i64 %233, 0
  br i1 %238, label %239, label %243

239:                                              ; preds = %218
  %240 = bitcast %"class.gfx::Range"* %236 to i8*
  %241 = bitcast %"class.gfx::Range"* %230 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %240, i8* align 4 %241, i64 %233, i1 false) #8
  %242 = load %"class.gfx::Range"*, %"class.gfx::Range"** %229, align 8
  br label %243

243:                                              ; preds = %239, %218
  %244 = phi %"class.gfx::Range"* [ %230, %218 ], [ %242, %239 ]
  store i64 %237, i64* %8, align 8
  store i64 %228, i64* %11, align 8
  store i64 %223, i64* %201, align 8
  %245 = icmp eq %"class.gfx::Range"* %244, null
  br i1 %245, label %1084, label %246

246:                                              ; preds = %243
  %247 = bitcast %"class.gfx::Range"* %244 to i8*
  call void @_ZdlPv(i8* %247) #10
  br label %1084

248:                                              ; preds = %157
  %249 = icmp eq i64 %47, 1
  %250 = load i8, i8* %49, align 1
  %251 = icmp slt i8 %250, 0
  %252 = load i16*, i16** %158, align 8
  %253 = select i1 %251, i16* %252, i16* %160
  br i1 %249, label %254, label %618

254:                                              ; preds = %248
  %255 = load i8, i8* %14, align 1
  %256 = icmp slt i8 %255, 0
  %257 = load i16*, i16** %162, align 8
  %258 = load i64, i64* %166, align 8
  %259 = zext i8 %255 to i64
  %260 = select i1 %256, i16* %257, i16* %164
  %261 = select i1 %256, i64 %258, i64 %259
  %262 = icmp eq i64 %261, 0
  br i1 %262, label %321, label %263

263:                                              ; preds = %254
  %264 = load i64, i64* %52, align 8
  %265 = zext i8 %250 to i64
  %266 = select i1 %251, i64 %264, i64 %265
  %267 = getelementptr inbounds i16, i16* %253, i64 %266
  %268 = shl nuw i64 %261, 1
  %269 = ashr exact i64 %268, 1
  %270 = ptrtoint i16* %267 to i64
  %271 = ptrtoint i16* %253 to i64
  %272 = shl nuw i64 %266, 1
  %273 = ashr exact i64 %272, 1
  %274 = icmp slt i64 %273, %269
  br i1 %274, label %314, label %275

275:                                              ; preds = %263
  %276 = load i16, i16* %260, align 2
  br label %277

277:                                              ; preds = %306, %275
  %278 = phi i64 [ %273, %275 ], [ %310, %306 ]
  %279 = phi i16* [ %253, %275 ], [ %307, %306 ]
  %280 = sub nsw i64 %278, %269
  %281 = add nsw i64 %280, 1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %314, label %283

283:                                              ; preds = %277, %288
  %284 = phi i64 [ %290, %288 ], [ %281, %277 ]
  %285 = phi i16* [ %289, %288 ], [ %279, %277 ]
  %286 = load i16, i16* %285, align 2
  %287 = icmp eq i16 %286, %276
  br i1 %287, label %292, label %288

288:                                              ; preds = %283
  %289 = getelementptr inbounds i16, i16* %285, i64 1
  %290 = add i64 %284, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %314, label %283

292:                                              ; preds = %283
  %293 = icmp eq i16* %285, null
  br i1 %293, label %314, label %294

294:                                              ; preds = %292, %301
  %295 = phi i16* [ %299, %301 ], [ %285, %292 ]
  %296 = phi i16* [ %302, %301 ], [ %260, %292 ]
  %297 = phi i64 [ %298, %301 ], [ %269, %292 ]
  %298 = add i64 %297, -1
  %299 = getelementptr inbounds i16, i16* %295, i64 1
  %300 = icmp eq i64 %298, 0
  br i1 %300, label %312, label %301

301:                                              ; preds = %294
  %302 = getelementptr inbounds i16, i16* %296, i64 1
  %303 = load i16, i16* %299, align 2
  %304 = load i16, i16* %302, align 2
  %305 = icmp eq i16 %304, %303
  br i1 %305, label %294, label %306

306:                                              ; preds = %301
  %307 = getelementptr inbounds i16, i16* %285, i64 1
  %308 = ptrtoint i16* %307 to i64
  %309 = sub i64 %270, %308
  %310 = ashr exact i64 %309, 1
  %311 = icmp slt i64 %310, %269
  br i1 %311, label %314, label %277

312:                                              ; preds = %294
  %313 = ptrtoint i16* %285 to i64
  br label %314

314:                                              ; preds = %306, %292, %277, %288, %312, %263
  %315 = phi i64 [ %313, %312 ], [ %270, %263 ], [ %270, %288 ], [ %270, %277 ], [ %270, %292 ], [ %270, %306 ]
  %316 = phi i16* [ %285, %312 ], [ %267, %263 ], [ %267, %288 ], [ %267, %277 ], [ %267, %292 ], [ %267, %306 ]
  %317 = icmp eq i16* %316, %267
  %318 = sub i64 %315, %271
  %319 = ashr exact i64 %318, 1
  %320 = select i1 %317, i64 -1, i64 %319
  br label %321

321:                                              ; preds = %254, %314
  %322 = phi i64 [ 0, %254 ], [ %320, %314 ]
  %323 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  %324 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %325 = bitcast %"class.gfx::Range"** %324 to i64*
  br label %326

326:                                              ; preds = %540, %321
  %327 = phi i16* [ %252, %321 ], [ %527, %540 ]
  %328 = phi i8 [ %250, %321 ], [ %525, %540 ]
  %329 = phi i64 [ %322, %321 ], [ %541, %540 ]
  switch i64 %329, label %394 [
    i64 -1, label %601
    i64 0, label %330
  ]

330:                                              ; preds = %326
  %331 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %332 = load %"class.gfx::Range"*, %"class.gfx::Range"** %324, align 8
  %333 = icmp ult %"class.gfx::Range"* %331, %332
  %334 = ptrtoint %"class.gfx::Range"* %332 to i64
  br i1 %333, label %335, label %340

335:                                              ; preds = %330
  %336 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %331, i64 0, i32 0
  store i32 0, i32* %336, align 4
  %337 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %331, i64 0, i32 1
  store i32 1, i32* %337, align 4
  %338 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %331, i64 1
  %339 = ptrtoint %"class.gfx::Range"* %338 to i64
  store i64 %339, i64* %11, align 8
  br label %1084

340:                                              ; preds = %330
  %341 = ptrtoint %"class.gfx::Range"* %331 to i64
  %342 = load i64, i64* %8, align 8
  %343 = sub i64 %341, %342
  %344 = ashr exact i64 %343, 3
  %345 = add nsw i64 %344, 1
  %346 = icmp ugt i64 %345, 2305843009213693951
  br i1 %346, label %347, label %349

347:                                              ; preds = %340
  %348 = bitcast %"class.std::__1::vector.16"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %348) #9
  unreachable

349:                                              ; preds = %340
  %350 = sub i64 %334, %342
  %351 = ashr exact i64 %350, 3
  %352 = icmp ult i64 %351, 1152921504606846975
  br i1 %352, label %353, label %361

353:                                              ; preds = %349
  %354 = ashr exact i64 %350, 2
  %355 = icmp ult i64 %354, %345
  %356 = select i1 %355, i64 %345, i64 %354
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %366, label %358

358:                                              ; preds = %353
  %359 = icmp ugt i64 %356, 2305843009213693951
  br i1 %359, label %360, label %361

360:                                              ; preds = %358
  call void @abort() #9
  unreachable

361:                                              ; preds = %358, %349
  %362 = phi i64 [ %356, %358 ], [ 2305843009213693951, %349 ]
  %363 = shl i64 %362, 3
  %364 = call i8* @_Znwm(i64 %363) #10
  %365 = bitcast i8* %364 to %"class.gfx::Range"*
  br label %366

366:                                              ; preds = %361, %353
  %367 = phi i64 [ %362, %361 ], [ 0, %353 ]
  %368 = phi %"class.gfx::Range"* [ %365, %361 ], [ null, %353 ]
  %369 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %368, i64 %344
  %370 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %368, i64 %367
  %371 = ptrtoint %"class.gfx::Range"* %370 to i64
  %372 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %369, i64 0, i32 0
  store i32 0, i32* %372, align 4
  %373 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %368, i64 %344, i32 1
  store i32 1, i32* %373, align 4
  %374 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %369, i64 1
  %375 = ptrtoint %"class.gfx::Range"* %374 to i64
  %376 = load %"class.gfx::Range"*, %"class.gfx::Range"** %323, align 8
  %377 = load i64, i64* %11, align 8
  %378 = ptrtoint %"class.gfx::Range"* %376 to i64
  %379 = sub i64 %377, %378
  %380 = ashr exact i64 %379, 3
  %381 = sub nsw i64 0, %380
  %382 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %369, i64 %381
  %383 = ptrtoint %"class.gfx::Range"* %382 to i64
  %384 = icmp sgt i64 %379, 0
  br i1 %384, label %385, label %389

385:                                              ; preds = %366
  %386 = bitcast %"class.gfx::Range"* %382 to i8*
  %387 = bitcast %"class.gfx::Range"* %376 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %386, i8* align 4 %387, i64 %379, i1 false) #8
  %388 = load %"class.gfx::Range"*, %"class.gfx::Range"** %323, align 8
  br label %389

389:                                              ; preds = %385, %366
  %390 = phi %"class.gfx::Range"* [ %376, %366 ], [ %388, %385 ]
  store i64 %383, i64* %8, align 8
  store i64 %375, i64* %11, align 8
  store i64 %371, i64* %325, align 8
  %391 = icmp eq %"class.gfx::Range"* %390, null
  br i1 %391, label %1084, label %392

392:                                              ; preds = %389
  %393 = bitcast %"class.gfx::Range"* %390 to i8*
  call void @_ZdlPv(i8* %393) #10
  br label %1084

394:                                              ; preds = %326
  %395 = add i64 %329, -1
  %396 = icmp slt i8 %328, 0
  %397 = load i64, i64* %52, align 8
  %398 = zext i8 %328 to i64
  %399 = select i1 %396, i64 %397, i64 %398
  %400 = icmp ugt i64 %399, %395
  br i1 %400, label %403, label %401

401:                                              ; preds = %394
  %402 = bitcast %"class.std::__1::basic_string"* %7 to %"class.std::__1::__basic_string_common"*
  call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"* nonnull %402) #9
  unreachable

403:                                              ; preds = %394
  %404 = select i1 %396, i16* %327, i16* %160
  %405 = getelementptr inbounds i16, i16* %404, i64 %395
  %406 = load i16, i16* %405, align 2
  %407 = zext i16 %406 to i32
  %408 = call zeroext i1 @_ZN4base19IsUnicodeWhitespaceEw(i32 signext %407) #8
  br i1 %408, label %409, label %469

409:                                              ; preds = %403
  %410 = load i64, i64* %8, align 8
  store i64 %410, i64* %11, align 8
  %411 = add nuw i64 %329, 1
  %412 = inttoptr i64 %410 to %"class.gfx::Range"*
  %413 = load %"class.gfx::Range"*, %"class.gfx::Range"** %324, align 8
  %414 = icmp ugt %"class.gfx::Range"* %413, %412
  br i1 %414, label %415, label %422

415:                                              ; preds = %409
  %416 = trunc i64 %329 to i32
  %417 = trunc i64 %411 to i32
  %418 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %412, i64 0, i32 0
  store i32 %416, i32* %418, align 4
  %419 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %412, i64 0, i32 1
  store i32 %417, i32* %419, align 4
  %420 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %412, i64 1
  %421 = ptrtoint %"class.gfx::Range"* %420 to i64
  store i64 %421, i64* %11, align 8
  br label %1084

422:                                              ; preds = %409
  %423 = ptrtoint %"class.gfx::Range"* %413 to i64
  %424 = sub i64 %423, %410
  %425 = ashr exact i64 %424, 3
  %426 = icmp ult i64 %425, 1152921504606846975
  br i1 %426, label %427, label %435

427:                                              ; preds = %422
  %428 = ashr exact i64 %424, 2
  %429 = icmp eq i64 %424, 0
  %430 = select i1 %429, i64 1, i64 %428
  %431 = icmp eq i64 %430, 0
  br i1 %431, label %440, label %432

432:                                              ; preds = %427
  %433 = icmp ugt i64 %430, 2305843009213693951
  br i1 %433, label %434, label %435

434:                                              ; preds = %432
  call void @abort() #9
  unreachable

435:                                              ; preds = %432, %422
  %436 = phi i64 [ %430, %432 ], [ 2305843009213693951, %422 ]
  %437 = shl i64 %436, 3
  %438 = call i8* @_Znwm(i64 %437) #10
  %439 = bitcast i8* %438 to %"class.gfx::Range"*
  br label %440

440:                                              ; preds = %435, %427
  %441 = phi i64 [ %436, %435 ], [ 0, %427 ]
  %442 = phi %"class.gfx::Range"* [ %439, %435 ], [ null, %427 ]
  %443 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %442, i64 %441
  %444 = ptrtoint %"class.gfx::Range"* %443 to i64
  %445 = trunc i64 %329 to i32
  %446 = trunc i64 %411 to i32
  %447 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %442, i64 0, i32 0
  store i32 %445, i32* %447, align 4
  %448 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %442, i64 0, i32 1
  store i32 %446, i32* %448, align 4
  %449 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %442, i64 1
  %450 = ptrtoint %"class.gfx::Range"* %449 to i64
  %451 = load %"class.gfx::Range"*, %"class.gfx::Range"** %323, align 8
  %452 = load i64, i64* %11, align 8
  %453 = ptrtoint %"class.gfx::Range"* %451 to i64
  %454 = sub i64 %452, %453
  %455 = ashr exact i64 %454, 3
  %456 = sub nsw i64 0, %455
  %457 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %442, i64 %456
  %458 = ptrtoint %"class.gfx::Range"* %457 to i64
  %459 = icmp sgt i64 %454, 0
  br i1 %459, label %460, label %464

460:                                              ; preds = %440
  %461 = bitcast %"class.gfx::Range"* %457 to i8*
  %462 = bitcast %"class.gfx::Range"* %451 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %461, i8* align 4 %462, i64 %454, i1 false) #8
  %463 = load %"class.gfx::Range"*, %"class.gfx::Range"** %323, align 8
  br label %464

464:                                              ; preds = %460, %440
  %465 = phi %"class.gfx::Range"* [ %451, %440 ], [ %463, %460 ]
  store i64 %458, i64* %8, align 8
  store i64 %450, i64* %11, align 8
  store i64 %444, i64* %325, align 8
  %466 = icmp eq %"class.gfx::Range"* %465, null
  br i1 %466, label %1084, label %467

467:                                              ; preds = %464
  %468 = bitcast %"class.gfx::Range"* %465 to i8*
  call void @_ZdlPv(i8* %468) #10
  br label %1084

469:                                              ; preds = %403
  %470 = load %"class.gfx::Range"*, %"class.gfx::Range"** %323, align 8
  %471 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %472 = icmp eq %"class.gfx::Range"* %470, %471
  %473 = ptrtoint %"class.gfx::Range"* %470 to i64
  %474 = ptrtoint %"class.gfx::Range"* %471 to i64
  %475 = add nuw i64 %329, 1
  br i1 %472, label %476, label %524

476:                                              ; preds = %469
  %477 = load %"class.gfx::Range"*, %"class.gfx::Range"** %324, align 8
  %478 = icmp ult %"class.gfx::Range"* %470, %477
  br i1 %478, label %479, label %486

479:                                              ; preds = %476
  %480 = trunc i64 %329 to i32
  %481 = trunc i64 %475 to i32
  %482 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %470, i64 0, i32 0
  store i32 %480, i32* %482, align 4
  %483 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %470, i64 0, i32 1
  store i32 %481, i32* %483, align 4
  %484 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %470, i64 1
  %485 = ptrtoint %"class.gfx::Range"* %484 to i64
  store i64 %485, i64* %11, align 8
  br label %524

486:                                              ; preds = %476
  %487 = ptrtoint %"class.gfx::Range"* %477 to i64
  %488 = sub i64 %487, %473
  %489 = ashr exact i64 %488, 3
  %490 = icmp ult i64 %489, 1152921504606846975
  br i1 %490, label %491, label %497

491:                                              ; preds = %486
  %492 = ashr exact i64 %488, 2
  %493 = icmp eq i64 %488, 0
  %494 = select i1 %493, i64 1, i64 %492
  %495 = icmp ugt i64 %494, 2305843009213693951
  br i1 %495, label %496, label %497

496:                                              ; preds = %491
  call void @abort() #9
  unreachable

497:                                              ; preds = %486, %491
  %498 = phi i64 [ %494, %491 ], [ 2305843009213693951, %486 ]
  %499 = shl i64 %498, 3
  %500 = call i8* @_Znwm(i64 %499) #10
  %501 = bitcast i8* %500 to %"class.gfx::Range"*
  %502 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %501, i64 %498
  %503 = ptrtoint %"class.gfx::Range"* %502 to i64
  %504 = trunc i64 %329 to i32
  %505 = trunc i64 %475 to i32
  %506 = bitcast i8* %500 to i32*
  store i32 %504, i32* %506, align 4
  %507 = getelementptr inbounds i8, i8* %500, i64 4
  %508 = bitcast i8* %507 to i32*
  store i32 %505, i32* %508, align 4
  %509 = getelementptr inbounds i8, i8* %500, i64 8
  %510 = ptrtoint i8* %509 to i64
  %511 = sub i64 %474, %473
  %512 = ashr exact i64 %511, 3
  %513 = sub nsw i64 0, %512
  %514 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %501, i64 %513
  %515 = ptrtoint %"class.gfx::Range"* %514 to i64
  %516 = icmp sgt i64 %511, 0
  br i1 %516, label %517, label %520

517:                                              ; preds = %497
  %518 = bitcast %"class.gfx::Range"* %514 to i8*
  %519 = bitcast %"class.gfx::Range"* %470 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %518, i8* align 4 %519, i64 %511, i1 false) #8
  br label %520

520:                                              ; preds = %517, %497
  store i64 %515, i64* %8, align 8
  store i64 %510, i64* %11, align 8
  store i64 %503, i64* %325, align 8
  %521 = icmp eq %"class.gfx::Range"* %470, null
  br i1 %521, label %524, label %522

522:                                              ; preds = %520
  %523 = bitcast %"class.gfx::Range"* %470 to i8*
  call void @_ZdlPv(i8* %523) #10
  br label %524

524:                                              ; preds = %469, %522, %520, %479
  %525 = load i8, i8* %49, align 1
  %526 = icmp slt i8 %525, 0
  %527 = load i16*, i16** %158, align 8
  %528 = load i64, i64* %52, align 8
  %529 = zext i8 %525 to i64
  %530 = select i1 %526, i16* %527, i16* %160
  %531 = select i1 %526, i64 %528, i64 %529
  %532 = load i8, i8* %14, align 1
  %533 = icmp slt i8 %532, 0
  %534 = load i16*, i16** %162, align 8
  %535 = load i64, i64* %166, align 8
  %536 = zext i8 %532 to i64
  %537 = select i1 %533, i16* %534, i16* %164
  %538 = select i1 %533, i64 %535, i64 %536
  %539 = icmp ugt i64 %531, %329
  br i1 %539, label %542, label %540

540:                                              ; preds = %524, %542, %593
  %541 = phi i64 [ -1, %524 ], [ %475, %542 ], [ %600, %593 ]
  br label %326

542:                                              ; preds = %524
  %543 = icmp eq i64 %538, 0
  br i1 %543, label %540, label %544

544:                                              ; preds = %542
  %545 = getelementptr inbounds i16, i16* %530, i64 %475
  %546 = getelementptr inbounds i16, i16* %530, i64 %531
  %547 = shl nuw i64 %538, 1
  %548 = ashr exact i64 %547, 1
  %549 = ptrtoint i16* %546 to i64
  %550 = ptrtoint i16* %545 to i64
  %551 = sub i64 %549, %550
  %552 = ashr exact i64 %551, 1
  %553 = icmp slt i64 %552, %548
  br i1 %553, label %593, label %554

554:                                              ; preds = %544
  %555 = load i16, i16* %537, align 2
  br label %556

556:                                              ; preds = %585, %554
  %557 = phi i64 [ %552, %554 ], [ %589, %585 ]
  %558 = phi i16* [ %545, %554 ], [ %586, %585 ]
  %559 = sub nsw i64 %557, %548
  %560 = add nsw i64 %559, 1
  %561 = icmp eq i64 %560, 0
  br i1 %561, label %593, label %562

562:                                              ; preds = %556, %567
  %563 = phi i64 [ %569, %567 ], [ %560, %556 ]
  %564 = phi i16* [ %568, %567 ], [ %558, %556 ]
  %565 = load i16, i16* %564, align 2
  %566 = icmp eq i16 %565, %555
  br i1 %566, label %571, label %567

567:                                              ; preds = %562
  %568 = getelementptr inbounds i16, i16* %564, i64 1
  %569 = add i64 %563, -1
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %593, label %562

571:                                              ; preds = %562
  %572 = icmp eq i16* %564, null
  br i1 %572, label %593, label %573

573:                                              ; preds = %571, %580
  %574 = phi i16* [ %578, %580 ], [ %564, %571 ]
  %575 = phi i16* [ %581, %580 ], [ %537, %571 ]
  %576 = phi i64 [ %577, %580 ], [ %548, %571 ]
  %577 = add i64 %576, -1
  %578 = getelementptr inbounds i16, i16* %574, i64 1
  %579 = icmp eq i64 %577, 0
  br i1 %579, label %591, label %580

580:                                              ; preds = %573
  %581 = getelementptr inbounds i16, i16* %575, i64 1
  %582 = load i16, i16* %578, align 2
  %583 = load i16, i16* %581, align 2
  %584 = icmp eq i16 %583, %582
  br i1 %584, label %573, label %585

585:                                              ; preds = %580
  %586 = getelementptr inbounds i16, i16* %564, i64 1
  %587 = ptrtoint i16* %586 to i64
  %588 = sub i64 %549, %587
  %589 = ashr exact i64 %588, 1
  %590 = icmp slt i64 %589, %548
  br i1 %590, label %593, label %556

591:                                              ; preds = %573
  %592 = ptrtoint i16* %564 to i64
  br label %593

593:                                              ; preds = %585, %571, %556, %567, %591, %544
  %594 = phi i64 [ %592, %591 ], [ %549, %544 ], [ %549, %567 ], [ %549, %556 ], [ %549, %571 ], [ %549, %585 ]
  %595 = phi i16* [ %564, %591 ], [ %546, %544 ], [ %546, %567 ], [ %546, %556 ], [ %546, %571 ], [ %546, %585 ]
  %596 = icmp eq i16* %595, %546
  %597 = ptrtoint i16* %530 to i64
  %598 = sub i64 %594, %597
  %599 = ashr exact i64 %598, 1
  %600 = select i1 %596, i64 -1, i64 %599
  br label %540

601:                                              ; preds = %326
  %602 = load %"class.gfx::Range"*, %"class.gfx::Range"** %323, align 8
  %603 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %604 = icmp eq %"class.gfx::Range"* %602, %603
  br i1 %604, label %1084, label %605

605:                                              ; preds = %601
  %606 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %603, i64 -1, i32 0
  %607 = load i32, i32* %606, align 4
  %608 = uitofp i32 %607 to double
  %609 = icmp slt i8 %328, 0
  %610 = load i64, i64* %52, align 8
  %611 = zext i8 %328 to i64
  %612 = select i1 %609, i64 %610, i64 %611
  %613 = uitofp i64 %612 to double
  %614 = fdiv double %608, %613
  %615 = fsub double 1.000000e+00, %614
  %616 = fcmp ogt double %615, 1.000000e-02
  %617 = select i1 %616, double 1.000000e-02, double %615
  br label %1084

618:                                              ; preds = %248
  %619 = load i64, i64* %52, align 8
  %620 = zext i8 %250 to i64
  %621 = select i1 %251, i64 %619, i64 %620
  %622 = load i8, i8* %14, align 1
  %623 = icmp slt i8 %622, 0
  %624 = load i16*, i16** %162, align 8
  %625 = select i1 %623, i16* %624, i16* %164
  %626 = load i64, i64* %166, align 8
  %627 = zext i8 %622 to i64
  %628 = select i1 %623, i64 %626, i64 %627
  %629 = call zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16* %253, i64 %621, i16* %625, i64 %628, i32 0) #8
  br i1 %629, label %630, label %704

630:                                              ; preds = %618
  %631 = load i8, i8* %14, align 1
  %632 = icmp slt i8 %631, 0
  %633 = load i64, i64* %166, align 8
  %634 = zext i8 %631 to i64
  %635 = select i1 %632, i64 %633, i64 %634
  %636 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %637 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %638 = load %"class.gfx::Range"*, %"class.gfx::Range"** %637, align 8
  %639 = icmp ult %"class.gfx::Range"* %636, %638
  %640 = ptrtoint %"class.gfx::Range"* %638 to i64
  br i1 %639, label %641, label %647

641:                                              ; preds = %630
  %642 = trunc i64 %635 to i32
  %643 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %636, i64 0, i32 0
  store i32 0, i32* %643, align 4
  %644 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %636, i64 0, i32 1
  store i32 %642, i32* %644, align 4
  %645 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %636, i64 1
  %646 = ptrtoint %"class.gfx::Range"* %645 to i64
  store i64 %646, i64* %11, align 8
  br label %1076

647:                                              ; preds = %630
  %648 = ptrtoint %"class.gfx::Range"* %636 to i64
  %649 = load i64, i64* %8, align 8
  %650 = sub i64 %648, %649
  %651 = ashr exact i64 %650, 3
  %652 = add nsw i64 %651, 1
  %653 = icmp ugt i64 %652, 2305843009213693951
  br i1 %653, label %654, label %656

654:                                              ; preds = %647
  %655 = bitcast %"class.std::__1::vector.16"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %655) #9
  unreachable

656:                                              ; preds = %647
  %657 = bitcast %"class.gfx::Range"** %637 to i64*
  %658 = sub i64 %640, %649
  %659 = ashr exact i64 %658, 3
  %660 = icmp ult i64 %659, 1152921504606846975
  br i1 %660, label %661, label %669

661:                                              ; preds = %656
  %662 = ashr exact i64 %658, 2
  %663 = icmp ult i64 %662, %652
  %664 = select i1 %663, i64 %652, i64 %662
  %665 = icmp eq i64 %664, 0
  br i1 %665, label %674, label %666

666:                                              ; preds = %661
  %667 = icmp ugt i64 %664, 2305843009213693951
  br i1 %667, label %668, label %669

668:                                              ; preds = %666
  call void @abort() #9
  unreachable

669:                                              ; preds = %666, %656
  %670 = phi i64 [ %664, %666 ], [ 2305843009213693951, %656 ]
  %671 = shl i64 %670, 3
  %672 = call i8* @_Znwm(i64 %671) #10
  %673 = bitcast i8* %672 to %"class.gfx::Range"*
  br label %674

674:                                              ; preds = %669, %661
  %675 = phi i64 [ %670, %669 ], [ 0, %661 ]
  %676 = phi %"class.gfx::Range"* [ %673, %669 ], [ null, %661 ]
  %677 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %676, i64 %651
  %678 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %676, i64 %675
  %679 = ptrtoint %"class.gfx::Range"* %678 to i64
  %680 = trunc i64 %635 to i32
  %681 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %677, i64 0, i32 0
  store i32 0, i32* %681, align 4
  %682 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %676, i64 %651, i32 1
  store i32 %680, i32* %682, align 4
  %683 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %677, i64 1
  %684 = ptrtoint %"class.gfx::Range"* %683 to i64
  %685 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  %686 = load %"class.gfx::Range"*, %"class.gfx::Range"** %685, align 8
  %687 = load i64, i64* %11, align 8
  %688 = ptrtoint %"class.gfx::Range"* %686 to i64
  %689 = sub i64 %687, %688
  %690 = ashr exact i64 %689, 3
  %691 = sub nsw i64 0, %690
  %692 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %677, i64 %691
  %693 = ptrtoint %"class.gfx::Range"* %692 to i64
  %694 = icmp sgt i64 %689, 0
  br i1 %694, label %695, label %699

695:                                              ; preds = %674
  %696 = bitcast %"class.gfx::Range"* %692 to i8*
  %697 = bitcast %"class.gfx::Range"* %686 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %696, i8* align 4 %697, i64 %689, i1 false) #8
  %698 = load %"class.gfx::Range"*, %"class.gfx::Range"** %685, align 8
  br label %699

699:                                              ; preds = %695, %674
  %700 = phi %"class.gfx::Range"* [ %686, %674 ], [ %698, %695 ]
  store i64 %693, i64* %8, align 8
  store i64 %684, i64* %11, align 8
  store i64 %679, i64* %657, align 8
  %701 = icmp eq %"class.gfx::Range"* %700, null
  br i1 %701, label %1076, label %702

702:                                              ; preds = %699
  %703 = bitcast %"class.gfx::Range"* %700 to i8*
  call void @_ZdlPv(i8* %703) #10
  br label %1076

704:                                              ; preds = %618
  %705 = bitcast %"class.base::i18n::UTF16CharIterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %705) #8
  %706 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %4, i64 0, i32 0, i32 1
  %707 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %4, i64 0, i32 1
  %708 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %4, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %705, i8 -86, i64 40, i1 false) #8
  %709 = load i8, i8* %14, align 1
  %710 = icmp slt i8 %709, 0
  %711 = load i16*, i16** %162, align 8
  %712 = select i1 %710, i16* %711, i16* %164
  %713 = load i64, i64* %166, align 8
  %714 = zext i8 %709 to i64
  %715 = select i1 %710, i64 %713, i64 %714
  call void @_ZN4base4i18n17UTF16CharIteratorC1ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::i18n::UTF16CharIterator"* nonnull %4, i16* %712, i64 %715) #8
  %716 = bitcast %"class.base::i18n::UTF16CharIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %716) #8
  %717 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %5, i64 0, i32 0, i32 1
  %718 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %5, i64 0, i32 1
  %719 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %5, i64 0, i32 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %716, i8 -86, i64 40, i1 false) #8
  %720 = load i8, i8* %49, align 1
  %721 = icmp slt i8 %720, 0
  %722 = load i16*, i16** %158, align 8
  %723 = select i1 %721, i16* %722, i16* %160
  %724 = load i64, i64* %52, align 8
  %725 = zext i8 %720 to i64
  %726 = select i1 %721, i64 %724, i64 %725
  call void @_ZN4base4i18n17UTF16CharIteratorC1ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::i18n::UTF16CharIterator"* nonnull %5, i16* %723, i64 %726) #8
  %727 = bitcast %"class.std::__1::vector.23"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %727) #8
  %728 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %6, i64 0, i32 0, i32 0
  %729 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %6, i64 0, i32 0, i32 1
  %730 = getelementptr inbounds %"class.std::__1::vector.23", %"class.std::__1::vector.23"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %727, i8 0, i64 24, i1 false) #8
  %731 = load i64, i64* %707, align 8
  %732 = load i64, i64* %706, align 8
  %733 = icmp eq i64 %731, %732
  br i1 %733, label %919, label %734

734:                                              ; preds = %704
  %735 = bitcast %"struct.(anonymous namespace)::MatchRecord"** %729 to i64*
  %736 = bitcast %"class.std::__1::vector.23"* %6 to i64*
  %737 = bitcast %"struct.(anonymous namespace)::MatchRecord"** %730 to i64*
  br label %738

738:                                              ; preds = %837, %734
  %739 = phi i32 [ 0, %734 ], [ %842, %837 ]
  %740 = phi i32 [ 1, %734 ], [ %841, %837 ]
  %741 = phi i32 [ 0, %734 ], [ %840, %837 ]
  %742 = phi i32 [ -1, %734 ], [ %839, %837 ]
  %743 = load i64, i64* %718, align 8
  %744 = load i64, i64* %717, align 8
  %745 = icmp eq i64 %743, %744
  br i1 %745, label %847, label %746

746:                                              ; preds = %738
  %747 = load i32, i32* %708, align 4
  %748 = load i32, i32* %719, align 4
  %749 = icmp eq i32 %747, %748
  br i1 %749, label %750, label %767

750:                                              ; preds = %746
  %751 = icmp eq i32 %741, 0
  br i1 %751, label %752, label %762

752:                                              ; preds = %750
  %753 = trunc i64 %743 to i32
  %754 = icmp eq i64 %743, 0
  br i1 %754, label %759, label %755

755:                                              ; preds = %752
  %756 = call i32 @_ZNK4base4i18n17UTF16CharIterator17PreviousCodePointEv(%"class.base::i18n::UTF16CharIterator"* nonnull %5) #8
  %757 = call signext i8 @u_isUWhiteSpace_69(i32 %756) #8
  %758 = icmp ne i8 %757, 0
  br label %759

759:                                              ; preds = %755, %752
  %760 = phi i1 [ true, %752 ], [ %758, %755 ]
  %761 = zext i1 %760 to i32
  br label %762

762:                                              ; preds = %759, %750
  %763 = phi i32 [ %753, %759 ], [ %742, %750 ]
  %764 = phi i32 [ %761, %759 ], [ %740, %750 ]
  %765 = add nsw i32 %741, 1
  %766 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"* nonnull %5) #8
  br label %837

767:                                              ; preds = %746
  %768 = icmp sgt i32 %741, 0
  br i1 %768, label %769, label %835

769:                                              ; preds = %767
  %770 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %729, align 8
  %771 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %730, align 8
  %772 = icmp ult %"struct.(anonymous namespace)::MatchRecord"* %770, %771
  %773 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %771 to i64
  br i1 %772, label %774, label %785

774:                                              ; preds = %769
  %775 = trunc i64 %743 to i32
  %776 = icmp ne i32 %740, 0
  %777 = zext i1 %776 to i8
  %778 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %770, i64 0, i32 0, i32 0
  store i32 %742, i32* %778, align 4
  %779 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %770, i64 0, i32 0, i32 1
  store i32 %775, i32* %779, align 4
  %780 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %770, i64 0, i32 1
  store i32 0, i32* %780, align 4
  %781 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %770, i64 0, i32 2
  store i32 %739, i32* %781, align 4
  %782 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %770, i64 0, i32 3
  store i8 %777, i8* %782, align 4
  %783 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %770, i64 1
  %784 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %783 to i64
  store i64 %784, i64* %735, align 8
  br label %837

785:                                              ; preds = %769
  %786 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %770 to i64
  %787 = load i64, i64* %736, align 8
  %788 = sub i64 %786, %787
  %789 = sdiv exact i64 %788, 20
  %790 = add nsw i64 %789, 1
  %791 = icmp ugt i64 %790, 922337203685477580
  br i1 %791, label %792, label %794

792:                                              ; preds = %785
  %793 = bitcast %"class.std::__1::vector.23"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %793) #9
  unreachable

794:                                              ; preds = %785
  %795 = sub i64 %773, %787
  %796 = sdiv exact i64 %795, 20
  %797 = icmp ult i64 %796, 461168601842738790
  br i1 %797, label %798, label %803

798:                                              ; preds = %794
  %799 = shl nsw i64 %796, 1
  %800 = icmp ult i64 %799, %790
  %801 = select i1 %800, i64 %790, i64 %799
  %802 = icmp eq i64 %801, 0
  br i1 %802, label %808, label %803

803:                                              ; preds = %798, %794
  %804 = phi i64 [ %801, %798 ], [ 922337203685477580, %794 ]
  %805 = mul i64 %804, 20
  %806 = call i8* @_Znwm(i64 %805) #10
  %807 = bitcast i8* %806 to %"struct.(anonymous namespace)::MatchRecord"*
  br label %808

808:                                              ; preds = %803, %798
  %809 = phi i64 [ %804, %803 ], [ 0, %798 ]
  %810 = phi %"struct.(anonymous namespace)::MatchRecord"* [ %807, %803 ], [ null, %798 ]
  %811 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %810, i64 %789
  %812 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %810, i64 %809
  %813 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %812 to i64
  %814 = trunc i64 %743 to i32
  %815 = icmp ne i32 %740, 0
  %816 = zext i1 %815 to i8
  %817 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %811, i64 0, i32 0, i32 0
  store i32 %742, i32* %817, align 4
  %818 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %810, i64 %789, i32 0, i32 1
  store i32 %814, i32* %818, align 4
  %819 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %810, i64 %789, i32 1
  store i32 0, i32* %819, align 4
  %820 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %810, i64 %789, i32 2
  store i32 %739, i32* %820, align 4
  %821 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %810, i64 %789, i32 3
  store i8 %816, i8* %821, align 4
  %822 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %811, i64 1
  %823 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %822 to i64
  %824 = sdiv exact i64 %788, -20
  %825 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %811, i64 %824
  %826 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %825 to i64
  %827 = icmp sgt i64 %788, 0
  br i1 %827, label %828, label %831

828:                                              ; preds = %808
  %829 = bitcast %"struct.(anonymous namespace)::MatchRecord"* %825 to i8*
  %830 = inttoptr i64 %787 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %829, i8* align 4 %830, i64 %788, i1 false) #8
  br label %831

831:                                              ; preds = %828, %808
  store i64 %826, i64* %736, align 8
  store i64 %823, i64* %735, align 8
  store i64 %813, i64* %737, align 8
  %832 = icmp eq i64 %787, 0
  br i1 %832, label %837, label %833

833:                                              ; preds = %831
  %834 = inttoptr i64 %787 to i8*
  call void @_ZdlPv(i8* %834) #10
  br label %837

835:                                              ; preds = %767
  %836 = add nsw i32 %739, 1
  br label %837

837:                                              ; preds = %774, %831, %833, %835, %762
  %838 = phi %"class.base::i18n::UTF16CharIterator"* [ %4, %762 ], [ %5, %835 ], [ %5, %833 ], [ %5, %831 ], [ %5, %774 ]
  %839 = phi i32 [ %763, %762 ], [ %742, %835 ], [ -1, %833 ], [ -1, %831 ], [ -1, %774 ]
  %840 = phi i32 [ %765, %762 ], [ %741, %835 ], [ 0, %833 ], [ 0, %831 ], [ 0, %774 ]
  %841 = phi i32 [ %764, %762 ], [ %740, %835 ], [ %740, %833 ], [ %740, %831 ], [ %740, %774 ]
  %842 = phi i32 [ %739, %762 ], [ %836, %835 ], [ 1, %833 ], [ 1, %831 ], [ 1, %774 ]
  %843 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"* nonnull %838) #8
  %844 = load i64, i64* %707, align 8
  %845 = load i64, i64* %706, align 8
  %846 = icmp eq i64 %844, %845
  br i1 %846, label %850, label %738

847:                                              ; preds = %738
  %848 = load i64, i64* %8, align 8
  store i64 %848, i64* %11, align 8
  %849 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %728, align 8
  br label %1064

850:                                              ; preds = %837
  %851 = icmp sgt i32 %840, 0
  br i1 %851, label %852, label %919

852:                                              ; preds = %850
  %853 = load i64, i64* %718, align 8
  %854 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %729, align 8
  %855 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %730, align 8
  %856 = icmp ult %"struct.(anonymous namespace)::MatchRecord"* %854, %855
  %857 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %855 to i64
  br i1 %856, label %858, label %869

858:                                              ; preds = %852
  %859 = trunc i64 %853 to i32
  %860 = icmp ne i32 %841, 0
  %861 = zext i1 %860 to i8
  %862 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %854, i64 0, i32 0, i32 0
  store i32 %839, i32* %862, align 4
  %863 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %854, i64 0, i32 0, i32 1
  store i32 %859, i32* %863, align 4
  %864 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %854, i64 0, i32 1
  store i32 %840, i32* %864, align 4
  %865 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %854, i64 0, i32 2
  store i32 %842, i32* %865, align 4
  %866 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %854, i64 0, i32 3
  store i8 %861, i8* %866, align 4
  %867 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %854, i64 1
  %868 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %867 to i64
  store i64 %868, i64* %735, align 8
  br label %919

869:                                              ; preds = %852
  %870 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %854 to i64
  %871 = load i64, i64* %736, align 8
  %872 = sub i64 %870, %871
  %873 = sdiv exact i64 %872, 20
  %874 = add nsw i64 %873, 1
  %875 = icmp ugt i64 %874, 922337203685477580
  br i1 %875, label %876, label %878

876:                                              ; preds = %869
  %877 = bitcast %"class.std::__1::vector.23"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %877) #9
  unreachable

878:                                              ; preds = %869
  %879 = sub i64 %857, %871
  %880 = sdiv exact i64 %879, 20
  %881 = icmp ult i64 %880, 461168601842738790
  br i1 %881, label %882, label %887

882:                                              ; preds = %878
  %883 = shl nsw i64 %880, 1
  %884 = icmp ult i64 %883, %874
  %885 = select i1 %884, i64 %874, i64 %883
  %886 = icmp eq i64 %885, 0
  br i1 %886, label %892, label %887

887:                                              ; preds = %882, %878
  %888 = phi i64 [ %885, %882 ], [ 922337203685477580, %878 ]
  %889 = mul i64 %888, 20
  %890 = call i8* @_Znwm(i64 %889) #10
  %891 = bitcast i8* %890 to %"struct.(anonymous namespace)::MatchRecord"*
  br label %892

892:                                              ; preds = %887, %882
  %893 = phi i64 [ %888, %887 ], [ 0, %882 ]
  %894 = phi %"struct.(anonymous namespace)::MatchRecord"* [ %891, %887 ], [ null, %882 ]
  %895 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %894, i64 %873
  %896 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %894, i64 %893
  %897 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %896 to i64
  %898 = trunc i64 %853 to i32
  %899 = icmp ne i32 %841, 0
  %900 = zext i1 %899 to i8
  %901 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %895, i64 0, i32 0, i32 0
  store i32 %839, i32* %901, align 4
  %902 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %894, i64 %873, i32 0, i32 1
  store i32 %898, i32* %902, align 4
  %903 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %894, i64 %873, i32 1
  store i32 %840, i32* %903, align 4
  %904 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %894, i64 %873, i32 2
  store i32 %842, i32* %904, align 4
  %905 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %894, i64 %873, i32 3
  store i8 %900, i8* %905, align 4
  %906 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %895, i64 1
  %907 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %906 to i64
  %908 = sdiv exact i64 %872, -20
  %909 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %895, i64 %908
  %910 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %909 to i64
  %911 = icmp sgt i64 %872, 0
  br i1 %911, label %912, label %915

912:                                              ; preds = %892
  %913 = bitcast %"struct.(anonymous namespace)::MatchRecord"* %909 to i8*
  %914 = inttoptr i64 %871 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %913, i8* align 4 %914, i64 %872, i1 false) #8
  br label %915

915:                                              ; preds = %912, %892
  store i64 %910, i64* %736, align 8
  store i64 %907, i64* %735, align 8
  store i64 %897, i64* %737, align 8
  %916 = icmp eq i64 %871, 0
  br i1 %916, label %919, label %917

917:                                              ; preds = %915
  %918 = inttoptr i64 %871 to i8*
  call void @_ZdlPv(i8* %918) #10
  br label %919

919:                                              ; preds = %917, %915, %858, %850, %704
  %920 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %728, align 8
  %921 = load %"struct.(anonymous namespace)::MatchRecord"*, %"struct.(anonymous namespace)::MatchRecord"** %729, align 8
  %922 = icmp eq %"struct.(anonymous namespace)::MatchRecord"* %920, %921
  br i1 %922, label %927, label %923

923:                                              ; preds = %919
  %924 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %925 = bitcast %"class.gfx::Range"** %924 to i64*
  %926 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %2, i64 0, i32 0, i32 0
  br label %994

927:                                              ; preds = %1061, %919
  %928 = load i8, i8* %14, align 1
  %929 = icmp slt i8 %928, 0
  %930 = load i16*, i16** %162, align 8
  %931 = load i64, i64* %166, align 8
  %932 = zext i8 %928 to i64
  %933 = select i1 %929, i16* %930, i16* %164
  %934 = select i1 %929, i64 %931, i64 %932
  %935 = trunc i64 %934 to i32
  %936 = call i32 @u_countChar32_69(i16* %933, i32 %935) #8
  %937 = sext i32 %936 to i64
  %938 = load i8, i8* %49, align 1
  %939 = icmp slt i8 %938, 0
  %940 = load i16*, i16** %158, align 8
  %941 = load i64, i64* %52, align 8
  %942 = zext i8 %938 to i64
  %943 = select i1 %939, i16* %940, i16* %160
  %944 = select i1 %939, i64 %941, i64 %942
  %945 = trunc i64 %944 to i32
  %946 = call i32 @u_countChar32_69(i16* %943, i32 %945) #8
  %947 = sext i32 %946 to i64
  %948 = uitofp i64 %937 to double
  %949 = fdiv double 1.000000e+00, %948
  %950 = uitofp i64 %947 to double
  %951 = fdiv double 1.000000e+00, %950
  %952 = bitcast %"struct.(anonymous namespace)::MatchRecord"** %729 to i64*
  %953 = load i64, i64* %952, align 8
  %954 = bitcast %"class.std::__1::vector.23"* %6 to i64*
  %955 = load i64, i64* %954, align 8
  %956 = icmp eq i64 %953, %955
  %957 = inttoptr i64 %955 to %"struct.(anonymous namespace)::MatchRecord"*
  br i1 %956, label %1064, label %958

958:                                              ; preds = %927
  %959 = fmul double %949, 5.000000e-01
  %960 = sub i64 %953, %955
  %961 = sdiv exact i64 %960, 20
  br label %962

962:                                              ; preds = %982, %958
  %963 = phi double [ 0.000000e+00, %958 ], [ %989, %982 ]
  %964 = phi i64 [ 0, %958 ], [ %990, %982 ]
  %965 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %957, i64 %964, i32 1
  %966 = load i32, i32* %965, align 4
  %967 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %957, i64 %964, i32 3
  %968 = load i8, i8* %967, align 4
  %969 = and i8 %968, 1
  %970 = icmp eq i8 %969, 0
  br i1 %970, label %975, label %971

971:                                              ; preds = %962
  %972 = icmp eq i64 %964, 0
  %973 = select i1 %972, double 1.000000e+00, double 8.000000e-01
  %974 = fmul double %949, %973
  br label %982

975:                                              ; preds = %962
  %976 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %957, i64 %964, i32 2
  %977 = load i32, i32* %976, align 4
  %978 = sitofp i32 %977 to double
  %979 = fmul double %951, %978
  %980 = fsub double 1.000000e+00, %979
  %981 = fmul double %959, %980
  br label %982

982:                                              ; preds = %975, %971
  %983 = phi double [ %974, %971 ], [ %981, %975 ]
  %984 = fadd double %963, %983
  %985 = add nsw i32 %966, -1
  %986 = sitofp i32 %985 to double
  %987 = fmul double %949, %986
  %988 = fmul double %987, 5.000000e-01
  %989 = fadd double %988, %984
  %990 = add nuw i64 %964, 1
  %991 = icmp ult i64 %990, %961
  br i1 %991, label %962, label %992

992:                                              ; preds = %982
  %993 = fmul double %989, 0x3FEFAE147AE147AE
  br label %1064

994:                                              ; preds = %1061, %923
  %995 = phi %"struct.(anonymous namespace)::MatchRecord"* [ %920, %923 ], [ %1062, %1061 ]
  %996 = load %"class.gfx::Range"*, %"class.gfx::Range"** %10, align 8
  %997 = load %"class.gfx::Range"*, %"class.gfx::Range"** %924, align 8
  %998 = icmp eq %"class.gfx::Range"* %996, %997
  %999 = ptrtoint %"class.gfx::Range"* %997 to i64
  br i1 %998, label %1006, label %1000

1000:                                             ; preds = %994
  %1001 = bitcast %"struct.(anonymous namespace)::MatchRecord"* %995 to i64*
  %1002 = bitcast %"class.gfx::Range"* %996 to i64*
  %1003 = load i64, i64* %1001, align 4
  store i64 %1003, i64* %1002, align 4
  %1004 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %996, i64 1
  %1005 = ptrtoint %"class.gfx::Range"* %1004 to i64
  store i64 %1005, i64* %11, align 8
  br label %1061

1006:                                             ; preds = %994
  %1007 = ptrtoint %"class.gfx::Range"* %996 to i64
  %1008 = load i64, i64* %8, align 8
  %1009 = sub i64 %1007, %1008
  %1010 = ashr exact i64 %1009, 3
  %1011 = add nsw i64 %1010, 1
  %1012 = icmp ugt i64 %1011, 2305843009213693951
  br i1 %1012, label %1013, label %1015

1013:                                             ; preds = %1006
  %1014 = bitcast %"class.std::__1::vector.16"* %2 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1014) #9
  unreachable

1015:                                             ; preds = %1006
  %1016 = sub i64 %999, %1008
  %1017 = ashr exact i64 %1016, 3
  %1018 = icmp ult i64 %1017, 1152921504606846975
  br i1 %1018, label %1019, label %1027

1019:                                             ; preds = %1015
  %1020 = ashr exact i64 %1016, 2
  %1021 = icmp ult i64 %1020, %1011
  %1022 = select i1 %1021, i64 %1011, i64 %1020
  %1023 = icmp eq i64 %1022, 0
  br i1 %1023, label %1032, label %1024

1024:                                             ; preds = %1019
  %1025 = icmp ugt i64 %1022, 2305843009213693951
  br i1 %1025, label %1026, label %1027

1026:                                             ; preds = %1024
  call void @abort() #9
  unreachable

1027:                                             ; preds = %1024, %1015
  %1028 = phi i64 [ %1022, %1024 ], [ 2305843009213693951, %1015 ]
  %1029 = shl i64 %1028, 3
  %1030 = call i8* @_Znwm(i64 %1029) #10
  %1031 = bitcast i8* %1030 to %"class.gfx::Range"*
  br label %1032

1032:                                             ; preds = %1027, %1019
  %1033 = phi i64 [ %1028, %1027 ], [ 0, %1019 ]
  %1034 = phi %"class.gfx::Range"* [ %1031, %1027 ], [ null, %1019 ]
  %1035 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %1034, i64 %1010
  %1036 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %1034, i64 %1033
  %1037 = ptrtoint %"class.gfx::Range"* %1036 to i64
  %1038 = bitcast %"struct.(anonymous namespace)::MatchRecord"* %995 to i64*
  %1039 = bitcast %"class.gfx::Range"* %1035 to i64*
  %1040 = load i64, i64* %1038, align 4
  store i64 %1040, i64* %1039, align 4
  %1041 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %1035, i64 1
  %1042 = ptrtoint %"class.gfx::Range"* %1041 to i64
  %1043 = load %"class.gfx::Range"*, %"class.gfx::Range"** %926, align 8
  %1044 = load i64, i64* %11, align 8
  %1045 = ptrtoint %"class.gfx::Range"* %1043 to i64
  %1046 = sub i64 %1044, %1045
  %1047 = ashr exact i64 %1046, 3
  %1048 = sub nsw i64 0, %1047
  %1049 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %1035, i64 %1048
  %1050 = ptrtoint %"class.gfx::Range"* %1049 to i64
  %1051 = icmp sgt i64 %1046, 0
  br i1 %1051, label %1052, label %1056

1052:                                             ; preds = %1032
  %1053 = bitcast %"class.gfx::Range"* %1049 to i8*
  %1054 = bitcast %"class.gfx::Range"* %1043 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1053, i8* align 4 %1054, i64 %1046, i1 false) #8
  %1055 = load %"class.gfx::Range"*, %"class.gfx::Range"** %926, align 8
  br label %1056

1056:                                             ; preds = %1052, %1032
  %1057 = phi %"class.gfx::Range"* [ %1043, %1032 ], [ %1055, %1052 ]
  store i64 %1050, i64* %8, align 8
  store i64 %1042, i64* %11, align 8
  store i64 %1037, i64* %925, align 8
  %1058 = icmp eq %"class.gfx::Range"* %1057, null
  br i1 %1058, label %1061, label %1059

1059:                                             ; preds = %1056
  %1060 = bitcast %"class.gfx::Range"* %1057 to i8*
  call void @_ZdlPv(i8* %1060) #10
  br label %1061

1061:                                             ; preds = %1059, %1056, %1000
  %1062 = getelementptr inbounds %"struct.(anonymous namespace)::MatchRecord", %"struct.(anonymous namespace)::MatchRecord"* %995, i64 1
  %1063 = icmp eq %"struct.(anonymous namespace)::MatchRecord"* %1062, %921
  br i1 %1063, label %927, label %994

1064:                                             ; preds = %992, %927, %847
  %1065 = phi %"struct.(anonymous namespace)::MatchRecord"* [ %849, %847 ], [ %957, %992 ], [ %957, %927 ]
  %1066 = phi double [ 0.000000e+00, %847 ], [ %993, %992 ], [ 0.000000e+00, %927 ]
  %1067 = icmp eq %"struct.(anonymous namespace)::MatchRecord"* %1065, null
  br i1 %1067, label %1072, label %1068

1068:                                             ; preds = %1064
  %1069 = ptrtoint %"struct.(anonymous namespace)::MatchRecord"* %1065 to i64
  %1070 = bitcast %"struct.(anonymous namespace)::MatchRecord"** %729 to i64*
  store i64 %1069, i64* %1070, align 8
  %1071 = bitcast %"struct.(anonymous namespace)::MatchRecord"* %1065 to i8*
  call void @_ZdlPv(i8* %1071) #10
  br label %1072

1072:                                             ; preds = %1064, %1068
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %727) #8
  call void @_ZN4base4i18n17UTF16CharIteratorD1Ev(%"class.base::i18n::UTF16CharIterator"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %716) #8
  call void @_ZN4base4i18n17UTF16CharIteratorD1Ev(%"class.base::i18n::UTF16CharIterator"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %705) #8
  %1073 = fcmp oeq double %1066, 0.000000e+00
  br i1 %1073, label %1074, label %1076

1074:                                             ; preds = %1072
  %1075 = load i64, i64* %8, align 8
  store i64 %1075, i64* %11, align 8
  br label %1084

1076:                                             ; preds = %702, %699, %641, %1072
  %1077 = phi double [ %1066, %1072 ], [ 0x3FEFAE147AE147AE, %641 ], [ 0x3FEFAE147AE147AE, %699 ], [ 0x3FEFAE147AE147AE, %702 ]
  %1078 = icmp ugt i64 %55, 1024
  %1079 = icmp ugt i64 %47, 16
  %1080 = or i1 %1079, %1078
  br i1 %1080, label %1084, label %1081

1081:                                             ; preds = %1076
  %1082 = load i64, i64* %8, align 8
  store i64 %1082, i64* %11, align 8
  %1083 = call double @_ZN9commander11FuzzyFinder11MatrixMatchERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_PNS1_6vectorIN3gfx5RangeENS5_ISC_EEEE(%"class.commander::FuzzyFinder"* %0, %"class.std::__1::basic_string"* dereferenceable(24) %12, %"class.std::__1::basic_string"* nonnull dereferenceable(24) %7, %"class.std::__1::vector.16"* %2)
  br label %1084

1084:                                             ; preds = %76, %605, %601, %392, %389, %335, %415, %464, %467, %246, %243, %185, %155, %152, %94, %59, %1074, %1081, %1076, %46
  %1085 = phi double [ 0.000000e+00, %46 ], [ 0.000000e+00, %1074 ], [ %1083, %1081 ], [ %1077, %1076 ], [ 0.000000e+00, %59 ], [ 1.000000e+00, %94 ], [ 1.000000e+00, %152 ], [ 1.000000e+00, %155 ], [ 0x3FEFAE147AE147AE, %185 ], [ 0x3FEFAE147AE147AE, %243 ], [ 0x3FEFAE147AE147AE, %246 ], [ %617, %605 ], [ 0.000000e+00, %601 ], [ 0x3FEFAE147AE147AE, %392 ], [ 0x3FEFAE147AE147AE, %389 ], [ 0x3FEFAE147AE147AE, %335 ], [ 0x3FEE666666666666, %415 ], [ 0x3FEE666666666666, %464 ], [ 0x3FEE666666666666, %467 ], [ 0.000000e+00, %76 ]
  %1086 = load i8, i8* %49, align 1
  %1087 = icmp slt i8 %1086, 0
  br i1 %1087, label %1088, label %1091

1088:                                             ; preds = %1084
  %1089 = bitcast %"class.std::__1::basic_string"* %7 to i8**
  %1090 = load i8*, i8** %1089, align 8
  call void @_ZdlPv(i8* %1090) #10
  br label %1091

1091:                                             ; preds = %1084, %1088
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #8
  br label %1092

1092:                                             ; preds = %22, %1091
  %1093 = phi double [ %1085, %1091 ], [ 0.000000e+00, %22 ]
  ret double %1093
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare zeroext i1 @_ZN4base10StartsWithENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES4_NS_11CompareCaseE(i16*, i64, i16*, i64, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN4base19IsUnicodeWhitespaceEw(i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN9commander11FuzzyFinder11MatrixMatchERKNSt3__112basic_stringIDsNS1_11char_traitsIDsEENS1_9allocatorIDsEEEES9_PNS1_6vectorIN3gfx5RangeENS5_ISC_EEEE(%"class.commander::FuzzyFinder"*, %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::basic_string"* dereferenceable(24), %"class.std::__1::vector.16"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.std::__1::vector.12", align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca %"class.base::i18n::UTF16CharIterator", align 8
  %11 = alloca %"class.base::i18n::UTF16CharIterator", align 8
  %12 = alloca %"class.std::__1::vector", align 8
  %13 = alloca %"class.std::__1::vector.12", align 8
  %14 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %15 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %14, i64 0, i32 1, i32 1
  %16 = load i8, i8* %15, align 1
  %17 = icmp slt i8 %16, 0
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i16*, i16** %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::basic_string"* %1 to i16*
  %23 = zext i8 %16 to i64
  %24 = select i1 %17, i16* %19, i16* %22
  %25 = select i1 %17, i64 %21, i64 %23
  %26 = trunc i64 %25 to i32
  %27 = tail call i32 @u_countChar32_69(i16* %24, i32 %26) #8
  %28 = sext i32 %27 to i64
  %29 = bitcast %"class.std::__1::basic_string"* %2 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %29, i64 0, i32 1, i32 1
  %31 = load i8, i8* %30, align 1
  %32 = icmp slt i8 %31, 0
  %33 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load i16*, i16** %33, align 8
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = bitcast %"class.std::__1::basic_string"* %2 to i16*
  %38 = zext i8 %31 to i64
  %39 = select i1 %32, i16* %34, i16* %37
  %40 = select i1 %32, i64 %36, i64 %38
  %41 = trunc i64 %40 to i32
  %42 = tail call i32 @u_countChar32_69(i16* %39, i32 %41) #8
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 1
  %45 = mul nsw i64 %43, %28
  %46 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #8
  store i32 0, i32* %6, align 4
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi(%"class.std::__1::vector"* %44, i64 %45, i32* nonnull dereferenceable(4) %6)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %46) #8
  %47 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 2
  %48 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %48) #8
  store i32 0, i32* %7, align 4
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi(%"class.std::__1::vector"* %47, i64 %45, i32* nonnull dereferenceable(4) %7)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %48) #8
  %49 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 3
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %8) #8
  store i8 0, i8* %8, align 1
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6assignEmRKb(%"class.std::__1::vector.6"* %49, i64 %43, i8* nonnull dereferenceable(1) %8)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %8) #8
  %50 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 4
  %51 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #8
  store i64 0, i64* %9, align 8
  call void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignEmRKm(%"class.std::__1::vector.12"* %50, i64 %43, i64* nonnull dereferenceable(8) %9)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #8
  %52 = bitcast %"class.base::i18n::UTF16CharIterator"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %52) #8
  %53 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %10, i64 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %10, i64 0, i32 1
  %55 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %10, i64 0, i32 3
  %56 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %10, i64 0, i32 4
  %57 = bitcast %"class.base::i18n::UTF16CharIterator"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 40, i1 false)
  %58 = load i8, i8* %15, align 1
  %59 = icmp slt i8 %58, 0
  %60 = load i16*, i16** %18, align 8
  %61 = select i1 %59, i16* %60, i16* %22
  %62 = load i64, i64* %20, align 8
  %63 = zext i8 %58 to i64
  %64 = select i1 %59, i64 %62, i64 %63
  call void @_ZN4base4i18n17UTF16CharIteratorC1ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::i18n::UTF16CharIterator"* nonnull %10, i16* %61, i64 %64) #8
  %65 = bitcast %"class.base::i18n::UTF16CharIterator"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %65) #8
  %66 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %11, i64 0, i32 0, i32 1
  %67 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %11, i64 0, i32 1
  %68 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %11, i64 0, i32 3
  %69 = getelementptr inbounds %"class.base::i18n::UTF16CharIterator", %"class.base::i18n::UTF16CharIterator"* %11, i64 0, i32 4
  %70 = bitcast %"class.base::i18n::UTF16CharIterator"* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %70, i8 -86, i64 40, i1 false)
  %71 = load i8, i8* %30, align 1
  %72 = icmp slt i8 %71, 0
  %73 = load i16*, i16** %33, align 8
  %74 = select i1 %72, i16* %73, i16* %37
  %75 = load i64, i64* %35, align 8
  %76 = zext i8 %71 to i64
  %77 = select i1 %72, i64 %75, i64 %76
  call void @_ZN4base4i18n17UTF16CharIteratorC1ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::i18n::UTF16CharIterator"* nonnull %11, i16* %74, i64 %77) #8
  %78 = load i32, i32* %56, align 4
  %79 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %49, i64 0, i32 0
  %80 = load i64*, i64** %79, align 8
  %81 = load i64, i64* %80, align 8
  %82 = or i64 %81, 1
  store i64 %82, i64* %80, align 8
  %83 = load i64, i64* %67, align 8
  %84 = load i64, i64* %66, align 8
  %85 = icmp eq i64 %83, %84
  br i1 %85, label %91, label %86

86:                                               ; preds = %4
  %87 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %50, i64 0, i32 0, i32 0
  %88 = add nsw i64 %43, -1
  %89 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %44, i64 0, i32 0, i32 0
  %90 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %47, i64 0, i32 0, i32 0
  br label %94

91:                                               ; preds = %152, %4
  %92 = phi i64 [ %83, %4 ], [ %158, %152 ]
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %165, label %161

94:                                               ; preds = %86, %152
  %95 = phi i64 [ %83, %86 ], [ %158, %152 ]
  %96 = phi i1 [ false, %86 ], [ %155, %152 ]
  %97 = load i32, i32* %69, align 4
  %98 = load i32, i32* %68, align 8
  %99 = sext i32 %98 to i64
  %100 = load i64*, i64** %87, align 8
  %101 = getelementptr inbounds i64, i64* %100, i64 %99
  store i64 %95, i64* %101, align 8
  %102 = icmp ugt i64 %88, %99
  br i1 %102, label %103, label %121

103:                                              ; preds = %94
  %104 = call signext i8 @u_isUWhiteSpace_69(i32 %97) #8
  %105 = icmp eq i8 %104, 0
  %106 = add nsw i64 %99, 1
  %107 = load i64*, i64** %79, align 8
  %108 = lshr i64 %106, 6
  %109 = getelementptr inbounds i64, i64* %107, i64 %108
  %110 = and i64 %106, 63
  %111 = shl i64 1, %110
  br i1 %105, label %115, label %112

112:                                              ; preds = %103
  %113 = load i64, i64* %109, align 8
  %114 = or i64 %113, %111
  br label %119

115:                                              ; preds = %103
  %116 = xor i64 %111, -1
  %117 = load i64, i64* %109, align 8
  %118 = and i64 %117, %116
  br label %119

119:                                              ; preds = %112, %115
  %120 = phi i64 [ %118, %115 ], [ %114, %112 ]
  store i64 %120, i64* %109, align 8
  br label %121

121:                                              ; preds = %119, %94
  %122 = icmp eq i32 %78, %97
  br i1 %122, label %123, label %136

123:                                              ; preds = %121
  %124 = and i64 %99, 63
  %125 = shl i64 1, %124
  %126 = load i64*, i64** %79, align 8
  %127 = lshr i64 %99, 6
  %128 = getelementptr inbounds i64, i64* %126, i64 %127
  %129 = load i64, i64* %128, align 8
  %130 = and i64 %129, %125
  %131 = icmp eq i64 %130, 0
  %132 = load i32*, i32** %90, align 8
  %133 = getelementptr inbounds i32, i32* %132, i64 %99
  store i32 1, i32* %133, align 4
  %134 = select i1 %131, i32 16, i32 32
  %135 = load i32*, i32** %89, align 8
  br label %152

136:                                              ; preds = %121
  %137 = select i1 %96, i32 1, i32 3
  %138 = icmp eq i32 %98, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %136
  %140 = load i32*, i32** %89, align 8
  br label %146

141:                                              ; preds = %136
  %142 = add nsw i64 %99, -1
  %143 = load i32*, i32** %89, align 8
  %144 = getelementptr inbounds i32, i32* %143, i64 %142
  %145 = load i32, i32* %144, align 4
  br label %146

146:                                              ; preds = %139, %141
  %147 = phi i32* [ %143, %141 ], [ %140, %139 ]
  %148 = phi i32 [ %145, %141 ], [ 0, %139 ]
  %149 = sub nsw i32 %148, %137
  %150 = icmp sgt i32 %149, 0
  %151 = select i1 %150, i32 %149, i32 0
  br label %152

152:                                              ; preds = %146, %123
  %153 = phi i32* [ %147, %146 ], [ %135, %123 ]
  %154 = phi i32 [ %151, %146 ], [ %134, %123 ]
  %155 = phi i1 [ true, %146 ], [ false, %123 ]
  %156 = getelementptr inbounds i32, i32* %153, i64 %99
  store i32 %154, i32* %156, align 4
  %157 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"* nonnull %11) #8
  %158 = load i64, i64* %67, align 8
  %159 = load i64, i64* %66, align 8
  %160 = icmp eq i64 %158, %159
  br i1 %160, label %91, label %94

161:                                              ; preds = %91, %161
  %162 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator6RewindEv(%"class.base::i18n::UTF16CharIterator"* nonnull %11) #8
  %163 = load i64, i64* %67, align 8
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %165, label %161

165:                                              ; preds = %161, %91
  %166 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"* nonnull %10) #8
  %167 = load i64, i64* %54, align 8
  %168 = load i64, i64* %53, align 8
  %169 = icmp eq i64 %167, %168
  br i1 %169, label %269, label %170

170:                                              ; preds = %165
  %171 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %44, i64 0, i32 0, i32 0
  %172 = xor i64 %43, -1
  %173 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %47, i64 0, i32 0, i32 0
  br label %174

174:                                              ; preds = %170, %264
  %175 = load i64, i64* %67, align 8
  %176 = load i64, i64* %66, align 8
  %177 = icmp eq i64 %175, %176
  br i1 %177, label %178, label %181

178:                                              ; preds = %254, %174
  %179 = phi i64 [ %175, %174 ], [ %257, %254 ]
  %180 = icmp eq i64 %179, 0
  br i1 %180, label %264, label %260

181:                                              ; preds = %174, %254
  %182 = phi i8 [ %255, %254 ], [ 0, %174 ]
  %183 = load i32, i32* %55, align 8
  %184 = sext i32 %183 to i64
  %185 = load i32, i32* %68, align 8
  %186 = sext i32 %185 to i64
  %187 = mul nsw i64 %184, %43
  %188 = add i64 %187, %186
  %189 = icmp ult i32 %185, %183
  br i1 %189, label %254, label %190

190:                                              ; preds = %181
  %191 = icmp eq i32 %185, 0
  br i1 %191, label %197, label %192

192:                                              ; preds = %190
  %193 = add i64 %188, -1
  %194 = load i32*, i32** %171, align 8
  %195 = getelementptr inbounds i32, i32* %194, i64 %193
  %196 = load i32, i32* %195, align 4
  br label %197

197:                                              ; preds = %190, %192
  %198 = phi i32 [ %196, %192 ], [ 0, %190 ]
  %199 = and i8 %182, 1
  %200 = icmp eq i8 %199, 0
  %201 = select i1 %200, i32 3, i32 1
  %202 = sub nsw i32 %198, %201
  %203 = load i32, i32* %56, align 4
  %204 = load i32, i32* %69, align 4
  %205 = icmp eq i32 %203, %204
  br i1 %205, label %206, label %240

206:                                              ; preds = %197
  %207 = add i64 %188, %172
  %208 = load i32*, i32** %171, align 8
  %209 = getelementptr inbounds i32, i32* %208, i64 %207
  %210 = load i32, i32* %209, align 4
  %211 = add nsw i32 %210, 16
  %212 = load i64*, i64** %79, align 8
  %213 = lshr i64 %184, 6
  %214 = getelementptr inbounds i64, i64* %212, i64 %213
  %215 = and i64 %184, 63
  %216 = shl i64 1, %215
  %217 = load i64, i64* %214, align 8
  %218 = and i64 %217, %216
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %222, label %220

220:                                              ; preds = %206
  %221 = add nsw i32 %210, 24
  br label %240

222:                                              ; preds = %206
  %223 = load i32*, i32** %173, align 8
  %224 = getelementptr inbounds i32, i32* %223, i64 %188
  %225 = load i32, i32* %224, align 4
  %226 = add nsw i32 %225, 1
  %227 = icmp sgt i32 %225, 0
  br i1 %227, label %228, label %240

228:                                              ; preds = %222
  %229 = sext i32 %226 to i64
  %230 = sub nsw i64 %186, %229
  %231 = lshr i64 %230, 6
  %232 = getelementptr inbounds i64, i64* %212, i64 %231
  %233 = and i64 %230, 63
  %234 = shl i64 1, %233
  %235 = load i64, i64* %232, align 8
  %236 = and i64 %235, %234
  %237 = icmp eq i64 %236, 0
  %238 = select i1 %237, i32 4, i32 8
  %239 = add nsw i32 %238, %211
  br label %240

240:                                              ; preds = %220, %228, %222, %197
  %241 = phi i32 [ %221, %220 ], [ %239, %228 ], [ %211, %222 ], [ 0, %197 ]
  %242 = phi i32 [ 1, %220 ], [ %226, %228 ], [ %226, %222 ], [ 0, %197 ]
  %243 = icmp sgt i32 %202, %241
  %244 = zext i1 %243 to i8
  %245 = select i1 %243, i32 0, i32 %242
  %246 = load i32*, i32** %173, align 8
  %247 = getelementptr inbounds i32, i32* %246, i64 %188
  store i32 %245, i32* %247, align 4
  %248 = icmp slt i32 %202, %241
  %249 = select i1 %248, i32 %241, i32 %202
  %250 = icmp sgt i32 %249, 0
  %251 = select i1 %250, i32 %249, i32 0
  %252 = load i32*, i32** %171, align 8
  %253 = getelementptr inbounds i32, i32* %252, i64 %188
  store i32 %251, i32* %253, align 4
  br label %254

254:                                              ; preds = %181, %240
  %255 = phi i8 [ %244, %240 ], [ %182, %181 ]
  %256 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"* nonnull %11) #8
  %257 = load i64, i64* %67, align 8
  %258 = load i64, i64* %66, align 8
  %259 = icmp eq i64 %257, %258
  br i1 %259, label %178, label %181

260:                                              ; preds = %178, %260
  %261 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator6RewindEv(%"class.base::i18n::UTF16CharIterator"* nonnull %11) #8
  %262 = load i64, i64* %67, align 8
  %263 = icmp eq i64 %262, 0
  br i1 %263, label %264, label %260

264:                                              ; preds = %260, %178
  %265 = call zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"* nonnull %10) #8
  %266 = load i64, i64* %54, align 8
  %267 = load i64, i64* %53, align 8
  %268 = icmp eq i64 %266, %267
  br i1 %268, label %269, label %174

269:                                              ; preds = %264, %165
  %270 = bitcast %"class.std::__1::vector"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %270, i8 0, i64 24, i1 false) #8
  %271 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 1, i32 0, i32 1
  %272 = bitcast i32** %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = bitcast %"class.std::__1::vector"* %44 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = sub i64 %273, %275
  %277 = ashr exact i64 %276, 2
  %278 = icmp eq i64 %276, 0
  br i1 %278, label %301, label %279

279:                                              ; preds = %269
  %280 = icmp ugt i64 %277, 4611686018427387903
  br i1 %280, label %281, label %283

281:                                              ; preds = %279
  %282 = bitcast %"class.std::__1::vector"* %12 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %282) #9
  unreachable

283:                                              ; preds = %279
  %284 = call i8* @_Znwm(i64 %276) #10
  %285 = bitcast i8* %284 to i32*
  %286 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %287 = bitcast i32** %286 to i8**
  store i8* %284, i8** %287, align 8
  %288 = bitcast %"class.std::__1::vector"* %12 to i8**
  store i8* %284, i8** %288, align 8
  %289 = getelementptr inbounds i32, i32* %285, i64 %277
  %290 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 2, i32 0, i32 0
  store i32* %289, i32** %290, align 8
  %291 = bitcast i32** %286 to i64*
  %292 = ptrtoint i8* %284 to i64
  %293 = icmp sgt i64 %276, 0
  br i1 %293, label %294, label %299

294:                                              ; preds = %283
  %295 = lshr exact i64 %276, 2
  %296 = inttoptr i64 %275 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %284, i8* align 4 %296, i64 %276, i1 false) #8
  %297 = getelementptr inbounds i32, i32* %285, i64 %295
  %298 = ptrtoint i32* %297 to i64
  br label %299

299:                                              ; preds = %294, %283
  %300 = phi i64 [ %298, %294 ], [ %292, %283 ]
  store i64 %300, i64* %291, align 8
  br label %301

301:                                              ; preds = %269, %299
  %302 = phi i32* [ null, %269 ], [ %285, %299 ]
  %303 = bitcast %"class.std::__1::vector.12"* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %303, i8 0, i64 24, i1 false) #8
  %304 = getelementptr inbounds %"class.commander::FuzzyFinder", %"class.commander::FuzzyFinder"* %0, i64 0, i32 4, i32 0, i32 1
  %305 = bitcast i64** %304 to i64*
  %306 = load i64, i64* %305, align 8
  %307 = bitcast %"class.std::__1::vector.12"* %50 to i64*
  %308 = load i64, i64* %307, align 8
  %309 = sub i64 %306, %308
  %310 = ashr exact i64 %309, 3
  %311 = icmp eq i64 %309, 0
  br i1 %311, label %334, label %312

312:                                              ; preds = %301
  %313 = icmp ugt i64 %310, 2305843009213693951
  br i1 %313, label %314, label %316

314:                                              ; preds = %312
  %315 = bitcast %"class.std::__1::vector.12"* %13 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %315) #9
  unreachable

316:                                              ; preds = %312
  %317 = call i8* @_Znwm(i64 %309) #10
  %318 = bitcast i8* %317 to i64*
  %319 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %13, i64 0, i32 0, i32 1
  %320 = bitcast i64** %319 to i8**
  store i8* %317, i8** %320, align 8
  %321 = bitcast %"class.std::__1::vector.12"* %13 to i8**
  store i8* %317, i8** %321, align 8
  %322 = getelementptr inbounds i64, i64* %318, i64 %310
  %323 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %13, i64 0, i32 0, i32 2, i32 0, i32 0
  store i64* %322, i64** %323, align 8
  %324 = bitcast i64** %319 to i64*
  %325 = ptrtoint i8* %317 to i64
  %326 = icmp sgt i64 %309, 0
  br i1 %326, label %327, label %332

327:                                              ; preds = %316
  %328 = lshr exact i64 %309, 3
  %329 = inttoptr i64 %308 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %317, i8* align 8 %329, i64 %309, i1 false) #8
  %330 = getelementptr inbounds i64, i64* %318, i64 %328
  %331 = ptrtoint i64* %330 to i64
  br label %332

332:                                              ; preds = %327, %316
  %333 = phi i64 [ %331, %327 ], [ %325, %316 ]
  store i64 %333, i64* %324, align 8
  br label %334

334:                                              ; preds = %301, %332
  %335 = phi i64* [ null, %301 ], [ %318, %332 ]
  %336 = icmp eq i32 %42, 0
  %337 = add nsw i64 %28, -1
  br i1 %336, label %370, label %338

338:                                              ; preds = %334
  %339 = mul i64 %337, %43
  %340 = add nsw i64 %43, -1
  %341 = and i64 %43, 3
  %342 = icmp ult i64 %340, 3
  br i1 %342, label %345, label %343

343:                                              ; preds = %338
  %344 = sub nsw i64 %43, %341
  br label %394

345:                                              ; preds = %394, %338
  %346 = phi i32 [ undef, %338 ], [ %424, %394 ]
  %347 = phi i64 [ undef, %338 ], [ %425, %394 ]
  %348 = phi i64 [ 0, %338 ], [ %425, %394 ]
  %349 = phi i32 [ 0, %338 ], [ %424, %394 ]
  %350 = phi i64 [ 0, %338 ], [ %426, %394 ]
  %351 = icmp eq i64 %341, 0
  br i1 %351, label %366, label %352

352:                                              ; preds = %345, %352
  %353 = phi i64 [ %362, %352 ], [ %348, %345 ]
  %354 = phi i32 [ %361, %352 ], [ %349, %345 ]
  %355 = phi i64 [ %363, %352 ], [ %350, %345 ]
  %356 = phi i64 [ %364, %352 ], [ %341, %345 ]
  %357 = add i64 %355, %339
  %358 = getelementptr inbounds i32, i32* %302, i64 %357
  %359 = load i32, i32* %358, align 4
  %360 = icmp sgt i32 %359, %354
  %361 = select i1 %360, i32 %359, i32 %354
  %362 = select i1 %360, i64 %355, i64 %353
  %363 = add nuw i64 %355, 1
  %364 = add i64 %356, -1
  %365 = icmp eq i64 %364, 0
  br i1 %365, label %366, label %352, !llvm.loop !2

366:                                              ; preds = %352, %345
  %367 = phi i32 [ %346, %345 ], [ %361, %352 ]
  %368 = phi i64 [ %347, %345 ], [ %362, %352 ]
  %369 = sitofp i32 %367 to double
  br label %370

370:                                              ; preds = %366, %334
  %371 = phi double [ 0.000000e+00, %334 ], [ %369, %366 ]
  %372 = phi i64 [ 0, %334 ], [ %368, %366 ]
  %373 = bitcast %"class.std::__1::vector.12"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %373) #8
  %374 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 0
  %375 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 1
  %376 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %5, i64 0, i32 0, i32 2, i32 0, i32 0
  %377 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %13, i64 0, i32 0, i32 0
  %378 = getelementptr inbounds i64, i64* %335, i64 %372
  %379 = load i64, i64* %378, align 8
  %380 = call i8* @_Znwm(i64 8) #10
  %381 = bitcast i8* %380 to i64*
  %382 = bitcast %"class.std::__1::vector.12"* %5 to i8**
  store i8* %380, i8** %382, align 8
  %383 = getelementptr inbounds i8, i8* %380, i64 8
  %384 = bitcast i64** %376 to i8**
  store i8* %383, i8** %384, align 8
  %385 = bitcast i64** %375 to i64*
  store i64 %379, i64* %381, align 8
  %386 = ptrtoint i8* %383 to i64
  store i64 %386, i64* %385, align 8
  %387 = icmp eq i64 %337, 0
  %388 = bitcast i8* %383 to i64*
  %389 = ptrtoint i8* %380 to i64
  br i1 %387, label %527, label %390

390:                                              ; preds = %370
  %391 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %392 = bitcast %"class.std::__1::vector.12"* %5 to i64*
  %393 = bitcast i64** %376 to i64*
  br label %429

394:                                              ; preds = %394, %343
  %395 = phi i64 [ 0, %343 ], [ %425, %394 ]
  %396 = phi i32 [ 0, %343 ], [ %424, %394 ]
  %397 = phi i64 [ 0, %343 ], [ %426, %394 ]
  %398 = phi i64 [ %344, %343 ], [ %427, %394 ]
  %399 = add i64 %397, %339
  %400 = getelementptr inbounds i32, i32* %302, i64 %399
  %401 = load i32, i32* %400, align 4
  %402 = icmp sgt i32 %401, %396
  %403 = select i1 %402, i32 %401, i32 %396
  %404 = select i1 %402, i64 %397, i64 %395
  %405 = or i64 %397, 1
  %406 = add i64 %405, %339
  %407 = getelementptr inbounds i32, i32* %302, i64 %406
  %408 = load i32, i32* %407, align 4
  %409 = icmp sgt i32 %408, %403
  %410 = select i1 %409, i32 %408, i32 %403
  %411 = select i1 %409, i64 %405, i64 %404
  %412 = or i64 %397, 2
  %413 = add i64 %412, %339
  %414 = getelementptr inbounds i32, i32* %302, i64 %413
  %415 = load i32, i32* %414, align 4
  %416 = icmp sgt i32 %415, %410
  %417 = select i1 %416, i32 %415, i32 %410
  %418 = select i1 %416, i64 %412, i64 %411
  %419 = or i64 %397, 3
  %420 = add i64 %419, %339
  %421 = getelementptr inbounds i32, i32* %302, i64 %420
  %422 = load i32, i32* %421, align 4
  %423 = icmp sgt i32 %422, %417
  %424 = select i1 %423, i32 %422, i32 %417
  %425 = select i1 %423, i64 %419, i64 %418
  %426 = add nuw i64 %397, 4
  %427 = add i64 %398, -4
  %428 = icmp eq i64 %427, 0
  br i1 %428, label %345, label %394

429:                                              ; preds = %521, %390
  %430 = phi i32* [ %302, %390 ], [ %522, %521 ]
  %431 = phi i64 [ %386, %390 ], [ %519, %521 ]
  %432 = phi i64* [ %388, %390 ], [ %518, %521 ]
  %433 = phi i64 [ %337, %390 ], [ %436, %521 ]
  %434 = phi i64 [ %372, %390 ], [ %462, %521 ]
  %435 = add i64 %434, -1
  %436 = add i64 %433, -1
  %437 = mul i64 %436, %43
  %438 = add i64 %437, %435
  %439 = getelementptr inbounds i32, i32* %430, i64 %438
  %440 = load i32, i32* %439, align 4
  %441 = icmp eq i64 %435, 0
  br i1 %441, label %446, label %442

442:                                              ; preds = %429
  %443 = add i64 %438, -1
  %444 = getelementptr inbounds i32, i32* %430, i64 %443
  %445 = load i32, i32* %444, align 4
  br label %446

446:                                              ; preds = %442, %429
  %447 = phi i32 [ %445, %442 ], [ 0, %429 ]
  %448 = icmp slt i32 %440, %447
  br i1 %448, label %449, label %461

449:                                              ; preds = %446
  %450 = add i64 %437, -1
  br label %451

451:                                              ; preds = %456, %449
  %452 = phi i32 [ %447, %449 ], [ %459, %456 ]
  %453 = phi i64 [ %435, %449 ], [ %454, %456 ]
  %454 = add i64 %453, -1
  %455 = icmp eq i64 %454, 0
  br i1 %455, label %461, label %456

456:                                              ; preds = %451
  %457 = add i64 %450, %454
  %458 = getelementptr inbounds i32, i32* %430, i64 %457
  %459 = load i32, i32* %458, align 4
  %460 = icmp slt i32 %452, %459
  br i1 %460, label %451, label %461

461:                                              ; preds = %456, %451, %446
  %462 = phi i64 [ %435, %446 ], [ %454, %456 ], [ 0, %451 ]
  %463 = load i64*, i64** %377, align 8
  %464 = getelementptr inbounds i64, i64* %463, i64 %462
  %465 = load i64*, i64** %376, align 8
  %466 = icmp eq i64* %432, %465
  br i1 %466, label %471, label %467

467:                                              ; preds = %461
  %468 = load i64, i64* %464, align 8
  store i64 %468, i64* %432, align 8
  %469 = getelementptr inbounds i64, i64* %432, i64 1
  %470 = ptrtoint i64* %469 to i64
  store i64 %470, i64* %385, align 8
  br label %517

471:                                              ; preds = %461
  %472 = ptrtoint i64* %432 to i64
  %473 = load i64, i64* %392, align 8
  %474 = sub i64 %472, %473
  %475 = ashr exact i64 %474, 3
  %476 = add nsw i64 %475, 1
  %477 = icmp ugt i64 %476, 2305843009213693951
  br i1 %477, label %478, label %480

478:                                              ; preds = %471
  %479 = bitcast %"class.std::__1::vector.12"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %479) #9
  unreachable

480:                                              ; preds = %471
  %481 = icmp ult i64 %475, 1152921504606846975
  br i1 %481, label %482, label %490

482:                                              ; preds = %480
  %483 = ashr exact i64 %474, 2
  %484 = icmp ult i64 %483, %476
  %485 = select i1 %484, i64 %476, i64 %483
  %486 = icmp eq i64 %485, 0
  br i1 %486, label %495, label %487

487:                                              ; preds = %482
  %488 = icmp ugt i64 %485, 2305843009213693951
  br i1 %488, label %489, label %490

489:                                              ; preds = %487
  call void @abort() #9
  unreachable

490:                                              ; preds = %487, %480
  %491 = phi i64 [ %485, %487 ], [ 2305843009213693951, %480 ]
  %492 = shl i64 %491, 3
  %493 = call i8* @_Znwm(i64 %492) #10
  %494 = bitcast i8* %493 to i64*
  br label %495

495:                                              ; preds = %490, %482
  %496 = phi i64 [ %491, %490 ], [ 0, %482 ]
  %497 = phi i64* [ %494, %490 ], [ null, %482 ]
  %498 = getelementptr inbounds i64, i64* %497, i64 %475
  %499 = getelementptr inbounds i64, i64* %497, i64 %496
  %500 = ptrtoint i64* %499 to i64
  %501 = load i64, i64* %464, align 8
  store i64 %501, i64* %498, align 8
  %502 = getelementptr inbounds i64, i64* %498, i64 1
  %503 = ptrtoint i64* %502 to i64
  %504 = sub i64 %431, %473
  %505 = ashr exact i64 %504, 3
  %506 = sub nsw i64 0, %505
  %507 = getelementptr inbounds i64, i64* %498, i64 %506
  %508 = ptrtoint i64* %507 to i64
  %509 = icmp sgt i64 %504, 0
  br i1 %509, label %510, label %513

510:                                              ; preds = %495
  %511 = bitcast i64* %507 to i8*
  %512 = inttoptr i64 %473 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %511, i8* align 8 %512, i64 %504, i1 false) #8
  br label %513

513:                                              ; preds = %510, %495
  store i64 %508, i64* %392, align 8
  store i64 %503, i64* %385, align 8
  store i64 %500, i64* %393, align 8
  %514 = icmp eq i64 %473, 0
  br i1 %514, label %517, label %515

515:                                              ; preds = %513
  %516 = inttoptr i64 %473 to i8*
  call void @_ZdlPv(i8* %516) #10
  br label %517

517:                                              ; preds = %515, %513, %467
  %518 = phi i64* [ %469, %467 ], [ %502, %513 ], [ %502, %515 ]
  %519 = phi i64 [ %470, %467 ], [ %503, %513 ], [ %503, %515 ]
  %520 = icmp eq i64 %436, 0
  br i1 %520, label %523, label %521

521:                                              ; preds = %517
  %522 = load i32*, i32** %391, align 8
  br label %429

523:                                              ; preds = %517
  %524 = load i64*, i64** %374, align 8
  %525 = ptrtoint i64* %524 to i64
  %526 = icmp eq i64* %524, %518
  br i1 %526, label %549, label %527

527:                                              ; preds = %523, %370
  %528 = phi i64* [ %524, %523 ], [ %381, %370 ]
  %529 = phi i64* [ %518, %523 ], [ %388, %370 ]
  %530 = phi i64 [ %519, %523 ], [ %386, %370 ]
  %531 = phi i64 [ %525, %523 ], [ %389, %370 ]
  %532 = getelementptr inbounds i64, i64* %529, i64 -1
  %533 = icmp ugt i64* %532, %528
  br i1 %533, label %536, label %534

534:                                              ; preds = %527
  %535 = bitcast %"class.std::__1::vector.12"* %5 to i64*
  br label %549

536:                                              ; preds = %527, %536
  %537 = phi i64* [ %542, %536 ], [ %532, %527 ]
  %538 = phi i64* [ %541, %536 ], [ %528, %527 ]
  %539 = load i64, i64* %538, align 8
  %540 = load i64, i64* %537, align 8
  store i64 %540, i64* %538, align 8
  store i64 %539, i64* %537, align 8
  %541 = getelementptr inbounds i64, i64* %538, i64 1
  %542 = getelementptr inbounds i64, i64* %537, i64 -1
  %543 = icmp ult i64* %541, %542
  br i1 %543, label %536, label %544

544:                                              ; preds = %536
  %545 = load i64, i64* %385, align 8
  %546 = bitcast %"class.std::__1::vector.12"* %5 to i64*
  %547 = load i64, i64* %546, align 8
  %548 = inttoptr i64 %547 to i64*
  br label %549

549:                                              ; preds = %534, %544, %523
  %550 = phi i64* [ %535, %534 ], [ %546, %544 ], [ %392, %523 ]
  %551 = phi i64* [ %528, %534 ], [ %548, %544 ], [ %518, %523 ]
  %552 = phi i64 [ %531, %534 ], [ %547, %544 ], [ %525, %523 ]
  %553 = phi i64 [ %530, %534 ], [ %545, %544 ], [ %519, %523 ]
  %554 = sub i64 %553, %552
  %555 = ashr exact i64 %554, 3
  %556 = inttoptr i64 %552 to i64*
  %557 = load i64, i64* %556, align 8
  %558 = add nsw i64 %555, -1
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %567, label %560

560:                                              ; preds = %549
  %561 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 1
  %562 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %563 = bitcast %"class.gfx::Range"** %561 to i64*
  %564 = bitcast %"class.std::__1::vector.16"* %3 to i64*
  %565 = bitcast %"class.gfx::Range"** %562 to i64*
  %566 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 0
  br label %647

567:                                              ; preds = %757, %549
  %568 = phi i64* [ %551, %549 ], [ %758, %757 ]
  %569 = phi i64 [ %557, %549 ], [ %762, %757 ]
  %570 = phi i64 [ 1, %549 ], [ %763, %757 ]
  %571 = add i64 %570, %569
  %572 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 1
  %573 = load %"class.gfx::Range"*, %"class.gfx::Range"** %572, align 8
  %574 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %575 = load %"class.gfx::Range"*, %"class.gfx::Range"** %574, align 8
  %576 = icmp ult %"class.gfx::Range"* %573, %575
  %577 = ptrtoint %"class.gfx::Range"* %575 to i64
  br i1 %576, label %578, label %587

578:                                              ; preds = %567
  %579 = trunc i64 %569 to i32
  %580 = trunc i64 %571 to i32
  %581 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %573, i64 0, i32 0
  store i32 %579, i32* %581, align 4
  %582 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %573, i64 0, i32 1
  store i32 %580, i32* %582, align 4
  %583 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %573, i64 1
  %584 = ptrtoint %"class.gfx::Range"* %583 to i64
  %585 = bitcast %"class.gfx::Range"** %572 to i64*
  store i64 %584, i64* %585, align 8
  %586 = load i64*, i64** %374, align 8
  br label %765

587:                                              ; preds = %567
  %588 = ptrtoint %"class.gfx::Range"* %573 to i64
  %589 = bitcast %"class.gfx::Range"** %572 to i64*
  %590 = bitcast %"class.std::__1::vector.16"* %3 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = sub i64 %588, %591
  %593 = ashr exact i64 %592, 3
  %594 = add nsw i64 %593, 1
  %595 = icmp ugt i64 %594, 2305843009213693951
  br i1 %595, label %596, label %598

596:                                              ; preds = %587
  %597 = bitcast %"class.std::__1::vector.16"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %597) #9
  unreachable

598:                                              ; preds = %587
  %599 = bitcast %"class.gfx::Range"** %574 to i64*
  %600 = sub i64 %577, %591
  %601 = ashr exact i64 %600, 3
  %602 = icmp ult i64 %601, 1152921504606846975
  br i1 %602, label %603, label %611

603:                                              ; preds = %598
  %604 = ashr exact i64 %600, 2
  %605 = icmp ult i64 %604, %594
  %606 = select i1 %605, i64 %594, i64 %604
  %607 = icmp eq i64 %606, 0
  br i1 %607, label %616, label %608

608:                                              ; preds = %603
  %609 = icmp ugt i64 %606, 2305843009213693951
  br i1 %609, label %610, label %611

610:                                              ; preds = %608
  call void @abort() #9
  unreachable

611:                                              ; preds = %608, %598
  %612 = phi i64 [ %606, %608 ], [ 2305843009213693951, %598 ]
  %613 = shl i64 %612, 3
  %614 = call i8* @_Znwm(i64 %613) #10
  %615 = bitcast i8* %614 to %"class.gfx::Range"*
  br label %616

616:                                              ; preds = %611, %603
  %617 = phi i64 [ %612, %611 ], [ 0, %603 ]
  %618 = phi %"class.gfx::Range"* [ %615, %611 ], [ null, %603 ]
  %619 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %618, i64 %593
  %620 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %618, i64 %617
  %621 = ptrtoint %"class.gfx::Range"* %620 to i64
  %622 = trunc i64 %569 to i32
  %623 = trunc i64 %571 to i32
  %624 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %619, i64 0, i32 0
  store i32 %622, i32* %624, align 4
  %625 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %618, i64 %593, i32 1
  store i32 %623, i32* %625, align 4
  %626 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %619, i64 1
  %627 = ptrtoint %"class.gfx::Range"* %626 to i64
  %628 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 0
  %629 = load %"class.gfx::Range"*, %"class.gfx::Range"** %628, align 8
  %630 = load i64, i64* %589, align 8
  %631 = ptrtoint %"class.gfx::Range"* %629 to i64
  %632 = sub i64 %630, %631
  %633 = ashr exact i64 %632, 3
  %634 = sub nsw i64 0, %633
  %635 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %619, i64 %634
  %636 = ptrtoint %"class.gfx::Range"* %635 to i64
  %637 = icmp sgt i64 %632, 0
  br i1 %637, label %638, label %642

638:                                              ; preds = %616
  %639 = bitcast %"class.gfx::Range"* %635 to i8*
  %640 = bitcast %"class.gfx::Range"* %629 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %639, i8* align 4 %640, i64 %632, i1 false) #8
  %641 = load %"class.gfx::Range"*, %"class.gfx::Range"** %628, align 8
  br label %642

642:                                              ; preds = %638, %616
  %643 = phi %"class.gfx::Range"* [ %629, %616 ], [ %641, %638 ]
  store i64 %636, i64* %590, align 8
  store i64 %627, i64* %589, align 8
  store i64 %621, i64* %599, align 8
  %644 = icmp eq %"class.gfx::Range"* %643, null
  br i1 %644, label %765, label %645

645:                                              ; preds = %642
  %646 = bitcast %"class.gfx::Range"* %643 to i8*
  call void @_ZdlPv(i8* %646) #10
  br label %765

647:                                              ; preds = %757, %560
  %648 = phi i64* [ %551, %560 ], [ %758, %757 ]
  %649 = phi i64 [ %553, %560 ], [ %759, %757 ]
  %650 = phi i64 [ %552, %560 ], [ %760, %757 ]
  %651 = phi i64 [ %553, %560 ], [ %761, %757 ]
  %652 = phi i64 [ 0, %560 ], [ %662, %757 ]
  %653 = phi i64 [ 1, %560 ], [ %763, %757 ]
  %654 = phi i64 [ %557, %560 ], [ %762, %757 ]
  %655 = sub i64 %651, %650
  %656 = ashr exact i64 %655, 3
  %657 = icmp ugt i64 %656, %652
  br i1 %657, label %660, label %658

658:                                              ; preds = %647
  %659 = bitcast %"class.std::__1::vector.12"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %659) #9
  unreachable

660:                                              ; preds = %647
  %661 = inttoptr i64 %650 to i64*
  %662 = add nuw i64 %652, 1
  %663 = icmp ugt i64 %656, %662
  br i1 %663, label %666, label %664

664:                                              ; preds = %660
  %665 = bitcast %"class.std::__1::vector.12"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %665) #9
  unreachable

666:                                              ; preds = %660
  %667 = getelementptr inbounds i64, i64* %661, i64 %652
  %668 = load i64, i64* %667, align 8
  %669 = add i64 %668, 1
  %670 = getelementptr inbounds i64, i64* %661, i64 %662
  %671 = load i64, i64* %670, align 8
  %672 = icmp ult i64 %669, %671
  br i1 %672, label %673, label %755

673:                                              ; preds = %666
  %674 = add i64 %654, %653
  %675 = load %"class.gfx::Range"*, %"class.gfx::Range"** %561, align 8
  %676 = load %"class.gfx::Range"*, %"class.gfx::Range"** %562, align 8
  %677 = icmp ult %"class.gfx::Range"* %675, %676
  %678 = ptrtoint %"class.gfx::Range"* %676 to i64
  br i1 %677, label %679, label %687

679:                                              ; preds = %673
  %680 = trunc i64 %654 to i32
  %681 = trunc i64 %674 to i32
  %682 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %675, i64 0, i32 0
  store i32 %680, i32* %682, align 4
  %683 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %675, i64 0, i32 1
  store i32 %681, i32* %683, align 4
  %684 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %675, i64 1
  %685 = ptrtoint %"class.gfx::Range"* %684 to i64
  store i64 %685, i64* %563, align 8
  %686 = load i64, i64* %385, align 8
  br label %743

687:                                              ; preds = %673
  %688 = ptrtoint %"class.gfx::Range"* %675 to i64
  %689 = load i64, i64* %564, align 8
  %690 = sub i64 %688, %689
  %691 = ashr exact i64 %690, 3
  %692 = add nsw i64 %691, 1
  %693 = icmp ugt i64 %692, 2305843009213693951
  br i1 %693, label %694, label %696

694:                                              ; preds = %687
  %695 = bitcast %"class.std::__1::vector.16"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %695) #9
  unreachable

696:                                              ; preds = %687
  %697 = sub i64 %678, %689
  %698 = ashr exact i64 %697, 3
  %699 = icmp ult i64 %698, 1152921504606846975
  br i1 %699, label %700, label %708

700:                                              ; preds = %696
  %701 = ashr exact i64 %697, 2
  %702 = icmp ult i64 %701, %692
  %703 = select i1 %702, i64 %692, i64 %701
  %704 = icmp eq i64 %703, 0
  br i1 %704, label %713, label %705

705:                                              ; preds = %700
  %706 = icmp ugt i64 %703, 2305843009213693951
  br i1 %706, label %707, label %708

707:                                              ; preds = %705
  call void @abort() #9
  unreachable

708:                                              ; preds = %705, %696
  %709 = phi i64 [ %703, %705 ], [ 2305843009213693951, %696 ]
  %710 = shl i64 %709, 3
  %711 = call i8* @_Znwm(i64 %710) #10
  %712 = bitcast i8* %711 to %"class.gfx::Range"*
  br label %713

713:                                              ; preds = %708, %700
  %714 = phi i64 [ %709, %708 ], [ 0, %700 ]
  %715 = phi %"class.gfx::Range"* [ %712, %708 ], [ null, %700 ]
  %716 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %715, i64 %691
  %717 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %715, i64 %714
  %718 = ptrtoint %"class.gfx::Range"* %717 to i64
  %719 = trunc i64 %654 to i32
  %720 = trunc i64 %674 to i32
  %721 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %716, i64 0, i32 0
  store i32 %719, i32* %721, align 4
  %722 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %715, i64 %691, i32 1
  store i32 %720, i32* %722, align 4
  %723 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %716, i64 1
  %724 = ptrtoint %"class.gfx::Range"* %723 to i64
  %725 = load %"class.gfx::Range"*, %"class.gfx::Range"** %566, align 8
  %726 = load i64, i64* %563, align 8
  %727 = ptrtoint %"class.gfx::Range"* %725 to i64
  %728 = sub i64 %726, %727
  %729 = ashr exact i64 %728, 3
  %730 = sub nsw i64 0, %729
  %731 = getelementptr inbounds %"class.gfx::Range", %"class.gfx::Range"* %716, i64 %730
  %732 = ptrtoint %"class.gfx::Range"* %731 to i64
  %733 = icmp sgt i64 %728, 0
  br i1 %733, label %734, label %738

734:                                              ; preds = %713
  %735 = bitcast %"class.gfx::Range"* %731 to i8*
  %736 = bitcast %"class.gfx::Range"* %725 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %735, i8* align 4 %736, i64 %728, i1 false) #8
  %737 = load %"class.gfx::Range"*, %"class.gfx::Range"** %566, align 8
  br label %738

738:                                              ; preds = %734, %713
  %739 = phi %"class.gfx::Range"* [ %725, %713 ], [ %737, %734 ]
  store i64 %732, i64* %564, align 8
  store i64 %724, i64* %563, align 8
  store i64 %718, i64* %565, align 8
  %740 = icmp eq %"class.gfx::Range"* %739, null
  br i1 %740, label %743, label %741

741:                                              ; preds = %738
  %742 = bitcast %"class.gfx::Range"* %739 to i8*
  call void @_ZdlPv(i8* %742) #10
  br label %743

743:                                              ; preds = %741, %738, %679
  %744 = phi i64 [ %649, %741 ], [ %649, %738 ], [ %686, %679 ]
  %745 = load i64, i64* %550, align 8
  %746 = sub i64 %744, %745
  %747 = ashr exact i64 %746, 3
  %748 = icmp ugt i64 %747, %662
  %749 = inttoptr i64 %745 to i64*
  br i1 %748, label %752, label %750

750:                                              ; preds = %743
  %751 = bitcast %"class.std::__1::vector.12"* %5 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* nonnull %751) #9
  unreachable

752:                                              ; preds = %743
  %753 = getelementptr inbounds i64, i64* %749, i64 %662
  %754 = load i64, i64* %753, align 8
  br label %757

755:                                              ; preds = %666
  %756 = add i64 %653, 1
  br label %757

757:                                              ; preds = %755, %752
  %758 = phi i64* [ %749, %752 ], [ %648, %755 ]
  %759 = phi i64 [ %744, %752 ], [ %649, %755 ]
  %760 = phi i64 [ %745, %752 ], [ %650, %755 ]
  %761 = phi i64 [ %744, %752 ], [ %651, %755 ]
  %762 = phi i64 [ %754, %752 ], [ %654, %755 ]
  %763 = phi i64 [ 1, %752 ], [ %756, %755 ]
  %764 = icmp eq i64 %662, %558
  br i1 %764, label %567, label %647

765:                                              ; preds = %645, %642, %578
  %766 = phi i64* [ %586, %578 ], [ %568, %642 ], [ %568, %645 ]
  %767 = icmp eq i64* %766, null
  br i1 %767, label %771, label %768

768:                                              ; preds = %765
  %769 = ptrtoint i64* %766 to i64
  store i64 %769, i64* %385, align 8
  %770 = bitcast i64* %766 to i8*
  call void @_ZdlPv(i8* %770) #10
  br label %771

771:                                              ; preds = %765, %768
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %373) #8
  %772 = load i64*, i64** %377, align 8
  %773 = icmp eq i64* %772, null
  br i1 %773, label %779, label %774

774:                                              ; preds = %771
  %775 = ptrtoint i64* %772 to i64
  %776 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %13, i64 0, i32 0, i32 1
  %777 = bitcast i64** %776 to i64*
  store i64 %775, i64* %777, align 8
  %778 = bitcast i64* %772 to i8*
  call void @_ZdlPv(i8* %778) #10
  br label %779

779:                                              ; preds = %771, %774
  %780 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 0
  %781 = load i32*, i32** %780, align 8
  %782 = icmp eq i32* %781, null
  br i1 %782, label %788, label %783

783:                                              ; preds = %779
  %784 = ptrtoint i32* %781 to i64
  %785 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %786 = bitcast i32** %785 to i64*
  store i64 %784, i64* %786, align 8
  %787 = bitcast i32* %781 to i8*
  call void @_ZdlPv(i8* %787) #10
  br label %788

788:                                              ; preds = %779, %783
  %789 = mul i32 %27, 24
  %790 = add i32 %789, 8
  %791 = sitofp i32 %790 to double
  %792 = fdiv double %371, %791
  %793 = fmul double %792, 7.500000e-01
  %794 = fadd double %793, 2.500000e-01
  %795 = fmul double %794, 0x3FEE666666666666
  call void @_ZN4base4i18n17UTF16CharIteratorD1Ev(%"class.base::i18n::UTF16CharIterator"* nonnull %11) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %65) #8
  call void @_ZN4base4i18n17UTF16CharIteratorD1Ev(%"class.base::i18n::UTF16CharIterator"* nonnull %10) #8
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %52) #8
  ret double %795
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignEmRKi(%"class.std::__1::vector"*, i64, i32* dereferenceable(4)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = bitcast i32* %2 to i8*
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i32** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %250, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %11
  %22 = ashr exact i64 %21, 2
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %24 = icmp ult i64 %22, %1
  %25 = select i1 %24, i64 %22, i64 %1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %126, label %27

27:                                               ; preds = %15
  %28 = icmp ult i64 %25, 8
  br i1 %28, label %86, label %29

29:                                               ; preds = %27
  %30 = getelementptr i32, i32* %16, i64 %25
  %31 = getelementptr i8, i8* %6, i64 1
  %32 = icmp ugt i8* %31, %17
  %33 = icmp ugt i32* %30, %2
  %34 = and i1 %32, %33
  br i1 %34, label %86, label %35

35:                                               ; preds = %29
  %36 = and i64 %25, -8
  %37 = getelementptr i32, i32* %16, i64 %36
  %38 = sub i64 %25, %36
  %39 = add i64 %36, -8
  %40 = lshr exact i64 %39, 3
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %35
  %45 = sub nuw nsw i64 %41, %42
  %46 = load i32, i32* %2, align 4, !alias.scope !4
  %47 = insertelement <4 x i32> undef, i32 %46, i32 0
  %48 = shufflevector <4 x i32> %47, <4 x i32> undef, <4 x i32> zeroinitializer
  %49 = insertelement <4 x i32> undef, i32 %46, i32 0
  %50 = shufflevector <4 x i32> %49, <4 x i32> undef, <4 x i32> zeroinitializer
  %51 = load i32, i32* %2, align 4, !alias.scope !4
  %52 = insertelement <4 x i32> undef, i32 %51, i32 0
  %53 = shufflevector <4 x i32> %52, <4 x i32> undef, <4 x i32> zeroinitializer
  %54 = insertelement <4 x i32> undef, i32 %51, i32 0
  %55 = shufflevector <4 x i32> %54, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %56

56:                                               ; preds = %56, %44
  %57 = phi i64 [ 0, %44 ], [ %68, %56 ]
  %58 = phi i64 [ %45, %44 ], [ %69, %56 ]
  %59 = getelementptr i32, i32* %16, i64 %57
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %48, <4 x i32>* %60, align 4, !alias.scope !7, !noalias !4
  %61 = getelementptr i32, i32* %59, i64 4
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %50, <4 x i32>* %62, align 4, !alias.scope !7, !noalias !4
  %63 = or i64 %57, 8
  %64 = getelementptr i32, i32* %16, i64 %63
  %65 = bitcast i32* %64 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %65, align 4, !alias.scope !7, !noalias !4
  %66 = getelementptr i32, i32* %64, i64 4
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> %55, <4 x i32>* %67, align 4, !alias.scope !7, !noalias !4
  %68 = add i64 %57, 16
  %69 = add i64 %58, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %56, !llvm.loop !9

71:                                               ; preds = %56, %35
  %72 = phi i64 [ 0, %35 ], [ %68, %56 ]
  %73 = icmp eq i64 %42, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %71
  %75 = getelementptr i32, i32* %16, i64 %72
  %76 = load i32, i32* %2, align 4, !alias.scope !4
  %77 = insertelement <4 x i32> undef, i32 %76, i32 0
  %78 = shufflevector <4 x i32> %77, <4 x i32> undef, <4 x i32> zeroinitializer
  %79 = insertelement <4 x i32> undef, i32 %76, i32 0
  %80 = shufflevector <4 x i32> %79, <4 x i32> undef, <4 x i32> zeroinitializer
  %81 = bitcast i32* %75 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %81, align 4, !alias.scope !7, !noalias !4
  %82 = getelementptr i32, i32* %75, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %80, <4 x i32>* %83, align 4, !alias.scope !7, !noalias !4
  br label %84

84:                                               ; preds = %71, %74
  %85 = icmp eq i64 %25, %36
  br i1 %85, label %126, label %86

86:                                               ; preds = %84, %29, %27
  %87 = phi i32* [ %16, %29 ], [ %16, %27 ], [ %37, %84 ]
  %88 = phi i64 [ %25, %29 ], [ %25, %27 ], [ %38, %84 ]
  %89 = add i64 %88, -1
  %90 = and i64 %88, 7
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %101, label %92

92:                                               ; preds = %86, %92
  %93 = phi i32* [ %97, %92 ], [ %87, %86 ]
  %94 = phi i64 [ %98, %92 ], [ %88, %86 ]
  %95 = phi i64 [ %99, %92 ], [ %90, %86 ]
  %96 = load i32, i32* %2, align 4
  store i32 %96, i32* %93, align 4
  %97 = getelementptr inbounds i32, i32* %93, i64 1
  %98 = add i64 %94, -1
  %99 = add i64 %95, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %92, !llvm.loop !11

101:                                              ; preds = %92, %86
  %102 = phi i32* [ %87, %86 ], [ %97, %92 ]
  %103 = phi i64 [ %88, %86 ], [ %98, %92 ]
  %104 = icmp ult i64 %89, 7
  br i1 %104, label %126, label %105

105:                                              ; preds = %101, %105
  %106 = phi i32* [ %123, %105 ], [ %102, %101 ]
  %107 = phi i64 [ %124, %105 ], [ %103, %101 ]
  %108 = load i32, i32* %2, align 4
  store i32 %108, i32* %106, align 4
  %109 = getelementptr inbounds i32, i32* %106, i64 1
  %110 = load i32, i32* %2, align 4
  store i32 %110, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %106, i64 2
  %112 = load i32, i32* %2, align 4
  store i32 %112, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %106, i64 3
  %114 = load i32, i32* %2, align 4
  store i32 %114, i32* %113, align 4
  %115 = getelementptr inbounds i32, i32* %106, i64 4
  %116 = load i32, i32* %2, align 4
  store i32 %116, i32* %115, align 4
  %117 = getelementptr inbounds i32, i32* %106, i64 5
  %118 = load i32, i32* %2, align 4
  store i32 %118, i32* %117, align 4
  %119 = getelementptr inbounds i32, i32* %106, i64 6
  %120 = load i32, i32* %2, align 4
  store i32 %120, i32* %119, align 4
  %121 = getelementptr inbounds i32, i32* %106, i64 7
  %122 = load i32, i32* %2, align 4
  store i32 %122, i32* %121, align 4
  %123 = getelementptr inbounds i32, i32* %106, i64 8
  %124 = add i64 %107, -8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %105, !llvm.loop !12

126:                                              ; preds = %101, %105, %84, %15
  br i1 %24, label %127, label %247

127:                                              ; preds = %126
  %128 = sub i64 %1, %22
  %129 = load i64, i64* %19, align 8
  %130 = inttoptr i64 %129 to i32*
  %131 = inttoptr i64 %129 to i8*
  %132 = getelementptr inbounds i32, i32* %130, i64 %128
  %133 = icmp eq i64 %128, 0
  br i1 %133, label %245, label %134

134:                                              ; preds = %127
  %135 = shl i64 %1, 2
  %136 = add i64 %135, -4
  %137 = sub i64 %136, %21
  %138 = lshr i64 %137, 2
  %139 = add nuw nsw i64 %138, 1
  %140 = icmp ult i64 %139, 8
  br i1 %140, label %141, label %163

141:                                              ; preds = %222, %163, %134
  %142 = phi i32* [ %130, %163 ], [ %130, %134 ], [ %176, %222 ]
  %143 = ptrtoint i32* %142 to i64
  %144 = xor i64 %22, -1
  %145 = add i64 %144, %1
  %146 = getelementptr i32, i32* %130, i64 %145
  %147 = ptrtoint i32* %146 to i64
  %148 = sub i64 %147, %143
  %149 = lshr i64 %148, 2
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 7
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %160, label %153

153:                                              ; preds = %141, %153
  %154 = phi i32* [ %157, %153 ], [ %142, %141 ]
  %155 = phi i64 [ %158, %153 ], [ %151, %141 ]
  %156 = load i32, i32* %2, align 4
  store i32 %156, i32* %154, align 4
  %157 = getelementptr inbounds i32, i32* %154, i64 1
  %158 = add i64 %155, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %153, !llvm.loop !13

160:                                              ; preds = %153, %141
  %161 = phi i32* [ %142, %141 ], [ %157, %153 ]
  %162 = icmp ult i64 %148, 28
  br i1 %162, label %224, label %226

163:                                              ; preds = %134
  %164 = shl i64 %1, 2
  %165 = add i64 %164, -4
  %166 = sub i64 %165, %21
  %167 = lshr i64 %166, 2
  %168 = add nuw nsw i64 %167, 1
  %169 = getelementptr i32, i32* %130, i64 %168
  %170 = getelementptr i8, i8* %5, i64 1
  %171 = icmp ugt i8* %170, %131
  %172 = icmp ugt i32* %169, %2
  %173 = and i1 %171, %172
  br i1 %173, label %141, label %174

174:                                              ; preds = %163
  %175 = and i64 %139, 9223372036854775800
  %176 = getelementptr i32, i32* %130, i64 %175
  %177 = add nsw i64 %175, -8
  %178 = lshr exact i64 %177, 3
  %179 = add nuw nsw i64 %178, 1
  %180 = and i64 %179, 1
  %181 = icmp eq i64 %177, 0
  br i1 %181, label %209, label %182

182:                                              ; preds = %174
  %183 = sub nuw nsw i64 %179, %180
  %184 = load i32, i32* %2, align 4, !alias.scope !14
  %185 = insertelement <4 x i32> undef, i32 %184, i32 0
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> zeroinitializer
  %187 = insertelement <4 x i32> undef, i32 %184, i32 0
  %188 = shufflevector <4 x i32> %187, <4 x i32> undef, <4 x i32> zeroinitializer
  %189 = load i32, i32* %2, align 4, !alias.scope !14
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %194

194:                                              ; preds = %194, %182
  %195 = phi i64 [ 0, %182 ], [ %206, %194 ]
  %196 = phi i64 [ %183, %182 ], [ %207, %194 ]
  %197 = getelementptr i32, i32* %130, i64 %195
  %198 = bitcast i32* %197 to <4 x i32>*
  store <4 x i32> %186, <4 x i32>* %198, align 4, !alias.scope !17, !noalias !14
  %199 = getelementptr i32, i32* %197, i64 4
  %200 = bitcast i32* %199 to <4 x i32>*
  store <4 x i32> %188, <4 x i32>* %200, align 4, !alias.scope !17, !noalias !14
  %201 = or i64 %195, 8
  %202 = getelementptr i32, i32* %130, i64 %201
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !17, !noalias !14
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !17, !noalias !14
  %206 = add i64 %195, 16
  %207 = add i64 %196, -2
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %194, !llvm.loop !19

209:                                              ; preds = %194, %174
  %210 = phi i64 [ 0, %174 ], [ %206, %194 ]
  %211 = icmp eq i64 %180, 0
  br i1 %211, label %222, label %212

212:                                              ; preds = %209
  %213 = getelementptr i32, i32* %130, i64 %210
  %214 = load i32, i32* %2, align 4, !alias.scope !14
  %215 = insertelement <4 x i32> undef, i32 %214, i32 0
  %216 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> zeroinitializer
  %217 = insertelement <4 x i32> undef, i32 %214, i32 0
  %218 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> zeroinitializer
  %219 = bitcast i32* %213 to <4 x i32>*
  store <4 x i32> %216, <4 x i32>* %219, align 4, !alias.scope !17, !noalias !14
  %220 = getelementptr i32, i32* %213, i64 4
  %221 = bitcast i32* %220 to <4 x i32>*
  store <4 x i32> %218, <4 x i32>* %221, align 4, !alias.scope !17, !noalias !14
  br label %222

222:                                              ; preds = %209, %212
  %223 = icmp eq i64 %139, %175
  br i1 %223, label %224, label %141

224:                                              ; preds = %160, %226, %222
  %225 = ptrtoint i32* %132 to i64
  br label %245

226:                                              ; preds = %160, %226
  %227 = phi i32* [ %243, %226 ], [ %161, %160 ]
  %228 = load i32, i32* %2, align 4
  store i32 %228, i32* %227, align 4
  %229 = getelementptr inbounds i32, i32* %227, i64 1
  %230 = load i32, i32* %2, align 4
  store i32 %230, i32* %229, align 4
  %231 = getelementptr inbounds i32, i32* %227, i64 2
  %232 = load i32, i32* %2, align 4
  store i32 %232, i32* %231, align 4
  %233 = getelementptr inbounds i32, i32* %227, i64 3
  %234 = load i32, i32* %2, align 4
  store i32 %234, i32* %233, align 4
  %235 = getelementptr inbounds i32, i32* %227, i64 4
  %236 = load i32, i32* %2, align 4
  store i32 %236, i32* %235, align 4
  %237 = getelementptr inbounds i32, i32* %227, i64 5
  %238 = load i32, i32* %2, align 4
  store i32 %238, i32* %237, align 4
  %239 = getelementptr inbounds i32, i32* %227, i64 6
  %240 = load i32, i32* %2, align 4
  store i32 %240, i32* %239, align 4
  %241 = getelementptr inbounds i32, i32* %227, i64 7
  %242 = load i32, i32* %2, align 4
  store i32 %242, i32* %241, align 4
  %243 = getelementptr inbounds i32, i32* %227, i64 8
  %244 = icmp eq i32* %243, %132
  br i1 %244, label %224, label %226, !llvm.loop !20

245:                                              ; preds = %127, %224
  %246 = phi i64 [ %225, %224 ], [ %129, %127 ]
  store i64 %246, i64* %19, align 8
  br label %389

247:                                              ; preds = %126
  %248 = load i32*, i32** %23, align 8
  %249 = getelementptr inbounds i32, i32* %248, i64 %1
  store i32* %249, i32** %18, align 8
  br label %389

250:                                              ; preds = %3
  %251 = icmp eq i64 %11, 0
  br i1 %251, label %257, label %252

252:                                              ; preds = %250
  %253 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %254 = bitcast i32** %253 to i64*
  store i64 %11, i64* %254, align 8
  %255 = inttoptr i64 %11 to i8*
  tail call void @_ZdlPv(i8* %255) #10
  %256 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %256, i8 0, i64 24, i1 false) #8
  br label %257

257:                                              ; preds = %250, %252
  %258 = phi i64 [ %9, %250 ], [ 0, %252 ]
  %259 = icmp ugt i64 %1, 4611686018427387903
  br i1 %259, label %260, label %262

260:                                              ; preds = %257
  %261 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %261) #9
  unreachable

262:                                              ; preds = %257
  %263 = ashr exact i64 %258, 2
  %264 = icmp ult i64 %263, 2305843009213693951
  br i1 %264, label %265, label %272

265:                                              ; preds = %262
  %266 = ashr exact i64 %258, 1
  %267 = icmp ult i64 %266, %1
  br i1 %267, label %272, label %268

268:                                              ; preds = %265
  %269 = icmp ugt i64 %266, 4611686018427387903
  br i1 %269, label %270, label %272

270:                                              ; preds = %268
  %271 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %271) #9
  unreachable

272:                                              ; preds = %265, %262, %268
  %273 = phi i64 [ %266, %268 ], [ 4611686018427387903, %262 ], [ %1, %265 ]
  %274 = shl i64 %273, 2
  %275 = tail call i8* @_Znwm(i64 %274) #10
  %276 = bitcast i8* %275 to i32*
  %277 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %278 = bitcast i32** %277 to i8**
  store i8* %275, i8** %278, align 8
  %279 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %275, i8** %279, align 8
  %280 = getelementptr inbounds i32, i32* %276, i64 %273
  store i32* %280, i32** %7, align 8
  %281 = getelementptr inbounds i32, i32* %276, i64 %1
  %282 = shl nsw i64 %1, 2
  %283 = add i64 %282, -4
  %284 = lshr exact i64 %283, 2
  %285 = add nuw nsw i64 %284, 1
  %286 = icmp ult i64 %285, 8
  br i1 %286, label %345, label %287

287:                                              ; preds = %272
  %288 = shl nsw i64 %1, 2
  %289 = getelementptr i8, i8* %275, i64 %288
  %290 = getelementptr i8, i8* %4, i64 1
  %291 = bitcast i32* %2 to i8*
  %292 = icmp ult i8* %275, %290
  %293 = icmp ugt i8* %289, %291
  %294 = and i1 %292, %293
  br i1 %294, label %345, label %295

295:                                              ; preds = %287
  %296 = and i64 %285, 9223372036854775800
  %297 = getelementptr i32, i32* %276, i64 %296
  %298 = add nsw i64 %296, -8
  %299 = lshr exact i64 %298, 3
  %300 = add nuw nsw i64 %299, 1
  %301 = and i64 %300, 1
  %302 = icmp eq i64 %298, 0
  br i1 %302, label %330, label %303

303:                                              ; preds = %295
  %304 = sub nuw nsw i64 %300, %301
  %305 = load i32, i32* %2, align 4, !alias.scope !21
  %306 = insertelement <4 x i32> undef, i32 %305, i32 0
  %307 = shufflevector <4 x i32> %306, <4 x i32> undef, <4 x i32> zeroinitializer
  %308 = insertelement <4 x i32> undef, i32 %305, i32 0
  %309 = shufflevector <4 x i32> %308, <4 x i32> undef, <4 x i32> zeroinitializer
  %310 = load i32, i32* %2, align 4, !alias.scope !21
  %311 = insertelement <4 x i32> undef, i32 %310, i32 0
  %312 = shufflevector <4 x i32> %311, <4 x i32> undef, <4 x i32> zeroinitializer
  %313 = insertelement <4 x i32> undef, i32 %310, i32 0
  %314 = shufflevector <4 x i32> %313, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %315

315:                                              ; preds = %315, %303
  %316 = phi i64 [ 0, %303 ], [ %327, %315 ]
  %317 = phi i64 [ %304, %303 ], [ %328, %315 ]
  %318 = getelementptr i32, i32* %276, i64 %316
  %319 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %319, align 4, !alias.scope !24, !noalias !21
  %320 = getelementptr i32, i32* %318, i64 4
  %321 = bitcast i32* %320 to <4 x i32>*
  store <4 x i32> %309, <4 x i32>* %321, align 4, !alias.scope !24, !noalias !21
  %322 = or i64 %316, 8
  %323 = getelementptr i32, i32* %276, i64 %322
  %324 = bitcast i32* %323 to <4 x i32>*
  store <4 x i32> %312, <4 x i32>* %324, align 4, !alias.scope !24, !noalias !21
  %325 = getelementptr i32, i32* %323, i64 4
  %326 = bitcast i32* %325 to <4 x i32>*
  store <4 x i32> %314, <4 x i32>* %326, align 4, !alias.scope !24, !noalias !21
  %327 = add i64 %316, 16
  %328 = add i64 %317, -2
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %330, label %315, !llvm.loop !26

330:                                              ; preds = %315, %295
  %331 = phi i64 [ 0, %295 ], [ %327, %315 ]
  %332 = icmp eq i64 %301, 0
  br i1 %332, label %343, label %333

333:                                              ; preds = %330
  %334 = getelementptr i32, i32* %276, i64 %331
  %335 = load i32, i32* %2, align 4, !alias.scope !21
  %336 = insertelement <4 x i32> undef, i32 %335, i32 0
  %337 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> zeroinitializer
  %338 = insertelement <4 x i32> undef, i32 %335, i32 0
  %339 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> zeroinitializer
  %340 = bitcast i32* %334 to <4 x i32>*
  store <4 x i32> %337, <4 x i32>* %340, align 4, !alias.scope !24, !noalias !21
  %341 = getelementptr i32, i32* %334, i64 4
  %342 = bitcast i32* %341 to <4 x i32>*
  store <4 x i32> %339, <4 x i32>* %342, align 4, !alias.scope !24, !noalias !21
  br label %343

343:                                              ; preds = %330, %333
  %344 = icmp eq i64 %285, %296
  br i1 %344, label %386, label %345

345:                                              ; preds = %343, %287, %272
  %346 = phi i32* [ %276, %287 ], [ %276, %272 ], [ %297, %343 ]
  %347 = ptrtoint i32* %346 to i64
  %348 = shl nsw i64 %1, 2
  %349 = add i64 %348, -4
  %350 = sub i64 %349, %347
  %351 = getelementptr i8, i8* %275, i64 %350
  %352 = ptrtoint i8* %351 to i64
  %353 = lshr i64 %352, 2
  %354 = add nuw nsw i64 %353, 1
  %355 = and i64 %354, 7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %364, label %357

357:                                              ; preds = %345, %357
  %358 = phi i32* [ %361, %357 ], [ %346, %345 ]
  %359 = phi i64 [ %362, %357 ], [ %355, %345 ]
  %360 = load i32, i32* %2, align 4
  store i32 %360, i32* %358, align 4
  %361 = getelementptr inbounds i32, i32* %358, i64 1
  %362 = add i64 %359, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %357, !llvm.loop !27

364:                                              ; preds = %357, %345
  %365 = phi i32* [ %346, %345 ], [ %361, %357 ]
  %366 = icmp ult i8* %351, inttoptr (i64 28 to i8*)
  br i1 %366, label %386, label %367

367:                                              ; preds = %364, %367
  %368 = phi i32* [ %384, %367 ], [ %365, %364 ]
  %369 = load i32, i32* %2, align 4
  store i32 %369, i32* %368, align 4
  %370 = getelementptr inbounds i32, i32* %368, i64 1
  %371 = load i32, i32* %2, align 4
  store i32 %371, i32* %370, align 4
  %372 = getelementptr inbounds i32, i32* %368, i64 2
  %373 = load i32, i32* %2, align 4
  store i32 %373, i32* %372, align 4
  %374 = getelementptr inbounds i32, i32* %368, i64 3
  %375 = load i32, i32* %2, align 4
  store i32 %375, i32* %374, align 4
  %376 = getelementptr inbounds i32, i32* %368, i64 4
  %377 = load i32, i32* %2, align 4
  store i32 %377, i32* %376, align 4
  %378 = getelementptr inbounds i32, i32* %368, i64 5
  %379 = load i32, i32* %2, align 4
  store i32 %379, i32* %378, align 4
  %380 = getelementptr inbounds i32, i32* %368, i64 6
  %381 = load i32, i32* %2, align 4
  store i32 %381, i32* %380, align 4
  %382 = getelementptr inbounds i32, i32* %368, i64 7
  %383 = load i32, i32* %2, align 4
  store i32 %383, i32* %382, align 4
  %384 = getelementptr inbounds i32, i32* %368, i64 8
  %385 = icmp eq i32* %384, %281
  br i1 %385, label %386, label %367, !llvm.loop !28

386:                                              ; preds = %364, %367, %343
  %387 = bitcast i32** %277 to i64*
  %388 = ptrtoint i32* %281 to i64
  store i64 %388, i64* %387, align 8
  br label %389

389:                                              ; preds = %245, %247, %386
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE6assignEmRKb(%"class.std::__1::vector.6"*, i64, i8* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::vector.6", align 16
  %5 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 1
  store i64 0, i64* %5, align 8
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %72, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = shl i64 %9, 6
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %14, label %12

12:                                               ; preds = %7
  store i64 %1, i64* %5, align 8
  %13 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  br label %43

14:                                               ; preds = %7
  %15 = bitcast %"class.std::__1::vector.6"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8
  %16 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %4, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 0, i64 24, i1 false) #8
  %17 = icmp slt i64 %1, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %14
  %19 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #9
  unreachable

20:                                               ; preds = %14
  %21 = icmp ult i64 %10, 4611686018427387903
  br i1 %21, label %22, label %28

22:                                               ; preds = %20
  %23 = shl i64 %9, 7
  %24 = add nuw i64 %1, 63
  %25 = and i64 %24, -64
  %26 = icmp ult i64 %23, %25
  %27 = select i1 %26, i64 %25, i64 %23
  br label %28

28:                                               ; preds = %20, %22
  %29 = phi i64 [ %27, %22 ], [ 9223372036854775807, %20 ]
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.6"* nonnull %4, i64 %29)
  %30 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %31 = bitcast %"class.std::__1::vector.6"* %4 to i64*
  %32 = load i64, i64* %31, align 16
  %33 = bitcast %"class.std::__1::vector.6"* %0 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 8
  store i64 %32, i64* %30, align 8
  store i64 %1, i64* %5, align 8
  %35 = bitcast %"class.std::__1::vector.6"* %4 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %35, align 16
  %36 = load i64, i64* %8, align 8
  %37 = load i64, i64* %16, align 16
  store i64 %37, i64* %8, align 8
  store i64 %36, i64* %16, align 16
  %38 = extractelement <2 x i64> %34, i32 0
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %28
  %41 = inttoptr i64 %38 to i8*
  call void @_ZdlPv(i8* %41) #10
  br label %42

42:                                               ; preds = %28, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8
  br label %43

43:                                               ; preds = %12, %42
  %44 = phi i64* [ %13, %12 ], [ %30, %42 ]
  %45 = load i64, i64* %44, align 8, !noalias !29
  %46 = load i8, i8* %2, align 1, !range !34
  %47 = icmp eq i8 %46, 0
  %48 = inttoptr i64 %45 to i8*
  %49 = lshr i64 %1, 6
  %50 = shl nuw nsw i64 %49, 3
  br i1 %47, label %61, label %51

51:                                               ; preds = %43
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 -1, i64 %50, i1 false) #8
  %52 = and i64 %1, 63
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %72, label %54

54:                                               ; preds = %51
  %55 = inttoptr i64 %45 to i64*
  %56 = getelementptr inbounds i64, i64* %55, i64 %49
  %57 = sub nuw nsw i64 64, %52
  %58 = lshr i64 -1, %57
  %59 = load i64, i64* %56, align 8
  %60 = or i64 %59, %58
  store i64 %60, i64* %56, align 8
  br label %72

61:                                               ; preds = %43
  call void @llvm.memset.p0i8.i64(i8* align 8 %48, i8 0, i64 %50, i1 false) #8
  %62 = and i64 %1, 63
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %72, label %64

64:                                               ; preds = %61
  %65 = inttoptr i64 %45 to i64*
  %66 = getelementptr inbounds i64, i64* %65, i64 %49
  %67 = sub nuw nsw i64 64, %62
  %68 = lshr i64 -1, %67
  %69 = xor i64 %68, -1
  %70 = load i64, i64* %66, align 8
  %71 = and i64 %70, %69
  store i64 %71, i64* %66, align 8
  br label %72

72:                                               ; preds = %64, %61, %54, %51, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorImNS_9allocatorImEEE6assignEmRKm(%"class.std::__1::vector.12"*, i64, i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i64* %2 to i8*
  %5 = bitcast i64* %2 to i8*
  %6 = bitcast i64* %2 to i8*
  %7 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %8 = bitcast i64** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::vector.12"* %0 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = ashr exact i64 %12, 3
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %250, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i64*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i64** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %11
  %22 = ashr exact i64 %21, 3
  %23 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 0
  %24 = icmp ult i64 %22, %1
  %25 = select i1 %24, i64 %22, i64 %1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %126, label %27

27:                                               ; preds = %15
  %28 = icmp ult i64 %25, 4
  br i1 %28, label %86, label %29

29:                                               ; preds = %27
  %30 = getelementptr i64, i64* %16, i64 %25
  %31 = getelementptr i8, i8* %6, i64 1
  %32 = icmp ugt i8* %31, %17
  %33 = icmp ugt i64* %30, %2
  %34 = and i1 %32, %33
  br i1 %34, label %86, label %35

35:                                               ; preds = %29
  %36 = and i64 %25, -4
  %37 = getelementptr i64, i64* %16, i64 %36
  %38 = sub i64 %25, %36
  %39 = add i64 %36, -4
  %40 = lshr exact i64 %39, 2
  %41 = add nuw nsw i64 %40, 1
  %42 = and i64 %41, 1
  %43 = icmp eq i64 %39, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %35
  %45 = sub nuw nsw i64 %41, %42
  %46 = load i64, i64* %2, align 8, !alias.scope !35
  %47 = insertelement <2 x i64> undef, i64 %46, i32 0
  %48 = shufflevector <2 x i64> %47, <2 x i64> undef, <2 x i32> zeroinitializer
  %49 = insertelement <2 x i64> undef, i64 %46, i32 0
  %50 = shufflevector <2 x i64> %49, <2 x i64> undef, <2 x i32> zeroinitializer
  %51 = load i64, i64* %2, align 8, !alias.scope !35
  %52 = insertelement <2 x i64> undef, i64 %51, i32 0
  %53 = shufflevector <2 x i64> %52, <2 x i64> undef, <2 x i32> zeroinitializer
  %54 = insertelement <2 x i64> undef, i64 %51, i32 0
  %55 = shufflevector <2 x i64> %54, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %56

56:                                               ; preds = %56, %44
  %57 = phi i64 [ 0, %44 ], [ %68, %56 ]
  %58 = phi i64 [ %45, %44 ], [ %69, %56 ]
  %59 = getelementptr i64, i64* %16, i64 %57
  %60 = bitcast i64* %59 to <2 x i64>*
  store <2 x i64> %48, <2 x i64>* %60, align 8, !alias.scope !38, !noalias !35
  %61 = getelementptr i64, i64* %59, i64 2
  %62 = bitcast i64* %61 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %62, align 8, !alias.scope !38, !noalias !35
  %63 = or i64 %57, 4
  %64 = getelementptr i64, i64* %16, i64 %63
  %65 = bitcast i64* %64 to <2 x i64>*
  store <2 x i64> %53, <2 x i64>* %65, align 8, !alias.scope !38, !noalias !35
  %66 = getelementptr i64, i64* %64, i64 2
  %67 = bitcast i64* %66 to <2 x i64>*
  store <2 x i64> %55, <2 x i64>* %67, align 8, !alias.scope !38, !noalias !35
  %68 = add i64 %57, 8
  %69 = add i64 %58, -2
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %56, !llvm.loop !40

71:                                               ; preds = %56, %35
  %72 = phi i64 [ 0, %35 ], [ %68, %56 ]
  %73 = icmp eq i64 %42, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %71
  %75 = getelementptr i64, i64* %16, i64 %72
  %76 = load i64, i64* %2, align 8, !alias.scope !35
  %77 = insertelement <2 x i64> undef, i64 %76, i32 0
  %78 = shufflevector <2 x i64> %77, <2 x i64> undef, <2 x i32> zeroinitializer
  %79 = insertelement <2 x i64> undef, i64 %76, i32 0
  %80 = shufflevector <2 x i64> %79, <2 x i64> undef, <2 x i32> zeroinitializer
  %81 = bitcast i64* %75 to <2 x i64>*
  store <2 x i64> %78, <2 x i64>* %81, align 8, !alias.scope !38, !noalias !35
  %82 = getelementptr i64, i64* %75, i64 2
  %83 = bitcast i64* %82 to <2 x i64>*
  store <2 x i64> %80, <2 x i64>* %83, align 8, !alias.scope !38, !noalias !35
  br label %84

84:                                               ; preds = %71, %74
  %85 = icmp eq i64 %25, %36
  br i1 %85, label %126, label %86

86:                                               ; preds = %84, %29, %27
  %87 = phi i64* [ %16, %29 ], [ %16, %27 ], [ %37, %84 ]
  %88 = phi i64 [ %25, %29 ], [ %25, %27 ], [ %38, %84 ]
  %89 = add i64 %88, -1
  %90 = and i64 %88, 7
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %101, label %92

92:                                               ; preds = %86, %92
  %93 = phi i64* [ %97, %92 ], [ %87, %86 ]
  %94 = phi i64 [ %98, %92 ], [ %88, %86 ]
  %95 = phi i64 [ %99, %92 ], [ %90, %86 ]
  %96 = load i64, i64* %2, align 8
  store i64 %96, i64* %93, align 8
  %97 = getelementptr inbounds i64, i64* %93, i64 1
  %98 = add i64 %94, -1
  %99 = add i64 %95, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %92, !llvm.loop !41

101:                                              ; preds = %92, %86
  %102 = phi i64* [ %87, %86 ], [ %97, %92 ]
  %103 = phi i64 [ %88, %86 ], [ %98, %92 ]
  %104 = icmp ult i64 %89, 7
  br i1 %104, label %126, label %105

105:                                              ; preds = %101, %105
  %106 = phi i64* [ %123, %105 ], [ %102, %101 ]
  %107 = phi i64 [ %124, %105 ], [ %103, %101 ]
  %108 = load i64, i64* %2, align 8
  store i64 %108, i64* %106, align 8
  %109 = getelementptr inbounds i64, i64* %106, i64 1
  %110 = load i64, i64* %2, align 8
  store i64 %110, i64* %109, align 8
  %111 = getelementptr inbounds i64, i64* %106, i64 2
  %112 = load i64, i64* %2, align 8
  store i64 %112, i64* %111, align 8
  %113 = getelementptr inbounds i64, i64* %106, i64 3
  %114 = load i64, i64* %2, align 8
  store i64 %114, i64* %113, align 8
  %115 = getelementptr inbounds i64, i64* %106, i64 4
  %116 = load i64, i64* %2, align 8
  store i64 %116, i64* %115, align 8
  %117 = getelementptr inbounds i64, i64* %106, i64 5
  %118 = load i64, i64* %2, align 8
  store i64 %118, i64* %117, align 8
  %119 = getelementptr inbounds i64, i64* %106, i64 6
  %120 = load i64, i64* %2, align 8
  store i64 %120, i64* %119, align 8
  %121 = getelementptr inbounds i64, i64* %106, i64 7
  %122 = load i64, i64* %2, align 8
  store i64 %122, i64* %121, align 8
  %123 = getelementptr inbounds i64, i64* %106, i64 8
  %124 = add i64 %107, -8
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %105, !llvm.loop !42

126:                                              ; preds = %101, %105, %84, %15
  br i1 %24, label %127, label %247

127:                                              ; preds = %126
  %128 = sub i64 %1, %22
  %129 = load i64, i64* %19, align 8
  %130 = inttoptr i64 %129 to i64*
  %131 = inttoptr i64 %129 to i8*
  %132 = getelementptr inbounds i64, i64* %130, i64 %128
  %133 = icmp eq i64 %128, 0
  br i1 %133, label %245, label %134

134:                                              ; preds = %127
  %135 = shl i64 %1, 3
  %136 = add i64 %135, -8
  %137 = sub i64 %136, %21
  %138 = lshr i64 %137, 3
  %139 = add nuw nsw i64 %138, 1
  %140 = icmp ult i64 %139, 4
  br i1 %140, label %141, label %163

141:                                              ; preds = %222, %163, %134
  %142 = phi i64* [ %130, %163 ], [ %130, %134 ], [ %176, %222 ]
  %143 = ptrtoint i64* %142 to i64
  %144 = xor i64 %22, -1
  %145 = add i64 %144, %1
  %146 = getelementptr i64, i64* %130, i64 %145
  %147 = ptrtoint i64* %146 to i64
  %148 = sub i64 %147, %143
  %149 = lshr i64 %148, 3
  %150 = add nuw nsw i64 %149, 1
  %151 = and i64 %150, 7
  %152 = icmp eq i64 %151, 0
  br i1 %152, label %160, label %153

153:                                              ; preds = %141, %153
  %154 = phi i64* [ %157, %153 ], [ %142, %141 ]
  %155 = phi i64 [ %158, %153 ], [ %151, %141 ]
  %156 = load i64, i64* %2, align 8
  store i64 %156, i64* %154, align 8
  %157 = getelementptr inbounds i64, i64* %154, i64 1
  %158 = add i64 %155, -1
  %159 = icmp eq i64 %158, 0
  br i1 %159, label %160, label %153, !llvm.loop !43

160:                                              ; preds = %153, %141
  %161 = phi i64* [ %142, %141 ], [ %157, %153 ]
  %162 = icmp ult i64 %148, 56
  br i1 %162, label %224, label %226

163:                                              ; preds = %134
  %164 = shl i64 %1, 3
  %165 = add i64 %164, -8
  %166 = sub i64 %165, %21
  %167 = lshr i64 %166, 3
  %168 = add nuw nsw i64 %167, 1
  %169 = getelementptr i64, i64* %130, i64 %168
  %170 = getelementptr i8, i8* %5, i64 1
  %171 = icmp ugt i8* %170, %131
  %172 = icmp ugt i64* %169, %2
  %173 = and i1 %171, %172
  br i1 %173, label %141, label %174

174:                                              ; preds = %163
  %175 = and i64 %139, 4611686018427387900
  %176 = getelementptr i64, i64* %130, i64 %175
  %177 = add nsw i64 %175, -4
  %178 = lshr exact i64 %177, 2
  %179 = add nuw nsw i64 %178, 1
  %180 = and i64 %179, 1
  %181 = icmp eq i64 %177, 0
  br i1 %181, label %209, label %182

182:                                              ; preds = %174
  %183 = sub nuw nsw i64 %179, %180
  %184 = load i64, i64* %2, align 8, !alias.scope !44
  %185 = insertelement <2 x i64> undef, i64 %184, i32 0
  %186 = shufflevector <2 x i64> %185, <2 x i64> undef, <2 x i32> zeroinitializer
  %187 = insertelement <2 x i64> undef, i64 %184, i32 0
  %188 = shufflevector <2 x i64> %187, <2 x i64> undef, <2 x i32> zeroinitializer
  %189 = load i64, i64* %2, align 8, !alias.scope !44
  %190 = insertelement <2 x i64> undef, i64 %189, i32 0
  %191 = shufflevector <2 x i64> %190, <2 x i64> undef, <2 x i32> zeroinitializer
  %192 = insertelement <2 x i64> undef, i64 %189, i32 0
  %193 = shufflevector <2 x i64> %192, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %194

194:                                              ; preds = %194, %182
  %195 = phi i64 [ 0, %182 ], [ %206, %194 ]
  %196 = phi i64 [ %183, %182 ], [ %207, %194 ]
  %197 = getelementptr i64, i64* %130, i64 %195
  %198 = bitcast i64* %197 to <2 x i64>*
  store <2 x i64> %186, <2 x i64>* %198, align 8, !alias.scope !47, !noalias !44
  %199 = getelementptr i64, i64* %197, i64 2
  %200 = bitcast i64* %199 to <2 x i64>*
  store <2 x i64> %188, <2 x i64>* %200, align 8, !alias.scope !47, !noalias !44
  %201 = or i64 %195, 4
  %202 = getelementptr i64, i64* %130, i64 %201
  %203 = bitcast i64* %202 to <2 x i64>*
  store <2 x i64> %191, <2 x i64>* %203, align 8, !alias.scope !47, !noalias !44
  %204 = getelementptr i64, i64* %202, i64 2
  %205 = bitcast i64* %204 to <2 x i64>*
  store <2 x i64> %193, <2 x i64>* %205, align 8, !alias.scope !47, !noalias !44
  %206 = add i64 %195, 8
  %207 = add i64 %196, -2
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %194, !llvm.loop !49

209:                                              ; preds = %194, %174
  %210 = phi i64 [ 0, %174 ], [ %206, %194 ]
  %211 = icmp eq i64 %180, 0
  br i1 %211, label %222, label %212

212:                                              ; preds = %209
  %213 = getelementptr i64, i64* %130, i64 %210
  %214 = load i64, i64* %2, align 8, !alias.scope !44
  %215 = insertelement <2 x i64> undef, i64 %214, i32 0
  %216 = shufflevector <2 x i64> %215, <2 x i64> undef, <2 x i32> zeroinitializer
  %217 = insertelement <2 x i64> undef, i64 %214, i32 0
  %218 = shufflevector <2 x i64> %217, <2 x i64> undef, <2 x i32> zeroinitializer
  %219 = bitcast i64* %213 to <2 x i64>*
  store <2 x i64> %216, <2 x i64>* %219, align 8, !alias.scope !47, !noalias !44
  %220 = getelementptr i64, i64* %213, i64 2
  %221 = bitcast i64* %220 to <2 x i64>*
  store <2 x i64> %218, <2 x i64>* %221, align 8, !alias.scope !47, !noalias !44
  br label %222

222:                                              ; preds = %209, %212
  %223 = icmp eq i64 %139, %175
  br i1 %223, label %224, label %141

224:                                              ; preds = %160, %226, %222
  %225 = ptrtoint i64* %132 to i64
  br label %245

226:                                              ; preds = %160, %226
  %227 = phi i64* [ %243, %226 ], [ %161, %160 ]
  %228 = load i64, i64* %2, align 8
  store i64 %228, i64* %227, align 8
  %229 = getelementptr inbounds i64, i64* %227, i64 1
  %230 = load i64, i64* %2, align 8
  store i64 %230, i64* %229, align 8
  %231 = getelementptr inbounds i64, i64* %227, i64 2
  %232 = load i64, i64* %2, align 8
  store i64 %232, i64* %231, align 8
  %233 = getelementptr inbounds i64, i64* %227, i64 3
  %234 = load i64, i64* %2, align 8
  store i64 %234, i64* %233, align 8
  %235 = getelementptr inbounds i64, i64* %227, i64 4
  %236 = load i64, i64* %2, align 8
  store i64 %236, i64* %235, align 8
  %237 = getelementptr inbounds i64, i64* %227, i64 5
  %238 = load i64, i64* %2, align 8
  store i64 %238, i64* %237, align 8
  %239 = getelementptr inbounds i64, i64* %227, i64 6
  %240 = load i64, i64* %2, align 8
  store i64 %240, i64* %239, align 8
  %241 = getelementptr inbounds i64, i64* %227, i64 7
  %242 = load i64, i64* %2, align 8
  store i64 %242, i64* %241, align 8
  %243 = getelementptr inbounds i64, i64* %227, i64 8
  %244 = icmp eq i64* %243, %132
  br i1 %244, label %224, label %226, !llvm.loop !50

245:                                              ; preds = %127, %224
  %246 = phi i64 [ %225, %224 ], [ %129, %127 ]
  store i64 %246, i64* %19, align 8
  br label %389

247:                                              ; preds = %126
  %248 = load i64*, i64** %23, align 8
  %249 = getelementptr inbounds i64, i64* %248, i64 %1
  store i64* %249, i64** %18, align 8
  br label %389

250:                                              ; preds = %3
  %251 = icmp eq i64 %11, 0
  br i1 %251, label %257, label %252

252:                                              ; preds = %250
  %253 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %254 = bitcast i64** %253 to i64*
  store i64 %11, i64* %254, align 8
  %255 = inttoptr i64 %11 to i8*
  tail call void @_ZdlPv(i8* %255) #10
  %256 = bitcast %"class.std::__1::vector.12"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %256, i8 0, i64 24, i1 false) #8
  br label %257

257:                                              ; preds = %250, %252
  %258 = phi i64 [ %9, %250 ], [ 0, %252 ]
  %259 = icmp ugt i64 %1, 2305843009213693951
  br i1 %259, label %260, label %262

260:                                              ; preds = %257
  %261 = bitcast %"class.std::__1::vector.12"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %261) #9
  unreachable

262:                                              ; preds = %257
  %263 = ashr exact i64 %258, 3
  %264 = icmp ult i64 %263, 1152921504606846975
  br i1 %264, label %265, label %272

265:                                              ; preds = %262
  %266 = ashr exact i64 %258, 2
  %267 = icmp ult i64 %266, %1
  br i1 %267, label %272, label %268

268:                                              ; preds = %265
  %269 = icmp ugt i64 %266, 2305843009213693951
  br i1 %269, label %270, label %272

270:                                              ; preds = %268
  %271 = bitcast %"class.std::__1::vector.12"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %271) #9
  unreachable

272:                                              ; preds = %265, %262, %268
  %273 = phi i64 [ %266, %268 ], [ 2305843009213693951, %262 ], [ %1, %265 ]
  %274 = shl i64 %273, 3
  %275 = tail call i8* @_Znwm(i64 %274) #10
  %276 = bitcast i8* %275 to i64*
  %277 = getelementptr inbounds %"class.std::__1::vector.12", %"class.std::__1::vector.12"* %0, i64 0, i32 0, i32 1
  %278 = bitcast i64** %277 to i8**
  store i8* %275, i8** %278, align 8
  %279 = bitcast %"class.std::__1::vector.12"* %0 to i8**
  store i8* %275, i8** %279, align 8
  %280 = getelementptr inbounds i64, i64* %276, i64 %273
  store i64* %280, i64** %7, align 8
  %281 = getelementptr inbounds i64, i64* %276, i64 %1
  %282 = shl nsw i64 %1, 3
  %283 = add i64 %282, -8
  %284 = lshr exact i64 %283, 3
  %285 = add nuw nsw i64 %284, 1
  %286 = icmp ult i64 %285, 4
  br i1 %286, label %345, label %287

287:                                              ; preds = %272
  %288 = shl nsw i64 %1, 3
  %289 = getelementptr i8, i8* %275, i64 %288
  %290 = getelementptr i8, i8* %4, i64 1
  %291 = bitcast i64* %2 to i8*
  %292 = icmp ult i8* %275, %290
  %293 = icmp ugt i8* %289, %291
  %294 = and i1 %292, %293
  br i1 %294, label %345, label %295

295:                                              ; preds = %287
  %296 = and i64 %285, 4611686018427387900
  %297 = getelementptr i64, i64* %276, i64 %296
  %298 = add nsw i64 %296, -4
  %299 = lshr exact i64 %298, 2
  %300 = add nuw nsw i64 %299, 1
  %301 = and i64 %300, 1
  %302 = icmp eq i64 %298, 0
  br i1 %302, label %330, label %303

303:                                              ; preds = %295
  %304 = sub nuw nsw i64 %300, %301
  %305 = load i64, i64* %2, align 8, !alias.scope !51
  %306 = insertelement <2 x i64> undef, i64 %305, i32 0
  %307 = shufflevector <2 x i64> %306, <2 x i64> undef, <2 x i32> zeroinitializer
  %308 = insertelement <2 x i64> undef, i64 %305, i32 0
  %309 = shufflevector <2 x i64> %308, <2 x i64> undef, <2 x i32> zeroinitializer
  %310 = load i64, i64* %2, align 8, !alias.scope !51
  %311 = insertelement <2 x i64> undef, i64 %310, i32 0
  %312 = shufflevector <2 x i64> %311, <2 x i64> undef, <2 x i32> zeroinitializer
  %313 = insertelement <2 x i64> undef, i64 %310, i32 0
  %314 = shufflevector <2 x i64> %313, <2 x i64> undef, <2 x i32> zeroinitializer
  br label %315

315:                                              ; preds = %315, %303
  %316 = phi i64 [ 0, %303 ], [ %327, %315 ]
  %317 = phi i64 [ %304, %303 ], [ %328, %315 ]
  %318 = getelementptr i64, i64* %276, i64 %316
  %319 = bitcast i64* %318 to <2 x i64>*
  store <2 x i64> %307, <2 x i64>* %319, align 8, !alias.scope !54, !noalias !51
  %320 = getelementptr i64, i64* %318, i64 2
  %321 = bitcast i64* %320 to <2 x i64>*
  store <2 x i64> %309, <2 x i64>* %321, align 8, !alias.scope !54, !noalias !51
  %322 = or i64 %316, 4
  %323 = getelementptr i64, i64* %276, i64 %322
  %324 = bitcast i64* %323 to <2 x i64>*
  store <2 x i64> %312, <2 x i64>* %324, align 8, !alias.scope !54, !noalias !51
  %325 = getelementptr i64, i64* %323, i64 2
  %326 = bitcast i64* %325 to <2 x i64>*
  store <2 x i64> %314, <2 x i64>* %326, align 8, !alias.scope !54, !noalias !51
  %327 = add i64 %316, 8
  %328 = add i64 %317, -2
  %329 = icmp eq i64 %328, 0
  br i1 %329, label %330, label %315, !llvm.loop !56

330:                                              ; preds = %315, %295
  %331 = phi i64 [ 0, %295 ], [ %327, %315 ]
  %332 = icmp eq i64 %301, 0
  br i1 %332, label %343, label %333

333:                                              ; preds = %330
  %334 = getelementptr i64, i64* %276, i64 %331
  %335 = load i64, i64* %2, align 8, !alias.scope !51
  %336 = insertelement <2 x i64> undef, i64 %335, i32 0
  %337 = shufflevector <2 x i64> %336, <2 x i64> undef, <2 x i32> zeroinitializer
  %338 = insertelement <2 x i64> undef, i64 %335, i32 0
  %339 = shufflevector <2 x i64> %338, <2 x i64> undef, <2 x i32> zeroinitializer
  %340 = bitcast i64* %334 to <2 x i64>*
  store <2 x i64> %337, <2 x i64>* %340, align 8, !alias.scope !54, !noalias !51
  %341 = getelementptr i64, i64* %334, i64 2
  %342 = bitcast i64* %341 to <2 x i64>*
  store <2 x i64> %339, <2 x i64>* %342, align 8, !alias.scope !54, !noalias !51
  br label %343

343:                                              ; preds = %330, %333
  %344 = icmp eq i64 %285, %296
  br i1 %344, label %386, label %345

345:                                              ; preds = %343, %287, %272
  %346 = phi i64* [ %276, %287 ], [ %276, %272 ], [ %297, %343 ]
  %347 = ptrtoint i64* %346 to i64
  %348 = shl nsw i64 %1, 3
  %349 = add i64 %348, -8
  %350 = sub i64 %349, %347
  %351 = getelementptr i8, i8* %275, i64 %350
  %352 = ptrtoint i8* %351 to i64
  %353 = lshr i64 %352, 3
  %354 = add nuw nsw i64 %353, 1
  %355 = and i64 %354, 7
  %356 = icmp eq i64 %355, 0
  br i1 %356, label %364, label %357

357:                                              ; preds = %345, %357
  %358 = phi i64* [ %361, %357 ], [ %346, %345 ]
  %359 = phi i64 [ %362, %357 ], [ %355, %345 ]
  %360 = load i64, i64* %2, align 8
  store i64 %360, i64* %358, align 8
  %361 = getelementptr inbounds i64, i64* %358, i64 1
  %362 = add i64 %359, -1
  %363 = icmp eq i64 %362, 0
  br i1 %363, label %364, label %357, !llvm.loop !57

364:                                              ; preds = %357, %345
  %365 = phi i64* [ %346, %345 ], [ %361, %357 ]
  %366 = icmp ult i8* %351, inttoptr (i64 56 to i8*)
  br i1 %366, label %386, label %367

367:                                              ; preds = %364, %367
  %368 = phi i64* [ %384, %367 ], [ %365, %364 ]
  %369 = load i64, i64* %2, align 8
  store i64 %369, i64* %368, align 8
  %370 = getelementptr inbounds i64, i64* %368, i64 1
  %371 = load i64, i64* %2, align 8
  store i64 %371, i64* %370, align 8
  %372 = getelementptr inbounds i64, i64* %368, i64 2
  %373 = load i64, i64* %2, align 8
  store i64 %373, i64* %372, align 8
  %374 = getelementptr inbounds i64, i64* %368, i64 3
  %375 = load i64, i64* %2, align 8
  store i64 %375, i64* %374, align 8
  %376 = getelementptr inbounds i64, i64* %368, i64 4
  %377 = load i64, i64* %2, align 8
  store i64 %377, i64* %376, align 8
  %378 = getelementptr inbounds i64, i64* %368, i64 5
  %379 = load i64, i64* %2, align 8
  store i64 %379, i64* %378, align 8
  %380 = getelementptr inbounds i64, i64* %368, i64 6
  %381 = load i64, i64* %2, align 8
  store i64 %381, i64* %380, align 8
  %382 = getelementptr inbounds i64, i64* %368, i64 7
  %383 = load i64, i64* %2, align 8
  store i64 %383, i64* %382, align 8
  %384 = getelementptr inbounds i64, i64* %368, i64 8
  %385 = icmp eq i64* %384, %281
  br i1 %385, label %386, label %367, !llvm.loop !58

386:                                              ; preds = %364, %367, %343
  %387 = bitcast i64** %277 to i64*
  %388 = ptrtoint i64* %281 to i64
  store i64 %388, i64* %387, align 8
  br label %389

389:                                              ; preds = %245, %247, %386
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN4base4i18n17UTF16CharIteratorC1ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.base::i18n::UTF16CharIterator"*, i16*, i64) unnamed_addr #1

declare signext i8 @u_isUWhiteSpace_69(i32) local_unnamed_addr #1

declare zeroext i1 @_ZN4base4i18n17UTF16CharIterator7AdvanceEv(%"class.base::i18n::UTF16CharIterator"*) local_unnamed_addr #1

declare zeroext i1 @_ZN4base4i18n17UTF16CharIterator6RewindEv(%"class.base::i18n::UTF16CharIterator"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN4base4i18n17UTF16CharIteratorD1Ev(%"class.base::i18n::UTF16CharIterator"*) unnamed_addr #3

declare i32 @_ZNK4base4i18n17UTF16CharIterator17PreviousCodePointEv(%"class.base::i18n::UTF16CharIterator"*) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare i32 @u_countChar32_69(i16*, i32) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE7reserveEm(%"class.std::__1::vector.6"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.std::__1::vector.6", align 16
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = shl i64 %7, 6
  %9 = icmp ult i64 %8, %1
  br i1 %9, label %10, label %49

10:                                               ; preds = %2
  %11 = bitcast %"class.std::__1::vector.6"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8
  %12 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %3, i64 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 24, i1 false) #8
  %14 = icmp slt i64 %1, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"class.std::__1::vector.6"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %16) #9
  unreachable

17:                                               ; preds = %10
  %18 = add nsw i64 %1, -1
  %19 = lshr i64 %18, 6
  %20 = add nuw nsw i64 %19, 1
  %21 = shl nuw nsw i64 %20, 3
  %22 = tail call i8* @_Znwm(i64 %21) #10
  %23 = bitcast %"class.std::__1::vector.6"* %3 to i8**
  store i8* %22, i8** %23, align 16
  store i64 0, i64* %12, align 8
  store i64 %20, i64* %13, align 16
  %24 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !59
  %26 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %25, i64* %26, align 8, !alias.scope !59
  %27 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 0, i32* %27, align 8, !alias.scope !59
  %28 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 1
  %29 = load i64, i64* %28, align 8, !noalias !64
  %30 = inttoptr i64 %25 to i64*
  %31 = lshr i64 %29, 6
  %32 = getelementptr inbounds i64, i64* %30, i64 %31
  %33 = trunc i64 %29 to i32
  %34 = and i32 %33, 63
  %35 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 0
  store i64* %32, i64** %35, align 8, !alias.scope !67
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %34, i32* %36, align 8, !alias.scope !67
  call void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.6"* nonnull %3, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5)
  %37 = load i64, i64* %24, align 8
  %38 = bitcast %"class.std::__1::vector.6"* %3 to i64*
  %39 = bitcast %"class.std::__1::vector.6"* %3 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  store i64 %37, i64* %38, align 16
  %41 = load i64, i64* %28, align 8
  %42 = bitcast %"class.std::__1::vector.6"* %0 to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 8
  store i64 %41, i64* %12, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load i64, i64* %13, align 16
  store i64 %44, i64* %6, align 8
  store i64 %43, i64* %13, align 16
  %45 = icmp eq i64 %37, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %17
  %47 = inttoptr i64 %37 to i8*
  call void @_ZdlPv(i8* %47) #10
  br label %48

48:                                               ; preds = %17, %46
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8
  br label %49

49:                                               ; preds = %48, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr27__is_cpp17_forward_iteratorIT_EE5valueEvE4typeES8_S8_(%"class.std::__1::vector.6"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.std::__1::__bit_iterator", align 8
  %5 = alloca %"class.std::__1::__bit_iterator", align 8
  %6 = alloca %"class.std::__1::__bit_iterator", align 8
  %7 = alloca %"class.std::__1::__bit_iterator", align 8
  %8 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = sub i64 %15, %11
  %19 = shl i64 %18, 3
  %20 = zext i32 %17 to i64
  %21 = zext i32 %13 to i64
  %22 = sub i64 %9, %21
  %23 = add i64 %22, %20
  %24 = add i64 %23, %19
  store i64 %24, i64* %8, align 8
  %25 = icmp eq i64 %9, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %3
  %27 = add i64 %9, -1
  %28 = add i64 %24, -1
  %29 = xor i64 %28, %27
  %30 = icmp ugt i64 %29, 63
  br i1 %30, label %31, label %39

31:                                               ; preds = %26, %3
  %32 = icmp ult i64 %24, 65
  %33 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = add i64 %24, -1
  %36 = lshr i64 %35, 6
  %37 = getelementptr inbounds i64, i64* %34, i64 %36
  %38 = select i1 %32, i64* %34, i64* %37
  store i64 0, i64* %38, align 8
  br label %39

39:                                               ; preds = %31, %26
  %40 = load i64, i64* %10, align 8
  %41 = load i32, i32* %12, align 8
  %42 = load i64, i64* %14, align 8
  %43 = load i32, i32* %16, align 8
  %44 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0
  %45 = load i64*, i64** %44, align 8, !noalias !70
  %46 = lshr i64 %9, 6
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  %48 = trunc i64 %9 to i32
  %49 = and i32 %48, 63
  %50 = ptrtoint i64* %47 to i64
  %51 = bitcast %"class.std::__1::__bit_iterator"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %51) #8
  %52 = bitcast %"class.std::__1::__bit_iterator"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52)
  %53 = bitcast %"class.std::__1::__bit_iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53)
  %54 = bitcast %"class.std::__1::__bit_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  %55 = icmp eq i32 %41, %49
  br i1 %55, label %56, label %123

56:                                               ; preds = %39
  %57 = sub i64 %42, %40
  %58 = shl i64 %57, 3
  %59 = zext i32 %43 to i64
  %60 = zext i32 %41 to i64
  %61 = sub nsw i64 %59, %60
  %62 = add i64 %61, %58
  %63 = icmp sgt i64 %62, 0
  %64 = inttoptr i64 %40 to i64*
  br i1 %63, label %65, label %118

65:                                               ; preds = %56
  %66 = inttoptr i64 %40 to i8*
  %67 = icmp eq i32 %41, 0
  br i1 %67, label %92, label %68

68:                                               ; preds = %65
  %69 = sub i32 64, %41
  %70 = zext i32 %69 to i64
  %71 = icmp slt i64 %62, %70
  %72 = select i1 %71, i64 %62, i64 %70
  %73 = sub nsw i64 %62, %72
  %74 = shl i64 -1, %60
  %75 = sub nsw i64 %70, %72
  %76 = lshr i64 -1, %75
  %77 = and i64 %76, %74
  %78 = load i64, i64* %64, align 8, !noalias !73
  %79 = and i64 %78, %77
  %80 = xor i64 %77, -1
  %81 = load i64, i64* %47, align 8, !noalias !73
  %82 = and i64 %81, %80
  %83 = or i64 %82, %79
  store i64 %83, i64* %47, align 8, !noalias !73
  %84 = add nuw nsw i64 %72, %60
  %85 = sdiv i64 %84, 64
  %86 = getelementptr inbounds i64, i64* %47, i64 %85
  %87 = ptrtoint i64* %86 to i64
  %88 = srem i64 %84, 64
  %89 = trunc i64 %88 to i32
  %90 = getelementptr inbounds i64, i64* %64, i64 1
  %91 = bitcast i64* %90 to i8*
  br label %92

92:                                               ; preds = %68, %65
  %93 = phi i64* [ %64, %65 ], [ %90, %68 ]
  %94 = phi i32 [ 0, %65 ], [ %89, %68 ]
  %95 = phi i64 [ %50, %65 ], [ %87, %68 ]
  %96 = phi i8* [ %66, %65 ], [ %91, %68 ]
  %97 = phi i64 [ %62, %65 ], [ %73, %68 ]
  %98 = sdiv i64 %97, 64
  %99 = inttoptr i64 %95 to i8*
  %100 = shl nsw i64 %98, 3
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %96, i64 %100, i1 false) #8, !noalias !73
  %101 = shl nsw i64 %98, 6
  %102 = sub i64 %97, %101
  %103 = inttoptr i64 %95 to i64*
  %104 = getelementptr inbounds i64, i64* %103, i64 %98
  %105 = ptrtoint i64* %104 to i64
  %106 = icmp sgt i64 %102, 0
  br i1 %106, label %107, label %118

107:                                              ; preds = %92
  %108 = getelementptr inbounds i64, i64* %93, i64 %98
  %109 = sub nsw i64 64, %102
  %110 = lshr i64 -1, %109
  %111 = load i64, i64* %108, align 8, !noalias !73
  %112 = and i64 %111, %110
  %113 = xor i64 %110, -1
  %114 = load i64, i64* %104, align 8, !noalias !73
  %115 = and i64 %114, %113
  %116 = or i64 %115, %112
  store i64 %116, i64* %104, align 8, !noalias !73
  %117 = trunc i64 %102 to i32
  br label %118

118:                                              ; preds = %107, %92, %56
  %119 = phi i32 [ %117, %107 ], [ %94, %92 ], [ %41, %56 ]
  %120 = phi i64 [ %105, %107 ], [ %105, %92 ], [ %50, %56 ]
  %121 = bitcast %"class.std::__1::__bit_iterator"* %7 to i64*
  store i64 %120, i64* %121, align 8, !alias.scope !76
  %122 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %7, i64 0, i32 1
  store i32 %119, i32* %122, align 8, !alias.scope !76
  br label %130

123:                                              ; preds = %39
  %124 = bitcast %"class.std::__1::__bit_iterator"* %4 to i64*
  store i64 %40, i64* %124, align 8, !noalias !79
  %125 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %4, i64 0, i32 1
  store i32 %41, i32* %125, align 8, !noalias !79
  %126 = bitcast %"class.std::__1::__bit_iterator"* %5 to i64*
  store i64 %42, i64* %126, align 8, !noalias !79
  %127 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %5, i64 0, i32 1
  store i32 %43, i32* %127, align 8, !noalias !79
  %128 = bitcast %"class.std::__1::__bit_iterator"* %6 to i64*
  store i64 %50, i64* %128, align 8, !noalias !79
  %129 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %6, i64 0, i32 1
  store i32 %49, i32* %129, align 8, !noalias !79
  call void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* nonnull sret %7, %"class.std::__1::__bit_iterator"* nonnull %4, %"class.std::__1::__bit_iterator"* nonnull %5, %"class.std::__1::__bit_iterator"* nonnull %6) #8
  br label %130

130:                                              ; preds = %118, %123
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %51) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(%"class.std::__1::__bit_iterator"* noalias sret, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*, %"class.std::__1::__bit_iterator"*) local_unnamed_addr #0 comdat {
  %5 = bitcast %"class.std::__1::__bit_iterator"* %2 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::__bit_iterator"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = shl i64 %9, 3
  %11 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %2, i64 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = add nsw i64 %10, %13
  %15 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = zext i32 %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %18, 0
  %20 = inttoptr i64 %8 to i64*
  br i1 %19, label %21, label %185

21:                                               ; preds = %4
  %22 = icmp eq i32 %16, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %21
  %24 = sub i32 64, %16
  %25 = zext i32 %24 to i64
  %26 = icmp slt i64 %18, %25
  %27 = select i1 %26, i64 %18, i64 %25
  %28 = sub nsw i64 %18, %27
  %29 = shl i64 -1, %17
  %30 = sub nsw i64 %25, %27
  %31 = lshr i64 -1, %30
  %32 = and i64 %31, %29
  %33 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %34 = load i64, i64* %20, align 8
  %35 = and i64 %32, %34
  %36 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %37 = load i32, i32* %36, align 8
  %38 = sub i32 64, %37
  %39 = zext i32 %38 to i64
  %40 = icmp ugt i64 %27, %39
  %41 = select i1 %40, i64 %39, i64 %27
  %42 = zext i32 %37 to i64
  %43 = shl i64 -1, %42
  %44 = sub nsw i64 %39, %41
  %45 = lshr i64 -1, %44
  %46 = and i64 %45, %43
  %47 = xor i64 %46, -1
  %48 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = load i64, i64* %49, align 8
  %51 = and i64 %50, %47
  store i64 %51, i64* %49, align 8
  %52 = load i32, i32* %36, align 8
  %53 = load i32, i32* %15, align 8
  %54 = icmp ugt i32 %52, %53
  %55 = sub i32 %53, %52
  %56 = zext i32 %55 to i64
  %57 = lshr i64 %35, %56
  %58 = sub i32 %52, %53
  %59 = zext i32 %58 to i64
  %60 = shl i64 %35, %59
  %61 = select i1 %54, i64 %60, i64 %57
  %62 = load i64*, i64** %48, align 8
  %63 = load i64, i64* %62, align 8
  %64 = or i64 %63, %61
  store i64 %64, i64* %62, align 8
  %65 = load i32, i32* %36, align 8
  %66 = zext i32 %65 to i64
  %67 = add nuw nsw i64 %41, %66
  %68 = lshr i64 %67, 6
  %69 = load i64*, i64** %48, align 8
  %70 = getelementptr inbounds i64, i64* %69, i64 %68
  store i64* %70, i64** %48, align 8
  %71 = trunc i64 %41 to i32
  %72 = add i32 %65, %71
  %73 = and i32 %72, 63
  store i32 %73, i32* %36, align 8
  %74 = sub i64 %27, %41
  %75 = icmp sgt i64 %74, 0
  br i1 %75, label %76, label %90

76:                                               ; preds = %23
  %77 = sub nsw i64 64, %74
  %78 = lshr i64 -1, %77
  %79 = xor i64 %78, -1
  %80 = load i64, i64* %70, align 8
  %81 = and i64 %80, %79
  store i64 %81, i64* %70, align 8
  %82 = load i32, i32* %15, align 8
  %83 = zext i32 %82 to i64
  %84 = add nuw nsw i64 %41, %83
  %85 = lshr i64 %35, %84
  %86 = load i64*, i64** %48, align 8
  %87 = load i64, i64* %86, align 8
  %88 = or i64 %85, %87
  store i64 %88, i64* %86, align 8
  %89 = trunc i64 %74 to i32
  store i32 %89, i32* %36, align 8
  br label %90

90:                                               ; preds = %76, %23
  %91 = load i64*, i64** %33, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 1
  store i64* %92, i64** %33, align 8
  br label %93

93:                                               ; preds = %21, %90
  %94 = phi i64* [ %20, %21 ], [ %92, %90 ]
  %95 = phi i64 [ %18, %21 ], [ %28, %90 ]
  %96 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %97 = load i32, i32* %96, align 8
  %98 = sub i32 64, %97
  %99 = zext i32 %97 to i64
  %100 = shl i64 -1, %99
  %101 = icmp sgt i64 %95, 63
  br i1 %101, label %102, label %134

102:                                              ; preds = %93
  %103 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %1, i64 0, i32 0
  %104 = xor i64 %100, -1
  %105 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %106 = zext i32 %98 to i64
  br label %107

107:                                              ; preds = %102, %107
  %108 = phi i64* [ %94, %102 ], [ %130, %107 ]
  %109 = phi i64 [ %95, %102 ], [ %128, %107 ]
  %110 = load i64, i64* %108, align 8
  %111 = load i64*, i64** %105, align 8
  %112 = load i64, i64* %111, align 8
  %113 = and i64 %112, %104
  store i64 %113, i64* %111, align 8
  %114 = load i32, i32* %96, align 8
  %115 = zext i32 %114 to i64
  %116 = shl i64 %110, %115
  %117 = load i64*, i64** %105, align 8
  %118 = load i64, i64* %117, align 8
  %119 = or i64 %118, %116
  store i64 %119, i64* %117, align 8
  %120 = load i64*, i64** %105, align 8
  %121 = getelementptr inbounds i64, i64* %120, i64 1
  store i64* %121, i64** %105, align 8
  %122 = load i64, i64* %121, align 8
  %123 = and i64 %122, %100
  store i64 %123, i64* %121, align 8
  %124 = lshr i64 %110, %106
  %125 = load i64*, i64** %105, align 8
  %126 = load i64, i64* %125, align 8
  %127 = or i64 %126, %124
  store i64 %127, i64* %125, align 8
  %128 = add nsw i64 %109, -64
  %129 = load i64*, i64** %103, align 8
  %130 = getelementptr inbounds i64, i64* %129, i64 1
  store i64* %130, i64** %103, align 8
  %131 = icmp sgt i64 %128, 63
  br i1 %131, label %107, label %132

132:                                              ; preds = %107
  %133 = and i64 %95, 63
  br label %134

134:                                              ; preds = %132, %93
  %135 = phi i64* [ %94, %93 ], [ %130, %132 ]
  %136 = phi i64 [ %95, %93 ], [ %133, %132 ]
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %185

138:                                              ; preds = %134
  %139 = sub nuw nsw i64 64, %136
  %140 = lshr i64 -1, %139
  %141 = load i64, i64* %135, align 8
  %142 = and i64 %141, %140
  %143 = zext i32 %98 to i64
  %144 = icmp sgt i64 %136, %143
  %145 = select i1 %144, i64 %143, i64 %136
  %146 = load i32, i32* %96, align 8
  %147 = zext i32 %146 to i64
  %148 = shl i64 -1, %147
  %149 = sub nsw i64 %143, %145
  %150 = lshr i64 -1, %149
  %151 = and i64 %148, %150
  %152 = xor i64 %151, -1
  %153 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 0
  %154 = load i64*, i64** %153, align 8
  %155 = load i64, i64* %154, align 8
  %156 = and i64 %155, %152
  store i64 %156, i64* %154, align 8
  %157 = load i32, i32* %96, align 8
  %158 = zext i32 %157 to i64
  %159 = shl i64 %142, %158
  %160 = load i64*, i64** %153, align 8
  %161 = load i64, i64* %160, align 8
  %162 = or i64 %161, %159
  store i64 %162, i64* %160, align 8
  %163 = load i32, i32* %96, align 8
  %164 = zext i32 %163 to i64
  %165 = add nuw nsw i64 %145, %164
  %166 = lshr i64 %165, 6
  %167 = load i64*, i64** %153, align 8
  %168 = getelementptr inbounds i64, i64* %167, i64 %166
  store i64* %168, i64** %153, align 8
  %169 = trunc i64 %145 to i32
  %170 = add i32 %163, %169
  %171 = and i32 %170, 63
  store i32 %171, i32* %96, align 8
  %172 = sub nsw i64 %136, %145
  %173 = icmp sgt i64 %172, 0
  br i1 %173, label %174, label %185

174:                                              ; preds = %138
  %175 = sub nuw nsw i64 64, %172
  %176 = lshr i64 -1, %175
  %177 = xor i64 %176, -1
  %178 = load i64, i64* %168, align 8
  %179 = and i64 %178, %177
  store i64 %179, i64* %168, align 8
  %180 = lshr i64 %142, %145
  %181 = load i64*, i64** %153, align 8
  %182 = load i64, i64* %181, align 8
  %183 = or i64 %182, %180
  store i64 %183, i64* %181, align 8
  %184 = trunc i64 %172 to i32
  store i32 %184, i32* %96, align 8
  br label %185

185:                                              ; preds = %134, %174, %138, %4
  %186 = bitcast %"class.std::__1::__bit_iterator"* %3 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = bitcast %"class.std::__1::__bit_iterator"* %0 to i64*
  store i64 %187, i64* %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %0, i64 0, i32 1
  %190 = getelementptr inbounds %"class.std::__1::__bit_iterator", %"class.std::__1::__bit_iterator"* %3, i64 0, i32 1
  %191 = load i32, i32* %190, align 8
  store i32 %191, i32* %189, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.isvectorized", i32 1}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !10}
!13 = distinct !{!13, !3}
!14 = !{!15}
!15 = distinct !{!15, !16}
!16 = distinct !{!16, !"LVerDomain"}
!17 = !{!18}
!18 = distinct !{!18, !16}
!19 = distinct !{!19, !10}
!20 = distinct !{!20, !10}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !10}
!29 = !{!30, !32}
!30 = distinct !{!30, !31, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!31 = distinct !{!31, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!32 = distinct !{!32, !33, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!33 = distinct !{!33, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!34 = !{i8 0, i8 2}
!35 = !{!36}
!36 = distinct !{!36, !37}
!37 = distinct !{!37, !"LVerDomain"}
!38 = !{!39}
!39 = distinct !{!39, !37}
!40 = distinct !{!40, !10}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !3}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !10}
!50 = distinct !{!50, !10}
!51 = !{!52}
!52 = distinct !{!52, !53}
!53 = distinct !{!53, !"LVerDomain"}
!54 = !{!55}
!55 = distinct !{!55, !53}
!56 = distinct !{!56, !10}
!57 = distinct !{!57, !3}
!58 = distinct !{!58, !10}
!59 = !{!60, !62}
!60 = distinct !{!60, !61, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!61 = distinct !{!61, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!62 = distinct !{!62, !63, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv: argument 0"}
!63 = distinct !{!63, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE5beginEv"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv: argument 0"}
!66 = distinct !{!66, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE3endEv"}
!67 = !{!68, !65}
!68 = distinct !{!68, !69, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!69 = distinct !{!69, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!70 = !{!71}
!71 = distinct !{!71, !72, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm: argument 0"}
!72 = distinct !{!72, !"_ZNSt3__16vectorIbNS_9allocatorIbEEE11__make_iterEm"}
!73 = !{!74}
!74 = distinct !{!74, !75, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!75 = distinct !{!75, !"_ZNSt3__114__copy_alignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!76 = !{!74, !77}
!77 = distinct !{!77, !78, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_: argument 0"}
!78 = distinct !{!78, !"_ZNSt3__14copyINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_"}
!79 = !{!77}
