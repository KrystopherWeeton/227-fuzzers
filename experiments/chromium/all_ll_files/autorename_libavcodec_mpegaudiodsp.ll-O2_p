; ModuleID = '../../third_party/ffmpeg/libavcodec/autorename_libavcodec_mpegaudiodsp.c'
source_filename = "../../third_party/ffmpeg/libavcodec/autorename_libavcodec_mpegaudiodsp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MPADSPContext = type { void (float*, float*, i32*, float*, i64)*, void (i32*, i32*, i32*, i16*, i64)*, void (float*, float*)*, void (i32*, i32*)*, void (float*, float*, float*, i32, i32, i32)*, void (i32*, i32*, i32*, i32, i32, i32)* }
%struct.DCTContext = type { i32, i32, %struct.RDFTContext, float*, float*, void (%struct.DCTContext*, float*)*, void (float*, float*)* }
%struct.RDFTContext = type { i32, i32, i32, float*, float*, i32, %struct.FFTContext, void (%struct.RDFTContext*, float*)* }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }

@mpadsp_table_init = internal global i32 0, align 4
@ff_mdct_win_float = external local_unnamed_addr global [8 x [40 x float]], align 16
@ff_mdct_win_fixed = external local_unnamed_addr global [8 x [40 x i32]], align 16

; Function Attrs: cold nounwind optsize ssp uwtable
define hidden void @ff_mpadsp_init(%struct.MPADSPContext*) local_unnamed_addr #0 {
  %2 = alloca %struct.DCTContext, align 8
  %3 = bitcast %struct.DCTContext* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %3) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %3, i8 -86, i64 192, i1 false)
  %4 = call i32 @ff_dct_init(%struct.DCTContext* nonnull %2, i32 5, i32 0) #4
  %5 = call i32 @pthread_once(i32* nonnull @mpadsp_table_init, void ()* nonnull @mpadsp_init_tabs) #4
  %6 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 0
  store void (float*, float*, i32*, float*, i64)* @ff_mpadsp_apply_window_float, void (float*, float*, i32*, float*, i64)** %6, align 8
  %7 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 1
  store void (i32*, i32*, i32*, i16*, i64)* @ff_mpadsp_apply_window_fixed, void (i32*, i32*, i32*, i16*, i64)** %7, align 8
  %8 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %2, i64 0, i32 6
  %9 = bitcast void (float*, float*)** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 2
  %12 = bitcast void (float*, float*)** %11 to i64*
  store i64 %10, i64* %12, align 8
  %13 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 3
  store void (i32*, i32*)* @ff_dct32_fixed, void (i32*, i32*)** %13, align 8
  %14 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 4
  store void (float*, float*, float*, i32, i32, i32)* @ff_imdct36_blocks_float, void (float*, float*, float*, i32, i32, i32)** %14, align 8
  %15 = getelementptr inbounds %struct.MPADSPContext, %struct.MPADSPContext* %0, i64 0, i32 5
  store void (i32*, i32*, i32*, i32, i32, i32)* @ff_imdct36_blocks_fixed, void (i32*, i32*, i32*, i32, i32, i32)** %15, align 8
  call void @ff_mpadsp_init_x86(%struct.MPADSPContext* %0) #4
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %3) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @ff_dct_init(%struct.DCTContext*, i32, i32) local_unnamed_addr #2

declare i32 @pthread_once(i32*, void ()*) local_unnamed_addr #2

; Function Attrs: cold nounwind optsize ssp uwtable
define internal void @mpadsp_init_tabs() #0 {
  br label %1

1:                                                ; preds = %75, %0
  %2 = phi i32 [ 0, %0 ], [ %76, %75 ]
  %3 = urem i32 %2, 3
  %4 = icmp eq i32 %3, 1
  %5 = sitofp i32 %2 to double
  %6 = fadd nsz double %5, 5.000000e-01
  %7 = fmul nsz double %6, 0x400921FB54442D18
  %8 = fdiv nsz double %7, 3.600000e+01
  %9 = tail call nsz double @llvm.sin.f64(double %8)
  %10 = icmp ult i32 %2, 6
  %11 = icmp ult i32 %2, 12
  %12 = icmp ult i32 %2, 18
  %13 = select i1 %12, double 1.000000e+00, double %9
  %14 = add nsw i32 %2, -6
  %15 = sitofp i32 %14 to double
  %16 = fadd nsz double %15, 5.000000e-01
  %17 = fmul nsz double %16, 0x400921FB54442D18
  %18 = fdiv nsz double %17, 1.200000e+01
  %19 = tail call nsz double @llvm.sin.f64(double %18)
  %20 = icmp ugt i32 %2, 29
  %21 = icmp ugt i32 %2, 23
  %22 = icmp ugt i32 %2, 17
  %23 = select i1 %22, double 1.000000e+00, double %9
  %24 = add nsw i32 %2, -18
  %25 = sitofp i32 %24 to double
  %26 = fadd nsz double %25, 5.000000e-01
  %27 = fmul nsz double %26, 0x400921FB54442D18
  %28 = fdiv nsz double %27, 1.200000e+01
  %29 = tail call nsz double @llvm.sin.f64(double %28)
  %30 = shl nuw nsw i32 %2, 1
  %31 = add nuw nsw i32 %30, 19
  %32 = sitofp i32 %31 to double
  %33 = fmul nsz double %32, 0x400921FB54442D18
  %34 = fdiv nsz double %33, 7.200000e+01
  %35 = tail call nsz double @llvm.cos.f64(double %34)
  %36 = fdiv nsz double 0x3FEC24DD2F1A9FBE, %35
  %37 = add nuw nsw i32 %2, 2
  %38 = select i1 %12, i32 %2, i32 %37
  %39 = zext i32 %38 to i64
  %40 = udiv i32 %2, 3
  %41 = zext i32 %40 to i64
  %42 = select i1 %11, double %19, double %13
  %43 = select i1 %10, double 0.000000e+00, double %42
  %44 = select i1 %21, double %29, double %23
  %45 = select i1 %20, double 0.000000e+00, double %44
  %46 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 2, i64 %41
  %47 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 2, i64 %41
  br label %48

48:                                               ; preds = %72, %1
  %49 = phi i64 [ 0, %1 ], [ %73, %72 ]
  %50 = icmp eq i64 %49, 2
  %51 = xor i1 %50, true
  %52 = or i1 %4, %51
  br i1 %52, label %53, label %72

53:                                               ; preds = %48
  %54 = trunc i64 %49 to i32
  switch i32 %54, label %57 [
    i32 1, label %55
    i32 3, label %56
  ]

55:                                               ; preds = %53
  br label %57

56:                                               ; preds = %53
  br label %57

57:                                               ; preds = %56, %55, %53
  %58 = phi double [ %9, %53 ], [ %45, %55 ], [ %43, %56 ]
  %59 = fmul nsz double %36, %58
  %60 = fmul nsz double %59, 3.125000e-02
  %61 = fptrunc double %60 to float
  br i1 %50, label %62, label %66

62:                                               ; preds = %57
  store float %61, float* %46, align 4
  %63 = fmul nsz double %60, 0x41F0000000000000
  %64 = fadd nsz double %63, 5.000000e-01
  %65 = fptosi double %64 to i32
  store i32 %65, i32* %47, align 4
  br label %72

66:                                               ; preds = %57
  %67 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %49, i64 %39
  store float %61, float* %67, align 4
  %68 = fmul nsz double %60, 0x41F0000000000000
  %69 = fadd nsz double %68, 5.000000e-01
  %70 = fptosi double %69 to i32
  %71 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %49, i64 %39
  store i32 %70, i32* %71, align 4
  br label %72

72:                                               ; preds = %62, %66, %48
  %73 = add nuw nsw i64 %49, 1
  %74 = icmp eq i64 %73, 4
  br i1 %74, label %75, label %48

75:                                               ; preds = %72
  %76 = add nuw nsw i32 %2, 1
  %77 = icmp eq i32 %76, 36
  br i1 %77, label %78, label %1

78:                                               ; preds = %75, %102
  %79 = phi i64 [ %103, %102 ], [ 0, %75 ]
  %80 = add nuw nsw i64 %79, 4
  br label %81

81:                                               ; preds = %78, %81
  %82 = phi i64 [ 0, %78 ], [ %100, %81 ]
  %83 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %79, i64 %82
  %84 = bitcast float* %83 to i32*
  %85 = load i32, i32* %84, align 8
  %86 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %80, i64 %82
  %87 = bitcast float* %86 to i32*
  store i32 %85, i32* %87, align 8
  %88 = or i64 %82, 1
  %89 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %79, i64 %88
  %90 = load float, float* %89, align 4
  %91 = fsub nsz float -0.000000e+00, %90
  %92 = getelementptr inbounds [8 x [40 x float]], [8 x [40 x float]]* @ff_mdct_win_float, i64 0, i64 %80, i64 %88
  store float %91, float* %92, align 4
  %93 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %79, i64 %82
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %80, i64 %82
  store i32 %94, i32* %95, align 8
  %96 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %79, i64 %88
  %97 = load i32, i32* %96, align 4
  %98 = sub nsw i32 0, %97
  %99 = getelementptr inbounds [8 x [40 x i32]], [8 x [40 x i32]]* @ff_mdct_win_fixed, i64 0, i64 %80, i64 %88
  store i32 %98, i32* %99, align 4
  %100 = add nuw nsw i64 %82, 2
  %101 = icmp ult i64 %100, 40
  br i1 %101, label %81, label %102

102:                                              ; preds = %81
  %103 = add nuw nsw i64 %79, 1
  %104 = icmp eq i64 %103, 4
  br i1 %104, label %105, label %78

105:                                              ; preds = %102
  tail call void @ff_mpadsp_init_x86_tabs() #4
  ret void
}

declare void @ff_mpadsp_apply_window_float(float*, float*, i32*, float*, i64) #2

declare void @ff_mpadsp_apply_window_fixed(i32*, i32*, i32*, i16*, i64) #2

declare void @ff_dct32_fixed(i32*, i32*) #2

declare void @ff_imdct36_blocks_float(float*, float*, float*, i32, i32, i32) #2

declare void @ff_imdct36_blocks_fixed(i32*, i32*, i32*, i32, i32, i32) #2

declare void @ff_mpadsp_init_x86(%struct.MPADSPContext*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.sin.f64(double) #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.cos.f64(double) #3

declare void @ff_mpadsp_init_x86_tabs() local_unnamed_addr #2

attributes #0 = { cold nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
