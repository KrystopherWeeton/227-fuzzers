; ModuleID = '../../third_party/blink/renderer/core/svg/svg_preserve_aspect_ratio.cc'
source_filename = "../../third_party/blink/renderer/core/svg/svg_preserve_aspect_ratio.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.137", %"class.std::__1::unique_ptr.137", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.147", %"class.std::__1::unique_ptr.153", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.165", %"class.std::__1::unique_ptr.171", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.178", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.6", %"class.std::__1::unique_ptr.10", %"class.std::__1::unique_ptr.16", %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.34", %"class.std::__1::unique_ptr.45", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.59", %"class.std::__1::unique_ptr.66", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.73", %"class.std::__1::unique_ptr.80", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.117", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.6" = type { %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.37" = type { %"struct.std::__1::__atomic_base.38" }
%"struct.std::__1::__atomic_base.38" = type { %"struct.std::__1::__atomic_base.39" }
%"struct.std::__1::__atomic_base.39" = type { %"struct.std::__1::__cxx_atomic_impl.40" }
%"struct.std::__1::__cxx_atomic_impl.40" = type { %"struct.std::__1::__cxx_atomic_base_impl.41" }
%"struct.std::__1::__cxx_atomic_base_impl.41" = type { i64 }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"class.blink::Worklist.48"* }
%"class.blink::Worklist.48" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::Worklist.55"* }
%"class.blink::Worklist.55" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.blink::Worklist.62"* }
%"class.blink::Worklist.62" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.66" = type { %"class.std::__1::__compressed_pair.67" }
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %"class.blink::Worklist.69"* }
%"class.blink::Worklist.69" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.73" = type { %"class.std::__1::__compressed_pair.74" }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.blink::Worklist.76"* }
%"class.blink::Worklist.76" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.blink::Worklist.83"* }
%"class.blink::Worklist.83" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.37" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.97", %"class.std::__1::__compressed_pair.104", %"class.std::__1::__compressed_pair.109", %"class.std::__1::__compressed_pair.111", [4 x i8] }>
%"class.std::__1::unique_ptr.97" = type { %"class.std::__1::__compressed_pair.98" }
%"class.std::__1::__compressed_pair.98" = type { %"struct.std::__1::__compressed_pair_elem.99", %"struct.std::__1::__compressed_pair_elem.100" }
%"struct.std::__1::__compressed_pair_elem.99" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.100" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { i64 }
%"class.std::__1::__compressed_pair.104" = type { %"struct.std::__1::__compressed_pair_elem.105" }
%"struct.std::__1::__compressed_pair_elem.105" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112" }
%"struct.std::__1::__compressed_pair_elem.112" = type { float }
%"class.std::__1::unique_ptr.117" = type { %"class.std::__1::__compressed_pair.118" }
%"class.std::__1::__compressed_pair.118" = type { %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.120", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.129" }
%"class.WTF::Vector.129" = type { %"class.WTF::VectorBuffer.130" }
%"class.WTF::VectorBuffer.130" = type { %"class.WTF::VectorBufferBase.131" }
%"class.WTF::VectorBufferBase.131" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.145" }
%"class.WTF::VectorBuffer.145" = type { %"class.WTF::VectorBufferBase.146" }
%"class.WTF::VectorBufferBase.146" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.149" }
%"struct.std::__1::__compressed_pair_elem.149" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.153" = type { %"class.std::__1::__compressed_pair.154" }
%"class.std::__1::__compressed_pair.154" = type { %"struct.std::__1::__compressed_pair_elem.155" }
%"struct.std::__1::__compressed_pair_elem.155" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.159" }
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.48"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.55"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.62"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.69"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.76"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.182" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.182" = type { %"struct.std::__1::__compressed_pair_elem.183" }
%"struct.std::__1::__compressed_pair_elem.183" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.165" = type { %"class.std::__1::__compressed_pair.166" }
%"class.std::__1::__compressed_pair.166" = type { %"struct.std::__1::__compressed_pair_elem.167" }
%"struct.std::__1::__compressed_pair_elem.167" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.171" = type { %"class.std::__1::__compressed_pair.172" }
%"class.std::__1::__compressed_pair.172" = type { %"struct.std::__1::__compressed_pair_elem.173" }
%"struct.std::__1::__compressed_pair_elem.173" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.177 }
%class.scoped_refptr.177 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.178" = type { %"struct.std::__1::__atomic_base.179" }
%"struct.std::__1::__atomic_base.179" = type { %"struct.std::__1::__cxx_atomic_impl.180" }
%"struct.std::__1::__cxx_atomic_impl.180" = type { %"struct.std::__1::__cxx_atomic_base_impl.181" }
%"struct.std::__1::__cxx_atomic_base_impl.181" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.blink::SVGPreserveAspectRatio" = type { %"class.blink::SVGPropertyHelper", i32, i32 }
%"class.blink::SVGPropertyHelper" = type { %"class.blink::SVGPropertyBase" }
%"class.blink::SVGPropertyBase" = type { i32 (...)** }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::AffineTransform" = type { [6 x double] }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.blink::SVGElement" = type opaque
%"struct.blink::SMILAnimationEffectParameters" = type opaque
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.207" }
%"class.std::__1::__compressed_pair.207" = type { %"struct.std::__1::__compressed_pair_elem.208" }
%"struct.std::__1::__compressed_pair_elem.208" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.209 }
%union.anon.209 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink22SVGPreserveAspectRatio13ParseInternalIhEENS_15SVGParsingErrorERPKT_S5_b = comdat any

$_ZN5blink22SVGPreserveAspectRatio13ParseInternalIDsEENS_15SVGParsingErrorERPKT_S5_b = comdat any

$_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE = comdat any

$_ZN5blink15SVGPropertyBaseD2Ev = comdat any

$_ZN5blink22SVGPreserveAspectRatioD0Ev = comdat any

$_ZNK5blink17SVGPropertyHelperINS_22SVGPreserveAspectRatioEE17CloneForAnimationERKN3WTF6StringE = comdat any

$_ZNK5blink17SVGPropertyHelperINS_22SVGPreserveAspectRatioEE7GetTypeEv = comdat any

$_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE = comdat any

$_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv = comdat any

$_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index = comdat any

@_ZTVN5blink22SVGPreserveAspectRatioE = hidden unnamed_addr constant { [12 x i8*] } { [12 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::SVGPropertyBase"*)* @_ZN5blink15SVGPropertyBaseD2Ev to i8*), i8* bitcast (void (%"class.blink::SVGPreserveAspectRatio"*)* @_ZN5blink22SVGPreserveAspectRatioD0Ev to i8*), i8* bitcast (%"class.blink::SVGPropertyBase"* (%"class.blink::SVGPropertyHelper"*, %"class.WTF::String"*)* @_ZNK5blink17SVGPropertyHelperINS_22SVGPreserveAspectRatioEE17CloneForAnimationERKN3WTF6StringE to i8*), i8* bitcast (%"class.WTF::StringImpl"* (%"class.blink::SVGPreserveAspectRatio"*)* @_ZNK5blink22SVGPreserveAspectRatio13ValueAsStringEv to i8*), i8* bitcast (void (%"class.blink::SVGPreserveAspectRatio"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink22SVGPreserveAspectRatio3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (void (%"class.blink::SVGPreserveAspectRatio"*, %"struct.blink::SMILAnimationEffectParameters"*, float, i32, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZN5blink22SVGPreserveAspectRatio22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE to i8*), i8* bitcast (float (%"class.blink::SVGPreserveAspectRatio"*, %"class.blink::SVGPropertyBase"*, %"class.blink::SVGElement"*)* @_ZNK5blink22SVGPreserveAspectRatio17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE to i8*), i8* bitcast (i32 (%"class.blink::SVGPropertyHelper"*)* @_ZNK5blink17SVGPropertyHelperINS_22SVGPreserveAspectRatioEE7GetTypeEv to i8*), i8* bitcast (void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)* @_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE to i8*), i8* bitcast (%"class.blink::SVGPreserveAspectRatio"* (%"class.blink::SVGPreserveAspectRatio"*)* @_ZNK5blink22SVGPreserveAspectRatio5CloneEv to i8*)] }, align 8
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"xMinYMin\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"xMidYMin\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"xMaxYMin\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"xMinYMid\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"xMidYMid\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"xMaxYMid\00", align 1
@.str.8 = private unnamed_addr constant [9 x i8] c"xMinYMax\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"xMidYMax\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"xMaxYMax\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c" meet\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c" slice\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.15 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.16 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@switch.table._ZNK5blink22SVGPreserveAspectRatio13ValueAsStringEv = private unnamed_addr constant [11 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)], align 8

@_ZN5blink22SVGPreserveAspectRatioC1Ev = hidden unnamed_addr alias void (%"class.blink::SVGPreserveAspectRatio"*), void (%"class.blink::SVGPreserveAspectRatio"*)* @_ZN5blink22SVGPreserveAspectRatioC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink22SVGPreserveAspectRatioC2Ev(%"class.blink::SVGPreserveAspectRatio"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink22SVGPreserveAspectRatioE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  store i32 6, i32* %3, align 8
  %4 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  store i32 1, i32* %4, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink22SVGPreserveAspectRatio10SetDefaultEv(%"class.blink::SVGPreserveAspectRatio"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  store i32 6, i32* %2, align 8
  %3 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  store i32 1, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::SVGPreserveAspectRatio"* @_ZNK5blink22SVGPreserveAspectRatio5CloneEv(%"class.blink::SVGPreserveAspectRatio"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 16) #11
  %3 = bitcast i8* %2 to %"class.blink::SVGPreserveAspectRatio"*
  %4 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink22SVGPreserveAspectRatioE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %2, i64 8
  %6 = bitcast i8* %5 to i32*
  store i32 6, i32* %6, align 8
  %7 = getelementptr inbounds i8, i8* %2, i64 12
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds i8, i8* %2, i64 -4
  %10 = bitcast i8* %9 to i16*
  %11 = load atomic i16, i16* %10 monotonic, align 2
  %12 = or i16 %11, 1
  store atomic i16 %12, i16* %10 release, align 2
  %13 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %6, align 8
  %15 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  store i32 %16, i32* %8, align 4
  ret %"class.blink::SVGPreserveAspectRatio"* %3
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink22SVGPreserveAspectRatio16SetValueAsStringERKN3WTF6StringE(%"class.blink::SVGPreserveAspectRatio"*, %"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  store i32 6, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  store i32 1, i32* %6, align 4
  %7 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %34, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %34, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  br i1 %18, label %27, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = zext i32 %12 to i64
  %23 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #11
  %24 = bitcast i8** %3 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %24, align 8
  %25 = getelementptr inbounds i8, i8* %21, i64 %22
  %26 = call i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIhEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"* %0, i8** nonnull dereferenceable(8) %3, i8* %25, i1 zeroext true) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #11
  br label %34

27:                                               ; preds = %14
  %28 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %29 = zext i32 %12 to i64
  %30 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #11
  %31 = bitcast i16** %4 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %19, %"class.WTF::StringImpl"** %31, align 8
  %32 = getelementptr inbounds i16, i16* %28, i64 %29
  %33 = call i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIDsEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"* %0, i16** nonnull dereferenceable(8) %4, i16* %32, i1 zeroext true) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #11
  br label %34

34:                                               ; preds = %2, %27, %20, %10
  %35 = phi i32 [ 0, %10 ], [ %26, %20 ], [ %33, %27 ], [ 0, %2 ]
  ret i32 %35
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink22SVGPreserveAspectRatio5ParseERPKhS2_b(%"class.blink::SVGPreserveAspectRatio"*, i8** dereferenceable(8), i8*, i1 zeroext) local_unnamed_addr #1 align 2 {
  %5 = tail call i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIhEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"* %0, i8** dereferenceable(8) %1, i8* %2, i1 zeroext %3)
  %6 = and i32 %5, 255
  %7 = icmp eq i32 %6, 0
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIhEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"*, i8** dereferenceable(8), i8*, i1 zeroext) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  store i32 6, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  store i32 1, i32* %6, align 4
  %7 = load i8*, i8** %1, align 8
  %8 = icmp ult i8* %7, %2
  %9 = ptrtoint i8* %7 to i64
  br i1 %8, label %10, label %36

10:                                               ; preds = %4
  %11 = load i8, i8* %7, align 1
  %12 = icmp ult i8 %11, 33
  br i1 %12, label %16, label %44

13:                                               ; preds = %21
  %14 = load i8, i8* %22, align 1
  %15 = icmp ult i8 %14, 33
  br i1 %15, label %16, label %26

16:                                               ; preds = %10, %13
  %17 = phi i64 [ %25, %13 ], [ %9, %10 ]
  %18 = phi i8 [ %14, %13 ], [ %11, %10 ]
  %19 = phi i8* [ %22, %13 ], [ %7, %10 ]
  %20 = phi i1 [ %23, %13 ], [ true, %10 ]
  switch i8 %18, label %30 [
    i8 32, label %21
    i8 10, label %21
    i8 9, label %21
    i8 13, label %21
    i8 12, label %21
  ]

21:                                               ; preds = %16, %16, %16, %16, %16
  %22 = getelementptr inbounds i8, i8* %19, i64 1
  store i8* %22, i8** %1, align 8
  %23 = icmp ult i8* %22, %2
  %24 = icmp eq i8* %22, %2
  %25 = ptrtoint i8* %22 to i64
  br i1 %24, label %28, label %13

26:                                               ; preds = %13
  %27 = ptrtoint i8* %22 to i64
  br label %30

28:                                               ; preds = %21
  %29 = ptrtoint i8* %22 to i64
  br label %30

30:                                               ; preds = %28, %16, %26
  %31 = phi i64 [ %27, %26 ], [ %29, %28 ], [ %17, %16 ]
  %32 = phi i8* [ %22, %26 ], [ %2, %28 ], [ %19, %16 ]
  %33 = phi i1 [ %23, %26 ], [ %23, %28 ], [ %20, %16 ]
  br i1 %33, label %44, label %34

34:                                               ; preds = %30
  %35 = ptrtoint i8* %32 to i64
  br label %36

36:                                               ; preds = %4, %34
  %37 = phi i64 [ %35, %34 ], [ %9, %4 ]
  %38 = sub i64 %37, %9
  %39 = icmp ult i64 %38, 16777215
  %40 = select i1 %39, i64 %38, i64 16777215
  %41 = trunc i64 %40 to i32
  %42 = shl nuw i32 %41, 8
  %43 = or i32 %42, 6
  br label %315

44:                                               ; preds = %10, %30
  %45 = phi i8* [ %32, %30 ], [ %7, %10 ]
  %46 = phi i64 [ %31, %30 ], [ %9, %10 ]
  %47 = load i8, i8* %45, align 1
  switch i8 %47, label %227 [
    i8 110, label %48
    i8 120, label %78
  ]

48:                                               ; preds = %44
  %49 = icmp ult i8* %45, %2
  br i1 %49, label %50, label %57

50:                                               ; preds = %48
  %51 = load i8, i8* %45, align 1
  %52 = icmp eq i8 %51, 110
  br i1 %52, label %53, label %57

53:                                               ; preds = %50
  %54 = getelementptr inbounds i8, i8* %45, i64 1
  %55 = icmp eq i8* %54, %2
  br i1 %55, label %57, label %363

56:                                               ; preds = %378
  store i8* %2, i8** %1, align 8
  br label %312

57:                                               ; preds = %372, %366, %53, %50, %363, %369, %375, %48
  %58 = sub i64 %46, %9
  %59 = icmp ult i64 %58, 16777215
  %60 = select i1 %59, i64 %58, i64 16777215
  %61 = trunc i64 %60 to i32
  %62 = shl nuw i32 %61, 8
  %63 = or i32 %62, 6
  br label %315

64:                                               ; preds = %381
  %65 = load i8, i8* %379, align 1
  %66 = icmp ult i8 %65, 33
  br i1 %66, label %70, label %239

67:                                               ; preds = %74
  %68 = load i8, i8* %75, align 1
  %69 = icmp ult i8 %68, 33
  br i1 %69, label %70, label %235

70:                                               ; preds = %64, %67
  %71 = phi i8 [ %68, %67 ], [ %65, %64 ]
  %72 = phi i8* [ %75, %67 ], [ %379, %64 ]
  %73 = phi i64 [ %77, %67 ], [ %383, %64 ]
  switch i8 %71, label %239 [
    i8 32, label %74
    i8 10, label %74
    i8 9, label %74
    i8 13, label %74
    i8 12, label %74
  ]

74:                                               ; preds = %70, %70, %70, %70, %70
  %75 = getelementptr inbounds i8, i8* %72, i64 1
  store i8* %75, i8** %1, align 8
  %76 = icmp eq i8* %75, %2
  %77 = ptrtoint i8* %75 to i64
  br i1 %76, label %312, label %67

78:                                               ; preds = %44
  %79 = ptrtoint i8* %2 to i64
  %80 = ptrtoint i8* %45 to i64
  %81 = sub i64 %79, %80
  %82 = icmp slt i64 %81, 8
  br i1 %82, label %83, label %90

83:                                               ; preds = %78
  %84 = sub i64 %80, %9
  %85 = icmp ult i64 %84, 16777215
  %86 = select i1 %85, i64 %84, i64 16777215
  %87 = trunc i64 %86 to i32
  %88 = shl nuw i32 %87, 8
  %89 = or i32 %88, 6
  br label %315

90:                                               ; preds = %78
  %91 = getelementptr inbounds i8, i8* %45, i64 1
  %92 = load i8, i8* %91, align 1
  %93 = icmp eq i8 %92, 77
  br i1 %93, label %94, label %102

94:                                               ; preds = %90
  %95 = getelementptr inbounds i8, i8* %45, i64 4
  %96 = load i8, i8* %95, align 1
  %97 = icmp eq i8 %96, 89
  br i1 %97, label %98, label %102

98:                                               ; preds = %94
  %99 = getelementptr inbounds i8, i8* %45, i64 5
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 77
  br i1 %101, label %109, label %102

102:                                              ; preds = %98, %94, %90
  %103 = sub i64 %46, %9
  %104 = icmp ult i64 %103, 16777215
  %105 = select i1 %104, i64 %103, i64 16777215
  %106 = trunc i64 %105 to i32
  %107 = shl nuw i32 %106, 8
  %108 = or i32 %107, 6
  br label %315

109:                                              ; preds = %98
  %110 = getelementptr inbounds i8, i8* %45, i64 2
  %111 = load i8, i8* %110, align 1
  switch i8 %111, label %201 [
    i8 105, label %112
    i8 97, label %172
  ]

112:                                              ; preds = %109
  %113 = getelementptr inbounds i8, i8* %45, i64 3
  %114 = load i8, i8* %113, align 1
  switch i8 %114, label %165 [
    i8 110, label %115
    i8 100, label %140
  ]

115:                                              ; preds = %112
  %116 = getelementptr inbounds i8, i8* %45, i64 6
  %117 = load i8, i8* %116, align 1
  switch i8 %117, label %133 [
    i8 105, label %118
    i8 97, label %129
  ]

118:                                              ; preds = %115
  %119 = getelementptr inbounds i8, i8* %45, i64 7
  %120 = load i8, i8* %119, align 1
  switch i8 %120, label %122 [
    i8 110, label %208
    i8 100, label %121
  ]

121:                                              ; preds = %118
  br label %208

122:                                              ; preds = %118
  %123 = sub i64 %80, %9
  %124 = icmp ult i64 %123, 16777215
  %125 = select i1 %124, i64 %123, i64 16777215
  %126 = trunc i64 %125 to i32
  %127 = shl nuw i32 %126, 8
  %128 = or i32 %127, 6
  br label %315

129:                                              ; preds = %115
  %130 = getelementptr inbounds i8, i8* %45, i64 7
  %131 = load i8, i8* %130, align 1
  %132 = icmp eq i8 %131, 120
  br i1 %132, label %208, label %133

133:                                              ; preds = %115, %129
  %134 = sub i64 %46, %9
  %135 = icmp ult i64 %134, 16777215
  %136 = select i1 %135, i64 %134, i64 16777215
  %137 = trunc i64 %136 to i32
  %138 = shl nuw i32 %137, 8
  %139 = or i32 %138, 6
  br label %315

140:                                              ; preds = %112
  %141 = getelementptr inbounds i8, i8* %45, i64 6
  %142 = load i8, i8* %141, align 1
  switch i8 %142, label %158 [
    i8 105, label %143
    i8 97, label %154
  ]

143:                                              ; preds = %140
  %144 = getelementptr inbounds i8, i8* %45, i64 7
  %145 = load i8, i8* %144, align 1
  switch i8 %145, label %147 [
    i8 110, label %208
    i8 100, label %146
  ]

146:                                              ; preds = %143
  br label %208

147:                                              ; preds = %143
  %148 = sub i64 %80, %9
  %149 = icmp ult i64 %148, 16777215
  %150 = select i1 %149, i64 %148, i64 16777215
  %151 = trunc i64 %150 to i32
  %152 = shl nuw i32 %151, 8
  %153 = or i32 %152, 6
  br label %315

154:                                              ; preds = %140
  %155 = getelementptr inbounds i8, i8* %45, i64 7
  %156 = load i8, i8* %155, align 1
  %157 = icmp eq i8 %156, 120
  br i1 %157, label %208, label %158

158:                                              ; preds = %140, %154
  %159 = sub i64 %46, %9
  %160 = icmp ult i64 %159, 16777215
  %161 = select i1 %160, i64 %159, i64 16777215
  %162 = trunc i64 %161 to i32
  %163 = shl nuw i32 %162, 8
  %164 = or i32 %163, 6
  br label %315

165:                                              ; preds = %112
  %166 = sub i64 %80, %9
  %167 = icmp ult i64 %166, 16777215
  %168 = select i1 %167, i64 %166, i64 16777215
  %169 = trunc i64 %168 to i32
  %170 = shl nuw i32 %169, 8
  %171 = or i32 %170, 6
  br label %315

172:                                              ; preds = %109
  %173 = getelementptr inbounds i8, i8* %45, i64 3
  %174 = load i8, i8* %173, align 1
  %175 = icmp eq i8 %174, 120
  br i1 %175, label %176, label %201

176:                                              ; preds = %172
  %177 = getelementptr inbounds i8, i8* %45, i64 6
  %178 = load i8, i8* %177, align 1
  switch i8 %178, label %194 [
    i8 105, label %179
    i8 97, label %190
  ]

179:                                              ; preds = %176
  %180 = getelementptr inbounds i8, i8* %45, i64 7
  %181 = load i8, i8* %180, align 1
  switch i8 %181, label %183 [
    i8 110, label %208
    i8 100, label %182
  ]

182:                                              ; preds = %179
  br label %208

183:                                              ; preds = %179
  %184 = sub i64 %80, %9
  %185 = icmp ult i64 %184, 16777215
  %186 = select i1 %185, i64 %184, i64 16777215
  %187 = trunc i64 %186 to i32
  %188 = shl nuw i32 %187, 8
  %189 = or i32 %188, 6
  br label %315

190:                                              ; preds = %176
  %191 = getelementptr inbounds i8, i8* %45, i64 7
  %192 = load i8, i8* %191, align 1
  %193 = icmp eq i8 %192, 120
  br i1 %193, label %208, label %194

194:                                              ; preds = %176, %190
  %195 = sub i64 %46, %9
  %196 = icmp ult i64 %195, 16777215
  %197 = select i1 %196, i64 %195, i64 16777215
  %198 = trunc i64 %197 to i32
  %199 = shl nuw i32 %198, 8
  %200 = or i32 %199, 6
  br label %315

201:                                              ; preds = %109, %172
  %202 = sub i64 %46, %9
  %203 = icmp ult i64 %202, 16777215
  %204 = select i1 %203, i64 %202, i64 16777215
  %205 = trunc i64 %204 to i32
  %206 = shl nuw i32 %205, 8
  %207 = or i32 %206, 6
  br label %315

208:                                              ; preds = %190, %179, %154, %143, %129, %118, %182, %121, %146
  %209 = phi i32 [ 5, %121 ], [ 6, %146 ], [ 7, %182 ], [ 2, %118 ], [ 8, %129 ], [ 3, %143 ], [ 9, %154 ], [ 4, %179 ], [ 10, %190 ]
  %210 = getelementptr inbounds i8, i8* %45, i64 8
  store i8* %210, i8** %1, align 8
  %211 = icmp ult i8* %210, %2
  %212 = ptrtoint i8* %210 to i64
  br i1 %211, label %213, label %239

213:                                              ; preds = %208
  %214 = load i8, i8* %210, align 1
  %215 = icmp ult i8 %214, 33
  br i1 %215, label %219, label %239

216:                                              ; preds = %223
  %217 = load i8, i8* %224, align 1
  %218 = icmp ult i8 %217, 33
  br i1 %218, label %219, label %237

219:                                              ; preds = %213, %216
  %220 = phi i8 [ %217, %216 ], [ %214, %213 ]
  %221 = phi i8* [ %224, %216 ], [ %210, %213 ]
  %222 = phi i64 [ %226, %216 ], [ %212, %213 ]
  switch i8 %220, label %239 [
    i8 32, label %223
    i8 10, label %223
    i8 9, label %223
    i8 13, label %223
    i8 12, label %223
  ]

223:                                              ; preds = %219, %219, %219, %219, %219
  %224 = getelementptr inbounds i8, i8* %221, i64 1
  store i8* %224, i8** %1, align 8
  %225 = icmp eq i8* %224, %2
  %226 = ptrtoint i8* %224 to i64
  br i1 %225, label %312, label %216

227:                                              ; preds = %44
  %228 = ptrtoint i8* %45 to i64
  %229 = sub i64 %228, %9
  %230 = icmp ult i64 %229, 16777215
  %231 = select i1 %230, i64 %229, i64 16777215
  %232 = trunc i64 %231 to i32
  %233 = shl nuw i32 %232, 8
  %234 = or i32 %233, 6
  br label %315

235:                                              ; preds = %67
  %236 = ptrtoint i8* %75 to i64
  br label %239

237:                                              ; preds = %216
  %238 = ptrtoint i8* %224 to i64
  br label %239

239:                                              ; preds = %237, %219, %235, %70, %213, %64, %208, %381
  %240 = phi i64 [ %383, %381 ], [ %212, %208 ], [ %383, %64 ], [ %212, %213 ], [ %236, %235 ], [ %73, %70 ], [ %238, %237 ], [ %222, %219 ]
  %241 = phi i8* [ %379, %381 ], [ %210, %208 ], [ %379, %64 ], [ %210, %213 ], [ %75, %235 ], [ %72, %70 ], [ %224, %237 ], [ %221, %219 ]
  %242 = phi i32 [ 1, %381 ], [ %209, %208 ], [ 1, %64 ], [ %209, %213 ], [ 1, %70 ], [ 1, %235 ], [ %209, %219 ], [ %209, %237 ]
  %243 = icmp ult i8* %241, %2
  br i1 %243, label %244, label %298

244:                                              ; preds = %239
  %245 = load i8, i8* %241, align 1
  switch i8 %245, label %298 [
    i8 109, label %246
    i8 115, label %270
  ]

246:                                              ; preds = %244
  %247 = load i8, i8* %241, align 1
  %248 = zext i8 %247 to i32
  %249 = sext i8 %245 to i32
  %250 = icmp eq i32 %248, %249
  br i1 %250, label %251, label %255

251:                                              ; preds = %246
  %252 = getelementptr inbounds i8, i8* %241, i64 1
  %253 = icmp eq i8* %252, %2
  br i1 %253, label %255, label %317

254:                                              ; preds = %332
  store i8* %2, i8** %1, align 8
  br label %312

255:                                              ; preds = %326, %320, %251, %246, %317, %323, %329
  %256 = sub i64 %240, %9
  %257 = icmp ult i64 %256, 16777215
  %258 = select i1 %257, i64 %256, i64 16777215
  %259 = trunc i64 %258 to i32
  %260 = shl nuw i32 %259, 8
  %261 = or i32 %260, 6
  br label %315

262:                                              ; preds = %335, %267
  %263 = phi i8* [ %268, %267 ], [ %333, %335 ]
  %264 = load i8, i8* %263, align 1
  %265 = icmp ult i8 %264, 33
  br i1 %265, label %266, label %298

266:                                              ; preds = %262
  switch i8 %264, label %298 [
    i8 32, label %267
    i8 10, label %267
    i8 9, label %267
    i8 13, label %267
    i8 12, label %267
  ]

267:                                              ; preds = %266, %266, %266, %266, %266
  %268 = getelementptr inbounds i8, i8* %263, i64 1
  store i8* %268, i8** %1, align 8
  %269 = icmp eq i8* %268, %2
  br i1 %269, label %312, label %262

270:                                              ; preds = %244
  %271 = load i8, i8* %241, align 1
  %272 = zext i8 %271 to i32
  %273 = sext i8 %245 to i32
  %274 = icmp eq i32 %272, %273
  br i1 %274, label %275, label %279

275:                                              ; preds = %270
  %276 = getelementptr inbounds i8, i8* %241, i64 1
  %277 = icmp eq i8* %276, %2
  br i1 %277, label %279, label %337

278:                                              ; preds = %358
  store i8* %2, i8** %1, align 8
  br label %294

279:                                              ; preds = %352, %346, %340, %275, %270, %337, %343, %349, %355
  %280 = sub i64 %240, %9
  %281 = icmp ult i64 %280, 16777215
  %282 = select i1 %281, i64 %280, i64 16777215
  %283 = trunc i64 %282 to i32
  %284 = shl nuw i32 %283, 8
  %285 = or i32 %284, 6
  br label %315

286:                                              ; preds = %361, %291
  %287 = phi i8* [ %292, %291 ], [ %359, %361 ]
  %288 = load i8, i8* %287, align 1
  %289 = icmp ult i8 %288, 33
  br i1 %289, label %290, label %294

290:                                              ; preds = %286
  switch i8 %288, label %294 [
    i8 32, label %291
    i8 10, label %291
    i8 9, label %291
    i8 13, label %291
    i8 12, label %291
  ]

291:                                              ; preds = %290, %290, %290, %290, %290
  %292 = getelementptr inbounds i8, i8* %287, i64 1
  store i8* %292, i8** %1, align 8
  %293 = icmp eq i8* %292, %2
  br i1 %293, label %294, label %286

294:                                              ; preds = %286, %290, %291, %278, %361
  %295 = phi i8* [ %359, %361 ], [ %2, %278 ], [ %287, %286 ], [ %287, %290 ], [ %2, %291 ]
  %296 = icmp eq i32 %242, 1
  %297 = select i1 %296, i32 1, i32 2
  br label %298

298:                                              ; preds = %266, %262, %335, %294, %244, %239
  %299 = phi i8* [ %241, %239 ], [ %241, %244 ], [ %295, %294 ], [ %333, %335 ], [ %263, %262 ], [ %263, %266 ]
  %300 = phi i32 [ 1, %239 ], [ 1, %244 ], [ %297, %294 ], [ 1, %335 ], [ 1, %262 ], [ 1, %266 ]
  %301 = icmp eq i8* %299, %2
  %302 = xor i1 %3, true
  %303 = or i1 %301, %302
  br i1 %303, label %312, label %304

304:                                              ; preds = %298
  %305 = ptrtoint i8* %299 to i64
  %306 = sub i64 %305, %9
  %307 = icmp ult i64 %306, 16777215
  %308 = select i1 %307, i64 %306, i64 16777215
  %309 = trunc i64 %308 to i32
  %310 = shl nuw i32 %309, 8
  %311 = or i32 %310, 1
  br label %315

312:                                              ; preds = %223, %74, %267, %56, %254, %298
  %313 = phi i32 [ %300, %298 ], [ 1, %254 ], [ 1, %56 ], [ 1, %267 ], [ 1, %74 ], [ 1, %223 ]
  %314 = phi i32 [ %242, %298 ], [ %242, %254 ], [ 1, %56 ], [ %242, %267 ], [ 1, %74 ], [ %209, %223 ]
  store i32 %314, i32* %5, align 8
  store i32 %313, i32* %6, align 4
  br label %315

315:                                              ; preds = %312, %304, %279, %255, %227, %201, %194, %183, %165, %158, %147, %133, %122, %102, %83, %57, %36
  %316 = phi i32 [ %234, %227 ], [ %89, %83 ], [ %207, %201 ], [ %200, %194 ], [ 0, %312 ], [ %311, %304 ], [ %285, %279 ], [ %261, %255 ], [ %189, %183 ], [ %171, %165 ], [ %164, %158 ], [ %153, %147 ], [ %139, %133 ], [ %128, %122 ], [ %108, %102 ], [ %63, %57 ], [ %43, %36 ]
  ret i32 %316

317:                                              ; preds = %251
  %318 = load i8, i8* %252, align 1
  %319 = icmp eq i8 %318, 101
  br i1 %319, label %320, label %255

320:                                              ; preds = %317
  %321 = getelementptr inbounds i8, i8* %241, i64 2
  %322 = icmp eq i8* %321, %2
  br i1 %322, label %255, label %323

323:                                              ; preds = %320
  %324 = load i8, i8* %321, align 1
  %325 = icmp eq i8 %324, 101
  br i1 %325, label %326, label %255

326:                                              ; preds = %323
  %327 = getelementptr inbounds i8, i8* %241, i64 3
  %328 = icmp eq i8* %327, %2
  br i1 %328, label %255, label %329

329:                                              ; preds = %326
  %330 = load i8, i8* %327, align 1
  %331 = icmp eq i8 %330, 116
  br i1 %331, label %332, label %255

332:                                              ; preds = %329
  %333 = getelementptr inbounds i8, i8* %241, i64 4
  %334 = icmp eq i8* %333, %2
  br i1 %334, label %254, label %335

335:                                              ; preds = %332
  store i8* %333, i8** %1, align 8
  %336 = icmp ult i8* %333, %2
  br i1 %336, label %262, label %298

337:                                              ; preds = %275
  %338 = load i8, i8* %276, align 1
  %339 = icmp eq i8 %338, 108
  br i1 %339, label %340, label %279

340:                                              ; preds = %337
  %341 = getelementptr inbounds i8, i8* %241, i64 2
  %342 = icmp eq i8* %341, %2
  br i1 %342, label %279, label %343

343:                                              ; preds = %340
  %344 = load i8, i8* %341, align 1
  %345 = icmp eq i8 %344, 105
  br i1 %345, label %346, label %279

346:                                              ; preds = %343
  %347 = getelementptr inbounds i8, i8* %241, i64 3
  %348 = icmp eq i8* %347, %2
  br i1 %348, label %279, label %349

349:                                              ; preds = %346
  %350 = load i8, i8* %347, align 1
  %351 = icmp eq i8 %350, 99
  br i1 %351, label %352, label %279

352:                                              ; preds = %349
  %353 = getelementptr inbounds i8, i8* %241, i64 4
  %354 = icmp eq i8* %353, %2
  br i1 %354, label %279, label %355

355:                                              ; preds = %352
  %356 = load i8, i8* %353, align 1
  %357 = icmp eq i8 %356, 101
  br i1 %357, label %358, label %279

358:                                              ; preds = %355
  %359 = getelementptr inbounds i8, i8* %241, i64 5
  %360 = icmp eq i8* %359, %2
  br i1 %360, label %278, label %361

361:                                              ; preds = %358
  store i8* %359, i8** %1, align 8
  %362 = icmp ult i8* %359, %2
  br i1 %362, label %286, label %294

363:                                              ; preds = %53
  %364 = load i8, i8* %54, align 1
  %365 = icmp eq i8 %364, 111
  br i1 %365, label %366, label %57

366:                                              ; preds = %363
  %367 = getelementptr inbounds i8, i8* %45, i64 2
  %368 = icmp eq i8* %367, %2
  br i1 %368, label %57, label %369

369:                                              ; preds = %366
  %370 = load i8, i8* %367, align 1
  %371 = icmp eq i8 %370, 110
  br i1 %371, label %372, label %57

372:                                              ; preds = %369
  %373 = getelementptr inbounds i8, i8* %45, i64 3
  %374 = icmp eq i8* %373, %2
  br i1 %374, label %57, label %375

375:                                              ; preds = %372
  %376 = load i8, i8* %373, align 1
  %377 = icmp eq i8 %376, 101
  br i1 %377, label %378, label %57

378:                                              ; preds = %375
  %379 = getelementptr inbounds i8, i8* %45, i64 4
  %380 = icmp eq i8* %379, %2
  br i1 %380, label %56, label %381

381:                                              ; preds = %378
  store i8* %379, i8** %1, align 8
  %382 = icmp ult i8* %379, %2
  %383 = ptrtoint i8* %379 to i64
  br i1 %382, label %64, label %239
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink22SVGPreserveAspectRatio5ParseERPKDsS2_b(%"class.blink::SVGPreserveAspectRatio"*, i16** dereferenceable(8), i16*, i1 zeroext) local_unnamed_addr #1 align 2 {
  %5 = tail call i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIDsEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"* %0, i16** dereferenceable(8) %1, i16* %2, i1 zeroext %3)
  %6 = and i32 %5, 255
  %7 = icmp eq i32 %6, 0
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIDsEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"*, i16** dereferenceable(8), i16*, i1 zeroext) local_unnamed_addr #1 comdat align 2 {
  %5 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  store i32 6, i32* %5, align 8
  %6 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  store i32 1, i32* %6, align 4
  %7 = load i16*, i16** %1, align 8
  %8 = icmp ult i16* %7, %2
  %9 = ptrtoint i16* %7 to i64
  br i1 %8, label %10, label %26

10:                                               ; preds = %4
  %11 = load i16, i16* %7, align 2
  %12 = icmp ult i16 %11, 33
  br i1 %12, label %16, label %37

13:                                               ; preds = %20
  %14 = load i16, i16* %21, align 2
  %15 = icmp ult i16 %14, 33
  br i1 %15, label %16, label %35

16:                                               ; preds = %10, %13
  %17 = phi i16 [ %14, %13 ], [ %11, %10 ]
  %18 = phi i16* [ %21, %13 ], [ %7, %10 ]
  %19 = phi i64 [ %23, %13 ], [ %9, %10 ]
  switch i16 %17, label %37 [
    i16 32, label %20
    i16 10, label %20
    i16 9, label %20
    i16 13, label %20
    i16 12, label %20
  ]

20:                                               ; preds = %16, %16, %16, %16, %16
  %21 = getelementptr inbounds i16, i16* %18, i64 1
  store i16* %21, i16** %1, align 8
  %22 = icmp ult i16* %21, %2
  %23 = ptrtoint i16* %21 to i64
  br i1 %22, label %13, label %24

24:                                               ; preds = %20
  %25 = ptrtoint i16* %21 to i64
  br label %26

26:                                               ; preds = %24, %4
  %27 = phi i64 [ %9, %4 ], [ %25, %24 ]
  %28 = sub i64 %27, %9
  %29 = ashr exact i64 %28, 1
  %30 = icmp ult i64 %29, 16777215
  %31 = select i1 %30, i64 %29, i64 16777215
  %32 = trunc i64 %31 to i32
  %33 = shl nuw i32 %32, 8
  %34 = or i32 %33, 6
  br label %337

35:                                               ; preds = %13
  %36 = ptrtoint i16* %21 to i64
  br label %37

37:                                               ; preds = %35, %16, %10
  %38 = phi i64 [ %9, %10 ], [ %36, %35 ], [ %19, %16 ]
  %39 = phi i16* [ %7, %10 ], [ %21, %35 ], [ %18, %16 ]
  %40 = phi i16 [ %11, %10 ], [ %14, %35 ], [ %17, %16 ]
  switch i16 %40, label %237 [
    i16 110, label %41
    i16 120, label %78
  ]

41:                                               ; preds = %37
  %42 = icmp ult i16* %39, %2
  br i1 %42, label %43, label %52

43:                                               ; preds = %41
  %44 = load i16, i16* %39, align 2
  %45 = icmp eq i16 %44, 110
  br i1 %45, label %46, label %52

46:                                               ; preds = %43
  %47 = getelementptr inbounds i16, i16* %39, i64 1
  %48 = icmp ult i16* %47, %2
  br i1 %48, label %381, label %49

49:                                               ; preds = %396, %390, %384, %46
  %50 = phi i16* [ %47, %46 ], [ %385, %384 ], [ %391, %390 ], [ %397, %396 ]
  %51 = phi i1 [ false, %46 ], [ false, %384 ], [ false, %390 ], [ true, %396 ]
  br i1 %51, label %60, label %52

52:                                               ; preds = %43, %381, %387, %393, %41, %49
  %53 = sub i64 %38, %9
  %54 = ashr exact i64 %53, 1
  %55 = icmp ult i64 %54, 16777215
  %56 = select i1 %55, i64 %54, i64 16777215
  %57 = trunc i64 %56 to i32
  %58 = shl nuw i32 %57, 8
  %59 = or i32 %58, 6
  br label %337

60:                                               ; preds = %396, %49
  %61 = phi i16* [ %50, %49 ], [ %397, %396 ]
  store i16* %61, i16** %1, align 8
  %62 = icmp ult i16* %61, %2
  %63 = ptrtoint i16* %61 to i64
  br i1 %62, label %64, label %254

64:                                               ; preds = %60
  %65 = load i16, i16* %61, align 2
  %66 = icmp ult i16 %65, 33
  br i1 %66, label %70, label %254

67:                                               ; preds = %74
  %68 = load i16, i16* %75, align 2
  %69 = icmp ult i16 %68, 33
  br i1 %69, label %70, label %250

70:                                               ; preds = %64, %67
  %71 = phi i16 [ %68, %67 ], [ %65, %64 ]
  %72 = phi i16* [ %75, %67 ], [ %61, %64 ]
  %73 = phi i64 [ %77, %67 ], [ %63, %64 ]
  switch i16 %71, label %254 [
    i16 32, label %74
    i16 10, label %74
    i16 9, label %74
    i16 13, label %74
    i16 12, label %74
  ]

74:                                               ; preds = %70, %70, %70, %70, %70
  %75 = getelementptr inbounds i16, i16* %72, i64 1
  store i16* %75, i16** %1, align 8
  %76 = icmp ult i16* %75, %2
  %77 = ptrtoint i16* %75 to i64
  br i1 %76, label %67, label %246

78:                                               ; preds = %37
  %79 = ptrtoint i16* %2 to i64
  %80 = ptrtoint i16* %39 to i64
  %81 = sub i64 %79, %80
  %82 = icmp slt i64 %81, 16
  br i1 %82, label %83, label %91

83:                                               ; preds = %78
  %84 = sub i64 %80, %9
  %85 = ashr exact i64 %84, 1
  %86 = icmp ult i64 %85, 16777215
  %87 = select i1 %86, i64 %85, i64 16777215
  %88 = trunc i64 %87 to i32
  %89 = shl nuw i32 %88, 8
  %90 = or i32 %89, 6
  br label %337

91:                                               ; preds = %78
  %92 = getelementptr inbounds i16, i16* %39, i64 1
  %93 = load i16, i16* %92, align 2
  %94 = icmp eq i16 %93, 77
  br i1 %94, label %95, label %103

95:                                               ; preds = %91
  %96 = getelementptr inbounds i16, i16* %39, i64 4
  %97 = load i16, i16* %96, align 2
  %98 = icmp eq i16 %97, 89
  br i1 %98, label %99, label %103

99:                                               ; preds = %95
  %100 = getelementptr inbounds i16, i16* %39, i64 5
  %101 = load i16, i16* %100, align 2
  %102 = icmp eq i16 %101, 77
  br i1 %102, label %111, label %103

103:                                              ; preds = %99, %95, %91
  %104 = sub i64 %38, %9
  %105 = ashr exact i64 %104, 1
  %106 = icmp ult i64 %105, 16777215
  %107 = select i1 %106, i64 %105, i64 16777215
  %108 = trunc i64 %107 to i32
  %109 = shl nuw i32 %108, 8
  %110 = or i32 %109, 6
  br label %337

111:                                              ; preds = %99
  %112 = getelementptr inbounds i16, i16* %39, i64 2
  %113 = load i16, i16* %112, align 2
  switch i16 %113, label %210 [
    i16 105, label %114
    i16 97, label %179
  ]

114:                                              ; preds = %111
  %115 = getelementptr inbounds i16, i16* %39, i64 3
  %116 = load i16, i16* %115, align 2
  switch i16 %116, label %171 [
    i16 110, label %117
    i16 100, label %144
  ]

117:                                              ; preds = %114
  %118 = getelementptr inbounds i16, i16* %39, i64 6
  %119 = load i16, i16* %118, align 2
  switch i16 %119, label %136 [
    i16 105, label %120
    i16 97, label %132
  ]

120:                                              ; preds = %117
  %121 = getelementptr inbounds i16, i16* %39, i64 7
  %122 = load i16, i16* %121, align 2
  switch i16 %122, label %124 [
    i16 110, label %218
    i16 100, label %123
  ]

123:                                              ; preds = %120
  br label %218

124:                                              ; preds = %120
  %125 = sub i64 %80, %9
  %126 = ashr exact i64 %125, 1
  %127 = icmp ult i64 %126, 16777215
  %128 = select i1 %127, i64 %126, i64 16777215
  %129 = trunc i64 %128 to i32
  %130 = shl nuw i32 %129, 8
  %131 = or i32 %130, 6
  br label %337

132:                                              ; preds = %117
  %133 = getelementptr inbounds i16, i16* %39, i64 7
  %134 = load i16, i16* %133, align 2
  %135 = icmp eq i16 %134, 120
  br i1 %135, label %218, label %136

136:                                              ; preds = %117, %132
  %137 = sub i64 %38, %9
  %138 = ashr exact i64 %137, 1
  %139 = icmp ult i64 %138, 16777215
  %140 = select i1 %139, i64 %138, i64 16777215
  %141 = trunc i64 %140 to i32
  %142 = shl nuw i32 %141, 8
  %143 = or i32 %142, 6
  br label %337

144:                                              ; preds = %114
  %145 = getelementptr inbounds i16, i16* %39, i64 6
  %146 = load i16, i16* %145, align 2
  switch i16 %146, label %163 [
    i16 105, label %147
    i16 97, label %159
  ]

147:                                              ; preds = %144
  %148 = getelementptr inbounds i16, i16* %39, i64 7
  %149 = load i16, i16* %148, align 2
  switch i16 %149, label %151 [
    i16 110, label %218
    i16 100, label %150
  ]

150:                                              ; preds = %147
  br label %218

151:                                              ; preds = %147
  %152 = sub i64 %80, %9
  %153 = ashr exact i64 %152, 1
  %154 = icmp ult i64 %153, 16777215
  %155 = select i1 %154, i64 %153, i64 16777215
  %156 = trunc i64 %155 to i32
  %157 = shl nuw i32 %156, 8
  %158 = or i32 %157, 6
  br label %337

159:                                              ; preds = %144
  %160 = getelementptr inbounds i16, i16* %39, i64 7
  %161 = load i16, i16* %160, align 2
  %162 = icmp eq i16 %161, 120
  br i1 %162, label %218, label %163

163:                                              ; preds = %144, %159
  %164 = sub i64 %38, %9
  %165 = ashr exact i64 %164, 1
  %166 = icmp ult i64 %165, 16777215
  %167 = select i1 %166, i64 %165, i64 16777215
  %168 = trunc i64 %167 to i32
  %169 = shl nuw i32 %168, 8
  %170 = or i32 %169, 6
  br label %337

171:                                              ; preds = %114
  %172 = sub i64 %80, %9
  %173 = ashr exact i64 %172, 1
  %174 = icmp ult i64 %173, 16777215
  %175 = select i1 %174, i64 %173, i64 16777215
  %176 = trunc i64 %175 to i32
  %177 = shl nuw i32 %176, 8
  %178 = or i32 %177, 6
  br label %337

179:                                              ; preds = %111
  %180 = getelementptr inbounds i16, i16* %39, i64 3
  %181 = load i16, i16* %180, align 2
  %182 = icmp eq i16 %181, 120
  br i1 %182, label %183, label %210

183:                                              ; preds = %179
  %184 = getelementptr inbounds i16, i16* %39, i64 6
  %185 = load i16, i16* %184, align 2
  switch i16 %185, label %202 [
    i16 105, label %186
    i16 97, label %198
  ]

186:                                              ; preds = %183
  %187 = getelementptr inbounds i16, i16* %39, i64 7
  %188 = load i16, i16* %187, align 2
  switch i16 %188, label %190 [
    i16 110, label %218
    i16 100, label %189
  ]

189:                                              ; preds = %186
  br label %218

190:                                              ; preds = %186
  %191 = sub i64 %80, %9
  %192 = ashr exact i64 %191, 1
  %193 = icmp ult i64 %192, 16777215
  %194 = select i1 %193, i64 %192, i64 16777215
  %195 = trunc i64 %194 to i32
  %196 = shl nuw i32 %195, 8
  %197 = or i32 %196, 6
  br label %337

198:                                              ; preds = %183
  %199 = getelementptr inbounds i16, i16* %39, i64 7
  %200 = load i16, i16* %199, align 2
  %201 = icmp eq i16 %200, 120
  br i1 %201, label %218, label %202

202:                                              ; preds = %183, %198
  %203 = sub i64 %38, %9
  %204 = ashr exact i64 %203, 1
  %205 = icmp ult i64 %204, 16777215
  %206 = select i1 %205, i64 %204, i64 16777215
  %207 = trunc i64 %206 to i32
  %208 = shl nuw i32 %207, 8
  %209 = or i32 %208, 6
  br label %337

210:                                              ; preds = %111, %179
  %211 = sub i64 %38, %9
  %212 = ashr exact i64 %211, 1
  %213 = icmp ult i64 %212, 16777215
  %214 = select i1 %213, i64 %212, i64 16777215
  %215 = trunc i64 %214 to i32
  %216 = shl nuw i32 %215, 8
  %217 = or i32 %216, 6
  br label %337

218:                                              ; preds = %198, %186, %159, %147, %132, %120, %189, %123, %150
  %219 = phi i32 [ 5, %123 ], [ 6, %150 ], [ 7, %189 ], [ 2, %120 ], [ 8, %132 ], [ 3, %147 ], [ 9, %159 ], [ 4, %186 ], [ 10, %198 ]
  %220 = getelementptr inbounds i16, i16* %39, i64 8
  store i16* %220, i16** %1, align 8
  %221 = icmp ult i16* %220, %2
  %222 = ptrtoint i16* %220 to i64
  br i1 %221, label %223, label %254

223:                                              ; preds = %218
  %224 = load i16, i16* %220, align 2
  %225 = icmp ult i16 %224, 33
  br i1 %225, label %229, label %254

226:                                              ; preds = %233
  %227 = load i16, i16* %234, align 2
  %228 = icmp ult i16 %227, 33
  br i1 %228, label %229, label %252

229:                                              ; preds = %223, %226
  %230 = phi i16 [ %227, %226 ], [ %224, %223 ]
  %231 = phi i16* [ %234, %226 ], [ %220, %223 ]
  %232 = phi i64 [ %236, %226 ], [ %222, %223 ]
  switch i16 %230, label %254 [
    i16 32, label %233
    i16 10, label %233
    i16 9, label %233
    i16 13, label %233
    i16 12, label %233
  ]

233:                                              ; preds = %229, %229, %229, %229, %229
  %234 = getelementptr inbounds i16, i16* %231, i64 1
  store i16* %234, i16** %1, align 8
  %235 = icmp ult i16* %234, %2
  %236 = ptrtoint i16* %234 to i64
  br i1 %235, label %226, label %248

237:                                              ; preds = %37
  %238 = ptrtoint i16* %39 to i64
  %239 = sub i64 %238, %9
  %240 = ashr exact i64 %239, 1
  %241 = icmp ult i64 %240, 16777215
  %242 = select i1 %241, i64 %240, i64 16777215
  %243 = trunc i64 %242 to i32
  %244 = shl nuw i32 %243, 8
  %245 = or i32 %244, 6
  br label %337

246:                                              ; preds = %74
  %247 = ptrtoint i16* %75 to i64
  br label %254

248:                                              ; preds = %233
  %249 = ptrtoint i16* %234 to i64
  br label %254

250:                                              ; preds = %67
  %251 = ptrtoint i16* %75 to i64
  br label %254

252:                                              ; preds = %226
  %253 = ptrtoint i16* %234 to i64
  br label %254

254:                                              ; preds = %252, %229, %250, %70, %223, %64, %248, %246, %218, %60
  %255 = phi i64 [ %63, %60 ], [ %222, %218 ], [ %247, %246 ], [ %249, %248 ], [ %63, %64 ], [ %222, %223 ], [ %251, %250 ], [ %73, %70 ], [ %253, %252 ], [ %232, %229 ]
  %256 = phi i16* [ %61, %60 ], [ %220, %218 ], [ %75, %246 ], [ %234, %248 ], [ %61, %64 ], [ %220, %223 ], [ %75, %250 ], [ %72, %70 ], [ %234, %252 ], [ %231, %229 ]
  %257 = phi i32 [ 1, %60 ], [ %219, %218 ], [ 1, %246 ], [ %219, %248 ], [ 1, %64 ], [ %219, %223 ], [ 1, %70 ], [ 1, %250 ], [ %219, %229 ], [ %219, %252 ]
  %258 = icmp ult i16* %256, %2
  br i1 %258, label %259, label %321

259:                                              ; preds = %254
  %260 = load i16, i16* %256, align 2
  switch i16 %260, label %321 [
    i16 109, label %261
    i16 115, label %289
  ]

261:                                              ; preds = %259
  %262 = load i16, i16* %256, align 2
  %263 = icmp eq i16 %262, 109
  br i1 %263, label %264, label %270

264:                                              ; preds = %261
  %265 = getelementptr inbounds i16, i16* %256, i64 1
  %266 = icmp ult i16* %265, %2
  br i1 %266, label %339, label %267

267:                                              ; preds = %354, %348, %342, %264
  %268 = phi i16* [ %265, %264 ], [ %343, %342 ], [ %349, %348 ], [ %355, %354 ]
  %269 = phi i1 [ false, %264 ], [ false, %342 ], [ false, %348 ], [ true, %354 ]
  br i1 %269, label %278, label %270

270:                                              ; preds = %261, %339, %345, %351, %267
  %271 = sub i64 %255, %9
  %272 = ashr exact i64 %271, 1
  %273 = icmp ult i64 %272, 16777215
  %274 = select i1 %273, i64 %272, i64 16777215
  %275 = trunc i64 %274 to i32
  %276 = shl nuw i32 %275, 8
  %277 = or i32 %276, 6
  br label %337

278:                                              ; preds = %354, %267
  %279 = phi i16* [ %268, %267 ], [ %355, %354 ]
  store i16* %279, i16** %1, align 8
  %280 = icmp ult i16* %279, %2
  br i1 %280, label %281, label %321

281:                                              ; preds = %278, %286
  %282 = phi i16* [ %287, %286 ], [ %279, %278 ]
  %283 = load i16, i16* %282, align 2
  %284 = icmp ult i16 %283, 33
  br i1 %284, label %285, label %321

285:                                              ; preds = %281
  switch i16 %283, label %321 [
    i16 32, label %286
    i16 10, label %286
    i16 9, label %286
    i16 13, label %286
    i16 12, label %286
  ]

286:                                              ; preds = %285, %285, %285, %285, %285
  %287 = getelementptr inbounds i16, i16* %282, i64 1
  store i16* %287, i16** %1, align 8
  %288 = icmp ult i16* %287, %2
  br i1 %288, label %281, label %321

289:                                              ; preds = %259
  %290 = load i16, i16* %256, align 2
  %291 = icmp eq i16 %290, 115
  br i1 %291, label %292, label %298

292:                                              ; preds = %289
  %293 = getelementptr inbounds i16, i16* %256, i64 1
  %294 = icmp ult i16* %293, %2
  br i1 %294, label %357, label %295

295:                                              ; preds = %378, %372, %366, %360, %292
  %296 = phi i16* [ %293, %292 ], [ %361, %360 ], [ %367, %366 ], [ %373, %372 ], [ %379, %378 ]
  %297 = phi i1 [ false, %292 ], [ false, %360 ], [ false, %366 ], [ false, %372 ], [ true, %378 ]
  br i1 %297, label %306, label %298

298:                                              ; preds = %289, %357, %363, %369, %375, %295
  %299 = sub i64 %255, %9
  %300 = ashr exact i64 %299, 1
  %301 = icmp ult i64 %300, 16777215
  %302 = select i1 %301, i64 %300, i64 16777215
  %303 = trunc i64 %302 to i32
  %304 = shl nuw i32 %303, 8
  %305 = or i32 %304, 6
  br label %337

306:                                              ; preds = %378, %295
  %307 = phi i16* [ %296, %295 ], [ %379, %378 ]
  store i16* %307, i16** %1, align 8
  %308 = icmp ult i16* %307, %2
  br i1 %308, label %309, label %317

309:                                              ; preds = %306, %314
  %310 = phi i16* [ %315, %314 ], [ %307, %306 ]
  %311 = load i16, i16* %310, align 2
  %312 = icmp ult i16 %311, 33
  br i1 %312, label %313, label %317

313:                                              ; preds = %309
  switch i16 %311, label %317 [
    i16 32, label %314
    i16 10, label %314
    i16 9, label %314
    i16 13, label %314
    i16 12, label %314
  ]

314:                                              ; preds = %313, %313, %313, %313, %313
  %315 = getelementptr inbounds i16, i16* %310, i64 1
  store i16* %315, i16** %1, align 8
  %316 = icmp ult i16* %315, %2
  br i1 %316, label %309, label %317

317:                                              ; preds = %309, %313, %314, %306
  %318 = phi i16* [ %307, %306 ], [ %310, %309 ], [ %310, %313 ], [ %315, %314 ]
  %319 = icmp eq i32 %257, 1
  %320 = select i1 %319, i32 1, i32 2
  br label %321

321:                                              ; preds = %286, %285, %281, %278, %317, %259, %254
  %322 = phi i16* [ %256, %254 ], [ %256, %259 ], [ %318, %317 ], [ %279, %278 ], [ %287, %286 ], [ %282, %285 ], [ %282, %281 ]
  %323 = phi i32 [ 1, %254 ], [ 1, %259 ], [ %320, %317 ], [ 1, %278 ], [ 1, %281 ], [ 1, %285 ], [ 1, %286 ]
  %324 = icmp eq i16* %322, %2
  %325 = xor i1 %3, true
  %326 = or i1 %324, %325
  br i1 %326, label %336, label %327

327:                                              ; preds = %321
  %328 = ptrtoint i16* %322 to i64
  %329 = sub i64 %328, %9
  %330 = ashr exact i64 %329, 1
  %331 = icmp ult i64 %330, 16777215
  %332 = select i1 %331, i64 %330, i64 16777215
  %333 = trunc i64 %332 to i32
  %334 = shl nuw i32 %333, 8
  %335 = or i32 %334, 1
  br label %337

336:                                              ; preds = %321
  store i32 %257, i32* %5, align 8
  store i32 %323, i32* %6, align 4
  br label %337

337:                                              ; preds = %336, %327, %298, %270, %237, %210, %202, %190, %171, %163, %151, %136, %124, %103, %83, %52, %26
  %338 = phi i32 [ %245, %237 ], [ %90, %83 ], [ %217, %210 ], [ %209, %202 ], [ 0, %336 ], [ %335, %327 ], [ %305, %298 ], [ %277, %270 ], [ %197, %190 ], [ %178, %171 ], [ %170, %163 ], [ %158, %151 ], [ %143, %136 ], [ %131, %124 ], [ %110, %103 ], [ %59, %52 ], [ %34, %26 ]
  ret i32 %338

339:                                              ; preds = %264
  %340 = load i16, i16* %265, align 2
  %341 = icmp eq i16 %340, 101
  br i1 %341, label %342, label %270

342:                                              ; preds = %339
  %343 = getelementptr inbounds i16, i16* %256, i64 2
  %344 = icmp ult i16* %343, %2
  br i1 %344, label %345, label %267

345:                                              ; preds = %342
  %346 = load i16, i16* %343, align 2
  %347 = icmp eq i16 %346, 101
  br i1 %347, label %348, label %270

348:                                              ; preds = %345
  %349 = getelementptr inbounds i16, i16* %256, i64 3
  %350 = icmp ult i16* %349, %2
  br i1 %350, label %351, label %267

351:                                              ; preds = %348
  %352 = load i16, i16* %349, align 2
  %353 = icmp eq i16 %352, 116
  br i1 %353, label %354, label %270

354:                                              ; preds = %351
  %355 = getelementptr inbounds i16, i16* %256, i64 4
  %356 = icmp ult i16* %355, %2
  br i1 %356, label %278, label %267

357:                                              ; preds = %292
  %358 = load i16, i16* %293, align 2
  %359 = icmp eq i16 %358, 108
  br i1 %359, label %360, label %298

360:                                              ; preds = %357
  %361 = getelementptr inbounds i16, i16* %256, i64 2
  %362 = icmp ult i16* %361, %2
  br i1 %362, label %363, label %295

363:                                              ; preds = %360
  %364 = load i16, i16* %361, align 2
  %365 = icmp eq i16 %364, 105
  br i1 %365, label %366, label %298

366:                                              ; preds = %363
  %367 = getelementptr inbounds i16, i16* %256, i64 3
  %368 = icmp ult i16* %367, %2
  br i1 %368, label %369, label %295

369:                                              ; preds = %366
  %370 = load i16, i16* %367, align 2
  %371 = icmp eq i16 %370, 99
  br i1 %371, label %372, label %298

372:                                              ; preds = %369
  %373 = getelementptr inbounds i16, i16* %256, i64 4
  %374 = icmp ult i16* %373, %2
  br i1 %374, label %375, label %295

375:                                              ; preds = %372
  %376 = load i16, i16* %373, align 2
  %377 = icmp eq i16 %376, 101
  br i1 %377, label %378, label %298

378:                                              ; preds = %375
  %379 = getelementptr inbounds i16, i16* %256, i64 5
  %380 = icmp ult i16* %379, %2
  br i1 %380, label %306, label %295

381:                                              ; preds = %46
  %382 = load i16, i16* %47, align 2
  %383 = icmp eq i16 %382, 111
  br i1 %383, label %384, label %52

384:                                              ; preds = %381
  %385 = getelementptr inbounds i16, i16* %39, i64 2
  %386 = icmp ult i16* %385, %2
  br i1 %386, label %387, label %49

387:                                              ; preds = %384
  %388 = load i16, i16* %385, align 2
  %389 = icmp eq i16 %388, 110
  br i1 %389, label %390, label %52

390:                                              ; preds = %387
  %391 = getelementptr inbounds i16, i16* %39, i64 3
  %392 = icmp ult i16* %391, %2
  br i1 %392, label %393, label %49

393:                                              ; preds = %390
  %394 = load i16, i16* %391, align 2
  %395 = icmp eq i16 %394, 101
  br i1 %395, label %396, label %52

396:                                              ; preds = %393
  %397 = getelementptr inbounds i16, i16* %39, i64 4
  %398 = icmp ult i16* %397, %2
  br i1 %398, label %60, label %49
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink22SVGPreserveAspectRatio13TransformRectERNS_9FloatRectES2_(%"class.blink::SVGPreserveAspectRatio"* nocapture readonly, %"class.blink::FloatRect"* nocapture dereferenceable(16), %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 1
  br i1 %6, label %104, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1
  %9 = bitcast %"class.blink::FloatSize"* %8 to <2 x float>*
  %10 = load <2 x float>, <2 x float>* %9, align 4
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %14 = load float, float* %13, align 4
  %15 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 4
  %17 = extractelement <2 x float> %10, i32 0
  switch i32 %16, label %104 [
    i32 2, label %55
    i32 1, label %18
  ]

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1, i32 1
  %20 = load float, float* %19, align 4
  %21 = fdiv float %20, %17
  %22 = fmul float %12, %21
  %23 = fcmp ogt float %14, %22
  br i1 %23, label %24, label %38

24:                                               ; preds = %18
  store float %22, float* %13, align 4
  %25 = load i32, i32* %4, align 8
  switch i32 %25, label %38 [
    i32 5, label %26
    i32 6, label %26
    i32 7, label %26
    i32 8, label %33
    i32 9, label %33
    i32 10, label %33
  ]

26:                                               ; preds = %24, %24, %24
  %27 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = fmul float %14, 5.000000e-01
  %30 = fadd float %29, %28
  %31 = fmul float %22, 5.000000e-01
  %32 = fsub float %30, %31
  store float %32, float* %27, align 4
  br label %38

33:                                               ; preds = %24, %24, %24
  %34 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 1
  %35 = load float, float* %34, align 4
  %36 = fadd float %14, %35
  %37 = fsub float %36, %22
  store float %37, float* %34, align 4
  br label %38

38:                                               ; preds = %26, %33, %24, %18
  %39 = fdiv float %14, %21
  %40 = fcmp ogt float %12, %39
  br i1 %40, label %41, label %104

41:                                               ; preds = %38
  store float %39, float* %11, align 4
  %42 = load i32, i32* %4, align 8
  switch i32 %42, label %104 [
    i32 3, label %43
    i32 6, label %43
    i32 9, label %43
    i32 4, label %50
    i32 7, label %50
    i32 10, label %50
  ]

43:                                               ; preds = %41, %41, %41
  %44 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %45 = load float, float* %44, align 4
  %46 = fmul float %12, 5.000000e-01
  %47 = fadd float %46, %45
  %48 = fmul float %39, 5.000000e-01
  %49 = fsub float %47, %48
  store float %49, float* %44, align 4
  br label %104

50:                                               ; preds = %41, %41, %41
  %51 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 0, i32 0
  %52 = load float, float* %51, align 4
  %53 = fadd float %12, %52
  %54 = fsub float %53, %39
  store float %54, float* %51, align 4
  br label %104

55:                                               ; preds = %7
  %56 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1, i32 1
  %57 = load float, float* %56, align 4
  %58 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1, i32 0
  %59 = fdiv float %57, %17
  %60 = fmul float %12, %59
  %61 = fcmp olt float %14, %60
  br i1 %61, label %62, label %80

62:                                               ; preds = %55
  %63 = fdiv float %17, %12
  %64 = fmul float %14, %63
  store float %64, float* %56, align 4
  %65 = load i32, i32* %4, align 8
  switch i32 %65, label %80 [
    i32 5, label %66
    i32 6, label %66
    i32 7, label %66
    i32 8, label %74
    i32 9, label %74
    i32 10, label %74
  ]

66:                                               ; preds = %62, %62, %62
  %67 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 0, i32 1
  %68 = load float, float* %67, align 4
  %69 = extractelement <2 x float> %10, i32 1
  %70 = fmul float %69, 5.000000e-01
  %71 = fadd float %70, %68
  %72 = fmul float %64, 5.000000e-01
  %73 = fsub float %71, %72
  store float %73, float* %67, align 4
  br label %80

74:                                               ; preds = %62, %62, %62
  %75 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 0, i32 1
  %76 = load float, float* %75, align 4
  %77 = extractelement <2 x float> %10, i32 1
  %78 = fadd float %77, %76
  %79 = fsub float %78, %64
  store float %79, float* %75, align 4
  br label %80

80:                                               ; preds = %66, %74, %62, %55
  %81 = phi float [ %64, %66 ], [ %64, %74 ], [ %64, %62 ], [ %57, %55 ]
  %82 = fdiv float %14, %59
  %83 = fcmp olt float %12, %82
  br i1 %83, label %84, label %104

84:                                               ; preds = %80
  %85 = load float, float* %13, align 4
  %86 = fdiv float %81, %85
  %87 = load float, float* %11, align 4
  %88 = fmul float %87, %86
  store float %88, float* %58, align 4
  %89 = load i32, i32* %4, align 8
  switch i32 %89, label %104 [
    i32 3, label %90
    i32 6, label %90
    i32 9, label %90
    i32 4, label %98
    i32 7, label %98
    i32 10, label %98
  ]

90:                                               ; preds = %84, %84, %84
  %91 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 0, i32 0
  %92 = load float, float* %91, align 4
  %93 = extractelement <2 x float> %10, i32 0
  %94 = fmul float %93, 5.000000e-01
  %95 = fadd float %94, %92
  %96 = fmul float %88, 5.000000e-01
  %97 = fsub float %95, %96
  store float %97, float* %91, align 4
  br label %104

98:                                               ; preds = %84, %84, %84
  %99 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 0, i32 0
  %100 = load float, float* %99, align 4
  %101 = extractelement <2 x float> %10, i32 0
  %102 = fadd float %101, %100
  %103 = fsub float %102, %88
  store float %103, float* %99, align 4
  br label %104

104:                                              ; preds = %7, %43, %50, %41, %38, %90, %98, %84, %80, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink22SVGPreserveAspectRatio16ComputeTransformERKNS_9FloatRectERKNS_9FloatSizeE(%"class.blink::AffineTransform"* noalias sret, %"class.blink::SVGPreserveAspectRatio"* nocapture readonly, %"class.blink::FloatRect"* nocapture readonly dereferenceable(16), %"class.blink::FloatSize"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %5 = bitcast %"class.blink::FloatRect"* %2 to <2 x float>*
  %6 = load <2 x float>, <2 x float>* %5, align 4
  %7 = shufflevector <2 x float> %6, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %8 = fpext <2 x float> %7 to <2 x double>
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %2, i64 0, i32 1, i32 1
  %12 = load float, float* %11, align 4
  %13 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %3, i64 0, i32 0
  %14 = load float, float* %13, align 4
  %15 = insertelement <2 x float> undef, float %10, i32 0
  %16 = insertelement <2 x float> %15, float %14, i32 1
  %17 = fpext <2 x float> %16 to <2 x double>
  %18 = getelementptr inbounds %"class.blink::FloatSize", %"class.blink::FloatSize"* %3, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = insertelement <2 x float> undef, float %12, i32 0
  %21 = insertelement <2 x float> %20, float %19, i32 1
  %22 = fpext <2 x float> %21 to <2 x double>
  %23 = bitcast %"class.blink::AffineTransform"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 -1, i64 48, i1 false)
  tail call void @_ZN5blink15AffineTransformC1Ev(%"class.blink::AffineTransform"* %0) #11
  %24 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %1, i64 0, i32 1
  %25 = load i32, i32* %24, align 8
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %36

27:                                               ; preds = %4
  %28 = extractelement <2 x double> %17, i32 0
  %29 = extractelement <2 x double> %17, i32 1
  %30 = fdiv double %29, %28
  %31 = extractelement <2 x double> %22, i32 0
  %32 = extractelement <2 x double> %22, i32 1
  %33 = fdiv double %32, %31
  %34 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform15ScaleNonUniformEdd(%"class.blink::AffineTransform"* %0, double %30, double %33) #11
  %35 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %8
  br label %125

36:                                               ; preds = %4
  %37 = fdiv <2 x double> %17, %22
  %38 = extractelement <2 x double> %37, i32 0
  %39 = extractelement <2 x double> %37, i32 1
  %40 = fcmp olt double %38, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %36
  %42 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %1, i64 0, i32 2
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 1
  br i1 %44, label %51, label %45

45:                                               ; preds = %41, %36
  %46 = fcmp ult double %38, %39
  br i1 %46, label %90, label %47

47:                                               ; preds = %45
  %48 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %1, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %49, 2
  br i1 %50, label %51, label %90

51:                                               ; preds = %47, %41
  %52 = extractelement <2 x double> %22, i32 0
  %53 = extractelement <2 x double> %22, i32 1
  %54 = fdiv double %53, %52
  %55 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform15ScaleNonUniformEdd(%"class.blink::AffineTransform"* %0, double %54, double %54) #11
  %56 = load i32, i32* %24, align 8
  switch i32 %56, label %75 [
    i32 2, label %57
    i32 5, label %57
    i32 8, label %57
    i32 3, label %59
    i32 6, label %59
    i32 9, label %59
  ]

57:                                               ; preds = %51, %51, %51
  %58 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %8
  br label %125

59:                                               ; preds = %51, %51, %51
  %60 = extractelement <2 x double> %8, i32 1
  %61 = fsub double -0.000000e+00, %60
  %62 = extractelement <2 x double> %17, i32 1
  %63 = extractelement <2 x double> %22, i32 0
  %64 = fmul double %63, %62
  %65 = extractelement <2 x double> %22, i32 1
  %66 = fdiv double %64, %65
  %67 = extractelement <2 x double> %17, i32 0
  %68 = fsub double %67, %66
  %69 = fmul double %68, 5.000000e-01
  %70 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %61, i32 1
  %71 = extractelement <2 x double> %8, i32 0
  %72 = insertelement <2 x double> undef, double %71, i32 0
  %73 = insertelement <2 x double> %72, double %69, i32 1
  %74 = fsub <2 x double> %70, %73
  br label %125

75:                                               ; preds = %51
  %76 = extractelement <2 x double> %8, i32 1
  %77 = fsub double -0.000000e+00, %76
  %78 = extractelement <2 x double> %17, i32 1
  %79 = extractelement <2 x double> %22, i32 0
  %80 = fmul double %79, %78
  %81 = extractelement <2 x double> %22, i32 1
  %82 = fdiv double %80, %81
  %83 = extractelement <2 x double> %17, i32 0
  %84 = fsub double %83, %82
  %85 = insertelement <2 x double> <double -0.000000e+00, double undef>, double %77, i32 1
  %86 = extractelement <2 x double> %8, i32 0
  %87 = insertelement <2 x double> undef, double %86, i32 0
  %88 = insertelement <2 x double> %87, double %84, i32 1
  %89 = fsub <2 x double> %85, %88
  br label %125

90:                                               ; preds = %45, %47
  %91 = extractelement <2 x double> %17, i32 0
  %92 = extractelement <2 x double> %17, i32 1
  %93 = fdiv double %92, %91
  %94 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform15ScaleNonUniformEdd(%"class.blink::AffineTransform"* %0, double %93, double %93) #11
  %95 = load i32, i32* %24, align 8
  switch i32 %95, label %112 [
    i32 2, label %96
    i32 3, label %96
    i32 4, label %96
    i32 5, label %98
    i32 6, label %98
    i32 7, label %98
  ]

96:                                               ; preds = %90, %90, %90
  %97 = fsub <2 x double> <double -0.000000e+00, double -0.000000e+00>, %8
  br label %125

98:                                               ; preds = %90, %90, %90
  %99 = extractelement <2 x double> %8, i32 0
  %100 = fsub double -0.000000e+00, %99
  %101 = extractelement <2 x double> %17, i32 0
  %102 = extractelement <2 x double> %22, i32 1
  %103 = fmul double %101, %102
  %104 = extractelement <2 x double> %17, i32 1
  %105 = fdiv double %103, %104
  %106 = extractelement <2 x double> %22, i32 0
  %107 = fsub double %106, %105
  %108 = fmul double %107, 5.000000e-01
  %109 = insertelement <2 x double> <double undef, double -0.000000e+00>, double %100, i32 0
  %110 = insertelement <2 x double> %8, double %108, i32 0
  %111 = fsub <2 x double> %109, %110
  br label %125

112:                                              ; preds = %90
  %113 = extractelement <2 x double> %8, i32 0
  %114 = fsub double -0.000000e+00, %113
  %115 = extractelement <2 x double> %17, i32 0
  %116 = extractelement <2 x double> %22, i32 1
  %117 = fmul double %115, %116
  %118 = extractelement <2 x double> %17, i32 1
  %119 = fdiv double %117, %118
  %120 = extractelement <2 x double> %22, i32 0
  %121 = fsub double %120, %119
  %122 = insertelement <2 x double> <double undef, double -0.000000e+00>, double %114, i32 0
  %123 = insertelement <2 x double> %8, double %121, i32 0
  %124 = fsub <2 x double> %122, %123
  br label %125

125:                                              ; preds = %59, %75, %57, %98, %112, %96, %27
  %126 = phi <2 x double> [ %74, %59 ], [ %89, %75 ], [ %58, %57 ], [ %111, %98 ], [ %124, %112 ], [ %97, %96 ], [ %35, %27 ]
  %127 = extractelement <2 x double> %126, i32 0
  %128 = extractelement <2 x double> %126, i32 1
  %129 = tail call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform9TranslateEdd(%"class.blink::AffineTransform"* %0, double %128, double %127) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN5blink15AffineTransformC1Ev(%"class.blink::AffineTransform"*) unnamed_addr #4

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform15ScaleNonUniformEdd(%"class.blink::AffineTransform"*, double, double) local_unnamed_addr #4

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform9TranslateEdd(%"class.blink::AffineTransform"*, double, double) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZNK5blink22SVGPreserveAspectRatio13ValueAsStringEv(%"class.blink::SVGPreserveAspectRatio"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = alloca %"class.WTF::StringBuilder", align 8
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = bitcast %"class.WTF::StringBuilder"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %5) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 48, i1 false)
  %6 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %6, align 8
  %7 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 1
  %8 = bitcast %union.anon* %7 to i8*
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 2
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 3
  store i8 1, i8* %10, align 4
  %11 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %2, i64 0, i32 4
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ult i32 %13, 11
  br i1 %14, label %15, label %19

15:                                               ; preds = %1
  %16 = sext i32 %13 to i64
  %17 = getelementptr inbounds [11 x i8*], [11 x i8*]* @switch.table._ZNK5blink22SVGPreserveAspectRatio13ValueAsStringEv, i64 0, i64 %16
  %18 = load i8*, i8** %17, align 8
  br label %19

19:                                               ; preds = %15, %1
  %20 = phi i8* [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0), %1 ], [ %18, %15 ]
  %21 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #11
  %22 = tail call i64 @strlen(i8* nonnull %20) #12
  %23 = icmp ult i64 %22, 4294967296
  br i1 %23, label %25, label %24, !prof !2

24:                                               ; preds = %19
  tail call void @llvm.trap() #11
  unreachable

25:                                               ; preds = %19
  %26 = trunc i64 %22 to i32
  %27 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %28 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* %20, i8** %29, align 8
  %30 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 %26, i32* %30, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %3)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #11
  %31 = getelementptr inbounds %"class.blink::SVGPreserveAspectRatio", %"class.blink::SVGPreserveAspectRatio"* %0, i64 0, i32 2
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 1
  %34 = select i1 %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0)
  %35 = icmp eq i32 %32, 2
  %36 = select i1 %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0), i8* %34
  %37 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #11
  %38 = call i64 @strlen(i8* nonnull %36) #12
  %39 = icmp ult i64 %38, 4294967296
  br i1 %39, label %41, label %40, !prof !2

40:                                               ; preds = %25
  call void @llvm.trap() #11
  unreachable

41:                                               ; preds = %25
  %42 = trunc i64 %38 to i32
  %43 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %44 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %43, i64* %44, align 8
  %45 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* %36, i8** %45, align 8
  %46 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %42, i32* %46, align 8
  call void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"* nonnull %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #11
  %47 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %2) #11
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %2) #11
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %63, label %50

50:                                               ; preds = %41
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  br i1 %54, label %57, label %59

57:                                               ; preds = %50
  %58 = add i32 %56, -1
  store i32 %58, i32* %55, align 4
  br label %59

59:                                               ; preds = %57, %50
  %60 = phi i32 [ %58, %57 ], [ %56, %50 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %48) #11
  br label %63

63:                                               ; preds = %41, %59, %62
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %5) #11
  ret %"class.WTF::StringImpl"* %47
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendERKNS_10StringViewE(%"class.WTF::StringBuilder"*, %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %81, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %1, i64 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = icmp eq i8* %12, %10
  %14 = bitcast i8* %12 to i16*
  br i1 %13, label %15, label %20

15:                                               ; preds = %6
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %4, %17
  %19 = select i1 %18, %"class.WTF::StringImpl"* %8, %"class.WTF::StringImpl"* null
  br label %20

20:                                               ; preds = %6, %15
  %21 = phi %"class.WTF::StringImpl"* [ %19, %15 ], [ null, %6 ]
  %22 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %74

25:                                               ; preds = %20
  %26 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %27 = load i8, i8* %26, align 1, !range !3
  %28 = icmp eq i8 %27, 0
  %29 = icmp ne %"class.WTF::StringImpl"* %21, null
  %30 = and i1 %29, %28
  br i1 %30, label %31, label %74

31:                                               ; preds = %25
  %32 = ptrtoint %"class.WTF::StringImpl"* %21 to i64
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 2
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %49

37:                                               ; preds = %31
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = zext i32 %39 to i33
  %41 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %40, i33 1) #11
  %42 = extractvalue { i33, i1 } %41, 1
  %43 = extractvalue { i33, i1 } %41, 0
  %44 = icmp slt i33 %43, 0
  %45 = or i1 %42, %44
  br i1 %45, label %46, label %47, !prof !4

46:                                               ; preds = %37
  tail call void @llvm.trap() #11
  unreachable

47:                                               ; preds = %37
  %48 = trunc i33 %43 to i32
  store i32 %48, i32* %38, align 4
  br label %49

49:                                               ; preds = %31, %47
  %50 = bitcast %"class.WTF::StringBuilder"* %0 to i64*
  %51 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 0, i32 0, i32 0
  %52 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %51, align 8
  store i64 %32, i64* %50, align 8
  %53 = icmp eq %"class.WTF::StringImpl"* %52, null
  br i1 %53, label %67, label %54

54:                                               ; preds = %49
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %56 = load atomic i32, i32* %55 monotonic, align 4
  %57 = and i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %52, i64 0, i32 0
  %60 = load i32, i32* %59, align 4
  br i1 %58, label %61, label %63

61:                                               ; preds = %54
  %62 = add i32 %60, -1
  store i32 %62, i32* %59, align 4
  br label %63

63:                                               ; preds = %61, %54
  %64 = phi i32 [ %62, %61 ], [ %60, %54 ]
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %52) #11
  br label %67

67:                                               ; preds = %66, %63, %49
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %21, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  store i32 %69, i32* %22, align 8
  %70 = load atomic i32, i32* %33 monotonic, align 4
  %71 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %72 = trunc i32 %70 to i8
  %73 = and i8 %72, 1
  store i8 %73, i8* %71, align 4
  br label %81

74:                                               ; preds = %20, %25
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %80, label %79

79:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"* %0, i8* %12, i32 %4) #11
  br label %81

80:                                               ; preds = %74
  tail call void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"* %0, i16* %14, i32 %4) #11
  br label %81

81:                                               ; preds = %67, %80, %79, %2
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink22SVGPreserveAspectRatio3AddEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGPreserveAspectRatio"* nocapture, %"class.blink::SVGPropertyBase"* nocapture, %"class.blink::SVGElement"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink22SVGPreserveAspectRatio22CalculateAnimatedValueERKNS_29SMILAnimationEffectParametersEfjPKNS_15SVGPropertyBaseES6_S6_PKNS_10SVGElementE(%"class.blink::SVGPreserveAspectRatio"* nocapture, %"struct.blink::SMILAnimationEffectParameters"* nocapture, float, i32, %"class.blink::SVGPropertyBase"* nocapture, %"class.blink::SVGPropertyBase"* nocapture, %"class.blink::SVGPropertyBase"* nocapture, %"class.blink::SVGElement"* nocapture) unnamed_addr #5 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden float @_ZNK5blink22SVGPreserveAspectRatio17CalculateDistanceEPKNS_15SVGPropertyBaseEPKNS_10SVGElementE(%"class.blink::SVGPreserveAspectRatio"* nocapture readnone, %"class.blink::SVGPropertyBase"* nocapture readnone, %"class.blink::SVGElement"* nocapture readnone) unnamed_addr #5 align 2 {
  ret float -1.000000e+00
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15SVGPropertyBaseD2Ev(%"class.blink::SVGPropertyBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink22SVGPreserveAspectRatioD0Ev(%"class.blink::SVGPreserveAspectRatio"*) unnamed_addr #6 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.blink::SVGPropertyBase"* @_ZNK5blink17SVGPropertyHelperINS_22SVGPreserveAspectRatioEE17CloneForAnimationERKN3WTF6StringE(%"class.blink::SVGPropertyHelper"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1 comdat align 2 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64 16) #11
  %6 = bitcast i8* %5 to %"class.blink::SVGPreserveAspectRatio"*
  %7 = bitcast i8* %5 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [12 x i8*] }, { [12 x i8*] }* @_ZTVN5blink22SVGPreserveAspectRatioE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i32*
  store i32 6, i32* %9, align 8
  %10 = getelementptr inbounds i8, i8* %5, i64 12
  %11 = bitcast i8* %10 to i32*
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds i8, i8* %5, i64 -4
  %13 = bitcast i8* %12 to i16*
  %14 = load atomic i16, i16* %13 monotonic, align 2
  %15 = or i16 %14, 1
  store atomic i16 %15, i16* %13 release, align 2
  store i32 6, i32* %9, align 8
  store i32 1, i32* %11, align 4
  %16 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = icmp eq %"class.WTF::StringImpl"* %17, null
  br i1 %18, label %43, label %19

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %43, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 1
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %17, i64 1
  br i1 %27, label %36, label %29

29:                                               ; preds = %23
  %30 = bitcast %"class.WTF::StringImpl"* %28 to i8*
  %31 = zext i32 %21 to i64
  %32 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #11
  %33 = bitcast i8** %3 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %28, %"class.WTF::StringImpl"** %33, align 8
  %34 = getelementptr inbounds i8, i8* %30, i64 %31
  %35 = call i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIhEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"* %6, i8** nonnull dereferenceable(8) %3, i8* %34, i1 zeroext true) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #11
  br label %43

36:                                               ; preds = %23
  %37 = bitcast %"class.WTF::StringImpl"* %28 to i16*
  %38 = zext i32 %21 to i64
  %39 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #11
  %40 = bitcast i16** %4 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %28, %"class.WTF::StringImpl"** %40, align 8
  %41 = getelementptr inbounds i16, i16* %37, i64 %38
  %42 = call i32 @_ZN5blink22SVGPreserveAspectRatio13ParseInternalIDsEENS_15SVGParsingErrorERPKT_S5_b(%"class.blink::SVGPreserveAspectRatio"* %6, i16** nonnull dereferenceable(8) %4, i16* %41, i1 zeroext true) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #11
  br label %43

43:                                               ; preds = %2, %19, %29, %36
  %44 = bitcast i8* %5 to %"class.blink::SVGPropertyBase"*
  ret %"class.blink::SVGPropertyBase"* %44
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK5blink17SVGPropertyHelperINS_22SVGPreserveAspectRatioEE7GetTypeEv(%"class.blink::SVGPropertyHelper"*) unnamed_addr #1 comdat align 2 {
  ret i32 15
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink15SVGPropertyBase5TraceEPNS_7VisitorE(%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #7

declare void @_ZN3WTF13StringBuilder6AppendEPKhj(%"class.WTF::StringBuilder"*, i8*, i32) local_unnamed_addr #4

declare void @_ZN3WTF13StringBuilder6AppendEPKDsj(%"class.WTF::StringBuilder"*, i16*, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #8

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #9

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_15SVGPropertyBaseEEEPhm(i64) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #11
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !4

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #11
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #11
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_15SVGPropertyBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #11
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #11
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #11
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #11
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #11
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0), i8* %40, i8* %41) #11
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #11
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #11
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.15, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #11
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #11
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #11
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !4

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #11
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #10

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_15SVGPropertyBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #1 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::SVGPropertyBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %5, i64 8
  %7 = load void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::SVGPropertyBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::SVGPropertyBase"* %3, %"class.blink::Visitor"* %0) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_15SVGPropertyBaseEE8FinalizeEPv(i8*) #1 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::SVGPropertyBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::SVGPropertyBase"*)***
  %4 = load void (%"class.blink::SVGPropertyBase"*)**, void (%"class.blink::SVGPropertyBase"*)*** %3, align 8
  %5 = load void (%"class.blink::SVGPropertyBase"*)*, void (%"class.blink::SVGPropertyBase"*)** %4, align 8
  tail call void %5(%"class.blink::SVGPropertyBase"* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_15SVGPropertyBaseEE7GetNameEPKv(i8*) #1 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #4

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
