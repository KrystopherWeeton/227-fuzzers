; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_picklpf.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_picklpf.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_pick_filter_level(%struct.yv12_buffer_config*, %struct.VP9_COMP*, i32) local_unnamed_addr #0 {
  %4 = alloca [64 x i64], align 16
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 68
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 68, i32 2
  store i32 0, i32* %6, align 8
  %7 = icmp eq i32 %2, 3
  br i1 %7, label %8, label %13

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.loopfilter, %struct.loopfilter* %5, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %15, label %12

12:                                               ; preds = %8
  store i32 0, i32* %9, align 8
  br label %215

13:                                               ; preds = %3
  %14 = icmp ugt i32 %2, 1
  br i1 %14, label %15, label %93

15:                                               ; preds = %8, %13
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 9, i32 16
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 2
  br i1 %18, label %19, label %29

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 23
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 94, i32 1
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 94, i32 0
  %25 = select i1 %22, i32* %23, i32* %24
  %26 = load i32, i32* %25, align 4
  %27 = icmp ugt i32 %26, 8
  %28 = select i1 %27, i32 47, i32 63
  br label %29

29:                                               ; preds = %15, %19
  %30 = phi i32 [ %28, %19 ], [ 63, %15 ]
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 38
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 80
  %34 = load i32, i32* %33, align 16
  %35 = tail call signext i16 @vp9_ac_quant(i32 %32, i32 0, i32 %34) #3
  %36 = sext i16 %35 to i32
  %37 = load i32, i32* %33, align 16
  switch i32 %37, label %39 [
    i32 8, label %40
    i32 10, label %38
  ]

38:                                               ; preds = %29
  br label %40

39:                                               ; preds = %29
  br label %40

40:                                               ; preds = %29, %39, %38
  %41 = phi i32 [ 18339678, %39 ], [ 4584920, %38 ], [ 1146230, %29 ]
  %42 = phi i32 [ 22, %39 ], [ 20, %38 ], [ 18, %29 ]
  %43 = mul nsw i32 %36, 20723
  %44 = add nsw i32 %43, %41
  %45 = ashr i32 %44, %42
  %46 = load i32, i32* %16, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %81

48:                                               ; preds = %40
  %49 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 9, i32 20
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %81

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 9, i32 31
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 3
  br i1 %55, label %56, label %81

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 69, i32 0
  %58 = load i8, i8* %57, align 8
  %59 = icmp eq i8 %58, 0
  br i1 %59, label %81, label %60

60:                                               ; preds = %56
  %61 = load i32, i32* %31, align 4
  %62 = icmp slt i32 %61, 200
  br i1 %62, label %70, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 3
  %65 = load i32, i32* %64, align 16
  %66 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 4
  %67 = load i32, i32* %66, align 4
  %68 = mul nsw i32 %67, %65
  %69 = icmp sgt i32 %68, 76800
  br i1 %69, label %70, label %81

70:                                               ; preds = %63, %60
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 9, i32 62
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %81, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 23
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %74
  %79 = mul nsw i32 %45, 5
  %80 = ashr i32 %79, 3
  br label %81

81:                                               ; preds = %74, %70, %56, %78, %63, %52, %48, %40
  %82 = phi i32 [ %80, %78 ], [ %45, %74 ], [ %45, %70 ], [ %45, %63 ], [ %45, %56 ], [ %45, %52 ], [ %45, %48 ], [ %45, %40 ]
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 23
  %84 = load i32, i32* %83, align 4
  %85 = icmp eq i32 %84, 0
  %86 = add nsw i32 %82, -4
  %87 = select i1 %85, i32 %86, i32 %82
  %88 = icmp slt i32 %87, 0
  %89 = icmp sgt i32 %87, %30
  %90 = select i1 %89, i32 %30, i32 %87
  %91 = select i1 %88, i32 0, i32 %90
  %92 = getelementptr inbounds %struct.loopfilter, %struct.loopfilter* %5, i64 0, i32 0
  store i32 %91, i32* %92, align 8
  br label %215

93:                                               ; preds = %13
  %94 = icmp eq i32 %2, 1
  %95 = zext i1 %94 to i32
  %96 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 9, i32 16
  %97 = load i32, i32* %96, align 4
  %98 = icmp eq i32 %97, 2
  %99 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 23
  %100 = load i32, i32* %99, align 4
  br i1 %98, label %101, label %109

101:                                              ; preds = %93
  %102 = icmp eq i32 %100, 0
  %103 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 94, i32 1
  %104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 94, i32 0
  %105 = select i1 %102, i32* %103, i32* %104
  %106 = load i32, i32* %105, align 4
  %107 = icmp ugt i32 %106, 8
  %108 = select i1 %107, i32 47, i32 63
  br label %109

109:                                              ; preds = %93, %101
  %110 = phi i32 [ %108, %101 ], [ 63, %93 ]
  %111 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 68, i32 1
  %112 = load i32, i32* %111, align 4
  %113 = icmp slt i32 %112, 0
  %114 = icmp sgt i32 %112, %110
  %115 = select i1 %114, i32 %110, i32 %112
  %116 = select i1 %113, i32 0, i32 %115
  %117 = icmp slt i32 %116, 16
  %118 = sdiv i32 %116, 4
  %119 = bitcast [64 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %119) #3
  %120 = icmp eq i32 %100, 0
  %121 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 94, i32 1
  %122 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 94, i32 0
  %123 = select i1 %120, i32* %121, i32* %122
  %124 = load i32, i32* %123, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %119, i8 -1, i64 512, i1 false) #3
  %125 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 12
  %126 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %125, align 8
  %127 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 54
  tail call void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config* %126, %struct.yv12_buffer_config* %127) #3
  %128 = tail call fastcc i64 @try_filter_frame(%struct.yv12_buffer_config* %0, %struct.VP9_COMP* %1, i32 %116, i32 %95) #3
  %129 = sext i32 %116 to i64
  %130 = getelementptr inbounds [64 x i64], [64 x i64]* %4, i64 0, i64 %129
  store i64 %128, i64* %130, align 8
  %131 = select i1 %117, i32 4, i32 %118
  %132 = icmp sgt i32 %131, 0
  br i1 %132, label %133, label %212

133:                                              ; preds = %109
  %134 = icmp ult i32 %124, 20
  %135 = zext i32 %124 to i64
  %136 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 37
  br label %137

137:                                              ; preds = %202, %133
  %138 = phi i32 [ %131, %133 ], [ %210, %202 ]
  %139 = phi i32 [ %116, %133 ], [ %204, %202 ]
  %140 = phi i64 [ %128, %133 ], [ %203, %202 ]
  %141 = phi i32 [ 0, %133 ], [ %208, %202 ]
  %142 = add nsw i32 %139, %138
  %143 = icmp slt i32 %142, %110
  %144 = select i1 %143, i32 %142, i32 %110
  %145 = sub nsw i32 %139, %138
  %146 = icmp sgt i32 %145, 0
  %147 = select i1 %146, i32 %145, i32 0
  %148 = sdiv i32 %139, 8
  %149 = sub nsw i32 15, %148
  %150 = zext i32 %149 to i64
  %151 = ashr i64 %140, %150
  %152 = sext i32 %138 to i64
  %153 = mul nsw i64 %151, %152
  %154 = load i32, i32* %96, align 4
  %155 = icmp eq i32 %154, 2
  %156 = and i1 %134, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %137
  %158 = mul nsw i64 %153, %135
  %159 = sdiv i64 %158, 20
  br label %160

160:                                              ; preds = %157, %137
  %161 = phi i64 [ %159, %157 ], [ %153, %137 ]
  %162 = load i32, i32* %136, align 16
  %163 = icmp ne i32 %162, 0
  %164 = zext i1 %163 to i64
  %165 = ashr i64 %161, %164
  %166 = icmp sgt i32 %141, 0
  %167 = icmp eq i32 %147, %139
  %168 = or i1 %166, %167
  br i1 %168, label %183, label %169

169:                                              ; preds = %160
  %170 = zext i32 %147 to i64
  %171 = getelementptr inbounds [64 x i64], [64 x i64]* %4, i64 0, i64 %170
  %172 = load i64, i64* %171, align 8
  %173 = icmp slt i64 %172, 0
  br i1 %173, label %174, label %176

174:                                              ; preds = %169
  %175 = tail call fastcc i64 @try_filter_frame(%struct.yv12_buffer_config* %0, %struct.VP9_COMP* %1, i32 %147, i32 %95) #3
  store i64 %175, i64* %171, align 8
  br label %176

176:                                              ; preds = %174, %169
  %177 = phi i64 [ %175, %174 ], [ %172, %169 ]
  %178 = sub nsw i64 %177, %165
  %179 = icmp slt i64 %178, %140
  br i1 %179, label %180, label %183

180:                                              ; preds = %176
  %181 = icmp slt i64 %177, %140
  %182 = select i1 %181, i64 %177, i64 %140
  br label %183

183:                                              ; preds = %180, %176, %160
  %184 = phi i64 [ %182, %180 ], [ %140, %176 ], [ %140, %160 ]
  %185 = phi i32 [ %147, %180 ], [ %139, %176 ], [ %139, %160 ]
  %186 = icmp slt i32 %141, 0
  %187 = icmp eq i32 %144, %139
  %188 = or i1 %186, %187
  br i1 %188, label %202, label %189

189:                                              ; preds = %183
  %190 = sext i32 %144 to i64
  %191 = getelementptr inbounds [64 x i64], [64 x i64]* %4, i64 0, i64 %190
  %192 = load i64, i64* %191, align 8
  %193 = icmp slt i64 %192, 0
  br i1 %193, label %194, label %196

194:                                              ; preds = %189
  %195 = tail call fastcc i64 @try_filter_frame(%struct.yv12_buffer_config* %0, %struct.VP9_COMP* %1, i32 %144, i32 %95) #3
  store i64 %195, i64* %191, align 8
  br label %196

196:                                              ; preds = %194, %189
  %197 = phi i64 [ %195, %194 ], [ %192, %189 ]
  %198 = sub nsw i64 %184, %165
  %199 = icmp slt i64 %197, %198
  %200 = select i1 %199, i64 %197, i64 %184
  %201 = select i1 %199, i32 %144, i32 %185
  br label %202

202:                                              ; preds = %196, %183
  %203 = phi i64 [ %184, %183 ], [ %200, %196 ]
  %204 = phi i32 [ %185, %183 ], [ %201, %196 ]
  %205 = icmp eq i32 %204, %139
  %206 = icmp slt i32 %204, %139
  %207 = select i1 %206, i32 -1, i32 1
  %208 = select i1 %205, i32 0, i32 %207
  %209 = zext i1 %205 to i32
  %210 = lshr i32 %138, %209
  %211 = icmp sgt i32 %210, 0
  br i1 %211, label %137, label %212

212:                                              ; preds = %202, %109
  %213 = phi i32 [ %116, %109 ], [ %204, %202 ]
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %119) #3
  %214 = getelementptr inbounds %struct.loopfilter, %struct.loopfilter* %5, i64 0, i32 0
  store i32 %213, i32* %214, align 8
  br label %215

215:                                              ; preds = %81, %212, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare signext i16 @vp9_ac_quant(i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @try_filter_frame(%struct.yv12_buffer_config*, %struct.VP9_COMP*, i32, i32) unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8
  tail call void @vp9_build_mask_frame(%struct.VP9Common* %5, i32 %2, i32 %3) #3
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 135
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 1
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 12
  %10 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %9, align 8
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 3, i32 0, i32 1
  br i1 %8, label %12, label %17

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %11, i64 0, i32 0, i64 0
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 136
  %15 = load %struct.VPxWorker*, %struct.VPxWorker** %14, align 8
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 138
  tail call void @vp9_loop_filter_frame_mt(%struct.yv12_buffer_config* %10, %struct.VP9Common* %5, %struct.macroblockd_plane* %13, i32 %2, i32 1, i32 %3, %struct.VPxWorker* %15, i32 %7, %struct.VP9LfSyncData* %16) #3
  br label %18

17:                                               ; preds = %4
  tail call void @vp9_loop_filter_frame(%struct.yv12_buffer_config* %10, %struct.VP9Common* %5, %struct.macroblockd* %11, i32 %2, i32 1, i32 %3) #3
  br label %18

18:                                               ; preds = %17, %12
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 8, i32 11
  %20 = load i32, i32* %19, align 16
  %21 = icmp eq i32 %20, 0
  %22 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %9, align 8
  br i1 %21, label %25, label %23

23:                                               ; preds = %18
  %24 = tail call i64 @vpx_highbd_get_y_sse(%struct.yv12_buffer_config* %0, %struct.yv12_buffer_config* %22) #3
  br label %27

25:                                               ; preds = %18
  %26 = tail call i64 @vpx_get_y_sse(%struct.yv12_buffer_config* %0, %struct.yv12_buffer_config* %22) #3
  br label %27

27:                                               ; preds = %25, %23
  %28 = phi i64 [ %24, %23 ], [ %26, %25 ]
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %1, i64 0, i32 54
  %30 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %9, align 8
  tail call void @vpx_yv12_copy_y_c(%struct.yv12_buffer_config* %29, %struct.yv12_buffer_config* %30) #3
  ret i64 %28
}

declare void @vp9_build_mask_frame(%struct.VP9Common*, i32, i32) local_unnamed_addr #2

declare void @vp9_loop_filter_frame_mt(%struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd_plane*, i32, i32, i32, %struct.VPxWorker*, i32, %struct.VP9LfSyncData*) local_unnamed_addr #2

declare void @vp9_loop_filter_frame(%struct.yv12_buffer_config*, %struct.VP9Common*, %struct.macroblockd*, i32, i32, i32) local_unnamed_addr #2

declare i64 @vpx_highbd_get_y_sse(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2

declare i64 @vpx_get_y_sse(%struct.yv12_buffer_config*, %struct.yv12_buffer_config*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
