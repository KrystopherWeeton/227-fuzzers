; ModuleID = '../../third_party/pdfium/xfa/fgas/layout/cfgas_txtbreak.cpp'
source_filename = "../../third_party/pdfium/xfa/fgas/layout/cfgas_txtbreak.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFGAS_TxtBreak = type { %class.CFGAS_Break, i32, i32 }
%class.CFGAS_Break = type { i32 (...)**, i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.fxcrt::UnownedPtr.46", i8, [7 x i8], [2 x %class.CFGAS_BreakLine] }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFGAS_GEFont* }
%class.CFGAS_GEFont = type { %"class.fxcrt::Retainable", %"class.pdfium::Optional", %"class.fxcrt::RetainPtr.0", %"class.fxcrt::MaybeOwned", %"class.std::__1::unique_ptr.9", %"class.std::__1::map", %"class.std::__1::map.21", %"class.std::__1::vector", %"class.std::__1::map.35" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.fxcrt::RetainPtr.0" = type { %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CPDF_Font* }
%class.CPDF_Font = type opaque
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.5", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.5" = type { %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %class.CFX_Font* }
%class.CFX_Font = type opaque
%"class.fxcrt::UnownedPtr" = type { %class.CFX_Font* }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %class.CFX_UnicodeEncodingEx* }
%class.CFX_UnicodeEncodingEx = type opaque
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.15", %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i64 }
%"class.std::__1::map.21" = type { %"class.std::__1::__tree.22" }
%"class.std::__1::__tree.22" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.23", %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.fxcrt::RetainPtr"*, %"class.fxcrt::RetainPtr"*, %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.fxcrt::RetainPtr"* }
%"class.std::__1::map.35" = type { %"class.std::__1::__tree.36" }
%"class.std::__1::__tree.36" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.37", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.fxcrt::UnownedPtr.46" = type { %class.CFGAS_BreakLine* }
%class.CFGAS_BreakLine = type <{ %"class.std::__1::vector.47", %"class.std::__1::vector.72", i32, i32, i32, [4 x i8] }>
%"class.std::__1::vector.47" = type { %"class.std::__1::__vector_base.48" }
%"class.std::__1::__vector_base.48" = type { %class.CFGAS_Char*, %class.CFGAS_Char*, %"class.std::__1::__compressed_pair.67" }
%class.CFGAS_Char = type <{ i8, i8, i8, i8, i32, i32, i16, i16, i16, [2 x i8], i32, i32, [4 x i8], %"class.fxcrt::RetainPtr.49", i16, [2 x i8], i32, i32, [4 x i8] }>
%"class.fxcrt::RetainPtr.49" = type { %"class.std::__1::unique_ptr.50" }
%"class.std::__1::unique_ptr.50" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { %class.CFGAS_TextUserData* }
%class.CFGAS_TextUserData = type { %"class.fxcrt::Retainable", %"class.fxcrt::RetainPtr.53", %"class.fxcrt::RetainPtr.59" }
%"class.fxcrt::RetainPtr.53" = type { %"class.std::__1::unique_ptr.54" }
%"class.std::__1::unique_ptr.54" = type { %"class.std::__1::__compressed_pair.55" }
%"class.std::__1::__compressed_pair.55" = type { %"struct.std::__1::__compressed_pair_elem.56" }
%"struct.std::__1::__compressed_pair_elem.56" = type { %class.CFX_CSSComputedStyle* }
%class.CFX_CSSComputedStyle = type opaque
%"class.fxcrt::RetainPtr.59" = type { %"class.std::__1::unique_ptr.60" }
%"class.std::__1::unique_ptr.60" = type { %"class.std::__1::__compressed_pair.61" }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { %class.CFGAS_LinkUserData* }
%class.CFGAS_LinkUserData = type opaque
%"class.std::__1::__compressed_pair.67" = type { %"struct.std::__1::__compressed_pair_elem.68" }
%"struct.std::__1::__compressed_pair_elem.68" = type { %class.CFGAS_Char* }
%"class.std::__1::vector.72" = type { %"class.std::__1::__vector_base.73" }
%"class.std::__1::__vector_base.73" = type { %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece*, %"class.std::__1::__compressed_pair.75" }
%class.CFGAS_BreakPiece = type { i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.fxcrt::UnownedPtr.74", %"class.fxcrt::RetainPtr.49" }
%"class.fxcrt::UnownedPtr.74" = type { %"class.std::__1::vector.47"* }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem.76" }
%"struct.std::__1::__compressed_pair_elem.76" = type { %class.CFGAS_BreakPiece* }
%"class.CFGAS_TxtBreak::Engine" = type { i32 (...)** }
%"struct.CFGAS_TxtBreak::Run" = type <{ %"class.CFGAS_TxtBreak::Engine"*, %"class.fxcrt::WideString", i32*, i32, i32, %"class.fxcrt::RetainPtr", float, i32, i32, i32, i32, [4 x i8], %class.CFX_RectF*, i8, [7 x i8] }>
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.92" }
%"class.fxcrt::RetainPtr.92" = type { %"class.std::__1::unique_ptr.93" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>
%class.CFX_RectF = type { float, float, float, float }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.85" }
%"struct.std::__1::__split_buffer" = type { %struct.FX_TPO**, %struct.FX_TPO**, %struct.FX_TPO**, %"class.std::__1::__compressed_pair.80" }
%struct.FX_TPO = type { i32, i32 }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %struct.FX_TPO** }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.std::__1::__less.121" = type { i8 }
%class.TextCharPos = type { %class.CFX_PTemplate, i32, i32, i32, i32, i8, i8, [4 x float] }
%class.CFX_PTemplate = type { float, float }
%struct.FX_FORMCHAR = type { i16, i16, i32 }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%"class.std::__1::vector.98" = type { %"class.std::__1::__vector_base.99" }
%"class.std::__1::__vector_base.99" = type { %class.CFX_RectF*, %class.CFX_RectF*, %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.CFX_RectF* }
%"struct.std::__1::__split_buffer.114" = type { %struct.FX_TPO**, %struct.FX_TPO**, %struct.FX_TPO**, %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.81", %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %"class.std::__1::allocator.83"* }
%"class.std::__1::allocator.83" = type { i8 }
%"class.std::__1::__deque_iterator" = type { %struct.FX_TPO**, %struct.FX_TPO* }

$_ZNSt3__16vectorI10CFGAS_CharNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRwRiS7_EEEvDpOT_ = comdat any

$_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_ = comdat any

$_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE9push_backEOS2_ = comdat any

$_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE10push_frontEOS2_ = comdat any

$_ZNSt3__114__split_bufferIP6FX_TPORNS_9allocatorIS2_EEE10push_frontERKS2_ = comdat any

$_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_ = comdat any

$_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_ = comdat any

@_ZTV14CFGAS_TxtBreak = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFGAS_TxtBreak*)* @_ZN14CFGAS_TxtBreakD2Ev to i8*), i8* bitcast (void (%class.CFGAS_TxtBreak*)* @_ZN14CFGAS_TxtBreakD0Ev to i8*)] }, align 8
@_ZN11CFGAS_Break17kConversionFactorE = external local_unnamed_addr constant float, align 4
@_ZTVN14CFGAS_TxtBreak6EngineE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.CFGAS_TxtBreak::Engine"*)* @_ZN14CFGAS_TxtBreak6EngineD2Ev to i8*), i8* bitcast (void (%"class.CFGAS_TxtBreak::Engine"*)* @_ZN14CFGAS_TxtBreak6EngineD0Ev to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, align 8
@.str = private unnamed_addr constant [1 x i32] zeroinitializer, align 4

@_ZN14CFGAS_TxtBreakC1Ev = hidden unnamed_addr alias void (%class.CFGAS_TxtBreak*), void (%class.CFGAS_TxtBreak*)* @_ZN14CFGAS_TxtBreakC2Ev
@_ZN14CFGAS_TxtBreakD1Ev = hidden unnamed_addr alias void (%class.CFGAS_TxtBreak*), void (%class.CFGAS_TxtBreak*)* @_ZN14CFGAS_TxtBreakD2Ev
@_ZN14CFGAS_TxtBreak6EngineD1Ev = hidden unnamed_addr alias void (%"class.CFGAS_TxtBreak::Engine"*), void (%"class.CFGAS_TxtBreak::Engine"*)* @_ZN14CFGAS_TxtBreak6EngineD2Ev
@_ZN14CFGAS_TxtBreak3RunC1Ev = hidden unnamed_addr alias void (%"struct.CFGAS_TxtBreak::Run"*), void (%"struct.CFGAS_TxtBreak::Run"*)* @_ZN14CFGAS_TxtBreak3RunC2Ev
@_ZN14CFGAS_TxtBreak3RunD1Ev = hidden unnamed_addr alias void (%"struct.CFGAS_TxtBreak::Run"*), void (%"struct.CFGAS_TxtBreak::Run"*)* @_ZN14CFGAS_TxtBreak3RunD2Ev
@_ZN14CFGAS_TxtBreak3RunC1ERKS0_ = hidden unnamed_addr alias void (%"struct.CFGAS_TxtBreak::Run"*, %"struct.CFGAS_TxtBreak::Run"*), void (%"struct.CFGAS_TxtBreak::Run"*, %"struct.CFGAS_TxtBreak::Run"*)* @_ZN14CFGAS_TxtBreak3RunC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreakC2Ev(%class.CFGAS_TxtBreak*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_BreakC2Ej(%class.CFGAS_Break* %2, i32 0) #14
  %3 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV14CFGAS_TxtBreak, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 1
  store i32 0, i32* %4, align 8
  %5 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 2
  store i32 360000, i32* %5, align 4
  ret void
}

declare void @_ZN11CFGAS_BreakC2Ej(%class.CFGAS_Break*, i32) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN11CFGAS_BreakD2Ev(%class.CFGAS_Break*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreakD2Ev(%class.CFGAS_TxtBreak*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_BreakD2Ev(%class.CFGAS_Break* %2) #14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreakD0Ev(%class.CFGAS_TxtBreak*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  tail call void @_ZN11CFGAS_BreakD2Ev(%class.CFGAS_Break* %2) #14
  %3 = bitcast %class.CFGAS_TxtBreak* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #15
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak12SetLineWidthEf(%class.CFGAS_TxtBreak* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = load float, float* @_ZN11CFGAS_Break17kConversionFactorE, align 4
  %4 = fmul float %3, %1
  %5 = tail call i32 @FXSYS_roundf(float %4) #14
  %6 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 7
  store i32 %5, i32* %6, align 8
  ret void
}

declare i32 @FXSYS_roundf(float) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN14CFGAS_TxtBreak12SetAlignmentEi(%class.CFGAS_TxtBreak* nocapture, i32) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 1
  store i32 %1, i32* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak12SetCombWidthEf(%class.CFGAS_TxtBreak* nocapture, float) local_unnamed_addr #0 align 2 {
  %3 = load float, float* @_ZN11CFGAS_Break17kConversionFactorE, align 4
  %4 = fmul float %3, %1
  %5 = tail call i32 @FXSYS_roundf(float %4) #14
  %6 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 2
  store i32 %5, i32* %6, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak22AppendChar_CombinationEP10CFGAS_Char(%class.CFGAS_TxtBreak*, %class.CFGAS_Char* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %5 = load i16, i16* %4, align 8
  %6 = zext i16 %5 to i32
  %7 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  store i32 -1, i32* %7, align 8
  %8 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 3
  %9 = load i8, i8* %8, align 2, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  br label %74

14:                                               ; preds = %2
  %15 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  %16 = tail call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %15, i32 0, i1 zeroext false, i1 zeroext false) #14
  %17 = icmp eq %class.CFGAS_Char* %16, null
  br i1 %17, label %48, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %16, i64 0, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 32
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %48

23:                                               ; preds = %18
  %24 = icmp eq i16 %5, 1617
  br i1 %24, label %25, label %32

25:                                               ; preds = %23
  %26 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %16, i64 0, i32 14
  %27 = load i16, i16* %26, align 8
  %28 = add i16 %27, -1612
  %29 = icmp ult i16 %28, 5
  br i1 %29, label %30, label %48

30:                                               ; preds = %25
  %31 = zext i16 %27 to i32
  br label %39

32:                                               ; preds = %23
  %33 = add i16 %5, -1612
  %34 = icmp ult i16 %33, 5
  br i1 %34, label %35, label %48

35:                                               ; preds = %32
  %36 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %16, i64 0, i32 14
  %37 = load i16, i16* %36, align 8
  %38 = icmp eq i16 %37, 1617
  br i1 %38, label %39, label %48

39:                                               ; preds = %35, %30
  %40 = phi i32 [ %31, %30 ], [ %6, %35 ]
  %41 = tail call signext i32 @_Z27FX_GetArabicFromShaddaTablew(i32 signext %40) #14
  %42 = load i32, i32* %19, align 4
  %43 = or i32 %42, 32
  store i32 %43, i32* %19, align 4
  %44 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %16, i64 0, i32 5
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 4
  %46 = load i32, i32* %45, align 4
  %47 = or i32 %46, 32
  store i32 %47, i32* %45, align 4
  br label %48

48:                                               ; preds = %25, %32, %35, %39, %14, %18
  %49 = phi i32 [ %6, %18 ], [ %6, %14 ], [ %41, %39 ], [ 1617, %25 ], [ %6, %32 ], [ %6, %35 ]
  %50 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %50) #14
  store i32 -1431655766, i32* %3, align 4
  %51 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %52 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %51, align 8
  %53 = icmp eq %class.CFGAS_GEFont* %52, null
  br i1 %53, label %58, label %54

54:                                               ; preds = %48
  %55 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %52, i32 signext %49, i32* nonnull %3) #14
  %56 = load i32, i32* %3, align 4
  %57 = select i1 %55, i32 %56, i32 0
  br label %58

58:                                               ; preds = %54, %48
  %59 = phi i32 [ 0, %48 ], [ %57, %54 ]
  %60 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 9
  %61 = load i32, i32* %60, align 8
  %62 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %59, i32 %61) #14
  %63 = extractvalue { i32, i1 } %62, 1
  br i1 %63, label %70, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 11
  %66 = load i32, i32* %65, align 8
  %67 = extractvalue { i32, i1 } %62, 0
  %68 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %67, i32 %66) #14
  %69 = extractvalue { i32, i1 } %68, 1
  br i1 %69, label %70, label %71

70:                                               ; preds = %64, %58
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #14
  br label %80

71:                                               ; preds = %64
  %72 = extractvalue { i32, i1 } %68, 0
  %73 = sdiv i32 %72, 100
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %50) #14
  br label %74

74:                                               ; preds = %71, %11
  %75 = phi i32 [ %13, %11 ], [ %73, %71 ]
  %76 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %75, i32 -1) #14
  %77 = extractvalue { i32, i1 } %76, 1
  %78 = extractvalue { i32, i1 } %76, 0
  %79 = select i1 %77, i32 0, i32 %78
  br label %80

80:                                               ; preds = %70, %74
  %81 = phi i32 [ %79, %74 ], [ 0, %70 ]
  store i32 %81, i32* %7, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break*, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #1

declare signext i32 @_Z27FX_GetArabicFromShaddaTablew(i32 signext) local_unnamed_addr #1

declare zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont*, i32 signext, i32*) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN14CFGAS_TxtBreak14AppendChar_TabEP10CFGAS_Char(%class.CFGAS_TxtBreak* nocapture, %class.CFGAS_Char* nocapture readnone) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 1, i8* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_TxtBreak18AppendChar_ControlEP10CFGAS_Char(%class.CFGAS_TxtBreak*, %class.CFGAS_Char* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 3, i8* %3, align 8
  %4 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %5 = load i8, i8* %4, align 1, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %20

7:                                                ; preds = %2
  %8 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %9 = load i16, i16* %8, align 8
  switch i16 %9, label %12 [
    i16 11, label %17
    i16 8232, label %17
    i16 12, label %10
    i16 8233, label %11
  ]

10:                                               ; preds = %7
  br label %17

11:                                               ; preds = %7
  br label %17

12:                                               ; preds = %7
  %13 = zext i16 %9 to i32
  %14 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 8
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, %13
  br i1 %16, label %17, label %20

17:                                               ; preds = %12, %11, %10, %7, %7
  %18 = phi i8 [ 2, %7 ], [ 2, %7 ], [ 4, %10 ], [ 3, %11 ], [ 3, %12 ]
  %19 = tail call zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, i8 zeroext %18)
  br label %20

20:                                               ; preds = %12, %17, %2
  %21 = phi i8 [ 0, %2 ], [ %19, %17 ], [ 0, %12 ]
  ret i8 %21
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.std::__1::deque", align 8
  %4 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  %5 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %6 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %7 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %6, i64 0, i32 1, i32 0, i32 0
  %8 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %7, align 8
  %9 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %6, i64 0, i32 1, i32 0, i32 1
  %10 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %9, align 8
  %11 = icmp eq %class.CFGAS_BreakPiece* %8, %10
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = icmp eq i8 %1, 1
  br i1 %13, label %19, label %14

14:                                               ; preds = %12
  %15 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %10, i64 -1, i32 0
  store i8 %1, i8* %15, align 8
  %16 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %17 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %16, i64 0, i32 1, i32 0, i32 1
  %18 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %17, align 8
  br label %19

19:                                               ; preds = %12, %14
  %20 = phi %class.CFGAS_BreakPiece* [ %10, %12 ], [ %18, %14 ]
  %21 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %20, i64 -1, i32 0
  %22 = load i8, i8* %21, align 8
  br label %172

23:                                               ; preds = %2
  %24 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 17
  %25 = load i8, i8* %24, align 8
  %26 = icmp sgt i8 %25, -1
  br i1 %26, label %27, label %46

27:                                               ; preds = %23
  %28 = sext i8 %25 to i64
  %29 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 19, i64 %28, i32 1, i32 0, i32 0
  %30 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %29, align 8
  %31 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 19, i64 %28, i32 1, i32 0, i32 1
  %32 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %31, align 8
  %33 = icmp eq %class.CFGAS_BreakPiece* %30, %32
  br i1 %33, label %172, label %34

34:                                               ; preds = %27
  %35 = icmp eq i8 %1, 1
  br i1 %35, label %42, label %36

36:                                               ; preds = %34
  %37 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %32, i64 -1, i32 0
  store i8 %1, i8* %37, align 8
  %38 = load i8, i8* %24, align 8
  %39 = sext i8 %38 to i64
  %40 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 19, i64 %39, i32 1, i32 0, i32 1
  %41 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %40, align 8
  br label %42

42:                                               ; preds = %34, %36
  %43 = phi %class.CFGAS_BreakPiece* [ %32, %34 ], [ %41, %36 ]
  %44 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %43, i64 -1, i32 0
  %45 = load i8, i8* %44, align 8
  br label %172

46:                                               ; preds = %23
  %47 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %6, i64 0, i32 0, i32 0, i32 0
  %48 = load %class.CFGAS_Char*, %class.CFGAS_Char** %47, align 8
  %49 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %6, i64 0, i32 0, i32 0, i32 1
  %50 = load %class.CFGAS_Char*, %class.CFGAS_Char** %49, align 8
  %51 = icmp eq %class.CFGAS_Char* %48, %50
  br i1 %51, label %172, label %52

52:                                               ; preds = %46
  %53 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %50, i64 -1, i32 0
  store i8 %1, i8* %53, align 8
  %54 = icmp eq i8 %1, 1
  br i1 %54, label %172, label %55

55:                                               ; preds = %52
  %56 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %57 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 19, i64 0
  %58 = icmp ne %class.CFGAS_BreakLine* %56, %57
  %59 = zext i1 %58 to i8
  store i8 %59, i8* %24, align 8
  %60 = xor i1 %58, true
  %61 = zext i1 %60 to i64
  %62 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 19, i64 %61
  %63 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 1
  %64 = load i32, i32* %63, align 8
  %65 = icmp sgt i32 %64, 2
  tail call void @_ZN14CFGAS_TxtBreak18EndBreak_SplitLineEP15CFGAS_BreakLineb(%class.CFGAS_TxtBreak* %0, %class.CFGAS_BreakLine* %62, i1 zeroext %65)
  %66 = bitcast %"class.std::__1::deque"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %66) #14
  %67 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 0, i32 0
  %68 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 0, i32 1
  %69 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 0, i32 2
  %70 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 1
  %71 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %66, i8 0, i64 48, i1 false) #14
  call void @_ZN14CFGAS_TxtBreak17EndBreak_BidiLineEPNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, %"class.std::__1::deque"* nonnull %3, i8 zeroext %1)
  %72 = load i32, i32* %63, align 8
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %55
  call void @_ZN14CFGAS_TxtBreak18EndBreak_AlignmentERKNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEbN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, %"class.std::__1::deque"* nonnull dereferenceable(48) %3, i1 zeroext %65, i8 zeroext %1)
  br label %75

75:                                               ; preds = %74, %55
  store %class.CFGAS_BreakLine* %62, %class.CFGAS_BreakLine** %5, align 8
  %76 = call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %4, i32 0, i1 zeroext false, i1 zeroext false) #14
  %77 = icmp eq %class.CFGAS_Char* %76, null
  br i1 %77, label %80, label %78

78:                                               ; preds = %75
  %79 = call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* nonnull %76) #14
  br label %80

80:                                               ; preds = %75, %78
  %81 = phi i8 [ %79, %78 ], [ 0, %75 ]
  %82 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 %81, i8* %82, align 8
  %83 = load %struct.FX_TPO**, %struct.FX_TPO*** %68, align 8
  %84 = load i64, i64* %70, align 8
  %85 = lshr i64 %84, 9
  %86 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %83, i64 %85
  %87 = load %struct.FX_TPO**, %struct.FX_TPO*** %69, align 8
  %88 = icmp eq %struct.FX_TPO** %87, %83
  %89 = ptrtoint %struct.FX_TPO** %87 to i64
  %90 = ptrtoint %struct.FX_TPO** %83 to i64
  br i1 %88, label %103, label %91

91:                                               ; preds = %80
  %92 = load %struct.FX_TPO*, %struct.FX_TPO** %86, align 8
  %93 = and i64 %84, 511
  %94 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %92, i64 %93
  %95 = load i64, i64* %71, align 8
  %96 = add i64 %95, %84
  %97 = lshr i64 %96, 9
  %98 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %83, i64 %97
  %99 = load %struct.FX_TPO*, %struct.FX_TPO** %98, align 8
  %100 = and i64 %96, 511
  %101 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %99, i64 %100
  %102 = icmp eq %struct.FX_TPO* %101, %94
  br i1 %102, label %103, label %108

103:                                              ; preds = %121, %80, %91
  store i64 0, i64* %71, align 8
  %104 = bitcast %struct.FX_TPO*** %69 to i64*
  %105 = sub i64 %89, %90
  %106 = ashr exact i64 %105, 3
  %107 = icmp ugt i64 %106, 2
  br i1 %107, label %126, label %139

108:                                              ; preds = %91, %121
  %109 = phi %struct.FX_TPO* [ %124, %121 ], [ %94, %91 ]
  %110 = phi %struct.FX_TPO** [ %123, %121 ], [ %86, %91 ]
  %111 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %109, i64 1
  %112 = ptrtoint %struct.FX_TPO* %111 to i64
  %113 = bitcast %struct.FX_TPO** %110 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = sub i64 %112, %114
  %116 = icmp eq i64 %115, 4096
  br i1 %116, label %117, label %121

117:                                              ; preds = %108
  %118 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %110, i64 1
  %119 = bitcast %struct.FX_TPO** %118 to i64*
  %120 = load i64, i64* %119, align 8
  br label %121

121:                                              ; preds = %117, %108
  %122 = phi i64 [ %120, %117 ], [ %112, %108 ]
  %123 = phi %struct.FX_TPO** [ %118, %117 ], [ %110, %108 ]
  %124 = inttoptr i64 %122 to %struct.FX_TPO*
  %125 = icmp eq %struct.FX_TPO* %101, %124
  br i1 %125, label %103, label %108

126:                                              ; preds = %103, %126
  %127 = phi %struct.FX_TPO** [ %131, %126 ], [ %83, %103 ]
  %128 = bitcast %struct.FX_TPO** %127 to i8**
  %129 = load i8*, i8** %128, align 8
  call void @_ZdlPv(i8* %129) #15
  %130 = load %struct.FX_TPO**, %struct.FX_TPO*** %68, align 8
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %130, i64 1
  store %struct.FX_TPO** %131, %struct.FX_TPO*** %68, align 8
  %132 = load i64, i64* %104, align 8
  %133 = ptrtoint %struct.FX_TPO** %131 to i64
  %134 = sub i64 %132, %133
  %135 = ashr exact i64 %134, 3
  %136 = icmp ugt i64 %135, 2
  br i1 %136, label %126, label %137

137:                                              ; preds = %126
  %138 = inttoptr i64 %132 to %struct.FX_TPO**
  br label %139

139:                                              ; preds = %137, %103
  %140 = phi %struct.FX_TPO** [ %87, %103 ], [ %138, %137 ]
  %141 = phi %struct.FX_TPO** [ %83, %103 ], [ %131, %137 ]
  %142 = phi i64 [ %106, %103 ], [ %135, %137 ]
  switch i64 %142, label %146 [
    i64 1, label %144
    i64 2, label %143
  ]

143:                                              ; preds = %139
  br label %144

144:                                              ; preds = %139, %143
  %145 = phi i64 [ 512, %143 ], [ 256, %139 ]
  store i64 %145, i64* %70, align 8
  br label %146

146:                                              ; preds = %144, %139
  %147 = icmp eq %struct.FX_TPO** %141, %140
  br i1 %147, label %166, label %148

148:                                              ; preds = %146, %148
  %149 = phi %struct.FX_TPO** [ %152, %148 ], [ %141, %146 ]
  %150 = bitcast %struct.FX_TPO** %149 to i8**
  %151 = load i8*, i8** %150, align 8
  call void @_ZdlPv(i8* %151) #15
  %152 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %149, i64 1
  %153 = icmp eq %struct.FX_TPO** %152, %140
  br i1 %153, label %154, label %148

154:                                              ; preds = %148
  %155 = load %struct.FX_TPO**, %struct.FX_TPO*** %68, align 8
  %156 = load %struct.FX_TPO**, %struct.FX_TPO*** %69, align 8
  %157 = icmp eq %struct.FX_TPO** %156, %155
  br i1 %157, label %166, label %158

158:                                              ; preds = %154
  %159 = ptrtoint %struct.FX_TPO** %155 to i64
  %160 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %156, i64 -1
  %161 = ptrtoint %struct.FX_TPO** %160 to i64
  %162 = sub i64 %161, %159
  %163 = lshr i64 %162, 3
  %164 = xor i64 %163, -1
  %165 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %156, i64 %164
  store %struct.FX_TPO** %165, %struct.FX_TPO*** %69, align 8
  br label %166

166:                                              ; preds = %158, %154, %146
  %167 = load %struct.FX_TPO**, %struct.FX_TPO*** %67, align 8
  %168 = icmp eq %struct.FX_TPO** %167, null
  br i1 %168, label %171, label %169

169:                                              ; preds = %166
  %170 = bitcast %struct.FX_TPO** %167 to i8*
  call void @_ZdlPv(i8* %170) #15
  br label %171

171:                                              ; preds = %166, %169
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %66) #14
  br label %172

172:                                              ; preds = %52, %46, %27, %171, %42, %19
  %173 = phi i8 [ %45, %42 ], [ %1, %171 ], [ %22, %19 ], [ 0, %27 ], [ 0, %46 ], [ 1, %52 ]
  ret i8 %173
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_TxtBreak17AppendChar_ArabicEP10CFGAS_Char(%class.CFGAS_TxtBreak*, %class.CFGAS_Char*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %1) #14
  %6 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  %7 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %8 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %9 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 3
  %10 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 3
  %11 = load i8, i8* %10, align 2, !range !2
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %67

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  %15 = load i8, i8* %14, align 8
  %16 = add i8 %15, -7
  %17 = icmp ult i8 %16, 3
  br i1 %17, label %18, label %67

18:                                               ; preds = %13
  %19 = tail call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %6, i32 1, i1 zeroext true, i1 zeroext false) #14
  %20 = icmp eq %class.CFGAS_Char* %19, null
  br i1 %20, label %67, label %21

21:                                               ; preds = %18
  %22 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %19, i64 0, i32 5
  %23 = load i32, i32* %22, align 8
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = load i32, i32* %9, align 4
  %27 = sub nsw i32 %26, %23
  store i32 %27, i32* %9, align 4
  %28 = load i32, i32* %22, align 8
  br label %29

29:                                               ; preds = %25, %21
  %30 = phi i32 [ %28, %25 ], [ %23, %21 ]
  %31 = tail call %class.CFGAS_Char* @_ZNK11CFGAS_Break11GetLastCharEibb(%class.CFGAS_Break* %6, i32 2, i1 zeroext true, i1 zeroext false) #14
  %32 = tail call signext i32 @_ZN6pdfium6arabic11GetFormCharEPK10CFGAS_CharS3_S3_(%class.CFGAS_Char* nonnull %19, %class.CFGAS_Char* %31, %class.CFGAS_Char* %1) #14
  %33 = icmp eq i32 %32, 65279
  br i1 %33, label %34, label %37

34:                                               ; preds = %29
  %35 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* nonnull %19) #14
  %36 = icmp eq i8 %35, 7
  br label %37

37:                                               ; preds = %34, %29
  %38 = phi i1 [ false, %29 ], [ %36, %34 ]
  %39 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %40 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %39, align 8
  %41 = icmp eq %class.CFGAS_GEFont* %40, null
  br i1 %41, label %46, label %42

42:                                               ; preds = %37
  %43 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #14
  store i32 0, i32* %3, align 4
  %44 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %40, i32 signext %32, i32* nonnull %3) #14
  %45 = load i32, i32* %3, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %43) #14
  br label %46

46:                                               ; preds = %37, %42
  %47 = phi i32 [ %45, %42 ], [ %30, %37 ]
  %48 = select i1 %33, i32 0, i32 %47
  %49 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 9
  %50 = load i32, i32* %49, align 8
  %51 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %48, i32 %50) #14
  %52 = extractvalue { i32, i1 } %51, 1
  br i1 %52, label %62, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 11
  %55 = load i32, i32* %54, align 8
  %56 = extractvalue { i32, i1 } %51, 0
  %57 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %56, i32 %55) #14
  %58 = extractvalue { i32, i1 } %57, 1
  %59 = extractvalue { i32, i1 } %57, 0
  %60 = sdiv i32 %59, 100
  %61 = select i1 %58, i32 0, i32 %60
  br label %62

62:                                               ; preds = %46, %53
  %63 = phi i32 [ %61, %53 ], [ 0, %46 ]
  store i32 %63, i32* %22, align 8
  %64 = load i32, i32* %9, align 4
  %65 = add nsw i32 %64, %63
  store i32 %65, i32* %9, align 4
  store i8 %5, i8* %14, align 8
  %66 = select i1 %38, %class.CFGAS_Char* null, %class.CFGAS_Char* %19
  br label %69

67:                                               ; preds = %2, %13, %18
  %68 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 %5, i8* %68, align 8
  br label %69

69:                                               ; preds = %62, %67
  %70 = phi %class.CFGAS_Char* [ null, %67 ], [ %66, %62 ]
  %71 = call signext i32 @_ZN6pdfium6arabic11GetFormCharEPK10CFGAS_CharS3_S3_(%class.CFGAS_Char* %1, %class.CFGAS_Char* %70, %class.CFGAS_Char* null) #14
  %72 = load i8, i8* %10, align 2, !range !2
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %77, label %74

74:                                               ; preds = %69
  %75 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 2
  %76 = load i32, i32* %75, align 4
  br label %102

77:                                               ; preds = %69
  %78 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %79 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %78, align 8
  %80 = icmp eq %class.CFGAS_GEFont* %79, null
  br i1 %80, label %85, label %81

81:                                               ; preds = %77
  %82 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %82) #14
  store i32 0, i32* %4, align 4
  %83 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %79, i32 signext %71, i32* nonnull %4) #14
  %84 = load i32, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %82) #14
  br label %85

85:                                               ; preds = %77, %81
  %86 = phi i32 [ %84, %81 ], [ 0, %77 ]
  %87 = icmp eq i32 %71, 65279
  %88 = select i1 %87, i32 0, i32 %86
  %89 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 9
  %90 = load i32, i32* %89, align 8
  %91 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %88, i32 %90) #14
  %92 = extractvalue { i32, i1 } %91, 1
  br i1 %92, label %101, label %93

93:                                               ; preds = %85
  %94 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 11
  %95 = load i32, i32* %94, align 8
  %96 = extractvalue { i32, i1 } %91, 0
  %97 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %96, i32 %95) #14
  %98 = extractvalue { i32, i1 } %97, 1
  %99 = extractvalue { i32, i1 } %97, 0
  %100 = sdiv i32 %99, 100
  br i1 %98, label %101, label %102

101:                                              ; preds = %93, %85
  br label %102

102:                                              ; preds = %74, %93, %101
  %103 = phi i32 [ 0, %101 ], [ %76, %74 ], [ %100, %93 ]
  %104 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  store i32 %103, i32* %104, align 8
  %105 = load i32, i32* %9, align 4
  %106 = add nsw i32 %105, %103
  store i32 %106, i32* %9, align 4
  %107 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  call void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine* %107) #14
  %108 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %109 = load i8, i8* %108, align 1, !range !2
  %110 = icmp eq i8 %109, 0
  br i1 %110, label %111, label %116

111:                                              ; preds = %102
  %112 = load i32, i32* %9, align 4
  %113 = call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %6, i32 %112) #14
  br i1 %113, label %114, label %116

114:                                              ; preds = %111
  %115 = call zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, i8 zeroext 2)
  br label %116

116:                                              ; preds = %111, %102, %114
  %117 = phi i8 [ %115, %114 ], [ 0, %102 ], [ 0, %111 ]
  ret i8 %117
}

declare zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char*) local_unnamed_addr #1

declare signext i32 @_ZN6pdfium6arabic11GetFormCharEPK10CFGAS_CharS3_S3_(%class.CFGAS_Char*, %class.CFGAS_Char*, %class.CFGAS_Char*) local_unnamed_addr #1

declare void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

declare zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_TxtBreak17AppendChar_OthersEP10CFGAS_Char(%class.CFGAS_TxtBreak*, %class.CFGAS_Char*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %1) #14
  %5 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  %6 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %7 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %8 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 3
  %9 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 %4, i8* %9, align 8
  %10 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 14
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 3
  %14 = load i8, i8* %13, align 2, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 2
  %18 = load i32, i32* %17, align 4
  br label %44

19:                                               ; preds = %2
  %20 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #14
  store i32 -1431655766, i32* %3, align 4
  %21 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 15, i32 0, i32 0, i32 0, i32 0
  %22 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %21, align 8
  %23 = icmp eq %class.CFGAS_GEFont* %22, null
  br i1 %23, label %28, label %24

24:                                               ; preds = %19
  %25 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* nonnull %22, i32 signext %12, i32* nonnull %3) #14
  %26 = load i32, i32* %3, align 4
  %27 = select i1 %25, i32 %26, i32 0
  br label %28

28:                                               ; preds = %24, %19
  %29 = phi i32 [ 0, %19 ], [ %27, %24 ]
  %30 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 9
  %31 = load i32, i32* %30, align 8
  %32 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %29, i32 %31) #14
  %33 = extractvalue { i32, i1 } %32, 1
  br i1 %33, label %40, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 11
  %36 = load i32, i32* %35, align 8
  %37 = extractvalue { i32, i1 } %32, 0
  %38 = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %37, i32 %36) #14
  %39 = extractvalue { i32, i1 } %38, 1
  br i1 %39, label %40, label %41

40:                                               ; preds = %34, %28
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #14
  br label %52

41:                                               ; preds = %34
  %42 = extractvalue { i32, i1 } %38, 0
  %43 = sdiv i32 %42, 100
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #14
  br label %44

44:                                               ; preds = %41, %16
  %45 = phi i32 [ %18, %16 ], [ %43, %41 ]
  %46 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 14
  %47 = load i32, i32* %46, align 4
  %48 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %45, i32 %47) #14
  %49 = extractvalue { i32, i1 } %48, 1
  %50 = extractvalue { i32, i1 } %48, 0
  %51 = select i1 %49, i32 0, i32 %50
  br label %52

52:                                               ; preds = %40, %44
  %53 = phi i32 [ %51, %44 ], [ 0, %40 ]
  %54 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %1, i64 0, i32 5
  store i32 %53, i32* %54, align 8
  %55 = load i32, i32* %8, align 4
  %56 = add nsw i32 %55, %53
  store i32 %56, i32* %8, align 4
  %57 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %58 = load i8, i8* %57, align 1, !range !2
  %59 = icmp eq i8 %58, 0
  %60 = icmp ne i8 %4, 2
  %61 = and i1 %60, %59
  br i1 %61, label %62, label %66

62:                                               ; preds = %52
  %63 = call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %5, i32 %56) #14
  br i1 %63, label %64, label %66

64:                                               ; preds = %62
  %65 = call zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, i8 zeroext 2)
  br label %66

66:                                               ; preds = %62, %52, %64
  %67 = phi i8 [ %65, %64 ], [ 0, %52 ], [ 0, %62 ]
  ret i8 %67
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN14CFGAS_TxtBreak10AppendCharEw(%class.CFGAS_TxtBreak*, i32 signext) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  %4 = tail call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %1) #14
  %5 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  %6 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %7 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %8 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 11
  %9 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 12
  %10 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 1
  %11 = load %class.CFGAS_Char*, %class.CFGAS_Char** %10, align 8
  %12 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = load %class.CFGAS_Char*, %class.CFGAS_Char** %12, align 8
  %14 = icmp ult %class.CFGAS_Char* %11, %13
  br i1 %14, label %15, label %22

15:                                               ; preds = %2
  %16 = trunc i32 %1 to i16
  %17 = load i32, i32* %8, align 4
  %18 = load i32, i32* %9, align 4
  tail call void @_ZN10CFGAS_CharC1Etii(%class.CFGAS_Char* %11, i16 zeroext %16, i32 %17, i32 %18) #14
  %19 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %11, i64 1
  %20 = ptrtoint %class.CFGAS_Char* %19 to i64
  %21 = bitcast %class.CFGAS_Char** %10 to i64*
  store i64 %20, i64* %21, align 8
  br label %24

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %7, i64 0, i32 0
  call void @_ZNSt3__16vectorI10CFGAS_CharNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRwRiS7_EEEvDpOT_(%"class.std::__1::vector.47"* %23, i32* nonnull dereferenceable(4) %3, i32* dereferenceable(4) %8, i32* dereferenceable(4) %9) #14
  br label %24

24:                                               ; preds = %15, %22
  %25 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %26 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %25, i64 0, i32 0, i32 0, i32 1
  %27 = load %class.CFGAS_Char*, %class.CFGAS_Char** %26, align 8
  %28 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1
  %29 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = or i32 %30, 256
  %32 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %27, i64 -1, i32 4
  store i32 %31, i32* %32, align 4
  %33 = icmp eq i8 %4, 4
  br i1 %33, label %67, label %34

34:                                               ; preds = %24
  %35 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  %36 = load i8, i8* %35, align 8
  %37 = call zeroext i8 @_ZNK11CFGAS_Break18GetUnifiedCharTypeE11FX_CHARTYPE(%class.CFGAS_Break* %5, i8 zeroext %36) #14
  %38 = call zeroext i8 @_ZNK11CFGAS_Break18GetUnifiedCharTypeE11FX_CHARTYPE(%class.CFGAS_Break* %5, i8 zeroext %4) #14
  %39 = icmp eq i8 %37, %38
  br i1 %39, label %67, label %40

40:                                               ; preds = %34
  %41 = load i8, i8* %35, align 8
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %67, label %43

43:                                               ; preds = %40
  %44 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %45 = load i8, i8* %44, align 1, !range !2
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %67

47:                                               ; preds = %43
  %48 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %49 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %48, i64 0, i32 3
  %50 = load i32, i32* %49, align 4
  %51 = call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %5, i32 %50) #14
  br i1 %51, label %52, label %67

52:                                               ; preds = %47
  %53 = load i8, i8* %35, align 8
  %54 = icmp ne i8 %53, 2
  %55 = icmp ne i8 %4, 3
  %56 = or i1 %55, %54
  br i1 %56, label %57, label %67

57:                                               ; preds = %52
  %58 = call zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, i8 zeroext 2)
  %59 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %6, align 8
  %60 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %59, i64 0, i32 0, i32 0, i32 0
  %61 = load %class.CFGAS_Char*, %class.CFGAS_Char** %60, align 8
  %62 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %59, i64 0, i32 0, i32 0, i32 1
  %63 = load %class.CFGAS_Char*, %class.CFGAS_Char** %62, align 8
  %64 = icmp eq %class.CFGAS_Char* %61, %63
  %65 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %63, i64 -1
  %66 = select i1 %64, %class.CFGAS_Char* %28, %class.CFGAS_Char* %65
  br label %67

67:                                               ; preds = %57, %43, %40, %34, %24, %52, %47
  %68 = phi i8 [ 0, %24 ], [ 0, %34 ], [ 0, %40 ], [ 0, %52 ], [ 0, %47 ], [ 0, %43 ], [ %58, %57 ]
  %69 = phi %class.CFGAS_Char* [ %28, %24 ], [ %28, %34 ], [ %28, %40 ], [ %28, %52 ], [ %28, %47 ], [ %28, %43 ], [ %66, %57 ]
  %70 = load i32, i32* %3, align 4
  %71 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 8
  %72 = load i32, i32* %71, align 4
  %73 = icmp eq i32 %70, %72
  br i1 %73, label %74, label %76

74:                                               ; preds = %67
  %75 = call zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, i8 zeroext 3)
  br label %100

76:                                               ; preds = %67
  switch i8 %4, label %98 [
    i8 1, label %77
    i8 3, label %79
    i8 4, label %95
    i8 7, label %96
    i8 8, label %96
    i8 9, label %96
    i8 10, label %96
    i8 11, label %96
    i8 12, label %96
  ]

77:                                               ; preds = %76
  %78 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 1, i8* %78, align 8
  br label %100

79:                                               ; preds = %76
  %80 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 1
  store i8 3, i8* %80, align 8
  %81 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %82 = load i8, i8* %81, align 1, !range !2
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %84, label %100

84:                                               ; preds = %79
  %85 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %69, i64 0, i32 14
  %86 = load i16, i16* %85, align 8
  switch i16 %86, label %89 [
    i16 11, label %92
    i16 8232, label %92
    i16 12, label %87
    i16 8233, label %88
  ]

87:                                               ; preds = %84
  br label %92

88:                                               ; preds = %84
  br label %92

89:                                               ; preds = %84
  %90 = zext i16 %86 to i32
  %91 = icmp eq i32 %72, %90
  br i1 %91, label %92, label %100

92:                                               ; preds = %89, %88, %87, %84, %84
  %93 = phi i8 [ 2, %84 ], [ 2, %84 ], [ 4, %87 ], [ 3, %88 ], [ 3, %89 ]
  %94 = call zeroext i8 @_ZN14CFGAS_TxtBreak8EndBreakEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* %0, i8 zeroext %93) #14
  br label %100

95:                                               ; preds = %76
  call void @_ZN14CFGAS_TxtBreak22AppendChar_CombinationEP10CFGAS_Char(%class.CFGAS_TxtBreak* %0, %class.CFGAS_Char* %69)
  br label %100

96:                                               ; preds = %76, %76, %76, %76, %76, %76
  %97 = call zeroext i8 @_ZN14CFGAS_TxtBreak17AppendChar_ArabicEP10CFGAS_Char(%class.CFGAS_TxtBreak* %0, %class.CFGAS_Char* %69)
  br label %100

98:                                               ; preds = %76
  %99 = call zeroext i8 @_ZN14CFGAS_TxtBreak17AppendChar_OthersEP10CFGAS_Char(%class.CFGAS_TxtBreak* %0, %class.CFGAS_Char* %69)
  br label %100

100:                                              ; preds = %92, %89, %79, %77, %95, %96, %98, %74
  %101 = phi i8 [ 3, %74 ], [ %99, %98 ], [ %97, %96 ], [ 0, %95 ], [ 0, %77 ], [ 0, %79 ], [ %94, %92 ], [ 0, %89 ]
  %102 = icmp ult i8 %68, %101
  %103 = select i1 %102, i8 %101, i8 %68
  ret i8 %103
}

declare zeroext i8 @_Z14FX_GetCharTypew(i32 signext) local_unnamed_addr #1

declare zeroext i8 @_ZNK11CFGAS_Break18GetUnifiedCharTypeE11FX_CHARTYPE(%class.CFGAS_Break*, i8 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak18EndBreak_SplitLineEP15CFGAS_BreakLineb(%class.CFGAS_TxtBreak*, %class.CFGAS_BreakLine*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %6 = load i8, i8* %5, align 1, !range !2
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %8, label %32

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0
  %10 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %11 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %10, align 8
  %12 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %11, i64 0, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = tail call zeroext i1 @_ZNK11CFGAS_Break22IsGreaterThanLineWidthEi(%class.CFGAS_Break* %9, i32 %13) #14
  br i1 %14, label %15, label %32

15:                                               ; preds = %8
  %16 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %10, align 8
  %17 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %16, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast %class.CFGAS_Char** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %class.CFGAS_BreakLine* %16 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %19, %21
  %23 = sdiv exact i64 %22, 56
  %24 = trunc i64 %23 to i32
  %25 = add i32 %24, -1
  %26 = tail call %class.CFGAS_Char* @_ZN15CFGAS_BreakLine7GetCharEi(%class.CFGAS_BreakLine* %16, i32 %25) #14
  %27 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %26) #14
  %28 = add i8 %27, -1
  %29 = icmp ult i8 %28, 3
  br i1 %29, label %32, label %30

30:                                               ; preds = %15
  %31 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %10, align 8
  tail call void @_ZN14CFGAS_TxtBreak13SplitTextLineEP15CFGAS_BreakLineS1_b(%class.CFGAS_TxtBreak* %0, %class.CFGAS_BreakLine* %31, %class.CFGAS_BreakLine* %1, i1 zeroext %2)
  br label %41

32:                                               ; preds = %3, %15, %8
  br i1 %2, label %33, label %41

33:                                               ; preds = %32
  %34 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34) #14
  %35 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %36 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %35, align 8
  %37 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %36, i64 0, i32 3
  %38 = load i32, i32* %37, align 4
  store i32 %38, i32* %4, align 4
  %39 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %36, i64 0, i32 0
  %40 = call i32 @_ZN14CFGAS_TxtBreak11GetBreakPosEPNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEbbPi(%class.CFGAS_TxtBreak* %0, %"class.std::__1::vector.47"* %39, i1 zeroext true, i1 zeroext true, i32* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34) #14
  br label %41

41:                                               ; preds = %32, %30, %33
  ret void
}

declare %class.CFGAS_Char* @_ZN15CFGAS_BreakLine7GetCharEi(%class.CFGAS_BreakLine*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak13SplitTextLineEP15CFGAS_BreakLineS1_b(%class.CFGAS_TxtBreak* nocapture readonly, %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca i32, align 4
  %6 = alloca %"class.std::__1::vector.47", align 8
  %7 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.CFGAS_Char** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %class.CFGAS_BreakLine* %1 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %9, %11
  %13 = sdiv exact i64 %12, 56
  %14 = icmp ult i64 %13, 2
  br i1 %14, label %147, label %15

15:                                               ; preds = %4
  %16 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0
  %17 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #14
  %18 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 3
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %5, align 4
  %20 = call i32 @_ZN14CFGAS_TxtBreak11GetBreakPosEPNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEbbPi(%class.CFGAS_TxtBreak* %0, %"class.std::__1::vector.47"* %16, i1 zeroext %3, i1 zeroext false, i32* nonnull %5)
  %21 = icmp sgt i32 %20, 0
  %22 = select i1 %21, i32 %20, i32 0
  %23 = add nuw nsw i32 %22, 1
  %24 = load i64, i64* %8, align 8
  %25 = load i64, i64* %10, align 8
  %26 = sub i64 %24, %25
  %27 = sdiv exact i64 %26, 56
  %28 = icmp ult i64 %27, 2147483648
  %29 = inttoptr i64 %25 to %class.CFGAS_Char*
  %30 = inttoptr i64 %24 to %class.CFGAS_Char*
  br i1 %28, label %32, label %31, !prof !3

31:                                               ; preds = %15
  tail call void @llvm.trap() #14
  unreachable

32:                                               ; preds = %15
  %33 = trunc i64 %27 to i32
  %34 = icmp slt i32 %23, %33
  br i1 %34, label %40, label %35

35:                                               ; preds = %32
  tail call void @_ZN15CFGAS_BreakLine5ClearEv(%class.CFGAS_BreakLine* %2) #14
  %36 = zext i32 %22 to i64
  %37 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0, i32 0, i32 0
  %38 = load %class.CFGAS_Char*, %class.CFGAS_Char** %37, align 8
  %39 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %38, i64 %36, i32 2
  store i8 0, i8* %39, align 2
  br label %146

40:                                               ; preds = %32
  %41 = bitcast %"class.std::__1::vector.47"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #14
  %42 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %1, i64 0, i32 0, i32 0, i32 0
  %43 = zext i32 %23 to i64
  %44 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %29, i64 %43
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %41, i8 0, i64 24, i1 false) #14
  %45 = ptrtoint %class.CFGAS_Char* %44 to i64
  %46 = sub i64 %24, %45
  %47 = sdiv exact i64 %46, 56
  %48 = icmp eq i64 %46, 0
  br i1 %48, label %75, label %49

49:                                               ; preds = %40
  %50 = icmp ugt i64 %47, 329406144173384850
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = bitcast %"class.std::__1::vector.47"* %6 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %52) #16
  unreachable

53:                                               ; preds = %49
  %54 = tail call i8* @_Znwm(i64 %46) #15
  %55 = bitcast i8* %54 to %class.CFGAS_Char*
  %56 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %6, i64 0, i32 0, i32 1
  %57 = bitcast %class.CFGAS_Char** %56 to i8**
  store i8* %54, i8** %57, align 8
  %58 = bitcast %"class.std::__1::vector.47"* %6 to i8**
  store i8* %54, i8** %58, align 8
  %59 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %55, i64 %47
  %60 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %6, i64 0, i32 0, i32 2, i32 0, i32 0
  store %class.CFGAS_Char* %59, %class.CFGAS_Char** %60, align 8
  %61 = bitcast %class.CFGAS_Char** %56 to i64*
  %62 = ptrtoint i8* %54 to i64
  %63 = icmp eq %class.CFGAS_Char* %44, %30
  %64 = ptrtoint %class.CFGAS_Char* %59 to i64
  br i1 %63, label %73, label %65

65:                                               ; preds = %53, %65
  %66 = phi %class.CFGAS_Char* [ %69, %65 ], [ %55, %53 ]
  %67 = phi %class.CFGAS_Char* [ %68, %65 ], [ %44, %53 ]
  tail call void @_ZN10CFGAS_CharC1ERKS_(%class.CFGAS_Char* %66, %class.CFGAS_Char* dereferenceable(56) %67) #14
  %68 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %67, i64 1
  %69 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %66, i64 1
  %70 = icmp eq %class.CFGAS_Char* %68, %30
  br i1 %70, label %71, label %65

71:                                               ; preds = %65
  %72 = ptrtoint %class.CFGAS_Char* %69 to i64
  br label %73

73:                                               ; preds = %71, %53
  %74 = phi i64 [ %62, %53 ], [ %72, %71 ]
  store i64 %74, i64* %61, align 8
  br label %75

75:                                               ; preds = %40, %73
  %76 = phi i64 [ 0, %40 ], [ %64, %73 ]
  %77 = phi i64 [ 0, %40 ], [ %74, %73 ]
  %78 = phi i64 [ 0, %40 ], [ %62, %73 ]
  %79 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 0
  %80 = load %class.CFGAS_Char*, %class.CFGAS_Char** %79, align 8
  %81 = icmp eq %class.CFGAS_Char* %80, null
  br i1 %81, label %96, label %82

82:                                               ; preds = %75
  %83 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 1
  %84 = load %class.CFGAS_Char*, %class.CFGAS_Char** %83, align 8
  %85 = icmp eq %class.CFGAS_Char* %84, %80
  br i1 %85, label %92, label %86

86:                                               ; preds = %82, %86
  %87 = phi %class.CFGAS_Char* [ %88, %86 ], [ %84, %82 ]
  %88 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %87, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %88) #14
  %89 = icmp eq %class.CFGAS_Char* %88, %80
  br i1 %89, label %90, label %86

90:                                               ; preds = %86
  %91 = load %class.CFGAS_Char*, %class.CFGAS_Char** %79, align 8
  br label %92

92:                                               ; preds = %90, %82
  %93 = phi %class.CFGAS_Char* [ %91, %90 ], [ %80, %82 ]
  store %class.CFGAS_Char* %80, %class.CFGAS_Char** %83, align 8
  %94 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %93, i64 0, i32 0
  tail call void @_ZdlPv(i8* %94) #15
  %95 = bitcast %class.CFGAS_BreakLine* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %95, i8 0, i64 24, i1 false) #14
  br label %96

96:                                               ; preds = %75, %92
  %97 = bitcast %class.CFGAS_BreakLine* %2 to i64*
  store i64 %78, i64* %97, align 8
  %98 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 1
  %99 = bitcast %class.CFGAS_Char** %98 to i64*
  store i64 %77, i64* %99, align 8
  %100 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast %class.CFGAS_Char** %100 to i64*
  store i64 %76, i64* %101, align 8
  %102 = load %class.CFGAS_Char*, %class.CFGAS_Char** %42, align 8
  %103 = load %class.CFGAS_Char*, %class.CFGAS_Char** %7, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #14
  %104 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %102, i64 %43
  %105 = icmp eq %class.CFGAS_Char* %104, %103
  br i1 %105, label %112, label %106

106:                                              ; preds = %96, %106
  %107 = phi %class.CFGAS_Char* [ %108, %106 ], [ %103, %96 ]
  %108 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %107, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %108) #14
  %109 = icmp eq %class.CFGAS_Char* %108, %104
  br i1 %109, label %110, label %106

110:                                              ; preds = %106
  store %class.CFGAS_Char* %104, %class.CFGAS_Char** %7, align 8
  %111 = load %class.CFGAS_Char*, %class.CFGAS_Char** %42, align 8
  br label %112

112:                                              ; preds = %96, %110
  %113 = phi %class.CFGAS_Char* [ %102, %96 ], [ %111, %110 ]
  %114 = load i32, i32* %5, align 4
  store i32 %114, i32* %18, align 4
  %115 = zext i32 %22 to i64
  %116 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %113, i64 %115, i32 2
  store i8 0, i8* %116, align 2
  %117 = load i64, i64* %99, align 8
  %118 = load i64, i64* %97, align 8
  %119 = icmp eq i64 %117, %118
  br i1 %119, label %120, label %123

120:                                              ; preds = %132, %112
  %121 = phi i32 [ 0, %112 ], [ %138, %132 ]
  %122 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %2, i64 0, i32 3
  store i32 %121, i32* %122, align 4
  br label %146

123:                                              ; preds = %112, %132
  %124 = phi i64 [ %142, %132 ], [ %118, %112 ]
  %125 = phi i64 [ %140, %132 ], [ 0, %112 ]
  %126 = phi i32 [ %138, %132 ], [ 0, %112 ]
  %127 = inttoptr i64 %124 to %class.CFGAS_Char*
  %128 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %127, i64 %125
  %129 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %128) #14
  %130 = icmp ugt i8 %129, 6
  br i1 %130, label %131, label %132

131:                                              ; preds = %123
  tail call void @_ZN15CFGAS_BreakLine24DecrementArabicCharCountEv(%class.CFGAS_BreakLine* %1) #14
  tail call void @_ZN15CFGAS_BreakLine24IncrementArabicCharCountEv(%class.CFGAS_BreakLine* %2) #14
  br label %132

132:                                              ; preds = %131, %123
  %133 = load %class.CFGAS_Char*, %class.CFGAS_Char** %79, align 8
  %134 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %133, i64 %125, i32 5
  %135 = load i32, i32* %134, align 4
  %136 = icmp sgt i32 %135, 0
  %137 = select i1 %136, i32 %135, i32 0
  %138 = add nuw nsw i32 %137, %126
  %139 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %133, i64 %125, i32 0
  store i8 0, i8* %139, align 8
  %140 = add nuw i64 %125, 1
  %141 = load i64, i64* %99, align 8
  %142 = load i64, i64* %97, align 8
  %143 = sub i64 %141, %142
  %144 = sdiv exact i64 %143, 56
  %145 = icmp ult i64 %140, %144
  br i1 %145, label %123, label %120

146:                                              ; preds = %120, %35
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #14
  br label %147

147:                                              ; preds = %4, %146
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN14CFGAS_TxtBreak11GetBreakPosEPNSt3__16vectorI10CFGAS_CharNS0_9allocatorIS2_EEEEbbPi(%class.CFGAS_TxtBreak* nocapture readonly, %"class.std::__1::vector.47"* nocapture readonly, i1 zeroext, i1 zeroext, i32* nocapture) local_unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %1, i64 0, i32 0, i32 1
  %7 = bitcast %class.CFGAS_Char** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = bitcast %"class.std::__1::vector.47"* %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 %8, %10
  %12 = sdiv exact i64 %11, 56
  %13 = icmp ult i64 %12, 2147483648
  %14 = inttoptr i64 %10 to %class.CFGAS_Char*
  br i1 %13, label %16, label %15, !prof !3

15:                                               ; preds = %5
  tail call void @llvm.trap() #14
  unreachable

16:                                               ; preds = %5
  %17 = trunc i64 %12 to i32
  %18 = add nsw i32 %17, -1
  %19 = icmp slt i32 %17, 2
  br i1 %19, label %155, label %20

20:                                               ; preds = %16
  %21 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 2
  %22 = load i8, i8* %21, align 1, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %20
  %25 = load i32, i32* %4, align 4
  %26 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 7
  %27 = load i32, i32* %26, align 8
  %28 = icmp sgt i32 %25, %27
  br i1 %28, label %36, label %29

29:                                               ; preds = %24, %20
  br i1 %2, label %30, label %155

30:                                               ; preds = %29
  %31 = load i32, i32* %4, align 4
  %32 = add nsw i32 %17, -2
  %33 = sext i32 %18 to i64
  %34 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %1, i64 0, i32 0, i32 0
  %35 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %33
  br label %41

36:                                               ; preds = %24
  %37 = add nsw i32 %17, -2
  %38 = sext i32 %18 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %1, i64 0, i32 0, i32 0
  %40 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %14, i64 %38
  br i1 %2, label %41, label %48

41:                                               ; preds = %30, %36
  %42 = phi %class.CFGAS_Char* [ %35, %30 ], [ %40, %36 ]
  %43 = phi %class.CFGAS_Char** [ %34, %30 ], [ %39, %36 ]
  %44 = phi i32 [ %32, %30 ], [ %37, %36 ]
  %45 = phi i32 [ %31, %30 ], [ -1, %36 ]
  %46 = phi i32 [ %18, %30 ], [ -1, %36 ]
  %47 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %42, i64 0, i32 2
  store i8 0, i8* %47, align 2
  br label %48

48:                                               ; preds = %41, %36
  %49 = phi %class.CFGAS_Char* [ %42, %41 ], [ %40, %36 ]
  %50 = phi %class.CFGAS_Char** [ %43, %41 ], [ %39, %36 ]
  %51 = phi i32 [ %44, %41 ], [ %37, %36 ]
  %52 = phi i32 [ %45, %41 ], [ -1, %36 ]
  %53 = phi i32 [ %46, %41 ], [ -1, %36 ]
  %54 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %49, i64 0, i32 14
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = tail call zeroext i8 @_Z19FX_GetBreakPropertyw(i32 signext %56) #14
  %58 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %49, i64 0, i32 5
  %59 = load i32, i32* %58, align 8
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %64

61:                                               ; preds = %48
  %62 = load i32, i32* %4, align 4
  %63 = sub nsw i32 %62, %59
  store i32 %63, i32* %4, align 4
  br label %64

64:                                               ; preds = %48, %61
  %65 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 7
  %66 = sext i32 %51 to i64
  br label %67

67:                                               ; preds = %64, %134
  %68 = phi i64 [ %66, %64 ], [ %141, %134 ]
  %69 = phi i8 [ %57, %64 ], [ %80, %134 ]
  %70 = phi i32 [ -1, %64 ], [ %140, %134 ]
  %71 = phi i32 [ -1, %64 ], [ %139, %134 ]
  %72 = phi i32 [ -1, %64 ], [ %138, %134 ]
  %73 = phi i32 [ -1, %64 ], [ %137, %134 ]
  %74 = phi i32 [ %52, %64 ], [ %136, %134 ]
  %75 = phi i32 [ %53, %64 ], [ %135, %134 ]
  %76 = load %class.CFGAS_Char*, %class.CFGAS_Char** %50, align 8
  %77 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %76, i64 %68, i32 14
  %78 = load i16, i16* %77, align 8
  %79 = zext i16 %78 to i32
  %80 = tail call zeroext i8 @_Z19FX_GetBreakPropertyw(i32 signext %79) #14
  %81 = icmp eq i8 %69, 35
  br i1 %81, label %84, label %82

82:                                               ; preds = %67
  %83 = tail call zeroext i8 @_Z24GetLineBreakTypeFromPair16FX_BREAKPROPERTYS_(i8 zeroext %80, i8 zeroext %69) #14
  br label %84

84:                                               ; preds = %67, %82
  %85 = phi i8 [ %83, %82 ], [ 94, %67 ]
  br i1 %2, label %86, label %88

86:                                               ; preds = %84
  %87 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %76, i64 %68, i32 2
  store i8 %85, i8* %87, align 2
  br label %88

88:                                               ; preds = %86, %84
  br i1 %3, label %134, label %89

89:                                               ; preds = %88
  %90 = load i8, i8* %21, align 1, !range !2
  %91 = icmp eq i8 %90, 0
  br i1 %91, label %92, label %98

92:                                               ; preds = %89
  %93 = load i32, i32* %4, align 4
  %94 = load i32, i32* %65, align 8
  %95 = icmp sle i32 %93, %94
  %96 = icmp eq i8 %80, 35
  %97 = or i1 %96, %95
  br i1 %97, label %98, label %121

98:                                               ; preds = %89, %92
  %99 = icmp eq i8 %85, 26
  %100 = icmp slt i32 %75, 0
  %101 = and i1 %100, %99
  br i1 %101, label %102, label %105

102:                                              ; preds = %98
  %103 = load i32, i32* %4, align 4
  %104 = trunc i64 %68 to i32
  br i1 %2, label %112, label %153

105:                                              ; preds = %98
  %106 = icmp eq i8 %85, 43
  %107 = icmp slt i32 %73, 0
  %108 = and i1 %107, %106
  br i1 %108, label %109, label %112

109:                                              ; preds = %105
  %110 = load i32, i32* %4, align 4
  %111 = trunc i64 %68 to i32
  br label %112

112:                                              ; preds = %105, %109, %102
  %113 = phi i32 [ %104, %102 ], [ %75, %109 ], [ %75, %105 ]
  %114 = phi i32 [ %103, %102 ], [ %74, %109 ], [ %74, %105 ]
  %115 = phi i32 [ %73, %102 ], [ %111, %109 ], [ %73, %105 ]
  %116 = phi i32 [ %72, %102 ], [ %110, %109 ], [ %72, %105 ]
  %117 = icmp slt i32 %71, 0
  br i1 %117, label %118, label %121

118:                                              ; preds = %112
  %119 = load i32, i32* %4, align 4
  %120 = trunc i64 %68 to i32
  br label %121

121:                                              ; preds = %112, %118, %92
  %122 = phi i32 [ %113, %118 ], [ %113, %112 ], [ %75, %92 ]
  %123 = phi i32 [ %114, %118 ], [ %114, %112 ], [ %74, %92 ]
  %124 = phi i32 [ %115, %118 ], [ %115, %112 ], [ %73, %92 ]
  %125 = phi i32 [ %116, %118 ], [ %116, %112 ], [ %72, %92 ]
  %126 = phi i32 [ %120, %118 ], [ %71, %112 ], [ %71, %92 ]
  %127 = phi i32 [ %119, %118 ], [ %70, %112 ], [ %70, %92 ]
  %128 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %76, i64 %68, i32 5
  %129 = load i32, i32* %128, align 8
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %134

131:                                              ; preds = %121
  %132 = load i32, i32* %4, align 4
  %133 = sub nsw i32 %132, %129
  store i32 %133, i32* %4, align 4
  br label %134

134:                                              ; preds = %121, %131, %88
  %135 = phi i32 [ %75, %88 ], [ %122, %131 ], [ %122, %121 ]
  %136 = phi i32 [ %74, %88 ], [ %123, %131 ], [ %123, %121 ]
  %137 = phi i32 [ %73, %88 ], [ %124, %131 ], [ %124, %121 ]
  %138 = phi i32 [ %72, %88 ], [ %125, %131 ], [ %125, %121 ]
  %139 = phi i32 [ %71, %88 ], [ %126, %131 ], [ %126, %121 ]
  %140 = phi i32 [ %70, %88 ], [ %127, %131 ], [ %127, %121 ]
  %141 = add nsw i64 %68, -1
  %142 = icmp sgt i64 %68, 0
  br i1 %142, label %67, label %143

143:                                              ; preds = %134
  br i1 %3, label %155, label %144

144:                                              ; preds = %143
  %145 = icmp sgt i32 %135, -1
  br i1 %145, label %146, label %147

146:                                              ; preds = %144
  store i32 %136, i32* %4, align 4
  br label %155

147:                                              ; preds = %144
  %148 = icmp sgt i32 %137, -1
  br i1 %148, label %149, label %150

149:                                              ; preds = %147
  store i32 %138, i32* %4, align 4
  br label %155

150:                                              ; preds = %147
  %151 = icmp sgt i32 %139, -1
  br i1 %151, label %152, label %155

152:                                              ; preds = %150
  store i32 %140, i32* %4, align 4
  br label %155

153:                                              ; preds = %102
  %154 = trunc i64 %68 to i32
  br label %155

155:                                              ; preds = %153, %29, %150, %143, %152, %149, %146, %16
  %156 = phi i32 [ %18, %16 ], [ %18, %29 ], [ %135, %146 ], [ %137, %149 ], [ %139, %152 ], [ 0, %143 ], [ 0, %150 ], [ %154, %153 ]
  ret i32 %156
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak17EndBreak_BidiLineEPNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* nocapture readonly, %"class.std::__1::deque"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"struct.std::__1::__less.121", align 1
  %5 = alloca %class.CFGAS_BreakPiece, align 8
  %6 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %6) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 64, i1 false)
  call void @_ZN16CFGAS_BreakPieceC1Ev(%class.CFGAS_BreakPiece* nonnull %5) #14
  %7 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %8 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %9 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 0
  %10 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %3
  %14 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast %class.CFGAS_Char** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %class.CFGAS_BreakLine* %8 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %16, %18
  br i1 %19, label %111, label %20

20:                                               ; preds = %13
  %21 = inttoptr i64 %18 to %class.CFGAS_Char*
  %22 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 0, i32 0, i32 0
  br label %147

23:                                               ; preds = %3
  store i8 %2, i8* %6, align 8
  %24 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 1
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 2
  store i32 %28, i32* %29, align 8
  %30 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 3
  store i32 0, i32* %30, align 4
  %31 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 0, i32 0, i32 1
  %32 = bitcast %class.CFGAS_Char** %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = bitcast %class.CFGAS_BreakLine* %8 to i64*
  %35 = load i64, i64* %34, align 8
  %36 = sub i64 %33, %35
  %37 = sdiv exact i64 %36, 56
  %38 = trunc i64 %37 to i32
  %39 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 4
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 12, i32 0
  store %"class.std::__1::vector.47"* %9, %"class.std::__1::vector.47"** %40, align 8
  %41 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 0, i32 0, i32 0
  %42 = load %class.CFGAS_Char*, %class.CFGAS_Char** %41, align 8
  %43 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %42, i64 0, i32 4
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 11
  store i32 %44, i32* %45, align 4
  %46 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %42, i64 0, i32 16
  %47 = load i32, i32* %46, align 4
  %48 = shl i32 %47, 16
  %49 = ashr exact i32 %48, 16
  %50 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 8
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %42, i64 0, i32 17
  %52 = load i32, i32* %51, align 8
  %53 = shl i32 %52, 16
  %54 = ashr exact i32 %53, 16
  %55 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 9
  store i32 %54, i32* %55, align 4
  %56 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 1, i32 0, i32 1
  %57 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %56, align 8
  %58 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %59 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %58, align 8
  %60 = icmp eq %class.CFGAS_BreakPiece* %57, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %23
  call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %57, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #14
  %62 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %57, i64 1
  %63 = ptrtoint %class.CFGAS_BreakPiece* %62 to i64
  %64 = bitcast %class.CFGAS_BreakPiece** %56 to i64*
  store i64 %63, i64* %64, align 8
  br label %67

65:                                               ; preds = %23
  %66 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 1
  call void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"* %66, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #14
  br label %67

67:                                               ; preds = %61, %65
  %68 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %69 = bitcast %struct.FX_TPO*** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %72 = bitcast %struct.FX_TPO*** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %70, %73
  %75 = icmp eq i64 %74, 0
  %76 = shl i64 %74, 6
  %77 = add i64 %76, -1
  %78 = select i1 %75, i64 0, i64 %77
  %79 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %82 = load i64, i64* %81, align 8
  %83 = add i64 %82, %80
  %84 = icmp eq i64 %78, %83
  %85 = inttoptr i64 %73 to %struct.FX_TPO**
  %86 = inttoptr i64 %70 to %struct.FX_TPO**
  br i1 %84, label %87, label %93

87:                                               ; preds = %67
  call void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1) #14
  %88 = load i64, i64* %81, align 8
  %89 = load i64, i64* %79, align 8
  %90 = load %struct.FX_TPO**, %struct.FX_TPO*** %71, align 8
  %91 = load %struct.FX_TPO**, %struct.FX_TPO*** %68, align 8
  %92 = add i64 %89, %88
  br label %93

93:                                               ; preds = %87, %67
  %94 = phi i64 [ %92, %87 ], [ %83, %67 ]
  %95 = phi %struct.FX_TPO** [ %91, %87 ], [ %86, %67 ]
  %96 = phi %struct.FX_TPO** [ %90, %87 ], [ %85, %67 ]
  %97 = icmp eq %struct.FX_TPO** %95, %96
  br i1 %97, label %105, label %98

98:                                               ; preds = %93
  %99 = lshr i64 %94, 9
  %100 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %96, i64 %99
  %101 = load %struct.FX_TPO*, %struct.FX_TPO** %100, align 8
  %102 = and i64 %94, 511
  %103 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %101, i64 %102
  %104 = bitcast %struct.FX_TPO* %103 to i64*
  br label %105

105:                                              ; preds = %93, %98
  %106 = phi i64* [ %104, %98 ], [ null, %93 ]
  store i64 0, i64* %106, align 4
  %107 = load i64, i64* %81, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %81, align 8
  br label %431

109:                                              ; preds = %160
  %110 = add i64 %156, 1
  br label %111

111:                                              ; preds = %109, %13
  %112 = phi i64 [ 1, %13 ], [ %110, %109 ]
  call void @_ZN10CFGAS_Char8BidiLineEPNSt3__16vectorIS_NS0_9allocatorIS_EEEEm(%"class.std::__1::vector.47"* %9, i64 %112) #14
  store i8 1, i8* %6, align 8
  %113 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %114 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %113, i64 0, i32 2
  %115 = load i32, i32* %114, align 8
  %116 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 1
  store i32 %115, i32* %116, align 4
  %117 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %113, i64 0, i32 0
  %118 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 12, i32 0
  store %"class.std::__1::vector.47"* %117, %"class.std::__1::vector.47"** %118, align 8
  %119 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %113, i64 0, i32 0, i32 0, i32 1
  %120 = bitcast %class.CFGAS_Char** %119 to i64*
  %121 = load i64, i64* %120, align 8
  %122 = bitcast %class.CFGAS_BreakLine* %113 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = sub i64 %121, %123
  %125 = sdiv exact i64 %124, 56
  %126 = icmp ult i64 %125, 2147483648
  br i1 %126, label %128, label %127, !prof !3

127:                                              ; preds = %111
  call void @llvm.trap() #14
  unreachable

128:                                              ; preds = %111
  %129 = trunc i64 %125 to i32
  %130 = icmp sgt i32 %129, 0
  br i1 %130, label %131, label %291

131:                                              ; preds = %128
  %132 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %8, i64 0, i32 0, i32 0, i32 0
  %133 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 2
  %134 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 5
  %135 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 6
  %136 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 11
  %137 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 8
  %138 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 9
  %139 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 3
  %140 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 4
  %141 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %142 = bitcast %struct.FX_TPO*** %141 to i64*
  %143 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %144 = bitcast %struct.FX_TPO*** %143 to i64*
  %145 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %146 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %173

147:                                              ; preds = %171, %20
  %148 = phi %class.CFGAS_Char* [ %21, %20 ], [ %172, %171 ]
  %149 = phi i64 [ 0, %20 ], [ %156, %171 ]
  %150 = phi i64 [ 0, %20 ], [ %161, %171 ]
  %151 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %148, i64 %150
  %152 = trunc i64 %150 to i16
  %153 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %148, i64 %150, i32 7
  store i16 %152, i16* %153, align 2
  %154 = call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %151) #14
  %155 = icmp eq i8 %154, 3
  %156 = select i1 %155, i64 %149, i64 %150
  %157 = icmp eq i64 %150, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %147
  %159 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %148, i64 0, i32 6
  store i16 1, i16* %159, align 4
  br label %160

160:                                              ; preds = %147, %158
  %161 = add nuw i64 %150, 1
  %162 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %163 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %162, i64 0, i32 0, i32 0, i32 1
  %164 = bitcast %class.CFGAS_Char** %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = bitcast %class.CFGAS_BreakLine* %162 to i64*
  %167 = load i64, i64* %166, align 8
  %168 = sub i64 %165, %167
  %169 = sdiv exact i64 %168, 56
  %170 = icmp ult i64 %161, %169
  br i1 %170, label %171, label %109

171:                                              ; preds = %160
  %172 = load %class.CFGAS_Char*, %class.CFGAS_Char** %22, align 8
  br label %147

173:                                              ; preds = %131, %286
  %174 = phi i32 [ -1, %131 ], [ %289, %286 ]
  %175 = phi i32 [ 0, %131 ], [ %288, %286 ]
  %176 = phi i32 [ -1, %131 ], [ %287, %286 ]
  %177 = sext i32 %175 to i64
  %178 = load %class.CFGAS_Char*, %class.CFGAS_Char** %132, align 8
  %179 = icmp slt i32 %176, 0
  br i1 %179, label %180, label %197

180:                                              ; preds = %173
  %181 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 6
  %182 = load i16, i16* %181, align 4
  %183 = zext i16 %182 to i32
  store i32 0, i32* %133, align 8
  store i32 %183, i32* %134, align 4
  %184 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 8
  %185 = load i16, i16* %184, align 8
  %186 = zext i16 %185 to i32
  store i32 %186, i32* %135, align 8
  %187 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 4
  %188 = load i32, i32* %187, align 4
  store i32 %188, i32* %136, align 4
  %189 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 16
  %190 = load i32, i32* %189, align 4
  %191 = shl i32 %190, 16
  %192 = ashr exact i32 %191, 16
  store i32 %192, i32* %137, align 8
  %193 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 17
  %194 = load i32, i32* %193, align 8
  %195 = shl i32 %194, 16
  %196 = ashr exact i32 %195, 16
  store i32 %196, i32* %138, align 4
  store i8 1, i8* %6, align 8
  br label %197

197:                                              ; preds = %180, %173
  %198 = phi i32 [ %183, %180 ], [ %176, %173 ]
  %199 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 6
  %200 = load i16, i16* %199, align 4
  %201 = zext i16 %200 to i32
  %202 = icmp eq i32 %198, %201
  br i1 %202, label %203, label %216

203:                                              ; preds = %197
  %204 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 0
  %205 = load i8, i8* %204, align 8
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %277, label %207

207:                                              ; preds = %203
  store i8 %205, i8* %6, align 8
  %208 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 5
  %209 = load i32, i32* %208, align 8
  %210 = icmp sgt i32 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %207
  %212 = load i32, i32* %133, align 8
  %213 = add nsw i32 %212, %209
  store i32 %213, i32* %133, align 8
  br label %214

214:                                              ; preds = %211, %207
  %215 = add nsw i32 %175, 1
  br label %216

216:                                              ; preds = %197, %214
  %217 = phi i32 [ %215, %214 ], [ %175, %197 ]
  %218 = load i32, i32* %139, align 4
  %219 = sub nsw i32 %217, %218
  store i32 %219, i32* %140, align 8
  %220 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %221 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %220, i64 0, i32 1, i32 0, i32 1
  %222 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %221, align 8
  %223 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %220, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %224 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %223, align 8
  %225 = icmp eq %class.CFGAS_BreakPiece* %222, %224
  br i1 %225, label %230, label %226

226:                                              ; preds = %216
  call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %222, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #14
  %227 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %222, i64 1
  %228 = ptrtoint %class.CFGAS_BreakPiece* %227 to i64
  %229 = bitcast %class.CFGAS_BreakPiece** %221 to i64*
  store i64 %228, i64* %229, align 8
  br label %232

230:                                              ; preds = %216
  %231 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %220, i64 0, i32 1
  call void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"* %231, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #14
  br label %232

232:                                              ; preds = %226, %230
  %233 = load i32, i32* %133, align 8
  %234 = load i32, i32* %116, align 4
  %235 = add nsw i32 %234, %233
  store i32 %235, i32* %116, align 4
  store i32 %217, i32* %139, align 4
  %236 = add nsw i32 %174, 1
  %237 = load i32, i32* %135, align 8
  %238 = load i64, i64* %142, align 8
  %239 = load i64, i64* %144, align 8
  %240 = sub i64 %238, %239
  %241 = icmp eq i64 %240, 0
  %242 = shl i64 %240, 6
  %243 = add i64 %242, -1
  %244 = select i1 %241, i64 0, i64 %243
  %245 = load i64, i64* %145, align 8
  %246 = load i64, i64* %146, align 8
  %247 = add i64 %246, %245
  %248 = icmp eq i64 %244, %247
  %249 = inttoptr i64 %239 to %struct.FX_TPO**
  %250 = inttoptr i64 %238 to %struct.FX_TPO**
  br i1 %248, label %251, label %257

251:                                              ; preds = %232
  call void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1) #14
  %252 = load i64, i64* %146, align 8
  %253 = load i64, i64* %145, align 8
  %254 = load %struct.FX_TPO**, %struct.FX_TPO*** %143, align 8
  %255 = load %struct.FX_TPO**, %struct.FX_TPO*** %141, align 8
  %256 = add i64 %253, %252
  br label %257

257:                                              ; preds = %251, %232
  %258 = phi i64 [ %256, %251 ], [ %247, %232 ]
  %259 = phi %struct.FX_TPO** [ %255, %251 ], [ %250, %232 ]
  %260 = phi %struct.FX_TPO** [ %254, %251 ], [ %249, %232 ]
  %261 = icmp eq %struct.FX_TPO** %259, %260
  br i1 %261, label %269, label %262

262:                                              ; preds = %257
  %263 = lshr i64 %258, 9
  %264 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %260, i64 %263
  %265 = load %struct.FX_TPO*, %struct.FX_TPO** %264, align 8
  %266 = and i64 %258, 511
  %267 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %265, i64 %266
  %268 = bitcast %struct.FX_TPO* %267 to i64*
  br label %269

269:                                              ; preds = %257, %262
  %270 = phi i64* [ %268, %262 ], [ null, %257 ]
  %271 = zext i32 %237 to i64
  %272 = shl nuw i64 %271, 32
  %273 = zext i32 %236 to i64
  %274 = or i64 %272, %273
  store i64 %274, i64* %270, align 4
  %275 = load i64, i64* %146, align 8
  %276 = add i64 %275, 1
  store i64 %276, i64* %146, align 8
  br label %286

277:                                              ; preds = %203
  %278 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %178, i64 %177, i32 5
  %279 = load i32, i32* %278, align 8
  %280 = icmp sgt i32 %279, 0
  br i1 %280, label %281, label %284

281:                                              ; preds = %277
  %282 = load i32, i32* %133, align 8
  %283 = add nsw i32 %282, %279
  store i32 %283, i32* %133, align 8
  br label %284

284:                                              ; preds = %281, %277
  %285 = add nsw i32 %175, 1
  br label %286

286:                                              ; preds = %284, %269
  %287 = phi i32 [ -1, %269 ], [ %198, %284 ]
  %288 = phi i32 [ %217, %269 ], [ %285, %284 ]
  %289 = phi i32 [ %236, %269 ], [ %174, %284 ]
  %290 = icmp slt i32 %288, %129
  br i1 %290, label %173, label %291

291:                                              ; preds = %286, %128
  %292 = phi i32 [ 0, %128 ], [ %288, %286 ]
  %293 = phi i32 [ -1, %128 ], [ %289, %286 ]
  %294 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 3
  %295 = load i32, i32* %294, align 4
  %296 = icmp sgt i32 %292, %295
  br i1 %296, label %297, label %361

297:                                              ; preds = %291
  store i8 %2, i8* %6, align 8
  %298 = sub nsw i32 %292, %295
  %299 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 4
  store i32 %298, i32* %299, align 8
  %300 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %301 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %300, i64 0, i32 1, i32 0, i32 1
  %302 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %301, align 8
  %303 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %300, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %304 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %303, align 8
  %305 = icmp eq %class.CFGAS_BreakPiece* %302, %304
  br i1 %305, label %310, label %306

306:                                              ; preds = %297
  call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %302, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #14
  %307 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %302, i64 1
  %308 = ptrtoint %class.CFGAS_BreakPiece* %307 to i64
  %309 = bitcast %class.CFGAS_BreakPiece** %301 to i64*
  store i64 %308, i64* %309, align 8
  br label %312

310:                                              ; preds = %297
  %311 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %300, i64 0, i32 1
  call void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"* %311, %class.CFGAS_BreakPiece* nonnull dereferenceable(64) %5) #14
  br label %312

312:                                              ; preds = %306, %310
  %313 = add nsw i32 %293, 1
  %314 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %5, i64 0, i32 6
  %315 = load i32, i32* %314, align 8
  %316 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %317 = bitcast %struct.FX_TPO*** %316 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %320 = bitcast %struct.FX_TPO*** %319 to i64*
  %321 = load i64, i64* %320, align 8
  %322 = sub i64 %318, %321
  %323 = icmp eq i64 %322, 0
  %324 = shl i64 %322, 6
  %325 = add i64 %324, -1
  %326 = select i1 %323, i64 0, i64 %325
  %327 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %330 = load i64, i64* %329, align 8
  %331 = add i64 %330, %328
  %332 = icmp eq i64 %326, %331
  %333 = inttoptr i64 %321 to %struct.FX_TPO**
  %334 = inttoptr i64 %318 to %struct.FX_TPO**
  br i1 %332, label %335, label %341

335:                                              ; preds = %312
  call void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %1) #14
  %336 = load i64, i64* %329, align 8
  %337 = load i64, i64* %327, align 8
  %338 = load %struct.FX_TPO**, %struct.FX_TPO*** %319, align 8
  %339 = load %struct.FX_TPO**, %struct.FX_TPO*** %316, align 8
  %340 = add i64 %337, %336
  br label %341

341:                                              ; preds = %335, %312
  %342 = phi i64 [ %340, %335 ], [ %331, %312 ]
  %343 = phi %struct.FX_TPO** [ %339, %335 ], [ %334, %312 ]
  %344 = phi %struct.FX_TPO** [ %338, %335 ], [ %333, %312 ]
  %345 = icmp eq %struct.FX_TPO** %343, %344
  br i1 %345, label %353, label %346

346:                                              ; preds = %341
  %347 = lshr i64 %342, 9
  %348 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %344, i64 %347
  %349 = load %struct.FX_TPO*, %struct.FX_TPO** %348, align 8
  %350 = and i64 %342, 511
  %351 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %349, i64 %350
  %352 = bitcast %struct.FX_TPO* %351 to i64*
  br label %353

353:                                              ; preds = %341, %346
  %354 = phi i64* [ %352, %346 ], [ null, %341 ]
  %355 = zext i32 %315 to i64
  %356 = shl nuw i64 %355, 32
  %357 = zext i32 %313 to i64
  %358 = or i64 %356, %357
  store i64 %358, i64* %354, align 4
  %359 = load i64, i64* %329, align 8
  %360 = add i64 %359, 1
  store i64 %360, i64* %329, align 8
  br label %361

361:                                              ; preds = %353, %291
  %362 = phi i32 [ %313, %353 ], [ %293, %291 ]
  %363 = icmp sgt i32 %362, -1
  br i1 %363, label %364, label %431

364:                                              ; preds = %361
  %365 = icmp eq i32 %362, 0
  br i1 %365, label %425, label %366

366:                                              ; preds = %364
  %367 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %368 = load %struct.FX_TPO**, %struct.FX_TPO*** %367, align 8
  %369 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %370 = load i64, i64* %369, align 8
  %371 = lshr i64 %370, 9
  %372 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %368, i64 %371
  %373 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %374 = load %struct.FX_TPO**, %struct.FX_TPO*** %373, align 8
  %375 = icmp eq %struct.FX_TPO** %374, %368
  br i1 %375, label %376, label %382

376:                                              ; preds = %366
  %377 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %378 = load i64, i64* %377, align 8
  %379 = add i64 %378, %370
  %380 = lshr i64 %379, 9
  %381 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %368, i64 %380
  br label %394

382:                                              ; preds = %366
  %383 = load %struct.FX_TPO*, %struct.FX_TPO** %372, align 8
  %384 = and i64 %370, 511
  %385 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %383, i64 %384
  %386 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %387 = load i64, i64* %386, align 8
  %388 = add i64 %387, %370
  %389 = lshr i64 %388, 9
  %390 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %368, i64 %389
  %391 = load %struct.FX_TPO*, %struct.FX_TPO** %390, align 8
  %392 = and i64 %388, 511
  %393 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %391, i64 %392
  br label %394

394:                                              ; preds = %382, %376
  %395 = phi %struct.FX_TPO** [ %390, %382 ], [ %381, %376 ]
  %396 = phi %struct.FX_TPO* [ %385, %382 ], [ null, %376 ]
  %397 = phi %struct.FX_TPO* [ %393, %382 ], [ null, %376 ]
  %398 = getelementptr inbounds %"struct.std::__1::__less.121", %"struct.std::__1::__less.121"* %4, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %398) #14
  call void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %372, %struct.FX_TPO* %396, %struct.FX_TPO** %395, %struct.FX_TPO* %397, %"struct.std::__1::__less.121"* nonnull dereferenceable(1) %4) #14
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %398) #14
  %399 = add nuw i32 %362, 1
  %400 = zext i32 %399 to i64
  br label %401

401:                                              ; preds = %401, %394
  %402 = phi i64 [ 0, %394 ], [ %423, %401 ]
  %403 = phi i32 [ 0, %394 ], [ %422, %401 ]
  %404 = load i64, i64* %369, align 8
  %405 = add i64 %404, %402
  %406 = load %struct.FX_TPO**, %struct.FX_TPO*** %367, align 8
  %407 = lshr i64 %405, 9
  %408 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %406, i64 %407
  %409 = load %struct.FX_TPO*, %struct.FX_TPO** %408, align 8
  %410 = and i64 %405, 511
  %411 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %409, i64 %410
  %412 = bitcast %struct.FX_TPO* %411 to i64*
  %413 = load i64, i64* %412, align 4
  %414 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %415 = shl i64 %413, 32
  %416 = ashr exact i64 %415, 32
  %417 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %414, i64 0, i32 1, i32 0, i32 0
  %418 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %417, align 8
  %419 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %418, i64 %416, i32 1
  store i32 %403, i32* %419, align 4
  %420 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %418, i64 %416, i32 2
  %421 = load i32, i32* %420, align 8
  %422 = add nsw i32 %421, %403
  %423 = add nuw nsw i64 %402, 1
  %424 = icmp eq i64 %423, %400
  br i1 %424, label %425, label %401

425:                                              ; preds = %401, %364
  %426 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %7, align 8
  %427 = sext i32 %362 to i64
  %428 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %426, i64 0, i32 1, i32 0, i32 0
  %429 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %428, align 8
  %430 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %429, i64 %427, i32 0
  store i8 %2, i8* %430, align 8
  br label %431

431:                                              ; preds = %361, %425, %105
  call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* nonnull %5) #14
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %6) #14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare void @_ZN16CFGAS_BreakPieceC1Ev(%class.CFGAS_BreakPiece*) unnamed_addr #1

declare void @_ZN10CFGAS_Char8BidiLineEPNSt3__16vectorIS_NS0_9allocatorIS_EEEEm(%"class.std::__1::vector.47"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak18EndBreak_AlignmentERKNSt3__15dequeI6FX_TPONS0_9allocatorIS2_EEEEbN10CFGAS_Char9BreakTypeE(%class.CFGAS_TxtBreak* nocapture readonly, %"class.std::__1::deque"* dereferenceable(48), i1 zeroext, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 16, i32 0
  %6 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %7 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8, !noalias !4
  %11 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8, !noalias !4
  %13 = add i64 %12, %10
  %14 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 1
  %15 = load %struct.FX_TPO**, %struct.FX_TPO*** %14, align 8, !noalias !4
  %16 = lshr i64 %13, 9
  %17 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %15, i64 %16
  %18 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %1, i64 0, i32 0, i32 0, i32 2
  %19 = load %struct.FX_TPO**, %struct.FX_TPO*** %18, align 8, !noalias !4
  %20 = icmp eq %struct.FX_TPO** %19, %15
  br i1 %20, label %134, label %21

21:                                               ; preds = %4
  %22 = load %struct.FX_TPO*, %struct.FX_TPO** %17, align 8, !noalias !4
  %23 = and i64 %13, 511
  %24 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %22, i64 %23
  %25 = lshr i64 %12, 9
  %26 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %15, i64 %25
  %27 = load %struct.FX_TPO*, %struct.FX_TPO** %26, align 8, !noalias !11
  %28 = and i64 %12, 511
  %29 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %27, i64 %28
  %30 = icmp eq %struct.FX_TPO* %24, %29
  br i1 %30, label %134, label %31

31:                                               ; preds = %21
  %32 = xor i1 %2, true
  %33 = load %struct.FX_TPO*, %struct.FX_TPO** %17, align 8
  br label %34

34:                                               ; preds = %31, %128
  %35 = phi %struct.FX_TPO* [ %33, %31 ], [ %129, %128 ]
  %36 = phi i32 [ %8, %31 ], [ %116, %128 ]
  %37 = phi i32 [ 0, %31 ], [ %118, %128 ]
  %38 = phi i8 [ 0, %31 ], [ %117, %128 ]
  %39 = phi %struct.FX_TPO** [ %17, %31 ], [ %130, %128 ]
  %40 = phi %struct.FX_TPO* [ %24, %31 ], [ %132, %128 ]
  %41 = icmp eq %struct.FX_TPO* %40, %35
  br i1 %41, label %42, label %46

42:                                               ; preds = %34
  %43 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %39, i64 -1
  %44 = load %struct.FX_TPO*, %struct.FX_TPO** %43, align 8
  %45 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %44, i64 512
  br label %46

46:                                               ; preds = %34, %42
  %47 = phi %struct.FX_TPO* [ %45, %42 ], [ %40, %34 ]
  %48 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %49 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %47, i64 -1, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %48, i64 0, i32 1, i32 0, i32 0
  %53 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %52, align 8
  %54 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %53, i64 %51
  %55 = and i8 %38, 1
  %56 = icmp eq i8 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %46
  %58 = tail call i32 @_ZNK16CFGAS_BreakPiece9GetEndPosEv(%class.CFGAS_BreakPiece* %54) #14
  br label %59

59:                                               ; preds = %46, %57
  %60 = phi i32 [ %36, %46 ], [ %58, %57 ]
  %61 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %53, i64 %51, i32 5
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 1
  %64 = icmp ne i32 %63, 0
  %65 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %53, i64 %51, i32 4
  %66 = load i32, i32* %65, align 8
  %67 = add nsw i32 %66, -1
  %68 = select i1 %64, i32 0, i32 %67
  %69 = icmp sgt i32 %68, -1
  br i1 %69, label %70, label %114

70:                                               ; preds = %59
  %71 = select i1 %64, i32 1, i32 -1
  %72 = icmp slt i32 %68, %66
  br i1 %72, label %73, label %109

73:                                               ; preds = %70, %106
  %74 = phi i32 [ %104, %106 ], [ %68, %70 ]
  %75 = phi i8 [ %102, %106 ], [ %38, %70 ]
  %76 = phi i32 [ %83, %106 ], [ %37, %70 ]
  %77 = phi i32 [ %103, %106 ], [ %60, %70 ]
  %78 = tail call %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece* %54, i32 %74) #14
  %79 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %78, i64 0, i32 2
  %80 = load i8, i8* %79, align 2
  %81 = icmp eq i8 %80, 26
  %82 = zext i1 %81 to i32
  %83 = add nsw i32 %76, %82
  %84 = and i8 %75, 1
  %85 = icmp ne i8 %84, 0
  %86 = xor i1 %85, true
  %87 = or i1 %32, %86
  br i1 %87, label %88, label %101

88:                                               ; preds = %73
  %89 = tail call zeroext i8 @_ZNK10CFGAS_Char11GetCharTypeEv(%class.CFGAS_Char* %78) #14
  %90 = or i8 %89, 1
  %91 = icmp eq i8 %90, 3
  br i1 %91, label %92, label %100

92:                                               ; preds = %88
  %93 = or i1 %85, %32
  br i1 %93, label %101, label %94

94:                                               ; preds = %92
  %95 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %78, i64 0, i32 5
  %96 = load i32, i32* %95, align 8
  %97 = icmp sgt i32 %96, 0
  %98 = select i1 %97, i32 %96, i32 0
  %99 = sub nsw i32 %77, %98
  br label %101

100:                                              ; preds = %88
  br i1 %2, label %101, label %109

101:                                              ; preds = %94, %92, %100, %73
  %102 = phi i8 [ %75, %73 ], [ %75, %92 ], [ 1, %100 ], [ %75, %94 ]
  %103 = phi i32 [ %77, %73 ], [ %77, %92 ], [ %77, %100 ], [ %99, %94 ]
  %104 = add nsw i32 %74, %71
  %105 = icmp sgt i32 %104, -1
  br i1 %105, label %106, label %109

106:                                              ; preds = %101
  %107 = load i32, i32* %65, align 8
  %108 = icmp slt i32 %104, %107
  br i1 %108, label %73, label %109

109:                                              ; preds = %106, %101, %100, %70
  %110 = phi i32 [ %60, %70 ], [ %103, %106 ], [ %103, %101 ], [ %77, %100 ]
  %111 = phi i8 [ %38, %70 ], [ %102, %106 ], [ %102, %101 ], [ 1, %100 ]
  %112 = phi i32 [ %37, %70 ], [ %83, %100 ], [ %83, %101 ], [ %83, %106 ]
  %113 = and i8 %111, 1
  br label %114

114:                                              ; preds = %109, %59
  %115 = phi i8 [ %113, %109 ], [ %55, %59 ]
  %116 = phi i32 [ %110, %109 ], [ %60, %59 ]
  %117 = phi i8 [ %111, %109 ], [ %38, %59 ]
  %118 = phi i32 [ %112, %109 ], [ %37, %59 ]
  %119 = icmp eq i8 %115, 0
  %120 = or i1 %119, %2
  br i1 %120, label %121, label %138

121:                                              ; preds = %114
  %122 = load %struct.FX_TPO*, %struct.FX_TPO** %39, align 8
  %123 = icmp eq %struct.FX_TPO* %40, %122
  br i1 %123, label %124, label %128

124:                                              ; preds = %121
  %125 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %39, i64 -1
  %126 = load %struct.FX_TPO*, %struct.FX_TPO** %125, align 8
  %127 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %126, i64 512
  br label %128

128:                                              ; preds = %121, %124
  %129 = phi %struct.FX_TPO* [ %126, %124 ], [ %122, %121 ]
  %130 = phi %struct.FX_TPO** [ %125, %124 ], [ %39, %121 ]
  %131 = phi %struct.FX_TPO* [ %127, %124 ], [ %40, %121 ]
  %132 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %131, i64 -1
  %133 = icmp eq %struct.FX_TPO* %132, %29
  br i1 %133, label %138, label %34

134:                                              ; preds = %21, %4
  %135 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 7
  %136 = load i32, i32* %135, align 8
  %137 = sub nsw i32 %136, %8
  br label %143

138:                                              ; preds = %114, %128
  %139 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 0, i32 7
  %140 = load i32, i32* %139, align 8
  %141 = sub nsw i32 %140, %116
  %142 = icmp sgt i32 %118, 0
  br i1 %142, label %147, label %143

143:                                              ; preds = %134, %138
  %144 = phi i32 [ %137, %134 ], [ %141, %138 ]
  %145 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 1
  %146 = load i32, i32* %145, align 8
  br label %247

147:                                              ; preds = %138
  %148 = getelementptr inbounds %class.CFGAS_TxtBreak, %class.CFGAS_TxtBreak* %0, i64 0, i32 1
  %149 = load i32, i32* %148, align 8
  %150 = and i32 %149, 4
  %151 = icmp ne i32 %150, 0
  %152 = icmp ne i8 %3, 3
  %153 = and i1 %152, %151
  br i1 %153, label %154, label %247

154:                                              ; preds = %147
  %155 = load %struct.FX_TPO**, %struct.FX_TPO*** %14, align 8
  %156 = load i64, i64* %11, align 8
  %157 = lshr i64 %156, 9
  %158 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %155, i64 %157
  %159 = load %struct.FX_TPO**, %struct.FX_TPO*** %18, align 8
  %160 = icmp eq %struct.FX_TPO** %159, %155
  br i1 %160, label %313, label %161

161:                                              ; preds = %154
  %162 = load %struct.FX_TPO*, %struct.FX_TPO** %158, align 8
  %163 = and i64 %156, 511
  %164 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %162, i64 %163
  %165 = load i64, i64* %9, align 8
  %166 = add i64 %165, %156
  %167 = lshr i64 %166, 9
  %168 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %155, i64 %167
  %169 = load %struct.FX_TPO*, %struct.FX_TPO** %168, align 8
  %170 = and i64 %166, 511
  %171 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %169, i64 %170
  %172 = icmp eq %struct.FX_TPO* %171, %164
  br i1 %172, label %313, label %173

173:                                              ; preds = %161, %216
  %174 = phi %struct.FX_TPO* [ %219, %216 ], [ %164, %161 ]
  %175 = phi i32 [ %202, %216 ], [ %118, %161 ]
  %176 = phi i32 [ %205, %216 ], [ -1, %161 ]
  %177 = phi i32 [ %201, %216 ], [ %141, %161 ]
  %178 = phi %struct.FX_TPO** [ %218, %216 ], [ %158, %161 ]
  %179 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %180 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %174, i64 0, i32 0
  %181 = load i32, i32* %180, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %179, i64 0, i32 1, i32 0, i32 0
  %184 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %183, align 8
  %185 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %184, i64 %182
  %186 = icmp slt i32 %176, -1
  %187 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %184, i64 %182, i32 1
  br i1 %186, label %188, label %190

188:                                              ; preds = %173
  %189 = load i32, i32* %187, align 4
  br label %191

190:                                              ; preds = %173
  store i32 %176, i32* %187, align 4
  br label %191

191:                                              ; preds = %190, %188
  %192 = phi i32 [ %189, %188 ], [ %176, %190 ]
  %193 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %184, i64 %182, i32 4
  %194 = load i32, i32* %193, align 8
  %195 = icmp sgt i32 %194, 0
  %196 = icmp sgt i32 %175, 0
  %197 = and i1 %196, %195
  br i1 %197, label %198, label %200

198:                                              ; preds = %191
  %199 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %184, i64 %182, i32 2
  br label %221

200:                                              ; preds = %239, %191
  %201 = phi i32 [ %177, %191 ], [ %240, %239 ]
  %202 = phi i32 [ %175, %191 ], [ %242, %239 ]
  %203 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %184, i64 %182, i32 2
  %204 = load i32, i32* %203, align 8
  %205 = add nsw i32 %204, %192
  %206 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %174, i64 1
  %207 = ptrtoint %struct.FX_TPO* %206 to i64
  %208 = bitcast %struct.FX_TPO** %178 to i64*
  %209 = load i64, i64* %208, align 8
  %210 = sub i64 %207, %209
  %211 = icmp eq i64 %210, 4096
  br i1 %211, label %212, label %216

212:                                              ; preds = %200
  %213 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %178, i64 1
  %214 = bitcast %struct.FX_TPO** %213 to i64*
  %215 = load i64, i64* %214, align 8
  br label %216

216:                                              ; preds = %200, %212
  %217 = phi i64 [ %215, %212 ], [ %207, %200 ]
  %218 = phi %struct.FX_TPO** [ %213, %212 ], [ %178, %200 ]
  %219 = inttoptr i64 %217 to %struct.FX_TPO*
  %220 = icmp eq %struct.FX_TPO* %171, %219
  br i1 %220, label %313, label %173

221:                                              ; preds = %198, %239
  %222 = phi i32 [ %175, %198 ], [ %242, %239 ]
  %223 = phi i32 [ 0, %198 ], [ %241, %239 ]
  %224 = phi i32 [ %177, %198 ], [ %240, %239 ]
  %225 = tail call %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece* %185, i32 %223) #14
  %226 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %225, i64 0, i32 2
  %227 = load i8, i8* %226, align 2
  %228 = icmp eq i8 %227, 26
  br i1 %228, label %229, label %239

229:                                              ; preds = %221
  %230 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %225, i64 0, i32 5
  %231 = load i32, i32* %230, align 8
  %232 = icmp slt i32 %231, 0
  br i1 %232, label %239, label %233

233:                                              ; preds = %229
  %234 = sdiv i32 %224, %222
  %235 = add nsw i32 %234, %231
  store i32 %235, i32* %230, align 8
  %236 = load i32, i32* %199, align 8
  %237 = add nsw i32 %236, %234
  store i32 %237, i32* %199, align 8
  %238 = sub nsw i32 %224, %234
  br label %239

239:                                              ; preds = %229, %221, %233
  %240 = phi i32 [ %238, %233 ], [ %224, %221 ], [ %224, %229 ]
  %241 = add nuw nsw i32 %223, 1
  %242 = add nsw i32 %222, -1
  %243 = load i32, i32* %193, align 8
  %244 = icmp slt i32 %241, %243
  %245 = icmp sgt i32 %242, 0
  %246 = and i1 %245, %244
  br i1 %246, label %221, label %200

247:                                              ; preds = %143, %147
  %248 = phi i32 [ %144, %143 ], [ %141, %147 ]
  %249 = phi i32 [ %146, %143 ], [ %149, %147 ]
  %250 = and i32 %249, 3
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %313, label %252

252:                                              ; preds = %247
  %253 = icmp eq i32 %250, 1
  %254 = sdiv i32 %248, 2
  %255 = select i1 %253, i32 %254, i32 %248
  %256 = icmp sgt i32 %255, 0
  br i1 %256, label %257, label %313

257:                                              ; preds = %252
  %258 = load %class.CFGAS_BreakLine*, %class.CFGAS_BreakLine** %5, align 8
  %259 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %258, i64 0, i32 1, i32 0, i32 0
  %260 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %259, align 8
  %261 = getelementptr inbounds %class.CFGAS_BreakLine, %class.CFGAS_BreakLine* %258, i64 0, i32 1, i32 0, i32 1
  %262 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %261, align 8
  %263 = icmp eq %class.CFGAS_BreakPiece* %260, %262
  br i1 %263, label %313, label %264

264:                                              ; preds = %257
  %265 = ptrtoint %class.CFGAS_BreakPiece* %260 to i64
  %266 = getelementptr %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %262, i64 -1, i32 0
  %267 = ptrtoint i8* %266 to i64
  %268 = sub i64 %267, %265
  %269 = lshr i64 %268, 6
  %270 = add nuw nsw i64 %269, 1
  %271 = and i64 %270, 7
  %272 = icmp eq i64 %271, 0
  br i1 %272, label %282, label %273

273:                                              ; preds = %264, %273
  %274 = phi %class.CFGAS_BreakPiece* [ %279, %273 ], [ %260, %264 ]
  %275 = phi i64 [ %280, %273 ], [ %271, %264 ]
  %276 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %274, i64 0, i32 1
  %277 = load i32, i32* %276, align 4
  %278 = add nsw i32 %277, %255
  store i32 %278, i32* %276, align 4
  %279 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %274, i64 1
  %280 = add i64 %275, -1
  %281 = icmp eq i64 %280, 0
  br i1 %281, label %282, label %273, !llvm.loop !18

282:                                              ; preds = %273, %264
  %283 = phi %class.CFGAS_BreakPiece* [ %260, %264 ], [ %279, %273 ]
  %284 = icmp ult i64 %268, 448
  br i1 %284, label %313, label %285

285:                                              ; preds = %282, %285
  %286 = phi %class.CFGAS_BreakPiece* [ %311, %285 ], [ %283, %282 ]
  %287 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 0, i32 1
  %288 = load i32, i32* %287, align 4
  %289 = add nsw i32 %288, %255
  store i32 %289, i32* %287, align 4
  %290 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 1, i32 1
  %291 = load i32, i32* %290, align 4
  %292 = add nsw i32 %291, %255
  store i32 %292, i32* %290, align 4
  %293 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 2, i32 1
  %294 = load i32, i32* %293, align 4
  %295 = add nsw i32 %294, %255
  store i32 %295, i32* %293, align 4
  %296 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 3, i32 1
  %297 = load i32, i32* %296, align 4
  %298 = add nsw i32 %297, %255
  store i32 %298, i32* %296, align 4
  %299 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 4, i32 1
  %300 = load i32, i32* %299, align 4
  %301 = add nsw i32 %300, %255
  store i32 %301, i32* %299, align 4
  %302 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 5, i32 1
  %303 = load i32, i32* %302, align 4
  %304 = add nsw i32 %303, %255
  store i32 %304, i32* %302, align 4
  %305 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 6, i32 1
  %306 = load i32, i32* %305, align 4
  %307 = add nsw i32 %306, %255
  store i32 %307, i32* %305, align 4
  %308 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 7, i32 1
  %309 = load i32, i32* %308, align 4
  %310 = add nsw i32 %309, %255
  store i32 %310, i32* %308, align 4
  %311 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %286, i64 8
  %312 = icmp eq %class.CFGAS_BreakPiece* %311, %262
  br i1 %312, label %313, label %285

313:                                              ; preds = %216, %282, %285, %154, %257, %161, %247, %252
  ret void
}

declare i32 @_ZNK16CFGAS_BreakPiece9GetEndPosEv(%class.CFGAS_BreakPiece*) local_unnamed_addr #1

declare %class.CFGAS_Char* @_ZNK16CFGAS_BreakPiece7GetCharEi(%class.CFGAS_BreakPiece*, i32) local_unnamed_addr #1

declare zeroext i8 @_Z19FX_GetBreakPropertyw(i32 signext) local_unnamed_addr #1

declare zeroext i8 @_Z24GetLineBreakTypeFromPair16FX_BREAKPROPERTYS_(i8 zeroext, i8 zeroext) local_unnamed_addr #1

declare void @_ZN15CFGAS_BreakLine5ClearEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

declare void @_ZN15CFGAS_BreakLine24DecrementArabicCharCountEv(%class.CFGAS_BreakLine*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK14CFGAS_TxtBreak13GetDisplayPosERKNS_3RunEP11TextCharPos(%class.CFGAS_TxtBreak* nocapture readnone, %"struct.CFGAS_TxtBreak::Run"* nocapture readonly dereferenceable(80), %class.TextCharPos*) local_unnamed_addr #0 align 2 {
  %4 = alloca [3 x %struct.FX_FORMCHAR], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.FX_RECT, align 4
  %8 = alloca %struct.FX_RECT, align 4
  %9 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 4
  %11 = icmp slt i32 %10, 1
  br i1 %11, label %426, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 0
  %14 = load %"class.CFGAS_TxtBreak::Engine"*, %"class.CFGAS_TxtBreak::Engine"** %13, align 8
  %15 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %15, align 8
  %17 = icmp eq %"class.fxcrt::StringDataTemplate"* %16, null
  %18 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %16, i64 0, i32 3
  %19 = select i1 %17, [1 x i32]* @.str, [1 x i32]* %18
  %20 = getelementptr inbounds [1 x i32], [1 x i32]* %19, i64 0, i64 0
  %21 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 2
  %22 = load i32*, i32** %21, align 8
  %23 = add nsw i32 %10, -1
  %24 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %25 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %24, align 8
  %26 = icmp eq %class.CFGAS_GEFont* %25, null
  br i1 %26, label %31, label %27

27:                                               ; preds = %12
  %28 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %25, i64 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = add nsw i64 %29, 1
  store i64 %30, i64* %28, align 8
  br label %31

31:                                               ; preds = %27, %12
  %32 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 7
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 12
  %35 = bitcast %class.CFX_RectF** %34 to i8**
  %36 = load i8*, i8** %35, align 8
  %37 = bitcast i8* %36 to float*
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds i8, i8* %36, i64 4
  %40 = bitcast i8* %39 to float*
  %41 = load float, float* %40, align 4
  %42 = getelementptr inbounds i8, i8* %36, i64 8
  %43 = bitcast i8* %42 to float*
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds i8, i8* %36, i64 12
  %46 = bitcast i8* %45 to float*
  %47 = load float, float* %46, align 4
  %48 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 10
  %49 = load i32, i32* %48, align 8
  %50 = and i32 %49, 64
  %51 = icmp ne i32 %50, 0
  %52 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 6
  %53 = load float, float* %52, align 8
  %54 = fmul float %53, 2.000000e+01
  %55 = tail call i32 @FXSYS_roundf(float %54) #14
  %56 = tail call i32 @_ZNK12CFGAS_GEFont9GetAscentEv(%class.CFGAS_GEFont* %25) #14
  %57 = tail call i32 @_ZNK12CFGAS_GEFont10GetDescentEv(%class.CFGAS_GEFont* %25) #14
  %58 = sub nsw i32 %56, %57
  %59 = sitofp i32 %56 to float
  %60 = fmul float %53, %59
  %61 = sitofp i32 %58 to float
  %62 = fdiv float %60, %61
  %63 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 8
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 9
  %66 = load i32, i32* %65, align 4
  %67 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 13
  %68 = load i8, i8* %67, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  %70 = bitcast [3 x %struct.FX_FORMCHAR]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #14
  %71 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 0, i32 0
  %72 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 0, i32 1
  %73 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 0, i32 2
  %74 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 1, i32 1
  %75 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 1, i32 2
  %76 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 2, i32 1
  %77 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 2, i32 2
  %78 = fsub float %47, %53
  %79 = fmul float %78, 5.000000e-01
  %80 = fadd float %41, %79
  %81 = fadd float %80, %62
  %82 = bitcast [3 x %struct.FX_FORMCHAR]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %82, i8 -86, i64 24, i1 false)
  %83 = fadd float %38, %44
  %84 = select i1 %51, float %83, float %38
  %85 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 3
  %86 = icmp ne %"class.CFGAS_TxtBreak::Engine"* %14, null
  %87 = bitcast %"class.CFGAS_TxtBreak::Engine"* %14 to i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)***
  %88 = bitcast %"class.CFGAS_TxtBreak::Engine"* %14 to i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)***
  %89 = bitcast i32* %5 to i8*
  %90 = xor i1 %51, true
  %91 = and i32 %33, 1024
  %92 = icmp eq i32 %91, 0
  %93 = bitcast i32* %6 to i8*
  %94 = bitcast %struct.FX_RECT* %7 to i8*
  %95 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 1
  %96 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %7, i64 0, i32 3
  %97 = fadd float %53, %80
  %98 = bitcast %struct.FX_RECT* %8 to i8*
  %99 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 1
  %100 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 3
  %101 = icmp ne i32 %64, 100
  %102 = icmp ne i32 %66, 100
  %103 = or i1 %101, %102
  %104 = sitofp i32 %64 to float
  %105 = fmul float %104, 0.000000e+00
  %106 = sitofp i32 %66 to float
  %107 = fmul float %106, 0.000000e+00
  %108 = insertelement <4 x float> undef, float %104, i32 0
  %109 = insertelement <4 x float> %108, float %105, i32 1
  %110 = insertelement <4 x float> %109, float %107, i32 2
  %111 = insertelement <4 x float> %110, float %106, i32 3
  %112 = fdiv <4 x float> %111, <float -1.000000e+02, float 1.000000e+02, float 1.000000e+02, float 1.000000e+02>
  %113 = sext i32 %23 to i64
  %114 = sext i32 %10 to i64
  %115 = zext i32 %10 to i64
  br label %128

116:                                              ; preds = %414
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #14
  br i1 %26, label %426, label %117

117:                                              ; preds = %116
  %118 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %25, i64 0, i32 0, i32 1
  %119 = load i64, i64* %118, align 8
  %120 = add nsw i64 %119, -1
  store i64 %120, i64* %118, align 8
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %426

122:                                              ; preds = %117
  %123 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %25, i64 0, i32 0
  %124 = bitcast %class.CFGAS_GEFont* %25 to void (%"class.fxcrt::Retainable"*)***
  %125 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %124, align 8
  %126 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %125, i64 1
  %127 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %126, align 8
  call void %127(%"class.fxcrt::Retainable"* nonnull %123) #14
  br label %426

128:                                              ; preds = %414, %31
  %129 = phi i64 [ 0, %31 ], [ %423, %414 ]
  %130 = phi i32 [ %23, %31 ], [ %424, %414 ]
  %131 = phi %class.TextCharPos* [ %2, %31 ], [ %422, %414 ]
  %132 = phi i8 [ 0, %31 ], [ %421, %414 ]
  %133 = phi i8 [ 0, %31 ], [ %420, %414 ]
  %134 = phi i32 [ 65279, %31 ], [ %419, %414 ]
  %135 = phi i32 [ 65279, %31 ], [ %418, %414 ]
  %136 = phi i32 [ 65279, %31 ], [ %417, %414 ]
  %137 = phi i64 [ 0, %31 ], [ %416, %414 ]
  %138 = phi float [ %84, %31 ], [ %415, %414 ]
  %139 = phi i32* [ %20, %31 ], [ %162, %414 ]
  %140 = phi i32* [ %22, %31 ], [ %161, %414 ]
  br i1 %86, label %141, label %155

141:                                              ; preds = %128
  %142 = load i32, i32* %85, align 8
  %143 = trunc i64 %129 to i32
  %144 = add nsw i32 %142, %143
  %145 = sext i32 %144 to i64
  %146 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)**, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*** %87, align 8
  %147 = getelementptr inbounds i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %146, i64 2
  %148 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %147, align 8
  %149 = call signext i32 %148(%"class.CFGAS_TxtBreak::Engine"* nonnull %14, i64 %145) #14
  %150 = load i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)**, i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)*** %88, align 8
  %151 = getelementptr inbounds i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %150, i64 3
  %152 = load i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %151, align 8
  %153 = call i64 %152(%"class.CFGAS_TxtBreak::Engine"* nonnull %14, i64 %145) #14
  %154 = trunc i64 %153 to i32
  br label %160

155:                                              ; preds = %128
  %156 = getelementptr inbounds i32, i32* %139, i64 1
  %157 = load i32, i32* %139, align 4
  %158 = getelementptr inbounds i32, i32* %140, i64 1
  %159 = load i32, i32* %140, align 4
  br label %160

160:                                              ; preds = %155, %141
  %161 = phi i32* [ %140, %141 ], [ %158, %155 ]
  %162 = phi i32* [ %139, %141 ], [ %156, %155 ]
  %163 = phi i32 [ %154, %141 ], [ %159, %155 ]
  %164 = phi i32 [ %149, %141 ], [ %157, %155 ]
  %165 = call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %164) #14
  %166 = icmp eq i8 %165, 7
  %167 = icmp eq i32 %163, 0
  %168 = and i1 %167, %166
  br i1 %168, label %414, label %169

169:                                              ; preds = %160
  %170 = icmp ugt i8 %165, 6
  br i1 %170, label %171, label %230

171:                                              ; preds = %169
  %172 = icmp slt i64 %129, %113
  br i1 %172, label %173, label %221

173:                                              ; preds = %171
  br i1 %86, label %179, label %174

174:                                              ; preds = %173
  %175 = zext i32 %130 to i64
  %176 = load i32, i32* %162, align 4
  %177 = call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %176) #14
  %178 = icmp eq i8 %177, 4
  br i1 %178, label %203, label %217

179:                                              ; preds = %173
  %180 = add nuw nsw i64 %129, 1
  %181 = icmp slt i64 %180, %114
  %182 = trunc i64 %180 to i32
  br i1 %181, label %183, label %198

183:                                              ; preds = %179, %183
  %184 = phi i32 [ %195, %183 ], [ %182, %179 ]
  %185 = load i32, i32* %85, align 8
  %186 = add nsw i32 %185, %184
  %187 = sext i32 %186 to i64
  %188 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)**, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*** %87, align 8
  %189 = getelementptr inbounds i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %188, i64 2
  %190 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %189, align 8
  %191 = call signext i32 %190(%"class.CFGAS_TxtBreak::Engine"* nonnull %14, i64 %187) #14
  %192 = call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %191) #14
  %193 = icmp eq i8 %192, 4
  %194 = zext i1 %193 to i32
  %195 = add nuw nsw i32 %184, %194
  %196 = icmp slt i32 %195, %10
  %197 = and i1 %193, %196
  br i1 %197, label %183, label %198

198:                                              ; preds = %183, %179
  %199 = phi i32 [ %182, %179 ], [ %195, %183 ]
  %200 = phi i32 [ %135, %179 ], [ %191, %183 ]
  %201 = icmp slt i32 %199, %10
  %202 = select i1 %201, i32 %200, i32 65279
  br label %221

203:                                              ; preds = %174, %208
  %204 = phi i32 [ %210, %208 ], [ %176, %174 ]
  %205 = phi i64 [ %206, %208 ], [ 0, %174 ]
  %206 = add nuw nsw i64 %205, 1
  %207 = icmp eq i64 %206, %175
  br i1 %207, label %213, label %208

208:                                              ; preds = %203
  %209 = getelementptr inbounds i32, i32* %162, i64 %206
  %210 = load i32, i32* %209, align 4
  %211 = call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %210) #14
  %212 = icmp eq i8 %211, 4
  br i1 %212, label %203, label %213

213:                                              ; preds = %208, %203
  %214 = phi i32 [ %204, %203 ], [ %210, %208 ]
  %215 = add nuw nsw i64 %206, %129
  %216 = icmp sge i64 %215, %113
  br label %217

217:                                              ; preds = %213, %174
  %218 = phi i32 [ %176, %174 ], [ %214, %213 ]
  %219 = phi i1 [ false, %174 ], [ %216, %213 ]
  %220 = select i1 %219, i32 65279, i32 %218
  br label %221

221:                                              ; preds = %198, %171, %217
  %222 = phi i32 [ %220, %217 ], [ %202, %198 ], [ 65279, %171 ]
  %223 = call signext i32 @_ZN6pdfium6arabic11GetFormCharEwww(i32 signext %164, i32 signext %136, i32 signext %222) #14
  %224 = icmp eq i32 %136, 1604
  %225 = icmp eq i32 %164, 1604
  %226 = and i1 %224, %225
  %227 = icmp eq i32 %222, 1607
  %228 = and i1 %226, %227
  %229 = zext i1 %228 to i8
  br label %270

230:                                              ; preds = %169
  switch i8 %165, label %265 [
    i8 4, label %231
    i8 5, label %270
  ]

231:                                              ; preds = %230
  %232 = add i32 %164, -1612
  %233 = icmp ult i32 %232, 6
  br i1 %233, label %234, label %270

234:                                              ; preds = %231
  %235 = and i8 %133, 1
  %236 = icmp eq i8 %235, 0
  br i1 %236, label %237, label %270

237:                                              ; preds = %234
  %238 = icmp slt i64 %129, %113
  br i1 %86, label %239, label %250

239:                                              ; preds = %237
  br i1 %238, label %240, label %253

240:                                              ; preds = %239
  %241 = load i32, i32* %85, align 8
  %242 = trunc i64 %129 to i32
  %243 = add i32 %242, 1
  %244 = add nsw i32 %243, %241
  %245 = sext i32 %244 to i64
  %246 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)**, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*** %87, align 8
  %247 = getelementptr inbounds i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %246, i64 2
  %248 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %247, align 8
  %249 = call signext i32 %248(%"class.CFGAS_TxtBreak::Engine"* nonnull %14, i64 %245) #14
  br label %253

250:                                              ; preds = %237
  br i1 %238, label %251, label %253

251:                                              ; preds = %250
  %252 = load i32, i32* %162, align 4
  br label %253

253:                                              ; preds = %250, %251, %239, %240
  %254 = phi i32 [ %249, %240 ], [ 65279, %239 ], [ %252, %251 ], [ 65279, %250 ]
  %255 = icmp eq i32 %164, 1617
  br i1 %255, label %256, label %261

256:                                              ; preds = %253
  %257 = add i32 %254, -1612
  %258 = icmp ult i32 %257, 5
  br i1 %258, label %259, label %270

259:                                              ; preds = %256
  %260 = call signext i32 @_Z27FX_GetArabicFromShaddaTablew(i32 signext %254) #14
  br label %270

261:                                              ; preds = %253
  %262 = icmp eq i32 %254, 1617
  br i1 %262, label %263, label %270

263:                                              ; preds = %261
  %264 = call signext i32 @_Z27FX_GetArabicFromShaddaTablew(i32 signext %164) #14
  br label %270

265:                                              ; preds = %230
  switch i32 %164, label %267 [
    i32 46, label %270
    i32 44, label %266
  ]

266:                                              ; preds = %265
  br label %270

267:                                              ; preds = %265
  br i1 %51, label %268, label %270

268:                                              ; preds = %267
  %269 = call signext i32 @_Z16FX_GetMirrorCharw(i32 signext %164) #14
  br label %270

270:                                              ; preds = %267, %265, %230, %231, %234, %261, %263, %256, %259, %268, %266, %221
  %271 = phi i32 [ %222, %221 ], [ %254, %259 ], [ %254, %256 ], [ 1617, %263 ], [ %254, %261 ], [ %135, %266 ], [ %135, %268 ], [ %135, %234 ], [ %135, %231 ], [ %135, %230 ], [ %135, %265 ], [ %135, %267 ]
  %272 = phi i32 [ %223, %221 ], [ %260, %259 ], [ 1617, %256 ], [ %264, %263 ], [ %164, %261 ], [ 44, %266 ], [ %269, %268 ], [ 65279, %234 ], [ %164, %231 ], [ %164, %230 ], [ %164, %265 ], [ %164, %267 ]
  %273 = phi i8 [ %133, %221 ], [ 1, %259 ], [ %133, %256 ], [ 1, %263 ], [ %133, %261 ], [ %133, %266 ], [ %133, %268 ], [ 0, %234 ], [ 0, %231 ], [ %133, %230 ], [ %133, %265 ], [ %133, %267 ]
  %274 = phi i8 [ %229, %221 ], [ %132, %259 ], [ %132, %256 ], [ %132, %263 ], [ %132, %261 ], [ %132, %266 ], [ %132, %268 ], [ %132, %234 ], [ %132, %231 ], [ %132, %230 ], [ %132, %265 ], [ %132, %267 ]
  %275 = icmp eq i8 %165, 4
  %276 = select i1 %275, i8 %273, i8 0
  %277 = icmp ult i8 %165, 7
  %278 = select i1 %277, i8 0, i8 %274
  %279 = add i8 %165, -1
  %280 = icmp ugt i8 %279, 2
  %281 = icmp ne i32 %272, 65279
  %282 = and i8 %278, 1
  %283 = icmp ne i8 %282, 0
  %284 = and i1 %280, %281
  %285 = or i1 %69, %284
  %286 = select i1 %283, i64 3, i64 1
  %287 = select i1 %285, i64 %286, i64 0
  %288 = add i64 %287, %137
  %289 = icmp eq %class.TextCharPos* %131, null
  br i1 %289, label %290, label %293

290:                                              ; preds = %270
  %291 = icmp sgt i32 %163, 0
  %292 = select i1 %291, i32 %164, i32 %136
  br label %414

293:                                              ; preds = %270
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %89) #14
  %294 = icmp slt i32 %163, 0
  %295 = sub nsw i32 0, %163
  %296 = select i1 %294, i32 %295, i32 %163
  %297 = sdiv i32 %296, %55
  store i32 %297, i32* %5, align 4
  %298 = trunc i32 %164 to i16
  store i16 %298, i16* %71, align 16
  %299 = trunc i32 %272 to i16
  store i16 %299, i16* %72, align 2
  store i32 %297, i32* %73, align 4
  br i1 %283, label %301, label %300

300:                                              ; preds = %301, %293
  br label %310

301:                                              ; preds = %293
  store i16 1617, i16* %74, align 2
  store i32 0, i32* %5, align 4
  %302 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* %25, i32 signext 1617, i32* nonnull %5) #14
  %303 = load i32, i32* %5, align 4
  store i32 %303, i32* %75, align 4
  store i16 1648, i16* %76, align 2
  store i32 0, i32* %5, align 4
  %304 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* %25, i32 signext 1648, i32* nonnull %5) #14
  %305 = load i32, i32* %5, align 4
  store i32 %305, i32* %77, align 4
  br label %300

306:                                              ; preds = %404
  %307 = icmp sgt i32 %163, 0
  %308 = and i32 %164, 65535
  %309 = select i1 %307, i32 %308, i32 %136
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %89) #14
  br label %414

310:                                              ; preds = %300, %409
  %311 = phi i32 [ %413, %409 ], [ %297, %300 ]
  %312 = phi i16 [ %411, %409 ], [ %299, %300 ]
  %313 = phi i64 [ %407, %409 ], [ 0, %300 ]
  %314 = phi %class.TextCharPos* [ %406, %409 ], [ %131, %300 ]
  %315 = phi i8 [ %329, %409 ], [ %165, %300 ]
  %316 = phi i32 [ %328, %409 ], [ %164, %300 ]
  %317 = phi i32 [ %327, %409 ], [ %134, %300 ]
  %318 = phi float [ %405, %409 ], [ %138, %300 ]
  %319 = zext i16 %312 to i32
  store i32 %311, i32* %5, align 4
  %320 = icmp eq i64 %313, 0
  br i1 %320, label %326, label %321

321:                                              ; preds = %310
  %322 = add nsw i64 %313, -1
  %323 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 %322, i32 1
  %324 = load i16, i16* %323, align 2
  %325 = zext i16 %324 to i32
  br label %326

326:                                              ; preds = %310, %321
  %327 = phi i32 [ %325, %321 ], [ %317, %310 ]
  %328 = phi i32 [ %319, %321 ], [ %316, %310 ]
  %329 = phi i8 [ 4, %321 ], [ %315, %310 ]
  br i1 %285, label %330, label %335

330:                                              ; preds = %326
  %331 = call i32 @_ZN12CFGAS_GEFont13GetGlyphIndexEw(%class.CFGAS_GEFont* %25, i32 signext %319) #14
  %332 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 0, i32 2
  store i32 %331, i32* %332, align 4
  %333 = load i32, i32* %5, align 4
  %334 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 0, i32 3
  store i32 %333, i32* %334, align 4
  br label %335

335:                                              ; preds = %326, %330
  %336 = phi i32 [ %311, %326 ], [ %333, %330 ]
  %337 = sitofp i32 %336 to float
  %338 = fmul float %53, %337
  %339 = fdiv float %338, 1.000000e+03
  %340 = icmp ne i8 %329, 4
  %341 = and i1 %51, %340
  %342 = fsub float %318, %339
  %343 = select i1 %341, float %342, float %318
  br i1 %285, label %344, label %389

344:                                              ; preds = %335
  %345 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 0, i32 0, i32 0
  store float %343, float* %345, align 4
  %346 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 0, i32 0, i32 1
  store float %81, float* %346, align 4
  br i1 %92, label %357, label %347

347:                                              ; preds = %344
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %93) #14
  store i32 %336, i32* %6, align 4
  %348 = call zeroext i1 @_ZN12CFGAS_GEFont12GetCharWidthEwPi(%class.CFGAS_GEFont* %25, i32 signext %319, i32* nonnull %6) #14
  %349 = load i32, i32* %5, align 4
  %350 = load i32, i32* %6, align 4
  %351 = sub nsw i32 %349, %350
  %352 = sitofp i32 %351 to float
  %353 = fmul float %53, %352
  %354 = fdiv float %353, 2.000000e+03
  %355 = load float, float* %345, align 4
  %356 = fadd float %355, %354
  store float %356, float* %345, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93) #14
  br label %357

357:                                              ; preds = %344, %347
  %358 = icmp eq i8 %329, 4
  br i1 %358, label %359, label %393

359:                                              ; preds = %357
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %94, i8 0, i64 16, i1 false) #14
  %360 = call zeroext i1 @_ZN12CFGAS_GEFont11GetCharBBoxEwP7FX_RECT(%class.CFGAS_GEFont* %25, i32 signext %319, %struct.FX_RECT* nonnull %7) #14
  br i1 %360, label %361, label %369

361:                                              ; preds = %359
  %362 = load i32, i32* %96, align 4
  %363 = load i32, i32* %95, align 4
  %364 = sub nsw i32 %362, %363
  %365 = sitofp i32 %364 to float
  %366 = fmul float %53, %365
  %367 = fdiv float %366, %61
  %368 = fsub float %97, %367
  store float %368, float* %346, align 4
  br label %369

369:                                              ; preds = %361, %359
  %370 = icmp eq i32 %328, %319
  %371 = icmp ne i32 %327, 65279
  %372 = and i1 %371, %370
  br i1 %372, label %373, label %388

373:                                              ; preds = %369
  %374 = call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %327) #14
  %375 = icmp eq i8 %374, 4
  br i1 %375, label %376, label %388

376:                                              ; preds = %373
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %98) #14
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %98, i8 0, i64 16, i1 false) #14
  %377 = call zeroext i1 @_ZN12CFGAS_GEFont11GetCharBBoxEwP7FX_RECT(%class.CFGAS_GEFont* %25, i32 signext %327, %struct.FX_RECT* nonnull %8) #14
  br i1 %377, label %378, label %387

378:                                              ; preds = %376
  %379 = load i32, i32* %100, align 4
  %380 = load i32, i32* %99, align 4
  %381 = sub nsw i32 %379, %380
  %382 = sitofp i32 %381 to float
  %383 = fmul float %53, %382
  %384 = fdiv float %383, %61
  %385 = load float, float* %346, align 4
  %386 = fsub float %385, %384
  store float %386, float* %346, align 4
  br label %387

387:                                              ; preds = %378, %376
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %98) #14
  br label %388

388:                                              ; preds = %373, %387, %369
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94) #14
  br label %393

389:                                              ; preds = %335
  %390 = and i1 %340, %90
  %391 = fadd float %339, %343
  %392 = select i1 %390, float %391, float %343
  br label %404

393:                                              ; preds = %357, %388
  %394 = and i1 %340, %90
  %395 = fadd float %339, %343
  %396 = select i1 %394, float %395, float %343
  %397 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 0, i32 5
  store i8 1, i8* %397, align 4
  %398 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 0, i32 7, i64 0
  %399 = bitcast float* %398 to <4 x float>*
  store <4 x float> <float -1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 1.000000e+00>, <4 x float>* %399, align 4
  br i1 %103, label %400, label %402

400:                                              ; preds = %393
  %401 = bitcast float* %398 to <4 x float>*
  store <4 x float> %112, <4 x float>* %401, align 4
  br label %402

402:                                              ; preds = %393, %400
  %403 = getelementptr inbounds %class.TextCharPos, %class.TextCharPos* %314, i64 1
  br label %404

404:                                              ; preds = %389, %402
  %405 = phi float [ %396, %402 ], [ %392, %389 ]
  %406 = phi %class.TextCharPos* [ %403, %402 ], [ %314, %389 ]
  %407 = add nuw nsw i64 %313, 1
  %408 = icmp eq i64 %407, %286
  br i1 %408, label %306, label %409

409:                                              ; preds = %404
  %410 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 %407, i32 1
  %411 = load i16, i16* %410, align 2
  %412 = getelementptr inbounds [3 x %struct.FX_FORMCHAR], [3 x %struct.FX_FORMCHAR]* %4, i64 0, i64 %407, i32 2
  %413 = load i32, i32* %412, align 4
  br label %310

414:                                              ; preds = %290, %306, %160
  %415 = phi float [ %138, %160 ], [ %405, %306 ], [ %138, %290 ]
  %416 = phi i64 [ %137, %160 ], [ %288, %306 ], [ %288, %290 ]
  %417 = phi i32 [ 65279, %160 ], [ %309, %306 ], [ %292, %290 ]
  %418 = phi i32 [ %135, %160 ], [ %271, %306 ], [ %271, %290 ]
  %419 = phi i32 [ %164, %160 ], [ %328, %306 ], [ %164, %290 ]
  %420 = phi i8 [ %133, %160 ], [ %276, %306 ], [ %276, %290 ]
  %421 = phi i8 [ %132, %160 ], [ %278, %306 ], [ %278, %290 ]
  %422 = phi %class.TextCharPos* [ %131, %160 ], [ %406, %306 ], [ null, %290 ]
  %423 = add nuw nsw i64 %129, 1
  %424 = add i32 %130, -1
  %425 = icmp eq i64 %423, %115
  br i1 %425, label %116, label %128

426:                                              ; preds = %122, %117, %116, %3
  %427 = phi i64 [ 0, %3 ], [ %416, %116 ], [ %416, %117 ], [ %416, %122 ]
  ret i64 %427
}

declare i32 @_ZNK12CFGAS_GEFont9GetAscentEv(%class.CFGAS_GEFont*) local_unnamed_addr #1

declare i32 @_ZNK12CFGAS_GEFont10GetDescentEv(%class.CFGAS_GEFont*) local_unnamed_addr #1

declare signext i32 @_ZN6pdfium6arabic11GetFormCharEwww(i32 signext, i32 signext, i32 signext) local_unnamed_addr #1

declare signext i32 @_Z16FX_GetMirrorCharw(i32 signext) local_unnamed_addr #1

declare i32 @_ZN12CFGAS_GEFont13GetGlyphIndexEw(%class.CFGAS_GEFont*, i32 signext) local_unnamed_addr #1

declare zeroext i1 @_ZN12CFGAS_GEFont11GetCharBBoxEwP7FX_RECT(%class.CFGAS_GEFont*, i32 signext, %struct.FX_RECT*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK14CFGAS_TxtBreak12GetCharRectsERKNS_3RunE(%"class.std::__1::vector.98"* noalias nocapture sret, %class.CFGAS_TxtBreak* nocapture readnone, %"struct.CFGAS_TxtBreak::Run"* nocapture readonly dereferenceable(80)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 4
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %7, label %9

7:                                                ; preds = %3
  %8 = bitcast %"class.std::__1::vector.98"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #14
  br label %125

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 0
  %11 = load %"class.CFGAS_TxtBreak::Engine"*, %"class.CFGAS_TxtBreak::Engine"** %10, align 8
  %12 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %"class.fxcrt::StringDataTemplate"*, %"class.fxcrt::StringDataTemplate"** %12, align 8
  %14 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 2
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 12
  %17 = bitcast %class.CFX_RectF** %16 to i8**
  %18 = load i8*, i8** %17, align 8
  %19 = bitcast i8* %18 to float*
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds i8, i8* %18, i64 4
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i8, i8* %18, i64 8
  %25 = bitcast i8* %24 to float*
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds i8, i8* %18, i64 12
  %28 = bitcast i8* %27 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 6
  %31 = load float, float* %30, align 8
  %32 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 10
  %33 = load i32, i32* %32, align 8
  %34 = and i32 %33, 64
  %35 = icmp ne i32 %34, 0
  %36 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 7
  %37 = load i32, i32* %36, align 4
  %38 = and i32 %37, 512
  %39 = icmp eq i32 %38, 0
  %40 = sext i32 %5 to i64
  %41 = shl nsw i64 %40, 4
  %42 = tail call i8* @_Znwm(i64 %41) #15
  %43 = bitcast i8* %42 to %class.CFX_RectF*
  %44 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %43, i64 %40
  %45 = ptrtoint i8* %42 to i64
  %46 = add nsw i64 %40, -1
  %47 = getelementptr %class.CFX_RectF, %class.CFX_RectF* %43, i64 %46, i32 0
  %48 = ptrtoint float* %47 to i64
  %49 = sub i64 16, %45
  %50 = add i64 %49, %48
  %51 = and i64 %50, -16
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %42, i8 0, i64 %51, i1 false) #14
  %52 = ptrtoint %class.CFX_RectF* %44 to i64
  %53 = fadd float %20, %26
  %54 = select i1 %35, float %53, float %20
  %55 = icmp eq %"class.fxcrt::StringDataTemplate"* %13, null
  %56 = getelementptr inbounds %"class.fxcrt::StringDataTemplate", %"class.fxcrt::StringDataTemplate"* %13, i64 0, i32 3
  %57 = select i1 %55, [1 x i32]* @.str, [1 x i32]* %56
  %58 = getelementptr inbounds [1 x i32], [1 x i32]* %57, i64 0, i64 0
  %59 = icmp eq %"class.CFGAS_TxtBreak::Engine"* %11, null
  %60 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %2, i64 0, i32 3
  %61 = bitcast %"class.CFGAS_TxtBreak::Engine"* %11 to i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)***
  %62 = bitcast %"class.CFGAS_TxtBreak::Engine"* %11 to i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)***
  %63 = load float, float* @_ZN11CFGAS_Break17kConversionFactorE, align 4
  %64 = fmul float %31, 5.000000e-01
  %65 = zext i32 %5 to i64
  br label %72

66:                                               ; preds = %111
  %67 = bitcast %"class.std::__1::vector.98"* %0 to i64*
  store i64 %45, i64* %67, align 8
  %68 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 1
  %69 = bitcast %class.CFX_RectF** %68 to i64*
  store i64 %52, i64* %69, align 8
  %70 = getelementptr inbounds %"class.std::__1::vector.98", %"class.std::__1::vector.98"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %71 = bitcast %class.CFX_RectF** %70 to i64*
  store i64 %52, i64* %71, align 8
  br label %125

72:                                               ; preds = %111, %9
  %73 = phi i64 [ 0, %9 ], [ %123, %111 ]
  %74 = phi float [ %54, %9 ], [ %116, %111 ]
  %75 = phi i32* [ %15, %9 ], [ %98, %111 ]
  %76 = phi i32* [ %58, %9 ], [ %97, %111 ]
  br i1 %59, label %91, label %77

77:                                               ; preds = %72
  %78 = load i32, i32* %60, align 8
  %79 = trunc i64 %73 to i32
  %80 = add nsw i32 %78, %79
  %81 = sext i32 %80 to i64
  %82 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)**, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*** %61, align 8
  %83 = getelementptr inbounds i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %82, i64 2
  %84 = load i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i32 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %83, align 8
  %85 = tail call signext i32 %84(%"class.CFGAS_TxtBreak::Engine"* nonnull %11, i64 %81) #14
  %86 = load i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)**, i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)*** %62, align 8
  %87 = getelementptr inbounds i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %86, i64 3
  %88 = load i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)*, i64 (%"class.CFGAS_TxtBreak::Engine"*, i64)** %87, align 8
  %89 = tail call i64 %88(%"class.CFGAS_TxtBreak::Engine"* nonnull %11, i64 %81) #14
  %90 = trunc i64 %89 to i32
  br label %96

91:                                               ; preds = %72
  %92 = getelementptr inbounds i32, i32* %76, i64 1
  %93 = load i32, i32* %76, align 4
  %94 = getelementptr inbounds i32, i32* %75, i64 1
  %95 = load i32, i32* %75, align 4
  br label %96

96:                                               ; preds = %91, %77
  %97 = phi i32* [ %76, %77 ], [ %92, %91 ]
  %98 = phi i32* [ %75, %77 ], [ %94, %91 ]
  %99 = phi i32 [ %85, %77 ], [ %93, %91 ]
  %100 = phi i32 [ %90, %77 ], [ %95, %91 ]
  %101 = sitofp i32 %100 to float
  %102 = fdiv float %101, %63
  br i1 %39, label %103, label %107

103:                                              ; preds = %96
  %104 = tail call zeroext i8 @_Z14FX_GetCharTypew(i32 signext %99) #14
  %105 = or i8 %104, 2
  %106 = icmp eq i8 %105, 3
  br label %107

107:                                              ; preds = %96, %103
  %108 = phi i1 [ false, %96 ], [ %106, %103 ]
  switch i32 %99, label %111 [
    i32 8233, label %109
    i32 8232, label %109
    i32 12, label %109
    i32 11, label %109
    i32 10, label %109
  ]

109:                                              ; preds = %107, %107, %107, %107, %107
  %110 = select i1 %108, float %64, float %102
  br label %111

111:                                              ; preds = %109, %107
  %112 = phi float [ %102, %107 ], [ %110, %109 ]
  %113 = fsub float %74, %112
  %114 = fadd float %74, %112
  %115 = select i1 %35, float %113, float %74
  %116 = select i1 %35, float %113, float %114
  %117 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %43, i64 %73, i32 0
  store float %115, float* %117, align 4
  %118 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %43, i64 %73, i32 1
  %119 = bitcast float* %118 to i32*
  store i32 %23, i32* %119, align 4
  %120 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %43, i64 %73, i32 2
  store float %112, float* %120, align 4
  %121 = getelementptr inbounds %class.CFX_RectF, %class.CFX_RectF* %43, i64 %73, i32 3
  %122 = bitcast float* %121 to i32*
  store i32 %29, i32* %122, align 4
  %123 = add nuw nsw i64 %73, 1
  %124 = icmp eq i64 %123, %65
  br i1 %124, label %66, label %72

125:                                              ; preds = %66, %7
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak6EngineD2Ev(%"class.CFGAS_TxtBreak::Engine"* nocapture) unnamed_addr #6 align 2 {
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak6EngineD0Ev(%"class.CFGAS_TxtBreak::Engine"* nocapture readnone) unnamed_addr #7 align 2 {
  tail call void @llvm.trap() #16
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak3RunC2Ev(%"struct.CFGAS_TxtBreak::Run"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 0
  store %"class.CFGAS_TxtBreak::Engine"* null, %"class.CFGAS_TxtBreak::Engine"** %2, align 8
  %3 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"* %3) #14
  %4 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 6
  %6 = bitcast i32** %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false)
  store float 1.200000e+01, float* %5, align 8
  %7 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 7
  %8 = bitcast i32* %7 to <4 x i32>*
  store <4 x i32> <i32 0, i32 100, i32 100, i32 0>, <4 x i32>* %8, align 4
  %9 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 12
  store %class.CFX_RectF* null, %class.CFX_RectF** %9, align 8
  %10 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 13
  store i8 1, i8* %10, align 8
  ret void
}

declare void @_ZN5fxcrt10WideStringC1Ev(%"class.fxcrt::WideString"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak3RunD2Ev(%"struct.CFGAS_TxtBreak::Run"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %2, align 8
  store %class.CFGAS_GEFont* null, %class.CFGAS_GEFont** %2, align 8
  %4 = icmp eq %class.CFGAS_GEFont* %3, null
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %3, i64 0, i32 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add nsw i64 %7, -1
  store i64 %8, i64* %6, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %16

10:                                               ; preds = %5
  %11 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %3, i64 0, i32 0
  %12 = bitcast %class.CFGAS_GEFont* %3 to void (%"class.fxcrt::Retainable"*)***
  %13 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %12, align 8
  %14 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %13, i64 1
  %15 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, align 8
  tail call void %15(%"class.fxcrt::Retainable"* nonnull %11) #14
  br label %16

16:                                               ; preds = %1, %5, %10
  %17 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 1
  tail call void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"* %17) #14
  ret void
}

; Function Attrs: nounwind
declare void @_ZN5fxcrt10WideStringD1Ev(%"class.fxcrt::WideString"*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CFGAS_TxtBreak3RunC2ERKS0_(%"struct.CFGAS_TxtBreak::Run"*, %"struct.CFGAS_TxtBreak::Run"* dereferenceable(80)) unnamed_addr #0 align 2 {
  %3 = bitcast %"struct.CFGAS_TxtBreak::Run"* %1 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"struct.CFGAS_TxtBreak::Run"* %0 to i64*
  store i64 %4, i64* %5, align 8
  %6 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 1
  tail call void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"* %6, %"class.fxcrt::WideString"* dereferenceable(8) %7) #14
  %8 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 2
  %10 = bitcast i32** %8 to i8*
  %11 = bitcast i32** %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false)
  %12 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 5
  %13 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %14 = load %class.CFGAS_GEFont*, %class.CFGAS_GEFont** %13, align 8
  %15 = ptrtoint %class.CFGAS_GEFont* %14 to i64
  %16 = bitcast %"class.fxcrt::RetainPtr"* %12 to i64*
  store i64 %15, i64* %16, align 8
  %17 = icmp eq %class.CFGAS_GEFont* %14, null
  br i1 %17, label %22, label %18

18:                                               ; preds = %2
  %19 = getelementptr inbounds %class.CFGAS_GEFont, %class.CFGAS_GEFont* %14, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, 1
  store i64 %21, i64* %19, align 8
  br label %22

22:                                               ; preds = %2, %18
  %23 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %0, i64 0, i32 6
  %24 = getelementptr inbounds %"struct.CFGAS_TxtBreak::Run", %"struct.CFGAS_TxtBreak::Run"* %1, i64 0, i32 6
  %25 = bitcast float* %23 to i8*
  %26 = bitcast float* %24 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 33, i1 false)
  ret void
}

declare void @_ZN5fxcrt10WideStringC1ERKS0_(%"class.fxcrt::WideString"*, %"class.fxcrt::WideString"* dereferenceable(8)) unnamed_addr #1

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #9

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #9

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI10CFGAS_CharNS_9allocatorIS1_EEE24__emplace_back_slow_pathIJRwRiS7_EEEvDpOT_(%"class.std::__1::vector.47"*, i32* dereferenceable(4), i32* dereferenceable(4), i32* dereferenceable(4)) local_unnamed_addr #10 comdat align 2 {
  %5 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 1
  %6 = bitcast %class.CFGAS_Char** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.std::__1::vector.47"* %0 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %7, %9
  %11 = sdiv exact i64 %10, 56
  %12 = add nsw i64 %11, 1
  %13 = icmp ugt i64 %12, 329406144173384850
  br i1 %13, label %14, label %16

14:                                               ; preds = %4
  %15 = bitcast %"class.std::__1::vector.47"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #16
  unreachable

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %18 = bitcast %class.CFGAS_Char** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %19, %9
  %21 = sdiv exact i64 %20, 56
  %22 = icmp ult i64 %21, 164703072086692425
  br i1 %22, label %23, label %28

23:                                               ; preds = %16
  %24 = shl nsw i64 %21, 1
  %25 = icmp ult i64 %24, %12
  %26 = select i1 %25, i64 %12, i64 %24
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %33, label %28

28:                                               ; preds = %16, %23
  %29 = phi i64 [ %26, %23 ], [ 329406144173384850, %16 ]
  %30 = mul i64 %29, 56
  %31 = tail call i8* @_Znwm(i64 %30) #15
  %32 = bitcast i8* %31 to %class.CFGAS_Char*
  br label %33

33:                                               ; preds = %23, %28
  %34 = phi i64 [ %29, %28 ], [ 0, %23 ]
  %35 = phi %class.CFGAS_Char* [ %32, %28 ], [ null, %23 ]
  %36 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %35, i64 %11
  %37 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %35, i64 %34
  %38 = ptrtoint %class.CFGAS_Char* %37 to i64
  %39 = load i32, i32* %1, align 4
  %40 = trunc i32 %39 to i16
  %41 = load i32, i32* %2, align 4
  %42 = load i32, i32* %3, align 4
  tail call void @_ZN10CFGAS_CharC1Etii(%class.CFGAS_Char* %36, i16 zeroext %40, i32 %41, i32 %42) #14
  %43 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %36, i64 1
  %44 = ptrtoint %class.CFGAS_Char* %43 to i64
  %45 = getelementptr inbounds %"class.std::__1::vector.47", %"class.std::__1::vector.47"* %0, i64 0, i32 0, i32 0
  %46 = load %class.CFGAS_Char*, %class.CFGAS_Char** %45, align 8
  %47 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %48 = icmp eq %class.CFGAS_Char* %47, %46
  br i1 %48, label %49, label %51

49:                                               ; preds = %33
  %50 = ptrtoint %class.CFGAS_Char* %36 to i64
  store i64 %50, i64* %8, align 8
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  br label %66

51:                                               ; preds = %33, %51
  %52 = phi %class.CFGAS_Char* [ %54, %51 ], [ %36, %33 ]
  %53 = phi %class.CFGAS_Char* [ %55, %51 ], [ %47, %33 ]
  %54 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %52, i64 -1
  %55 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %53, i64 -1
  tail call void @_ZN10CFGAS_CharC1ERKS_(%class.CFGAS_Char* %54, %class.CFGAS_Char* dereferenceable(56) %55) #14
  %56 = icmp eq %class.CFGAS_Char* %55, %46
  br i1 %56, label %57, label %51

57:                                               ; preds = %51
  %58 = load %class.CFGAS_Char*, %class.CFGAS_Char** %45, align 8
  %59 = load %class.CFGAS_Char*, %class.CFGAS_Char** %5, align 8
  %60 = ptrtoint %class.CFGAS_Char* %54 to i64
  store i64 %60, i64* %8, align 8
  store i64 %44, i64* %6, align 8
  store i64 %38, i64* %18, align 8
  %61 = icmp eq %class.CFGAS_Char* %59, %58
  br i1 %61, label %66, label %62

62:                                               ; preds = %57, %62
  %63 = phi %class.CFGAS_Char* [ %64, %62 ], [ %59, %57 ]
  %64 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %63, i64 -1
  tail call void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char* %64) #14
  %65 = icmp eq %class.CFGAS_Char* %64, %58
  br i1 %65, label %66, label %62

66:                                               ; preds = %62, %49, %57
  %67 = phi %class.CFGAS_Char* [ %46, %49 ], [ %58, %57 ], [ %58, %62 ]
  %68 = icmp eq %class.CFGAS_Char* %67, null
  br i1 %68, label %71, label %69

69:                                               ; preds = %66
  %70 = getelementptr inbounds %class.CFGAS_Char, %class.CFGAS_Char* %67, i64 0, i32 0
  tail call void @_ZdlPv(i8* %70) #15
  br label %71

71:                                               ; preds = %66, %69
  ret void
}

declare void @_ZN10CFGAS_CharC1Etii(%class.CFGAS_Char*, i16 zeroext, i32, i32) unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #12

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #13

declare void @_ZN10CFGAS_CharC1ERKS_(%class.CFGAS_Char*, %class.CFGAS_Char* dereferenceable(56)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN10CFGAS_CharD1Ev(%class.CFGAS_Char*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorI16CFGAS_BreakPieceNS_9allocatorIS1_EEE21__push_back_slow_pathIRKS1_EEvOT_(%"class.std::__1::vector.72"*, %class.CFGAS_BreakPiece* dereferenceable(64)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.72", %"class.std::__1::vector.72"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %class.CFGAS_BreakPiece** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.72"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 6
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 288230376151711743
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.72"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #16
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.72", %"class.std::__1::vector.72"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.CFGAS_BreakPiece** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 6
  %20 = icmp ult i64 %19, 144115188075855871
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 5
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 288230376151711743
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #16
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 288230376151711743, %14 ]
  %31 = shl i64 %30, 6
  %32 = tail call i8* @_Znwm(i64 %31) #15
  %33 = bitcast i8* %32 to %class.CFGAS_BreakPiece*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %class.CFGAS_BreakPiece* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %36, i64 %9
  %38 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %36, i64 %35
  %39 = ptrtoint %class.CFGAS_BreakPiece* %38 to i64
  tail call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %37, %class.CFGAS_BreakPiece* dereferenceable(64) %1) #14
  %40 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %37, i64 1
  %41 = ptrtoint %class.CFGAS_BreakPiece* %40 to i64
  %42 = getelementptr inbounds %"class.std::__1::vector.72", %"class.std::__1::vector.72"* %0, i64 0, i32 0, i32 0
  %43 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %42, align 8
  %44 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %3, align 8
  %45 = icmp eq %class.CFGAS_BreakPiece* %44, %43
  br i1 %45, label %46, label %48

46:                                               ; preds = %34
  %47 = ptrtoint %class.CFGAS_BreakPiece* %37 to i64
  store i64 %47, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  br label %63

48:                                               ; preds = %34, %48
  %49 = phi %class.CFGAS_BreakPiece* [ %51, %48 ], [ %37, %34 ]
  %50 = phi %class.CFGAS_BreakPiece* [ %52, %48 ], [ %44, %34 ]
  %51 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %49, i64 -1
  %52 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %50, i64 -1
  tail call void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece* %51, %class.CFGAS_BreakPiece* dereferenceable(64) %52) #14
  %53 = icmp eq %class.CFGAS_BreakPiece* %52, %43
  br i1 %53, label %54, label %48

54:                                               ; preds = %48
  %55 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %42, align 8
  %56 = load %class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece** %3, align 8
  %57 = ptrtoint %class.CFGAS_BreakPiece* %51 to i64
  store i64 %57, i64* %6, align 8
  store i64 %41, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %58 = icmp eq %class.CFGAS_BreakPiece* %56, %55
  br i1 %58, label %63, label %59

59:                                               ; preds = %54, %59
  %60 = phi %class.CFGAS_BreakPiece* [ %61, %59 ], [ %56, %54 ]
  %61 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %60, i64 -1
  tail call void @_ZN16CFGAS_BreakPieceD1Ev(%class.CFGAS_BreakPiece* %61) #14
  %62 = icmp eq %class.CFGAS_BreakPiece* %61, %55
  br i1 %62, label %63, label %59

63:                                               ; preds = %59, %46, %54
  %64 = phi %class.CFGAS_BreakPiece* [ %43, %46 ], [ %55, %54 ], [ %55, %59 ]
  %65 = icmp eq %class.CFGAS_BreakPiece* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  %67 = getelementptr inbounds %class.CFGAS_BreakPiece, %class.CFGAS_BreakPiece* %64, i64 0, i32 0
  tail call void @_ZdlPv(i8* %67) #15
  br label %68

68:                                               ; preds = %63, %66
  ret void
}

declare void @_ZN16CFGAS_BreakPieceC1ERKS_(%class.CFGAS_BreakPiece*, %class.CFGAS_BreakPiece* dereferenceable(64)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.FX_TPO*, align 8
  %3 = alloca %struct.FX_TPO*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.114", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  %12 = bitcast %struct.FX_TPO** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %11, i64 1
  store %struct.FX_TPO** %14, %struct.FX_TPO*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load %struct.FX_TPO**, %struct.FX_TPO*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load %struct.FX_TPO**, %struct.FX_TPO*** %17, align 8
  %19 = icmp eq %struct.FX_TPO** %16, %18
  %20 = ptrtoint %struct.FX_TPO** %18 to i64
  %21 = bitcast %struct.FX_TPO** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %struct.FX_TPO**, %struct.FX_TPO*** %23, align 8
  %25 = icmp ugt %struct.FX_TPO** %14, %24
  %26 = ptrtoint %struct.FX_TPO** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint %struct.FX_TPO** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %14, i64 %32
  %34 = ptrtoint %struct.FX_TPO** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast %struct.FX_TPO** %33 to i8*
  %40 = bitcast %struct.FX_TPO** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #14
  %41 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi %struct.FX_TPO** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %33, i64 %36
  store %struct.FX_TPO** %44, %struct.FX_TPO*** %15, align 8
  %45 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %43, i64 %32
  store %struct.FX_TPO** %45, %struct.FX_TPO*** %10, align 8
  %46 = bitcast %struct.FX_TPO** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast %struct.FX_TPO*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #16
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #15
  %60 = bitcast i8* %59 to %struct.FX_TPO**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %60, i64 %57
  %63 = ptrtoint %struct.FX_TPO** %62 to i64
  %64 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %60, i64 %53
  %65 = ptrtoint %struct.FX_TPO** %64 to i64
  %66 = ptrtoint %struct.FX_TPO** %14 to i64
  %67 = ptrtoint %struct.FX_TPO** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi %struct.FX_TPO** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi %struct.FX_TPO** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast %struct.FX_TPO** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %79, i64 1
  %87 = ptrtoint %struct.FX_TPO** %86 to i64
  %88 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !20

91:                                               ; preds = %78
  %92 = ptrtoint %struct.FX_TPO** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi %struct.FX_TPO** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi %struct.FX_TPO** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi %struct.FX_TPO** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi %struct.FX_TPO** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast %struct.FX_TPO** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 1
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 1
  %107 = bitcast %struct.FX_TPO** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %struct.FX_TPO** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 2
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 2
  %112 = bitcast %struct.FX_TPO** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %struct.FX_TPO** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 3
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 3
  %117 = bitcast %struct.FX_TPO** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %struct.FX_TPO** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 4
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 4
  %122 = bitcast %struct.FX_TPO** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %struct.FX_TPO** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 5
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 5
  %127 = bitcast %struct.FX_TPO** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %struct.FX_TPO** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 6
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 6
  %132 = bitcast %struct.FX_TPO** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %struct.FX_TPO** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 7
  %136 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 7
  %137 = bitcast %struct.FX_TPO** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %struct.FX_TPO** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %99, i64 8
  %141 = ptrtoint %struct.FX_TPO** %140 to i64
  %142 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %101, i64 8
  %143 = icmp eq %struct.FX_TPO** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint %struct.FX_TPO** %70 to i64
  %146 = load %struct.FX_TPO**, %struct.FX_TPO*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi %struct.FX_TPO** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast %struct.FX_TPO*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast %struct.FX_TPO*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq %struct.FX_TPO** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast %struct.FX_TPO** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #15
  %156 = bitcast %struct.FX_TPO*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load %struct.FX_TPO**, %struct.FX_TPO*** %15, align 8
  %161 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %160, i64 1
  store %struct.FX_TPO** %161, %struct.FX_TPO*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast %struct.FX_TPO*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast %struct.FX_TPO*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast %struct.FX_TPO*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to %struct.FX_TPO**
  %181 = inttoptr i64 %169 to %struct.FX_TPO**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast %struct.FX_TPO** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #14
  %186 = tail call i8* @_Znwm(i64 4096) #15
  %187 = bitcast %struct.FX_TPO** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE9push_backEOS2_(%"struct.std::__1::__split_buffer"* %163, %struct.FX_TPO** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #14
  br label %460

188:                                              ; preds = %182
  %189 = bitcast %struct.FX_TPO** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #14
  %190 = tail call i8* @_Znwm(i64 4096) #15
  %191 = bitcast %struct.FX_TPO** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE10push_frontEOS2_(%"struct.std::__1::__split_buffer"* %163, %struct.FX_TPO** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #14
  %192 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  %193 = bitcast %struct.FX_TPO** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %192, i64 1
  store %struct.FX_TPO** %195, %struct.FX_TPO*** %167, align 8
  %196 = load %struct.FX_TPO**, %struct.FX_TPO*** %164, align 8
  %197 = load %struct.FX_TPO**, %struct.FX_TPO*** %172, align 8
  %198 = icmp eq %struct.FX_TPO** %196, %197
  %199 = ptrtoint %struct.FX_TPO** %197 to i64
  %200 = bitcast %struct.FX_TPO** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load %struct.FX_TPO**, %struct.FX_TPO*** %202, align 8
  %204 = icmp ugt %struct.FX_TPO** %195, %203
  %205 = ptrtoint %struct.FX_TPO** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint %struct.FX_TPO** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %195, i64 %211
  %213 = ptrtoint %struct.FX_TPO** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast %struct.FX_TPO** %212 to i8*
  %219 = bitcast %struct.FX_TPO** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #14
  %220 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi %struct.FX_TPO** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %212, i64 %215
  store %struct.FX_TPO** %223, %struct.FX_TPO*** %164, align 8
  %224 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %222, i64 %211
  store %struct.FX_TPO** %224, %struct.FX_TPO*** %167, align 8
  %225 = bitcast %struct.FX_TPO** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #16
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #15
  %237 = bitcast i8* %236 to %struct.FX_TPO**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %237, i64 %234
  %240 = ptrtoint %struct.FX_TPO** %239 to i64
  %241 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %237, i64 %230
  %242 = ptrtoint %struct.FX_TPO** %241 to i64
  %243 = ptrtoint %struct.FX_TPO** %195 to i64
  %244 = ptrtoint %struct.FX_TPO** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi %struct.FX_TPO** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi %struct.FX_TPO** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast %struct.FX_TPO** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %256, i64 1
  %264 = ptrtoint %struct.FX_TPO** %263 to i64
  %265 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !21

268:                                              ; preds = %255
  %269 = ptrtoint %struct.FX_TPO** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi %struct.FX_TPO** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi %struct.FX_TPO** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi %struct.FX_TPO** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi %struct.FX_TPO** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast %struct.FX_TPO** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 1
  %283 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 1
  %284 = bitcast %struct.FX_TPO** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast %struct.FX_TPO** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 2
  %288 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 2
  %289 = bitcast %struct.FX_TPO** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast %struct.FX_TPO** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 3
  %293 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 3
  %294 = bitcast %struct.FX_TPO** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast %struct.FX_TPO** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 4
  %298 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 4
  %299 = bitcast %struct.FX_TPO** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast %struct.FX_TPO** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 5
  %303 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 5
  %304 = bitcast %struct.FX_TPO** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast %struct.FX_TPO** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 6
  %308 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 6
  %309 = bitcast %struct.FX_TPO** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast %struct.FX_TPO** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 7
  %313 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 7
  %314 = bitcast %struct.FX_TPO** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast %struct.FX_TPO** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %276, i64 8
  %318 = ptrtoint %struct.FX_TPO** %317 to i64
  %319 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %278, i64 8
  %320 = icmp eq %struct.FX_TPO** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint %struct.FX_TPO** %247 to i64
  %323 = load %struct.FX_TPO**, %struct.FX_TPO*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi %struct.FX_TPO** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq %struct.FX_TPO** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast %struct.FX_TPO** %325 to i8*
  call void @_ZdlPv(i8* %330) #15
  %331 = bitcast %struct.FX_TPO*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load %struct.FX_TPO**, %struct.FX_TPO*** %164, align 8
  %336 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %335, i64 1
  store %struct.FX_TPO** %336, %struct.FX_TPO*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.114"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #14
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.114"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store %struct.FX_TPO** null, %struct.FX_TPO*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator.83"** %342 to %"class.std::__1::__compressed_pair.80"**
  store %"class.std::__1::__compressed_pair.80"* %346, %"class.std::__1::__compressed_pair.80"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #16
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #15
  %354 = bitcast i8* %353 to %struct.FX_TPO**
  %355 = bitcast %"struct.std::__1::__split_buffer.114"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %354, i64 %171
  store %struct.FX_TPO** %356, %struct.FX_TPO*** %340, align 8
  store %struct.FX_TPO** %356, %struct.FX_TPO*** %339, align 8
  %357 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %354, i64 %345
  store %struct.FX_TPO** %357, %struct.FX_TPO*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #15
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint %struct.FX_TPO** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint %struct.FX_TPO** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt %struct.FX_TPO** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %356, i64 %370
  store %struct.FX_TPO** %371, %struct.FX_TPO*** %340, align 8
  store %struct.FX_TPO** %371, %struct.FX_TPO*** %339, align 8
  %372 = ptrtoint %struct.FX_TPO** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #16
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.114"* %4 to i64*
  %382 = bitcast %struct.FX_TPO*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #15
  %386 = bitcast i8* %385 to %struct.FX_TPO**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 %383
  %389 = ptrtoint %struct.FX_TPO** %388 to i64
  %390 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 %377
  %391 = ptrtoint %struct.FX_TPO** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast %struct.FX_TPO*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast %struct.FX_TPO*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #15
  %394 = load %struct.FX_TPO**, %struct.FX_TPO*** %164, align 8
  %395 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  %396 = ptrtoint %struct.FX_TPO** %395 to i64
  %397 = ptrtoint %struct.FX_TPO** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi %struct.FX_TPO** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi %struct.FX_TPO** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi %struct.FX_TPO** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast %struct.FX_TPO** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %406, i64 1
  store %struct.FX_TPO** %408, %struct.FX_TPO*** %340, align 8
  %409 = icmp eq %struct.FX_TPO** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint %struct.FX_TPO** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.114"* %4 to i64*
  %413 = bitcast %struct.FX_TPO*** %339 to i64*
  %414 = bitcast %struct.FX_TPO*** %340 to i64*
  %415 = bitcast %struct.FX_TPO*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint %struct.FX_TPO** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.114"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast %struct.FX_TPO*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast %struct.FX_TPO*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast %struct.FX_TPO*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to %struct.FX_TPO**
  %441 = inttoptr i64 %434 to %struct.FX_TPO**
  %442 = icmp eq %struct.FX_TPO** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %441, i64 -1
  %445 = ptrtoint %struct.FX_TPO** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr %struct.FX_TPO*, %struct.FX_TPO** %441, i64 %448
  store %struct.FX_TPO** %449, %struct.FX_TPO*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #15
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #14
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi %struct.FX_TPO** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIP6FX_TPORNS_9allocatorIS2_EEE10push_frontERKS2_(%"struct.std::__1::__split_buffer.114"* nonnull %4, %struct.FX_TPO** dereferenceable(8) %457)
  %458 = load %struct.FX_TPO**, %struct.FX_TPO*** %167, align 8
  %459 = icmp eq %struct.FX_TPO** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE9push_backEOS2_(%"struct.std::__1::__split_buffer"*, %struct.FX_TPO** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  %7 = icmp eq %struct.FX_TPO** %4, %6
  %8 = ptrtoint %struct.FX_TPO** %6 to i64
  %9 = bitcast %struct.FX_TPO** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load %struct.FX_TPO**, %struct.FX_TPO*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load %struct.FX_TPO**, %struct.FX_TPO*** %13, align 8
  %15 = icmp ugt %struct.FX_TPO** %12, %14
  %16 = ptrtoint %struct.FX_TPO** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %struct.FX_TPO** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %12, i64 %22
  %24 = ptrtoint %struct.FX_TPO** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %struct.FX_TPO** %23 to i8*
  %30 = bitcast %struct.FX_TPO** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #14
  %31 = load %struct.FX_TPO**, %struct.FX_TPO*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %struct.FX_TPO** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %23, i64 %26
  store %struct.FX_TPO** %34, %struct.FX_TPO*** %3, align 8
  %35 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %33, i64 %22
  store %struct.FX_TPO** %35, %struct.FX_TPO*** %11, align 8
  %36 = bitcast %struct.FX_TPO** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast %struct.FX_TPO*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #15
  %50 = bitcast i8* %49 to %struct.FX_TPO**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %50, i64 %47
  %53 = ptrtoint %struct.FX_TPO** %52 to i64
  %54 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %50, i64 %43
  %55 = ptrtoint %struct.FX_TPO** %54 to i64
  %56 = ptrtoint %struct.FX_TPO** %12 to i64
  %57 = ptrtoint %struct.FX_TPO** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi %struct.FX_TPO** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi %struct.FX_TPO** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast %struct.FX_TPO** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %69, i64 1
  %77 = ptrtoint %struct.FX_TPO** %76 to i64
  %78 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !22

81:                                               ; preds = %68
  %82 = ptrtoint %struct.FX_TPO** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi %struct.FX_TPO** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi %struct.FX_TPO** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi %struct.FX_TPO** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi %struct.FX_TPO** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast %struct.FX_TPO** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 1
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 1
  %97 = bitcast %struct.FX_TPO** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %struct.FX_TPO** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 2
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 2
  %102 = bitcast %struct.FX_TPO** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast %struct.FX_TPO** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 3
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 3
  %107 = bitcast %struct.FX_TPO** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast %struct.FX_TPO** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 4
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 4
  %112 = bitcast %struct.FX_TPO** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast %struct.FX_TPO** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 5
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 5
  %117 = bitcast %struct.FX_TPO** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast %struct.FX_TPO** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 6
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 6
  %122 = bitcast %struct.FX_TPO** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast %struct.FX_TPO** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 7
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 7
  %127 = bitcast %struct.FX_TPO** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %struct.FX_TPO** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %89, i64 8
  %131 = ptrtoint %struct.FX_TPO** %130 to i64
  %132 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %91, i64 8
  %133 = icmp eq %struct.FX_TPO** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint %struct.FX_TPO** %60 to i64
  %136 = load %struct.FX_TPO**, %struct.FX_TPO*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi %struct.FX_TPO** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast %struct.FX_TPO*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast %struct.FX_TPO*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq %struct.FX_TPO** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast %struct.FX_TPO** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = bitcast %struct.FX_TPO*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast %struct.FX_TPO** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %153 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %152, i64 1
  store %struct.FX_TPO** %153, %struct.FX_TPO*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIP6FX_TPONS_9allocatorIS2_EEE10push_frontEOS2_(%"struct.std::__1::__split_buffer"*, %struct.FX_TPO** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  %7 = icmp eq %struct.FX_TPO** %4, %6
  %8 = ptrtoint %struct.FX_TPO** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %struct.FX_TPO**, %struct.FX_TPO*** %12, align 8
  %14 = icmp ult %struct.FX_TPO** %11, %13
  %15 = bitcast %struct.FX_TPO*** %12 to i64*
  %16 = ptrtoint %struct.FX_TPO** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %struct.FX_TPO** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %11, i64 %22
  %24 = ptrtoint %struct.FX_TPO** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %23, i64 %29
  %31 = bitcast %struct.FX_TPO** %30 to i8*
  %32 = bitcast %struct.FX_TPO** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %struct.FX_TPO** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %struct.FX_TPO** [ %30, %27 ], [ %23, %17 ]
  store %struct.FX_TPO** %36, %struct.FX_TPO*** %3, align 8
  %37 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %35, i64 %22
  store %struct.FX_TPO** %37, %struct.FX_TPO*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to %struct.FX_TPO**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %48
  %54 = ptrtoint %struct.FX_TPO** %53 to i64
  %55 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %43
  %56 = ptrtoint %struct.FX_TPO** %55 to i64
  %57 = ptrtoint %struct.FX_TPO** %4 to i64
  %58 = ptrtoint %struct.FX_TPO** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %struct.FX_TPO** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %struct.FX_TPO** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %struct.FX_TPO** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %70, i64 1
  %78 = ptrtoint %struct.FX_TPO** %77 to i64
  %79 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !23

82:                                               ; preds = %69
  %83 = ptrtoint %struct.FX_TPO** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %struct.FX_TPO** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %struct.FX_TPO** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %struct.FX_TPO** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %struct.FX_TPO** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %struct.FX_TPO** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 1
  %97 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 1
  %98 = bitcast %struct.FX_TPO** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %struct.FX_TPO** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 2
  %102 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 2
  %103 = bitcast %struct.FX_TPO** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %struct.FX_TPO** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 3
  %107 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 3
  %108 = bitcast %struct.FX_TPO** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %struct.FX_TPO** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 4
  %112 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 4
  %113 = bitcast %struct.FX_TPO** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %struct.FX_TPO** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 5
  %117 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 5
  %118 = bitcast %struct.FX_TPO** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %struct.FX_TPO** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 6
  %122 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 6
  %123 = bitcast %struct.FX_TPO** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %struct.FX_TPO** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 7
  %127 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 7
  %128 = bitcast %struct.FX_TPO** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %struct.FX_TPO** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 8
  %132 = ptrtoint %struct.FX_TPO** %131 to i64
  %133 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 8
  %134 = icmp eq %struct.FX_TPO** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %struct.FX_TPO** %61 to i64
  %137 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %struct.FX_TPO** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %struct.FX_TPO*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %struct.FX_TPO*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %struct.FX_TPO** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %struct.FX_TPO** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %struct.FX_TPO** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %148, i64 -1
  %150 = bitcast %struct.FX_TPO** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %struct.FX_TPO** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %154 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %153, i64 -1
  store %struct.FX_TPO** %154, %struct.FX_TPO*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIP6FX_TPORNS_9allocatorIS2_EEE10push_frontERKS2_(%"struct.std::__1::__split_buffer.114"*, %struct.FX_TPO** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %0, i64 0, i32 1
  %4 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %0, i64 0, i32 0
  %6 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  %7 = icmp eq %struct.FX_TPO** %4, %6
  %8 = ptrtoint %struct.FX_TPO** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %0, i64 0, i32 2
  %11 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.114", %"struct.std::__1::__split_buffer.114"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %struct.FX_TPO**, %struct.FX_TPO*** %12, align 8
  %14 = icmp ult %struct.FX_TPO** %11, %13
  %15 = bitcast %struct.FX_TPO*** %12 to i64*
  %16 = ptrtoint %struct.FX_TPO** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %struct.FX_TPO** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %11, i64 %22
  %24 = ptrtoint %struct.FX_TPO** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %23, i64 %29
  %31 = bitcast %struct.FX_TPO** %30 to i8*
  %32 = bitcast %struct.FX_TPO** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #14
  %33 = load %struct.FX_TPO**, %struct.FX_TPO*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %struct.FX_TPO** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %struct.FX_TPO** [ %30, %27 ], [ %23, %17 ]
  store %struct.FX_TPO** %36, %struct.FX_TPO*** %3, align 8
  %37 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %35, i64 %22
  store %struct.FX_TPO** %37, %struct.FX_TPO*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.114"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #16
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #15
  %51 = bitcast i8* %50 to %struct.FX_TPO**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %48
  %54 = ptrtoint %struct.FX_TPO** %53 to i64
  %55 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %43
  %56 = ptrtoint %struct.FX_TPO** %55 to i64
  %57 = ptrtoint %struct.FX_TPO** %4 to i64
  %58 = ptrtoint %struct.FX_TPO** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi %struct.FX_TPO** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi %struct.FX_TPO** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast %struct.FX_TPO** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %70, i64 1
  %78 = ptrtoint %struct.FX_TPO** %77 to i64
  %79 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !24

82:                                               ; preds = %69
  %83 = ptrtoint %struct.FX_TPO** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi %struct.FX_TPO** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi %struct.FX_TPO** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi %struct.FX_TPO** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi %struct.FX_TPO** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast %struct.FX_TPO** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 1
  %97 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 1
  %98 = bitcast %struct.FX_TPO** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %struct.FX_TPO** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 2
  %102 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 2
  %103 = bitcast %struct.FX_TPO** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast %struct.FX_TPO** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 3
  %107 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 3
  %108 = bitcast %struct.FX_TPO** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %struct.FX_TPO** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 4
  %112 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 4
  %113 = bitcast %struct.FX_TPO** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast %struct.FX_TPO** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 5
  %117 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 5
  %118 = bitcast %struct.FX_TPO** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast %struct.FX_TPO** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 6
  %122 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 6
  %123 = bitcast %struct.FX_TPO** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast %struct.FX_TPO** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 7
  %127 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 7
  %128 = bitcast %struct.FX_TPO** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %struct.FX_TPO** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %90, i64 8
  %132 = ptrtoint %struct.FX_TPO** %131 to i64
  %133 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %92, i64 8
  %134 = icmp eq %struct.FX_TPO** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint %struct.FX_TPO** %61 to i64
  %137 = load %struct.FX_TPO**, %struct.FX_TPO*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi %struct.FX_TPO** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast %struct.FX_TPO*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast %struct.FX_TPO*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq %struct.FX_TPO** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast %struct.FX_TPO** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #15
  %146 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi %struct.FX_TPO** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %148, i64 -1
  %150 = bitcast %struct.FX_TPO** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast %struct.FX_TPO** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load %struct.FX_TPO**, %struct.FX_TPO*** %3, align 8
  %154 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %153, i64 -1
  store %struct.FX_TPO** %154, %struct.FX_TPO*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"struct.std::__1::__less.121"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.std::__1::__deque_iterator", align 8
  %7 = alloca %"class.std::__1::__deque_iterator", align 8
  %8 = alloca %"class.std::__1::__deque_iterator", align 8
  %9 = bitcast %"class.std::__1::__deque_iterator"* %7 to i8*
  %10 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 0
  %11 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 1
  %12 = icmp eq %struct.FX_TPO* %3, %1
  br i1 %12, label %933, label %13

13:                                               ; preds = %5
  %14 = ptrtoint %struct.FX_TPO* %3 to i64
  %15 = ptrtoint %struct.FX_TPO* %1 to i64
  br label %24

16:                                               ; preds = %930, %898, %905, %860, %854, %852
  %17 = phi %struct.FX_TPO** [ %808, %852 ], [ %26, %854 ], [ %26, %860 ], [ %26, %905 ], [ %26, %898 ], [ %808, %930 ]
  %18 = phi i64 [ %807, %852 ], [ %30, %854 ], [ %30, %860 ], [ %30, %905 ], [ %30, %898 ], [ %807, %930 ]
  %19 = phi %struct.FX_TPO** [ %41, %852 ], [ %808, %854 ], [ %861, %860 ], [ %906, %905 ], [ %808, %898 ], [ %41, %930 ]
  %20 = phi i64 [ %40, %852 ], [ %856, %854 ], [ %863, %860 ], [ %908, %905 ], [ %900, %898 ], [ %40, %930 ]
  %21 = inttoptr i64 %18 to %struct.FX_TPO*
  %22 = inttoptr i64 %20 to %struct.FX_TPO*
  %23 = icmp eq %struct.FX_TPO* %21, %22
  br i1 %23, label %933, label %24

24:                                               ; preds = %13, %16
  %25 = phi %struct.FX_TPO* [ %1, %13 ], [ %22, %16 ]
  %26 = phi %struct.FX_TPO** [ %2, %13 ], [ %17, %16 ]
  %27 = phi %struct.FX_TPO* [ %3, %13 ], [ %21, %16 ]
  %28 = phi i64 [ %15, %13 ], [ %20, %16 ]
  %29 = phi %struct.FX_TPO** [ %0, %13 ], [ %19, %16 ]
  %30 = phi i64 [ %14, %13 ], [ %18, %16 ]
  %31 = ptrtoint %struct.FX_TPO** %26 to i64
  %32 = bitcast %struct.FX_TPO** %26 to i64*
  %33 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %34 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  br label %38

35:                                               ; preds = %653
  %36 = inttoptr i64 %610 to %struct.FX_TPO*
  %37 = icmp eq %struct.FX_TPO* %27, %36
  br i1 %37, label %933, label %38

38:                                               ; preds = %24, %35
  %39 = phi %struct.FX_TPO* [ %25, %24 ], [ %36, %35 ]
  %40 = phi i64 [ %28, %24 ], [ %610, %35 ]
  %41 = phi %struct.FX_TPO** [ %29, %24 ], [ %611, %35 ]
  %42 = ptrtoint %struct.FX_TPO** %41 to i64
  %43 = sub i64 %31, %42
  %44 = shl i64 %43, 6
  %45 = load i64, i64* %32, align 8
  %46 = sub i64 %30, %45
  %47 = ashr exact i64 %46, 3
  %48 = add nsw i64 %47, %44
  %49 = bitcast %struct.FX_TPO** %41 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %40, %50
  %52 = ashr exact i64 %51, 3
  %53 = sub i64 %48, %52
  %54 = inttoptr i64 %45 to %struct.FX_TPO*
  switch i64 %53, label %317 [
    i64 0, label %933
    i64 1, label %933
    i64 2, label %55
    i64 3, label %77
    i64 4, label %144
    i64 5, label %202
  ]

55:                                               ; preds = %38
  %56 = inttoptr i64 %30 to %struct.FX_TPO*
  %57 = inttoptr i64 %40 to %struct.FX_TPO*
  %58 = inttoptr i64 %45 to %struct.FX_TPO*
  %59 = icmp eq %struct.FX_TPO* %58, %56
  br i1 %59, label %60, label %64

60:                                               ; preds = %55
  %61 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %62 = load %struct.FX_TPO*, %struct.FX_TPO** %61, align 8
  %63 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %62, i64 512
  br label %64

64:                                               ; preds = %55, %60
  %65 = phi %struct.FX_TPO* [ %63, %60 ], [ %56, %55 ]
  %66 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %65, i64 -1, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %57, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = icmp slt i32 %67, %69
  br i1 %70, label %71, label %933

71:                                               ; preds = %64
  %72 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %65, i64 -1
  %73 = inttoptr i64 %40 to i64*
  %74 = load i64, i64* %73, align 4
  %75 = bitcast %struct.FX_TPO* %72 to i64*
  %76 = load i64, i64* %75, align 4
  store i64 %76, i64* %73, align 4
  store i64 %74, i64* %75, align 4
  br label %933

77:                                               ; preds = %38
  %78 = inttoptr i64 %30 to %struct.FX_TPO*
  %79 = inttoptr i64 %40 to %struct.FX_TPO*
  %80 = inttoptr i64 %45 to %struct.FX_TPO*
  %81 = add nsw i64 %52, 1
  %82 = icmp sgt i64 %51, -8
  br i1 %82, label %83, label %89

83:                                               ; preds = %77
  %84 = lshr i64 %81, 9
  %85 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %84
  %86 = load %struct.FX_TPO*, %struct.FX_TPO** %85, align 8
  %87 = and i64 %81, 511
  %88 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %86, i64 %87
  br label %97

89:                                               ; preds = %77
  %90 = sub nsw i64 510, %52
  %91 = sdiv i64 %90, -512
  %92 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %91
  %93 = load %struct.FX_TPO*, %struct.FX_TPO** %92, align 8
  %94 = srem i64 %90, 512
  %95 = sub nuw nsw i64 511, %94
  %96 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %93, i64 %95
  br label %97

97:                                               ; preds = %83, %89
  %98 = phi %struct.FX_TPO* [ %88, %83 ], [ %96, %89 ]
  %99 = icmp eq %struct.FX_TPO* %80, %78
  br i1 %99, label %100, label %104

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %102 = load %struct.FX_TPO*, %struct.FX_TPO** %101, align 8
  %103 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %102, i64 512
  br label %104

104:                                              ; preds = %97, %100
  %105 = phi %struct.FX_TPO* [ %103, %100 ], [ %78, %97 ]
  %106 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %105, i64 -1
  %107 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %98, i64 0, i32 1
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %79, i64 0, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = icmp slt i32 %108, %110
  %112 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %105, i64 -1, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = icmp slt i32 %113, %108
  br i1 %111, label %128, label %115

115:                                              ; preds = %104
  br i1 %114, label %116, label %933

116:                                              ; preds = %115
  %117 = bitcast %struct.FX_TPO* %98 to i64*
  %118 = load i64, i64* %117, align 4
  %119 = bitcast %struct.FX_TPO* %106 to i64*
  %120 = load i64, i64* %119, align 4
  store i64 %120, i64* %117, align 4
  store i64 %118, i64* %119, align 4
  %121 = load i32, i32* %107, align 4
  %122 = load i32, i32* %109, align 4
  %123 = icmp slt i32 %121, %122
  br i1 %123, label %124, label %933

124:                                              ; preds = %116
  %125 = inttoptr i64 %40 to i64*
  %126 = load i64, i64* %125, align 4
  %127 = load i64, i64* %117, align 4
  store i64 %127, i64* %125, align 4
  store i64 %126, i64* %117, align 4
  br label %933

128:                                              ; preds = %104
  %129 = inttoptr i64 %40 to i64*
  %130 = load i64, i64* %129, align 4
  br i1 %114, label %131, label %134

131:                                              ; preds = %128
  %132 = bitcast %struct.FX_TPO* %106 to i64*
  %133 = load i64, i64* %132, align 4
  store i64 %133, i64* %129, align 4
  store i64 %130, i64* %132, align 4
  br label %933

134:                                              ; preds = %128
  %135 = bitcast %struct.FX_TPO* %98 to i64*
  %136 = load i64, i64* %135, align 4
  store i64 %136, i64* %129, align 4
  store i64 %130, i64* %135, align 4
  %137 = load i32, i32* %112, align 4
  %138 = lshr i64 %130, 32
  %139 = trunc i64 %138 to i32
  %140 = icmp slt i32 %137, %139
  br i1 %140, label %141, label %933

141:                                              ; preds = %134
  %142 = bitcast %struct.FX_TPO* %106 to i64*
  %143 = load i64, i64* %142, align 4
  store i64 %143, i64* %135, align 4
  store i64 %130, i64* %142, align 4
  br label %933

144:                                              ; preds = %38
  %145 = inttoptr i64 %30 to %struct.FX_TPO*
  %146 = inttoptr i64 %40 to %struct.FX_TPO*
  %147 = inttoptr i64 %45 to %struct.FX_TPO*
  %148 = add nsw i64 %52, 1
  %149 = icmp sgt i64 %51, -8
  br i1 %149, label %150, label %157

150:                                              ; preds = %144
  %151 = lshr i64 %148, 9
  %152 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %151
  %153 = load %struct.FX_TPO*, %struct.FX_TPO** %152, align 8
  %154 = and i64 %148, 511
  %155 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %153, i64 %154
  %156 = add nuw nsw i64 %52, 2
  br label %166

157:                                              ; preds = %144
  %158 = sub nsw i64 510, %52
  %159 = sdiv i64 %158, -512
  %160 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %159
  %161 = load %struct.FX_TPO*, %struct.FX_TPO** %160, align 8
  %162 = srem i64 %158, 512
  %163 = sub nuw nsw i64 511, %162
  %164 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %161, i64 %163
  %165 = icmp sgt i64 %51, -16
  br i1 %165, label %166, label %175

166:                                              ; preds = %150, %157
  %167 = phi i64 [ %156, %150 ], [ 1, %157 ]
  %168 = phi %struct.FX_TPO* [ %155, %150 ], [ %164, %157 ]
  %169 = phi %struct.FX_TPO** [ %152, %150 ], [ %160, %157 ]
  %170 = lshr i64 %167, 9
  %171 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %170
  %172 = load %struct.FX_TPO*, %struct.FX_TPO** %171, align 8
  %173 = and i64 %167, 511
  %174 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %172, i64 %173
  br label %183

175:                                              ; preds = %157
  %176 = sub nsw i64 509, %52
  %177 = sdiv i64 %176, -512
  %178 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %177
  %179 = load %struct.FX_TPO*, %struct.FX_TPO** %178, align 8
  %180 = srem i64 %176, 512
  %181 = sub nuw nsw i64 511, %180
  %182 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %179, i64 %181
  br label %183

183:                                              ; preds = %166, %175
  %184 = phi %struct.FX_TPO* [ %168, %166 ], [ %164, %175 ]
  %185 = phi %struct.FX_TPO** [ %169, %166 ], [ %160, %175 ]
  %186 = phi %struct.FX_TPO* [ %174, %166 ], [ %182, %175 ]
  %187 = phi %struct.FX_TPO** [ %171, %166 ], [ %178, %175 ]
  %188 = icmp eq %struct.FX_TPO* %147, %145
  br i1 %188, label %189, label %193

189:                                              ; preds = %183
  %190 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %191 = load %struct.FX_TPO*, %struct.FX_TPO** %190, align 8
  %192 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %191, i64 512
  br label %193

193:                                              ; preds = %183, %189
  %194 = phi %struct.FX_TPO** [ %190, %189 ], [ %26, %183 ]
  %195 = phi %struct.FX_TPO* [ %192, %189 ], [ %145, %183 ]
  %196 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %195, i64 -1
  %197 = ptrtoint %struct.FX_TPO* %196 to i64
  %198 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %8, i64 0, i32 0
  store %struct.FX_TPO** %194, %struct.FX_TPO*** %198, align 8
  %199 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %8, i64 0, i32 1
  %200 = bitcast %struct.FX_TPO** %199 to i64*
  store i64 %197, i64* %200, align 8
  %201 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %146, %struct.FX_TPO** %185, %struct.FX_TPO* %184, %struct.FX_TPO** %187, %struct.FX_TPO* %186, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %8, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  br label %933

202:                                              ; preds = %38
  %203 = inttoptr i64 %30 to %struct.FX_TPO*
  %204 = inttoptr i64 %40 to %struct.FX_TPO*
  %205 = inttoptr i64 %45 to %struct.FX_TPO*
  %206 = add nsw i64 %52, 1
  %207 = icmp sgt i64 %51, -8
  br i1 %207, label %208, label %215

208:                                              ; preds = %202
  %209 = lshr i64 %206, 9
  %210 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %209
  %211 = load %struct.FX_TPO*, %struct.FX_TPO** %210, align 8
  %212 = and i64 %206, 511
  %213 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %211, i64 %212
  %214 = add nuw nsw i64 %52, 2
  br label %224

215:                                              ; preds = %202
  %216 = sub nsw i64 510, %52
  %217 = sdiv i64 %216, -512
  %218 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %217
  %219 = load %struct.FX_TPO*, %struct.FX_TPO** %218, align 8
  %220 = srem i64 %216, 512
  %221 = sub nuw nsw i64 511, %220
  %222 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %219, i64 %221
  %223 = icmp sgt i64 %51, -16
  br i1 %223, label %224, label %234

224:                                              ; preds = %215, %208
  %225 = phi i64 [ %214, %208 ], [ 1, %215 ]
  %226 = phi %struct.FX_TPO* [ %213, %208 ], [ %222, %215 ]
  %227 = phi %struct.FX_TPO** [ %210, %208 ], [ %218, %215 ]
  %228 = lshr i64 %225, 9
  %229 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %228
  %230 = load %struct.FX_TPO*, %struct.FX_TPO** %229, align 8
  %231 = and i64 %225, 511
  %232 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %230, i64 %231
  %233 = add nsw i64 %52, 3
  br label %243

234:                                              ; preds = %215
  %235 = sub nsw i64 509, %52
  %236 = sdiv i64 %235, -512
  %237 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %236
  %238 = load %struct.FX_TPO*, %struct.FX_TPO** %237, align 8
  %239 = srem i64 %235, 512
  %240 = sub nuw nsw i64 511, %239
  %241 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %238, i64 %240
  %242 = icmp sgt i64 %51, -24
  br i1 %242, label %243, label %254

243:                                              ; preds = %224, %234
  %244 = phi i64 [ %233, %224 ], [ 1, %234 ]
  %245 = phi %struct.FX_TPO* [ %232, %224 ], [ %241, %234 ]
  %246 = phi %struct.FX_TPO** [ %229, %224 ], [ %237, %234 ]
  %247 = phi %struct.FX_TPO** [ %227, %224 ], [ %218, %234 ]
  %248 = phi %struct.FX_TPO* [ %226, %224 ], [ %222, %234 ]
  %249 = lshr i64 %244, 9
  %250 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %249
  %251 = load %struct.FX_TPO*, %struct.FX_TPO** %250, align 8
  %252 = and i64 %244, 511
  %253 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %251, i64 %252
  br label %262

254:                                              ; preds = %234
  %255 = sub nsw i64 508, %52
  %256 = sdiv i64 %255, -512
  %257 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %256
  %258 = load %struct.FX_TPO*, %struct.FX_TPO** %257, align 8
  %259 = srem i64 %255, 512
  %260 = sub nuw nsw i64 511, %259
  %261 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %258, i64 %260
  br label %262

262:                                              ; preds = %243, %254
  %263 = phi %struct.FX_TPO* [ %245, %243 ], [ %241, %254 ]
  %264 = phi %struct.FX_TPO** [ %246, %243 ], [ %237, %254 ]
  %265 = phi %struct.FX_TPO** [ %247, %243 ], [ %218, %254 ]
  %266 = phi %struct.FX_TPO* [ %248, %243 ], [ %222, %254 ]
  %267 = phi %struct.FX_TPO* [ %253, %243 ], [ %261, %254 ]
  %268 = phi %struct.FX_TPO** [ %250, %243 ], [ %257, %254 ]
  %269 = icmp eq %struct.FX_TPO* %205, %203
  br i1 %269, label %270, label %274

270:                                              ; preds = %262
  %271 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %26, i64 -1
  %272 = load %struct.FX_TPO*, %struct.FX_TPO** %271, align 8
  %273 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %272, i64 512
  br label %274

274:                                              ; preds = %262, %270
  %275 = phi %struct.FX_TPO* [ %273, %270 ], [ %203, %262 ]
  %276 = bitcast %"class.std::__1::__deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %276)
  %277 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 0
  store %struct.FX_TPO** %268, %struct.FX_TPO*** %277, align 8
  %278 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  store %struct.FX_TPO* %267, %struct.FX_TPO** %278, align 8
  %279 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %204, %struct.FX_TPO** %265, %struct.FX_TPO* %266, %struct.FX_TPO** %264, %struct.FX_TPO* %263, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %6, %"struct.std::__1::__less.121"* dereferenceable(1) %4) #14
  %280 = load %struct.FX_TPO*, %struct.FX_TPO** %278, align 8
  %281 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %275, i64 -1, i32 1
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %280, i64 0, i32 1
  %284 = load i32, i32* %283, align 4
  %285 = icmp slt i32 %282, %284
  br i1 %285, label %286, label %316

286:                                              ; preds = %274
  %287 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %275, i64 -1
  %288 = bitcast %struct.FX_TPO* %280 to i64*
  %289 = load i64, i64* %288, align 4
  %290 = bitcast %struct.FX_TPO* %287 to i64*
  %291 = load i64, i64* %290, align 4
  store i64 %291, i64* %288, align 4
  store i64 %289, i64* %290, align 4
  %292 = load i32, i32* %283, align 4
  %293 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %263, i64 0, i32 1
  %294 = load i32, i32* %293, align 4
  %295 = icmp slt i32 %292, %294
  br i1 %295, label %296, label %316

296:                                              ; preds = %286
  %297 = bitcast %struct.FX_TPO* %263 to i64*
  %298 = load i64, i64* %297, align 4
  %299 = load i64, i64* %288, align 4
  store i64 %299, i64* %297, align 4
  store i64 %298, i64* %288, align 4
  %300 = load i32, i32* %293, align 4
  %301 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %266, i64 0, i32 1
  %302 = load i32, i32* %301, align 4
  %303 = icmp slt i32 %300, %302
  br i1 %303, label %304, label %316

304:                                              ; preds = %296
  %305 = bitcast %struct.FX_TPO* %266 to i64*
  %306 = load i64, i64* %305, align 4
  %307 = load i64, i64* %297, align 4
  store i64 %307, i64* %305, align 4
  store i64 %306, i64* %297, align 4
  %308 = load i32, i32* %301, align 4
  %309 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %204, i64 0, i32 1
  %310 = load i32, i32* %309, align 4
  %311 = icmp slt i32 %308, %310
  br i1 %311, label %312, label %316

312:                                              ; preds = %304
  %313 = inttoptr i64 %40 to i64*
  %314 = load i64, i64* %313, align 4
  %315 = load i64, i64* %305, align 4
  store i64 %315, i64* %313, align 4
  store i64 %314, i64* %305, align 4
  br label %316

316:                                              ; preds = %274, %286, %296, %304, %312
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %276)
  br label %933

317:                                              ; preds = %38
  %318 = icmp slt i64 %53, 31
  br i1 %318, label %319, label %322

319:                                              ; preds = %317
  %320 = inttoptr i64 %30 to %struct.FX_TPO*
  %321 = inttoptr i64 %40 to %struct.FX_TPO*
  tail call void @_ZNSt3__118__insertion_sort_3IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %321, %struct.FX_TPO** %26, %struct.FX_TPO* %320, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  br label %933

322:                                              ; preds = %317
  %323 = icmp eq %struct.FX_TPO* %27, %54
  br i1 %323, label %324, label %327

324:                                              ; preds = %322
  %325 = load %struct.FX_TPO*, %struct.FX_TPO** %33, align 8
  %326 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %325, i64 512
  br label %327

327:                                              ; preds = %322, %324
  %328 = phi %struct.FX_TPO** [ %33, %324 ], [ %26, %322 ]
  %329 = phi %struct.FX_TPO* [ %326, %324 ], [ %27, %322 ]
  %330 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %329, i64 -1
  %331 = icmp sgt i64 %53, 999
  %332 = lshr i64 %53, 1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %353, label %334

334:                                              ; preds = %327
  %335 = add nsw i64 %52, %332
  %336 = icmp sgt i64 %335, 0
  br i1 %336, label %337, label %344

337:                                              ; preds = %334
  %338 = lshr i64 %335, 9
  %339 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %338
  %340 = load %struct.FX_TPO*, %struct.FX_TPO** %339, align 8
  %341 = and i64 %335, 511
  %342 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %340, i64 %341
  %343 = ptrtoint %struct.FX_TPO* %342 to i64
  br label %353

344:                                              ; preds = %334
  %345 = sub nsw i64 511, %335
  %346 = sdiv i64 %345, -512
  %347 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %346
  %348 = load %struct.FX_TPO*, %struct.FX_TPO** %347, align 8
  %349 = srem i64 %345, 512
  %350 = sub nuw nsw i64 511, %349
  %351 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %348, i64 %350
  %352 = ptrtoint %struct.FX_TPO* %351 to i64
  br label %353

353:                                              ; preds = %327, %337, %344
  %354 = phi i64 [ %40, %327 ], [ %343, %337 ], [ %352, %344 ]
  %355 = phi %struct.FX_TPO** [ %41, %327 ], [ %339, %337 ], [ %347, %344 ]
  br i1 %331, label %356, label %454

356:                                              ; preds = %353
  %357 = lshr i64 %53, 2
  %358 = icmp eq i64 %357, 0
  br i1 %358, label %376, label %359

359:                                              ; preds = %356
  %360 = add nsw i64 %52, %357
  %361 = icmp sgt i64 %360, 0
  br i1 %361, label %362, label %368

362:                                              ; preds = %359
  %363 = lshr i64 %360, 9
  %364 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %363
  %365 = load %struct.FX_TPO*, %struct.FX_TPO** %364, align 8
  %366 = and i64 %360, 511
  %367 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %365, i64 %366
  br label %378

368:                                              ; preds = %359
  %369 = sub nsw i64 511, %360
  %370 = sdiv i64 %369, -512
  %371 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 %370
  %372 = load %struct.FX_TPO*, %struct.FX_TPO** %371, align 8
  %373 = srem i64 %369, 512
  %374 = sub nuw nsw i64 511, %373
  %375 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %372, i64 %374
  br label %378

376:                                              ; preds = %356
  %377 = inttoptr i64 %354 to %struct.FX_TPO*
  br label %404

378:                                              ; preds = %362, %368
  %379 = phi %struct.FX_TPO* [ %375, %368 ], [ %367, %362 ]
  %380 = phi %struct.FX_TPO** [ %371, %368 ], [ %364, %362 ]
  %381 = inttoptr i64 %354 to %struct.FX_TPO*
  %382 = bitcast %struct.FX_TPO** %355 to i64*
  %383 = load i64, i64* %382, align 8
  %384 = sub i64 %354, %383
  %385 = ashr exact i64 %384, 3
  %386 = add nsw i64 %385, %357
  %387 = icmp sgt i64 %386, 0
  br i1 %387, label %388, label %395

388:                                              ; preds = %378
  %389 = lshr i64 %386, 9
  %390 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %355, i64 %389
  %391 = load %struct.FX_TPO*, %struct.FX_TPO** %390, align 8
  %392 = and i64 %386, 511
  %393 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %391, i64 %392
  %394 = ptrtoint %struct.FX_TPO* %393 to i64
  br label %404

395:                                              ; preds = %378
  %396 = sub nsw i64 511, %386
  %397 = sdiv i64 %396, -512
  %398 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %355, i64 %397
  %399 = load %struct.FX_TPO*, %struct.FX_TPO** %398, align 8
  %400 = srem i64 %396, 512
  %401 = sub nuw nsw i64 511, %400
  %402 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %399, i64 %401
  %403 = ptrtoint %struct.FX_TPO* %402 to i64
  br label %404

404:                                              ; preds = %376, %388, %395
  %405 = phi %struct.FX_TPO* [ %377, %376 ], [ %381, %388 ], [ %381, %395 ]
  %406 = phi %struct.FX_TPO* [ %39, %376 ], [ %379, %388 ], [ %379, %395 ]
  %407 = phi %struct.FX_TPO** [ %41, %376 ], [ %380, %388 ], [ %380, %395 ]
  %408 = phi i64 [ %354, %376 ], [ %394, %388 ], [ %403, %395 ]
  %409 = phi %struct.FX_TPO** [ %355, %376 ], [ %390, %388 ], [ %398, %395 ]
  %410 = inttoptr i64 %408 to %struct.FX_TPO*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9)
  store %struct.FX_TPO** %409, %struct.FX_TPO*** %10, align 8
  store %struct.FX_TPO* %410, %struct.FX_TPO** %11, align 8
  %411 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %39, %struct.FX_TPO** %407, %struct.FX_TPO* %406, %struct.FX_TPO** %355, %struct.FX_TPO* %405, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %7, %"struct.std::__1::__less.121"* dereferenceable(1) %4) #14
  %412 = load %struct.FX_TPO*, %struct.FX_TPO** %11, align 8
  %413 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %329, i64 -1, i32 1
  %414 = load i32, i32* %413, align 4
  %415 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %412, i64 0, i32 1
  %416 = load i32, i32* %415, align 4
  %417 = icmp slt i32 %414, %416
  br i1 %417, label %418, label %451

418:                                              ; preds = %404
  %419 = bitcast %struct.FX_TPO* %412 to i64*
  %420 = load i64, i64* %419, align 4
  %421 = bitcast %struct.FX_TPO* %330 to i64*
  %422 = load i64, i64* %421, align 4
  store i64 %422, i64* %419, align 4
  store i64 %420, i64* %421, align 4
  %423 = add i32 %411, 1
  %424 = load i32, i32* %415, align 4
  %425 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %405, i64 0, i32 1
  %426 = load i32, i32* %425, align 4
  %427 = icmp slt i32 %424, %426
  br i1 %427, label %428, label %451

428:                                              ; preds = %418
  %429 = bitcast %struct.FX_TPO* %405 to i64*
  %430 = load i64, i64* %429, align 4
  %431 = load i64, i64* %419, align 4
  store i64 %431, i64* %429, align 4
  store i64 %430, i64* %419, align 4
  %432 = add i32 %411, 2
  %433 = load i32, i32* %425, align 4
  %434 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %406, i64 0, i32 1
  %435 = load i32, i32* %434, align 4
  %436 = icmp slt i32 %433, %435
  br i1 %436, label %437, label %451

437:                                              ; preds = %428
  %438 = bitcast %struct.FX_TPO* %406 to i64*
  %439 = load i64, i64* %438, align 4
  %440 = load i64, i64* %429, align 4
  store i64 %440, i64* %438, align 4
  store i64 %439, i64* %429, align 4
  %441 = add i32 %411, 3
  %442 = load i32, i32* %434, align 4
  %443 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 0, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = icmp slt i32 %442, %444
  br i1 %445, label %446, label %451

446:                                              ; preds = %437
  %447 = inttoptr i64 %40 to i64*
  %448 = load i64, i64* %447, align 4
  %449 = load i64, i64* %438, align 4
  store i64 %449, i64* %447, align 4
  store i64 %448, i64* %438, align 4
  %450 = add i32 %411, 4
  br label %451

451:                                              ; preds = %404, %418, %428, %437, %446
  %452 = phi i32 [ %450, %446 ], [ %441, %437 ], [ %432, %428 ], [ %423, %418 ], [ %411, %404 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9)
  %453 = inttoptr i64 %354 to %struct.FX_TPO*
  br label %493

454:                                              ; preds = %353
  %455 = inttoptr i64 %354 to %struct.FX_TPO*
  %456 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %455, i64 0, i32 1
  %457 = load i32, i32* %456, align 4
  %458 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 0, i32 1
  %459 = load i32, i32* %458, align 4
  %460 = icmp slt i32 %457, %459
  %461 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %329, i64 -1, i32 1
  %462 = load i32, i32* %461, align 4
  %463 = icmp slt i32 %462, %457
  br i1 %460, label %477, label %464

464:                                              ; preds = %454
  br i1 %463, label %465, label %493

465:                                              ; preds = %464
  %466 = inttoptr i64 %354 to i64*
  %467 = load i64, i64* %466, align 4
  %468 = bitcast %struct.FX_TPO* %330 to i64*
  %469 = load i64, i64* %468, align 4
  store i64 %469, i64* %466, align 4
  store i64 %467, i64* %468, align 4
  %470 = load i32, i32* %456, align 4
  %471 = load i32, i32* %458, align 4
  %472 = icmp slt i32 %470, %471
  br i1 %472, label %473, label %493

473:                                              ; preds = %465
  %474 = inttoptr i64 %40 to i64*
  %475 = load i64, i64* %474, align 4
  %476 = load i64, i64* %466, align 4
  store i64 %476, i64* %474, align 4
  store i64 %475, i64* %466, align 4
  br label %493

477:                                              ; preds = %454
  %478 = inttoptr i64 %40 to i64*
  %479 = load i64, i64* %478, align 4
  br i1 %463, label %480, label %483

480:                                              ; preds = %477
  %481 = bitcast %struct.FX_TPO* %330 to i64*
  %482 = load i64, i64* %481, align 4
  store i64 %482, i64* %478, align 4
  store i64 %479, i64* %481, align 4
  br label %493

483:                                              ; preds = %477
  %484 = inttoptr i64 %354 to i64*
  %485 = load i64, i64* %484, align 4
  store i64 %485, i64* %478, align 4
  store i64 %479, i64* %484, align 4
  %486 = load i32, i32* %461, align 4
  %487 = lshr i64 %479, 32
  %488 = trunc i64 %487 to i32
  %489 = icmp slt i32 %486, %488
  br i1 %489, label %490, label %493

490:                                              ; preds = %483
  %491 = bitcast %struct.FX_TPO* %330 to i64*
  %492 = load i64, i64* %491, align 4
  store i64 %492, i64* %484, align 4
  store i64 %479, i64* %491, align 4
  br label %493

493:                                              ; preds = %490, %483, %480, %473, %465, %464, %451
  %494 = phi %struct.FX_TPO* [ %455, %490 ], [ %455, %483 ], [ %455, %480 ], [ %455, %473 ], [ %455, %465 ], [ %455, %464 ], [ %453, %451 ]
  %495 = phi i32 [ 2, %490 ], [ 1, %483 ], [ 1, %480 ], [ 2, %473 ], [ 1, %465 ], [ 0, %464 ], [ %452, %451 ]
  %496 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 0, i32 1
  %497 = load i32, i32* %496, align 4
  %498 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %494, i64 0, i32 1
  %499 = load i32, i32* %498, align 4
  %500 = icmp slt i32 %497, %499
  br i1 %500, label %685, label %501

501:                                              ; preds = %493
  %502 = load %struct.FX_TPO*, %struct.FX_TPO** %328, align 8
  br label %503

503:                                              ; preds = %501, %675
  %504 = phi %struct.FX_TPO* [ %513, %675 ], [ %502, %501 ]
  %505 = phi %struct.FX_TPO* [ %516, %675 ], [ %330, %501 ]
  %506 = phi %struct.FX_TPO** [ %514, %675 ], [ %328, %501 ]
  %507 = icmp eq %struct.FX_TPO* %505, %504
  br i1 %507, label %508, label %512

508:                                              ; preds = %503
  %509 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %506, i64 -1
  %510 = load %struct.FX_TPO*, %struct.FX_TPO** %509, align 8
  %511 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %510, i64 512
  br label %512

512:                                              ; preds = %503, %508
  %513 = phi %struct.FX_TPO* [ %510, %508 ], [ %504, %503 ]
  %514 = phi %struct.FX_TPO** [ %509, %508 ], [ %506, %503 ]
  %515 = phi %struct.FX_TPO* [ %511, %508 ], [ %505, %503 ]
  %516 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %515, i64 -1
  %517 = icmp eq %struct.FX_TPO* %516, %39
  br i1 %517, label %518, label %675

518:                                              ; preds = %512
  %519 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %39, i64 1
  %520 = ptrtoint %struct.FX_TPO* %519 to i64
  %521 = load i64, i64* %49, align 8
  %522 = sub i64 %520, %521
  %523 = icmp eq i64 %522, 4096
  br i1 %523, label %524, label %528

524:                                              ; preds = %518
  %525 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 1
  %526 = bitcast %struct.FX_TPO** %525 to i64*
  %527 = load i64, i64* %526, align 8
  br label %528

528:                                              ; preds = %518, %524
  %529 = phi i64 [ %527, %524 ], [ %520, %518 ]
  %530 = phi %struct.FX_TPO** [ %525, %524 ], [ %41, %518 ]
  %531 = load %struct.FX_TPO*, %struct.FX_TPO** %26, align 8
  %532 = icmp eq %struct.FX_TPO* %531, %27
  br i1 %532, label %533, label %536

533:                                              ; preds = %528
  %534 = load %struct.FX_TPO*, %struct.FX_TPO** %34, align 8
  %535 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %534, i64 512
  br label %536

536:                                              ; preds = %528, %533
  %537 = phi %struct.FX_TPO** [ %34, %533 ], [ %26, %528 ]
  %538 = phi %struct.FX_TPO* [ %535, %533 ], [ %27, %528 ]
  %539 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %538, i64 -1
  %540 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %538, i64 -1, i32 1
  %541 = load i32, i32* %540, align 4
  %542 = icmp slt i32 %497, %541
  br i1 %542, label %592, label %543

543:                                              ; preds = %536
  %544 = inttoptr i64 %529 to %struct.FX_TPO*
  %545 = icmp eq %struct.FX_TPO* %539, %544
  br i1 %545, label %933, label %546

546:                                              ; preds = %543
  %547 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %544, i64 0, i32 1
  %548 = load i32, i32* %547, align 4
  %549 = icmp slt i32 %497, %548
  br i1 %549, label %556, label %574

550:                                              ; preds = %587
  %551 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %590, i64 0, i32 1
  %552 = load i32, i32* %551, align 4
  %553 = icmp slt i32 %497, %552
  br i1 %553, label %554, label %574

554:                                              ; preds = %550
  %555 = inttoptr i64 %588 to %struct.FX_TPO*
  br label %556

556:                                              ; preds = %554, %546
  %557 = phi %struct.FX_TPO* [ %544, %546 ], [ %555, %554 ]
  %558 = phi %struct.FX_TPO** [ %530, %546 ], [ %589, %554 ]
  %559 = phi i64 [ %529, %546 ], [ %588, %554 ]
  %560 = inttoptr i64 %559 to i64*
  %561 = load i64, i64* %560, align 4
  %562 = bitcast %struct.FX_TPO* %539 to i64*
  %563 = load i64, i64* %562, align 4
  store i64 %563, i64* %560, align 4
  store i64 %561, i64* %562, align 4
  %564 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %557, i64 1
  %565 = ptrtoint %struct.FX_TPO* %564 to i64
  %566 = bitcast %struct.FX_TPO** %558 to i64*
  %567 = load i64, i64* %566, align 8
  %568 = sub i64 %565, %567
  %569 = icmp eq i64 %568, 4096
  br i1 %569, label %570, label %592

570:                                              ; preds = %556
  %571 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %558, i64 1
  %572 = bitcast %struct.FX_TPO** %571 to i64*
  %573 = load i64, i64* %572, align 8
  br label %592

574:                                              ; preds = %546, %550
  %575 = phi %struct.FX_TPO** [ %589, %550 ], [ %530, %546 ]
  %576 = phi %struct.FX_TPO* [ %590, %550 ], [ %544, %546 ]
  %577 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %576, i64 1
  %578 = ptrtoint %struct.FX_TPO* %577 to i64
  %579 = bitcast %struct.FX_TPO** %575 to i64*
  %580 = load i64, i64* %579, align 8
  %581 = sub i64 %578, %580
  %582 = icmp eq i64 %581, 4096
  br i1 %582, label %583, label %587

583:                                              ; preds = %574
  %584 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %575, i64 1
  %585 = bitcast %struct.FX_TPO** %584 to i64*
  %586 = load i64, i64* %585, align 8
  br label %587

587:                                              ; preds = %574, %583
  %588 = phi i64 [ %586, %583 ], [ %578, %574 ]
  %589 = phi %struct.FX_TPO** [ %584, %583 ], [ %575, %574 ]
  %590 = inttoptr i64 %588 to %struct.FX_TPO*
  %591 = icmp eq %struct.FX_TPO* %539, %590
  br i1 %591, label %933, label %550

592:                                              ; preds = %570, %556, %536
  %593 = phi i64 [ %529, %536 ], [ %573, %570 ], [ %565, %556 ]
  %594 = phi %struct.FX_TPO** [ %530, %536 ], [ %571, %570 ], [ %558, %556 ]
  %595 = inttoptr i64 %593 to %struct.FX_TPO*
  %596 = icmp eq %struct.FX_TPO* %539, %595
  br i1 %596, label %933, label %597

597:                                              ; preds = %592, %668
  %598 = phi i64 [ %669, %668 ], [ %593, %592 ]
  %599 = phi %struct.FX_TPO** [ %670, %668 ], [ %594, %592 ]
  %600 = phi %struct.FX_TPO* [ %647, %668 ], [ %539, %592 ]
  %601 = phi %struct.FX_TPO** [ %645, %668 ], [ %537, %592 ]
  %602 = inttoptr i64 %598 to %struct.FX_TPO*
  %603 = load i32, i32* %496, align 4
  %604 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %602, i64 0, i32 1
  %605 = load i32, i32* %604, align 4
  %606 = icmp slt i32 %603, %605
  br i1 %606, label %609, label %614

607:                                              ; preds = %627
  %608 = inttoptr i64 %628 to %struct.FX_TPO*
  br label %609

609:                                              ; preds = %607, %597
  %610 = phi i64 [ %598, %597 ], [ %628, %607 ]
  %611 = phi %struct.FX_TPO** [ %599, %597 ], [ %629, %607 ]
  %612 = phi %struct.FX_TPO* [ %602, %597 ], [ %608, %607 ]
  %613 = load %struct.FX_TPO*, %struct.FX_TPO** %601, align 8
  br label %634

614:                                              ; preds = %597, %627
  %615 = phi %struct.FX_TPO* [ %630, %627 ], [ %602, %597 ]
  %616 = phi %struct.FX_TPO** [ %629, %627 ], [ %599, %597 ]
  %617 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %615, i64 1
  %618 = ptrtoint %struct.FX_TPO* %617 to i64
  %619 = bitcast %struct.FX_TPO** %616 to i64*
  %620 = load i64, i64* %619, align 8
  %621 = sub i64 %618, %620
  %622 = icmp eq i64 %621, 4096
  br i1 %622, label %623, label %627

623:                                              ; preds = %614
  %624 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %616, i64 1
  %625 = bitcast %struct.FX_TPO** %624 to i64*
  %626 = load i64, i64* %625, align 8
  br label %627

627:                                              ; preds = %614, %623
  %628 = phi i64 [ %626, %623 ], [ %618, %614 ]
  %629 = phi %struct.FX_TPO** [ %624, %623 ], [ %616, %614 ]
  %630 = inttoptr i64 %628 to %struct.FX_TPO*
  %631 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %630, i64 0, i32 1
  %632 = load i32, i32* %631, align 4
  %633 = icmp slt i32 %603, %632
  br i1 %633, label %607, label %614

634:                                              ; preds = %609, %643
  %635 = phi %struct.FX_TPO* [ %644, %643 ], [ %613, %609 ]
  %636 = phi %struct.FX_TPO* [ %647, %643 ], [ %600, %609 ]
  %637 = phi %struct.FX_TPO** [ %645, %643 ], [ %601, %609 ]
  %638 = icmp eq %struct.FX_TPO* %636, %635
  br i1 %638, label %639, label %643

639:                                              ; preds = %634
  %640 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %637, i64 -1
  %641 = load %struct.FX_TPO*, %struct.FX_TPO** %640, align 8
  %642 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %641, i64 512
  br label %643

643:                                              ; preds = %634, %639
  %644 = phi %struct.FX_TPO* [ %641, %639 ], [ %635, %634 ]
  %645 = phi %struct.FX_TPO** [ %640, %639 ], [ %637, %634 ]
  %646 = phi %struct.FX_TPO* [ %642, %639 ], [ %636, %634 ]
  %647 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %646, i64 -1
  %648 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %646, i64 -1, i32 1
  %649 = load i32, i32* %648, align 4
  %650 = icmp slt i32 %603, %649
  br i1 %650, label %634, label %651

651:                                              ; preds = %643
  %652 = icmp ult %struct.FX_TPO** %611, %645
  br i1 %652, label %657, label %653

653:                                              ; preds = %651
  %654 = icmp ne %struct.FX_TPO** %611, %645
  %655 = icmp ule %struct.FX_TPO* %647, %612
  %656 = or i1 %654, %655
  br i1 %656, label %35, label %657

657:                                              ; preds = %653, %651
  %658 = inttoptr i64 %610 to i64*
  %659 = load i64, i64* %658, align 4
  %660 = bitcast %struct.FX_TPO* %647 to i64*
  %661 = load i64, i64* %660, align 4
  store i64 %661, i64* %658, align 4
  store i64 %659, i64* %660, align 4
  %662 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %612, i64 1
  %663 = ptrtoint %struct.FX_TPO* %662 to i64
  %664 = bitcast %struct.FX_TPO** %611 to i64*
  %665 = load i64, i64* %664, align 8
  %666 = sub i64 %663, %665
  %667 = icmp eq i64 %666, 4096
  br i1 %667, label %671, label %668

668:                                              ; preds = %657, %671
  %669 = phi i64 [ %674, %671 ], [ %663, %657 ]
  %670 = phi %struct.FX_TPO** [ %672, %671 ], [ %611, %657 ]
  br label %597

671:                                              ; preds = %657
  %672 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %611, i64 1
  %673 = bitcast %struct.FX_TPO** %672 to i64*
  %674 = load i64, i64* %673, align 8
  br label %668

675:                                              ; preds = %512
  %676 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %515, i64 -1, i32 1
  %677 = load i32, i32* %676, align 4
  %678 = icmp slt i32 %677, %499
  br i1 %678, label %679, label %503

679:                                              ; preds = %675
  %680 = inttoptr i64 %40 to i64*
  %681 = load i64, i64* %680, align 4
  %682 = bitcast %struct.FX_TPO* %516 to i64*
  %683 = load i64, i64* %682, align 4
  store i64 %683, i64* %680, align 4
  store i64 %681, i64* %682, align 4
  %684 = add i32 %495, 1
  br label %685

685:                                              ; preds = %493, %679
  %686 = phi %struct.FX_TPO* [ %516, %679 ], [ %330, %493 ]
  %687 = phi %struct.FX_TPO** [ %514, %679 ], [ %328, %493 ]
  %688 = phi i32 [ %684, %679 ], [ %495, %493 ]
  %689 = bitcast %struct.FX_TPO** %41 to i64*
  %690 = bitcast %struct.FX_TPO** %26 to i64*
  %691 = ptrtoint %struct.FX_TPO** %41 to i64
  %692 = ptrtoint %struct.FX_TPO** %26 to i64
  %693 = inttoptr i64 %40 to %struct.FX_TPO*
  %694 = inttoptr i64 %30 to %struct.FX_TPO*
  %695 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %693, i64 1
  %696 = ptrtoint %struct.FX_TPO* %695 to i64
  %697 = load i64, i64* %689, align 8
  %698 = sub i64 %696, %697
  %699 = icmp eq i64 %698, 4096
  br i1 %699, label %700, label %704

700:                                              ; preds = %685
  %701 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %41, i64 1
  %702 = bitcast %struct.FX_TPO** %701 to i64*
  %703 = load i64, i64* %702, align 8
  br label %704

704:                                              ; preds = %685, %700
  %705 = phi i64 [ %703, %700 ], [ %696, %685 ]
  %706 = phi %struct.FX_TPO** [ %701, %700 ], [ %41, %685 ]
  %707 = icmp ult %struct.FX_TPO** %706, %687
  br i1 %707, label %713, label %708

708:                                              ; preds = %704
  %709 = icmp eq %struct.FX_TPO** %706, %687
  %710 = inttoptr i64 %705 to %struct.FX_TPO*
  %711 = icmp ugt %struct.FX_TPO* %686, %710
  %712 = and i1 %709, %711
  br i1 %712, label %713, label %803

713:                                              ; preds = %708, %704
  br label %714

714:                                              ; preds = %793, %713
  %715 = phi i64 [ %354, %713 ], [ %786, %793 ]
  %716 = phi i64 [ %705, %713 ], [ %794, %793 ]
  %717 = phi %struct.FX_TPO** [ %706, %713 ], [ %795, %793 ]
  %718 = phi %struct.FX_TPO* [ %686, %713 ], [ %768, %793 ]
  %719 = phi %struct.FX_TPO** [ %687, %713 ], [ %766, %793 ]
  %720 = phi i32 [ %688, %713 ], [ %783, %793 ]
  %721 = inttoptr i64 %716 to %struct.FX_TPO*
  %722 = inttoptr i64 %715 to %struct.FX_TPO*
  %723 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %721, i64 0, i32 1
  %724 = load i32, i32* %723, align 4
  %725 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %722, i64 0, i32 1
  %726 = load i32, i32* %725, align 4
  %727 = icmp slt i32 %724, %726
  br i1 %727, label %735, label %730

728:                                              ; preds = %748
  %729 = inttoptr i64 %749 to %struct.FX_TPO*
  br label %730

730:                                              ; preds = %728, %714
  %731 = phi i64 [ %716, %714 ], [ %749, %728 ]
  %732 = phi %struct.FX_TPO** [ %717, %714 ], [ %750, %728 ]
  %733 = phi %struct.FX_TPO* [ %721, %714 ], [ %729, %728 ]
  %734 = load %struct.FX_TPO*, %struct.FX_TPO** %719, align 8
  br label %755

735:                                              ; preds = %714, %748
  %736 = phi %struct.FX_TPO* [ %751, %748 ], [ %721, %714 ]
  %737 = phi %struct.FX_TPO** [ %750, %748 ], [ %717, %714 ]
  %738 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %736, i64 1
  %739 = ptrtoint %struct.FX_TPO* %738 to i64
  %740 = bitcast %struct.FX_TPO** %737 to i64*
  %741 = load i64, i64* %740, align 8
  %742 = sub i64 %739, %741
  %743 = icmp eq i64 %742, 4096
  br i1 %743, label %744, label %748

744:                                              ; preds = %735
  %745 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %737, i64 1
  %746 = bitcast %struct.FX_TPO** %745 to i64*
  %747 = load i64, i64* %746, align 8
  br label %748

748:                                              ; preds = %735, %744
  %749 = phi i64 [ %747, %744 ], [ %739, %735 ]
  %750 = phi %struct.FX_TPO** [ %745, %744 ], [ %737, %735 ]
  %751 = inttoptr i64 %749 to %struct.FX_TPO*
  %752 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %751, i64 0, i32 1
  %753 = load i32, i32* %752, align 4
  %754 = icmp slt i32 %753, %726
  br i1 %754, label %735, label %728

755:                                              ; preds = %730, %764
  %756 = phi %struct.FX_TPO* [ %765, %764 ], [ %734, %730 ]
  %757 = phi %struct.FX_TPO* [ %768, %764 ], [ %718, %730 ]
  %758 = phi %struct.FX_TPO** [ %766, %764 ], [ %719, %730 ]
  %759 = icmp eq %struct.FX_TPO* %757, %756
  br i1 %759, label %760, label %764

760:                                              ; preds = %755
  %761 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %758, i64 -1
  %762 = load %struct.FX_TPO*, %struct.FX_TPO** %761, align 8
  %763 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %762, i64 512
  br label %764

764:                                              ; preds = %755, %760
  %765 = phi %struct.FX_TPO* [ %762, %760 ], [ %756, %755 ]
  %766 = phi %struct.FX_TPO** [ %761, %760 ], [ %758, %755 ]
  %767 = phi %struct.FX_TPO* [ %763, %760 ], [ %757, %755 ]
  %768 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %767, i64 -1
  %769 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %767, i64 -1, i32 1
  %770 = load i32, i32* %769, align 4
  %771 = icmp slt i32 %770, %726
  br i1 %771, label %772, label %755

772:                                              ; preds = %764
  %773 = icmp ult %struct.FX_TPO** %766, %732
  br i1 %773, label %800, label %774

774:                                              ; preds = %772
  %775 = icmp eq %struct.FX_TPO** %766, %732
  %776 = icmp ult %struct.FX_TPO* %768, %733
  %777 = and i1 %775, %776
  br i1 %777, label %800, label %778

778:                                              ; preds = %774
  %779 = inttoptr i64 %731 to i64*
  %780 = load i64, i64* %779, align 4
  %781 = bitcast %struct.FX_TPO* %768 to i64*
  %782 = load i64, i64* %781, align 4
  store i64 %782, i64* %779, align 4
  store i64 %780, i64* %781, align 4
  %783 = add i32 %720, 1
  %784 = icmp eq %struct.FX_TPO* %733, %722
  %785 = ptrtoint %struct.FX_TPO* %768 to i64
  %786 = select i1 %784, i64 %785, i64 %715
  %787 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %733, i64 1
  %788 = ptrtoint %struct.FX_TPO* %787 to i64
  %789 = bitcast %struct.FX_TPO** %732 to i64*
  %790 = load i64, i64* %789, align 8
  %791 = sub i64 %788, %790
  %792 = icmp eq i64 %791, 4096
  br i1 %792, label %796, label %793

793:                                              ; preds = %778, %796
  %794 = phi i64 [ %788, %778 ], [ %799, %796 ]
  %795 = phi %struct.FX_TPO** [ %732, %778 ], [ %797, %796 ]
  br label %714

796:                                              ; preds = %778
  %797 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %732, i64 1
  %798 = bitcast %struct.FX_TPO** %797 to i64*
  %799 = load i64, i64* %798, align 8
  br label %793

800:                                              ; preds = %772, %774
  %801 = inttoptr i64 %715 to %struct.FX_TPO*
  %802 = inttoptr i64 %731 to %struct.FX_TPO*
  br label %803

803:                                              ; preds = %800, %708
  %804 = phi %struct.FX_TPO* [ %801, %800 ], [ %494, %708 ]
  %805 = phi %struct.FX_TPO* [ %802, %800 ], [ %710, %708 ]
  %806 = phi i64 [ %715, %800 ], [ %354, %708 ]
  %807 = phi i64 [ %731, %800 ], [ %705, %708 ]
  %808 = phi %struct.FX_TPO** [ %732, %800 ], [ %706, %708 ]
  %809 = phi i32 [ %720, %800 ], [ %688, %708 ]
  %810 = icmp eq %struct.FX_TPO* %805, %804
  br i1 %810, label %823, label %811

811:                                              ; preds = %803
  %812 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %804, i64 0, i32 1
  %813 = load i32, i32* %812, align 4
  %814 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %805, i64 0, i32 1
  %815 = load i32, i32* %814, align 4
  %816 = icmp slt i32 %813, %815
  br i1 %816, label %817, label %823

817:                                              ; preds = %811
  %818 = inttoptr i64 %807 to i64*
  %819 = load i64, i64* %818, align 4
  %820 = inttoptr i64 %806 to i64*
  %821 = load i64, i64* %820, align 4
  store i64 %821, i64* %818, align 4
  store i64 %819, i64* %820, align 4
  %822 = add i32 %809, 1
  br label %823

823:                                              ; preds = %803, %817, %811
  %824 = phi i32 [ %822, %817 ], [ %809, %811 ], [ %809, %803 ]
  %825 = icmp eq i32 %824, 0
  br i1 %825, label %826, label %864

826:                                              ; preds = %823
  %827 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %693, %struct.FX_TPO** %808, %struct.FX_TPO* %805, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  %828 = bitcast %struct.FX_TPO** %808 to i64*
  %829 = load i64, i64* %828, align 8
  %830 = sub i64 %807, %829
  %831 = ashr exact i64 %830, 3
  %832 = add nsw i64 %831, 1
  %833 = icmp sgt i64 %830, -8
  br i1 %833, label %834, label %840

834:                                              ; preds = %826
  %835 = lshr i64 %832, 9
  %836 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %835
  %837 = load %struct.FX_TPO*, %struct.FX_TPO** %836, align 8
  %838 = and i64 %832, 511
  %839 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %837, i64 %838
  br label %848

840:                                              ; preds = %826
  %841 = sub nsw i64 510, %831
  %842 = sdiv i64 %841, -512
  %843 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %842
  %844 = load %struct.FX_TPO*, %struct.FX_TPO** %843, align 8
  %845 = srem i64 %841, 512
  %846 = sub nuw nsw i64 511, %845
  %847 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %844, i64 %846
  br label %848

848:                                              ; preds = %834, %840
  %849 = phi %struct.FX_TPO* [ %839, %834 ], [ %847, %840 ]
  %850 = phi %struct.FX_TPO** [ %836, %834 ], [ %843, %840 ]
  %851 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_(%struct.FX_TPO** %850, %struct.FX_TPO* %849, %struct.FX_TPO** %26, %struct.FX_TPO* %694, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  br i1 %851, label %852, label %853

852:                                              ; preds = %848
  br i1 %827, label %933, label %16

853:                                              ; preds = %848
  br i1 %827, label %854, label %864

854:                                              ; preds = %853
  %855 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %805, i64 1
  %856 = ptrtoint %struct.FX_TPO* %855 to i64
  %857 = load i64, i64* %828, align 8
  %858 = sub i64 %856, %857
  %859 = icmp eq i64 %858, 4096
  br i1 %859, label %860, label %16

860:                                              ; preds = %854
  %861 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 1
  %862 = bitcast %struct.FX_TPO** %861 to i64*
  %863 = load i64, i64* %862, align 8
  br label %16

864:                                              ; preds = %853, %823
  %865 = icmp eq %struct.FX_TPO* %805, %693
  br i1 %865, label %879, label %866

866:                                              ; preds = %864
  %867 = ptrtoint %struct.FX_TPO** %808 to i64
  %868 = sub i64 %867, %691
  %869 = shl i64 %868, 6
  %870 = bitcast %struct.FX_TPO** %808 to i64*
  %871 = load i64, i64* %870, align 8
  %872 = sub i64 %807, %871
  %873 = ashr exact i64 %872, 3
  %874 = add nsw i64 %873, %869
  %875 = load i64, i64* %689, align 8
  %876 = sub i64 %40, %875
  %877 = ashr exact i64 %876, 3
  %878 = sub i64 %874, %877
  br label %879

879:                                              ; preds = %864, %866
  %880 = phi i64 [ %878, %866 ], [ 0, %864 ]
  %881 = icmp eq %struct.FX_TPO* %805, %694
  br i1 %881, label %895, label %882

882:                                              ; preds = %879
  %883 = ptrtoint %struct.FX_TPO** %808 to i64
  %884 = sub i64 %692, %883
  %885 = shl i64 %884, 6
  %886 = load i64, i64* %690, align 8
  %887 = sub i64 %30, %886
  %888 = ashr exact i64 %887, 3
  %889 = add nsw i64 %888, %885
  %890 = bitcast %struct.FX_TPO** %808 to i64*
  %891 = load i64, i64* %890, align 8
  %892 = sub i64 %807, %891
  %893 = ashr exact i64 %892, 3
  %894 = sub i64 %889, %893
  br label %895

895:                                              ; preds = %879, %882
  %896 = phi i64 [ %894, %882 ], [ 0, %879 ]
  %897 = icmp slt i64 %880, %896
  br i1 %897, label %898, label %909

898:                                              ; preds = %895
  tail call void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %41, %struct.FX_TPO* %693, %struct.FX_TPO** %808, %struct.FX_TPO* %805, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  %899 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %805, i64 1
  %900 = ptrtoint %struct.FX_TPO* %899 to i64
  %901 = bitcast %struct.FX_TPO** %808 to i64*
  %902 = load i64, i64* %901, align 8
  %903 = sub i64 %900, %902
  %904 = icmp eq i64 %903, 4096
  br i1 %904, label %905, label %16

905:                                              ; preds = %898
  %906 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 1
  %907 = bitcast %struct.FX_TPO** %906 to i64*
  %908 = load i64, i64* %907, align 8
  br label %16

909:                                              ; preds = %895
  %910 = bitcast %struct.FX_TPO** %808 to i64*
  %911 = load i64, i64* %910, align 8
  %912 = sub i64 %807, %911
  %913 = ashr exact i64 %912, 3
  %914 = add nsw i64 %913, 1
  %915 = icmp sgt i64 %912, -8
  br i1 %915, label %916, label %922

916:                                              ; preds = %909
  %917 = lshr i64 %914, 9
  %918 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %917
  %919 = load %struct.FX_TPO*, %struct.FX_TPO** %918, align 8
  %920 = and i64 %914, 511
  %921 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %919, i64 %920
  br label %930

922:                                              ; preds = %909
  %923 = sub nsw i64 510, %913
  %924 = sdiv i64 %923, -512
  %925 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %808, i64 %924
  %926 = load %struct.FX_TPO*, %struct.FX_TPO** %925, align 8
  %927 = srem i64 %923, 512
  %928 = sub nuw nsw i64 511, %927
  %929 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %926, i64 %928
  br label %930

930:                                              ; preds = %916, %922
  %931 = phi %struct.FX_TPO* [ %921, %916 ], [ %929, %922 ]
  %932 = phi %struct.FX_TPO** [ %918, %916 ], [ %925, %922 ]
  tail call void @_ZNSt3__16__sortIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO** %932, %struct.FX_TPO* %931, %struct.FX_TPO** %26, %struct.FX_TPO* %694, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  br label %16

933:                                              ; preds = %852, %16, %543, %38, %38, %592, %35, %587, %5, %141, %134, %131, %124, %116, %115, %64, %71, %193, %316, %319
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"class.std::__1::__deque_iterator"* byval(%"class.std::__1::__deque_iterator") align 8, %"struct.std::__1::__less.121"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %9 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %3, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp slt i32 %10, %12
  %14 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %5, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, %10
  br i1 %13, label %33, label %17

17:                                               ; preds = %8
  br i1 %16, label %18, label %51

18:                                               ; preds = %17
  %19 = bitcast %struct.FX_TPO* %3 to i64*
  %20 = load i64, i64* %19, align 4
  %21 = bitcast %struct.FX_TPO* %5 to i64*
  %22 = load i64, i64* %21, align 4
  store i64 %22, i64* %19, align 4
  store i64 %20, i64* %21, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp slt i32 %23, %24
  %26 = lshr i64 %20, 32
  %27 = trunc i64 %26 to i32
  br i1 %25, label %28, label %51

28:                                               ; preds = %18
  %29 = bitcast %struct.FX_TPO* %1 to i64*
  %30 = load i64, i64* %29, align 4
  %31 = load i64, i64* %19, align 4
  store i64 %31, i64* %29, align 4
  store i64 %30, i64* %19, align 4
  %32 = load i32, i32* %14, align 4
  br label %51

33:                                               ; preds = %8
  %34 = bitcast %struct.FX_TPO* %1 to i64*
  %35 = load i64, i64* %34, align 4
  br i1 %16, label %36, label %41

36:                                               ; preds = %33
  %37 = bitcast %struct.FX_TPO* %5 to i64*
  %38 = load i64, i64* %37, align 4
  store i64 %38, i64* %34, align 4
  store i64 %35, i64* %37, align 4
  %39 = lshr i64 %35, 32
  %40 = trunc i64 %39 to i32
  br label %51

41:                                               ; preds = %33
  %42 = bitcast %struct.FX_TPO* %3 to i64*
  %43 = load i64, i64* %42, align 4
  store i64 %43, i64* %34, align 4
  store i64 %35, i64* %42, align 4
  %44 = load i32, i32* %14, align 4
  %45 = lshr i64 %35, 32
  %46 = trunc i64 %45 to i32
  %47 = icmp slt i32 %44, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %41
  %49 = bitcast %struct.FX_TPO* %5 to i64*
  %50 = load i64, i64* %49, align 4
  store i64 %50, i64* %42, align 4
  store i64 %35, i64* %49, align 4
  br label %51

51:                                               ; preds = %17, %18, %28, %36, %41, %48
  %52 = phi i32 [ %40, %36 ], [ %15, %17 ], [ %32, %28 ], [ %27, %18 ], [ %46, %48 ], [ %44, %41 ]
  %53 = phi i32 [ 1, %36 ], [ 0, %17 ], [ 2, %28 ], [ 1, %18 ], [ 2, %48 ], [ 1, %41 ]
  %54 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  %55 = load %struct.FX_TPO*, %struct.FX_TPO** %54, align 8
  %56 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %55, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %57, %52
  br i1 %58, label %59, label %81

59:                                               ; preds = %51
  %60 = bitcast %struct.FX_TPO* %5 to i64*
  %61 = load i64, i64* %60, align 4
  %62 = bitcast %struct.FX_TPO* %55 to i64*
  %63 = load i64, i64* %62, align 4
  store i64 %63, i64* %60, align 4
  store i64 %61, i64* %62, align 4
  %64 = add nuw nsw i32 %53, 1
  %65 = load i32, i32* %14, align 4
  %66 = load i32, i32* %9, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %81

68:                                               ; preds = %59
  %69 = bitcast %struct.FX_TPO* %3 to i64*
  %70 = load i64, i64* %69, align 4
  %71 = load i64, i64* %60, align 4
  store i64 %71, i64* %69, align 4
  store i64 %70, i64* %60, align 4
  %72 = add nuw nsw i32 %53, 2
  %73 = load i32, i32* %9, align 4
  %74 = load i32, i32* %11, align 4
  %75 = icmp slt i32 %73, %74
  br i1 %75, label %76, label %81

76:                                               ; preds = %68
  %77 = bitcast %struct.FX_TPO* %1 to i64*
  %78 = load i64, i64* %77, align 4
  %79 = load i64, i64* %69, align 4
  store i64 %79, i64* %77, align 4
  store i64 %78, i64* %69, align 4
  %80 = add nuw nsw i32 %53, 3
  br label %81

81:                                               ; preds = %59, %76, %68, %51
  %82 = phi i32 [ %80, %76 ], [ %72, %68 ], [ %64, %59 ], [ %53, %51 ]
  ret i32 %82
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEvT0_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"struct.std::__1::__less.121"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = ptrtoint %struct.FX_TPO* %1 to i64
  %7 = bitcast %struct.FX_TPO** %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = ashr exact i64 %9, 3
  %11 = add nsw i64 %10, 2
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %5
  %14 = sub nsw i64 509, %10
  %15 = sdiv i64 %14, -512
  %16 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %15
  %17 = load %struct.FX_TPO*, %struct.FX_TPO** %16, align 8
  %18 = srem i64 %14, 512
  %19 = sub nuw nsw i64 511, %18
  %20 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %17, i64 %19
  %21 = ptrtoint %struct.FX_TPO* %20 to i64
  %22 = sub nsw i64 510, %10
  br label %38

23:                                               ; preds = %5
  %24 = lshr i64 %11, 9
  %25 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %24
  %26 = load %struct.FX_TPO*, %struct.FX_TPO** %25, align 8
  %27 = and i64 %11, 511
  %28 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %26, i64 %27
  %29 = ptrtoint %struct.FX_TPO* %28 to i64
  %30 = add nsw i64 %10, 1
  %31 = icmp sgt i64 %9, -8
  br i1 %31, label %32, label %38

32:                                               ; preds = %23
  %33 = lshr i64 %30, 9
  %34 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %33
  %35 = load %struct.FX_TPO*, %struct.FX_TPO** %34, align 8
  %36 = and i64 %30, 511
  %37 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %35, i64 %36
  br label %49

38:                                               ; preds = %13, %23
  %39 = phi i64 [ %22, %13 ], [ 511, %23 ]
  %40 = phi %struct.FX_TPO* [ %20, %13 ], [ %28, %23 ]
  %41 = phi %struct.FX_TPO** [ %16, %13 ], [ %25, %23 ]
  %42 = phi i64 [ %21, %13 ], [ %29, %23 ]
  %43 = sdiv i64 %39, -512
  %44 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %43
  %45 = load %struct.FX_TPO*, %struct.FX_TPO** %44, align 8
  %46 = and i64 %39, 511
  %47 = xor i64 %46, 511
  %48 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %45, i64 %47
  br label %49

49:                                               ; preds = %32, %38
  %50 = phi %struct.FX_TPO* [ %28, %32 ], [ %40, %38 ]
  %51 = phi %struct.FX_TPO** [ %25, %32 ], [ %41, %38 ]
  %52 = phi i64 [ %29, %32 ], [ %42, %38 ]
  %53 = phi %struct.FX_TPO* [ %37, %32 ], [ %48, %38 ]
  %54 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %53, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %55, %57
  %59 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %50, i64 0, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = icmp slt i32 %60, %55
  br i1 %58, label %75, label %62

62:                                               ; preds = %49
  br i1 %61, label %63, label %91

63:                                               ; preds = %62
  %64 = bitcast %struct.FX_TPO* %53 to i64*
  %65 = load i64, i64* %64, align 4
  %66 = bitcast %struct.FX_TPO* %50 to i64*
  %67 = load i64, i64* %66, align 4
  store i64 %67, i64* %64, align 4
  store i64 %65, i64* %66, align 4
  %68 = load i32, i32* %54, align 4
  %69 = load i32, i32* %56, align 4
  %70 = icmp slt i32 %68, %69
  br i1 %70, label %71, label %91

71:                                               ; preds = %63
  %72 = bitcast %struct.FX_TPO* %1 to i64*
  %73 = load i64, i64* %72, align 4
  %74 = load i64, i64* %64, align 4
  store i64 %74, i64* %72, align 4
  store i64 %73, i64* %64, align 4
  br label %91

75:                                               ; preds = %49
  %76 = bitcast %struct.FX_TPO* %1 to i64*
  %77 = load i64, i64* %76, align 4
  br i1 %61, label %78, label %81

78:                                               ; preds = %75
  %79 = bitcast %struct.FX_TPO* %50 to i64*
  %80 = load i64, i64* %79, align 4
  store i64 %80, i64* %76, align 4
  store i64 %77, i64* %79, align 4
  br label %91

81:                                               ; preds = %75
  %82 = bitcast %struct.FX_TPO* %53 to i64*
  %83 = load i64, i64* %82, align 4
  store i64 %83, i64* %76, align 4
  store i64 %77, i64* %82, align 4
  %84 = load i32, i32* %59, align 4
  %85 = lshr i64 %77, 32
  %86 = trunc i64 %85 to i32
  %87 = icmp slt i32 %84, %86
  br i1 %87, label %88, label %91

88:                                               ; preds = %81
  %89 = bitcast %struct.FX_TPO* %50 to i64*
  %90 = load i64, i64* %89, align 4
  store i64 %90, i64* %82, align 4
  store i64 %77, i64* %89, align 4
  br label %91

91:                                               ; preds = %62, %63, %71, %78, %81, %88
  %92 = bitcast %struct.FX_TPO** %51 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = sub i64 %52, %93
  %95 = ashr exact i64 %94, 3
  %96 = add nsw i64 %95, 1
  %97 = icmp sgt i64 %94, -8
  br i1 %97, label %98, label %104

98:                                               ; preds = %91
  %99 = lshr i64 %96, 9
  %100 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %99
  %101 = load %struct.FX_TPO*, %struct.FX_TPO** %100, align 8
  %102 = and i64 %96, 511
  %103 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %101, i64 %102
  br label %112

104:                                              ; preds = %91
  %105 = sub nsw i64 510, %95
  %106 = sdiv i64 %105, -512
  %107 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %51, i64 %106
  %108 = load %struct.FX_TPO*, %struct.FX_TPO** %107, align 8
  %109 = srem i64 %105, 512
  %110 = sub nuw nsw i64 511, %109
  %111 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %108, i64 %110
  br label %112

112:                                              ; preds = %98, %104
  %113 = phi %struct.FX_TPO* [ %103, %98 ], [ %111, %104 ]
  %114 = phi %struct.FX_TPO** [ %100, %98 ], [ %107, %104 ]
  %115 = icmp eq %struct.FX_TPO* %113, %3
  br i1 %115, label %118, label %116

116:                                              ; preds = %112
  %117 = ptrtoint %struct.FX_TPO* %113 to i64
  br label %119

118:                                              ; preds = %173, %112
  ret void

119:                                              ; preds = %116, %173
  %120 = phi %struct.FX_TPO* [ %176, %173 ], [ %113, %116 ]
  %121 = phi %struct.FX_TPO** [ %175, %173 ], [ %114, %116 ]
  %122 = phi i64 [ %174, %173 ], [ %117, %116 ]
  %123 = phi %struct.FX_TPO** [ %121, %173 ], [ %51, %116 ]
  %124 = phi i64 [ %122, %173 ], [ %52, %116 ]
  %125 = inttoptr i64 %124 to %struct.FX_TPO*
  %126 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %120, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %125, i64 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = icmp slt i32 %127, %129
  br i1 %130, label %131, label %162

131:                                              ; preds = %119
  %132 = inttoptr i64 %122 to i64*
  %133 = load i64, i64* %132, align 4
  %134 = lshr i64 %133, 32
  %135 = trunc i64 %134 to i32
  br label %136

136:                                              ; preds = %152, %131
  %137 = phi i64 [ %122, %131 ], [ %143, %152 ]
  %138 = phi %struct.FX_TPO* [ %125, %131 ], [ %155, %152 ]
  %139 = phi %struct.FX_TPO** [ %123, %131 ], [ %153, %152 ]
  %140 = bitcast %struct.FX_TPO* %138 to i64*
  %141 = inttoptr i64 %137 to i64*
  %142 = load i64, i64* %140, align 4
  store i64 %142, i64* %141, align 4
  %143 = ptrtoint %struct.FX_TPO* %138 to i64
  %144 = icmp eq %struct.FX_TPO* %138, %1
  br i1 %144, label %159, label %145

145:                                              ; preds = %136
  %146 = load %struct.FX_TPO*, %struct.FX_TPO** %139, align 8
  %147 = icmp eq %struct.FX_TPO* %138, %146
  br i1 %147, label %148, label %152

148:                                              ; preds = %145
  %149 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %139, i64 -1
  %150 = load %struct.FX_TPO*, %struct.FX_TPO** %149, align 8
  %151 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %150, i64 512
  br label %152

152:                                              ; preds = %145, %148
  %153 = phi %struct.FX_TPO** [ %149, %148 ], [ %139, %145 ]
  %154 = phi %struct.FX_TPO* [ %151, %148 ], [ %138, %145 ]
  %155 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %154, i64 -1
  %156 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %154, i64 -1, i32 1
  %157 = load i32, i32* %156, align 4
  %158 = icmp sgt i32 %157, %135
  br i1 %158, label %136, label %159

159:                                              ; preds = %136, %152
  %160 = phi %struct.FX_TPO* [ %138, %152 ], [ %1, %136 ]
  %161 = bitcast %struct.FX_TPO* %160 to i64*
  store i64 %133, i64* %161, align 4
  br label %162

162:                                              ; preds = %159, %119
  %163 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %120, i64 1
  %164 = ptrtoint %struct.FX_TPO* %163 to i64
  %165 = bitcast %struct.FX_TPO** %121 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %164, %166
  %168 = icmp eq i64 %167, 4096
  br i1 %168, label %169, label %173

169:                                              ; preds = %162
  %170 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %121, i64 1
  %171 = bitcast %struct.FX_TPO** %170 to i64*
  %172 = load i64, i64* %171, align 8
  br label %173

173:                                              ; preds = %162, %169
  %174 = phi i64 [ %172, %169 ], [ %164, %162 ]
  %175 = phi %struct.FX_TPO** [ %170, %169 ], [ %121, %162 ]
  %176 = inttoptr i64 %174 to %struct.FX_TPO*
  %177 = icmp eq %struct.FX_TPO* %176, %3
  br i1 %177, label %118, label %119
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEbT0_SA_T_(%struct.FX_TPO**, %struct.FX_TPO*, %struct.FX_TPO**, %struct.FX_TPO*, %"struct.std::__1::__less.121"* dereferenceable(1)) local_unnamed_addr #0 comdat {
  %6 = alloca %"class.std::__1::__deque_iterator", align 8
  %7 = alloca %"class.std::__1::__deque_iterator", align 8
  %8 = icmp eq %struct.FX_TPO* %3, %1
  br i1 %8, label %462, label %9

9:                                                ; preds = %5
  %10 = ptrtoint %struct.FX_TPO* %1 to i64
  %11 = ptrtoint %struct.FX_TPO* %3 to i64
  %12 = ptrtoint %struct.FX_TPO** %2 to i64
  %13 = ptrtoint %struct.FX_TPO** %0 to i64
  %14 = sub i64 %12, %13
  %15 = shl i64 %14, 6
  %16 = bitcast %struct.FX_TPO** %2 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %11, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, %15
  %21 = bitcast %struct.FX_TPO** %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %10, %22
  %24 = ashr exact i64 %23, 3
  %25 = sub i64 %20, %24
  %26 = inttoptr i64 %17 to %struct.FX_TPO*
  switch i64 %25, label %275 [
    i64 0, label %462
    i64 1, label %462
    i64 2, label %27
    i64 3, label %46
    i64 4, label %110
    i64 5, label %163
  ]

27:                                               ; preds = %9
  %28 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %28, label %29, label %33

29:                                               ; preds = %27
  %30 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %31 = load %struct.FX_TPO*, %struct.FX_TPO** %30, align 8
  %32 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %31, i64 512
  br label %33

33:                                               ; preds = %27, %29
  %34 = phi %struct.FX_TPO* [ %32, %29 ], [ %3, %27 ]
  %35 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %34, i64 -1, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %36, %38
  br i1 %39, label %40, label %462

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %34, i64 -1
  %42 = bitcast %struct.FX_TPO* %1 to i64*
  %43 = load i64, i64* %42, align 4
  %44 = bitcast %struct.FX_TPO* %41 to i64*
  %45 = load i64, i64* %44, align 4
  store i64 %45, i64* %42, align 4
  store i64 %43, i64* %44, align 4
  br label %462

46:                                               ; preds = %9
  %47 = add nsw i64 %24, 1
  %48 = icmp sgt i64 %23, -8
  br i1 %48, label %49, label %55

49:                                               ; preds = %46
  %50 = lshr i64 %47, 9
  %51 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %50
  %52 = load %struct.FX_TPO*, %struct.FX_TPO** %51, align 8
  %53 = and i64 %47, 511
  %54 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %52, i64 %53
  br label %63

55:                                               ; preds = %46
  %56 = sub nsw i64 510, %24
  %57 = sdiv i64 %56, -512
  %58 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %57
  %59 = load %struct.FX_TPO*, %struct.FX_TPO** %58, align 8
  %60 = srem i64 %56, 512
  %61 = sub nuw nsw i64 511, %60
  %62 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %59, i64 %61
  br label %63

63:                                               ; preds = %49, %55
  %64 = phi %struct.FX_TPO* [ %54, %49 ], [ %62, %55 ]
  %65 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %65, label %66, label %70

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %68 = load %struct.FX_TPO*, %struct.FX_TPO** %67, align 8
  %69 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %68, i64 512
  br label %70

70:                                               ; preds = %63, %66
  %71 = phi %struct.FX_TPO* [ %69, %66 ], [ %3, %63 ]
  %72 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %71, i64 -1
  %73 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %64, i64 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = icmp slt i32 %74, %76
  %78 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %71, i64 -1, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = icmp slt i32 %79, %74
  br i1 %77, label %94, label %81

81:                                               ; preds = %70
  br i1 %80, label %82, label %462

82:                                               ; preds = %81
  %83 = bitcast %struct.FX_TPO* %64 to i64*
  %84 = load i64, i64* %83, align 4
  %85 = bitcast %struct.FX_TPO* %72 to i64*
  %86 = load i64, i64* %85, align 4
  store i64 %86, i64* %83, align 4
  store i64 %84, i64* %85, align 4
  %87 = load i32, i32* %73, align 4
  %88 = load i32, i32* %75, align 4
  %89 = icmp slt i32 %87, %88
  br i1 %89, label %90, label %462

90:                                               ; preds = %82
  %91 = bitcast %struct.FX_TPO* %1 to i64*
  %92 = load i64, i64* %91, align 4
  %93 = load i64, i64* %83, align 4
  store i64 %93, i64* %91, align 4
  store i64 %92, i64* %83, align 4
  br label %462

94:                                               ; preds = %70
  %95 = bitcast %struct.FX_TPO* %1 to i64*
  %96 = load i64, i64* %95, align 4
  br i1 %80, label %97, label %100

97:                                               ; preds = %94
  %98 = bitcast %struct.FX_TPO* %72 to i64*
  %99 = load i64, i64* %98, align 4
  store i64 %99, i64* %95, align 4
  store i64 %96, i64* %98, align 4
  br label %462

100:                                              ; preds = %94
  %101 = bitcast %struct.FX_TPO* %64 to i64*
  %102 = load i64, i64* %101, align 4
  store i64 %102, i64* %95, align 4
  store i64 %96, i64* %101, align 4
  %103 = load i32, i32* %78, align 4
  %104 = lshr i64 %96, 32
  %105 = trunc i64 %104 to i32
  %106 = icmp slt i32 %103, %105
  br i1 %106, label %107, label %462

107:                                              ; preds = %100
  %108 = bitcast %struct.FX_TPO* %72 to i64*
  %109 = load i64, i64* %108, align 4
  store i64 %109, i64* %101, align 4
  store i64 %96, i64* %108, align 4
  br label %462

110:                                              ; preds = %9
  %111 = add nsw i64 %24, 1
  %112 = icmp sgt i64 %23, -8
  br i1 %112, label %113, label %120

113:                                              ; preds = %110
  %114 = lshr i64 %111, 9
  %115 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %114
  %116 = load %struct.FX_TPO*, %struct.FX_TPO** %115, align 8
  %117 = and i64 %111, 511
  %118 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %116, i64 %117
  %119 = add nuw nsw i64 %24, 2
  br label %129

120:                                              ; preds = %110
  %121 = sub nsw i64 510, %24
  %122 = sdiv i64 %121, -512
  %123 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %122
  %124 = load %struct.FX_TPO*, %struct.FX_TPO** %123, align 8
  %125 = srem i64 %121, 512
  %126 = sub nuw nsw i64 511, %125
  %127 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %124, i64 %126
  %128 = icmp sgt i64 %23, -16
  br i1 %128, label %129, label %138

129:                                              ; preds = %113, %120
  %130 = phi i64 [ %119, %113 ], [ 1, %120 ]
  %131 = phi %struct.FX_TPO* [ %118, %113 ], [ %127, %120 ]
  %132 = phi %struct.FX_TPO** [ %115, %113 ], [ %123, %120 ]
  %133 = lshr i64 %130, 9
  %134 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %133
  %135 = load %struct.FX_TPO*, %struct.FX_TPO** %134, align 8
  %136 = and i64 %130, 511
  %137 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %135, i64 %136
  br label %146

138:                                              ; preds = %120
  %139 = sub nsw i64 509, %24
  %140 = sdiv i64 %139, -512
  %141 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %140
  %142 = load %struct.FX_TPO*, %struct.FX_TPO** %141, align 8
  %143 = srem i64 %139, 512
  %144 = sub nuw nsw i64 511, %143
  %145 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %142, i64 %144
  br label %146

146:                                              ; preds = %129, %138
  %147 = phi %struct.FX_TPO* [ %131, %129 ], [ %127, %138 ]
  %148 = phi %struct.FX_TPO** [ %132, %129 ], [ %123, %138 ]
  %149 = phi %struct.FX_TPO* [ %137, %129 ], [ %145, %138 ]
  %150 = phi %struct.FX_TPO** [ %134, %129 ], [ %141, %138 ]
  %151 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %151, label %152, label %156

152:                                              ; preds = %146
  %153 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %154 = load %struct.FX_TPO*, %struct.FX_TPO** %153, align 8
  %155 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %154, i64 512
  br label %156

156:                                              ; preds = %146, %152
  %157 = phi %struct.FX_TPO** [ %153, %152 ], [ %2, %146 ]
  %158 = phi %struct.FX_TPO* [ %155, %152 ], [ %3, %146 ]
  %159 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %158, i64 -1
  %160 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 0
  store %struct.FX_TPO** %157, %struct.FX_TPO*** %160, align 8
  %161 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 1
  store %struct.FX_TPO* %159, %struct.FX_TPO** %161, align 8
  %162 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %0, %struct.FX_TPO* %1, %struct.FX_TPO** %148, %struct.FX_TPO* %147, %struct.FX_TPO** %150, %struct.FX_TPO* %149, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %7, %"struct.std::__1::__less.121"* dereferenceable(1) %4)
  br label %462

163:                                              ; preds = %9
  %164 = add nsw i64 %24, 1
  %165 = icmp sgt i64 %23, -8
  br i1 %165, label %166, label %173

166:                                              ; preds = %163
  %167 = lshr i64 %164, 9
  %168 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %167
  %169 = load %struct.FX_TPO*, %struct.FX_TPO** %168, align 8
  %170 = and i64 %164, 511
  %171 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %169, i64 %170
  %172 = add nuw nsw i64 %24, 2
  br label %182

173:                                              ; preds = %163
  %174 = sub nsw i64 510, %24
  %175 = sdiv i64 %174, -512
  %176 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %175
  %177 = load %struct.FX_TPO*, %struct.FX_TPO** %176, align 8
  %178 = srem i64 %174, 512
  %179 = sub nuw nsw i64 511, %178
  %180 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %177, i64 %179
  %181 = icmp sgt i64 %23, -16
  br i1 %181, label %182, label %192

182:                                              ; preds = %173, %166
  %183 = phi i64 [ %172, %166 ], [ 1, %173 ]
  %184 = phi %struct.FX_TPO* [ %171, %166 ], [ %180, %173 ]
  %185 = phi %struct.FX_TPO** [ %168, %166 ], [ %176, %173 ]
  %186 = lshr i64 %183, 9
  %187 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %186
  %188 = load %struct.FX_TPO*, %struct.FX_TPO** %187, align 8
  %189 = and i64 %183, 511
  %190 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %188, i64 %189
  %191 = add nsw i64 %24, 3
  br label %201

192:                                              ; preds = %173
  %193 = sub nsw i64 509, %24
  %194 = sdiv i64 %193, -512
  %195 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %194
  %196 = load %struct.FX_TPO*, %struct.FX_TPO** %195, align 8
  %197 = srem i64 %193, 512
  %198 = sub nuw nsw i64 511, %197
  %199 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %196, i64 %198
  %200 = icmp sgt i64 %23, -24
  br i1 %200, label %201, label %212

201:                                              ; preds = %182, %192
  %202 = phi i64 [ %191, %182 ], [ 1, %192 ]
  %203 = phi %struct.FX_TPO* [ %190, %182 ], [ %199, %192 ]
  %204 = phi %struct.FX_TPO** [ %187, %182 ], [ %195, %192 ]
  %205 = phi %struct.FX_TPO** [ %185, %182 ], [ %176, %192 ]
  %206 = phi %struct.FX_TPO* [ %184, %182 ], [ %180, %192 ]
  %207 = lshr i64 %202, 9
  %208 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %207
  %209 = load %struct.FX_TPO*, %struct.FX_TPO** %208, align 8
  %210 = and i64 %202, 511
  %211 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %209, i64 %210
  br label %220

212:                                              ; preds = %192
  %213 = sub nsw i64 508, %24
  %214 = sdiv i64 %213, -512
  %215 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %214
  %216 = load %struct.FX_TPO*, %struct.FX_TPO** %215, align 8
  %217 = srem i64 %213, 512
  %218 = sub nuw nsw i64 511, %217
  %219 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %216, i64 %218
  br label %220

220:                                              ; preds = %201, %212
  %221 = phi %struct.FX_TPO* [ %203, %201 ], [ %199, %212 ]
  %222 = phi %struct.FX_TPO** [ %204, %201 ], [ %195, %212 ]
  %223 = phi %struct.FX_TPO** [ %205, %201 ], [ %176, %212 ]
  %224 = phi %struct.FX_TPO* [ %206, %201 ], [ %180, %212 ]
  %225 = phi %struct.FX_TPO* [ %211, %201 ], [ %219, %212 ]
  %226 = phi %struct.FX_TPO** [ %208, %201 ], [ %215, %212 ]
  %227 = icmp eq %struct.FX_TPO* %26, %3
  br i1 %227, label %228, label %232

228:                                              ; preds = %220
  %229 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %2, i64 -1
  %230 = load %struct.FX_TPO*, %struct.FX_TPO** %229, align 8
  %231 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %230, i64 512
  br label %232

232:                                              ; preds = %220, %228
  %233 = phi %struct.FX_TPO* [ %231, %228 ], [ %3, %220 ]
  %234 = bitcast %"class.std::__1::__deque_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %234)
  %235 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 0
  store %struct.FX_TPO** %226, %struct.FX_TPO*** %235, align 8
  %236 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %6, i64 0, i32 1
  store %struct.FX_TPO* %225, %struct.FX_TPO** %236, align 8
  %237 = tail call i32 @_ZNSt3__17__sort4IRNS_6__lessI6FX_TPOS2_EENS_16__deque_iteratorIS2_PS2_RS2_PS6_lLl0EEEEEjT0_SA_SA_SA_T_(%struct.FX_TPO** %0, %struct.FX_TPO* %1, %struct.FX_TPO** %223, %struct.FX_TPO* %224, %struct.FX_TPO** %222, %struct.FX_TPO* %221, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %6, %"struct.std::__1::__less.121"* dereferenceable(1) %4) #14
  %238 = load %struct.FX_TPO*, %struct.FX_TPO** %236, align 8
  %239 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %233, i64 -1, i32 1
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %238, i64 0, i32 1
  %242 = load i32, i32* %241, align 4
  %243 = icmp slt i32 %240, %242
  br i1 %243, label %244, label %274

244:                                              ; preds = %232
  %245 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %233, i64 -1
  %246 = bitcast %struct.FX_TPO* %238 to i64*
  %247 = load i64, i64* %246, align 4
  %248 = bitcast %struct.FX_TPO* %245 to i64*
  %249 = load i64, i64* %248, align 4
  store i64 %249, i64* %246, align 4
  store i64 %247, i64* %248, align 4
  %250 = load i32, i32* %241, align 4
  %251 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %221, i64 0, i32 1
  %252 = load i32, i32* %251, align 4
  %253 = icmp slt i32 %250, %252
  br i1 %253, label %254, label %274

254:                                              ; preds = %244
  %255 = bitcast %struct.FX_TPO* %221 to i64*
  %256 = load i64, i64* %255, align 4
  %257 = load i64, i64* %246, align 4
  store i64 %257, i64* %255, align 4
  store i64 %256, i64* %246, align 4
  %258 = load i32, i32* %251, align 4
  %259 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %224, i64 0, i32 1
  %260 = load i32, i32* %259, align 4
  %261 = icmp slt i32 %258, %260
  br i1 %261, label %262, label %274

262:                                              ; preds = %254
  %263 = bitcast %struct.FX_TPO* %224 to i64*
  %264 = load i64, i64* %263, align 4
  %265 = load i64, i64* %255, align 4
  store i64 %265, i64* %263, align 4
  store i64 %264, i64* %255, align 4
  %266 = load i32, i32* %259, align 4
  %267 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %268 = load i32, i32* %267, align 4
  %269 = icmp slt i32 %266, %268
  br i1 %269, label %270, label %274

270:                                              ; preds = %262
  %271 = bitcast %struct.FX_TPO* %1 to i64*
  %272 = load i64, i64* %271, align 4
  %273 = load i64, i64* %263, align 4
  store i64 %273, i64* %271, align 4
  store i64 %272, i64* %263, align 4
  br label %274

274:                                              ; preds = %232, %244, %254, %262, %270
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %234)
  br label %462

275:                                              ; preds = %9
  %276 = add nsw i64 %24, 2
  %277 = icmp sgt i64 %276, 0
  br i1 %277, label %288, label %278

278:                                              ; preds = %275
  %279 = sub nsw i64 509, %24
  %280 = sdiv i64 %279, -512
  %281 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %280
  %282 = load %struct.FX_TPO*, %struct.FX_TPO** %281, align 8
  %283 = srem i64 %279, 512
  %284 = sub nuw nsw i64 511, %283
  %285 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %282, i64 %284
  %286 = ptrtoint %struct.FX_TPO* %285 to i64
  %287 = sub nsw i64 510, %24
  br label %303

288:                                              ; preds = %275
  %289 = lshr i64 %276, 9
  %290 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %289
  %291 = load %struct.FX_TPO*, %struct.FX_TPO** %290, align 8
  %292 = and i64 %276, 511
  %293 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %291, i64 %292
  %294 = ptrtoint %struct.FX_TPO* %293 to i64
  %295 = add nsw i64 %24, 1
  %296 = icmp sgt i64 %23, -8
  br i1 %296, label %297, label %303

297:                                              ; preds = %288
  %298 = lshr i64 %295, 9
  %299 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %298
  %300 = load %struct.FX_TPO*, %struct.FX_TPO** %299, align 8
  %301 = and i64 %295, 511
  %302 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %300, i64 %301
  br label %314

303:                                              ; preds = %278, %288
  %304 = phi i64 [ %287, %278 ], [ 511, %288 ]
  %305 = phi %struct.FX_TPO* [ %285, %278 ], [ %293, %288 ]
  %306 = phi %struct.FX_TPO** [ %281, %278 ], [ %290, %288 ]
  %307 = phi i64 [ %286, %278 ], [ %294, %288 ]
  %308 = sdiv i64 %304, -512
  %309 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %0, i64 %308
  %310 = load %struct.FX_TPO*, %struct.FX_TPO** %309, align 8
  %311 = and i64 %304, 511
  %312 = xor i64 %311, 511
  %313 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %310, i64 %312
  br label %314

314:                                              ; preds = %297, %303
  %315 = phi %struct.FX_TPO* [ %293, %297 ], [ %305, %303 ]
  %316 = phi %struct.FX_TPO** [ %290, %297 ], [ %306, %303 ]
  %317 = phi i64 [ %294, %297 ], [ %307, %303 ]
  %318 = phi %struct.FX_TPO* [ %302, %297 ], [ %313, %303 ]
  %319 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %318, i64 0, i32 1
  %320 = load i32, i32* %319, align 4
  %321 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %1, i64 0, i32 1
  %322 = load i32, i32* %321, align 4
  %323 = icmp slt i32 %320, %322
  %324 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %315, i64 0, i32 1
  %325 = load i32, i32* %324, align 4
  %326 = icmp slt i32 %325, %320
  br i1 %323, label %340, label %327

327:                                              ; preds = %314
  br i1 %326, label %328, label %356

328:                                              ; preds = %327
  %329 = bitcast %struct.FX_TPO* %318 to i64*
  %330 = load i64, i64* %329, align 4
  %331 = bitcast %struct.FX_TPO* %315 to i64*
  %332 = load i64, i64* %331, align 4
  store i64 %332, i64* %329, align 4
  store i64 %330, i64* %331, align 4
  %333 = load i32, i32* %319, align 4
  %334 = load i32, i32* %321, align 4
  %335 = icmp slt i32 %333, %334
  br i1 %335, label %336, label %356

336:                                              ; preds = %328
  %337 = bitcast %struct.FX_TPO* %1 to i64*
  %338 = load i64, i64* %337, align 4
  %339 = load i64, i64* %329, align 4
  store i64 %339, i64* %337, align 4
  store i64 %338, i64* %329, align 4
  br label %356

340:                                              ; preds = %314
  %341 = bitcast %struct.FX_TPO* %1 to i64*
  %342 = load i64, i64* %341, align 4
  br i1 %326, label %343, label %346

343:                                              ; preds = %340
  %344 = bitcast %struct.FX_TPO* %315 to i64*
  %345 = load i64, i64* %344, align 4
  store i64 %345, i64* %341, align 4
  store i64 %342, i64* %344, align 4
  br label %356

346:                                              ; preds = %340
  %347 = bitcast %struct.FX_TPO* %318 to i64*
  %348 = load i64, i64* %347, align 4
  store i64 %348, i64* %341, align 4
  store i64 %342, i64* %347, align 4
  %349 = load i32, i32* %324, align 4
  %350 = lshr i64 %342, 32
  %351 = trunc i64 %350 to i32
  %352 = icmp slt i32 %349, %351
  br i1 %352, label %353, label %356

353:                                              ; preds = %346
  %354 = bitcast %struct.FX_TPO* %315 to i64*
  %355 = load i64, i64* %354, align 4
  store i64 %355, i64* %347, align 4
  store i64 %342, i64* %354, align 4
  br label %356

356:                                              ; preds = %327, %328, %336, %343, %346, %353
  %357 = bitcast %struct.FX_TPO** %316 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = sub i64 %317, %358
  %360 = ashr exact i64 %359, 3
  %361 = add nsw i64 %360, 1
  %362 = icmp sgt i64 %359, -8
  br i1 %362, label %363, label %369

363:                                              ; preds = %356
  %364 = lshr i64 %361, 9
  %365 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %316, i64 %364
  %366 = load %struct.FX_TPO*, %struct.FX_TPO** %365, align 8
  %367 = and i64 %361, 511
  %368 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %366, i64 %367
  br label %377

369:                                              ; preds = %356
  %370 = sub nsw i64 510, %360
  %371 = sdiv i64 %370, -512
  %372 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %316, i64 %371
  %373 = load %struct.FX_TPO*, %struct.FX_TPO** %372, align 8
  %374 = srem i64 %370, 512
  %375 = sub nuw nsw i64 511, %374
  %376 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %373, i64 %375
  br label %377

377:                                              ; preds = %363, %369
  %378 = phi %struct.FX_TPO* [ %368, %363 ], [ %376, %369 ]
  %379 = phi %struct.FX_TPO** [ %365, %363 ], [ %372, %369 ]
  %380 = icmp eq %struct.FX_TPO* %378, %3
  br i1 %380, label %462, label %381

381:                                              ; preds = %377
  %382 = ptrtoint %struct.FX_TPO* %378 to i64
  br label %383

383:                                              ; preds = %381, %453
  %384 = phi %struct.FX_TPO* [ %456, %453 ], [ %378, %381 ]
  %385 = phi i32 [ %441, %453 ], [ 0, %381 ]
  %386 = phi %struct.FX_TPO** [ %455, %453 ], [ %379, %381 ]
  %387 = phi i64 [ %454, %453 ], [ %382, %381 ]
  %388 = phi %struct.FX_TPO** [ %386, %453 ], [ %316, %381 ]
  %389 = phi i64 [ %387, %453 ], [ %317, %381 ]
  %390 = inttoptr i64 %389 to %struct.FX_TPO*
  %391 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %384, i64 0, i32 1
  %392 = load i32, i32* %391, align 4
  %393 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %390, i64 0, i32 1
  %394 = load i32, i32* %393, align 4
  %395 = icmp slt i32 %392, %394
  br i1 %395, label %396, label %440

396:                                              ; preds = %383
  %397 = inttoptr i64 %387 to i64*
  %398 = load i64, i64* %397, align 4
  %399 = lshr i64 %398, 32
  %400 = trunc i64 %399 to i32
  br label %401

401:                                              ; preds = %417, %396
  %402 = phi i64 [ %387, %396 ], [ %408, %417 ]
  %403 = phi %struct.FX_TPO* [ %390, %396 ], [ %420, %417 ]
  %404 = phi %struct.FX_TPO** [ %388, %396 ], [ %418, %417 ]
  %405 = bitcast %struct.FX_TPO* %403 to i64*
  %406 = inttoptr i64 %402 to i64*
  %407 = load i64, i64* %405, align 4
  store i64 %407, i64* %406, align 4
  %408 = ptrtoint %struct.FX_TPO* %403 to i64
  %409 = icmp eq %struct.FX_TPO* %403, %1
  br i1 %409, label %424, label %410

410:                                              ; preds = %401
  %411 = load %struct.FX_TPO*, %struct.FX_TPO** %404, align 8
  %412 = icmp eq %struct.FX_TPO* %403, %411
  br i1 %412, label %413, label %417

413:                                              ; preds = %410
  %414 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %404, i64 -1
  %415 = load %struct.FX_TPO*, %struct.FX_TPO** %414, align 8
  %416 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %415, i64 512
  br label %417

417:                                              ; preds = %410, %413
  %418 = phi %struct.FX_TPO** [ %414, %413 ], [ %404, %410 ]
  %419 = phi %struct.FX_TPO* [ %416, %413 ], [ %403, %410 ]
  %420 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %419, i64 -1
  %421 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %419, i64 -1, i32 1
  %422 = load i32, i32* %421, align 4
  %423 = icmp sgt i32 %422, %400
  br i1 %423, label %401, label %424

424:                                              ; preds = %401, %417
  %425 = phi %struct.FX_TPO* [ %403, %417 ], [ %1, %401 ]
  %426 = bitcast %struct.FX_TPO* %425 to i64*
  store i64 %398, i64* %426, align 4
  %427 = add i32 %385, 1
  %428 = icmp eq i32 %427, 8
  br i1 %428, label %429, label %440

429:                                              ; preds = %424
  %430 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %384, i64 1
  %431 = ptrtoint %struct.FX_TPO* %430 to i64
  %432 = bitcast %struct.FX_TPO** %386 to i64*
  %433 = load i64, i64* %432, align 8
  %434 = sub i64 %431, %433
  %435 = icmp eq i64 %434, 4096
  br i1 %435, label %436, label %458

436:                                              ; preds = %429
  %437 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 1
  %438 = bitcast %struct.FX_TPO** %437 to i64*
  %439 = load i64, i64* %438, align 8
  br label %458

440:                                              ; preds = %424, %383
  %441 = phi i32 [ %385, %383 ], [ %427, %424 ]
  %442 = inttoptr i64 %387 to %struct.FX_TPO*
  %443 = getelementptr inbounds %struct.FX_TPO, %struct.FX_TPO* %442, i64 1
  %444 = ptrtoint %struct.FX_TPO* %443 to i64
  %445 = bitcast %struct.FX_TPO** %386 to i64*
  %446 = load i64, i64* %445, align 8
  %447 = sub i64 %444, %446
  %448 = icmp eq i64 %447, 4096
  br i1 %448, label %449, label %453

449:                                              ; preds = %440
  %450 = getelementptr inbounds %struct.FX_TPO*, %struct.FX_TPO** %386, i64 1
  %451 = bitcast %struct.FX_TPO** %450 to i64*
  %452 = load i64, i64* %451, align 8
  br label %453

453:                                              ; preds = %440, %449
  %454 = phi i64 [ %452, %449 ], [ %444, %440 ]
  %455 = phi %struct.FX_TPO** [ %450, %449 ], [ %386, %440 ]
  %456 = inttoptr i64 %454 to %struct.FX_TPO*
  %457 = icmp eq %struct.FX_TPO* %456, %3
  br i1 %457, label %462, label %383

458:                                              ; preds = %429, %436
  %459 = phi i64 [ %439, %436 ], [ %431, %429 ]
  %460 = inttoptr i64 %459 to %struct.FX_TPO*
  %461 = icmp eq %struct.FX_TPO* %460, %3
  br label %462

462:                                              ; preds = %453, %377, %5, %458, %107, %100, %97, %90, %82, %81, %33, %40, %9, %9, %274, %156
  %463 = phi i1 [ true, %274 ], [ true, %156 ], [ true, %9 ], [ true, %9 ], [ true, %40 ], [ true, %33 ], [ true, %81 ], [ true, %82 ], [ true, %90 ], [ true, %97 ], [ true, %100 ], [ true, %107 ], [ %461, %458 ], [ true, %5 ], [ true, %377 ], [ true, %453 ]
  ret i1 %463
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { builtin nounwind }
attributes #16 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
!4 = !{!5, !7, !9}
!5 = distinct !{!5, !6, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE6rbeginEv: argument 0"}
!6 = distinct !{!6, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE6rbeginEv"}
!7 = distinct !{!7, !8, !"_ZNSt3__16rbeginINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_6rbeginEERKT_: argument 0"}
!8 = distinct !{!8, !"_ZNSt3__16rbeginINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_6rbeginEERKT_"}
!9 = distinct !{!9, !10, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE5beginEv: argument 0"}
!10 = distinct !{!10, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE5beginEv"}
!11 = !{!12, !14, !16}
!12 = distinct !{!12, !13, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE4rendEv: argument 0"}
!13 = distinct !{!13, !"_ZNKSt3__15dequeI6FX_TPONS_9allocatorIS1_EEE4rendEv"}
!14 = distinct !{!14, !15, !"_ZNSt3__14rendINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_4rendEERKT_: argument 0"}
!15 = distinct !{!15, !"_ZNSt3__14rendINS_5dequeI6FX_TPONS_9allocatorIS2_EEEEEEDTcldtfp_4rendEERKT_"}
!16 = distinct !{!16, !17, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE3endEv: argument 0"}
!17 = distinct !{!17, !"_ZNK6pdfium4base8internal15ReversedAdapterIKNSt3__15dequeI6FX_TPONS3_9allocatorIS5_EEEEE3endEv"}
!18 = distinct !{!18, !19}
!19 = !{!"llvm.loop.unroll.disable"}
!20 = distinct !{!20, !19}
!21 = distinct !{!21, !19}
!22 = distinct !{!22, !19}
!23 = distinct !{!23, !19}
!24 = distinct !{!24, !19}
