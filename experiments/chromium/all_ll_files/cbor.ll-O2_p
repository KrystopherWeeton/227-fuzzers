; ModuleID = '../../third_party/inspector_protocol/crdtp/cbor.cc'
source_filename = "../../third_party/inspector_protocol/crdtp/cbor.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.crdtp::cbor::CBORTokenizer" = type { %"class.crdtp::span", i32, %"struct.crdtp::Status", i64, i32, i64 }
%"class.crdtp::span" = type { i8*, i64 }
%"struct.crdtp::Status" = type { i32, i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.crdtp::cbor::EnvelopeEncoder" = type { i64 }
%"class.crdtp::ParserHandler" = type { i32 (...)** }
%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder" = type { %"class.crdtp::ParserHandler", %"class.std::__1::vector"*, %"class.std::__1::vector.6", %"struct.crdtp::Status"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.crdtp::cbor::EnvelopeEncoder"* }
%"class.std::__1::vector.16" = type { %"class.std::__1::__vector_base.17" }
%"class.std::__1::__vector_base.17" = type { i16*, i16*, %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i16* }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_ = comdat any

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZTVN5crdtp4cbor12_GLOBAL__N_111CBOREncoderE = internal unnamed_addr constant { [16 x i8*] } { [16 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoderD2Ev to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoderD0Ev to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder14HandleMapBeginEv to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder12HandleMapEndEv to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder16HandleArrayBeginEv to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder14HandleArrayEndEv to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i8*, i64)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder13HandleString8ENS_4spanIhEE to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i16*, i64)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder14HandleString16ENS_4spanItEE to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i8*, i64)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder12HandleBinaryENS_4spanIhEE to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, double)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder12HandleDoubleEd to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder11HandleInt32Ei to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i1)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder10HandleBoolEb to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder10HandleNullEv to i8*), i8* bitcast (void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)* @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder11HandleErrorENS_6StatusE to i8*)] }, align 8
@_ZN5crdtp4cbor12_GLOBAL__N_112kEncodedTrueE = internal unnamed_addr constant i8 -11, align 1
@_ZN5crdtp4cbor12_GLOBAL__N_113kEncodedFalseE = internal unnamed_addr constant i8 -12, align 1

@_ZN5crdtp4cbor13CBORTokenizerC1ENS_4spanIhEE = hidden unnamed_addr alias void (%"class.crdtp::cbor::CBORTokenizer"*, i8*, i64), void (%"class.crdtp::cbor::CBORTokenizer"*, i8*, i64)* @_ZN5crdtp4cbor13CBORTokenizerC2ENS_4spanIhEE
@_ZN5crdtp4cbor13CBORTokenizerD1Ev = hidden unnamed_addr alias void (%"class.crdtp::cbor::CBORTokenizer"*), void (%"class.crdtp::cbor::CBORTokenizer"*)* @_ZN5crdtp4cbor13CBORTokenizerD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN5crdtp4cbor9internals14ReadTokenStartENS_4spanIhEEPNS0_9MajorTypeEPm(i8*, i64, i32* nocapture, i64* nocapture) local_unnamed_addr #0 {
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %94, label %6

6:                                                ; preds = %4
  %7 = load i8, i8* %0, align 1
  %8 = lshr i8 %7, 5
  %9 = zext i8 %8 to i32
  store i32 %9, i32* %2, align 4
  %10 = and i8 %7, 31
  %11 = icmp ult i8 %10, 24
  br i1 %11, label %12, label %14

12:                                               ; preds = %6
  %13 = zext i8 %10 to i64
  store i64 %13, i64* %3, align 8
  br label %94

14:                                               ; preds = %6
  switch i8 %10, label %94 [
    i8 24, label %15
    i8 25, label %21
    i8 26, label %32
    i8 27, label %53
  ]

15:                                               ; preds = %14
  %16 = icmp ult i64 %1, 2
  br i1 %16, label %94, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds i8, i8* %0, i64 1
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i64
  store i64 %20, i64* %3, align 8
  br label %94

21:                                               ; preds = %14
  %22 = icmp ult i64 %1, 3
  br i1 %22, label %94, label %23

23:                                               ; preds = %21
  %24 = getelementptr inbounds i8, i8* %0, i64 1
  %25 = getelementptr inbounds i8, i8* %0, i64 2
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = load i8, i8* %24, align 1
  %29 = zext i8 %28 to i64
  %30 = shl nuw nsw i64 %29, 8
  %31 = or i64 %30, %27
  store i64 %31, i64* %3, align 8
  br label %94

32:                                               ; preds = %14
  %33 = icmp ult i64 %1, 5
  br i1 %33, label %94, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds i8, i8* %0, i64 1
  %36 = getelementptr inbounds i8, i8* %0, i64 4
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds i8, i8* %0, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = shl nuw nsw i64 %41, 8
  %43 = or i64 %42, %38
  %44 = getelementptr inbounds i8, i8* %0, i64 2
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = shl nuw nsw i64 %46, 16
  %48 = or i64 %43, %47
  %49 = load i8, i8* %35, align 1
  %50 = zext i8 %49 to i64
  %51 = shl nuw nsw i64 %50, 24
  %52 = or i64 %48, %51
  store i64 %52, i64* %3, align 8
  br label %94

53:                                               ; preds = %14
  %54 = icmp ult i64 %1, 9
  br i1 %54, label %94, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds i8, i8* %0, i64 1
  %57 = getelementptr inbounds i8, i8* %0, i64 8
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds i8, i8* %0, i64 7
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = shl nuw nsw i64 %62, 8
  %64 = or i64 %63, %59
  %65 = getelementptr inbounds i8, i8* %0, i64 6
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i64
  %68 = shl nuw nsw i64 %67, 16
  %69 = or i64 %64, %68
  %70 = getelementptr inbounds i8, i8* %0, i64 5
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = shl nuw nsw i64 %72, 24
  %74 = or i64 %69, %73
  %75 = getelementptr inbounds i8, i8* %0, i64 4
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i64
  %78 = shl nuw nsw i64 %77, 32
  %79 = or i64 %74, %78
  %80 = getelementptr inbounds i8, i8* %0, i64 3
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = shl nuw nsw i64 %82, 40
  %84 = or i64 %79, %83
  %85 = getelementptr inbounds i8, i8* %0, i64 2
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = shl nuw nsw i64 %87, 48
  %89 = or i64 %84, %88
  %90 = load i8, i8* %56, align 1
  %91 = zext i8 %90 to i64
  %92 = shl nuw i64 %91, 56
  %93 = or i64 %89, %92
  store i64 %93, i64* %3, align 8
  br label %94

94:                                               ; preds = %12, %17, %23, %34, %55, %15, %21, %32, %53, %14, %4
  %95 = phi i64 [ 0, %4 ], [ 1, %12 ], [ 2, %17 ], [ 3, %23 ], [ 5, %34 ], [ 9, %55 ], [ 0, %15 ], [ 0, %21 ], [ 0, %32 ], [ 0, %53 ], [ 0, %14 ]
  ret i64 %95
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %4 = icmp ult i64 %1, 24
  br i1 %4, label %5, label %66

5:                                                ; preds = %3
  %6 = trunc i64 %1 to i8
  %7 = and i8 %6, 31
  %8 = trunc i32 %0 to i8
  %9 = shl i8 %8, 5
  %10 = or i8 %7, %9
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ult i8* %12, %14
  %16 = ptrtoint i8* %14 to i64
  br i1 %15, label %17, label %21

17:                                               ; preds = %5
  store i8 %10, i8* %12, align 1
  %18 = getelementptr inbounds i8, i8* %12, i64 1
  %19 = ptrtoint i8* %18 to i64
  %20 = bitcast i8** %11 to i64*
  store i64 %19, i64* %20, align 8
  br label %535

21:                                               ; preds = %5
  %22 = ptrtoint i8* %12 to i64
  %23 = bitcast i8** %11 to i64*
  %24 = bitcast %"class.std::__1::vector"* %2 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %22, %25
  %27 = add i64 %26, 1
  %28 = icmp slt i64 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %21
  %30 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %30) #12
  unreachable

31:                                               ; preds = %21
  %32 = bitcast i8** %13 to i64*
  %33 = sub i64 %16, %25
  %34 = icmp ult i64 %33, 4611686018427387903
  br i1 %34, label %35, label %40

35:                                               ; preds = %31
  %36 = shl i64 %33, 1
  %37 = icmp ult i64 %36, %27
  %38 = select i1 %37, i64 %27, i64 %36
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %35, %31
  %41 = phi i64 [ %38, %35 ], [ 9223372036854775807, %31 ]
  %42 = tail call i8* @_Znwm(i64 %41) #13
  br label %43

43:                                               ; preds = %40, %35
  %44 = phi i64 [ %41, %40 ], [ 0, %35 ]
  %45 = phi i8* [ %42, %40 ], [ null, %35 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 %26
  %47 = getelementptr inbounds i8, i8* %45, i64 %44
  %48 = ptrtoint i8* %47 to i64
  store i8 %10, i8* %46, align 1
  %49 = getelementptr inbounds i8, i8* %46, i64 1
  %50 = ptrtoint i8* %49 to i64
  %51 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = load i64, i64* %23, align 8
  %54 = ptrtoint i8* %52 to i64
  %55 = sub i64 %53, %54
  %56 = sub i64 0, %55
  %57 = getelementptr inbounds i8, i8* %46, i64 %56
  %58 = ptrtoint i8* %57 to i64
  %59 = icmp sgt i64 %55, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %43
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %52, i64 %55, i1 false) #14
  %61 = load i8*, i8** %51, align 8
  br label %62

62:                                               ; preds = %60, %43
  %63 = phi i8* [ %52, %43 ], [ %61, %60 ]
  store i64 %58, i64* %24, align 8
  store i64 %50, i64* %23, align 8
  store i64 %48, i64* %32, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %535, label %65

65:                                               ; preds = %62
  tail call void @_ZdlPv(i8* nonnull %63) #13
  br label %535

66:                                               ; preds = %3
  %67 = icmp ugt i64 %1, 255
  br i1 %67, label %183, label %68

68:                                               ; preds = %66
  %69 = trunc i32 %0 to i8
  %70 = shl i8 %69, 5
  %71 = or i8 %70, 24
  %72 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = icmp ult i8* %73, %75
  %77 = ptrtoint i8* %75 to i64
  br i1 %76, label %78, label %82

78:                                               ; preds = %68
  store i8 %71, i8* %73, align 1
  %79 = getelementptr inbounds i8, i8* %73, i64 1
  %80 = ptrtoint i8* %79 to i64
  %81 = bitcast i8** %72 to i64*
  store i64 %80, i64* %81, align 8
  br label %128

82:                                               ; preds = %68
  %83 = ptrtoint i8* %73 to i64
  %84 = bitcast i8** %72 to i64*
  %85 = bitcast %"class.std::__1::vector"* %2 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sub i64 %83, %86
  %88 = add i64 %87, 1
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %82
  %91 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %91) #12
  unreachable

92:                                               ; preds = %82
  %93 = bitcast i8** %74 to i64*
  %94 = sub i64 %77, %86
  %95 = icmp ult i64 %94, 4611686018427387903
  br i1 %95, label %96, label %101

96:                                               ; preds = %92
  %97 = shl i64 %94, 1
  %98 = icmp ult i64 %97, %88
  %99 = select i1 %98, i64 %88, i64 %97
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %104, label %101

101:                                              ; preds = %96, %92
  %102 = phi i64 [ %99, %96 ], [ 9223372036854775807, %92 ]
  %103 = tail call i8* @_Znwm(i64 %102) #13
  br label %104

104:                                              ; preds = %101, %96
  %105 = phi i64 [ %102, %101 ], [ 0, %96 ]
  %106 = phi i8* [ %103, %101 ], [ null, %96 ]
  %107 = getelementptr inbounds i8, i8* %106, i64 %87
  %108 = getelementptr inbounds i8, i8* %106, i64 %105
  %109 = ptrtoint i8* %108 to i64
  store i8 %71, i8* %107, align 1
  %110 = getelementptr inbounds i8, i8* %107, i64 1
  %111 = ptrtoint i8* %110 to i64
  %112 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = load i64, i64* %84, align 8
  %115 = ptrtoint i8* %113 to i64
  %116 = sub i64 %114, %115
  %117 = sub i64 0, %116
  %118 = getelementptr inbounds i8, i8* %107, i64 %117
  %119 = ptrtoint i8* %118 to i64
  %120 = icmp sgt i64 %116, 0
  br i1 %120, label %121, label %123

121:                                              ; preds = %104
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %118, i8* align 1 %113, i64 %116, i1 false) #14
  %122 = load i8*, i8** %112, align 8
  br label %123

123:                                              ; preds = %121, %104
  %124 = phi i8* [ %113, %104 ], [ %122, %121 ]
  store i64 %119, i64* %85, align 8
  store i64 %111, i64* %84, align 8
  store i64 %109, i64* %93, align 8
  %125 = icmp eq i8* %124, null
  br i1 %125, label %128, label %126

126:                                              ; preds = %123
  tail call void @_ZdlPv(i8* nonnull %124) #13
  %127 = load i8*, i8** %72, align 8
  br label %128

128:                                              ; preds = %78, %123, %126
  %129 = phi i8* [ %79, %78 ], [ %110, %123 ], [ %127, %126 ]
  %130 = trunc i64 %1 to i8
  %131 = load i8*, i8** %74, align 8
  %132 = icmp ult i8* %129, %131
  %133 = ptrtoint i8* %131 to i64
  br i1 %132, label %134, label %138

134:                                              ; preds = %128
  store i8 %130, i8* %129, align 1
  %135 = getelementptr inbounds i8, i8* %129, i64 1
  %136 = ptrtoint i8* %135 to i64
  %137 = bitcast i8** %72 to i64*
  store i64 %136, i64* %137, align 8
  br label %535

138:                                              ; preds = %128
  %139 = ptrtoint i8* %129 to i64
  %140 = bitcast i8** %72 to i64*
  %141 = bitcast %"class.std::__1::vector"* %2 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = sub i64 %139, %142
  %144 = add i64 %143, 1
  %145 = icmp slt i64 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %138
  %147 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %147) #12
  unreachable

148:                                              ; preds = %138
  %149 = bitcast i8** %74 to i64*
  %150 = sub i64 %133, %142
  %151 = icmp ult i64 %150, 4611686018427387903
  br i1 %151, label %152, label %157

152:                                              ; preds = %148
  %153 = shl i64 %150, 1
  %154 = icmp ult i64 %153, %144
  %155 = select i1 %154, i64 %144, i64 %153
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %160, label %157

157:                                              ; preds = %152, %148
  %158 = phi i64 [ %155, %152 ], [ 9223372036854775807, %148 ]
  %159 = tail call i8* @_Znwm(i64 %158) #13
  br label %160

160:                                              ; preds = %157, %152
  %161 = phi i64 [ %158, %157 ], [ 0, %152 ]
  %162 = phi i8* [ %159, %157 ], [ null, %152 ]
  %163 = getelementptr inbounds i8, i8* %162, i64 %143
  %164 = getelementptr inbounds i8, i8* %162, i64 %161
  %165 = ptrtoint i8* %164 to i64
  store i8 %130, i8* %163, align 1
  %166 = getelementptr inbounds i8, i8* %163, i64 1
  %167 = ptrtoint i8* %166 to i64
  %168 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %169 = load i8*, i8** %168, align 8
  %170 = load i64, i64* %140, align 8
  %171 = ptrtoint i8* %169 to i64
  %172 = sub i64 %170, %171
  %173 = sub i64 0, %172
  %174 = getelementptr inbounds i8, i8* %163, i64 %173
  %175 = ptrtoint i8* %174 to i64
  %176 = icmp sgt i64 %172, 0
  br i1 %176, label %177, label %179

177:                                              ; preds = %160
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %169, i64 %172, i1 false) #14
  %178 = load i8*, i8** %168, align 8
  br label %179

179:                                              ; preds = %177, %160
  %180 = phi i8* [ %169, %160 ], [ %178, %177 ]
  store i64 %175, i64* %141, align 8
  store i64 %167, i64* %140, align 8
  store i64 %165, i64* %149, align 8
  %181 = icmp eq i8* %180, null
  br i1 %181, label %535, label %182

182:                                              ; preds = %179
  tail call void @_ZdlPv(i8* nonnull %180) #13
  br label %535

183:                                              ; preds = %66
  %184 = icmp ugt i64 %1, 65535
  br i1 %184, label %352, label %185

185:                                              ; preds = %183
  %186 = trunc i32 %0 to i8
  %187 = shl i8 %186, 5
  %188 = or i8 %187, 25
  %189 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %190 = load i8*, i8** %189, align 8
  %191 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %192 = load i8*, i8** %191, align 8
  %193 = icmp ult i8* %190, %192
  %194 = ptrtoint i8* %192 to i64
  br i1 %193, label %195, label %201

195:                                              ; preds = %185
  store i8 %188, i8* %190, align 1
  %196 = getelementptr inbounds i8, i8* %190, i64 1
  %197 = ptrtoint i8* %196 to i64
  %198 = bitcast i8** %189 to i64*
  store i64 %197, i64* %198, align 8
  %199 = bitcast %"class.std::__1::vector"* %2 to i64*
  %200 = bitcast i8** %191 to i64*
  br label %247

201:                                              ; preds = %185
  %202 = ptrtoint i8* %190 to i64
  %203 = bitcast i8** %189 to i64*
  %204 = bitcast %"class.std::__1::vector"* %2 to i64*
  %205 = load i64, i64* %204, align 8
  %206 = sub i64 %202, %205
  %207 = add i64 %206, 1
  %208 = icmp slt i64 %207, 0
  br i1 %208, label %209, label %211

209:                                              ; preds = %201
  %210 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %210) #12
  unreachable

211:                                              ; preds = %201
  %212 = bitcast i8** %191 to i64*
  %213 = sub i64 %194, %205
  %214 = icmp ult i64 %213, 4611686018427387903
  br i1 %214, label %215, label %220

215:                                              ; preds = %211
  %216 = shl i64 %213, 1
  %217 = icmp ult i64 %216, %207
  %218 = select i1 %217, i64 %207, i64 %216
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %223, label %220

220:                                              ; preds = %215, %211
  %221 = phi i64 [ %218, %215 ], [ 9223372036854775807, %211 ]
  %222 = tail call i8* @_Znwm(i64 %221) #13
  br label %223

223:                                              ; preds = %220, %215
  %224 = phi i64 [ %221, %220 ], [ 0, %215 ]
  %225 = phi i8* [ %222, %220 ], [ null, %215 ]
  %226 = getelementptr inbounds i8, i8* %225, i64 %206
  %227 = getelementptr inbounds i8, i8* %225, i64 %224
  %228 = ptrtoint i8* %227 to i64
  store i8 %188, i8* %226, align 1
  %229 = getelementptr inbounds i8, i8* %226, i64 1
  %230 = ptrtoint i8* %229 to i64
  %231 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %232 = load i8*, i8** %231, align 8
  %233 = load i64, i64* %203, align 8
  %234 = ptrtoint i8* %232 to i64
  %235 = sub i64 %233, %234
  %236 = sub i64 0, %235
  %237 = getelementptr inbounds i8, i8* %226, i64 %236
  %238 = ptrtoint i8* %237 to i64
  %239 = icmp sgt i64 %235, 0
  br i1 %239, label %240, label %242

240:                                              ; preds = %223
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %237, i8* align 1 %232, i64 %235, i1 false) #14
  %241 = load i8*, i8** %231, align 8
  br label %242

242:                                              ; preds = %240, %223
  %243 = phi i8* [ %232, %223 ], [ %241, %240 ]
  store i64 %238, i64* %204, align 8
  store i64 %230, i64* %203, align 8
  store i64 %228, i64* %212, align 8
  %244 = icmp eq i8* %243, null
  br i1 %244, label %247, label %245

245:                                              ; preds = %242
  tail call void @_ZdlPv(i8* nonnull %243) #13
  %246 = load i8*, i8** %189, align 8
  br label %247

247:                                              ; preds = %195, %242, %245
  %248 = phi i64* [ %200, %195 ], [ %212, %242 ], [ %212, %245 ]
  %249 = phi i64* [ %199, %195 ], [ %204, %242 ], [ %204, %245 ]
  %250 = phi i64* [ %198, %195 ], [ %203, %242 ], [ %203, %245 ]
  %251 = phi i8* [ %196, %195 ], [ %229, %242 ], [ %246, %245 ]
  %252 = trunc i64 %1 to i16
  %253 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %254 = lshr i16 %252, 8
  %255 = trunc i16 %254 to i8
  %256 = load i8*, i8** %191, align 8
  %257 = icmp ult i8* %251, %256
  %258 = ptrtoint i8* %256 to i64
  br i1 %257, label %259, label %262

259:                                              ; preds = %247
  store i8 %255, i8* %251, align 1
  %260 = getelementptr inbounds i8, i8* %251, i64 1
  %261 = ptrtoint i8* %260 to i64
  store i64 %261, i64* %250, align 8
  br label %304

262:                                              ; preds = %247
  %263 = ptrtoint i8* %251 to i64
  %264 = load i64, i64* %249, align 8
  %265 = sub i64 %263, %264
  %266 = add i64 %265, 1
  %267 = icmp slt i64 %266, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %310, %262
  %269 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %269) #12
  unreachable

270:                                              ; preds = %262
  %271 = sub i64 %258, %264
  %272 = icmp ult i64 %271, 4611686018427387903
  br i1 %272, label %273, label %278

273:                                              ; preds = %270
  %274 = shl i64 %271, 1
  %275 = icmp ult i64 %274, %266
  %276 = select i1 %275, i64 %266, i64 %274
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %281, label %278

278:                                              ; preds = %273, %270
  %279 = phi i64 [ %276, %273 ], [ 9223372036854775807, %270 ]
  %280 = tail call i8* @_Znwm(i64 %279) #13
  br label %281

281:                                              ; preds = %278, %273
  %282 = phi i64 [ %279, %278 ], [ 0, %273 ]
  %283 = phi i8* [ %280, %278 ], [ null, %273 ]
  %284 = getelementptr inbounds i8, i8* %283, i64 %265
  %285 = getelementptr inbounds i8, i8* %283, i64 %282
  %286 = ptrtoint i8* %285 to i64
  store i8 %255, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = ptrtoint i8* %287 to i64
  %289 = load i8*, i8** %253, align 8
  %290 = load i64, i64* %250, align 8
  %291 = ptrtoint i8* %289 to i64
  %292 = sub i64 %290, %291
  %293 = sub i64 0, %292
  %294 = getelementptr inbounds i8, i8* %284, i64 %293
  %295 = ptrtoint i8* %294 to i64
  %296 = icmp sgt i64 %292, 0
  br i1 %296, label %297, label %299

297:                                              ; preds = %281
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %294, i8* align 1 %289, i64 %292, i1 false) #14
  %298 = load i8*, i8** %253, align 8
  br label %299

299:                                              ; preds = %297, %281
  %300 = phi i8* [ %289, %281 ], [ %298, %297 ]
  store i64 %295, i64* %249, align 8
  store i64 %288, i64* %250, align 8
  store i64 %286, i64* %248, align 8
  %301 = icmp eq i8* %300, null
  br i1 %301, label %304, label %302

302:                                              ; preds = %299
  tail call void @_ZdlPv(i8* nonnull %300) #13
  %303 = load i8*, i8** %189, align 8
  br label %304

304:                                              ; preds = %302, %299, %259
  %305 = phi i8* [ %260, %259 ], [ %287, %299 ], [ %303, %302 ]
  %306 = trunc i64 %1 to i8
  %307 = load i8*, i8** %191, align 8
  %308 = icmp ult i8* %305, %307
  %309 = ptrtoint i8* %307 to i64
  br i1 %308, label %349, label %310

310:                                              ; preds = %304
  %311 = ptrtoint i8* %305 to i64
  %312 = load i64, i64* %249, align 8
  %313 = sub i64 %311, %312
  %314 = add i64 %313, 1
  %315 = icmp slt i64 %314, 0
  br i1 %315, label %268, label %316

316:                                              ; preds = %310
  %317 = sub i64 %309, %312
  %318 = icmp ult i64 %317, 4611686018427387903
  br i1 %318, label %319, label %324

319:                                              ; preds = %316
  %320 = shl i64 %317, 1
  %321 = icmp ult i64 %320, %314
  %322 = select i1 %321, i64 %314, i64 %320
  %323 = icmp eq i64 %322, 0
  br i1 %323, label %327, label %324

324:                                              ; preds = %319, %316
  %325 = phi i64 [ %322, %319 ], [ 9223372036854775807, %316 ]
  %326 = tail call i8* @_Znwm(i64 %325) #13
  br label %327

327:                                              ; preds = %324, %319
  %328 = phi i64 [ %325, %324 ], [ 0, %319 ]
  %329 = phi i8* [ %326, %324 ], [ null, %319 ]
  %330 = getelementptr inbounds i8, i8* %329, i64 %313
  %331 = getelementptr inbounds i8, i8* %329, i64 %328
  %332 = ptrtoint i8* %331 to i64
  store i8 %306, i8* %330, align 1
  %333 = getelementptr inbounds i8, i8* %330, i64 1
  %334 = ptrtoint i8* %333 to i64
  %335 = load i8*, i8** %253, align 8
  %336 = load i64, i64* %250, align 8
  %337 = ptrtoint i8* %335 to i64
  %338 = sub i64 %336, %337
  %339 = sub i64 0, %338
  %340 = getelementptr inbounds i8, i8* %330, i64 %339
  %341 = ptrtoint i8* %340 to i64
  %342 = icmp sgt i64 %338, 0
  br i1 %342, label %343, label %345

343:                                              ; preds = %327
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %340, i8* align 1 %335, i64 %338, i1 false) #14
  %344 = load i8*, i8** %253, align 8
  br label %345

345:                                              ; preds = %343, %327
  %346 = phi i8* [ %335, %327 ], [ %344, %343 ]
  store i64 %341, i64* %249, align 8
  store i64 %334, i64* %250, align 8
  store i64 %332, i64* %248, align 8
  %347 = icmp eq i8* %346, null
  br i1 %347, label %535, label %348

348:                                              ; preds = %345
  tail call void @_ZdlPv(i8* nonnull %346) #13
  br label %535

349:                                              ; preds = %304
  store i8 %306, i8* %305, align 1
  %350 = getelementptr inbounds i8, i8* %305, i64 1
  %351 = ptrtoint i8* %350 to i64
  store i64 %351, i64* %250, align 8
  br label %535

352:                                              ; preds = %183
  %353 = icmp ugt i64 %1, 4294967295
  %354 = trunc i32 %0 to i8
  %355 = shl i8 %354, 5
  br i1 %353, label %477, label %356

356:                                              ; preds = %352
  %357 = or i8 %355, 26
  %358 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %359 = load i8*, i8** %358, align 8
  %360 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %361 = load i8*, i8** %360, align 8
  %362 = icmp ult i8* %359, %361
  %363 = ptrtoint i8* %361 to i64
  br i1 %362, label %364, label %370

364:                                              ; preds = %356
  store i8 %357, i8* %359, align 1
  %365 = getelementptr inbounds i8, i8* %359, i64 1
  %366 = ptrtoint i8* %365 to i64
  %367 = bitcast i8** %358 to i64*
  store i64 %366, i64* %367, align 8
  %368 = bitcast %"class.std::__1::vector"* %2 to i64*
  %369 = bitcast i8** %360 to i64*
  br label %415

370:                                              ; preds = %356
  %371 = ptrtoint i8* %359 to i64
  %372 = bitcast i8** %358 to i64*
  %373 = bitcast %"class.std::__1::vector"* %2 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = sub i64 %371, %374
  %376 = add i64 %375, 1
  %377 = icmp slt i64 %376, 0
  br i1 %377, label %378, label %380

378:                                              ; preds = %370
  %379 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %379) #12
  unreachable

380:                                              ; preds = %370
  %381 = bitcast i8** %360 to i64*
  %382 = sub i64 %363, %374
  %383 = icmp ult i64 %382, 4611686018427387903
  br i1 %383, label %384, label %389

384:                                              ; preds = %380
  %385 = shl i64 %382, 1
  %386 = icmp ult i64 %385, %376
  %387 = select i1 %386, i64 %376, i64 %385
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %392, label %389

389:                                              ; preds = %384, %380
  %390 = phi i64 [ %387, %384 ], [ 9223372036854775807, %380 ]
  %391 = tail call i8* @_Znwm(i64 %390) #13
  br label %392

392:                                              ; preds = %389, %384
  %393 = phi i64 [ %390, %389 ], [ 0, %384 ]
  %394 = phi i8* [ %391, %389 ], [ null, %384 ]
  %395 = getelementptr inbounds i8, i8* %394, i64 %375
  %396 = getelementptr inbounds i8, i8* %394, i64 %393
  %397 = ptrtoint i8* %396 to i64
  store i8 %357, i8* %395, align 1
  %398 = getelementptr inbounds i8, i8* %395, i64 1
  %399 = ptrtoint i8* %398 to i64
  %400 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %401 = load i8*, i8** %400, align 8
  %402 = load i64, i64* %372, align 8
  %403 = ptrtoint i8* %401 to i64
  %404 = sub i64 %402, %403
  %405 = sub i64 0, %404
  %406 = getelementptr inbounds i8, i8* %395, i64 %405
  %407 = ptrtoint i8* %406 to i64
  %408 = icmp sgt i64 %404, 0
  br i1 %408, label %409, label %411

409:                                              ; preds = %392
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %406, i8* align 1 %401, i64 %404, i1 false) #14
  %410 = load i8*, i8** %400, align 8
  br label %411

411:                                              ; preds = %409, %392
  %412 = phi i8* [ %401, %392 ], [ %410, %409 ]
  store i64 %407, i64* %373, align 8
  store i64 %399, i64* %372, align 8
  store i64 %397, i64* %381, align 8
  %413 = icmp eq i8* %412, null
  br i1 %413, label %415, label %414

414:                                              ; preds = %411
  tail call void @_ZdlPv(i8* nonnull %412) #13
  br label %415

415:                                              ; preds = %364, %411, %414
  %416 = phi i64* [ %369, %364 ], [ %381, %411 ], [ %381, %414 ]
  %417 = phi i64* [ %368, %364 ], [ %373, %411 ], [ %373, %414 ]
  %418 = phi i64* [ %367, %364 ], [ %372, %411 ], [ %372, %414 ]
  %419 = trunc i64 %1 to i32
  %420 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  br label %421

421:                                              ; preds = %474, %415
  %422 = phi i32 [ 3, %415 ], [ %475, %474 ]
  %423 = shl nsw i32 %422, 3
  %424 = lshr i32 %419, %423
  %425 = trunc i32 %424 to i8
  %426 = load i8*, i8** %358, align 8
  %427 = load i8*, i8** %360, align 8
  %428 = icmp ult i8* %426, %427
  %429 = ptrtoint i8* %427 to i64
  br i1 %428, label %430, label %433

430:                                              ; preds = %421
  store i8 %425, i8* %426, align 1
  %431 = getelementptr inbounds i8, i8* %426, i64 1
  %432 = ptrtoint i8* %431 to i64
  store i64 %432, i64* %418, align 8
  br label %474

433:                                              ; preds = %421
  %434 = ptrtoint i8* %426 to i64
  %435 = load i64, i64* %417, align 8
  %436 = sub i64 %434, %435
  %437 = add i64 %436, 1
  %438 = icmp slt i64 %437, 0
  br i1 %438, label %439, label %441

439:                                              ; preds = %433
  %440 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %440) #12
  unreachable

441:                                              ; preds = %433
  %442 = sub i64 %429, %435
  %443 = icmp ult i64 %442, 4611686018427387903
  br i1 %443, label %444, label %449

444:                                              ; preds = %441
  %445 = shl i64 %442, 1
  %446 = icmp ult i64 %445, %437
  %447 = select i1 %446, i64 %437, i64 %445
  %448 = icmp eq i64 %447, 0
  br i1 %448, label %452, label %449

449:                                              ; preds = %444, %441
  %450 = phi i64 [ %447, %444 ], [ 9223372036854775807, %441 ]
  %451 = tail call i8* @_Znwm(i64 %450) #13
  br label %452

452:                                              ; preds = %449, %444
  %453 = phi i64 [ %450, %449 ], [ 0, %444 ]
  %454 = phi i8* [ %451, %449 ], [ null, %444 ]
  %455 = getelementptr inbounds i8, i8* %454, i64 %436
  %456 = getelementptr inbounds i8, i8* %454, i64 %453
  %457 = ptrtoint i8* %456 to i64
  store i8 %425, i8* %455, align 1
  %458 = getelementptr inbounds i8, i8* %455, i64 1
  %459 = ptrtoint i8* %458 to i64
  %460 = load i8*, i8** %420, align 8
  %461 = load i64, i64* %418, align 8
  %462 = ptrtoint i8* %460 to i64
  %463 = sub i64 %461, %462
  %464 = sub i64 0, %463
  %465 = getelementptr inbounds i8, i8* %455, i64 %464
  %466 = ptrtoint i8* %465 to i64
  %467 = icmp sgt i64 %463, 0
  br i1 %467, label %468, label %470

468:                                              ; preds = %452
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %465, i8* align 1 %460, i64 %463, i1 false) #14
  %469 = load i8*, i8** %420, align 8
  br label %470

470:                                              ; preds = %468, %452
  %471 = phi i8* [ %460, %452 ], [ %469, %468 ]
  store i64 %466, i64* %417, align 8
  store i64 %459, i64* %418, align 8
  store i64 %457, i64* %416, align 8
  %472 = icmp eq i8* %471, null
  br i1 %472, label %474, label %473

473:                                              ; preds = %470
  tail call void @_ZdlPv(i8* nonnull %471) #13
  br label %474

474:                                              ; preds = %473, %470, %430
  %475 = add nsw i32 %422, -1
  %476 = icmp eq i32 %422, 0
  br i1 %476, label %535, label %421

477:                                              ; preds = %352
  %478 = or i8 %355, 27
  %479 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %480 = load i8*, i8** %479, align 8
  %481 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %482 = load i8*, i8** %481, align 8
  %483 = icmp ult i8* %480, %482
  %484 = ptrtoint i8* %482 to i64
  br i1 %483, label %485, label %489

485:                                              ; preds = %477
  store i8 %478, i8* %480, align 1
  %486 = getelementptr inbounds i8, i8* %480, i64 1
  %487 = ptrtoint i8* %486 to i64
  %488 = bitcast i8** %479 to i64*
  store i64 %487, i64* %488, align 8
  br label %534

489:                                              ; preds = %477
  %490 = ptrtoint i8* %480 to i64
  %491 = bitcast i8** %479 to i64*
  %492 = bitcast %"class.std::__1::vector"* %2 to i64*
  %493 = load i64, i64* %492, align 8
  %494 = sub i64 %490, %493
  %495 = add i64 %494, 1
  %496 = icmp slt i64 %495, 0
  br i1 %496, label %497, label %499

497:                                              ; preds = %489
  %498 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %498) #12
  unreachable

499:                                              ; preds = %489
  %500 = bitcast i8** %481 to i64*
  %501 = sub i64 %484, %493
  %502 = icmp ult i64 %501, 4611686018427387903
  br i1 %502, label %503, label %508

503:                                              ; preds = %499
  %504 = shl i64 %501, 1
  %505 = icmp ult i64 %504, %495
  %506 = select i1 %505, i64 %495, i64 %504
  %507 = icmp eq i64 %506, 0
  br i1 %507, label %511, label %508

508:                                              ; preds = %503, %499
  %509 = phi i64 [ %506, %503 ], [ 9223372036854775807, %499 ]
  %510 = tail call i8* @_Znwm(i64 %509) #13
  br label %511

511:                                              ; preds = %508, %503
  %512 = phi i64 [ %509, %508 ], [ 0, %503 ]
  %513 = phi i8* [ %510, %508 ], [ null, %503 ]
  %514 = getelementptr inbounds i8, i8* %513, i64 %494
  %515 = getelementptr inbounds i8, i8* %513, i64 %512
  %516 = ptrtoint i8* %515 to i64
  store i8 %478, i8* %514, align 1
  %517 = getelementptr inbounds i8, i8* %514, i64 1
  %518 = ptrtoint i8* %517 to i64
  %519 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %520 = load i8*, i8** %519, align 8
  %521 = load i64, i64* %491, align 8
  %522 = ptrtoint i8* %520 to i64
  %523 = sub i64 %521, %522
  %524 = sub i64 0, %523
  %525 = getelementptr inbounds i8, i8* %514, i64 %524
  %526 = ptrtoint i8* %525 to i64
  %527 = icmp sgt i64 %523, 0
  br i1 %527, label %528, label %530

528:                                              ; preds = %511
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %525, i8* align 1 %520, i64 %523, i1 false) #14
  %529 = load i8*, i8** %519, align 8
  br label %530

530:                                              ; preds = %528, %511
  %531 = phi i8* [ %520, %511 ], [ %529, %528 ]
  store i64 %526, i64* %492, align 8
  store i64 %518, i64* %491, align 8
  store i64 %516, i64* %500, align 8
  %532 = icmp eq i8* %531, null
  br i1 %532, label %534, label %533

533:                                              ; preds = %530
  tail call void @_ZdlPv(i8* nonnull %531) #13
  br label %534

534:                                              ; preds = %485, %530, %533
  tail call fastcc void @_ZN5crdtp4cbor12_GLOBAL__N_134WriteBytesMostSignificantByteFirstImEEvT_PNSt3__16vectorIhNS4_9allocatorIhEEEE(i64 %1, %"class.std::__1::vector"* %2)
  br label %535

535:                                              ; preds = %474, %349, %348, %345, %182, %179, %134, %65, %62, %17, %534
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"*, i8* dereferenceable(1)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp ult i8* %4, %6
  %8 = ptrtoint i8* %6 to i64
  br i1 %7, label %9, label %14

9:                                                ; preds = %2
  %10 = load i8, i8* %1, align 1
  store i8 %10, i8* %4, align 1
  %11 = getelementptr inbounds i8, i8* %4, i64 1
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast i8** %3 to i64*
  store i64 %12, i64* %13, align 8
  br label %60

14:                                               ; preds = %2
  %15 = ptrtoint i8* %4 to i64
  %16 = bitcast i8** %3 to i64*
  %17 = bitcast %"class.std::__1::vector"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = add i64 %19, 1
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %14
  %23 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #12
  unreachable

24:                                               ; preds = %14
  %25 = bitcast i8** %5 to i64*
  %26 = sub i64 %8, %18
  %27 = icmp ult i64 %26, 4611686018427387903
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = shl i64 %26, 1
  %30 = icmp ult i64 %29, %20
  %31 = select i1 %30, i64 %20, i64 %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %28, %24
  %34 = phi i64 [ %31, %28 ], [ 9223372036854775807, %24 ]
  %35 = tail call i8* @_Znwm(i64 %34) #13
  br label %36

36:                                               ; preds = %33, %28
  %37 = phi i64 [ %34, %33 ], [ 0, %28 ]
  %38 = phi i8* [ %35, %33 ], [ null, %28 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 %19
  %40 = getelementptr inbounds i8, i8* %38, i64 %37
  %41 = ptrtoint i8* %40 to i64
  %42 = load i8, i8* %1, align 1
  store i8 %42, i8* %39, align 1
  %43 = getelementptr inbounds i8, i8* %39, i64 1
  %44 = ptrtoint i8* %43 to i64
  %45 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = load i64, i64* %16, align 8
  %48 = ptrtoint i8* %46 to i64
  %49 = sub i64 %47, %48
  %50 = sub i64 0, %49
  %51 = getelementptr inbounds i8, i8* %39, i64 %50
  %52 = ptrtoint i8* %51 to i64
  %53 = icmp sgt i64 %49, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %36
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %51, i8* align 1 %46, i64 %49, i1 false) #14
  %55 = load i8*, i8** %45, align 8
  br label %56

56:                                               ; preds = %54, %36
  %57 = phi i8* [ %46, %36 ], [ %55, %54 ]
  store i64 %52, i64* %17, align 8
  store i64 %44, i64* %16, align 8
  store i64 %41, i64* %25, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %56
  tail call void @_ZdlPv(i8* nonnull %57) #13
  br label %60

60:                                               ; preds = %59, %56, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5crdtp4cbor12_GLOBAL__N_134WriteBytesMostSignificantByteFirstImEEvT_PNSt3__16vectorIhNS4_9allocatorIhEEEE(i64, %"class.std::__1::vector"*) unnamed_addr #2 {
  %3 = alloca i8, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %4 = lshr i64 %0, 56
  %5 = trunc i64 %4 to i8
  store i8 %5, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %6 = lshr i64 %0, 48
  %7 = trunc i64 %6 to i8
  store i8 %7, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %8 = lshr i64 %0, 40
  %9 = trunc i64 %8 to i8
  store i8 %9, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %10 = lshr i64 %0, 32
  %11 = trunc i64 %10 to i8
  store i8 %11, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %12 = lshr i64 %0, 24
  %13 = trunc i64 %12 to i8
  store i8 %13, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %14 = lshr i64 %0, 16
  %15 = trunc i64 %14 to i8
  store i8 %15, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %16 = lshr i64 %0, 8
  %17 = trunc i64 %16 to i8
  store i8 %17, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #14
  %18 = trunc i64 %0 to i8
  store i8 %18, i8* %3, align 1
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE9push_backEOh(%"class.std::__1::vector"* %1, i8* nonnull dereferenceable(1) %3)
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #14
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor22InitialByteForEnvelopeEv() local_unnamed_addr #4 {
  ret i8 -40
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor35InitialByteFor32BitLengthByteStringEv() local_unnamed_addr #4 {
  ret i8 90
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5crdtp4cbor13IsCBORMessageENS_4spanIhEE(i8*, i64) local_unnamed_addr #5 {
  %3 = icmp ugt i64 %1, 5
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, -40
  br i1 %6, label %7, label %11

7:                                                ; preds = %4
  %8 = getelementptr inbounds i8, i8* %0, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 90
  br label %11

11:                                               ; preds = %7, %4, %2
  %12 = phi i1 [ false, %4 ], [ false, %2 ], [ %10, %7 ]
  ret i1 %12
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden { i32, i64 } @_ZN5crdtp4cbor16CheckCBORMessageENS_4spanIhEE(i8*, i64) local_unnamed_addr #6 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %37, label %4

4:                                                ; preds = %2
  %5 = load i8, i8* %0, align 1
  %6 = icmp eq i8 %5, -40
  br i1 %6, label %7, label %37

7:                                                ; preds = %4
  %8 = icmp ult i64 %1, 6
  br i1 %8, label %37, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds i8, i8* %0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 90
  br i1 %12, label %13, label %37

13:                                               ; preds = %9
  %14 = getelementptr inbounds i8, i8* %0, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %29

17:                                               ; preds = %13
  %18 = getelementptr inbounds i8, i8* %0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %17
  %22 = getelementptr inbounds i8, i8* %0, i64 4
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = getelementptr inbounds i8, i8* %0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %37, label %29

29:                                               ; preds = %25, %21, %17, %13
  %30 = icmp ult i64 %1, 7
  br i1 %30, label %37, label %31

31:                                               ; preds = %29
  %32 = getelementptr inbounds i8, i8* %0, i64 6
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, -65
  %35 = select i1 %34, i64 -1, i64 6
  %36 = select i1 %34, i32 0, i32 32
  br label %37

37:                                               ; preds = %31, %29, %25, %7, %9, %4, %2
  %38 = phi i64 [ 0, %2 ], [ 0, %4 ], [ 1, %9 ], [ 1, %7 ], [ 1, %25 ], [ 6, %29 ], [ %35, %31 ]
  %39 = phi i32 [ 23, %2 ], [ 24, %4 ], [ 16, %9 ], [ 16, %7 ], [ 16, %25 ], [ 32, %29 ], [ %36, %31 ]
  %40 = insertvalue { i32, i64 } undef, i32 %39, 0
  %41 = insertvalue { i32, i64 } %40, i64 %38, 1
  ret { i32, i64 } %41
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor30EncodeIndefiniteLengthMapStartEv() local_unnamed_addr #4 {
  ret i8 -65
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor10EncodeTrueEv() local_unnamed_addr #4 {
  ret i8 -11
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor11EncodeFalseEv() local_unnamed_addr #4 {
  ret i8 -12
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor10EncodeNullEv() local_unnamed_addr #4 {
  ret i8 -10
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor32EncodeIndefiniteLengthArrayStartEv() local_unnamed_addr #4 {
  ret i8 -97
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZN5crdtp4cbor10EncodeStopEv() local_unnamed_addr #4 {
  ret i8 -1
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor11EncodeInt32EiPNSt3__16vectorIhNS1_9allocatorIhEEEE(i32, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %3 = icmp sgt i32 %0, -1
  %4 = xor i1 %3, true
  %5 = sext i1 %4 to i32
  %6 = xor i32 %5, %0
  %7 = xor i1 %3, true
  %8 = zext i1 %7 to i32
  %9 = sext i32 %6 to i64
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 %8, i64 %9, %"class.std::__1::vector"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor14EncodeString16ENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %4 = shl i64 %1, 1
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 2, i64 %4, %"class.std::__1::vector"* %2)
  %5 = getelementptr inbounds i16, i16* %0, i64 %1
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %14, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast i8** %8 to i64*
  %11 = bitcast %"class.std::__1::vector"* %2 to i64*
  %12 = bitcast i8** %9 to i64*
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  br label %15

14:                                               ; preds = %119, %3
  ret void

15:                                               ; preds = %7, %119
  %16 = phi i16* [ %0, %7 ], [ %120, %119 ]
  %17 = load i16, i16* %16, align 2
  %18 = trunc i16 %17 to i8
  %19 = load i8*, i8** %8, align 8
  %20 = load i8*, i8** %9, align 8
  %21 = icmp ult i8* %19, %20
  %22 = ptrtoint i8* %20 to i64
  br i1 %21, label %23, label %26

23:                                               ; preds = %15
  store i8 %18, i8* %19, align 1
  %24 = getelementptr inbounds i8, i8* %19, i64 1
  %25 = ptrtoint i8* %24 to i64
  store i64 %25, i64* %10, align 8
  br label %68

26:                                               ; preds = %15
  %27 = ptrtoint i8* %19 to i64
  %28 = load i64, i64* %11, align 8
  %29 = sub i64 %27, %28
  %30 = add i64 %29, 1
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %33) #12
  unreachable

34:                                               ; preds = %26
  %35 = sub i64 %22, %28
  %36 = icmp ult i64 %35, 4611686018427387903
  br i1 %36, label %37, label %42

37:                                               ; preds = %34
  %38 = shl i64 %35, 1
  %39 = icmp ult i64 %38, %30
  %40 = select i1 %39, i64 %30, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %37, %34
  %43 = phi i64 [ %40, %37 ], [ 9223372036854775807, %34 ]
  %44 = tail call i8* @_Znwm(i64 %43) #13
  br label %45

45:                                               ; preds = %42, %37
  %46 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %47 = phi i8* [ %44, %42 ], [ null, %37 ]
  %48 = getelementptr inbounds i8, i8* %47, i64 %29
  %49 = getelementptr inbounds i8, i8* %47, i64 %46
  %50 = ptrtoint i8* %49 to i64
  store i8 %18, i8* %48, align 1
  %51 = getelementptr inbounds i8, i8* %48, i64 1
  %52 = ptrtoint i8* %51 to i64
  %53 = load i8*, i8** %13, align 8
  %54 = load i64, i64* %10, align 8
  %55 = ptrtoint i8* %53 to i64
  %56 = sub i64 %54, %55
  %57 = sub i64 0, %56
  %58 = getelementptr inbounds i8, i8* %48, i64 %57
  %59 = ptrtoint i8* %58 to i64
  %60 = icmp sgt i64 %56, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %53, i64 %56, i1 false) #14
  %62 = load i8*, i8** %13, align 8
  br label %63

63:                                               ; preds = %61, %45
  %64 = phi i8* [ %53, %45 ], [ %62, %61 ]
  store i64 %59, i64* %11, align 8
  store i64 %52, i64* %10, align 8
  store i64 %50, i64* %12, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %68, label %66

66:                                               ; preds = %63
  tail call void @_ZdlPv(i8* nonnull %64) #13
  %67 = load i8*, i8** %8, align 8
  br label %68

68:                                               ; preds = %23, %63, %66
  %69 = phi i8* [ %24, %23 ], [ %51, %63 ], [ %67, %66 ]
  %70 = lshr i16 %17, 8
  %71 = trunc i16 %70 to i8
  %72 = load i8*, i8** %9, align 8
  %73 = icmp ult i8* %69, %72
  %74 = ptrtoint i8* %72 to i64
  br i1 %73, label %75, label %78

75:                                               ; preds = %68
  store i8 %71, i8* %69, align 1
  %76 = getelementptr inbounds i8, i8* %69, i64 1
  %77 = ptrtoint i8* %76 to i64
  store i64 %77, i64* %10, align 8
  br label %119

78:                                               ; preds = %68
  %79 = ptrtoint i8* %69 to i64
  %80 = load i64, i64* %11, align 8
  %81 = sub i64 %79, %80
  %82 = add i64 %81, 1
  %83 = icmp slt i64 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %78
  %85 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %85) #12
  unreachable

86:                                               ; preds = %78
  %87 = sub i64 %74, %80
  %88 = icmp ult i64 %87, 4611686018427387903
  br i1 %88, label %89, label %94

89:                                               ; preds = %86
  %90 = shl i64 %87, 1
  %91 = icmp ult i64 %90, %82
  %92 = select i1 %91, i64 %82, i64 %90
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %97, label %94

94:                                               ; preds = %89, %86
  %95 = phi i64 [ %92, %89 ], [ 9223372036854775807, %86 ]
  %96 = tail call i8* @_Znwm(i64 %95) #13
  br label %97

97:                                               ; preds = %94, %89
  %98 = phi i64 [ %95, %94 ], [ 0, %89 ]
  %99 = phi i8* [ %96, %94 ], [ null, %89 ]
  %100 = getelementptr inbounds i8, i8* %99, i64 %81
  %101 = getelementptr inbounds i8, i8* %99, i64 %98
  %102 = ptrtoint i8* %101 to i64
  store i8 %71, i8* %100, align 1
  %103 = getelementptr inbounds i8, i8* %100, i64 1
  %104 = ptrtoint i8* %103 to i64
  %105 = load i8*, i8** %13, align 8
  %106 = load i64, i64* %10, align 8
  %107 = ptrtoint i8* %105 to i64
  %108 = sub i64 %106, %107
  %109 = sub i64 0, %108
  %110 = getelementptr inbounds i8, i8* %100, i64 %109
  %111 = ptrtoint i8* %110 to i64
  %112 = icmp sgt i64 %108, 0
  br i1 %112, label %113, label %115

113:                                              ; preds = %97
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %110, i8* align 1 %105, i64 %108, i1 false) #14
  %114 = load i8*, i8** %13, align 8
  br label %115

115:                                              ; preds = %113, %97
  %116 = phi i8* [ %105, %97 ], [ %114, %113 ]
  store i64 %111, i64* %11, align 8
  store i64 %104, i64* %10, align 8
  store i64 %102, i64* %12, align 8
  %117 = icmp eq i8* %116, null
  br i1 %117, label %119, label %118

118:                                              ; preds = %115
  tail call void @_ZdlPv(i8* nonnull %116) #13
  br label %119

119:                                              ; preds = %75, %115, %118
  %120 = getelementptr inbounds i16, i16* %16, i64 1
  %121 = icmp eq i16* %120, %5
  br i1 %121, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor13EncodeString8ENS_4spanIhEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %1, %"class.std::__1::vector"* %2)
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 %1
  %7 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %2, i8* %5, i8* %0, i8* %6)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"*, i8*, i8*, i8*) local_unnamed_addr #2 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint i8* %3 to i64
  %8 = ptrtoint i8* %2 to i64
  %9 = sub i64 %7, %8
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %414

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  %20 = bitcast i8** %15 to i64*
  br i1 %19, label %164, label %21

21:                                               ; preds = %11
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %37

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = ptrtoint i8* %25 to i64
  %27 = sub i64 %7, %26
  %28 = icmp sgt i64 %27, 0
  br i1 %28, label %29, label %32

29:                                               ; preds = %24
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 %25, i64 %27, i1 false) #14
  %30 = getelementptr inbounds i8, i8* %16, i64 %27
  %31 = ptrtoint i8* %30 to i64
  br label %32

32:                                               ; preds = %29, %24
  %33 = phi i64 [ %31, %29 ], [ %17, %24 ]
  store i64 %33, i64* %20, align 8
  %34 = icmp sgt i64 %22, 0
  br i1 %34, label %35, label %414

35:                                               ; preds = %32
  %36 = inttoptr i64 %33 to i8*
  br label %37

37:                                               ; preds = %35, %21
  %38 = phi i64 [ %33, %35 ], [ %17, %21 ]
  %39 = phi i8* [ %36, %35 ], [ %16, %21 ]
  %40 = phi i8* [ %25, %35 ], [ %3, %21 ]
  %41 = getelementptr inbounds i8, i8* %1, i64 %9
  %42 = ptrtoint i8* %41 to i64
  %43 = sub i64 %38, %42
  %44 = getelementptr inbounds i8, i8* %1, i64 %43
  %45 = icmp ult i8* %44, %16
  br i1 %45, label %46, label %146

46:                                               ; preds = %37
  %47 = sub i64 %9, %38
  %48 = getelementptr i8, i8* %16, i64 %47
  %49 = ptrtoint i8* %48 to i64
  %50 = icmp ult i8* %48, inttoptr (i64 32 to i8*)
  br i1 %50, label %51, label %54

51:                                               ; preds = %141, %54, %46
  %52 = phi i8* [ %44, %54 ], [ %44, %46 ], [ %64, %141 ]
  %53 = phi i8* [ %39, %54 ], [ %39, %46 ], [ %65, %141 ]
  br label %152

54:                                               ; preds = %46
  %55 = sub i64 %9, %38
  %56 = getelementptr i8, i8* %16, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = getelementptr i8, i8* %39, i64 %57
  %59 = icmp ult i8* %39, %16
  %60 = icmp ult i8* %44, %58
  %61 = and i1 %59, %60
  br i1 %61, label %51, label %62

62:                                               ; preds = %54
  %63 = and i64 %49, -32
  %64 = getelementptr i8, i8* %44, i64 %63
  %65 = getelementptr i8, i8* %39, i64 %63
  %66 = add i64 %63, -32
  %67 = lshr exact i64 %66, 5
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 96
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i8, i8* %44, i64 %74
  %77 = getelementptr i8, i8* %39, i64 %74
  %78 = bitcast i8* %76 to <16 x i8>*
  %79 = load <16 x i8>, <16 x i8>* %78, align 1, !alias.scope !2
  %80 = getelementptr i8, i8* %76, i64 16
  %81 = bitcast i8* %80 to <16 x i8>*
  %82 = load <16 x i8>, <16 x i8>* %81, align 1, !alias.scope !2
  %83 = bitcast i8* %77 to <16 x i8>*
  store <16 x i8> %79, <16 x i8>* %83, align 1, !alias.scope !5, !noalias !2
  %84 = getelementptr i8, i8* %77, i64 16
  %85 = bitcast i8* %84 to <16 x i8>*
  store <16 x i8> %82, <16 x i8>* %85, align 1, !alias.scope !5, !noalias !2
  %86 = or i64 %74, 32
  %87 = getelementptr i8, i8* %44, i64 %86
  %88 = getelementptr i8, i8* %39, i64 %86
  %89 = bitcast i8* %87 to <16 x i8>*
  %90 = load <16 x i8>, <16 x i8>* %89, align 1, !alias.scope !2
  %91 = getelementptr i8, i8* %87, i64 16
  %92 = bitcast i8* %91 to <16 x i8>*
  %93 = load <16 x i8>, <16 x i8>* %92, align 1, !alias.scope !2
  %94 = bitcast i8* %88 to <16 x i8>*
  store <16 x i8> %90, <16 x i8>* %94, align 1, !alias.scope !5, !noalias !2
  %95 = getelementptr i8, i8* %88, i64 16
  %96 = bitcast i8* %95 to <16 x i8>*
  store <16 x i8> %93, <16 x i8>* %96, align 1, !alias.scope !5, !noalias !2
  %97 = or i64 %74, 64
  %98 = getelementptr i8, i8* %44, i64 %97
  %99 = getelementptr i8, i8* %39, i64 %97
  %100 = bitcast i8* %98 to <16 x i8>*
  %101 = load <16 x i8>, <16 x i8>* %100, align 1, !alias.scope !2
  %102 = getelementptr i8, i8* %98, i64 16
  %103 = bitcast i8* %102 to <16 x i8>*
  %104 = load <16 x i8>, <16 x i8>* %103, align 1, !alias.scope !2
  %105 = bitcast i8* %99 to <16 x i8>*
  store <16 x i8> %101, <16 x i8>* %105, align 1, !alias.scope !5, !noalias !2
  %106 = getelementptr i8, i8* %99, i64 16
  %107 = bitcast i8* %106 to <16 x i8>*
  store <16 x i8> %104, <16 x i8>* %107, align 1, !alias.scope !5, !noalias !2
  %108 = or i64 %74, 96
  %109 = getelementptr i8, i8* %44, i64 %108
  %110 = getelementptr i8, i8* %39, i64 %108
  %111 = bitcast i8* %109 to <16 x i8>*
  %112 = load <16 x i8>, <16 x i8>* %111, align 1, !alias.scope !2
  %113 = getelementptr i8, i8* %109, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  %115 = load <16 x i8>, <16 x i8>* %114, align 1, !alias.scope !2
  %116 = bitcast i8* %110 to <16 x i8>*
  store <16 x i8> %112, <16 x i8>* %116, align 1, !alias.scope !5, !noalias !2
  %117 = getelementptr i8, i8* %110, i64 16
  %118 = bitcast i8* %117 to <16 x i8>*
  store <16 x i8> %115, <16 x i8>* %118, align 1, !alias.scope !5, !noalias !2
  %119 = add i64 %74, 128
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !7

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i8, i8* %44, i64 %126
  %129 = getelementptr i8, i8* %39, i64 %126
  %130 = bitcast i8* %128 to <16 x i8>*
  %131 = load <16 x i8>, <16 x i8>* %130, align 1, !alias.scope !2
  %132 = getelementptr i8, i8* %128, i64 16
  %133 = bitcast i8* %132 to <16 x i8>*
  %134 = load <16 x i8>, <16 x i8>* %133, align 1, !alias.scope !2
  %135 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %135, align 1, !alias.scope !5, !noalias !2
  %136 = getelementptr i8, i8* %129, i64 16
  %137 = bitcast i8* %136 to <16 x i8>*
  store <16 x i8> %134, <16 x i8>* %137, align 1, !alias.scope !5, !noalias !2
  %138 = add i64 %126, 32
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !9

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %63, %49
  br i1 %142, label %143, label %51

143:                                              ; preds = %152, %141
  %144 = phi i8* [ %65, %141 ], [ %157, %152 ]
  %145 = ptrtoint i8* %144 to i64
  br label %146

146:                                              ; preds = %143, %37
  %147 = phi i64 [ %145, %143 ], [ %38, %37 ]
  store i64 %147, i64* %20, align 8
  %148 = icmp eq i64 %43, 0
  br i1 %148, label %159, label %149

149:                                              ; preds = %146
  %150 = sub i64 0, %43
  %151 = getelementptr inbounds i8, i8* %39, i64 %150
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 %1, i64 %43, i1 false) #14
  br label %159

152:                                              ; preds = %51, %152
  %153 = phi i8* [ %156, %152 ], [ %52, %51 ]
  %154 = phi i8* [ %157, %152 ], [ %53, %51 ]
  %155 = load i8, i8* %153, align 1
  store i8 %155, i8* %154, align 1
  %156 = getelementptr inbounds i8, i8* %153, i64 1
  %157 = getelementptr inbounds i8, i8* %154, i64 1
  %158 = icmp eq i8* %156, %16
  br i1 %158, label %143, label %152, !llvm.loop !11

159:                                              ; preds = %146, %149
  %160 = ptrtoint i8* %40 to i64
  %161 = sub i64 %160, %8
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %414, label %163

163:                                              ; preds = %159
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %161, i1 false) #14
  br label %414

164:                                              ; preds = %11
  %165 = bitcast %"class.std::__1::vector"* %0 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = sub i64 %17, %166
  %168 = add i64 %167, %9
  %169 = icmp slt i64 %168, 0
  br i1 %169, label %170, label %172

170:                                              ; preds = %164
  %171 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %171) #12
  unreachable

172:                                              ; preds = %164
  %173 = sub i64 %14, %166
  %174 = icmp ult i64 %173, 4611686018427387903
  br i1 %174, label %177, label %175

175:                                              ; preds = %172
  %176 = sub i64 %5, %166
  br label %183

177:                                              ; preds = %172
  %178 = shl i64 %173, 1
  %179 = icmp ult i64 %178, %168
  %180 = select i1 %179, i64 %168, i64 %178
  %181 = sub i64 %5, %166
  %182 = icmp eq i64 %180, 0
  br i1 %182, label %187, label %183

183:                                              ; preds = %175, %177
  %184 = phi i64 [ %176, %175 ], [ %181, %177 ]
  %185 = phi i64 [ 9223372036854775807, %175 ], [ %180, %177 ]
  %186 = tail call i8* @_Znwm(i64 %185) #13
  br label %187

187:                                              ; preds = %177, %183
  %188 = phi i64 [ %184, %183 ], [ %181, %177 ]
  %189 = phi i64 [ %185, %183 ], [ 0, %177 ]
  %190 = phi i8* [ %186, %183 ], [ null, %177 ]
  %191 = getelementptr inbounds i8, i8* %190, i64 %188
  %192 = getelementptr inbounds i8, i8* %190, i64 %189
  %193 = getelementptr inbounds i8, i8* %191, i64 %9
  %194 = icmp ult i64 %9, 32
  br i1 %194, label %280, label %195

195:                                              ; preds = %187
  %196 = icmp ult i8* %191, %3
  %197 = icmp ugt i8* %193, %2
  %198 = and i1 %196, %197
  br i1 %198, label %280, label %199

199:                                              ; preds = %195
  %200 = and i64 %9, -32
  %201 = getelementptr i8, i8* %191, i64 %200
  %202 = getelementptr i8, i8* %2, i64 %200
  %203 = add i64 %200, -32
  %204 = lshr exact i64 %203, 5
  %205 = add nuw nsw i64 %204, 1
  %206 = and i64 %205, 3
  %207 = icmp ult i64 %203, 96
  br i1 %207, label %259, label %208

208:                                              ; preds = %199
  %209 = sub nsw i64 %205, %206
  br label %210

210:                                              ; preds = %210, %208
  %211 = phi i64 [ 0, %208 ], [ %256, %210 ]
  %212 = phi i64 [ %209, %208 ], [ %257, %210 ]
  %213 = getelementptr i8, i8* %191, i64 %211
  %214 = getelementptr i8, i8* %2, i64 %211
  %215 = bitcast i8* %214 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !12
  %217 = getelementptr i8, i8* %214, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !12
  %220 = bitcast i8* %213 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !15, !noalias !12
  %221 = getelementptr i8, i8* %213, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !15, !noalias !12
  %223 = or i64 %211, 32
  %224 = getelementptr i8, i8* %191, i64 %223
  %225 = getelementptr i8, i8* %2, i64 %223
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1, !alias.scope !12
  %228 = getelementptr i8, i8* %225, i64 16
  %229 = bitcast i8* %228 to <16 x i8>*
  %230 = load <16 x i8>, <16 x i8>* %229, align 1, !alias.scope !12
  %231 = bitcast i8* %224 to <16 x i8>*
  store <16 x i8> %227, <16 x i8>* %231, align 1, !alias.scope !15, !noalias !12
  %232 = getelementptr i8, i8* %224, i64 16
  %233 = bitcast i8* %232 to <16 x i8>*
  store <16 x i8> %230, <16 x i8>* %233, align 1, !alias.scope !15, !noalias !12
  %234 = or i64 %211, 64
  %235 = getelementptr i8, i8* %191, i64 %234
  %236 = getelementptr i8, i8* %2, i64 %234
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !12
  %239 = getelementptr i8, i8* %236, i64 16
  %240 = bitcast i8* %239 to <16 x i8>*
  %241 = load <16 x i8>, <16 x i8>* %240, align 1, !alias.scope !12
  %242 = bitcast i8* %235 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %242, align 1, !alias.scope !15, !noalias !12
  %243 = getelementptr i8, i8* %235, i64 16
  %244 = bitcast i8* %243 to <16 x i8>*
  store <16 x i8> %241, <16 x i8>* %244, align 1, !alias.scope !15, !noalias !12
  %245 = or i64 %211, 96
  %246 = getelementptr i8, i8* %191, i64 %245
  %247 = getelementptr i8, i8* %2, i64 %245
  %248 = bitcast i8* %247 to <16 x i8>*
  %249 = load <16 x i8>, <16 x i8>* %248, align 1, !alias.scope !12
  %250 = getelementptr i8, i8* %247, i64 16
  %251 = bitcast i8* %250 to <16 x i8>*
  %252 = load <16 x i8>, <16 x i8>* %251, align 1, !alias.scope !12
  %253 = bitcast i8* %246 to <16 x i8>*
  store <16 x i8> %249, <16 x i8>* %253, align 1, !alias.scope !15, !noalias !12
  %254 = getelementptr i8, i8* %246, i64 16
  %255 = bitcast i8* %254 to <16 x i8>*
  store <16 x i8> %252, <16 x i8>* %255, align 1, !alias.scope !15, !noalias !12
  %256 = add i64 %211, 128
  %257 = add i64 %212, -4
  %258 = icmp eq i64 %257, 0
  br i1 %258, label %259, label %210, !llvm.loop !17

259:                                              ; preds = %210, %199
  %260 = phi i64 [ 0, %199 ], [ %256, %210 ]
  %261 = icmp eq i64 %206, 0
  br i1 %261, label %278, label %262

262:                                              ; preds = %259, %262
  %263 = phi i64 [ %275, %262 ], [ %260, %259 ]
  %264 = phi i64 [ %276, %262 ], [ %206, %259 ]
  %265 = getelementptr i8, i8* %191, i64 %263
  %266 = getelementptr i8, i8* %2, i64 %263
  %267 = bitcast i8* %266 to <16 x i8>*
  %268 = load <16 x i8>, <16 x i8>* %267, align 1, !alias.scope !12
  %269 = getelementptr i8, i8* %266, i64 16
  %270 = bitcast i8* %269 to <16 x i8>*
  %271 = load <16 x i8>, <16 x i8>* %270, align 1, !alias.scope !12
  %272 = bitcast i8* %265 to <16 x i8>*
  store <16 x i8> %268, <16 x i8>* %272, align 1, !alias.scope !15, !noalias !12
  %273 = getelementptr i8, i8* %265, i64 16
  %274 = bitcast i8* %273 to <16 x i8>*
  store <16 x i8> %271, <16 x i8>* %274, align 1, !alias.scope !15, !noalias !12
  %275 = add i64 %263, 32
  %276 = add i64 %264, -1
  %277 = icmp eq i64 %276, 0
  br i1 %277, label %278, label %262, !llvm.loop !18

278:                                              ; preds = %262, %259
  %279 = icmp eq i64 %9, %200
  br i1 %279, label %290, label %280

280:                                              ; preds = %278, %195, %187
  %281 = phi i8* [ %191, %195 ], [ %191, %187 ], [ %201, %278 ]
  %282 = phi i8* [ %2, %195 ], [ %2, %187 ], [ %202, %278 ]
  br label %283

283:                                              ; preds = %280, %283
  %284 = phi i8* [ %287, %283 ], [ %281, %280 ]
  %285 = phi i8* [ %288, %283 ], [ %282, %280 ]
  %286 = load i8, i8* %285, align 1
  store i8 %286, i8* %284, align 1
  %287 = getelementptr inbounds i8, i8* %284, i64 1
  %288 = getelementptr inbounds i8, i8* %285, i64 1
  %289 = icmp eq i8* %193, %287
  br i1 %289, label %290, label %283, !llvm.loop !19

290:                                              ; preds = %283, %278
  %291 = ptrtoint i8* %192 to i64
  %292 = load i8*, i8** %6, align 8
  %293 = ptrtoint i8* %292 to i64
  %294 = sub i64 %5, %293
  %295 = sub i64 0, %294
  %296 = getelementptr inbounds i8, i8* %191, i64 %295
  %297 = ptrtoint i8* %296 to i64
  %298 = icmp sgt i64 %294, 0
  br i1 %298, label %299, label %300

299:                                              ; preds = %290
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %296, i8* align 1 %292, i64 %294, i1 false) #14
  br label %300

300:                                              ; preds = %299, %290
  %301 = load i8*, i8** %15, align 8
  %302 = icmp eq i8* %301, %1
  br i1 %302, label %408, label %303

303:                                              ; preds = %300
  %304 = ptrtoint i8* %301 to i64
  %305 = sub i64 %304, %5
  %306 = icmp ult i64 %305, 32
  br i1 %306, label %398, label %307

307:                                              ; preds = %303
  %308 = add i64 %188, %7
  %309 = sub i64 %308, %5
  %310 = sub i64 %309, %8
  %311 = getelementptr i8, i8* %301, i64 %310
  %312 = ptrtoint i8* %311 to i64
  %313 = getelementptr i8, i8* %190, i64 %312
  %314 = icmp ult i8* %193, %301
  %315 = icmp ugt i8* %313, %1
  %316 = and i1 %314, %315
  br i1 %316, label %398, label %317

317:                                              ; preds = %307
  %318 = and i64 %305, -32
  %319 = getelementptr i8, i8* %193, i64 %318
  %320 = getelementptr i8, i8* %1, i64 %318
  %321 = add i64 %318, -32
  %322 = lshr exact i64 %321, 5
  %323 = add nuw nsw i64 %322, 1
  %324 = and i64 %323, 3
  %325 = icmp ult i64 %321, 96
  br i1 %325, label %377, label %326

326:                                              ; preds = %317
  %327 = sub nsw i64 %323, %324
  br label %328

328:                                              ; preds = %328, %326
  %329 = phi i64 [ 0, %326 ], [ %374, %328 ]
  %330 = phi i64 [ %327, %326 ], [ %375, %328 ]
  %331 = getelementptr i8, i8* %193, i64 %329
  %332 = getelementptr i8, i8* %1, i64 %329
  %333 = bitcast i8* %332 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !20
  %335 = getelementptr i8, i8* %332, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !20
  %338 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %334, <16 x i8>* %338, align 1, !alias.scope !23, !noalias !20
  %339 = getelementptr i8, i8* %331, i64 16
  %340 = bitcast i8* %339 to <16 x i8>*
  store <16 x i8> %337, <16 x i8>* %340, align 1, !alias.scope !23, !noalias !20
  %341 = or i64 %329, 32
  %342 = getelementptr i8, i8* %193, i64 %341
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !20
  %346 = getelementptr i8, i8* %343, i64 16
  %347 = bitcast i8* %346 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !20
  %349 = bitcast i8* %342 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !alias.scope !23, !noalias !20
  %350 = getelementptr i8, i8* %342, i64 16
  %351 = bitcast i8* %350 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %351, align 1, !alias.scope !23, !noalias !20
  %352 = or i64 %329, 64
  %353 = getelementptr i8, i8* %193, i64 %352
  %354 = getelementptr i8, i8* %1, i64 %352
  %355 = bitcast i8* %354 to <16 x i8>*
  %356 = load <16 x i8>, <16 x i8>* %355, align 1, !alias.scope !20
  %357 = getelementptr i8, i8* %354, i64 16
  %358 = bitcast i8* %357 to <16 x i8>*
  %359 = load <16 x i8>, <16 x i8>* %358, align 1, !alias.scope !20
  %360 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %356, <16 x i8>* %360, align 1, !alias.scope !23, !noalias !20
  %361 = getelementptr i8, i8* %353, i64 16
  %362 = bitcast i8* %361 to <16 x i8>*
  store <16 x i8> %359, <16 x i8>* %362, align 1, !alias.scope !23, !noalias !20
  %363 = or i64 %329, 96
  %364 = getelementptr i8, i8* %193, i64 %363
  %365 = getelementptr i8, i8* %1, i64 %363
  %366 = bitcast i8* %365 to <16 x i8>*
  %367 = load <16 x i8>, <16 x i8>* %366, align 1, !alias.scope !20
  %368 = getelementptr i8, i8* %365, i64 16
  %369 = bitcast i8* %368 to <16 x i8>*
  %370 = load <16 x i8>, <16 x i8>* %369, align 1, !alias.scope !20
  %371 = bitcast i8* %364 to <16 x i8>*
  store <16 x i8> %367, <16 x i8>* %371, align 1, !alias.scope !23, !noalias !20
  %372 = getelementptr i8, i8* %364, i64 16
  %373 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %370, <16 x i8>* %373, align 1, !alias.scope !23, !noalias !20
  %374 = add i64 %329, 128
  %375 = add i64 %330, -4
  %376 = icmp eq i64 %375, 0
  br i1 %376, label %377, label %328, !llvm.loop !25

377:                                              ; preds = %328, %317
  %378 = phi i64 [ 0, %317 ], [ %374, %328 ]
  %379 = icmp eq i64 %324, 0
  br i1 %379, label %396, label %380

380:                                              ; preds = %377, %380
  %381 = phi i64 [ %393, %380 ], [ %378, %377 ]
  %382 = phi i64 [ %394, %380 ], [ %324, %377 ]
  %383 = getelementptr i8, i8* %193, i64 %381
  %384 = getelementptr i8, i8* %1, i64 %381
  %385 = bitcast i8* %384 to <16 x i8>*
  %386 = load <16 x i8>, <16 x i8>* %385, align 1, !alias.scope !20
  %387 = getelementptr i8, i8* %384, i64 16
  %388 = bitcast i8* %387 to <16 x i8>*
  %389 = load <16 x i8>, <16 x i8>* %388, align 1, !alias.scope !20
  %390 = bitcast i8* %383 to <16 x i8>*
  store <16 x i8> %386, <16 x i8>* %390, align 1, !alias.scope !23, !noalias !20
  %391 = getelementptr i8, i8* %383, i64 16
  %392 = bitcast i8* %391 to <16 x i8>*
  store <16 x i8> %389, <16 x i8>* %392, align 1, !alias.scope !23, !noalias !20
  %393 = add i64 %381, 32
  %394 = add i64 %382, -1
  %395 = icmp eq i64 %394, 0
  br i1 %395, label %396, label %380, !llvm.loop !26

396:                                              ; preds = %380, %377
  %397 = icmp eq i64 %305, %318
  br i1 %397, label %408, label %398

398:                                              ; preds = %396, %307, %303
  %399 = phi i8* [ %193, %307 ], [ %193, %303 ], [ %319, %396 ]
  %400 = phi i8* [ %1, %307 ], [ %1, %303 ], [ %320, %396 ]
  br label %401

401:                                              ; preds = %398, %401
  %402 = phi i8* [ %406, %401 ], [ %399, %398 ]
  %403 = phi i8* [ %405, %401 ], [ %400, %398 ]
  %404 = load i8, i8* %403, align 1
  store i8 %404, i8* %402, align 1
  %405 = getelementptr inbounds i8, i8* %403, i64 1
  %406 = getelementptr inbounds i8, i8* %402, i64 1
  %407 = icmp eq i8* %405, %301
  br i1 %407, label %408, label %401, !llvm.loop !27

408:                                              ; preds = %401, %396, %300
  %409 = phi i8* [ %193, %300 ], [ %319, %396 ], [ %406, %401 ]
  %410 = ptrtoint i8* %409 to i64
  %411 = load i8*, i8** %6, align 8
  store i64 %297, i64* %165, align 8
  store i64 %410, i64* %20, align 8
  store i64 %291, i64* %13, align 8
  %412 = icmp eq i8* %411, null
  br i1 %412, label %414, label %413

413:                                              ; preds = %408
  tail call void @_ZdlPv(i8* nonnull %411) #13
  br label %414

414:                                              ; preds = %413, %408, %32, %159, %163, %4
  %415 = phi i8* [ %1, %4 ], [ %1, %163 ], [ %1, %159 ], [ %1, %32 ], [ %191, %408 ], [ %191, %413 ]
  ret i8* %415
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor16EncodeFromLatin1ENS_4spanIhEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %4 = alloca %"class.std::__1::vector", align 8
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %206, label %6

6:                                                ; preds = %3, %203
  %7 = phi i64 [ %204, %203 ], [ 0, %3 ]
  %8 = getelementptr inbounds i8, i8* %0, i64 %7
  %9 = load i8, i8* %8, align 1
  %10 = icmp sgt i8 %9, -1
  br i1 %10, label %203, label %11

11:                                               ; preds = %6
  %12 = bitcast %"class.std::__1::vector"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #14
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 0, i64 24, i1 false) #14
  %16 = icmp eq i64 %7, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %11
  %18 = icmp slt i64 %7, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %17
  %20 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %20) #12
  unreachable

21:                                               ; preds = %17
  %22 = tail call i8* @_Znwm(i64 %7) #13
  store i8* %22, i8** %13, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 %7
  store i8* %23, i8** %15, align 8
  %24 = bitcast i8** %14 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %22, i8* align 1 %0, i64 %7, i1 false) #14
  %25 = ptrtoint i8* %23 to i64
  store i64 %25, i64* %24, align 8
  br label %26

26:                                               ; preds = %11, %21
  %27 = phi i8* [ null, %11 ], [ %22, %21 ]
  %28 = phi i8* [ null, %11 ], [ %23, %21 ]
  %29 = phi i64 [ 0, %11 ], [ %25, %21 ]
  %30 = icmp ult i64 %7, %1
  %31 = bitcast i8** %14 to i64*
  br i1 %30, label %32, label %191

32:                                               ; preds = %26
  %33 = bitcast %"class.std::__1::vector"* %4 to i64*
  %34 = bitcast i8** %15 to i64*
  br label %35

35:                                               ; preds = %186, %32
  %36 = phi i8* [ %28, %32 ], [ %182, %186 ]
  %37 = phi i64 [ %29, %32 ], [ %183, %186 ]
  %38 = phi i8 [ %9, %32 ], [ %188, %186 ]
  %39 = phi i64 [ %7, %32 ], [ %184, %186 ]
  %40 = getelementptr inbounds i8, i8* %0, i64 %39
  %41 = icmp sgt i8 %38, -1
  br i1 %41, label %42, label %84

42:                                               ; preds = %35
  %43 = load i8*, i8** %15, align 8
  %44 = icmp eq i8* %36, %43
  br i1 %44, label %48, label %45

45:                                               ; preds = %42
  store i8 %38, i8* %36, align 1
  %46 = getelementptr inbounds i8, i8* %36, i64 1
  %47 = ptrtoint i8* %46 to i64
  store i64 %47, i64* %31, align 8
  br label %181

48:                                               ; preds = %42
  %49 = ptrtoint i8* %43 to i64
  %50 = load i64, i64* %33, align 8
  %51 = sub i64 %49, %50
  %52 = add i64 %51, 1
  %53 = icmp slt i64 %52, 0
  %54 = inttoptr i64 %50 to i8*
  br i1 %53, label %55, label %57

55:                                               ; preds = %48
  %56 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %56) #12
  unreachable

57:                                               ; preds = %48
  %58 = icmp ult i64 %51, 4611686018427387903
  br i1 %58, label %59, label %64

59:                                               ; preds = %57
  %60 = shl i64 %51, 1
  %61 = icmp ult i64 %60, %52
  %62 = select i1 %61, i64 %52, i64 %60
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %67, label %64

64:                                               ; preds = %59, %57
  %65 = phi i64 [ %62, %59 ], [ 9223372036854775807, %57 ]
  %66 = tail call i8* @_Znwm(i64 %65) #13
  br label %67

67:                                               ; preds = %64, %59
  %68 = phi i64 [ %65, %64 ], [ 0, %59 ]
  %69 = phi i8* [ %66, %64 ], [ null, %59 ]
  %70 = getelementptr inbounds i8, i8* %69, i64 %51
  %71 = getelementptr inbounds i8, i8* %69, i64 %68
  %72 = ptrtoint i8* %71 to i64
  store i8 %38, i8* %70, align 1
  %73 = getelementptr inbounds i8, i8* %70, i64 1
  %74 = ptrtoint i8* %73 to i64
  %75 = sub i64 %37, %50
  %76 = sub i64 0, %75
  %77 = getelementptr inbounds i8, i8* %70, i64 %76
  %78 = ptrtoint i8* %77 to i64
  %79 = icmp sgt i64 %75, 0
  br i1 %79, label %80, label %81

80:                                               ; preds = %67
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %77, i8* align 1 %54, i64 %75, i1 false) #14
  br label %81

81:                                               ; preds = %80, %67
  store i64 %78, i64* %33, align 8
  store i64 %74, i64* %31, align 8
  store i64 %72, i64* %34, align 8
  %82 = icmp eq i64 %50, 0
  br i1 %82, label %181, label %83

83:                                               ; preds = %81
  tail call void @_ZdlPv(i8* nonnull %54) #13
  br label %181

84:                                               ; preds = %35
  %85 = lshr i8 %38, 6
  %86 = or i8 %85, -64
  %87 = load i8*, i8** %15, align 8
  %88 = icmp ult i8* %36, %87
  %89 = ptrtoint i8* %87 to i64
  br i1 %88, label %90, label %95

90:                                               ; preds = %84
  store i8 %86, i8* %36, align 1
  %91 = getelementptr inbounds i8, i8* %36, i64 1
  %92 = ptrtoint i8* %91 to i64
  store i64 %92, i64* %31, align 8
  %93 = load i8*, i8** %15, align 8
  %94 = ptrtoint i8* %93 to i64
  br label %132

95:                                               ; preds = %84
  %96 = ptrtoint i8* %36 to i64
  %97 = load i64, i64* %33, align 8
  %98 = sub i64 %96, %97
  %99 = add i64 %98, 1
  %100 = icmp slt i64 %99, 0
  %101 = inttoptr i64 %97 to i8*
  br i1 %100, label %102, label %104

102:                                              ; preds = %95
  %103 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %103) #12
  unreachable

104:                                              ; preds = %95
  %105 = sub i64 %89, %97
  %106 = icmp ult i64 %105, 4611686018427387903
  br i1 %106, label %107, label %112

107:                                              ; preds = %104
  %108 = shl i64 %105, 1
  %109 = icmp ult i64 %108, %99
  %110 = select i1 %109, i64 %99, i64 %108
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %115, label %112

112:                                              ; preds = %107, %104
  %113 = phi i64 [ %110, %107 ], [ 9223372036854775807, %104 ]
  %114 = tail call i8* @_Znwm(i64 %113) #13
  br label %115

115:                                              ; preds = %112, %107
  %116 = phi i64 [ %113, %112 ], [ 0, %107 ]
  %117 = phi i8* [ %114, %112 ], [ null, %107 ]
  %118 = getelementptr inbounds i8, i8* %117, i64 %98
  %119 = getelementptr inbounds i8, i8* %117, i64 %116
  %120 = ptrtoint i8* %119 to i64
  store i8 %86, i8* %118, align 1
  %121 = getelementptr inbounds i8, i8* %118, i64 1
  %122 = ptrtoint i8* %121 to i64
  %123 = sub i64 %37, %97
  %124 = sub i64 0, %123
  %125 = getelementptr inbounds i8, i8* %118, i64 %124
  %126 = ptrtoint i8* %125 to i64
  %127 = icmp sgt i64 %123, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %115
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %101, i64 %123, i1 false) #14
  br label %129

129:                                              ; preds = %128, %115
  store i64 %126, i64* %33, align 8
  store i64 %122, i64* %31, align 8
  store i64 %120, i64* %34, align 8
  %130 = icmp eq i64 %97, 0
  br i1 %130, label %132, label %131

131:                                              ; preds = %129
  tail call void @_ZdlPv(i8* nonnull %101) #13
  br label %132

132:                                              ; preds = %90, %129, %131
  %133 = phi i64 [ %94, %90 ], [ %120, %129 ], [ %120, %131 ]
  %134 = phi i64 [ %92, %90 ], [ %122, %129 ], [ %122, %131 ]
  %135 = phi i8* [ %93, %90 ], [ %119, %129 ], [ %119, %131 ]
  %136 = phi i8* [ %91, %90 ], [ %121, %129 ], [ %121, %131 ]
  %137 = load i8, i8* %40, align 1
  %138 = and i8 %137, 63
  %139 = or i8 %138, -128
  %140 = icmp ult i8* %136, %135
  br i1 %140, label %141, label %144

141:                                              ; preds = %132
  store i8 %139, i8* %136, align 1
  %142 = getelementptr inbounds i8, i8* %136, i64 1
  %143 = ptrtoint i8* %142 to i64
  store i64 %143, i64* %31, align 8
  br label %181

144:                                              ; preds = %132
  %145 = ptrtoint i8* %136 to i64
  %146 = load i64, i64* %33, align 8
  %147 = sub i64 %145, %146
  %148 = add i64 %147, 1
  %149 = icmp slt i64 %148, 0
  %150 = inttoptr i64 %146 to i8*
  br i1 %149, label %151, label %153

151:                                              ; preds = %144
  %152 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %152) #12
  unreachable

153:                                              ; preds = %144
  %154 = sub i64 %133, %146
  %155 = icmp ult i64 %154, 4611686018427387903
  br i1 %155, label %156, label %161

156:                                              ; preds = %153
  %157 = shl i64 %154, 1
  %158 = icmp ult i64 %157, %148
  %159 = select i1 %158, i64 %148, i64 %157
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %164, label %161

161:                                              ; preds = %156, %153
  %162 = phi i64 [ %159, %156 ], [ 9223372036854775807, %153 ]
  %163 = tail call i8* @_Znwm(i64 %162) #13
  br label %164

164:                                              ; preds = %161, %156
  %165 = phi i64 [ %162, %161 ], [ 0, %156 ]
  %166 = phi i8* [ %163, %161 ], [ null, %156 ]
  %167 = getelementptr inbounds i8, i8* %166, i64 %147
  %168 = getelementptr inbounds i8, i8* %166, i64 %165
  %169 = ptrtoint i8* %168 to i64
  store i8 %139, i8* %167, align 1
  %170 = getelementptr inbounds i8, i8* %167, i64 1
  %171 = ptrtoint i8* %170 to i64
  %172 = sub i64 %134, %146
  %173 = sub i64 0, %172
  %174 = getelementptr inbounds i8, i8* %167, i64 %173
  %175 = ptrtoint i8* %174 to i64
  %176 = icmp sgt i64 %172, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %164
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %150, i64 %172, i1 false) #14
  br label %178

178:                                              ; preds = %177, %164
  store i64 %175, i64* %33, align 8
  store i64 %171, i64* %31, align 8
  store i64 %169, i64* %34, align 8
  %179 = icmp eq i64 %146, 0
  br i1 %179, label %181, label %180

180:                                              ; preds = %178
  tail call void @_ZdlPv(i8* nonnull %150) #13
  br label %181

181:                                              ; preds = %180, %178, %141, %83, %81, %45
  %182 = phi i8* [ %170, %180 ], [ %170, %178 ], [ %142, %141 ], [ %73, %83 ], [ %73, %81 ], [ %46, %45 ]
  %183 = phi i64 [ %171, %180 ], [ %171, %178 ], [ %143, %141 ], [ %74, %83 ], [ %74, %81 ], [ %47, %45 ]
  %184 = add i64 %39, 1
  %185 = icmp eq i64 %184, %1
  br i1 %185, label %189, label %186

186:                                              ; preds = %181
  %187 = getelementptr inbounds i8, i8* %0, i64 %184
  %188 = load i8, i8* %187, align 1
  br label %35

189:                                              ; preds = %181
  %190 = load i8*, i8** %13, align 8
  br label %191

191:                                              ; preds = %26, %189
  %192 = phi i64 [ %183, %189 ], [ %29, %26 ]
  %193 = phi i8* [ %190, %189 ], [ %27, %26 ]
  %194 = ptrtoint i8* %193 to i64
  %195 = sub i64 %192, %194
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %195, %"class.std::__1::vector"* %2) #14
  %196 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %197 = load i8*, i8** %196, align 8
  %198 = getelementptr inbounds i8, i8* %193, i64 %195
  %199 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %2, i8* %197, i8* %193, i8* %198) #14
  %200 = icmp eq i8* %193, null
  br i1 %200, label %202, label %201

201:                                              ; preds = %191
  store i64 %194, i64* %31, align 8
  tail call void @_ZdlPv(i8* nonnull %193) #13
  br label %202

202:                                              ; preds = %191, %201
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #14
  br label %211

203:                                              ; preds = %6
  %204 = add nuw i64 %7, 1
  %205 = icmp eq i64 %204, %1
  br i1 %205, label %206, label %6

206:                                              ; preds = %203, %3
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %1, %"class.std::__1::vector"* %2) #14
  %207 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds i8, i8* %0, i64 %1
  %210 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %2, i8* %208, i8* %0, i8* %209) #14
  br label %211

211:                                              ; preds = %202, %206
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor15EncodeFromUTF16ENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %4 = getelementptr inbounds i16, i16* %0, i64 %1
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %14, label %8

6:                                                ; preds = %8
  %7 = icmp eq i16* %12, %4
  br i1 %7, label %14, label %8

8:                                                ; preds = %3, %6
  %9 = phi i16* [ %12, %6 ], [ %0, %3 ]
  %10 = load i16, i16* %9, align 2
  %11 = icmp ult i16 %10, 128
  %12 = getelementptr inbounds i16, i16* %9, i64 1
  br i1 %11, label %6, label %13

13:                                               ; preds = %8
  tail call void @_ZN5crdtp4cbor14EncodeString16ENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16* %0, i64 %1, %"class.std::__1::vector"* %2)
  br label %18

14:                                               ; preds = %6, %3
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %1, %"class.std::__1::vector"* %2)
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %2, i8* %16, i16* %0, i16* %4)
  br label %18

18:                                               ; preds = %13, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"*, i8*, i16*, i16*) local_unnamed_addr #2 comdat align 2 {
  %5 = bitcast i16* %2 to i8*
  %6 = ptrtoint i8* %1 to i64
  %7 = ptrtoint i16* %2 to i64
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %9 = ptrtoint i16* %3 to i64
  %10 = sub i64 %9, %7
  %11 = ashr exact i64 %10, 1
  %12 = icmp sgt i64 %10, 0
  br i1 %12, label %13, label %680

13:                                               ; preds = %4
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = bitcast i8** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = ptrtoint i8* %18 to i64
  %20 = sub i64 %16, %19
  %21 = icmp sgt i64 %11, %20
  %22 = bitcast i8** %17 to i64*
  br i1 %21, label %450, label %23

23:                                               ; preds = %13
  %24 = sub i64 %19, %6
  %25 = icmp sgt i64 %11, %24
  br i1 %25, label %26, label %186

26:                                               ; preds = %23
  %27 = getelementptr inbounds i16, i16* %2, i64 %24
  %28 = bitcast i16* %27 to i8*
  %29 = icmp eq i16* %27, %3
  br i1 %29, label %181, label %30

30:                                               ; preds = %26
  %31 = xor i64 %19, -1
  %32 = add i64 %31, %6
  %33 = getelementptr i16, i16* %3, i64 %32
  %34 = ptrtoint i16* %33 to i64
  %35 = sub i64 %34, %7
  %36 = lshr i64 %35, 1
  %37 = add nuw i64 %36, 1
  %38 = icmp ult i64 %37, 16
  br i1 %38, label %116, label %39

39:                                               ; preds = %30
  %40 = xor i64 %19, -1
  %41 = add i64 %40, %6
  %42 = getelementptr i16, i16* %3, i64 %41
  %43 = ptrtoint i16* %42 to i64
  %44 = sub i64 %43, %7
  %45 = lshr i64 %44, 1
  %46 = add nuw i64 %45, 1
  %47 = getelementptr i8, i8* %18, i64 %46
  %48 = add i64 %45, %19
  %49 = add i64 %48, 1
  %50 = sub i64 %49, %6
  %51 = getelementptr i16, i16* %2, i64 %50
  %52 = bitcast i16* %51 to i8*
  %53 = icmp ult i8* %18, %52
  %54 = icmp ugt i8* %47, %28
  %55 = and i1 %53, %54
  br i1 %55, label %116, label %56

56:                                               ; preds = %39
  %57 = and i64 %37, -16
  %58 = getelementptr i8, i8* %18, i64 %57
  %59 = getelementptr i16, i16* %27, i64 %57
  %60 = add i64 %57, -16
  %61 = lshr exact i64 %60, 4
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %98, label %65

65:                                               ; preds = %56
  %66 = sub nuw nsw i64 %62, %63
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %95, %67 ]
  %69 = phi i64 [ %66, %65 ], [ %96, %67 ]
  %70 = getelementptr i8, i8* %18, i64 %68
  %71 = getelementptr i16, i16* %27, i64 %68
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !alias.scope !28
  %74 = getelementptr i16, i16* %71, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  %76 = load <8 x i16>, <8 x i16>* %75, align 2, !alias.scope !28
  %77 = trunc <8 x i16> %73 to <8 x i8>
  %78 = trunc <8 x i16> %76 to <8 x i8>
  %79 = bitcast i8* %70 to <8 x i8>*
  store <8 x i8> %77, <8 x i8>* %79, align 1, !alias.scope !31, !noalias !28
  %80 = getelementptr i8, i8* %70, i64 8
  %81 = bitcast i8* %80 to <8 x i8>*
  store <8 x i8> %78, <8 x i8>* %81, align 1, !alias.scope !31, !noalias !28
  %82 = or i64 %68, 16
  %83 = getelementptr i8, i8* %18, i64 %82
  %84 = getelementptr i16, i16* %27, i64 %82
  %85 = bitcast i16* %84 to <8 x i16>*
  %86 = load <8 x i16>, <8 x i16>* %85, align 2, !alias.scope !28
  %87 = getelementptr i16, i16* %84, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !28
  %90 = trunc <8 x i16> %86 to <8 x i8>
  %91 = trunc <8 x i16> %89 to <8 x i8>
  %92 = bitcast i8* %83 to <8 x i8>*
  store <8 x i8> %90, <8 x i8>* %92, align 1, !alias.scope !31, !noalias !28
  %93 = getelementptr i8, i8* %83, i64 8
  %94 = bitcast i8* %93 to <8 x i8>*
  store <8 x i8> %91, <8 x i8>* %94, align 1, !alias.scope !31, !noalias !28
  %95 = add i64 %68, 32
  %96 = add i64 %69, -2
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %67, !llvm.loop !33

98:                                               ; preds = %67, %56
  %99 = phi i64 [ 0, %56 ], [ %95, %67 ]
  %100 = icmp eq i64 %63, 0
  br i1 %100, label %114, label %101

101:                                              ; preds = %98
  %102 = getelementptr i8, i8* %18, i64 %99
  %103 = getelementptr i16, i16* %27, i64 %99
  %104 = bitcast i16* %103 to <8 x i16>*
  %105 = load <8 x i16>, <8 x i16>* %104, align 2, !alias.scope !28
  %106 = getelementptr i16, i16* %103, i64 8
  %107 = bitcast i16* %106 to <8 x i16>*
  %108 = load <8 x i16>, <8 x i16>* %107, align 2, !alias.scope !28
  %109 = trunc <8 x i16> %105 to <8 x i8>
  %110 = trunc <8 x i16> %108 to <8 x i8>
  %111 = bitcast i8* %102 to <8 x i8>*
  store <8 x i8> %109, <8 x i8>* %111, align 1, !alias.scope !31, !noalias !28
  %112 = getelementptr i8, i8* %102, i64 8
  %113 = bitcast i8* %112 to <8 x i8>*
  store <8 x i8> %110, <8 x i8>* %113, align 1, !alias.scope !31, !noalias !28
  br label %114

114:                                              ; preds = %98, %101
  %115 = icmp eq i64 %37, %57
  br i1 %115, label %178, label %116

116:                                              ; preds = %114, %39, %30
  %117 = phi i8* [ %18, %39 ], [ %18, %30 ], [ %58, %114 ]
  %118 = phi i16* [ %27, %39 ], [ %27, %30 ], [ %59, %114 ]
  %119 = ptrtoint i16* %118 to i64
  %120 = getelementptr i16, i16* %3, i64 -1
  %121 = ptrtoint i16* %120 to i64
  %122 = sub i64 %121, %119
  %123 = lshr i64 %122, 1
  %124 = add nuw i64 %123, 1
  %125 = and i64 %124, 7
  %126 = icmp eq i64 %125, 0
  br i1 %126, label %137, label %127

127:                                              ; preds = %116, %127
  %128 = phi i8* [ %134, %127 ], [ %117, %116 ]
  %129 = phi i16* [ %133, %127 ], [ %118, %116 ]
  %130 = phi i64 [ %135, %127 ], [ %125, %116 ]
  %131 = load i16, i16* %129, align 2
  %132 = trunc i16 %131 to i8
  store i8 %132, i8* %128, align 1
  %133 = getelementptr inbounds i16, i16* %129, i64 1
  %134 = getelementptr inbounds i8, i8* %128, i64 1
  %135 = add i64 %130, -1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %127, !llvm.loop !34

137:                                              ; preds = %127, %116
  %138 = phi i8* [ undef, %116 ], [ %134, %127 ]
  %139 = phi i8* [ %117, %116 ], [ %134, %127 ]
  %140 = phi i16* [ %118, %116 ], [ %133, %127 ]
  %141 = icmp ult i64 %122, 14
  br i1 %141, label %178, label %142

142:                                              ; preds = %137, %142
  %143 = phi i8* [ %176, %142 ], [ %139, %137 ]
  %144 = phi i16* [ %175, %142 ], [ %140, %137 ]
  %145 = load i16, i16* %144, align 2
  %146 = trunc i16 %145 to i8
  store i8 %146, i8* %143, align 1
  %147 = getelementptr inbounds i16, i16* %144, i64 1
  %148 = getelementptr inbounds i8, i8* %143, i64 1
  %149 = load i16, i16* %147, align 2
  %150 = trunc i16 %149 to i8
  store i8 %150, i8* %148, align 1
  %151 = getelementptr inbounds i16, i16* %144, i64 2
  %152 = getelementptr inbounds i8, i8* %143, i64 2
  %153 = load i16, i16* %151, align 2
  %154 = trunc i16 %153 to i8
  store i8 %154, i8* %152, align 1
  %155 = getelementptr inbounds i16, i16* %144, i64 3
  %156 = getelementptr inbounds i8, i8* %143, i64 3
  %157 = load i16, i16* %155, align 2
  %158 = trunc i16 %157 to i8
  store i8 %158, i8* %156, align 1
  %159 = getelementptr inbounds i16, i16* %144, i64 4
  %160 = getelementptr inbounds i8, i8* %143, i64 4
  %161 = load i16, i16* %159, align 2
  %162 = trunc i16 %161 to i8
  store i8 %162, i8* %160, align 1
  %163 = getelementptr inbounds i16, i16* %144, i64 5
  %164 = getelementptr inbounds i8, i8* %143, i64 5
  %165 = load i16, i16* %163, align 2
  %166 = trunc i16 %165 to i8
  store i8 %166, i8* %164, align 1
  %167 = getelementptr inbounds i16, i16* %144, i64 6
  %168 = getelementptr inbounds i8, i8* %143, i64 6
  %169 = load i16, i16* %167, align 2
  %170 = trunc i16 %169 to i8
  store i8 %170, i8* %168, align 1
  %171 = getelementptr inbounds i16, i16* %144, i64 7
  %172 = getelementptr inbounds i8, i8* %143, i64 7
  %173 = load i16, i16* %171, align 2
  %174 = trunc i16 %173 to i8
  store i8 %174, i8* %172, align 1
  %175 = getelementptr inbounds i16, i16* %144, i64 8
  %176 = getelementptr inbounds i8, i8* %143, i64 8
  %177 = icmp eq i16* %175, %3
  br i1 %177, label %178, label %142, !llvm.loop !35

178:                                              ; preds = %137, %142, %114
  %179 = phi i8* [ %58, %114 ], [ %138, %137 ], [ %176, %142 ]
  %180 = ptrtoint i8* %179 to i64
  br label %181

181:                                              ; preds = %178, %26
  %182 = phi i64 [ %19, %26 ], [ %180, %178 ]
  store i64 %182, i64* %22, align 8
  %183 = icmp sgt i64 %24, 0
  br i1 %183, label %184, label %680

184:                                              ; preds = %181
  %185 = inttoptr i64 %182 to i8*
  br label %186

186:                                              ; preds = %184, %23
  %187 = phi i64 [ %182, %184 ], [ %19, %23 ]
  %188 = phi i8* [ %185, %184 ], [ %18, %23 ]
  %189 = phi i16* [ %27, %184 ], [ %3, %23 ]
  %190 = getelementptr inbounds i8, i8* %1, i64 %11
  %191 = ptrtoint i8* %190 to i64
  %192 = sub i64 %187, %191
  %193 = getelementptr inbounds i8, i8* %1, i64 %192
  %194 = icmp ult i8* %193, %18
  br i1 %194, label %195, label %295

195:                                              ; preds = %186
  %196 = sub i64 %11, %187
  %197 = getelementptr i8, i8* %18, i64 %196
  %198 = ptrtoint i8* %197 to i64
  %199 = icmp ult i8* %197, inttoptr (i64 32 to i8*)
  br i1 %199, label %200, label %203

200:                                              ; preds = %290, %203, %195
  %201 = phi i8* [ %193, %203 ], [ %193, %195 ], [ %213, %290 ]
  %202 = phi i8* [ %188, %203 ], [ %188, %195 ], [ %214, %290 ]
  br label %301

203:                                              ; preds = %195
  %204 = sub i64 %11, %187
  %205 = getelementptr i8, i8* %18, i64 %204
  %206 = ptrtoint i8* %205 to i64
  %207 = getelementptr i8, i8* %188, i64 %206
  %208 = icmp ult i8* %188, %18
  %209 = icmp ult i8* %193, %207
  %210 = and i1 %208, %209
  br i1 %210, label %200, label %211

211:                                              ; preds = %203
  %212 = and i64 %198, -32
  %213 = getelementptr i8, i8* %193, i64 %212
  %214 = getelementptr i8, i8* %188, i64 %212
  %215 = add i64 %212, -32
  %216 = lshr exact i64 %215, 5
  %217 = add nuw nsw i64 %216, 1
  %218 = and i64 %217, 3
  %219 = icmp ult i64 %215, 96
  br i1 %219, label %271, label %220

220:                                              ; preds = %211
  %221 = sub nsw i64 %217, %218
  br label %222

222:                                              ; preds = %222, %220
  %223 = phi i64 [ 0, %220 ], [ %268, %222 ]
  %224 = phi i64 [ %221, %220 ], [ %269, %222 ]
  %225 = getelementptr i8, i8* %193, i64 %223
  %226 = getelementptr i8, i8* %188, i64 %223
  %227 = bitcast i8* %225 to <16 x i8>*
  %228 = load <16 x i8>, <16 x i8>* %227, align 1, !alias.scope !36
  %229 = getelementptr i8, i8* %225, i64 16
  %230 = bitcast i8* %229 to <16 x i8>*
  %231 = load <16 x i8>, <16 x i8>* %230, align 1, !alias.scope !36
  %232 = bitcast i8* %226 to <16 x i8>*
  store <16 x i8> %228, <16 x i8>* %232, align 1, !alias.scope !39, !noalias !36
  %233 = getelementptr i8, i8* %226, i64 16
  %234 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %231, <16 x i8>* %234, align 1, !alias.scope !39, !noalias !36
  %235 = or i64 %223, 32
  %236 = getelementptr i8, i8* %193, i64 %235
  %237 = getelementptr i8, i8* %188, i64 %235
  %238 = bitcast i8* %236 to <16 x i8>*
  %239 = load <16 x i8>, <16 x i8>* %238, align 1, !alias.scope !36
  %240 = getelementptr i8, i8* %236, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  %242 = load <16 x i8>, <16 x i8>* %241, align 1, !alias.scope !36
  %243 = bitcast i8* %237 to <16 x i8>*
  store <16 x i8> %239, <16 x i8>* %243, align 1, !alias.scope !39, !noalias !36
  %244 = getelementptr i8, i8* %237, i64 16
  %245 = bitcast i8* %244 to <16 x i8>*
  store <16 x i8> %242, <16 x i8>* %245, align 1, !alias.scope !39, !noalias !36
  %246 = or i64 %223, 64
  %247 = getelementptr i8, i8* %193, i64 %246
  %248 = getelementptr i8, i8* %188, i64 %246
  %249 = bitcast i8* %247 to <16 x i8>*
  %250 = load <16 x i8>, <16 x i8>* %249, align 1, !alias.scope !36
  %251 = getelementptr i8, i8* %247, i64 16
  %252 = bitcast i8* %251 to <16 x i8>*
  %253 = load <16 x i8>, <16 x i8>* %252, align 1, !alias.scope !36
  %254 = bitcast i8* %248 to <16 x i8>*
  store <16 x i8> %250, <16 x i8>* %254, align 1, !alias.scope !39, !noalias !36
  %255 = getelementptr i8, i8* %248, i64 16
  %256 = bitcast i8* %255 to <16 x i8>*
  store <16 x i8> %253, <16 x i8>* %256, align 1, !alias.scope !39, !noalias !36
  %257 = or i64 %223, 96
  %258 = getelementptr i8, i8* %193, i64 %257
  %259 = getelementptr i8, i8* %188, i64 %257
  %260 = bitcast i8* %258 to <16 x i8>*
  %261 = load <16 x i8>, <16 x i8>* %260, align 1, !alias.scope !36
  %262 = getelementptr i8, i8* %258, i64 16
  %263 = bitcast i8* %262 to <16 x i8>*
  %264 = load <16 x i8>, <16 x i8>* %263, align 1, !alias.scope !36
  %265 = bitcast i8* %259 to <16 x i8>*
  store <16 x i8> %261, <16 x i8>* %265, align 1, !alias.scope !39, !noalias !36
  %266 = getelementptr i8, i8* %259, i64 16
  %267 = bitcast i8* %266 to <16 x i8>*
  store <16 x i8> %264, <16 x i8>* %267, align 1, !alias.scope !39, !noalias !36
  %268 = add i64 %223, 128
  %269 = add i64 %224, -4
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %222, !llvm.loop !41

271:                                              ; preds = %222, %211
  %272 = phi i64 [ 0, %211 ], [ %268, %222 ]
  %273 = icmp eq i64 %218, 0
  br i1 %273, label %290, label %274

274:                                              ; preds = %271, %274
  %275 = phi i64 [ %287, %274 ], [ %272, %271 ]
  %276 = phi i64 [ %288, %274 ], [ %218, %271 ]
  %277 = getelementptr i8, i8* %193, i64 %275
  %278 = getelementptr i8, i8* %188, i64 %275
  %279 = bitcast i8* %277 to <16 x i8>*
  %280 = load <16 x i8>, <16 x i8>* %279, align 1, !alias.scope !36
  %281 = getelementptr i8, i8* %277, i64 16
  %282 = bitcast i8* %281 to <16 x i8>*
  %283 = load <16 x i8>, <16 x i8>* %282, align 1, !alias.scope !36
  %284 = bitcast i8* %278 to <16 x i8>*
  store <16 x i8> %280, <16 x i8>* %284, align 1, !alias.scope !39, !noalias !36
  %285 = getelementptr i8, i8* %278, i64 16
  %286 = bitcast i8* %285 to <16 x i8>*
  store <16 x i8> %283, <16 x i8>* %286, align 1, !alias.scope !39, !noalias !36
  %287 = add i64 %275, 32
  %288 = add i64 %276, -1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %290, label %274, !llvm.loop !42

290:                                              ; preds = %274, %271
  %291 = icmp eq i64 %212, %198
  br i1 %291, label %292, label %200

292:                                              ; preds = %301, %290
  %293 = phi i8* [ %214, %290 ], [ %306, %301 ]
  %294 = ptrtoint i8* %293 to i64
  br label %295

295:                                              ; preds = %292, %186
  %296 = phi i64 [ %294, %292 ], [ %187, %186 ]
  store i64 %296, i64* %22, align 8
  %297 = icmp eq i64 %192, 0
  br i1 %297, label %308, label %298

298:                                              ; preds = %295
  %299 = sub i64 0, %192
  %300 = getelementptr inbounds i8, i8* %188, i64 %299
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %300, i8* align 1 %1, i64 %192, i1 false) #14
  br label %308

301:                                              ; preds = %200, %301
  %302 = phi i8* [ %305, %301 ], [ %201, %200 ]
  %303 = phi i8* [ %306, %301 ], [ %202, %200 ]
  %304 = load i8, i8* %302, align 1
  store i8 %304, i8* %303, align 1
  %305 = getelementptr inbounds i8, i8* %302, i64 1
  %306 = getelementptr inbounds i8, i8* %303, i64 1
  %307 = icmp eq i8* %305, %18
  br i1 %307, label %292, label %301, !llvm.loop !43

308:                                              ; preds = %295, %298
  %309 = icmp eq i16* %189, %2
  br i1 %309, label %680, label %310

310:                                              ; preds = %308
  %311 = getelementptr i16, i16* %189, i64 -1
  %312 = ptrtoint i16* %311 to i64
  %313 = sub i64 %312, %7
  %314 = lshr i64 %313, 1
  %315 = add nuw i64 %314, 1
  %316 = icmp ult i64 %315, 16
  br i1 %316, label %389, label %317

317:                                              ; preds = %310
  %318 = getelementptr i16, i16* %189, i64 -1
  %319 = ptrtoint i16* %318 to i64
  %320 = sub i64 %319, %7
  %321 = lshr i64 %320, 1
  %322 = add nuw i64 %321, 1
  %323 = getelementptr i8, i8* %1, i64 %322
  %324 = getelementptr i16, i16* %2, i64 %322
  %325 = bitcast i16* %324 to i8*
  %326 = icmp ugt i8* %325, %1
  %327 = icmp ugt i8* %323, %5
  %328 = and i1 %326, %327
  br i1 %328, label %389, label %329

329:                                              ; preds = %317
  %330 = and i64 %315, -16
  %331 = getelementptr i8, i8* %1, i64 %330
  %332 = getelementptr i16, i16* %2, i64 %330
  %333 = add i64 %330, -16
  %334 = lshr exact i64 %333, 4
  %335 = add nuw nsw i64 %334, 1
  %336 = and i64 %335, 1
  %337 = icmp eq i64 %333, 0
  br i1 %337, label %371, label %338

338:                                              ; preds = %329
  %339 = sub nuw nsw i64 %335, %336
  br label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ 0, %338 ], [ %368, %340 ]
  %342 = phi i64 [ %339, %338 ], [ %369, %340 ]
  %343 = getelementptr i8, i8* %1, i64 %341
  %344 = getelementptr i16, i16* %2, i64 %341
  %345 = bitcast i16* %344 to <8 x i16>*
  %346 = load <8 x i16>, <8 x i16>* %345, align 2, !alias.scope !44
  %347 = getelementptr i16, i16* %344, i64 8
  %348 = bitcast i16* %347 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 2, !alias.scope !44
  %350 = trunc <8 x i16> %346 to <8 x i8>
  %351 = trunc <8 x i16> %349 to <8 x i8>
  %352 = bitcast i8* %343 to <8 x i8>*
  store <8 x i8> %350, <8 x i8>* %352, align 1, !alias.scope !47, !noalias !44
  %353 = getelementptr i8, i8* %343, i64 8
  %354 = bitcast i8* %353 to <8 x i8>*
  store <8 x i8> %351, <8 x i8>* %354, align 1, !alias.scope !47, !noalias !44
  %355 = or i64 %341, 16
  %356 = getelementptr i8, i8* %1, i64 %355
  %357 = getelementptr i16, i16* %2, i64 %355
  %358 = bitcast i16* %357 to <8 x i16>*
  %359 = load <8 x i16>, <8 x i16>* %358, align 2, !alias.scope !44
  %360 = getelementptr i16, i16* %357, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  %362 = load <8 x i16>, <8 x i16>* %361, align 2, !alias.scope !44
  %363 = trunc <8 x i16> %359 to <8 x i8>
  %364 = trunc <8 x i16> %362 to <8 x i8>
  %365 = bitcast i8* %356 to <8 x i8>*
  store <8 x i8> %363, <8 x i8>* %365, align 1, !alias.scope !47, !noalias !44
  %366 = getelementptr i8, i8* %356, i64 8
  %367 = bitcast i8* %366 to <8 x i8>*
  store <8 x i8> %364, <8 x i8>* %367, align 1, !alias.scope !47, !noalias !44
  %368 = add i64 %341, 32
  %369 = add i64 %342, -2
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %340, !llvm.loop !49

371:                                              ; preds = %340, %329
  %372 = phi i64 [ 0, %329 ], [ %368, %340 ]
  %373 = icmp eq i64 %336, 0
  br i1 %373, label %387, label %374

374:                                              ; preds = %371
  %375 = getelementptr i8, i8* %1, i64 %372
  %376 = getelementptr i16, i16* %2, i64 %372
  %377 = bitcast i16* %376 to <8 x i16>*
  %378 = load <8 x i16>, <8 x i16>* %377, align 2, !alias.scope !44
  %379 = getelementptr i16, i16* %376, i64 8
  %380 = bitcast i16* %379 to <8 x i16>*
  %381 = load <8 x i16>, <8 x i16>* %380, align 2, !alias.scope !44
  %382 = trunc <8 x i16> %378 to <8 x i8>
  %383 = trunc <8 x i16> %381 to <8 x i8>
  %384 = bitcast i8* %375 to <8 x i8>*
  store <8 x i8> %382, <8 x i8>* %384, align 1, !alias.scope !47, !noalias !44
  %385 = getelementptr i8, i8* %375, i64 8
  %386 = bitcast i8* %385 to <8 x i8>*
  store <8 x i8> %383, <8 x i8>* %386, align 1, !alias.scope !47, !noalias !44
  br label %387

387:                                              ; preds = %371, %374
  %388 = icmp eq i64 %315, %330
  br i1 %388, label %680, label %389

389:                                              ; preds = %387, %317, %310
  %390 = phi i8* [ %1, %317 ], [ %1, %310 ], [ %331, %387 ]
  %391 = phi i16* [ %2, %317 ], [ %2, %310 ], [ %332, %387 ]
  %392 = ptrtoint i16* %391 to i64
  %393 = getelementptr i16, i16* %189, i64 -1
  %394 = ptrtoint i16* %393 to i64
  %395 = sub i64 %394, %392
  %396 = lshr i64 %395, 1
  %397 = add nuw i64 %396, 1
  %398 = and i64 %397, 7
  %399 = icmp eq i64 %398, 0
  br i1 %399, label %410, label %400

400:                                              ; preds = %389, %400
  %401 = phi i8* [ %407, %400 ], [ %390, %389 ]
  %402 = phi i16* [ %406, %400 ], [ %391, %389 ]
  %403 = phi i64 [ %408, %400 ], [ %398, %389 ]
  %404 = load i16, i16* %402, align 2
  %405 = trunc i16 %404 to i8
  store i8 %405, i8* %401, align 1
  %406 = getelementptr inbounds i16, i16* %402, i64 1
  %407 = getelementptr inbounds i8, i8* %401, i64 1
  %408 = add i64 %403, -1
  %409 = icmp eq i64 %408, 0
  br i1 %409, label %410, label %400, !llvm.loop !50

410:                                              ; preds = %400, %389
  %411 = phi i8* [ %390, %389 ], [ %407, %400 ]
  %412 = phi i16* [ %391, %389 ], [ %406, %400 ]
  %413 = icmp ult i64 %395, 14
  br i1 %413, label %680, label %414

414:                                              ; preds = %410, %414
  %415 = phi i8* [ %448, %414 ], [ %411, %410 ]
  %416 = phi i16* [ %447, %414 ], [ %412, %410 ]
  %417 = load i16, i16* %416, align 2
  %418 = trunc i16 %417 to i8
  store i8 %418, i8* %415, align 1
  %419 = getelementptr inbounds i16, i16* %416, i64 1
  %420 = getelementptr inbounds i8, i8* %415, i64 1
  %421 = load i16, i16* %419, align 2
  %422 = trunc i16 %421 to i8
  store i8 %422, i8* %420, align 1
  %423 = getelementptr inbounds i16, i16* %416, i64 2
  %424 = getelementptr inbounds i8, i8* %415, i64 2
  %425 = load i16, i16* %423, align 2
  %426 = trunc i16 %425 to i8
  store i8 %426, i8* %424, align 1
  %427 = getelementptr inbounds i16, i16* %416, i64 3
  %428 = getelementptr inbounds i8, i8* %415, i64 3
  %429 = load i16, i16* %427, align 2
  %430 = trunc i16 %429 to i8
  store i8 %430, i8* %428, align 1
  %431 = getelementptr inbounds i16, i16* %416, i64 4
  %432 = getelementptr inbounds i8, i8* %415, i64 4
  %433 = load i16, i16* %431, align 2
  %434 = trunc i16 %433 to i8
  store i8 %434, i8* %432, align 1
  %435 = getelementptr inbounds i16, i16* %416, i64 5
  %436 = getelementptr inbounds i8, i8* %415, i64 5
  %437 = load i16, i16* %435, align 2
  %438 = trunc i16 %437 to i8
  store i8 %438, i8* %436, align 1
  %439 = getelementptr inbounds i16, i16* %416, i64 6
  %440 = getelementptr inbounds i8, i8* %415, i64 6
  %441 = load i16, i16* %439, align 2
  %442 = trunc i16 %441 to i8
  store i8 %442, i8* %440, align 1
  %443 = getelementptr inbounds i16, i16* %416, i64 7
  %444 = getelementptr inbounds i8, i8* %415, i64 7
  %445 = load i16, i16* %443, align 2
  %446 = trunc i16 %445 to i8
  store i8 %446, i8* %444, align 1
  %447 = getelementptr inbounds i16, i16* %416, i64 8
  %448 = getelementptr inbounds i8, i8* %415, i64 8
  %449 = icmp eq i16* %447, %189
  br i1 %449, label %680, label %414, !llvm.loop !51

450:                                              ; preds = %13
  %451 = bitcast %"class.std::__1::vector"* %0 to i64*
  %452 = load i64, i64* %451, align 8
  %453 = sub i64 %19, %452
  %454 = add i64 %453, %11
  %455 = icmp slt i64 %454, 0
  br i1 %455, label %456, label %458

456:                                              ; preds = %450
  %457 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %457) #12
  unreachable

458:                                              ; preds = %450
  %459 = sub i64 %16, %452
  %460 = icmp ult i64 %459, 4611686018427387903
  br i1 %460, label %463, label %461

461:                                              ; preds = %458
  %462 = sub i64 %6, %452
  br label %469

463:                                              ; preds = %458
  %464 = shl i64 %459, 1
  %465 = icmp ult i64 %464, %454
  %466 = select i1 %465, i64 %454, i64 %464
  %467 = sub i64 %6, %452
  %468 = icmp eq i64 %466, 0
  br i1 %468, label %473, label %469

469:                                              ; preds = %461, %463
  %470 = phi i64 [ %462, %461 ], [ %467, %463 ]
  %471 = phi i64 [ 9223372036854775807, %461 ], [ %466, %463 ]
  %472 = tail call i8* @_Znwm(i64 %471) #13
  br label %473

473:                                              ; preds = %469, %463
  %474 = phi i64 [ %470, %469 ], [ %467, %463 ]
  %475 = phi i64 [ %471, %469 ], [ 0, %463 ]
  %476 = phi i8* [ %472, %469 ], [ null, %463 ]
  %477 = getelementptr inbounds i8, i8* %476, i64 %474
  %478 = getelementptr inbounds i8, i8* %476, i64 %475
  %479 = ptrtoint i8* %478 to i64
  %480 = getelementptr inbounds i8, i8* %477, i64 %11
  %481 = icmp ult i64 %11, 16
  br i1 %481, label %547, label %482

482:                                              ; preds = %473
  %483 = bitcast i16* %3 to i8*
  %484 = icmp ult i8* %477, %483
  %485 = icmp ugt i8* %480, %5
  %486 = and i1 %484, %485
  br i1 %486, label %547, label %487

487:                                              ; preds = %482
  %488 = and i64 %11, -16
  %489 = getelementptr i8, i8* %477, i64 %488
  %490 = getelementptr i16, i16* %2, i64 %488
  %491 = add nsw i64 %488, -16
  %492 = lshr exact i64 %491, 4
  %493 = add nuw nsw i64 %492, 1
  %494 = and i64 %493, 1
  %495 = icmp eq i64 %491, 0
  br i1 %495, label %529, label %496

496:                                              ; preds = %487
  %497 = sub nuw nsw i64 %493, %494
  br label %498

498:                                              ; preds = %498, %496
  %499 = phi i64 [ 0, %496 ], [ %526, %498 ]
  %500 = phi i64 [ %497, %496 ], [ %527, %498 ]
  %501 = getelementptr i8, i8* %477, i64 %499
  %502 = getelementptr i16, i16* %2, i64 %499
  %503 = bitcast i16* %502 to <8 x i16>*
  %504 = load <8 x i16>, <8 x i16>* %503, align 2, !alias.scope !52
  %505 = getelementptr i16, i16* %502, i64 8
  %506 = bitcast i16* %505 to <8 x i16>*
  %507 = load <8 x i16>, <8 x i16>* %506, align 2, !alias.scope !52
  %508 = trunc <8 x i16> %504 to <8 x i8>
  %509 = trunc <8 x i16> %507 to <8 x i8>
  %510 = bitcast i8* %501 to <8 x i8>*
  store <8 x i8> %508, <8 x i8>* %510, align 1, !alias.scope !55, !noalias !52
  %511 = getelementptr i8, i8* %501, i64 8
  %512 = bitcast i8* %511 to <8 x i8>*
  store <8 x i8> %509, <8 x i8>* %512, align 1, !alias.scope !55, !noalias !52
  %513 = or i64 %499, 16
  %514 = getelementptr i8, i8* %477, i64 %513
  %515 = getelementptr i16, i16* %2, i64 %513
  %516 = bitcast i16* %515 to <8 x i16>*
  %517 = load <8 x i16>, <8 x i16>* %516, align 2, !alias.scope !52
  %518 = getelementptr i16, i16* %515, i64 8
  %519 = bitcast i16* %518 to <8 x i16>*
  %520 = load <8 x i16>, <8 x i16>* %519, align 2, !alias.scope !52
  %521 = trunc <8 x i16> %517 to <8 x i8>
  %522 = trunc <8 x i16> %520 to <8 x i8>
  %523 = bitcast i8* %514 to <8 x i8>*
  store <8 x i8> %521, <8 x i8>* %523, align 1, !alias.scope !55, !noalias !52
  %524 = getelementptr i8, i8* %514, i64 8
  %525 = bitcast i8* %524 to <8 x i8>*
  store <8 x i8> %522, <8 x i8>* %525, align 1, !alias.scope !55, !noalias !52
  %526 = add i64 %499, 32
  %527 = add i64 %500, -2
  %528 = icmp eq i64 %527, 0
  br i1 %528, label %529, label %498, !llvm.loop !57

529:                                              ; preds = %498, %487
  %530 = phi i64 [ 0, %487 ], [ %526, %498 ]
  %531 = icmp eq i64 %494, 0
  br i1 %531, label %545, label %532

532:                                              ; preds = %529
  %533 = getelementptr i8, i8* %477, i64 %530
  %534 = getelementptr i16, i16* %2, i64 %530
  %535 = bitcast i16* %534 to <8 x i16>*
  %536 = load <8 x i16>, <8 x i16>* %535, align 2, !alias.scope !52
  %537 = getelementptr i16, i16* %534, i64 8
  %538 = bitcast i16* %537 to <8 x i16>*
  %539 = load <8 x i16>, <8 x i16>* %538, align 2, !alias.scope !52
  %540 = trunc <8 x i16> %536 to <8 x i8>
  %541 = trunc <8 x i16> %539 to <8 x i8>
  %542 = bitcast i8* %533 to <8 x i8>*
  store <8 x i8> %540, <8 x i8>* %542, align 1, !alias.scope !55, !noalias !52
  %543 = getelementptr i8, i8* %533, i64 8
  %544 = bitcast i8* %543 to <8 x i8>*
  store <8 x i8> %541, <8 x i8>* %544, align 1, !alias.scope !55, !noalias !52
  br label %545

545:                                              ; preds = %529, %532
  %546 = icmp eq i64 %11, %488
  br i1 %546, label %558, label %547

547:                                              ; preds = %545, %482, %473
  %548 = phi i8* [ %477, %482 ], [ %477, %473 ], [ %489, %545 ]
  %549 = phi i16* [ %2, %482 ], [ %2, %473 ], [ %490, %545 ]
  br label %550

550:                                              ; preds = %547, %550
  %551 = phi i8* [ %555, %550 ], [ %548, %547 ]
  %552 = phi i16* [ %556, %550 ], [ %549, %547 ]
  %553 = load i16, i16* %552, align 2
  %554 = trunc i16 %553 to i8
  store i8 %554, i8* %551, align 1
  %555 = getelementptr inbounds i8, i8* %551, i64 1
  %556 = getelementptr inbounds i16, i16* %552, i64 1
  %557 = icmp eq i8* %480, %555
  br i1 %557, label %558, label %550, !llvm.loop !58

558:                                              ; preds = %550, %545
  %559 = load i8*, i8** %8, align 8
  %560 = ptrtoint i8* %559 to i64
  %561 = sub i64 %6, %560
  %562 = sub i64 0, %561
  %563 = getelementptr inbounds i8, i8* %477, i64 %562
  %564 = ptrtoint i8* %563 to i64
  %565 = icmp sgt i64 %561, 0
  br i1 %565, label %566, label %567

566:                                              ; preds = %558
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %563, i8* align 1 %559, i64 %561, i1 false) #14
  br label %567

567:                                              ; preds = %566, %558
  %568 = load i8*, i8** %17, align 8
  %569 = icmp eq i8* %568, %1
  br i1 %569, label %674, label %570

570:                                              ; preds = %567
  %571 = ptrtoint i8* %568 to i64
  %572 = sub i64 %571, %6
  %573 = icmp ult i64 %572, 32
  br i1 %573, label %664, label %574

574:                                              ; preds = %570
  %575 = add i64 %474, %11
  %576 = sub i64 %575, %6
  %577 = getelementptr i8, i8* %568, i64 %576
  %578 = ptrtoint i8* %577 to i64
  %579 = getelementptr i8, i8* %476, i64 %578
  %580 = icmp ult i8* %480, %568
  %581 = icmp ugt i8* %579, %1
  %582 = and i1 %580, %581
  br i1 %582, label %664, label %583

583:                                              ; preds = %574
  %584 = and i64 %572, -32
  %585 = getelementptr i8, i8* %480, i64 %584
  %586 = getelementptr i8, i8* %1, i64 %584
  %587 = add i64 %584, -32
  %588 = lshr exact i64 %587, 5
  %589 = add nuw nsw i64 %588, 1
  %590 = and i64 %589, 3
  %591 = icmp ult i64 %587, 96
  br i1 %591, label %643, label %592

592:                                              ; preds = %583
  %593 = sub nsw i64 %589, %590
  br label %594

594:                                              ; preds = %594, %592
  %595 = phi i64 [ 0, %592 ], [ %640, %594 ]
  %596 = phi i64 [ %593, %592 ], [ %641, %594 ]
  %597 = getelementptr i8, i8* %480, i64 %595
  %598 = getelementptr i8, i8* %1, i64 %595
  %599 = bitcast i8* %598 to <16 x i8>*
  %600 = load <16 x i8>, <16 x i8>* %599, align 1, !alias.scope !59
  %601 = getelementptr i8, i8* %598, i64 16
  %602 = bitcast i8* %601 to <16 x i8>*
  %603 = load <16 x i8>, <16 x i8>* %602, align 1, !alias.scope !59
  %604 = bitcast i8* %597 to <16 x i8>*
  store <16 x i8> %600, <16 x i8>* %604, align 1, !alias.scope !62, !noalias !59
  %605 = getelementptr i8, i8* %597, i64 16
  %606 = bitcast i8* %605 to <16 x i8>*
  store <16 x i8> %603, <16 x i8>* %606, align 1, !alias.scope !62, !noalias !59
  %607 = or i64 %595, 32
  %608 = getelementptr i8, i8* %480, i64 %607
  %609 = getelementptr i8, i8* %1, i64 %607
  %610 = bitcast i8* %609 to <16 x i8>*
  %611 = load <16 x i8>, <16 x i8>* %610, align 1, !alias.scope !59
  %612 = getelementptr i8, i8* %609, i64 16
  %613 = bitcast i8* %612 to <16 x i8>*
  %614 = load <16 x i8>, <16 x i8>* %613, align 1, !alias.scope !59
  %615 = bitcast i8* %608 to <16 x i8>*
  store <16 x i8> %611, <16 x i8>* %615, align 1, !alias.scope !62, !noalias !59
  %616 = getelementptr i8, i8* %608, i64 16
  %617 = bitcast i8* %616 to <16 x i8>*
  store <16 x i8> %614, <16 x i8>* %617, align 1, !alias.scope !62, !noalias !59
  %618 = or i64 %595, 64
  %619 = getelementptr i8, i8* %480, i64 %618
  %620 = getelementptr i8, i8* %1, i64 %618
  %621 = bitcast i8* %620 to <16 x i8>*
  %622 = load <16 x i8>, <16 x i8>* %621, align 1, !alias.scope !59
  %623 = getelementptr i8, i8* %620, i64 16
  %624 = bitcast i8* %623 to <16 x i8>*
  %625 = load <16 x i8>, <16 x i8>* %624, align 1, !alias.scope !59
  %626 = bitcast i8* %619 to <16 x i8>*
  store <16 x i8> %622, <16 x i8>* %626, align 1, !alias.scope !62, !noalias !59
  %627 = getelementptr i8, i8* %619, i64 16
  %628 = bitcast i8* %627 to <16 x i8>*
  store <16 x i8> %625, <16 x i8>* %628, align 1, !alias.scope !62, !noalias !59
  %629 = or i64 %595, 96
  %630 = getelementptr i8, i8* %480, i64 %629
  %631 = getelementptr i8, i8* %1, i64 %629
  %632 = bitcast i8* %631 to <16 x i8>*
  %633 = load <16 x i8>, <16 x i8>* %632, align 1, !alias.scope !59
  %634 = getelementptr i8, i8* %631, i64 16
  %635 = bitcast i8* %634 to <16 x i8>*
  %636 = load <16 x i8>, <16 x i8>* %635, align 1, !alias.scope !59
  %637 = bitcast i8* %630 to <16 x i8>*
  store <16 x i8> %633, <16 x i8>* %637, align 1, !alias.scope !62, !noalias !59
  %638 = getelementptr i8, i8* %630, i64 16
  %639 = bitcast i8* %638 to <16 x i8>*
  store <16 x i8> %636, <16 x i8>* %639, align 1, !alias.scope !62, !noalias !59
  %640 = add i64 %595, 128
  %641 = add i64 %596, -4
  %642 = icmp eq i64 %641, 0
  br i1 %642, label %643, label %594, !llvm.loop !64

643:                                              ; preds = %594, %583
  %644 = phi i64 [ 0, %583 ], [ %640, %594 ]
  %645 = icmp eq i64 %590, 0
  br i1 %645, label %662, label %646

646:                                              ; preds = %643, %646
  %647 = phi i64 [ %659, %646 ], [ %644, %643 ]
  %648 = phi i64 [ %660, %646 ], [ %590, %643 ]
  %649 = getelementptr i8, i8* %480, i64 %647
  %650 = getelementptr i8, i8* %1, i64 %647
  %651 = bitcast i8* %650 to <16 x i8>*
  %652 = load <16 x i8>, <16 x i8>* %651, align 1, !alias.scope !59
  %653 = getelementptr i8, i8* %650, i64 16
  %654 = bitcast i8* %653 to <16 x i8>*
  %655 = load <16 x i8>, <16 x i8>* %654, align 1, !alias.scope !59
  %656 = bitcast i8* %649 to <16 x i8>*
  store <16 x i8> %652, <16 x i8>* %656, align 1, !alias.scope !62, !noalias !59
  %657 = getelementptr i8, i8* %649, i64 16
  %658 = bitcast i8* %657 to <16 x i8>*
  store <16 x i8> %655, <16 x i8>* %658, align 1, !alias.scope !62, !noalias !59
  %659 = add i64 %647, 32
  %660 = add i64 %648, -1
  %661 = icmp eq i64 %660, 0
  br i1 %661, label %662, label %646, !llvm.loop !65

662:                                              ; preds = %646, %643
  %663 = icmp eq i64 %572, %584
  br i1 %663, label %674, label %664

664:                                              ; preds = %662, %574, %570
  %665 = phi i8* [ %480, %574 ], [ %480, %570 ], [ %585, %662 ]
  %666 = phi i8* [ %1, %574 ], [ %1, %570 ], [ %586, %662 ]
  br label %667

667:                                              ; preds = %664, %667
  %668 = phi i8* [ %672, %667 ], [ %665, %664 ]
  %669 = phi i8* [ %671, %667 ], [ %666, %664 ]
  %670 = load i8, i8* %669, align 1
  store i8 %670, i8* %668, align 1
  %671 = getelementptr inbounds i8, i8* %669, i64 1
  %672 = getelementptr inbounds i8, i8* %668, i64 1
  %673 = icmp eq i8* %671, %568
  br i1 %673, label %674, label %667, !llvm.loop !66

674:                                              ; preds = %667, %662, %567
  %675 = phi i8* [ %480, %567 ], [ %585, %662 ], [ %672, %667 ]
  %676 = ptrtoint i8* %675 to i64
  %677 = load i8*, i8** %8, align 8
  store i64 %564, i64* %451, align 8
  store i64 %676, i64* %22, align 8
  store i64 %479, i64* %15, align 8
  %678 = icmp eq i8* %677, null
  br i1 %678, label %680, label %679

679:                                              ; preds = %674
  tail call void @_ZdlPv(i8* nonnull %677) #13
  br label %680

680:                                              ; preds = %410, %414, %387, %679, %674, %181, %308, %4
  %681 = phi i8* [ %1, %4 ], [ %1, %308 ], [ %1, %181 ], [ %477, %674 ], [ %477, %679 ], [ %1, %387 ], [ %1, %414 ], [ %1, %410 ]
  ret i8* %681
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor12EncodeBinaryENS_4spanIhEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %5, %7
  %9 = ptrtoint i8* %7 to i64
  br i1 %8, label %14, label %10

10:                                               ; preds = %3
  store i8 -42, i8* %5, align 1
  %11 = getelementptr inbounds i8, i8* %5, i64 1
  %12 = ptrtoint i8* %11 to i64
  %13 = bitcast i8** %4 to i64*
  store i64 %12, i64* %13, align 8
  br label %59

14:                                               ; preds = %3
  %15 = ptrtoint i8* %5 to i64
  %16 = bitcast i8** %4 to i64*
  %17 = bitcast %"class.std::__1::vector"* %2 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %15, %18
  %20 = add i64 %19, 1
  %21 = icmp slt i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %14
  %23 = bitcast %"class.std::__1::vector"* %2 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %23) #12
  unreachable

24:                                               ; preds = %14
  %25 = bitcast i8** %6 to i64*
  %26 = sub i64 %9, %18
  %27 = icmp ult i64 %26, 4611686018427387903
  br i1 %27, label %28, label %33

28:                                               ; preds = %24
  %29 = shl i64 %26, 1
  %30 = icmp ult i64 %29, %20
  %31 = select i1 %30, i64 %20, i64 %29
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %28, %24
  %34 = phi i64 [ %31, %28 ], [ 9223372036854775807, %24 ]
  %35 = tail call i8* @_Znwm(i64 %34) #13
  br label %36

36:                                               ; preds = %33, %28
  %37 = phi i64 [ %34, %33 ], [ 0, %28 ]
  %38 = phi i8* [ %35, %33 ], [ null, %28 ]
  %39 = getelementptr inbounds i8, i8* %38, i64 %19
  %40 = getelementptr inbounds i8, i8* %38, i64 %37
  %41 = ptrtoint i8* %40 to i64
  store i8 -42, i8* %39, align 1
  %42 = getelementptr inbounds i8, i8* %39, i64 1
  %43 = ptrtoint i8* %42 to i64
  %44 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = load i64, i64* %16, align 8
  %47 = ptrtoint i8* %45 to i64
  %48 = sub i64 %46, %47
  %49 = sub i64 0, %48
  %50 = getelementptr inbounds i8, i8* %39, i64 %49
  %51 = ptrtoint i8* %50 to i64
  %52 = icmp sgt i64 %48, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %36
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* align 1 %45, i64 %48, i1 false) #14
  %54 = load i8*, i8** %44, align 8
  br label %55

55:                                               ; preds = %53, %36
  %56 = phi i8* [ %45, %36 ], [ %54, %53 ]
  store i64 %51, i64* %17, align 8
  store i64 %43, i64* %16, align 8
  store i64 %41, i64* %25, align 8
  %57 = icmp eq i8* %56, null
  br i1 %57, label %59, label %58

58:                                               ; preds = %55
  tail call void @_ZdlPv(i8* nonnull %56) #13
  br label %59

59:                                               ; preds = %10, %55, %58
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 2, i64 %1, %"class.std::__1::vector"* %2)
  %60 = load i8*, i8** %4, align 8
  %61 = getelementptr inbounds i8, i8* %0, i64 %1
  %62 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %2, i8* %60, i8* %0, i8* %61)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor12EncodeDoubleEdPNSt3__16vectorIhNS1_9allocatorIhEEEE(double, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  %8 = ptrtoint i8* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i8 -5, i8* %4, align 1
  %10 = getelementptr inbounds i8, i8* %4, i64 1
  %11 = ptrtoint i8* %10 to i64
  %12 = bitcast i8** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %58

13:                                               ; preds = %2
  %14 = ptrtoint i8* %4 to i64
  %15 = bitcast i8** %3 to i64*
  %16 = bitcast %"class.std::__1::vector"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = add i64 %18, 1
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %22) #12
  unreachable

23:                                               ; preds = %13
  %24 = bitcast i8** %5 to i64*
  %25 = sub i64 %8, %17
  %26 = icmp ult i64 %25, 4611686018427387903
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = shl i64 %25, 1
  %29 = icmp ult i64 %28, %19
  %30 = select i1 %29, i64 %19, i64 %28
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %27, %23
  %33 = phi i64 [ %30, %27 ], [ 9223372036854775807, %23 ]
  %34 = tail call i8* @_Znwm(i64 %33) #13
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi i64 [ %33, %32 ], [ 0, %27 ]
  %37 = phi i8* [ %34, %32 ], [ null, %27 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 %18
  %39 = getelementptr inbounds i8, i8* %37, i64 %36
  %40 = ptrtoint i8* %39 to i64
  store i8 -5, i8* %38, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 1
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = load i64, i64* %15, align 8
  %46 = ptrtoint i8* %44 to i64
  %47 = sub i64 %45, %46
  %48 = sub i64 0, %47
  %49 = getelementptr inbounds i8, i8* %38, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = icmp sgt i64 %47, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %44, i64 %47, i1 false) #14
  %53 = load i8*, i8** %43, align 8
  br label %54

54:                                               ; preds = %52, %35
  %55 = phi i8* [ %44, %35 ], [ %53, %52 ]
  store i64 %50, i64* %16, align 8
  store i64 %42, i64* %15, align 8
  store i64 %40, i64* %24, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %58, label %57

57:                                               ; preds = %54
  tail call void @_ZdlPv(i8* nonnull %55) #13
  br label %58

58:                                               ; preds = %9, %54, %57
  %59 = bitcast double %0 to i64
  tail call fastcc void @_ZN5crdtp4cbor12_GLOBAL__N_134WriteBytesMostSignificantByteFirstImEEvT_PNSt3__16vectorIhNS4_9allocatorIhEEEE(i64 %59, %"class.std::__1::vector"* %1)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor15EnvelopeEncoder11EncodeStartEPNSt3__16vectorIhNS2_9allocatorIhEEEE(%"class.crdtp::cbor::EnvelopeEncoder"* nocapture, %"class.std::__1::vector"*) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %4, %6
  %8 = ptrtoint i8* %6 to i64
  br i1 %7, label %13, label %9

9:                                                ; preds = %2
  store i8 -40, i8* %4, align 1
  %10 = getelementptr inbounds i8, i8* %4, i64 1
  %11 = ptrtoint i8* %10 to i64
  %12 = bitcast i8** %3 to i64*
  store i64 %11, i64* %12, align 8
  br label %59

13:                                               ; preds = %2
  %14 = ptrtoint i8* %4 to i64
  %15 = bitcast i8** %3 to i64*
  %16 = bitcast %"class.std::__1::vector"* %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %14, %17
  %19 = add i64 %18, 1
  %20 = icmp slt i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %22) #12
  unreachable

23:                                               ; preds = %13
  %24 = bitcast i8** %5 to i64*
  %25 = sub i64 %8, %17
  %26 = icmp ult i64 %25, 4611686018427387903
  br i1 %26, label %27, label %32

27:                                               ; preds = %23
  %28 = shl i64 %25, 1
  %29 = icmp ult i64 %28, %19
  %30 = select i1 %29, i64 %19, i64 %28
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %27, %23
  %33 = phi i64 [ %30, %27 ], [ 9223372036854775807, %23 ]
  %34 = tail call i8* @_Znwm(i64 %33) #13
  br label %35

35:                                               ; preds = %32, %27
  %36 = phi i64 [ %33, %32 ], [ 0, %27 ]
  %37 = phi i8* [ %34, %32 ], [ null, %27 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 %18
  %39 = getelementptr inbounds i8, i8* %37, i64 %36
  %40 = ptrtoint i8* %39 to i64
  store i8 -40, i8* %38, align 1
  %41 = getelementptr inbounds i8, i8* %38, i64 1
  %42 = ptrtoint i8* %41 to i64
  %43 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = load i64, i64* %15, align 8
  %46 = ptrtoint i8* %44 to i64
  %47 = sub i64 %45, %46
  %48 = sub i64 0, %47
  %49 = getelementptr inbounds i8, i8* %38, i64 %48
  %50 = ptrtoint i8* %49 to i64
  %51 = icmp sgt i64 %47, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %35
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %49, i8* align 1 %44, i64 %47, i1 false) #14
  %53 = load i8*, i8** %43, align 8
  br label %54

54:                                               ; preds = %52, %35
  %55 = phi i8* [ %44, %35 ], [ %53, %52 ]
  store i64 %50, i64* %16, align 8
  store i64 %42, i64* %15, align 8
  store i64 %40, i64* %24, align 8
  %56 = icmp eq i8* %55, null
  br i1 %56, label %59, label %57

57:                                               ; preds = %54
  tail call void @_ZdlPv(i8* nonnull %55) #13
  %58 = load i8*, i8** %3, align 8
  br label %59

59:                                               ; preds = %9, %54, %57
  %60 = phi i8* [ %10, %9 ], [ %41, %54 ], [ %58, %57 ]
  %61 = load i8*, i8** %5, align 8
  %62 = icmp eq i8* %60, %61
  br i1 %62, label %68, label %63

63:                                               ; preds = %59
  store i8 90, i8* %60, align 1
  %64 = getelementptr inbounds i8, i8* %60, i64 1
  %65 = ptrtoint i8* %64 to i64
  %66 = bitcast i8** %3 to i64*
  store i64 %65, i64* %66, align 8
  %67 = bitcast %"class.std::__1::vector"* %1 to i64*
  br label %113

68:                                               ; preds = %59
  %69 = ptrtoint i8* %61 to i64
  %70 = bitcast i8** %3 to i64*
  %71 = bitcast %"class.std::__1::vector"* %1 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %69, %72
  %74 = add i64 %73, 1
  %75 = icmp slt i64 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %68
  %77 = bitcast %"class.std::__1::vector"* %1 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %77) #12
  unreachable

78:                                               ; preds = %68
  %79 = bitcast i8** %5 to i64*
  %80 = icmp ult i64 %73, 4611686018427387903
  br i1 %80, label %81, label %86

81:                                               ; preds = %78
  %82 = shl i64 %73, 1
  %83 = icmp ult i64 %82, %74
  %84 = select i1 %83, i64 %74, i64 %82
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %89, label %86

86:                                               ; preds = %81, %78
  %87 = phi i64 [ %84, %81 ], [ 9223372036854775807, %78 ]
  %88 = tail call i8* @_Znwm(i64 %87) #13
  br label %89

89:                                               ; preds = %86, %81
  %90 = phi i64 [ %87, %86 ], [ 0, %81 ]
  %91 = phi i8* [ %88, %86 ], [ null, %81 ]
  %92 = getelementptr inbounds i8, i8* %91, i64 %73
  %93 = getelementptr inbounds i8, i8* %91, i64 %90
  %94 = ptrtoint i8* %93 to i64
  store i8 90, i8* %92, align 1
  %95 = getelementptr inbounds i8, i8* %92, i64 1
  %96 = ptrtoint i8* %95 to i64
  %97 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = load i64, i64* %70, align 8
  %100 = ptrtoint i8* %98 to i64
  %101 = sub i64 %99, %100
  %102 = sub i64 0, %101
  %103 = getelementptr inbounds i8, i8* %92, i64 %102
  %104 = ptrtoint i8* %103 to i64
  %105 = icmp sgt i64 %101, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %89
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %103, i8* align 1 %98, i64 %101, i1 false) #14
  %107 = load i8*, i8** %97, align 8
  br label %108

108:                                              ; preds = %106, %89
  %109 = phi i8* [ %98, %89 ], [ %107, %106 ]
  store i64 %104, i64* %71, align 8
  store i64 %96, i64* %70, align 8
  store i64 %94, i64* %79, align 8
  %110 = icmp eq i8* %109, null
  br i1 %110, label %113, label %111

111:                                              ; preds = %108
  tail call void @_ZdlPv(i8* nonnull %109) #13
  %112 = load i64, i64* %70, align 8
  br label %113

113:                                              ; preds = %63, %108, %111
  %114 = phi i64* [ %67, %63 ], [ %71, %108 ], [ %71, %111 ]
  %115 = phi i64* [ %66, %63 ], [ %70, %108 ], [ %70, %111 ]
  %116 = phi i64 [ %65, %63 ], [ %96, %108 ], [ %112, %111 ]
  %117 = load i64, i64* %114, align 8
  %118 = sub i64 %116, %117
  %119 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %0, i64 0, i32 0
  store i64 %118, i64* %119, align 8
  %120 = load i64, i64* %115, align 8
  %121 = load i64, i64* %114, align 8
  %122 = sub i64 %120, %121
  %123 = icmp ult i64 %122, -4
  br i1 %123, label %124, label %125

124:                                              ; preds = %113
  tail call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %1, i64 4) #14
  br label %129

125:                                              ; preds = %113
  %126 = inttoptr i64 %121 to i8*
  %127 = add nsw i64 %122, 4
  %128 = getelementptr inbounds i8, i8* %126, i64 %127
  store i8* %128, i8** %3, align 8
  br label %129

129:                                              ; preds = %124, %125
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5crdtp4cbor15EnvelopeEncoder10EncodeStopEPNSt3__16vectorIhNS2_9allocatorIhEEEE(%"class.crdtp::cbor::EnvelopeEncoder"* nocapture, %"class.std::__1::vector"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %1 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %0, i64 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = sub i64 -4, %10
  %12 = add i64 %11, %8
  %13 = icmp ugt i64 %12, 4294967295
  br i1 %13, label %38, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %16 = lshr i64 %12, 24
  %17 = trunc i64 %16 to i8
  %18 = add i64 %10, 1
  store i64 %18, i64* %9, align 8
  %19 = load i8*, i8** %15, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %10
  store i8 %17, i8* %20, align 1
  %21 = lshr i64 %12, 16
  %22 = trunc i64 %21 to i8
  %23 = load i64, i64* %9, align 8
  %24 = add i64 %23, 1
  store i64 %24, i64* %9, align 8
  %25 = load i8*, i8** %15, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 %23
  store i8 %22, i8* %26, align 1
  %27 = lshr i64 %12, 8
  %28 = trunc i64 %27 to i8
  %29 = load i64, i64* %9, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %9, align 8
  %31 = load i8*, i8** %15, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 %29
  store i8 %28, i8* %32, align 1
  %33 = trunc i64 %12 to i8
  %34 = load i64, i64* %9, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %9, align 8
  %36 = load i8*, i8** %15, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 %34
  store i8 %33, i8* %37, align 1
  br label %38

38:                                               ; preds = %14, %2
  %39 = phi i1 [ false, %2 ], [ true, %14 ]
  ret i1 %39
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.crdtp::ParserHandler"* @_ZN5crdtp4cbor14NewCBOREncoderEPNSt3__16vectorIhNS1_9allocatorIhEEEEPNS_6StatusE(%"class.std::__1::vector"*, %"struct.crdtp::Status"*) local_unnamed_addr #2 {
  %3 = tail call i8* @_Znwm(i64 48) #13
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5crdtp4cbor12_GLOBAL__N_111CBOREncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to %"class.std::__1::vector"**
  store %"class.std::__1::vector"* %0, %"class.std::__1::vector"** %6, align 8
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false) #14
  %8 = getelementptr inbounds i8, i8* %3, i64 40
  %9 = bitcast i8* %8 to %"struct.crdtp::Status"**
  store %"struct.crdtp::Status"* %1, %"struct.crdtp::Status"** %9, align 8
  %10 = bitcast %"struct.crdtp::Status"* %1 to i8*
  %11 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %1, i64 0, i32 0
  store i32 0, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %10, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 0, i32* %13, align 4
  %14 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %1, i64 0, i32 1
  store i64 -1, i64* %14, align 8
  %15 = bitcast i8* %3 to %"class.crdtp::ParserHandler"*
  ret %"class.crdtp::ParserHandler"* %15
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor13CBORTokenizerC2ENS_4spanIhEE(%"class.crdtp::cbor::CBORTokenizer"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 1
  store i64 %2, i64* %5, align 8
  %6 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 0
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  store i64 -1, i64* %7, align 8
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %0, i1 zeroext false)
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"*, i1 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %4 = load i64, i64* %3, align 8
  br i1 %1, label %5, label %7

5:                                                ; preds = %2
  %6 = add i64 %4, 6
  br label %13

7:                                                ; preds = %2
  %8 = icmp eq i64 %4, -1
  br i1 %8, label %13, label %9

9:                                                ; preds = %7
  %10 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %11, %4
  br label %13

13:                                               ; preds = %9, %7, %5
  %14 = phi i64 [ %6, %5 ], [ %12, %9 ], [ 0, %7 ]
  store i64 %14, i64* %3, align 8
  %15 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 0
  store i32 0, i32* %15, align 8
  %16 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, %14
  br i1 %18, label %21, label %19

19:                                               ; preds = %13
  %20 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 13, i32* %20, align 8
  br label %169

21:                                               ; preds = %13
  %22 = sub i64 %17, %14
  %23 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %14
  %26 = load i8, i8* %25, align 1
  switch i8 %26, label %113 [
    i8 -1, label %27
    i8 -65, label %30
    i8 -97, label %33
    i8 -11, label %36
    i8 -12, label %39
    i8 -10, label %42
    i8 -42, label %45
    i8 -5, label %69
    i8 -40, label %75
  ]

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 11, i32* %28, align 8
  %29 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 1, i64* %29, align 8
  br label %169

30:                                               ; preds = %21
  %31 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 9, i32* %31, align 8
  %32 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 1, i64* %32, align 8
  br label %169

33:                                               ; preds = %21
  %34 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 10, i32* %34, align 8
  %35 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 1, i64* %35, align 8
  br label %169

36:                                               ; preds = %21
  %37 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 1, i32* %37, align 8
  %38 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 1, i64* %38, align 8
  br label %169

39:                                               ; preds = %21
  %40 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 2, i32* %40, align 8
  %41 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 1, i64* %41, align 8
  br label %169

42:                                               ; preds = %21
  %43 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 3, i32* %43, align 8
  %44 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 1, i64* %44, align 8
  br label %169

45:                                               ; preds = %21
  %46 = add nuw i64 %14, 1
  %47 = getelementptr inbounds i8, i8* %24, i64 %46
  %48 = sub i64 %17, %46
  %49 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 4
  %50 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %51 = tail call i64 @_ZN5crdtp4cbor9internals14ReadTokenStartENS_4spanIhEEPNS0_9MajorTypeEPm(i8* %47, i64 %48, i32* %49, i64* %50)
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %59, label %53

53:                                               ; preds = %45
  %54 = load i32, i32* %49, align 8
  %55 = icmp eq i32 %54, 2
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = load i64, i64* %50, align 8
  %58 = icmp ugt i64 %57, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %53, %45, %56
  %60 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %60, align 8
  store i32 21, i32* %15, align 8
  br label %169

61:                                               ; preds = %56
  %62 = add i64 %51, 1
  %63 = add i64 %62, %57
  %64 = icmp ugt i64 %63, %22
  %65 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  br i1 %64, label %66, label %67

66:                                               ; preds = %61
  store i32 0, i32* %65, align 8
  store i32 21, i32* %15, align 8
  br label %169

67:                                               ; preds = %61
  store i32 8, i32* %65, align 8
  %68 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %63, i64* %68, align 8
  br label %169

69:                                               ; preds = %21
  %70 = icmp ult i64 %22, 9
  %71 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  br i1 %70, label %72, label %73

72:                                               ; preds = %69
  store i32 0, i32* %71, align 8
  store i32 15, i32* %15, align 8
  br label %169

73:                                               ; preds = %69
  store i32 5, i32* %71, align 8
  %74 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 9, i64* %74, align 8
  br label %169

75:                                               ; preds = %21
  %76 = icmp ult i64 %22, 6
  br i1 %76, label %77, label %79

77:                                               ; preds = %75
  %78 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %78, align 8
  store i32 16, i32* %15, align 8
  br label %169

79:                                               ; preds = %75
  %80 = add nuw i64 %14, 1
  %81 = getelementptr inbounds i8, i8* %24, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = icmp eq i8 %82, 90
  br i1 %83, label %86, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %85, align 8
  store i32 16, i32* %15, align 8
  br label %169

86:                                               ; preds = %79
  %87 = add i64 %14, 2
  %88 = getelementptr inbounds i8, i8* %24, i64 %87
  %89 = getelementptr inbounds i8, i8* %88, i64 3
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i64
  %92 = getelementptr inbounds i8, i8* %88, i64 2
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i64
  %95 = shl nuw nsw i64 %94, 8
  %96 = or i64 %95, %91
  %97 = getelementptr inbounds i8, i8* %88, i64 1
  %98 = load i8, i8* %97, align 1
  %99 = zext i8 %98 to i64
  %100 = shl nuw nsw i64 %99, 16
  %101 = or i64 %96, %100
  %102 = load i8, i8* %88, align 1
  %103 = zext i8 %102 to i64
  %104 = shl nuw nsw i64 %103, 24
  %105 = or i64 %101, %104
  %106 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  store i64 %105, i64* %106, align 8
  %107 = add nuw nsw i64 %105, 6
  %108 = icmp ugt i64 %107, %22
  %109 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  br i1 %108, label %110, label %111

110:                                              ; preds = %86
  store i32 0, i32* %109, align 8
  store i32 16, i32* %15, align 8
  br label %169

111:                                              ; preds = %86
  store i32 12, i32* %109, align 8
  %112 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %107, i64* %112, align 8
  br label %169

113:                                              ; preds = %21
  %114 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 4
  %115 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %116 = tail call i64 @_ZN5crdtp4cbor9internals14ReadTokenStartENS_4spanIhEEPNS0_9MajorTypeEPm(i8* %25, i64 %22, i32* %114, i64* %115)
  %117 = load i32, i32* %114, align 8
  switch i32 %117, label %169 [
    i32 0, label %118
    i32 1, label %128
    i32 3, label %138
    i32 2, label %152
    i32 4, label %167
    i32 5, label %167
    i32 6, label %167
    i32 7, label %167
  ]

118:                                              ; preds = %113
  %119 = icmp eq i64 %116, 0
  br i1 %119, label %123, label %120

120:                                              ; preds = %118
  %121 = load i64, i64* %115, align 8
  %122 = icmp ugt i64 %121, 2147483647
  br i1 %122, label %123, label %125

123:                                              ; preds = %118, %120
  %124 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %124, align 8
  store i32 14, i32* %15, align 8
  br label %169

125:                                              ; preds = %120
  %126 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 4, i32* %126, align 8
  %127 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %116, i64* %127, align 8
  br label %169

128:                                              ; preds = %113
  %129 = icmp eq i64 %116, 0
  br i1 %129, label %133, label %130

130:                                              ; preds = %128
  %131 = load i64, i64* %115, align 8
  %132 = icmp ugt i64 %131, 2147483647
  br i1 %132, label %133, label %135

133:                                              ; preds = %128, %130
  %134 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %134, align 8
  store i32 14, i32* %15, align 8
  br label %169

135:                                              ; preds = %130
  %136 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 4, i32* %136, align 8
  %137 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %116, i64* %137, align 8
  br label %169

138:                                              ; preds = %113
  %139 = icmp eq i64 %116, 0
  br i1 %139, label %143, label %140

140:                                              ; preds = %138
  %141 = load i64, i64* %115, align 8
  %142 = icmp ugt i64 %141, 4611686018427387903
  br i1 %142, label %143, label %145

143:                                              ; preds = %138, %140
  %144 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %144, align 8
  store i32 19, i32* %15, align 8
  br label %169

145:                                              ; preds = %140
  %146 = add i64 %141, %116
  %147 = icmp ugt i64 %146, %22
  %148 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  br i1 %147, label %149, label %150

149:                                              ; preds = %145
  store i32 0, i32* %148, align 8
  store i32 19, i32* %15, align 8
  br label %169

150:                                              ; preds = %145
  store i32 6, i32* %148, align 8
  %151 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %146, i64* %151, align 8
  br label %169

152:                                              ; preds = %113
  %153 = icmp eq i64 %116, 0
  br i1 %153, label %158, label %154

154:                                              ; preds = %152
  %155 = load i64, i64* %115, align 8
  %156 = and i64 %155, -4611686018427387903
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %160, label %158

158:                                              ; preds = %154, %152
  %159 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %159, align 8
  store i32 20, i32* %15, align 8
  br label %169

160:                                              ; preds = %154
  %161 = add i64 %155, %116
  %162 = icmp ugt i64 %161, %22
  %163 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  br i1 %162, label %164, label %165

164:                                              ; preds = %160
  store i32 0, i32* %163, align 8
  store i32 20, i32* %15, align 8
  br label %169

165:                                              ; preds = %160
  store i32 7, i32* %163, align 8
  %166 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %161, i64* %166, align 8
  br label %169

167:                                              ; preds = %113, %113, %113, %113
  %168 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %168, align 8
  store i32 22, i32* %15, align 8
  br label %169

169:                                              ; preds = %27, %30, %33, %36, %39, %42, %72, %73, %77, %84, %66, %67, %59, %111, %110, %167, %158, %143, %133, %135, %123, %125, %150, %149, %165, %164, %113, %19
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5crdtp4cbor13CBORTokenizerD2Ev(%"class.crdtp::cbor::CBORTokenizer"* nocapture) unnamed_addr #4 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5crdtp4cbor13CBORTokenizer8TokenTagEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor13CBORTokenizer4NextEv(%"class.crdtp::cbor::CBORTokenizer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %4 [
    i32 0, label %5
    i32 13, label %5
  ]

4:                                                ; preds = %1
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %0, i1 zeroext false)
  br label %5

5:                                                ; preds = %1, %1, %4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor13CBORTokenizer13EnterEnvelopeEv(%"class.crdtp::cbor::CBORTokenizer"*) local_unnamed_addr #0 align 2 {
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %0, i1 zeroext true)
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i32, i64 } @_ZNK5crdtp4cbor13CBORTokenizer6StatusEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = insertvalue { i32, i64 } undef, i32 %3, 0
  %7 = insertvalue { i32, i64 } %6, i64 %5, 1
  ret { i32, i64 } %7
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5crdtp4cbor13CBORTokenizer8GetInt32Ev(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 4
  %3 = load i32, i32* %2, align 8
  %4 = icmp ne i32 %3, 0
  %5 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %6 = load i64, i64* %5, align 8
  %7 = sext i1 %4 to i64
  %8 = xor i64 %6, %7
  %9 = trunc i64 %8 to i32
  ret i32 %9
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @_ZNK5crdtp4cbor13CBORTokenizer9GetDoubleEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 1
  %5 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds i8, i8* %6, i64 %4
  %8 = getelementptr inbounds i8, i8* %7, i64 7
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 6
  %12 = load i8, i8* %11, align 1
  %13 = zext i8 %12 to i64
  %14 = shl nuw nsw i64 %13, 8
  %15 = or i64 %14, %10
  %16 = getelementptr inbounds i8, i8* %7, i64 5
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i64
  %19 = shl nuw nsw i64 %18, 16
  %20 = or i64 %15, %19
  %21 = getelementptr inbounds i8, i8* %7, i64 4
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i64
  %24 = shl nuw nsw i64 %23, 24
  %25 = or i64 %20, %24
  %26 = getelementptr inbounds i8, i8* %7, i64 3
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i64
  %29 = shl nuw nsw i64 %28, 32
  %30 = or i64 %25, %29
  %31 = getelementptr inbounds i8, i8* %7, i64 2
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i64
  %34 = shl nuw nsw i64 %33, 40
  %35 = or i64 %30, %34
  %36 = getelementptr inbounds i8, i8* %7, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i64
  %39 = shl nuw nsw i64 %38, 48
  %40 = or i64 %35, %39
  %41 = load i8, i8* %7, align 1
  %42 = zext i8 %41 to i64
  %43 = shl nuw i64 %42, 56
  %44 = or i64 %40, %43
  %45 = bitcast i64 %44 to double
  ret double %45
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK5crdtp4cbor13CBORTokenizer10GetString8Ev(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %3
  %9 = add i64 %8, %7
  %10 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  %13 = insertvalue { i8*, i64 } undef, i8* %12, 0
  %14 = insertvalue { i8*, i64 } %13, i64 %3, 1
  ret { i8*, i64 } %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK5crdtp4cbor13CBORTokenizer18GetString16WireRepEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %3
  %9 = add i64 %8, %7
  %10 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  %13 = insertvalue { i8*, i64 } undef, i8* %12, 0
  %14 = insertvalue { i8*, i64 } %13, i64 %3, 1
  ret { i8*, i64 } %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK5crdtp4cbor13CBORTokenizer9GetBinaryEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %3
  %9 = add i64 %8, %7
  %10 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds i8, i8* %11, i64 %9
  %13 = insertvalue { i8*, i64 } undef, i8* %12, 0
  %14 = insertvalue { i8*, i64 } %13, i64 %3, 1
  ret { i8*, i64 } %14
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK5crdtp4cbor13CBORTokenizer11GetEnvelopeEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %3, 6
  %7 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 %5
  %10 = insertvalue { i8*, i64 } undef, i8* %9, 0
  %11 = insertvalue { i8*, i64 } %10, i64 %6, 1
  ret { i8*, i64 } %11
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i8*, i64 } @_ZNK5crdtp4cbor13CBORTokenizer19GetEnvelopeContentsEv(%"class.crdtp::cbor::CBORTokenizer"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = add i64 %5, 6
  %7 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 %6
  %10 = insertvalue { i8*, i64 } undef, i8* %9, 0
  %11 = insertvalue { i8*, i64 } %10, i64 %3, 1
  ret { i8*, i64 } %11
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5crdtp4cbor13CBORTokenizer8SetTokenENS0_12CBORTokenTagEm(%"class.crdtp::cbor::CBORTokenizer"* nocapture, i32, i64) local_unnamed_addr #8 align 2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 8
  %5 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5crdtp4cbor13CBORTokenizer8SetErrorENS_5ErrorE(%"class.crdtp::cbor::CBORTokenizer"* nocapture, i32) local_unnamed_addr #8 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 0
  store i32 %1, i32* %4, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5crdtp4cbor9ParseCBORENS_4spanIhEEPNS_13ParserHandlerE(i8*, i64, %"class.crdtp::ParserHandler"*) local_unnamed_addr #2 {
  %4 = alloca %"class.crdtp::cbor::CBORTokenizer", align 8
  %5 = icmp eq i64 %1, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %8 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %7, align 8
  %9 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %8, i64 13
  %10 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %9, align 8
  tail call void %10(%"class.crdtp::ParserHandler"* %2, i32 23, i64 0) #14
  br label %45

11:                                               ; preds = %3
  %12 = bitcast %"class.crdtp::cbor::CBORTokenizer"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %12) #14
  %13 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %4, i64 0, i32 1
  %14 = bitcast i32* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 48, i1 false)
  %15 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %4, i64 0, i32 0, i32 0
  store i8* %0, i8** %15, align 8
  %16 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %4, i64 0, i32 0, i32 1
  store i64 %1, i64* %16, align 8
  %17 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %4, i64 0, i32 2, i32 0
  store i32 0, i32* %17, align 8
  %18 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %4, i64 0, i32 2, i32 1
  store i64 -1, i64* %18, align 8
  call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* nonnull %4, i1 zeroext false) #14
  %19 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %4, i64 0, i32 1
  %20 = load i32, i32* %19, align 8
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %11
  %23 = load i32, i32* %17, align 8
  %24 = load i64, i64* %18, align 8
  %25 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %26 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %26, i64 13
  %28 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %27, align 8
  call void %28(%"class.crdtp::ParserHandler"* %2, i32 %23, i64 %24) #14
  br label %44

29:                                               ; preds = %11
  %30 = call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseValueEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 0, %"class.crdtp::cbor::CBORTokenizer"* nonnull %4, %"class.crdtp::ParserHandler"* %2)
  br i1 %30, label %31, label %44

31:                                               ; preds = %29
  %32 = load i32, i32* %19, align 8
  %33 = icmp eq i32 %32, 13
  br i1 %33, label %44, label %34

34:                                               ; preds = %31
  %35 = icmp eq i32 %32, 0
  %36 = load i64, i64* %18, align 8
  %37 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %38 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %37, align 8
  %39 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %38, i64 13
  %40 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %39, align 8
  br i1 %35, label %41, label %43

41:                                               ; preds = %34
  %42 = load i32, i32* %17, align 8
  call void %40(%"class.crdtp::ParserHandler"* %2, i32 %42, i64 %36) #14
  br label %44

43:                                               ; preds = %34
  call void %40(%"class.crdtp::ParserHandler"* %2, i32 31, i64 %36) #14
  br label %44

44:                                               ; preds = %31, %29, %43, %41, %22
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %12) #14
  br label %45

45:                                               ; preds = %44, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseValueEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32, %"class.crdtp::cbor::CBORTokenizer"*, %"class.crdtp::ParserHandler"*) unnamed_addr #2 {
  %4 = icmp sgt i32 %0, 300
  br i1 %4, label %5, label %12

5:                                                ; preds = %3
  %6 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %9 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %9, i64 13
  %11 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %10, align 8
  tail call void %11(%"class.crdtp::ParserHandler"* %2, i32 30, i64 %7) #14
  br label %204

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 1
  %14 = load i32, i32* %13, align 8
  switch i32 %14, label %197 [
    i32 0, label %15
    i32 13, label %24
    i32 12, label %31
    i32 1, label %67
    i32 2, label %74
    i32 3, label %81
    i32 4, label %88
    i32 5, label %103
    i32 6, label %154
    i32 7, label %172
    i32 8, label %173
    i32 9, label %191
    i32 10, label %194
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %21 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %21, i64 13
  %23 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %22, align 8
  tail call void %23(%"class.crdtp::ParserHandler"* %2, i32 %17, i64 %19) #14
  br label %204

24:                                               ; preds = %12
  %25 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %28 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %27, align 8
  %29 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %28, i64 13
  %30 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %29, align 8
  tail call void %30(%"class.crdtp::ParserHandler"* %2, i32 25, i64 %26) #14
  br label %204

31:                                               ; preds = %12
  %32 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 6
  %35 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 5
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %34, %36
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext true) #14
  %38 = load i32, i32* %13, align 8
  switch i32 %38, label %53 [
    i32 0, label %39
    i32 9, label %47
    i32 10, label %50
  ]

39:                                               ; preds = %31
  %40 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = load i64, i64* %32, align 8
  %43 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %44 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %43, align 8
  %45 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %44, i64 13
  %46 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %45, align 8
  tail call void %46(%"class.crdtp::ParserHandler"* %2, i32 %41, i64 %42) #14
  br label %204

47:                                               ; preds = %31
  %48 = add nsw i32 %0, 1
  %49 = tail call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_18ParseMapEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 %48, %"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2) #14
  br i1 %49, label %59, label %204

50:                                               ; preds = %31
  %51 = add nsw i32 %0, 1
  %52 = tail call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseArrayEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 %51, %"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2) #14
  br i1 %52, label %59, label %204

53:                                               ; preds = %31
  %54 = load i64, i64* %32, align 8
  %55 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %56 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %55, align 8
  %57 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %56, i64 13
  %58 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %57, align 8
  tail call void %58(%"class.crdtp::ParserHandler"* %2, i32 18, i64 %54) #14
  br label %204

59:                                               ; preds = %50, %47
  %60 = load i64, i64* %32, align 8
  %61 = icmp eq i64 %37, %60
  br i1 %61, label %204, label %62

62:                                               ; preds = %59
  %63 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %64 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %63, align 8
  %65 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %64, i64 13
  %66 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %65, align 8
  tail call void %66(%"class.crdtp::ParserHandler"* %2, i32 17, i64 %60) #14
  br label %204

67:                                               ; preds = %12
  %68 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i1)***
  %69 = load void (%"class.crdtp::ParserHandler"*, i1)**, void (%"class.crdtp::ParserHandler"*, i1)*** %68, align 8
  %70 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i1)*, void (%"class.crdtp::ParserHandler"*, i1)** %69, i64 11
  %71 = load void (%"class.crdtp::ParserHandler"*, i1)*, void (%"class.crdtp::ParserHandler"*, i1)** %70, align 8
  tail call void %71(%"class.crdtp::ParserHandler"* %2, i1 zeroext true) #14
  %72 = load i32, i32* %13, align 8
  switch i32 %72, label %73 [
    i32 0, label %204
    i32 13, label %204
  ]

73:                                               ; preds = %67
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

74:                                               ; preds = %12
  %75 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i1)***
  %76 = load void (%"class.crdtp::ParserHandler"*, i1)**, void (%"class.crdtp::ParserHandler"*, i1)*** %75, align 8
  %77 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i1)*, void (%"class.crdtp::ParserHandler"*, i1)** %76, i64 11
  %78 = load void (%"class.crdtp::ParserHandler"*, i1)*, void (%"class.crdtp::ParserHandler"*, i1)** %77, align 8
  tail call void %78(%"class.crdtp::ParserHandler"* %2, i1 zeroext false) #14
  %79 = load i32, i32* %13, align 8
  switch i32 %79, label %80 [
    i32 0, label %204
    i32 13, label %204
  ]

80:                                               ; preds = %74
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

81:                                               ; preds = %12
  %82 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*)***
  %83 = load void (%"class.crdtp::ParserHandler"*)**, void (%"class.crdtp::ParserHandler"*)*** %82, align 8
  %84 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %83, i64 12
  %85 = load void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %84, align 8
  tail call void %85(%"class.crdtp::ParserHandler"* %2) #14
  %86 = load i32, i32* %13, align 8
  switch i32 %86, label %87 [
    i32 0, label %204
    i32 13, label %204
  ]

87:                                               ; preds = %81
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

88:                                               ; preds = %12
  %89 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 4
  %90 = load i32, i32* %89, align 8
  %91 = icmp ne i32 %90, 0
  %92 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 5
  %93 = load i64, i64* %92, align 8
  %94 = sext i1 %91 to i64
  %95 = xor i64 %93, %94
  %96 = trunc i64 %95 to i32
  %97 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32)***
  %98 = load void (%"class.crdtp::ParserHandler"*, i32)**, void (%"class.crdtp::ParserHandler"*, i32)*** %97, align 8
  %99 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32)*, void (%"class.crdtp::ParserHandler"*, i32)** %98, i64 10
  %100 = load void (%"class.crdtp::ParserHandler"*, i32)*, void (%"class.crdtp::ParserHandler"*, i32)** %99, align 8
  tail call void %100(%"class.crdtp::ParserHandler"* %2, i32 %96) #14
  %101 = load i32, i32* %13, align 8
  switch i32 %101, label %102 [
    i32 0, label %204
    i32 13, label %204
  ]

102:                                              ; preds = %88
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

103:                                              ; preds = %12
  %104 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = add i64 %105, 1
  %107 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 %106
  %110 = getelementptr inbounds i8, i8* %109, i64 7
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i64
  %113 = getelementptr inbounds i8, i8* %109, i64 6
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i64
  %116 = shl nuw nsw i64 %115, 8
  %117 = or i64 %116, %112
  %118 = getelementptr inbounds i8, i8* %109, i64 5
  %119 = load i8, i8* %118, align 1
  %120 = zext i8 %119 to i64
  %121 = shl nuw nsw i64 %120, 16
  %122 = or i64 %117, %121
  %123 = getelementptr inbounds i8, i8* %109, i64 4
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i64
  %126 = shl nuw nsw i64 %125, 24
  %127 = or i64 %122, %126
  %128 = getelementptr inbounds i8, i8* %109, i64 3
  %129 = load i8, i8* %128, align 1
  %130 = zext i8 %129 to i64
  %131 = shl nuw nsw i64 %130, 32
  %132 = or i64 %127, %131
  %133 = getelementptr inbounds i8, i8* %109, i64 2
  %134 = load i8, i8* %133, align 1
  %135 = zext i8 %134 to i64
  %136 = shl nuw nsw i64 %135, 40
  %137 = or i64 %132, %136
  %138 = getelementptr inbounds i8, i8* %109, i64 1
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i64
  %141 = shl nuw nsw i64 %140, 48
  %142 = or i64 %137, %141
  %143 = load i8, i8* %109, align 1
  %144 = zext i8 %143 to i64
  %145 = shl nuw i64 %144, 56
  %146 = or i64 %142, %145
  %147 = bitcast i64 %146 to double
  %148 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, double)***
  %149 = load void (%"class.crdtp::ParserHandler"*, double)**, void (%"class.crdtp::ParserHandler"*, double)*** %148, align 8
  %150 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, double)*, void (%"class.crdtp::ParserHandler"*, double)** %149, i64 9
  %151 = load void (%"class.crdtp::ParserHandler"*, double)*, void (%"class.crdtp::ParserHandler"*, double)** %150, align 8
  tail call void %151(%"class.crdtp::ParserHandler"* %2, double %147) #14
  %152 = load i32, i32* %13, align 8
  switch i32 %152, label %153 [
    i32 0, label %204
    i32 13, label %204
  ]

153:                                              ; preds = %103
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

154:                                              ; preds = %12
  %155 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 5
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 3
  %160 = load i64, i64* %159, align 8
  %161 = sub i64 %158, %156
  %162 = add i64 %161, %160
  %163 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = getelementptr inbounds i8, i8* %164, i64 %162
  %166 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i8*, i64)***
  %167 = load void (%"class.crdtp::ParserHandler"*, i8*, i64)**, void (%"class.crdtp::ParserHandler"*, i8*, i64)*** %166, align 8
  %168 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i8*, i64)*, void (%"class.crdtp::ParserHandler"*, i8*, i64)** %167, i64 6
  %169 = load void (%"class.crdtp::ParserHandler"*, i8*, i64)*, void (%"class.crdtp::ParserHandler"*, i8*, i64)** %168, align 8
  tail call void %169(%"class.crdtp::ParserHandler"* %2, i8* %165, i64 %156) #14
  %170 = load i32, i32* %13, align 8
  switch i32 %170, label %171 [
    i32 0, label %204
    i32 13, label %204
  ]

171:                                              ; preds = %154
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

172:                                              ; preds = %12
  tail call fastcc void @_ZN5crdtp4cbor12_GLOBAL__N_116ParseUTF16StringEPNS0_13CBORTokenizerEPNS_13ParserHandlerE(%"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2)
  br label %204

173:                                              ; preds = %12
  %174 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 5
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 3
  %179 = load i64, i64* %178, align 8
  %180 = sub i64 %177, %175
  %181 = add i64 %180, %179
  %182 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds i8, i8* %183, i64 %181
  %185 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i8*, i64)***
  %186 = load void (%"class.crdtp::ParserHandler"*, i8*, i64)**, void (%"class.crdtp::ParserHandler"*, i8*, i64)*** %185, align 8
  %187 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i8*, i64)*, void (%"class.crdtp::ParserHandler"*, i8*, i64)** %186, i64 8
  %188 = load void (%"class.crdtp::ParserHandler"*, i8*, i64)*, void (%"class.crdtp::ParserHandler"*, i8*, i64)** %187, align 8
  tail call void %188(%"class.crdtp::ParserHandler"* %2, i8* %184, i64 %175) #14
  %189 = load i32, i32* %13, align 8
  switch i32 %189, label %190 [
    i32 0, label %204
    i32 13, label %204
  ]

190:                                              ; preds = %173
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %204

191:                                              ; preds = %12
  %192 = add nsw i32 %0, 1
  %193 = tail call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_18ParseMapEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 %192, %"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2)
  br label %204

194:                                              ; preds = %12
  %195 = add nsw i32 %0, 1
  %196 = tail call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseArrayEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 %195, %"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2)
  br label %204

197:                                              ; preds = %12
  %198 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %201 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %200, align 8
  %202 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %201, i64 13
  %203 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %202, align 8
  tail call void %203(%"class.crdtp::ParserHandler"* %2, i32 22, i64 %199) #14
  br label %204

204:                                              ; preds = %190, %173, %173, %171, %154, %154, %153, %103, %103, %102, %88, %88, %87, %81, %81, %80, %74, %74, %73, %67, %67, %62, %59, %53, %50, %47, %39, %197, %194, %191, %172, %24, %15, %5
  %205 = phi i1 [ false, %5 ], [ false, %197 ], [ %196, %194 ], [ %193, %191 ], [ true, %172 ], [ false, %24 ], [ false, %15 ], [ false, %53 ], [ false, %62 ], [ false, %39 ], [ false, %47 ], [ false, %50 ], [ true, %59 ], [ true, %67 ], [ true, %67 ], [ true, %73 ], [ true, %74 ], [ true, %74 ], [ true, %80 ], [ true, %81 ], [ true, %81 ], [ true, %87 ], [ true, %88 ], [ true, %88 ], [ true, %102 ], [ true, %103 ], [ true, %103 ], [ true, %153 ], [ true, %154 ], [ true, %154 ], [ true, %171 ], [ true, %173 ], [ true, %173 ], [ true, %190 ]
  ret i1 %205
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, i64 } @_ZN5crdtp4cbor27AppendString8EntryToCBORMapENS_4spanIhEES2_PNSt3__16vectorIhNS3_9allocatorIhEEEE(i8*, i64, i8*, i64, %"class.std::__1::vector"*) local_unnamed_addr #2 {
  %6 = alloca %"class.crdtp::cbor::CBORTokenizer", align 8
  %7 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 1
  %10 = bitcast i8** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %4 to i64*
  %13 = ptrtoint i8* %8 to i64
  %14 = sub i64 %11, %13
  %15 = bitcast %"class.crdtp::cbor::CBORTokenizer"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %15) #14
  %16 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 1
  %17 = bitcast i32* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 48, i1 false)
  %18 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 0, i32 0
  store i8* %8, i8** %18, align 8
  %19 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 0, i32 1
  store i64 %14, i64* %19, align 8
  %20 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 2, i32 0
  store i32 0, i32* %20, align 8
  %21 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 2, i32 1
  store i64 -1, i64* %21, align 8
  call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* nonnull %6, i1 zeroext false) #14
  %22 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 1
  %23 = load i32, i32* %22, align 8
  switch i32 %23, label %137 [
    i32 0, label %24
    i32 12, label %27
  ]

24:                                               ; preds = %5
  %25 = load i32, i32* %20, align 8
  %26 = load i64, i64* %21, align 8
  br label %137

27:                                               ; preds = %5
  %28 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %6, i64 0, i32 5
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %21, align 8
  %31 = add i64 %30, 6
  %32 = load i8*, i8** %18, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %31
  %34 = load i64, i64* %10, align 8
  %35 = load i64, i64* %12, align 8
  %36 = sub i64 %34, %35
  %37 = add i64 %29, 6
  %38 = icmp eq i64 %36, %37
  %39 = inttoptr i64 %34 to i8*
  br i1 %38, label %40, label %137

40:                                               ; preds = %27
  %41 = icmp eq i64 %29, 0
  br i1 %41, label %137, label %42

42:                                               ; preds = %40
  %43 = load i8, i8* %33, align 1
  %44 = icmp eq i8 %43, -65
  br i1 %44, label %45, label %137

45:                                               ; preds = %42
  %46 = add i64 %14, -1
  %47 = getelementptr inbounds i8, i8* %8, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = icmp eq i8 %48, -1
  br i1 %49, label %52, label %50

50:                                               ; preds = %45
  %51 = add i64 %36, -1
  br label %137

52:                                               ; preds = %45
  %53 = getelementptr inbounds i8, i8* %39, i64 -1
  store i8* %53, i8** %9, align 8
  call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %1, %"class.std::__1::vector"* %4) #14
  %54 = load i8*, i8** %9, align 8
  %55 = getelementptr inbounds i8, i8* %0, i64 %1
  %56 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %4, i8* %54, i8* %0, i8* %55) #14
  call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %3, %"class.std::__1::vector"* %4) #14
  %57 = load i8*, i8** %9, align 8
  %58 = getelementptr inbounds i8, i8* %2, i64 %3
  %59 = call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %4, i8* %57, i8* %2, i8* %58) #14
  %60 = load i8*, i8** %9, align 8
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = icmp ult i8* %60, %62
  %64 = ptrtoint i8* %62 to i64
  br i1 %63, label %65, label %68

65:                                               ; preds = %52
  store i8 -1, i8* %60, align 1
  %66 = getelementptr inbounds i8, i8* %60, i64 1
  %67 = ptrtoint i8* %66 to i64
  store i64 %67, i64* %10, align 8
  br label %111

68:                                               ; preds = %52
  %69 = ptrtoint i8* %60 to i64
  %70 = load i64, i64* %12, align 8
  %71 = sub i64 %69, %70
  %72 = add i64 %71, 1
  %73 = icmp slt i64 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %75) #12
  unreachable

76:                                               ; preds = %68
  %77 = bitcast i8** %61 to i64*
  %78 = sub i64 %64, %70
  %79 = icmp ult i64 %78, 4611686018427387903
  br i1 %79, label %80, label %85

80:                                               ; preds = %76
  %81 = shl i64 %78, 1
  %82 = icmp ult i64 %81, %72
  %83 = select i1 %82, i64 %72, i64 %81
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %88, label %85

85:                                               ; preds = %80, %76
  %86 = phi i64 [ %83, %80 ], [ 9223372036854775807, %76 ]
  %87 = call i8* @_Znwm(i64 %86) #13
  br label %88

88:                                               ; preds = %85, %80
  %89 = phi i64 [ %86, %85 ], [ 0, %80 ]
  %90 = phi i8* [ %87, %85 ], [ null, %80 ]
  %91 = getelementptr inbounds i8, i8* %90, i64 %71
  %92 = getelementptr inbounds i8, i8* %90, i64 %89
  %93 = ptrtoint i8* %92 to i64
  store i8 -1, i8* %91, align 1
  %94 = getelementptr inbounds i8, i8* %91, i64 1
  %95 = ptrtoint i8* %94 to i64
  %96 = load i8*, i8** %7, align 8
  %97 = load i64, i64* %10, align 8
  %98 = ptrtoint i8* %96 to i64
  %99 = sub i64 %97, %98
  %100 = sub i64 0, %99
  %101 = getelementptr inbounds i8, i8* %91, i64 %100
  %102 = ptrtoint i8* %101 to i64
  %103 = icmp sgt i64 %99, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %88
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %101, i8* align 1 %96, i64 %99, i1 false) #14
  %105 = load i8*, i8** %7, align 8
  br label %106

106:                                              ; preds = %104, %88
  %107 = phi i8* [ %96, %88 ], [ %105, %104 ]
  store i64 %102, i64* %12, align 8
  store i64 %95, i64* %10, align 8
  store i64 %93, i64* %77, align 8
  %108 = icmp eq i8* %107, null
  br i1 %108, label %111, label %109

109:                                              ; preds = %106
  call void @_ZdlPv(i8* nonnull %107) #13
  %110 = load i64, i64* %10, align 8
  br label %111

111:                                              ; preds = %65, %106, %109
  %112 = phi i64 [ %67, %65 ], [ %95, %106 ], [ %110, %109 ]
  %113 = load i64, i64* %12, align 8
  %114 = sub i64 %112, %113
  %115 = sub i64 %114, %36
  %116 = add i64 %115, %29
  %117 = icmp ugt i64 %116, 4294967295
  br i1 %117, label %137, label %118

118:                                              ; preds = %111
  %119 = sub i64 %114, %116
  %120 = add i64 %119, -4
  %121 = icmp ugt i64 %114, %120
  br i1 %121, label %124, label %122

122:                                              ; preds = %118
  %123 = bitcast %"class.std::__1::vector"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %123) #12
  unreachable

124:                                              ; preds = %118
  %125 = inttoptr i64 %113 to i8*
  %126 = getelementptr inbounds i8, i8* %125, i64 %120
  %127 = lshr i64 %116, 24
  %128 = trunc i64 %127 to i8
  %129 = getelementptr inbounds i8, i8* %126, i64 1
  store i8 %128, i8* %126, align 1
  %130 = lshr i64 %116, 16
  %131 = trunc i64 %130 to i8
  %132 = getelementptr inbounds i8, i8* %126, i64 2
  store i8 %131, i8* %129, align 1
  %133 = lshr i64 %116, 8
  %134 = trunc i64 %133 to i8
  %135 = getelementptr inbounds i8, i8* %126, i64 3
  store i8 %134, i8* %132, align 1
  %136 = trunc i64 %116 to i8
  store i8 %136, i8* %135, align 1
  br label %137

137:                                              ; preds = %5, %111, %42, %40, %27, %50, %124, %24
  %138 = phi i64 [ %26, %24 ], [ -1, %124 ], [ %51, %50 ], [ 0, %27 ], [ 6, %40 ], [ 6, %42 ], [ 0, %111 ], [ 0, %5 ]
  %139 = phi i32 [ %25, %24 ], [ 0, %124 ], [ 33, %50 ], [ 16, %27 ], [ 32, %40 ], [ 32, %42 ], [ 35, %111 ], [ 16, %5 ]
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %15) #14
  %140 = insertvalue { i32, i64 } undef, i32 %139, 0
  %141 = insertvalue { i32, i64 } %140, i64 %138, 1
  ret { i32, i64 } %141
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoderD2Ev(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5crdtp4cbor12_GLOBAL__N_111CBOREncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %3, align 8
  %5 = icmp eq %"class.crdtp::cbor::EnvelopeEncoder"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %4 to i64
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #13
  br label %11

11:                                               ; preds = %1, %6
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoderD0Ev(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVN5crdtp4cbor12_GLOBAL__N_111CBOREncoderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 0
  %4 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %3, align 8
  %5 = icmp eq %"class.crdtp::cbor::EnvelopeEncoder"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %4 to i64
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %9 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %4 to i8*
  tail call void @_ZdlPv(i8* %10) #13
  br label %11

11:                                               ; preds = %1, %6
  %12 = bitcast %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0 to i8*
  tail call void @_ZdlPv(i8* %12) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder14HandleMapBeginEv(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %3 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %139

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %9, align 8
  %11 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %11, align 8
  %13 = icmp ult %"class.crdtp::cbor::EnvelopeEncoder"* %10, %12
  %14 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %12 to i64
  br i1 %13, label %15, label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %10, i64 0, i32 0
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %10, i64 1
  %18 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %17 to i64
  %19 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %9 to i64*
  store i64 %18, i64* %19, align 8
  br label %78

20:                                               ; preds = %7
  %21 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %10 to i64
  %22 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %9 to i64*
  %23 = bitcast %"class.std::__1::vector.6"* %8 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = ashr exact i64 %25, 3
  %27 = add nsw i64 %26, 1
  %28 = icmp ugt i64 %27, 2305843009213693951
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = bitcast %"class.std::__1::vector.6"* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %30) #12
  unreachable

31:                                               ; preds = %20
  %32 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %11 to i64*
  %33 = sub i64 %14, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, 1152921504606846975
  br i1 %35, label %36, label %44

36:                                               ; preds = %31
  %37 = ashr exact i64 %33, 2
  %38 = icmp ult i64 %37, %27
  %39 = select i1 %38, i64 %27, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = icmp ugt i64 %39, 2305843009213693951
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @abort() #12
  unreachable

44:                                               ; preds = %41, %31
  %45 = phi i64 [ %39, %41 ], [ 2305843009213693951, %31 ]
  %46 = shl i64 %45, 3
  %47 = tail call i8* @_Znwm(i64 %46) #13
  %48 = bitcast i8* %47 to %"class.crdtp::cbor::EnvelopeEncoder"*
  br label %49

49:                                               ; preds = %44, %36
  %50 = phi i64 [ %45, %44 ], [ 0, %36 ]
  %51 = phi %"class.crdtp::cbor::EnvelopeEncoder"* [ %48, %44 ], [ null, %36 ]
  %52 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %51, i64 %26
  %53 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %51, i64 %50
  %54 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %53 to i64
  %55 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %52, i64 0, i32 0
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %52, i64 1
  %57 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %8, i64 0, i32 0, i32 0
  %59 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %58, align 8
  %60 = load i64, i64* %22, align 8
  %61 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %59 to i64
  %62 = sub i64 %60, %61
  %63 = ashr exact i64 %62, 3
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %52, i64 %64
  %66 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %65 to i64
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %49
  %69 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %65 to i8*
  %70 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 %62, i1 false) #14
  %71 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %58, align 8
  br label %72

72:                                               ; preds = %68, %49
  %73 = phi %"class.crdtp::cbor::EnvelopeEncoder"* [ %59, %49 ], [ %71, %68 ]
  store i64 %66, i64* %23, align 8
  store i64 %57, i64* %22, align 8
  store i64 %54, i64* %32, align 8
  %74 = icmp eq %"class.crdtp::cbor::EnvelopeEncoder"* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %73 to i8*
  tail call void @_ZdlPv(i8* %76) #13
  %77 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %9, align 8
  br label %78

78:                                               ; preds = %15, %72, %75
  %79 = phi %"class.crdtp::cbor::EnvelopeEncoder"* [ %17, %15 ], [ %56, %72 ], [ %77, %75 ]
  %80 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %79, i64 -1
  %81 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %82 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %81, align 8
  tail call void @_ZN5crdtp4cbor15EnvelopeEncoder11EncodeStartEPNSt3__16vectorIhNS2_9allocatorIhEEEE(%"class.crdtp::cbor::EnvelopeEncoder"* %80, %"class.std::__1::vector"* %82)
  %83 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %81, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %83, i64 0, i32 0, i32 1
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %83, i64 0, i32 0, i32 2, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = icmp eq i8* %85, %87
  %89 = ptrtoint i8* %87 to i64
  br i1 %88, label %94, label %90

90:                                               ; preds = %78
  store i8 -65, i8* %85, align 1
  %91 = getelementptr inbounds i8, i8* %85, i64 1
  %92 = ptrtoint i8* %91 to i64
  %93 = bitcast i8** %84 to i64*
  store i64 %92, i64* %93, align 8
  br label %139

94:                                               ; preds = %78
  %95 = ptrtoint i8* %85 to i64
  %96 = bitcast i8** %84 to i64*
  %97 = bitcast %"class.std::__1::vector"* %83 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %95, %98
  %100 = add i64 %99, 1
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %94
  %103 = bitcast %"class.std::__1::vector"* %83 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %103) #12
  unreachable

104:                                              ; preds = %94
  %105 = bitcast i8** %86 to i64*
  %106 = sub i64 %89, %98
  %107 = icmp ult i64 %106, 4611686018427387903
  br i1 %107, label %108, label %113

108:                                              ; preds = %104
  %109 = shl i64 %106, 1
  %110 = icmp ult i64 %109, %100
  %111 = select i1 %110, i64 %100, i64 %109
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %108, %104
  %114 = phi i64 [ %111, %108 ], [ 9223372036854775807, %104 ]
  %115 = tail call i8* @_Znwm(i64 %114) #13
  br label %116

116:                                              ; preds = %113, %108
  %117 = phi i64 [ %114, %113 ], [ 0, %108 ]
  %118 = phi i8* [ %115, %113 ], [ null, %108 ]
  %119 = getelementptr inbounds i8, i8* %118, i64 %99
  %120 = getelementptr inbounds i8, i8* %118, i64 %117
  %121 = ptrtoint i8* %120 to i64
  store i8 -65, i8* %119, align 1
  %122 = getelementptr inbounds i8, i8* %119, i64 1
  %123 = ptrtoint i8* %122 to i64
  %124 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %83, i64 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = load i64, i64* %96, align 8
  %127 = ptrtoint i8* %125 to i64
  %128 = sub i64 %126, %127
  %129 = sub i64 0, %128
  %130 = getelementptr inbounds i8, i8* %119, i64 %129
  %131 = ptrtoint i8* %130 to i64
  %132 = icmp sgt i64 %128, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %116
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 %125, i64 %128, i1 false) #14
  %134 = load i8*, i8** %124, align 8
  br label %135

135:                                              ; preds = %133, %116
  %136 = phi i8* [ %125, %116 ], [ %134, %133 ]
  store i64 %131, i64* %97, align 8
  store i64 %123, i64* %96, align 8
  store i64 %121, i64* %105, align 8
  %137 = icmp eq i8* %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %135
  tail call void @_ZdlPv(i8* nonnull %136) #13
  br label %139

139:                                              ; preds = %138, %135, %90, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder12HandleMapEndEv(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %3 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %111

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %11, %13
  %15 = ptrtoint i8* %13 to i64
  br i1 %14, label %20, label %16

16:                                               ; preds = %7
  store i8 -1, i8* %11, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8** %10 to i64*
  store i64 %18, i64* %19, align 8
  br label %65

20:                                               ; preds = %7
  %21 = ptrtoint i8* %11 to i64
  %22 = bitcast i8** %10 to i64*
  %23 = bitcast %"class.std::__1::vector"* %9 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = add i64 %25, 1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %20
  %29 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %20
  %31 = bitcast i8** %12 to i64*
  %32 = sub i64 %15, %24
  %33 = icmp ult i64 %32, 4611686018427387903
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = shl i64 %32, 1
  %36 = icmp ult i64 %35, %26
  %37 = select i1 %36, i64 %26, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %34, %30
  %40 = phi i64 [ %37, %34 ], [ 9223372036854775807, %30 ]
  %41 = tail call i8* @_Znwm(i64 %40) #13
  br label %42

42:                                               ; preds = %39, %34
  %43 = phi i64 [ %40, %39 ], [ 0, %34 ]
  %44 = phi i8* [ %41, %39 ], [ null, %34 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %25
  %46 = getelementptr inbounds i8, i8* %44, i64 %43
  %47 = ptrtoint i8* %46 to i64
  store i8 -1, i8* %45, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  %49 = ptrtoint i8* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i64, i64* %22, align 8
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %52, %53
  %55 = sub i64 0, %54
  %56 = getelementptr inbounds i8, i8* %45, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp sgt i64 %54, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %42
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %51, i64 %54, i1 false) #14
  %60 = load i8*, i8** %50, align 8
  br label %61

61:                                               ; preds = %59, %42
  %62 = phi i8* [ %51, %42 ], [ %60, %59 ]
  store i64 %57, i64* %23, align 8
  store i64 %49, i64* %22, align 8
  store i64 %47, i64* %31, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %61
  tail call void @_ZdlPv(i8* nonnull %62) #13
  br label %65

65:                                               ; preds = %16, %61, %64
  %66 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %67 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %66, align 8
  %68 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %69 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %68, i64 0, i32 0, i32 1
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.std::__1::vector"* %68 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %71, %73
  %75 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %67, i64 -1, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 -4, %76
  %78 = add i64 %77, %74
  %79 = icmp ugt i64 %78, 4294967295
  br i1 %79, label %80, label %85

80:                                               ; preds = %65
  %81 = bitcast %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0 to void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)***
  %82 = load void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)**, void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)*** %81, align 8
  %83 = getelementptr inbounds void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)*, void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)** %82, i64 13
  %84 = load void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)*, void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)** %83, align 8
  tail call void %84(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i32 35, i64 %74) #14
  br label %111

85:                                               ; preds = %65
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %68, i64 0, i32 0, i32 0
  %87 = lshr i64 %78, 24
  %88 = trunc i64 %87 to i8
  %89 = add i64 %76, 1
  store i64 %89, i64* %75, align 8
  %90 = load i8*, i8** %86, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %76
  store i8 %88, i8* %91, align 1
  %92 = lshr i64 %78, 16
  %93 = trunc i64 %92 to i8
  %94 = load i64, i64* %75, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %75, align 8
  %96 = load i8*, i8** %86, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 %94
  store i8 %93, i8* %97, align 1
  %98 = lshr i64 %78, 8
  %99 = trunc i64 %98 to i8
  %100 = load i64, i64* %75, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %75, align 8
  %102 = load i8*, i8** %86, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 %100
  store i8 %99, i8* %103, align 1
  %104 = trunc i64 %78 to i8
  %105 = load i64, i64* %75, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %75, align 8
  %107 = load i8*, i8** %86, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 %105
  store i8 %104, i8* %108, align 1
  %109 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %66, align 8
  %110 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %109, i64 -1
  store %"class.crdtp::cbor::EnvelopeEncoder"* %110, %"class.crdtp::cbor::EnvelopeEncoder"** %66, align 8
  br label %111

111:                                              ; preds = %1, %85, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder16HandleArrayBeginEv(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %3 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %139

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2
  %9 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %10 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %9, align 8
  %11 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %12 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %11, align 8
  %13 = icmp ult %"class.crdtp::cbor::EnvelopeEncoder"* %10, %12
  %14 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %12 to i64
  br i1 %13, label %15, label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %10, i64 0, i32 0
  store i64 0, i64* %16, align 8
  %17 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %10, i64 1
  %18 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %17 to i64
  %19 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %9 to i64*
  store i64 %18, i64* %19, align 8
  br label %78

20:                                               ; preds = %7
  %21 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %10 to i64
  %22 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %9 to i64*
  %23 = bitcast %"class.std::__1::vector.6"* %8 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = ashr exact i64 %25, 3
  %27 = add nsw i64 %26, 1
  %28 = icmp ugt i64 %27, 2305843009213693951
  br i1 %28, label %29, label %31

29:                                               ; preds = %20
  %30 = bitcast %"class.std::__1::vector.6"* %8 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %30) #12
  unreachable

31:                                               ; preds = %20
  %32 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"** %11 to i64*
  %33 = sub i64 %14, %24
  %34 = ashr exact i64 %33, 3
  %35 = icmp ult i64 %34, 1152921504606846975
  br i1 %35, label %36, label %44

36:                                               ; preds = %31
  %37 = ashr exact i64 %33, 2
  %38 = icmp ult i64 %37, %27
  %39 = select i1 %38, i64 %27, i64 %37
  %40 = icmp eq i64 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %36
  %42 = icmp ugt i64 %39, 2305843009213693951
  br i1 %42, label %43, label %44

43:                                               ; preds = %41
  tail call void @abort() #12
  unreachable

44:                                               ; preds = %41, %31
  %45 = phi i64 [ %39, %41 ], [ 2305843009213693951, %31 ]
  %46 = shl i64 %45, 3
  %47 = tail call i8* @_Znwm(i64 %46) #13
  %48 = bitcast i8* %47 to %"class.crdtp::cbor::EnvelopeEncoder"*
  br label %49

49:                                               ; preds = %44, %36
  %50 = phi i64 [ %45, %44 ], [ 0, %36 ]
  %51 = phi %"class.crdtp::cbor::EnvelopeEncoder"* [ %48, %44 ], [ null, %36 ]
  %52 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %51, i64 %26
  %53 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %51, i64 %50
  %54 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %53 to i64
  %55 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %52, i64 0, i32 0
  store i64 0, i64* %55, align 8
  %56 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %52, i64 1
  %57 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %56 to i64
  %58 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %8, i64 0, i32 0, i32 0
  %59 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %58, align 8
  %60 = load i64, i64* %22, align 8
  %61 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %59 to i64
  %62 = sub i64 %60, %61
  %63 = ashr exact i64 %62, 3
  %64 = sub nsw i64 0, %63
  %65 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %52, i64 %64
  %66 = ptrtoint %"class.crdtp::cbor::EnvelopeEncoder"* %65 to i64
  %67 = icmp sgt i64 %62, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %49
  %69 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %65 to i8*
  %70 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %69, i8* align 8 %70, i64 %62, i1 false) #14
  %71 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %58, align 8
  br label %72

72:                                               ; preds = %68, %49
  %73 = phi %"class.crdtp::cbor::EnvelopeEncoder"* [ %59, %49 ], [ %71, %68 ]
  store i64 %66, i64* %23, align 8
  store i64 %57, i64* %22, align 8
  store i64 %54, i64* %32, align 8
  %74 = icmp eq %"class.crdtp::cbor::EnvelopeEncoder"* %73, null
  br i1 %74, label %78, label %75

75:                                               ; preds = %72
  %76 = bitcast %"class.crdtp::cbor::EnvelopeEncoder"* %73 to i8*
  tail call void @_ZdlPv(i8* %76) #13
  %77 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %9, align 8
  br label %78

78:                                               ; preds = %15, %72, %75
  %79 = phi %"class.crdtp::cbor::EnvelopeEncoder"* [ %17, %15 ], [ %56, %72 ], [ %77, %75 ]
  %80 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %79, i64 -1
  %81 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %82 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %81, align 8
  tail call void @_ZN5crdtp4cbor15EnvelopeEncoder11EncodeStartEPNSt3__16vectorIhNS2_9allocatorIhEEEE(%"class.crdtp::cbor::EnvelopeEncoder"* %80, %"class.std::__1::vector"* %82)
  %83 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %81, align 8
  %84 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %83, i64 0, i32 0, i32 1
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %83, i64 0, i32 0, i32 2, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = icmp eq i8* %85, %87
  %89 = ptrtoint i8* %87 to i64
  br i1 %88, label %94, label %90

90:                                               ; preds = %78
  store i8 -97, i8* %85, align 1
  %91 = getelementptr inbounds i8, i8* %85, i64 1
  %92 = ptrtoint i8* %91 to i64
  %93 = bitcast i8** %84 to i64*
  store i64 %92, i64* %93, align 8
  br label %139

94:                                               ; preds = %78
  %95 = ptrtoint i8* %85 to i64
  %96 = bitcast i8** %84 to i64*
  %97 = bitcast %"class.std::__1::vector"* %83 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = sub i64 %95, %98
  %100 = add i64 %99, 1
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %94
  %103 = bitcast %"class.std::__1::vector"* %83 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %103) #12
  unreachable

104:                                              ; preds = %94
  %105 = bitcast i8** %86 to i64*
  %106 = sub i64 %89, %98
  %107 = icmp ult i64 %106, 4611686018427387903
  br i1 %107, label %108, label %113

108:                                              ; preds = %104
  %109 = shl i64 %106, 1
  %110 = icmp ult i64 %109, %100
  %111 = select i1 %110, i64 %100, i64 %109
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %116, label %113

113:                                              ; preds = %108, %104
  %114 = phi i64 [ %111, %108 ], [ 9223372036854775807, %104 ]
  %115 = tail call i8* @_Znwm(i64 %114) #13
  br label %116

116:                                              ; preds = %113, %108
  %117 = phi i64 [ %114, %113 ], [ 0, %108 ]
  %118 = phi i8* [ %115, %113 ], [ null, %108 ]
  %119 = getelementptr inbounds i8, i8* %118, i64 %99
  %120 = getelementptr inbounds i8, i8* %118, i64 %117
  %121 = ptrtoint i8* %120 to i64
  store i8 -97, i8* %119, align 1
  %122 = getelementptr inbounds i8, i8* %119, i64 1
  %123 = ptrtoint i8* %122 to i64
  %124 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %83, i64 0, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = load i64, i64* %96, align 8
  %127 = ptrtoint i8* %125 to i64
  %128 = sub i64 %126, %127
  %129 = sub i64 0, %128
  %130 = getelementptr inbounds i8, i8* %119, i64 %129
  %131 = ptrtoint i8* %130 to i64
  %132 = icmp sgt i64 %128, 0
  br i1 %132, label %133, label %135

133:                                              ; preds = %116
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 %125, i64 %128, i1 false) #14
  %134 = load i8*, i8** %124, align 8
  br label %135

135:                                              ; preds = %133, %116
  %136 = phi i8* [ %125, %116 ], [ %134, %133 ]
  store i64 %131, i64* %97, align 8
  store i64 %123, i64* %96, align 8
  store i64 %121, i64* %105, align 8
  %137 = icmp eq i8* %136, null
  br i1 %137, label %139, label %138

138:                                              ; preds = %135
  tail call void @_ZdlPv(i8* nonnull %136) #13
  br label %139

139:                                              ; preds = %138, %135, %90, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder14HandleArrayEndEv(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %3 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %111

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %11, %13
  %15 = ptrtoint i8* %13 to i64
  br i1 %14, label %20, label %16

16:                                               ; preds = %7
  store i8 -1, i8* %11, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8** %10 to i64*
  store i64 %18, i64* %19, align 8
  br label %65

20:                                               ; preds = %7
  %21 = ptrtoint i8* %11 to i64
  %22 = bitcast i8** %10 to i64*
  %23 = bitcast %"class.std::__1::vector"* %9 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = add i64 %25, 1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %20
  %29 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %20
  %31 = bitcast i8** %12 to i64*
  %32 = sub i64 %15, %24
  %33 = icmp ult i64 %32, 4611686018427387903
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = shl i64 %32, 1
  %36 = icmp ult i64 %35, %26
  %37 = select i1 %36, i64 %26, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %34, %30
  %40 = phi i64 [ %37, %34 ], [ 9223372036854775807, %30 ]
  %41 = tail call i8* @_Znwm(i64 %40) #13
  br label %42

42:                                               ; preds = %39, %34
  %43 = phi i64 [ %40, %39 ], [ 0, %34 ]
  %44 = phi i8* [ %41, %39 ], [ null, %34 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %25
  %46 = getelementptr inbounds i8, i8* %44, i64 %43
  %47 = ptrtoint i8* %46 to i64
  store i8 -1, i8* %45, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  %49 = ptrtoint i8* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i64, i64* %22, align 8
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %52, %53
  %55 = sub i64 0, %54
  %56 = getelementptr inbounds i8, i8* %45, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp sgt i64 %54, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %42
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %51, i64 %54, i1 false) #14
  %60 = load i8*, i8** %50, align 8
  br label %61

61:                                               ; preds = %59, %42
  %62 = phi i8* [ %51, %42 ], [ %60, %59 ]
  store i64 %57, i64* %23, align 8
  store i64 %49, i64* %22, align 8
  store i64 %47, i64* %31, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %61
  tail call void @_ZdlPv(i8* nonnull %62) #13
  br label %65

65:                                               ; preds = %16, %61, %64
  %66 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 2, i32 0, i32 1
  %67 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %66, align 8
  %68 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %69 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %68, i64 0, i32 0, i32 1
  %70 = bitcast i8** %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = bitcast %"class.std::__1::vector"* %68 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = sub i64 %71, %73
  %75 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %67, i64 -1, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 -4, %76
  %78 = add i64 %77, %74
  %79 = icmp ugt i64 %78, 4294967295
  br i1 %79, label %80, label %85

80:                                               ; preds = %65
  %81 = bitcast %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0 to void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)***
  %82 = load void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)**, void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)*** %81, align 8
  %83 = getelementptr inbounds void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)*, void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)** %82, i64 13
  %84 = load void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)*, void (%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"*, i32, i64)** %83, align 8
  tail call void %84(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i32 35, i64 %74) #14
  br label %111

85:                                               ; preds = %65
  %86 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %68, i64 0, i32 0, i32 0
  %87 = lshr i64 %78, 24
  %88 = trunc i64 %87 to i8
  %89 = add i64 %76, 1
  store i64 %89, i64* %75, align 8
  %90 = load i8*, i8** %86, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 %76
  store i8 %88, i8* %91, align 1
  %92 = lshr i64 %78, 16
  %93 = trunc i64 %92 to i8
  %94 = load i64, i64* %75, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %75, align 8
  %96 = load i8*, i8** %86, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 %94
  store i8 %93, i8* %97, align 1
  %98 = lshr i64 %78, 8
  %99 = trunc i64 %98 to i8
  %100 = load i64, i64* %75, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %75, align 8
  %102 = load i8*, i8** %86, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 %100
  store i8 %99, i8* %103, align 1
  %104 = trunc i64 %78 to i8
  %105 = load i64, i64* %75, align 8
  %106 = add i64 %105, 1
  store i64 %106, i64* %75, align 8
  %107 = load i8*, i8** %86, align 8
  %108 = getelementptr inbounds i8, i8* %107, i64 %105
  store i8 %104, i8* %108, align 1
  %109 = load %"class.crdtp::cbor::EnvelopeEncoder"*, %"class.crdtp::cbor::EnvelopeEncoder"** %66, align 8
  %110 = getelementptr inbounds %"class.crdtp::cbor::EnvelopeEncoder", %"class.crdtp::cbor::EnvelopeEncoder"* %109, i64 -1
  store %"class.crdtp::cbor::EnvelopeEncoder"* %110, %"class.crdtp::cbor::EnvelopeEncoder"** %66, align 8
  br label %111

111:                                              ; preds = %1, %85, %80
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder13HandleString8ENS_4spanIhEE(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, i8*, i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %5 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %2, %"class.std::__1::vector"* %11) #14
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds i8, i8* %1, i64 %2
  %15 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IS6_EES8_S8_(%"class.std::__1::vector"* %11, i8* %13, i8* %1, i8* %14) #14
  br label %16

16:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder14HandleString16ENS_4spanItEE(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, i16*, i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %5 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %26

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  %12 = getelementptr inbounds i16, i16* %1, i64 %2
  %13 = icmp eq i64 %2, 0
  br i1 %13, label %22, label %16

14:                                               ; preds = %16
  %15 = icmp eq i16* %20, %12
  br i1 %15, label %22, label %16

16:                                               ; preds = %9, %14
  %17 = phi i16* [ %20, %14 ], [ %1, %9 ]
  %18 = load i16, i16* %17, align 2
  %19 = icmp ult i16 %18, 128
  %20 = getelementptr inbounds i16, i16* %17, i64 1
  br i1 %19, label %14, label %21

21:                                               ; preds = %16
  tail call void @_ZN5crdtp4cbor14EncodeString16ENS_4spanItEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i16* %1, i64 %2, %"class.std::__1::vector"* %11) #14
  br label %26

22:                                               ; preds = %14, %9
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 3, i64 %2, %"class.std::__1::vector"* %11) #14
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %11, i64 0, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = tail call i8* @_ZNSt3__16vectorIhNS_9allocatorIhEEE6insertIPKtEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS8_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSC_IPKhEES8_S8_(%"class.std::__1::vector"* %11, i8* %24, i16* %1, i16* %12) #14
  br label %26

26:                                               ; preds = %22, %21, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder12HandleBinaryENS_4spanIhEE(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, i8*, i64) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %5 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %11 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %10, align 8
  tail call void @_ZN5crdtp4cbor12EncodeBinaryENS_4spanIhEEPNSt3__16vectorIhNS3_9allocatorIhEEEE(i8* %1, i64 %2, %"class.std::__1::vector"* %11)
  br label %12

12:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder12HandleDoubleEd(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, double) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %4 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  tail call void @_ZN5crdtp4cbor12EncodeDoubleEdPNSt3__16vectorIhNS1_9allocatorIhEEEE(double %1, %"class.std::__1::vector"* %10)
  br label %11

11:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder11HandleInt32Ei(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, i32) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %4 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  %11 = icmp sgt i32 %1, -1
  %12 = xor i1 %11, true
  %13 = sext i1 %12 to i32
  %14 = xor i32 %13, %1
  %15 = xor i1 %11, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %14 to i64
  tail call void @_ZN5crdtp4cbor9internals15WriteTokenStartENS0_9MajorTypeEmPNSt3__16vectorIhNS3_9allocatorIhEEEE(i32 %16, i64 %17, %"class.std::__1::vector"* %10) #14
  br label %18

18:                                               ; preds = %8, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder10HandleBoolEb(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, i1 zeroext) unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %4 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %3, align 8
  %5 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %69

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %10 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %9, align 8
  %11 = select i1 %1, i8* @_ZN5crdtp4cbor12_GLOBAL__N_112kEncodedTrueE, i8* @_ZN5crdtp4cbor12_GLOBAL__N_113kEncodedFalseE
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp eq i8* %13, %15
  %17 = ptrtoint i8* %15 to i64
  br i1 %16, label %23, label %18

18:                                               ; preds = %8
  %19 = load i8, i8* %11, align 1
  store i8 %19, i8* %13, align 1
  %20 = getelementptr inbounds i8, i8* %13, i64 1
  %21 = ptrtoint i8* %20 to i64
  %22 = bitcast i8** %12 to i64*
  store i64 %21, i64* %22, align 8
  br label %69

23:                                               ; preds = %8
  %24 = ptrtoint i8* %13 to i64
  %25 = bitcast i8** %12 to i64*
  %26 = bitcast %"class.std::__1::vector"* %10 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %24, %27
  %29 = add i64 %28, 1
  %30 = icmp slt i64 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %23
  %32 = bitcast %"class.std::__1::vector"* %10 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %32) #12
  unreachable

33:                                               ; preds = %23
  %34 = bitcast i8** %14 to i64*
  %35 = sub i64 %17, %27
  %36 = icmp ult i64 %35, 4611686018427387903
  br i1 %36, label %37, label %42

37:                                               ; preds = %33
  %38 = shl i64 %35, 1
  %39 = icmp ult i64 %38, %29
  %40 = select i1 %39, i64 %29, i64 %38
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %37, %33
  %43 = phi i64 [ %40, %37 ], [ 9223372036854775807, %33 ]
  %44 = tail call i8* @_Znwm(i64 %43) #13
  br label %45

45:                                               ; preds = %42, %37
  %46 = phi i64 [ %43, %42 ], [ 0, %37 ]
  %47 = phi i8* [ %44, %42 ], [ null, %37 ]
  %48 = getelementptr inbounds i8, i8* %47, i64 %28
  %49 = getelementptr inbounds i8, i8* %47, i64 %46
  %50 = ptrtoint i8* %49 to i64
  %51 = load i8, i8* %11, align 1
  store i8 %51, i8* %48, align 1
  %52 = getelementptr inbounds i8, i8* %48, i64 1
  %53 = ptrtoint i8* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %10, i64 0, i32 0, i32 0
  %55 = load i8*, i8** %54, align 8
  %56 = load i64, i64* %25, align 8
  %57 = ptrtoint i8* %55 to i64
  %58 = sub i64 %56, %57
  %59 = sub i64 0, %58
  %60 = getelementptr inbounds i8, i8* %48, i64 %59
  %61 = ptrtoint i8* %60 to i64
  %62 = icmp sgt i64 %58, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %45
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %55, i64 %58, i1 false) #14
  %64 = load i8*, i8** %54, align 8
  br label %65

65:                                               ; preds = %63, %45
  %66 = phi i8* [ %55, %45 ], [ %64, %63 ]
  store i64 %61, i64* %26, align 8
  store i64 %53, i64* %25, align 8
  store i64 %50, i64* %34, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %69, label %68

68:                                               ; preds = %65
  tail call void @_ZdlPv(i8* nonnull %66) #13
  br label %69

69:                                               ; preds = %68, %65, %18, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder10HandleNullEv(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly) unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %3 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %2, align 8
  %4 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %65

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %9 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = icmp eq i8* %11, %13
  %15 = ptrtoint i8* %13 to i64
  br i1 %14, label %20, label %16

16:                                               ; preds = %7
  store i8 -10, i8* %11, align 1
  %17 = getelementptr inbounds i8, i8* %11, i64 1
  %18 = ptrtoint i8* %17 to i64
  %19 = bitcast i8** %10 to i64*
  store i64 %18, i64* %19, align 8
  br label %65

20:                                               ; preds = %7
  %21 = ptrtoint i8* %11 to i64
  %22 = bitcast i8** %10 to i64*
  %23 = bitcast %"class.std::__1::vector"* %9 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = add i64 %25, 1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %20
  %29 = bitcast %"class.std::__1::vector"* %9 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %20
  %31 = bitcast i8** %12 to i64*
  %32 = sub i64 %15, %24
  %33 = icmp ult i64 %32, 4611686018427387903
  br i1 %33, label %34, label %39

34:                                               ; preds = %30
  %35 = shl i64 %32, 1
  %36 = icmp ult i64 %35, %26
  %37 = select i1 %36, i64 %26, i64 %35
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %42, label %39

39:                                               ; preds = %34, %30
  %40 = phi i64 [ %37, %34 ], [ 9223372036854775807, %30 ]
  %41 = tail call i8* @_Znwm(i64 %40) #13
  br label %42

42:                                               ; preds = %39, %34
  %43 = phi i64 [ %40, %39 ], [ 0, %34 ]
  %44 = phi i8* [ %41, %39 ], [ null, %34 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 %25
  %46 = getelementptr inbounds i8, i8* %44, i64 %43
  %47 = ptrtoint i8* %46 to i64
  store i8 -10, i8* %45, align 1
  %48 = getelementptr inbounds i8, i8* %45, i64 1
  %49 = ptrtoint i8* %48 to i64
  %50 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = load i64, i64* %22, align 8
  %53 = ptrtoint i8* %51 to i64
  %54 = sub i64 %52, %53
  %55 = sub i64 0, %54
  %56 = getelementptr inbounds i8, i8* %45, i64 %55
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp sgt i64 %54, 0
  br i1 %58, label %59, label %61

59:                                               ; preds = %42
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %51, i64 %54, i1 false) #14
  %60 = load i8*, i8** %50, align 8
  br label %61

61:                                               ; preds = %59, %42
  %62 = phi i8* [ %51, %42 ], [ %60, %59 ]
  store i64 %57, i64* %23, align 8
  store i64 %49, i64* %22, align 8
  store i64 %47, i64* %31, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %65, label %64

64:                                               ; preds = %61
  tail call void @_ZdlPv(i8* nonnull %62) #13
  br label %65

65:                                               ; preds = %64, %61, %16, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN5crdtp4cbor12_GLOBAL__N_111CBOREncoder11HandleErrorENS_6StatusE(%"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* nocapture readonly, i32, i64) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 3
  %5 = load %"struct.crdtp::Status"*, %"struct.crdtp::Status"** %4, align 8
  %6 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %5, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %3
  store i32 %1, i32* %6, align 8
  %10 = getelementptr inbounds %"struct.crdtp::Status", %"struct.crdtp::Status"* %5, i64 0, i32 1
  store i64 %2, i64* %10, align 8
  %11 = getelementptr inbounds %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder", %"class.crdtp::cbor::(anonymous namespace)::CBOREncoder"* %0, i64 0, i32 1
  %12 = load %"class.std::__1::vector"*, %"class.std::__1::vector"** %11, align 8
  %13 = bitcast %"class.std::__1::vector"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %12, i64 0, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %14, i64* %16, align 8
  br label %17

17:                                               ; preds = %3, %9
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN5crdtp4cbor12_GLOBAL__N_116ParseUTF16StringEPNS0_13CBORTokenizerEPNS_13ParserHandlerE(%"class.crdtp::cbor::CBORTokenizer"*, %"class.crdtp::ParserHandler"*) unnamed_addr #2 {
  %3 = alloca %"class.std::__1::vector.16", align 8
  %4 = bitcast %"class.std::__1::vector.16"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #14
  %5 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.std::__1::vector.16", %"class.std::__1::vector.16"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 0, i64 24, i1 false) #14
  %8 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 5
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 2, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 3
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %9
  %15 = add i64 %14, %13
  %16 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 %15
  %19 = icmp eq i64 %9, 0
  %20 = bitcast i16** %6 to i64*
  br i1 %19, label %27, label %21

21:                                               ; preds = %2
  %22 = bitcast %"class.std::__1::vector.16"* %3 to i64*
  %23 = bitcast i16** %7 to i64*
  br label %45

24:                                               ; preds = %108
  %25 = load i16*, i16** %5, align 8
  %26 = bitcast i16* %25 to i8*
  br label %27

27:                                               ; preds = %2, %24
  %28 = phi i64 [ %109, %24 ], [ 0, %2 ]
  %29 = phi i8* [ %26, %24 ], [ null, %2 ]
  %30 = phi i16* [ %25, %24 ], [ null, %2 ]
  %31 = ptrtoint i16* %30 to i64
  %32 = sub i64 %28, %31
  %33 = ashr exact i64 %32, 1
  %34 = bitcast %"class.crdtp::ParserHandler"* %1 to void (%"class.crdtp::ParserHandler"*, i16*, i64)***
  %35 = load void (%"class.crdtp::ParserHandler"*, i16*, i64)**, void (%"class.crdtp::ParserHandler"*, i16*, i64)*** %34, align 8
  %36 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i16*, i64)*, void (%"class.crdtp::ParserHandler"*, i16*, i64)** %35, i64 7
  %37 = load void (%"class.crdtp::ParserHandler"*, i16*, i64)*, void (%"class.crdtp::ParserHandler"*, i16*, i64)** %36, align 8
  tail call void %37(%"class.crdtp::ParserHandler"* %1, i16* %30, i64 %33) #14
  %38 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %0, i64 0, i32 1
  %39 = load i32, i32* %38, align 8
  switch i32 %39, label %40 [
    i32 0, label %41
    i32 13, label %41
  ]

40:                                               ; preds = %27
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %0, i1 zeroext false) #14
  br label %41

41:                                               ; preds = %27, %27, %40
  %42 = icmp eq i16* %30, null
  br i1 %42, label %44, label %43

43:                                               ; preds = %41
  store i64 %31, i64* %20, align 8
  tail call void @_ZdlPv(i8* %29) #13
  br label %44

44:                                               ; preds = %41, %43
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #14
  ret void

45:                                               ; preds = %113, %21
  %46 = phi i64 [ 0, %21 ], [ %109, %113 ]
  %47 = phi i16* [ null, %21 ], [ %114, %113 ]
  %48 = phi i16* [ null, %21 ], [ %110, %113 ]
  %49 = phi i64 [ 0, %21 ], [ %111, %113 ]
  %50 = or i64 %49, 1
  %51 = getelementptr inbounds i8, i8* %18, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i16
  %54 = shl nuw i16 %53, 8
  %55 = getelementptr inbounds i8, i8* %18, i64 %49
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i16
  %58 = or i16 %54, %57
  %59 = icmp ult i16* %48, %47
  %60 = ptrtoint i16* %47 to i64
  br i1 %59, label %61, label %64

61:                                               ; preds = %45
  store i16 %58, i16* %48, align 2
  %62 = getelementptr inbounds i16, i16* %48, i64 1
  %63 = ptrtoint i16* %62 to i64
  store i64 %63, i64* %20, align 8
  br label %108

64:                                               ; preds = %45
  %65 = ptrtoint i16* %48 to i64
  %66 = load i64, i64* %22, align 8
  %67 = sub i64 %65, %66
  %68 = ashr exact i64 %67, 1
  %69 = add nsw i64 %68, 1
  %70 = icmp slt i64 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %64
  %72 = bitcast %"class.std::__1::vector.16"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %72) #12
  unreachable

73:                                               ; preds = %64
  %74 = sub i64 %60, %66
  %75 = ashr exact i64 %74, 1
  %76 = icmp ult i64 %75, 4611686018427387903
  %77 = icmp ult i64 %74, %69
  %78 = select i1 %77, i64 %69, i64 %74
  %79 = select i1 %76, i64 %78, i64 9223372036854775807
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %88, label %81

81:                                               ; preds = %73
  %82 = icmp slt i64 %79, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %81
  tail call void @abort() #12
  unreachable

84:                                               ; preds = %81
  %85 = shl i64 %79, 1
  %86 = tail call i8* @_Znwm(i64 %85) #13
  %87 = bitcast i8* %86 to i16*
  br label %88

88:                                               ; preds = %84, %73
  %89 = phi i16* [ %87, %84 ], [ null, %73 ]
  %90 = getelementptr inbounds i16, i16* %89, i64 %68
  %91 = getelementptr inbounds i16, i16* %89, i64 %79
  %92 = ptrtoint i16* %91 to i64
  store i16 %58, i16* %90, align 2
  %93 = getelementptr inbounds i16, i16* %90, i64 1
  %94 = ptrtoint i16* %93 to i64
  %95 = sub i64 %46, %66
  %96 = ashr exact i64 %95, 1
  %97 = sub nsw i64 0, %96
  %98 = getelementptr inbounds i16, i16* %90, i64 %97
  %99 = ptrtoint i16* %98 to i64
  %100 = icmp sgt i64 %95, 0
  br i1 %100, label %101, label %104

101:                                              ; preds = %88
  %102 = bitcast i16* %98 to i8*
  %103 = inttoptr i64 %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %102, i8* align 2 %103, i64 %95, i1 false) #14
  br label %104

104:                                              ; preds = %101, %88
  store i64 %99, i64* %22, align 8
  store i64 %94, i64* %20, align 8
  store i64 %92, i64* %23, align 8
  %105 = icmp eq i64 %66, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %104
  %107 = inttoptr i64 %66 to i8*
  tail call void @_ZdlPv(i8* %107) #13
  br label %108

108:                                              ; preds = %61, %104, %106
  %109 = phi i64 [ %63, %61 ], [ %94, %104 ], [ %94, %106 ]
  %110 = phi i16* [ %62, %61 ], [ %93, %104 ], [ %93, %106 ]
  %111 = add i64 %49, 2
  %112 = icmp ult i64 %111, %9
  br i1 %112, label %113, label %24

113:                                              ; preds = %108
  %114 = load i16*, i16** %7, align 8
  br label %45
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_18ParseMapEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32, %"class.crdtp::cbor::CBORTokenizer"*, %"class.crdtp::ParserHandler"*) unnamed_addr #2 {
  %4 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*)***
  %5 = load void (%"class.crdtp::ParserHandler"*)**, void (%"class.crdtp::ParserHandler"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %5, i64 2
  %7 = load void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %6, align 8
  tail call void %7(%"class.crdtp::ParserHandler"* %2) #14
  %8 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 1
  %9 = load i32, i32* %8, align 8
  switch i32 %9, label %10 [
    i32 0, label %11
    i32 13, label %11
  ]

10:                                               ; preds = %3
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %11

11:                                               ; preds = %3, %3, %10
  %12 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 5
  %13 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %14 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 3
  %15 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 0, i32 0
  %16 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i8*, i64)***
  br label %17

17:                                               ; preds = %53, %11
  %18 = load i32, i32* %8, align 8
  switch i32 %18, label %47 [
    i32 11, label %55
    i32 13, label %19
    i32 0, label %25
    i32 6, label %33
    i32 7, label %46
  ]

19:                                               ; preds = %17
  %20 = load i64, i64* %13, align 8
  %21 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %22 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %21, align 8
  %23 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %22, i64 13
  %24 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %23, align 8
  tail call void %24(%"class.crdtp::ParserHandler"* %2, i32 27, i64 %20) #14
  br label %61

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 0
  %27 = load i32, i32* %26, align 8
  %28 = load i64, i64* %13, align 8
  %29 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %30 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %30, i64 13
  %32 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %31, align 8
  tail call void %32(%"class.crdtp::ParserHandler"* %2, i32 %27, i64 %28) #14
  br label %61

33:                                               ; preds = %17
  %34 = load i64, i64* %12, align 8
  %35 = load i64, i64* %13, align 8
  %36 = load i64, i64* %14, align 8
  %37 = sub i64 %35, %34
  %38 = add i64 %37, %36
  %39 = load i8*, i8** %15, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 %38
  %41 = load void (%"class.crdtp::ParserHandler"*, i8*, i64)**, void (%"class.crdtp::ParserHandler"*, i8*, i64)*** %16, align 8
  %42 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i8*, i64)*, void (%"class.crdtp::ParserHandler"*, i8*, i64)** %41, i64 6
  %43 = load void (%"class.crdtp::ParserHandler"*, i8*, i64)*, void (%"class.crdtp::ParserHandler"*, i8*, i64)** %42, align 8
  tail call void %43(%"class.crdtp::ParserHandler"* %2, i8* %40, i64 %34) #14
  %44 = load i32, i32* %8, align 8
  switch i32 %44, label %45 [
    i32 0, label %53
    i32 13, label %53
  ]

45:                                               ; preds = %33
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %53

46:                                               ; preds = %17
  tail call fastcc void @_ZN5crdtp4cbor12_GLOBAL__N_116ParseUTF16StringEPNS0_13CBORTokenizerEPNS_13ParserHandlerE(%"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2)
  br label %53

47:                                               ; preds = %17
  %48 = load i64, i64* %13, align 8
  %49 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %50 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %49, align 8
  %51 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %50, i64 13
  %52 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %51, align 8
  tail call void %52(%"class.crdtp::ParserHandler"* %2, i32 28, i64 %48) #14
  br label %61

53:                                               ; preds = %45, %33, %33, %46
  %54 = tail call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseValueEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 %0, %"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2)
  br i1 %54, label %17, label %61

55:                                               ; preds = %17
  %56 = load void (%"class.crdtp::ParserHandler"*)**, void (%"class.crdtp::ParserHandler"*)*** %4, align 8
  %57 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %56, i64 3
  %58 = load void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %57, align 8
  tail call void %58(%"class.crdtp::ParserHandler"* %2) #14
  %59 = load i32, i32* %8, align 8
  switch i32 %59, label %60 [
    i32 0, label %61
    i32 13, label %61
  ]

60:                                               ; preds = %55
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %61

61:                                               ; preds = %53, %60, %55, %55, %47, %25, %19
  %62 = phi i1 [ false, %19 ], [ false, %25 ], [ false, %47 ], [ true, %55 ], [ true, %55 ], [ true, %60 ], [ false, %53 ]
  ret i1 %62
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseArrayEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32, %"class.crdtp::cbor::CBORTokenizer"*, %"class.crdtp::ParserHandler"*) unnamed_addr #2 {
  %4 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 1
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %6 [
    i32 0, label %7
    i32 13, label %7
  ]

6:                                                ; preds = %3
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %7

7:                                                ; preds = %3, %3, %6
  %8 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*)***
  %9 = load void (%"class.crdtp::ParserHandler"*)**, void (%"class.crdtp::ParserHandler"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %9, i64 4
  %11 = load void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %10, align 8
  tail call void %11(%"class.crdtp::ParserHandler"* %2) #14
  br label %12

12:                                               ; preds = %30, %7
  %13 = load i32, i32* %4, align 8
  switch i32 %13, label %30 [
    i32 11, label %32
    i32 13, label %14
    i32 0, label %21
  ]

14:                                               ; preds = %12
  %15 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %18 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %17, align 8
  %19 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %18, i64 13
  %20 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %19, align 8
  tail call void %20(%"class.crdtp::ParserHandler"* %2, i32 26, i64 %16) #14
  br label %38

21:                                               ; preds = %12
  %22 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = getelementptr inbounds %"class.crdtp::cbor::CBORTokenizer", %"class.crdtp::cbor::CBORTokenizer"* %1, i64 0, i32 2, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.crdtp::ParserHandler"* %2 to void (%"class.crdtp::ParserHandler"*, i32, i64)***
  %27 = load void (%"class.crdtp::ParserHandler"*, i32, i64)**, void (%"class.crdtp::ParserHandler"*, i32, i64)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %27, i64 13
  %29 = load void (%"class.crdtp::ParserHandler"*, i32, i64)*, void (%"class.crdtp::ParserHandler"*, i32, i64)** %28, align 8
  tail call void %29(%"class.crdtp::ParserHandler"* %2, i32 %23, i64 %25) #14
  br label %38

30:                                               ; preds = %12
  %31 = tail call fastcc zeroext i1 @_ZN5crdtp4cbor12_GLOBAL__N_110ParseValueEiPNS0_13CBORTokenizerEPNS_13ParserHandlerE(i32 %0, %"class.crdtp::cbor::CBORTokenizer"* %1, %"class.crdtp::ParserHandler"* %2)
  br i1 %31, label %12, label %38

32:                                               ; preds = %12
  %33 = load void (%"class.crdtp::ParserHandler"*)**, void (%"class.crdtp::ParserHandler"*)*** %8, align 8
  %34 = getelementptr inbounds void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %33, i64 5
  %35 = load void (%"class.crdtp::ParserHandler"*)*, void (%"class.crdtp::ParserHandler"*)** %34, align 8
  tail call void %35(%"class.crdtp::ParserHandler"* %2) #14
  %36 = load i32, i32* %4, align 8
  switch i32 %36, label %37 [
    i32 0, label %38
    i32 13, label %38
  ]

37:                                               ; preds = %32
  tail call void @_ZN5crdtp4cbor13CBORTokenizer13ReadNextTokenEb(%"class.crdtp::cbor::CBORTokenizer"* %1, i1 zeroext false) #14
  br label %38

38:                                               ; preds = %30, %37, %32, %32, %21, %14
  %39 = phi i1 [ false, %14 ], [ false, %21 ], [ true, %32 ], [ true, %32 ], [ true, %37 ], [ false, %30 ]
  ret i1 %39
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #14
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #12
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #13
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #14
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #14
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #13
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #10

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = distinct !{!11, !8}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = distinct !{!17, !8}
!18 = distinct !{!18, !10}
!19 = distinct !{!19, !8}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !10}
!27 = distinct !{!27, !8}
!28 = !{!29}
!29 = distinct !{!29, !30}
!30 = distinct !{!30, !"LVerDomain"}
!31 = !{!32}
!32 = distinct !{!32, !30}
!33 = distinct !{!33, !8}
!34 = distinct !{!34, !10}
!35 = distinct !{!35, !8}
!36 = !{!37}
!37 = distinct !{!37, !38}
!38 = distinct !{!38, !"LVerDomain"}
!39 = !{!40}
!40 = distinct !{!40, !38}
!41 = distinct !{!41, !8}
!42 = distinct !{!42, !10}
!43 = distinct !{!43, !8}
!44 = !{!45}
!45 = distinct !{!45, !46}
!46 = distinct !{!46, !"LVerDomain"}
!47 = !{!48}
!48 = distinct !{!48, !46}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !10}
!51 = distinct !{!51, !8}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !8}
!59 = !{!60}
!60 = distinct !{!60, !61}
!61 = distinct !{!61, !"LVerDomain"}
!62 = !{!63}
!63 = distinct !{!63, !61}
!64 = distinct !{!64, !8}
!65 = distinct !{!65, !10}
!66 = distinct !{!66, !8}
