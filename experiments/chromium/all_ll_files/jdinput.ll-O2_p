; ModuleID = '../../third_party/libjpeg_turbo/jdinput.c'
source_filename = "../../third_party/libjpeg_turbo/jdinput.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_source_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, {}* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type { {}*, {}*, i32, i32, i32, [10 x i32], [10 x i32], i32, i32 }
%struct.jpeg_d_main_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i32*, i32)* }
%struct.jpeg_d_coef_controller = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, {}*, i32 (%struct.jpeg_decompress_struct*, i8***)*, %struct.jvirt_barray_control** }
%struct.jpeg_d_post_controller = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)* }
%struct.jpeg_input_controller = type { i32 (%struct.jpeg_decompress_struct*)*, {}*, {}*, {}*, i32, i32 }
%struct.jpeg_marker_reader = type { {}*, i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, i32, i32, i32, i32 }
%struct.jpeg_entropy_decoder = type { {}*, i32 (%struct.jpeg_decompress_struct*, [64 x i16]**)*, i32 }
%struct.jpeg_inverse_dct = type { {}*, [10 x void (%struct.jpeg_decompress_struct*, %struct.jpeg_component_info*, i16*, i8**, i32)*] }
%struct.jpeg_upsampler = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32*, i32, i8**, i32*, i32)*, i32 }
%struct.jpeg_color_deconverter = type { {}*, void (%struct.jpeg_decompress_struct*, i8***, i32, i8**, i32)* }
%struct.jpeg_color_quantizer = type { void (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*, i8**, i8**, i32)*, {}*, {}* }
%struct.my_input_controller = type { %struct.jpeg_input_controller, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_input_controller(%struct.jpeg_decompress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 0, i64 48) #4
  %8 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %9 = bitcast %struct.jpeg_input_controller** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to i32 (%struct.jpeg_decompress_struct*)**
  store i32 (%struct.jpeg_decompress_struct*)* @consume_markers, i32 (%struct.jpeg_decompress_struct*)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 8
  %12 = bitcast i8* %11 to <2 x void (%struct.jpeg_decompress_struct*)*>*
  store <2 x void (%struct.jpeg_decompress_struct*)*> <void (%struct.jpeg_decompress_struct*)* @reset_input_controller, void (%struct.jpeg_decompress_struct*)* @start_input_pass>, <2 x void (%struct.jpeg_decompress_struct*)*>* %12, align 8
  %13 = getelementptr inbounds i8, i8* %7, i64 24
  %14 = bitcast i8* %13 to void (%struct.jpeg_decompress_struct*)**
  store void (%struct.jpeg_decompress_struct*)* @finish_input_pass, void (%struct.jpeg_decompress_struct*)** %14, align 8
  %15 = getelementptr inbounds i8, i8* %7, i64 32
  %16 = bitcast i8* %15 to i32*
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds i8, i8* %7, i64 36
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds i8, i8* %7, i64 40
  %20 = bitcast i8* %19 to i32*
  store i32 1, i32* %20, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @consume_markers(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %3 = bitcast %struct.jpeg_input_controller** %2 to %struct.my_input_controller**
  %4 = load %struct.my_input_controller*, %struct.my_input_controller** %3, align 8
  %5 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 0, i32 5
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %249

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %10 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %10, i64 0, i32 1
  %12 = load i32 (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)** %11, align 8
  %13 = tail call i32 %12(%struct.jpeg_decompress_struct* %0) #4
  switch i32 %13, label %249 [
    i32 1, label %14
    i32 2, label %225
  ]

14:                                               ; preds = %8
  %15 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %212, label %18

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %20 = load i32, i32* %19, align 4
  %21 = icmp ugt i32 %20, 65500
  br i1 %21, label %26, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %24 = load i32, i32* %23, align 8
  %25 = icmp ugt i32 %24, 65500
  br i1 %25, label %26, label %36

26:                                               ; preds = %22, %18
  %27 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %28 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %27, align 8
  %29 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %28, i64 0, i32 5
  store i32 41, i32* %29, align 8
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %27, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 6, i32 0, i64 0
  store i32 65500, i32* %31, align 4
  %32 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %27, align 8
  %33 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %32, i64 0, i32 0
  %34 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %33, align 8
  %35 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %34(%struct.jpeg_common_struct* %35) #4
  br label %36

36:                                               ; preds = %26, %22
  %37 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 43
  %38 = load i32, i32* %37, align 8
  %39 = icmp eq i32 %38, 8
  br i1 %39, label %51, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %42 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %41, align 8
  %43 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %42, i64 0, i32 5
  store i32 15, i32* %43, align 8
  %44 = load i32, i32* %37, align 8
  %45 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %41, align 8
  %46 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %45, i64 0, i32 6, i32 0, i64 0
  store i32 %44, i32* %46, align 4
  %47 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %41, align 8
  %48 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %47, i64 0, i32 0
  %49 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %48, align 8
  %50 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %49(%struct.jpeg_common_struct* %50) #4
  br label %51

51:                                               ; preds = %40, %36
  %52 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 9
  %53 = load i32, i32* %52, align 8
  %54 = icmp sgt i32 %53, 10
  br i1 %54, label %55, label %69

55:                                               ; preds = %51
  %56 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %57 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %58 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %57, i64 0, i32 5
  store i32 26, i32* %58, align 8
  %59 = load i32, i32* %52, align 8
  %60 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %61 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %60, i64 0, i32 6, i32 0, i64 0
  store i32 %59, i32* %61, align 4
  %62 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %62, i64 0, i32 6, i32 0, i64 1
  store i32 10, i32* %63, align 4
  %64 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %56, align 8
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 0
  %66 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %65, align 8
  %67 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %66(%struct.jpeg_common_struct* %67) #4
  %68 = load i32, i32* %52, align 8
  br label %69

69:                                               ; preds = %55, %51
  %70 = phi i32 [ %68, %55 ], [ %53, %51 ]
  %71 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 61
  store i32 1, i32* %71, align 8
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  store i32 1, i32* %72, align 4
  %73 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 44
  %74 = icmp sgt i32 %70, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %69
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  store i32 8, i32* %76, align 8
  br label %190

77:                                               ; preds = %69
  %78 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %73, align 8
  %79 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %80 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  br label %81

81:                                               ; preds = %106, %77
  %82 = phi i32 [ %70, %77 ], [ %107, %106 ]
  %83 = phi i32 [ 1, %77 ], [ %116, %106 ]
  %84 = phi i32 [ 1, %77 ], [ %112, %106 ]
  %85 = phi %struct.jpeg_component_info* [ %78, %77 ], [ %118, %106 ]
  %86 = phi i32 [ 0, %77 ], [ %117, %106 ]
  %87 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 2
  %88 = load i32, i32* %87, align 8
  %89 = add i32 %88, -1
  %90 = icmp ugt i32 %89, 3
  br i1 %90, label %96, label %91

91:                                               ; preds = %81
  %92 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 3
  %93 = load i32, i32* %92, align 4
  %94 = add i32 %93, -1
  %95 = icmp ugt i32 %94, 3
  br i1 %95, label %96, label %106

96:                                               ; preds = %91, %81
  %97 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %79, align 8
  %98 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %97, i64 0, i32 5
  store i32 18, i32* %98, align 8
  %99 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %79, align 8
  %100 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %99, i64 0, i32 0
  %101 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %100, align 8
  tail call void %101(%struct.jpeg_common_struct* %80) #4
  %102 = load i32, i32* %71, align 8
  %103 = load i32, i32* %87, align 8
  %104 = load i32, i32* %72, align 4
  %105 = load i32, i32* %52, align 8
  br label %106

106:                                              ; preds = %96, %91
  %107 = phi i32 [ %82, %91 ], [ %105, %96 ]
  %108 = phi i32 [ %83, %91 ], [ %104, %96 ]
  %109 = phi i32 [ %88, %91 ], [ %103, %96 ]
  %110 = phi i32 [ %84, %91 ], [ %102, %96 ]
  %111 = icmp sgt i32 %110, %109
  %112 = select i1 %111, i32 %110, i32 %109
  store i32 %112, i32* %71, align 8
  %113 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 0, i32 3
  %114 = load i32, i32* %113, align 4
  %115 = icmp sgt i32 %108, %114
  %116 = select i1 %115, i32 %108, i32 %114
  store i32 %116, i32* %72, align 4
  %117 = add nuw nsw i32 %86, 1
  %118 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %85, i64 1
  %119 = icmp slt i32 %117, %107
  br i1 %119, label %81, label %120

120:                                              ; preds = %106
  %121 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 63
  store i32 8, i32* %121, align 8
  %122 = icmp sgt i32 %107, 0
  br i1 %122, label %123, label %190

123:                                              ; preds = %120
  %124 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %73, align 8
  %125 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %126 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 77
  br label %127

127:                                              ; preds = %127, %123
  %128 = phi i64 [ 0, %123 ], [ %183, %127 ]
  %129 = phi %struct.jpeg_component_info* [ %124, %123 ], [ %184, %127 ]
  %130 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 9
  store i32 8, i32* %130, align 4
  %131 = load i32, i32* %125, align 8
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = sext i32 %134 to i64
  %136 = mul nsw i64 %135, %132
  %137 = load i32, i32* %71, align 8
  %138 = shl nsw i32 %137, 3
  %139 = sext i32 %138 to i64
  %140 = tail call i64 @jdiv_round_up(i64 %136, i64 %139) #4
  %141 = trunc i64 %140 to i32
  %142 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 7
  store i32 %141, i32* %142, align 4
  %143 = load i32, i32* %19, align 4
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 3
  %146 = load i32, i32* %145, align 4
  %147 = sext i32 %146 to i64
  %148 = mul nsw i64 %147, %144
  %149 = load i32, i32* %72, align 4
  %150 = shl nsw i32 %149, 3
  %151 = sext i32 %150 to i64
  %152 = tail call i64 @jdiv_round_up(i64 %148, i64 %151) #4
  %153 = trunc i64 %152 to i32
  %154 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 8
  store i32 %153, i32* %154, align 8
  %155 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %126, align 8
  %156 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %155, i64 0, i32 5, i64 %128
  store i32 0, i32* %156, align 4
  %157 = load i32, i32* %142, align 4
  %158 = add i32 %157, -1
  %159 = load %struct.jpeg_decomp_master*, %struct.jpeg_decomp_master** %126, align 8
  %160 = getelementptr inbounds %struct.jpeg_decomp_master, %struct.jpeg_decomp_master* %159, i64 0, i32 6, i64 %128
  store i32 %158, i32* %160, align 4
  %161 = load i32, i32* %125, align 8
  %162 = zext i32 %161 to i64
  %163 = load i32, i32* %133, align 8
  %164 = sext i32 %163 to i64
  %165 = mul nsw i64 %164, %162
  %166 = load i32, i32* %71, align 8
  %167 = sext i32 %166 to i64
  %168 = tail call i64 @jdiv_round_up(i64 %165, i64 %167) #4
  %169 = trunc i64 %168 to i32
  %170 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 10
  store i32 %169, i32* %170, align 8
  %171 = load i32, i32* %19, align 4
  %172 = zext i32 %171 to i64
  %173 = load i32, i32* %145, align 4
  %174 = sext i32 %173 to i64
  %175 = mul nsw i64 %174, %172
  %176 = load i32, i32* %72, align 4
  %177 = sext i32 %176 to i64
  %178 = tail call i64 @jdiv_round_up(i64 %175, i64 %177) #4
  %179 = trunc i64 %178 to i32
  %180 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 11
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 12
  store i32 1, i32* %181, align 8
  %182 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 0, i32 19
  store %struct.JQUANT_TBL* null, %struct.JQUANT_TBL** %182, align 8
  %183 = add nuw nsw i64 %128, 1
  %184 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %129, i64 1
  %185 = load i32, i32* %52, align 8
  %186 = sext i32 %185 to i64
  %187 = icmp slt i64 %183, %186
  br i1 %187, label %127, label %188

188:                                              ; preds = %127
  %189 = load i32, i32* %72, align 4
  br label %190

190:                                              ; preds = %188, %120, %75
  %191 = phi i32 [ %189, %188 ], [ %116, %120 ], [ 1, %75 ]
  %192 = load i32, i32* %19, align 4
  %193 = zext i32 %192 to i64
  %194 = shl nsw i32 %191, 3
  %195 = sext i32 %194 to i64
  %196 = tail call i64 @jdiv_round_up(i64 %193, i64 %195) #4
  %197 = trunc i64 %196 to i32
  %198 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 64
  store i32 %197, i32* %198, align 4
  %199 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %200 = load i32, i32* %199, align 8
  %201 = load i32, i32* %52, align 8
  %202 = icmp slt i32 %200, %201
  br i1 %202, label %208, label %203

203:                                              ; preds = %190
  %204 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 45
  %205 = load i32, i32* %204, align 8
  %206 = icmp ne i32 %205, 0
  %207 = zext i1 %206 to i32
  br label %208

208:                                              ; preds = %203, %190
  %209 = phi i32 [ 1, %190 ], [ %207, %203 ]
  %210 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %2, align 8
  %211 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %210, i64 0, i32 4
  store i32 %209, i32* %211, align 8
  store i32 0, i32* %15, align 8
  br label %249

212:                                              ; preds = %14
  %213 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 0, i32 4
  %214 = load i32, i32* %213, align 8
  %215 = icmp eq i32 %214, 0
  br i1 %215, label %216, label %224

216:                                              ; preds = %212
  %217 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %218 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %217, align 8
  %219 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %218, i64 0, i32 5
  store i32 35, i32* %219, align 8
  %220 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %217, align 8
  %221 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %220, i64 0, i32 0
  %222 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %221, align 8
  %223 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %222(%struct.jpeg_common_struct* %223) #4
  br label %224

224:                                              ; preds = %212, %216
  tail call void @start_input_pass(%struct.jpeg_decompress_struct* %0)
  br label %249

225:                                              ; preds = %8
  store i32 1, i32* %5, align 4
  %226 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 1
  %227 = load i32, i32* %226, align 8
  %228 = icmp eq i32 %227, 0
  br i1 %228, label %242, label %229

229:                                              ; preds = %225
  %230 = load %struct.jpeg_marker_reader*, %struct.jpeg_marker_reader** %9, align 8
  %231 = getelementptr inbounds %struct.jpeg_marker_reader, %struct.jpeg_marker_reader* %230, i64 0, i32 4
  %232 = load i32, i32* %231, align 4
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %249, label %234

234:                                              ; preds = %229
  %235 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %236 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %235, align 8
  %237 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %236, i64 0, i32 5
  store i32 59, i32* %237, align 8
  %238 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %235, align 8
  %239 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %238, i64 0, i32 0
  %240 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %239, align 8
  %241 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %240(%struct.jpeg_common_struct* %241) #4
  br label %249

242:                                              ; preds = %225
  %243 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 37
  %244 = load i32, i32* %243, align 4
  %245 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 35
  %246 = load i32, i32* %245, align 4
  %247 = icmp sgt i32 %244, %246
  br i1 %247, label %248, label %249

248:                                              ; preds = %242
  store i32 %246, i32* %243, align 4
  br label %249

249:                                              ; preds = %8, %224, %208, %242, %248, %234, %229, %1
  %250 = phi i32 [ 2, %1 ], [ 2, %229 ], [ 2, %234 ], [ 2, %248 ], [ 2, %242 ], [ 1, %208 ], [ 1, %224 ], [ %13, %8 ]
  ret i32 %250
}

; Function Attrs: nounwind ssp uwtable
define internal void @reset_input_controller(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %3 = bitcast %struct.jpeg_input_controller** %2 to %struct.my_input_controller**
  %4 = load %struct.my_input_controller*, %struct.my_input_controller** %3, align 8
  %5 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 0, i32 0
  store i32 (%struct.jpeg_decompress_struct*)* @consume_markers, i32 (%struct.jpeg_decompress_struct*)** %5, align 8
  %6 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 0, i32 4
  store i32 0, i32* %6, align 8
  %7 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 0, i32 5
  store i32 0, i32* %7, align 4
  %8 = getelementptr inbounds %struct.my_input_controller, %struct.my_input_controller* %4, i64 0, i32 1
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %10 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %10, i64 0, i32 4
  %12 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %11, align 8
  %13 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %12(%struct.jpeg_common_struct* %13) #4
  %14 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 82
  %15 = bitcast %struct.jpeg_marker_reader** %14 to void (%struct.jpeg_decompress_struct*)***
  %16 = load void (%struct.jpeg_decompress_struct*)**, void (%struct.jpeg_decompress_struct*)*** %15, align 8
  %17 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %16, align 8
  tail call void %17(%struct.jpeg_decompress_struct* %0) #4
  %18 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 39
  store [64 x i32]* null, [64 x i32]** %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @start_input_pass(%struct.jpeg_decompress_struct*) #0 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 66
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 1
  br i1 %4, label %5, label %31

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 0
  %7 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 7
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 68
  store i32 %9, i32* %10, align 8
  %11 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 8
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 69
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 13
  store i32 1, i32* %14, align 4
  %15 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 14
  store i32 1, i32* %15, align 8
  %16 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 15
  store i32 1, i32* %16, align 4
  %17 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 9
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 16
  store i32 %18, i32* %19, align 8
  %20 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 17
  store i32 1, i32* %20, align 4
  %21 = load i32, i32* %11, align 8
  %22 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = urem i32 %21, %23
  %25 = icmp eq i32 %24, 0
  %26 = select i1 %25, i32 %23, i32 %24
  %27 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %7, i64 0, i32 18
  store i32 %26, i32* %27, align 8
  %28 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  store i32 1, i32* %28, align 8
  %29 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 0
  store i32 0, i32* %29, align 4
  %30 = load i32, i32* %2, align 8
  br label %157

31:                                               ; preds = %1
  %32 = add i32 %3, -1
  %33 = icmp ugt i32 %32, 3
  br i1 %33, label %34, label %47

34:                                               ; preds = %31
  %35 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %36 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %37 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %36, i64 0, i32 5
  store i32 26, i32* %37, align 8
  %38 = load i32, i32* %2, align 8
  %39 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %40 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %39, i64 0, i32 6, i32 0, i64 0
  store i32 %38, i32* %40, align 4
  %41 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %42 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %41, i64 0, i32 6, i32 0, i64 1
  store i32 4, i32* %42, align 4
  %43 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %35, align 8
  %44 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %43, i64 0, i32 0
  %45 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %44, align 8
  %46 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  tail call void %45(%struct.jpeg_common_struct* %46) #4
  br label %47

47:                                               ; preds = %34, %31
  %48 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 7
  %49 = load i32, i32* %48, align 8
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 61
  %52 = load i32, i32* %51, align 8
  %53 = shl nsw i32 %52, 3
  %54 = sext i32 %53 to i64
  %55 = tail call i64 @jdiv_round_up(i64 %50, i64 %54) #4
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 68
  store i32 %56, i32* %57, align 8
  %58 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 8
  %59 = load i32, i32* %58, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 62
  %62 = load i32, i32* %61, align 4
  %63 = shl nsw i32 %62, 3
  %64 = sext i32 %63 to i64
  %65 = tail call i64 @jdiv_round_up(i64 %60, i64 %64) #4
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 69
  store i32 %66, i32* %67, align 4
  %68 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 70
  store i32 0, i32* %68, align 8
  %69 = load i32, i32* %2, align 8
  %70 = icmp sgt i32 %69, 0
  br i1 %70, label %71, label %204

71:                                               ; preds = %47
  %72 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %73 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  br label %74

74:                                               ; preds = %152, %71
  %75 = phi i64 [ 0, %71 ], [ %153, %152 ]
  %76 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %75
  %77 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %76, align 8
  %78 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 13
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 14
  store i32 %82, i32* %83, align 8
  %84 = mul nsw i32 %82, %79
  %85 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 15
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 9
  %87 = load i32, i32* %86, align 4
  %88 = mul nsw i32 %87, %79
  %89 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 16
  store i32 %88, i32* %89, align 8
  %90 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 7
  %91 = load i32, i32* %90, align 4
  %92 = urem i32 %91, %79
  %93 = icmp eq i32 %92, 0
  %94 = select i1 %93, i32 %79, i32 %92
  %95 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 17
  store i32 %94, i32* %95, align 4
  %96 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 8
  %97 = load i32, i32* %96, align 8
  %98 = urem i32 %97, %82
  %99 = icmp eq i32 %98, 0
  %100 = select i1 %99, i32 %82, i32 %98
  %101 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %77, i64 0, i32 18
  store i32 %100, i32* %101, align 8
  %102 = load i32, i32* %68, align 8
  %103 = add nsw i32 %102, %84
  %104 = icmp sgt i32 %103, 10
  br i1 %104, label %105, label %111

105:                                              ; preds = %74
  %106 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %72, align 8
  %107 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %106, i64 0, i32 5
  store i32 13, i32* %107, align 8
  %108 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %72, align 8
  %109 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %108, i64 0, i32 0
  %110 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %109, align 8
  tail call void %110(%struct.jpeg_common_struct* %73) #4
  br label %111

111:                                              ; preds = %105, %74
  %112 = icmp sgt i32 %84, 0
  br i1 %112, label %113, label %152

113:                                              ; preds = %111
  %114 = trunc i64 %75 to i32
  %115 = mul i32 %82, %79
  %116 = add nsw i32 %115, -1
  %117 = and i32 %115, 3
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %129, label %119

119:                                              ; preds = %113, %119
  %120 = phi i32 [ %122, %119 ], [ %84, %113 ]
  %121 = phi i32 [ %127, %119 ], [ %117, %113 ]
  %122 = add nsw i32 %120, -1
  %123 = load i32, i32* %68, align 8
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %68, align 8
  %125 = sext i32 %123 to i64
  %126 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %125
  store i32 %114, i32* %126, align 4
  %127 = add i32 %121, -1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %129, label %119, !llvm.loop !2

129:                                              ; preds = %119, %113
  %130 = phi i32 [ %84, %113 ], [ %122, %119 ]
  %131 = icmp ult i32 %116, 3
  br i1 %131, label %152, label %132

132:                                              ; preds = %129, %132
  %133 = phi i32 [ %146, %132 ], [ %130, %129 ]
  %134 = load i32, i32* %68, align 8
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %68, align 8
  %136 = sext i32 %134 to i64
  %137 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %136
  store i32 %114, i32* %137, align 4
  %138 = load i32, i32* %68, align 8
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %68, align 8
  %140 = sext i32 %138 to i64
  %141 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %140
  store i32 %114, i32* %141, align 4
  %142 = load i32, i32* %68, align 8
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %68, align 8
  %144 = sext i32 %142 to i64
  %145 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %144
  store i32 %114, i32* %145, align 4
  %146 = add nsw i32 %133, -4
  %147 = load i32, i32* %68, align 8
  %148 = add nsw i32 %147, 1
  store i32 %148, i32* %68, align 8
  %149 = sext i32 %147 to i64
  %150 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 71, i64 %149
  store i32 %114, i32* %150, align 4
  %151 = icmp sgt i32 %146, 0
  br i1 %151, label %132, label %152

152:                                              ; preds = %129, %132, %111
  %153 = add nuw nsw i64 %75, 1
  %154 = load i32, i32* %2, align 8
  %155 = sext i32 %154 to i64
  %156 = icmp slt i64 %153, %155
  br i1 %156, label %74, label %157

157:                                              ; preds = %152, %5
  %158 = phi i32 [ %30, %5 ], [ %154, %152 ]
  %159 = icmp sgt i32 %158, 0
  br i1 %159, label %160, label %204

160:                                              ; preds = %157
  %161 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 0
  %162 = bitcast %struct.jpeg_decompress_struct* %0 to %struct.jpeg_common_struct*
  %163 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 1
  br label %164

164:                                              ; preds = %199, %160
  %165 = phi i32 [ %158, %160 ], [ %200, %199 ]
  %166 = phi i64 [ 0, %160 ], [ %201, %199 ]
  %167 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 67, i64 %166
  %168 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %167, align 8
  %169 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %168, i64 0, i32 19
  %170 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %169, align 8
  %171 = icmp eq %struct.JQUANT_TBL* %170, null
  br i1 %171, label %172, label %199

172:                                              ; preds = %164
  %173 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %168, i64 0, i32 4
  %174 = load i32, i32* %173, align 8
  %175 = icmp ugt i32 %174, 3
  %176 = sext i32 %174 to i64
  br i1 %175, label %181, label %177

177:                                              ; preds = %172
  %178 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 %176
  %179 = load %struct.JQUANT_TBL*, %struct.JQUANT_TBL** %178, align 8
  %180 = icmp eq %struct.JQUANT_TBL* %179, null
  br i1 %180, label %181, label %189

181:                                              ; preds = %177, %172
  %182 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %161, align 8
  %183 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %182, i64 0, i32 5
  store i32 52, i32* %183, align 8
  %184 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %161, align 8
  %185 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %184, i64 0, i32 6, i32 0, i64 0
  store i32 %174, i32* %185, align 4
  %186 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %161, align 8
  %187 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %186, i64 0, i32 0
  %188 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %187, align 8
  tail call void %188(%struct.jpeg_common_struct* %162) #4
  br label %189

189:                                              ; preds = %181, %177
  %190 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %163, align 8
  %191 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %190, i64 0, i32 0
  %192 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %191, align 8
  %193 = tail call i8* %192(%struct.jpeg_common_struct* %162, i32 1, i64 132) #4
  %194 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 40, i64 %176
  %195 = bitcast %struct.JQUANT_TBL** %194 to i8**
  %196 = load i8*, i8** %195, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %193, i8* align 1 %196, i64 132, i1 false) #4
  %197 = bitcast %struct.JQUANT_TBL** %169 to i8**
  store i8* %193, i8** %197, align 8
  %198 = load i32, i32* %2, align 8
  br label %199

199:                                              ; preds = %189, %164
  %200 = phi i32 [ %165, %164 ], [ %198, %189 ]
  %201 = add nuw nsw i64 %166, 1
  %202 = sext i32 %200 to i64
  %203 = icmp slt i64 %201, %202
  br i1 %203, label %164, label %204

204:                                              ; preds = %199, %47, %157
  %205 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 83
  %206 = bitcast %struct.jpeg_entropy_decoder** %205 to void (%struct.jpeg_decompress_struct*)***
  %207 = load void (%struct.jpeg_decompress_struct*)**, void (%struct.jpeg_decompress_struct*)*** %206, align 8
  %208 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %207, align 8
  tail call void %208(%struct.jpeg_decompress_struct* %0) #4
  %209 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 79
  %210 = bitcast %struct.jpeg_d_coef_controller** %209 to void (%struct.jpeg_decompress_struct*)***
  %211 = load void (%struct.jpeg_decompress_struct*)**, void (%struct.jpeg_decompress_struct*)*** %210, align 8
  %212 = load void (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*)** %211, align 8
  tail call void %212(%struct.jpeg_decompress_struct* %0) #4
  %213 = load %struct.jpeg_d_coef_controller*, %struct.jpeg_d_coef_controller** %209, align 8
  %214 = getelementptr inbounds %struct.jpeg_d_coef_controller, %struct.jpeg_d_coef_controller* %213, i64 0, i32 1
  %215 = bitcast i32 (%struct.jpeg_decompress_struct*)** %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %218 = bitcast %struct.jpeg_input_controller** %217 to i64**
  %219 = load i64*, i64** %218, align 8
  store i64 %216, i64* %219, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @finish_input_pass(%struct.jpeg_decompress_struct* nocapture readonly) #1 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 81
  %3 = load %struct.jpeg_input_controller*, %struct.jpeg_input_controller** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_input_controller, %struct.jpeg_input_controller* %3, i64 0, i32 0
  store i32 (%struct.jpeg_decompress_struct*)* @consume_markers, i32 (%struct.jpeg_decompress_struct*)** %4, align 8
  ret void
}

declare i64 @jdiv_round_up(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
