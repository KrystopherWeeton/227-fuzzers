; ModuleID = '../../third_party/skia/src/gpu/GrFixedClip.cpp'
source_filename = "../../third_party/skia/src/gpu/GrFixedClip.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrFixedClip = type { %class.GrHardClip, %class.GrScissorState, %class.GrWindowRectsState }
%class.GrHardClip = type { %class.GrClip }
%class.GrClip = type { i32 (...)** }
%class.GrScissorState = type { %struct.SkISize, %struct.SkIRect }
%struct.SkISize = type { i32, i32 }
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.GrWindowRectsState = type { i8, %class.GrWindowRectangles }
%class.GrWindowRectangles = type { i32, %union.anon }
%union.anon = type { %"struct.GrWindowRectangles::Rec"*, [8 x i8] }
%"struct.GrWindowRectangles::Rec" = type { %class.GrNonAtomicRef, [8 x %struct.SkIRect] }
%class.GrNonAtomicRef = type { i32 }
%"struct.GrClip::PreClipResult" = type <{ i32, %class.SkRRect, i8, i8, [2 x i8] }>
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%class.GrAppliedHardClip = type <{ %class.GrScissorState, %class.GrWindowRectsState, i32, [4 x i8] }>
%class.GrRecordingContext = type { %class.GrImageContext.base, %"class.GrRecordingContext::Stats", %"class.std::__1::unique_ptr", %"class.GrRecordingContext::OwnedArenas", %"class.std::__1::unique_ptr.35", %"class.std::__1::unique_ptr.167" }
%class.GrImageContext.base = type <{ %class.GrContext_Base, %class.GrSingleOwner }>
%class.GrContext_Base = type { %class.SkRefCnt.base, %class.sk_sp }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp = type { %class.GrContextThreadSafeProxy* }
%class.GrContextThreadSafeProxy = type opaque
%class.GrSingleOwner = type { i8 }
%"class.GrRecordingContext::Stats" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.GrAuditTrail* }
%class.GrAuditTrail = type <{ %class.SkTArray, %class.SkTHashMap, %class.SkTHashMap.6, %class.SkTArray.15, %class.SkTArray.17, i32, i8, [3 x i8] }>
%class.SkTArray = type { %"class.std::__1::unique_ptr.1"*, i64 }
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"struct.GrAuditTrail::Op"* }
%"struct.GrAuditTrail::Op" = type <{ %class.SkString, %class.SkTArray.17, %struct.SkRect, i32, i32, i32, [4 x i8] }>
%class.SkString = type { %class.sk_sp.18 }
%class.sk_sp.18 = type { %"struct.SkString::Rec"* }
%"struct.SkString::Rec" = type <{ i32, %"struct.std::__1::atomic", i8, [3 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr.2" }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, int, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, int, SkGoodHash>::Pair>::Slot" = type { %"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair", i32 }
%"struct.SkTHashMap<unsigned int, int, SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }
%class.SkTHashMap.6 = type { %class.SkTHashTable.7 }
%class.SkTHashTable.7 = type { i32, i32, %class.SkAutoTArray.8 }
%class.SkAutoTArray.8 = type { %"class.std::__1::unique_ptr.9" }
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair, int, SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<int, SkTArray<GrAuditTrail::Op *, false> *, SkGoodHash>::Pair" = type { %"struct.std::__1::pair.216" }
%"struct.std::__1::pair.216" = type { i32, %class.SkTArray.217* }
%class.SkTArray.217 = type { %"struct.GrAuditTrail::Op"**, i64 }
%class.SkTArray.15 = type { %"class.std::__1::unique_ptr.16"*, i64 }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.218" }
%"class.std::__1::__compressed_pair.218" = type { %"struct.std::__1::__compressed_pair_elem.219" }
%"struct.std::__1::__compressed_pair_elem.219" = type { %"struct.GrAuditTrail::OpNode"* }
%"struct.GrAuditTrail::OpNode" = type <{ %struct.SkRect, %class.SkTArray.217, %"class.GrSurfaceProxy::UniqueID", [4 x i8] }>
%"class.GrSurfaceProxy::UniqueID" = type { i32 }
%class.SkTArray.17 = type { %class.SkString*, i64 }
%"class.GrRecordingContext::OwnedArenas" = type { i8, %"class.std::__1::unique_ptr.22", %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %class.SkArenaAlloc* }
%class.SkArenaAlloc = type <{ i8*, i8*, i8*, %class.SkFibBlockSizes, [4 x i8] }>
%class.SkFibBlockSizes = type { i32 }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.GrSubRunAllocator* }
%class.GrSubRunAllocator = type { %class.GrBagOfBytes }
%class.GrBagOfBytes = type { i8*, i32, %class.SkFibBlockSizes.31 }
%class.SkFibBlockSizes.31 = type { i32 }
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %class.GrDrawingManager* }
%class.GrDrawingManager = type { %class.GrRecordingContext*, %"struct.GrPathRendererChain::Options", %class.sk_sp.38, %class.SkTArray.48, %class.GrOpsTask*, %class.SkSTArray.132, %class.SkSTArray.135, %"class.std::__1::unique_ptr.137", %class.sk_sp.153, %class.GrTokenTracker, i8, i8, %class.SkTArray.154, %class.GrHashMapWithCache }
%"struct.GrPathRendererChain::Options" = type { i8, i32 }
%class.sk_sp.38 = type { %"class.GrBufferAllocPool::CpuBufferCache"* }
%"class.GrBufferAllocPool::CpuBufferCache" = type <{ %class.GrNonAtomicRef.39, [4 x i8], %"class.std::__1::unique_ptr.40", i32, [4 x i8] }>
%class.GrNonAtomicRef.39 = type { i32 }
%"class.std::__1::unique_ptr.40" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.GrBufferAllocPool::CpuBufferCache::Buffer"* }
%"struct.GrBufferAllocPool::CpuBufferCache::Buffer" = type <{ %class.sk_sp.43, i8, [7 x i8] }>
%class.sk_sp.43 = type { %class.GrCpuBuffer* }
%class.GrCpuBuffer = type { %class.GrBuffer, %class.GrNonAtomicRef.44, i8*, i64 }
%class.GrBuffer = type { i32 (...)** }
%class.GrNonAtomicRef.44 = type { i32 }
%class.SkTArray.48 = type { %class.sk_sp.49*, i64 }
%class.sk_sp.49 = type { %class.GrRenderTask* }
%class.GrRenderTask = type { %class.SkRefCnt.base, %class.GrRenderTask*, %class.GrRenderTask*, %class.SkSTArray, %class.SkTArray.101, i32, i32, %class.SkSTArray.108, %class.SkSTArray.108, %class.GrTextureResolveRenderTask* }
%class.SkSTArray = type { %class.SkAlignedSTStorage, %class.SkTArray.50 }
%class.SkAlignedSTStorage = type { [8 x i8] }
%class.SkTArray.50 = type { %class.sk_sp.51*, i64 }
%class.sk_sp.51 = type { %class.GrSurfaceProxy* }
%class.GrSurfaceProxy = type { i32 (...)**, %class.SkNVRefCnt, %class.sk_sp.52, i32, [4 x i8], %class.GrBackendFormat, %struct.SkISize, i32, i8, i32, %"class.GrSurfaceProxy::UniqueID", %"class.std::__1::function", i8, i8, i8, i8, i32, %"struct.std::__1::atomic.96" }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.sk_sp.52 = type { %class.GrSurface* }
%class.GrSurface = type { %class.GrGpuResource, %struct.SkISize, i32, i8, %class.sk_sp.56 }
%class.GrGpuResource = type { i32 (...)**, %class.GrIORef, i32, i32, %"class.std::__1::chrono::time_point", %class.GrScratchKey, %class.GrUniqueKey, %class.GrGpu*, i64, i8, i8, %"class.GrGpuResource::UniqueID" }
%class.GrIORef = type { %"struct.std::__1::atomic", %"struct.std::__1::atomic" }
%"class.std::__1::chrono::time_point" = type { %"class.std::__1::chrono::duration" }
%"class.std::__1::chrono::duration" = type { i64 }
%class.GrScratchKey = type { %class.GrResourceKey }
%class.GrResourceKey = type { %class.SkAutoSTMalloc }
%class.SkAutoSTMalloc = type <{ i32*, %union.anon.53, [4 x i8] }>
%union.anon.53 = type { [7 x i32] }
%class.GrUniqueKey = type { %class.GrResourceKey, %class.sk_sp.54, i8* }
%class.sk_sp.54 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.55, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.55 = type { %"struct.std::__1::atomic" }
%class.GrGpu = type opaque
%"class.GrGpuResource::UniqueID" = type { i32 }
%class.sk_sp.56 = type { %class.GrRefCntedCallback* }
%class.GrRefCntedCallback = type { %class.SkNVRefCnt.57, void (i8*)*, i8* }
%class.SkNVRefCnt.57 = type { %"struct.std::__1::atomic" }
%class.GrBackendFormat = type { i32, i8, %union.anon.58, i32, [4 x i8] }
%union.anon.58 = type { %struct.anon }
%struct.anon = type { i32, [4 x i8], %struct.GrVkYcbcrConversionInfo }
%struct.GrVkYcbcrConversionInfo = type <{ i32, [4 x i8], i64, i32, i32, i32, i32, i32, i32, i32, [4 x i8] }>
%"class.std::__1::function" = type { %"class.std::__1::__function::__policy_func" }
%"class.std::__1::__function::__policy_func" = type { %"union.std::__1::__function::__policy_storage", %"struct.std::__1::__function::__policy_invoker", %"struct.std::__1::__function::__policy"* }
%"union.std::__1::__function::__policy_storage" = type { i8*, [8 x i8] }
%"struct.std::__1::__function::__policy_invoker" = type { void (%"struct.GrSurfaceProxy::LazyCallbackResult"*, %"union.std::__1::__function::__policy_storage"*, %class.GrResourceProvider*, %"struct.GrSurfaceProxy::LazySurfaceDesc"*)* }
%"struct.GrSurfaceProxy::LazyCallbackResult" = type <{ %class.sk_sp.52, i32, i8, [3 x i8] }>
%class.GrResourceProvider = type { %class.GrResourceCache*, %class.GrGpu*, %class.sk_sp.93, %class.sk_sp.95, %class.sk_sp.95 }
%class.GrResourceCache = type { %class.GrProxyProvider*, %class.GrThreadSafeCache*, i32, %class.SkTDPQueue, %class.SkTDArray, %class.SkTMultiMap, %class.SkTDynamicHash.68, i64, i64, i32, i64, i64, i32, [4 x i8], %"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox", %"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox", %class.SkTHashMap.84, %"class.GrDirectContext::DirectContextID", i32, %class.GrSingleOwner* }
%class.GrProxyProvider = type opaque
%class.GrThreadSafeCache = type opaque
%class.SkTDPQueue = type { %class.SkTDArray }
%class.SkTDArray = type { %class.GrGpuResource**, i32, i32 }
%class.SkTMultiMap = type <{ %class.SkTDynamicHash, i32, [4 x i8] }>
%class.SkTDynamicHash = type { %class.SkTHashTable.60 }
%class.SkTHashTable.60 = type { i32, i32, %class.SkAutoTArray.61 }
%class.SkAutoTArray.61 = type { %"class.std::__1::unique_ptr.62" }
%"class.std::__1::unique_ptr.62" = type { %"class.std::__1::__compressed_pair.63" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList *, GrScratchKey, SkTDynamicHash<SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList, GrScratchKey, SkTMultiMap<GrGpuResource, GrScratchKey, GrResourceCache::ScratchMapTraits>::ValueList>::AdaptedTraits>::Slot" = type opaque
%class.SkTDynamicHash.68 = type { %class.SkTHashTable.69 }
%class.SkTHashTable.69 = type { i32, i32, %class.SkAutoTArray.70 }
%class.SkAutoTArray.70 = type { %"class.std::__1::unique_ptr.71" }
%"class.std::__1::unique_ptr.71" = type { %"class.std::__1::__compressed_pair.72" }
%"class.std::__1::__compressed_pair.72" = type { %"struct.std::__1::__compressed_pair_elem.73" }
%"struct.std::__1::__compressed_pair_elem.73" = type { %"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot"* }
%"struct.SkTHashTable<GrGpuResource *, GrUniqueKey, SkTDynamicHash<GrGpuResource, GrUniqueKey, GrResourceCache::UniqueHashTraits>::AdaptedTraits>::Slot" = type <{ %class.GrGpuResource*, i32, [4 x i8] }>
%"class.SkMessageBus<GrUniqueKeyInvalidatedMessage, unsigned int, true>::Inbox" = type <{ %class.SkTArray.77, %class.SkMutex, i32, [4 x i8] }>
%class.SkTArray.77 = type { %class.GrUniqueKeyInvalidatedMessage*, i64 }
%class.GrUniqueKeyInvalidatedMessage = type <{ %class.GrUniqueKey, i32, i8, [3 x i8] }>
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.78" }
%"struct.std::__1::atomic.78" = type { %"struct.std::__1::__atomic_base.79" }
%"struct.std::__1::__atomic_base.79" = type { %"struct.std::__1::__atomic_base.80" }
%"struct.std::__1::__atomic_base.80" = type { %"struct.std::__1::__cxx_atomic_impl.81" }
%"struct.std::__1::__cxx_atomic_impl.81" = type { %"struct.std::__1::__cxx_atomic_base_impl.82" }
%"struct.std::__1::__cxx_atomic_base_impl.82" = type { i8 }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%"class.SkMessageBus<GrTextureFreedMessage, GrDirectContext::DirectContextID, true>::Inbox" = type <{ %class.SkTArray.83, %class.SkMutex, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.SkTArray.83 = type { %struct.GrTextureFreedMessage*, i64 }
%struct.GrTextureFreedMessage = type <{ %class.GrTexture*, %"class.GrDirectContext::DirectContextID", [4 x i8] }>
%class.GrTexture = type <{ i32 (...)**, i32, i32, i32, [4 x i8], %class.GrSurface }>
%class.SkTHashMap.84 = type { %class.SkTHashTable.85 }
%class.SkTHashTable.85 = type { i32, i32, %class.SkAutoTArray.86 }
%class.SkAutoTArray.86 = type { %"class.std::__1::unique_ptr.87" }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrResourceCache::TextureAwaitingUnref, SkGoodHash>::Pair>::Slot" = type opaque
%"class.GrDirectContext::DirectContextID" = type { i32 }
%class.sk_sp.93 = type { %class.GrCaps* }
%class.GrCaps = type <{ %class.SkRefCnt.base, [4 x i8], %class.sk_sp.94, i48, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i8], i64, %class.GrDriverBugWorkarounds, i8, i8 }>
%class.sk_sp.94 = type { %class.GrShaderCaps* }
%class.GrShaderCaps = type <{ %class.SkRefCnt.base, i32, i56, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i32, [4 x i8] }>
%class.GrDriverBugWorkarounds = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%class.sk_sp.95 = type { %class.GrGpuBuffer* }
%class.GrGpuBuffer = type { %class.GrGpuResource, %class.GrBuffer, i8*, i64, i32, i32 }
%"struct.GrSurfaceProxy::LazySurfaceDesc" = type <{ %struct.SkISize, i32, i8, i8, [2 x i8], i32, [4 x i8], %class.GrBackendFormat*, i8, i8, [6 x i8] }>
%"struct.std::__1::__function::__policy" = type { i8* (i8*)*, void (i8*)*, i8, %"class.std::type_info"* }
%"class.std::type_info" = type { i32 (...)**, i8* }
%"struct.std::__1::atomic.96" = type { %"struct.std::__1::__atomic_base.97" }
%"struct.std::__1::__atomic_base.97" = type { %"struct.std::__1::__atomic_base.98" }
%"struct.std::__1::__atomic_base.98" = type { %"struct.std::__1::__cxx_atomic_impl.99" }
%"struct.std::__1::__cxx_atomic_impl.99" = type { %"struct.std::__1::__cxx_atomic_base_impl.100" }
%"struct.std::__1::__cxx_atomic_base_impl.100" = type { i64 }
%class.SkTArray.101 = type { %class.GrTextureProxy**, i64 }
%class.GrTextureProxy = type { i32 (...)**, i8, i32, i8, i8, %class.GrUniqueKey, %class.GrProxyProvider*, %"class.std::__1::unique_ptr.102", %class.GrSurfaceProxy }
%"class.std::__1::unique_ptr.102" = type { %"class.std::__1::__compressed_pair.103" }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %class.GrDeferredProxyUploader* }
%class.GrDeferredProxyUploader = type opaque
%class.SkSTArray.108 = type { %class.SkAlignedSTStorage.109, %class.SkTArray.110 }
%class.SkAlignedSTStorage.109 = type { [8 x i8] }
%class.SkTArray.110 = type { %class.GrRenderTask**, i64 }
%class.GrTextureResolveRenderTask = type opaque
%class.GrOpsTask = type { %class.GrRenderTask, %class.GrAuditTrail*, i8, %class.GrSwizzle, i32, i32, %"struct.std::__1::array", i32, i8, i32, %struct.SkIRect, i32, i32, %class.SkSTArray.111, %class.sk_sp.129, %class.SkTArray.131, %struct.SkRect, %struct.SkIRect }
%class.GrSwizzle = type { i16 }
%"struct.std::__1::array" = type { [4 x float] }
%class.SkSTArray.111 = type { %class.SkAlignedSTStorage.112, %class.SkTArray.113 }
%class.SkAlignedSTStorage.112 = type { [2000 x i8] }
%class.SkTArray.113 = type { %"class.GrOpsTask::OpChain"*, i64 }
%"class.GrOpsTask::OpChain" = type { %"class.GrOpsTask::OpChain::List", %"class.GrProcessorSet::Analysis", [4 x i8], %"class.GrXferProcessor::DstProxyView", %class.GrAppliedClip*, %struct.SkRect }
%"class.GrOpsTask::OpChain::List" = type { %"class.std::__1::unique_ptr.114", %class.GrOp* }
%"class.std::__1::unique_ptr.114" = type { %"class.std::__1::__compressed_pair.115" }
%"class.std::__1::__compressed_pair.115" = type { %"struct.std::__1::__compressed_pair_elem.116" }
%"struct.std::__1::__compressed_pair_elem.116" = type { %class.GrOp* }
%class.GrOp = type { i32 (...)**, %"class.std::__1::unique_ptr.114", %class.GrOp*, i16, i16, i32, %struct.SkRect }
%"class.GrProcessorSet::Analysis" = type { i16, [2 x i8] }
%"class.GrXferProcessor::DstProxyView" = type { %class.GrSurfaceProxyView, %struct.SkIPoint, i32, [4 x i8] }
%class.GrSurfaceProxyView = type <{ %class.sk_sp.51, i32, %class.GrSwizzle, [2 x i8] }>
%struct.SkIPoint = type { i32, i32 }
%class.sk_sp.129 = type { %class.GrArenas* }
%class.GrArenas = type { %class.SkNVRefCnt.130, [4 x i8], %class.SkArenaAlloc, %class.GrSubRunAllocator }
%class.SkNVRefCnt.130 = type { %"struct.std::__1::atomic" }
%class.SkTArray.131 = type { %class.GrSurfaceProxy**, i64 }
%class.SkSTArray.132 = type { %class.SkAlignedSTStorage.133, %class.SkTArray.134 }
%class.SkAlignedSTStorage.133 = type { [32 x i8] }
%class.SkTArray.134 = type { i32*, i64 }
%class.SkSTArray.135 = type { %class.SkAlignedSTStorage.136, %class.SkTArray.48 }
%class.SkAlignedSTStorage.136 = type { [32 x i8] }
%"class.std::__1::unique_ptr.137" = type { %"class.std::__1::__compressed_pair.138" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.139" }
%"struct.std::__1::__compressed_pair_elem.139" = type { %class.GrPathRendererChain* }
%class.GrPathRendererChain = type { %class.SkSTArray.140, %"class.std::__1::unique_ptr.144", %class.GrPathRenderer* }
%class.SkSTArray.140 = type { %class.SkAlignedSTStorage.141, %class.SkTArray.142 }
%class.SkAlignedSTStorage.141 = type { [64 x i8] }
%class.SkTArray.142 = type { %class.sk_sp.143*, i64 }
%class.sk_sp.143 = type { %class.GrPathRenderer* }
%"class.std::__1::unique_ptr.144" = type { %"class.std::__1::__compressed_pair.145" }
%"class.std::__1::__compressed_pair.145" = type { %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.146" = type { %class.GrCoverageCountingPathRenderer* }
%class.GrCoverageCountingPathRenderer = type opaque
%class.GrPathRenderer = type { %class.SkRefCnt.base, [4 x i8] }
%class.sk_sp.153 = type { %class.GrSoftwarePathRenderer* }
%class.GrSoftwarePathRenderer = type opaque
%class.GrTokenTracker = type { %class.GrDeferredUploadToken, %class.GrDeferredUploadToken }
%class.GrDeferredUploadToken = type { i64 }
%class.SkTArray.154 = type { %class.GrOnFlushCallbackObject**, i64 }
%class.GrOnFlushCallbackObject = type opaque
%class.GrHashMapWithCache = type { %class.SkTHashMap.155, i32, %class.GrRenderTask** }
%class.SkTHashMap.155 = type { %class.SkTHashTable.156 }
%class.SkTHashTable.156 = type { i32, i32, %class.SkAutoTArray.157 }
%class.SkAutoTArray.157 = type { %"class.std::__1::unique_ptr.158" }
%"class.std::__1::unique_ptr.158" = type { %"class.std::__1::__compressed_pair.159" }
%"class.std::__1::__compressed_pair.159" = type { %"struct.std::__1::__compressed_pair_elem.160" }
%"struct.std::__1::__compressed_pair_elem.160" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair, unsigned int, SkTHashMap<unsigned int, GrRenderTask *, GrCheapHash>::Pair>::Slot" = type opaque
%"class.std::__1::unique_ptr.167" = type { %"class.std::__1::__compressed_pair.168" }
%"class.std::__1::__compressed_pair.168" = type { %"struct.std::__1::__compressed_pair_elem.169" }
%"struct.std::__1::__compressed_pair_elem.169" = type { %class.GrProxyProvider* }
%class.GrSurfaceDrawContext = type { %class.GrSurfaceFillContext.base, %class.SkSurfaceProps, i8, i8, i32, %class.SkGlyphRunListPainter }
%class.GrSurfaceFillContext.base = type <{ %class.GrSurfaceContext, %class.GrSurfaceProxyView, %class.sk_sp.176, i8 }>
%class.GrSurfaceContext = type { i32 (...)**, %class.GrRecordingContext*, %class.GrSurfaceProxyView, %class.GrColorInfo }
%class.GrColorInfo = type { %class.sk_sp.173, %class.sk_sp.175, i32, i32 }
%class.sk_sp.173 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.174, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.174 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.sk_sp.175 = type { %class.GrColorSpaceXform* }
%class.GrColorSpaceXform = type { %class.SkRefCnt.base, %struct.SkColorSpaceXformSteps }
%struct.SkColorSpaceXformSteps = type { %"struct.SkColorSpaceXformSteps::Flags", %struct.skcms_TransferFunction, %struct.skcms_TransferFunction, [9 x float] }
%"struct.SkColorSpaceXformSteps::Flags" = type { i8, i8, i8, i8, i8 }
%class.sk_sp.176 = type { %class.GrOpsTask* }
%class.SkSurfaceProps = type { i32, i32 }
%class.SkGlyphRunListPainter = type { %class.SkSurfaceProps, %class.SkSurfaceProps, i32, i32, %class.SkStrikeForGPUCacheInterface*, %class.SkDrawableGlyphBuffer, %class.SkSourceGlyphBuffer }
%class.SkStrikeForGPUCacheInterface = type { i32 (...)** }
%class.SkDrawableGlyphBuffer = type { i64, i64, i64, %class.SkAutoTArray.177, %class.SkAutoTMalloc }
%class.SkAutoTArray.177 = type { %"class.std::__1::unique_ptr.178" }
%"class.std::__1::unique_ptr.178" = type { %"class.std::__1::__compressed_pair.179" }
%"class.std::__1::__compressed_pair.179" = type { %"struct.std::__1::__compressed_pair_elem.180" }
%"struct.std::__1::__compressed_pair_elem.180" = type { %class.SkGlyphVariant* }
%class.SkGlyphVariant = type { %union.anon.181 }
%union.anon.181 = type { %class.SkGlyph* }
%class.SkGlyph = type { i16, i16, i16, i16, i8*, %"struct.SkGlyph::PathData"*, float, float, i8, i8, %struct.SkPackedGlyphID }
%"struct.SkGlyph::PathData" = type <{ %"struct.SkGlyph::Intercept"*, %class.SkPath, i8, [7 x i8] }>
%"struct.SkGlyph::Intercept" = type { %"struct.SkGlyph::Intercept"*, [2 x float], [2 x float] }
%class.SkPath = type <{ %class.sk_sp.182, i32, %"struct.std::__1::atomic.78", %"struct.std::__1::atomic.78", i8, i8 }>
%class.sk_sp.182 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt.183, %struct.SkRect, [4 x i8], %class.SkTDArray.184, %class.SkTDArray.185, %class.SkTDArray.186, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt.183 = type { %"struct.std::__1::atomic" }
%class.SkTDArray.184 = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.185 = type { i8*, i32, i32 }
%class.SkTDArray.186 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.187 }
%class.SkTDArray.187 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.188", [3 x i8] }
%"struct.std::__1::atomic.188" = type { %"struct.std::__1::__atomic_base.189" }
%"struct.std::__1::__atomic_base.189" = type { %"struct.std::__1::__cxx_atomic_impl.190" }
%"struct.std::__1::__cxx_atomic_impl.190" = type { %"struct.std::__1::__cxx_atomic_base_impl.191" }
%"struct.std::__1::__cxx_atomic_base_impl.191" = type { i8 }
%struct.SkPackedGlyphID = type { i32 }
%class.SkAutoTMalloc = type { %"class.std::__1::unique_ptr.195" }
%"class.std::__1::unique_ptr.195" = type { %"class.std::__1::__compressed_pair.196" }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %struct.SkPoint* }
%class.SkSourceGlyphBuffer = type { %class.SkZip, i64, i32, i32, %class.SkZip.200, %class.SkSTArray.205, %class.SkSTArray.208 }
%class.SkZip = type { %"class.std::__1::tuple", i64 }
%"class.std::__1::tuple" = type { %"struct.std::__1::__tuple_impl" }
%"struct.std::__1::__tuple_impl" = type { %"class.std::__1::__tuple_leaf", %"class.std::__1::__tuple_leaf.199" }
%"class.std::__1::__tuple_leaf" = type { i16* }
%"class.std::__1::__tuple_leaf.199" = type { %struct.SkPoint* }
%class.SkZip.200 = type { %"class.std::__1::tuple.201", i64 }
%"class.std::__1::tuple.201" = type { %"struct.std::__1::__tuple_impl.202" }
%"struct.std::__1::__tuple_impl.202" = type { %"class.std::__1::__tuple_leaf.203", %"class.std::__1::__tuple_leaf.204" }
%"class.std::__1::__tuple_leaf.203" = type { i16* }
%"class.std::__1::__tuple_leaf.204" = type { %struct.SkPoint* }
%class.SkSTArray.205 = type { %class.SkAlignedSTStorage.206, %class.SkTArray.207 }
%class.SkAlignedSTStorage.206 = type { [8 x i8] }
%class.SkTArray.207 = type { i16*, i64 }
%class.SkSTArray.208 = type { %class.SkAlignedSTStorage.209, %class.SkTArray.210 }
%class.SkAlignedSTStorage.209 = type { [32 x i8] }
%class.SkTArray.210 = type { %struct.SkPoint*, i64 }
%class.GrAppliedClip = type { %class.GrAppliedHardClip, %"class.std::__1::unique_ptr.120" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %class.GrFragmentProcessor* }
%class.GrFragmentProcessor = type <{ %class.GrProcessor, %class.SkSTArray.123, %class.GrFragmentProcessor*, i32, %"struct.SkSL::SampleUsage", [4 x i8] }>
%class.GrProcessor = type { i32 (...)**, i32, i32 }
%class.SkSTArray.123 = type { %class.SkAlignedSTStorage.124, %class.SkTArray.125 }
%class.SkAlignedSTStorage.124 = type { [8 x i8] }
%class.SkTArray.125 = type { %"class.std::__1::unique_ptr.120"*, i64 }
%"struct.SkSL::SampleUsage" = type <{ i32, i8, [3 x i8] }>

$_ZN6GrClip15GetPixelIBoundsERK6SkRect4GrAANS_10BoundsTypeE = comdat any

$_ZN11GrFixedClipD2Ev = comdat any

$_ZN11GrFixedClipD0Ev = comdat any

$_ZNK10GrHardClip5applyEP18GrRecordingContextP20GrSurfaceDrawContext8GrAATypebP13GrAppliedClipP6SkRect = comdat any

@_ZTV11GrFixedClip = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.GrFixedClip*)* @_ZN11GrFixedClipD2Ev to i8*), i8* bitcast (void (%class.GrFixedClip*)* @_ZN11GrFixedClipD0Ev to i8*), i8* bitcast ({ i64, i64 } (%class.GrFixedClip*)* @_ZNK11GrFixedClip21getConservativeBoundsEv to i8*), i8* bitcast (i32 (%class.GrHardClip*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, i32, i1, %class.GrAppliedClip*, %struct.SkRect*)* @_ZNK10GrHardClip5applyEP18GrRecordingContextP20GrSurfaceDrawContext8GrAATypebP13GrAppliedClipP6SkRect to i8*), i8* bitcast (void (%"struct.GrClip::PreClipResult"*, %class.GrFixedClip*, %struct.SkRect*, i1)* @_ZNK11GrFixedClip8preApplyERK6SkRect4GrAA to i8*), i8* bitcast (i32 (%class.GrFixedClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)* @_ZNK11GrFixedClip5applyEP17GrAppliedHardClipP7SkIRect to i8*)] }, align 8

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden { i64, i64 } @_ZNK11GrFixedClip21getConservativeBoundsEv(%class.GrFixedClip* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1
  %3 = bitcast %struct.SkIRect* %2 to i64*
  %4 = load i64, i64* %3, align 4
  %5 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 2
  %6 = bitcast i32* %5 to i64*
  %7 = load i64, i64* %6, align 4
  %8 = insertvalue { i64, i64 } undef, i64 %4, 0
  %9 = insertvalue { i64, i64 } %8, i64 %7, 1
  ret { i64, i64 } %9
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11GrFixedClip8preApplyERK6SkRect4GrAA(%"struct.GrClip::PreClipResult"* noalias nocapture sret, %class.GrFixedClip*, %struct.SkRect* dereferenceable(16), i1 zeroext) unnamed_addr #2 align 2 {
  %5 = alloca %struct.SkIRect, align 4
  %6 = alloca { <2 x float>, <2 x float> }, align 8
  %7 = alloca %class.SkRRect, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.SkIRect*
  %10 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #8
  %11 = bitcast { i64, i64 }* %8 to i32*
  %12 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 1
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %14 = bitcast i64* %13 to i32*
  %15 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 3
  %16 = tail call { i64, i64 } @_ZN6GrClip15GetPixelIBoundsERK6SkRect4GrAANS_10BoundsTypeE(%struct.SkRect* dereferenceable(16) %2, i1 zeroext %3, i32 0)
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %18 = extractvalue { i64, i64 } %16, 0
  store i64 %18, i64* %17, align 8
  %19 = extractvalue { i64, i64 } %16, 1
  store i64 %19, i64* %13, align 8
  %20 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1
  %21 = bitcast %struct.SkIRect* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %21, i8 -86, i64 16, i1 false) #8
  %22 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %5, %struct.SkIRect* dereferenceable(16) %20, %struct.SkIRect* nonnull dereferenceable(16) %9) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #8
  br i1 %22, label %28, label %23

23:                                               ; preds = %4
  %24 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 0
  store i32 2, i32* %24, align 4
  %25 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 1
  %26 = bitcast %class.SkRRect* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 52, i1 false) #8
  %27 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 3
  store i8 0, i8* %27, align 1
  br label %142

28:                                               ; preds = %4
  %29 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 2, i32 0
  %30 = load i8, i8* %29, align 8, !range !2
  %31 = icmp eq i8 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 2, i32 1, i32 0
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %39, label %36

36:                                               ; preds = %32, %28
  %37 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 3
  store i8 0, i8* %37, align 1
  %38 = bitcast %"struct.GrClip::PreClipResult"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %38, i8 0, i64 56, i1 false)
  br label %142

39:                                               ; preds = %32
  %40 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 0
  %41 = load i32, i32* %40, align 4
  %42 = icmp sgt i32 %41, 0
  br i1 %42, label %59, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 0, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = icmp slt i32 %49, %51
  br i1 %52, label %59, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 3
  %55 = load i32, i32* %54, align 4
  %56 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 0, i32 1
  %57 = load i32, i32* %56, align 4
  %58 = icmp slt i32 %55, %57
  br i1 %58, label %59, label %106

59:                                               ; preds = %39, %43, %47, %53
  %60 = load i32, i32* %14, align 8
  %61 = sext i32 %60 to i64
  %62 = load i32, i32* %11, align 8
  %63 = sext i32 %62 to i64
  %64 = sub nsw i64 %61, %63
  %65 = load i32, i32* %15, align 4
  %66 = sext i32 %65 to i64
  %67 = load i32, i32* %12, align 4
  %68 = sext i32 %67 to i64
  %69 = sub nsw i64 %66, %68
  %70 = icmp slt i64 %64, 1
  %71 = icmp slt i64 %69, 1
  %72 = or i1 %70, %71
  br i1 %72, label %111, label %73

73:                                               ; preds = %59
  %74 = or i64 %69, %64
  %75 = add nsw i64 %74, 2147483648
  %76 = icmp ugt i64 %75, 4294967295
  br i1 %76, label %111, label %77

77:                                               ; preds = %73
  %78 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = sext i32 %79 to i64
  %81 = sext i32 %41 to i64
  %82 = sub nsw i64 %80, %81
  %83 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 3
  %84 = load i32, i32* %83, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = sext i32 %87 to i64
  %89 = sub nsw i64 %85, %88
  %90 = icmp slt i64 %82, 1
  %91 = icmp slt i64 %89, 1
  %92 = or i1 %90, %91
  br i1 %92, label %111, label %93

93:                                               ; preds = %77
  %94 = or i64 %89, %82
  %95 = add nsw i64 %94, 2147483648
  %96 = icmp ugt i64 %95, 4294967295
  %97 = icmp sgt i32 %41, %62
  %98 = or i1 %97, %96
  %99 = icmp sgt i32 %87, %67
  %100 = or i1 %99, %98
  %101 = icmp slt i32 %79, %60
  %102 = or i1 %101, %100
  %103 = icmp sge i32 %84, %65
  %104 = xor i1 %102, true
  %105 = and i1 %103, %104
  br i1 %105, label %106, label %111

106:                                              ; preds = %93, %53
  %107 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 0
  store i32 1, i32* %107, align 4
  %108 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 1
  %109 = bitcast %class.SkRRect* %108 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %109, i8 0, i64 52, i1 false) #8
  %110 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 3
  store i8 0, i8* %110, align 1
  br label %142

111:                                              ; preds = %59, %73, %77, %93
  %112 = sitofp i32 %41 to float
  %113 = insertelement <2 x float> undef, float %112, i32 0
  %114 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = sitofp i32 %115 to float
  %117 = insertelement <2 x float> %113, float %116, i32 1
  %118 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 2
  %119 = load i32, i32* %118, align 4
  %120 = sitofp i32 %119 to float
  %121 = insertelement <2 x float> undef, float %120, i32 0
  %122 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %1, i64 0, i32 1, i32 1, i32 3
  %123 = load i32, i32* %122, align 4
  %124 = sitofp i32 %123 to float
  %125 = insertelement <2 x float> %121, float %124, i32 1
  %126 = bitcast { <2 x float>, <2 x float> }* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %126)
  %127 = bitcast %class.SkRRect* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %127)
  %128 = bitcast { <2 x float>, <2 x float> }* %6 to %struct.SkRect*
  %129 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 0
  store <2 x float> %117, <2 x float>* %129, align 8
  %130 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %6, i64 0, i32 1
  store <2 x float> %125, <2 x float>* %130, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %127, i8 0, i64 52, i1 false) #8, !alias.scope !3
  %131 = call zeroext i1 @_ZN7SkRRect14initializeRectERK6SkRect(%class.SkRRect* nonnull %7, %struct.SkRect* nonnull dereferenceable(16) %128) #8
  br i1 %131, label %132, label %136

132:                                              ; preds = %111
  %133 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %7, i64 0, i32 2
  %134 = getelementptr inbounds %class.SkRRect, %class.SkRRect* %7, i64 0, i32 1, i64 0
  %135 = bitcast %struct.SkPoint* %134 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %135, i8 0, i64 32, i1 false) #8, !alias.scope !3
  store i32 1, i32* %133, align 8, !alias.scope !3
  br label %136

136:                                              ; preds = %111, %132
  %137 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 0
  store i32 0, i32* %137, align 4
  %138 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 1
  %139 = bitcast %class.SkRRect* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %139, i8* nonnull align 8 %127, i64 52, i1 false) #8
  %140 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 2
  store i8 0, i8* %140, align 4
  %141 = getelementptr inbounds %"struct.GrClip::PreClipResult", %"struct.GrClip::PreClipResult"* %0, i64 0, i32 3
  store i8 1, i8* %141, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %126)
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %127)
  br label %142

142:                                              ; preds = %136, %106, %36, %23
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64, i64 } @_ZN6GrClip15GetPixelIBoundsERK6SkRect4GrAANS_10BoundsTypeE(%struct.SkRect* dereferenceable(16), i1 zeroext, i32) local_unnamed_addr #3 comdat align 2 {
  %4 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 0
  %5 = load float, float* %4, align 4
  %6 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 2
  %7 = load float, float* %6, align 4
  %8 = fcmp olt float %5, %7
  br i1 %8, label %9, label %158

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 1
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %0, i64 0, i32 3
  %13 = load float, float* %12, align 4
  %14 = fcmp uge float %11, %13
  br i1 %14, label %158, label %15

15:                                               ; preds = %9
  %16 = icmp eq i32 %2, 0
  br i1 %16, label %17, label %88

17:                                               ; preds = %15
  %18 = fadd float %5, 0x3F50624DE0000000
  br i1 %1, label %47, label %19

19:                                               ; preds = %17
  %20 = fadd float %18, 0xBFA99999A0000000
  %21 = fadd float %20, 5.000000e-01
  %22 = tail call float @llvm.floor.f32(float %21) #8
  %23 = fcmp olt float %22, 0x41DFFFFFE0000000
  %24 = select i1 %23, float %22, float 0x41DFFFFFE0000000
  %25 = fcmp ogt float %24, 0xC1DFFFFFE0000000
  %26 = select i1 %25, float %24, float 0xC1DFFFFFE0000000
  %27 = fadd float %11, 0x3F50624DE0000000
  %28 = fadd float %27, 0xBFA99999A0000000
  %29 = fadd float %28, 5.000000e-01
  %30 = tail call float @llvm.floor.f32(float %29) #8
  %31 = fcmp olt float %30, 0x41DFFFFFE0000000
  %32 = select i1 %31, float %30, float 0x41DFFFFFE0000000
  %33 = fcmp ogt float %32, 0xC1DFFFFFE0000000
  %34 = select i1 %33, float %32, float 0xC1DFFFFFE0000000
  %35 = fadd float %7, 0xBF50624DE0000000
  %36 = fadd float %35, 0x3FA99999A0000000
  %37 = fadd float %36, 5.000000e-01
  %38 = tail call float @llvm.floor.f32(float %37) #8
  %39 = fcmp olt float %38, 0x41DFFFFFE0000000
  %40 = select i1 %39, float %38, float 0x41DFFFFFE0000000
  %41 = fcmp ogt float %40, 0xC1DFFFFFE0000000
  %42 = select i1 %41, float %40, float 0xC1DFFFFFE0000000
  %43 = fadd float %13, 0xBF50624DE0000000
  %44 = fadd float %43, 0x3FA99999A0000000
  %45 = fadd float %44, 5.000000e-01
  %46 = tail call float @llvm.floor.f32(float %45) #8
  br label %67

47:                                               ; preds = %17
  %48 = tail call float @llvm.floor.f32(float %18) #8
  %49 = fcmp olt float %48, 0x41DFFFFFE0000000
  %50 = select i1 %49, float %48, float 0x41DFFFFFE0000000
  %51 = fcmp ogt float %50, 0xC1DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0xC1DFFFFFE0000000
  %53 = fadd float %11, 0x3F50624DE0000000
  %54 = tail call float @llvm.floor.f32(float %53) #8
  %55 = fcmp olt float %54, 0x41DFFFFFE0000000
  %56 = select i1 %55, float %54, float 0x41DFFFFFE0000000
  %57 = fcmp ogt float %56, 0xC1DFFFFFE0000000
  %58 = select i1 %57, float %56, float 0xC1DFFFFFE0000000
  %59 = fadd float %7, 0xBF50624DE0000000
  %60 = tail call float @llvm.ceil.f32(float %59) #8
  %61 = fcmp olt float %60, 0x41DFFFFFE0000000
  %62 = select i1 %61, float %60, float 0x41DFFFFFE0000000
  %63 = fcmp ogt float %62, 0xC1DFFFFFE0000000
  %64 = select i1 %63, float %62, float 0xC1DFFFFFE0000000
  %65 = fadd float %13, 0xBF50624DE0000000
  %66 = tail call float @llvm.ceil.f32(float %65) #8
  br label %67

67:                                               ; preds = %19, %47
  %68 = phi float [ %46, %19 ], [ %66, %47 ]
  %69 = phi float [ %42, %19 ], [ %64, %47 ]
  %70 = phi float [ %26, %19 ], [ %52, %47 ]
  %71 = phi float [ %34, %19 ], [ %58, %47 ]
  %72 = fcmp olt float %68, 0x41DFFFFFE0000000
  %73 = select i1 %72, float %68, float 0x41DFFFFFE0000000
  %74 = fcmp ogt float %73, 0xC1DFFFFFE0000000
  %75 = select i1 %74, float %73, float 0xC1DFFFFFE0000000
  %76 = fptosi float %71 to i32
  %77 = fptosi float %70 to i32
  %78 = fptosi float %69 to i32
  %79 = fptosi float %75 to i32
  %80 = zext i32 %76 to i64
  %81 = shl nuw i64 %80, 32
  %82 = zext i32 %77 to i64
  %83 = or i64 %81, %82
  %84 = zext i32 %79 to i64
  %85 = shl nuw i64 %84, 32
  %86 = zext i32 %78 to i64
  %87 = or i64 %85, %86
  br label %158

88:                                               ; preds = %15
  %89 = fadd float %5, 0xBF50624DE0000000
  br i1 %1, label %117, label %90

90:                                               ; preds = %88
  %91 = fadd float %89, 0x3FA99999A0000000
  %92 = fadd float %91, 5.000000e-01
  %93 = tail call float @llvm.floor.f32(float %92) #8
  %94 = fcmp olt float %93, 0x41DFFFFFE0000000
  %95 = select i1 %94, float %93, float 0x41DFFFFFE0000000
  %96 = fcmp ogt float %95, 0xC1DFFFFFE0000000
  %97 = select i1 %96, float %95, float 0xC1DFFFFFE0000000
  %98 = fadd float %11, 0xBF50624DE0000000
  %99 = fadd float %98, 0x3FA99999A0000000
  %100 = fadd float %99, 5.000000e-01
  %101 = tail call float @llvm.floor.f32(float %100) #8
  %102 = fcmp olt float %101, 0x41DFFFFFE0000000
  %103 = select i1 %102, float %101, float 0x41DFFFFFE0000000
  %104 = fcmp ogt float %103, 0xC1DFFFFFE0000000
  %105 = select i1 %104, float %103, float 0xC1DFFFFFE0000000
  %106 = fadd float %7, 0x3F50624DE0000000
  %107 = fadd float %106, 0xBFA99999A0000000
  %108 = fadd float %107, 5.000000e-01
  %109 = tail call float @llvm.floor.f32(float %108) #8
  %110 = fcmp olt float %109, 0x41DFFFFFE0000000
  %111 = select i1 %110, float %109, float 0x41DFFFFFE0000000
  %112 = fcmp ogt float %111, 0xC1DFFFFFE0000000
  %113 = select i1 %112, float %111, float 0xC1DFFFFFE0000000
  %114 = fadd float %13, 0x3F50624DE0000000
  %115 = fadd float %114, 0xBFA99999A0000000
  %116 = fadd float %115, 5.000000e-01
  br label %136

117:                                              ; preds = %88
  %118 = tail call float @llvm.ceil.f32(float %89) #8
  %119 = fcmp olt float %118, 0x41DFFFFFE0000000
  %120 = select i1 %119, float %118, float 0x41DFFFFFE0000000
  %121 = fcmp ogt float %120, 0xC1DFFFFFE0000000
  %122 = select i1 %121, float %120, float 0xC1DFFFFFE0000000
  %123 = fadd float %11, 0xBF50624DE0000000
  %124 = tail call float @llvm.ceil.f32(float %123) #8
  %125 = fcmp olt float %124, 0x41DFFFFFE0000000
  %126 = select i1 %125, float %124, float 0x41DFFFFFE0000000
  %127 = fcmp ogt float %126, 0xC1DFFFFFE0000000
  %128 = select i1 %127, float %126, float 0xC1DFFFFFE0000000
  %129 = fadd float %7, 0x3F50624DE0000000
  %130 = tail call float @llvm.floor.f32(float %129) #8
  %131 = fcmp olt float %130, 0x41DFFFFFE0000000
  %132 = select i1 %131, float %130, float 0x41DFFFFFE0000000
  %133 = fcmp ogt float %132, 0xC1DFFFFFE0000000
  %134 = select i1 %133, float %132, float 0xC1DFFFFFE0000000
  %135 = fadd float %13, 0x3F50624DE0000000
  br label %136

136:                                              ; preds = %90, %117
  %137 = phi float [ %116, %90 ], [ %135, %117 ]
  %138 = phi float [ %113, %90 ], [ %134, %117 ]
  %139 = phi float [ %97, %90 ], [ %122, %117 ]
  %140 = phi float [ %105, %90 ], [ %128, %117 ]
  %141 = tail call float @llvm.floor.f32(float %137) #8
  %142 = fcmp olt float %141, 0x41DFFFFFE0000000
  %143 = select i1 %142, float %141, float 0x41DFFFFFE0000000
  %144 = fcmp ogt float %143, 0xC1DFFFFFE0000000
  %145 = select i1 %144, float %143, float 0xC1DFFFFFE0000000
  %146 = fptosi float %140 to i32
  %147 = fptosi float %139 to i32
  %148 = fptosi float %138 to i32
  %149 = fptosi float %145 to i32
  %150 = zext i32 %146 to i64
  %151 = shl nuw i64 %150, 32
  %152 = zext i32 %147 to i64
  %153 = or i64 %151, %152
  %154 = zext i32 %149 to i64
  %155 = shl nuw i64 %154, 32
  %156 = zext i32 %148 to i64
  %157 = or i64 %155, %156
  br label %158

158:                                              ; preds = %3, %9, %136, %67
  %159 = phi i64 [ %83, %67 ], [ %153, %136 ], [ 0, %9 ], [ 0, %3 ]
  %160 = phi i64 [ %87, %67 ], [ %157, %136 ], [ 0, %9 ], [ 0, %3 ]
  %161 = insertvalue { i64, i64 } undef, i64 %159, 0
  %162 = insertvalue { i64, i64 } %161, i64 %160, 1
  ret { i64, i64 } %162
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK11GrFixedClip5applyEP17GrAppliedHardClipP7SkIRect(%class.GrFixedClip*, %class.GrAppliedHardClip*, %struct.SkIRect*) unnamed_addr #3 align 2 {
  %4 = alloca %struct.SkIRect, align 4
  %5 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1
  %6 = bitcast %struct.SkIRect* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %6, i8 -86, i64 16, i1 false) #8
  %7 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* nonnull %4, %struct.SkIRect* dereferenceable(16) %5, %struct.SkIRect* dereferenceable(16) %2) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8
  br i1 %7, label %8, label %137

8:                                                ; preds = %3
  %9 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %28, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %12
  %17 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %18, %20
  br i1 %21, label %28, label %22

22:                                               ; preds = %16
  %23 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 3
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %28, label %96

28:                                               ; preds = %8, %12, %16, %22
  %29 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = sub nsw i64 %31, %34
  %36 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 3
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %2, i64 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sext i32 %40 to i64
  %42 = sub nsw i64 %38, %41
  %43 = icmp slt i64 %35, 1
  %44 = icmp slt i64 %42, 1
  %45 = or i1 %43, %44
  br i1 %45, label %79, label %46

46:                                               ; preds = %28
  %47 = or i64 %42, %35
  %48 = add nsw i64 %47, 2147483648
  %49 = icmp ugt i64 %48, 4294967295
  br i1 %49, label %79, label %50

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 2
  %52 = load i32, i32* %51, align 4
  %53 = sext i32 %52 to i64
  %54 = sext i32 %10 to i64
  %55 = sub nsw i64 %53, %54
  %56 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 3
  %57 = load i32, i32* %56, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 1, i32 1, i32 1
  %60 = load i32, i32* %59, align 4
  %61 = sext i32 %60 to i64
  %62 = sub nsw i64 %58, %61
  %63 = icmp slt i64 %55, 1
  %64 = icmp slt i64 %62, 1
  %65 = or i1 %63, %64
  br i1 %65, label %79, label %66

66:                                               ; preds = %50
  %67 = or i64 %62, %55
  %68 = add nsw i64 %67, 2147483648
  %69 = icmp ugt i64 %68, 4294967295
  %70 = icmp sgt i32 %10, %33
  %71 = or i1 %70, %69
  %72 = icmp sgt i32 %60, %40
  %73 = or i1 %72, %71
  %74 = icmp slt i32 %52, %30
  %75 = or i1 %74, %73
  %76 = icmp sge i32 %57, %37
  %77 = xor i1 %75, true
  %78 = and i1 %76, %77
  br i1 %78, label %96, label %79

79:                                               ; preds = %28, %46, %50, %66
  %80 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* %2, %struct.SkIRect* dereferenceable(16) %2, %struct.SkIRect* dereferenceable(16) %5) #8
  %81 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 0, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 0, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = zext i32 %84 to i64
  %86 = shl nuw i64 %85, 32
  %87 = zext i32 %82 to i64
  %88 = or i64 %86, %87
  %89 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 0, i32 1
  %90 = bitcast %struct.SkIRect* %89 to i64*
  store i64 0, i64* %90, align 4
  %91 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 0, i32 1, i32 2
  %92 = bitcast i32* %91 to i64*
  store i64 %88, i64* %92, align 4
  %93 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* %89, %struct.SkIRect* dereferenceable(16) %89, %struct.SkIRect* dereferenceable(16) %2) #8
  br i1 %93, label %96, label %94

94:                                               ; preds = %79
  %95 = bitcast %struct.SkIRect* %89 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %95, i8 0, i64 16, i1 false) #8
  br label %96

96:                                               ; preds = %94, %79, %66, %22
  %97 = phi i32 [ 1, %66 ], [ 1, %22 ], [ 0, %79 ], [ 0, %94 ]
  %98 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 0
  %99 = load i8, i8* %98, align 8, !range !2
  %100 = icmp eq i8 %99, 0
  br i1 %100, label %101, label %105

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 0
  %103 = load i32, i32* %102, align 8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %137, label %105

105:                                              ; preds = %101, %96
  %106 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 1, i32 0
  store i8 %99, i8* %106, align 8
  %107 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 1, i32 1, i32 0
  %108 = load i32, i32* %107, align 8
  %109 = icmp slt i32 %108, 2
  br i1 %109, label %121, label %110

110:                                              ; preds = %105
  %111 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 1, i32 1, i32 1, i32 0
  %112 = load %"struct.GrWindowRectangles::Rec"*, %"struct.GrWindowRectangles::Rec"** %111, align 8
  %113 = icmp eq %"struct.GrWindowRectangles::Rec"* %112, null
  br i1 %113, label %121, label %114

114:                                              ; preds = %110
  %115 = getelementptr inbounds %"struct.GrWindowRectangles::Rec", %"struct.GrWindowRectangles::Rec"* %112, i64 0, i32 0, i32 0
  %116 = load i32, i32* %115, align 4
  %117 = add nsw i32 %116, -1
  store i32 %117, i32* %115, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = bitcast %"struct.GrWindowRectangles::Rec"* %112 to i8*
  call void @_ZdlPv(i8* %120) #9
  br label %121

121:                                              ; preds = %119, %114, %110, %105
  %122 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 0
  %123 = load i32, i32* %122, align 8
  store i32 %123, i32* %107, align 8
  %124 = icmp slt i32 %123, 2
  %125 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 1
  br i1 %124, label %126, label %130

126:                                              ; preds = %121
  %127 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 1, i32 1, i32 1
  %128 = bitcast %union.anon* %127 to i8*
  %129 = bitcast %union.anon* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %128, i8* align 4 %129, i64 16, i1 false) #8
  br label %137

130:                                              ; preds = %121
  %131 = getelementptr inbounds %union.anon, %union.anon* %125, i64 0, i32 0
  %132 = load %"struct.GrWindowRectangles::Rec"*, %"struct.GrWindowRectangles::Rec"** %131, align 8
  %133 = getelementptr inbounds %"struct.GrWindowRectangles::Rec", %"struct.GrWindowRectangles::Rec"* %132, i64 0, i32 0, i32 0
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %133, align 4
  %136 = getelementptr inbounds %class.GrAppliedHardClip, %class.GrAppliedHardClip* %1, i64 0, i32 1, i32 1, i32 1, i32 0
  store %"struct.GrWindowRectangles::Rec"* %132, %"struct.GrWindowRectangles::Rec"** %136, align 8
  br label %137

137:                                              ; preds = %101, %130, %126, %3
  %138 = phi i32 [ 2, %3 ], [ %97, %101 ], [ 0, %126 ], [ 0, %130 ]
  ret i32 %138
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11GrFixedClipD2Ev(%class.GrFixedClip*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV11GrFixedClip, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 2
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 1, i32 0
  %8 = load %"struct.GrWindowRectangles::Rec"*, %"struct.GrWindowRectangles::Rec"** %7, align 8
  %9 = icmp eq %"struct.GrWindowRectangles::Rec"* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.GrWindowRectangles::Rec", %"struct.GrWindowRectangles::Rec"* %8, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %11, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"struct.GrWindowRectangles::Rec"* %8 to i8*
  tail call void @_ZdlPv(i8* %16) #9
  br label %17

17:                                               ; preds = %1, %6, %10, %15
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11GrFixedClipD0Ev(%class.GrFixedClip*) unnamed_addr #4 comdat align 2 {
  %2 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV11GrFixedClip, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = icmp slt i32 %4, 2
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.GrFixedClip, %class.GrFixedClip* %0, i64 0, i32 2, i32 1, i32 1, i32 0
  %8 = load %"struct.GrWindowRectangles::Rec"*, %"struct.GrWindowRectangles::Rec"** %7, align 8
  %9 = icmp eq %"struct.GrWindowRectangles::Rec"* %8, null
  br i1 %9, label %17, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %"struct.GrWindowRectangles::Rec", %"struct.GrWindowRectangles::Rec"* %8, i64 0, i32 0, i32 0
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %11, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10
  %16 = bitcast %"struct.GrWindowRectangles::Rec"* %8 to i8*
  tail call void @_ZdlPv(i8* %16) #9
  br label %17

17:                                               ; preds = %1, %6, %10, %15
  %18 = bitcast %class.GrFixedClip* %0 to i8*
  tail call void @_ZdlPv(i8* %18) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK10GrHardClip5applyEP18GrRecordingContextP20GrSurfaceDrawContext8GrAATypebP13GrAppliedClipP6SkRect(%class.GrHardClip*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, i32, i1 zeroext, %class.GrAppliedClip*, %struct.SkRect*) unnamed_addr #3 comdat align 2 {
  %8 = alloca { i64, i64 }, align 8
  %9 = bitcast { i64, i64 }* %8 to %struct.SkIRect*
  %10 = alloca { <2 x float>, <2 x float> }, align 8
  %11 = bitcast { <2 x float>, <2 x float> }* %10 to %struct.SkRect*
  %12 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #8
  %13 = bitcast { i64, i64 }* %8 to i32*
  %14 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 1
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 1
  %16 = bitcast i64* %15 to i32*
  %17 = getelementptr inbounds %struct.SkIRect, %struct.SkIRect* %9, i64 0, i32 3
  %18 = icmp ne i32 %3, 0
  %19 = tail call { i64, i64 } @_ZN6GrClip15GetPixelIBoundsERK6SkRect4GrAANS_10BoundsTypeE(%struct.SkRect* dereferenceable(16) %6, i1 zeroext %18, i32 0)
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i64 0, i32 0
  %21 = extractvalue { i64, i64 } %19, 0
  store i64 %21, i64* %20, align 8
  %22 = extractvalue { i64, i64 } %19, 1
  store i64 %22, i64* %15, align 8
  %23 = getelementptr inbounds %class.GrAppliedClip, %class.GrAppliedClip* %5, i64 0, i32 0
  %24 = bitcast %class.GrHardClip* %0 to i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)***
  %25 = load i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)**, i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)*** %24, align 8
  %26 = getelementptr inbounds i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)*, i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)** %25, i64 5
  %27 = load i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)*, i32 (%class.GrHardClip*, %class.GrAppliedHardClip*, %struct.SkIRect*)** %26, align 8
  %28 = call i32 %27(%class.GrHardClip* %0, %class.GrAppliedHardClip* %23, %struct.SkIRect* nonnull %9) #8
  %29 = bitcast { <2 x float>, <2 x float> }* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #8
  %30 = load i32, i32* %13, align 8
  %31 = sitofp i32 %30 to float
  %32 = insertelement <2 x float> undef, float %31, i32 0
  %33 = load i32, i32* %14, align 4
  %34 = sitofp i32 %33 to float
  %35 = insertelement <2 x float> %32, float %34, i32 1
  %36 = load i32, i32* %16, align 8
  %37 = sitofp i32 %36 to float
  %38 = insertelement <2 x float> undef, float %37, i32 0
  %39 = load i32, i32* %17, align 4
  %40 = sitofp i32 %39 to float
  %41 = insertelement <2 x float> %38, float %40, i32 1
  %42 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 0
  store <2 x float> %35, <2 x float>* %42, align 8
  %43 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1
  store <2 x float> %41, <2 x float>* %43, align 8
  %44 = call zeroext i1 @_ZN6SkRect9intersectERKS_(%struct.SkRect* %6, %struct.SkRect* nonnull dereferenceable(16) %11) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #8
  ret i32 %28
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #5

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #6

declare zeroext i1 @_ZN7SkRRect14initializeRectERK6SkRect(%class.SkRRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare zeroext i1 @_ZN6SkRect9intersectERKS_(%struct.SkRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #6

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN7SkRRect8MakeRectERK6SkRect: argument 0"}
!5 = distinct !{!5, !"_ZN7SkRRect8MakeRectERK6SkRect"}
