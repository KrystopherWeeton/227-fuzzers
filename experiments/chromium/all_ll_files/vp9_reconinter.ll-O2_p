; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/common/vp9_reconinter.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/common/vp9_reconinter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mv = type { i16, i16 }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.buf_2d = type { i8*, i32 }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }

@num_4x4_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_4x4_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@ss_size_lookup = external local_unnamed_addr constant [13 x [2 x [2 x i8]]], align 16
@vp9_filter_kernels = external local_unnamed_addr global [5 x [8 x i16]*], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_highbd_build_inter_predictor(i16*, i32, i16*, i32, %struct.mv* nocapture readonly, %struct.scale_factors*, i32, i32, i32, [8 x i16]*, i32, i32, i32, i32) local_unnamed_addr #0 {
  %15 = alloca %struct.mv, align 2
  %16 = icmp ne i32 %10, 1
  %17 = bitcast %struct.mv* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #4
  %18 = getelementptr inbounds %struct.mv, %struct.mv* %15, i64 0, i32 0
  %19 = getelementptr inbounds %struct.mv, %struct.mv* %15, i64 0, i32 1
  %20 = getelementptr inbounds %struct.mv, %struct.mv* %4, i64 0, i32 0
  %21 = load i16, i16* %20, align 2
  %22 = sext i16 %21 to i32
  %23 = zext i1 %16 to i32
  %24 = shl nsw i32 %22, %23
  %25 = trunc i32 %24 to i16
  store i16 %25, i16* %18, align 2
  %26 = getelementptr inbounds %struct.mv, %struct.mv* %4, i64 0, i32 1
  %27 = load i16, i16* %26, align 2
  %28 = sext i16 %27 to i32
  %29 = shl nsw i32 %28, %23
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %19, align 2
  %31 = call i64 @vp9_scale_mv(%struct.mv* nonnull %15, i32 %11, i32 %12, %struct.scale_factors* %5) #4
  %32 = trunc i64 %31 to i32
  %33 = lshr i64 %31, 32
  %34 = trunc i64 %33 to i32
  %35 = and i32 %34, 15
  %36 = and i32 %32, 15
  %37 = ashr i32 %32, 4
  %38 = mul nsw i32 %37, %1
  %39 = ashr i32 %34, 4
  %40 = add nsw i32 %38, %39
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds i16, i16* %0, i64 %41
  %43 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 2
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = icmp ne i32 %35, 0
  %48 = zext i1 %47 to i64
  %49 = icmp ne i32 %36, 0
  %50 = zext i1 %49 to i64
  %51 = sext i32 %8 to i64
  %52 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 7, i64 %48, i64 %50, i64 %51
  %53 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** %52, align 8
  %54 = sext i32 %1 to i64
  %55 = sext i32 %3 to i64
  call void %53(i16* %42, i64 %54, i16* %2, i64 %55, [8 x i16]* %9, i32 %35, i32 %44, i32 %36, i32 %46, i32 %6, i32 %7, i32 %13) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @vp9_scale_mv(%struct.mv*, i32, i32, %struct.scale_factors*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_inter_predictor(i8*, i32, i8*, i32, %struct.mv* nocapture readonly, %struct.scale_factors*, i32, i32, i32, [8 x i16]*, i32, i32, i32) local_unnamed_addr #0 {
  %14 = alloca %struct.mv, align 2
  %15 = icmp ne i32 %10, 1
  %16 = bitcast %struct.mv* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #4
  %17 = getelementptr inbounds %struct.mv, %struct.mv* %14, i64 0, i32 0
  %18 = getelementptr inbounds %struct.mv, %struct.mv* %14, i64 0, i32 1
  %19 = getelementptr inbounds %struct.mv, %struct.mv* %4, i64 0, i32 0
  %20 = load i16, i16* %19, align 2
  %21 = sext i16 %20 to i32
  %22 = zext i1 %15 to i32
  %23 = shl nsw i32 %21, %22
  %24 = trunc i32 %23 to i16
  store i16 %24, i16* %17, align 2
  %25 = getelementptr inbounds %struct.mv, %struct.mv* %4, i64 0, i32 1
  %26 = load i16, i16* %25, align 2
  %27 = sext i16 %26 to i32
  %28 = shl nsw i32 %27, %22
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %18, align 2
  %30 = call i64 @vp9_scale_mv(%struct.mv* nonnull %14, i32 %11, i32 %12, %struct.scale_factors* %5) #4
  %31 = trunc i64 %30 to i32
  %32 = lshr i64 %30, 32
  %33 = trunc i64 %32 to i32
  %34 = and i32 %33, 15
  %35 = and i32 %31, 15
  %36 = ashr i32 %31, 4
  %37 = mul nsw i32 %36, %1
  %38 = ashr i32 %33, 4
  %39 = add nsw i32 %37, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %0, i64 %40
  %42 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 3
  %45 = load i32, i32* %44, align 4
  %46 = icmp ne i32 %34, 0
  %47 = zext i1 %46 to i64
  %48 = icmp ne i32 %35, 0
  %49 = zext i1 %48 to i64
  %50 = sext i32 %8 to i64
  %51 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 6, i64 %47, i64 %49, i64 %50
  %52 = load void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)** %51, align 8
  %53 = sext i32 %1 to i64
  %54 = sext i32 %3 to i64
  call void %52(i8* %41, i64 %53, i8* %2, i64 %54, [8 x i16]* %9, i32 %34, i32 %43, i32 %35, i32 %45, i32 %6, i32 %7) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #4
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @clamp_mv_to_umv_border_sb(%struct.macroblockd* nocapture readonly, %struct.mv* nocapture readonly, i32, i32, i32, i32) local_unnamed_addr #3 {
  %7 = shl i32 %2, 4
  %8 = add i32 %7, 48
  %9 = shl i32 %3, 4
  %10 = add i32 %9, 48
  %11 = getelementptr inbounds %struct.mv, %struct.mv* %1, i64 0, i32 0
  %12 = load i16, i16* %11, align 2
  %13 = sext i16 %12 to i32
  %14 = sub nsw i32 1, %5
  %15 = shl i32 %13, %14
  %16 = getelementptr inbounds %struct.mv, %struct.mv* %1, i64 0, i32 1
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = sub nsw i32 1, %4
  %20 = shl i32 %18, %19
  %21 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 12
  %22 = load i32, i32* %21, align 8
  %23 = shl i32 %22, %19
  %24 = sub i32 -64, %7
  %25 = add i32 %24, %23
  %26 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %27 = load i32, i32* %26, align 4
  %28 = shl i32 %27, %19
  %29 = add nsw i32 %8, %28
  %30 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 14
  %31 = load i32, i32* %30, align 8
  %32 = shl i32 %31, %14
  %33 = sub i32 -64, %9
  %34 = add i32 %33, %32
  %35 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 15
  %36 = load i32, i32* %35, align 4
  %37 = shl i32 %36, %14
  %38 = add nsw i32 %10, %37
  %39 = shl i32 %20, 16
  %40 = ashr exact i32 %39, 16
  %41 = icmp slt i32 %40, %25
  %42 = icmp sgt i32 %40, %29
  %43 = select i1 %42, i32 %29, i32 %40
  %44 = select i1 %41, i32 %25, i32 %43
  %45 = shl i32 %15, 16
  %46 = ashr exact i32 %45, 16
  %47 = icmp slt i32 %46, %34
  %48 = icmp sgt i32 %46, %38
  %49 = select i1 %48, i32 %38, i32 %46
  %50 = select i1 %47, i32 %34, i32 %49
  %51 = shl i32 %44, 16
  %52 = and i32 %50, 65535
  %53 = or i32 %52, %51
  ret i32 %53
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @average_split_mvs(%struct.macroblockd_plane* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i32, i32) local_unnamed_addr #3 {
  %5 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  %8 = zext i1 %7 to i32
  %9 = shl nuw nsw i32 %8, 1
  %10 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 0
  %13 = zext i1 %12 to i32
  %14 = or i32 %9, %13
  switch i32 %14, label %139 [
    i32 0, label %15
    i32 1, label %20
    i32 2, label %54
    i32 3, label %88
  ]

15:                                               ; preds = %4
  %16 = sext i32 %3 to i64
  %17 = sext i32 %2 to i64
  %18 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 %16, i32 1, i64 %17, i32 0
  %19 = load i32, i32* %18, align 4
  br label %140

20:                                               ; preds = %4
  %21 = add nsw i32 %3, 2
  %22 = sext i32 %3 to i64
  %23 = sext i32 %2 to i64
  %24 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 %22, i32 1, i64 %23
  %25 = bitcast %union.int_mv* %24 to %struct.mv*
  %26 = bitcast %union.int_mv* %24 to i16*
  %27 = load i16, i16* %26, align 4
  %28 = sext i16 %27 to i32
  %29 = sext i32 %21 to i64
  %30 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 %29, i32 1, i64 %23
  %31 = bitcast %union.int_mv* %30 to %struct.mv*
  %32 = bitcast %union.int_mv* %30 to i16*
  %33 = load i16, i16* %32, align 4
  %34 = sext i16 %33 to i32
  %35 = add nsw i32 %34, %28
  %36 = icmp slt i32 %35, 0
  %37 = select i1 %36, i32 -1, i32 1
  %38 = add nsw i32 %37, %35
  %39 = sdiv i32 %38, 2
  %40 = getelementptr inbounds %struct.mv, %struct.mv* %25, i64 0, i32 1
  %41 = load i16, i16* %40, align 2
  %42 = sext i16 %41 to i32
  %43 = getelementptr inbounds %struct.mv, %struct.mv* %31, i64 0, i32 1
  %44 = load i16, i16* %43, align 2
  %45 = sext i16 %44 to i32
  %46 = add nsw i32 %45, %42
  %47 = icmp slt i32 %46, 0
  %48 = select i1 %47, i32 -1, i32 1
  %49 = add nsw i32 %48, %46
  %50 = sdiv i32 %49, 2
  %51 = shl i32 %50, 16
  %52 = and i32 %39, 65535
  %53 = or i32 %51, %52
  br label %140

54:                                               ; preds = %4
  %55 = add nsw i32 %3, 1
  %56 = sext i32 %3 to i64
  %57 = sext i32 %2 to i64
  %58 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 %56, i32 1, i64 %57
  %59 = bitcast %union.int_mv* %58 to %struct.mv*
  %60 = bitcast %union.int_mv* %58 to i16*
  %61 = load i16, i16* %60, align 4
  %62 = sext i16 %61 to i32
  %63 = sext i32 %55 to i64
  %64 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 %63, i32 1, i64 %57
  %65 = bitcast %union.int_mv* %64 to %struct.mv*
  %66 = bitcast %union.int_mv* %64 to i16*
  %67 = load i16, i16* %66, align 4
  %68 = sext i16 %67 to i32
  %69 = add nsw i32 %68, %62
  %70 = icmp slt i32 %69, 0
  %71 = select i1 %70, i32 -1, i32 1
  %72 = add nsw i32 %71, %69
  %73 = sdiv i32 %72, 2
  %74 = getelementptr inbounds %struct.mv, %struct.mv* %59, i64 0, i32 1
  %75 = load i16, i16* %74, align 2
  %76 = sext i16 %75 to i32
  %77 = getelementptr inbounds %struct.mv, %struct.mv* %65, i64 0, i32 1
  %78 = load i16, i16* %77, align 2
  %79 = sext i16 %78 to i32
  %80 = add nsw i32 %79, %76
  %81 = icmp slt i32 %80, 0
  %82 = select i1 %81, i32 -1, i32 1
  %83 = add nsw i32 %82, %80
  %84 = sdiv i32 %83, 2
  %85 = shl i32 %84, 16
  %86 = and i32 %73, 65535
  %87 = or i32 %85, %86
  br label %140

88:                                               ; preds = %4
  %89 = sext i32 %2 to i64
  %90 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 0, i32 1, i64 %89
  %91 = bitcast %union.int_mv* %90 to %struct.mv*
  %92 = bitcast %union.int_mv* %90 to i16*
  %93 = load i16, i16* %92, align 4
  %94 = sext i16 %93 to i32
  %95 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 1, i32 1, i64 %89
  %96 = bitcast %union.int_mv* %95 to %struct.mv*
  %97 = bitcast %union.int_mv* %95 to i16*
  %98 = load i16, i16* %97, align 4
  %99 = sext i16 %98 to i32
  %100 = add nsw i32 %99, %94
  %101 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 2, i32 1, i64 %89
  %102 = bitcast %union.int_mv* %101 to %struct.mv*
  %103 = bitcast %union.int_mv* %101 to i16*
  %104 = load i16, i16* %103, align 4
  %105 = sext i16 %104 to i32
  %106 = add nsw i32 %100, %105
  %107 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 10, i64 3, i32 1, i64 %89
  %108 = bitcast %union.int_mv* %107 to %struct.mv*
  %109 = bitcast %union.int_mv* %107 to i16*
  %110 = load i16, i16* %109, align 4
  %111 = sext i16 %110 to i32
  %112 = add nsw i32 %106, %111
  %113 = icmp slt i32 %112, 0
  %114 = select i1 %113, i32 -2, i32 2
  %115 = add nsw i32 %114, %112
  %116 = sdiv i32 %115, 4
  %117 = getelementptr inbounds %struct.mv, %struct.mv* %91, i64 0, i32 1
  %118 = load i16, i16* %117, align 2
  %119 = sext i16 %118 to i32
  %120 = getelementptr inbounds %struct.mv, %struct.mv* %96, i64 0, i32 1
  %121 = load i16, i16* %120, align 2
  %122 = sext i16 %121 to i32
  %123 = add nsw i32 %122, %119
  %124 = getelementptr inbounds %struct.mv, %struct.mv* %102, i64 0, i32 1
  %125 = load i16, i16* %124, align 2
  %126 = sext i16 %125 to i32
  %127 = add nsw i32 %123, %126
  %128 = getelementptr inbounds %struct.mv, %struct.mv* %108, i64 0, i32 1
  %129 = load i16, i16* %128, align 2
  %130 = sext i16 %129 to i32
  %131 = add nsw i32 %127, %130
  %132 = icmp slt i32 %131, 0
  %133 = select i1 %132, i32 -2, i32 2
  %134 = add nsw i32 %133, %131
  %135 = sdiv i32 %134, 4
  %136 = shl i32 %135, 16
  %137 = and i32 %116, 65535
  %138 = or i32 %136, %137
  br label %140

139:                                              ; preds = %4
  unreachable

140:                                              ; preds = %88, %54, %20, %15
  %141 = phi i32 [ %138, %88 ], [ %87, %54 ], [ %53, %20 ], [ %19, %15 ]
  ret i32 %141
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_inter_predictors_sby(%struct.macroblockd* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #0 {
  tail call fastcc void @build_inter_predictors_for_planes(%struct.macroblockd* %0, i8 zeroext %3, i32 %1, i32 %2, i32 0, i32 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @build_inter_predictors_for_planes(%struct.macroblockd* nocapture, i8 zeroext, i32, i32, i32, i32) unnamed_addr #0 {
  %7 = shl nsw i32 %3, 3
  %8 = shl nsw i32 %2, 3
  %9 = icmp sgt i32 %4, %5
  br i1 %9, label %65, label %10

10:                                               ; preds = %6
  %11 = zext i8 %1 to i64
  %12 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 6
  %13 = sext i32 %4 to i64
  %14 = sext i32 %5 to i64
  br label %15

15:                                               ; preds = %62, %10
  %16 = phi i64 [ %63, %62 ], [ %13, %10 ]
  %17 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %16, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %16, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [13 x [2 x [2 x i8]]], [13 x [2 x [2 x i8]]]* @ss_size_lookup, i64 0, i64 %11, i64 %19, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i64
  %26 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_wide_lookup, i64 0, i64 %25
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = getelementptr inbounds [13 x i8], [13 x i8]* @num_4x4_blocks_high_lookup, i64 0, i64 %25
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = shl nuw nsw i32 %28, 2
  %33 = shl nuw nsw i32 %31, 2
  %34 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %12, align 8
  %35 = load %struct.MODE_INFO*, %struct.MODE_INFO** %34, align 8
  %36 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %35, i64 0, i32 0
  %37 = load i8, i8* %36, align 4
  %38 = icmp ult i8 %37, 3
  br i1 %38, label %39, label %60

39:                                               ; preds = %15
  %40 = icmp eq i8 %30, 0
  br i1 %40, label %62, label %41

41:                                               ; preds = %39
  %42 = icmp eq i8 %27, 0
  %43 = trunc i64 %16 to i32
  br label %44

44:                                               ; preds = %56, %41
  %45 = phi i32 [ 0, %41 ], [ %58, %56 ]
  %46 = phi i32 [ 0, %41 ], [ %57, %56 ]
  br i1 %42, label %56, label %47

47:                                               ; preds = %44
  %48 = shl nsw i32 %45, 2
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i32 [ 0, %47 ], [ %54, %49 ]
  %51 = phi i32 [ %46, %47 ], [ %52, %49 ]
  %52 = add nsw i32 %51, 1
  %53 = shl nsw i32 %50, 2
  tail call fastcc void @build_inter_predictors(%struct.macroblockd* %0, i32 %43, i32 %51, i32 %32, i32 %33, i32 %53, i32 %48, i32 4, i32 4, i32 %7, i32 %8)
  %54 = add nuw nsw i32 %50, 1
  %55 = icmp eq i32 %54, %28
  br i1 %55, label %56, label %49

56:                                               ; preds = %49, %44
  %57 = phi i32 [ %46, %44 ], [ %52, %49 ]
  %58 = add nuw nsw i32 %45, 1
  %59 = icmp eq i32 %58, %31
  br i1 %59, label %62, label %44

60:                                               ; preds = %15
  %61 = trunc i64 %16 to i32
  tail call fastcc void @build_inter_predictors(%struct.macroblockd* %0, i32 %61, i32 0, i32 %32, i32 %33, i32 0, i32 0, i32 %32, i32 %33, i32 %7, i32 %8)
  br label %62

62:                                               ; preds = %56, %39, %60
  %63 = add nsw i64 %16, 1
  %64 = icmp slt i64 %16, %14
  br i1 %64, label %15, label %65

65:                                               ; preds = %62, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_inter_predictors_sbp(%struct.macroblockd* nocapture, i32, i32, i8 zeroext, i32) local_unnamed_addr #0 {
  tail call fastcc void @build_inter_predictors_for_planes(%struct.macroblockd* %0, i8 zeroext %3, i32 %1, i32 %2, i32 %4, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_inter_predictors_sbuv(%struct.macroblockd* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #0 {
  tail call fastcc void @build_inter_predictors_for_planes(%struct.macroblockd* %0, i8 zeroext %3, i32 %1, i32 %2, i32 1, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_build_inter_predictors_sb(%struct.macroblockd* nocapture, i32, i32, i8 zeroext) local_unnamed_addr #0 {
  tail call fastcc void @build_inter_predictors_for_planes(%struct.macroblockd* %0, i8 zeroext %3, i32 %1, i32 %2, i32 0, i32 2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_setup_dst_planes(%struct.macroblockd_plane* nocapture, %struct.yv12_buffer_config* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %14 = load i32, i32* %13, align 4
  %15 = shl nsw i32 %3, 3
  %16 = shl nsw i32 %2, 3
  %17 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 0, i32 1
  %18 = load i32, i32* %17, align 8
  %19 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 0, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = ashr i32 %15, %18
  %22 = ashr i32 %16, %20
  %23 = sext i32 %22 to i64
  %24 = sext i32 %12 to i64
  %25 = mul nsw i64 %23, %24
  %26 = sext i32 %21 to i64
  %27 = add nsw i64 %25, %26
  %28 = getelementptr inbounds i8, i8* %6, i64 %27
  %29 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 0, i32 3, i32 0
  store i8* %28, i8** %29, align 8
  %30 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 0, i32 3, i32 1
  store i32 %12, i32* %30, align 8
  %31 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 1, i32 1
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 1, i32 2
  %34 = load i32, i32* %33, align 4
  %35 = ashr i32 %15, %32
  %36 = ashr i32 %16, %34
  %37 = sext i32 %36 to i64
  %38 = sext i32 %14 to i64
  %39 = mul nsw i64 %37, %38
  %40 = sext i32 %35 to i64
  %41 = add nsw i64 %39, %40
  %42 = getelementptr inbounds i8, i8* %8, i64 %41
  %43 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 1, i32 3, i32 0
  store i8* %42, i8** %43, align 8
  %44 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 1, i32 3, i32 1
  store i32 %14, i32* %44, align 8
  %45 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 2, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 2, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = ashr i32 %15, %46
  %50 = ashr i32 %16, %48
  %51 = sext i32 %50 to i64
  %52 = mul nsw i64 %51, %38
  %53 = sext i32 %49 to i64
  %54 = add nsw i64 %52, %53
  %55 = getelementptr inbounds i8, i8* %10, i64 %54
  %56 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 2, i32 3, i32 0
  store i8* %55, i8** %56, align 8
  %57 = getelementptr inbounds %struct.macroblockd_plane, %struct.macroblockd_plane* %0, i64 2, i32 3, i32 1
  store i32 %14, i32* %57, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_setup_pre_planes(%struct.macroblockd* nocapture, i32, %struct.yv12_buffer_config* readonly, i32, i32, %struct.scale_factors*) local_unnamed_addr #0 {
  %7 = icmp eq %struct.yv12_buffer_config* %2, null
  br i1 %7, label %53, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 13
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 14
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 15
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 4
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %2, i64 0, i32 9
  %18 = load i32, i32* %17, align 4
  %19 = sext i32 %1 to i64
  %20 = shl nsw i32 %4, 3
  %21 = shl nsw i32 %3, 3
  %22 = icmp eq %struct.scale_factors* %5, null
  %23 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 4
  %24 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %5, i64 0, i32 5
  %25 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = ashr i32 %20, %26
  %30 = ashr i32 %21, %28
  br i1 %22, label %36, label %31

31:                                               ; preds = %8
  %32 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %23, align 8
  %33 = tail call i32 %32(i32 %29, %struct.scale_factors* nonnull %5) #4
  %34 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %24, align 8
  %35 = tail call i32 %34(i32 %30, %struct.scale_factors* nonnull %5) #4
  br label %36

36:                                               ; preds = %8, %31
  %37 = phi i32 [ %33, %31 ], [ %29, %8 ]
  %38 = phi i32 [ %35, %31 ], [ %30, %8 ]
  %39 = sext i32 %38 to i64
  %40 = sext i32 %16 to i64
  %41 = mul nsw i64 %39, %40
  %42 = sext i32 %37 to i64
  %43 = add nsw i64 %41, %42
  %44 = getelementptr inbounds i8, i8* %10, i64 %43
  %45 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 0, i32 4, i64 %19, i32 0
  store i8* %44, i8** %45, align 8
  %46 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 0, i32 4, i64 %19, i32 1
  store i32 %16, i32* %46, align 8
  %47 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 1, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 1, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = ashr i32 %20, %48
  %52 = ashr i32 %21, %50
  br i1 %22, label %59, label %54

53:                                               ; preds = %6, %81
  ret void

54:                                               ; preds = %36
  %55 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %23, align 8
  %56 = tail call i32 %55(i32 %51, %struct.scale_factors* nonnull %5) #4
  %57 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %24, align 8
  %58 = tail call i32 %57(i32 %52, %struct.scale_factors* nonnull %5) #4
  br label %59

59:                                               ; preds = %54, %36
  %60 = phi i32 [ %56, %54 ], [ %51, %36 ]
  %61 = phi i32 [ %58, %54 ], [ %52, %36 ]
  %62 = sext i32 %61 to i64
  %63 = sext i32 %18 to i64
  %64 = mul nsw i64 %62, %63
  %65 = sext i32 %60 to i64
  %66 = add nsw i64 %64, %65
  %67 = getelementptr inbounds i8, i8* %12, i64 %66
  %68 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 1, i32 4, i64 %19, i32 0
  store i8* %67, i8** %68, align 8
  %69 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 1, i32 4, i64 %19, i32 1
  store i32 %18, i32* %69, align 8
  %70 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 2, i32 1
  %71 = load i32, i32* %70, align 8
  %72 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 2, i32 2
  %73 = load i32, i32* %72, align 4
  %74 = ashr i32 %20, %71
  %75 = ashr i32 %21, %73
  br i1 %22, label %81, label %76

76:                                               ; preds = %59
  %77 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %23, align 8
  %78 = tail call i32 %77(i32 %74, %struct.scale_factors* nonnull %5) #4
  %79 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %24, align 8
  %80 = tail call i32 %79(i32 %75, %struct.scale_factors* nonnull %5) #4
  br label %81

81:                                               ; preds = %76, %59
  %82 = phi i32 [ %78, %76 ], [ %74, %59 ]
  %83 = phi i32 [ %80, %76 ], [ %75, %59 ]
  %84 = sext i32 %83 to i64
  %85 = mul nsw i64 %84, %63
  %86 = sext i32 %82 to i64
  %87 = add nsw i64 %85, %86
  %88 = getelementptr inbounds i8, i8* %14, i64 %87
  %89 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 2, i32 4, i64 %19, i32 0
  store i8* %88, i8** %89, align 8
  %90 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 2, i32 4, i64 %19, i32 1
  store i32 %18, i32* %90, align 8
  br label %53
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @build_inter_predictors(%struct.macroblockd* nocapture, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %12 = alloca i32, align 4
  %13 = bitcast i32* %12 to %struct.mv*
  %14 = sext i32 %1 to i64
  %15 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14
  %16 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 6
  %17 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %16, align 8
  %18 = load %struct.MODE_INFO*, %struct.MODE_INFO** %17, align 8
  %19 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %18, i64 0, i32 8, i64 1
  %20 = load i8, i8* %19, align 1
  %21 = icmp sgt i8 %20, 0
  %22 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %18, i64 0, i32 7
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds [5 x [8 x i16]*], [5 x [8 x i16]*]* @vp9_filter_kernels, i64 0, i64 %24
  %26 = load [8 x i16]*, [8 x i16]** %25, align 8
  %27 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 3, i32 0
  %28 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 3, i32 1
  %29 = sext i32 %6 to i64
  %30 = sext i32 %5 to i64
  %31 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %18, i64 0, i32 0
  %32 = bitcast i32* %12 to i8*
  %33 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 1
  %34 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 2
  %35 = shl i32 %3, 4
  %36 = add i32 %35, 48
  %37 = shl i32 %4, 4
  %38 = add i32 %37, 48
  %39 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 12
  %40 = sub i32 -64, %35
  %41 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 13
  %42 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 14
  %43 = sub i32 -64, %37
  %44 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 15
  %45 = add nsw i32 %9, %5
  %46 = add nsw i32 %10, %6
  %47 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 18
  %48 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 23
  %49 = select i1 %21, i64 2, i64 1
  br label %50

50:                                               ; preds = %234, %11
  %51 = phi i64 [ %235, %234 ], [ 0, %11 ]
  %52 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 17, i64 %51
  %53 = load %struct.RefBuffer*, %struct.RefBuffer** %52, align 8
  %54 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2
  %55 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 4, i64 %51
  %56 = load i8*, i8** %27, align 8
  %57 = load i32, i32* %28, align 8
  %58 = sext i32 %57 to i64
  %59 = mul nsw i64 %58, %29
  %60 = getelementptr inbounds i8, i8* %56, i64 %30
  %61 = getelementptr inbounds i8, i8* %60, i64 %59
  %62 = load i8, i8* %31, align 4
  %63 = icmp ult i8 %62, 3
  br i1 %63, label %64, label %67

64:                                               ; preds = %50
  %65 = trunc i64 %51 to i32
  %66 = call i32 @average_split_mvs(%struct.macroblockd_plane* %15, %struct.MODE_INFO* %18, i32 %65, i32 %2)
  br label %70

67:                                               ; preds = %50
  %68 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %18, i64 0, i32 9, i64 %51, i32 0
  %69 = load i32, i32* %68, align 4
  br label %70

70:                                               ; preds = %67, %64
  %71 = phi i32 [ %66, %64 ], [ %69, %67 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #4
  %72 = load i32, i32* %33, align 8
  %73 = load i32, i32* %34, align 4
  %74 = shl i32 %71, 16
  %75 = ashr exact i32 %74, 16
  %76 = sub nsw i32 1, %73
  %77 = shl i32 %75, %76
  %78 = ashr i32 %71, 16
  %79 = sub nsw i32 1, %72
  %80 = shl i32 %78, %79
  %81 = load i32, i32* %39, align 8
  %82 = shl i32 %81, %79
  %83 = add i32 %82, %40
  %84 = load i32, i32* %41, align 4
  %85 = shl i32 %84, %79
  %86 = add nsw i32 %36, %85
  %87 = load i32, i32* %42, align 8
  %88 = shl i32 %87, %76
  %89 = add i32 %88, %43
  %90 = load i32, i32* %44, align 4
  %91 = shl i32 %90, %76
  %92 = add nsw i32 %38, %91
  %93 = shl i32 %80, 16
  %94 = ashr exact i32 %93, 16
  %95 = icmp slt i32 %94, %83
  %96 = icmp sgt i32 %94, %86
  %97 = select i1 %96, i32 %86, i32 %94
  %98 = select i1 %95, i32 %83, i32 %97
  %99 = shl i32 %77, 16
  %100 = ashr exact i32 %99, 16
  %101 = icmp slt i32 %100, %89
  %102 = icmp sgt i32 %100, %92
  %103 = select i1 %102, i32 %92, i32 %100
  %104 = select i1 %101, i32 %89, i32 %103
  %105 = shl i32 %98, 16
  %106 = and i32 %104, 65535
  %107 = or i32 %106, %105
  store i32 %107, i32* %12, align 4
  %108 = getelementptr inbounds %struct.scale_factors, %struct.scale_factors* %54, i64 0, i32 0
  %109 = load i32, i32* %108, align 8
  %110 = icmp eq i32 %109, -1
  br i1 %110, label %174, label %111

111:                                              ; preds = %70
  %112 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, -1
  br i1 %114, label %174, label %115

115:                                              ; preds = %111
  %116 = icmp eq i32 %109, 16384
  %117 = icmp eq i32 %113, 16384
  %118 = and i1 %116, %117
  br i1 %118, label %174, label %119

119:                                              ; preds = %115
  %120 = sub nsw i32 0, %81
  %121 = add nsw i32 %72, 3
  %122 = ashr i32 %120, %121
  %123 = sub nsw i32 0, %87
  %124 = add nsw i32 %73, 3
  %125 = ashr i32 %123, %124
  %126 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 1
  %127 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %126, align 8
  switch i32 %1, label %132 [
    i32 0, label %128
    i32 1, label %130
  ]

128:                                              ; preds = %119
  %129 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %127, i64 0, i32 13
  br label %134

130:                                              ; preds = %119
  %131 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %127, i64 0, i32 14
  br label %134

132:                                              ; preds = %119
  %133 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %127, i64 0, i32 15
  br label %134

134:                                              ; preds = %130, %132, %128
  %135 = phi i8** [ %131, %130 ], [ %133, %132 ], [ %129, %128 ]
  %136 = bitcast i8** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %struct.buf_2d* %55 to i64*
  store i64 %137, i64* %138, align 8
  %139 = inttoptr i64 %137 to i8*
  %140 = add nsw i32 %122, %5
  %141 = add nsw i32 %125, %6
  %142 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 4, i64 %51, i32 1
  %143 = load i32, i32* %142, align 8
  %144 = icmp eq %struct.scale_factors* %54, null
  br i1 %144, label %154, label %145

145:                                              ; preds = %134
  %146 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 4
  %147 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %146, align 8
  %148 = call i32 %147(i32 %140, %struct.scale_factors* nonnull %54) #4
  %149 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 5
  %150 = load i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)** %149, align 8
  %151 = call i32 %150(i32 %141, %struct.scale_factors* nonnull %54) #4
  %152 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %55, i64 0, i32 0
  %153 = load i8*, i8** %152, align 8
  br label %154

154:                                              ; preds = %134, %145
  %155 = phi i8* [ %153, %145 ], [ %139, %134 ]
  %156 = phi i32 [ %148, %145 ], [ %140, %134 ]
  %157 = phi i32 [ %151, %145 ], [ %141, %134 ]
  %158 = sext i32 %157 to i64
  %159 = sext i32 %143 to i64
  %160 = mul nsw i64 %158, %159
  %161 = sext i32 %156 to i64
  %162 = add nsw i64 %160, %161
  %163 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %55, i64 0, i32 0
  %164 = getelementptr inbounds i8, i8* %155, i64 %162
  store i8* %164, i8** %163, align 8
  %165 = call i64 @vp9_scale_mv(%struct.mv* nonnull %13, i32 %45, i32 %46, %struct.scale_factors* %54) #4
  %166 = trunc i64 %165 to i32
  %167 = lshr i64 %165, 32
  %168 = trunc i64 %167 to i32
  %169 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 2
  %170 = load i32, i32* %169, align 8
  %171 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 3
  %172 = load i32, i32* %171, align 4
  %173 = load i32, i32* %142, align 8
  br label %187

174:                                              ; preds = %115, %70, %111
  %175 = getelementptr inbounds %struct.buf_2d, %struct.buf_2d* %55, i64 0, i32 0
  %176 = load i8*, i8** %175, align 8
  %177 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %0, i64 0, i32 0, i64 %14, i32 4, i64 %51, i32 1
  %178 = load i32, i32* %177, align 8
  %179 = sext i32 %178 to i64
  %180 = mul nsw i64 %179, %29
  %181 = add nsw i64 %180, %30
  %182 = getelementptr inbounds i8, i8* %176, i64 %181
  %183 = shl i32 %104, 16
  %184 = ashr exact i32 %183, 16
  %185 = shl i32 %98, 16
  %186 = ashr exact i32 %185, 16
  br label %187

187:                                              ; preds = %174, %154
  %188 = phi i32 [ %173, %154 ], [ %178, %174 ]
  %189 = phi i8* [ %164, %154 ], [ %182, %174 ]
  %190 = phi i32 [ %168, %154 ], [ %186, %174 ]
  %191 = phi i32 [ %166, %154 ], [ %184, %174 ]
  %192 = phi i32 [ %170, %154 ], [ 16, %174 ]
  %193 = phi i32 [ %172, %154 ], [ 16, %174 ]
  %194 = and i32 %190, 15
  %195 = and i32 %191, 15
  %196 = ashr i32 %191, 4
  %197 = mul nsw i32 %188, %196
  %198 = ashr i32 %190, 4
  %199 = add nsw i32 %197, %198
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i8, i8* %189, i64 %200
  %202 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %47, align 8
  %203 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %202, i64 0, i32 29
  %204 = load i32, i32* %203, align 8
  %205 = and i32 %204, 8
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %224, label %207

207:                                              ; preds = %187
  %208 = ptrtoint i8* %201 to i64
  %209 = shl i64 %208, 1
  %210 = inttoptr i64 %209 to i16*
  %211 = ptrtoint i8* %61 to i64
  %212 = shl i64 %211, 1
  %213 = inttoptr i64 %212 to i16*
  %214 = load i32, i32* %28, align 8
  %215 = load i32, i32* %48, align 8
  %216 = icmp ne i32 %194, 0
  %217 = zext i1 %216 to i64
  %218 = icmp ne i32 %195, 0
  %219 = zext i1 %218 to i64
  %220 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 7, i64 %217, i64 %219, i64 %51
  %221 = load void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*, void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)** %220, align 8
  %222 = sext i32 %188 to i64
  %223 = sext i32 %214 to i64
  call void %221(i16* %210, i64 %222, i16* %213, i64 %223, [8 x i16]* %26, i32 %194, i32 %192, i32 %195, i32 %193, i32 %7, i32 %8, i32 %215) #4
  br label %234

224:                                              ; preds = %187
  %225 = load i32, i32* %28, align 8
  %226 = icmp ne i32 %194, 0
  %227 = zext i1 %226 to i64
  %228 = icmp ne i32 %195, 0
  %229 = zext i1 %228 to i64
  %230 = getelementptr inbounds %struct.RefBuffer, %struct.RefBuffer* %53, i64 0, i32 2, i32 6, i64 %227, i64 %229, i64 %51
  %231 = load void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*, void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)** %230, align 8
  %232 = sext i32 %188 to i64
  %233 = sext i32 %225 to i64
  call void %231(i8* %201, i64 %232, i8* %61, i64 %233, [8 x i16]* %26, i32 %194, i32 %192, i32 %195, i32 %193, i32 %7, i32 %8) #4
  br label %234

234:                                              ; preds = %224, %207
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #4
  %235 = add nuw nsw i64 %51, 1
  %236 = icmp eq i64 %235, %49
  br i1 %236, label %237, label %50

237:                                              ; preds = %234
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
