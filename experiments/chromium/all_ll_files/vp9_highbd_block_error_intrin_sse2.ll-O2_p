; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_highbd_block_error_intrin_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/x86/vp9_highbd_block_error_intrin_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden i64 @vp9_highbd_block_error_sse2(i32* nocapture readonly, i32* nocapture readonly, i64, i64* nocapture, i32) local_unnamed_addr #0 {
  %6 = shl i32 %4, 1
  %7 = add i32 %6, -16
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %13

9:                                                ; preds = %5
  %10 = add i32 %6, -17
  %11 = shl i32 1, %10
  %12 = sext i32 %11 to i64
  br label %13

13:                                               ; preds = %5, %9
  %14 = phi i64 [ %12, %9 ], [ 0, %5 ]
  %15 = icmp sgt i64 %2, 0
  br i1 %15, label %16, label %179

16:                                               ; preds = %13, %174
  %17 = phi i64 [ %177, %174 ], [ 0, %13 ]
  %18 = phi i64 [ %176, %174 ], [ 0, %13 ]
  %19 = phi i64 [ %175, %174 ], [ 0, %13 ]
  %20 = getelementptr inbounds i32, i32* %0, i64 %17
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16
  %23 = getelementptr inbounds i32, i32* %20, i64 4
  %24 = bitcast i32* %23 to <4 x i32>*
  %25 = load <4 x i32>, <4 x i32>* %24, align 16
  %26 = getelementptr inbounds i32, i32* %1, i64 %17
  %27 = bitcast i32* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = getelementptr inbounds i32, i32* %26, i64 4
  %30 = bitcast i32* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = icmp sgt <4 x i32> %22, <i32 16383, i32 16383, i32 16383, i32 16383>
  %33 = icmp slt <4 x i32> %22, <i32 -16384, i32 -16384, i32 -16384, i32 -16384>
  %34 = xor <4 x i1> %33, %32
  %35 = icmp sgt <4 x i32> %25, <i32 16383, i32 16383, i32 16383, i32 16383>
  %36 = icmp slt <4 x i32> %25, <i32 -16384, i32 -16384, i32 -16384, i32 -16384>
  %37 = xor <4 x i1> %36, %35
  %38 = icmp sgt <4 x i32> %28, <i32 16383, i32 16383, i32 16383, i32 16383>
  %39 = icmp slt <4 x i32> %28, <i32 -16384, i32 -16384, i32 -16384, i32 -16384>
  %40 = xor <4 x i1> %39, %38
  %41 = icmp sgt <4 x i32> %31, <i32 16383, i32 16383, i32 16383, i32 16383>
  %42 = icmp slt <4 x i32> %31, <i32 -16384, i32 -16384, i32 -16384, i32 -16384>
  %43 = xor <4 x i1> %42, %41
  %44 = or <4 x i1> %37, %34
  %45 = or <4 x i1> %44, %40
  %46 = or <4 x i1> %45, %43
  %47 = sext <4 x i1> %46 to <4 x i32>
  %48 = bitcast <4 x i32> %47 to <16 x i8>
  %49 = icmp slt <16 x i8> %48, zeroinitializer
  %50 = bitcast <16 x i1> %49 to i16
  %51 = icmp eq i16 %50, 0
  %52 = extractelement <4 x i32> %22, i32 0
  br i1 %51, label %146, label %53

53:                                               ; preds = %16
  %54 = extractelement <4 x i32> %28, i32 0
  %55 = sub nsw i32 %52, %54
  %56 = sext i32 %55 to i64
  %57 = mul nsw i64 %56, %56
  %58 = add nsw i64 %57, %19
  %59 = sext i32 %52 to i64
  %60 = mul nsw i64 %59, %59
  %61 = add nsw i64 %60, %18
  %62 = or i64 %17, 1
  %63 = getelementptr inbounds i32, i32* %0, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds i32, i32* %1, i64 %62
  %66 = load i32, i32* %65, align 4
  %67 = sub nsw i32 %64, %66
  %68 = sext i32 %67 to i64
  %69 = mul nsw i64 %68, %68
  %70 = add nsw i64 %69, %58
  %71 = sext i32 %64 to i64
  %72 = mul nsw i64 %71, %71
  %73 = add nsw i64 %72, %61
  %74 = or i64 %17, 2
  %75 = getelementptr inbounds i32, i32* %0, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds i32, i32* %1, i64 %74
  %78 = load i32, i32* %77, align 4
  %79 = sub nsw i32 %76, %78
  %80 = sext i32 %79 to i64
  %81 = mul nsw i64 %80, %80
  %82 = add nsw i64 %81, %70
  %83 = sext i32 %76 to i64
  %84 = mul nsw i64 %83, %83
  %85 = add nsw i64 %84, %73
  %86 = or i64 %17, 3
  %87 = getelementptr inbounds i32, i32* %0, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds i32, i32* %1, i64 %86
  %90 = load i32, i32* %89, align 4
  %91 = sub nsw i32 %88, %90
  %92 = sext i32 %91 to i64
  %93 = mul nsw i64 %92, %92
  %94 = add nsw i64 %93, %82
  %95 = sext i32 %88 to i64
  %96 = mul nsw i64 %95, %95
  %97 = add nsw i64 %96, %85
  %98 = or i64 %17, 4
  %99 = getelementptr inbounds i32, i32* %0, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds i32, i32* %1, i64 %98
  %102 = load i32, i32* %101, align 4
  %103 = sub nsw i32 %100, %102
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, %104
  %106 = add nsw i64 %105, %94
  %107 = sext i32 %100 to i64
  %108 = mul nsw i64 %107, %107
  %109 = add nsw i64 %108, %97
  %110 = or i64 %17, 5
  %111 = getelementptr inbounds i32, i32* %0, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds i32, i32* %1, i64 %110
  %114 = load i32, i32* %113, align 4
  %115 = sub nsw i32 %112, %114
  %116 = sext i32 %115 to i64
  %117 = mul nsw i64 %116, %116
  %118 = add nsw i64 %117, %106
  %119 = sext i32 %112 to i64
  %120 = mul nsw i64 %119, %119
  %121 = add nsw i64 %120, %109
  %122 = or i64 %17, 6
  %123 = getelementptr inbounds i32, i32* %0, i64 %122
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds i32, i32* %1, i64 %122
  %126 = load i32, i32* %125, align 4
  %127 = sub nsw i32 %124, %126
  %128 = sext i32 %127 to i64
  %129 = mul nsw i64 %128, %128
  %130 = add nsw i64 %129, %118
  %131 = sext i32 %124 to i64
  %132 = mul nsw i64 %131, %131
  %133 = add nsw i64 %132, %121
  %134 = or i64 %17, 7
  %135 = getelementptr inbounds i32, i32* %0, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = getelementptr inbounds i32, i32* %1, i64 %134
  %138 = load i32, i32* %137, align 4
  %139 = sub nsw i32 %136, %138
  %140 = sext i32 %139 to i64
  %141 = mul nsw i64 %140, %140
  %142 = add nsw i64 %141, %130
  %143 = sext i32 %136 to i64
  %144 = mul nsw i64 %143, %143
  %145 = add nsw i64 %144, %133
  br label %174

146:                                              ; preds = %16
  %147 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %22, <4 x i32> %25) #2
  %148 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %28, <4 x i32> %31) #2
  %149 = sub <8 x i16> %147, %148
  %150 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %149, <8 x i16> %149) #2
  %151 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %147, <8 x i16> %147) #2
  %152 = bitcast <4 x i32> %150 to <2 x i64>
  %153 = extractelement <2 x i64> %152, i32 0
  %154 = and i64 %153, 4294967295
  %155 = add nsw i64 %19, %154
  %156 = extractelement <4 x i32> %150, i32 1
  %157 = zext i32 %156 to i64
  %158 = add nsw i64 %155, %157
  %159 = extractelement <4 x i32> %150, i32 2
  %160 = zext i32 %159 to i64
  %161 = add nsw i64 %158, %160
  %162 = extractelement <4 x i32> %150, i32 3
  %163 = zext i32 %162 to i64
  %164 = add nsw i64 %161, %163
  %165 = extractelement <4 x i32> %151, i32 0
  %166 = extractelement <4 x i32> %151, i32 1
  %167 = add i32 %166, %165
  %168 = extractelement <4 x i32> %151, i32 2
  %169 = add i32 %167, %168
  %170 = extractelement <4 x i32> %151, i32 3
  %171 = add i32 %169, %170
  %172 = zext i32 %171 to i64
  %173 = add nsw i64 %18, %172
  br label %174

174:                                              ; preds = %53, %146
  %175 = phi i64 [ %164, %146 ], [ %142, %53 ]
  %176 = phi i64 [ %173, %146 ], [ %145, %53 ]
  %177 = add nuw i64 %17, 8
  %178 = icmp slt i64 %177, %2
  br i1 %178, label %16, label %179

179:                                              ; preds = %174, %13
  %180 = phi i64 [ 0, %13 ], [ %175, %174 ]
  %181 = phi i64 [ 0, %13 ], [ %176, %174 ]
  %182 = add nsw i64 %180, %14
  %183 = zext i32 %7 to i64
  %184 = ashr i64 %182, %183
  %185 = add nsw i64 %181, %14
  %186 = ashr i64 %185, %183
  store i64 %186, i64* %3, align 8
  ret i64 %184
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #1

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
