; ModuleID = '../../third_party/angle/src/compiler/preprocessor/Input.cpp'
source_filename = "../../third_party/angle/src/compiler/preprocessor/Input.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.angle::pp::Input" = type { i64, i8**, %"class.std::__1::vector", %"struct.angle::pp::Input::Location" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i64*, i64*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64* }
%"struct.angle::pp::Input::Location" = type { i64, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

@_ZN5angle2pp5InputC1Ev = hidden unnamed_addr alias void (%"class.angle::pp::Input"*), void (%"class.angle::pp::Input"*)* @_ZN5angle2pp5InputC2Ev
@_ZN5angle2pp5InputD1Ev = hidden unnamed_addr alias void (%"class.angle::pp::Input"*), void (%"class.angle::pp::Input"*)* @_ZN5angle2pp5InputD2Ev
@_ZN5angle2pp5InputC1EmPKPKcPKi = hidden unnamed_addr alias void (%"class.angle::pp::Input"*, i64, i8**, i32*), void (%"class.angle::pp::Input"*, i64, i8**, i32*)* @_ZN5angle2pp5InputC2EmPKPKcPKi

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle2pp5InputC2Ev(%"class.angle::pp::Input"* nocapture) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.angle::pp::Input"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 56, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle2pp5InputD2Ev(%"class.angle::pp::Input"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 0
  %3 = load i64*, i64** %2, align 8
  %4 = icmp eq i64* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint i64* %3 to i64
  %7 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 1
  %8 = bitcast i64** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast i64* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #8
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle2pp5InputC2EmPKPKcPKi(%"class.angle::pp::Input"*, i64, i8**, i32* readonly) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 1
  store i8** %2, i8*** %6, align 8
  %7 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i64** %8 to i64*
  %10 = bitcast %"class.std::__1::vector"* %7 to i64*
  %11 = icmp eq i64 %1, 0
  %12 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 40, i1 false)
  br i1 %11, label %30, label %13

13:                                               ; preds = %4
  %14 = icmp ugt i64 %1, 2305843009213693951
  br i1 %14, label %15, label %16

15:                                               ; preds = %13
  tail call void @abort() #9
  unreachable

16:                                               ; preds = %13
  %17 = shl i64 %1, 3
  %18 = tail call i8* @_Znwm(i64 %17) #8
  %19 = bitcast i8* %18 to i64*
  %20 = getelementptr inbounds i64, i64* %19, i64 %1
  %21 = ptrtoint i64* %20 to i64
  %22 = insertelement <2 x i8*> undef, i8* %18, i32 0
  %23 = shufflevector <2 x i8*> %22, <2 x i8*> undef, <2 x i32> zeroinitializer
  %24 = ptrtoint <2 x i8*> %23 to <2 x i64>
  %25 = bitcast %"class.std::__1::vector"* %7 to <2 x i64>*
  store <2 x i64> %24, <2 x i64>* %25, align 8
  store i64 %21, i64* %9, align 8
  %26 = icmp eq i32* %3, null
  %27 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 1
  %28 = bitcast i64** %27 to i64*
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  br label %31

30:                                               ; preds = %105, %4
  ret void

31:                                               ; preds = %16, %105
  %32 = phi i64 [ 0, %16 ], [ %106, %105 ]
  br i1 %26, label %37, label %33

33:                                               ; preds = %31
  %34 = getelementptr inbounds i32, i32* %3, i64 %32
  %35 = load i32, i32* %34, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %31, %33
  %38 = load i8**, i8*** %6, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 %32
  %40 = load i8*, i8** %39, align 8
  %41 = tail call i64 @strlen(i8* %40) #10
  br label %44

42:                                               ; preds = %33
  %43 = sext i32 %35 to i64
  br label %44

44:                                               ; preds = %42, %37
  %45 = phi i64 [ %41, %37 ], [ %43, %42 ]
  %46 = load i64*, i64** %27, align 8
  %47 = load i64*, i64** %8, align 8
  %48 = icmp ult i64* %46, %47
  %49 = ptrtoint i64* %47 to i64
  br i1 %48, label %50, label %53

50:                                               ; preds = %44
  store i64 %45, i64* %46, align 8
  %51 = getelementptr inbounds i64, i64* %46, i64 1
  %52 = ptrtoint i64* %51 to i64
  store i64 %52, i64* %28, align 8
  br label %105

53:                                               ; preds = %44
  %54 = ptrtoint i64* %46 to i64
  %55 = load i64, i64* %10, align 8
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 3
  %58 = add nsw i64 %57, 1
  %59 = icmp ugt i64 %58, 2305843009213693951
  br i1 %59, label %60, label %62

60:                                               ; preds = %53
  %61 = bitcast %"class.std::__1::vector"* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %61) #9
  unreachable

62:                                               ; preds = %53
  %63 = sub i64 %49, %55
  %64 = ashr exact i64 %63, 3
  %65 = icmp ult i64 %64, 1152921504606846975
  br i1 %65, label %66, label %74

66:                                               ; preds = %62
  %67 = ashr exact i64 %63, 2
  %68 = icmp ult i64 %67, %58
  %69 = select i1 %68, i64 %58, i64 %67
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %79, label %71

71:                                               ; preds = %66
  %72 = icmp ugt i64 %69, 2305843009213693951
  br i1 %72, label %73, label %74

73:                                               ; preds = %71
  tail call void @abort() #9
  unreachable

74:                                               ; preds = %71, %62
  %75 = phi i64 [ %69, %71 ], [ 2305843009213693951, %62 ]
  %76 = shl i64 %75, 3
  %77 = tail call i8* @_Znwm(i64 %76) #8
  %78 = bitcast i8* %77 to i64*
  br label %79

79:                                               ; preds = %74, %66
  %80 = phi i64 [ %75, %74 ], [ 0, %66 ]
  %81 = phi i64* [ %78, %74 ], [ null, %66 ]
  %82 = getelementptr inbounds i64, i64* %81, i64 %57
  %83 = getelementptr inbounds i64, i64* %81, i64 %80
  %84 = ptrtoint i64* %83 to i64
  store i64 %45, i64* %82, align 8
  %85 = getelementptr inbounds i64, i64* %82, i64 1
  %86 = ptrtoint i64* %85 to i64
  %87 = load i64*, i64** %29, align 8
  %88 = load i64, i64* %28, align 8
  %89 = ptrtoint i64* %87 to i64
  %90 = sub i64 %88, %89
  %91 = ashr exact i64 %90, 3
  %92 = sub nsw i64 0, %91
  %93 = getelementptr inbounds i64, i64* %82, i64 %92
  %94 = ptrtoint i64* %93 to i64
  %95 = icmp sgt i64 %90, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %79
  %97 = bitcast i64* %93 to i8*
  %98 = bitcast i64* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* align 8 %98, i64 %90, i1 false) #11
  %99 = load i64*, i64** %29, align 8
  br label %100

100:                                              ; preds = %96, %79
  %101 = phi i64* [ %87, %79 ], [ %99, %96 ]
  store i64 %94, i64* %10, align 8
  store i64 %86, i64* %28, align 8
  store i64 %84, i64* %9, align 8
  %102 = icmp eq i64* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %100
  %104 = bitcast i64* %101 to i8*
  tail call void @_ZdlPv(i8* %104) #8
  br label %105

105:                                              ; preds = %50, %100, %103
  %106 = add nuw i64 %32, 1
  %107 = load i64, i64* %5, align 8
  %108 = icmp ult i64 %106, %107
  br i1 %108, label %31, label %30
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i8* @_ZN5angle2pp5Input8skipCharEv(%"class.angle::pp::Input"* nocapture) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 3, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 1
  store i64 %4, i64* %2, align 8
  %5 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 3, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 0
  %8 = load i64*, i64** %7, align 8
  %9 = getelementptr inbounds i64, i64* %8, i64 %6
  %10 = load i64, i64* %9, align 8
  %11 = icmp eq i64 %4, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %1
  %13 = add i64 %6, 1
  store i64 %13, i64* %5, align 8
  store i64 0, i64* %2, align 8
  br label %14

14:                                               ; preds = %12, %1
  %15 = phi i64 [ 0, %12 ], [ %4, %1 ]
  %16 = phi i64 [ %13, %12 ], [ %6, %1 ]
  %17 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %16, %18
  br i1 %19, label %20, label %26

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 1
  %22 = load i8**, i8*** %21, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 %16
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %15
  br label %26

26:                                               ; preds = %14, %20
  %27 = phi i8* [ %25, %20 ], [ null, %14 ]
  ret i8* %27
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN5angle2pp5Input4readEPcmPi(%"class.angle::pp::Input"*, i8* nocapture, i64, i32* nocapture) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 3, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %6, %8
  %10 = icmp ne i64 %2, 0
  %11 = and i1 %10, %9
  br i1 %11, label %12, label %86

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 1
  %14 = load i8**, i8*** %13, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 %6
  %16 = load i8*, i8** %15, align 8
  %17 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 3, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds i8, i8* %16, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = icmp eq i8 %20, 92
  br i1 %21, label %22, label %86

22:                                               ; preds = %12
  %23 = add i64 %18, 1
  store i64 %23, i64* %17, align 8
  %24 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = getelementptr inbounds i64, i64* %25, i64 %6
  %27 = load i64, i64* %26, align 8
  %28 = icmp eq i64 %23, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %22
  %30 = add nuw i64 %6, 1
  store i64 %30, i64* %5, align 8
  store i64 0, i64* %17, align 8
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i64 [ 0, %29 ], [ %23, %22 ]
  %33 = phi i64 [ %30, %29 ], [ %6, %22 ]
  %34 = icmp ult i64 %33, %8
  br i1 %34, label %35, label %85

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8*, i8** %14, i64 %33
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 %32
  %39 = icmp eq i8* %38, null
  br i1 %39, label %85, label %40

40:                                               ; preds = %35
  %41 = load i8, i8* %38, align 1
  switch i8 %41, label %85 [
    i8 10, label %42
    i8 13, label %54
  ]

42:                                               ; preds = %40
  %43 = add i64 %32, 1
  store i64 %43, i64* %17, align 8
  %44 = getelementptr inbounds i64, i64* %25, i64 %33
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %43, %45
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = add nuw i64 %33, 1
  store i64 %48, i64* %5, align 8
  store i64 0, i64* %17, align 8
  br label %49

49:                                               ; preds = %47, %42
  %50 = load i32, i32* %3, align 4
  %51 = icmp eq i32 %50, 2147483647
  br i1 %51, label %144, label %52

52:                                               ; preds = %49
  %53 = add nsw i32 %50, 1
  store i32 %53, i32* %3, align 4
  br label %86

54:                                               ; preds = %40
  %55 = add i64 %32, 1
  store i64 %55, i64* %17, align 8
  %56 = getelementptr inbounds i64, i64* %25, i64 %33
  %57 = load i64, i64* %56, align 8
  %58 = icmp eq i64 %55, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  %60 = add nuw i64 %33, 1
  store i64 %60, i64* %5, align 8
  store i64 0, i64* %17, align 8
  br label %61

61:                                               ; preds = %59, %54
  %62 = phi i64 [ 0, %59 ], [ %55, %54 ]
  %63 = phi i64 [ %60, %59 ], [ %33, %54 ]
  %64 = icmp ult i64 %63, %8
  br i1 %64, label %65, label %80

65:                                               ; preds = %61
  %66 = getelementptr inbounds i8*, i8** %14, i64 %63
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 %62
  %69 = icmp eq i8* %68, null
  br i1 %69, label %80, label %70

70:                                               ; preds = %65
  %71 = load i8, i8* %68, align 1
  %72 = icmp eq i8 %71, 10
  br i1 %72, label %73, label %80

73:                                               ; preds = %70
  %74 = add i64 %62, 1
  store i64 %74, i64* %17, align 8
  %75 = getelementptr inbounds i64, i64* %25, i64 %63
  %76 = load i64, i64* %75, align 8
  %77 = icmp eq i64 %74, %76
  br i1 %77, label %78, label %80

78:                                               ; preds = %73
  %79 = add nuw i64 %63, 1
  store i64 %79, i64* %5, align 8
  store i64 0, i64* %17, align 8
  br label %80

80:                                               ; preds = %73, %78, %61, %65, %70
  %81 = load i32, i32* %3, align 4
  %82 = icmp eq i32 %81, 2147483647
  br i1 %82, label %144, label %83

83:                                               ; preds = %80
  %84 = add nsw i32 %81, 1
  store i32 %84, i32* %3, align 4
  br label %86

85:                                               ; preds = %35, %40, %31
  store i8 92, i8* %1, align 1
  br label %86

86:                                               ; preds = %12, %83, %85, %52, %4
  %87 = phi i64 [ 0, %4 ], [ 0, %12 ], [ 1, %85 ], [ 0, %83 ], [ 0, %52 ]
  %88 = icmp ult i64 %87, %2
  br i1 %88, label %89, label %144

89:                                               ; preds = %86
  %90 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 2, i32 0, i32 0
  %91 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 3, i32 1
  %92 = getelementptr inbounds %"class.angle::pp::Input", %"class.angle::pp::Input"* %0, i64 0, i32 1
  %93 = load i64, i64* %5, align 8
  br label %94

94:                                               ; preds = %89, %141
  %95 = phi i64 [ %93, %89 ], [ %142, %141 ]
  %96 = phi i64 [ %2, %89 ], [ %116, %141 ]
  %97 = phi i64 [ %87, %89 ], [ %119, %141 ]
  %98 = load i64, i64* %7, align 8
  %99 = icmp ult i64 %95, %98
  br i1 %99, label %100, label %144

100:                                              ; preds = %94
  %101 = load i64*, i64** %90, align 8
  %102 = getelementptr inbounds i64, i64* %101, i64 %95
  %103 = load i64, i64* %102, align 8
  %104 = load i64, i64* %91, align 8
  %105 = sub i64 %103, %104
  %106 = icmp ugt i64 %105, %2
  %107 = select i1 %106, i64 %2, i64 %105
  %108 = icmp eq i64 %107, 0
  %109 = load i8**, i8*** %92, align 8
  %110 = getelementptr inbounds i8*, i8** %109, i64 %95
  %111 = load i8*, i8** %110, align 8
  br i1 %108, label %114, label %112

112:                                              ; preds = %100
  %113 = getelementptr inbounds i8, i8* %111, i64 %104
  br label %127

114:                                              ; preds = %127, %100
  %115 = phi i64 [ 0, %100 ], [ %135, %127 ]
  %116 = phi i64 [ %96, %100 ], [ %136, %127 ]
  %117 = getelementptr inbounds i8, i8* %1, i64 %97
  %118 = getelementptr inbounds i8, i8* %111, i64 %104
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %117, i8* align 1 %118, i64 %115, i1 false)
  %119 = add i64 %115, %97
  %120 = load i64, i64* %91, align 8
  %121 = add i64 %120, %115
  store i64 %121, i64* %91, align 8
  %122 = load i64, i64* %5, align 8
  %123 = load i64*, i64** %90, align 8
  %124 = getelementptr inbounds i64, i64* %123, i64 %122
  %125 = load i64, i64* %124, align 8
  %126 = icmp eq i64 %121, %125
  br i1 %126, label %139, label %141

127:                                              ; preds = %112, %127
  %128 = phi i64 [ 0, %112 ], [ %137, %127 ]
  %129 = phi i64 [ %96, %112 ], [ %136, %127 ]
  %130 = phi i64 [ %107, %112 ], [ %135, %127 ]
  %131 = getelementptr inbounds i8, i8* %113, i64 %128
  %132 = load i8, i8* %131, align 1
  %133 = icmp eq i8 %132, 92
  %134 = add i64 %128, %97
  %135 = select i1 %133, i64 %128, i64 %130
  %136 = select i1 %133, i64 %134, i64 %129
  %137 = add nuw i64 %128, 1
  %138 = icmp ult i64 %137, %135
  br i1 %138, label %127, label %114

139:                                              ; preds = %114
  %140 = add i64 %122, 1
  store i64 %140, i64* %5, align 8
  store i64 0, i64* %91, align 8
  br label %141

141:                                              ; preds = %139, %114
  %142 = phi i64 [ %140, %139 ], [ %122, %114 ]
  %143 = icmp ult i64 %119, %116
  br i1 %143, label %94, label %144

144:                                              ; preds = %141, %94, %86, %49, %80
  %145 = phi i64 [ 0, %80 ], [ 0, %49 ], [ %87, %86 ], [ %119, %141 ], [ %97, %94 ]
  ret i64 %145
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { builtin nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
