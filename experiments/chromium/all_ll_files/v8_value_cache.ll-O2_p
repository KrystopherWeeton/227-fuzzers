; ModuleID = '../../third_party/blink/renderer/platform/bindings/v8_value_cache.cc'
source_filename = "../../third_party/blink/renderer/platform/bindings/v8_value_cache.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::GlobalValueMap" = type { %"class.v8::PersistentValueMapBase" }
%"class.v8::PersistentValueMapBase" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap", i8* }
%"class.v8::Isolate" = type { i8 }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::StringImpl"*, i64 }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, %"class.WTF::StringImpl"*, void (%"class.v8::WeakCallbackInfo"*)**, [2 x i8*] }
%"class.blink::V8PerIsolateData" = type { i32, %"class.gin::IsolateHolder", %"class.WTF::HashMap.14", %"class.WTF::HashMap.14", %"class.WTF::HashMap.19", %"class.std::__1::unique_ptr.24", %"class.std::__1::unique_ptr.37", %"class.blink::Persistent", i8, i8, i8, %"class.WTF::Vector.221", %"class.std::__1::unique_ptr.226", %"class.blink::Persistent.232", %"class.blink::Persistent.234", %"class.blink::RuntimeCallStats", void (%"class.v8::Isolate"*, i32, i32)*, void (%"class.v8::Isolate"*, i32, i32)*, i64 }
%"class.gin::IsolateHolder" = type { %"class.std::__1::unique_ptr", %"class.v8::Isolate"*, %"class.std::__1::unique_ptr.2", %"class.std::__1::unique_ptr.8", i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::SnapshotCreator"* }
%"class.v8::SnapshotCreator" = type { i8* }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.gin::PerIsolateData"* }
%"class.gin::PerIsolateData" = type opaque
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.gin::V8IsolateMemoryDumpProvider"* }
%"class.gin::V8IsolateMemoryDumpProvider" = type opaque
%"class.WTF::HashMap.14" = type { %"class.WTF::HashTable.15" }
%"class.WTF::HashTable.15" = type <{ %"struct.WTF::KeyValuePair.18"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.18" = type opaque
%"class.WTF::HashMap.19" = type { %"class.WTF::HashTable.20" }
%"class.WTF::HashTable.20" = type <{ %"struct.WTF::KeyValuePair.23"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.23" = type opaque
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::StringCache"* }
%"class.blink::StringCache" = type { %"class.v8::GlobalValueMap", %"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference", %"class.v8::GlobalValueMap.27", %class.scoped_refptr }
%"class.v8::PersistentValueMapBase<WTF::StringImpl *, v8::String, blink::StringCacheMapTraits>::PersistentValueReference" = type { i64 }
%"class.v8::GlobalValueMap.27" = type { %"class.v8::PersistentValueMapBase.28" }
%"class.v8::PersistentValueMapBase.28" = type { %"class.v8::Isolate"*, %"class.WTF::HashMap.29", i8* }
%"class.WTF::HashMap.29" = type { %"class.WTF::HashTable.30" }
%"class.WTF::HashTable.30" = type <{ %"struct.WTF::KeyValuePair.33"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.33" = type { %"class.blink::ParkableStringImpl"*, i64 }
%"class.blink::ParkableStringImpl" = type { %"class.WTF::RefCounted.268", %"class.WTF::String", %"class.std::__1::unique_ptr.270" }
%"class.WTF::RefCounted.268" = type { %"class.base::RefCounted.269" }
%"class.base::RefCounted.269" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%"class.std::__1::unique_ptr.270" = type { %"class.std::__1::__compressed_pair.271" }
%"class.std::__1::__compressed_pair.271" = type { %"struct.std::__1::__compressed_pair_elem.272" }
%"struct.std::__1::__compressed_pair_elem.272" = type { %"struct.blink::ParkableStringImpl::ParkableMetadata"* }
%"struct.blink::ParkableStringImpl::ParkableMetadata" = type { %"class.WTF::Mutex", i32, i8, i8, %"class.std::__1::unique_ptr.273", %"class.std::__1::unique_ptr.284", %"class.WTF::Vector.290", i8, i32 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::unique_ptr.273" = type { %"class.std::__1::__compressed_pair.274" }
%"class.std::__1::__compressed_pair.274" = type { %"struct.std::__1::__compressed_pair_elem.275" }
%"struct.std::__1::__compressed_pair_elem.275" = type { %"class.WTF::Vector.276"* }
%"class.WTF::Vector.276" = type { %"class.WTF::VectorBuffer.277" }
%"class.WTF::VectorBuffer.277" = type { %"class.WTF::VectorBufferBase.278" }
%"class.WTF::VectorBufferBase.278" = type { i8*, i32, i32 }
%"class.std::__1::unique_ptr.284" = type { %"class.std::__1::__compressed_pair.285" }
%"class.std::__1::__compressed_pair.285" = type { %"struct.std::__1::__compressed_pair_elem.286" }
%"struct.std::__1::__compressed_pair_elem.286" = type { %"class.blink::DiskDataMetadata"* }
%"class.blink::DiskDataMetadata" = type { i64, i64 }
%"class.WTF::Vector.290" = type { %"class.WTF::VectorBuffer.291" }
%"class.WTF::VectorBuffer.291" = type { %"class.WTF::VectorBufferBase.278", [32 x i8] }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.std::__1::unique_ptr.37" = type { %"class.std::__1::__compressed_pair.38" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.39" }
%"struct.std::__1::__compressed_pair_elem.39" = type { %"class.blink::V8PrivateProperty"* }
%"class.blink::V8PrivateProperty" = type opaque
%"class.blink::Persistent" = type { %"class.blink::PersistentBase" }
%"class.blink::PersistentBase" = type { %"class.blink::ScriptState"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ScriptState" = type { %"class.v8::Isolate"*, %"class.blink::ScopedPersistent", %class.scoped_refptr.252, %"class.blink::Member", %"class.blink::SelfKeepAlive", %"class.util::TokenType" }
%"class.blink::ScopedPersistent" = type { %"class.v8::Persistent" }
%"class.v8::Persistent" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Context"* }
%"class.v8::Context" = type { i8 }
%class.scoped_refptr.252 = type { %"class.blink::DOMWrapperWorld"* }
%"class.blink::DOMWrapperWorld" = type { %"class.WTF::RefCounted", i32, i32, %"class.blink::Persistent.253" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::Persistent.253" = type { %"class.blink::PersistentBase.254" }
%"class.blink::PersistentBase.254" = type { %"class.blink::DOMDataStore"*, %"class.blink::PersistentNodePtr" }
%"class.blink::DOMDataStore" = type { i32 (...)**, i8, [7 x i8], %"class.blink::HeapHashMap" }
%"class.blink::HeapHashMap" = type { %"class.WTF::HashMap.259" }
%"class.WTF::HashMap.259" = type { %"class.WTF::HashTable.260" }
%"class.WTF::HashTable.260" = type <{ %"struct.WTF::KeyValuePair.262"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair.262" = type { %"class.blink::WeakMember", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::WeakMember" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::ScriptWrappable"* }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::Member" = type { %"class.blink::MemberBase.265" }
%"class.blink::MemberBase.265" = type { %"class.blink::V8PerContextData"* }
%"class.blink::V8PerContextData" = type opaque
%"class.blink::SelfKeepAlive" = type { %"class.blink::Persistent" }
%"class.util::TokenType" = type { %"class.base::StrongAlias" }
%"class.base::StrongAlias" = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::PersistentNodePtr" = type { %"class.blink::PersistentNode"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.43", i32, [4 x i8], %"class.std::__1::unique_ptr.176", %"class.std::__1::unique_ptr.176", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.186", %"class.std::__1::unique_ptr.192", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.204", %"class.std::__1::unique_ptr.210", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.217", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.43" = type { %"class.std::__1::__compressed_pair.44" }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.46", %"class.std::__1::unique_ptr.52", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.87", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.94", %"class.std::__1::unique_ptr.101", %"class.std::__1::unique_ptr.108", %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.115", %"class.std::__1::unique_ptr.122", %"class.std::__1::unique_ptr.129", %"class.std::__1::unique_ptr.136", %"class.std::__1::unique_ptr.159", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.46" = type { %"class.std::__1::__compressed_pair.47" }
%"class.std::__1::__compressed_pair.47" = type { %"struct.std::__1::__compressed_pair_elem.48" }
%"struct.std::__1::__compressed_pair_elem.48" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%"struct.std::__1::atomic.79" = type { %"struct.std::__1::__atomic_base.80" }
%"struct.std::__1::__atomic_base.80" = type { %"struct.std::__1::__atomic_base.81" }
%"struct.std::__1::__atomic_base.81" = type { %"struct.std::__1::__cxx_atomic_impl.82" }
%"struct.std::__1::__cxx_atomic_impl.82" = type { %"struct.std::__1::__cxx_atomic_base_impl.83" }
%"struct.std::__1::__cxx_atomic_base_impl.83" = type { i64 }
%"class.std::__1::unique_ptr.87" = type { %"class.std::__1::__compressed_pair.88" }
%"class.std::__1::__compressed_pair.88" = type { %"struct.std::__1::__compressed_pair_elem.89" }
%"struct.std::__1::__compressed_pair_elem.89" = type { %"class.blink::Worklist.90"* }
%"class.blink::Worklist.90" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.blink::Worklist.97"* }
%"class.blink::Worklist.97" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.101" = type { %"class.std::__1::__compressed_pair.102" }
%"class.std::__1::__compressed_pair.102" = type { %"struct.std::__1::__compressed_pair_elem.103" }
%"struct.std::__1::__compressed_pair_elem.103" = type { %"class.blink::Worklist.104"* }
%"class.blink::Worklist.104" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.108" = type { %"class.std::__1::__compressed_pair.109" }
%"class.std::__1::__compressed_pair.109" = type { %"struct.std::__1::__compressed_pair_elem.110" }
%"struct.std::__1::__compressed_pair_elem.110" = type { %"class.blink::Worklist.111"* }
%"class.blink::Worklist.111" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.blink::Worklist.118"* }
%"class.blink::Worklist.118" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::Worklist.125"* }
%"class.blink::Worklist.125" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.129" = type { %"class.std::__1::__compressed_pair.130" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.131" }
%"struct.std::__1::__compressed_pair_elem.131" = type { %"class.blink::Worklist.132"* }
%"class.blink::Worklist.132" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.79" }
%"class.std::__1::unique_ptr.136" = type { %"class.std::__1::__compressed_pair.137" }
%"class.std::__1::__compressed_pair.137" = type { %"struct.std::__1::__compressed_pair_elem.138" }
%"struct.std::__1::__compressed_pair_elem.138" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.139", %"class.std::__1::__compressed_pair.146", %"class.std::__1::__compressed_pair.151", %"class.std::__1::__compressed_pair.153", [4 x i8] }>
%"class.std::__1::unique_ptr.139" = type { %"class.std::__1::__compressed_pair.140" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141", %"struct.std::__1::__compressed_pair_elem.142" }
%"struct.std::__1::__compressed_pair_elem.141" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.142" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { i64 }
%"class.std::__1::__compressed_pair.146" = type { %"struct.std::__1::__compressed_pair_elem.147" }
%"struct.std::__1::__compressed_pair_elem.147" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"class.std::__1::__compressed_pair.153" = type { %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.154" = type { float }
%"class.std::__1::unique_ptr.159" = type { %"class.std::__1::__compressed_pair.160" }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.162", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.162" = type { %"class.std::__1::__compressed_pair.163" }
%"class.std::__1::__compressed_pair.163" = type { %"struct.std::__1::__compressed_pair_elem.164" }
%"struct.std::__1::__compressed_pair_elem.164" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.184" }
%"class.WTF::VectorBuffer.184" = type { %"class.WTF::VectorBufferBase.185" }
%"class.WTF::VectorBufferBase.185" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.186" = type { %"class.std::__1::__compressed_pair.187" }
%"class.std::__1::__compressed_pair.187" = type { %"struct.std::__1::__compressed_pair_elem.188" }
%"struct.std::__1::__compressed_pair_elem.188" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.192" = type { %"class.std::__1::__compressed_pair.193" }
%"class.std::__1::__compressed_pair.193" = type { %"struct.std::__1::__compressed_pair_elem.194" }
%"struct.std::__1::__compressed_pair_elem.194" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.198" }
%"class.std::__1::unique_ptr.198" = type { %"class.std::__1::__compressed_pair.199" }
%"class.std::__1::__compressed_pair.199" = type { %"struct.std::__1::__compressed_pair_elem.200" }
%"struct.std::__1::__compressed_pair_elem.200" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.90"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.97"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.104"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.111"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.118"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.245" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.245" = type { %"struct.std::__1::__compressed_pair_elem.246" }
%"struct.std::__1::__compressed_pair_elem.246" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.204" = type { %"class.std::__1::__compressed_pair.205" }
%"class.std::__1::__compressed_pair.205" = type { %"struct.std::__1::__compressed_pair_elem.206" }
%"struct.std::__1::__compressed_pair_elem.206" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.210" = type { %"class.std::__1::__compressed_pair.211" }
%"class.std::__1::__compressed_pair.211" = type { %"struct.std::__1::__compressed_pair_elem.212" }
%"struct.std::__1::__compressed_pair_elem.212" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.216 }
%class.scoped_refptr.216 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.217" = type { %"struct.std::__1::__atomic_base.218" }
%"struct.std::__1::__atomic_base.218" = type { %"struct.std::__1::__cxx_atomic_impl.219" }
%"struct.std::__1::__cxx_atomic_impl.219" = type { %"struct.std::__1::__cxx_atomic_base_impl.220" }
%"struct.std::__1::__cxx_atomic_base_impl.220" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.WTF::Vector.221" = type { %"class.WTF::VectorBuffer.222" }
%"class.WTF::VectorBuffer.222" = type { %"class.WTF::VectorBufferBase.223" }
%"class.WTF::VectorBufferBase.223" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type opaque
%"class.std::__1::unique_ptr.226" = type { %"class.std::__1::__compressed_pair.227" }
%"class.std::__1::__compressed_pair.227" = type { %"struct.std::__1::__compressed_pair_elem.228" }
%"struct.std::__1::__compressed_pair_elem.228" = type { %"class.blink::V8PerIsolateData::Data"* }
%"class.blink::V8PerIsolateData::Data" = type { i32 (...)** }
%"class.blink::Persistent.232" = type { %"class.blink::PersistentBase.233" }
%"class.blink::PersistentBase.233" = type { %"class.blink::V8PerIsolateData::GarbageCollectedData"*, %"class.blink::PersistentNodePtr" }
%"class.blink::V8PerIsolateData::GarbageCollectedData" = type { i32 (...)** }
%"class.blink::Persistent.234" = type { %"class.blink::PersistentBase.235" }
%"class.blink::PersistentBase.235" = type { %"class.blink::ActiveScriptWrappableManager"*, %"class.blink::PersistentNodePtr" }
%"class.blink::ActiveScriptWrappableManager" = type { %"class.blink::HeapVector", i64 }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.240" }
%"class.WTF::Vector.240" = type { %"class.WTF::VectorBuffer.241" }
%"class.WTF::VectorBuffer.241" = type { %"class.WTF::VectorBufferBase.242" }
%"class.WTF::VectorBufferBase.242" = type { %"struct.std::__1::pair.243"*, i32, i32 }
%"struct.std::__1::pair.243" = type { %"class.blink::UntracedMember", %"class.blink::Member.299" }
%"class.blink::UntracedMember" = type { %"class.blink::MemberBase.298" }
%"class.blink::MemberBase.298" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::ActiveScriptWrappableBase" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.blink::Member.299" = type { %"class.blink::MemberBase.300" }
%"class.blink::MemberBase.300" = type { %"class.blink::ActiveScriptWrappableBase"* }
%"class.blink::RuntimeCallStats" = type { %"class.blink::RuntimeCallTimer"*, i8, [40 x %"class.blink::RuntimeCallCounter"], %"class.base::TickClock"* }
%"class.blink::RuntimeCallTimer" = type { %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*, %"class.base::TimeTicks", %"class.base::TimeDelta", %"class.base::TickClock"* }
%"class.blink::RuntimeCallCounter" = type { i64, %"class.base::TimeDelta", i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.v8::Global" = type { %"class.v8::PersistentBase.266" }
%"class.v8::PersistentBase.266" = type { %"class.v8::String"* }
%"class.v8::String" = type { i8 }
%"class.v8::WeakCallbackInfo.267" = type { %"class.v8::Isolate"*, %"class.blink::ParkableStringImpl"*, void (%"class.v8::WeakCallbackInfo.267"*)**, [2 x i8*] }
%"class.v8::HandleScope" = type { %"class.v8::internal::Isolate"*, i64*, i64* }
%"class.v8::internal::Isolate" = type opaque
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::RuntimeCallTimerScope" }
%"class.blink::RuntimeCallTimerScope" = type { %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallTimer" }
%"class.blink::StringResource8" = type { %"class.blink::StringResource8Base" }
%"class.blink::StringResource8Base" = type { %"class.blink::StringResourceBase", %"class.v8::String::ExternalOneByteStringResource" }
%"class.blink::StringResourceBase" = type { i32 (...)**, %"class.WTF::String", %"class.WTF::AtomicString", %"class.blink::ParkableString" }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.blink::ParkableString" = type { %class.scoped_refptr.297 }
%class.scoped_refptr.297 = type { %"class.blink::ParkableStringImpl"* }
%"class.v8::String::ExternalOneByteStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i8* }
%"class.v8::String::ExternalStringResourceBase" = type { i32 (...)** }
%"class.blink::StringResource16" = type { %"class.blink::StringResource16Base" }
%"class.blink::StringResource16Base" = type { %"class.blink::StringResourceBase", %"class.v8::String::ExternalStringResource" }
%"class.v8::String::ExternalStringResource" = type { %"class.v8::String::ExternalStringResourceBase", i16* }
%"class.blink::ParkableStringResource8" = type { %"class.blink::StringResource8Base" }
%"class.blink::ParkableStringResource16" = type { %"class.blink::StringResource16Base" }
%"class.v8::WeakCallbackInfo.305" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.310" }
%"class.std::__1::__compressed_pair.310" = type { %"struct.std::__1::__compressed_pair_elem.311" }
%"struct.std::__1::__compressed_pair_elem.311" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.312 }
%union.anon.312 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE5ClearEv = comdat any

$_ZN5blink15StringResource8D0Ev = comdat any

$_ZNK5blink15StringResource86lengthEv = comdat any

$_ZNK5blink15StringResource84dataEv = comdat any

$_ZThn32_N5blink15StringResource8D1Ev = comdat any

$_ZThn32_N5blink15StringResource8D0Ev = comdat any

$_ZNK2v86String26ExternalStringResourceBase11IsCacheableEv = comdat any

$_ZN2v86String26ExternalStringResourceBase7DisposeEv = comdat any

$_ZNK2v86String26ExternalStringResourceBase4LockEv = comdat any

$_ZNK2v86String26ExternalStringResourceBase6UnlockEv = comdat any

$_ZThn32_NK5blink15StringResource84dataEv = comdat any

$_ZThn32_NK5blink15StringResource86lengthEv = comdat any

$_ZN5blink19StringResource8BaseD2Ev = comdat any

$_ZN5blink18StringResourceBaseD2Ev = comdat any

$_ZN5blink18StringResourceBaseD0Ev = comdat any

$_ZN5blink16StringResource16D0Ev = comdat any

$_ZNK5blink16StringResource166lengthEv = comdat any

$_ZNK5blink16StringResource164dataEv = comdat any

$_ZThn32_N5blink16StringResource16D1Ev = comdat any

$_ZThn32_N5blink16StringResource16D0Ev = comdat any

$_ZThn32_NK5blink16StringResource164dataEv = comdat any

$_ZThn32_NK5blink16StringResource166lengthEv = comdat any

$_ZN5blink20StringResource16BaseD2Ev = comdat any

$_ZN5blink23ParkableStringResource8D0Ev = comdat any

$_ZNK5blink23ParkableStringResource811IsCacheableEv = comdat any

$_ZNK5blink23ParkableStringResource84LockEv = comdat any

$_ZNK5blink23ParkableStringResource86UnlockEv = comdat any

$_ZNK5blink23ParkableStringResource86lengthEv = comdat any

$_ZNK5blink23ParkableStringResource84dataEv = comdat any

$_ZThn32_N5blink23ParkableStringResource8D1Ev = comdat any

$_ZThn32_N5blink23ParkableStringResource8D0Ev = comdat any

$_ZThn32_NK5blink23ParkableStringResource811IsCacheableEv = comdat any

$_ZThn32_NK5blink23ParkableStringResource84LockEv = comdat any

$_ZThn32_NK5blink23ParkableStringResource86UnlockEv = comdat any

$_ZThn32_NK5blink23ParkableStringResource84dataEv = comdat any

$_ZThn32_NK5blink23ParkableStringResource86lengthEv = comdat any

$_ZN5blink24ParkableStringResource16D0Ev = comdat any

$_ZNK5blink24ParkableStringResource1611IsCacheableEv = comdat any

$_ZNK5blink24ParkableStringResource164LockEv = comdat any

$_ZNK5blink24ParkableStringResource166UnlockEv = comdat any

$_ZNK5blink24ParkableStringResource166lengthEv = comdat any

$_ZNK5blink24ParkableStringResource164dataEv = comdat any

$_ZThn32_N5blink24ParkableStringResource16D1Ev = comdat any

$_ZThn32_N5blink24ParkableStringResource16D0Ev = comdat any

$_ZThn32_NK5blink24ParkableStringResource1611IsCacheableEv = comdat any

$_ZThn32_NK5blink24ParkableStringResource164LockEv = comdat any

$_ZThn32_NK5blink24ParkableStringResource166UnlockEv = comdat any

$_ZThn32_NK5blink24ParkableStringResource164dataEv = comdat any

$_ZThn32_NK5blink24ParkableStringResource166lengthEv = comdat any

$_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE9SetUniqueERKS3_PNS_6GlobalIS4_EE = comdat any

$_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE14OnWeakCallbackERKNS_16WeakCallbackInfoIS2_EE = comdat any

$_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE18SecondWeakCallbackERKNS_16WeakCallbackInfoIS2_EE = comdat any

$_ZN5blink22V8GlobalValueMapTraitsIPN3WTF10StringImplEN2v86StringELNS4_31PersistentContainerCallbackTypeE1EE6RemoveEPNS1_7HashMapIS3_mNS1_10StringHashENS1_10HashTraitsIS3_EENSA_ImEENS1_18PartitionAllocatorEEES3_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE4findERKS2_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RmEENS_18HashTableAddResultISD_S4_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_ = comdat any

$_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE9SetUniqueERKS3_PNS_6GlobalIS4_EE = comdat any

$_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE14OnWeakCallbackERKNS_16WeakCallbackInfoIS2_EE = comdat any

$_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE18SecondWeakCallbackERKNS_16WeakCallbackInfoIS2_EE = comdat any

$_ZN5blink22V8GlobalValueMapTraitsIPNS_18ParkableStringImplEN2v86StringELNS3_31PersistentContainerCallbackTypeE1EE6RemoveEPN3WTF7HashMapIS2_mNS7_7PtrHashIS1_EENS7_10HashTraitsIS2_EENSB_ImEENS7_18PartitionAllocatorEEES2_ = comdat any

$_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE4findERKS3_ = comdat any

$_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_ = comdat any

$_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE16LookupForWritingERKS3_ = comdat any

$_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISD_S8_SE_EERS3_RmEENS_18HashTableAddResultISF_S5_EEOT0_OT1_ = comdat any

$_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_ = comdat any

$_ZTVN5blink15StringResource8E = comdat any

$_ZTVN5blink18StringResourceBaseE = comdat any

$_ZTVN5blink16StringResource16E = comdat any

$_ZTVN5blink23ParkableStringResource8E = comdat any

$_ZTVN5blink24ParkableStringResource16E = comdat any

@_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E = external local_unnamed_addr global i8, align 1
@_ZTVN5blink15StringResource8E = linkonce_odr hidden unnamed_addr constant { [6 x i8*], [10 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::StringResource8Base"*)* @_ZN5blink19StringResource8BaseD2Ev to i8*), i8* bitcast (void (%"class.blink::StringResource8"*)* @_ZN5blink15StringResource8D0Ev to i8*), i8* bitcast (i64 (%"class.blink::StringResource8"*)* @_ZNK5blink15StringResource86lengthEv to i8*), i8* bitcast (i8* (%"class.blink::StringResource8"*)* @_ZNK5blink15StringResource84dataEv to i8*)], [10 x i8*] [i8* inttoptr (i64 -32 to i8*), i8* null, i8* bitcast (void (%"class.blink::StringResource8"*)* @_ZThn32_N5blink15StringResource8D1Ev to i8*), i8* bitcast (void (%"class.blink::StringResource8"*)* @_ZThn32_N5blink15StringResource8D0Ev to i8*), i8* bitcast (i1 (%"class.v8::String::ExternalStringResourceBase"*)* @_ZNK2v86String26ExternalStringResourceBase11IsCacheableEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZN2v86String26ExternalStringResourceBase7DisposeEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZNK2v86String26ExternalStringResourceBase4LockEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZNK2v86String26ExternalStringResourceBase6UnlockEv to i8*), i8* bitcast (i8* (%"class.blink::StringResource8"*)* @_ZThn32_NK5blink15StringResource84dataEv to i8*), i8* bitcast (i64 (%"class.blink::StringResource8"*)* @_ZThn32_NK5blink15StringResource86lengthEv to i8*)] }, comdat, align 8
@_ZTVN5blink18StringResourceBaseE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::StringResourceBase"*)* @_ZN5blink18StringResourceBaseD2Ev to i8*), i8* bitcast (void (%"class.blink::StringResourceBase"*)* @_ZN5blink18StringResourceBaseD0Ev to i8*)] }, comdat, align 8
@_ZTVN5blink16StringResource16E = linkonce_odr hidden unnamed_addr constant { [6 x i8*], [10 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::StringResource16Base"*)* @_ZN5blink20StringResource16BaseD2Ev to i8*), i8* bitcast (void (%"class.blink::StringResource16"*)* @_ZN5blink16StringResource16D0Ev to i8*), i8* bitcast (i64 (%"class.blink::StringResource16"*)* @_ZNK5blink16StringResource166lengthEv to i8*), i8* bitcast (i16* (%"class.blink::StringResource16"*)* @_ZNK5blink16StringResource164dataEv to i8*)], [10 x i8*] [i8* inttoptr (i64 -32 to i8*), i8* null, i8* bitcast (void (%"class.blink::StringResource16"*)* @_ZThn32_N5blink16StringResource16D1Ev to i8*), i8* bitcast (void (%"class.blink::StringResource16"*)* @_ZThn32_N5blink16StringResource16D0Ev to i8*), i8* bitcast (i1 (%"class.v8::String::ExternalStringResourceBase"*)* @_ZNK2v86String26ExternalStringResourceBase11IsCacheableEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZN2v86String26ExternalStringResourceBase7DisposeEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZNK2v86String26ExternalStringResourceBase4LockEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZNK2v86String26ExternalStringResourceBase6UnlockEv to i8*), i8* bitcast (i16* (%"class.blink::StringResource16"*)* @_ZThn32_NK5blink16StringResource164dataEv to i8*), i8* bitcast (i64 (%"class.blink::StringResource16"*)* @_ZThn32_NK5blink16StringResource166lengthEv to i8*)] }, comdat, align 8
@_ZTVN5blink23ParkableStringResource8E = linkonce_odr hidden unnamed_addr constant { [9 x i8*], [10 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::StringResource8Base"*)* @_ZN5blink19StringResource8BaseD2Ev to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZN5blink23ParkableStringResource8D0Ev to i8*), i8* bitcast (i1 (%"class.blink::ParkableStringResource8"*)* @_ZNK5blink23ParkableStringResource811IsCacheableEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZNK5blink23ParkableStringResource84LockEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZNK5blink23ParkableStringResource86UnlockEv to i8*), i8* bitcast (i64 (%"class.blink::ParkableStringResource8"*)* @_ZNK5blink23ParkableStringResource86lengthEv to i8*), i8* bitcast (i8* (%"class.blink::ParkableStringResource8"*)* @_ZNK5blink23ParkableStringResource84dataEv to i8*)], [10 x i8*] [i8* inttoptr (i64 -32 to i8*), i8* null, i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZThn32_N5blink23ParkableStringResource8D1Ev to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZThn32_N5blink23ParkableStringResource8D0Ev to i8*), i8* bitcast (i1 (%"class.blink::ParkableStringResource8"*)* @_ZThn32_NK5blink23ParkableStringResource811IsCacheableEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZN2v86String26ExternalStringResourceBase7DisposeEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZThn32_NK5blink23ParkableStringResource84LockEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource8"*)* @_ZThn32_NK5blink23ParkableStringResource86UnlockEv to i8*), i8* bitcast (i8* (%"class.blink::ParkableStringResource8"*)* @_ZThn32_NK5blink23ParkableStringResource84dataEv to i8*), i8* bitcast (i64 (%"class.blink::ParkableStringResource8"*)* @_ZThn32_NK5blink23ParkableStringResource86lengthEv to i8*)] }, comdat, align 8
@_ZTVN5blink24ParkableStringResource16E = linkonce_odr hidden unnamed_addr constant { [9 x i8*], [10 x i8*] } { [9 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::StringResource16Base"*)* @_ZN5blink20StringResource16BaseD2Ev to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZN5blink24ParkableStringResource16D0Ev to i8*), i8* bitcast (i1 (%"class.blink::ParkableStringResource16"*)* @_ZNK5blink24ParkableStringResource1611IsCacheableEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZNK5blink24ParkableStringResource164LockEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZNK5blink24ParkableStringResource166UnlockEv to i8*), i8* bitcast (i64 (%"class.blink::ParkableStringResource16"*)* @_ZNK5blink24ParkableStringResource166lengthEv to i8*), i8* bitcast (i16* (%"class.blink::ParkableStringResource16"*)* @_ZNK5blink24ParkableStringResource164dataEv to i8*)], [10 x i8*] [i8* inttoptr (i64 -32 to i8*), i8* null, i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZThn32_N5blink24ParkableStringResource16D1Ev to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZThn32_N5blink24ParkableStringResource16D0Ev to i8*), i8* bitcast (i1 (%"class.blink::ParkableStringResource16"*)* @_ZThn32_NK5blink24ParkableStringResource1611IsCacheableEv to i8*), i8* bitcast (void (%"class.v8::String::ExternalStringResourceBase"*)* @_ZN2v86String26ExternalStringResourceBase7DisposeEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZThn32_NK5blink24ParkableStringResource164LockEv to i8*), i8* bitcast (void (%"class.blink::ParkableStringResource16"*)* @_ZThn32_NK5blink24ParkableStringResource166UnlockEv to i8*), i8* bitcast (i16* (%"class.blink::ParkableStringResource16"*)* @_ZThn32_NK5blink24ParkableStringResource164dataEv to i8*), i8* bitcast (i64 (%"class.blink::ParkableStringResource16"*)* @_ZThn32_NK5blink24ParkableStringResource166lengthEv to i8*)] }, comdat, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPNS_10StringImplEmEEEEPKcv = private unnamed_addr constant [99 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<WTF::StringImpl *, unsigned long>]\00", align 1
@.str = private unnamed_addr constant [23 x i8] c"new_size > table_size_\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/wtf/hash_table.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPN5blink18ParkableStringImplEmEEEEPKcv = private unnamed_addr constant [109 x i8] c"const char *WTF::GetStringWithTypeName() [T = WTF::KeyValuePair<blink::ParkableStringImpl *, unsigned long>]\00", align 1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::GlobalValueMap"* @_ZN5blink20StringCacheMapTraits23MapFromWeakCallbackInfoERKN2v816WeakCallbackInfoIN3WTF10StringImplEEE(%"class.v8::WeakCallbackInfo"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 0
  ret %"class.v8::GlobalValueMap"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20StringCacheMapTraits7DisposeEPN2v87IsolateENS1_6GlobalINS1_6StringEEEPN3WTF10StringImplE(%"class.v8::Isolate"*, %"class.v8::Global"* nocapture readnone, %"class.WTF::StringImpl"*) local_unnamed_addr #1 align 2 {
  %4 = ptrtoint %"class.v8::Isolate"* %0 to i64
  %5 = add i64 %4, 8
  %6 = inttoptr i64 %5 to %"class.blink::V8PerIsolateData"**
  %7 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %7, i64 0, i32 5, i32 0, i32 0, i32 0
  %9 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %8, align 8
  %10 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %9, i64 0, i32 3
  %11 = bitcast %class.scoped_refptr* %10 to i64*
  %12 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %10, i64 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  store i64 0, i64* %11, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %28, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = and i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  br i1 %19, label %22, label %24

22:                                               ; preds = %15
  %23 = add i32 %21, -1
  store i32 %23, i32* %20, align 4
  br label %24

24:                                               ; preds = %22, %15
  %25 = phi i32 [ %23, %22 ], [ %21, %15 ]
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %13) #10
  br label %28

28:                                               ; preds = %3, %24, %27
  %29 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %9, i64 0, i32 1, i32 0
  store i64 0, i64* %29, align 8
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %28
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %28
  %39 = phi i32 [ %37, %36 ], [ %35, %28 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %2) #10
  br label %42

42:                                               ; preds = %38, %41
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11StringCache20InvalidateLastStringEv(%"class.blink::StringCache"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 3
  %3 = bitcast %class.scoped_refptr* %2 to i64*
  %4 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %2, i64 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  store i64 0, i64* %3, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %20, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = and i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %13 = load i32, i32* %12, align 4
  br i1 %11, label %14, label %16

14:                                               ; preds = %7
  %15 = add i32 %13, -1
  store i32 %15, i32* %12, align 4
  br label %16

16:                                               ; preds = %14, %7
  %17 = phi i32 [ %15, %14 ], [ %13, %7 ]
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %16
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %5) #10
  br label %20

20:                                               ; preds = %1, %16, %19
  %21 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 1, i32 0
  store i64 0, i64* %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20StringCacheMapTraits11DisposeWeakERKN2v816WeakCallbackInfoIN3WTF10StringImplEEE(%"class.v8::WeakCallbackInfo"* nocapture readonly dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 3
  %10 = bitcast %class.scoped_refptr* %9 to i64*
  %11 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %9, i64 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  store i64 0, i64* %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %23

21:                                               ; preds = %14
  %22 = add i32 %20, -1
  store i32 %22, i32* %19, align 4
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %22, %21 ], [ %20, %14 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %27

27:                                               ; preds = %1, %23, %26
  %28 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 1, i32 0
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::WeakCallbackInfo", %"class.v8::WeakCallbackInfo"* %0, i64 0, i32 1
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %27
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %27
  %40 = phi i32 [ %38, %37 ], [ %36, %27 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %30) #10
  br label %43

43:                                               ; preds = %39, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20StringCacheMapTraits14OnWeakCallbackERKN2v816WeakCallbackInfoIN3WTF10StringImplEEE(%"class.v8::WeakCallbackInfo"* nocapture readonly dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 3
  %10 = bitcast %class.scoped_refptr* %9 to i64*
  %11 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %9, i64 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  store i64 0, i64* %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %23

21:                                               ; preds = %14
  %22 = add i32 %20, -1
  store i32 %22, i32* %19, align 4
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %22, %21 ], [ %20, %14 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %27

27:                                               ; preds = %1, %23, %26
  %28 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 1, i32 0
  store i64 0, i64* %28, align 8
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %"class.v8::GlobalValueMap.27"* @_ZN5blink28ParkableStringCacheMapTraits23MapFromWeakCallbackInfoERKN2v816WeakCallbackInfoINS_18ParkableStringImplEEE(%"class.v8::WeakCallbackInfo.267"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo.267"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 2
  ret %"class.v8::GlobalValueMap.27"* %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28ParkableStringCacheMapTraits7DisposeEPN2v87IsolateENS1_6GlobalINS1_6StringEEEPNS_18ParkableStringImplE(%"class.v8::Isolate"* nocapture readnone, %"class.v8::Global"* nocapture readnone, %"class.blink::ParkableStringImpl"*) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %2, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %4) #10
  %5 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  %8 = icmp eq %"class.blink::ParkableStringImpl"* %2, null
  %9 = or i1 %8, %7
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  tail call void @_ZN5blink18ParkableStringImplD1Ev(%"class.blink::ParkableStringImpl"* nonnull %2) #10
  %11 = bitcast %"class.blink::ParkableStringImpl"* %2 to i8*
  tail call void @free(i8* %11) #10
  br label %12

12:                                               ; preds = %3, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28ParkableStringCacheMapTraits11DisposeWeakERKN2v816WeakCallbackInfoINS_18ParkableStringImplEEE(%"class.v8::WeakCallbackInfo.267"* nocapture readonly dereferenceable(40)) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.v8::WeakCallbackInfo.267", %"class.v8::WeakCallbackInfo.267"* %0, i64 0, i32 1
  %3 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %4) #10
  %5 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  %8 = icmp eq %"class.blink::ParkableStringImpl"* %3, null
  %9 = or i1 %8, %7
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  tail call void @_ZN5blink18ParkableStringImplD1Ev(%"class.blink::ParkableStringImpl"* nonnull %3) #10
  %11 = bitcast %"class.blink::ParkableStringImpl"* %3 to i8*
  tail call void @free(i8* %11) #10
  br label %12

12:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN5blink28ParkableStringCacheMapTraits14OnWeakCallbackERKN2v816WeakCallbackInfoINS_18ParkableStringImplEEE(%"class.v8::WeakCallbackInfo.267"* nocapture dereferenceable(40)) local_unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11StringCache7DisposeEv(%"class.blink::StringCache"*) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE5ClearEv(%"class.v8::PersistentValueMapBase"* %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE5ClearEv(%"class.v8::PersistentValueMapBase"*) local_unnamed_addr #1 comdat align 2 {
  %2 = alloca %"class.v8::Global", align 8
  %3 = alloca %"class.v8::HandleScope", align 8
  %4 = alloca %"class.v8::Global", align 8
  %5 = alloca %"class.v8::Global", align 8
  %6 = bitcast %"class.v8::HandleScope"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.v8::PersistentValueMapBase", %"class.v8::PersistentValueMapBase"* %0, i64 0, i32 0
  %8 = bitcast %"class.v8::HandleScope"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 24, i1 false)
  %9 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %7, align 8
  call void @_ZN2v811HandleScopeC1EPNS_7IsolateE(%"class.v8::HandleScope"* nonnull %3, %"class.v8::Isolate"* %9) #10
  %10 = getelementptr inbounds %"class.v8::PersistentValueMapBase", %"class.v8::PersistentValueMapBase"* %0, i64 0, i32 1
  %11 = getelementptr inbounds %"class.v8::PersistentValueMapBase", %"class.v8::PersistentValueMapBase"* %0, i64 0, i32 1, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %137, label %14

14:                                               ; preds = %1
  %15 = bitcast %"class.WTF::HashMap"* %10 to i64*
  %16 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %10, i64 0, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::PersistentValueMapBase", %"class.v8::PersistentValueMapBase"* %0, i64 0, i32 1, i32 0, i32 1
  %18 = getelementptr inbounds %"class.v8::PersistentValueMapBase", %"class.v8::PersistentValueMapBase"* %0, i64 0, i32 1, i32 0, i32 3
  %19 = bitcast %"class.v8::PersistentValueMapBase"* %0 to i64*
  %20 = bitcast %"class.v8::Global"* %5 to i8*
  %21 = bitcast %"class.v8::Global"* %2 to i8*
  %22 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %2, i64 0, i32 0, i32 0
  %23 = bitcast %"class.v8::Global"* %5 to i64*
  %24 = bitcast %"class.v8::Global"* %2 to i64**
  %25 = bitcast %"class.v8::Global"* %5 to i64**
  %26 = bitcast %"class.v8::Global"* %4 to i64*
  %27 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %5, i64 0, i32 0, i32 0
  %28 = bitcast %"class.v8::Global"* %4 to i64**
  %29 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %4, i64 0, i32 0, i32 0
  br label %30

30:                                               ; preds = %52, %14
  %31 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %16, align 8
  store atomic i64 0, i64* %15 monotonic, align 8
  %32 = load i32, i32* %17, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %11, align 4
  %33 = load i32, i32* %18, align 8
  %34 = and i32 %33, -2147483648
  store i32 %34, i32* %18, align 8
  %35 = zext i32 %32 to i64
  %36 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %31, i64 %35
  %37 = icmp eq i32 %32, 0
  br i1 %37, label %45, label %38

38:                                               ; preds = %30, %42
  %39 = phi %"struct.WTF::KeyValuePair"* [ %43, %42 ], [ %31, %30 ]
  %40 = bitcast %"struct.WTF::KeyValuePair"* %39 to i64*
  %41 = load i64, i64* %40, align 8
  switch i64 %41, label %45 [
    i64 -1, label %42
    i64 0, label %42
  ]

42:                                               ; preds = %38, %38
  %43 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %39, i64 1
  %44 = icmp eq %"struct.WTF::KeyValuePair"* %43, %36
  br i1 %44, label %48, label %38

45:                                               ; preds = %38, %30
  %46 = phi %"struct.WTF::KeyValuePair"* [ %31, %30 ], [ %39, %38 ]
  %47 = icmp eq %"struct.WTF::KeyValuePair"* %46, %36
  br i1 %47, label %48, label %55

48:                                               ; preds = %42, %125, %135, %132, %45
  %49 = icmp eq %"struct.WTF::KeyValuePair"* %31, null
  br i1 %49, label %52, label %50, !prof !2

50:                                               ; preds = %48
  %51 = bitcast %"struct.WTF::KeyValuePair"* %31 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %51) #10
  br label %52

52:                                               ; preds = %48, %50
  %53 = load i32, i32* %11, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %137, label %30

55:                                               ; preds = %45, %135
  %56 = phi %"struct.WTF::KeyValuePair"* [ %129, %135 ], [ %46, %45 ]
  %57 = load i64, i64* %19, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #10
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %56, i64 0, i32 1
  %59 = load i64, i64* %58, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10, !noalias !3
  %60 = inttoptr i64 %59 to %"class.v8::String"*
  store %"class.v8::String"* %60, %"class.v8::String"** %22, align 8, !noalias !3
  %61 = icmp eq i64 %59, 0
  %62 = inttoptr i64 %59 to i64*
  br i1 %61, label %70, label %63

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"class.v8::String", %"class.v8::String"* %60, i64 11, i32 0
  %65 = load i8, i8* %64, align 1, !noalias !3
  %66 = and i8 %65, 7
  %67 = icmp eq i8 %66, 2
  br i1 %67, label %68, label %71

68:                                               ; preds = %63
  %69 = call i8* @_ZN2v82V89ClearWeakEPm(i64* %62) #10
  br label %71

70:                                               ; preds = %55
  store i64 0, i64* %23, align 8, !alias.scope !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10, !noalias !3
  store i64 0, i64* %26, align 8, !alias.scope !9
  br label %75

71:                                               ; preds = %63, %68
  store i64 %59, i64* %23, align 8, !alias.scope !6
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %24, i64** nonnull %25) #10
  %72 = load i64, i64* %23, align 8, !noalias !9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10, !noalias !3
  store i64 %72, i64* %26, align 8, !alias.scope !9
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %75, label %74

74:                                               ; preds = %71
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %25, i64** nonnull %28) #10
  store %"class.v8::String"* null, %"class.v8::String"** %27, align 8, !noalias !9
  br label %75

75:                                               ; preds = %70, %71, %74
  %76 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %56, i64 0, i32 0
  %77 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %76, align 8
  %78 = add i64 %57, 8
  %79 = inttoptr i64 %78 to %"class.blink::V8PerIsolateData"**
  %80 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %79, align 8
  %81 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %80, i64 0, i32 5, i32 0, i32 0, i32 0
  %82 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %81, align 8
  %83 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %82, i64 0, i32 3
  %84 = bitcast %class.scoped_refptr* %83 to i64*
  %85 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %83, i64 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  store i64 0, i64* %84, align 8
  %87 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %87, label %101, label %88

88:                                               ; preds = %75
  %89 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %90 = load atomic i32, i32* %89 monotonic, align 4
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  br i1 %92, label %95, label %97

95:                                               ; preds = %88
  %96 = add i32 %94, -1
  store i32 %96, i32* %93, align 4
  br label %97

97:                                               ; preds = %95, %88
  %98 = phi i32 [ %96, %95 ], [ %94, %88 ]
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %101

100:                                              ; preds = %97
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %86) #10
  br label %101

101:                                              ; preds = %100, %97, %75
  %102 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %82, i64 0, i32 1, i32 0
  store i64 0, i64* %102, align 8
  %103 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = and i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  br i1 %106, label %109, label %111

109:                                              ; preds = %101
  %110 = add i32 %108, -1
  store i32 %110, i32* %107, align 4
  br label %111

111:                                              ; preds = %109, %101
  %112 = phi i32 [ %110, %109 ], [ %108, %101 ]
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %111
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %77) #10
  br label %115

115:                                              ; preds = %111, %114
  %116 = load %"class.v8::String"*, %"class.v8::String"** %29, align 8
  %117 = icmp eq %"class.v8::String"* %116, null
  br i1 %117, label %120, label %118

118:                                              ; preds = %115
  %119 = bitcast %"class.v8::String"* %116 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %119) #10
  store %"class.v8::String"* null, %"class.v8::String"** %29, align 8
  br label %120

120:                                              ; preds = %115, %118
  %121 = load %"class.v8::String"*, %"class.v8::String"** %27, align 8
  %122 = icmp eq %"class.v8::String"* %121, null
  br i1 %122, label %125, label %123

123:                                              ; preds = %120
  %124 = bitcast %"class.v8::String"* %121 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %124) #10
  store %"class.v8::String"* null, %"class.v8::String"** %27, align 8
  br label %125

125:                                              ; preds = %120, %123
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #10
  %126 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %56, i64 1
  %127 = icmp eq %"struct.WTF::KeyValuePair"* %126, %36
  br i1 %127, label %48, label %128

128:                                              ; preds = %125, %132
  %129 = phi %"struct.WTF::KeyValuePair"* [ %133, %132 ], [ %126, %125 ]
  %130 = bitcast %"struct.WTF::KeyValuePair"* %129 to i64*
  %131 = load i64, i64* %130, align 8
  switch i64 %131, label %135 [
    i64 -1, label %132
    i64 0, label %132
  ]

132:                                              ; preds = %128, %128
  %133 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %129, i64 1
  %134 = icmp eq %"struct.WTF::KeyValuePair"* %133, %36
  br i1 %134, label %48, label %128

135:                                              ; preds = %128
  %136 = icmp eq %"struct.WTF::KeyValuePair"* %129, %36
  br i1 %136, label %48, label %55

137:                                              ; preds = %52, %1
  call void @_ZN2v811HandleScopeD1Ev(%"class.v8::HandleScope"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::String"* @_ZN5blink11StringCache20V8ExternalStringSlowEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.absl::optional", align 8
  %5 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #10
  %6 = bitcast %"class.absl::optional"* %4 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  store i8 0, i8* %5, align 8
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %union.anon* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 48, i1 false) #10
  %9 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E, align 1, !range !12
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %25, label %11, !prof !2

11:                                               ; preds = %3
  %12 = tail call %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"* %1) #10
  %13 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %12, i64 0, i32 3
  %14 = bitcast %"class.base::TickClock"** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::RuntimeCallStats"* %12, %"class.blink::RuntimeCallStats"** %16, align 8
  %17 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %18 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 4
  %20 = bitcast i64* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 16, i1 false) #10
  %21 = bitcast %"class.base::TickClock"** %19 to i64*
  store i64 %15, i64* %21, align 8
  %22 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %12, i64 0, i32 2, i64 7
  %23 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %12, i64 0, i32 0
  %24 = load %"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallTimer"** %23, align 8
  call void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"* %17, %"class.blink::RuntimeCallCounter"* %22, %"class.blink::RuntimeCallTimer"* %24) #10
  store %"class.blink::RuntimeCallTimer"* %17, %"class.blink::RuntimeCallTimer"** %23, align 8
  store i8 1, i8* %5, align 8
  br label %25

25:                                               ; preds = %3, %11
  %26 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 1
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = ptrtoint %"class.v8::Isolate"* %1 to i64
  %31 = add i64 %30, 200
  %32 = inttoptr i64 %31 to %"class.v8::String"*
  br label %132

33:                                               ; preds = %25
  %34 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %35 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %34, align 8, !noalias !13
  %36 = icmp eq %"struct.WTF::KeyValuePair"* %35, null
  br i1 %36, label %130, label %37

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %39 = load i32, i32* %38, align 8, !noalias !13
  %40 = add i32 %39, -1
  %41 = zext i32 %40 to i64
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %43 = load atomic i32, i32* %42 monotonic, align 4, !noalias !13
  %44 = lshr i32 %43, 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %37
  %47 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %2) #10, !noalias !13
  br label %48

48:                                               ; preds = %46, %37
  %49 = phi i32 [ %47, %46 ], [ %44, %37 ]
  %50 = and i32 %49, %40
  %51 = zext i32 %50 to i64
  %52 = xor i32 %49, -1
  %53 = lshr i32 %49, 23
  %54 = add i32 %53, %52
  %55 = shl i32 %54, 12
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 7
  %58 = xor i32 %57, %56
  %59 = shl i32 %58, 2
  %60 = xor i32 %59, %58
  %61 = lshr i32 %60, 20
  %62 = xor i32 %61, %60
  %63 = or i32 %62, 1
  %64 = zext i32 %63 to i64
  br label %65

65:                                               ; preds = %74, %48
  %66 = phi i64 [ 0, %48 ], [ %76, %74 ]
  %67 = phi i64 [ %51, %48 ], [ %78, %74 ]
  %68 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %67
  %69 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 0
  %70 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %69, align 8, !noalias !13
  %71 = ptrtoint %"class.WTF::StringImpl"* %70 to i64
  switch i64 %71, label %72 [
    i64 0, label %130
    i64 -1, label %74
  ]

72:                                               ; preds = %65
  %73 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %70, %"class.WTF::StringImpl"* %2) #10, !noalias !13
  br i1 %73, label %79, label %74

74:                                               ; preds = %72, %65
  %75 = icmp eq i64 %66, 0
  %76 = select i1 %75, i64 %64, i64 %66
  %77 = add i64 %76, %67
  %78 = and i64 %77, %41
  br label %65

79:                                               ; preds = %72
  %80 = icmp eq %"struct.WTF::KeyValuePair"* %68, null
  br i1 %80, label %130, label %81

81:                                               ; preds = %79
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %35, i64 %67, i32 1
  %83 = load i64, i64* %82, align 8, !noalias !13
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %130, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 3
  %87 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %87, label %104, label %88

88:                                               ; preds = %85
  %89 = load atomic i32, i32* %42 monotonic, align 4
  %90 = and i32 %89, 2
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %104

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %94 = load i32, i32* %93, align 4
  %95 = zext i32 %94 to i33
  %96 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #10
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !16

101:                                              ; preds = %92
  call void @llvm.trap() #10
  unreachable

102:                                              ; preds = %92
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %93, align 4
  br label %104

104:                                              ; preds = %102, %88, %85
  %105 = ptrtoint %"class.WTF::StringImpl"* %2 to i64
  %106 = bitcast %class.scoped_refptr* %86 to i64*
  %107 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %86, i64 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  store i64 %105, i64* %106, align 8
  %109 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %109, label %123, label %110

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = and i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %116 = load i32, i32* %115, align 4
  br i1 %114, label %117, label %119

117:                                              ; preds = %110
  %118 = add i32 %116, -1
  store i32 %118, i32* %115, align 4
  br label %119

119:                                              ; preds = %117, %110
  %120 = phi i32 [ %118, %117 ], [ %116, %110 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %108) #10
  br label %123

123:                                              ; preds = %122, %119, %104
  %124 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 1, i32 0
  store i64 %83, i64* %124, align 8
  %125 = inttoptr i64 %83 to i64*
  %126 = bitcast %"class.v8::Isolate"* %1 to %"class.v8::internal::Isolate"*
  %127 = load i64, i64* %125, align 8
  %128 = call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %126, i64 %127) #10
  %129 = bitcast i64* %128 to %"class.v8::String"*
  br label %132

130:                                              ; preds = %65, %33, %79, %81
  %131 = call %"class.v8::String"* @_ZN5blink11StringCache30CreateStringAndInsertIntoCacheEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %0, %"class.v8::Isolate"* %1, %"class.WTF::StringImpl"* %2)
  br label %132

132:                                              ; preds = %130, %123, %29
  %133 = phi %"class.v8::String"* [ %32, %29 ], [ %131, %130 ], [ %129, %123 ]
  %134 = load i8, i8* %5, align 8, !range !12
  %135 = icmp eq i8 %134, 0
  br i1 %135, label %142, label %136

136:                                              ; preds = %132
  %137 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %138 = load %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallStats"** %137, align 8
  %139 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %140 = call %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"* %139) #10
  %141 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %138, i64 0, i32 0
  store %"class.blink::RuntimeCallTimer"* %140, %"class.blink::RuntimeCallTimer"** %141, align 8
  store i8 0, i8* %5, align 8
  br label %142

142:                                              ; preds = %132, %136
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #10
  ret %"class.v8::String"* %133
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::String"* @_ZN5blink11StringCache30CreateStringAndInsertIntoCacheEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.WTF::StringImpl"*, align 8
  %5 = alloca %"class.v8::Global", align 8
  %6 = alloca %"class.v8::Global", align 8
  %7 = alloca %"class.v8::Global", align 8
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %4, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 2
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %14, label %26

14:                                               ; preds = %9
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i33
  %18 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %17, i33 1) #10
  %19 = extractvalue { i33, i1 } %18, 1
  %20 = extractvalue { i33, i1 } %18, 0
  %21 = icmp slt i33 %20, 0
  %22 = or i1 %19, %21
  br i1 %22, label %23, label %24, !prof !16

23:                                               ; preds = %14
  tail call void @llvm.trap() #10
  unreachable

24:                                               ; preds = %14
  %25 = trunc i33 %20 to i32
  store i32 %25, i32* %15, align 4
  br label %26

26:                                               ; preds = %3, %9, %24
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = tail call noalias i8* @malloc(i64 48) #10
  br i1 %30, label %87, label %32

32:                                               ; preds = %26
  %33 = bitcast i8* %31 to %"class.blink::StringResource8"*
  %34 = bitcast i8* %31 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink18StringResourceBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %34, align 8
  %35 = getelementptr inbounds i8, i8* %31, i64 8
  %36 = bitcast i8* %35 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %36, align 8
  br i1 %8, label %53, label %37

37:                                               ; preds = %32
  %38 = load atomic i32, i32* %27 monotonic, align 4
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i33
  %45 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %44, i33 1) #10
  %46 = extractvalue { i33, i1 } %45, 1
  %47 = extractvalue { i33, i1 } %45, 0
  %48 = icmp slt i33 %47, 0
  %49 = or i1 %46, %48
  br i1 %49, label %50, label %51, !prof !16

50:                                               ; preds = %41
  tail call void @llvm.trap() #10
  unreachable

51:                                               ; preds = %41
  %52 = trunc i33 %47 to i32
  store i32 %52, i32* %42, align 4
  br label %53

53:                                               ; preds = %51, %37, %32
  %54 = getelementptr inbounds i8, i8* %31, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %54, i8 0, i64 16, i1 false) #10
  %55 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #10
  br i1 %8, label %65, label %56

56:                                               ; preds = %53
  %57 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = zext i32 %58 to i64
  %60 = load atomic i32, i32* %27 monotonic, align 4
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  %63 = select i1 %62, i64 2, i64 1
  %64 = mul nuw nsw i64 %63, %59
  br label %65

65:                                               ; preds = %56, %53
  %66 = phi i64 [ %64, %56 ], [ 0, %53 ]
  %67 = tail call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %55, i64 %66) #10
  %68 = getelementptr inbounds i8, i8* %31, i64 32
  %69 = bitcast i8* %68 to i32 (...)***
  %70 = getelementptr inbounds i8, i8* %31, i64 40
  %71 = bitcast i8* %70 to i8**
  store i8* null, i8** %71, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [10 x i8*] }, { [6 x i8*], [10 x i8*] }* @_ZTVN5blink15StringResource8E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %34, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [10 x i8*] }, { [6 x i8*], [10 x i8*] }* @_ZTVN5blink15StringResource8E, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %69, align 8
  %72 = icmp eq i8* %31, null
  %73 = bitcast i8* %68 to %"class.v8::String::ExternalOneByteStringResource"*
  %74 = select i1 %72, %"class.v8::String::ExternalOneByteStringResource"* null, %"class.v8::String::ExternalOneByteStringResource"* %73
  %75 = tail call %"class.v8::String"* @_ZN2v86String18NewExternalOneByteEPNS_7IsolateEPNS0_29ExternalOneByteStringResourceE(%"class.v8::Isolate"* %1, %"class.v8::String::ExternalOneByteStringResource"* %74) #10
  %76 = icmp eq %"class.v8::String"* %75, null
  br i1 %76, label %77, label %142

77:                                               ; preds = %65
  br i1 %72, label %83, label %78

78:                                               ; preds = %77
  %79 = bitcast i8* %31 to void (%"class.blink::StringResource8"*)***
  %80 = load void (%"class.blink::StringResource8"*)**, void (%"class.blink::StringResource8"*)*** %79, align 8
  %81 = getelementptr inbounds void (%"class.blink::StringResource8"*)*, void (%"class.blink::StringResource8"*)** %80, i64 1
  %82 = load void (%"class.blink::StringResource8"*)*, void (%"class.blink::StringResource8"*)** %81, align 8
  tail call void %82(%"class.blink::StringResource8"* nonnull %33) #10
  br label %83

83:                                               ; preds = %78, %77
  %84 = ptrtoint %"class.v8::Isolate"* %1 to i64
  %85 = add i64 %84, 200
  %86 = inttoptr i64 %85 to %"class.v8::String"*
  br label %142

87:                                               ; preds = %26
  %88 = bitcast i8* %31 to %"class.blink::StringResource16"*
  %89 = bitcast i8* %31 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink18StringResourceBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %89, align 8
  %90 = getelementptr inbounds i8, i8* %31, i64 8
  %91 = bitcast i8* %90 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %2, %"class.WTF::StringImpl"** %91, align 8
  br i1 %8, label %108, label %92

92:                                               ; preds = %87
  %93 = load atomic i32, i32* %27 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %108

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i33
  %100 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %99, i33 1) #10
  %101 = extractvalue { i33, i1 } %100, 1
  %102 = extractvalue { i33, i1 } %100, 0
  %103 = icmp slt i33 %102, 0
  %104 = or i1 %101, %103
  br i1 %104, label %105, label %106, !prof !16

105:                                              ; preds = %96
  tail call void @llvm.trap() #10
  unreachable

106:                                              ; preds = %96
  %107 = trunc i33 %102 to i32
  store i32 %107, i32* %97, align 4
  br label %108

108:                                              ; preds = %106, %92, %87
  %109 = getelementptr inbounds i8, i8* %31, i64 16
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %109, i8 0, i64 16, i1 false) #10
  %110 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #10
  br i1 %8, label %120, label %111

111:                                              ; preds = %108
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = zext i32 %113 to i64
  %115 = load atomic i32, i32* %27 monotonic, align 4
  %116 = and i32 %115, 1
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, i64 2, i64 1
  %119 = mul nuw nsw i64 %118, %114
  br label %120

120:                                              ; preds = %111, %108
  %121 = phi i64 [ %119, %111 ], [ 0, %108 ]
  %122 = tail call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %110, i64 %121) #10
  %123 = getelementptr inbounds i8, i8* %31, i64 32
  %124 = bitcast i8* %123 to i32 (...)***
  %125 = getelementptr inbounds i8, i8* %31, i64 40
  %126 = bitcast i8* %125 to i16**
  store i16* null, i16** %126, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [10 x i8*] }, { [6 x i8*], [10 x i8*] }* @_ZTVN5blink16StringResource16E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %89, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*], [10 x i8*] }, { [6 x i8*], [10 x i8*] }* @_ZTVN5blink16StringResource16E, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %124, align 8
  %127 = icmp eq i8* %31, null
  %128 = bitcast i8* %123 to %"class.v8::String::ExternalStringResource"*
  %129 = select i1 %127, %"class.v8::String::ExternalStringResource"* null, %"class.v8::String::ExternalStringResource"* %128
  %130 = tail call %"class.v8::String"* @_ZN2v86String18NewExternalTwoByteEPNS_7IsolateEPNS0_22ExternalStringResourceE(%"class.v8::Isolate"* %1, %"class.v8::String::ExternalStringResource"* %129) #10
  %131 = icmp eq %"class.v8::String"* %130, null
  br i1 %131, label %132, label %142

132:                                              ; preds = %120
  br i1 %127, label %138, label %133

133:                                              ; preds = %132
  %134 = bitcast i8* %31 to void (%"class.blink::StringResource16"*)***
  %135 = load void (%"class.blink::StringResource16"*)**, void (%"class.blink::StringResource16"*)*** %134, align 8
  %136 = getelementptr inbounds void (%"class.blink::StringResource16"*)*, void (%"class.blink::StringResource16"*)** %135, i64 1
  %137 = load void (%"class.blink::StringResource16"*)*, void (%"class.blink::StringResource16"*)** %136, align 8
  tail call void %137(%"class.blink::StringResource16"* nonnull %88) #10
  br label %138

138:                                              ; preds = %133, %132
  %139 = ptrtoint %"class.v8::Isolate"* %1 to i64
  %140 = add i64 %139, 200
  %141 = inttoptr i64 %140 to %"class.v8::String"*
  br label %142

142:                                              ; preds = %65, %83, %120, %138
  %143 = phi %"class.v8::String"* [ %86, %83 ], [ %75, %65 ], [ %141, %138 ], [ %130, %120 ]
  br i1 %8, label %156, label %144

144:                                              ; preds = %142
  %145 = load atomic i32, i32* %27 monotonic, align 4
  %146 = and i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %149 = load i32, i32* %148, align 4
  br i1 %147, label %150, label %152

150:                                              ; preds = %144
  %151 = add i32 %149, -1
  store i32 %151, i32* %148, align 4
  br label %152

152:                                              ; preds = %150, %144
  %153 = phi i32 [ %151, %150 ], [ %149, %144 ]
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %156

155:                                              ; preds = %152
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %2) #10
  br label %156

156:                                              ; preds = %142, %152, %155
  %157 = bitcast %"class.v8::Global"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %157) #10
  %158 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %5, i64 0, i32 0, i32 0
  store %"class.v8::String"* inttoptr (i64 -6148914691236517206 to %"class.v8::String"*), %"class.v8::String"** %158, align 8
  %159 = icmp eq %"class.v8::String"* %143, null
  br i1 %159, label %165, label %160

160:                                              ; preds = %156
  %161 = bitcast %"class.v8::String"* %143 to i64*
  %162 = bitcast %"class.v8::Isolate"* %1 to %"class.v8::internal::Isolate"*
  %163 = tail call i64* @_ZN2v82V818GlobalizeReferenceEPNS_8internal7IsolateEPm(%"class.v8::internal::Isolate"* %162, i64* nonnull %161) #10
  %164 = bitcast i64* %163 to %"class.v8::String"*
  br label %165

165:                                              ; preds = %156, %160
  %166 = phi %"class.v8::String"* [ %164, %160 ], [ null, %156 ]
  store %"class.v8::String"* %166, %"class.v8::String"** %158, align 8
  %167 = load atomic i32, i32* %27 monotonic, align 4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = ptrtoint %"class.v8::String"* %166 to i64
  br i1 %169, label %171, label %183

171:                                              ; preds = %165
  %172 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %173 = load i32, i32* %172, align 4
  %174 = zext i32 %173 to i33
  %175 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %174, i33 1) #10
  %176 = extractvalue { i33, i1 } %175, 1
  %177 = extractvalue { i33, i1 } %175, 0
  %178 = icmp slt i33 %177, 0
  %179 = or i1 %176, %178
  br i1 %179, label %180, label %181, !prof !16

180:                                              ; preds = %171
  tail call void @llvm.trap() #10
  unreachable

181:                                              ; preds = %171
  %182 = trunc i33 %177 to i32
  store i32 %182, i32* %172, align 4
  br label %183

183:                                              ; preds = %165, %181
  %184 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 0
  %185 = bitcast %"class.v8::Global"* %7 to i64*
  store i64 %170, i64* %185, align 8
  %186 = icmp eq %"class.v8::String"* %166, null
  br i1 %186, label %191, label %187

187:                                              ; preds = %183
  %188 = bitcast %"class.v8::Global"* %5 to i64**
  %189 = bitcast %"class.v8::Global"* %7 to i64**
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %188, i64** nonnull %189) #10
  store %"class.v8::String"* null, %"class.v8::String"** %158, align 8
  %190 = load i64, i64* %185, align 8, !noalias !17
  br label %191

191:                                              ; preds = %183, %187
  %192 = phi i64 [ 0, %183 ], [ %190, %187 ]
  %193 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 1, i32 0
  store i64 %192, i64* %193, align 8, !noalias !17
  call void @_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE9SetUniqueERKS3_PNS_6GlobalIS4_EE(%"class.v8::Global"* nonnull sret %6, %"class.v8::GlobalValueMap"* %184, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %4, %"class.v8::Global"* nonnull %7) #10
  %194 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %6, i64 0, i32 0, i32 0
  %195 = load %"class.v8::String"*, %"class.v8::String"** %194, align 8
  %196 = icmp eq %"class.v8::String"* %195, null
  br i1 %196, label %199, label %197

197:                                              ; preds = %191
  %198 = bitcast %"class.v8::String"* %195 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %198) #10
  store %"class.v8::String"* null, %"class.v8::String"** %194, align 8
  br label %199

199:                                              ; preds = %191, %197
  %200 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %7, i64 0, i32 0, i32 0
  %201 = load %"class.v8::String"*, %"class.v8::String"** %200, align 8
  %202 = icmp eq %"class.v8::String"* %201, null
  br i1 %202, label %205, label %203

203:                                              ; preds = %199
  %204 = bitcast %"class.v8::String"* %201 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %204) #10
  store %"class.v8::String"* null, %"class.v8::String"** %200, align 8
  br label %205

205:                                              ; preds = %199, %203
  %206 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %207 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 3
  %208 = icmp eq %"class.WTF::StringImpl"* %206, null
  br i1 %208, label %226, label %209

209:                                              ; preds = %205
  %210 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %211 = load atomic i32, i32* %210 monotonic, align 4
  %212 = and i32 %211, 2
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %214, label %226

214:                                              ; preds = %209
  %215 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %206, i64 0, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = zext i32 %216 to i33
  %218 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %217, i33 1) #10
  %219 = extractvalue { i33, i1 } %218, 1
  %220 = extractvalue { i33, i1 } %218, 0
  %221 = icmp slt i33 %220, 0
  %222 = or i1 %219, %221
  br i1 %222, label %223, label %224, !prof !16

223:                                              ; preds = %214
  call void @llvm.trap() #10
  unreachable

224:                                              ; preds = %214
  %225 = trunc i33 %220 to i32
  store i32 %225, i32* %215, align 4
  br label %226

226:                                              ; preds = %224, %209, %205
  %227 = ptrtoint %"class.WTF::StringImpl"* %206 to i64
  %228 = bitcast %class.scoped_refptr* %207 to i64*
  %229 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %207, i64 0, i32 0
  %230 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %229, align 8
  store i64 %227, i64* %228, align 8
  %231 = icmp eq %"class.WTF::StringImpl"* %230, null
  br i1 %231, label %245, label %232

232:                                              ; preds = %226
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %234 = load atomic i32, i32* %233 monotonic, align 4
  %235 = and i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %230, i64 0, i32 0
  %238 = load i32, i32* %237, align 4
  br i1 %236, label %239, label %241

239:                                              ; preds = %232
  %240 = add i32 %238, -1
  store i32 %240, i32* %237, align 4
  br label %241

241:                                              ; preds = %239, %232
  %242 = phi i32 [ %240, %239 ], [ %238, %232 ]
  %243 = icmp eq i32 %242, 0
  br i1 %243, label %244, label %245

244:                                              ; preds = %241
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %230) #10
  br label %245

245:                                              ; preds = %226, %241, %244
  %246 = load %"class.v8::String"*, %"class.v8::String"** %158, align 8
  %247 = icmp eq %"class.v8::String"* %246, null
  br i1 %247, label %250, label %248

248:                                              ; preds = %245
  %249 = bitcast %"class.v8::String"* %246 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %249) #10
  store %"class.v8::String"* null, %"class.v8::String"** %158, align 8
  br label %250

250:                                              ; preds = %245, %248
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %157) #10
  ret %"class.v8::String"* %143
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::String"* @_ZN5blink11StringCache16V8ExternalStringEPN2v87IsolateERKNS_14ParkableStringE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.blink::ParkableString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.blink::ParkableString", %"class.blink::ParkableString"* %2, i64 0, i32 0, i32 0
  %5 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %4, align 8
  %6 = icmp eq %"class.blink::ParkableStringImpl"* %5, null
  br i1 %6, label %23, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %8, align 8
  %10 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, null
  br i1 %10, label %11, label %17

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %23, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  br label %19

17:                                               ; preds = %7
  %18 = getelementptr inbounds %"struct.blink::ParkableStringImpl::ParkableMetadata", %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, i64 0, i32 8
  br label %19

19:                                               ; preds = %15, %17
  %20 = phi i32* [ %18, %17 ], [ %16, %15 ]
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %11, %3, %19
  %24 = ptrtoint %"class.v8::Isolate"* %1 to i64
  %25 = add i64 %24, 200
  %26 = inttoptr i64 %25 to %"class.v8::String"*
  br label %105

27:                                               ; preds = %19
  %28 = ptrtoint %"class.blink::ParkableStringImpl"* %5 to i64
  %29 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 0
  %30 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %29, align 8
  %31 = icmp eq %"struct.WTF::KeyValuePair.33"* %30, null
  br i1 %31, label %103, label %32

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 2, i32 0, i32 1, i32 0, i32 1
  %34 = load i32, i32* %33, align 8
  %35 = add i32 %34, -1
  %36 = zext i32 %35 to i64
  %37 = shl i64 %28, 32
  %38 = xor i64 %37, -1
  %39 = add i64 %38, %28
  %40 = lshr i64 %39, 22
  %41 = xor i64 %40, %39
  %42 = shl i64 %41, 13
  %43 = xor i64 %42, -1
  %44 = add i64 %41, %43
  %45 = lshr i64 %44, 8
  %46 = xor i64 %45, %44
  %47 = mul i64 %46, 9
  %48 = lshr i64 %47, 15
  %49 = xor i64 %48, %47
  %50 = shl i64 %49, 27
  %51 = xor i64 %50, -1
  %52 = add i64 %49, %51
  %53 = lshr i64 %52, 31
  %54 = xor i64 %53, %52
  %55 = trunc i64 %54 to i32
  %56 = and i32 %35, %55
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %30, i64 %57
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %58, i64 0, i32 0
  %60 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %59, align 8
  %61 = icmp eq %"class.blink::ParkableStringImpl"* %60, %5
  br i1 %61, label %90, label %62

62:                                               ; preds = %32
  %63 = xor i32 %55, -1
  %64 = lshr i32 %55, 23
  %65 = add i32 %64, %63
  %66 = shl i32 %65, 12
  %67 = xor i32 %66, %65
  %68 = lshr i32 %67, 7
  %69 = xor i32 %68, %67
  %70 = shl i32 %69, 2
  %71 = xor i32 %70, %69
  %72 = lshr i32 %71, 20
  %73 = xor i32 %72, %71
  %74 = or i32 %73, 1
  %75 = zext i32 %74 to i64
  br label %76

76:                                               ; preds = %81, %62
  %77 = phi %"class.blink::ParkableStringImpl"* [ %60, %62 ], [ %88, %81 ]
  %78 = phi i64 [ %57, %62 ], [ %85, %81 ]
  %79 = phi i64 [ 0, %62 ], [ %83, %81 ]
  %80 = icmp eq %"class.blink::ParkableStringImpl"* %77, null
  br i1 %80, label %103, label %81

81:                                               ; preds = %76
  %82 = icmp eq i64 %79, 0
  %83 = select i1 %82, i64 %75, i64 %79
  %84 = add i64 %83, %78
  %85 = and i64 %84, %36
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %30, i64 %85
  %87 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %86, i64 0, i32 0
  %88 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %87, align 8
  %89 = icmp eq %"class.blink::ParkableStringImpl"* %88, %5
  br i1 %89, label %90, label %76

90:                                               ; preds = %81, %32
  %91 = phi %"struct.WTF::KeyValuePair.33"* [ %58, %32 ], [ %86, %81 ]
  %92 = icmp eq %"struct.WTF::KeyValuePair.33"* %91, null
  br i1 %92, label %103, label %93

93:                                               ; preds = %90
  %94 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %91, i64 0, i32 1
  %95 = load i64, i64* %94, align 8, !noalias !20
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %103, label %97

97:                                               ; preds = %93
  %98 = inttoptr i64 %95 to i64*
  %99 = bitcast %"class.v8::Isolate"* %1 to %"class.v8::internal::Isolate"*
  %100 = load i64, i64* %98, align 8
  %101 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %99, i64 %100) #10
  %102 = bitcast i64* %101 to %"class.v8::String"*
  br label %105

103:                                              ; preds = %76, %27, %90, %93
  %104 = tail call %"class.v8::String"* @_ZN5blink11StringCache30CreateStringAndInsertIntoCacheEPN2v87IsolateERKNS_14ParkableStringE(%"class.blink::StringCache"* %0, %"class.v8::Isolate"* %1, %"class.blink::ParkableString"* dereferenceable(8) %2)
  br label %105

105:                                              ; preds = %103, %97, %23
  %106 = phi %"class.v8::String"* [ %26, %23 ], [ %104, %103 ], [ %102, %97 ]
  ret %"class.v8::String"* %106
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::String"* @_ZN5blink11StringCache30CreateStringAndInsertIntoCacheEPN2v87IsolateERKNS_14ParkableStringE(%"class.blink::StringCache"*, %"class.v8::Isolate"*, %"class.blink::ParkableString"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.blink::ParkableStringImpl"*, align 8
  %5 = alloca %"class.blink::ParkableString", align 8
  %6 = alloca %"class.v8::Global", align 8
  %7 = alloca %"class.v8::Global", align 8
  %8 = alloca %"class.v8::Global", align 8
  %9 = bitcast %"class.blink::ParkableStringImpl"** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #10
  %10 = getelementptr inbounds %"class.blink::ParkableString", %"class.blink::ParkableString"* %2, i64 0, i32 0, i32 0
  %11 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %10, align 8
  store %"class.blink::ParkableStringImpl"* %11, %"class.blink::ParkableStringImpl"** %4, align 8
  %12 = bitcast %"class.blink::ParkableString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #10
  %13 = getelementptr inbounds %"class.blink::ParkableString", %"class.blink::ParkableString"* %5, i64 0, i32 0, i32 0
  store %"class.blink::ParkableStringImpl"* %11, %"class.blink::ParkableStringImpl"** %13, align 8
  %14 = icmp eq %"class.blink::ParkableStringImpl"* %11, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %11, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %16) #10
  br label %17

17:                                               ; preds = %3, %15
  %18 = call zeroext i1 @_ZNK5blink14ParkableString6Is8BitEv(%"class.blink::ParkableString"* nonnull %5) #10
  %19 = call noalias i8* @malloc(i64 48) #10
  br i1 %18, label %20, label %54

20:                                               ; preds = %17
  %21 = bitcast i8* %19 to %"class.blink::ParkableStringResource8"*
  %22 = bitcast i8* %19 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink18StringResourceBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  %23 = getelementptr inbounds i8, i8* %19, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #10
  %24 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %13, align 8
  %25 = getelementptr inbounds i8, i8* %19, i64 24
  %26 = bitcast i8* %25 to %"class.blink::ParkableStringImpl"**
  store %"class.blink::ParkableStringImpl"* %24, %"class.blink::ParkableStringImpl"** %26, align 8
  %27 = icmp eq %"class.blink::ParkableStringImpl"* %24, null
  br i1 %27, label %30, label %28

28:                                               ; preds = %20
  %29 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %24, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %29) #10
  br label %30

30:                                               ; preds = %28, %20
  %31 = call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #10
  %32 = call i32 @_ZNK5blink14ParkableString21CharactersSizeInBytesEv(%"class.blink::ParkableString"* nonnull %5) #10
  %33 = zext i32 %32 to i64
  %34 = call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %31, i64 %33) #10
  %35 = getelementptr inbounds i8, i8* %19, i64 32
  %36 = bitcast i8* %35 to i32 (...)***
  %37 = getelementptr inbounds i8, i8* %19, i64 40
  %38 = bitcast i8* %37 to i8**
  store i8* null, i8** %38, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*], [10 x i8*] }, { [9 x i8*], [10 x i8*] }* @_ZTVN5blink23ParkableStringResource8E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %22, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*], [10 x i8*] }, { [9 x i8*], [10 x i8*] }* @_ZTVN5blink23ParkableStringResource8E, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %36, align 8
  %39 = icmp eq i8* %19, null
  %40 = bitcast i8* %35 to %"class.v8::String::ExternalOneByteStringResource"*
  %41 = select i1 %39, %"class.v8::String::ExternalOneByteStringResource"* null, %"class.v8::String::ExternalOneByteStringResource"* %40
  %42 = call %"class.v8::String"* @_ZN2v86String18NewExternalOneByteEPNS_7IsolateEPNS0_29ExternalOneByteStringResourceE(%"class.v8::Isolate"* %1, %"class.v8::String::ExternalOneByteStringResource"* %41) #10
  %43 = icmp eq %"class.v8::String"* %42, null
  br i1 %43, label %44, label %88

44:                                               ; preds = %30
  br i1 %39, label %50, label %45

45:                                               ; preds = %44
  %46 = bitcast i8* %19 to void (%"class.blink::ParkableStringResource8"*)***
  %47 = load void (%"class.blink::ParkableStringResource8"*)**, void (%"class.blink::ParkableStringResource8"*)*** %46, align 8
  %48 = getelementptr inbounds void (%"class.blink::ParkableStringResource8"*)*, void (%"class.blink::ParkableStringResource8"*)** %47, i64 1
  %49 = load void (%"class.blink::ParkableStringResource8"*)*, void (%"class.blink::ParkableStringResource8"*)** %48, align 8
  call void %49(%"class.blink::ParkableStringResource8"* nonnull %21) #10
  br label %50

50:                                               ; preds = %45, %44
  %51 = ptrtoint %"class.v8::Isolate"* %1 to i64
  %52 = add i64 %51, 200
  %53 = inttoptr i64 %52 to %"class.v8::String"*
  br label %88

54:                                               ; preds = %17
  %55 = bitcast i8* %19 to %"class.blink::ParkableStringResource16"*
  %56 = bitcast i8* %19 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink18StringResourceBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  %57 = getelementptr inbounds i8, i8* %19, i64 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %57, i8 0, i64 16, i1 false) #10
  %58 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %13, align 8
  %59 = getelementptr inbounds i8, i8* %19, i64 24
  %60 = bitcast i8* %59 to %"class.blink::ParkableStringImpl"**
  store %"class.blink::ParkableStringImpl"* %58, %"class.blink::ParkableStringImpl"** %60, align 8
  %61 = icmp eq %"class.blink::ParkableStringImpl"* %58, null
  br i1 %61, label %64, label %62

62:                                               ; preds = %54
  %63 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %58, i64 0, i32 0, i32 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %63) #10
  br label %64

64:                                               ; preds = %62, %54
  %65 = call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #10
  %66 = call i32 @_ZNK5blink14ParkableString21CharactersSizeInBytesEv(%"class.blink::ParkableString"* nonnull %5) #10
  %67 = zext i32 %66 to i64
  %68 = call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %65, i64 %67) #10
  %69 = getelementptr inbounds i8, i8* %19, i64 32
  %70 = bitcast i8* %69 to i32 (...)***
  %71 = getelementptr inbounds i8, i8* %19, i64 40
  %72 = bitcast i8* %71 to i16**
  store i16* null, i16** %72, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*], [10 x i8*] }, { [9 x i8*], [10 x i8*] }* @_ZTVN5blink24ParkableStringResource16E, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %56, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [9 x i8*], [10 x i8*] }, { [9 x i8*], [10 x i8*] }* @_ZTVN5blink24ParkableStringResource16E, i64 0, inrange i32 1, i64 2) to i32 (...)**), i32 (...)*** %70, align 8
  %73 = icmp eq i8* %19, null
  %74 = bitcast i8* %69 to %"class.v8::String::ExternalStringResource"*
  %75 = select i1 %73, %"class.v8::String::ExternalStringResource"* null, %"class.v8::String::ExternalStringResource"* %74
  %76 = call %"class.v8::String"* @_ZN2v86String18NewExternalTwoByteEPNS_7IsolateEPNS0_22ExternalStringResourceE(%"class.v8::Isolate"* %1, %"class.v8::String::ExternalStringResource"* %75) #10
  %77 = icmp eq %"class.v8::String"* %76, null
  br i1 %77, label %78, label %88

78:                                               ; preds = %64
  br i1 %73, label %84, label %79

79:                                               ; preds = %78
  %80 = bitcast i8* %19 to void (%"class.blink::ParkableStringResource16"*)***
  %81 = load void (%"class.blink::ParkableStringResource16"*)**, void (%"class.blink::ParkableStringResource16"*)*** %80, align 8
  %82 = getelementptr inbounds void (%"class.blink::ParkableStringResource16"*)*, void (%"class.blink::ParkableStringResource16"*)** %81, i64 1
  %83 = load void (%"class.blink::ParkableStringResource16"*)*, void (%"class.blink::ParkableStringResource16"*)** %82, align 8
  call void %83(%"class.blink::ParkableStringResource16"* nonnull %55) #10
  br label %84

84:                                               ; preds = %79, %78
  %85 = ptrtoint %"class.v8::Isolate"* %1 to i64
  %86 = add i64 %85, 200
  %87 = inttoptr i64 %86 to %"class.v8::String"*
  br label %88

88:                                               ; preds = %30, %50, %64, %84
  %89 = phi %"class.v8::String"* [ %53, %50 ], [ %42, %30 ], [ %87, %84 ], [ %76, %64 ]
  call void @_ZN5blink14ParkableStringD1Ev(%"class.blink::ParkableString"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #10
  %90 = bitcast %"class.v8::Global"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #10
  %91 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %6, i64 0, i32 0, i32 0
  store %"class.v8::String"* inttoptr (i64 -6148914691236517206 to %"class.v8::String"*), %"class.v8::String"** %91, align 8
  %92 = icmp eq %"class.v8::String"* %89, null
  br i1 %92, label %98, label %93

93:                                               ; preds = %88
  %94 = bitcast %"class.v8::String"* %89 to i64*
  %95 = bitcast %"class.v8::Isolate"* %1 to %"class.v8::internal::Isolate"*
  %96 = call i64* @_ZN2v82V818GlobalizeReferenceEPNS_8internal7IsolateEPm(%"class.v8::internal::Isolate"* %95, i64* nonnull %94) #10
  %97 = bitcast i64* %96 to %"class.v8::String"*
  br label %98

98:                                               ; preds = %88, %93
  %99 = phi %"class.v8::String"* [ %97, %93 ], [ null, %88 ]
  store %"class.v8::String"* %99, %"class.v8::String"** %91, align 8
  %100 = bitcast %"class.blink::ParkableStringImpl"** %4 to %"class.base::RefCounted.269"**
  %101 = load %"class.base::RefCounted.269"*, %"class.base::RefCounted.269"** %100, align 8
  %102 = getelementptr inbounds %"class.base::RefCounted.269", %"class.base::RefCounted.269"* %101, i64 0, i32 0
  call void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"* %102) #10
  %103 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 2
  %104 = ptrtoint %"class.v8::String"* %99 to i64
  %105 = bitcast %"class.v8::Global"* %8 to i64*
  store i64 %104, i64* %105, align 8
  %106 = icmp eq %"class.v8::String"* %99, null
  br i1 %106, label %110, label %107

107:                                              ; preds = %98
  %108 = bitcast %"class.v8::Global"* %6 to i64**
  %109 = bitcast %"class.v8::Global"* %8 to i64**
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %108, i64** nonnull %109) #10
  store %"class.v8::String"* null, %"class.v8::String"** %91, align 8
  br label %110

110:                                              ; preds = %98, %107
  call void @_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE9SetUniqueERKS3_PNS_6GlobalIS4_EE(%"class.v8::Global"* nonnull sret %7, %"class.v8::GlobalValueMap.27"* %103, %"class.blink::ParkableStringImpl"** nonnull dereferenceable(8) %4, %"class.v8::Global"* nonnull %8) #10
  %111 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %7, i64 0, i32 0, i32 0
  %112 = load %"class.v8::String"*, %"class.v8::String"** %111, align 8
  %113 = icmp eq %"class.v8::String"* %112, null
  br i1 %113, label %116, label %114

114:                                              ; preds = %110
  %115 = bitcast %"class.v8::String"* %112 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %115) #10
  store %"class.v8::String"* null, %"class.v8::String"** %111, align 8
  br label %116

116:                                              ; preds = %110, %114
  %117 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %8, i64 0, i32 0, i32 0
  %118 = load %"class.v8::String"*, %"class.v8::String"** %117, align 8
  %119 = icmp eq %"class.v8::String"* %118, null
  br i1 %119, label %122, label %120

120:                                              ; preds = %116
  %121 = bitcast %"class.v8::String"* %118 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %121) #10
  store %"class.v8::String"* null, %"class.v8::String"** %117, align 8
  br label %122

122:                                              ; preds = %116, %120
  %123 = load %"class.v8::String"*, %"class.v8::String"** %91, align 8
  %124 = icmp eq %"class.v8::String"* %123, null
  br i1 %124, label %127, label %125

125:                                              ; preds = %122
  %126 = bitcast %"class.v8::String"* %123 to i64*
  call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %126) #10
  store %"class.v8::String"* null, %"class.v8::String"** %91, align 8
  br label %127

127:                                              ; preds = %122, %125
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #10
  ret %"class.v8::String"* %89
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink11StringCache28SetReturnValueFromStringSlowEN2v811ReturnValueINS1_5ValueEEEPN3WTF10StringImplE(%"class.blink::StringCache"*, i64*, %"class.WTF::StringImpl"*) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.absl::optional", align 8
  %5 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #10
  %6 = bitcast %"class.absl::optional"* %4 to i64*
  store i64 -6148914691236517206, i64* %6, align 8
  store i8 0, i8* %5, align 8
  %7 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1
  %8 = bitcast %union.anon* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 48, i1 false) #10
  %9 = load i8, i8* @_ZN5blink26RuntimeEnabledFeaturesBase36is_blink_runtime_call_stats_enabled_E, align 1, !range !12
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %28, label %11, !prof !2

11:                                               ; preds = %3
  %12 = getelementptr inbounds i64, i64* %1, i64 -2
  %13 = bitcast i64* %12 to %"class.v8::Isolate"**
  %14 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %13, align 8
  %15 = tail call %"class.blink::RuntimeCallStats"* @_ZN5blink16RuntimeCallStats4FromEPN2v87IsolateE(%"class.v8::Isolate"* %14) #10
  %16 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %15, i64 0, i32 3
  %17 = bitcast %"class.base::TickClock"** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store %"class.blink::RuntimeCallStats"* %15, %"class.blink::RuntimeCallStats"** %19, align 8
  %20 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %21 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 2, i32 0, i32 0
  %22 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 4
  %23 = bitcast i64* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 16, i1 false) #10
  %24 = bitcast %"class.base::TickClock"** %22 to i64*
  store i64 %18, i64* %24, align 8
  %25 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %15, i64 0, i32 2, i64 6
  %26 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %15, i64 0, i32 0
  %27 = load %"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallTimer"** %26, align 8
  call void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"* %20, %"class.blink::RuntimeCallCounter"* %25, %"class.blink::RuntimeCallTimer"* %27) #10
  store %"class.blink::RuntimeCallTimer"* %20, %"class.blink::RuntimeCallTimer"** %26, align 8
  store i8 1, i8* %5, align 8
  br label %28

28:                                               ; preds = %3, %11
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %28
  %33 = getelementptr inbounds i64, i64* %1, i64 -2
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 200
  %36 = inttoptr i64 %35 to i64*
  br label %140

37:                                               ; preds = %28
  %38 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %39 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %38, align 8, !noalias !23
  %40 = icmp eq %"struct.WTF::KeyValuePair"* %39, null
  br i1 %40, label %130, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %43 = load i32, i32* %42, align 8, !noalias !23
  %44 = add i32 %43, -1
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4, !noalias !23
  %48 = lshr i32 %47, 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %41
  %51 = call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %2) #10, !noalias !23
  br label %52

52:                                               ; preds = %50, %41
  %53 = phi i32 [ %51, %50 ], [ %48, %41 ]
  %54 = and i32 %53, %44
  %55 = zext i32 %54 to i64
  %56 = xor i32 %53, -1
  %57 = lshr i32 %53, 23
  %58 = add i32 %57, %56
  %59 = shl i32 %58, 12
  %60 = xor i32 %59, %58
  %61 = lshr i32 %60, 7
  %62 = xor i32 %61, %60
  %63 = shl i32 %62, 2
  %64 = xor i32 %63, %62
  %65 = lshr i32 %64, 20
  %66 = xor i32 %65, %64
  %67 = or i32 %66, 1
  %68 = zext i32 %67 to i64
  br label %69

69:                                               ; preds = %78, %52
  %70 = phi i64 [ 0, %52 ], [ %80, %78 ]
  %71 = phi i64 [ %55, %52 ], [ %82, %78 ]
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %39, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 0, i32 0
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %73, align 8, !noalias !23
  %75 = ptrtoint %"class.WTF::StringImpl"* %74 to i64
  switch i64 %75, label %76 [
    i64 0, label %130
    i64 -1, label %78
  ]

76:                                               ; preds = %69
  %77 = call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %74, %"class.WTF::StringImpl"* %2) #10, !noalias !23
  br i1 %77, label %83, label %78

78:                                               ; preds = %76, %69
  %79 = icmp eq i64 %70, 0
  %80 = select i1 %79, i64 %68, i64 %70
  %81 = add i64 %80, %71
  %82 = and i64 %81, %45
  br label %69

83:                                               ; preds = %76
  %84 = icmp eq %"struct.WTF::KeyValuePair"* %72, null
  br i1 %84, label %130, label %85

85:                                               ; preds = %83
  %86 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %39, i64 %71, i32 1
  %87 = load i64, i64* %86, align 8, !noalias !23
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %130, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 3
  %91 = icmp eq %"class.WTF::StringImpl"* %2, null
  br i1 %91, label %108, label %92

92:                                               ; preds = %89
  %93 = load atomic i32, i32* %46 monotonic, align 4
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %108

96:                                               ; preds = %92
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %2, i64 0, i32 0
  %98 = load i32, i32* %97, align 4
  %99 = zext i32 %98 to i33
  %100 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %99, i33 1) #10
  %101 = extractvalue { i33, i1 } %100, 1
  %102 = extractvalue { i33, i1 } %100, 0
  %103 = icmp slt i33 %102, 0
  %104 = or i1 %101, %103
  br i1 %104, label %105, label %106, !prof !16

105:                                              ; preds = %96
  call void @llvm.trap() #10
  unreachable

106:                                              ; preds = %96
  %107 = trunc i33 %102 to i32
  store i32 %107, i32* %97, align 4
  br label %108

108:                                              ; preds = %106, %92, %89
  %109 = ptrtoint %"class.WTF::StringImpl"* %2 to i64
  %110 = bitcast %class.scoped_refptr* %90 to i64*
  %111 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %90, i64 0, i32 0
  %112 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %111, align 8
  store i64 %109, i64* %110, align 8
  %113 = icmp eq %"class.WTF::StringImpl"* %112, null
  br i1 %113, label %127, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load atomic i32, i32* %115 monotonic, align 4
  %117 = and i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %112, i64 0, i32 0
  %120 = load i32, i32* %119, align 4
  br i1 %118, label %121, label %123

121:                                              ; preds = %114
  %122 = add i32 %120, -1
  store i32 %122, i32* %119, align 4
  br label %123

123:                                              ; preds = %121, %114
  %124 = phi i32 [ %122, %121 ], [ %120, %114 ]
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %127

126:                                              ; preds = %123
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %112) #10
  br label %127

127:                                              ; preds = %108, %123, %126
  %128 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %0, i64 0, i32 1, i32 0
  store i64 %87, i64* %128, align 8
  %129 = inttoptr i64 %87 to i64*
  br label %140

130:                                              ; preds = %69, %37, %83, %85
  %131 = getelementptr inbounds i64, i64* %1, i64 -2
  %132 = bitcast i64* %131 to %"class.v8::Isolate"**
  %133 = load %"class.v8::Isolate"*, %"class.v8::Isolate"** %132, align 8
  %134 = call %"class.v8::String"* @_ZN5blink11StringCache30CreateStringAndInsertIntoCacheEPN2v87IsolateEPN3WTF10StringImplE(%"class.blink::StringCache"* %0, %"class.v8::Isolate"* %133, %"class.WTF::StringImpl"* %2)
  %135 = icmp eq %"class.v8::String"* %134, null
  br i1 %135, label %136, label %138, !prof !16

136:                                              ; preds = %130
  %137 = getelementptr inbounds i64, i64* %1, i64 -1
  br label %140

138:                                              ; preds = %130
  %139 = bitcast %"class.v8::String"* %134 to i64*
  br label %140

140:                                              ; preds = %127, %136, %138, %32
  %141 = phi i64* [ %129, %127 ], [ %137, %136 ], [ %139, %138 ], [ %36, %32 ]
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %1, align 8
  %143 = load i8, i8* %5, align 8, !range !12
  %144 = icmp eq i8 %143, 0
  br i1 %144, label %151, label %145

145:                                              ; preds = %140
  %146 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %147 = load %"class.blink::RuntimeCallStats"*, %"class.blink::RuntimeCallStats"** %146, align 8
  %148 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %4, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1
  %149 = call %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"* %148) #10
  %150 = getelementptr inbounds %"class.blink::RuntimeCallStats", %"class.blink::RuntimeCallStats"* %147, i64 0, i32 0
  store %"class.blink::RuntimeCallTimer"* %149, %"class.blink::RuntimeCallTimer"** %150, align 8
  store i8 0, i8* %5, align 8
  br label %151

151:                                              ; preds = %140, %145
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind
declare void @_ZN5blink14ParkableStringD1Ev(%"class.blink::ParkableString"*) unnamed_addr #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare %"class.blink::RuntimeCallTimer"* @_ZN5blink16RuntimeCallTimer4StopEv(%"class.blink::RuntimeCallTimer"*) local_unnamed_addr #4

declare %"class.v8::String"* @_ZN2v86String18NewExternalOneByteEPNS_7IsolateEPNS0_29ExternalOneByteStringResourceE(%"class.v8::Isolate"*, %"class.v8::String::ExternalOneByteStringResource"*) local_unnamed_addr #4

declare %"class.v8::String"* @_ZN2v86String18NewExternalTwoByteEPNS_7IsolateEPNS0_22ExternalStringResourceE(%"class.v8::Isolate"*, %"class.v8::String::ExternalStringResource"*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink15StringResource8D0Ev(%"class.blink::StringResource8"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %2) #10
  %3 = bitcast %"class.blink::StringResource8"* %0 to i8*
  tail call void @free(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink15StringResource86lengthEv(%"class.blink::StringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK5blink15StringResource84dataEv(%"class.blink::StringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  %5 = bitcast %"class.WTF::StringImpl"* %4 to i8*
  ret i8* %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink15StringResource8D1Ev(%"class.blink::StringResource8"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink15StringResource8D0Ev(%"class.blink::StringResource8"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  %4 = bitcast %"class.WTF::AtomicString"* %2 to i8*
  tail call void @free(i8* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK2v86String26ExternalStringResourceBase11IsCacheableEv(%"class.v8::String::ExternalStringResourceBase"*) unnamed_addr #1 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v86String26ExternalStringResourceBase7DisposeEv(%"class.v8::String::ExternalStringResourceBase"*) unnamed_addr #1 comdat align 2 {
  %2 = icmp eq %"class.v8::String::ExternalStringResourceBase"* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %"class.v8::String::ExternalStringResourceBase"* %0 to void (%"class.v8::String::ExternalStringResourceBase"*)***
  %5 = load void (%"class.v8::String::ExternalStringResourceBase"*)**, void (%"class.v8::String::ExternalStringResourceBase"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.v8::String::ExternalStringResourceBase"*)*, void (%"class.v8::String::ExternalStringResourceBase"*)** %5, i64 1
  %7 = load void (%"class.v8::String::ExternalStringResourceBase"*)*, void (%"class.v8::String::ExternalStringResourceBase"*)** %6, align 8
  tail call void %7(%"class.v8::String::ExternalStringResourceBase"* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK2v86String26ExternalStringResourceBase4LockEv(%"class.v8::String::ExternalStringResourceBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK2v86String26ExternalStringResourceBase6UnlockEv(%"class.v8::String::ExternalStringResourceBase"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZThn32_NK5blink15StringResource84dataEv(%"class.blink::StringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 1, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %6 = bitcast %"class.WTF::StringImpl"* %5 to i8*
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZThn32_NK5blink15StringResource86lengthEv(%"class.blink::StringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8", %"class.blink::StringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 1, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  ret i64 %7
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink19StringResource8BaseD2Ev(%"class.blink::StringResource8Base"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource8Base", %"class.blink::StringResource8Base"* %0, i64 0, i32 0
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %2) #10
  ret void
}

declare %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() local_unnamed_addr #4

declare i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"*, i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResourceBase", %"class.blink::StringResourceBase"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5blink18StringResourceBaseE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.blink::StringResourceBase", %"class.blink::StringResourceBase"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load atomic i32, i32* %10 monotonic, align 4
  %12 = and i32 %11, 1
  %13 = icmp eq i32 %12, 0
  %14 = select i1 %13, i64 2, i64 1
  %15 = mul nuw nsw i64 %14, %9
  br label %16

16:                                               ; preds = %1, %6
  %17 = phi i64 [ %15, %6 ], [ 0, %1 ]
  %18 = getelementptr inbounds %"class.blink::StringResourceBase", %"class.blink::StringResourceBase"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %4, %19
  %21 = icmp eq %"class.WTF::StringImpl"* %19, null
  %22 = or i1 %20, %21
  br i1 %22, label %34, label %23

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %25 = load i32, i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 1
  %30 = icmp eq i32 %29, 0
  %31 = select i1 %30, i64 2, i64 1
  %32 = mul nuw nsw i64 %31, %26
  %33 = add nuw nsw i64 %32, %17
  br label %34

34:                                               ; preds = %16, %23
  %35 = phi i64 [ %33, %23 ], [ %17, %16 ]
  %36 = tail call %"class.v8::Isolate"* @_ZN2v87Isolate10GetCurrentEv() #10
  %37 = sub nsw i64 0, %35
  %38 = tail call i64 @_ZN2v87Isolate37AdjustAmountOfExternalAllocatedMemoryEl(%"class.v8::Isolate"* %36, i64 %37) #10
  %39 = getelementptr inbounds %"class.blink::StringResourceBase", %"class.blink::StringResourceBase"* %0, i64 0, i32 3
  tail call void @_ZN5blink14ParkableStringD1Ev(%"class.blink::ParkableString"* %39) #10
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %41 = icmp eq %"class.WTF::StringImpl"* %40, null
  br i1 %41, label %55, label %42

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = and i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 0
  %48 = load i32, i32* %47, align 4
  br i1 %46, label %49, label %51

49:                                               ; preds = %42
  %50 = add i32 %48, -1
  store i32 %50, i32* %47, align 4
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ %50, %49 ], [ %48, %42 ]
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %40) #10
  br label %55

55:                                               ; preds = %34, %51, %54
  %56 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %57 = icmp eq %"class.WTF::StringImpl"* %56, null
  br i1 %57, label %71, label %58

58:                                               ; preds = %55
  %59 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %60 = load atomic i32, i32* %59 monotonic, align 4
  %61 = and i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %56, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  br i1 %62, label %65, label %67

65:                                               ; preds = %58
  %66 = add i32 %64, -1
  store i32 %66, i32* %63, align 4
  br label %67

67:                                               ; preds = %65, %58
  %68 = phi i32 [ %66, %65 ], [ %64, %58 ]
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %56) #10
  br label %71

71:                                               ; preds = %55, %67, %70
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink18StringResourceBaseD0Ev(%"class.blink::StringResourceBase"*) unnamed_addr #1 comdat align 2 {
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %0) #10
  %2 = bitcast %"class.blink::StringResourceBase"* %0 to i8*
  tail call void @free(i8* %2) #10
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16StringResource16D0Ev(%"class.blink::StringResource16"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %2) #10
  %3 = bitcast %"class.blink::StringResource16"* %0 to i8*
  tail call void @free(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink16StringResource166lengthEv(%"class.blink::StringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  ret i64 %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNK5blink16StringResource164dataEv(%"class.blink::StringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  %5 = bitcast %"class.WTF::StringImpl"* %4 to i16*
  ret i16* %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink16StringResource16D1Ev(%"class.blink::StringResource16"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink16StringResource16D0Ev(%"class.blink::StringResource16"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  %4 = bitcast %"class.WTF::AtomicString"* %2 to i8*
  tail call void @free(i8* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZThn32_NK5blink16StringResource164dataEv(%"class.blink::StringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 1, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %6 = bitcast %"class.WTF::StringImpl"* %5 to i16*
  ret i16* %6
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZThn32_NK5blink16StringResource166lengthEv(%"class.blink::StringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16", %"class.blink::StringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 1, i32 0, i32 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  ret i64 %7
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink20StringResource16BaseD2Ev(%"class.blink::StringResource16Base"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::StringResource16Base", %"class.blink::StringResource16Base"* %0, i64 0, i32 0
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %2) #10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #9

declare zeroext i1 @_ZNK5blink14ParkableString6Is8BitEv(%"class.blink::ParkableString"*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink23ParkableStringResource8D0Ev(%"class.blink::ParkableStringResource8"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %2) #10
  %3 = bitcast %"class.blink::ParkableStringResource8"* %0 to i8*
  tail call void @free(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink23ParkableStringResource811IsCacheableEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %4 = icmp eq %"class.blink::ParkableStringImpl"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %6, align 8
  %8 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %7, null
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink23ParkableStringResource84LockEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 0, i32 0, i32 0, i32 3
  tail call void @_ZNK5blink14ParkableString4LockEv(%"class.blink::ParkableString"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink23ParkableStringResource86UnlockEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 0, i32 0, i32 0, i32 3
  tail call void @_ZNK5blink14ParkableString6UnlockEv(%"class.blink::ParkableString"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink23ParkableStringResource86lengthEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %4 = icmp eq %"class.blink::ParkableStringImpl"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %6, align 8
  %8 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %7, null
  br i1 %8, label %9, label %16

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  br label %19

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"struct.blink::ParkableStringImpl::ParkableMetadata", %"struct.blink::ParkableStringImpl::ParkableMetadata"* %7, i64 0, i32 8
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %1, %9, %13, %16
  %20 = phi i32 [ 0, %1 ], [ %18, %16 ], [ %15, %13 ], [ 0, %9 ]
  %21 = zext i32 %20 to i64
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK5blink23ParkableStringResource84dataEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 0, i32 0, i32 0, i32 3
  %3 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink14ParkableString8ToStringEv(%"class.blink::ParkableString"* %2) #10
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  %8 = bitcast %"class.WTF::StringImpl"* %7 to i8*
  %9 = select i1 %6, i8* null, i8* %8
  ret i8* %9
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink23ParkableStringResource8D1Ev(%"class.blink::ParkableStringResource8"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink23ParkableStringResource8D0Ev(%"class.blink::ParkableStringResource8"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  %4 = bitcast %"class.WTF::AtomicString"* %2 to i8*
  tail call void @free(i8* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZThn32_NK5blink23ParkableStringResource811IsCacheableEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableStringImpl"**
  %5 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %4, align 8
  %6 = icmp eq %"class.blink::ParkableStringImpl"* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %8, align 8
  %10 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, null
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi i1 [ true, %1 ], [ %10, %7 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_NK5blink23ParkableStringResource84LockEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableString"*
  tail call void @_ZNK5blink14ParkableString4LockEv(%"class.blink::ParkableString"* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_NK5blink23ParkableStringResource86UnlockEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableString"*
  tail call void @_ZNK5blink14ParkableString6UnlockEv(%"class.blink::ParkableString"* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZThn32_NK5blink23ParkableStringResource84dataEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableString"*
  %5 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink14ParkableString8ToStringEv(%"class.blink::ParkableString"* %4) #10
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  %11 = select i1 %8, i8* null, i8* %10
  ret i8* %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZThn32_NK5blink23ParkableStringResource86lengthEv(%"class.blink::ParkableStringResource8"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource8", %"class.blink::ParkableStringResource8"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableStringImpl"**
  %5 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %4, align 8
  %6 = icmp eq %"class.blink::ParkableStringImpl"* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %8, align 8
  %10 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, null
  br i1 %10, label %11, label %18

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  br label %21

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"struct.blink::ParkableStringImpl::ParkableMetadata", %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, i64 0, i32 8
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %1, %11, %15, %18
  %22 = phi i32 [ 0, %1 ], [ %20, %18 ], [ %17, %15 ], [ 0, %11 ]
  %23 = zext i32 %22 to i64
  ret i64 %23
}

declare i32 @_ZNK5blink14ParkableString21CharactersSizeInBytesEv(%"class.blink::ParkableString"*) local_unnamed_addr #4

declare void @_ZNK5blink14ParkableString4LockEv(%"class.blink::ParkableString"*) local_unnamed_addr #4

declare void @_ZNK5blink14ParkableString6UnlockEv(%"class.blink::ParkableString"*) local_unnamed_addr #4

declare dereferenceable(8) %"class.WTF::String"* @_ZNK5blink14ParkableString8ToStringEv(%"class.blink::ParkableString"*) local_unnamed_addr #4

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink24ParkableStringResource16D0Ev(%"class.blink::ParkableStringResource16"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 0, i32 0, i32 0
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %2) #10
  %3 = bitcast %"class.blink::ParkableStringResource16"* %0 to i8*
  tail call void @free(i8* %3) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink24ParkableStringResource1611IsCacheableEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %4 = icmp eq %"class.blink::ParkableStringImpl"* %3, null
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %6, align 8
  %8 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %7, null
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink24ParkableStringResource164LockEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 0, i32 0, i32 0, i32 3
  tail call void @_ZNK5blink14ParkableString4LockEv(%"class.blink::ParkableString"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK5blink24ParkableStringResource166UnlockEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 0, i32 0, i32 0, i32 3
  tail call void @_ZNK5blink14ParkableString6UnlockEv(%"class.blink::ParkableString"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK5blink24ParkableStringResource166lengthEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %3 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %4 = icmp eq %"class.blink::ParkableStringImpl"* %3, null
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %6, align 8
  %8 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %7, null
  br i1 %8, label %9, label %16

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 1, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %11, null
  br i1 %12, label %19, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  br label %19

16:                                               ; preds = %5
  %17 = getelementptr inbounds %"struct.blink::ParkableStringImpl::ParkableMetadata", %"struct.blink::ParkableStringImpl::ParkableMetadata"* %7, i64 0, i32 8
  %18 = load i32, i32* %17, align 4
  br label %19

19:                                               ; preds = %1, %9, %13, %16
  %20 = phi i32 [ 0, %1 ], [ %18, %16 ], [ %15, %13 ], [ 0, %9 ]
  %21 = zext i32 %20 to i64
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZNK5blink24ParkableStringResource164dataEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 0, i32 0, i32 0, i32 3
  %3 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink14ParkableString8ToStringEv(%"class.blink::ParkableString"* %2) #10
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  %7 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  %8 = bitcast %"class.WTF::StringImpl"* %7 to i16*
  %9 = select i1 %6, i16* null, i16* %8
  ret i16* %9
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink24ParkableStringResource16D1Ev(%"class.blink::ParkableStringResource16"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_N5blink24ParkableStringResource16D0Ev(%"class.blink::ParkableStringResource16"*) unnamed_addr #7 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = bitcast %"class.WTF::AtomicString"* %2 to %"class.blink::StringResourceBase"*
  tail call void @_ZN5blink18StringResourceBaseD2Ev(%"class.blink::StringResourceBase"* %3) #10
  %4 = bitcast %"class.WTF::AtomicString"* %2 to i8*
  tail call void @free(i8* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZThn32_NK5blink24ParkableStringResource1611IsCacheableEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableStringImpl"**
  %5 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %4, align 8
  %6 = icmp eq %"class.blink::ParkableStringImpl"* %5, null
  br i1 %6, label %11, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %8, align 8
  %10 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, null
  br label %11

11:                                               ; preds = %1, %7
  %12 = phi i1 [ true, %1 ], [ %10, %7 ]
  ret i1 %12
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_NK5blink24ParkableStringResource164LockEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableString"*
  tail call void @_ZNK5blink14ParkableString4LockEv(%"class.blink::ParkableString"* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZThn32_NK5blink24ParkableStringResource166UnlockEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableString"*
  tail call void @_ZNK5blink14ParkableString6UnlockEv(%"class.blink::ParkableString"* %4) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i16* @_ZThn32_NK5blink24ParkableStringResource164dataEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableString"*
  %5 = tail call dereferenceable(8) %"class.WTF::String"* @_ZNK5blink14ParkableString8ToStringEv(%"class.blink::ParkableString"* %4) #10
  %6 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  %10 = bitcast %"class.WTF::StringImpl"* %9 to i16*
  %11 = select i1 %8, i16* null, i16* %10
  ret i16* %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZThn32_NK5blink24ParkableStringResource166lengthEv(%"class.blink::ParkableStringResource16"*) unnamed_addr #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::ParkableStringResource16", %"class.blink::ParkableStringResource16"* %0, i64 -1, i32 0, i32 0, i32 2
  %3 = getelementptr inbounds %"class.WTF::AtomicString", %"class.WTF::AtomicString"* %2, i64 3
  %4 = bitcast %"class.WTF::AtomicString"* %3 to %"class.blink::ParkableStringImpl"**
  %5 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %4, align 8
  %6 = icmp eq %"class.blink::ParkableStringImpl"* %5, null
  br i1 %6, label %21, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %"struct.blink::ParkableStringImpl::ParkableMetadata"*, %"struct.blink::ParkableStringImpl::ParkableMetadata"** %8, align 8
  %10 = icmp eq %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, null
  br i1 %10, label %11, label %18

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %5, i64 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  br i1 %14, label %21, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  br label %21

18:                                               ; preds = %7
  %19 = getelementptr inbounds %"struct.blink::ParkableStringImpl::ParkableMetadata", %"struct.blink::ParkableStringImpl::ParkableMetadata"* %9, i64 0, i32 8
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %1, %11, %15, %18
  %22 = phi i32 [ 0, %1 ], [ %20, %18 ], [ %17, %15 ], [ 0, %11 ]
  %23 = zext i32 %22 to i64
  ret i64 %23
}

declare i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink18ParkableStringImplD1Ev(%"class.blink::ParkableStringImpl"*) unnamed_addr #5

declare void @_ZN2v811HandleScopeC1EPNS_7IsolateE(%"class.v8::HandleScope"*, %"class.v8::Isolate"*) unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN2v811HandleScopeD1Ev(%"class.v8::HandleScope"*) unnamed_addr #5

declare i8* @_ZN2v82V89ClearWeakEPm(i64*) local_unnamed_addr #4

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #4

declare void @_ZN5blink16RuntimeCallTimer5StartEPNS_18RuntimeCallCounterEPS0_(%"class.blink::RuntimeCallTimer"*, %"class.blink::RuntimeCallCounter"*, %"class.blink::RuntimeCallTimer"*) local_unnamed_addr #4

declare i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

declare zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"*, %"class.WTF::StringImpl"*) local_unnamed_addr #4

declare i64* @_ZN2v82V818GlobalizeReferenceEPNS_8internal7IsolateEPm(%"class.v8::internal::Isolate"*, i64*) local_unnamed_addr #4

declare void @_ZN2v82V813DisposeGlobalEPm(i64*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE9SetUniqueERKS3_PNS_6GlobalIS4_EE(%"class.v8::Global"* noalias sret, %"class.v8::GlobalValueMap"*, %"class.WTF::StringImpl"** dereferenceable(8), %"class.v8::Global"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.WTF::StringImpl"*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.v8::Global", align 8
  %8 = alloca %"class.v8::Global", align 8
  %9 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %3, i64 0, i32 0, i32 0
  %10 = load %"class.v8::String"*, %"class.v8::String"** %9, align 8
  %11 = icmp eq %"class.v8::String"* %10, null
  %12 = bitcast %"class.v8::String"* %10 to i64*
  br i1 %11, label %20, label %13

13:                                               ; preds = %4
  %14 = bitcast %"class.v8::GlobalValueMap"* %1 to %"class.v8::internal::Isolate"**
  %15 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %14, align 8
  %16 = load i64, i64* %12, align 8
  %17 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %15, i64 %16) #10
  %18 = bitcast %"class.v8::Global"* %3 to i64**
  %19 = load i64*, i64** %18, align 8
  br label %20

20:                                               ; preds = %4, %13
  %21 = phi i64* [ %19, %13 ], [ %12, %4 ]
  %22 = bitcast %"class.WTF::StringImpl"** %2 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZN2v82V88MakeWeakEPmPvPFvRKNS_16WeakCallbackInfoIvEEENS_16WeakCallbackTypeE(i64* %21, i8* %23, void (%"class.v8::WeakCallbackInfo.305"*)* bitcast (void (%"class.v8::WeakCallbackInfo"*)* @_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE14OnWeakCallbackERKNS_16WeakCallbackInfoIS2_EE to void (%"class.v8::WeakCallbackInfo.305"*)*), i32 0) #10
  %24 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %25 = bitcast %"class.v8::Global"* %3 to i64*
  %26 = load i64, i64* %25, align 8
  store %"class.v8::String"* null, %"class.v8::String"** %9, align 8
  %27 = bitcast %"class.WTF::StringImpl"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28)
  store %"class.WTF::StringImpl"* %24, %"class.WTF::StringImpl"** %5, align 8
  store i64 %26, i64* %6, align 8
  %29 = getelementptr inbounds %"class.v8::GlobalValueMap", %"class.v8::GlobalValueMap"* %1, i64 0, i32 0, i32 1, i32 0
  %30 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %29, i64 0, i32 0
  %31 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %30, align 8
  %32 = icmp eq %"struct.WTF::KeyValuePair"* %31, null
  br i1 %32, label %82, label %33

33:                                               ; preds = %20
  %34 = getelementptr inbounds %"class.v8::GlobalValueMap", %"class.v8::GlobalValueMap"* %1, i64 0, i32 0, i32 1, i32 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = add i32 %35, -1
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = lshr i32 %39, 8
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %33
  %43 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %24) #10
  br label %44

44:                                               ; preds = %42, %33
  %45 = phi i32 [ %43, %42 ], [ %40, %33 ]
  %46 = and i32 %45, %36
  %47 = zext i32 %46 to i64
  %48 = xor i32 %45, -1
  %49 = lshr i32 %45, 23
  %50 = add i32 %49, %48
  %51 = shl i32 %50, 12
  %52 = xor i32 %51, %50
  %53 = lshr i32 %52, 7
  %54 = xor i32 %53, %52
  %55 = shl i32 %54, 2
  %56 = xor i32 %55, %54
  %57 = lshr i32 %56, 20
  %58 = xor i32 %57, %56
  %59 = or i32 %58, 1
  %60 = zext i32 %59 to i64
  br label %61

61:                                               ; preds = %70, %44
  %62 = phi i64 [ 0, %44 ], [ %72, %70 ]
  %63 = phi i64 [ %47, %44 ], [ %74, %70 ]
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %31, i64 %63
  %65 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %64, i64 0, i32 0
  %66 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %65, align 8
  %67 = ptrtoint %"class.WTF::StringImpl"* %66 to i64
  switch i64 %67, label %68 [
    i64 0, label %80
    i64 -1, label %70
  ]

68:                                               ; preds = %61
  %69 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %66, %"class.WTF::StringImpl"* %24) #10
  br i1 %69, label %75, label %70

70:                                               ; preds = %68, %61
  %71 = icmp eq i64 %62, 0
  %72 = select i1 %71, i64 %60, i64 %62
  %73 = add i64 %72, %63
  %74 = and i64 %73, %37
  br label %61

75:                                               ; preds = %68
  %76 = icmp eq %"struct.WTF::KeyValuePair"* %64, null
  br i1 %76, label %82, label %77

77:                                               ; preds = %75
  %78 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %31, i64 %63, i32 1
  %79 = load i64, i64* %78, align 8
  br label %82

80:                                               ; preds = %61
  %81 = ptrtoint %"class.WTF::StringImpl"* %66 to i64
  br label %82

82:                                               ; preds = %80, %20, %77, %75
  %83 = phi i64 [ %79, %77 ], [ 0, %75 ], [ 0, %20 ], [ %81, %80 ]
  %84 = call { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RmEENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable"* %29, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %5, i64* nonnull dereferenceable(8) %6) #10
  %85 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %84, 1
  %86 = and i8 %85, 1
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %92

88:                                               ; preds = %82
  %89 = extractvalue { %"struct.WTF::KeyValuePair"*, i8 } %84, 0
  %90 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %89, i64 0, i32 1
  %91 = load i64, i64* %6, align 8
  store i64 %91, i64* %90, align 8
  br label %92

92:                                               ; preds = %82, %88
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28)
  %93 = bitcast %"class.v8::Global"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #10
  %94 = bitcast %"class.v8::Global"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #10, !noalias !26
  %95 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %7, i64 0, i32 0, i32 0
  %96 = inttoptr i64 %83 to %"class.v8::String"*
  store %"class.v8::String"* %96, %"class.v8::String"** %95, align 8, !noalias !26
  %97 = icmp eq i64 %83, 0
  %98 = inttoptr i64 %83 to i64*
  br i1 %97, label %106, label %99

99:                                               ; preds = %92
  %100 = getelementptr inbounds %"class.v8::String", %"class.v8::String"* %96, i64 11, i32 0
  %101 = load i8, i8* %100, align 1, !noalias !26
  %102 = and i8 %101, 7
  %103 = icmp eq i8 %102, 2
  br i1 %103, label %104, label %109

104:                                              ; preds = %99
  %105 = call i8* @_ZN2v82V89ClearWeakEPm(i64* %98) #10
  br label %109

106:                                              ; preds = %92
  %107 = bitcast %"class.v8::Global"* %8 to i64*
  store i64 0, i64* %107, align 8, !alias.scope !29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10, !noalias !26
  %108 = bitcast %"class.v8::Global"* %0 to i64*
  store i64 0, i64* %108, align 8, !alias.scope !32
  br label %120

109:                                              ; preds = %99, %104
  %110 = bitcast %"class.v8::Global"* %8 to i64*
  store i64 %83, i64* %110, align 8, !alias.scope !29
  %111 = bitcast %"class.v8::Global"* %7 to i64**
  %112 = bitcast %"class.v8::Global"* %8 to i64**
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %111, i64** nonnull %112) #10
  %113 = load i64, i64* %110, align 8, !noalias !32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #10, !noalias !26
  %114 = bitcast %"class.v8::Global"* %0 to i64*
  store i64 %113, i64* %114, align 8, !alias.scope !32
  %115 = icmp eq i64 %113, 0
  br i1 %115, label %120, label %116

116:                                              ; preds = %109
  %117 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %8, i64 0, i32 0, i32 0
  %118 = bitcast %"class.v8::Global"* %8 to i64**
  %119 = bitcast %"class.v8::Global"* %0 to i64**
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %118, i64** %119) #10
  store %"class.v8::String"* null, %"class.v8::String"** %117, align 8, !noalias !32
  br label %120

120:                                              ; preds = %109, %106, %116
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE14OnWeakCallbackERKNS_16WeakCallbackInfoIS2_EE(%"class.v8::WeakCallbackInfo"* dereferenceable(40)) #1 comdat align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::WeakCallbackInfo", %"class.v8::WeakCallbackInfo"* %0, i64 0, i32 1
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 0, i32 0, i32 1
  %12 = tail call i64 @_ZN5blink22V8GlobalValueMapTraitsIPN3WTF10StringImplEN2v86StringELNS4_31PersistentContainerCallbackTypeE1EE6RemoveEPNS1_7HashMapIS3_mNS1_10StringHashENS1_10HashTraitsIS3_EENSA_ImEENS1_18PartitionAllocatorEEES3_(%"class.WTF::HashMap"* %11, %"class.WTF::StringImpl"* %10) #10
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %1
  %15 = inttoptr i64 %12 to i64*
  tail call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %15) #10
  br label %16

16:                                               ; preds = %1, %14
  %17 = load i64, i64* %2, align 8
  %18 = add i64 %17, 8
  %19 = inttoptr i64 %18 to %"class.blink::V8PerIsolateData"**
  %20 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %19, align 8
  %21 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %20, i64 0, i32 5, i32 0, i32 0, i32 0
  %22 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %21, align 8
  %23 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %22, i64 0, i32 3
  %24 = bitcast %class.scoped_refptr* %23 to i64*
  %25 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %23, i64 0, i32 0
  %26 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %25, align 8
  store i64 0, i64* %24, align 8
  %27 = icmp eq %"class.WTF::StringImpl"* %26, null
  br i1 %27, label %41, label %28

28:                                               ; preds = %16
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = load atomic i32, i32* %29 monotonic, align 4
  %31 = and i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %26, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  br i1 %32, label %35, label %37

35:                                               ; preds = %28
  %36 = add i32 %34, -1
  store i32 %36, i32* %33, align 4
  br label %37

37:                                               ; preds = %35, %28
  %38 = phi i32 [ %36, %35 ], [ %34, %28 ]
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %26) #10
  br label %41

41:                                               ; preds = %16, %37, %40
  %42 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %22, i64 0, i32 1, i32 0
  store i64 0, i64* %42, align 8
  %43 = getelementptr inbounds %"class.v8::WeakCallbackInfo", %"class.v8::WeakCallbackInfo"* %0, i64 0, i32 2
  %44 = load void (%"class.v8::WeakCallbackInfo"*)**, void (%"class.v8::WeakCallbackInfo"*)*** %43, align 8
  store void (%"class.v8::WeakCallbackInfo"*)* @_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE18SecondWeakCallbackERKNS_16WeakCallbackInfoIS2_EE, void (%"class.v8::WeakCallbackInfo"*)** %44, align 8
  ret void
}

declare void @_ZN2v82V88MakeWeakEPmPvPFvRKNS_16WeakCallbackInfoIvEEENS_16WeakCallbackTypeE(i64*, i8*, void (%"class.v8::WeakCallbackInfo.305"*)*, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE18SecondWeakCallbackERKNS_16WeakCallbackInfoIS2_EE(%"class.v8::WeakCallbackInfo"* dereferenceable(40)) #1 comdat align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 3
  %10 = bitcast %class.scoped_refptr* %9 to i64*
  %11 = getelementptr inbounds %class.scoped_refptr, %class.scoped_refptr* %9, i64 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  store i64 0, i64* %10, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %27, label %14

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  br i1 %18, label %21, label %23

21:                                               ; preds = %14
  %22 = add i32 %20, -1
  store i32 %22, i32* %19, align 4
  br label %23

23:                                               ; preds = %21, %14
  %24 = phi i32 [ %22, %21 ], [ %20, %14 ]
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %23
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %12) #10
  br label %27

27:                                               ; preds = %26, %23, %1
  %28 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 1, i32 0
  store i64 0, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::WeakCallbackInfo", %"class.v8::WeakCallbackInfo"* %0, i64 0, i32 1
  %30 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %29, align 8
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = and i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %30, i64 0, i32 0
  %36 = load i32, i32* %35, align 4
  br i1 %34, label %37, label %39

37:                                               ; preds = %27
  %38 = add i32 %36, -1
  store i32 %38, i32* %35, align 4
  br label %39

39:                                               ; preds = %37, %27
  %40 = phi i32 [ %38, %37 ], [ %36, %27 ]
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* %30) #10
  br label %43

43:                                               ; preds = %39, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink22V8GlobalValueMapTraitsIPN3WTF10StringImplEN2v86StringELNS4_31PersistentContainerCallbackTypeE1EE6RemoveEPNS1_7HashMapIS3_mNS1_10StringHashENS1_10HashTraitsIS3_EENSA_ImEENS1_18PartitionAllocatorEEES3_(%"class.WTF::HashMap"*, %"class.WTF::StringImpl"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.WTF::StringImpl"*, align 8
  store %"class.WTF::StringImpl"* %1, %"class.WTF::StringImpl"** %3, align 8
  %4 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0
  %5 = call { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable"* %4, %"class.WTF::StringImpl"** nonnull dereferenceable(8) %3) #10
  %6 = extractvalue { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } %5, 0
  %7 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %8, i64 %11
  %13 = icmp eq %"struct.WTF::KeyValuePair"* %6, %12
  br i1 %13, label %39, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* inttoptr (i64 -1 to %"class.WTF::StringImpl"*), %"class.WTF::StringImpl"** %17, align 8
  %18 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = add i32 %19, 1
  %21 = and i32 %20, 2147483647
  %22 = and i32 %19, -2147483648
  %23 = or i32 %21, %22
  store i32 %23, i32* %18, align 8
  %24 = getelementptr inbounds %"class.WTF::HashMap", %"class.WTF::HashMap"* %0, i64 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, -1
  store i32 %26, i32* %24, align 4
  %27 = mul i32 %26, 6
  %28 = load i32, i32* %9, align 8
  %29 = icmp ult i32 %27, %28
  %30 = icmp ugt i32 %28, 8
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %39

32:                                               ; preds = %14
  %33 = lshr i32 %28, 1
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 4
  %36 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPNS_10StringImplEmEEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 0, i64 %35, i1 false) #10
  %37 = bitcast i8* %36 to %"struct.WTF::KeyValuePair"*
  %38 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable"* %4, %"struct.WTF::KeyValuePair"* %37, i32 %33, %"struct.WTF::KeyValuePair"* null) #10
  br label %39

39:                                               ; preds = %2, %14, %32
  %40 = phi i64 [ 0, %2 ], [ %16, %14 ], [ %16, %32 ]
  ret i64 %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE4findERKS2_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair"* %4, null
  br i1 %5, label %52, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = add i32 %8, -1
  %10 = zext i32 %9 to i64
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 8
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %6
  %17 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %11) #10
  br label %18

18:                                               ; preds = %16, %6
  %19 = phi i32 [ %17, %16 ], [ %14, %6 ]
  %20 = and i32 %19, %9
  %21 = zext i32 %20 to i64
  %22 = xor i32 %19, -1
  %23 = lshr i32 %19, 23
  %24 = add i32 %23, %22
  %25 = shl i32 %24, 12
  %26 = xor i32 %25, %24
  %27 = lshr i32 %26, 7
  %28 = xor i32 %27, %26
  %29 = shl i32 %28, 2
  %30 = xor i32 %29, %28
  %31 = lshr i32 %30, 20
  %32 = xor i32 %31, %30
  %33 = or i32 %32, 1
  %34 = zext i32 %33 to i64
  br label %35

35:                                               ; preds = %45, %18
  %36 = phi i64 [ 0, %18 ], [ %47, %45 ]
  %37 = phi i64 [ %21, %18 ], [ %49, %45 ]
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %4, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = ptrtoint %"class.WTF::StringImpl"* %40 to i64
  switch i64 %41, label %42 [
    i64 0, label %52
    i64 -1, label %45
  ]

42:                                               ; preds = %35
  %43 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %44 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %40, %"class.WTF::StringImpl"* %43) #10
  br i1 %44, label %50, label %45

45:                                               ; preds = %42, %35
  %46 = icmp eq i64 %36, 0
  %47 = select i1 %46, i64 %34, i64 %36
  %48 = add i64 %47, %37
  %49 = and i64 %48, %10
  br label %35

50:                                               ; preds = %42
  %51 = icmp eq %"struct.WTF::KeyValuePair"* %38, null
  br i1 %51, label %52, label %58

52:                                               ; preds = %35, %50, %2
  %53 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %54 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %55 = load i32, i32* %54, align 8
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %53, i64 %56
  br label %63

58:                                               ; preds = %50
  %59 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %3, align 8
  %60 = load i32, i32* %7, align 8
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %59, i64 %61
  br label %63

63:                                               ; preds = %52, %58
  %64 = phi %"struct.WTF::KeyValuePair"* [ %38, %58 ], [ %57, %52 ]
  %65 = phi %"struct.WTF::KeyValuePair"* [ %62, %58 ], [ %57, %52 ]
  %66 = insertvalue { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } undef, %"struct.WTF::KeyValuePair"* %64, 0
  %67 = insertvalue { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } %66, %"struct.WTF::KeyValuePair"* %65, 1
  ret { %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"* } %67
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*, i32, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint %"struct.WTF::KeyValuePair"* %1 to i64
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  br i1 %8, label %10, label %13

10:                                               ; preds = %4
  %11 = bitcast %"class.WTF::HashTable"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  br label %20

13:                                               ; preds = %4
  %14 = add i32 %2, -1
  %15 = zext i32 %14 to i64
  %16 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %17 = ptrtoint %"struct.WTF::KeyValuePair"* %16 to i64
  br label %31

18:                                               ; preds = %96
  %19 = bitcast %"class.WTF::HashTable"* %0 to i64*
  br label %20

20:                                               ; preds = %10, %18
  %21 = phi i64* [ %11, %10 ], [ %19, %18 ]
  %22 = phi i64 [ %12, %10 ], [ %97, %18 ]
  %23 = phi %"struct.WTF::KeyValuePair"* [ null, %10 ], [ %100, %18 ]
  store atomic i64 %5, i64* %21 monotonic, align 8
  store i32 %2, i32* %6, align 8
  %24 = icmp eq i64 %22, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %20
  %26 = inttoptr i64 %22 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %26) #10
  br label %27

27:                                               ; preds = %20, %25
  %28 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = and i32 %29, -2147483648
  store i32 %30, i32* %28, align 8
  ret %"struct.WTF::KeyValuePair"* %23

31:                                               ; preds = %13, %96
  %32 = phi i64 [ %17, %13 ], [ %97, %96 ]
  %33 = phi i32 [ %7, %13 ], [ %98, %96 ]
  %34 = phi %"struct.WTF::KeyValuePair"* [ %16, %13 ], [ %99, %96 ]
  %35 = phi %"struct.WTF::KeyValuePair"* [ null, %13 ], [ %100, %96 ]
  %36 = phi i32 [ 0, %13 ], [ %101, %96 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %34, i64 %37
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %38, i64 0, i32 0
  %40 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %41 = ptrtoint %"class.WTF::StringImpl"* %40 to i64
  switch i64 %41, label %42 [
    i64 -1, label %96
    i64 0, label %96
  ]

42:                                               ; preds = %31
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %40, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = lshr i32 %44, 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %42
  %48 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* nonnull %40) #10
  br label %49

49:                                               ; preds = %47, %42
  %50 = phi i32 [ %48, %47 ], [ %45, %42 ]
  %51 = and i32 %50, %14
  %52 = zext i32 %51 to i64
  %53 = xor i32 %50, -1
  %54 = lshr i32 %50, 23
  %55 = add i32 %54, %53
  %56 = shl i32 %55, 12
  %57 = xor i32 %56, %55
  %58 = lshr i32 %57, 7
  %59 = xor i32 %58, %57
  %60 = shl i32 %59, 2
  %61 = xor i32 %60, %59
  %62 = lshr i32 %61, 20
  %63 = xor i32 %62, %61
  %64 = or i32 %63, 1
  %65 = zext i32 %64 to i64
  br label %66

66:                                               ; preds = %80, %49
  %67 = phi %"struct.WTF::KeyValuePair"* [ null, %49 ], [ %81, %80 ]
  %68 = phi i64 [ 0, %49 ], [ %83, %80 ]
  %69 = phi i64 [ %52, %49 ], [ %85, %80 ]
  %70 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %1, i64 %69
  %71 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %70, i64 0, i32 0
  %72 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %71, align 8
  %73 = ptrtoint %"class.WTF::StringImpl"* %72 to i64
  switch i64 %73, label %77 [
    i64 0, label %74
    i64 -1, label %80
  ]

74:                                               ; preds = %66
  %75 = icmp eq %"struct.WTF::KeyValuePair"* %67, null
  %76 = select i1 %75, %"struct.WTF::KeyValuePair"* %70, %"struct.WTF::KeyValuePair"* %67
  br label %86

77:                                               ; preds = %66
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %39, align 8
  %79 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* %72, %"class.WTF::StringImpl"* %78) #10
  br i1 %79, label %86, label %80

80:                                               ; preds = %77, %66
  %81 = phi %"struct.WTF::KeyValuePair"* [ %67, %77 ], [ %70, %66 ]
  %82 = icmp eq i64 %68, 0
  %83 = select i1 %82, i64 %65, i64 %68
  %84 = add i64 %83, %69
  %85 = and i64 %84, %15
  br label %66

86:                                               ; preds = %77, %74
  %87 = phi %"struct.WTF::KeyValuePair"* [ %76, %74 ], [ %70, %77 ]
  %88 = bitcast %"struct.WTF::KeyValuePair"* %87 to i8*
  %89 = bitcast %"struct.WTF::KeyValuePair"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false) #10
  %90 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %9, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %90, i64 %37
  %92 = icmp eq %"struct.WTF::KeyValuePair"* %91, %3
  %93 = select i1 %92, %"struct.WTF::KeyValuePair"* %87, %"struct.WTF::KeyValuePair"* %35
  %94 = load i32, i32* %6, align 8
  %95 = ptrtoint %"struct.WTF::KeyValuePair"* %90 to i64
  br label %96

96:                                               ; preds = %31, %31, %86
  %97 = phi i64 [ %32, %31 ], [ %95, %86 ], [ %32, %31 ]
  %98 = phi i32 [ %33, %31 ], [ %94, %86 ], [ %33, %31 ]
  %99 = phi %"struct.WTF::KeyValuePair"* [ %34, %31 ], [ %90, %86 ], [ %34, %31 ]
  %100 = phi %"struct.WTF::KeyValuePair"* [ %35, %31 ], [ %93, %86 ], [ %35, %31 ]
  %101 = add i32 %36, 1
  %102 = icmp eq i32 %101, %98
  br i1 %102, label %18, label %31
}

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair"*, i8 } @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISB_S6_SC_EERS2_RmEENS_18HashTableAddResultISD_S4_EEOT0_OT1_(%"class.WTF::HashTable"*, %"class.WTF::StringImpl"** dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* null)
  %9 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = lshr i32 %18, 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %10
  %22 = tail call i32 @_ZNK3WTF10StringImpl12HashSlowCaseEv(%"class.WTF::StringImpl"* %16) #10
  br label %23

23:                                               ; preds = %10, %21
  %24 = phi i32 [ %22, %21 ], [ %19, %10 ]
  %25 = and i32 %24, %14
  %26 = zext i32 %25 to i64
  %27 = xor i32 %24, -1
  %28 = lshr i32 %24, 23
  %29 = add i32 %28, %27
  %30 = shl i32 %29, 12
  %31 = xor i32 %30, %29
  %32 = lshr i32 %31, 7
  %33 = xor i32 %32, %31
  %34 = shl i32 %33, 2
  %35 = xor i32 %34, %33
  %36 = lshr i32 %35, 20
  %37 = xor i32 %36, %35
  %38 = or i32 %37, 1
  %39 = zext i32 %38 to i64
  br label %40

40:                                               ; preds = %51, %23
  %41 = phi i64 [ 0, %23 ], [ %54, %51 ]
  %42 = phi i64 [ %26, %23 ], [ %56, %51 ]
  %43 = phi %"struct.WTF::KeyValuePair"* [ null, %23 ], [ %52, %51 ]
  %44 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %11, i64 %42
  %45 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %44, i64 0, i32 0
  %46 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %45, align 8
  %47 = ptrtoint %"class.WTF::StringImpl"* %46 to i64
  switch i64 %47, label %48 [
    i64 0, label %57
    i64 -1, label %51
  ]

48:                                               ; preds = %40
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %1, align 8
  %50 = tail call zeroext i1 @_ZN3WTF12EqualNonNullEPKNS_10StringImplES2_(%"class.WTF::StringImpl"* nonnull %46, %"class.WTF::StringImpl"* %49) #10
  br i1 %50, label %85, label %51

51:                                               ; preds = %40, %48
  %52 = phi %"struct.WTF::KeyValuePair"* [ %43, %48 ], [ %44, %40 ]
  %53 = icmp eq i64 %41, 0
  %54 = select i1 %53, i64 %39, i64 %41
  %55 = add i64 %54, %42
  %56 = and i64 %55, %15
  br label %40

57:                                               ; preds = %40
  %58 = icmp eq %"struct.WTF::KeyValuePair"* %43, null
  br i1 %58, label %67, label %59

59:                                               ; preds = %57
  %60 = bitcast %"struct.WTF::KeyValuePair"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %60, i8 0, i64 16, i1 false) #10
  %61 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %62 = load i32, i32* %61, align 8
  %63 = add i32 %62, 2147483647
  %64 = and i32 %63, 2147483647
  %65 = and i32 %62, -2147483648
  %66 = or i32 %64, %65
  store i32 %66, i32* %61, align 8
  br label %67

67:                                               ; preds = %57, %59
  %68 = phi %"struct.WTF::KeyValuePair"* [ %43, %59 ], [ %44, %57 ]
  %69 = bitcast %"class.WTF::StringImpl"** %1 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"struct.WTF::KeyValuePair"* %68 to i64*
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %68, i64 0, i32 1
  %73 = load i64, i64* %2, align 8
  store i64 %73, i64* %72, align 8
  %74 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %75 = load i32, i32* %74, align 4
  %76 = add i32 %75, 1
  store i32 %76, i32* %74, align 4
  %77 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 3
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, %76
  %80 = shl i32 %79, 1
  %81 = load i32, i32* %12, align 8
  %82 = icmp ult i32 %80, %81
  br i1 %82, label %85, label %83

83:                                               ; preds = %67
  %84 = tail call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %68)
  br label %85

85:                                               ; preds = %48, %67, %83
  %86 = phi i8 [ 1, %67 ], [ 1, %83 ], [ 0, %48 ]
  %87 = phi %"struct.WTF::KeyValuePair"* [ %68, %67 ], [ %84, %83 ], [ %44, %48 ]
  %88 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } undef, %"struct.WTF::KeyValuePair"* %87, 0
  %89 = insertvalue { %"struct.WTF::KeyValuePair"*, i8 } %88, i8 %86, 1
  ret { %"struct.WTF::KeyValuePair"*, i8 } %89
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE6ExpandEPS4_(%"class.WTF::HashTable"*, %"struct.WTF::KeyValuePair"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable", %"class.WTF::HashTable"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([99 x i8], [99 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPNS_10StringImplEmEEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #10
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair"*
  %37 = call %"struct.WTF::KeyValuePair"* @_ZN3WTF9HashTableIPNS_10StringImplENS_12KeyValuePairIS2_mEENS_24KeyValuePairKeyExtractorENS_10StringHashENS_18HashMapValueTraitsINS_10HashTraitsIS2_EENS8_ImEEEES9_NS_18PartitionAllocatorEE8RehashToEPS4_jSE_(%"class.WTF::HashTable"* %0, %"struct.WTF::KeyValuePair"* %36, i32 %32, %"struct.WTF::KeyValuePair"* %1) #10
  ret %"struct.WTF::KeyValuePair"* %37
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64**, i64**) local_unnamed_addr #4

declare void @_ZNK4base6subtle14RefCountedBase10AddRefImplEv(%"class.base::subtle::RefCountedBase"*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE9SetUniqueERKS3_PNS_6GlobalIS4_EE(%"class.v8::Global"* noalias sret, %"class.v8::GlobalValueMap.27"*, %"class.blink::ParkableStringImpl"** dereferenceable(8), %"class.v8::Global"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.blink::ParkableStringImpl"*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %"class.v8::Global", align 8
  %8 = alloca %"class.v8::Global", align 8
  %9 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %3, i64 0, i32 0, i32 0
  %10 = load %"class.v8::String"*, %"class.v8::String"** %9, align 8
  %11 = icmp eq %"class.v8::String"* %10, null
  %12 = bitcast %"class.v8::String"* %10 to i64*
  br i1 %11, label %20, label %13

13:                                               ; preds = %4
  %14 = bitcast %"class.v8::GlobalValueMap.27"* %1 to %"class.v8::internal::Isolate"**
  %15 = load %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"** %14, align 8
  %16 = load i64, i64* %12, align 8
  %17 = tail call i64* @_ZN2v811HandleScope12CreateHandleEPNS_8internal7IsolateEm(%"class.v8::internal::Isolate"* %15, i64 %16) #10
  %18 = bitcast %"class.v8::Global"* %3 to i64**
  %19 = load i64*, i64** %18, align 8
  br label %20

20:                                               ; preds = %4, %13
  %21 = phi i64* [ %19, %13 ], [ %12, %4 ]
  %22 = bitcast %"class.blink::ParkableStringImpl"** %2 to i8**
  %23 = load i8*, i8** %22, align 8
  tail call void @_ZN2v82V88MakeWeakEPmPvPFvRKNS_16WeakCallbackInfoIvEEENS_16WeakCallbackTypeE(i64* %21, i8* %23, void (%"class.v8::WeakCallbackInfo.305"*)* bitcast (void (%"class.v8::WeakCallbackInfo.267"*)* @_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE14OnWeakCallbackERKNS_16WeakCallbackInfoIS2_EE to void (%"class.v8::WeakCallbackInfo.305"*)*), i32 0) #10
  %24 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %25 = bitcast %"class.v8::Global"* %3 to i64*
  %26 = load i64, i64* %25, align 8
  store %"class.v8::String"* null, %"class.v8::String"** %9, align 8
  %27 = bitcast %"class.blink::ParkableStringImpl"** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27)
  %28 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28)
  store %"class.blink::ParkableStringImpl"* %24, %"class.blink::ParkableStringImpl"** %5, align 8
  store i64 %26, i64* %6, align 8
  %29 = ptrtoint %"class.blink::ParkableStringImpl"* %24 to i64
  %30 = getelementptr inbounds %"class.v8::GlobalValueMap.27", %"class.v8::GlobalValueMap.27"* %1, i64 0, i32 0, i32 1, i32 0
  %31 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %30, i64 0, i32 0
  %32 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %31, align 8
  %33 = icmp eq %"struct.WTF::KeyValuePair.33"* %32, null
  br i1 %33, label %98, label %34

34:                                               ; preds = %20
  %35 = getelementptr inbounds %"class.v8::GlobalValueMap.27", %"class.v8::GlobalValueMap.27"* %1, i64 0, i32 0, i32 1, i32 0, i32 1
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, -1
  %38 = zext i32 %37 to i64
  %39 = shl i64 %29, 32
  %40 = xor i64 %39, -1
  %41 = add i64 %40, %29
  %42 = lshr i64 %41, 22
  %43 = xor i64 %42, %41
  %44 = shl i64 %43, 13
  %45 = xor i64 %44, -1
  %46 = add i64 %43, %45
  %47 = lshr i64 %46, 8
  %48 = xor i64 %47, %46
  %49 = mul i64 %48, 9
  %50 = lshr i64 %49, 15
  %51 = xor i64 %50, %49
  %52 = shl i64 %51, 27
  %53 = xor i64 %52, -1
  %54 = add i64 %51, %53
  %55 = lshr i64 %54, 31
  %56 = xor i64 %55, %54
  %57 = trunc i64 %56 to i32
  %58 = and i32 %37, %57
  %59 = zext i32 %58 to i64
  %60 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %32, i64 %59
  %61 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %60, i64 0, i32 0
  %62 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %61, align 8
  %63 = icmp eq %"class.blink::ParkableStringImpl"* %62, %24
  br i1 %63, label %92, label %64

64:                                               ; preds = %34
  %65 = xor i32 %57, -1
  %66 = lshr i32 %57, 23
  %67 = add i32 %66, %65
  %68 = shl i32 %67, 12
  %69 = xor i32 %68, %67
  %70 = lshr i32 %69, 7
  %71 = xor i32 %70, %69
  %72 = shl i32 %71, 2
  %73 = xor i32 %72, %71
  %74 = lshr i32 %73, 20
  %75 = xor i32 %74, %73
  %76 = or i32 %75, 1
  %77 = zext i32 %76 to i64
  br label %78

78:                                               ; preds = %83, %64
  %79 = phi %"class.blink::ParkableStringImpl"* [ %62, %64 ], [ %90, %83 ]
  %80 = phi i64 [ %59, %64 ], [ %87, %83 ]
  %81 = phi i64 [ 0, %64 ], [ %85, %83 ]
  %82 = icmp eq %"class.blink::ParkableStringImpl"* %79, null
  br i1 %82, label %98, label %83

83:                                               ; preds = %78
  %84 = icmp eq i64 %81, 0
  %85 = select i1 %84, i64 %77, i64 %81
  %86 = add i64 %85, %80
  %87 = and i64 %86, %38
  %88 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %32, i64 %87
  %89 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %88, i64 0, i32 0
  %90 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %89, align 8
  %91 = icmp eq %"class.blink::ParkableStringImpl"* %90, %24
  br i1 %91, label %92, label %78

92:                                               ; preds = %83, %34
  %93 = phi %"struct.WTF::KeyValuePair.33"* [ %60, %34 ], [ %88, %83 ]
  %94 = icmp eq %"struct.WTF::KeyValuePair.33"* %93, null
  br i1 %94, label %98, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %93, i64 0, i32 1
  %97 = load i64, i64* %96, align 8
  br label %98

98:                                               ; preds = %78, %20, %95, %92
  %99 = phi i64 [ %97, %95 ], [ 0, %92 ], [ 0, %20 ], [ 0, %78 ]
  %100 = call { %"struct.WTF::KeyValuePair.33"*, i8 } @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISD_S8_SE_EERS3_RmEENS_18HashTableAddResultISF_S5_EEOT0_OT1_(%"class.WTF::HashTable.30"* %30, %"class.blink::ParkableStringImpl"** nonnull dereferenceable(8) %5, i64* nonnull dereferenceable(8) %6) #10
  %101 = extractvalue { %"struct.WTF::KeyValuePair.33"*, i8 } %100, 1
  %102 = and i8 %101, 1
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %104, label %108

104:                                              ; preds = %98
  %105 = extractvalue { %"struct.WTF::KeyValuePair.33"*, i8 } %100, 0
  %106 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %105, i64 0, i32 1
  %107 = load i64, i64* %6, align 8
  store i64 %107, i64* %106, align 8
  br label %108

108:                                              ; preds = %98, %104
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28)
  %109 = bitcast %"class.v8::Global"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #10
  %110 = bitcast %"class.v8::Global"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %110) #10, !noalias !35
  %111 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %7, i64 0, i32 0, i32 0
  %112 = inttoptr i64 %99 to %"class.v8::String"*
  store %"class.v8::String"* %112, %"class.v8::String"** %111, align 8, !noalias !35
  %113 = icmp eq i64 %99, 0
  %114 = inttoptr i64 %99 to i64*
  br i1 %113, label %122, label %115

115:                                              ; preds = %108
  %116 = getelementptr inbounds %"class.v8::String", %"class.v8::String"* %112, i64 11, i32 0
  %117 = load i8, i8* %116, align 1, !noalias !35
  %118 = and i8 %117, 7
  %119 = icmp eq i8 %118, 2
  br i1 %119, label %120, label %125

120:                                              ; preds = %115
  %121 = call i8* @_ZN2v82V89ClearWeakEPm(i64* %114) #10
  br label %125

122:                                              ; preds = %108
  %123 = bitcast %"class.v8::Global"* %8 to i64*
  store i64 0, i64* %123, align 8, !alias.scope !38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #10, !noalias !35
  %124 = bitcast %"class.v8::Global"* %0 to i64*
  store i64 0, i64* %124, align 8, !alias.scope !41
  br label %136

125:                                              ; preds = %115, %120
  %126 = bitcast %"class.v8::Global"* %8 to i64*
  store i64 %99, i64* %126, align 8, !alias.scope !38
  %127 = bitcast %"class.v8::Global"* %7 to i64**
  %128 = bitcast %"class.v8::Global"* %8 to i64**
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %127, i64** nonnull %128) #10
  %129 = load i64, i64* %126, align 8, !noalias !41
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %110) #10, !noalias !35
  %130 = bitcast %"class.v8::Global"* %0 to i64*
  store i64 %129, i64* %130, align 8, !alias.scope !41
  %131 = icmp eq i64 %129, 0
  br i1 %131, label %136, label %132

132:                                              ; preds = %125
  %133 = getelementptr inbounds %"class.v8::Global", %"class.v8::Global"* %8, i64 0, i32 0, i32 0
  %134 = bitcast %"class.v8::Global"* %8 to i64**
  %135 = bitcast %"class.v8::Global"* %0 to i64**
  call void @_ZN2v82V819MoveGlobalReferenceEPPmS2_(i64** nonnull %134, i64** %135) #10
  store %"class.v8::String"* null, %"class.v8::String"** %133, align 8, !noalias !41
  br label %136

136:                                              ; preds = %125, %122, %132
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE14OnWeakCallbackERKNS_16WeakCallbackInfoIS2_EE(%"class.v8::WeakCallbackInfo.267"* dereferenceable(40)) #1 comdat align 2 {
  %2 = bitcast %"class.v8::WeakCallbackInfo.267"* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, 8
  %5 = inttoptr i64 %4 to %"class.blink::V8PerIsolateData"**
  %6 = load %"class.blink::V8PerIsolateData"*, %"class.blink::V8PerIsolateData"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::V8PerIsolateData", %"class.blink::V8PerIsolateData"* %6, i64 0, i32 5, i32 0, i32 0, i32 0
  %8 = load %"class.blink::StringCache"*, %"class.blink::StringCache"** %7, align 8
  %9 = getelementptr inbounds %"class.v8::WeakCallbackInfo.267", %"class.v8::WeakCallbackInfo.267"* %0, i64 0, i32 1
  %10 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %9, align 8
  %11 = getelementptr inbounds %"class.blink::StringCache", %"class.blink::StringCache"* %8, i64 0, i32 2, i32 0, i32 1
  %12 = tail call i64 @_ZN5blink22V8GlobalValueMapTraitsIPNS_18ParkableStringImplEN2v86StringELNS3_31PersistentContainerCallbackTypeE1EE6RemoveEPN3WTF7HashMapIS2_mNS7_7PtrHashIS1_EENS7_10HashTraitsIS2_EENSB_ImEENS7_18PartitionAllocatorEEES2_(%"class.WTF::HashMap.29"* %11, %"class.blink::ParkableStringImpl"* %10) #10
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %1
  %15 = inttoptr i64 %12 to i64*
  tail call void @_ZN2v82V813DisposeGlobalEPm(i64* nonnull %15) #10
  br label %16

16:                                               ; preds = %1, %14
  %17 = getelementptr inbounds %"class.v8::WeakCallbackInfo.267", %"class.v8::WeakCallbackInfo.267"* %0, i64 0, i32 2
  %18 = load void (%"class.v8::WeakCallbackInfo.267"*)**, void (%"class.v8::WeakCallbackInfo.267"*)*** %17, align 8
  store void (%"class.v8::WeakCallbackInfo.267"*)* @_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE18SecondWeakCallbackERKNS_16WeakCallbackInfoIS2_EE, void (%"class.v8::WeakCallbackInfo.267"*)** %18, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v814GlobalValueMapIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE18SecondWeakCallbackERKNS_16WeakCallbackInfoIS2_EE(%"class.v8::WeakCallbackInfo.267"* dereferenceable(40)) #1 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::WeakCallbackInfo.267", %"class.v8::WeakCallbackInfo.267"* %0, i64 0, i32 1
  %3 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 0, i32 0, i32 0
  tail call void @_ZNK4base6subtle14RefCountedBase11ReleaseImplEv(%"class.base::subtle::RefCountedBase"* %4) #10
  %5 = getelementptr inbounds %"class.blink::ParkableStringImpl", %"class.blink::ParkableStringImpl"* %3, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp ne i32 %6, 0
  %8 = icmp eq %"class.blink::ParkableStringImpl"* %3, null
  %9 = or i1 %8, %7
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  tail call void @_ZN5blink18ParkableStringImplD1Ev(%"class.blink::ParkableStringImpl"* nonnull %3) #10
  %11 = bitcast %"class.blink::ParkableStringImpl"* %3 to i8*
  tail call void @free(i8* %11) #10
  br label %12

12:                                               ; preds = %1, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN5blink22V8GlobalValueMapTraitsIPNS_18ParkableStringImplEN2v86StringELNS3_31PersistentContainerCallbackTypeE1EE6RemoveEPN3WTF7HashMapIS2_mNS7_7PtrHashIS1_EENS7_10HashTraitsIS2_EENSB_ImEENS7_18PartitionAllocatorEEES2_(%"class.WTF::HashMap.29"*, %"class.blink::ParkableStringImpl"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.blink::ParkableStringImpl"*, align 8
  store %"class.blink::ParkableStringImpl"* %1, %"class.blink::ParkableStringImpl"** %3, align 8
  %4 = getelementptr inbounds %"class.WTF::HashMap.29", %"class.WTF::HashMap.29"* %0, i64 0, i32 0
  %5 = call { %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"* } @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE4findERKS3_(%"class.WTF::HashTable.30"* %4, %"class.blink::ParkableStringImpl"** nonnull dereferenceable(8) %3) #10
  %6 = extractvalue { %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"* } %5, 0
  %7 = getelementptr inbounds %"class.WTF::HashMap.29", %"class.WTF::HashMap.29"* %0, i64 0, i32 0, i32 0
  %8 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %7, align 8
  %9 = getelementptr inbounds %"class.WTF::HashMap.29", %"class.WTF::HashMap.29"* %0, i64 0, i32 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %8, i64 %11
  %13 = icmp eq %"struct.WTF::KeyValuePair.33"* %6, %12
  br i1 %13, label %39, label %14

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %6, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %6, i64 0, i32 0
  store %"class.blink::ParkableStringImpl"* inttoptr (i64 -1 to %"class.blink::ParkableStringImpl"*), %"class.blink::ParkableStringImpl"** %17, align 8
  %18 = getelementptr inbounds %"class.WTF::HashMap.29", %"class.WTF::HashMap.29"* %0, i64 0, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = add i32 %19, 1
  %21 = and i32 %20, 2147483647
  %22 = and i32 %19, -2147483648
  %23 = or i32 %21, %22
  store i32 %23, i32* %18, align 8
  %24 = getelementptr inbounds %"class.WTF::HashMap.29", %"class.WTF::HashMap.29"* %0, i64 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, -1
  store i32 %26, i32* %24, align 4
  %27 = mul i32 %26, 6
  %28 = load i32, i32* %9, align 8
  %29 = icmp ult i32 %27, %28
  %30 = icmp ugt i32 %28, 8
  %31 = and i1 %29, %30
  br i1 %31, label %32, label %39

32:                                               ; preds = %14
  %33 = lshr i32 %28, 1
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 4
  %36 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %35, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPN5blink18ParkableStringImplEmEEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %36, i8 0, i64 %35, i1 false) #10
  %37 = bitcast i8* %36 to %"struct.WTF::KeyValuePair.33"*
  %38 = call %"struct.WTF::KeyValuePair.33"* @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_(%"class.WTF::HashTable.30"* %4, %"struct.WTF::KeyValuePair.33"* %37, i32 %33, %"struct.WTF::KeyValuePair.33"* null) #10
  br label %39

39:                                               ; preds = %2, %14, %32
  %40 = phi i64 [ 0, %2 ], [ %16, %14 ], [ %16, %32 ]
  ret i64 %40
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"* } @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE4findERKS3_(%"class.WTF::HashTable.30"*, %"class.blink::ParkableStringImpl"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %3, align 8
  %5 = icmp eq %"struct.WTF::KeyValuePair.33"* %4, null
  %6 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  br i1 %5, label %70, label %8

8:                                                ; preds = %2
  %9 = add i32 %7, -1
  %10 = zext i32 %9 to i64
  %11 = bitcast %"class.blink::ParkableStringImpl"** %1 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = shl i64 %12, 32
  %14 = xor i64 %13, -1
  %15 = add i64 %12, %14
  %16 = lshr i64 %15, 22
  %17 = xor i64 %16, %15
  %18 = shl i64 %17, 13
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 8
  %22 = xor i64 %21, %20
  %23 = mul i64 %22, 9
  %24 = lshr i64 %23, 15
  %25 = xor i64 %24, %23
  %26 = shl i64 %25, 27
  %27 = xor i64 %26, -1
  %28 = add i64 %25, %27
  %29 = lshr i64 %28, 31
  %30 = xor i64 %29, %28
  %31 = trunc i64 %30 to i32
  %32 = and i32 %9, %31
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %4, i64 %33
  %35 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %34, i64 0, i32 0
  %36 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %35, align 8
  %37 = inttoptr i64 %12 to %"class.blink::ParkableStringImpl"*
  %38 = icmp eq %"class.blink::ParkableStringImpl"* %36, %37
  br i1 %38, label %67, label %39

39:                                               ; preds = %8
  %40 = xor i32 %31, -1
  %41 = lshr i32 %31, 23
  %42 = add i32 %41, %40
  %43 = shl i32 %42, 12
  %44 = xor i32 %43, %42
  %45 = lshr i32 %44, 7
  %46 = xor i32 %45, %44
  %47 = shl i32 %46, 2
  %48 = xor i32 %47, %46
  %49 = lshr i32 %48, 20
  %50 = xor i32 %49, %48
  %51 = or i32 %50, 1
  %52 = zext i32 %51 to i64
  br label %53

53:                                               ; preds = %58, %39
  %54 = phi %"class.blink::ParkableStringImpl"* [ %36, %39 ], [ %65, %58 ]
  %55 = phi i64 [ %33, %39 ], [ %62, %58 ]
  %56 = phi i64 [ 0, %39 ], [ %60, %58 ]
  %57 = icmp eq %"class.blink::ParkableStringImpl"* %54, null
  br i1 %57, label %70, label %58

58:                                               ; preds = %53
  %59 = icmp eq i64 %56, 0
  %60 = select i1 %59, i64 %52, i64 %56
  %61 = add i64 %60, %55
  %62 = and i64 %61, %10
  %63 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %4, i64 %62
  %64 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %63, i64 0, i32 0
  %65 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %64, align 8
  %66 = icmp eq %"class.blink::ParkableStringImpl"* %65, %37
  br i1 %66, label %67, label %53

67:                                               ; preds = %58, %8
  %68 = phi %"struct.WTF::KeyValuePair.33"* [ %34, %8 ], [ %63, %58 ]
  %69 = icmp eq %"struct.WTF::KeyValuePair.33"* %68, null
  br i1 %69, label %70, label %73

70:                                               ; preds = %53, %67, %2
  %71 = zext i32 %7 to i64
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %4, i64 %71
  br label %76

73:                                               ; preds = %67
  %74 = zext i32 %7 to i64
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %4, i64 %74
  br label %76

76:                                               ; preds = %70, %73
  %77 = phi %"struct.WTF::KeyValuePair.33"* [ %68, %73 ], [ %72, %70 ]
  %78 = phi %"struct.WTF::KeyValuePair.33"* [ %75, %73 ], [ %72, %70 ]
  %79 = insertvalue { %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"* } undef, %"struct.WTF::KeyValuePair.33"* %77, 0
  %80 = insertvalue { %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"* } %79, %"struct.WTF::KeyValuePair.33"* %78, 1
  ret { %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"* } %80
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.33"* @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_(%"class.WTF::HashTable.30"*, %"struct.WTF::KeyValuePair.33"*, i32, %"struct.WTF::KeyValuePair.33"*) local_unnamed_addr #1 comdat align 2 {
  %5 = alloca %"class.WTF::HashTable.30", align 8
  %6 = bitcast %"class.WTF::HashTable.30"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #10
  %7 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %5, i64 0, i32 0
  %8 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %5, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %5, i64 0, i32 2
  %10 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %5, i64 0, i32 3
  %11 = bitcast %"class.WTF::HashTable.30"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 24, i1 false)
  store %"struct.WTF::KeyValuePair.33"* %1, %"struct.WTF::KeyValuePair.33"** %7, align 8
  store i32 %2, i32* %8, align 8
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 8
  %12 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 0
  br i1 %14, label %16, label %21

16:                                               ; preds = %4
  %17 = ptrtoint %"struct.WTF::KeyValuePair.33"* %1 to i64
  %18 = bitcast %"class.WTF::HashTable.30"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.WTF::HashTable.30"* %5 to i64*
  br label %28

21:                                               ; preds = %4
  %22 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %15, align 8
  %23 = ptrtoint %"struct.WTF::KeyValuePair.33"* %22 to i64
  br label %42

24:                                               ; preds = %64
  %25 = bitcast %"class.WTF::HashTable.30"* %5 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = bitcast %"class.WTF::HashTable.30"* %0 to i64*
  br label %28

28:                                               ; preds = %16, %24
  %29 = phi i64* [ %20, %16 ], [ %25, %24 ]
  %30 = phi i64* [ %18, %16 ], [ %27, %24 ]
  %31 = phi i64 [ %17, %16 ], [ %26, %24 ]
  %32 = phi i64 [ %19, %16 ], [ %65, %24 ]
  %33 = phi %"struct.WTF::KeyValuePair.33"* [ null, %16 ], [ %68, %24 ]
  %34 = phi i32 [ 0, %16 ], [ %66, %24 ]
  store atomic i64 %31, i64* %30 monotonic, align 8
  store i32 %2, i32* %12, align 8
  store i64 %32, i64* %29, align 8
  store i32 %34, i32* %8, align 8
  %35 = icmp eq i64 %32, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %28
  %37 = inttoptr i64 %32 to i8*
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %37) #10
  store atomic i64 0, i64* %29 monotonic, align 8
  store i32 0, i32* %8, align 8
  store i32 0, i32* %9, align 4
  br label %38

38:                                               ; preds = %28, %36
  %39 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 3
  %40 = load i32, i32* %39, align 8
  %41 = and i32 %40, -2147483648
  store i32 %41, i32* %39, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #10
  ret %"struct.WTF::KeyValuePair.33"* %33

42:                                               ; preds = %21, %64
  %43 = phi i64 [ %65, %64 ], [ %23, %21 ]
  %44 = phi i32 [ %66, %64 ], [ %13, %21 ]
  %45 = phi %"struct.WTF::KeyValuePair.33"* [ %67, %64 ], [ %22, %21 ]
  %46 = phi %"struct.WTF::KeyValuePair.33"* [ %68, %64 ], [ null, %21 ]
  %47 = phi i32 [ %69, %64 ], [ 0, %21 ]
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %45, i64 %48
  %50 = bitcast %"struct.WTF::KeyValuePair.33"* %49 to i64*
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %52 [
    i64 -1, label %64
    i64 0, label %64
  ]

52:                                               ; preds = %42
  %53 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %49, i64 0, i32 0
  %54 = call { %"struct.WTF::KeyValuePair.33"*, i8 } @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE16LookupForWritingERKS3_(%"class.WTF::HashTable.30"* nonnull %5, %"class.blink::ParkableStringImpl"** dereferenceable(8) %53) #10
  %55 = extractvalue { %"struct.WTF::KeyValuePair.33"*, i8 } %54, 0
  %56 = bitcast %"struct.WTF::KeyValuePair.33"* %55 to i8*
  %57 = bitcast %"struct.WTF::KeyValuePair.33"* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* align 8 %57, i64 16, i1 false) #10
  %58 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %15, align 8
  %59 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %58, i64 %48
  %60 = icmp eq %"struct.WTF::KeyValuePair.33"* %59, %3
  %61 = select i1 %60, %"struct.WTF::KeyValuePair.33"* %55, %"struct.WTF::KeyValuePair.33"* %46
  %62 = load i32, i32* %12, align 8
  %63 = ptrtoint %"struct.WTF::KeyValuePair.33"* %58 to i64
  br label %64

64:                                               ; preds = %42, %42, %52
  %65 = phi i64 [ %43, %42 ], [ %63, %52 ], [ %43, %42 ]
  %66 = phi i32 [ %44, %42 ], [ %62, %52 ], [ %44, %42 ]
  %67 = phi %"struct.WTF::KeyValuePair.33"* [ %45, %42 ], [ %58, %52 ], [ %45, %42 ]
  %68 = phi %"struct.WTF::KeyValuePair.33"* [ %46, %42 ], [ %61, %52 ], [ %46, %42 ]
  %69 = add i32 %47, 1
  %70 = icmp eq i32 %69, %66
  br i1 %70, label %24, label %42
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.33"*, i8 } @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE16LookupForWritingERKS3_(%"class.WTF::HashTable.30"*, %"class.blink::ParkableStringImpl"** dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 0
  %4 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %3, align 8
  %5 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 1
  %6 = load i32, i32* %5, align 8
  %7 = add i32 %6, -1
  %8 = zext i32 %7 to i64
  %9 = bitcast %"class.blink::ParkableStringImpl"** %1 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = shl i64 %10, 32
  %12 = xor i64 %11, -1
  %13 = add i64 %10, %12
  %14 = lshr i64 %13, 22
  %15 = xor i64 %14, %13
  %16 = shl i64 %15, 13
  %17 = xor i64 %16, -1
  %18 = add i64 %15, %17
  %19 = lshr i64 %18, 8
  %20 = xor i64 %19, %18
  %21 = mul i64 %20, 9
  %22 = lshr i64 %21, 15
  %23 = xor i64 %22, %21
  %24 = shl i64 %23, 27
  %25 = xor i64 %24, -1
  %26 = add i64 %23, %25
  %27 = lshr i64 %26, 31
  %28 = xor i64 %27, %26
  %29 = trunc i64 %28 to i32
  %30 = and i32 %7, %29
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %4, i64 %31
  %33 = ptrtoint %"struct.WTF::KeyValuePair.33"* %32 to i64
  %34 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %32, i64 0, i32 0
  %35 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %34, align 8
  %36 = icmp eq %"class.blink::ParkableStringImpl"* %35, null
  %37 = inttoptr i64 %10 to %"class.blink::ParkableStringImpl"*
  br i1 %36, label %55, label %38

38:                                               ; preds = %2
  %39 = xor i32 %29, -1
  %40 = lshr i32 %29, 23
  %41 = add i32 %40, %39
  %42 = shl i32 %41, 12
  %43 = xor i32 %42, %41
  %44 = lshr i32 %43, 7
  %45 = xor i32 %44, %43
  %46 = shl i32 %45, 2
  %47 = xor i32 %46, %45
  %48 = lshr i32 %47, 20
  %49 = xor i32 %48, %47
  %50 = or i32 %49, 1
  %51 = zext i32 %50 to i64
  br label %61

52:                                               ; preds = %68
  %53 = ptrtoint %"struct.WTF::KeyValuePair.33"* %75 to i64
  %54 = inttoptr i64 %70 to %"struct.WTF::KeyValuePair.33"*
  br label %55

55:                                               ; preds = %52, %2
  %56 = phi i64 [ %53, %52 ], [ %33, %2 ]
  %57 = phi %"struct.WTF::KeyValuePair.33"* [ %54, %52 ], [ null, %2 ]
  %58 = icmp eq %"struct.WTF::KeyValuePair.33"* %57, null
  %59 = ptrtoint %"struct.WTF::KeyValuePair.33"* %57 to i64
  %60 = select i1 %58, i64 %56, i64 %59
  br label %80

61:                                               ; preds = %68, %38
  %62 = phi i64 [ 0, %38 ], [ %70, %68 ]
  %63 = phi %"class.blink::ParkableStringImpl"* [ %35, %38 ], [ %78, %68 ]
  %64 = phi i64 [ %33, %38 ], [ %76, %68 ]
  %65 = phi i64 [ %31, %38 ], [ %74, %68 ]
  %66 = phi i64 [ 0, %38 ], [ %72, %68 ]
  %67 = icmp eq %"class.blink::ParkableStringImpl"* %63, %37
  br i1 %67, label %80, label %68

68:                                               ; preds = %61
  %69 = icmp eq %"class.blink::ParkableStringImpl"* %63, inttoptr (i64 -1 to %"class.blink::ParkableStringImpl"*)
  %70 = select i1 %69, i64 %64, i64 %62
  %71 = icmp eq i64 %66, 0
  %72 = select i1 %71, i64 %51, i64 %66
  %73 = add i64 %72, %65
  %74 = and i64 %73, %8
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %4, i64 %74
  %76 = ptrtoint %"struct.WTF::KeyValuePair.33"* %75 to i64
  %77 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %75, i64 0, i32 0
  %78 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %77, align 8
  %79 = icmp eq %"class.blink::ParkableStringImpl"* %78, null
  br i1 %79, label %52, label %61

80:                                               ; preds = %61, %55
  %81 = phi i64 [ %60, %55 ], [ %64, %61 ]
  %82 = phi i8 [ 0, %55 ], [ 1, %61 ]
  %83 = inttoptr i64 %81 to %"struct.WTF::KeyValuePair.33"*
  %84 = insertvalue { %"struct.WTF::KeyValuePair.33"*, i8 } undef, %"struct.WTF::KeyValuePair.33"* %83, 0
  %85 = insertvalue { %"struct.WTF::KeyValuePair.33"*, i8 } %84, i8 %82, 1
  ret { %"struct.WTF::KeyValuePair.33"*, i8 } %85
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { %"struct.WTF::KeyValuePair.33"*, i8 } @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6insertINS_17HashMapTranslatorISD_S8_SE_EERS3_RmEENS_18HashTableAddResultISF_S5_EEOT0_OT1_(%"class.WTF::HashTable.30"*, %"class.blink::ParkableStringImpl"** dereferenceable(8), i64* dereferenceable(8)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 0
  %5 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %4, align 8
  %6 = icmp eq %"struct.WTF::KeyValuePair.33"* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %3
  %8 = tail call %"struct.WTF::KeyValuePair.33"* @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable.30"* %0, %"struct.WTF::KeyValuePair.33"* null)
  %9 = load %"struct.WTF::KeyValuePair.33"*, %"struct.WTF::KeyValuePair.33"** %4, align 8
  br label %10

10:                                               ; preds = %3, %7
  %11 = phi %"struct.WTF::KeyValuePair.33"* [ %5, %3 ], [ %9, %7 ]
  %12 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = add i32 %13, -1
  %15 = zext i32 %14 to i64
  %16 = bitcast %"class.blink::ParkableStringImpl"** %1 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = shl i64 %17, 32
  %19 = xor i64 %18, -1
  %20 = add i64 %17, %19
  %21 = lshr i64 %20, 22
  %22 = xor i64 %21, %20
  %23 = shl i64 %22, 13
  %24 = xor i64 %23, -1
  %25 = add i64 %22, %24
  %26 = lshr i64 %25, 8
  %27 = xor i64 %26, %25
  %28 = mul i64 %27, 9
  %29 = lshr i64 %28, 15
  %30 = xor i64 %29, %28
  %31 = shl i64 %30, 27
  %32 = xor i64 %31, -1
  %33 = add i64 %30, %32
  %34 = lshr i64 %33, 31
  %35 = xor i64 %34, %33
  %36 = trunc i64 %35 to i32
  %37 = and i32 %14, %36
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %11, i64 %38
  %40 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %39, i64 0, i32 0
  %41 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %40, align 8
  %42 = icmp eq %"class.blink::ParkableStringImpl"* %41, null
  %43 = inttoptr i64 %17 to %"class.blink::ParkableStringImpl"*
  br i1 %42, label %87, label %44

44:                                               ; preds = %10
  %45 = xor i32 %36, -1
  %46 = lshr i32 %36, 23
  %47 = add i32 %46, %45
  %48 = shl i32 %47, 12
  %49 = xor i32 %48, %47
  %50 = lshr i32 %49, 7
  %51 = xor i32 %50, %49
  %52 = shl i32 %51, 2
  %53 = xor i32 %52, %51
  %54 = lshr i32 %53, 20
  %55 = xor i32 %54, %53
  %56 = or i32 %55, 1
  %57 = zext i32 %56 to i64
  br label %58

58:                                               ; preds = %44, %65
  %59 = phi %"class.blink::ParkableStringImpl"* [ %41, %44 ], [ %74, %65 ]
  %60 = phi %"struct.WTF::KeyValuePair.33"* [ %39, %44 ], [ %72, %65 ]
  %61 = phi %"struct.WTF::KeyValuePair.33"* [ null, %44 ], [ %67, %65 ]
  %62 = phi i64 [ %38, %44 ], [ %71, %65 ]
  %63 = phi i64 [ 0, %44 ], [ %69, %65 ]
  %64 = icmp eq %"class.blink::ParkableStringImpl"* %59, %43
  br i1 %64, label %104, label %65

65:                                               ; preds = %58
  %66 = icmp eq %"class.blink::ParkableStringImpl"* %59, inttoptr (i64 -1 to %"class.blink::ParkableStringImpl"*)
  %67 = select i1 %66, %"struct.WTF::KeyValuePair.33"* %60, %"struct.WTF::KeyValuePair.33"* %61
  %68 = icmp eq i64 %63, 0
  %69 = select i1 %68, i64 %57, i64 %63
  %70 = add i64 %69, %62
  %71 = and i64 %70, %15
  %72 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %11, i64 %71
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %72, i64 0, i32 0
  %74 = load %"class.blink::ParkableStringImpl"*, %"class.blink::ParkableStringImpl"** %73, align 8
  %75 = icmp eq %"class.blink::ParkableStringImpl"* %74, null
  br i1 %75, label %76, label %58

76:                                               ; preds = %65
  %77 = icmp eq %"struct.WTF::KeyValuePair.33"* %67, null
  br i1 %77, label %87, label %78

78:                                               ; preds = %76
  %79 = bitcast %"struct.WTF::KeyValuePair.33"* %67 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %79, i8 0, i64 16, i1 false) #10
  %80 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 3
  %81 = load i32, i32* %80, align 8
  %82 = add i32 %81, 2147483647
  %83 = and i32 %82, 2147483647
  %84 = and i32 %81, -2147483648
  %85 = or i32 %83, %84
  store i32 %85, i32* %80, align 8
  %86 = load i64, i64* %16, align 8
  br label %87

87:                                               ; preds = %10, %76, %78
  %88 = phi i64 [ %86, %78 ], [ %17, %76 ], [ %17, %10 ]
  %89 = phi %"struct.WTF::KeyValuePair.33"* [ %67, %78 ], [ %72, %76 ], [ %39, %10 ]
  %90 = bitcast %"struct.WTF::KeyValuePair.33"* %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %"struct.WTF::KeyValuePair.33", %"struct.WTF::KeyValuePair.33"* %89, i64 0, i32 1
  %92 = load i64, i64* %2, align 8
  store i64 %92, i64* %91, align 8
  %93 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = add i32 %94, 1
  store i32 %95, i32* %93, align 4
  %96 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 3
  %97 = load i32, i32* %96, align 8
  %98 = add i32 %97, %95
  %99 = shl i32 %98, 1
  %100 = load i32, i32* %12, align 8
  %101 = icmp ult i32 %99, %100
  br i1 %101, label %104, label %102

102:                                              ; preds = %87
  %103 = tail call %"struct.WTF::KeyValuePair.33"* @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable.30"* %0, %"struct.WTF::KeyValuePair.33"* %89)
  br label %104

104:                                              ; preds = %58, %87, %102
  %105 = phi i8 [ 1, %87 ], [ 1, %102 ], [ 0, %58 ]
  %106 = phi %"struct.WTF::KeyValuePair.33"* [ %89, %87 ], [ %103, %102 ], [ %60, %58 ]
  %107 = insertvalue { %"struct.WTF::KeyValuePair.33"*, i8 } undef, %"struct.WTF::KeyValuePair.33"* %106, 0
  %108 = insertvalue { %"struct.WTF::KeyValuePair.33"*, i8 } %107, i8 %105, 1
  ret { %"struct.WTF::KeyValuePair.33"*, i8 } %108
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.WTF::KeyValuePair.33"* @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE6ExpandEPS5_(%"class.WTF::HashTable.30"*, %"struct.WTF::KeyValuePair.33"*) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %31, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.WTF::HashTable.30", %"class.WTF::HashTable.30"* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %11, 6
  %13 = shl i32 %7, 1
  %14 = icmp ult i32 %12, %13
  br i1 %14, label %31, label %15

15:                                               ; preds = %9
  %16 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %17, align 8
  %18 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18)
  %19 = icmp ugt i32 %13, %7
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* null, i8** %17, align 8
  br label %30

21:                                               ; preds = %15
  %22 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %13) #10
  %23 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %22, i8* %23) #10
  %24 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18)
  store i8* %25, i8** %17, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %30, label %27

27:                                               ; preds = %21
  %28 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0), i32 1783, %"class.logging::CheckOpResult"* nonnull %4) #10
  %29 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #10
  br label %30

30:                                               ; preds = %20, %21, %27
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  br label %31

31:                                               ; preds = %9, %2, %30
  %32 = phi i32 [ %13, %30 ], [ 8, %2 ], [ %7, %9 ]
  %33 = zext i32 %32 to i64
  %34 = shl nuw nsw i64 %33, 4
  %35 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %34, i8* getelementptr inbounds ([109 x i8], [109 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameINS_12KeyValuePairIPN5blink18ParkableStringImplEmEEEEPKcv, i64 0, i64 0)) #10
  call void @llvm.memset.p0i8.i64(i8* align 1 %35, i8 0, i64 %34, i1 false) #10
  %36 = bitcast i8* %35 to %"struct.WTF::KeyValuePair.33"*
  %37 = call %"struct.WTF::KeyValuePair.33"* @_ZN3WTF9HashTableIPN5blink18ParkableStringImplENS_12KeyValuePairIS3_mEENS_24KeyValuePairKeyExtractorENS_7PtrHashIS2_EENS_18HashMapValueTraitsINS_10HashTraitsIS3_EENSA_ImEEEESB_NS_18PartitionAllocatorEE8RehashToEPS5_jSG_(%"class.WTF::HashTable.30"* %0, %"struct.WTF::KeyValuePair.33"* %36, i32 %32, %"struct.WTF::KeyValuePair.33"* %1) #10
  ret %"struct.WTF::KeyValuePair.33"* %37
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { cold noreturn nounwind }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE7ReleaseEm: argument 0"}
!5 = distinct !{!5, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE7ReleaseEm"}
!6 = !{!7, !4}
!7 = distinct !{!7, !8, !"_ZN2v86GlobalINS_6StringEE4PassEv: argument 0"}
!8 = distinct !{!8, !"_ZN2v86GlobalINS_6StringEE4PassEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN2v86GlobalINS_6StringEE4PassEv: argument 0"}
!11 = distinct !{!11, !"_ZN2v86GlobalINS_6StringEE4PassEv"}
!12 = !{i8 0, i8 2}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE12GetReferenceERKS3_: argument 0"}
!15 = distinct !{!15, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE12GetReferenceERKS3_"}
!16 = !{!"branch_weights", i32 1, i32 2000}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE3SetERKS3_NS_6GlobalIS4_EEPNS_22PersistentValueMapBaseIS3_S4_S6_E24PersistentValueReferenceE: argument 0"}
!19 = distinct !{!19, !"_ZN2v814GlobalValueMapIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE3SetERKS3_NS_6GlobalIS4_EEPNS_22PersistentValueMapBaseIS3_S4_S6_E24PersistentValueReferenceE"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN2v822PersistentValueMapBaseIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE12GetReferenceERKS3_: argument 0"}
!22 = distinct !{!22, !"_ZN2v822PersistentValueMapBaseIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE12GetReferenceERKS3_"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE12GetReferenceERKS3_: argument 0"}
!25 = distinct !{!25, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE12GetReferenceERKS3_"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE7ReleaseEm: argument 0"}
!28 = distinct !{!28, !"_ZN2v822PersistentValueMapBaseIPN3WTF10StringImplENS_6StringEN5blink20StringCacheMapTraitsEE7ReleaseEm"}
!29 = !{!30, !27}
!30 = distinct !{!30, !31, !"_ZN2v86GlobalINS_6StringEE4PassEv: argument 0"}
!31 = distinct !{!31, !"_ZN2v86GlobalINS_6StringEE4PassEv"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN2v86GlobalINS_6StringEE4PassEv: argument 0"}
!34 = distinct !{!34, !"_ZN2v86GlobalINS_6StringEE4PassEv"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN2v822PersistentValueMapBaseIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE7ReleaseEm: argument 0"}
!37 = distinct !{!37, !"_ZN2v822PersistentValueMapBaseIPN5blink18ParkableStringImplENS_6StringENS1_28ParkableStringCacheMapTraitsEE7ReleaseEm"}
!38 = !{!39, !36}
!39 = distinct !{!39, !40, !"_ZN2v86GlobalINS_6StringEE4PassEv: argument 0"}
!40 = distinct !{!40, !"_ZN2v86GlobalINS_6StringEE4PassEv"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN2v86GlobalINS_6StringEE4PassEv: argument 0"}
!43 = distinct !{!43, !"_ZN2v86GlobalINS_6StringEE4PassEv"}
