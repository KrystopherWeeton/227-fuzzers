; ModuleID = '../../third_party/blink/renderer/platform/wtf/allocator/partitions.cc'
source_filename = "../../third_party/blink/renderer/platform/wtf/allocator/partitions.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.base::PartitionRoot" = type <{ i8, i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock", [4 x i8], [128 x %"struct.base::internal::PartitionBucket"], %"struct.base::internal::PartitionBucket", i8, [7 x i8], %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionSuperPageExtentEntry"*, %"struct.base::internal::PartitionDirectMapExtent"*, [16 x %"struct.base::internal::SlotSpanMetadata"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock" = type { %"class.base::internal::SpinningMutex" }
%"class.base::internal::SpinningMutex" = type { %"struct.std::__1::atomic" }
%"struct.base::internal::PartitionBucket" = type { %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::PartitionBucket"*, i16, i16, i8, i8 }>
%"class.base::internal::PartitionFreelistEntry" = type { %"struct.base::internal::EncodedPartitionFreelistEntry"*, i64 }
%"struct.base::internal::EncodedPartitionFreelistEntry" = type { [8 x i8], [8 x i8] }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i64 }
%"struct.base::internal::PartitionSuperPageExtentEntry" = type { %"struct.base::PartitionRoot"*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry"* }
%"struct.base::internal::PartitionDirectMapExtent" = type opaque
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.base::PartitionRoot.6" = type <{ i8, i8, i8, i8, i8, i8, i8, %"class.base::internal::MaybeSpinLock.7", [5 x i8], [128 x %"struct.base::internal::PartitionBucket.8"], %"struct.base::internal::PartitionBucket.8", i8, [7 x i8], %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i8*, i8*, i8*, %"struct.base::internal::PartitionSuperPageExtentEntry.10"*, %"struct.base::internal::PartitionSuperPageExtentEntry.10"*, %"struct.base::internal::PartitionDirectMapExtent.11"*, [16 x %"struct.base::internal::SlotSpanMetadata.9"*], i16, [6 x i8], i64, %"struct.std::__1::atomic", [4 x i8] }>
%"class.base::internal::MaybeSpinLock.7" = type { [4 x i8] }
%"struct.base::internal::PartitionBucket.8" = type { %"struct.base::internal::SlotSpanMetadata.9"*, %"struct.base::internal::SlotSpanMetadata.9"*, %"struct.base::internal::SlotSpanMetadata.9"*, i32, i32, i64 }
%"struct.base::internal::SlotSpanMetadata.9" = type <{ %"class.base::internal::PartitionFreelistEntry"*, %"struct.base::internal::SlotSpanMetadata.9"*, %"struct.base::internal::PartitionBucket.8"*, i16, i16, i8, i8 }>
%"struct.base::internal::PartitionSuperPageExtentEntry.10" = type opaque
%"struct.base::internal::PartitionDirectMapExtent.11" = type opaque
%"class.base::NoDestructor" = type { [5408 x i8] }
%"class.base::NoDestructor.13" = type { [5408 x i8] }
%"struct.base::Feature" = type { i8*, i32 }
%"class.crash_reporter::internal::CrashKeyStringImpl" = type { i8*, i64*, i64 }
%"class.crashpad::Annotation" = type <{ %"struct.std::__1::atomic.46", i8*, i8*, i32, i16, [2 x i8] }>
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__cxx_atomic_impl.48" }
%"struct.std::__1::__cxx_atomic_impl.48" = type { %"struct.std::__1::__cxx_atomic_base_impl.49" }
%"struct.std::__1::__cxx_atomic_base_impl.49" = type { %"class.crashpad::Annotation"* }
%"struct.crash_reporter::internal::InitializedArrayImpl" = type { [1 x i64] }
%"struct.std::__1::atomic.50" = type { %"struct.std::__1::__atomic_base.51" }
%"struct.std::__1::__atomic_base.51" = type { %"struct.std::__1::__cxx_atomic_impl.52" }
%"struct.std::__1::__cxx_atomic_impl.52" = type { %"struct.std::__1::__cxx_atomic_base_impl.53" }
%"struct.std::__1::__cxx_atomic_base_impl.53" = type { i8 }
%"class.base::internal::PCScan" = type <{ %"class.base::internal::PCScanScheduler", %"struct.std::__1::atomic.54", i8, [6 x i8] }>
%"class.base::internal::PCScanScheduler" = type { %"struct.base::internal::QuarantineData", %"class.base::internal::LimitBackend", %"class.base::internal::PCScanSchedulingBackend"* }
%"struct.base::internal::QuarantineData" = type { %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", %"struct.std::__1::atomic.1", i64 }
%"class.base::internal::LimitBackend" = type { %"class.base::internal::PCScanSchedulingBackend" }
%"class.base::internal::PCScanSchedulingBackend" = type { i32 (...)**, %"class.base::internal::PCScanScheduler"* }
%"struct.std::__1::atomic.54" = type { %"struct.std::__1::__atomic_base.55" }
%"struct.std::__1::__atomic_base.55" = type { %"struct.std::__1::__cxx_atomic_impl.56" }
%"struct.std::__1::__cxx_atomic_impl.56" = type { %"struct.std::__1::__cxx_atomic_base_impl.57" }
%"struct.std::__1::__cxx_atomic_base_impl.57" = type { i8 }
%"struct.base::internal::PartitionAllocator" = type { %"struct.base::PartitionRoot" }
%"struct.base::internal::PartitionAllocator.14" = type { %"struct.base::PartitionRoot.6" }
%"struct.base::strings::internal::Arg" = type <{ %union.anon.64, i32, [4 x i8] }>
%union.anon.64 = type { %struct.anon.65 }
%struct.anon.65 = type { i64, i8 }
%"class.base::SequencedTaskRunner" = type { %"class.base::TaskRunner.base", [4 x i8] }
%"class.base::TaskRunner.base" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe" }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.base::PartitionAllocMemoryReclaimer" = type { %"class.std::__1::unique_ptr", %"class.base::Lock", %"class.std::__1::set", %"class.std::__1::set.36" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"class.base::RepeatingTimer"* }
%"class.base::RepeatingTimer" = type { %"class.base::internal::TimerBase", %"class.base::RepeatingCallback" }
%"class.base::internal::TimerBase" = type { i32 (...)**, %class.scoped_refptr, %"class.base::SequenceCheckerDoNothing", %"class.base::internal::TaskDestructionDetector"*, %"class.base::Location", %"class.base::TimeDelta", %"class.base::TimeTicks", %"class.base::TimeTicks", %"class.base::TickClock"*, i8, %"class.base::WeakPtrFactory" }
%class.scoped_refptr = type { %"class.base::SequencedTaskRunner"* }
%"class.base::SequenceCheckerDoNothing" = type { i8 }
%"class.base::internal::TaskDestructionDetector" = type opaque
%"class.base::Location" = type { i8*, i8*, i32, i8* }
%"class.base::TimeDelta" = type { i64 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::TickClock" = type opaque
%"class.base::WeakPtrFactory" = type { %"class.base::internal::WeakPtrFactoryBase" }
%"class.base::internal::WeakPtrFactoryBase" = type { %"class.base::internal::WeakReferenceOwner", i64 }
%"class.base::internal::WeakReferenceOwner" = type { %class.scoped_refptr.18 }
%class.scoped_refptr.18 = type { %"class.base::internal::WeakReference::Flag"* }
%"class.base::internal::WeakReference::Flag" = type <{ %"class.base::RefCountedThreadSafe.19", %"class.base::AtomicFlag", [3 x i8] }>
%"class.base::RefCountedThreadSafe.19" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::AtomicFlag" = type { %"struct.std::__1::atomic.20" }
%"struct.std::__1::atomic.20" = type { %"struct.std::__1::__atomic_base.21" }
%"struct.std::__1::__atomic_base.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__cxx_atomic_impl.23" }
%"struct.std::__1::__cxx_atomic_impl.23" = type { %"struct.std::__1::__cxx_atomic_base_impl.24" }
%"struct.std::__1::__cxx_atomic_base_impl.24" = type { i8 }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.25 }
%class.scoped_refptr.25 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe.26", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe.26" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.28", %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i64 }
%"class.std::__1::set.36" = type { %"class.std::__1::__tree.37" }
%"class.std::__1::__tree.37" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.38", %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.38" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"class.base::TaskRunner" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::PartitionStatsDumper" = type { i32 (...)** }
%"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl" = type { %"class.base::PartitionStatsDumper", i64 }
%"class.base::internal::ThreadCache" = type { [89 x %"struct.base::internal::ThreadCache::Bucket"], i64, %"struct.std::__1::atomic.50", %"struct.base::ThreadCacheStats", %"struct.base::PartitionRoot"*, %"class.base::internal::ThreadCache"*, %"class.base::internal::ThreadCache"* }
%"struct.base::internal::ThreadCache::Bucket" = type <{ %"class.base::internal::PartitionFreelistEntry"*, i8, %"struct.std::__1::atomic.20", i16, [4 x i8] }>
%"struct.base::ThreadCacheStats" = type { i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [129 x i64], [129 x i64] }
%"struct.base::internal::DeferredUnmap" = type { i8*, i64 }
%"struct.base::internal::PartitionPage" = type { %union.anon.60, i8, i8 }
%union.anon.60 = type <{ %"struct.base::internal::SubsequentPageMetadata", [22 x i8] }>
%"struct.base::internal::SubsequentPageMetadata" = type { i64 }
%"class.base::internal::ObjectBitmap" = type { %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [2048 x i64] }
%"struct.base::PartitionMemoryStats" = type { i64, i64, i64, i64, i64, i64, i8, %"struct.base::ThreadCacheStats", %"struct.base::ThreadCacheStats" }
%"struct.base::PartitionBucketMemoryStats" = type { i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [34 x i8] c"partition_alloc/allocated_objects\00", align 1
@_ZN3WTF10Partitions24kAllocatedObjectPoolNameE = hidden local_unnamed_addr constant i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), align 8
@_ZN3WTF10Partitions12initialized_E = hidden local_unnamed_addr global i8 0, align 1
@_ZN3WTF10Partitions18array_buffer_root_E = hidden local_unnamed_addr global %"struct.base::PartitionRoot"* null, align 8
@_ZN3WTF10Partitions12buffer_root_E = hidden local_unnamed_addr global %"struct.base::PartitionRoot"* null, align 8
@_ZN3WTF10Partitions12layout_root_E = hidden local_unnamed_addr global %"struct.base::PartitionRoot.6"* null, align 8
@_ZGVZN3WTF10Partitions10InitializeEvE11initialized = internal global i64 0, align 8
@_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator = internal global i64 0, align 8
@_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator = internal global i64 0, align 8
@_ZZN3WTF10Partitions14InitializeOnceEvE16layout_allocator = internal global %"class.base::NoDestructor.13" zeroinitializer, align 8
@_ZGVZN3WTF10Partitions14InitializeOnceEvE16layout_allocator = internal global i64 0, align 8
@_ZN4base8features21kPartitionAllocPCScanE = external global %"struct.base::Feature", align 8
@_ZN3WTFL22kPCScanBlinkPartitionsE = internal constant %"struct.base::Feature" { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i32 0, i32 0), i32 0 }, align 8
@.str.1 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partitions.cc\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"IsMainThread()\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"array_buffer\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"layout\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size = internal global { %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } } { %"class.crash_reporter::internal::CrashKeyStringImpl"* bitcast (i8* getelementptr (i8, i8* bitcast ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size to i8*), i64 16) to %"class.crash_reporter::internal::CrashKeyStringImpl"*), %"class.crashpad::Annotation"* bitcast (i8* getelementptr (i8, i8* bitcast ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size to i8*), i64 48) to %"class.crashpad::Annotation"*), { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" } { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i32 0, i32 0), i64* bitcast (i8* getelementptr (i8, i8* bitcast ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size to i8*), i64 40) to i64*), i64 1, %"struct.crash_reporter::internal::InitializedArrayImpl" { [1 x i64] [i64 200] } }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } { { { %"class.crashpad::Annotation"* } } zeroinitializer, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr (i8, i8* bitcast ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size to i8*), i64 78), i32 0, i16 1, [24 x i8] zeroinitializer } }, align 8
@.str.7 = private unnamed_addr constant [27 x i8] c"page-allocator-mapped-size\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"PCScanBlinkPartitions\00", align 1
@_ZTVN3WTF12_GLOBAL__N_129LightPartitionStatsDumperImplE = internal unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"*, i8*, %"struct.base::PartitionMemoryStats"*)* @_ZN3WTF12_GLOBAL__N_129LightPartitionStatsDumperImpl19PartitionDumpTotalsEPKcPKN4base20PartitionMemoryStatsE to i8*), i8* bitcast (void (%"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"*, i8*, %"struct.base::PartitionBucketMemoryStats"*)* @_ZN3WTF12_GLOBAL__N_129LightPartitionStatsDumperImpl25PartitionsDumpBucketStatsEPKcPKN4base26PartitionBucketMemoryStatsE to i8*)] }, align 8
@_ZN4base19PartitionAllocHooks14hooks_enabled_E = external local_unnamed_addr global %"struct.std::__1::atomic.50", align 1
@_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup = internal unnamed_addr constant { [128 x i64], [521 x i16] } { [128 x i64] [i64 16, i64 18, i64 20, i64 22, i64 24, i64 26, i64 28, i64 30, i64 32, i64 36, i64 40, i64 44, i64 48, i64 52, i64 56, i64 60, i64 64, i64 72, i64 80, i64 88, i64 96, i64 104, i64 112, i64 120, i64 128, i64 144, i64 160, i64 176, i64 192, i64 208, i64 224, i64 240, i64 256, i64 288, i64 320, i64 352, i64 384, i64 416, i64 448, i64 480, i64 512, i64 576, i64 640, i64 704, i64 768, i64 832, i64 896, i64 960, i64 1024, i64 1152, i64 1280, i64 1408, i64 1536, i64 1664, i64 1792, i64 1920, i64 2048, i64 2304, i64 2560, i64 2816, i64 3072, i64 3328, i64 3584, i64 3840, i64 4096, i64 4608, i64 5120, i64 5632, i64 6144, i64 6656, i64 7168, i64 7680, i64 8192, i64 9216, i64 10240, i64 11264, i64 12288, i64 13312, i64 14336, i64 15360, i64 16384, i64 18432, i64 20480, i64 22528, i64 24576, i64 26624, i64 28672, i64 30720, i64 32768, i64 36864, i64 40960, i64 45056, i64 49152, i64 53248, i64 57344, i64 61440, i64 65536, i64 73728, i64 81920, i64 90112, i64 98304, i64 106496, i64 114688, i64 122880, i64 131072, i64 147456, i64 163840, i64 180224, i64 196608, i64 212992, i64 229376, i64 245760, i64 262144, i64 294912, i64 327680, i64 360448, i64 393216, i64 425984, i64 458752, i64 491520, i64 524288, i64 589824, i64 655360, i64 720896, i64 786432, i64 851968, i64 917504, i64 983040], [521 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 8, i16 12, i16 12, i16 12, i16 12, i16 16, i16 16, i16 16, i16 16, i16 18, i16 18, i16 20, i16 20, i16 22, i16 22, i16 24, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 34, i16 35, i16 36, i16 37, i16 38, i16 39, i16 40, i16 41, i16 42, i16 43, i16 44, i16 45, i16 46, i16 47, i16 48, i16 49, i16 50, i16 51, i16 52, i16 53, i16 54, i16 55, i16 56, i16 57, i16 58, i16 59, i16 60, i16 61, i16 62, i16 63, i16 64, i16 65, i16 66, i16 67, i16 68, i16 69, i16 70, i16 71, i16 72, i16 73, i16 74, i16 75, i16 76, i16 77, i16 78, i16 79, i16 80, i16 81, i16 82, i16 83, i16 84, i16 85, i16 86, i16 87, i16 88, i16 89, i16 90, i16 91, i16 92, i16 93, i16 94, i16 95, i16 96, i16 97, i16 98, i16 99, i16 100, i16 101, i16 102, i16 103, i16 104, i16 105, i16 106, i16 107, i16 108, i16 109, i16 110, i16 111, i16 112, i16 113, i16 114, i16 115, i16 116, i16 117, i16 118, i16 119, i16 120, i16 121, i16 122, i16 123, i16 124, i16 125, i16 126, i16 127, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128, i16 128] }, align 8
@_ZN4base12_GLOBAL__N_116kOrderIndexShiftE = internal unnamed_addr constant [65 x i8] c"\00\00\00\00\00\01\02\03\04\05\06\07\08\09\0A\0B\0C\0D\0E\0F\10\11\12\13\14\15\16\17\18\19\1A\1B\1C\1D\1E\1F !\22#$%&'()*+,-./0123456789:;<", align 16
@_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE = internal unnamed_addr constant [65 x i64] [i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 3, i64 7, i64 15, i64 31, i64 63, i64 127, i64 255, i64 511, i64 1023, i64 2047, i64 4095, i64 8191, i64 16383, i64 32767, i64 65535, i64 131071, i64 262143, i64 524287, i64 1048575, i64 2097151, i64 4194303, i64 8388607, i64 16777215, i64 33554431, i64 67108863, i64 134217727, i64 268435455, i64 536870911, i64 1073741823, i64 2147483647, i64 4294967295, i64 8589934591, i64 17179869183, i64 34359738367, i64 68719476735, i64 137438953471, i64 274877906943, i64 549755813887, i64 1099511627775, i64 2199023255551, i64 4398046511103, i64 8796093022207, i64 17592186044415, i64 35184372088831, i64 70368744177663, i64 140737488355327, i64 281474976710655, i64 562949953421311, i64 1125899906842623, i64 2251799813685247, i64 4503599627370495, i64 9007199254740991, i64 18014398509481983, i64 36028797018963967, i64 72057594037927935, i64 144115188075855871, i64 288230376151711743, i64 576460752303423487, i64 1152921504606846975], align 16
@_ZN4base8internal6PCScan9instance_E = external global %"class.base::internal::PCScan", align 8
@_ZN4base8internal18g_thread_cache_keyE = external local_unnamed_addr global i32, align 4
@_ZN4base8internal11ThreadCache28largest_active_bucket_index_E = external local_unnamed_addr global i16, align 2
@.str.12 = private unnamed_addr constant [105 x i8] c"../../base/allocator/partition_allocator/partition_page.h(549) Check failed: slot_start != freelist_head\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10Partitions10InitializeEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTF10Partitions10InitializeEvE11initialized to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %8, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTF10Partitions10InitializeEvE11initialized) #17
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call zeroext i1 @_ZN3WTF10Partitions14InitializeOnceEv()
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTF10Partitions10InitializeEvE11initialized) #17
  br label %8

8:                                                ; preds = %3, %6, %0
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3WTF10Partitions14InitializeOnceEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %7, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator) #17
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %7, label %6

6:                                                ; preds = %3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 0), i8 0, i64 5408, i1 false) #17
  store i8 1, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 16), i8 0, i64 5120, i1 false) #17
  store i8 0, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator, i64 0, i32 0, i64 5184), i8 0, i64 202, i1 false) #17
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator) #17
  br label %7

7:                                                ; preds = %3, %6, %0
  %8 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator to i8*) acquire, align 8
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %14, !prof !2

10:                                               ; preds = %7
  %11 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator) #17
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %14, label %13

13:                                               ; preds = %10
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 0), i8 0, i64 5408, i1 false) #17
  store i8 1, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 3), align 1
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 8) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 16), i8 0, i64 5120, i1 false) #17
  store i8 0, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 5176), align 8
  store i64 0, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 5392) to i64*), align 8
  store i32 0, i32* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 5400) to i32*), align 8
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator, i64 0, i32 0, i64 5184), i8 0, i64 202, i1 false) #17
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator) #17
  br label %14

14:                                               ; preds = %10, %13, %7
  %15 = load atomic i8, i8* bitcast (i64* @_ZGVZN3WTF10Partitions14InitializeOnceEvE16layout_allocator to i8*) acquire, align 8
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %21, !prof !2

17:                                               ; preds = %14
  %18 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN3WTF10Partitions14InitializeOnceEvE16layout_allocator) #17
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %21, label %20

20:                                               ; preds = %17
  tail call void @llvm.memset.p0i8.i64(i8* align 8 getelementptr inbounds (%"class.base::NoDestructor.13", %"class.base::NoDestructor.13"* @_ZZN3WTF10Partitions14InitializeOnceEvE16layout_allocator, i64 0, i32 0, i64 0), i8 0, i64 5408, i1 false) #17
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN3WTF10Partitions14InitializeOnceEvE16layout_allocator) #17
  br label %21

21:                                               ; preds = %17, %20, %14
  tail call void @_ZN4base24PartitionAllocGlobalInitEPFvmE(void (i64)* nonnull @_ZN3WTF10Partitions17HandleOutOfMemoryEm) #17
  tail call void @_ZN4base8internal18PartitionAllocatorILb1EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator"* bitcast (%"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator to %"struct.base::internal::PartitionAllocator"*), i40 16842752) #17
  tail call void @_ZN4base8internal18PartitionAllocatorILb1EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator"* bitcast (%"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator to %"struct.base::internal::PartitionAllocator"*), i40 16842752) #17
  tail call void @_ZN4base8internal18PartitionAllocatorILb0EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator.14"* bitcast (%"class.base::NoDestructor.13"* @_ZZN3WTF10Partitions14InitializeOnceEvE16layout_allocator to %"struct.base::internal::PartitionAllocator.14"*), i40 16842752) #17
  store %"struct.base::PartitionRoot"* bitcast (%"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE22array_buffer_allocator to %"struct.base::PartitionRoot"*), %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  store %"struct.base::PartitionRoot"* bitcast (%"class.base::NoDestructor"* @_ZZN3WTF10Partitions14InitializeOnceEvE16buffer_allocator to %"struct.base::PartitionRoot"*), %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  store %"struct.base::PartitionRoot.6"* bitcast (%"class.base::NoDestructor.13"* @_ZZN3WTF10Partitions14InitializeOnceEvE16layout_allocator to %"struct.base::PartitionRoot.6"*), %"struct.base::PartitionRoot.6"** @_ZN3WTF10Partitions12layout_root_E, align 8
  %22 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN4base8features21kPartitionAllocPCScanE) #17
  br i1 %22, label %25, label %23

23:                                               ; preds = %21
  %24 = tail call zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* nonnull dereferenceable(16) @_ZN3WTFL22kPCScanBlinkPartitionsE) #17
  br i1 %24, label %25, label %28

25:                                               ; preds = %23, %21
  %26 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  tail call void @_ZN4base8internal6PCScan24RegisterNonScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"* %26) #17
  %27 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  tail call void @_ZN4base8internal6PCScan21RegisterScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"* %27) #17
  br label %28

28:                                               ; preds = %25, %23
  store i8 1, i8* @_ZN3WTF10Partitions12initialized_E, align 1
  ret i1 true
}

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

declare void @_ZN4base24PartitionAllocGlobalInitEPFvmE(void (i64)*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN3WTF10Partitions17HandleOutOfMemoryEm(i64) #3 align 2 {
  %2 = alloca [1 x %"struct.base::strings::internal::Arg"], align 16
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca [24 x i8], align 16
  %6 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  store volatile i64 -6148914691236517206, i64* %3, align 8
  %7 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  %8 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %7, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i64, i64* %8 seq_cst, align 8
  %10 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  %11 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %10, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i64, i64* %11 seq_cst, align 8
  %13 = add i64 %12, %9
  %14 = load %"struct.base::PartitionRoot.6"*, %"struct.base::PartitionRoot.6"** @_ZN3WTF10Partitions12layout_root_E, align 8
  %15 = getelementptr inbounds %"struct.base::PartitionRoot.6", %"struct.base::PartitionRoot.6"* %14, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i64, i64* %15 seq_cst, align 8
  %17 = add i64 %13, %16
  store volatile i64 %17, i64* %3, align 8
  %18 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #17
  %19 = tail call i32 @_ZN4base21GetAllocPageErrorCodeEv() #17
  store i32 %19, i32* %4, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %18) #17
  %20 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 24, i1 false)
  %21 = call i64 @_ZN4base18GetTotalMappedSizeEv() #17
  %22 = bitcast [1 x %"struct.base::strings::internal::Arg"]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #17
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 24, i1 false) #17
  %23 = getelementptr inbounds [1 x %"struct.base::strings::internal::Arg"], [1 x %"struct.base::strings::internal::Arg"]* %2, i64 0, i64 0
  %24 = getelementptr inbounds [1 x %"struct.base::strings::internal::Arg"], [1 x %"struct.base::strings::internal::Arg"]* %2, i64 0, i64 0, i32 1
  store i32 1, i32* %24, align 16
  %25 = getelementptr inbounds [1 x %"struct.base::strings::internal::Arg"], [1 x %"struct.base::strings::internal::Arg"]* %2, i64 0, i64 0, i32 0, i32 0, i32 0
  store i64 %21, i64* %25, align 16
  %26 = getelementptr inbounds [1 x %"struct.base::strings::internal::Arg"], [1 x %"struct.base::strings::internal::Arg"]* %2, i64 0, i64 0, i32 0, i32 0, i32 1
  store i8 8, i8* %26, align 8
  %27 = call i64 @_ZN4base7strings8internal12SafeSNPrintfEPcmPKcPKNS1_3ArgEm(i8* nonnull %20, i64 24, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), %"struct.base::strings::internal::Arg"* nonnull %23, i64 1) #17
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #17
  %28 = call i64 @strlen(i8* nonnull %20) #17
  call void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"* bitcast (i8** getelementptr inbounds ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }, { %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size, i64 0, i32 2, i32 0) to %"class.crash_reporter::internal::CrashKeyStringImpl"*), i8* nonnull %20, i64 %28) #17
  %29 = call i1 @llvm.is.constant.i64(i64 %28) #17
  %30 = icmp ult i64 %28, 4294967296
  %31 = trunc i64 %28 to i32
  %32 = select i1 %30, i32 %31, i32 -1
  %33 = icmp ult i64 %28, 4294967295
  %34 = select i1 %33, i64 %28, i64 4294967295
  %35 = trunc i64 %34 to i32
  %36 = select i1 %29, i32 %35, i32 %32
  %37 = icmp ult i32 %36, 24
  %38 = select i1 %37, i32 %36, i32 24
  %39 = zext i32 %38 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 getelementptr inbounds ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }, { %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size, i64 0, i32 3, i32 5, i64 0), i8* nonnull align 16 %20, i64 %39, i1 false) #17
  call void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"* bitcast (%"class.crashpad::Annotation"** getelementptr inbounds ({ %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }, { %"class.crash_reporter::internal::CrashKeyStringImpl"*, %"class.crashpad::Annotation"*, { i8*, i64*, i64, %"struct.crash_reporter::internal::InitializedArrayImpl" }, { { { %"class.crashpad::Annotation"* } }, i8*, i8*, i32, i16, [24 x i8] } }* @_ZZN3WTF10Partitions17HandleOutOfMemoryEmE28g_page_allocator_mapped_size, i64 0, i32 3, i32 0, i32 0, i32 0) to %"class.crashpad::Annotation"*), i32 %38) #17
  %40 = load volatile i64, i64* %3, align 8
  %41 = icmp ugt i64 %40, 2147483647
  br i1 %41, label %42, label %43

42:                                               ; preds = %1
  call fastcc void @_ZN3WTFL28PartitionsOutOfMemoryUsing2GEm(i64 %0)
  unreachable

43:                                               ; preds = %1
  %44 = load volatile i64, i64* %3, align 8
  %45 = icmp ugt i64 %44, 1073741823
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  call fastcc void @_ZN3WTFL28PartitionsOutOfMemoryUsing1GEm(i64 %0)
  unreachable

47:                                               ; preds = %43
  %48 = load volatile i64, i64* %3, align 8
  %49 = icmp ugt i64 %48, 536870911
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  call fastcc void @_ZN3WTFL30PartitionsOutOfMemoryUsing512MEm(i64 %0)
  unreachable

51:                                               ; preds = %47
  %52 = load volatile i64, i64* %3, align 8
  %53 = icmp ugt i64 %52, 268435455
  br i1 %53, label %54, label %55

54:                                               ; preds = %51
  call fastcc void @_ZN3WTFL30PartitionsOutOfMemoryUsing256MEm(i64 %0)
  unreachable

55:                                               ; preds = %51
  %56 = load volatile i64, i64* %3, align 8
  %57 = icmp ugt i64 %56, 134217727
  br i1 %57, label %58, label %59

58:                                               ; preds = %55
  call fastcc void @_ZN3WTFL30PartitionsOutOfMemoryUsing128MEm(i64 %0)
  unreachable

59:                                               ; preds = %55
  %60 = load volatile i64, i64* %3, align 8
  %61 = icmp ugt i64 %60, 67108863
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  call fastcc void @_ZN3WTFL29PartitionsOutOfMemoryUsing64MEm(i64 %0)
  unreachable

63:                                               ; preds = %59
  %64 = load volatile i64, i64* %3, align 8
  %65 = icmp ugt i64 %64, 33554431
  br i1 %65, label %66, label %67

66:                                               ; preds = %63
  call fastcc void @_ZN3WTFL29PartitionsOutOfMemoryUsing32MEm(i64 %0)
  unreachable

67:                                               ; preds = %63
  %68 = load volatile i64, i64* %3, align 8
  %69 = icmp ugt i64 %68, 16777215
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  call fastcc void @_ZN3WTFL29PartitionsOutOfMemoryUsing16MEm(i64 %0)
  unreachable

71:                                               ; preds = %67
  call fastcc void @_ZN3WTFL37PartitionsOutOfMemoryUsingLessThan16MEm(i64 %0)
  unreachable
}

declare void @_ZN4base8internal18PartitionAllocatorILb1EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator"*, i40) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare void @_ZN4base8internal18PartitionAllocatorILb0EE4initENS_16PartitionOptionsE(%"struct.base::internal::PartitionAllocator.14"*, i40) local_unnamed_addr #2

declare zeroext i1 @_ZN4base11FeatureList9IsEnabledERKNS_7FeatureE(%"struct.base::Feature"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN4base8internal6PCScan24RegisterNonScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"*) local_unnamed_addr #2

declare void @_ZN4base8internal6PCScan21RegisterScannableRootEPNS_13PartitionRootILb1EEE(%"struct.base::PartitionRoot"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10Partitions20StartPeriodicReclaimE13scoped_refptrIN4base19SequencedTaskRunnerEE(%"class.base::SequencedTaskRunner"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckError", align 8
  %3 = tail call zeroext i1 @_ZN3WTF12IsMainThreadEv() #17
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = bitcast %"class.logging::CheckError"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %2, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.1, i64 0, i64 0), i32 134, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0)) #17
  %6 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %2) #17
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %2) #17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #17
  br label %7

7:                                                ; preds = %1, %4
  %8 = call %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() #17
  %9 = icmp eq %"class.base::SequencedTaskRunner"* %0, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  call void @_ZN4base29PartitionAllocMemoryReclaimer5StartE13scoped_refptrINS_19SequencedTaskRunnerEE(%"class.base::PartitionAllocMemoryReclaimer"* %8, %"class.base::SequencedTaskRunner"* null) #17
  br label %21

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %0, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 1 monotonic
  call void @_ZN4base29PartitionAllocMemoryReclaimer5StartE13scoped_refptrINS_19SequencedTaskRunnerEE(%"class.base::PartitionAllocMemoryReclaimer"* %8, %"class.base::SequencedTaskRunner"* nonnull %0) #17
  %14 = getelementptr inbounds %"class.base::SequencedTaskRunner", %"class.base::SequencedTaskRunner"* %0, i64 0, i32 0, i32 1
  %15 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw sub i32* %15, i32 1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %21

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %14, i64 -2
  %20 = bitcast %"class.base::RefCountedThreadSafe"* %19 to %"class.base::TaskRunner"*
  call void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"* %20) #17
  br label %21

21:                                               ; preds = %10, %11, %18
  ret void
}

declare zeroext i1 @_ZN3WTF12IsMainThreadEv() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare %"class.base::PartitionAllocMemoryReclaimer"* @_ZN4base29PartitionAllocMemoryReclaimer8InstanceEv() local_unnamed_addr #2

declare void @_ZN4base29PartitionAllocMemoryReclaimer5StartE13scoped_refptrINS_19SequencedTaskRunnerEE(%"class.base::PartitionAllocMemoryReclaimer"*, %"class.base::SequencedTaskRunner"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10Partitions15DumpMemoryStatsEbPN4base20PartitionStatsDumperE(i1 zeroext, %"class.base::PartitionStatsDumper"*) local_unnamed_addr #0 align 2 {
  %3 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  tail call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i1 zeroext %0, %"class.base::PartitionStatsDumper"* %1) #17
  %4 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  tail call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* %4, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i1 zeroext %0, %"class.base::PartitionStatsDumper"* %1) #17
  %5 = load %"struct.base::PartitionRoot.6"*, %"struct.base::PartitionRoot.6"** @_ZN3WTF10Partitions12layout_root_E, align 8
  tail call void @_ZN4base13PartitionRootILb0EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot.6"* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i1 zeroext %0, %"class.base::PartitionStatsDumper"* %1) #17
  ret void
}

declare void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"*, i8*, i1 zeroext, %"class.base::PartitionStatsDumper"*) local_unnamed_addr #2

declare void @_ZN4base13PartitionRootILb0EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot.6"*, i8*, i1 zeroext, %"class.base::PartitionStatsDumper"*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i64 @_ZN3WTF10Partitions25TotalSizeOfCommittedPagesEv() local_unnamed_addr #6 align 2 {
  %1 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  %2 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %1, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i64, i64* %2 seq_cst, align 8
  %4 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  %5 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %4, i64 0, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load atomic i64, i64* %5 seq_cst, align 8
  %7 = add i64 %6, %3
  %8 = load %"struct.base::PartitionRoot.6"*, %"struct.base::PartitionRoot.6"** @_ZN3WTF10Partitions12layout_root_E, align 8
  %9 = getelementptr inbounds %"struct.base::PartitionRoot.6", %"struct.base::PartitionRoot.6"* %8, i64 0, i32 13, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i64, i64* %9 seq_cst, align 8
  %11 = add i64 %7, %10
  ret i64 %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3WTF10Partitions16TotalActiveBytesEv() local_unnamed_addr #0 align 2 {
  %1 = alloca %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl", align 8
  %2 = bitcast %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #17
  %3 = getelementptr inbounds %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl", %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* %1, i64 0, i32 0, i32 0
  %4 = getelementptr inbounds %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl", %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* %1, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN3WTF12_GLOBAL__N_129LightPartitionStatsDumperImplE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl", %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* %1, i64 0, i32 0
  %6 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions18array_buffer_root_E, align 8
  call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0), i1 zeroext true, %"class.base::PartitionStatsDumper"* nonnull %5) #17
  %7 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  call void @_ZN4base13PartitionRootILb1EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot"* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i1 zeroext true, %"class.base::PartitionStatsDumper"* nonnull %5) #17
  %8 = load %"struct.base::PartitionRoot.6"*, %"struct.base::PartitionRoot.6"** @_ZN3WTF10Partitions12layout_root_E, align 8
  call void @_ZN4base13PartitionRootILb0EE9DumpStatsEPKcbPNS_20PartitionStatsDumperE(%"struct.base::PartitionRoot.6"* %8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i1 zeroext true, %"class.base::PartitionStatsDumper"* nonnull %5) #17
  %9 = load i64, i64* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #17
  ret i64 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3WTF10Partitions12BufferMallocEmPKc(i64, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  %7 = bitcast i8** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #17
  store i8* null, i8** %5, align 8
  %8 = load atomic i8, i8* getelementptr inbounds (%"struct.std::__1::atomic.50", %"struct.std::__1::atomic.50"* @_ZN4base19PartitionAllocHooks14hooks_enabled_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 1
  %9 = and i8 %8, 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %11, label %15, !prof !3

11:                                               ; preds = %2
  %12 = call zeroext i1 @_ZN4base19PartitionAllocHooks31AllocationOverrideHookIfEnabledEPPvimPKc(i8** nonnull %5, i32 0, i64 %0, i8* %1) #17
  br i1 %12, label %13, label %15

13:                                               ; preds = %11
  %14 = load i8*, i8** %5, align 8
  br label %267

15:                                               ; preds = %11, %2
  %16 = call i64 @llvm.ctlz.i64(i64 %0, i1 false) #17, !range !4
  %17 = sub nuw nsw i64 64, %16
  %18 = and i64 %17, 255
  %19 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %18
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i64
  %22 = lshr i64 %0, %21
  %23 = and i64 %22, 7
  %24 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %18
  %25 = load i64, i64* %24, align 8
  %26 = and i64 %25, %0
  %27 = shl nuw nsw i64 %18, 3
  %28 = or i64 %23, %27
  %29 = icmp ne i64 %26, 0
  %30 = zext i1 %29 to i64
  %31 = add nuw nsw i64 %28, %30
  %32 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %31
  %33 = load i16, i16* %32, align 2
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #17
  store i8 0, i8* %3, align 1
  %34 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #17
  store i64 -6148914691236517206, i64* %4, align 8
  %35 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %6, i64 0, i32 0
  %36 = load i8, i8* %35, align 8
  %37 = icmp eq i8 %36, 2
  br i1 %37, label %38, label %42

38:                                               ; preds = %15
  %39 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %40 = icmp eq i8 %39, 2
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %38
  call void @_ZN4base8internal6PCScan8JoinScanEv() #17
  br label %42

42:                                               ; preds = %41, %38, %15
  %43 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %6, i64 0, i32 2
  %44 = load i8, i8* %43, align 2, !range !5
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %194, label %46, !prof !6

46:                                               ; preds = %42
  %47 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %48 = call i8* @pthread_getspecific(i32 %47) #17
  %49 = bitcast i8* %48 to %"class.base::internal::ThreadCache"*
  %50 = icmp ugt i8* %48, inttoptr (i64 1 to i8*)
  br i1 %50, label %51, label %121, !prof !7

51:                                               ; preds = %46
  %52 = zext i16 %33 to i64
  %53 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %49, i64 0, i32 3, i32 12, i64 %52
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %53, align 8
  %56 = getelementptr inbounds i8, i8* %48, i64 1440
  %57 = bitcast i8* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = add i64 %58, 1
  store i64 %59, i64* %57, align 8
  %60 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %61 = icmp ult i16 %60, %33
  br i1 %61, label %62, label %71, !prof !3

62:                                               ; preds = %51
  %63 = getelementptr inbounds i8, i8* %48, i64 1472
  %64 = bitcast i8* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %64, align 8
  %67 = getelementptr inbounds i8, i8* %48, i64 1456
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* %68, align 8
  br label %128

71:                                               ; preds = %51
  %72 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %49, i64 0, i32 0, i64 %52, i32 0
  %73 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %72, align 8
  %74 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %73, null
  br i1 %74, label %80, label %75, !prof !3

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %48, i64 1448
  %77 = bitcast i8* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %77, align 8
  br label %88

80:                                               ; preds = %71
  %81 = getelementptr inbounds i8, i8* %48, i64 1456
  %82 = bitcast i8* %81 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 8
  %84 = add <2 x i64> %83, <i64 1, i64 1>
  %85 = bitcast i8* %81 to <2 x i64>*
  store <2 x i64> %84, <2 x i64>* %85, align 8
  call void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"* %49, i64 %52) #17
  %86 = load %"class.base::internal::PartitionFreelistEntry"*, %"class.base::internal::PartitionFreelistEntry"** %72, align 8
  %87 = icmp eq %"class.base::internal::PartitionFreelistEntry"* %86, null
  br i1 %87, label %128, label %88, !prof !3

88:                                               ; preds = %80, %75
  %89 = phi %"class.base::internal::PartitionFreelistEntry"* [ %86, %80 ], [ %73, %75 ]
  %90 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %89, i64 0, i32 0
  %91 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %90, align 8
  %92 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %91, null
  %93 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %91 to i64
  br i1 %92, label %94, label %96

94:                                               ; preds = %88
  %95 = call i64 @llvm.bswap.i64(i64 %93) #17
  br label %105

96:                                               ; preds = %88
  %97 = xor i64 %93, -1
  %98 = getelementptr inbounds %"class.base::internal::PartitionFreelistEntry", %"class.base::internal::PartitionFreelistEntry"* %89, i64 0, i32 1
  %99 = load i64, i64* %98, align 8
  %100 = icmp eq i64 %99, %97
  br i1 %100, label %102, label %101, !prof !7

101:                                              ; preds = %96
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #18
  unreachable

102:                                              ; preds = %96
  %103 = call i64 @llvm.bswap.i64(i64 %93) #17
  %104 = inttoptr i64 %103 to i8*
  call void @llvm.prefetch(i8* nonnull %104, i32 0, i32 3, i32 1) #17
  br label %105

105:                                              ; preds = %102, %94
  %106 = phi i64 [ %95, %94 ], [ %103, %102 ]
  %107 = inttoptr i64 %106 to %"class.base::internal::PartitionFreelistEntry"*
  %108 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %49, i64 0, i32 0, i64 %52, i32 1
  %109 = load i8, i8* %108, align 8
  %110 = add i8 %109, -1
  store i8 %110, i8* %108, align 8
  store %"class.base::internal::PartitionFreelistEntry"* %107, %"class.base::internal::PartitionFreelistEntry"** %72, align 8
  %111 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %49, i64 0, i32 0, i64 %52, i32 3
  %112 = load i16, i16* %111, align 2
  %113 = zext i16 %112 to i64
  store i64 %113, i64* %4, align 8
  %114 = load i16, i16* %111, align 2
  %115 = zext i16 %114 to i64
  %116 = getelementptr inbounds i8, i8* %48, i64 1424
  %117 = bitcast i8* %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = sub i64 %118, %115
  store i64 %119, i64* %117, align 8
  %120 = bitcast %"class.base::internal::PartitionFreelistEntry"* %89 to i8*
  br label %123

121:                                              ; preds = %46
  %122 = call i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"* %6, i16 zeroext %33, i64* nonnull %4) #17
  br label %123

123:                                              ; preds = %121, %105
  %124 = phi i8* [ %122, %121 ], [ %120, %105 ]
  %125 = icmp eq i8* %124, null
  br i1 %125, label %126, label %263, !prof !3

126:                                              ; preds = %123
  %127 = zext i16 %33 to i64
  br label %128

128:                                              ; preds = %126, %80, %62
  %129 = phi i64 [ %127, %126 ], [ %52, %80 ], [ %52, %62 ]
  %130 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %6, i64 0, i32 10, i64 %129
  %131 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %6, i64 0, i32 8
  %132 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %131, i64 0, i32 0
  %133 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %131, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %134

134:                                              ; preds = %146, %128
  %135 = phi i32 [ 0, %128 ], [ %147, %146 ]
  %136 = phi i32 [ 1, %128 ], [ %150, %146 ]
  %137 = load atomic i32, i32* %133 monotonic, align 4
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %142, !prof !8

139:                                              ; preds = %134
  %140 = cmpxchg weak i32* %133, i32 0, i32 1 acquire monotonic
  %141 = extractvalue { i32, i1 } %140, 1
  br i1 %141, label %157, label %142, !prof !7

142:                                              ; preds = %139, %134
  %143 = icmp sgt i32 %136, 0
  br i1 %143, label %152, label %146

144:                                              ; preds = %152
  %145 = add i32 %136, %135
  br label %146

146:                                              ; preds = %144, %142
  %147 = phi i32 [ %135, %142 ], [ %145, %144 ]
  %148 = shl i32 %136, 1
  %149 = icmp slt i32 %148, 64
  %150 = select i1 %149, i32 %148, i32 64
  %151 = icmp slt i32 %147, 1000
  br i1 %151, label %134, label %156

152:                                              ; preds = %142, %152
  %153 = phi i32 [ %154, %152 ], [ 0, %142 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !9
  %154 = add nuw nsw i32 %153, 1
  %155 = icmp eq i32 %154, %136
  br i1 %155, label %144, label %152

156:                                              ; preds = %146
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %132) #17
  br label %157

157:                                              ; preds = %139, %156
  %158 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %130, i64 0, i32 0
  %159 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %158, align 8
  %160 = bitcast %"struct.base::internal::SlotSpanMetadata"* %159 to i8**
  %161 = load i8*, i8** %160, align 1
  %162 = icmp eq i8* %161, null
  br i1 %162, label %187, label %163, !prof !3

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %159, i64 0, i32 0
  store i8 0, i8* %3, align 1
  %165 = bitcast i8* %161 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %166 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %165, align 8
  %167 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %166, null
  %168 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %166 to i64
  br i1 %167, label %169, label %171

169:                                              ; preds = %163
  %170 = call i64 @llvm.bswap.i64(i64 %168) #17
  br label %181

171:                                              ; preds = %163
  %172 = xor i64 %168, -1
  %173 = getelementptr inbounds i8, i8* %161, i64 8
  %174 = bitcast i8* %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = icmp eq i64 %175, %172
  br i1 %176, label %178, label %177, !prof !7

177:                                              ; preds = %171
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #18
  unreachable

178:                                              ; preds = %171
  %179 = call i64 @llvm.bswap.i64(i64 %168) #17
  %180 = inttoptr i64 %179 to i8*
  call void @llvm.prefetch(i8* nonnull %180, i32 0, i32 3, i32 1) #17
  br label %181

181:                                              ; preds = %178, %169
  %182 = phi i64 [ %170, %169 ], [ %179, %178 ]
  %183 = inttoptr i64 %182 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %183, %"class.base::internal::PartitionFreelistEntry"** %164, align 1
  %184 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %159, i64 0, i32 3
  %185 = load i16, i16* %184, align 1
  %186 = add i16 %185, 1
  store i16 %186, i16* %184, align 1
  br label %189

187:                                              ; preds = %157
  %188 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %130, %"struct.base::PartitionRoot"* %6, i32 0, i64 %0, i64 16384, i8* nonnull %3) #17
  br label %189

189:                                              ; preds = %187, %181
  %190 = phi i8* [ %161, %181 ], [ %188, %187 ]
  %191 = atomicrmw xchg i32* %133, i32 0 release
  %192 = icmp eq i32 %191, 2
  br i1 %192, label %193, label %260, !prof !3

193:                                              ; preds = %189
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %132) #17
  br label %260

194:                                              ; preds = %42
  %195 = zext i16 %33 to i64
  %196 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %6, i64 0, i32 10, i64 %195
  %197 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %6, i64 0, i32 8
  %198 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %197, i64 0, i32 0
  %199 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %197, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %200

200:                                              ; preds = %212, %194
  %201 = phi i32 [ 0, %194 ], [ %213, %212 ]
  %202 = phi i32 [ 1, %194 ], [ %216, %212 ]
  %203 = load atomic i32, i32* %199 monotonic, align 4
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %208, !prof !8

205:                                              ; preds = %200
  %206 = cmpxchg weak i32* %199, i32 0, i32 1 acquire monotonic
  %207 = extractvalue { i32, i1 } %206, 1
  br i1 %207, label %223, label %208, !prof !7

208:                                              ; preds = %205, %200
  %209 = icmp sgt i32 %202, 0
  br i1 %209, label %218, label %212

210:                                              ; preds = %218
  %211 = add i32 %202, %201
  br label %212

212:                                              ; preds = %210, %208
  %213 = phi i32 [ %201, %208 ], [ %211, %210 ]
  %214 = shl i32 %202, 1
  %215 = icmp slt i32 %214, 64
  %216 = select i1 %215, i32 %214, i32 64
  %217 = icmp slt i32 %213, 1000
  br i1 %217, label %200, label %222

218:                                              ; preds = %208, %218
  %219 = phi i32 [ %220, %218 ], [ 0, %208 ]
  call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !9
  %220 = add nuw nsw i32 %219, 1
  %221 = icmp eq i32 %220, %202
  br i1 %221, label %210, label %218

222:                                              ; preds = %212
  call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %198) #17
  br label %223

223:                                              ; preds = %205, %222
  %224 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %196, i64 0, i32 0
  %225 = load %"struct.base::internal::SlotSpanMetadata"*, %"struct.base::internal::SlotSpanMetadata"** %224, align 8
  %226 = bitcast %"struct.base::internal::SlotSpanMetadata"* %225 to i8**
  %227 = load i8*, i8** %226, align 1
  %228 = icmp eq i8* %227, null
  br i1 %228, label %253, label %229, !prof !3

229:                                              ; preds = %223
  %230 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %225, i64 0, i32 0
  store i8 0, i8* %3, align 1
  %231 = bitcast i8* %227 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  %232 = load %"struct.base::internal::EncodedPartitionFreelistEntry"*, %"struct.base::internal::EncodedPartitionFreelistEntry"** %231, align 8
  %233 = icmp eq %"struct.base::internal::EncodedPartitionFreelistEntry"* %232, null
  %234 = ptrtoint %"struct.base::internal::EncodedPartitionFreelistEntry"* %232 to i64
  br i1 %233, label %235, label %237

235:                                              ; preds = %229
  %236 = call i64 @llvm.bswap.i64(i64 %234) #17
  br label %247

237:                                              ; preds = %229
  %238 = xor i64 %234, -1
  %239 = getelementptr inbounds i8, i8* %227, i64 8
  %240 = bitcast i8* %239 to i64*
  %241 = load i64, i64* %240, align 8
  %242 = icmp eq i64 %241, %238
  br i1 %242, label %244, label %243, !prof !7

243:                                              ; preds = %237
  call fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() #18
  unreachable

244:                                              ; preds = %237
  %245 = call i64 @llvm.bswap.i64(i64 %234) #17
  %246 = inttoptr i64 %245 to i8*
  call void @llvm.prefetch(i8* nonnull %246, i32 0, i32 3, i32 1) #17
  br label %247

247:                                              ; preds = %244, %235
  %248 = phi i64 [ %236, %235 ], [ %245, %244 ]
  %249 = inttoptr i64 %248 to %"class.base::internal::PartitionFreelistEntry"*
  store %"class.base::internal::PartitionFreelistEntry"* %249, %"class.base::internal::PartitionFreelistEntry"** %230, align 1
  %250 = getelementptr inbounds %"struct.base::internal::SlotSpanMetadata", %"struct.base::internal::SlotSpanMetadata"* %225, i64 0, i32 3
  %251 = load i16, i16* %250, align 1
  %252 = add i16 %251, 1
  store i16 %252, i16* %250, align 1
  br label %255

253:                                              ; preds = %223
  %254 = call i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"* %196, %"struct.base::PartitionRoot"* %6, i32 0, i64 %0, i64 16384, i8* nonnull %3) #17
  br label %255

255:                                              ; preds = %253, %247
  %256 = phi i8* [ %227, %247 ], [ %254, %253 ]
  %257 = atomicrmw xchg i32* %199, i32 0 release
  %258 = icmp eq i32 %257, 2
  br i1 %258, label %259, label %260, !prof !3

259:                                              ; preds = %255
  call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %198) #17
  br label %260

260:                                              ; preds = %259, %255, %193, %189
  %261 = phi i8* [ %190, %189 ], [ %190, %193 ], [ %256, %255 ], [ %256, %259 ]
  %262 = icmp eq i8* %261, null
  br i1 %262, label %265, label %263, !prof !3

263:                                              ; preds = %260, %123
  %264 = phi i8* [ %261, %260 ], [ %124, %123 ]
  br label %265

265:                                              ; preds = %263, %260
  %266 = phi i8* [ null, %260 ], [ %264, %263 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #17
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #17
  store i8* %266, i8** %5, align 8
  br i1 %10, label %267, label %269

267:                                              ; preds = %265, %13
  %268 = phi i8* [ %14, %13 ], [ %266, %265 ]
  call void @_ZN4base19PartitionAllocHooks31AllocationObserverHookIfEnabledEPvmPKc(i8* %268, i64 %0, i8* %1) #17
  br label %269

269:                                              ; preds = %267, %265
  %270 = load i8*, i8** %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #17
  ret i8* %270
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN3WTF10Partitions16BufferTryReallocEPvmPKc(i8*, i64, i8*) local_unnamed_addr #0 align 2 {
  %4 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  %5 = tail call i8* @_ZN4base13PartitionRootILb1EE12ReallocFlagsEiPvmPKc(%"struct.base::PartitionRoot"* %4, i32 1, i8* %0, i64 %1, i8* %2) #17
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10Partitions10BufferFreeEPv(i8*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"struct.base::internal::DeferredUnmap", align 8
  %3 = icmp eq i8* %0, null
  br i1 %3, label %242, label %4, !prof !3

4:                                                ; preds = %1
  %5 = load atomic i8, i8* getelementptr inbounds (%"struct.std::__1::atomic.50", %"struct.std::__1::atomic.50"* @_ZN4base19PartitionAllocHooks14hooks_enabled_E, i64 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 1
  %6 = and i8 %5, 1
  %7 = icmp eq i8 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  tail call void @_ZN4base19PartitionAllocHooks25FreeObserverHookIfEnabledEPv(i8* nonnull %0) #17
  %9 = tail call zeroext i1 @_ZN4base19PartitionAllocHooks25FreeOverrideHookIfEnabledEPv(i8* nonnull %0) #17
  br i1 %9, label %242, label %10

10:                                               ; preds = %8, %4
  tail call void @llvm.prefetch(i8* nonnull %0, i32 0, i32 3, i32 1) #17
  %11 = ptrtoint i8* %0 to i64
  %12 = and i64 %11, -2097152
  %13 = or i64 %12, 4096
  %14 = inttoptr i64 %13 to i8*
  %15 = lshr i64 %11, 9
  %16 = and i64 %15, 4064
  %17 = getelementptr inbounds i8, i8* %14, i64 %16
  %18 = bitcast i8* %17 to %"struct.base::internal::PartitionPage"*
  %19 = getelementptr inbounds i8, i8* %17, i64 30
  %20 = load i8, i8* %19, align 2
  %21 = zext i8 %20 to i64
  %22 = sub nsw i64 0, %21
  %23 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %18, i64 %22, i32 0
  %24 = bitcast %union.anon.60* %23 to %"struct.base::internal::SlotSpanMetadata"*
  %25 = bitcast %union.anon.60* %23 to i8*
  tail call void @llvm.prefetch(i8* %25, i32 0, i32 3, i32 1) #17
  %26 = ptrtoint %union.anon.60* %23 to i64
  %27 = and i64 %26, -4096
  %28 = inttoptr i64 %27 to %"struct.base::internal::PartitionSuperPageExtentEntry"*
  %29 = getelementptr inbounds %"struct.base::internal::PartitionSuperPageExtentEntry", %"struct.base::internal::PartitionSuperPageExtentEntry"* %28, i64 0, i32 0
  %30 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** %29, align 4096
  %31 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 0
  %32 = load i8, i8* %31, align 8
  %33 = icmp eq i8 %32, 2
  br i1 %33, label %34, label %103, !prof !3

34:                                               ; preds = %10
  %35 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) acquire, align 8
  %36 = icmp eq i8 %35, 2
  br i1 %36, label %37, label %38, !prof !3

37:                                               ; preds = %34
  tail call void @_ZN4base8internal6PCScan8JoinScanEv() #17
  br label %38

38:                                               ; preds = %37, %34
  %39 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %18, i64 %22, i32 0, i32 1, i64 8
  %40 = bitcast i8* %39 to %"struct.base::internal::PartitionBucket"**
  %41 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %40, align 1
  %42 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 10, i64 0
  %43 = icmp ugt %"struct.base::internal::PartitionBucket"* %42, %41
  %44 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 11
  %45 = icmp ult %"struct.base::internal::PartitionBucket"* %44, %41
  %46 = or i1 %43, %45
  br i1 %46, label %103, label %47, !prof !3

47:                                               ; preds = %38
  %48 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %18, i64 %22, i32 0, i32 1, i64 21
  %49 = load i8, i8* %48, align 1, !range !5
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %55, !prof !7

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %41, i64 0, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  br label %62

55:                                               ; preds = %47
  %56 = bitcast %union.anon.60* %23 to %"struct.base::internal::PartitionPage"*
  %57 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %56, i64 1, i32 0, i32 0, i32 0
  %58 = load i64, i64* %57, align 1
  %59 = getelementptr inbounds %"struct.base::internal::PartitionBucket", %"struct.base::internal::PartitionBucket"* %41, i64 0, i32 3
  %60 = load i32, i32* %59, align 8
  %61 = zext i32 %60 to i64
  br label %62

62:                                               ; preds = %55, %51
  %63 = phi i64 [ %54, %51 ], [ %61, %55 ]
  %64 = phi i64 [ %54, %51 ], [ %58, %55 ]
  %65 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %66 = inttoptr i64 %12 to i8*
  %67 = and i64 %65, 1
  %68 = icmp eq i64 %67, 0
  %69 = select i1 %68, i64 16384, i64 32768
  %70 = getelementptr inbounds i8, i8* %66, i64 %69
  %71 = bitcast i8* %70 to %"class.base::internal::ObjectBitmap"*
  %72 = lshr i64 %11, 4
  %73 = lshr i64 %11, 10
  %74 = and i64 %73, 2047
  %75 = and i64 %72, 63
  %76 = shl i64 1, %75
  %77 = getelementptr inbounds %"class.base::internal::ObjectBitmap", %"class.base::internal::ObjectBitmap"* %71, i64 0, i32 0, i32 0, i64 %74
  %78 = atomicrmw or i64* %77, i64 %76 monotonic
  %79 = and i64 %78, %76
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %82, label %81, !prof !7

81:                                               ; preds = %62
  notail call void @_ZN4base8internal17DoubleFreeAttemptEv() #18
  unreachable

82:                                               ; preds = %62
  %83 = atomicrmw add i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0), i64 %63 monotonic
  %84 = add i64 %83, %63
  %85 = load atomic i64, i64* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %86 = icmp ugt i64 %84, %85
  br i1 %86, label %87, label %93

87:                                               ; preds = %82
  %88 = load %"class.base::internal::PCScanSchedulingBackend"*, %"class.base::internal::PCScanSchedulingBackend"** getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 0, i32 2), align 8
  %89 = bitcast %"class.base::internal::PCScanSchedulingBackend"* %88 to i1 (%"class.base::internal::PCScanSchedulingBackend"*)***
  %90 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)**, i1 (%"class.base::internal::PCScanSchedulingBackend"*)*** %89, align 8
  %91 = load i1 (%"class.base::internal::PCScanSchedulingBackend"*)*, i1 (%"class.base::internal::PCScanSchedulingBackend"*)** %90, align 8
  %92 = tail call zeroext i1 %91(%"class.base::internal::PCScanSchedulingBackend"* %88) #17
  br label %93

93:                                               ; preds = %87, %82
  %94 = phi i1 [ false, %82 ], [ %92, %87 ]
  %95 = load i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 2), align 1
  %96 = icmp eq i8 %95, 1
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %0, i8 0, i64 %64, i1 false) #17
  br label %98

98:                                               ; preds = %97, %93
  br i1 %94, label %99, label %242, !prof !3

99:                                               ; preds = %98
  %100 = load atomic i8, i8* getelementptr inbounds (%"class.base::internal::PCScan", %"class.base::internal::PCScan"* @_ZN4base8internal6PCScan9instance_E, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0) monotonic, align 8
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %102, label %242

102:                                              ; preds = %99
  tail call void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"* nonnull @_ZN4base8internal6PCScan9instance_E, i32 1) #17
  br label %242

103:                                              ; preds = %38, %10
  %104 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 2
  %105 = load i8, i8* %104, align 2, !range !5
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %175, label %107, !prof !3

107:                                              ; preds = %103
  %108 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %18, i64 %22, i32 0, i32 1, i64 8
  %109 = bitcast i8* %108 to %"struct.base::internal::PartitionBucket"**
  %110 = load %"struct.base::internal::PartitionBucket"*, %"struct.base::internal::PartitionBucket"** %109, align 1
  %111 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 10, i64 0
  %112 = icmp ule %"struct.base::internal::PartitionBucket"* %111, %110
  %113 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 11
  %114 = icmp uge %"struct.base::internal::PartitionBucket"* %113, %110
  %115 = and i1 %114, %112
  %116 = ptrtoint %"struct.base::internal::PartitionBucket"* %110 to i64
  br i1 %115, label %117, label %175, !prof !7

117:                                              ; preds = %107
  %118 = load i32, i32* @_ZN4base8internal18g_thread_cache_keyE, align 4
  %119 = tail call i8* @pthread_getspecific(i32 %118) #17
  %120 = bitcast i8* %119 to %"class.base::internal::ThreadCache"*
  %121 = icmp ugt i8* %119, inttoptr (i64 1 to i8*)
  br i1 %121, label %122, label %175, !prof !7

122:                                              ; preds = %117
  %123 = ptrtoint %"struct.base::internal::PartitionBucket"* %111 to i64
  %124 = sub i64 %116, %123
  %125 = sdiv exact i64 %124, 40
  %126 = getelementptr inbounds i8, i8* %119, i64 1480
  %127 = bitcast i8* %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = add i64 %128, 1
  store i64 %129, i64* %127, align 8
  %130 = load i16, i16* @_ZN4base8internal11ThreadCache28largest_active_bucket_index_E, align 2
  %131 = zext i16 %130 to i64
  %132 = icmp ugt i64 %125, %131
  br i1 %132, label %133, label %138, !prof !3

133:                                              ; preds = %122
  %134 = getelementptr inbounds i8, i8* %119, i64 1496
  %135 = bitcast i8* %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %135, align 8
  br label %175

138:                                              ; preds = %122
  %139 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %120, i64 0, i32 0, i64 %125
  %140 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = tail call i64 @llvm.bswap.i64(i64 %141) #17
  %143 = inttoptr i64 %142 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %144 = bitcast i8* %0 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %143, %"struct.base::internal::EncodedPartitionFreelistEntry"** %144, align 8
  %145 = xor i64 %142, -1
  %146 = getelementptr inbounds i8, i8* %0, i64 8
  %147 = bitcast i8* %146 to i64*
  store i64 %145, i64* %147, align 8
  %148 = bitcast %"struct.base::internal::ThreadCache::Bucket"* %139 to i8**
  store i8* %0, i8** %148, align 8
  %149 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %120, i64 0, i32 0, i64 %125, i32 1
  %150 = load i8, i8* %149, align 8
  %151 = add i8 %150, 1
  store i8 %151, i8* %149, align 8
  %152 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %120, i64 0, i32 0, i64 %125, i32 3
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i64
  %155 = getelementptr inbounds i8, i8* %119, i64 1424
  %156 = bitcast i8* %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = add i64 %157, %154
  store i64 %158, i64* %156, align 8
  %159 = getelementptr inbounds i8, i8* %119, i64 1488
  %160 = bitcast i8* %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = add i64 %161, 1
  store i64 %162, i64* %160, align 8
  %163 = getelementptr inbounds %"class.base::internal::ThreadCache", %"class.base::internal::ThreadCache"* %120, i64 0, i32 0, i64 %125, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i8, i8* %163 monotonic, align 1
  %165 = icmp ugt i8 %151, %164
  br i1 %165, label %166, label %169, !prof !3

166:                                              ; preds = %138
  %167 = lshr i8 %164, 1
  %168 = zext i8 %167 to i64
  tail call void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"* %120, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16) %139, i64 %168) #17
  br label %169

169:                                              ; preds = %166, %138
  %170 = getelementptr inbounds i8, i8* %119, i64 1432
  %171 = load atomic i8, i8* %170 monotonic, align 1
  %172 = and i8 %171, 1
  %173 = icmp eq i8 %172, 0
  br i1 %173, label %242, label %174, !prof !7

174:                                              ; preds = %169
  tail call void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"* %120) #17
  br label %242

175:                                              ; preds = %133, %117, %107, %103
  %176 = bitcast %"struct.base::internal::DeferredUnmap"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %176) #17
  %177 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %2, i64 0, i32 0
  %178 = getelementptr inbounds %"struct.base::internal::DeferredUnmap", %"struct.base::internal::DeferredUnmap"* %2, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %176, i8 0, i64 16, i1 false) #17
  %179 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %30, i64 0, i32 8
  %180 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %179, i64 0, i32 0
  %181 = getelementptr inbounds %"class.base::internal::MaybeSpinLock", %"class.base::internal::MaybeSpinLock"* %179, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %182

182:                                              ; preds = %194, %175
  %183 = phi i32 [ 0, %175 ], [ %195, %194 ]
  %184 = phi i32 [ 1, %175 ], [ %198, %194 ]
  %185 = load atomic i32, i32* %181 monotonic, align 4
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %187, label %190, !prof !8

187:                                              ; preds = %182
  %188 = cmpxchg weak i32* %181, i32 0, i32 1 acquire monotonic
  %189 = extractvalue { i32, i1 } %188, 1
  br i1 %189, label %205, label %190, !prof !7

190:                                              ; preds = %187, %182
  %191 = icmp sgt i32 %184, 0
  br i1 %191, label %200, label %194

192:                                              ; preds = %200
  %193 = add i32 %184, %183
  br label %194

194:                                              ; preds = %192, %190
  %195 = phi i32 [ %183, %190 ], [ %193, %192 ]
  %196 = shl i32 %184, 1
  %197 = icmp slt i32 %196, 64
  %198 = select i1 %197, i32 %196, i32 64
  %199 = icmp slt i32 %195, 1000
  br i1 %199, label %182, label %204

200:                                              ; preds = %190, %200
  %201 = phi i32 [ %202, %200 ], [ 0, %190 ]
  tail call void asm sideeffect "pause", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !9
  %202 = add nuw nsw i32 %201, 1
  %203 = icmp eq i32 %202, %184
  br i1 %203, label %192, label %200

204:                                              ; preds = %194
  tail call void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"* %180) #17
  br label %205

205:                                              ; preds = %187, %204
  %206 = bitcast %union.anon.60* %23 to i8**
  %207 = load i8*, i8** %206, align 1
  %208 = icmp eq i8* %207, %0
  br i1 %208, label %211, label %209, !prof !3

209:                                              ; preds = %205
  %210 = ptrtoint i8* %207 to i64
  br label %214

211:                                              ; preds = %205
  tail call void @_ZN7logging8RawCheckEPKc(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.12, i64 0, i64 0)) #17
  %212 = getelementptr inbounds %union.anon.60, %union.anon.60* %23, i64 0, i32 0, i32 0
  %213 = load i64, i64* %212, align 1
  br label %214

214:                                              ; preds = %211, %209
  %215 = phi i64 [ %210, %209 ], [ %213, %211 ]
  %216 = tail call i64 @llvm.bswap.i64(i64 %215) #17
  %217 = inttoptr i64 %216 to %"struct.base::internal::EncodedPartitionFreelistEntry"*
  %218 = bitcast i8* %0 to %"struct.base::internal::EncodedPartitionFreelistEntry"**
  store %"struct.base::internal::EncodedPartitionFreelistEntry"* %217, %"struct.base::internal::EncodedPartitionFreelistEntry"** %218, align 8
  %219 = xor i64 %216, -1
  %220 = getelementptr inbounds i8, i8* %0, i64 8
  %221 = bitcast i8* %220 to i64*
  store i64 %219, i64* %221, align 8
  store i8* %0, i8** %206, align 1
  %222 = getelementptr inbounds %"struct.base::internal::PartitionPage", %"struct.base::internal::PartitionPage"* %18, i64 %22, i32 0, i32 1, i64 16
  %223 = bitcast i8* %222 to i16*
  %224 = load i16, i16* %223, align 1
  %225 = add i16 %224, -1
  store i16 %225, i16* %223, align 1
  %226 = icmp slt i16 %225, 1
  br i1 %226, label %227, label %231, !prof !3

227:                                              ; preds = %214
  %228 = tail call { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"* %24) #17
  %229 = extractvalue { i8*, i64 } %228, 0
  %230 = extractvalue { i8*, i64 } %228, 1
  br label %231

231:                                              ; preds = %227, %214
  %232 = phi i8* [ %229, %227 ], [ null, %214 ]
  %233 = phi i64 [ %230, %227 ], [ 0, %214 ]
  store i8* %232, i8** %177, align 8
  store i64 %233, i64* %178, align 8
  %234 = atomicrmw xchg i32* %181, i32 0 release
  %235 = icmp eq i32 %234, 2
  br i1 %235, label %236, label %237, !prof !3

236:                                              ; preds = %231
  tail call void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"* %180) #17
  br label %237

237:                                              ; preds = %236, %231
  %238 = load i8*, i8** %177, align 8
  %239 = icmp eq i8* %238, null
  br i1 %239, label %241, label %240, !prof !7

240:                                              ; preds = %237
  call void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"* nonnull %2) #17
  br label %241

241:                                              ; preds = %240, %237
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %176) #17
  br label %242

242:                                              ; preds = %1, %8, %98, %99, %102, %169, %174, %241
  ret void
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #7 align 2 {
  %2 = load %"struct.base::PartitionRoot"*, %"struct.base::PartitionRoot"** @_ZN3WTF10Partitions12buffer_root_E, align 8
  %3 = tail call i64 @llvm.ctlz.i64(i64 %0, i1 false) #17, !range !4
  %4 = sub nuw nsw i64 64, %3
  %5 = and i64 %4, 255
  %6 = getelementptr inbounds [65 x i8], [65 x i8]* @_ZN4base12_GLOBAL__N_116kOrderIndexShiftE, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i64
  %9 = lshr i64 %0, %8
  %10 = and i64 %9, 7
  %11 = getelementptr inbounds [65 x i64], [65 x i64]* @_ZN4base12_GLOBAL__N_118kOrderSubIndexMaskE, i64 0, i64 %5
  %12 = load i64, i64* %11, align 8
  %13 = and i64 %12, %0
  %14 = shl nuw nsw i64 %5, 3
  %15 = or i64 %10, %14
  %16 = icmp ne i64 %13, 0
  %17 = zext i1 %16 to i64
  %18 = add nuw nsw i64 %15, %17
  %19 = getelementptr inbounds { [128 x i64], [521 x i16] }, { [128 x i64], [521 x i16] }* @_ZZN4base8internal17BucketIndexLookup8GetIndexEmE6lookup, i64 0, i32 1, i64 %18
  %20 = load i16, i16* %19, align 2
  %21 = zext i16 %20 to i64
  %22 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %2, i64 0, i32 10, i64 %21, i32 4
  %23 = load i32, i32* %22, align 4
  %24 = and i32 %23, 255
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %26, !prof !3

26:                                               ; preds = %1
  %27 = getelementptr inbounds %"struct.base::PartitionRoot", %"struct.base::PartitionRoot"* %2, i64 0, i32 10, i64 %21, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = zext i32 %28 to i64
  br label %35

30:                                               ; preds = %1
  %31 = icmp ugt i64 %0, 2145386496
  br i1 %31, label %35, label %32

32:                                               ; preds = %30
  %33 = add nuw nsw i64 %0, 4095
  %34 = and i64 %33, -4096
  br label %35

35:                                               ; preds = %26, %30, %32
  %36 = phi i64 [ %29, %26 ], [ %0, %30 ], [ %34, %32 ]
  ret i64 %36
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias i8* @_ZN3WTF10Partitions10FastMallocEmPKc(i64, i8* nocapture readnone) local_unnamed_addr #8 align 2 {
  %3 = tail call noalias i8* @malloc(i64 %0) #17
  ret i8* %3
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #9

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8* nocapture readnone) local_unnamed_addr #8 align 2 {
  %3 = tail call noalias i8* @calloc(i64 %0, i64 1) #17
  ret i8* %3
}

; Function Attrs: nofree nounwind
declare noalias i8* @calloc(i64, i64) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3WTF10Partitions8FastFreeEPv(i8* nocapture) local_unnamed_addr #0 align 2 {
  tail call void @free(i8* %0) #17
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare i32 @_ZN4base21GetAllocPageErrorCodeEv() local_unnamed_addr #2

declare void @_ZN4base5debug5AliasEPKv(i8*) local_unnamed_addr #2

declare i64 @_ZN4base18GetTotalMappedSizeEv() local_unnamed_addr #2

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL28PartitionsOutOfMemoryUsing2GEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 208, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 2147483648, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL28PartitionsOutOfMemoryUsing1GEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 215, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 1073741824, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL30PartitionsOutOfMemoryUsing512MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 222, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 536870912, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL30PartitionsOutOfMemoryUsing256MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 229, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 268435456, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL30PartitionsOutOfMemoryUsing128MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 236, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 134217728, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL29PartitionsOutOfMemoryUsing64MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 243, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 67108864, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL29PartitionsOutOfMemoryUsing32MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 250, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 33554432, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL29PartitionsOutOfMemoryUsing16MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 257, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 16777216, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN3WTFL37PartitionsOutOfMemoryUsingLessThan16MEm(i64) unnamed_addr #10 {
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #17
  store i32 264, i32* %2, align 4
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %4) #17
  %5 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #17
  store i64 16777215, i64* %3, align 8
  call void @_ZN4base5debug5AliasEPKv(i8* nonnull %5) #17
  notail call fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64 %0) #19
  unreachable
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN3WTF12_GLOBAL__N_129LightPartitionStatsDumperImpl19PartitionDumpTotalsEPKcPKN4base20PartitionMemoryStatsE(%"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* nocapture, i8* nocapture readnone, %"struct.base::PartitionMemoryStats"* nocapture readonly) unnamed_addr #6 align 2 {
  %4 = getelementptr inbounds %"struct.base::PartitionMemoryStats", %"struct.base::PartitionMemoryStats"* %2, i64 0, i32 3
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl", %"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* %0, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = add i64 %7, %5
  store i64 %8, i64* %6, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN3WTF12_GLOBAL__N_129LightPartitionStatsDumperImpl25PartitionsDumpBucketStatsEPKcPKN4base26PartitionBucketMemoryStatsE(%"class.WTF::(anonymous namespace)::LightPartitionStatsDumperImpl"* nocapture, i8* nocapture, %"struct.base::PartitionBucketMemoryStats"* nocapture) unnamed_addr #11 align 2 {
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #12

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_110OnNoMemoryEm(i64) unnamed_addr #10 {
  tail call void @_ZN4base8internal28RunPartitionAllocOomCallbackEv() #17
  tail call void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64 %0) #17
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !10
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !11
  unreachable
}

declare void @_ZN4base8internal28RunPartitionAllocOomCallbackEv() local_unnamed_addr #2

declare void @_ZN4base27TerminateBecauseOutOfMemoryEm(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN4base16TaskRunnerTraits8DestructEPKNS_10TaskRunnerE(%"class.base::TaskRunner"*) local_unnamed_addr #2

declare zeroext i1 @_ZN4base19PartitionAllocHooks31AllocationOverrideHookIfEnabledEPPvimPKc(i8**, i32, i64, i8*) local_unnamed_addr #2

declare void @_ZN4base19PartitionAllocHooks31AllocationObserverHookIfEnabledEPvmPKc(i8*, i64, i8*) local_unnamed_addr #2

declare void @_ZN7logging8RawCheckEPKc(i8*) local_unnamed_addr #2

declare i8* @_ZN4base13PartitionRootILb1EE28MaybeInitThreadCacheAndAllocEtPm(%"struct.base::PartitionRoot"*, i16 zeroext, i64*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #13

declare void @_ZN4base8internal6PCScan8JoinScanEv() local_unnamed_addr #2

; Function Attrs: nounwind
declare i8* @pthread_getspecific(i32) local_unnamed_addr #5

declare void @_ZN4base8internal11ThreadCache10FillBucketEm(%"class.base::internal::ThreadCache"*, i64) local_unnamed_addr #2

; Function Attrs: noinline noreturn nounwind ssp uwtable
define internal fastcc void @_ZN4base8internal12_GLOBAL__N_126FreelistCorruptionDetectedEv() unnamed_addr #10 {
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !12
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #17, !srcloc !13
  unreachable
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind
declare void @llvm.prefetch(i8* nocapture readonly, i32 immarg, i32 immarg, i32) #14

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #13

declare void @_ZN4base8internal13SpinningMutex8LockSlowEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #2

declare i8* @_ZN4base8internal15PartitionBucketILb1EE13SlowPathAllocEPNS_13PartitionRootILb1EEEimmPb(%"struct.base::internal::PartitionBucket"*, %"struct.base::PartitionRoot"*, i32, i64, i64, i8*) local_unnamed_addr #2

declare void @_ZN4base8internal13SpinningMutex9FutexWakeEv(%"class.base::internal::SpinningMutex"*) local_unnamed_addr #2

declare i8* @_ZN4base13PartitionRootILb1EE12ReallocFlagsEiPvmPKc(%"struct.base::PartitionRoot"*, i32, i8*, i64, i8*) local_unnamed_addr #2

declare void @_ZN4base19PartitionAllocHooks25FreeObserverHookIfEnabledEPv(i8*) local_unnamed_addr #2

declare zeroext i1 @_ZN4base19PartitionAllocHooks25FreeOverrideHookIfEnabledEPv(i8*) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZN4base8internal17DoubleFreeAttemptEv() local_unnamed_addr #15

declare void @_ZN4base8internal6PCScan11PerformScanENS1_14InvocationModeE(%"class.base::internal::PCScan"*, i32) local_unnamed_addr #2

declare void @_ZN4base8internal11ThreadCache11ClearBucketERNS1_6BucketEm(%"class.base::internal::ThreadCache"*, %"struct.base::internal::ThreadCache::Bucket"* dereferenceable(16), i64) local_unnamed_addr #2

declare void @_ZN4base8internal11ThreadCache13PurgeInternalEv(%"class.base::internal::ThreadCache"*) local_unnamed_addr #2

declare { i8*, i64 } @_ZN4base8internal16SlotSpanMetadataILb1EE12FreeSlowPathEv(%"struct.base::internal::SlotSpanMetadata"*) local_unnamed_addr #2

declare void @_ZN4base8internal13DeferredUnmap5UnmapEv(%"struct.base::internal::DeferredUnmap"*) local_unnamed_addr #2

declare i64 @_ZN4base7strings8internal12SafeSNPrintfEPcmPKcPKNS1_3ArgEm(i8*, i64, i8*, %"struct.base::strings::internal::Arg"*, i64) local_unnamed_addr #2

declare void @_ZN14crash_reporter8internal18CrashKeyStringImpl3SetEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.crash_reporter::internal::CrashKeyStringImpl"*, i8*, i64) local_unnamed_addr #2

declare void @_ZN8crashpad10Annotation7SetSizeEj(%"class.crashpad::Annotation"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i1 @llvm.is.constant.i64(i64) #16

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noinline noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind readnone speculatable }
attributes #14 = { inaccessiblemem_or_argmemonly nounwind }
attributes #15 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { nounwind readnone }
attributes #17 = { nounwind }
attributes #18 = { noreturn nounwind }
attributes #19 = { noreturn }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!"branch_weights", i32 1, i32 2000}
!4 = !{i64 0, i64 65}
!5 = !{i8 0, i8 2}
!6 = !{!"branch_weights", i32 4001, i32 4000000}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{!"branch_weights", i32 2146410443, i32 1073205}
!9 = !{i32 -2142390937}
!10 = !{i32 -2141736896}
!11 = !{i32 -2141736875}
!12 = !{i32 -2142429510}
!13 = !{i32 -2142429489}
