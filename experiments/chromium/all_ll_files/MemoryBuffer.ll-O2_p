; ModuleID = '../../third_party/angle/src/common/MemoryBuffer.cpp'
source_filename = "../../third_party/angle/src/common/MemoryBuffer.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.angle::MemoryBuffer" = type { i64, i8* }
%"class.angle::ScratchBuffer" = type { i32, i32, %"class.angle::MemoryBuffer" }
%struct.Optional = type { i8, i8 }

@_ZN5angle12MemoryBufferD1Ev = hidden unnamed_addr alias void (%"class.angle::MemoryBuffer"*), void (%"class.angle::MemoryBuffer"*)* @_ZN5angle12MemoryBufferD2Ev
@_ZN5angle12MemoryBufferC1EOS0_ = hidden unnamed_addr alias void (%"class.angle::MemoryBuffer"*, %"class.angle::MemoryBuffer"*), void (%"class.angle::MemoryBuffer"*, %"class.angle::MemoryBuffer"*)* @_ZN5angle12MemoryBufferC2EOS0_
@_ZN5angle13ScratchBufferC1Ev = hidden unnamed_addr alias void (%"class.angle::ScratchBuffer"*), void (%"class.angle::ScratchBuffer"*)* @_ZN5angle13ScratchBufferC2Ev
@_ZN5angle13ScratchBufferC1Ej = hidden unnamed_addr alias void (%"class.angle::ScratchBuffer"*, i32), void (%"class.angle::ScratchBuffer"*, i32)* @_ZN5angle13ScratchBufferC2Ej
@_ZN5angle13ScratchBufferD1Ev = hidden unnamed_addr alias void (%"class.angle::ScratchBuffer"*), void (%"class.angle::ScratchBuffer"*)* @_ZN5angle13ScratchBufferD2Ev
@_ZN5angle13ScratchBufferC1EOS0_ = hidden unnamed_addr alias void (%"class.angle::ScratchBuffer"*, %"class.angle::ScratchBuffer"*), void (%"class.angle::ScratchBuffer"*, %"class.angle::ScratchBuffer"*)* @_ZN5angle13ScratchBufferC2EOS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle12MemoryBufferD2Ev(%"class.angle::MemoryBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* nonnull %3) #5
  store i8* null, i8** %2, align 8
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5angle12MemoryBuffer6resizeEm(%"class.angle::MemoryBuffer"* nocapture, i64) local_unnamed_addr #0 align 2 {
  %3 = icmp eq i64 %1, 0
  br i1 %3, label %4, label %11

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %4
  tail call void @free(i8* nonnull %6) #5
  store i8* null, i8** %5, align 8
  br label %9

9:                                                ; preds = %4, %8
  %10 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 0
  store i64 0, i64* %10, align 8
  br label %29

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %13, %1
  br i1 %14, label %29, label %15

15:                                               ; preds = %11
  %16 = tail call noalias i8* @malloc(i64 %1) #5
  %17 = icmp eq i8* %16, null
  br i1 %17, label %29, label %18

18:                                               ; preds = %15
  %19 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 1
  %20 = load i8*, i8** %19, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %28, label %22

22:                                               ; preds = %18
  %23 = icmp ugt i64 %13, %1
  %24 = select i1 %23, i64 %1, i64 %13
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %27, label %26

26:                                               ; preds = %22
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %16, i8* nonnull align 1 %20, i64 %24, i1 false) #5
  br label %27

27:                                               ; preds = %22, %26
  tail call void @free(i8* nonnull %20) #5
  br label %28

28:                                               ; preds = %18, %27
  store i8* %16, i8** %19, align 8
  store i64 %1, i64* %12, align 8
  br label %29

29:                                               ; preds = %28, %15, %11, %9
  %30 = phi i1 [ true, %9 ], [ true, %11 ], [ true, %28 ], [ false, %15 ]
  ret i1 %30
}

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5angle12MemoryBuffer4fillEh(%"class.angle::MemoryBuffer"* nocapture readonly, i8 zeroext) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = icmp sgt i64 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 1
  %8 = load i8*, i8** %7, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %8, i8 %1, i64 %4, i1 false)
  br label %9

9:                                                ; preds = %2, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle12MemoryBufferC2EOS0_(%"class.angle::MemoryBuffer"* nocapture, %"class.angle::MemoryBuffer"* nocapture dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %1, i64 0, i32 0
  %5 = bitcast %"class.angle::MemoryBuffer"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false)
  %6 = load i64, i64* %4, align 8
  store i64 %6, i64* %3, align 8
  store i64 0, i64* %4, align 8
  %7 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %1, i64 0, i32 1
  %9 = bitcast i8** %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast i8** %8 to i64*
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %9, align 8
  store i64 %10, i64* %11, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden dereferenceable(16) %"class.angle::MemoryBuffer"* @_ZN5angle12MemoryBufferaSEOS0_(%"class.angle::MemoryBuffer"* returned, %"class.angle::MemoryBuffer"* nocapture dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %1, i64 0, i32 0
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  store i64 %6, i64* %3, align 8
  store i64 %5, i64* %4, align 8
  %7 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %1, i64 0, i32 1
  %9 = bitcast i8** %7 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast i8** %8 to i64*
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %9, align 8
  store i64 %10, i64* %11, align 8
  ret %"class.angle::MemoryBuffer"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle13ScratchBufferC2Ev(%"class.angle::ScratchBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  store i32 1000, i32* %2, align 8
  %3 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  store i32 1000, i32* %3, align 4
  %4 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2
  %5 = bitcast %"class.angle::MemoryBuffer"* %4 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle13ScratchBufferC2Ej(%"class.angle::ScratchBuffer"* nocapture, i32) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  store i32 %1, i32* %3, align 8
  %4 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  store i32 %1, i32* %4, align 4
  %5 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2
  %6 = bitcast %"class.angle::MemoryBuffer"* %5 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 16, i1 false) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle13ScratchBufferD2Ev(%"class.angle::ScratchBuffer"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @free(i8* nonnull %3) #5
  store i8* null, i8** %2, align 8
  br label %6

6:                                                ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle13ScratchBufferC2EOS0_(%"class.angle::ScratchBuffer"* nocapture, %"class.angle::ScratchBuffer"* nocapture dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2
  %4 = bitcast %"class.angle::MemoryBuffer"* %3 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 16, i1 false) #5
  %5 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %6 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 0
  %7 = load i32, i32* %5, align 4
  %8 = load i32, i32* %6, align 4
  store i32 %8, i32* %5, align 4
  store i32 %7, i32* %6, align 4
  %9 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 1
  %11 = load i32, i32* %9, align 4
  %12 = load i32, i32* %10, align 4
  store i32 %12, i32* %9, align 4
  store i32 %11, i32* %10, align 4
  %13 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 0
  %14 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %15 = bitcast i8** %14 to i64*
  %16 = bitcast i64* %13 to <2 x i64>*
  %17 = load <2 x i64>, <2 x i64>* %16, align 8
  %18 = bitcast i64* %13 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %18, align 8
  %19 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 2, i32 0
  %20 = load i64, i64* %19, align 8
  store i64 %20, i64* %13, align 8
  store i64 0, i64* %19, align 8
  %21 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 2, i32 1
  %22 = load i64, i64* %15, align 8
  %23 = bitcast i8** %21 to i64*
  %24 = load i64, i64* %23, align 8
  store i64 %24, i64* %15, align 8
  %25 = bitcast i64* %19 to <2 x i64>*
  store <2 x i64> %17, <2 x i64>* %25, align 8
  %26 = icmp eq i64 %22, 0
  br i1 %26, label %29, label %27

27:                                               ; preds = %2
  %28 = inttoptr i64 %22 to i8*
  tail call void @free(i8* nonnull %28) #5
  br label %29

29:                                               ; preds = %2, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.angle::ScratchBuffer"* @_ZN5angle13ScratchBufferaSEOS0_(%"class.angle::ScratchBuffer"* returned, %"class.angle::ScratchBuffer"* nocapture dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 0
  %5 = load i32, i32* %3, align 4
  %6 = load i32, i32* %4, align 4
  store i32 %6, i32* %3, align 4
  store i32 %5, i32* %4, align 4
  %7 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 1
  %9 = load i32, i32* %7, align 4
  %10 = load i32, i32* %8, align 4
  store i32 %10, i32* %7, align 4
  store i32 %9, i32* %8, align 4
  %11 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 0
  %12 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %13 = bitcast i8** %12 to i64*
  %14 = bitcast i64* %11 to <2 x i64>*
  %15 = load <2 x i64>, <2 x i64>* %14, align 8
  %16 = bitcast i64* %11 to <2 x i64>*
  store <2 x i64> zeroinitializer, <2 x i64>* %16, align 8
  %17 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 2, i32 0
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %11, align 8
  store i64 0, i64* %17, align 8
  %19 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %1, i64 0, i32 2, i32 1
  %20 = load i64, i64* %13, align 8
  %21 = bitcast i8** %19 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %13, align 8
  %23 = bitcast i64* %17 to <2 x i64>*
  store <2 x i64> %15, <2 x i64>* %23, align 8
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %2
  %26 = inttoptr i64 %20 to i8*
  tail call void @free(i8* nonnull %26) #5
  br label %27

27:                                               ; preds = %2, %25
  ret %"class.angle::ScratchBuffer"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5angle13ScratchBuffer3getEmPPNS_12MemoryBufferE(%"class.angle::ScratchBuffer"*, i64, %"class.angle::MemoryBuffer"** nocapture) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.Optional, align 1
  %5 = getelementptr inbounds %struct.Optional, %struct.Optional* %4, i64 0, i32 0
  store i8 0, i8* %5, align 1, !alias.scope !2
  %6 = getelementptr inbounds %struct.Optional, %struct.Optional* %4, i64 0, i32 1
  store i8 0, i8* %6, align 1, !alias.scope !2
  %7 = call zeroext i1 @_ZN5angle13ScratchBuffer7getImplEmPPNS_12MemoryBufferE8OptionalIhE(%"class.angle::ScratchBuffer"* %0, i64 %1, %"class.angle::MemoryBuffer"** %2, %struct.Optional* nonnull %4)
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5angle13ScratchBuffer7getImplEmPPNS_12MemoryBufferE8OptionalIhE(%"class.angle::ScratchBuffer"*, i64, %"class.angle::MemoryBuffer"** nocapture, %struct.Optional* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2
  %6 = getelementptr inbounds %"class.angle::MemoryBuffer", %"class.angle::MemoryBuffer"* %5, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, %1
  br i1 %8, label %9, label %13

9:                                                ; preds = %4
  %10 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  store i32 %11, i32* %12, align 4
  br label %59

13:                                               ; preds = %4
  %14 = icmp ugt i64 %7, %1
  br i1 %14, label %15, label %31

15:                                               ; preds = %13
  %16 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %31, label %19

19:                                               ; preds = %15
  %20 = add i32 %17, -1
  store i32 %20, i32* %16, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %31

22:                                               ; preds = %19
  %23 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %24 = load i32, i32* %23, align 8
  store i32 %24, i32* %16, align 4
  %25 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 0
  %26 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  tail call void @free(i8* nonnull %27) #5
  store i8* null, i8** %26, align 8
  br label %30

30:                                               ; preds = %29, %22
  store i64 0, i64* %25, align 8
  br label %31

31:                                               ; preds = %30, %19, %15, %13
  %32 = phi i64 [ 0, %30 ], [ %7, %19 ], [ %7, %15 ], [ %7, %13 ]
  %33 = icmp ult i64 %32, %1
  br i1 %33, label %34, label %59

34:                                               ; preds = %31
  %35 = tail call noalias i8* @malloc(i64 %1) #5
  %36 = icmp eq i8* %35, null
  br i1 %36, label %60, label %37

37:                                               ; preds = %34
  %38 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %39 = load i8*, i8** %38, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %47, label %41

41:                                               ; preds = %37
  %42 = icmp ugt i64 %32, %1
  %43 = select i1 %42, i64 %1, i64 %32
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %35, i8* nonnull align 1 %39, i64 %43, i1 false) #5
  br label %46

46:                                               ; preds = %45, %41
  tail call void @free(i8* nonnull %39) #5
  br label %47

47:                                               ; preds = %37, %46
  store i8* %35, i8** %38, align 8
  store i64 %1, i64* %6, align 8
  %48 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.Optional, %struct.Optional* %3, i64 0, i32 0
  %52 = load i8, i8* %51, align 1, !range !5
  %53 = icmp ne i8 %52, 0
  %54 = icmp sgt i64 %1, 0
  %55 = and i1 %53, %54
  br i1 %55, label %56, label %59

56:                                               ; preds = %47
  %57 = getelementptr inbounds %struct.Optional, %struct.Optional* %3, i64 0, i32 1
  %58 = load i8, i8* %57, align 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %35, i8 %58, i64 %1, i1 false) #5
  br label %59

59:                                               ; preds = %31, %56, %47, %9
  store %"class.angle::MemoryBuffer"* %5, %"class.angle::MemoryBuffer"** %2, align 8
  br label %60

60:                                               ; preds = %59, %34
  %61 = phi i1 [ false, %34 ], [ true, %59 ]
  ret i1 %61
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5angle13ScratchBuffer14getInitializedEmPPNS_12MemoryBufferEh(%"class.angle::ScratchBuffer"*, i64, %"class.angle::MemoryBuffer"** nocapture, i8 zeroext) local_unnamed_addr #0 align 2 {
  %5 = alloca %struct.Optional, align 1
  %6 = getelementptr inbounds %struct.Optional, %struct.Optional* %5, i64 0, i32 0
  store i8 1, i8* %6, align 1
  %7 = getelementptr inbounds %struct.Optional, %struct.Optional* %5, i64 0, i32 1
  store i8 %3, i8* %7, align 1
  %8 = call zeroext i1 @_ZN5angle13ScratchBuffer7getImplEmPPNS_12MemoryBufferE8OptionalIhE(%"class.angle::ScratchBuffer"* %0, i64 %1, %"class.angle::MemoryBuffer"** %2, %struct.Optional* nonnull %5)
  ret i1 %8
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle13ScratchBuffer4tickEv(%"class.angle::ScratchBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %20, label %5

5:                                                ; preds = %1
  %6 = add i32 %3, -1
  store i32 %6, i32* %2, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %5
  %9 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  store i32 %10, i32* %2, align 4
  %11 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %8
  %15 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  tail call void @free(i8* nonnull %16) #5
  store i8* null, i8** %15, align 8
  br label %19

19:                                               ; preds = %18, %14
  store i64 0, i64* %11, align 8
  br label %20

20:                                               ; preds = %19, %8, %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5angle13ScratchBuffer5clearEv(%"class.angle::ScratchBuffer"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 1
  store i32 %3, i32* %4, align 4
  %5 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %14, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.angle::ScratchBuffer", %"class.angle::ScratchBuffer"* %0, i64 0, i32 2, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %13, label %12

12:                                               ; preds = %8
  tail call void @free(i8* nonnull %10) #5
  store i8* null, i8** %9, align 8
  br label %13

13:                                               ; preds = %8, %12
  store i64 0, i64* %5, align 8
  br label %14

14:                                               ; preds = %1, %13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN8OptionalIhE7InvalidEv: argument 0"}
!4 = distinct !{!4, !"_ZN8OptionalIhE7InvalidEv"}
!5 = !{i8 0, i8 2}
