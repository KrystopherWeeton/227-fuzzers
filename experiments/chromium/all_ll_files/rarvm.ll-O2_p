; ModuleID = '../../third_party/unrar/src/rarvm.cpp'
source_filename = "../../third_party/unrar/src/rarvm.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"
module asm ".symver fmemopen, fmemopen@GLIBC_2.2.5"
module asm ".symver glob, glob@GLIBC_2.2.5"
module asm ".symver glob64, glob64@GLIBC_2.2.5"
module asm ".symver quick_exit, quick_exit@GLIBC_2.10"

%struct.StandardFilters = type { i32, i32, i32 }
%class.RarVM = type { i8*, [8 x i32] }
%struct.VM_PreparedProgram = type <{ i32, [7 x i32], i8*, i32, [4 x i8] }>
%class.BitInput = type { i32, i32, i8, i8* }

@_ZZN5RarVM7PrepareEPhjP18VM_PreparedProgramE7StdList = internal unnamed_addr constant [6 x %struct.StandardFilters] [%struct.StandardFilters { i32 53, i32 -1386780537, i32 1 }, %struct.StandardFilters { i32 57, i32 1020781950, i32 2 }, %struct.StandardFilters { i32 120, i32 929663295, i32 3 }, %struct.StandardFilters { i32 29, i32 235276157, i32 6 }, %struct.StandardFilters { i32 149, i32 472669640, i32 4 }, %struct.StandardFilters { i32 216, i32 -1132075263, i32 5 }], align 16
@_ZZN5RarVM21ExecuteStandardFilterE18VM_StandardFiltersE5Masks = internal unnamed_addr constant [16 x i8] c"\04\04\06\06\00\00\07\07\04\04\00\00\04\04\00\00", align 16

@_ZN5RarVMC1Ev = hidden unnamed_addr alias void (%class.RarVM*), void (%class.RarVM*)* @_ZN5RarVMC2Ev
@_ZN5RarVMD1Ev = hidden unnamed_addr alias void (%class.RarVM*), void (%class.RarVM*)* @_ZN5RarVMD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5RarVMC2Ev(%class.RarVM* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  store i8* null, i8** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5RarVMD2Ev(%class.RarVM* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @_ZdaPv(i8* nonnull %3) #9
  br label %6

6:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5RarVM4InitEv(%class.RarVM* nocapture) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i8* @_Znam(i64 262148) #9
  store i8* %6, i8** %2, align 8
  br label %7

7:                                                ; preds = %5, %1
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5RarVM7ExecuteEP18VM_PreparedProgram(%class.RarVM* nocapture, %struct.VM_PreparedProgram* nocapture) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 0
  %4 = bitcast i32* %3 to i8*
  %5 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %1, i64 0, i32 1
  %6 = bitcast [7 x i32]* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 4 %6, i64 28, i1 false)
  %7 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %1, i64 0, i32 2
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %33, label %11

11:                                               ; preds = %2
  %12 = tail call zeroext i1 @_ZN5RarVM21ExecuteStandardFilterE18VM_StandardFilters(%class.RarVM* %0, i32 %9)
  %13 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %1, i64 0, i32 1, i64 4
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 262143
  %16 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %1, i64 0, i32 3
  store i32 %15, i32* %16, align 8
  %17 = load i32, i32* %8, align 8
  %18 = add i32 %17, -4
  %19 = icmp ult i32 %18, 3
  br i1 %19, label %20, label %29

20:                                               ; preds = %11
  %21 = icmp ugt i32 %15, 131072
  %22 = xor i1 %12, true
  %23 = or i1 %21, %22
  %24 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = zext i32 %15 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  %28 = select i1 %23, i8* %25, i8* %27
  store i8* %28, i8** %7, align 8
  br label %33

29:                                               ; preds = %11
  %30 = bitcast %class.RarVM* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = bitcast i8** %7 to i64*
  store i64 %31, i64* %32, align 8
  br label %33

33:                                               ; preds = %20, %29, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5RarVM21ExecuteStandardFilterE18VM_StandardFilters(%class.RarVM* nocapture readonly, i32) local_unnamed_addr #1 align 2 {
  switch i32 %1, label %395 [
    i32 1, label %3
    i32 2, label %3
    i32 3, label %48
    i32 6, label %120
    i32 4, label %158
    i32 5, label %242
  ]

3:                                                ; preds = %2, %2
  %4 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 4
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 6
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %5, -4
  %9 = icmp ugt i32 %8, 262140
  br i1 %9, label %395, label %10

10:                                               ; preds = %3
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %395, label %12

12:                                               ; preds = %10
  %13 = icmp eq i32 %1, 2
  %14 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = select i1 %13, i32 233, i32 232
  br label %17

17:                                               ; preds = %12, %44
  %18 = phi i8* [ %15, %12 ], [ %46, %44 ]
  %19 = phi i32 [ 0, %12 ], [ %45, %44 ]
  %20 = getelementptr inbounds i8, i8* %18, i64 1
  %21 = load i8, i8* %18, align 1
  %22 = add nuw i32 %19, 1
  %23 = icmp eq i8 %21, -24
  %24 = zext i8 %21 to i32
  %25 = icmp eq i32 %16, %24
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %44

27:                                               ; preds = %17
  %28 = add i32 %22, %7
  %29 = bitcast i8* %20 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %37

32:                                               ; preds = %27
  %33 = add i32 %30, %28
  %34 = icmp sgt i32 %33, -1
  br i1 %34, label %35, label %41

35:                                               ; preds = %32
  %36 = add nsw i32 %30, 16777216
  store i32 %36, i32* %29, align 4
  br label %41

37:                                               ; preds = %27
  %38 = icmp slt i32 %30, 16777216
  br i1 %38, label %39, label %41

39:                                               ; preds = %37
  %40 = sub i32 %30, %28
  store i32 %40, i32* %29, align 4
  br label %41

41:                                               ; preds = %37, %39, %32, %35
  %42 = getelementptr inbounds i8, i8* %18, i64 5
  %43 = add i32 %19, 5
  br label %44

44:                                               ; preds = %17, %41
  %45 = phi i32 [ %43, %41 ], [ %22, %17 ]
  %46 = phi i8* [ %42, %41 ], [ %20, %17 ]
  %47 = icmp ult i32 %45, %8
  br i1 %47, label %17, label %395

48:                                               ; preds = %2
  %49 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 4
  %50 = load i32, i32* %49, align 8
  %51 = add i32 %50, -21
  %52 = icmp ugt i32 %51, 262123
  br i1 %52, label %395, label %53

53:                                               ; preds = %48
  %54 = icmp eq i32 %51, 0
  br i1 %54, label %395, label %55

55:                                               ; preds = %53
  %56 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 6
  %57 = load i32, i32* %56, align 8
  %58 = lshr i32 %57, 4
  %59 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %60 = load i8*, i8** %59, align 8
  br label %61

61:                                               ; preds = %55, %115
  %62 = phi i32 [ %117, %115 ], [ 0, %55 ]
  %63 = phi i32 [ %118, %115 ], [ %58, %55 ]
  %64 = phi i8* [ %116, %115 ], [ %60, %55 ]
  %65 = load i8, i8* %64, align 1
  %66 = and i8 %65, 31
  %67 = zext i8 %66 to i32
  %68 = add nsw i32 %67, -16
  %69 = icmp sgt i32 %68, -1
  br i1 %69, label %70, label %115

70:                                               ; preds = %61
  %71 = sext i32 %68 to i64
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* @_ZZN5RarVM21ExecuteStandardFilterE18VM_StandardFiltersE5Masks, i64 0, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = lshr i64 13263, %71
  %76 = and i64 %75, 1
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %115, label %78

78:                                               ; preds = %70
  %79 = and i32 %74, 1
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %112, label %81

81:                                               ; preds = %78
  %82 = getelementptr inbounds i8, i8* %64, i64 5
  %83 = load i8, i8* %82, align 1
  %84 = and i8 %83, 60
  %85 = icmp eq i8 %84, 20
  br i1 %85, label %86, label %112

86:                                               ; preds = %81
  %87 = getelementptr inbounds i8, i8* %64, i64 2
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = getelementptr inbounds i8, i8* %64, i64 3
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  %93 = shl nuw nsw i32 %92, 8
  %94 = or i32 %93, %89
  %95 = getelementptr inbounds i8, i8* %64, i64 4
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = shl nuw nsw i32 %97, 16
  %99 = or i32 %94, %98
  %100 = shl i32 %63, 2
  %101 = sub i32 %99, %100
  %102 = and i32 %101, 4194300
  %103 = and i8 %88, 3
  %104 = trunc i32 %102 to i8
  %105 = or i8 %103, %104
  store i8 %105, i8* %87, align 1
  %106 = lshr i32 %101, 8
  %107 = trunc i32 %106 to i8
  store i8 %107, i8* %90, align 1
  %108 = lshr i32 %102, 16
  %109 = and i8 %96, -64
  %110 = trunc i32 %108 to i8
  %111 = or i8 %109, %110
  store i8 %111, i8* %95, align 1
  br label %112

112:                                              ; preds = %81, %86, %78
  %113 = and i32 %74, 2
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %428, label %397

115:                                              ; preds = %428, %431, %436, %70, %61
  %116 = getelementptr inbounds i8, i8* %64, i64 16
  %117 = add i32 %62, 16
  %118 = add i32 %63, 1
  %119 = icmp ult i32 %117, %51
  br i1 %119, label %61, label %395

120:                                              ; preds = %2
  %121 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 4
  %122 = load i32, i32* %121, align 8
  %123 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 0
  %124 = load i32, i32* %123, align 8
  %125 = shl i32 %122, 1
  %126 = icmp ugt i32 %122, 131072
  %127 = add i32 %124, -1
  %128 = icmp ugt i32 %127, 1023
  %129 = or i1 %126, %128
  br i1 %129, label %395, label %130

130:                                              ; preds = %120
  %131 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  br label %132

132:                                              ; preds = %137, %130
  %133 = phi i32 [ 0, %130 ], [ %139, %137 ]
  %134 = phi i32 [ 0, %130 ], [ %138, %137 ]
  %135 = add i32 %133, %122
  %136 = icmp ult i32 %135, %125
  br i1 %136, label %141, label %137

137:                                              ; preds = %141, %132
  %138 = phi i32 [ %134, %132 ], [ %146, %141 ]
  %139 = add nuw i32 %133, 1
  %140 = icmp eq i32 %139, %124
  br i1 %140, label %395, label %132

141:                                              ; preds = %132, %141
  %142 = phi i32 [ %156, %141 ], [ %135, %132 ]
  %143 = phi i32 [ %152, %141 ], [ 0, %132 ]
  %144 = phi i32 [ %146, %141 ], [ %134, %132 ]
  %145 = load i8*, i8** %131, align 8
  %146 = add i32 %144, 1
  %147 = zext i32 %144 to i64
  %148 = getelementptr inbounds i8, i8* %145, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = and i32 %143, 255
  %152 = sub nsw i32 %151, %150
  %153 = trunc i32 %152 to i8
  %154 = zext i32 %142 to i64
  %155 = getelementptr inbounds i8, i8* %145, i64 %154
  store i8 %153, i8* %155, align 1
  %156 = add i32 %142, %124
  %157 = icmp ult i32 %156, %125
  br i1 %157, label %141, label %137

158:                                              ; preds = %2
  %159 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 4
  %160 = load i32, i32* %159, align 8
  %161 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 0
  %162 = load i32, i32* %161, align 8
  %163 = add i32 %162, -3
  %164 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 1
  %165 = load i32, i32* %164, align 4
  %166 = add i32 %160, -3
  %167 = icmp ugt i32 %166, 131069
  br i1 %167, label %395, label %168

168:                                              ; preds = %158
  %169 = icmp ugt i32 %163, %160
  %170 = icmp ugt i32 %165, 2
  %171 = or i1 %169, %170
  br i1 %171, label %395, label %172

172:                                              ; preds = %168
  %173 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %174 = load i8*, i8** %173, align 8
  %175 = zext i32 %160 to i64
  %176 = getelementptr inbounds i8, i8* %174, i64 %175
  %177 = zext i32 %163 to i64
  %178 = sub nsw i64 0, %177
  %179 = getelementptr inbounds i8, i8* %176, i64 %178
  br label %182

180:                                              ; preds = %215
  %181 = icmp ugt i32 %160, 1
  br i1 %181, label %460, label %552

182:                                              ; preds = %172, %215
  %183 = phi i32 [ %223, %215 ], [ 0, %172 ]
  %184 = phi i32 [ %221, %215 ], [ 0, %172 ]
  %185 = phi i8* [ %217, %215 ], [ %174, %172 ]
  %186 = icmp ult i32 %183, %162
  %187 = zext i32 %183 to i64
  br i1 %186, label %215, label %188

188:                                              ; preds = %182
  %189 = getelementptr inbounds i8, i8* %179, i64 %187
  %190 = load i8, i8* %189, align 1
  %191 = zext i8 %190 to i32
  %192 = getelementptr inbounds i8, i8* %189, i64 -3
  %193 = load i8, i8* %192, align 1
  %194 = zext i8 %193 to i32
  %195 = add nuw nsw i32 %184, %191
  %196 = sub nsw i32 %195, %194
  %197 = sub nsw i32 %196, %184
  %198 = icmp slt i32 %197, 0
  %199 = sub nsw i32 0, %197
  %200 = select i1 %198, i32 %199, i32 %197
  %201 = sub nsw i32 %196, %191
  %202 = icmp slt i32 %201, 0
  %203 = sub nsw i32 0, %201
  %204 = select i1 %202, i32 %203, i32 %201
  %205 = sub nsw i32 %196, %194
  %206 = icmp slt i32 %205, 0
  %207 = sub nsw i32 0, %205
  %208 = select i1 %206, i32 %207, i32 %205
  %209 = icmp sgt i32 %200, %204
  %210 = icmp sgt i32 %200, %208
  %211 = or i1 %209, %210
  %212 = icmp sgt i32 %204, %208
  %213 = select i1 %212, i32 %194, i32 %191
  %214 = select i1 %211, i32 %213, i32 %184
  br label %215

215:                                              ; preds = %182, %188
  %216 = phi i32 [ %214, %188 ], [ %184, %182 ]
  %217 = getelementptr inbounds i8, i8* %185, i64 1
  %218 = load i8, i8* %185, align 1
  %219 = trunc i32 %216 to i8
  %220 = sub i8 %219, %218
  %221 = zext i8 %220 to i32
  %222 = getelementptr inbounds i8, i8* %176, i64 %187
  store i8 %220, i8* %222, align 1
  %223 = add i32 %183, 3
  %224 = icmp ult i32 %223, %160
  br i1 %224, label %182, label %180

225:                                              ; preds = %552, %225
  %226 = phi i32 [ %240, %225 ], [ %165, %552 ]
  %227 = add nuw i32 %226, 1
  %228 = zext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %176, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = zext i32 %226 to i64
  %232 = getelementptr inbounds i8, i8* %176, i64 %231
  %233 = load i8, i8* %232, align 1
  %234 = add i8 %233, %230
  store i8 %234, i8* %232, align 1
  %235 = add i32 %226, 2
  %236 = zext i32 %235 to i64
  %237 = getelementptr inbounds i8, i8* %176, i64 %236
  %238 = load i8, i8* %237, align 1
  %239 = add i8 %238, %230
  store i8 %239, i8* %237, align 1
  %240 = add i32 %226, 3
  %241 = icmp ult i32 %240, %553
  br i1 %241, label %225, label %395

242:                                              ; preds = %2
  %243 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 4
  %244 = load i32, i32* %243, align 8
  %245 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 1, i64 0
  %246 = load i32, i32* %245, align 8
  %247 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %248 = load i8*, i8** %247, align 8
  %249 = zext i32 %244 to i64
  %250 = getelementptr inbounds i8, i8* %248, i64 %249
  %251 = icmp ugt i32 %244, 131072
  %252 = add i32 %246, -1
  %253 = icmp ugt i32 %252, 127
  %254 = or i1 %251, %253
  br i1 %254, label %395, label %255

255:                                              ; preds = %242, %259
  %256 = phi i32 [ %261, %259 ], [ 0, %242 ]
  %257 = phi i8* [ %260, %259 ], [ %248, %242 ]
  %258 = icmp ult i32 %256, %244
  br i1 %258, label %263, label %259

259:                                              ; preds = %381, %255
  %260 = phi i8* [ %257, %255 ], [ %291, %381 ]
  %261 = add nuw i32 %256, 1
  %262 = icmp eq i32 %261, %246
  br i1 %262, label %395, label %255

263:                                              ; preds = %255, %381
  %264 = phi i32 [ %382, %381 ], [ 0, %255 ]
  %265 = phi i32 [ %383, %381 ], [ 0, %255 ]
  %266 = phi i32 [ %384, %381 ], [ 0, %255 ]
  %267 = phi i32 [ %385, %381 ], [ 0, %255 ]
  %268 = phi i32 [ %386, %381 ], [ 0, %255 ]
  %269 = phi i32 [ %387, %381 ], [ 0, %255 ]
  %270 = phi i32 [ %388, %381 ], [ 0, %255 ]
  %271 = phi i32 [ %393, %381 ], [ 0, %255 ]
  %272 = phi i32 [ %392, %381 ], [ %256, %255 ]
  %273 = phi i32 [ %391, %381 ], [ 0, %255 ]
  %274 = phi i32 [ %390, %381 ], [ 0, %255 ]
  %275 = phi i32 [ %389, %381 ], [ 0, %255 ]
  %276 = phi i32 [ %281, %381 ], [ 0, %255 ]
  %277 = phi i32 [ %278, %381 ], [ 0, %255 ]
  %278 = phi i32 [ %300, %381 ], [ 0, %255 ]
  %279 = phi i32 [ %294, %381 ], [ 0, %255 ]
  %280 = phi i8* [ %291, %381 ], [ %257, %255 ]
  %281 = sub nsw i32 %278, %277
  %282 = shl nsw i32 %279, 3
  %283 = mul nsw i32 %275, %278
  %284 = add i32 %283, %282
  %285 = mul nsw i32 %274, %281
  %286 = add i32 %284, %285
  %287 = mul nsw i32 %273, %276
  %288 = add i32 %286, %287
  %289 = lshr i32 %288, 3
  %290 = and i32 %289, 255
  %291 = getelementptr inbounds i8, i8* %280, i64 1
  %292 = load i8, i8* %280, align 1
  %293 = zext i8 %292 to i32
  %294 = sub nsw i32 %290, %293
  %295 = trunc i32 %294 to i8
  %296 = zext i32 %272 to i64
  %297 = getelementptr inbounds i8, i8* %250, i64 %296
  store i8 %295, i8* %297, align 1
  %298 = sub nsw i32 %294, %279
  %299 = shl i32 %298, 24
  %300 = ashr exact i32 %299, 24
  %301 = sext i8 %292 to i32
  %302 = shl nsw i32 %301, 3
  %303 = icmp slt i32 %302, 0
  %304 = sub nsw i32 0, %302
  %305 = select i1 %303, i32 %304, i32 %302
  %306 = add i32 %305, %270
  %307 = sub nsw i32 %302, %278
  %308 = icmp slt i32 %307, 0
  %309 = sub nsw i32 0, %307
  %310 = select i1 %308, i32 %309, i32 %307
  %311 = add i32 %310, %269
  %312 = add nsw i32 %302, %278
  %313 = icmp slt i32 %312, 0
  %314 = sub nsw i32 0, %312
  %315 = select i1 %313, i32 %314, i32 %312
  %316 = add i32 %268, %315
  %317 = sub nsw i32 %302, %281
  %318 = icmp slt i32 %317, 0
  %319 = sub nsw i32 0, %317
  %320 = select i1 %318, i32 %319, i32 %317
  %321 = add i32 %267, %320
  %322 = add nsw i32 %302, %281
  %323 = icmp slt i32 %322, 0
  %324 = sub nsw i32 0, %322
  %325 = select i1 %323, i32 %324, i32 %322
  %326 = add i32 %266, %325
  %327 = sub nsw i32 %302, %276
  %328 = icmp slt i32 %327, 0
  %329 = sub nsw i32 0, %327
  %330 = select i1 %328, i32 %329, i32 %327
  %331 = add i32 %265, %330
  %332 = add nsw i32 %302, %276
  %333 = icmp slt i32 %332, 0
  %334 = sub nsw i32 0, %332
  %335 = select i1 %333, i32 %334, i32 %332
  %336 = add i32 %264, %335
  %337 = and i32 %271, 31
  %338 = icmp eq i32 %337, 0
  br i1 %338, label %339, label %381

339:                                              ; preds = %263
  %340 = icmp ult i32 %311, %306
  %341 = select i1 %340, i32 %311, i32 %306
  %342 = zext i1 %340 to i32
  %343 = icmp ult i32 %316, %341
  %344 = select i1 %343, i32 %316, i32 %341
  %345 = select i1 %343, i32 2, i32 %342
  %346 = icmp ult i32 %321, %344
  %347 = select i1 %346, i32 %321, i32 %344
  %348 = select i1 %346, i32 3, i32 %345
  %349 = icmp ult i32 %326, %347
  %350 = select i1 %349, i32 %326, i32 %347
  %351 = select i1 %349, i32 4, i32 %348
  %352 = icmp ult i32 %331, %350
  %353 = select i1 %352, i32 %331, i32 %350
  %354 = select i1 %352, i32 5, i32 %351
  %355 = icmp ult i32 %336, %353
  %356 = select i1 %355, i32 6, i32 %354
  switch i32 %356, label %381 [
    i32 1, label %357
    i32 2, label %361
    i32 3, label %365
    i32 4, label %369
    i32 5, label %373
    i32 6, label %377
  ]

357:                                              ; preds = %339
  %358 = icmp sgt i32 %275, -17
  %359 = zext i1 %358 to i32
  %360 = sub i32 %275, %359
  br label %381

361:                                              ; preds = %339
  %362 = icmp slt i32 %275, 16
  %363 = zext i1 %362 to i32
  %364 = add nsw i32 %275, %363
  br label %381

365:                                              ; preds = %339
  %366 = icmp sgt i32 %274, -17
  %367 = zext i1 %366 to i32
  %368 = sub i32 %274, %367
  br label %381

369:                                              ; preds = %339
  %370 = icmp slt i32 %274, 16
  %371 = zext i1 %370 to i32
  %372 = add nsw i32 %274, %371
  br label %381

373:                                              ; preds = %339
  %374 = icmp sgt i32 %273, -17
  %375 = zext i1 %374 to i32
  %376 = sub i32 %273, %375
  br label %381

377:                                              ; preds = %339
  %378 = icmp slt i32 %273, 16
  %379 = zext i1 %378 to i32
  %380 = add nsw i32 %273, %379
  br label %381

381:                                              ; preds = %377, %373, %369, %365, %361, %357, %339, %263
  %382 = phi i32 [ %336, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %383 = phi i32 [ %331, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %384 = phi i32 [ %326, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %385 = phi i32 [ %321, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %386 = phi i32 [ %316, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %387 = phi i32 [ %311, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %388 = phi i32 [ %306, %263 ], [ 0, %339 ], [ 0, %357 ], [ 0, %361 ], [ 0, %365 ], [ 0, %369 ], [ 0, %373 ], [ 0, %377 ]
  %389 = phi i32 [ %275, %263 ], [ %275, %339 ], [ %360, %357 ], [ %364, %361 ], [ %275, %365 ], [ %275, %369 ], [ %275, %373 ], [ %275, %377 ]
  %390 = phi i32 [ %274, %263 ], [ %274, %339 ], [ %274, %357 ], [ %274, %361 ], [ %368, %365 ], [ %372, %369 ], [ %274, %373 ], [ %274, %377 ]
  %391 = phi i32 [ %273, %263 ], [ %273, %339 ], [ %273, %357 ], [ %273, %361 ], [ %273, %365 ], [ %273, %369 ], [ %376, %373 ], [ %380, %377 ]
  %392 = add i32 %272, %246
  %393 = add i32 %271, 1
  %394 = icmp ult i32 %392, %244
  br i1 %394, label %263, label %259

395:                                              ; preds = %259, %225, %137, %115, %44, %10, %53, %552, %242, %158, %168, %120, %48, %3, %2
  %396 = phi i1 [ true, %2 ], [ false, %3 ], [ false, %48 ], [ false, %120 ], [ false, %168 ], [ false, %158 ], [ false, %242 ], [ true, %10 ], [ true, %53 ], [ true, %552 ], [ true, %44 ], [ true, %115 ], [ true, %137 ], [ true, %225 ], [ true, %259 ]
  ret i1 %396

397:                                              ; preds = %112
  %398 = getelementptr inbounds i8, i8* %64, i64 10
  %399 = load i8, i8* %398, align 1
  %400 = and i8 %399, 120
  %401 = icmp eq i8 %400, 40
  br i1 %401, label %402, label %428

402:                                              ; preds = %397
  %403 = getelementptr inbounds i8, i8* %64, i64 7
  %404 = load i8, i8* %403, align 1
  %405 = zext i8 %404 to i32
  %406 = getelementptr inbounds i8, i8* %64, i64 8
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  %409 = shl nuw nsw i32 %408, 8
  %410 = or i32 %409, %405
  %411 = getelementptr inbounds i8, i8* %64, i64 9
  %412 = load i8, i8* %411, align 1
  %413 = zext i8 %412 to i32
  %414 = shl nuw nsw i32 %413, 16
  %415 = or i32 %410, %414
  %416 = shl i32 %63, 3
  %417 = sub i32 %415, %416
  %418 = and i32 %417, 8388600
  %419 = and i8 %404, 7
  %420 = trunc i32 %418 to i8
  %421 = or i8 %419, %420
  store i8 %421, i8* %403, align 1
  %422 = lshr i32 %417, 8
  %423 = trunc i32 %422 to i8
  store i8 %423, i8* %406, align 1
  %424 = lshr i32 %418, 16
  %425 = and i8 %412, -128
  %426 = trunc i32 %424 to i8
  %427 = or i8 %425, %426
  store i8 %427, i8* %411, align 1
  br label %428

428:                                              ; preds = %402, %397, %112
  %429 = and i32 %74, 4
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %115, label %431

431:                                              ; preds = %428
  %432 = getelementptr inbounds i8, i8* %64, i64 15
  %433 = load i8, i8* %432, align 1
  %434 = and i8 %433, -16
  %435 = icmp eq i8 %434, 80
  br i1 %435, label %436, label %115

436:                                              ; preds = %431
  %437 = getelementptr inbounds i8, i8* %64, i64 12
  %438 = load i8, i8* %437, align 1
  %439 = zext i8 %438 to i32
  %440 = getelementptr inbounds i8, i8* %64, i64 13
  %441 = load i8, i8* %440, align 1
  %442 = zext i8 %441 to i32
  %443 = shl nuw nsw i32 %442, 8
  %444 = or i32 %443, %439
  %445 = getelementptr inbounds i8, i8* %64, i64 14
  %446 = load i8, i8* %445, align 1
  %447 = zext i8 %446 to i32
  %448 = shl nuw nsw i32 %447, 16
  %449 = or i32 %444, %448
  %450 = shl i32 %63, 4
  %451 = sub i32 %449, %450
  %452 = and i8 %438, 15
  %453 = trunc i32 %451 to i8
  %454 = and i8 %453, -16
  %455 = or i8 %452, %454
  store i8 %455, i8* %437, align 1
  %456 = lshr i32 %451, 8
  %457 = trunc i32 %456 to i8
  store i8 %457, i8* %440, align 1
  %458 = lshr i32 %451, 16
  %459 = trunc i32 %458 to i8
  store i8 %459, i8* %445, align 1
  br label %115

460:                                              ; preds = %180
  %461 = getelementptr inbounds i8, i8* %176, i64 %178
  br label %462

462:                                              ; preds = %495, %460
  %463 = phi i32 [ %503, %495 ], [ 1, %460 ]
  %464 = phi i32 [ %501, %495 ], [ 0, %460 ]
  %465 = phi i8* [ %497, %495 ], [ %217, %460 ]
  %466 = icmp ult i32 %463, %162
  %467 = zext i32 %463 to i64
  br i1 %466, label %495, label %468

468:                                              ; preds = %462
  %469 = getelementptr inbounds i8, i8* %461, i64 %467
  %470 = load i8, i8* %469, align 1
  %471 = zext i8 %470 to i32
  %472 = getelementptr inbounds i8, i8* %469, i64 -3
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i32
  %475 = add nuw nsw i32 %464, %471
  %476 = sub nsw i32 %475, %474
  %477 = sub nsw i32 %476, %464
  %478 = icmp slt i32 %477, 0
  %479 = sub nsw i32 0, %477
  %480 = select i1 %478, i32 %479, i32 %477
  %481 = sub nsw i32 %476, %471
  %482 = icmp slt i32 %481, 0
  %483 = sub nsw i32 0, %481
  %484 = select i1 %482, i32 %483, i32 %481
  %485 = sub nsw i32 %476, %474
  %486 = icmp slt i32 %485, 0
  %487 = sub nsw i32 0, %485
  %488 = select i1 %486, i32 %487, i32 %485
  %489 = icmp sgt i32 %480, %484
  %490 = icmp sgt i32 %480, %488
  %491 = or i1 %489, %490
  %492 = icmp sgt i32 %484, %488
  %493 = select i1 %492, i32 %474, i32 %471
  %494 = select i1 %491, i32 %493, i32 %464
  br label %495

495:                                              ; preds = %462, %468
  %496 = phi i32 [ %494, %468 ], [ %464, %462 ]
  %497 = getelementptr inbounds i8, i8* %465, i64 1
  %498 = load i8, i8* %465, align 1
  %499 = trunc i32 %496 to i8
  %500 = sub i8 %499, %498
  %501 = zext i8 %500 to i32
  %502 = getelementptr inbounds i8, i8* %176, i64 %467
  store i8 %500, i8* %502, align 1
  %503 = add i32 %463, 3
  %504 = icmp ult i32 %503, %160
  br i1 %504, label %462, label %505

505:                                              ; preds = %495
  %506 = icmp ugt i32 %160, 2
  br i1 %506, label %507, label %552

507:                                              ; preds = %505
  %508 = getelementptr inbounds i8, i8* %176, i64 %178
  br label %509

509:                                              ; preds = %542, %507
  %510 = phi i32 [ %550, %542 ], [ 2, %507 ]
  %511 = phi i32 [ %548, %542 ], [ 0, %507 ]
  %512 = phi i8* [ %544, %542 ], [ %497, %507 ]
  %513 = icmp ult i32 %510, %162
  %514 = zext i32 %510 to i64
  br i1 %513, label %542, label %515

515:                                              ; preds = %509
  %516 = getelementptr inbounds i8, i8* %508, i64 %514
  %517 = load i8, i8* %516, align 1
  %518 = zext i8 %517 to i32
  %519 = getelementptr inbounds i8, i8* %516, i64 -3
  %520 = load i8, i8* %519, align 1
  %521 = zext i8 %520 to i32
  %522 = add nuw nsw i32 %511, %518
  %523 = sub nsw i32 %522, %521
  %524 = sub nsw i32 %523, %511
  %525 = icmp slt i32 %524, 0
  %526 = sub nsw i32 0, %524
  %527 = select i1 %525, i32 %526, i32 %524
  %528 = sub nsw i32 %523, %518
  %529 = icmp slt i32 %528, 0
  %530 = sub nsw i32 0, %528
  %531 = select i1 %529, i32 %530, i32 %528
  %532 = sub nsw i32 %523, %521
  %533 = icmp slt i32 %532, 0
  %534 = sub nsw i32 0, %532
  %535 = select i1 %533, i32 %534, i32 %532
  %536 = icmp sgt i32 %527, %531
  %537 = icmp sgt i32 %527, %535
  %538 = or i1 %536, %537
  %539 = icmp sgt i32 %531, %535
  %540 = select i1 %539, i32 %521, i32 %518
  %541 = select i1 %538, i32 %540, i32 %511
  br label %542

542:                                              ; preds = %509, %515
  %543 = phi i32 [ %541, %515 ], [ %511, %509 ]
  %544 = getelementptr inbounds i8, i8* %512, i64 1
  %545 = load i8, i8* %512, align 1
  %546 = trunc i32 %543 to i8
  %547 = sub i8 %546, %545
  %548 = zext i8 %547 to i32
  %549 = getelementptr inbounds i8, i8* %176, i64 %514
  store i8 %547, i8* %549, align 1
  %550 = add i32 %510, 3
  %551 = icmp ult i32 %550, %160
  br i1 %551, label %509, label %552

552:                                              ; preds = %542, %180, %505
  %553 = add i32 %160, -2
  %554 = icmp ult i32 %165, %553
  br i1 %554, label %225, label %395
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5RarVM7PrepareEPhjP18VM_PreparedProgram(%class.RarVM* nocapture readnone, i8*, i32, %struct.VM_PreparedProgram* nocapture) local_unnamed_addr #1 align 2 {
  %5 = icmp ugt i32 %2, 1
  br i1 %5, label %6, label %83

6:                                                ; preds = %4
  %7 = zext i32 %2 to i64
  %8 = add nsw i64 %7, -1
  %9 = icmp ult i64 %8, 8
  br i1 %9, label %10, label %13

10:                                               ; preds = %73, %6
  %11 = phi i64 [ 1, %6 ], [ %15, %73 ]
  %12 = phi i32 [ 0, %6 ], [ %81, %73 ]
  br label %88

13:                                               ; preds = %6
  %14 = and i64 %8, -8
  %15 = or i64 %14, 1
  %16 = add nsw i64 %14, -8
  %17 = lshr exact i64 %16, 3
  %18 = add nuw nsw i64 %17, 1
  %19 = and i64 %18, 1
  %20 = icmp eq i64 %16, 0
  br i1 %20, label %55, label %21

21:                                               ; preds = %13
  %22 = sub nuw nsw i64 %18, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 0, %21 ], [ %50, %23 ]
  %25 = phi <4 x i32> [ zeroinitializer, %21 ], [ %48, %23 ]
  %26 = phi <4 x i32> [ zeroinitializer, %21 ], [ %49, %23 ]
  %27 = phi i64 [ %22, %21 ], [ %51, %23 ]
  %28 = or i64 %24, 1
  %29 = getelementptr inbounds i8, i8* %1, i64 %28
  %30 = bitcast i8* %29 to <4 x i8>*
  %31 = load <4 x i8>, <4 x i8>* %30, align 1
  %32 = getelementptr inbounds i8, i8* %29, i64 4
  %33 = bitcast i8* %32 to <4 x i8>*
  %34 = load <4 x i8>, <4 x i8>* %33, align 1
  %35 = zext <4 x i8> %31 to <4 x i32>
  %36 = zext <4 x i8> %34 to <4 x i32>
  %37 = xor <4 x i32> %25, %35
  %38 = xor <4 x i32> %26, %36
  %39 = or i64 %24, 9
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  %41 = bitcast i8* %40 to <4 x i8>*
  %42 = load <4 x i8>, <4 x i8>* %41, align 1
  %43 = getelementptr inbounds i8, i8* %40, i64 4
  %44 = bitcast i8* %43 to <4 x i8>*
  %45 = load <4 x i8>, <4 x i8>* %44, align 1
  %46 = zext <4 x i8> %42 to <4 x i32>
  %47 = zext <4 x i8> %45 to <4 x i32>
  %48 = xor <4 x i32> %37, %46
  %49 = xor <4 x i32> %38, %47
  %50 = add i64 %24, 16
  %51 = add i64 %27, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %23, !llvm.loop !2

53:                                               ; preds = %23
  %54 = or i64 %50, 1
  br label %55

55:                                               ; preds = %53, %13
  %56 = phi <4 x i32> [ undef, %13 ], [ %48, %53 ]
  %57 = phi <4 x i32> [ undef, %13 ], [ %49, %53 ]
  %58 = phi i64 [ 1, %13 ], [ %54, %53 ]
  %59 = phi <4 x i32> [ zeroinitializer, %13 ], [ %48, %53 ]
  %60 = phi <4 x i32> [ zeroinitializer, %13 ], [ %49, %53 ]
  %61 = icmp eq i64 %19, 0
  br i1 %61, label %73, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i8, i8* %1, i64 %58
  %64 = getelementptr inbounds i8, i8* %63, i64 4
  %65 = bitcast i8* %64 to <4 x i8>*
  %66 = load <4 x i8>, <4 x i8>* %65, align 1
  %67 = zext <4 x i8> %66 to <4 x i32>
  %68 = xor <4 x i32> %60, %67
  %69 = bitcast i8* %63 to <4 x i8>*
  %70 = load <4 x i8>, <4 x i8>* %69, align 1
  %71 = zext <4 x i8> %70 to <4 x i32>
  %72 = xor <4 x i32> %59, %71
  br label %73

73:                                               ; preds = %55, %62
  %74 = phi <4 x i32> [ %56, %55 ], [ %72, %62 ]
  %75 = phi <4 x i32> [ %57, %55 ], [ %68, %62 ]
  %76 = xor <4 x i32> %75, %74
  %77 = shufflevector <4 x i32> %76, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %78 = xor <4 x i32> %76, %77
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %80 = xor <4 x i32> %78, %79
  %81 = extractelement <4 x i32> %80, i32 0
  %82 = icmp eq i64 %8, %14
  br i1 %82, label %83, label %10

83:                                               ; preds = %88, %73, %4
  %84 = phi i32 [ 0, %4 ], [ %81, %73 ], [ %94, %88 ]
  %85 = load i8, i8* %1, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp eq i32 %84, %86
  br i1 %87, label %97, label %107

88:                                               ; preds = %10, %88
  %89 = phi i64 [ %95, %88 ], [ %11, %10 ]
  %90 = phi i32 [ %94, %88 ], [ %12, %10 ]
  %91 = getelementptr inbounds i8, i8* %1, i64 %89
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i32
  %94 = xor i32 %90, %93
  %95 = add nuw nsw i64 %89, 1
  %96 = icmp eq i64 %95, %7
  br i1 %96, label %83, label %88, !llvm.loop !4

97:                                               ; preds = %83
  %98 = zext i32 %2 to i64
  %99 = tail call i32 @_Z5CRC32jPKvm(i32 -1, i8* %1, i64 %98) #10
  switch i32 %99, label %107 [
    i32 1386780536, label %100
    i32 -1020781951, label %108
    i32 -929663296, label %110
    i32 -235276158, label %112
    i32 -472669641, label %114
    i32 1132075262, label %116
  ]

100:                                              ; preds = %97
  %101 = icmp eq i32 %2, 53
  br i1 %101, label %102, label %107

102:                                              ; preds = %116, %114, %112, %110, %108, %100
  %103 = phi i64 [ 0, %100 ], [ 1, %108 ], [ 2, %110 ], [ 3, %112 ], [ 4, %114 ], [ 5, %116 ]
  %104 = getelementptr inbounds [6 x %struct.StandardFilters], [6 x %struct.StandardFilters]* @_ZZN5RarVM7PrepareEPhjP18VM_PreparedProgramE7StdList, i64 0, i64 %103, i32 2
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds %struct.VM_PreparedProgram, %struct.VM_PreparedProgram* %3, i64 0, i32 0
  store i32 %105, i32* %106, align 8
  br label %107

107:                                              ; preds = %97, %100, %108, %110, %112, %114, %116, %102, %83
  ret void

108:                                              ; preds = %97
  %109 = icmp eq i32 %2, 57
  br i1 %109, label %102, label %107

110:                                              ; preds = %97
  %111 = icmp eq i32 %2, 120
  br i1 %111, label %102, label %107

112:                                              ; preds = %97
  %113 = icmp eq i32 %2, 29
  br i1 %113, label %102, label %107

114:                                              ; preds = %97
  %115 = icmp eq i32 %2, 149
  br i1 %115, label %102, label %107

116:                                              ; preds = %97
  %117 = icmp eq i32 %2, 216
  br i1 %117, label %102, label %107
}

declare i32 @_Z5CRC32jPKvm(i32, i8*, i64) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5RarVM8ReadDataER8BitInput(%class.BitInput* dereferenceable(24)) local_unnamed_addr #1 align 2 {
  %2 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %0) #10
  %3 = trunc i32 %2 to i16
  %4 = and i16 %3, -16384
  switch i16 %4, label %19 [
    i16 0, label %5
    i16 16384, label %8
    i16 -32768, label %17
  ]

5:                                                ; preds = %1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 6) #10
  %6 = lshr i32 %2, 10
  %7 = and i32 %6, 15
  br label %24

8:                                                ; preds = %1
  %9 = and i32 %2, 15360
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = lshr i32 %2, 2
  %13 = or i32 %12, -256
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 14) #10
  br label %24

14:                                               ; preds = %8
  %15 = lshr i32 %2, 6
  %16 = and i32 %15, 255
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 10) #10
  br label %24

17:                                               ; preds = %1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 2) #10
  %18 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %0) #10
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 16) #10
  br label %24

19:                                               ; preds = %1
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 2) #10
  %20 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %0) #10
  %21 = shl i32 %20, 16
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 16) #10
  %22 = tail call i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput* %0) #10
  %23 = or i32 %22, %21
  tail call void @_ZN8BitInput8faddbitsEj(%class.BitInput* %0, i32 16) #10
  br label %24

24:                                               ; preds = %11, %14, %19, %17, %5
  %25 = phi i32 [ %23, %19 ], [ %18, %17 ], [ %7, %5 ], [ %13, %11 ], [ %16, %14 ]
  ret i32 %25
}

declare i32 @_ZN8BitInput8fgetbitsEv(%class.BitInput*) local_unnamed_addr #6

declare void @_ZN8BitInput8faddbitsEj(%class.BitInput*, i32) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5RarVM9SetMemoryEmPhm(%class.RarVM* nocapture readonly, i64, i8* readonly, i64) local_unnamed_addr #1 align 2 {
  %5 = icmp ult i64 %1, 262144
  br i1 %5, label %6, label %17

6:                                                ; preds = %4
  %7 = getelementptr inbounds %class.RarVM, %class.RarVM* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 %1
  %10 = icmp eq i8* %9, %2
  br i1 %10, label %17, label %11

11:                                               ; preds = %6
  %12 = sub nuw nsw i64 262144, %1
  %13 = icmp ugt i64 %12, %3
  %14 = select i1 %13, i64 %3, i64 %12
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %17, label %16

16:                                               ; preds = %11
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %2, i64 %14, i1 false)
  br label %17

17:                                               ; preds = %16, %11, %6, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZN5RarVM21FilterItanium_GetBitsEPhjj(%class.RarVM* nocapture readnone, i8* nocapture readonly, i32, i32) local_unnamed_addr #7 align 2 {
  %5 = lshr i32 %2, 3
  %6 = and i32 %2, 7
  %7 = add nuw nsw i32 %5, 1
  %8 = zext i32 %5 to i64
  %9 = getelementptr inbounds i8, i8* %1, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = add nuw nsw i32 %5, 2
  %13 = zext i32 %7 to i64
  %14 = getelementptr inbounds i8, i8* %1, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = zext i8 %15 to i32
  %17 = shl nuw nsw i32 %16, 8
  %18 = or i32 %17, %11
  %19 = add nuw nsw i32 %5, 3
  %20 = zext i32 %12 to i64
  %21 = getelementptr inbounds i8, i8* %1, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i32
  %24 = shl nuw nsw i32 %23, 16
  %25 = or i32 %18, %24
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %1, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = shl nuw i32 %29, 24
  %31 = or i32 %25, %30
  %32 = lshr i32 %31, %6
  %33 = sub i32 32, %3
  %34 = lshr i32 -1, %33
  %35 = and i32 %32, %34
  ret i32 %35
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5RarVM21FilterItanium_SetBitsEPhjjj(%class.RarVM* nocapture readnone, i8* nocapture, i32, i32, i32) local_unnamed_addr #8 align 2 {
  %6 = lshr i32 %3, 3
  %7 = and i32 %3, 7
  %8 = sub i32 32, %4
  %9 = lshr i32 -1, %8
  %10 = shl i32 %9, %7
  %11 = xor i32 %10, -1
  %12 = shl i32 %2, %7
  %13 = zext i32 %6 to i64
  %14 = getelementptr inbounds i8, i8* %1, i64 %13
  %15 = load i8, i8* %14, align 1
  %16 = trunc i32 %11 to i8
  %17 = and i8 %15, %16
  %18 = trunc i32 %12 to i8
  %19 = or i8 %17, %18
  store i8 %19, i8* %14, align 1
  %20 = lshr i32 %11, 8
  %21 = lshr i32 %12, 8
  %22 = add nuw nsw i64 %13, 1
  %23 = getelementptr inbounds i8, i8* %1, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = trunc i32 %20 to i8
  %26 = and i8 %24, %25
  %27 = trunc i32 %21 to i8
  %28 = or i8 %26, %27
  store i8 %28, i8* %23, align 1
  %29 = lshr i32 %11, 16
  %30 = lshr i32 %12, 16
  %31 = add nuw nsw i64 %13, 2
  %32 = getelementptr inbounds i8, i8* %1, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = trunc i32 %29 to i8
  %35 = and i8 %33, %34
  %36 = trunc i32 %30 to i8
  %37 = or i8 %35, %36
  store i8 %37, i8* %32, align 1
  %38 = lshr i32 %11, 24
  %39 = lshr i32 %12, 24
  %40 = add nuw nsw i64 %13, 3
  %41 = getelementptr inbounds i8, i8* %1, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = trunc i32 %38 to i8
  %44 = and i8 %42, %43
  %45 = trunc i32 %39 to i8
  %46 = or i8 %44, %45
  store i8 %46, i8* %41, align 1
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { builtin nounwind }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
