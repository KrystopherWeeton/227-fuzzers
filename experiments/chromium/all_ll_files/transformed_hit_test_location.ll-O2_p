; ModuleID = '../../third_party/blink/renderer/core/layout/svg/transformed_hit_test_location.cc'
source_filename = "../../third_party/blink/renderer/core/layout/svg/transformed_hit_test_location.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::TransformedHitTestLocation" = type { %"class.absl::optional", %"class.blink::HitTestLocation"* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, [3 x i8], %union.anon }
%union.anon = type { %"class.blink::HitTestLocation" }
%"class.blink::HitTestLocation" = type <{ %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalRect", %"class.blink::FloatPoint", %"class.blink::FloatQuad", i32, i8, i8, [2 x i8] }>
%"struct.blink::PhysicalOffset" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::LayoutUnit" = type { i32 }
%"struct.blink::PhysicalRect" = type { %"struct.blink::PhysicalOffset", %"struct.blink::PhysicalSize" }
%"struct.blink::PhysicalSize" = type { %"class.blink::LayoutUnit", %"class.blink::LayoutUnit" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatQuad" = type { %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint", %"class.blink::FloatPoint" }
%"class.blink::AffineTransform" = type { [6 x double] }

@_ZN5blink26TransformedHitTestLocationC1ERKNS_15HitTestLocationERKNS_15AffineTransformE = hidden unnamed_addr alias void (%"class.blink::TransformedHitTestLocation"*, %"class.blink::HitTestLocation"*, %"class.blink::AffineTransform"*), void (%"class.blink::TransformedHitTestLocation"*, %"class.blink::HitTestLocation"*, %"class.blink::AffineTransform"*)* @_ZN5blink26TransformedHitTestLocationC2ERKNS_15HitTestLocationERKNS_15AffineTransformE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink26TransformedHitTestLocationC2ERKNS_15HitTestLocationERKNS_15AffineTransformE(%"class.blink::TransformedHitTestLocation"*, %"class.blink::HitTestLocation"* dereferenceable(72), %"class.blink::AffineTransform"* dereferenceable(48)) unnamed_addr #0 align 2 {
  %4 = alloca %"class.blink::AffineTransform", align 8
  %5 = alloca <2 x float>, align 8
  %6 = alloca %"class.blink::FloatQuad", align 4
  %7 = getelementptr inbounds %"class.blink::TransformedHitTestLocation", %"class.blink::TransformedHitTestLocation"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %7, align 4
  %8 = getelementptr inbounds %"class.blink::TransformedHitTestLocation", %"class.blink::TransformedHitTestLocation"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %9 = bitcast %union.anon* %8 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %9, i8 0, i64 72, i1 false) #3
  %10 = getelementptr inbounds %"class.blink::TransformedHitTestLocation", %"class.blink::TransformedHitTestLocation"* %0, i64 0, i32 1
  %11 = bitcast <2 x float>* %5 to %"class.blink::FloatPoint"*
  %12 = tail call zeroext i1 @_ZNK5blink15AffineTransform10IsIdentityEv(%"class.blink::AffineTransform"* %2) #3
  br i1 %12, label %31, label %13

13:                                               ; preds = %3
  %14 = tail call zeroext i1 @_ZNK5blink15AffineTransform12IsInvertibleEv(%"class.blink::AffineTransform"* %2) #3
  br i1 %14, label %15, label %31

15:                                               ; preds = %13
  %16 = bitcast %"class.blink::AffineTransform"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %16) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 48, i1 false) #3
  call void @_ZNK5blink15AffineTransform7InverseEv(%"class.blink::AffineTransform"* nonnull sret %4, %"class.blink::AffineTransform"* %2) #3
  %17 = bitcast <2 x float>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #3
  %18 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %1, i64 0, i32 2
  %19 = call <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"* nonnull %4, %"class.blink::FloatPoint"* dereferenceable(8) %18) #3
  store <2 x float> %19, <2 x float>* %5, align 8
  %20 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %1, i64 0, i32 5
  %21 = load i8, i8* %20, align 4, !range !2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %27, label %23, !prof !3

23:                                               ; preds = %15
  %24 = bitcast %"class.blink::FloatQuad"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %24) #3
  %25 = getelementptr inbounds %"class.blink::HitTestLocation", %"class.blink::HitTestLocation"* %1, i64 0, i32 3
  call void @_ZNK5blink15AffineTransform7MapQuadERKNS_9FloatQuadE(%"class.blink::FloatQuad"* nonnull sret %6, %"class.blink::AffineTransform"* nonnull %4, %"class.blink::FloatQuad"* dereferenceable(32) %25) #3
  store i8 0, i8* %7, align 4
  %26 = getelementptr inbounds %"class.blink::TransformedHitTestLocation", %"class.blink::TransformedHitTestLocation"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN5blink15HitTestLocationC1ERKNS_10FloatPointERKNS_9FloatQuadE(%"class.blink::HitTestLocation"* %26, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11, %"class.blink::FloatQuad"* nonnull dereferenceable(32) %6) #3
  store i8 1, i8* %7, align 4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %24) #3
  br label %29

27:                                               ; preds = %15
  store i8 0, i8* %7, align 4
  %28 = getelementptr inbounds %"class.blink::TransformedHitTestLocation", %"class.blink::TransformedHitTestLocation"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @_ZN5blink15HitTestLocationC1ERKNS_10FloatPointE(%"class.blink::HitTestLocation"* %28, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11) #3
  store i8 1, i8* %7, align 4
  br label %29

29:                                               ; preds = %27, %23
  %30 = getelementptr inbounds %"class.blink::TransformedHitTestLocation", %"class.blink::TransformedHitTestLocation"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #3
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %16) #3
  br label %31

31:                                               ; preds = %3, %13, %29
  %32 = phi %"class.blink::HitTestLocation"* [ %30, %29 ], [ %1, %3 ], [ null, %13 ]
  store %"class.blink::HitTestLocation"* %32, %"class.blink::HitTestLocation"** %10, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK5blink15AffineTransform10IsIdentityEv(%"class.blink::AffineTransform"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink15AffineTransform12IsInvertibleEv(%"class.blink::AffineTransform"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZNK5blink15AffineTransform7InverseEv(%"class.blink::AffineTransform"* sret, %"class.blink::AffineTransform"*) local_unnamed_addr #2

declare <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #2

declare void @_ZNK5blink15AffineTransform7MapQuadERKNS_9FloatQuadE(%"class.blink::FloatQuad"* sret, %"class.blink::AffineTransform"*, %"class.blink::FloatQuad"* dereferenceable(32)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN5blink15HitTestLocationC1ERKNS_10FloatPointERKNS_9FloatQuadE(%"class.blink::HitTestLocation"*, %"class.blink::FloatPoint"* dereferenceable(8), %"class.blink::FloatQuad"* dereferenceable(32)) unnamed_addr #2

declare void @_ZN5blink15HitTestLocationC1ERKNS_10FloatPointE(%"class.blink::HitTestLocation"*, %"class.blink::FloatPoint"* dereferenceable(8)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 2000, i32 1}
