; ModuleID = '../../third_party/angle/src/gpu_info_util/SystemInfo_libpci.cpp'
source_filename = "../../third_party/angle/src/gpu_info_util/SystemInfo_libpci.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"*, %"class.std::__1::__compressed_pair.1" }
%"struct.angle::GPUDeviceInfo" = type { i32, i32, i32, %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"struct.angle::VersionInfo" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.angle::VersionInfo" = type { i32, i32, i32, i32 }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.angle::GPUDeviceInfo"* }
%struct.pci_access = type { i32, i32, i32, i8*, i32, i32, i32, i32, void (i8*, ...)*, void (i8*, ...)*, void (i8*, ...)*, %struct.pci_dev*, %struct.pci_methods*, %struct.pci_param*, %struct.id_entry**, %struct.id_bucket*, i32, i32, %struct.udev*, %struct.udev_hwdb*, i32, i32, i32, i32, %struct.pci_dev* }
%struct.pci_methods = type opaque
%struct.pci_param = type { %struct.pci_param*, i8*, i8*, i32, i8* }
%struct.id_entry = type opaque
%struct.id_bucket = type opaque
%struct.udev = type opaque
%struct.udev_hwdb = type opaque
%struct.pci_dev = type { %struct.pci_dev*, i16, i8, i8, i8, i32, i16, i16, i16, i32, [6 x i64], [6 x i64], i64, i64, %struct.pci_cap*, i8*, i8*, i8*, i32, [6 x i64], i64, i32, %struct.pci_access*, %struct.pci_methods*, i8*, i32, i32, i8*, %struct.pci_property*, %struct.pci_cap* }
%struct.pci_property = type opaque
%struct.pci_cap = type { %struct.pci_cap*, i16, i16, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN5angle13GPUDeviceInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

@.str = private unnamed_addr constant [14 x i8] c"/sys/bus/pci/\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"/sys/bs/pci_express/\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"libpci.so.3\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"libpci.so\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"pci_alloc\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"pci_init\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"pci_cleanup\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"pci_scan_bus\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"pci_fill_info\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"pci_lookup_name\00", align 1
@.str.10 = private unnamed_addr constant [14 x i8] c"pci_read_byte\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5angle23GetPCIDevicesWithLibPCIEPNSt3__16vectorINS_13GPUDeviceInfoENS0_9allocatorIS2_EEEE(%"class.std::__1::vector"*) local_unnamed_addr #0 {
  %2 = alloca %"struct.angle::GPUDeviceInfo", align 8
  %3 = tail call i32 @access(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 0) #9
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = tail call i32 @access(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 0) #9
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %95

8:                                                ; preds = %5, %1
  %9 = tail call i8* @dlopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i32 1) #9
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %14

11:                                               ; preds = %8
  %12 = tail call i8* @dlopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i32 1) #9
  %13 = icmp eq i8* %12, null
  br i1 %13, label %95, label %14

14:                                               ; preds = %11, %8
  %15 = phi i8* [ %12, %11 ], [ %9, %8 ]
  %16 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0)) #9
  %17 = bitcast i8* %16 to %struct.pci_access* ()*
  %18 = icmp eq i8* %16, null
  br i1 %18, label %92, label %19

19:                                               ; preds = %14
  %20 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0)) #9
  %21 = bitcast i8* %20 to void (%struct.pci_access*)*
  %22 = icmp eq i8* %20, null
  br i1 %22, label %92, label %23

23:                                               ; preds = %19
  %24 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0)) #9
  %25 = bitcast i8* %24 to void (%struct.pci_access*)*
  %26 = icmp eq i8* %24, null
  br i1 %26, label %92, label %27

27:                                               ; preds = %23
  %28 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0)) #9
  %29 = bitcast i8* %28 to void (%struct.pci_access*)*
  %30 = icmp eq i8* %28, null
  br i1 %30, label %92, label %31

31:                                               ; preds = %27
  %32 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0)) #9
  %33 = bitcast i8* %32 to i32 (%struct.pci_dev*, i32)*
  %34 = icmp eq i8* %32, null
  br i1 %34, label %92, label %35

35:                                               ; preds = %31
  %36 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #9
  %37 = icmp eq i8* %36, null
  br i1 %37, label %92, label %38

38:                                               ; preds = %35
  %39 = tail call i8* @dlsym(i8* nonnull %15, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10, i64 0, i64 0)) #9
  %40 = bitcast i8* %39 to i8 (%struct.pci_dev*, i32)*
  %41 = icmp eq i8* %39, null
  br i1 %41, label %92, label %42

42:                                               ; preds = %38
  %43 = tail call %struct.pci_access* %17() #9
  tail call void %21(%struct.pci_access* %43) #9
  tail call void %29(%struct.pci_access* %43) #9
  %44 = getelementptr inbounds %struct.pci_access, %struct.pci_access* %43, i64 0, i32 11
  %45 = load %struct.pci_dev*, %struct.pci_dev** %44, align 8
  %46 = icmp eq %struct.pci_dev* %45, null
  br i1 %46, label %47, label %48

47:                                               ; preds = %42
  call void %25(%struct.pci_access* %43) #9
  br label %92

48:                                               ; preds = %42
  %49 = bitcast %"struct.angle::GPUDeviceInfo"* %2 to i8*
  %50 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %2, i64 0, i32 0
  %51 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %2, i64 0, i32 1
  %52 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %2, i64 0, i32 2
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %54 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %55 = bitcast %"struct.angle::GPUDeviceInfo"** %53 to i64*
  br label %56

56:                                               ; preds = %48, %86
  %57 = phi %struct.pci_dev* [ %45, %48 ], [ %88, %86 ]
  %58 = call i32 %33(%struct.pci_dev* nonnull %57, i32 33) #9
  %59 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %57, i64 0, i32 8
  %60 = load i16, i16* %59, align 8
  %61 = and i16 %60, -256
  %62 = icmp eq i16 %61, 768
  br i1 %62, label %63, label %86

63:                                               ; preds = %56
  %64 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %57, i64 0, i32 6
  %65 = load i16, i16* %64, align 4
  %66 = icmp eq i16 %65, 0
  br i1 %66, label %86, label %67

67:                                               ; preds = %63
  %68 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %57, i64 0, i32 7
  %69 = load i16, i16* %68, align 2
  %70 = icmp eq i16 %69, 0
  br i1 %70, label %86, label %71

71:                                               ; preds = %67
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %49) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 -86, i64 104, i1 false)
  call void @_ZN5angle13GPUDeviceInfoC1Ev(%"struct.angle::GPUDeviceInfo"* nonnull %2) #9
  %72 = load i16, i16* %64, align 4
  %73 = zext i16 %72 to i32
  store i32 %73, i32* %50, align 8
  %74 = load i16, i16* %68, align 2
  %75 = zext i16 %74 to i32
  store i32 %75, i32* %51, align 4
  %76 = call zeroext i8 %40(%struct.pci_dev* nonnull %57, i32 8) #9
  %77 = zext i8 %76 to i32
  store i32 %77, i32* %52, align 8
  %78 = load %"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"** %53, align 8
  %79 = load %"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"** %54, align 8
  %80 = icmp eq %"struct.angle::GPUDeviceInfo"* %78, %79
  br i1 %80, label %84, label %81

81:                                               ; preds = %71
  call void @_ZN5angle13GPUDeviceInfoC1ERKS0_(%"struct.angle::GPUDeviceInfo"* %78, %"struct.angle::GPUDeviceInfo"* nonnull dereferenceable(104) %2) #9
  %82 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %78, i64 1
  %83 = ptrtoint %"struct.angle::GPUDeviceInfo"* %82 to i64
  store i64 %83, i64* %55, align 8
  br label %85

84:                                               ; preds = %71
  call void @_ZNSt3__16vectorIN5angle13GPUDeviceInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %0, %"struct.angle::GPUDeviceInfo"* nonnull dereferenceable(104) %2) #9
  br label %85

85:                                               ; preds = %81, %84
  call void @_ZN5angle13GPUDeviceInfoD1Ev(%"struct.angle::GPUDeviceInfo"* nonnull %2) #9
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %49) #9
  br label %86

86:                                               ; preds = %56, %63, %67, %85
  %87 = getelementptr inbounds %struct.pci_dev, %struct.pci_dev* %57, i64 0, i32 0
  %88 = load %struct.pci_dev*, %struct.pci_dev** %87, align 8
  %89 = icmp eq %struct.pci_dev* %88, null
  br i1 %89, label %90, label %56

90:                                               ; preds = %86
  call void %25(%struct.pci_access* %43) #9
  %91 = icmp eq i8* %15, null
  br i1 %91, label %95, label %92

92:                                               ; preds = %47, %38, %35, %31, %27, %23, %19, %14, %90
  %93 = phi i1 [ true, %90 ], [ false, %38 ], [ false, %14 ], [ false, %19 ], [ false, %23 ], [ false, %27 ], [ false, %31 ], [ false, %35 ], [ true, %47 ]
  %94 = call i32 @dlclose(i8* nonnull %15) #9
  br label %95

95:                                               ; preds = %11, %5, %90, %92
  %96 = phi i1 [ true, %90 ], [ %93, %92 ], [ false, %5 ], [ false, %11 ]
  ret i1 %96
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5angle13GPUDeviceInfoC1Ev(%"struct.angle::GPUDeviceInfo"*) unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN5angle13GPUDeviceInfoD1Ev(%"struct.angle::GPUDeviceInfo"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare i32 @access(i8* nocapture readonly, i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i8* @dlopen(i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i8* @dlsym(i8*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @dlclose(i8*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN5angle13GPUDeviceInfoENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, %"struct.angle::GPUDeviceInfo"* dereferenceable(104)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.angle::GPUDeviceInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 104
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 177372539170284150
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #10
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.angle::GPUDeviceInfo"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 104
  %20 = icmp ult i64 %19, 88686269585142075
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 177372539170284150, %14 ]
  %28 = mul i64 %27, 104
  %29 = tail call i8* @_Znwm(i64 %28) #11
  %30 = bitcast i8* %29 to %"struct.angle::GPUDeviceInfo"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.angle::GPUDeviceInfo"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %33, i64 %32
  %36 = ptrtoint %"struct.angle::GPUDeviceInfo"* %35 to i64
  tail call void @_ZN5angle13GPUDeviceInfoC1ERKS0_(%"struct.angle::GPUDeviceInfo"* %34, %"struct.angle::GPUDeviceInfo"* dereferenceable(104) %1) #9
  %37 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %34, i64 1
  %38 = ptrtoint %"struct.angle::GPUDeviceInfo"* %37 to i64
  %39 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %40 = load %"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"** %39, align 8
  %41 = load %"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"** %3, align 8
  %42 = icmp eq %"struct.angle::GPUDeviceInfo"* %41, %40
  br i1 %42, label %43, label %45

43:                                               ; preds = %31
  %44 = ptrtoint %"struct.angle::GPUDeviceInfo"* %40 to i64
  br label %54

45:                                               ; preds = %31, %45
  %46 = phi %"struct.angle::GPUDeviceInfo"* [ %48, %45 ], [ %34, %31 ]
  %47 = phi %"struct.angle::GPUDeviceInfo"* [ %49, %45 ], [ %41, %31 ]
  %48 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %46, i64 -1
  %49 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %47, i64 -1
  tail call void @_ZN5angle13GPUDeviceInfoC1ERKS0_(%"struct.angle::GPUDeviceInfo"* %48, %"struct.angle::GPUDeviceInfo"* dereferenceable(104) %49) #9
  %50 = icmp eq %"struct.angle::GPUDeviceInfo"* %49, %40
  br i1 %50, label %51, label %45

51:                                               ; preds = %45
  %52 = load i64, i64* %6, align 8
  %53 = load %"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"** %3, align 8
  br label %54

54:                                               ; preds = %43, %51
  %55 = phi %"struct.angle::GPUDeviceInfo"* [ %40, %43 ], [ %53, %51 ]
  %56 = phi %"struct.angle::GPUDeviceInfo"* [ %34, %43 ], [ %48, %51 ]
  %57 = phi i64 [ %44, %43 ], [ %52, %51 ]
  %58 = ptrtoint %"struct.angle::GPUDeviceInfo"* %56 to i64
  store i64 %58, i64* %6, align 8
  store i64 %38, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %59 = inttoptr i64 %57 to %"struct.angle::GPUDeviceInfo"*
  %60 = icmp eq %"struct.angle::GPUDeviceInfo"* %55, %59
  br i1 %60, label %65, label %61

61:                                               ; preds = %54, %61
  %62 = phi %"struct.angle::GPUDeviceInfo"* [ %63, %61 ], [ %55, %54 ]
  %63 = getelementptr inbounds %"struct.angle::GPUDeviceInfo", %"struct.angle::GPUDeviceInfo"* %62, i64 -1
  tail call void @_ZN5angle13GPUDeviceInfoD1Ev(%"struct.angle::GPUDeviceInfo"* %63) #9
  %64 = icmp eq %"struct.angle::GPUDeviceInfo"* %63, %59
  br i1 %64, label %65, label %61

65:                                               ; preds = %61, %54
  %66 = icmp eq i64 %57, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %65
  %68 = inttoptr i64 %57 to i8*
  tail call void @_ZdlPv(i8* %68) #11
  br label %69

69:                                               ; preds = %65, %67
  ret void
}

declare void @_ZN5angle13GPUDeviceInfoC1ERKS0_(%"struct.angle::GPUDeviceInfo"*, %"struct.angle::GPUDeviceInfo"* dereferenceable(104)) unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
