; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_multi_thread.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_multi_thread.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%union.pthread_mutexattr_t = type { i32 }

; Function Attrs: nounwind ssp uwtable
define hidden i8* @vp9_enc_grp_get_next_job(%struct.MultiThreadHandle*, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %3
  %5 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %3, i32 1
  %6 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %5) #5
  %7 = getelementptr inbounds %struct.RowMTInfo, %struct.RowMTInfo* %4, i64 0, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp eq i8* %8, null
  br i1 %9, label %18, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds i8, i8* %8, i64 8
  %12 = bitcast i8* %8 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = bitcast %struct.RowMTInfo* %4 to i64*
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %3, i32 0, i32 1
  %16 = load i32, i32* %15, align 8
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* %15, align 8
  br label %18

18:                                               ; preds = %2, %10
  %19 = phi i8* [ %11, %10 ], [ null, %2 ]
  %20 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %5) #5
  ret i8* %19
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_alloc_rd_thresh(%struct.VP9_COMP* nocapture readonly, %struct.TileDataEnc* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %4 = load i32, i32* %3, align 16
  %5 = add nsw i32 %4, 7
  %6 = ashr i32 %5, 3
  %7 = mul i32 %6, 390
  %8 = add i32 %7, 390
  %9 = sext i32 %8 to i64
  %10 = tail call i8* @vpx_calloc(i64 %9, i64 4) #5
  %11 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %1, i64 0, i32 5
  %12 = bitcast i32** %11 to i8**
  store i8* %10, i8** %12, align 8
  %13 = icmp sgt i32 %8, 0
  br i1 %13, label %14, label %50

14:                                               ; preds = %2
  %15 = bitcast i8* %10 to i32*
  %16 = zext i32 %8 to i64
  store i32 32, i32* %15, align 4
  %17 = add nsw i64 %16, -1
  %18 = add nsw i64 %16, -2
  %19 = and i64 %17, 3
  %20 = icmp ult i64 %18, 3
  br i1 %20, label %40, label %21

21:                                               ; preds = %14
  %22 = sub nsw i64 %17, %19
  br label %23

23:                                               ; preds = %23, %21
  %24 = phi i64 [ 1, %21 ], [ %37, %23 ]
  %25 = phi i64 [ %22, %21 ], [ %38, %23 ]
  %26 = load i32*, i32** %11, align 8
  %27 = getelementptr inbounds i32, i32* %26, i64 %24
  store i32 32, i32* %27, align 4
  %28 = add nuw nsw i64 %24, 1
  %29 = load i32*, i32** %11, align 8
  %30 = getelementptr inbounds i32, i32* %29, i64 %28
  store i32 32, i32* %30, align 4
  %31 = add nuw nsw i64 %24, 2
  %32 = load i32*, i32** %11, align 8
  %33 = getelementptr inbounds i32, i32* %32, i64 %31
  store i32 32, i32* %33, align 4
  %34 = add nuw nsw i64 %24, 3
  %35 = load i32*, i32** %11, align 8
  %36 = getelementptr inbounds i32, i32* %35, i64 %34
  store i32 32, i32* %36, align 4
  %37 = add nuw nsw i64 %24, 4
  %38 = add i64 %25, -4
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %23

40:                                               ; preds = %14, %23
  %41 = phi i64 [ 1, %14 ], [ %37, %23 ]
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ %41, %40 ], [ %47, %42 ]
  %44 = phi i64 [ %19, %40 ], [ %48, %42 ]
  %45 = load i32*, i32** %11, align 8
  %46 = getelementptr inbounds i32, i32* %45, i64 %43
  store i32 32, i32* %46, align 4
  %47 = add nuw nsw i64 %43, 1
  %48 = add i64 %44, -1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %42, !llvm.loop !2

50:                                               ; preds = %42, %2
  ret void
}

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_mem_alloc(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %4 = load i32, i32* %3, align 8
  %5 = shl i32 1, %4
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 86
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 1, %7
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %10 = load i32, i32* %9, align 16
  %11 = add nsw i32 %10, 7
  %12 = ashr i32 %11, 3
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 32
  %14 = load i32, i32* %13, align 4
  %15 = icmp sgt i32 %14, %12
  %16 = select i1 %15, i32 %14, i32 %12
  %17 = shl i32 %16, %4
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 1
  store i32 %5, i32* %18, align 4
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 0
  store i32 %8, i32* %19, align 8
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 2
  store i32 %16, i32* %20, align 8
  %21 = sext i32 %17 to i64
  %22 = mul nsw i64 %21, 24
  %23 = tail call i8* @vpx_memalign(i64 32, i64 %22) #5
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 4
  %25 = bitcast %struct.JobQueue** %24 to i8**
  store i8* %23, i8** %25, align 8
  %26 = icmp eq i32 %4, 31
  br i1 %26, label %40, label %27

27:                                               ; preds = %1
  %28 = sext i32 %5 to i64
  br label %34

29:                                               ; preds = %34
  br i1 %26, label %40, label %30

30:                                               ; preds = %29
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 7
  %33 = sext i32 %5 to i64
  br label %45

34:                                               ; preds = %27, %34
  %35 = phi i64 [ 0, %27 ], [ %38, %34 ]
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 6, i64 %35, i32 1
  %37 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %36, %union.pthread_mutexattr_t* null) #5
  %38 = add nuw nsw i64 %35, 1
  %39 = icmp slt i64 %38, %28
  br i1 %39, label %34, label %29

40:                                               ; preds = %103, %1, %29
  %41 = icmp sgt i32 %8, 1
  br i1 %41, label %42, label %111

42:                                               ; preds = %40
  %43 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %44 = sext i32 %5 to i64
  br label %106

45:                                               ; preds = %30, %103
  %46 = phi i64 [ 0, %30 ], [ %104, %103 ]
  %47 = load %struct.TileDataEnc*, %struct.TileDataEnc** %31, align 16
  %48 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %47, i64 %46, i32 4
  tail call void @vp9_row_mt_sync_mem_alloc(%struct.VP9RowMTSyncData* %48, %struct.VP9Common* %2, i32 %16) #5
  %49 = load i32, i32* %32, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %103, label %51

51:                                               ; preds = %45
  %52 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %47, i64 %46, i32 5
  %53 = load i32*, i32** %52, align 8
  %54 = icmp eq i32* %53, null
  br i1 %54, label %57, label %55

55:                                               ; preds = %51
  %56 = bitcast i32* %53 to i8*
  tail call void @vpx_free(i8* nonnull %56) #5
  store i32* null, i32** %52, align 8
  br label %57

57:                                               ; preds = %51, %55
  %58 = load i32, i32* %9, align 16
  %59 = add nsw i32 %58, 7
  %60 = ashr i32 %59, 3
  %61 = mul i32 %60, 390
  %62 = add i32 %61, 390
  %63 = sext i32 %62 to i64
  %64 = tail call i8* @vpx_calloc(i64 %63, i64 4) #5
  %65 = bitcast i32** %52 to i8**
  store i8* %64, i8** %65, align 8
  %66 = icmp sgt i32 %62, 0
  br i1 %66, label %67, label %103

67:                                               ; preds = %57
  %68 = bitcast i8* %64 to i32*
  %69 = zext i32 %62 to i64
  store i32 32, i32* %68, align 4
  %70 = add nsw i64 %69, -1
  %71 = add nsw i64 %69, -2
  %72 = and i64 %70, 3
  %73 = icmp ult i64 %71, 3
  br i1 %73, label %93, label %74

74:                                               ; preds = %67
  %75 = sub nsw i64 %70, %72
  br label %76

76:                                               ; preds = %76, %74
  %77 = phi i64 [ 1, %74 ], [ %90, %76 ]
  %78 = phi i64 [ %75, %74 ], [ %91, %76 ]
  %79 = load i32*, i32** %52, align 8
  %80 = getelementptr inbounds i32, i32* %79, i64 %77
  store i32 32, i32* %80, align 4
  %81 = add nuw nsw i64 %77, 1
  %82 = load i32*, i32** %52, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 %81
  store i32 32, i32* %83, align 4
  %84 = add nuw nsw i64 %77, 2
  %85 = load i32*, i32** %52, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 %84
  store i32 32, i32* %86, align 4
  %87 = add nuw nsw i64 %77, 3
  %88 = load i32*, i32** %52, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 %87
  store i32 32, i32* %89, align 4
  %90 = add nuw nsw i64 %77, 4
  %91 = add i64 %78, -4
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %93, label %76

93:                                               ; preds = %67, %76
  %94 = phi i64 [ 1, %67 ], [ %90, %76 ]
  br label %95

95:                                               ; preds = %95, %93
  %96 = phi i64 [ %94, %93 ], [ %100, %95 ]
  %97 = phi i64 [ %72, %93 ], [ %101, %95 ]
  %98 = load i32*, i32** %52, align 8
  %99 = getelementptr inbounds i32, i32* %98, i64 %96
  store i32 32, i32* %99, align 4
  %100 = add nuw nsw i64 %96, 1
  %101 = add i64 %97, -1
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %95, !llvm.loop !4

103:                                              ; preds = %95, %57, %45
  %104 = add nuw nsw i64 %46, 1
  %105 = icmp slt i64 %104, %33
  br i1 %105, label %45, label %40

106:                                              ; preds = %127, %42
  %107 = phi i32 [ 1, %42 ], [ %128, %127 ]
  br i1 %26, label %127, label %108

108:                                              ; preds = %106
  %109 = shl i32 %107, %4
  %110 = sext i32 %109 to i64
  br label %117

111:                                              ; preds = %127, %40
  %112 = icmp eq i32 %7, 31
  br i1 %112, label %147, label %113

113:                                              ; preds = %111
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %115 = sext i32 %8 to i64
  %116 = load %struct.TileDataEnc*, %struct.TileDataEnc** %114, align 16
  br label %130

117:                                              ; preds = %108, %117
  %118 = phi i64 [ 0, %108 ], [ %125, %117 ]
  %119 = load %struct.TileDataEnc*, %struct.TileDataEnc** %43, align 16
  %120 = add nsw i64 %118, %110
  %121 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %119, i64 %120, i32 4
  %122 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %119, i64 %118, i32 4
  %123 = bitcast %struct.VP9RowMTSyncData* %121 to i8*
  %124 = bitcast %struct.VP9RowMTSyncData* %122 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 32, i1 false)
  %125 = add nuw nsw i64 %118, 1
  %126 = icmp slt i64 %125, %44
  br i1 %126, label %117, label %127

127:                                              ; preds = %117, %106
  %128 = add nuw nsw i32 %107, 1
  %129 = icmp eq i32 %128, %8
  br i1 %129, label %111, label %106

130:                                              ; preds = %113, %130
  %131 = phi i64 [ 0, %113 ], [ %145, %130 ]
  %132 = trunc i64 %131 to i32
  %133 = shl i32 %132, %4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %116, i64 %134, i32 0
  %136 = bitcast %struct.TileInfo* %135 to i64*
  %137 = load i64, i64* %136, align 4
  %138 = trunc i64 %137 to i32
  %139 = lshr i64 %137, 32
  %140 = trunc i64 %139 to i32
  %141 = sub i32 7, %138
  %142 = add i32 %141, %140
  %143 = ashr i32 %142, 3
  %144 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 3, i64 %131
  store i32 %143, i32* %144, align 4
  %145 = add nuw nsw i64 %131, 1
  %146 = icmp slt i64 %145, %115
  br i1 %146, label %130, label %147

147:                                              ; preds = %130, %111
  ret void
}

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #1

declare void @vp9_row_mt_sync_mem_alloc(%struct.VP9RowMTSyncData*, %struct.VP9Common*, i32) local_unnamed_addr #2

declare void @vpx_free(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_mem_dealloc(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 4
  %3 = load %struct.JobQueue*, %struct.JobQueue** %2, align 8
  %4 = icmp eq %struct.JobQueue* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast %struct.JobQueue* %3 to i8*
  tail call void @vpx_free(i8* nonnull %6) #5
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %15, label %29

11:                                               ; preds = %24
  %12 = icmp sgt i32 %25, 0
  br i1 %12, label %13, label %29

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  br label %36

15:                                               ; preds = %7, %24
  %16 = phi i32 [ %25, %24 ], [ %9, %7 ]
  %17 = phi i64 [ %26, %24 ], [ 0, %7 ]
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 6, i64 %17
  %19 = icmp eq %struct.RowMTInfo* %18, null
  br i1 %19, label %24, label %20

20:                                               ; preds = %15
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 6, i64 %17, i32 1
  %22 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %21) #5
  %23 = load i32, i32* %8, align 4
  br label %24

24:                                               ; preds = %15, %20
  %25 = phi i32 [ %16, %15 ], [ %23, %20 ]
  %26 = add nuw nsw i64 %17, 1
  %27 = sext i32 %25 to i64
  %28 = icmp slt i64 %26, %27
  br i1 %28, label %15, label %11

29:                                               ; preds = %36, %7, %11
  %30 = phi i32 [ %25, %11 ], [ %9, %7 ], [ %41, %36 ]
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %34, label %73

34:                                               ; preds = %29
  %35 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  br label %44

36:                                               ; preds = %13, %36
  %37 = phi i64 [ 0, %13 ], [ %40, %36 ]
  %38 = load %struct.TileDataEnc*, %struct.TileDataEnc** %14, align 16
  %39 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %38, i64 %37, i32 4
  tail call void @vp9_row_mt_sync_mem_dealloc(%struct.VP9RowMTSyncData* %39) #5
  %40 = add nuw nsw i64 %37, 1
  %41 = load i32, i32* %8, align 4
  %42 = sext i32 %41 to i64
  %43 = icmp slt i64 %40, %42
  br i1 %43, label %36, label %29

44:                                               ; preds = %34, %67
  %45 = phi i32 [ %30, %34 ], [ %68, %67 ]
  %46 = phi i32 [ %30, %34 ], [ %69, %67 ]
  %47 = phi i32 [ 0, %34 ], [ %70, %67 ]
  %48 = icmp sgt i32 %46, 0
  br i1 %48, label %49, label %67

49:                                               ; preds = %44, %63
  %50 = phi i32 [ %64, %63 ], [ %45, %44 ]
  %51 = phi i32 [ %64, %63 ], [ %46, %44 ]
  %52 = phi i32 [ %65, %63 ], [ 0, %44 ]
  %53 = load %struct.TileDataEnc*, %struct.TileDataEnc** %35, align 16
  %54 = mul nsw i32 %51, %47
  %55 = add nsw i32 %54, %52
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %53, i64 %56, i32 5
  %58 = load i32*, i32** %57, align 8
  %59 = icmp eq i32* %58, null
  br i1 %59, label %63, label %60

60:                                               ; preds = %49
  %61 = bitcast i32* %58 to i8*
  tail call void @vpx_free(i8* nonnull %61) #5
  store i32* null, i32** %57, align 8
  %62 = load i32, i32* %8, align 4
  br label %63

63:                                               ; preds = %49, %60
  %64 = phi i32 [ %50, %49 ], [ %62, %60 ]
  %65 = add nuw nsw i32 %52, 1
  %66 = icmp slt i32 %65, %64
  br i1 %66, label %49, label %67

67:                                               ; preds = %63, %44
  %68 = phi i32 [ %45, %44 ], [ %64, %63 ]
  %69 = phi i32 [ %46, %44 ], [ %64, %63 ]
  %70 = add nuw nsw i32 %47, 1
  %71 = load i32, i32* %31, align 8
  %72 = icmp slt i32 %70, %71
  br i1 %72, label %44, label %73

73:                                               ; preds = %67, %29
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #1

declare void @vp9_row_mt_sync_mem_dealloc(%struct.VP9RowMTSyncData*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_multi_thread_tile_init(%struct.VP9_COMP* nocapture readonly) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %3 = load i32, i32* %2, align 8
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %5 = load i32, i32* %4, align 16
  %6 = add nsw i32 %5, 7
  %7 = ashr i32 %6, 3
  %8 = icmp eq i32 %3, 31
  br i1 %8, label %34, label %9

9:                                                ; preds = %1
  %10 = shl i32 1, %3
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 32
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 16
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 32
  %14 = sext i32 %10 to i64
  br label %15

15:                                               ; preds = %9, %22
  %16 = phi i64 [ 0, %9 ], [ %32, %22 ]
  %17 = load %struct.TileDataEnc*, %struct.TileDataEnc** %11, align 16
  %18 = load i32, i32* %12, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = load i32, i32* %13, align 4
  br label %22

22:                                               ; preds = %15, %20
  %23 = phi i32 [ %21, %20 ], [ %7, %15 ]
  %24 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %17, i64 %16, i32 4, i32 2
  %25 = bitcast i32** %24 to i8**
  %26 = load i8*, i8** %25, align 8
  %27 = sext i32 %23 to i64
  %28 = shl nsw i64 %27, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 -1, i64 %28, i1 false)
  %29 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %17, i64 %16, i32 3
  %30 = bitcast %struct.FIRSTPASS_DATA* %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 136, i1 false)
  %31 = getelementptr inbounds %struct.TileDataEnc, %struct.TileDataEnc* %17, i64 %16, i32 3, i32 12
  store i32 -1, i32* %31, align 4
  %32 = add nuw nsw i64 %16, 1
  %33 = icmp slt i64 %32, %14
  br i1 %33, label %15, label %34

34:                                               ; preds = %22, %1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp9_assign_tile_to_thread(%struct.MultiThreadHandle* nocapture, i32, i32) local_unnamed_addr #4 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %53

5:                                                ; preds = %3
  %6 = zext i32 %2 to i64
  %7 = add nsw i64 %6, -1
  %8 = and i64 %6, 3
  %9 = icmp ult i64 %7, 3
  br i1 %9, label %38, label %10

10:                                               ; preds = %5
  %11 = sub nsw i64 %6, %8
  br label %12

12:                                               ; preds = %12, %10
  %13 = phi i64 [ 0, %10 ], [ %35, %12 ]
  %14 = phi i32 [ 0, %10 ], [ %34, %12 ]
  %15 = phi i64 [ %11, %10 ], [ %36, %12 ]
  %16 = add nsw i32 %14, 1
  %17 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 7, i64 %13
  store i32 %14, i32* %17, align 4
  %18 = icmp eq i32 %16, %1
  %19 = select i1 %18, i32 0, i32 %16
  %20 = or i64 %13, 1
  %21 = add nsw i32 %19, 1
  %22 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 7, i64 %20
  store i32 %19, i32* %22, align 4
  %23 = icmp eq i32 %21, %1
  %24 = select i1 %23, i32 0, i32 %21
  %25 = or i64 %13, 2
  %26 = add nsw i32 %24, 1
  %27 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 7, i64 %25
  store i32 %24, i32* %27, align 4
  %28 = icmp eq i32 %26, %1
  %29 = select i1 %28, i32 0, i32 %26
  %30 = or i64 %13, 3
  %31 = add nsw i32 %29, 1
  %32 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 7, i64 %30
  store i32 %29, i32* %32, align 4
  %33 = icmp eq i32 %31, %1
  %34 = select i1 %33, i32 0, i32 %31
  %35 = add nuw nsw i64 %13, 4
  %36 = add i64 %15, -4
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %12

38:                                               ; preds = %12, %5
  %39 = phi i64 [ 0, %5 ], [ %35, %12 ]
  %40 = phi i32 [ 0, %5 ], [ %34, %12 ]
  %41 = icmp eq i64 %8, 0
  br i1 %41, label %53, label %42

42:                                               ; preds = %38, %42
  %43 = phi i64 [ %50, %42 ], [ %39, %38 ]
  %44 = phi i32 [ %49, %42 ], [ %40, %38 ]
  %45 = phi i64 [ %51, %42 ], [ %8, %38 ]
  %46 = add nsw i32 %44, 1
  %47 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 7, i64 %43
  store i32 %44, i32* %47, align 4
  %48 = icmp eq i32 %46, %1
  %49 = select i1 %48, i32 0, i32 %46
  %50 = add nuw nsw i64 %43, 1
  %51 = add i64 %45, -1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %42, !llvm.loop !5

53:                                               ; preds = %38, %42, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_get_job_queue_status(%struct.MultiThreadHandle*, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %3, i32 1
  %5 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %4) #5
  %6 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 5
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %3, i32 0, i32 1
  %9 = load i32, i32* %8, align 8
  %10 = sub nsw i32 %7, %9
  %11 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %4) #5
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_prepare_job_queue(%struct.VP9_COMP* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 4
  %4 = load %struct.JobQueue*, %struct.JobQueue** %3, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %6 = load i32, i32* %5, align 8
  %7 = shl i32 1, %6
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %9 = load i32, i32* %8, align 16
  switch i32 %1, label %19 [
    i32 1, label %10
    i32 0, label %13
    i32 2, label %16
  ]

10:                                               ; preds = %2
  %11 = add nsw i32 %9, 7
  %12 = ashr i32 %11, 3
  br label %19

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 32
  %15 = load i32, i32* %14, align 4
  br label %19

16:                                               ; preds = %2
  %17 = add nsw i32 %9, 3
  %18 = ashr i32 %17, 2
  br label %19

19:                                               ; preds = %2, %16, %13, %10
  %20 = phi i32 [ 0, %2 ], [ %18, %16 ], [ %15, %13 ], [ %12, %10 ]
  %21 = shl i32 %20, %6
  %22 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 5
  store i32 %20, i32* %22, align 8
  %23 = bitcast %struct.JobQueue* %4 to i8*
  %24 = sext i32 %21 to i64
  %25 = mul nsw i64 %24, 24
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 %25, i1 false)
  %26 = icmp eq i32 %6, 31
  br i1 %26, label %32, label %27

27:                                               ; preds = %19
  %28 = icmp sgt i32 %20, 0
  %29 = icmp eq i32 %1, 1
  %30 = sext i32 %20 to i64
  %31 = sext i32 %7 to i64
  br label %42

32:                                               ; preds = %76, %19
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %34 = load i32, i32* %33, align 4
  %35 = icmp sgt i32 %34, 0
  br i1 %35, label %36, label %95

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 137
  %38 = icmp sgt i32 %7, 1
  %39 = select i1 %38, i32 %7, i32 1
  %40 = zext i32 %39 to i64
  %41 = shl nuw nsw i64 %40, 2
  br label %82

42:                                               ; preds = %27, %76
  %43 = phi i64 [ 0, %27 ], [ %80, %76 ]
  %44 = phi %struct.JobQueue* [ %4, %27 ], [ %79, %76 ]
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 6, i64 %43, i32 0
  %46 = bitcast %struct.JobQueueHandle* %45 to %struct.JobQueue**
  store %struct.JobQueue* %44, %struct.JobQueue** %46, align 8
  %47 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 6, i64 %43, i32 0, i32 1
  store i32 0, i32* %47, align 8
  br i1 %28, label %48, label %76

48:                                               ; preds = %42
  %49 = trunc i64 %43 to i32
  br label %50

50:                                               ; preds = %70, %48
  %51 = phi i32 [ %72, %70 ], [ 0, %48 ]
  %52 = phi %struct.JobQueue* [ %58, %70 ], [ %44, %48 ]
  %53 = phi i32 [ %74, %70 ], [ 0, %48 ]
  %54 = phi i32 [ %73, %70 ], [ 0, %48 ]
  %55 = getelementptr inbounds %struct.JobQueue, %struct.JobQueue* %52, i64 0, i32 1, i32 0
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.JobQueue, %struct.JobQueue* %52, i64 0, i32 1, i32 1
  store i32 %49, i32* %56, align 4
  %57 = getelementptr inbounds %struct.JobQueue, %struct.JobQueue* %52, i64 0, i32 1, i32 2
  store i32 %51, i32* %57, align 8
  %58 = getelementptr inbounds %struct.JobQueue, %struct.JobQueue* %52, i64 1
  %59 = bitcast %struct.JobQueue* %52 to %struct.JobQueue**
  store %struct.JobQueue* %58, %struct.JobQueue** %59, align 8
  br i1 %29, label %60, label %70

60:                                               ; preds = %50
  %61 = sext i32 %51 to i64
  %62 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 3, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, -1
  %65 = icmp slt i32 %53, %64
  %66 = select i1 %65, i32 %53, i32 -1
  %67 = xor i1 %65, true
  %68 = zext i1 %67 to i32
  %69 = add nsw i32 %51, %68
  br label %70

70:                                               ; preds = %60, %50
  %71 = phi i32 [ %53, %50 ], [ %66, %60 ]
  %72 = phi i32 [ %51, %50 ], [ %69, %60 ]
  %73 = add nuw nsw i32 %54, 1
  %74 = add nsw i32 %71, 1
  %75 = icmp eq i32 %73, %20
  br i1 %75, label %76, label %50

76:                                               ; preds = %70, %42
  %77 = phi %struct.JobQueue* [ %44, %42 ], [ %58, %70 ]
  %78 = getelementptr inbounds %struct.JobQueue, %struct.JobQueue* %77, i64 -1, i32 0
  store i8* null, i8** %78, align 8
  %79 = getelementptr inbounds %struct.JobQueue, %struct.JobQueue* %44, i64 %30
  %80 = add nuw nsw i64 %43, 1
  %81 = icmp slt i64 %80, %31
  br i1 %81, label %42, label %32

82:                                               ; preds = %36, %90
  %83 = phi i64 [ 0, %36 ], [ %91, %90 ]
  %84 = load %struct.EncWorkerData*, %struct.EncWorkerData** %37, align 16
  %85 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %84, i64 %83, i32 3
  %86 = trunc i64 %83 to i32
  store i32 %86, i32* %85, align 4
  br i1 %26, label %90, label %87

87:                                               ; preds = %82
  %88 = getelementptr %struct.EncWorkerData, %struct.EncWorkerData* %84, i64 %83, i32 4, i64 0
  %89 = bitcast i32* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %89, i8 0, i64 %41, i1 false)
  br label %90

90:                                               ; preds = %87, %82
  %91 = add nuw nsw i64 %83, 1
  %92 = load i32, i32* %33, align 4
  %93 = sext i32 %92 to i64
  %94 = icmp slt i64 %91, %93
  br i1 %94, label %82, label %95

95:                                               ; preds = %90, %32
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_get_tiles_proc_status(%struct.MultiThreadHandle*, i32* nocapture, i32* nocapture, i32) local_unnamed_addr #0 {
  %5 = load i32, i32* %2, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i32, i32* %1, i64 %6
  store i32 1, i32* %7, align 4
  %8 = icmp sgt i32 %3, 0
  br i1 %8, label %9, label %42

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 5
  %11 = zext i32 %3 to i64
  br label %12

12:                                               ; preds = %34, %9
  %13 = phi i64 [ 0, %9 ], [ %37, %34 ]
  %14 = phi i32 [ 0, %9 ], [ %36, %34 ]
  %15 = phi i32 [ -1, %9 ], [ %35, %34 ]
  %16 = getelementptr inbounds i32, i32* %1, i64 %13
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %12
  %20 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %13, i32 1
  %21 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %20) #5
  %22 = load i32, i32* %10, align 8
  %23 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %0, i64 0, i32 6, i64 %13, i32 0, i32 1
  %24 = load i32, i32* %23, align 8
  %25 = sub nsw i32 %22, %24
  %26 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %20) #5
  %27 = icmp eq i32 %25, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %19
  store i32 1, i32* %16, align 4
  br label %29

29:                                               ; preds = %28, %19
  %30 = icmp sgt i32 %25, %14
  %31 = trunc i64 %13 to i32
  %32 = select i1 %30, i32 %31, i32 %15
  %33 = select i1 %30, i32 %25, i32 %14
  br label %34

34:                                               ; preds = %29, %12
  %35 = phi i32 [ %15, %12 ], [ %32, %29 ]
  %36 = phi i32 [ %14, %12 ], [ %33, %29 ]
  %37 = add nuw nsw i64 %13, 1
  %38 = icmp eq i64 %37, %11
  br i1 %38, label %39, label %12

39:                                               ; preds = %34
  %40 = icmp eq i32 %35, -1
  br i1 %40, label %42, label %41

41:                                               ; preds = %39
  store i32 %35, i32* %2, align 4
  br label %42

42:                                               ; preds = %4, %39, %41
  %43 = phi i32 [ 0, %41 ], [ 1, %39 ], [ 1, %4 ]
  ret i32 %43
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
