; ModuleID = '../../third_party/abseil-cpp/absl/base/internal/spinlock_wait.cc'
source_filename = "../../third_party/abseil-cpp/absl/base/internal/spinlock_wait.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.timespec = type { i64, i64 }
%"struct.absl::base_internal::SpinLockWaitTransition" = type { i32, i32, i8 }

@_ZN4absl13base_internalL10delay_randE.0.0.0.0.0 = internal unnamed_addr global i64 0, align 8

; Function Attrs: nounwind ssp uwtable
define weak hidden void @AbslInternalSpinLockDelay(%"struct.std::__1::atomic"*, i32, i32, i32) local_unnamed_addr #0 {
  %5 = alloca %struct.timespec, align 8
  %6 = tail call i32* @__errno_location() #5
  %7 = load i32, i32* %6, align 4
  %8 = bitcast %struct.timespec* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #6
  %9 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i64 0, i32 0
  %10 = getelementptr inbounds %struct.timespec, %struct.timespec* %5, i64 0, i32 1
  store i64 0, i64* %9, align 8
  %11 = load atomic i64, i64* @_ZN4absl13base_internalL10delay_randE.0.0.0.0.0 monotonic, align 8
  %12 = mul i64 %11, 25214903917
  %13 = add i64 %12, 11
  store atomic i64 %13, i64* @_ZN4absl13base_internalL10delay_randE.0.0.0.0.0 monotonic, align 8
  %14 = icmp ult i32 %2, 32
  %15 = select i1 %14, i32 %2, i32 32
  %16 = lshr i32 %15, 3
  %17 = shl i32 131072, %16
  %18 = add nsw i32 %17, -1
  %19 = trunc i64 %13 to i32
  %20 = and i32 %18, %19
  %21 = or i32 %20, %17
  %22 = sext i32 %21 to i64
  store i64 %22, i64* %10, align 8
  %23 = call i64 (i64, ...) @syscall(i64 202, %"struct.std::__1::atomic"* %0, i32 128, i32 %1, %struct.timespec* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #6
  store i32 %7, i32* %6, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @_ZN4absl13base_internal24SpinLockSuggestedDelayNSEi(i32) local_unnamed_addr #2 {
  %2 = load atomic i64, i64* @_ZN4absl13base_internalL10delay_randE.0.0.0.0.0 monotonic, align 8
  %3 = mul i64 %2, 25214903917
  %4 = add i64 %3, 11
  store atomic i64 %4, i64* @_ZN4absl13base_internalL10delay_randE.0.0.0.0.0 monotonic, align 8
  %5 = icmp ult i32 %0, 32
  %6 = select i1 %5, i32 %0, i32 32
  %7 = lshr i32 %6, 3
  %8 = shl i32 131072, %7
  %9 = add nsw i32 %8, -1
  %10 = trunc i64 %4 to i32
  %11 = and i32 %9, %10
  %12 = or i32 %11, %8
  ret i32 %12
}

; Function Attrs: nounwind
declare i64 @syscall(i64, ...) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak hidden void @AbslInternalSpinLockWake(%"struct.std::__1::atomic"*, i1 zeroext) local_unnamed_addr #0 {
  %3 = select i1 %1, i32 2147483647, i32 1
  %4 = tail call i64 (i64, ...) @syscall(i64 202, %"struct.std::__1::atomic"* %0, i32 129, i32 %3, i32 0) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN4absl13base_internal12SpinLockWaitEPNSt3__16atomicIjEEiPKNS0_22SpinLockWaitTransitionENS0_14SchedulingModeE(%"struct.std::__1::atomic"*, i32, %"struct.absl::base_internal::SpinLockWaitTransition"* nocapture readonly, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = icmp eq i32 %1, 0
  %7 = zext i32 %1 to i64
  br label %8

8:                                                ; preds = %4, %21
  %9 = phi i32 [ 0, %4 ], [ %22, %21 ]
  br label %10

10:                                               ; preds = %8, %31
  br label %11

11:                                               ; preds = %10, %28
  %12 = load atomic i32, i32* %5 acquire, align 4
  br i1 %6, label %21, label %13

13:                                               ; preds = %11, %18
  %14 = phi i64 [ %19, %18 ], [ 0, %11 ]
  %15 = getelementptr inbounds %"struct.absl::base_internal::SpinLockWaitTransition", %"struct.absl::base_internal::SpinLockWaitTransition"* %2, i64 %14, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %12, %16
  br i1 %17, label %23, label %18

18:                                               ; preds = %13
  %19 = add nuw nsw i64 %14, 1
  %20 = icmp eq i64 %19, %7
  br i1 %20, label %21, label %13

21:                                               ; preds = %11, %18
  %22 = add nuw nsw i32 %9, 1
  tail call void @AbslInternalSpinLockDelay(%"struct.std::__1::atomic"* %0, i32 %12, i32 %22, i32 %3) #6
  br label %8

23:                                               ; preds = %13
  %24 = and i64 %14, 4294967295
  %25 = getelementptr inbounds %"struct.absl::base_internal::SpinLockWaitTransition", %"struct.absl::base_internal::SpinLockWaitTransition"* %2, i64 %24, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, %12
  br i1 %27, label %31, label %28

28:                                               ; preds = %23
  %29 = cmpxchg i32* %5, i32 %12, i32 %26 acquire monotonic
  %30 = extractvalue { i32, i1 } %29, 1
  br i1 %30, label %31, label %11

31:                                               ; preds = %28, %23
  %32 = getelementptr inbounds %"struct.absl::base_internal::SpinLockWaitTransition", %"struct.absl::base_internal::SpinLockWaitTransition"* %2, i64 %24, i32 2
  %33 = load i8, i8* %32, align 4, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %10, label %35

35:                                               ; preds = %31
  ret i32 %12
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
