; ModuleID = '../../components/sync/engine/backoff_delay_provider.cc'
source_filename = "../../components/sync/engine/backoff_delay_provider.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::TimeDelta" = type { i64 }
%"class.syncer::BackoffDelayProvider" = type { i32 (...)**, %"class.base::TimeDelta", %"class.base::TimeDelta" }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"struct.syncer::ModelNeutralState" = type <{ %"class.syncer::EnumSet", i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %"class.syncer::SyncerError", %"class.syncer::SyncerError", %"class.syncer::SyncerError", i8, [7 x i8] }>
%"class.syncer::EnumSet" = type { %"class.std::__1::bitset" }
%"class.std::__1::bitset" = type { %"class.std::__1::__bitset" }
%"class.std::__1::__bitset" = type { i64 }
%"class.syncer::SyncerError" = type { i32, i32, i32 }

@_ZTVN6syncer20BackoffDelayProviderE = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.syncer::BackoffDelayProvider"*)* @_ZN6syncer20BackoffDelayProviderD2Ev to i8*), i8* bitcast (void (%"class.syncer::BackoffDelayProvider"*)* @_ZN6syncer20BackoffDelayProviderD0Ev to i8*), i8* bitcast (i64 (%"class.syncer::BackoffDelayProvider"*, %"class.base::TimeDelta"*)* @_ZN6syncer20BackoffDelayProvider8GetDelayERKN4base9TimeDeltaE to i8*), i8* bitcast (i64 (%"class.syncer::BackoffDelayProvider"*, %"struct.syncer::ModelNeutralState"*)* @_ZNK6syncer20BackoffDelayProvider15GetInitialDelayERKNS_17ModelNeutralStateE to i8*)] }, align 8
@_ZN6syncerL15kMaxBackoffTimeE = internal unnamed_addr constant %"class.base::TimeDelta" { i64 600000000 }, align 8
@.str = private unnamed_addr constant [23 x i8] c"../../base/time/time.h\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"!is_inf() || (delta_ == other.delta_)\00", align 1

@_ZN6syncer20BackoffDelayProviderC1ERKN4base9TimeDeltaES4_ = hidden unnamed_addr alias void (%"class.syncer::BackoffDelayProvider"*, %"class.base::TimeDelta"*, %"class.base::TimeDelta"*), void (%"class.syncer::BackoffDelayProvider"*, %"class.base::TimeDelta"*, %"class.base::TimeDelta"*)* @_ZN6syncer20BackoffDelayProviderC2ERKN4base9TimeDeltaES4_
@_ZN6syncer20BackoffDelayProviderD1Ev = hidden unnamed_addr alias void (%"class.syncer::BackoffDelayProvider"*), void (%"class.syncer::BackoffDelayProvider"*)* @_ZN6syncer20BackoffDelayProviderD2Ev

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.syncer::BackoffDelayProvider"* @_ZN6syncer20BackoffDelayProvider12FromDefaultsEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 24) #10
  %2 = bitcast i8* %1 to %"class.syncer::BackoffDelayProvider"*
  %3 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6syncer20BackoffDelayProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %1, i64 8
  %5 = bitcast i8* %4 to <2 x i64>*
  store <2 x i64> <i64 30000000, i64 0>, <2 x i64>* %5, align 8
  ret %"class.syncer::BackoffDelayProvider"* %2
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden noalias nonnull %"class.syncer::BackoffDelayProvider"* @_ZN6syncer20BackoffDelayProvider29WithShortInitialRetryOverrideEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 24) #10
  %2 = bitcast i8* %1 to %"class.syncer::BackoffDelayProvider"*
  %3 = bitcast i8* %1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6syncer20BackoffDelayProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds i8, i8* %1, i64 8
  %5 = bitcast i8* %4 to <2 x i64>*
  store <2 x i64> <i64 1000000, i64 0>, <2 x i64>* %5, align 8
  ret %"class.syncer::BackoffDelayProvider"* %2
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN6syncer20BackoffDelayProviderC2ERKN4base9TimeDeltaES4_(%"class.syncer::BackoffDelayProvider"* nocapture, %"class.base::TimeDelta"* nocapture readonly dereferenceable(8), %"class.base::TimeDelta"* nocapture readonly dereferenceable(8)) unnamed_addr #2 align 2 {
  %4 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTVN6syncer20BackoffDelayProviderE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %5 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %1, i64 0, i32 0
  %6 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 1, i32 0
  %7 = load i64, i64* %5, align 8
  store i64 %7, i64* %6, align 8
  %8 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %2, i64 0, i32 0
  %9 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 2, i32 0
  %10 = load i64, i64* %8, align 8
  store i64 %10, i64* %9, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN6syncer20BackoffDelayProviderD2Ev(%"class.syncer::BackoffDelayProvider"* nocapture) unnamed_addr #3 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6syncer20BackoffDelayProviderD0Ev(%"class.syncer::BackoffDelayProvider"*) unnamed_addr #4 align 2 {
  %2 = bitcast %"class.syncer::BackoffDelayProvider"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6syncer20BackoffDelayProvider8GetDelayERKN4base9TimeDeltaE(%"class.syncer::BackoffDelayProvider"* nocapture readnone, %"class.base::TimeDelta"* nocapture readonly dereferenceable(8)) unnamed_addr #4 align 2 {
  %3 = tail call i32 @_ZN4base7RandIntEii(i32 0, i32 1) #11
  %4 = shl i32 %3, 1
  %5 = add nsw i32 %4, -1
  %6 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %1, i64 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = tail call fastcc i64 @_ZN6syncer12_GLOBAL__N_112GetDelayImplEN4base9TimeDeltaEi(i64 %7, i32 %5)
  ret i64 %8
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

declare i32 @_ZN4base7RandIntEii(i32, i32) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @_ZN6syncer12_GLOBAL__N_112GetDelayImplEN4base9TimeDeltaEi(i64, i32) unnamed_addr #4 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = icmp sgt i64 %0, 599999999
  br i1 %6, label %66, label %7

7:                                                ; preds = %2
  %8 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  store i64 -6148914691236517206, i64* %4, align 8
  %9 = sitofp i64 %0 to double
  %10 = fmul double %9, 2.000000e+00
  %11 = fcmp oge double %10, 0xC3E0000000000000
  %12 = fcmp ole double %10, 0x43DFFFFFFFFFFFFF
  %13 = and i1 %12, %11
  %14 = fptosi double %10 to i64
  %15 = icmp sgt i64 %0, -1
  %16 = select i1 %15, i64 9223372036854775807, i64 -9223372036854775808
  %17 = select i1 %13, i64 %14, i64 %16
  %18 = icmp sgt i64 %17, 1000000
  %19 = sitofp i32 %1 to double
  %20 = fmul double %19, 5.000000e-01
  %21 = fmul double %20, %9
  %22 = fcmp oge double %21, 0xC3E0000000000000
  %23 = fcmp ole double %21, 0x43DFFFFFFFFFFFFF
  %24 = and i1 %23, %22
  %25 = fptosi double %21 to i64
  br i1 %24, label %33, label %26

26:                                               ; preds = %7
  %27 = lshr i64 %0, 63
  %28 = trunc i64 %27 to i32
  %29 = fcmp olt double %20, 0.000000e+00
  %30 = zext i1 %29 to i32
  %31 = icmp eq i32 %28, %30
  %32 = select i1 %31, i64 9223372036854775807, i64 -9223372036854775808
  br label %33

33:                                               ; preds = %7, %26
  %34 = phi i64 [ %25, %7 ], [ %32, %26 ]
  %35 = add i64 %34, -9223372036854775807
  %36 = icmp ult i64 %35, 2
  %37 = select i1 %18, i64 %17, i64 1000000
  br i1 %36, label %45, label %38

38:                                               ; preds = %33
  %39 = icmp slt i64 %34, 0
  %40 = select i1 %39, i64 -9223372036854775808, i64 9223372036854775807
  %41 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %37, i64 %34) #11
  %42 = extractvalue { i64, i1 } %41, 1
  %43 = extractvalue { i64, i1 } %41, 0
  %44 = select i1 %42, i64 %40, i64 %43, !prof !2
  br label %53

45:                                               ; preds = %33
  %46 = add nsw i64 %37, -9223372036854775807
  %47 = icmp ugt i64 %46, 1
  %48 = icmp eq i64 %37, %34
  %49 = or i1 %48, %47
  br i1 %49, label %53, label %50

50:                                               ; preds = %45
  %51 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #11
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 378, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0)) #11
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #11
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #11
  br label %53

53:                                               ; preds = %38, %45, %50
  %54 = phi i64 [ %44, %38 ], [ %34, %45 ], [ %34, %50 ]
  store i64 %54, i64* %4, align 8
  %55 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %55)
  store i64 1000000, i64* %5, align 8
  %56 = icmp sgt i64 %54, 600000000
  %57 = bitcast i64* %4 to %"class.base::TimeDelta"*
  %58 = select i1 %56, %"class.base::TimeDelta"* @_ZN6syncerL15kMaxBackoffTimeE, %"class.base::TimeDelta"* %57
  %59 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %58, i64 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = icmp sgt i64 %60, 1000000
  %62 = bitcast i64* %5 to %"class.base::TimeDelta"*
  %63 = select i1 %61, %"class.base::TimeDelta"* %58, %"class.base::TimeDelta"* %62
  %64 = getelementptr inbounds %"class.base::TimeDelta", %"class.base::TimeDelta"* %63, i64 0, i32 0
  %65 = load i64, i64* %64, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  br label %66

66:                                               ; preds = %2, %53
  %67 = phi i64 [ %65, %53 ], [ 600000000, %2 ]
  ret i64 %67
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6syncer20BackoffDelayProvider15GetInitialDelayERKNS_17ModelNeutralStateE(%"class.syncer::BackoffDelayProvider"* nocapture readonly, %"struct.syncer::ModelNeutralState"* dereferenceable(96)) unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"struct.syncer::ModelNeutralState", %"struct.syncer::ModelNeutralState"* %1, i64 0, i32 14, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.syncer::ModelNeutralState", %"struct.syncer::ModelNeutralState"* %1, i64 0, i32 13, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %10, label %12

10:                                               ; preds = %6, %2
  %11 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 1, i32 0
  br label %35

12:                                               ; preds = %6
  %13 = getelementptr inbounds %"struct.syncer::ModelNeutralState", %"struct.syncer::ModelNeutralState"* %1, i64 0, i32 12
  %14 = tail call zeroext i1 @_ZNK6syncer11SyncerError13IsActualErrorEv(%"class.syncer::SyncerError"* %13) #11
  br i1 %14, label %15, label %17

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 1, i32 0
  br label %35

17:                                               ; preds = %12
  %18 = load i32, i32* %7, align 4
  %19 = icmp eq i32 %18, 10
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = load i32, i32* %3, align 4
  %22 = icmp eq i32 %21, 10
  br i1 %22, label %23, label %25

23:                                               ; preds = %20, %17
  %24 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 2, i32 0
  br label %35

25:                                               ; preds = %20
  %26 = icmp eq i32 %18, 20
  br i1 %26, label %27, label %29

27:                                               ; preds = %25
  %28 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 2, i32 0
  br label %35

29:                                               ; preds = %25
  %30 = icmp eq i32 %21, 13
  br i1 %30, label %31, label %33

31:                                               ; preds = %29
  %32 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 2, i32 0
  br label %35

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.syncer::BackoffDelayProvider", %"class.syncer::BackoffDelayProvider"* %0, i64 0, i32 1, i32 0
  br label %35

35:                                               ; preds = %33, %31, %27, %23, %15, %10
  %36 = phi i64* [ %11, %10 ], [ %16, %15 ], [ %24, %23 ], [ %28, %27 ], [ %32, %31 ], [ %34, %33 ]
  %37 = load i64, i64* %36, align 8
  ret i64 %37
}

declare zeroext i1 @_ZNK6syncer11SyncerError13IsActualErrorEv(%"class.syncer::SyncerError"*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6syncer20BackoffDelayProvider18GetDelayForTestingEN4base9TimeDeltaEi(%"class.syncer::BackoffDelayProvider"* nocapture readnone, i64, i32) local_unnamed_addr #4 align 2 {
  %4 = tail call fastcc i64 @_ZN6syncer12_GLOBAL__N_112GetDelayImplEN4base9TimeDeltaEi(i64 %1, i32 %2)
  ret i64 %4
}

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #7

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #7

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind readnone speculatable
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #9

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone speculatable }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
