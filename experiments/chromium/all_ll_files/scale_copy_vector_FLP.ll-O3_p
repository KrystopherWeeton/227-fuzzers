; ModuleID = '../../third_party/opus/src/silk/float/scale_copy_vector_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/scale_copy_vector_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @silk_scale_copy_vector_FLP(float* nocapture, float* nocapture readonly, float, i32) local_unnamed_addr #0 {
  %5 = and i32 %3, 65532
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %54, label %7

7:                                                ; preds = %4
  %8 = zext i32 %5 to i64
  %9 = add nsw i64 %8, -1
  %10 = lshr i64 %9, 2
  %11 = add nuw nsw i64 %10, 1
  %12 = icmp ult i64 %11, 4
  br i1 %12, label %13, label %15

13:                                               ; preds = %49, %15, %7
  %14 = phi i64 [ 0, %15 ], [ 0, %7 ], [ %23, %49 ]
  br label %156

15:                                               ; preds = %7
  %16 = getelementptr float, float* %0, i64 %8
  %17 = getelementptr float, float* %1, i64 %8
  %18 = icmp ugt float* %17, %0
  %19 = icmp ugt float* %16, %1
  %20 = and i1 %18, %19
  br i1 %20, label %13, label %21

21:                                               ; preds = %15
  %22 = and i64 %11, 9223372036854775804
  %23 = shl i64 %22, 2
  %24 = insertelement <4 x float> undef, float %2, i32 0
  %25 = shufflevector <4 x float> %24, <4 x float> undef, <4 x i32> zeroinitializer
  %26 = getelementptr inbounds float, float* %0, i64 -3
  br label %27

27:                                               ; preds = %27, %21
  %28 = phi i64 [ 0, %21 ], [ %47, %27 ]
  %29 = shl i64 %28, 2
  %30 = getelementptr inbounds float, float* %1, i64 %29
  %31 = bitcast float* %30 to <16 x float>*
  %32 = load <16 x float>, <16 x float>* %31, align 4
  %33 = shufflevector <16 x float> %32, <16 x float> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %34 = shufflevector <16 x float> %32, <16 x float> undef, <4 x i32> <i32 1, i32 5, i32 9, i32 13>
  %35 = shufflevector <16 x float> %32, <16 x float> undef, <4 x i32> <i32 2, i32 6, i32 10, i32 14>
  %36 = shufflevector <16 x float> %32, <16 x float> undef, <4 x i32> <i32 3, i32 7, i32 11, i32 15>
  %37 = fmul <4 x float> %33, %25
  %38 = fmul <4 x float> %34, %25
  %39 = fmul <4 x float> %35, %25
  %40 = or i64 %29, 3
  %41 = fmul <4 x float> %36, %25
  %42 = getelementptr inbounds float, float* %26, i64 %40
  %43 = bitcast float* %42 to <16 x float>*
  %44 = shufflevector <4 x float> %37, <4 x float> %38, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %45 = shufflevector <4 x float> %39, <4 x float> %41, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %46 = shufflevector <8 x float> %44, <8 x float> %45, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 1, i32 5, i32 9, i32 13, i32 2, i32 6, i32 10, i32 14, i32 3, i32 7, i32 11, i32 15>
  store <16 x float> %46, <16 x float>* %43, align 4
  %47 = add i64 %28, 4
  %48 = icmp eq i64 %47, %22
  br i1 %48, label %49, label %27, !llvm.loop !2

49:                                               ; preds = %27
  %50 = icmp eq i64 %11, %22
  br i1 %50, label %51, label %13

51:                                               ; preds = %156, %49
  %52 = phi i64 [ %23, %49 ], [ %177, %156 ]
  %53 = trunc i64 %52 to i32
  br label %54

54:                                               ; preds = %51, %4
  %55 = phi i32 [ 0, %4 ], [ %53, %51 ]
  %56 = icmp slt i32 %55, %3
  br i1 %56, label %57, label %202

57:                                               ; preds = %54
  %58 = zext i32 %55 to i64
  %59 = zext i32 %3 to i64
  %60 = sub nsw i64 %59, %58
  %61 = icmp ult i64 %60, 8
  br i1 %61, label %62, label %82

62:                                               ; preds = %154, %82, %57
  %63 = phi i64 [ %58, %82 ], [ %58, %57 ], [ %92, %154 ]
  %64 = sub nsw i64 %59, %63
  %65 = xor i64 %63, -1
  %66 = add nsw i64 %65, %59
  %67 = and i64 %64, 3
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %79, label %69

69:                                               ; preds = %62, %69
  %70 = phi i64 [ %76, %69 ], [ %63, %62 ]
  %71 = phi i64 [ %77, %69 ], [ %67, %62 ]
  %72 = getelementptr inbounds float, float* %1, i64 %70
  %73 = load float, float* %72, align 4
  %74 = fmul float %73, %2
  %75 = getelementptr inbounds float, float* %0, i64 %70
  store float %74, float* %75, align 4
  %76 = add nuw nsw i64 %70, 1
  %77 = add i64 %71, -1
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %79, label %69, !llvm.loop !4

79:                                               ; preds = %69, %62
  %80 = phi i64 [ %63, %62 ], [ %76, %69 ]
  %81 = icmp ult i64 %66, 3
  br i1 %81, label %202, label %179

82:                                               ; preds = %57
  %83 = getelementptr float, float* %0, i64 %58
  %84 = getelementptr float, float* %0, i64 %59
  %85 = getelementptr float, float* %1, i64 %58
  %86 = getelementptr float, float* %1, i64 %59
  %87 = icmp ult float* %83, %86
  %88 = icmp ult float* %85, %84
  %89 = and i1 %87, %88
  br i1 %89, label %62, label %90

90:                                               ; preds = %82
  %91 = and i64 %60, -8
  %92 = add nsw i64 %91, %58
  %93 = insertelement <4 x float> undef, float %2, i32 0
  %94 = shufflevector <4 x float> %93, <4 x float> undef, <4 x i32> zeroinitializer
  %95 = insertelement <4 x float> undef, float %2, i32 0
  %96 = shufflevector <4 x float> %95, <4 x float> undef, <4 x i32> zeroinitializer
  %97 = add nsw i64 %91, -8
  %98 = lshr exact i64 %97, 3
  %99 = add nuw nsw i64 %98, 1
  %100 = and i64 %99, 1
  %101 = icmp eq i64 %97, 0
  br i1 %101, label %137, label %102

102:                                              ; preds = %90
  %103 = sub nuw nsw i64 %99, %100
  br label %104

104:                                              ; preds = %104, %102
  %105 = phi i64 [ 0, %102 ], [ %134, %104 ]
  %106 = phi i64 [ %103, %102 ], [ %135, %104 ]
  %107 = add i64 %105, %58
  %108 = getelementptr inbounds float, float* %1, i64 %107
  %109 = bitcast float* %108 to <4 x float>*
  %110 = load <4 x float>, <4 x float>* %109, align 4, !alias.scope !6
  %111 = getelementptr inbounds float, float* %108, i64 4
  %112 = bitcast float* %111 to <4 x float>*
  %113 = load <4 x float>, <4 x float>* %112, align 4, !alias.scope !6
  %114 = fmul <4 x float> %110, %94
  %115 = fmul <4 x float> %113, %96
  %116 = getelementptr inbounds float, float* %0, i64 %107
  %117 = bitcast float* %116 to <4 x float>*
  store <4 x float> %114, <4 x float>* %117, align 4, !alias.scope !9, !noalias !6
  %118 = getelementptr inbounds float, float* %116, i64 4
  %119 = bitcast float* %118 to <4 x float>*
  store <4 x float> %115, <4 x float>* %119, align 4, !alias.scope !9, !noalias !6
  %120 = or i64 %105, 8
  %121 = add i64 %120, %58
  %122 = getelementptr inbounds float, float* %1, i64 %121
  %123 = bitcast float* %122 to <4 x float>*
  %124 = load <4 x float>, <4 x float>* %123, align 4, !alias.scope !6
  %125 = getelementptr inbounds float, float* %122, i64 4
  %126 = bitcast float* %125 to <4 x float>*
  %127 = load <4 x float>, <4 x float>* %126, align 4, !alias.scope !6
  %128 = fmul <4 x float> %124, %94
  %129 = fmul <4 x float> %127, %96
  %130 = getelementptr inbounds float, float* %0, i64 %121
  %131 = bitcast float* %130 to <4 x float>*
  store <4 x float> %128, <4 x float>* %131, align 4, !alias.scope !9, !noalias !6
  %132 = getelementptr inbounds float, float* %130, i64 4
  %133 = bitcast float* %132 to <4 x float>*
  store <4 x float> %129, <4 x float>* %133, align 4, !alias.scope !9, !noalias !6
  %134 = add i64 %105, 16
  %135 = add i64 %106, -2
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %104, !llvm.loop !11

137:                                              ; preds = %104, %90
  %138 = phi i64 [ 0, %90 ], [ %134, %104 ]
  %139 = icmp eq i64 %100, 0
  br i1 %139, label %154, label %140

140:                                              ; preds = %137
  %141 = add i64 %138, %58
  %142 = getelementptr inbounds float, float* %1, i64 %141
  %143 = bitcast float* %142 to <4 x float>*
  %144 = load <4 x float>, <4 x float>* %143, align 4, !alias.scope !6
  %145 = getelementptr inbounds float, float* %142, i64 4
  %146 = bitcast float* %145 to <4 x float>*
  %147 = load <4 x float>, <4 x float>* %146, align 4, !alias.scope !6
  %148 = fmul <4 x float> %144, %94
  %149 = fmul <4 x float> %147, %96
  %150 = getelementptr inbounds float, float* %0, i64 %141
  %151 = bitcast float* %150 to <4 x float>*
  store <4 x float> %148, <4 x float>* %151, align 4, !alias.scope !9, !noalias !6
  %152 = getelementptr inbounds float, float* %150, i64 4
  %153 = bitcast float* %152 to <4 x float>*
  store <4 x float> %149, <4 x float>* %153, align 4, !alias.scope !9, !noalias !6
  br label %154

154:                                              ; preds = %137, %140
  %155 = icmp eq i64 %60, %91
  br i1 %155, label %202, label %62

156:                                              ; preds = %13, %156
  %157 = phi i64 [ %177, %156 ], [ %14, %13 ]
  %158 = getelementptr inbounds float, float* %1, i64 %157
  %159 = load float, float* %158, align 4
  %160 = fmul float %159, %2
  %161 = getelementptr inbounds float, float* %0, i64 %157
  store float %160, float* %161, align 4
  %162 = or i64 %157, 1
  %163 = getelementptr inbounds float, float* %1, i64 %162
  %164 = load float, float* %163, align 4
  %165 = fmul float %164, %2
  %166 = getelementptr inbounds float, float* %0, i64 %162
  store float %165, float* %166, align 4
  %167 = or i64 %157, 2
  %168 = getelementptr inbounds float, float* %1, i64 %167
  %169 = load float, float* %168, align 4
  %170 = fmul float %169, %2
  %171 = getelementptr inbounds float, float* %0, i64 %167
  store float %170, float* %171, align 4
  %172 = or i64 %157, 3
  %173 = getelementptr inbounds float, float* %1, i64 %172
  %174 = load float, float* %173, align 4
  %175 = fmul float %174, %2
  %176 = getelementptr inbounds float, float* %0, i64 %172
  store float %175, float* %176, align 4
  %177 = add nuw nsw i64 %157, 4
  %178 = icmp ult i64 %177, %8
  br i1 %178, label %156, label %51, !llvm.loop !12

179:                                              ; preds = %79, %179
  %180 = phi i64 [ %200, %179 ], [ %80, %79 ]
  %181 = getelementptr inbounds float, float* %1, i64 %180
  %182 = load float, float* %181, align 4
  %183 = fmul float %182, %2
  %184 = getelementptr inbounds float, float* %0, i64 %180
  store float %183, float* %184, align 4
  %185 = add nuw nsw i64 %180, 1
  %186 = getelementptr inbounds float, float* %1, i64 %185
  %187 = load float, float* %186, align 4
  %188 = fmul float %187, %2
  %189 = getelementptr inbounds float, float* %0, i64 %185
  store float %188, float* %189, align 4
  %190 = add nuw nsw i64 %180, 2
  %191 = getelementptr inbounds float, float* %1, i64 %190
  %192 = load float, float* %191, align 4
  %193 = fmul float %192, %2
  %194 = getelementptr inbounds float, float* %0, i64 %190
  store float %193, float* %194, align 4
  %195 = add nuw nsw i64 %180, 3
  %196 = getelementptr inbounds float, float* %1, i64 %195
  %197 = load float, float* %196, align 4
  %198 = fmul float %197, %2
  %199 = getelementptr inbounds float, float* %0, i64 %195
  store float %198, float* %199, align 4
  %200 = add nuw nsw i64 %180, 4
  %201 = icmp eq i64 %200, %59
  br i1 %201, label %202, label %179, !llvm.loop !13

202:                                              ; preds = %79, %179, %154, %54
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = !{!7}
!7 = distinct !{!7, !8}
!8 = distinct !{!8, !"LVerDomain"}
!9 = !{!10}
!10 = distinct !{!10, !8}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
