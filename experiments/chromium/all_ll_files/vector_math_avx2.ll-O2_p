; ModuleID = '../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/vector_math_avx2.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/agc2/rnn_vad/vector_math_avx2.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::rnn_vad::VectorMath" = type { %"struct.webrtc::AvailableCpuFeatures" }
%"struct.webrtc::AvailableCpuFeatures" = type { i8, i8, i8 }

; Function Attrs: nounwind readonly ssp uwtable
define hidden float @_ZNK6webrtc7rnn_vad10VectorMath14DotProductAvx2EN3rtc9ArrayViewIKfLln4711EEES5_(%"class.webrtc::rnn_vad::VectorMath"* nocapture readnone, float*, i64, float*, i64) local_unnamed_addr #0 align 2 {
  %6 = trunc i64 %2 to i32
  %7 = and i32 %6, -8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %37

9:                                                ; preds = %5
  %10 = sext i32 %7 to i64
  %11 = add nsw i64 %10, -1
  %12 = lshr i64 %11, 3
  %13 = add nuw nsw i64 %12, 1
  %14 = and i64 %13, 3
  %15 = icmp ult i64 %11, 24
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  %17 = sub nsw i64 %13, %14
  br label %76

18:                                               ; preds = %76, %9
  %19 = phi <8 x float> [ undef, %9 ], [ %110, %76 ]
  %20 = phi i64 [ 0, %9 ], [ %111, %76 ]
  %21 = phi <8 x float> [ zeroinitializer, %9 ], [ %110, %76 ]
  %22 = icmp eq i64 %14, 0
  br i1 %22, label %37, label %23

23:                                               ; preds = %18, %23
  %24 = phi i64 [ %34, %23 ], [ %20, %18 ]
  %25 = phi <8 x float> [ %33, %23 ], [ %21, %18 ]
  %26 = phi i64 [ %35, %23 ], [ %14, %18 ]
  %27 = getelementptr inbounds float, float* %1, i64 %24
  %28 = bitcast float* %27 to <8 x float>*
  %29 = load <8 x float>, <8 x float>* %28, align 1
  %30 = getelementptr inbounds float, float* %3, i64 %24
  %31 = bitcast float* %30 to <8 x float>*
  %32 = load <8 x float>, <8 x float>* %31, align 1
  %33 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %29, <8 x float> %32, <8 x float> %25) #2
  %34 = add nuw nsw i64 %24, 8
  %35 = add i64 %26, -1
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %37, label %23, !llvm.loop !2

37:                                               ; preds = %18, %23, %5
  %38 = phi <8 x float> [ zeroinitializer, %5 ], [ %19, %18 ], [ %33, %23 ]
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %40 = shufflevector <8 x float> %38, <8 x float> undef, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %41 = fadd <4 x float> %39, %40
  %42 = shufflevector <4 x float> %39, <4 x float> %41, <4 x i32> <i32 6, i32 7, i32 2, i32 3>
  %43 = fadd <4 x float> %41, %42
  %44 = extractelement <4 x float> %43, i32 0
  %45 = extractelement <4 x float> %43, i32 1
  %46 = fadd float %45, %44
  %47 = icmp slt i32 %7, %6
  br i1 %47, label %48, label %114

48:                                               ; preds = %37
  %49 = sext i32 %7 to i64
  %50 = shl i64 %2, 32
  %51 = ashr exact i64 %50, 32
  %52 = shl i64 %2, 32
  %53 = ashr exact i64 %52, 32
  %54 = xor i64 %49, -1
  %55 = add nsw i64 %53, %54
  %56 = and i64 %53, 3
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %71, label %58

58:                                               ; preds = %48, %58
  %59 = phi i64 [ %68, %58 ], [ %49, %48 ]
  %60 = phi float [ %67, %58 ], [ %46, %48 ]
  %61 = phi i64 [ %69, %58 ], [ %56, %48 ]
  %62 = getelementptr inbounds float, float* %1, i64 %59
  %63 = load float, float* %62, align 4
  %64 = getelementptr inbounds float, float* %3, i64 %59
  %65 = load float, float* %64, align 4
  %66 = fmul float %63, %65
  %67 = fadd float %60, %66
  %68 = add nsw i64 %59, 1
  %69 = add i64 %61, -1
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %58, !llvm.loop !4

71:                                               ; preds = %58, %48
  %72 = phi float [ undef, %48 ], [ %67, %58 ]
  %73 = phi i64 [ %49, %48 ], [ %68, %58 ]
  %74 = phi float [ %46, %48 ], [ %67, %58 ]
  %75 = icmp ult i64 %55, 3
  br i1 %75, label %114, label %116

76:                                               ; preds = %76, %16
  %77 = phi i64 [ 0, %16 ], [ %111, %76 ]
  %78 = phi <8 x float> [ zeroinitializer, %16 ], [ %110, %76 ]
  %79 = phi i64 [ %17, %16 ], [ %112, %76 ]
  %80 = getelementptr inbounds float, float* %1, i64 %77
  %81 = bitcast float* %80 to <8 x float>*
  %82 = load <8 x float>, <8 x float>* %81, align 1
  %83 = getelementptr inbounds float, float* %3, i64 %77
  %84 = bitcast float* %83 to <8 x float>*
  %85 = load <8 x float>, <8 x float>* %84, align 1
  %86 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %82, <8 x float> %85, <8 x float> %78) #2
  %87 = or i64 %77, 8
  %88 = getelementptr inbounds float, float* %1, i64 %87
  %89 = bitcast float* %88 to <8 x float>*
  %90 = load <8 x float>, <8 x float>* %89, align 1
  %91 = getelementptr inbounds float, float* %3, i64 %87
  %92 = bitcast float* %91 to <8 x float>*
  %93 = load <8 x float>, <8 x float>* %92, align 1
  %94 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %90, <8 x float> %93, <8 x float> %86) #2
  %95 = or i64 %77, 16
  %96 = getelementptr inbounds float, float* %1, i64 %95
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 1
  %99 = getelementptr inbounds float, float* %3, i64 %95
  %100 = bitcast float* %99 to <8 x float>*
  %101 = load <8 x float>, <8 x float>* %100, align 1
  %102 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %98, <8 x float> %101, <8 x float> %94) #2
  %103 = or i64 %77, 24
  %104 = getelementptr inbounds float, float* %1, i64 %103
  %105 = bitcast float* %104 to <8 x float>*
  %106 = load <8 x float>, <8 x float>* %105, align 1
  %107 = getelementptr inbounds float, float* %3, i64 %103
  %108 = bitcast float* %107 to <8 x float>*
  %109 = load <8 x float>, <8 x float>* %108, align 1
  %110 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %106, <8 x float> %109, <8 x float> %102) #2
  %111 = add nuw nsw i64 %77, 32
  %112 = add i64 %79, -4
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %18, label %76

114:                                              ; preds = %71, %116, %37
  %115 = phi float [ %46, %37 ], [ %72, %71 ], [ %145, %116 ]
  ret float %115

116:                                              ; preds = %71, %116
  %117 = phi i64 [ %146, %116 ], [ %73, %71 ]
  %118 = phi float [ %145, %116 ], [ %74, %71 ]
  %119 = getelementptr inbounds float, float* %1, i64 %117
  %120 = load float, float* %119, align 4
  %121 = getelementptr inbounds float, float* %3, i64 %117
  %122 = load float, float* %121, align 4
  %123 = fmul float %120, %122
  %124 = fadd float %118, %123
  %125 = add nsw i64 %117, 1
  %126 = getelementptr inbounds float, float* %1, i64 %125
  %127 = load float, float* %126, align 4
  %128 = getelementptr inbounds float, float* %3, i64 %125
  %129 = load float, float* %128, align 4
  %130 = fmul float %127, %129
  %131 = fadd float %124, %130
  %132 = add nsw i64 %117, 2
  %133 = getelementptr inbounds float, float* %1, i64 %132
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds float, float* %3, i64 %132
  %136 = load float, float* %135, align 4
  %137 = fmul float %134, %136
  %138 = fadd float %131, %137
  %139 = add nsw i64 %117, 3
  %140 = getelementptr inbounds float, float* %1, i64 %139
  %141 = load float, float* %140, align 4
  %142 = getelementptr inbounds float, float* %3, i64 %139
  %143 = load float, float* %142, align 4
  %144 = fmul float %141, %143
  %145 = fadd float %138, %144
  %146 = add nsw i64 %117, 4
  %147 = icmp eq i64 %146, %51
  br i1 %147, label %114, label %116
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #1

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
