; ModuleID = '../../third_party/skia/src/pathops/SkDConicLineIntersection.cpp'
source_filename = "../../third_party/skia/src/pathops/SkDConicLineIntersection.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkIntersections = type <{ [13 x %struct.SkDPoint], [2 x %struct.SkDPoint], [2 x [13 x double]], [2 x i16], [2 x i8], i8, i8, i8, i8, [6 x i8] }>
%struct.SkDPoint = type { double, double }
%struct.SkDConic = type { %struct.SkDQuad, float }
%struct.SkDQuad = type { [3 x %struct.SkDPoint] }
%struct.SkDLine = type { [2 x %struct.SkDPoint] }
%class.LineConicIntersections = type <{ %struct.SkDConic*, %struct.SkDLine*, %class.SkIntersections*, i8, [7 x i8] }>
%struct.SkPoint = type { float, float }
%struct.SkDCurve = type { %union.anon }
%union.anon = type { %struct.SkDCubic }
%struct.SkDCubic = type { [4 x %struct.SkDPoint] }

$_ZN22LineConicIntersections19horizontalIntersectEdddb = comdat any

$_ZN22LineConicIntersections17verticalIntersectEdddb = comdat any

$_ZN22LineConicIntersections9intersectEv = comdat any

$_ZN22LineConicIntersections26addNearHorizontalEndPointsEddd = comdat any

$_ZN22LineConicIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE = comdat any

$_ZN22LineConicIntersections15checkCoincidentEv = comdat any

$_ZN22LineConicIntersections20addLineNearEndPointsEv = comdat any

$_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_ = comdat any

$_ZNK8SkDPoint18approximatelyEqualERKS_ = comdat any

$_ZN22LineConicIntersections24addNearVerticalEndPointsEddd = comdat any

$_ZN22LineConicIntersections16addNearEndPointsEv = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections10horizontalERK8SkDConicdddb(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), double, double, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDLine, align 8
  %8 = alloca %class.LineConicIntersections, align 8
  %9 = bitcast %struct.SkDLine* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 0
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 1
  store double %2, double* %10, align 8
  store double %4, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  %14 = bitcast %class.LineConicIntersections* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #6
  %15 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 0
  %16 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 1
  %17 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 2
  %18 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 3
  %19 = bitcast %class.LineConicIntersections* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 32, i1 false)
  store %struct.SkDConic* %1, %struct.SkDConic** %15, align 8
  store %struct.SkDLine* %7, %struct.SkDLine** %16, align 8
  store %class.SkIntersections* %0, %class.SkIntersections** %17, align 8
  store i8 1, i8* %18, align 8
  %20 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 4, i8* %20, align 1
  %21 = call i32 @_ZN22LineConicIntersections19horizontalIntersectEdddb(%class.LineConicIntersections* nonnull %8, double %4, double %2, double %3, i1 zeroext %5)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret i32 %21
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN22LineConicIntersections19horizontalIntersectEdddb(%class.LineConicIntersections*, double, double, double, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %struct.SkDPoint, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = alloca double, align 8
  %11 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %12 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %13 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %14 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %13, i64 0, i32 0, i32 0, i64 0
  %15 = tail call double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %14, double %2, double %3, double %1) #6
  %16 = fcmp olt double %15, 0.000000e+00
  br i1 %16, label %22, label %17

17:                                               ; preds = %5
  %18 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %19 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %20 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %19, i64 0, i32 0, i32 0, i64 0
  %21 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %18, double 0.000000e+00, double %15, %struct.SkDPoint* dereferenceable(16) %20) #6
  br label %22

22:                                               ; preds = %17, %5
  %23 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %24 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %23, i64 0, i32 0, i32 0, i64 2
  %25 = tail call double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %24, double %2, double %3, double %1) #6
  %26 = fcmp olt double %25, 0.000000e+00
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %29 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %30 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %29, i64 0, i32 0, i32 0, i64 2
  %31 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %28, double 1.000000e+00, double %25, %struct.SkDPoint* dereferenceable(16) %30) #6
  br label %32

32:                                               ; preds = %22, %27
  %33 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_ZN22LineConicIntersections26addNearHorizontalEndPointsEddd(%class.LineConicIntersections* %0, double %2, double %3, double %1)
  br label %37

37:                                               ; preds = %32, %36
  %38 = bitcast [2 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #6
  %39 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %40 = bitcast [2 x double]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -1, i64 16, i1 false)
  %41 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %42 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 0, i32 0, i64 0, i32 1
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 0, i32 0, i64 1, i32 1
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 0, i32 0, i64 2, i32 1
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 1
  %49 = load float, float* %48, align 8
  %50 = fpext float %49 to double
  %51 = fmul double %45, %50
  %52 = fmul double %50, %1
  %53 = fsub double %51, %52
  %54 = fadd double %53, %1
  %55 = fmul double %54, 2.000000e+00
  %56 = fsub double %43, %55
  %57 = fadd double %47, %56
  %58 = fsub double %54, %43
  %59 = fsub double %43, %1
  %60 = fmul double %58, 2.000000e+00
  %61 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %57, double %60, double %59, double* nonnull %39) #6
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %37
  %64 = bitcast double* %8 to i8*
  %65 = bitcast double* %8 to i64*
  %66 = bitcast %struct.SkDPoint* %9 to i8*
  %67 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %68 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  %69 = bitcast double* %10 to i8*
  %70 = fsub double %3, %2
  %71 = bitcast %struct.SkDPoint* %6 to i8*
  %72 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 0
  %73 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 1
  %74 = zext i32 %61 to i64
  %75 = bitcast %struct.SkDPoint* %9 to i8*
  br label %77

76:                                               ; preds = %136, %37
  br i1 %4, label %139, label %141

77:                                               ; preds = %136, %63
  %78 = phi i64 [ 0, %63 ], [ %137, %136 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #6
  %79 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 %78
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %65, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -1, i64 16, i1 false)
  %82 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %83 = bitcast i64 %81 to double
  %84 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %82, double %83) #6
  %85 = extractvalue { double, double } %84, 0
  store double %85, double* %67, align 8
  %86 = extractvalue { double, double } %84, 1
  store double %86, double* %68, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #6
  %87 = fsub double %85, %2
  %88 = fdiv double %87, %70
  store double %88, double* %10, align 8
  %89 = call zeroext i1 @_ZN22LineConicIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineConicIntersections* %0, double* nonnull %8, double* nonnull %10, %struct.SkDPoint* nonnull %9, i32 1)
  br i1 %89, label %90, label %136

90:                                               ; preds = %77
  %91 = load double, double* %8, align 8
  %92 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %93 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %92, i64 0, i32 5
  %94 = load i8, i8* %93, align 2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %131, label %96

96:                                               ; preds = %90, %122
  %97 = phi %class.SkIntersections* [ %123, %122 ], [ %92, %90 ]
  %98 = phi i64 [ %124, %122 ], [ 0, %90 ]
  %99 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %97, i64 0, i32 0, i64 %98, i32 0
  %100 = load double, double* %99, align 8
  %101 = load double, double* %67, align 8
  %102 = fcmp une double %100, %101
  br i1 %102, label %122, label %103

103:                                              ; preds = %96
  %104 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %97, i64 0, i32 0, i64 %98, i32 1
  %105 = load double, double* %104, align 8
  %106 = load double, double* %68, align 8
  %107 = fcmp une double %105, %106
  br i1 %107, label %122, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %97, i64 0, i32 2, i64 0, i64 %98
  %110 = load double, double* %109, align 8
  %111 = fcmp oeq double %110, %91
  br i1 %111, label %136, label %112

112:                                              ; preds = %108
  %113 = fadd double %91, %110
  %114 = fmul double %113, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 -1, i64 16, i1 false) #6
  %115 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %116 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %115, double %114) #6
  %117 = extractvalue { double, double } %116, 0
  store double %117, double* %72, align 8
  %118 = extractvalue { double, double } %116, 1
  store double %118, double* %73, align 8
  %119 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %6, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #6
  br i1 %119, label %136, label %120

120:                                              ; preds = %112
  %121 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  br label %122

122:                                              ; preds = %120, %103, %96
  %123 = phi %class.SkIntersections* [ %121, %120 ], [ %97, %96 ], [ %97, %103 ]
  %124 = add nuw nsw i64 %98, 1
  %125 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %123, i64 0, i32 5
  %126 = load i8, i8* %125, align 2
  %127 = zext i8 %126 to i64
  %128 = icmp ult i64 %124, %127
  br i1 %128, label %96, label %129

129:                                              ; preds = %122
  %130 = load double, double* %8, align 8
  br label %131

131:                                              ; preds = %129, %90
  %132 = phi double [ %130, %129 ], [ %91, %90 ]
  %133 = phi %class.SkIntersections* [ %123, %129 ], [ %92, %90 ]
  %134 = load double, double* %10, align 8
  %135 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %133, double %132, double %134, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  br label %136

136:                                              ; preds = %112, %108, %131, %77
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #6
  %137 = add nuw nsw i64 %78, 1
  %138 = icmp eq i64 %137, %74
  br i1 %138, label %76, label %77

139:                                              ; preds = %76
  %140 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  call void @_ZN15SkIntersections4flipEv(%class.SkIntersections* %140) #6
  br label %141

141:                                              ; preds = %139, %76
  call void @_ZN22LineConicIntersections15checkCoincidentEv(%class.LineConicIntersections* %0)
  %142 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %143 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %142, i64 0, i32 5
  %144 = load i8, i8* %143, align 2
  %145 = zext i8 %144 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #6
  ret i32 %145
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections8verticalERK8SkDConicdddb(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), double, double, double, i1 zeroext) local_unnamed_addr #0 align 2 {
  %7 = alloca %struct.SkDLine, align 8
  %8 = alloca %class.LineConicIntersections, align 8
  %9 = bitcast %struct.SkDLine* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #6
  %10 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 0
  %11 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 0, i32 1
  %12 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 0
  %13 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %7, i64 0, i32 0, i64 1, i32 1
  store double %4, double* %10, align 8
  store double %2, double* %11, align 8
  store double %4, double* %12, align 8
  store double %3, double* %13, align 8
  %14 = bitcast %class.LineConicIntersections* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #6
  %15 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 0
  %16 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 1
  %17 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 2
  %18 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %8, i64 0, i32 3
  %19 = bitcast %class.LineConicIntersections* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %19, i8 -86, i64 32, i1 false)
  store %struct.SkDConic* %1, %struct.SkDConic** %15, align 8
  store %struct.SkDLine* %7, %struct.SkDLine** %16, align 8
  store %class.SkIntersections* %0, %class.SkIntersections** %17, align 8
  store i8 1, i8* %18, align 8
  %20 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 4, i8* %20, align 1
  %21 = call i32 @_ZN22LineConicIntersections17verticalIntersectEdddb(%class.LineConicIntersections* nonnull %8, double %4, double %2, double %3, i1 zeroext %5)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #6
  ret i32 %21
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN22LineConicIntersections17verticalIntersectEdddb(%class.LineConicIntersections*, double, double, double, i1 zeroext) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca %struct.SkDPoint, align 8
  %7 = alloca [2 x double], align 16
  %8 = alloca double, align 8
  %9 = alloca %struct.SkDPoint, align 8
  %10 = alloca double, align 8
  %11 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %12 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %13 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %14 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %13, i64 0, i32 0, i32 0, i64 0
  %15 = tail call double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %14, double %2, double %3, double %1) #6
  %16 = fcmp olt double %15, 0.000000e+00
  br i1 %16, label %22, label %17

17:                                               ; preds = %5
  %18 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %19 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %20 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %19, i64 0, i32 0, i32 0, i64 0
  %21 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %18, double 0.000000e+00, double %15, %struct.SkDPoint* dereferenceable(16) %20) #6
  br label %22

22:                                               ; preds = %17, %5
  %23 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %24 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %23, i64 0, i32 0, i32 0, i64 2
  %25 = tail call double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %24, double %2, double %3, double %1) #6
  %26 = fcmp olt double %25, 0.000000e+00
  br i1 %26, label %32, label %27

27:                                               ; preds = %22
  %28 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %29 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %30 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %29, i64 0, i32 0, i32 0, i64 2
  %31 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %28, double 1.000000e+00, double %25, %struct.SkDPoint* dereferenceable(16) %30) #6
  br label %32

32:                                               ; preds = %22, %27
  %33 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 3
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %37, label %36

36:                                               ; preds = %32
  tail call void @_ZN22LineConicIntersections24addNearVerticalEndPointsEddd(%class.LineConicIntersections* %0, double %2, double %3, double %1)
  br label %37

37:                                               ; preds = %32, %36
  %38 = bitcast [2 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #6
  %39 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 0
  %40 = bitcast [2 x double]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -1, i64 16, i1 false)
  %41 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %42 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 0, i32 0, i64 0, i32 0
  %43 = load double, double* %42, align 8
  %44 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 0, i32 0, i64 1, i32 0
  %45 = load double, double* %44, align 8
  %46 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 0, i32 0, i64 2, i32 0
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %41, i64 0, i32 1
  %49 = load float, float* %48, align 8
  %50 = fpext float %49 to double
  %51 = fmul double %45, %50
  %52 = fmul double %50, %1
  %53 = fsub double %51, %52
  %54 = fadd double %53, %1
  %55 = fmul double %54, 2.000000e+00
  %56 = fsub double %43, %55
  %57 = fadd double %47, %56
  %58 = fsub double %54, %43
  %59 = fsub double %43, %1
  %60 = fmul double %58, 2.000000e+00
  %61 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %57, double %60, double %59, double* nonnull %39) #6
  %62 = icmp sgt i32 %61, 0
  br i1 %62, label %63, label %76

63:                                               ; preds = %37
  %64 = bitcast double* %8 to i8*
  %65 = bitcast double* %8 to i64*
  %66 = bitcast %struct.SkDPoint* %9 to i8*
  %67 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 0
  %68 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %9, i64 0, i32 1
  %69 = bitcast double* %10 to i8*
  %70 = fsub double %3, %2
  %71 = bitcast %struct.SkDPoint* %6 to i8*
  %72 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 0
  %73 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 1
  %74 = zext i32 %61 to i64
  %75 = bitcast %struct.SkDPoint* %9 to i8*
  br label %77

76:                                               ; preds = %136, %37
  br i1 %4, label %139, label %141

77:                                               ; preds = %136, %63
  %78 = phi i64 [ 0, %63 ], [ %137, %136 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %64) #6
  %79 = getelementptr inbounds [2 x double], [2 x double]* %7, i64 0, i64 %78
  %80 = bitcast double* %79 to i64*
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %65, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %66) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %75, i8 -1, i64 16, i1 false)
  %82 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %83 = bitcast i64 %81 to double
  %84 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %82, double %83) #6
  %85 = extractvalue { double, double } %84, 0
  store double %85, double* %67, align 8
  %86 = extractvalue { double, double } %84, 1
  store double %86, double* %68, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #6
  %87 = fsub double %86, %2
  %88 = fdiv double %87, %70
  store double %88, double* %10, align 8
  %89 = call zeroext i1 @_ZN22LineConicIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineConicIntersections* %0, double* nonnull %8, double* nonnull %10, %struct.SkDPoint* nonnull %9, i32 1)
  br i1 %89, label %90, label %136

90:                                               ; preds = %77
  %91 = load double, double* %8, align 8
  %92 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %93 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %92, i64 0, i32 5
  %94 = load i8, i8* %93, align 2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %131, label %96

96:                                               ; preds = %90, %122
  %97 = phi %class.SkIntersections* [ %123, %122 ], [ %92, %90 ]
  %98 = phi i64 [ %124, %122 ], [ 0, %90 ]
  %99 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %97, i64 0, i32 0, i64 %98, i32 0
  %100 = load double, double* %99, align 8
  %101 = load double, double* %67, align 8
  %102 = fcmp une double %100, %101
  br i1 %102, label %122, label %103

103:                                              ; preds = %96
  %104 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %97, i64 0, i32 0, i64 %98, i32 1
  %105 = load double, double* %104, align 8
  %106 = load double, double* %68, align 8
  %107 = fcmp une double %105, %106
  br i1 %107, label %122, label %108

108:                                              ; preds = %103
  %109 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %97, i64 0, i32 2, i64 0, i64 %98
  %110 = load double, double* %109, align 8
  %111 = fcmp oeq double %110, %91
  br i1 %111, label %136, label %112

112:                                              ; preds = %108
  %113 = fadd double %91, %110
  %114 = fmul double %113, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 -1, i64 16, i1 false) #6
  %115 = load %struct.SkDConic*, %struct.SkDConic** %11, align 8
  %116 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %115, double %114) #6
  %117 = extractvalue { double, double } %116, 0
  store double %117, double* %72, align 8
  %118 = extractvalue { double, double } %116, 1
  store double %118, double* %73, align 8
  %119 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %6, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #6
  br i1 %119, label %136, label %120

120:                                              ; preds = %112
  %121 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  br label %122

122:                                              ; preds = %120, %103, %96
  %123 = phi %class.SkIntersections* [ %121, %120 ], [ %97, %96 ], [ %97, %103 ]
  %124 = add nuw nsw i64 %98, 1
  %125 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %123, i64 0, i32 5
  %126 = load i8, i8* %125, align 2
  %127 = zext i8 %126 to i64
  %128 = icmp ult i64 %124, %127
  br i1 %128, label %96, label %129

129:                                              ; preds = %122
  %130 = load double, double* %8, align 8
  br label %131

131:                                              ; preds = %129, %90
  %132 = phi double [ %130, %129 ], [ %91, %90 ]
  %133 = phi %class.SkIntersections* [ %123, %129 ], [ %92, %90 ]
  %134 = load double, double* %10, align 8
  %135 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %133, double %132, double %134, %struct.SkDPoint* nonnull dereferenceable(16) %9) #6
  br label %136

136:                                              ; preds = %112, %108, %131, %77
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %66) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %64) #6
  %137 = add nuw nsw i64 %78, 1
  %138 = icmp eq i64 %137, %74
  br i1 %138, label %76, label %77

139:                                              ; preds = %76
  %140 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  call void @_ZN15SkIntersections4flipEv(%class.SkIntersections* %140) #6
  br label %141

141:                                              ; preds = %139, %76
  call void @_ZN22LineConicIntersections15checkCoincidentEv(%class.LineConicIntersections* %0)
  %142 = load %class.SkIntersections*, %class.SkIntersections** %12, align 8
  %143 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %142, i64 0, i32 5
  %144 = load i8, i8* %143, align 2
  %145 = zext i8 %144 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #6
  ret i32 %145
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections9intersectERK8SkDConicRK7SkDLine(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.LineConicIntersections, align 8
  %5 = bitcast %class.LineConicIntersections* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #6
  %6 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %4, i64 0, i32 0
  %7 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %4, i64 0, i32 1
  %8 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %4, i64 0, i32 2
  %9 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %4, i64 0, i32 3
  %10 = bitcast %class.LineConicIntersections* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 32, i1 false)
  store %struct.SkDConic* %1, %struct.SkDConic** %6, align 8
  store %struct.SkDLine* %2, %struct.SkDLine** %7, align 8
  store %class.SkIntersections* %0, %class.SkIntersections** %8, align 8
  %11 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 4, i8* %11, align 1
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 7
  %13 = load i8, i8* %12, align 8, !range !2
  store i8 %13, i8* %9, align 8
  %14 = call i32 @_ZN22LineConicIntersections9intersectEv(%class.LineConicIntersections* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #6
  ret i32 %14
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN22LineConicIntersections9intersectEv(%class.LineConicIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.SkDPoint, align 8
  %3 = alloca [2 x double], align 16
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca %struct.SkDPoint, align 8
  %7 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 1
  %8 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %9 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %10 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %11 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %12 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %11, i64 0, i32 0, i32 0, i64 0
  %13 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %10, %struct.SkDPoint* dereferenceable(16) %12) #6
  %14 = fcmp olt double %13, 0.000000e+00
  br i1 %14, label %20, label %15

15:                                               ; preds = %1
  %16 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %17 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %18 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %17, i64 0, i32 0, i32 0, i64 0
  %19 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %16, double 0.000000e+00, double %13, %struct.SkDPoint* dereferenceable(16) %18) #6
  br label %20

20:                                               ; preds = %15, %1
  %21 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %22 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %22, i64 0, i32 0, i32 0, i64 2
  %24 = tail call double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine* %21, %struct.SkDPoint* dereferenceable(16) %23) #6
  %25 = fcmp olt double %24, 0.000000e+00
  br i1 %25, label %31, label %26

26:                                               ; preds = %20
  %27 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %28 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %29 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %28, i64 0, i32 0, i32 0, i64 2
  %30 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %27, double 1.000000e+00, double %24, %struct.SkDPoint* dereferenceable(16) %29) #6
  br label %31

31:                                               ; preds = %20, %26
  %32 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 3
  %33 = load i8, i8* %32, align 8, !range !2
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %36, label %35

35:                                               ; preds = %31
  tail call void @_ZN22LineConicIntersections16addNearEndPointsEv(%class.LineConicIntersections* %0)
  br label %36

36:                                               ; preds = %31, %35
  %37 = bitcast [2 x double]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %37) #6
  %38 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 0
  %39 = bitcast [2 x double]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -1, i64 16, i1 false)
  %40 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %41 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %40, i64 0, i32 0, i64 1, i32 0
  %42 = bitcast double* %41 to <2 x double>*
  %43 = load <2 x double>, <2 x double>* %42, align 8
  %44 = bitcast %struct.SkDLine* %40 to <2 x double>*
  %45 = load <2 x double>, <2 x double>* %44, align 8
  %46 = fsub <2 x double> %43, %45
  %47 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %48 = bitcast %struct.SkDConic* %47 to <2 x double>*
  %49 = load <2 x double>, <2 x double>* %48, align 8
  %50 = fsub <2 x double> %49, %45
  %51 = shufflevector <2 x double> %50, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %52 = fmul <2 x double> %46, %51
  %53 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %47, i64 0, i32 0, i32 0, i64 1, i32 0
  %54 = bitcast double* %53 to <2 x double>*
  %55 = load <2 x double>, <2 x double>* %54, align 8
  %56 = fsub <2 x double> %55, %45
  %57 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %58 = fmul <2 x double> %57, %56
  %59 = extractelement <2 x double> %58, i32 0
  %60 = extractelement <2 x double> %58, i32 1
  %61 = fsub double %60, %59
  %62 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %47, i64 0, i32 0, i32 0, i64 2, i32 0
  %63 = bitcast double* %62 to <2 x double>*
  %64 = load <2 x double>, <2 x double>* %63, align 8
  %65 = fsub <2 x double> %64, %45
  %66 = shufflevector <2 x double> %46, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %67 = fmul <2 x double> %66, %65
  %68 = shufflevector <2 x double> %67, <2 x double> %52, <2 x i32> <i32 1, i32 2>
  %69 = shufflevector <2 x double> %67, <2 x double> %52, <2 x i32> <i32 0, i32 3>
  %70 = fsub <2 x double> %68, %69
  %71 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %47, i64 0, i32 1
  %72 = load float, float* %71, align 8
  %73 = fpext float %72 to double
  %74 = fmul double %61, %73
  %75 = fmul double %73, 0.000000e+00
  %76 = fsub double %74, %75
  %77 = fadd double %76, 0.000000e+00
  %78 = fmul double %77, 2.000000e+00
  %79 = extractelement <2 x double> %70, i32 1
  %80 = fsub double %79, %78
  %81 = extractelement <2 x double> %70, i32 0
  %82 = fadd double %81, %80
  %83 = fsub double %77, %79
  %84 = fmul double %83, 2.000000e+00
  %85 = call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %82, double %84, double %79, double* nonnull %38) #6
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %36
  %88 = bitcast double* %4 to i8*
  %89 = bitcast double* %4 to i64*
  %90 = bitcast double* %5 to i8*
  %91 = bitcast %struct.SkDPoint* %6 to i8*
  %92 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 0
  %93 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %6, i64 0, i32 1
  %94 = bitcast %struct.SkDPoint* %2 to i8*
  %95 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %96 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %97 = zext i32 %85 to i64
  %98 = bitcast %struct.SkDPoint* %6 to i8*
  br label %104

99:                                               ; preds = %181, %36
  call void @_ZN22LineConicIntersections15checkCoincidentEv(%class.LineConicIntersections* %0)
  %100 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %101 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %100, i64 0, i32 5
  %102 = load i8, i8* %101, align 2
  %103 = zext i8 %102 to i32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %37) #6
  ret i32 %103

104:                                              ; preds = %181, %87
  %105 = phi i64 [ 0, %87 ], [ %182, %181 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #6
  %106 = getelementptr inbounds [2 x double], [2 x double]* %3, i64 0, i64 %105
  %107 = bitcast double* %106 to i64*
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %89, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %90) #6
  store double 0xFFFFFFFFFFFFFFFF, double* %5, align 8
  %109 = bitcast i64 %108 to double
  %110 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %111 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %110, double %109) #6
  %112 = load %struct.SkDLine*, %struct.SkDLine** %7, align 8
  %113 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %112, i64 0, i32 0, i64 1, i32 0
  %114 = bitcast double* %113 to <2 x double>*
  %115 = load <2 x double>, <2 x double>* %114, align 8
  %116 = bitcast %struct.SkDLine* %112 to <2 x double>*
  %117 = load <2 x double>, <2 x double>* %116, align 8
  %118 = fsub <2 x double> %115, %117
  %119 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %118)
  %120 = extractelement <2 x double> %119, i32 0
  %121 = extractelement <2 x double> %119, i32 1
  %122 = fcmp ogt double %120, %121
  %123 = extractvalue { double, double } %111, 0
  %124 = extractelement <2 x double> %117, i32 0
  %125 = fsub double %123, %124
  %126 = extractvalue { double, double } %111, 1
  %127 = extractelement <2 x double> %117, i32 1
  %128 = fsub double %126, %127
  %129 = extractelement <2 x double> %118, i32 0
  %130 = extractelement <2 x double> %118, i32 1
  %131 = select i1 %122, double %129, double %130
  %132 = select i1 %122, double %125, double %128
  %133 = fdiv double %132, %131
  store double %133, double* %5, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %91) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %98, i8 -1, i64 16, i1 false)
  %134 = call zeroext i1 @_ZN22LineConicIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineConicIntersections* %0, double* nonnull %4, double* nonnull %5, %struct.SkDPoint* nonnull %6, i32 0)
  br i1 %134, label %135, label %181

135:                                              ; preds = %104
  %136 = load double, double* %4, align 8
  %137 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  %138 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %137, i64 0, i32 5
  %139 = load i8, i8* %138, align 2
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %176, label %141

141:                                              ; preds = %135, %167
  %142 = phi %class.SkIntersections* [ %168, %167 ], [ %137, %135 ]
  %143 = phi i64 [ %169, %167 ], [ 0, %135 ]
  %144 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %142, i64 0, i32 0, i64 %143, i32 0
  %145 = load double, double* %144, align 8
  %146 = load double, double* %92, align 8
  %147 = fcmp une double %145, %146
  br i1 %147, label %167, label %148

148:                                              ; preds = %141
  %149 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %142, i64 0, i32 0, i64 %143, i32 1
  %150 = load double, double* %149, align 8
  %151 = load double, double* %93, align 8
  %152 = fcmp une double %150, %151
  br i1 %152, label %167, label %153

153:                                              ; preds = %148
  %154 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %142, i64 0, i32 2, i64 0, i64 %143
  %155 = load double, double* %154, align 8
  %156 = fcmp oeq double %155, %136
  br i1 %156, label %181, label %157

157:                                              ; preds = %153
  %158 = fadd double %136, %155
  %159 = fmul double %158, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %94) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %94, i8 -1, i64 16, i1 false) #6
  %160 = load %struct.SkDConic*, %struct.SkDConic** %8, align 8
  %161 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %160, double %159) #6
  %162 = extractvalue { double, double } %161, 0
  store double %162, double* %95, align 8
  %163 = extractvalue { double, double } %161, 1
  store double %163, double* %96, align 8
  %164 = call zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint* nonnull %2, %struct.SkDPoint* nonnull dereferenceable(16) %6) #6
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %94) #6
  br i1 %164, label %181, label %165

165:                                              ; preds = %157
  %166 = load %class.SkIntersections*, %class.SkIntersections** %9, align 8
  br label %167

167:                                              ; preds = %165, %148, %141
  %168 = phi %class.SkIntersections* [ %166, %165 ], [ %142, %141 ], [ %142, %148 ]
  %169 = add nuw nsw i64 %143, 1
  %170 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %168, i64 0, i32 5
  %171 = load i8, i8* %170, align 2
  %172 = zext i8 %171 to i64
  %173 = icmp ult i64 %169, %172
  br i1 %173, label %141, label %174

174:                                              ; preds = %167
  %175 = load double, double* %4, align 8
  br label %176

176:                                              ; preds = %174, %135
  %177 = phi double [ %175, %174 ], [ %136, %135 ]
  %178 = phi %class.SkIntersections* [ %168, %174 ], [ %137, %135 ]
  %179 = load double, double* %5, align 8
  %180 = call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %178, double %177, double %179, %struct.SkDPoint* nonnull dereferenceable(16) %6) #6
  br label %181

181:                                              ; preds = %157, %153, %176, %104
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %91) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %90) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #6
  %182 = add nuw nsw i64 %105, 1
  %183 = icmp eq i64 %182, %97
  br i1 %183, label %99, label %104
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections12intersectRayERK8SkDConicRK7SkDLine(%class.SkIntersections*, %struct.SkDConic* dereferenceable(56), %struct.SkDLine* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 6
  store i8 4, i8* %4, align 1
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 0
  %6 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %2, i64 0, i32 0, i64 1, i32 0
  %7 = bitcast double* %6 to <2 x double>*
  %8 = load <2 x double>, <2 x double>* %7, align 8
  %9 = bitcast %struct.SkDLine* %2 to <2 x double>*
  %10 = load <2 x double>, <2 x double>* %9, align 8
  %11 = fsub <2 x double> %8, %10
  %12 = bitcast %struct.SkDConic* %1 to <2 x double>*
  %13 = load <2 x double>, <2 x double>* %12, align 8
  %14 = fsub <2 x double> %13, %10
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %16 = fmul <2 x double> %11, %15
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 1, i32 0
  %18 = bitcast double* %17 to <2 x double>*
  %19 = load <2 x double>, <2 x double>* %18, align 8
  %20 = fsub <2 x double> %19, %10
  %21 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %22 = fmul <2 x double> %21, %20
  %23 = extractelement <2 x double> %22, i32 0
  %24 = extractelement <2 x double> %22, i32 1
  %25 = fsub double %24, %23
  %26 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 0, i32 0, i64 2, i32 0
  %27 = bitcast double* %26 to <2 x double>*
  %28 = load <2 x double>, <2 x double>* %27, align 8
  %29 = fsub <2 x double> %28, %10
  %30 = shufflevector <2 x double> %11, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %31 = fmul <2 x double> %30, %29
  %32 = shufflevector <2 x double> %31, <2 x double> %16, <2 x i32> <i32 1, i32 2>
  %33 = shufflevector <2 x double> %31, <2 x double> %16, <2 x i32> <i32 0, i32 3>
  %34 = fsub <2 x double> %32, %33
  %35 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %1, i64 0, i32 1
  %36 = load float, float* %35, align 8
  %37 = fpext float %36 to double
  %38 = fmul double %25, %37
  %39 = fmul double %37, 0.000000e+00
  %40 = fsub double %38, %39
  %41 = fadd double %40, 0.000000e+00
  %42 = fmul double %41, 2.000000e+00
  %43 = extractelement <2 x double> %34, i32 1
  %44 = fsub double %43, %42
  %45 = extractelement <2 x double> %34, i32 0
  %46 = fadd double %45, %44
  %47 = fsub double %41, %43
  %48 = fmul double %47, 2.000000e+00
  %49 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %46, double %48, double %43, double* %5) #6
  %50 = trunc i32 %49 to i8
  %51 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 5
  store i8 %50, i8* %51, align 2
  %52 = and i32 %49, 255
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %56, label %58

54:                                               ; preds = %58
  %55 = zext i8 %68 to i32
  br label %56

56:                                               ; preds = %3, %54
  %57 = phi i32 [ %55, %54 ], [ 0, %3 ]
  ret i32 %57

58:                                               ; preds = %3, %58
  %59 = phi i64 [ %67, %58 ], [ 0, %3 ]
  %60 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 2, i64 0, i64 %59
  %61 = load double, double* %60, align 8
  %62 = tail call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %1, double %61) #6
  %63 = extractvalue { double, double } %62, 0
  %64 = extractvalue { double, double } %62, 1
  %65 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %59, i32 0
  store double %63, double* %65, align 8
  %66 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %0, i64 0, i32 0, i64 %59, i32 1
  store double %64, double* %66, align 8
  %67 = add nuw nsw i64 %59, 1
  %68 = load i8, i8* %51, align 2
  %69 = zext i8 %68 to i64
  %70 = icmp ult i64 %67, %69
  br i1 %70, label %58, label %54
}

declare { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic*, double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections19HorizontalInterceptERK8SkDConicfPd(%struct.SkDConic* dereferenceable(56), float, double*) local_unnamed_addr #0 align 2 {
  %4 = fpext float %1 to double
  %5 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 0, i32 1
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 1, i32 1
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 2, i32 1
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 1
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = fmul double %8, %13
  %15 = fmul double %4, %13
  %16 = fsub double %14, %15
  %17 = fadd double %16, %4
  %18 = fmul double %17, 2.000000e+00
  %19 = fsub double %6, %18
  %20 = fadd double %10, %19
  %21 = fsub double %17, %6
  %22 = fsub double %6, %4
  %23 = fmul double %21, 2.000000e+00
  %24 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %20, double %23, double %22, double* %2) #6
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN15SkIntersections17VerticalInterceptERK8SkDConicfPd(%struct.SkDConic* dereferenceable(56), float, double*) local_unnamed_addr #0 align 2 {
  %4 = fpext float %1 to double
  %5 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 1, i32 0
  %8 = load double, double* %7, align 8
  %9 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 0, i32 0, i64 2, i32 0
  %10 = load double, double* %9, align 8
  %11 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %0, i64 0, i32 1
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = fmul double %8, %13
  %15 = fmul double %4, %13
  %16 = fsub double %14, %15
  %17 = fadd double %16, %4
  %18 = fmul double %17, 2.000000e+00
  %19 = fsub double %6, %18
  %20 = fadd double %10, %19
  %21 = fsub double %17, %6
  %22 = fsub double %6, %4
  %23 = fmul double %21, 2.000000e+00
  %24 = tail call i32 @_ZN7SkDQuad11RootsValidTEdddPd(double %20, double %23, double %22, double* %2) #6
  ret i32 %24
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22LineConicIntersections26addNearHorizontalEndPointsEddd(%class.LineConicIntersections*, double, double, double) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %7 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %25, label %15

15:                                               ; preds = %4, %11
  %16 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %16, i64 0, i32 0, i32 0, i64 0
  %18 = tail call double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %17, double %1, double %2, double %3) #6
  %19 = fcmp olt double %18, 0.000000e+00
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %22 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %22, i64 0, i32 0, i32 0, i64 0
  %24 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %21, double 0.000000e+00, double %18, %struct.SkDPoint* dereferenceable(16) %23) #6
  br label %25

25:                                               ; preds = %11, %20, %15
  %26 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 5
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %25
  %31 = zext i8 %28 to i64
  %32 = add nsw i64 %31, -1
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 2, i64 0, i64 %32
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %34, 1.000000e+00
  br i1 %35, label %46, label %36

36:                                               ; preds = %30, %25
  %37 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %38 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %37, i64 0, i32 0, i32 0, i64 2
  %39 = tail call double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %38, double %1, double %2, double %3) #6
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %43 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %44 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %43, i64 0, i32 0, i32 0, i64 2
  %45 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %42, double 1.000000e+00, double %39, %struct.SkDPoint* dereferenceable(16) %44) #6
  br label %46

46:                                               ; preds = %41, %36, %30
  tail call void @_ZN22LineConicIntersections20addLineNearEndPointsEv(%class.LineConicIntersections* %0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN22LineConicIntersections5pinTsEPdS0_P8SkDPointNS_9PinTPointE(%class.LineConicIntersections*, double*, double*, %struct.SkDPoint*, i32) local_unnamed_addr #3 comdat align 2 {
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %struct.SkPoint*
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %struct.SkPoint*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %struct.SkPoint*
  %12 = load double, double* %2, align 8
  %13 = fcmp olt double %12, 0x3FF0000040000000
  %14 = fcmp ogt double %12, 0xBE90000000000000
  %15 = and i1 %13, %14
  br i1 %15, label %16, label %145

16:                                               ; preds = %5
  %17 = load double, double* %1, align 8
  %18 = fcmp olt double %17, 0x3CD0000000000000
  %19 = fcmp ogt double %17, 0x3FEFFFFFFFFFFFF8
  %20 = select i1 %19, double 1.000000e+00, double %17
  %21 = select i1 %18, double 0.000000e+00, double %20
  store double %21, double* %1, align 8
  %22 = load double, double* %2, align 8
  %23 = fcmp olt double %22, 0x3CD0000000000000
  %24 = fcmp ogt double %22, 0x3FEFFFFFFFFFFFF8
  %25 = select i1 %24, double 1.000000e+00, double %22
  %26 = select i1 %23, double 0.000000e+00, double %25
  store double %26, double* %2, align 8
  %27 = fcmp oeq double %26, 0.000000e+00
  %28 = fcmp oeq double %26, 1.000000e+00
  %29 = or i1 %27, %28
  br i1 %29, label %36, label %30

30:                                               ; preds = %16
  %31 = icmp eq i32 %4, 0
  %32 = fcmp une double %21, 0.000000e+00
  %33 = and i1 %31, %32
  %34 = fcmp une double %21, 1.000000e+00
  %35 = and i1 %34, %33
  br i1 %35, label %36, label %44

36:                                               ; preds = %30, %16
  %37 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 1
  %38 = load %struct.SkDLine*, %struct.SkDLine** %37, align 8
  %39 = tail call { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine* %38, double %26) #6
  %40 = extractvalue { double, double } %39, 0
  %41 = extractvalue { double, double } %39, 1
  %42 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  store double %40, double* %42, align 8
  %43 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  store double %41, double* %43, align 8
  br label %58

44:                                               ; preds = %30
  br i1 %31, label %50, label %45

45:                                               ; preds = %44
  %46 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  %47 = load double, double* %46, align 8
  %48 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  %49 = load double, double* %48, align 8
  br label %58

50:                                               ; preds = %44
  %51 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %52 = load %struct.SkDConic*, %struct.SkDConic** %51, align 8
  %53 = tail call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %52, double %21) #6
  %54 = extractvalue { double, double } %53, 0
  %55 = extractvalue { double, double } %53, 1
  %56 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 0
  store double %54, double* %56, align 8
  %57 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %3, i64 0, i32 1
  store double %55, double* %57, align 8
  br label %58

58:                                               ; preds = %45, %50, %36
  %59 = phi double [ %49, %45 ], [ %55, %50 ], [ %41, %36 ]
  %60 = phi double [ %47, %45 ], [ %54, %50 ], [ %40, %36 ]
  %61 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #6
  %62 = getelementptr inbounds <2 x float>, <2 x float>* %6, i64 0, i64 0
  %63 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %7, i64 0, i32 1
  %64 = fptrunc double %60 to float
  %65 = insertelement <2 x float> undef, float %64, i32 0
  %66 = fptrunc double %59 to float
  %67 = insertelement <2 x float> %65, float %66, i32 1
  store <2 x float> %67, <2 x float>* %6, align 8
  %68 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #6
  %69 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 1
  %70 = load %struct.SkDLine*, %struct.SkDLine** %69, align 8
  %71 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %70, i64 0, i32 0, i64 0, i32 0
  %72 = load double, double* %71, align 8
  %73 = fptrunc double %72 to float
  %74 = insertelement <2 x float> undef, float %73, i32 0
  %75 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %70, i64 0, i32 0, i64 0, i32 1
  %76 = load double, double* %75, align 8
  %77 = fptrunc double %76 to float
  %78 = insertelement <2 x float> %74, float %77, i32 1
  store <2 x float> %78, <2 x float>* %8, align 8
  %79 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %7, %struct.SkPoint* nonnull dereferenceable(8) %9)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #6
  br i1 %79, label %80, label %83

80:                                               ; preds = %58
  %81 = bitcast %struct.SkDLine** %69 to i8**
  %82 = load i8*, i8** %81, align 8
  br label %95

83:                                               ; preds = %58
  %84 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #6
  %85 = load %struct.SkDLine*, %struct.SkDLine** %69, align 8
  %86 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %85, i64 0, i32 0, i64 1, i32 0
  %87 = bitcast double* %86 to <2 x double>*
  %88 = load <2 x double>, <2 x double>* %87, align 8
  %89 = fptrunc <2 x double> %88 to <2 x float>
  store <2 x float> %89, <2 x float>* %10, align 8
  %90 = call zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* nonnull dereferenceable(8) %7, %struct.SkPoint* nonnull dereferenceable(8) %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #6
  br i1 %90, label %91, label %99

91:                                               ; preds = %83
  %92 = load %struct.SkDLine*, %struct.SkDLine** %69, align 8
  %93 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %92, i64 0, i32 0, i64 1
  %94 = bitcast %struct.SkDPoint* %93 to i8*
  br label %95

95:                                               ; preds = %80, %91
  %96 = phi i8* [ %94, %91 ], [ %82, %80 ]
  %97 = phi double [ 1.000000e+00, %91 ], [ 0.000000e+00, %80 ]
  %98 = bitcast %struct.SkDPoint* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %96, i64 16, i1 false)
  store double %97, double* %2, align 8
  br label %99

99:                                               ; preds = %95, %83
  %100 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %101 = load %class.SkIntersections*, %class.SkIntersections** %100, align 8
  %102 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %101, i64 0, i32 5
  %103 = load i8, i8* %102, align 2
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %112, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %101, i64 0, i32 2, i64 1, i64 0
  %107 = load double, double* %106, align 8
  %108 = load double, double* %2, align 8
  %109 = fsub double %107, %108
  %110 = call double @llvm.fabs.f64(double %109) #6
  %111 = fcmp olt double %110, 0x3E80000000000000
  br i1 %111, label %143, label %112

112:                                              ; preds = %99, %105
  %113 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %114 = load %struct.SkDConic*, %struct.SkDConic** %113, align 8
  %115 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %114, i64 0, i32 0, i32 0, i64 0, i32 0
  %116 = load double, double* %115, align 8
  %117 = fptrunc double %116 to float
  %118 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %114, i64 0, i32 0, i32 0, i64 0, i32 1
  %119 = load double, double* %118, align 8
  %120 = fptrunc double %119 to float
  %121 = load float, float* %62, align 8
  %122 = fcmp oeq float %121, %117
  %123 = load float, float* %63, align 4
  %124 = fcmp oeq float %123, %120
  %125 = and i1 %122, %124
  br i1 %125, label %126, label %129

126:                                              ; preds = %112
  %127 = bitcast %struct.SkDPoint* %3 to i8*
  %128 = bitcast %struct.SkDConic* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false)
  store double 0.000000e+00, double* %1, align 8
  br label %143

129:                                              ; preds = %112
  %130 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %114, i64 0, i32 0, i32 0, i64 2
  %131 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %130, i64 0, i32 0
  %132 = load double, double* %131, align 8
  %133 = fptrunc double %132 to float
  %134 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %114, i64 0, i32 0, i32 0, i64 2, i32 1
  %135 = load double, double* %134, align 8
  %136 = fptrunc double %135 to float
  %137 = fcmp oeq float %121, %133
  %138 = fcmp oeq float %123, %136
  %139 = and i1 %137, %138
  br i1 %139, label %140, label %143

140:                                              ; preds = %129
  %141 = bitcast %struct.SkDPoint* %3 to i8*
  %142 = bitcast %struct.SkDPoint* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %141, i8* align 8 %142, i64 16, i1 false)
  store double 1.000000e+00, double* %1, align 8
  br label %143

143:                                              ; preds = %129, %126, %140, %105
  %144 = phi i1 [ false, %105 ], [ true, %140 ], [ true, %126 ], [ true, %129 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #6
  br label %145

145:                                              ; preds = %5, %143
  %146 = phi i1 [ %144, %143 ], [ false, %5 ]
  ret i1 %146
}

declare i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections*, double, double, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN15SkIntersections4flipEv(%class.SkIntersections*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22LineConicIntersections15checkCoincidentEv(%class.LineConicIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %struct.SkDPoint, align 8
  %3 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %4 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  %5 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %4, i64 0, i32 5
  %6 = load i8, i8* %5, align 2
  %7 = zext i8 %6 to i32
  %8 = add nsw i32 %7, -1
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %1
  %11 = bitcast %struct.SkDPoint* %2 to i8*
  %12 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 0
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %2, i64 0, i32 1
  %14 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %15 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 1
  %16 = bitcast %struct.SkDPoint* %2 to i8*
  br label %18

17:                                               ; preds = %59, %1
  ret void

18:                                               ; preds = %63, %10
  %19 = phi %class.SkIntersections* [ %4, %10 ], [ %64, %63 ]
  %20 = phi i32 [ %8, %10 ], [ %61, %63 ]
  %21 = phi i32 [ 0, %10 ], [ %60, %63 ]
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %19, i64 0, i32 2, i64 0, i64 %22
  %24 = load double, double* %23, align 8
  %25 = add nsw i32 %21, 1
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %19, i64 0, i32 2, i64 0, i64 %26
  %28 = load double, double* %27, align 8
  %29 = fadd double %24, %28
  %30 = fmul double %29, 5.000000e-01
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 -1, i64 16, i1 false)
  %31 = load %struct.SkDConic*, %struct.SkDConic** %14, align 8
  %32 = call { double, double } @_ZNK8SkDConic5ptAtTEd(%struct.SkDConic* %31, double %30) #6
  %33 = extractvalue { double, double } %32, 0
  store double %33, double* %12, align 8
  %34 = extractvalue { double, double } %32, 1
  store double %34, double* %13, align 8
  %35 = load %struct.SkDLine*, %struct.SkDLine** %15, align 8
  %36 = call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %35, %struct.SkDPoint* nonnull dereferenceable(16) %2, i8* null) #6
  %37 = fcmp olt double %36, 0.000000e+00
  br i1 %37, label %59, label %38

38:                                               ; preds = %18
  %39 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  %40 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %39, i64 0, i32 3, i64 0
  %41 = load i16, i16* %40, align 8
  %42 = zext i16 %41 to i32
  %43 = shl i32 1, %21
  %44 = and i32 %43, %42
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %48, label %46

46:                                               ; preds = %38
  call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %39, i32 %21) #6
  %47 = add nsw i32 %20, -1
  br label %55

48:                                               ; preds = %38
  %49 = shl i32 1, %25
  %50 = and i32 %49, %42
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %54, label %52

52:                                               ; preds = %48
  call void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections* %39, i32 %25) #6
  %53 = add nsw i32 %20, -1
  br label %55

54:                                               ; preds = %48
  call void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* %39, i32 %21) #6
  br label %55

55:                                               ; preds = %52, %54, %46
  %56 = phi i32 [ %21, %46 ], [ %21, %52 ], [ %25, %54 ]
  %57 = phi i32 [ %47, %46 ], [ %53, %52 ], [ %20, %54 ]
  %58 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  call void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections* %58, i32 %56) #6
  br label %59

59:                                               ; preds = %18, %55
  %60 = phi i32 [ %56, %55 ], [ %25, %18 ]
  %61 = phi i32 [ %57, %55 ], [ %20, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #6
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %17

63:                                               ; preds = %59
  %64 = load %class.SkIntersections*, %class.SkIntersections** %3, align 8
  br label %18
}

declare double @_ZN7SkDLine11ExactPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

declare double @_ZN7SkDLine10NearPointHERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22LineConicIntersections20addLineNearEndPointsEv(%class.LineConicIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %3 = bitcast %class.LineConicIntersections* %0 to %struct.SkDCurve**
  %4 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 1
  %5 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 5
  %7 = load i8, i8* %6, align 2
  %8 = zext i8 %7 to i64
  %9 = icmp eq i8 %7, 0
  br i1 %9, label %19, label %10

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 2, i64 1, i64 0
  %12 = load double, double* %11, align 8
  %13 = fcmp oeq double %12, 0.000000e+00
  br i1 %13, label %31, label %14

14:                                               ; preds = %10
  %15 = add nsw i64 %8, -1
  %16 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 2, i64 1, i64 %15
  %17 = load double, double* %16, align 8
  %18 = fcmp oeq double %17, 0.000000e+00
  br i1 %18, label %31, label %19

19:                                               ; preds = %1, %14
  %20 = load %struct.SkDCurve*, %struct.SkDCurve** %3, align 8
  %21 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %22 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %21, i64 0, i32 0, i64 0
  %23 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %21, i64 0, i32 0, i64 1
  %24 = tail call double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve* %20, i32 3, %struct.SkDPoint* dereferenceable(16) %22, %struct.SkDPoint* dereferenceable(16) %23) #6
  %25 = fcmp olt double %24, 0.000000e+00
  br i1 %25, label %31, label %26

26:                                               ; preds = %19
  %27 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %28 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %29 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %28, i64 0, i32 0, i64 0
  %30 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %27, double %24, double 0.000000e+00, %struct.SkDPoint* dereferenceable(16) %29) #6
  br label %31

31:                                               ; preds = %10, %26, %19, %14
  %32 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %32, i64 0, i32 5
  %34 = load i8, i8* %33, align 2
  %35 = zext i8 %34 to i64
  %36 = icmp eq i8 %34, 0
  br i1 %36, label %46, label %37

37:                                               ; preds = %31
  %38 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %32, i64 0, i32 2, i64 1, i64 0
  %39 = load double, double* %38, align 8
  %40 = fcmp oeq double %39, 1.000000e+00
  br i1 %40, label %58, label %41

41:                                               ; preds = %37
  %42 = add nsw i64 %35, -1
  %43 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %32, i64 0, i32 2, i64 1, i64 %42
  %44 = load double, double* %43, align 8
  %45 = fcmp oeq double %44, 1.000000e+00
  br i1 %45, label %58, label %46

46:                                               ; preds = %41, %31
  %47 = load %struct.SkDCurve*, %struct.SkDCurve** %3, align 8
  %48 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %49 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %48, i64 0, i32 0, i64 1
  %50 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %48, i64 0, i32 0, i64 0
  %51 = tail call double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve* %47, i32 3, %struct.SkDPoint* dereferenceable(16) %49, %struct.SkDPoint* dereferenceable(16) %50) #6
  %52 = fcmp olt double %51, 0.000000e+00
  br i1 %52, label %58, label %53

53:                                               ; preds = %46
  %54 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %55 = load %struct.SkDLine*, %struct.SkDLine** %4, align 8
  %56 = getelementptr inbounds %struct.SkDLine, %struct.SkDLine* %55, i64 0, i32 0, i64 1
  %57 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %54, double %51, double 1.000000e+00, %struct.SkDPoint* dereferenceable(16) %56) #6
  br label %58

58:                                               ; preds = %53, %46, %41, %37
  ret void
}

declare double @_ZNK8SkDCurve9nearPointEN6SkPath4VerbERK8SkDPointS4_(%struct.SkDCurve*, i32, %struct.SkDPoint* dereferenceable(16), %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare { double, double } @_ZNK7SkDLine5ptAtTEd(%struct.SkDLine*, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN8SkDPoint18ApproximatelyEqualERK7SkPointS2_(%struct.SkPoint* dereferenceable(8), %struct.SkPoint* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = fpext float %4 to double
  %6 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 0
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %9 = fsub double %5, %8
  %10 = tail call double @llvm.fabs.f64(double %9) #6
  %11 = fcmp olt double %10, 0x3E80000000000000
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fsub double %15, %18
  %20 = tail call double @llvm.fabs.f64(double %19) #6
  %21 = fcmp olt double %20, 0x3E80000000000000
  br i1 %21, label %71, label %22

22:                                               ; preds = %12, %2
  %23 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %4, float %7) #6
  br i1 %23, label %24, label %71

24:                                               ; preds = %22
  %25 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %0, i64 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %1, i64 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %26, float %28) #6
  br i1 %29, label %30, label %71

30:                                               ; preds = %24
  %31 = load float, float* %3, align 4
  %32 = fpext float %31 to double
  %33 = load float, float* %25, align 4
  %34 = fpext float %33 to double
  %35 = load float, float* %6, align 4
  %36 = fpext float %35 to double
  %37 = load float, float* %27, align 4
  %38 = fpext float %37 to double
  %39 = fsub double %32, %36
  %40 = fsub double %34, %38
  %41 = fmul double %39, %39
  %42 = fmul double %40, %40
  %43 = fadd double %41, %42
  %44 = tail call double @sqrt(double %43) #6
  %45 = load float, float* %6, align 4
  %46 = load float, float* %3, align 4
  %47 = fcmp olt float %45, %46
  %48 = load float, float* %25, align 4
  %49 = select i1 %47, float %45, float %46
  %50 = fcmp olt float %48, %49
  %51 = load float, float* %27, align 4
  %52 = select i1 %50, float %48, float %49
  %53 = fcmp olt float %51, %52
  %54 = select i1 %53, float %51, float %52
  %55 = fcmp olt float %46, %45
  %56 = load float, float* %6, align 4
  %57 = load float, float* %3, align 4
  %58 = select i1 %55, float %56, float %57
  %59 = fcmp olt float %58, %48
  %60 = load float, float* %25, align 4
  %61 = select i1 %59, float %60, float %58
  %62 = fcmp olt float %61, %51
  %63 = load float, float* %27, align 4
  %64 = select i1 %62, float %63, float %61
  %65 = fsub float -0.000000e+00, %54
  %66 = fcmp olt float %64, %65
  %67 = select i1 %66, float %65, float %64
  %68 = fpext float %67 to double
  %69 = fadd double %44, %68
  %70 = tail call zeroext i1 @_Z16AlmostDequalUlpsdd(double %68, double %69) #6
  br label %71

71:                                               ; preds = %22, %24, %12, %30
  %72 = phi i1 [ %70, %30 ], [ true, %12 ], [ false, %24 ], [ false, %22 ]
  ret i1 %72
}

declare zeroext i1 @_Z16RoughlyEqualUlpsff(float, float) local_unnamed_addr #2

declare zeroext i1 @_Z16AlmostDequalUlpsdd(double, double) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK8SkDPoint18approximatelyEqualERKS_(%struct.SkDPoint*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 0
  %4 = load double, double* %3, align 8
  %5 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 0
  %6 = load double, double* %5, align 8
  %7 = fsub double %4, %6
  %8 = tail call double @llvm.fabs.f64(double %7) #6
  %9 = fcmp olt double %8, 0x3E80000000000000
  br i1 %9, label %10, label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %12 = load double, double* %11, align 8
  %13 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %14 = load double, double* %13, align 8
  %15 = fsub double %12, %14
  %16 = tail call double @llvm.fabs.f64(double %15) #6
  %17 = fcmp olt double %16, 0x3E80000000000000
  br i1 %17, label %68, label %18

18:                                               ; preds = %10, %2
  %19 = fptrunc double %4 to float
  %20 = fptrunc double %6 to float
  %21 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %19, float %20) #6
  br i1 %21, label %22, label %68

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %0, i64 0, i32 1
  %24 = load double, double* %23, align 8
  %25 = getelementptr inbounds %struct.SkDPoint, %struct.SkDPoint* %1, i64 0, i32 1
  %26 = load double, double* %25, align 8
  %27 = fptrunc double %24 to float
  %28 = fptrunc double %26 to float
  %29 = tail call zeroext i1 @_Z16RoughlyEqualUlpsff(float %27, float %28) #6
  br i1 %29, label %30, label %68

30:                                               ; preds = %22
  %31 = load double, double* %3, align 8
  %32 = load double, double* %5, align 8
  %33 = fsub double %31, %32
  %34 = load double, double* %23, align 8
  %35 = load double, double* %25, align 8
  %36 = fsub double %34, %35
  %37 = fmul double %33, %33
  %38 = fmul double %36, %36
  %39 = fadd double %37, %38
  %40 = tail call double @sqrt(double %39) #6
  %41 = load double, double* %5, align 8
  %42 = load double, double* %3, align 8
  %43 = fcmp olt double %41, %42
  %44 = load double, double* %23, align 8
  %45 = select i1 %43, double %41, double %42
  %46 = fcmp olt double %44, %45
  %47 = load double, double* %25, align 8
  %48 = select i1 %46, double %44, double %45
  %49 = fcmp olt double %47, %48
  %50 = select i1 %49, double %47, double %48
  %51 = fcmp olt double %42, %41
  %52 = load double, double* %5, align 8
  %53 = load double, double* %3, align 8
  %54 = select i1 %51, double %52, double %53
  %55 = fcmp olt double %54, %44
  %56 = load double, double* %23, align 8
  %57 = select i1 %55, double %56, double %54
  %58 = fcmp olt double %57, %47
  %59 = load double, double* %25, align 8
  %60 = select i1 %58, double %59, double %57
  %61 = fsub double -0.000000e+00, %50
  %62 = fcmp olt double %60, %61
  %63 = select i1 %62, double %61, double %60
  %64 = fadd double %40, %63
  %65 = fptrunc double %63 to float
  %66 = fptrunc double %64 to float
  %67 = tail call zeroext i1 @_Z16AlmostPequalUlpsff(float %65, float %66) #6
  br label %68

68:                                               ; preds = %18, %22, %10, %30
  %69 = phi i1 [ %67, %30 ], [ true, %10 ], [ false, %22 ], [ false, %18 ]
  ret i1 %69
}

declare zeroext i1 @_Z16AlmostPequalUlpsff(float, float) local_unnamed_addr #2

declare double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16), i8*) local_unnamed_addr #2

declare void @_ZN15SkIntersections9removeOneEi(%class.SkIntersections*, i32) local_unnamed_addr #2

declare void @_ZN15SkIntersections13setCoincidentEi(%class.SkIntersections*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22LineConicIntersections24addNearVerticalEndPointsEddd(%class.LineConicIntersections*, double, double, double) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %6 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %7 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %8 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 5
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %4
  %12 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %7, i64 0, i32 2, i64 0, i64 0
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %13, 0.000000e+00
  br i1 %14, label %25, label %15

15:                                               ; preds = %4, %11
  %16 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %17 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %16, i64 0, i32 0, i32 0, i64 0
  %18 = tail call double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %17, double %1, double %2, double %3) #6
  %19 = fcmp olt double %18, 0.000000e+00
  br i1 %19, label %25, label %20

20:                                               ; preds = %15
  %21 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %22 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %23 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %22, i64 0, i32 0, i32 0, i64 0
  %24 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %21, double 0.000000e+00, double %18, %struct.SkDPoint* dereferenceable(16) %23) #6
  br label %25

25:                                               ; preds = %11, %20, %15
  %26 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %27 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 5
  %28 = load i8, i8* %27, align 2
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %36, label %30

30:                                               ; preds = %25
  %31 = zext i8 %28 to i64
  %32 = add nsw i64 %31, -1
  %33 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %26, i64 0, i32 2, i64 0, i64 %32
  %34 = load double, double* %33, align 8
  %35 = fcmp oeq double %34, 1.000000e+00
  br i1 %35, label %46, label %36

36:                                               ; preds = %30, %25
  %37 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %38 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %37, i64 0, i32 0, i32 0, i64 2
  %39 = tail call double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16) %38, double %1, double %2, double %3) #6
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %46, label %41

41:                                               ; preds = %36
  %42 = load %class.SkIntersections*, %class.SkIntersections** %5, align 8
  %43 = load %struct.SkDConic*, %struct.SkDConic** %6, align 8
  %44 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %43, i64 0, i32 0, i32 0, i64 2
  %45 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %42, double 1.000000e+00, double %39, %struct.SkDPoint* dereferenceable(16) %44) #6
  br label %46

46:                                               ; preds = %41, %36, %30
  tail call void @_ZN22LineConicIntersections20addLineNearEndPointsEv(%class.LineConicIntersections* %0)
  ret void
}

declare double @_ZN7SkDLine11ExactPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

declare double @_ZN7SkDLine10NearPointVERK8SkDPointddd(%struct.SkDPoint* dereferenceable(16), double, double, double) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN22LineConicIntersections16addNearEndPointsEv(%class.LineConicIntersections*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 2
  %3 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 1
  %4 = getelementptr inbounds %class.LineConicIntersections, %class.LineConicIntersections* %0, i64 0, i32 0
  %5 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %6 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 5
  %7 = load i8, i8* %6, align 2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %5, i64 0, i32 2, i64 0, i64 0
  %11 = load double, double* %10, align 8
  %12 = fcmp oeq double %11, 0.000000e+00
  br i1 %12, label %24, label %13

13:                                               ; preds = %1, %9
  %14 = load %struct.SkDLine*, %struct.SkDLine** %3, align 8
  %15 = load %struct.SkDConic*, %struct.SkDConic** %4, align 8
  %16 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %15, i64 0, i32 0, i32 0, i64 0
  %17 = tail call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %14, %struct.SkDPoint* dereferenceable(16) %16, i8* null) #6
  %18 = fcmp olt double %17, 0.000000e+00
  br i1 %18, label %24, label %19

19:                                               ; preds = %13
  %20 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %21 = load %struct.SkDConic*, %struct.SkDConic** %4, align 8
  %22 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %21, i64 0, i32 0, i32 0, i64 0
  %23 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %20, double 0.000000e+00, double %17, %struct.SkDPoint* dereferenceable(16) %22) #6
  br label %24

24:                                               ; preds = %9, %19, %13
  %25 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %26 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %25, i64 0, i32 5
  %27 = load i8, i8* %26, align 2
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %24
  %30 = zext i8 %27 to i64
  %31 = add nsw i64 %30, -1
  %32 = getelementptr inbounds %class.SkIntersections, %class.SkIntersections* %25, i64 0, i32 2, i64 0, i64 %31
  %33 = load double, double* %32, align 8
  %34 = fcmp oeq double %33, 1.000000e+00
  br i1 %34, label %46, label %35

35:                                               ; preds = %29, %24
  %36 = load %struct.SkDLine*, %struct.SkDLine** %3, align 8
  %37 = load %struct.SkDConic*, %struct.SkDConic** %4, align 8
  %38 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %37, i64 0, i32 0, i32 0, i64 2
  %39 = tail call double @_ZNK7SkDLine9nearPointERK8SkDPointPb(%struct.SkDLine* %36, %struct.SkDPoint* dereferenceable(16) %38, i8* null) #6
  %40 = fcmp olt double %39, 0.000000e+00
  br i1 %40, label %46, label %41

41:                                               ; preds = %35
  %42 = load %class.SkIntersections*, %class.SkIntersections** %2, align 8
  %43 = load %struct.SkDConic*, %struct.SkDConic** %4, align 8
  %44 = getelementptr inbounds %struct.SkDConic, %struct.SkDConic* %43, i64 0, i32 0, i32 0, i64 2
  %45 = tail call i32 @_ZN15SkIntersections6insertEddRK8SkDPoint(%class.SkIntersections* %42, double 1.000000e+00, double %39, %struct.SkDPoint* dereferenceable(16) %44) #6
  br label %46

46:                                               ; preds = %41, %35, %29
  tail call void @_ZN22LineConicIntersections20addLineNearEndPointsEv(%class.LineConicIntersections* %0)
  ret void
}

declare double @_ZNK7SkDLine10exactPointERK8SkDPoint(%struct.SkDLine*, %struct.SkDPoint* dereferenceable(16)) local_unnamed_addr #2

declare i32 @_ZN7SkDQuad11RootsValidTEdddPd(double, double, double, double*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
