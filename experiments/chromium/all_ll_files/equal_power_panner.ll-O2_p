; ModuleID = '../../third_party/blink/renderer/platform/audio/equal_power_panner.cc'
source_filename = "../../third_party/blink/renderer/platform/audio/equal_power_panner.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::EqualPowerPanner" = type { %"class.blink::Panner" }
%"class.blink::Panner" = type { i32 (...)** }
%"class.blink::AudioBus" = type { %"class.WTF::ThreadSafeRefCounted", i32, %"class.WTF::Vector", i32, float }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [64 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::AudioChannel"*, i32, i32 }
%"class.blink::AudioChannel" = type <{ i64, float*, %"class.std::__1::unique_ptr", i8, [7 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::AudioArray"* }
%"class.blink::AudioArray" = type <{ float*, float*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN5blink6PannerD2Ev = comdat any

$_ZN5blink16EqualPowerPannerD0Ev = comdat any

$_ZN5blink16EqualPowerPanner5ResetEv = comdat any

$_ZNK5blink16EqualPowerPanner8TailTimeEv = comdat any

$_ZNK5blink16EqualPowerPanner11LatencyTimeEv = comdat any

$_ZNK5blink16EqualPowerPanner22RequiresTailProcessingEv = comdat any

$_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj = comdat any

@_ZTVN5blink16EqualPowerPannerE = hidden unnamed_addr constant { [10 x i8*] } { [10 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::Panner"*)* @_ZN5blink6PannerD2Ev to i8*), i8* bitcast (void (%"class.blink::EqualPowerPanner"*)* @_ZN5blink16EqualPowerPannerD0Ev to i8*), i8* bitcast (void (%"class.blink::EqualPowerPanner"*, double, double, %"class.blink::AudioBus"*, %"class.blink::AudioBus"*, i32, i32)* @_ZN5blink16EqualPowerPanner3PanEddPKNS_8AudioBusEPS1_jNS1_21ChannelInterpretationE to i8*), i8* bitcast (void (%"class.blink::EqualPowerPanner"*, double*, double*, %"class.blink::AudioBus"*, %"class.blink::AudioBus"*, i32, i32)* @_ZN5blink16EqualPowerPanner27PanWithSampleAccurateValuesEPdS1_PKNS_8AudioBusEPS2_jNS2_21ChannelInterpretationE to i8*), i8* bitcast (void (%"class.blink::EqualPowerPanner"*)* @_ZN5blink16EqualPowerPanner5ResetEv to i8*), i8* bitcast (double (%"class.blink::EqualPowerPanner"*)* @_ZNK5blink16EqualPowerPanner8TailTimeEv to i8*), i8* bitcast (double (%"class.blink::EqualPowerPanner"*)* @_ZNK5blink16EqualPowerPanner11LatencyTimeEv to i8*), i8* bitcast (i1 (%"class.blink::EqualPowerPanner"*)* @_ZNK5blink16EqualPowerPanner22RequiresTailProcessingEv to i8*)] }, align 8
@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink16EqualPowerPannerC1Ef = hidden unnamed_addr alias void (%"class.blink::EqualPowerPanner"*, float), void (%"class.blink::EqualPowerPanner"*, float)* @_ZN5blink16EqualPowerPannerC2Ef

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN5blink16EqualPowerPannerC2Ef(%"class.blink::EqualPowerPanner"* nocapture, float) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::EqualPowerPanner", %"class.blink::EqualPowerPanner"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [10 x i8*] }, { [10 x i8*] }* @_ZTVN5blink16EqualPowerPannerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16EqualPowerPanner3PanEddPKNS_8AudioBusEPS1_jNS1_21ChannelInterpretationE(%"class.blink::EqualPowerPanner"* nocapture readnone, double, double, %"class.blink::AudioBus"*, %"class.blink::AudioBus"*, i32, i32) unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %3, i64 0, i32 2, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %3, i64 0, i32 2
  %11 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %10, i32 0) #6
  %12 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %11, i64 0, i32 1
  %13 = load float*, float** %12, align 8
  %14 = icmp eq float* %13, null
  br i1 %14, label %15, label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %11, i64 0, i32 2, i32 0, i32 0, i32 0
  %17 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %17, i64 0, i32 1
  %19 = load float*, float** %18, align 8
  br label %20

20:                                               ; preds = %7, %15
  %21 = phi float* [ %19, %15 ], [ %13, %7 ]
  %22 = icmp ugt i32 %9, 1
  br i1 %22, label %23, label %33

23:                                               ; preds = %20
  %24 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %10, i32 1) #6
  %25 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %24, i64 0, i32 1
  %26 = load float*, float** %25, align 8
  %27 = icmp eq float* %26, null
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %24, i64 0, i32 2, i32 0, i32 0, i32 0
  %30 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %30, i64 0, i32 1
  %32 = load float*, float** %31, align 8
  br label %33

33:                                               ; preds = %28, %23, %20
  %34 = phi float* [ %21, %20 ], [ %32, %28 ], [ %26, %23 ]
  %35 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %4, i32 0) #6
  %36 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %35, i64 0, i32 3
  store i8 0, i8* %36, align 8
  %37 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %35, i64 0, i32 1
  %38 = load float*, float** %37, align 8
  %39 = icmp eq float* %38, null
  br i1 %39, label %40, label %45

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %35, i64 0, i32 2, i32 0, i32 0, i32 0
  %42 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %42, i64 0, i32 1
  %44 = load float*, float** %43, align 8
  br label %45

45:                                               ; preds = %33, %40
  %46 = phi float* [ %44, %40 ], [ %38, %33 ]
  %47 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %4, i32 1) #6
  %48 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %47, i64 0, i32 3
  store i8 0, i8* %48, align 8
  %49 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %47, i64 0, i32 1
  %50 = load float*, float** %49, align 8
  %51 = icmp eq float* %50, null
  br i1 %51, label %52, label %57

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %47, i64 0, i32 2, i32 0, i32 0, i32 0
  %54 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %53, align 8
  %55 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %54, i64 0, i32 1
  %56 = load float*, float** %55, align 8
  br label %57

57:                                               ; preds = %45, %52
  %58 = phi float* [ %56, %52 ], [ %50, %45 ]
  %59 = icmp ne float* %21, null
  %60 = icmp ne float* %34, null
  %61 = and i1 %59, %60
  %62 = icmp ne float* %46, null
  %63 = and i1 %61, %62
  %64 = icmp ne float* %58, null
  %65 = and i1 %63, %64
  br i1 %65, label %66, label %600

66:                                               ; preds = %57
  %67 = fcmp ult double %1, 1.800000e+02
  %68 = fcmp ole double %1, -1.800000e+02
  %69 = select i1 %68, double -1.800000e+02, double %1
  %70 = select i1 %67, double %69, double 1.800000e+02
  %71 = fcmp olt double %70, -9.000000e+01
  br i1 %71, label %72, label %74

72:                                               ; preds = %66
  %73 = fsub double -1.800000e+02, %70
  br label %78

74:                                               ; preds = %66
  %75 = fcmp ogt double %70, 9.000000e+01
  br i1 %75, label %76, label %78

76:                                               ; preds = %74
  %77 = fsub double 1.800000e+02, %70
  br label %78

78:                                               ; preds = %74, %76, %72
  %79 = phi double [ %73, %72 ], [ %77, %76 ], [ %70, %74 ]
  %80 = icmp eq i32 %9, 1
  br i1 %80, label %81, label %84

81:                                               ; preds = %78
  %82 = fadd double %79, 9.000000e+01
  %83 = fdiv double %82, 1.800000e+02
  br label %91

84:                                               ; preds = %78
  %85 = fcmp ugt double %79, 0.000000e+00
  br i1 %85, label %89, label %86

86:                                               ; preds = %84
  %87 = fadd double %79, 9.000000e+01
  %88 = fdiv double %87, 9.000000e+01
  br label %91

89:                                               ; preds = %84
  %90 = fdiv double %79, 9.000000e+01
  br label %91

91:                                               ; preds = %86, %89, %81
  %92 = phi double [ %83, %81 ], [ %88, %86 ], [ %90, %89 ]
  %93 = fmul double %92, 0x3FF921FB54442D18
  %94 = tail call double @_ZN6fdlibm3cosEd(double %93) #6
  %95 = tail call double @_ZN6fdlibm3sinEd(double %93) #6
  br i1 %80, label %96, label %237

96:                                               ; preds = %91
  %97 = icmp eq i32 %5, 0
  br i1 %97, label %600, label %98

98:                                               ; preds = %96
  %99 = add nsw i32 %5, -1
  %100 = zext i32 %99 to i64
  %101 = add nuw nsw i64 %100, 1
  %102 = icmp ult i64 %101, 4
  br i1 %102, label %188, label %103

103:                                              ; preds = %98
  %104 = add nsw i32 %5, -1
  %105 = zext i32 %104 to i64
  %106 = add nuw nsw i64 %105, 1
  %107 = getelementptr float, float* %46, i64 %106
  %108 = getelementptr float, float* %58, i64 %106
  %109 = getelementptr float, float* %21, i64 %106
  %110 = icmp ult float* %46, %108
  %111 = icmp ult float* %58, %107
  %112 = and i1 %110, %111
  %113 = icmp ult float* %46, %109
  %114 = icmp ult float* %21, %107
  %115 = and i1 %113, %114
  %116 = or i1 %112, %115
  %117 = icmp ult float* %58, %109
  %118 = icmp ult float* %21, %108
  %119 = and i1 %117, %118
  %120 = or i1 %116, %119
  br i1 %120, label %188, label %121

121:                                              ; preds = %103
  %122 = and i64 %101, 8589934588
  %123 = getelementptr float, float* %21, i64 %122
  %124 = getelementptr float, float* %46, i64 %122
  %125 = trunc i64 %122 to i32
  %126 = sub i32 %5, %125
  %127 = getelementptr float, float* %58, i64 %122
  %128 = insertelement <4 x double> undef, double %94, i32 0
  %129 = shufflevector <4 x double> %128, <4 x double> undef, <4 x i32> zeroinitializer
  %130 = insertelement <4 x double> undef, double %95, i32 0
  %131 = shufflevector <4 x double> %130, <4 x double> undef, <4 x i32> zeroinitializer
  %132 = add nsw i64 %122, -4
  %133 = lshr exact i64 %132, 2
  %134 = add nuw nsw i64 %133, 1
  %135 = and i64 %134, 1
  %136 = icmp eq i64 %132, 0
  br i1 %136, label %170, label %137

137:                                              ; preds = %121
  %138 = sub nuw nsw i64 %134, %135
  br label %139

139:                                              ; preds = %139, %137
  %140 = phi i64 [ 0, %137 ], [ %167, %139 ]
  %141 = phi i64 [ %138, %137 ], [ %168, %139 ]
  %142 = getelementptr float, float* %21, i64 %140
  %143 = getelementptr float, float* %46, i64 %140
  %144 = getelementptr float, float* %58, i64 %140
  %145 = bitcast float* %142 to <4 x float>*
  %146 = load <4 x float>, <4 x float>* %145, align 4, !alias.scope !2
  %147 = fpext <4 x float> %146 to <4 x double>
  %148 = fmul <4 x double> %129, %147
  %149 = fptrunc <4 x double> %148 to <4 x float>
  %150 = bitcast float* %143 to <4 x float>*
  store <4 x float> %149, <4 x float>* %150, align 4, !alias.scope !5, !noalias !7
  %151 = fmul <4 x double> %131, %147
  %152 = fptrunc <4 x double> %151 to <4 x float>
  %153 = bitcast float* %144 to <4 x float>*
  store <4 x float> %152, <4 x float>* %153, align 4, !alias.scope !9, !noalias !2
  %154 = or i64 %140, 4
  %155 = getelementptr float, float* %21, i64 %154
  %156 = getelementptr float, float* %46, i64 %154
  %157 = getelementptr float, float* %58, i64 %154
  %158 = bitcast float* %155 to <4 x float>*
  %159 = load <4 x float>, <4 x float>* %158, align 4, !alias.scope !2
  %160 = fpext <4 x float> %159 to <4 x double>
  %161 = fmul <4 x double> %129, %160
  %162 = fptrunc <4 x double> %161 to <4 x float>
  %163 = bitcast float* %156 to <4 x float>*
  store <4 x float> %162, <4 x float>* %163, align 4, !alias.scope !5, !noalias !7
  %164 = fmul <4 x double> %131, %160
  %165 = fptrunc <4 x double> %164 to <4 x float>
  %166 = bitcast float* %157 to <4 x float>*
  store <4 x float> %165, <4 x float>* %166, align 4, !alias.scope !9, !noalias !2
  %167 = add i64 %140, 8
  %168 = add i64 %141, -2
  %169 = icmp eq i64 %168, 0
  br i1 %169, label %170, label %139, !llvm.loop !10

170:                                              ; preds = %139, %121
  %171 = phi i64 [ 0, %121 ], [ %167, %139 ]
  %172 = icmp eq i64 %135, 0
  br i1 %172, label %186, label %173

173:                                              ; preds = %170
  %174 = getelementptr float, float* %21, i64 %171
  %175 = getelementptr float, float* %46, i64 %171
  %176 = getelementptr float, float* %58, i64 %171
  %177 = bitcast float* %174 to <4 x float>*
  %178 = load <4 x float>, <4 x float>* %177, align 4, !alias.scope !2
  %179 = fpext <4 x float> %178 to <4 x double>
  %180 = fmul <4 x double> %129, %179
  %181 = fptrunc <4 x double> %180 to <4 x float>
  %182 = bitcast float* %175 to <4 x float>*
  store <4 x float> %181, <4 x float>* %182, align 4, !alias.scope !5, !noalias !7
  %183 = fmul <4 x double> %131, %179
  %184 = fptrunc <4 x double> %183 to <4 x float>
  %185 = bitcast float* %176 to <4 x float>*
  store <4 x float> %184, <4 x float>* %185, align 4, !alias.scope !9, !noalias !2
  br label %186

186:                                              ; preds = %170, %173
  %187 = icmp eq i64 %101, %122
  br i1 %187, label %600, label %188

188:                                              ; preds = %186, %103, %98
  %189 = phi float* [ %21, %103 ], [ %21, %98 ], [ %123, %186 ]
  %190 = phi float* [ %46, %103 ], [ %46, %98 ], [ %124, %186 ]
  %191 = phi i32 [ %5, %103 ], [ %5, %98 ], [ %126, %186 ]
  %192 = phi float* [ %58, %103 ], [ %58, %98 ], [ %127, %186 ]
  %193 = and i32 %191, 1
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %206, label %195

195:                                              ; preds = %188
  %196 = add nsw i32 %191, -1
  %197 = getelementptr inbounds float, float* %189, i64 1
  %198 = load float, float* %189, align 4
  %199 = fpext float %198 to double
  %200 = fmul double %94, %199
  %201 = fptrunc double %200 to float
  %202 = getelementptr inbounds float, float* %190, i64 1
  store float %201, float* %190, align 4
  %203 = fmul double %95, %199
  %204 = fptrunc double %203 to float
  %205 = getelementptr inbounds float, float* %192, i64 1
  store float %204, float* %192, align 4
  br label %206

206:                                              ; preds = %188, %195
  %207 = phi float* [ %189, %188 ], [ %197, %195 ]
  %208 = phi float* [ %190, %188 ], [ %202, %195 ]
  %209 = phi i32 [ %191, %188 ], [ %196, %195 ]
  %210 = phi float* [ %192, %188 ], [ %205, %195 ]
  %211 = icmp eq i32 %191, 1
  br i1 %211, label %600, label %212

212:                                              ; preds = %206, %212
  %213 = phi float* [ %227, %212 ], [ %207, %206 ]
  %214 = phi float* [ %232, %212 ], [ %208, %206 ]
  %215 = phi i32 [ %226, %212 ], [ %209, %206 ]
  %216 = phi float* [ %235, %212 ], [ %210, %206 ]
  %217 = getelementptr inbounds float, float* %213, i64 1
  %218 = load float, float* %213, align 4
  %219 = fpext float %218 to double
  %220 = fmul double %94, %219
  %221 = fptrunc double %220 to float
  %222 = getelementptr inbounds float, float* %214, i64 1
  store float %221, float* %214, align 4
  %223 = fmul double %95, %219
  %224 = fptrunc double %223 to float
  %225 = getelementptr inbounds float, float* %216, i64 1
  store float %224, float* %216, align 4
  %226 = add nsw i32 %215, -2
  %227 = getelementptr inbounds float, float* %213, i64 2
  %228 = load float, float* %217, align 4
  %229 = fpext float %228 to double
  %230 = fmul double %94, %229
  %231 = fptrunc double %230 to float
  %232 = getelementptr inbounds float, float* %214, i64 2
  store float %231, float* %222, align 4
  %233 = fmul double %95, %229
  %234 = fptrunc double %233 to float
  %235 = getelementptr inbounds float, float* %216, i64 2
  store float %234, float* %225, align 4
  %236 = icmp eq i32 %226, 0
  br i1 %236, label %600, label %212, !llvm.loop !12

237:                                              ; preds = %91
  %238 = fcmp ugt double %79, 0.000000e+00
  %239 = icmp eq i32 %5, 0
  br i1 %238, label %386, label %240

240:                                              ; preds = %237
  br i1 %239, label %600, label %241

241:                                              ; preds = %240
  %242 = add nsw i32 %5, -1
  %243 = zext i32 %242 to i64
  %244 = add nuw nsw i64 %243, 1
  %245 = icmp ult i64 %244, 4
  br i1 %245, label %246, label %276

246:                                              ; preds = %384, %276, %241
  %247 = phi float* [ %21, %276 ], [ %21, %241 ], [ %305, %384 ]
  %248 = phi float* [ %34, %276 ], [ %34, %241 ], [ %306, %384 ]
  %249 = phi float* [ %46, %276 ], [ %46, %241 ], [ %307, %384 ]
  %250 = phi i32 [ %5, %276 ], [ %5, %241 ], [ %309, %384 ]
  %251 = phi float* [ %58, %276 ], [ %58, %241 ], [ %310, %384 ]
  %252 = and i32 %250, 1
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %269, label %254

254:                                              ; preds = %246
  %255 = add nsw i32 %250, -1
  %256 = getelementptr inbounds float, float* %247, i64 1
  %257 = load float, float* %247, align 4
  %258 = getelementptr inbounds float, float* %248, i64 1
  %259 = load float, float* %248, align 4
  %260 = fpext float %257 to double
  %261 = fpext float %259 to double
  %262 = fmul double %94, %261
  %263 = fadd double %262, %260
  %264 = fptrunc double %263 to float
  %265 = getelementptr inbounds float, float* %249, i64 1
  store float %264, float* %249, align 4
  %266 = fmul double %95, %261
  %267 = fptrunc double %266 to float
  %268 = getelementptr inbounds float, float* %251, i64 1
  store float %267, float* %251, align 4
  br label %269

269:                                              ; preds = %246, %254
  %270 = phi float* [ %247, %246 ], [ %256, %254 ]
  %271 = phi float* [ %248, %246 ], [ %258, %254 ]
  %272 = phi float* [ %249, %246 ], [ %265, %254 ]
  %273 = phi i32 [ %250, %246 ], [ %255, %254 ]
  %274 = phi float* [ %251, %246 ], [ %268, %254 ]
  %275 = icmp eq i32 %250, 1
  br i1 %275, label %600, label %532

276:                                              ; preds = %241
  %277 = add nsw i32 %5, -1
  %278 = zext i32 %277 to i64
  %279 = add nuw nsw i64 %278, 1
  %280 = getelementptr float, float* %46, i64 %279
  %281 = getelementptr float, float* %58, i64 %279
  %282 = getelementptr float, float* %34, i64 %279
  %283 = getelementptr float, float* %21, i64 %279
  %284 = icmp ult float* %46, %281
  %285 = icmp ult float* %58, %280
  %286 = and i1 %284, %285
  %287 = icmp ult float* %46, %282
  %288 = icmp ult float* %34, %280
  %289 = and i1 %287, %288
  %290 = or i1 %286, %289
  %291 = icmp ult float* %46, %283
  %292 = icmp ult float* %21, %280
  %293 = and i1 %291, %292
  %294 = or i1 %290, %293
  %295 = icmp ult float* %58, %282
  %296 = icmp ult float* %34, %281
  %297 = and i1 %295, %296
  %298 = or i1 %294, %297
  %299 = icmp ult float* %58, %283
  %300 = icmp ult float* %21, %281
  %301 = and i1 %299, %300
  %302 = or i1 %298, %301
  br i1 %302, label %246, label %303

303:                                              ; preds = %276
  %304 = and i64 %244, 8589934588
  %305 = getelementptr float, float* %21, i64 %304
  %306 = getelementptr float, float* %34, i64 %304
  %307 = getelementptr float, float* %46, i64 %304
  %308 = trunc i64 %304 to i32
  %309 = sub i32 %5, %308
  %310 = getelementptr float, float* %58, i64 %304
  %311 = insertelement <4 x double> undef, double %94, i32 0
  %312 = shufflevector <4 x double> %311, <4 x double> undef, <4 x i32> zeroinitializer
  %313 = insertelement <4 x double> undef, double %95, i32 0
  %314 = shufflevector <4 x double> %313, <4 x double> undef, <4 x i32> zeroinitializer
  %315 = add nsw i64 %304, -4
  %316 = lshr exact i64 %315, 2
  %317 = add nuw nsw i64 %316, 1
  %318 = and i64 %317, 1
  %319 = icmp eq i64 %315, 0
  br i1 %319, label %363, label %320

320:                                              ; preds = %303
  %321 = sub nuw nsw i64 %317, %318
  br label %322

322:                                              ; preds = %322, %320
  %323 = phi i64 [ 0, %320 ], [ %360, %322 ]
  %324 = phi i64 [ %321, %320 ], [ %361, %322 ]
  %325 = getelementptr float, float* %21, i64 %323
  %326 = getelementptr float, float* %34, i64 %323
  %327 = getelementptr float, float* %46, i64 %323
  %328 = getelementptr float, float* %58, i64 %323
  %329 = bitcast float* %325 to <4 x float>*
  %330 = load <4 x float>, <4 x float>* %329, align 4, !alias.scope !13
  %331 = bitcast float* %326 to <4 x float>*
  %332 = load <4 x float>, <4 x float>* %331, align 4, !alias.scope !16
  %333 = fpext <4 x float> %330 to <4 x double>
  %334 = fpext <4 x float> %332 to <4 x double>
  %335 = fmul <4 x double> %312, %334
  %336 = fadd <4 x double> %335, %333
  %337 = fptrunc <4 x double> %336 to <4 x float>
  %338 = bitcast float* %327 to <4 x float>*
  store <4 x float> %337, <4 x float>* %338, align 4, !alias.scope !18, !noalias !20
  %339 = fmul <4 x double> %314, %334
  %340 = fptrunc <4 x double> %339 to <4 x float>
  %341 = bitcast float* %328 to <4 x float>*
  store <4 x float> %340, <4 x float>* %341, align 4, !alias.scope !22, !noalias !23
  %342 = or i64 %323, 4
  %343 = getelementptr float, float* %21, i64 %342
  %344 = getelementptr float, float* %34, i64 %342
  %345 = getelementptr float, float* %46, i64 %342
  %346 = getelementptr float, float* %58, i64 %342
  %347 = bitcast float* %343 to <4 x float>*
  %348 = load <4 x float>, <4 x float>* %347, align 4, !alias.scope !13
  %349 = bitcast float* %344 to <4 x float>*
  %350 = load <4 x float>, <4 x float>* %349, align 4, !alias.scope !16
  %351 = fpext <4 x float> %348 to <4 x double>
  %352 = fpext <4 x float> %350 to <4 x double>
  %353 = fmul <4 x double> %312, %352
  %354 = fadd <4 x double> %353, %351
  %355 = fptrunc <4 x double> %354 to <4 x float>
  %356 = bitcast float* %345 to <4 x float>*
  store <4 x float> %355, <4 x float>* %356, align 4, !alias.scope !18, !noalias !20
  %357 = fmul <4 x double> %314, %352
  %358 = fptrunc <4 x double> %357 to <4 x float>
  %359 = bitcast float* %346 to <4 x float>*
  store <4 x float> %358, <4 x float>* %359, align 4, !alias.scope !22, !noalias !23
  %360 = add i64 %323, 8
  %361 = add i64 %324, -2
  %362 = icmp eq i64 %361, 0
  br i1 %362, label %363, label %322, !llvm.loop !24

363:                                              ; preds = %322, %303
  %364 = phi i64 [ 0, %303 ], [ %360, %322 ]
  %365 = icmp eq i64 %318, 0
  br i1 %365, label %384, label %366

366:                                              ; preds = %363
  %367 = getelementptr float, float* %21, i64 %364
  %368 = getelementptr float, float* %34, i64 %364
  %369 = getelementptr float, float* %46, i64 %364
  %370 = getelementptr float, float* %58, i64 %364
  %371 = bitcast float* %367 to <4 x float>*
  %372 = load <4 x float>, <4 x float>* %371, align 4, !alias.scope !13
  %373 = bitcast float* %368 to <4 x float>*
  %374 = load <4 x float>, <4 x float>* %373, align 4, !alias.scope !16
  %375 = fpext <4 x float> %372 to <4 x double>
  %376 = fpext <4 x float> %374 to <4 x double>
  %377 = fmul <4 x double> %312, %376
  %378 = fadd <4 x double> %377, %375
  %379 = fptrunc <4 x double> %378 to <4 x float>
  %380 = bitcast float* %369 to <4 x float>*
  store <4 x float> %379, <4 x float>* %380, align 4, !alias.scope !18, !noalias !20
  %381 = fmul <4 x double> %314, %376
  %382 = fptrunc <4 x double> %381 to <4 x float>
  %383 = bitcast float* %370 to <4 x float>*
  store <4 x float> %382, <4 x float>* %383, align 4, !alias.scope !22, !noalias !23
  br label %384

384:                                              ; preds = %363, %366
  %385 = icmp eq i64 %244, %304
  br i1 %385, label %600, label %246

386:                                              ; preds = %237
  br i1 %239, label %600, label %387

387:                                              ; preds = %386
  %388 = add nsw i32 %5, -1
  %389 = zext i32 %388 to i64
  %390 = add nuw nsw i64 %389, 1
  %391 = icmp ult i64 %390, 4
  br i1 %391, label %392, label %422

392:                                              ; preds = %530, %422, %387
  %393 = phi float* [ %21, %422 ], [ %21, %387 ], [ %451, %530 ]
  %394 = phi float* [ %34, %422 ], [ %34, %387 ], [ %452, %530 ]
  %395 = phi float* [ %46, %422 ], [ %46, %387 ], [ %453, %530 ]
  %396 = phi i32 [ %5, %422 ], [ %5, %387 ], [ %455, %530 ]
  %397 = phi float* [ %58, %422 ], [ %58, %387 ], [ %456, %530 ]
  %398 = and i32 %396, 1
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %415, label %400

400:                                              ; preds = %392
  %401 = add nsw i32 %396, -1
  %402 = getelementptr inbounds float, float* %393, i64 1
  %403 = load float, float* %393, align 4
  %404 = getelementptr inbounds float, float* %394, i64 1
  %405 = load float, float* %394, align 4
  %406 = fpext float %403 to double
  %407 = fmul double %94, %406
  %408 = fptrunc double %407 to float
  %409 = getelementptr inbounds float, float* %395, i64 1
  store float %408, float* %395, align 4
  %410 = fpext float %405 to double
  %411 = fmul double %95, %406
  %412 = fadd double %411, %410
  %413 = fptrunc double %412 to float
  %414 = getelementptr inbounds float, float* %397, i64 1
  store float %413, float* %397, align 4
  br label %415

415:                                              ; preds = %392, %400
  %416 = phi float* [ %393, %392 ], [ %402, %400 ]
  %417 = phi float* [ %394, %392 ], [ %404, %400 ]
  %418 = phi float* [ %395, %392 ], [ %409, %400 ]
  %419 = phi i32 [ %396, %392 ], [ %401, %400 ]
  %420 = phi float* [ %397, %392 ], [ %414, %400 ]
  %421 = icmp eq i32 %396, 1
  br i1 %421, label %600, label %566

422:                                              ; preds = %387
  %423 = add nsw i32 %5, -1
  %424 = zext i32 %423 to i64
  %425 = add nuw nsw i64 %424, 1
  %426 = getelementptr float, float* %46, i64 %425
  %427 = getelementptr float, float* %58, i64 %425
  %428 = getelementptr float, float* %34, i64 %425
  %429 = getelementptr float, float* %21, i64 %425
  %430 = icmp ult float* %46, %427
  %431 = icmp ult float* %58, %426
  %432 = and i1 %430, %431
  %433 = icmp ult float* %46, %428
  %434 = icmp ult float* %34, %426
  %435 = and i1 %433, %434
  %436 = or i1 %432, %435
  %437 = icmp ult float* %46, %429
  %438 = icmp ult float* %21, %426
  %439 = and i1 %437, %438
  %440 = or i1 %436, %439
  %441 = icmp ult float* %58, %428
  %442 = icmp ult float* %34, %427
  %443 = and i1 %441, %442
  %444 = or i1 %440, %443
  %445 = icmp ult float* %58, %429
  %446 = icmp ult float* %21, %427
  %447 = and i1 %445, %446
  %448 = or i1 %444, %447
  br i1 %448, label %392, label %449

449:                                              ; preds = %422
  %450 = and i64 %390, 8589934588
  %451 = getelementptr float, float* %21, i64 %450
  %452 = getelementptr float, float* %34, i64 %450
  %453 = getelementptr float, float* %46, i64 %450
  %454 = trunc i64 %450 to i32
  %455 = sub i32 %5, %454
  %456 = getelementptr float, float* %58, i64 %450
  %457 = insertelement <4 x double> undef, double %94, i32 0
  %458 = shufflevector <4 x double> %457, <4 x double> undef, <4 x i32> zeroinitializer
  %459 = insertelement <4 x double> undef, double %95, i32 0
  %460 = shufflevector <4 x double> %459, <4 x double> undef, <4 x i32> zeroinitializer
  %461 = add nsw i64 %450, -4
  %462 = lshr exact i64 %461, 2
  %463 = add nuw nsw i64 %462, 1
  %464 = and i64 %463, 1
  %465 = icmp eq i64 %461, 0
  br i1 %465, label %509, label %466

466:                                              ; preds = %449
  %467 = sub nuw nsw i64 %463, %464
  br label %468

468:                                              ; preds = %468, %466
  %469 = phi i64 [ 0, %466 ], [ %506, %468 ]
  %470 = phi i64 [ %467, %466 ], [ %507, %468 ]
  %471 = getelementptr float, float* %21, i64 %469
  %472 = getelementptr float, float* %34, i64 %469
  %473 = getelementptr float, float* %46, i64 %469
  %474 = getelementptr float, float* %58, i64 %469
  %475 = bitcast float* %471 to <4 x float>*
  %476 = load <4 x float>, <4 x float>* %475, align 4, !alias.scope !25
  %477 = bitcast float* %472 to <4 x float>*
  %478 = load <4 x float>, <4 x float>* %477, align 4, !alias.scope !28
  %479 = fpext <4 x float> %476 to <4 x double>
  %480 = fmul <4 x double> %458, %479
  %481 = fptrunc <4 x double> %480 to <4 x float>
  %482 = bitcast float* %473 to <4 x float>*
  store <4 x float> %481, <4 x float>* %482, align 4, !alias.scope !30, !noalias !32
  %483 = fpext <4 x float> %478 to <4 x double>
  %484 = fmul <4 x double> %460, %479
  %485 = fadd <4 x double> %484, %483
  %486 = fptrunc <4 x double> %485 to <4 x float>
  %487 = bitcast float* %474 to <4 x float>*
  store <4 x float> %486, <4 x float>* %487, align 4, !alias.scope !34, !noalias !35
  %488 = or i64 %469, 4
  %489 = getelementptr float, float* %21, i64 %488
  %490 = getelementptr float, float* %34, i64 %488
  %491 = getelementptr float, float* %46, i64 %488
  %492 = getelementptr float, float* %58, i64 %488
  %493 = bitcast float* %489 to <4 x float>*
  %494 = load <4 x float>, <4 x float>* %493, align 4, !alias.scope !25
  %495 = bitcast float* %490 to <4 x float>*
  %496 = load <4 x float>, <4 x float>* %495, align 4, !alias.scope !28
  %497 = fpext <4 x float> %494 to <4 x double>
  %498 = fmul <4 x double> %458, %497
  %499 = fptrunc <4 x double> %498 to <4 x float>
  %500 = bitcast float* %491 to <4 x float>*
  store <4 x float> %499, <4 x float>* %500, align 4, !alias.scope !30, !noalias !32
  %501 = fpext <4 x float> %496 to <4 x double>
  %502 = fmul <4 x double> %460, %497
  %503 = fadd <4 x double> %502, %501
  %504 = fptrunc <4 x double> %503 to <4 x float>
  %505 = bitcast float* %492 to <4 x float>*
  store <4 x float> %504, <4 x float>* %505, align 4, !alias.scope !34, !noalias !35
  %506 = add i64 %469, 8
  %507 = add i64 %470, -2
  %508 = icmp eq i64 %507, 0
  br i1 %508, label %509, label %468, !llvm.loop !36

509:                                              ; preds = %468, %449
  %510 = phi i64 [ 0, %449 ], [ %506, %468 ]
  %511 = icmp eq i64 %464, 0
  br i1 %511, label %530, label %512

512:                                              ; preds = %509
  %513 = getelementptr float, float* %21, i64 %510
  %514 = getelementptr float, float* %34, i64 %510
  %515 = getelementptr float, float* %46, i64 %510
  %516 = getelementptr float, float* %58, i64 %510
  %517 = bitcast float* %513 to <4 x float>*
  %518 = load <4 x float>, <4 x float>* %517, align 4, !alias.scope !25
  %519 = bitcast float* %514 to <4 x float>*
  %520 = load <4 x float>, <4 x float>* %519, align 4, !alias.scope !28
  %521 = fpext <4 x float> %518 to <4 x double>
  %522 = fmul <4 x double> %458, %521
  %523 = fptrunc <4 x double> %522 to <4 x float>
  %524 = bitcast float* %515 to <4 x float>*
  store <4 x float> %523, <4 x float>* %524, align 4, !alias.scope !30, !noalias !32
  %525 = fpext <4 x float> %520 to <4 x double>
  %526 = fmul <4 x double> %460, %521
  %527 = fadd <4 x double> %526, %525
  %528 = fptrunc <4 x double> %527 to <4 x float>
  %529 = bitcast float* %516 to <4 x float>*
  store <4 x float> %528, <4 x float>* %529, align 4, !alias.scope !34, !noalias !35
  br label %530

530:                                              ; preds = %509, %512
  %531 = icmp eq i64 %390, %450
  br i1 %531, label %600, label %392

532:                                              ; preds = %269, %532
  %533 = phi float* [ %552, %532 ], [ %270, %269 ]
  %534 = phi float* [ %554, %532 ], [ %271, %269 ]
  %535 = phi float* [ %561, %532 ], [ %272, %269 ]
  %536 = phi i32 [ %551, %532 ], [ %273, %269 ]
  %537 = phi float* [ %564, %532 ], [ %274, %269 ]
  %538 = getelementptr inbounds float, float* %533, i64 1
  %539 = load float, float* %533, align 4
  %540 = getelementptr inbounds float, float* %534, i64 1
  %541 = load float, float* %534, align 4
  %542 = fpext float %539 to double
  %543 = fpext float %541 to double
  %544 = fmul double %94, %543
  %545 = fadd double %544, %542
  %546 = fptrunc double %545 to float
  %547 = getelementptr inbounds float, float* %535, i64 1
  store float %546, float* %535, align 4
  %548 = fmul double %95, %543
  %549 = fptrunc double %548 to float
  %550 = getelementptr inbounds float, float* %537, i64 1
  store float %549, float* %537, align 4
  %551 = add nsw i32 %536, -2
  %552 = getelementptr inbounds float, float* %533, i64 2
  %553 = load float, float* %538, align 4
  %554 = getelementptr inbounds float, float* %534, i64 2
  %555 = load float, float* %540, align 4
  %556 = fpext float %553 to double
  %557 = fpext float %555 to double
  %558 = fmul double %94, %557
  %559 = fadd double %558, %556
  %560 = fptrunc double %559 to float
  %561 = getelementptr inbounds float, float* %535, i64 2
  store float %560, float* %547, align 4
  %562 = fmul double %95, %557
  %563 = fptrunc double %562 to float
  %564 = getelementptr inbounds float, float* %537, i64 2
  store float %563, float* %550, align 4
  %565 = icmp eq i32 %551, 0
  br i1 %565, label %600, label %532, !llvm.loop !37

566:                                              ; preds = %415, %566
  %567 = phi float* [ %586, %566 ], [ %416, %415 ]
  %568 = phi float* [ %588, %566 ], [ %417, %415 ]
  %569 = phi float* [ %593, %566 ], [ %418, %415 ]
  %570 = phi i32 [ %585, %566 ], [ %419, %415 ]
  %571 = phi float* [ %598, %566 ], [ %420, %415 ]
  %572 = getelementptr inbounds float, float* %567, i64 1
  %573 = load float, float* %567, align 4
  %574 = getelementptr inbounds float, float* %568, i64 1
  %575 = load float, float* %568, align 4
  %576 = fpext float %573 to double
  %577 = fmul double %94, %576
  %578 = fptrunc double %577 to float
  %579 = getelementptr inbounds float, float* %569, i64 1
  store float %578, float* %569, align 4
  %580 = fpext float %575 to double
  %581 = fmul double %95, %576
  %582 = fadd double %581, %580
  %583 = fptrunc double %582 to float
  %584 = getelementptr inbounds float, float* %571, i64 1
  store float %583, float* %571, align 4
  %585 = add nsw i32 %570, -2
  %586 = getelementptr inbounds float, float* %567, i64 2
  %587 = load float, float* %572, align 4
  %588 = getelementptr inbounds float, float* %568, i64 2
  %589 = load float, float* %574, align 4
  %590 = fpext float %587 to double
  %591 = fmul double %94, %590
  %592 = fptrunc double %591 to float
  %593 = getelementptr inbounds float, float* %569, i64 2
  store float %592, float* %579, align 4
  %594 = fpext float %589 to double
  %595 = fmul double %95, %590
  %596 = fadd double %595, %594
  %597 = fptrunc double %596 to float
  %598 = getelementptr inbounds float, float* %571, i64 2
  store float %597, float* %584, align 4
  %599 = icmp eq i32 %585, 0
  br i1 %599, label %600, label %566, !llvm.loop !38

600:                                              ; preds = %269, %532, %415, %566, %206, %212, %384, %530, %186, %240, %386, %96, %57
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"*, i32) local_unnamed_addr #3

declare double @_ZN6fdlibm3cosEd(double) local_unnamed_addr #3

declare double @_ZN6fdlibm3sinEd(double) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16EqualPowerPanner20CalculateDesiredGainERdS1_di(%"class.blink::EqualPowerPanner"* nocapture readnone, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), double, i32) local_unnamed_addr #1 align 2 {
  %6 = fcmp ult double %3, 1.800000e+02
  %7 = fcmp ole double %3, -1.800000e+02
  %8 = select i1 %7, double -1.800000e+02, double %3
  %9 = select i1 %6, double %8, double 1.800000e+02
  %10 = fcmp olt double %9, -9.000000e+01
  br i1 %10, label %11, label %13

11:                                               ; preds = %5
  %12 = fsub double -1.800000e+02, %9
  br label %17

13:                                               ; preds = %5
  %14 = fcmp ogt double %9, 9.000000e+01
  br i1 %14, label %15, label %17

15:                                               ; preds = %13
  %16 = fsub double 1.800000e+02, %9
  br label %17

17:                                               ; preds = %13, %15, %11
  %18 = phi double [ %12, %11 ], [ %16, %15 ], [ %9, %13 ]
  %19 = icmp eq i32 %4, 1
  br i1 %19, label %20, label %23

20:                                               ; preds = %17
  %21 = fadd double %18, 9.000000e+01
  %22 = fdiv double %21, 1.800000e+02
  br label %30

23:                                               ; preds = %17
  %24 = fcmp ugt double %18, 0.000000e+00
  br i1 %24, label %28, label %25

25:                                               ; preds = %23
  %26 = fadd double %18, 9.000000e+01
  %27 = fdiv double %26, 9.000000e+01
  br label %30

28:                                               ; preds = %23
  %29 = fdiv double %18, 9.000000e+01
  br label %30

30:                                               ; preds = %25, %28, %20
  %31 = phi double [ %22, %20 ], [ %27, %25 ], [ %29, %28 ]
  %32 = fmul double %31, 0x3FF921FB54442D18
  %33 = tail call double @_ZN6fdlibm3cosEd(double %32) #6
  store double %33, double* %1, align 8
  %34 = tail call double @_ZN6fdlibm3sinEd(double %32) #6
  store double %34, double* %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16EqualPowerPanner27PanWithSampleAccurateValuesEPdS1_PKNS_8AudioBusEPS2_jNS2_21ChannelInterpretationE(%"class.blink::EqualPowerPanner"* nocapture readnone, double* nocapture readonly, double* nocapture readnone, %"class.blink::AudioBus"*, %"class.blink::AudioBus"*, i32, i32) unnamed_addr #1 align 2 {
  %8 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %3, i64 0, i32 2, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"class.blink::AudioBus", %"class.blink::AudioBus"* %3, i64 0, i32 2
  %11 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %10, i32 0) #6
  %12 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %11, i64 0, i32 1
  %13 = load float*, float** %12, align 8
  %14 = icmp eq float* %13, null
  br i1 %14, label %15, label %20

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %11, i64 0, i32 2, i32 0, i32 0, i32 0
  %17 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %17, i64 0, i32 1
  %19 = load float*, float** %18, align 8
  br label %20

20:                                               ; preds = %7, %15
  %21 = phi float* [ %19, %15 ], [ %13, %7 ]
  %22 = icmp ugt i32 %9, 1
  br i1 %22, label %23, label %33

23:                                               ; preds = %20
  %24 = tail call dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %10, i32 1) #6
  %25 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %24, i64 0, i32 1
  %26 = load float*, float** %25, align 8
  %27 = icmp eq float* %26, null
  br i1 %27, label %28, label %33

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %24, i64 0, i32 2, i32 0, i32 0, i32 0
  %30 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %30, i64 0, i32 1
  %32 = load float*, float** %31, align 8
  br label %33

33:                                               ; preds = %28, %23, %20
  %34 = phi float* [ %21, %20 ], [ %32, %28 ], [ %26, %23 ]
  %35 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %4, i32 0) #6
  %36 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %35, i64 0, i32 3
  store i8 0, i8* %36, align 8
  %37 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %35, i64 0, i32 1
  %38 = load float*, float** %37, align 8
  %39 = icmp eq float* %38, null
  br i1 %39, label %40, label %45

40:                                               ; preds = %33
  %41 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %35, i64 0, i32 2, i32 0, i32 0, i32 0
  %42 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %41, align 8
  %43 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %42, i64 0, i32 1
  %44 = load float*, float** %43, align 8
  br label %45

45:                                               ; preds = %33, %40
  %46 = phi float* [ %44, %40 ], [ %38, %33 ]
  %47 = tail call %"class.blink::AudioChannel"* @_ZN5blink8AudioBus13ChannelByTypeEj(%"class.blink::AudioBus"* %4, i32 1) #6
  %48 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %47, i64 0, i32 3
  store i8 0, i8* %48, align 8
  %49 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %47, i64 0, i32 1
  %50 = load float*, float** %49, align 8
  %51 = icmp eq float* %50, null
  br i1 %51, label %52, label %57

52:                                               ; preds = %45
  %53 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %47, i64 0, i32 2, i32 0, i32 0, i32 0
  %54 = load %"class.blink::AudioArray"*, %"class.blink::AudioArray"** %53, align 8
  %55 = getelementptr inbounds %"class.blink::AudioArray", %"class.blink::AudioArray"* %54, i64 0, i32 1
  %56 = load float*, float** %55, align 8
  br label %57

57:                                               ; preds = %45, %52
  %58 = phi float* [ %56, %52 ], [ %50, %45 ]
  %59 = icmp eq i32 %9, 1
  %60 = icmp sgt i32 %5, 0
  br i1 %59, label %64, label %61

61:                                               ; preds = %57
  br i1 %60, label %62, label %157

62:                                               ; preds = %61
  %63 = zext i32 %5 to i64
  br label %103

64:                                               ; preds = %57
  br i1 %60, label %65, label %157

65:                                               ; preds = %64
  %66 = zext i32 %5 to i64
  br label %67

67:                                               ; preds = %87, %65
  %68 = phi i64 [ 0, %65 ], [ %101, %87 ]
  %69 = phi float* [ %21, %65 ], [ %72, %87 ]
  %70 = phi float* [ %46, %65 ], [ %97, %87 ]
  %71 = phi float* [ %58, %65 ], [ %100, %87 ]
  %72 = getelementptr inbounds float, float* %69, i64 1
  %73 = load float, float* %69, align 4
  %74 = getelementptr inbounds double, double* %1, i64 %68
  %75 = load double, double* %74, align 8
  %76 = fcmp ult double %75, 1.800000e+02
  %77 = fcmp ole double %75, -1.800000e+02
  %78 = select i1 %77, double -1.800000e+02, double %75
  %79 = select i1 %76, double %78, double 1.800000e+02
  %80 = fcmp olt double %79, -9.000000e+01
  br i1 %80, label %81, label %83

81:                                               ; preds = %67
  %82 = fsub double -1.800000e+02, %79
  br label %87

83:                                               ; preds = %67
  %84 = fcmp ogt double %79, 9.000000e+01
  br i1 %84, label %85, label %87

85:                                               ; preds = %83
  %86 = fsub double 1.800000e+02, %79
  br label %87

87:                                               ; preds = %81, %83, %85
  %88 = phi double [ %82, %81 ], [ %86, %85 ], [ %79, %83 ]
  %89 = fadd double %88, 9.000000e+01
  %90 = fdiv double %89, 1.800000e+02
  %91 = fmul double %90, 0x3FF921FB54442D18
  %92 = tail call double @_ZN6fdlibm3cosEd(double %91) #6
  %93 = tail call double @_ZN6fdlibm3sinEd(double %91) #6
  %94 = fpext float %73 to double
  %95 = fmul double %92, %94
  %96 = fptrunc double %95 to float
  %97 = getelementptr inbounds float, float* %70, i64 1
  store float %96, float* %70, align 4
  %98 = fmul double %93, %94
  %99 = fptrunc double %98 to float
  %100 = getelementptr inbounds float, float* %71, i64 1
  store float %99, float* %71, align 4
  %101 = add nuw nsw i64 %68, 1
  %102 = icmp eq i64 %101, %66
  br i1 %102, label %157, label %67

103:                                              ; preds = %148, %62
  %104 = phi i64 [ 0, %62 ], [ %155, %148 ]
  %105 = phi float* [ %21, %62 ], [ %153, %148 ]
  %106 = phi float* [ %34, %62 ], [ %152, %148 ]
  %107 = phi float* [ %46, %62 ], [ %151, %148 ]
  %108 = phi float* [ %58, %62 ], [ %150, %148 ]
  %109 = getelementptr inbounds double, double* %1, i64 %104
  %110 = load double, double* %109, align 8
  %111 = fcmp ult double %110, 1.800000e+02
  %112 = fcmp ole double %110, -1.800000e+02
  %113 = select i1 %112, double -1.800000e+02, double %110
  %114 = select i1 %111, double %113, double 1.800000e+02
  %115 = fcmp olt double %114, -9.000000e+01
  br i1 %115, label %116, label %118

116:                                              ; preds = %103
  %117 = fsub double -1.800000e+02, %114
  br label %122

118:                                              ; preds = %103
  %119 = fcmp ogt double %114, 9.000000e+01
  br i1 %119, label %120, label %122

120:                                              ; preds = %118
  %121 = fsub double 1.800000e+02, %114
  br label %122

122:                                              ; preds = %116, %118, %120
  %123 = phi double [ %117, %116 ], [ %121, %120 ], [ %114, %118 ]
  %124 = fcmp ugt double %123, 0.000000e+00
  %125 = fadd double %123, 9.000000e+01
  %126 = select i1 %124, double %123, double %125
  %127 = fdiv double %126, 9.000000e+01
  %128 = fmul double %127, 0x3FF921FB54442D18
  %129 = tail call double @_ZN6fdlibm3cosEd(double %128) #6
  %130 = tail call double @_ZN6fdlibm3sinEd(double %128) #6
  %131 = load double, double* %109, align 8
  %132 = fcmp ugt double %131, 0.000000e+00
  %133 = load float, float* %105, align 4
  %134 = load float, float* %106, align 4
  %135 = fpext float %133 to double
  br i1 %132, label %142, label %136

136:                                              ; preds = %122
  %137 = fpext float %134 to double
  %138 = fmul double %129, %137
  %139 = fadd double %138, %135
  %140 = fptrunc double %139 to float
  store float %140, float* %107, align 4
  %141 = fmul double %130, %137
  br label %148

142:                                              ; preds = %122
  %143 = fmul double %129, %135
  %144 = fptrunc double %143 to float
  store float %144, float* %107, align 4
  %145 = fpext float %134 to double
  %146 = fmul double %130, %135
  %147 = fadd double %146, %145
  br label %148

148:                                              ; preds = %142, %136
  %149 = phi double [ %147, %142 ], [ %141, %136 ]
  %150 = getelementptr inbounds float, float* %108, i64 1
  %151 = getelementptr inbounds float, float* %107, i64 1
  %152 = getelementptr inbounds float, float* %106, i64 1
  %153 = getelementptr inbounds float, float* %105, i64 1
  %154 = fptrunc double %149 to float
  store float %154, float* %108, align 4
  %155 = add nuw nsw i64 %104, 1
  %156 = icmp eq i64 %155, %63
  br i1 %156, label %157, label %103

157:                                              ; preds = %148, %87, %61, %64
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink6PannerD2Ev(%"class.blink::Panner"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16EqualPowerPannerD0Ev(%"class.blink::EqualPowerPanner"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.blink::EqualPowerPanner"* %0 to i8*
  tail call void @free(i8* %2) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink16EqualPowerPanner5ResetEv(%"class.blink::EqualPowerPanner"*) unnamed_addr #1 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK5blink16EqualPowerPanner8TailTimeEv(%"class.blink::EqualPowerPanner"*) unnamed_addr #1 comdat align 2 {
  ret double 0.000000e+00
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK5blink16EqualPowerPanner11LatencyTimeEv(%"class.blink::EqualPowerPanner"*) unnamed_addr #1 comdat align 2 {
  ret double 0.000000e+00
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink16EqualPowerPanner22RequiresTailProcessingEv(%"class.blink::EqualPowerPanner"*) unnamed_addr #1 comdat align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(32) %"class.blink::AudioChannel"* @_ZNK3WTF6VectorIN5blink12AudioChannelELj2ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #1 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #6
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #6
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #6
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::AudioChannel"*, %"class.blink::AudioChannel"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::AudioChannel", %"class.blink::AudioChannel"* %24, i64 %25
  ret %"class.blink::AudioChannel"* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8, !3}
!8 = distinct !{!8, !4}
!9 = !{!8}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
!13 = !{!14}
!14 = distinct !{!14, !15}
!15 = distinct !{!15, !"LVerDomain"}
!16 = !{!17}
!17 = distinct !{!17, !15}
!18 = !{!19}
!19 = distinct !{!19, !15}
!20 = !{!21, !17, !14}
!21 = distinct !{!21, !15}
!22 = !{!21}
!23 = !{!17, !14}
!24 = distinct !{!24, !11}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = !{!31}
!31 = distinct !{!31, !27}
!32 = !{!33, !29, !26}
!33 = distinct !{!33, !27}
!34 = !{!33}
!35 = !{!29, !26}
!36 = distinct !{!36, !11}
!37 = distinct !{!37, !11}
!38 = distinct !{!38, !11}
